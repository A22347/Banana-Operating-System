
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 25 98 00 00       	call   c0009845 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 95 fc 01 00       	call   c001fcba <_init>
c0000025:	c3                   	ret    
c0000026:	bb 66 07 02 c0       	mov    ebx,0xc0020766
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 74 07 02 c0    	cmp    ebx,0xc0020774
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 39 02 c0       	mov    eax,0xc00239d8
c0000049:	3d d8 39 02 c0       	cmp    eax,0xc00239d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 39 02 c0       	push   0xc00239d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 39 02 c0       	mov    eax,0xc00239d8
c0000075:	2d d8 39 02 c0       	sub    eax,0xc00239d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 39 02 c0       	push   0xc00239d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023b60,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 7c 07 02 c0       	mov    ebx,0xc002077c
c00000bb:	81 eb 78 07 02 c0    	sub    ebx,0xc0020778
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 78 07 02 c0       	mov    esi,0xc0020778
c00000ca:	a1 64 3b 02 c0       	mov    eax,ds:0xc0023b64
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 3b 02 c0       	mov    ds:0xc0023b64,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 3b 02 c0       	mov    eax,ds:0xc0023b64
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 39 02 c0       	push   0xc00239d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 3b 02 c0 01 	mov    BYTE PTR ds:0xc0023b60,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 3b 02 c0       	push   0xc0023b68
c000012c:	68 d8 39 02 c0       	push   0xc00239d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 1c 51 01 00       	call   c00153ec <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 46 c1 00 00       	call   c000c42e <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 fa 50 01 00       	call   c00153ec <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 bb 55 01 00       	call   c00158cc <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 fe 5b 01 00       	call   c0015f18 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 b0 3f 02 c0 	lgdtd  ds:0xc0023fb0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 7c 83 00 00       	jmp    c000871e <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax

c00003a4 <memcmp>:
c00003a4:	56                   	push   esi
c00003a5:	53                   	push   ebx
c00003a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003b2:	85 f6                	test   esi,esi
c00003b4:	74 1d                	je     c00003d3 <memcmp+0x2f>
c00003b6:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b8:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003bb:	38 cb                	cmp    bl,cl
c00003bd:	75 19                	jne    c00003d8 <memcmp+0x34>
c00003bf:	01 c6                	add    esi,eax
c00003c1:	eb 0a                	jmp    c00003cd <memcmp+0x29>
c00003c3:	90                   	nop
c00003c4:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c6:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003c9:	38 d9                	cmp    cl,bl
c00003cb:	75 0b                	jne    c00003d8 <memcmp+0x34>
c00003cd:	40                   	inc    eax
c00003ce:	42                   	inc    edx
c00003cf:	39 f0                	cmp    eax,esi
c00003d1:	75 f1                	jne    c00003c4 <memcmp+0x20>
c00003d3:	31 c0                	xor    eax,eax
c00003d5:	5b                   	pop    ebx
c00003d6:	5e                   	pop    esi
c00003d7:	c3                   	ret    
c00003d8:	0f b6 c1             	movzx  eax,cl
c00003db:	29 d8                	sub    eax,ebx
c00003dd:	5b                   	pop    ebx
c00003de:	5e                   	pop    esi
c00003df:	c3                   	ret    

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 80 00 00 00    	jae    c0000478 <memmove+0x98>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	74 74                	je     c0000470 <memmove+0x90>
c00003fc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ff:	8d 75 04             	lea    esi,[ebp+0x4]
c0000402:	39 cd                	cmp    ebp,ecx
c0000404:	0f 93 c1             	setae  cl
c0000407:	39 f3                	cmp    ebx,esi
c0000409:	0f 93 c0             	setae  al
c000040c:	89 c6                	mov    esi,eax
c000040e:	09 ce                	or     esi,ecx
c0000410:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000413:	89 f0                	mov    eax,esi
c0000415:	83 f9 0c             	cmp    ecx,0xc
c0000418:	0f 97 c1             	seta   cl
c000041b:	84 c8                	test   al,cl
c000041d:	74 75                	je     c0000494 <memmove+0xb4>
c000041f:	89 e9                	mov    ecx,ebp
c0000421:	09 d9                	or     ecx,ebx
c0000423:	83 e1 03             	and    ecx,0x3
c0000426:	75 6c                	jne    c0000494 <memmove+0xb4>
c0000428:	89 d7                	mov    edi,edx
c000042a:	89 d9                	mov    ecx,ebx
c000042c:	83 e7 fc             	and    edi,0xfffffffc
c000042f:	89 ee                	mov    esi,ebp
c0000431:	01 df                	add    edi,ebx
c0000433:	90                   	nop
c0000434:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000436:	83 c6 04             	add    esi,0x4
c0000439:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000043c:	83 c1 04             	add    ecx,0x4
c000043f:	39 f9                	cmp    ecx,edi
c0000441:	75 f1                	jne    c0000434 <memmove+0x54>
c0000443:	89 d1                	mov    ecx,edx
c0000445:	89 d7                	mov    edi,edx
c0000447:	83 e1 fc             	and    ecx,0xfffffffc
c000044a:	29 cf                	sub    edi,ecx
c000044c:	01 cb                	add    ebx,ecx
c000044e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000452:	39 ca                	cmp    edx,ecx
c0000454:	74 1a                	je     c0000470 <memmove+0x90>
c0000456:	8a 03                	mov    al,BYTE PTR [ebx]
c0000458:	83 ff 01             	cmp    edi,0x1
c000045b:	88 06                	mov    BYTE PTR [esi],al
c000045d:	74 11                	je     c0000470 <memmove+0x90>
c000045f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000462:	83 ff 02             	cmp    edi,0x2
c0000465:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000468:	74 06                	je     c0000470 <memmove+0x90>
c000046a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000046d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000470:	5b                   	pop    ebx
c0000471:	89 e8                	mov    eax,ebp
c0000473:	5e                   	pop    esi
c0000474:	5f                   	pop    edi
c0000475:	5d                   	pop    ebp
c0000476:	c3                   	ret    
c0000477:	90                   	nop
c0000478:	76 f6                	jbe    c0000470 <memmove+0x90>
c000047a:	85 d2                	test   edx,edx
c000047c:	74 f2                	je     c0000470 <memmove+0x90>
c000047e:	4b                   	dec    ebx
c000047f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000482:	66 90                	xchg   ax,ax
c0000484:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000487:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000048a:	4a                   	dec    edx
c000048b:	75 f7                	jne    c0000484 <memmove+0xa4>
c000048d:	5b                   	pop    ebx
c000048e:	89 e8                	mov    eax,ebp
c0000490:	5e                   	pop    esi
c0000491:	5f                   	pop    edi
c0000492:	5d                   	pop    ebp
c0000493:	c3                   	ret    
c0000494:	01 ea                	add    edx,ebp
c0000496:	89 e9                	mov    ecx,ebp
c0000498:	8a 03                	mov    al,BYTE PTR [ebx]
c000049a:	41                   	inc    ecx
c000049b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000049e:	43                   	inc    ebx
c000049f:	39 d1                	cmp    ecx,edx
c00004a1:	75 f5                	jne    c0000498 <memmove+0xb8>
c00004a3:	eb cb                	jmp    c0000470 <memmove+0x90>
c00004a5:	8d 76 00             	lea    esi,[esi+0x0]

c00004a8 <memset>:
c00004a8:	57                   	push   edi
c00004a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00004ad:	85 c9                	test   ecx,ecx
c00004af:	74 0b                	je     c00004bc <memset+0x14>
c00004b1:	fc                   	cld    
c00004b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00004b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00004ba:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00004bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00004c0:	5f                   	pop    edi
c00004c1:	c3                   	ret    
c00004c2:	66 90                	xchg   ax,ax

c00004c4 <strlen>:
c00004c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00004c8:	31 c0                	xor    eax,eax
c00004ca:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00004cd:	74 09                	je     c00004d8 <strlen+0x14>
c00004cf:	90                   	nop
c00004d0:	40                   	inc    eax
c00004d1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00004d5:	75 f9                	jne    c00004d0 <strlen+0xc>
c00004d7:	c3                   	ret    
c00004d8:	c3                   	ret    
c00004d9:	8d 76 00             	lea    esi,[esi+0x0]

c00004dc <strpbrk>:
c00004dc:	57                   	push   edi
c00004dd:	56                   	push   esi
c00004de:	53                   	push   ebx
c00004df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00004e7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00004e9:	84 db                	test   bl,bl
c00004eb:	74 21                	je     c000050e <strpbrk+0x32>
c00004ed:	8a 07                	mov    al,BYTE PTR [edi]
c00004ef:	84 c0                	test   al,al
c00004f1:	74 14                	je     c0000507 <strpbrk+0x2b>
c00004f3:	38 d8                	cmp    al,bl
c00004f5:	74 19                	je     c0000510 <strpbrk+0x34>
c00004f7:	89 fa                	mov    edx,edi
c00004f9:	eb 05                	jmp    c0000500 <strpbrk+0x24>
c00004fb:	90                   	nop
c00004fc:	38 d9                	cmp    cl,bl
c00004fe:	74 10                	je     c0000510 <strpbrk+0x34>
c0000500:	42                   	inc    edx
c0000501:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000503:	84 c9                	test   cl,cl
c0000505:	75 f5                	jne    c00004fc <strpbrk+0x20>
c0000507:	46                   	inc    esi
c0000508:	8a 1e                	mov    bl,BYTE PTR [esi]
c000050a:	84 db                	test   bl,bl
c000050c:	75 e1                	jne    c00004ef <strpbrk+0x13>
c000050e:	31 f6                	xor    esi,esi
c0000510:	89 f0                	mov    eax,esi
c0000512:	5b                   	pop    ebx
c0000513:	5e                   	pop    esi
c0000514:	5f                   	pop    edi
c0000515:	c3                   	ret    
c0000516:	66 90                	xchg   ax,ax

c0000518 <strtok>:
c0000518:	56                   	push   esi
c0000519:	53                   	push   ebx
c000051a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000051e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000522:	85 db                	test   ebx,ebx
c0000524:	75 07                	jne    c000052d <strtok+0x15>
c0000526:	eb 2c                	jmp    c0000554 <strtok+0x3c>
c0000528:	43                   	inc    ebx
c0000529:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000052d:	56                   	push   esi
c000052e:	53                   	push   ebx
c000052f:	e8 a8 ff ff ff       	call   c00004dc <strpbrk>
c0000534:	5a                   	pop    edx
c0000535:	a3 80 3b 02 c0       	mov    ds:0xc0023b80,eax
c000053a:	59                   	pop    ecx
c000053b:	39 d8                	cmp    eax,ebx
c000053d:	74 e9                	je     c0000528 <strtok+0x10>
c000053f:	85 c0                	test   eax,eax
c0000541:	74 1b                	je     c000055e <strtok+0x46>
c0000543:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000546:	8d 50 01             	lea    edx,[eax+0x1]
c0000549:	89 d8                	mov    eax,ebx
c000054b:	89 15 80 3b 02 c0    	mov    DWORD PTR ds:0xc0023b80,edx
c0000551:	5b                   	pop    ebx
c0000552:	5e                   	pop    esi
c0000553:	c3                   	ret    
c0000554:	8b 1d 80 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023b80
c000055a:	85 db                	test   ebx,ebx
c000055c:	75 cf                	jne    c000052d <strtok+0x15>
c000055e:	31 c0                	xor    eax,eax
c0000560:	5b                   	pop    ebx
c0000561:	5e                   	pop    esi
c0000562:	c3                   	ret    
c0000563:	90                   	nop

c0000564 <strcpy>:
c0000564:	53                   	push   ebx
c0000565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000056d:	89 c3                	mov    ebx,eax
c000056f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000571:	84 d2                	test   dl,dl
c0000573:	74 0d                	je     c0000582 <strcpy+0x1e>
c0000575:	8d 76 00             	lea    esi,[esi+0x0]
c0000578:	88 13                	mov    BYTE PTR [ebx],dl
c000057a:	41                   	inc    ecx
c000057b:	43                   	inc    ebx
c000057c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000057e:	84 d2                	test   dl,dl
c0000580:	75 f6                	jne    c0000578 <strcpy+0x14>
c0000582:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000585:	5b                   	pop    ebx
c0000586:	c3                   	ret    
c0000587:	90                   	nop

c0000588 <strncpy>:
c0000588:	55                   	push   ebp
c0000589:	57                   	push   edi
c000058a:	56                   	push   esi
c000058b:	53                   	push   ebx
c000058c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000590:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000598:	85 c0                	test   eax,eax
c000059a:	74 39                	je     c00005d5 <strncpy+0x4d>
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	8d 48 ff             	lea    ecx,[eax-0x1]
c00005a1:	8d 55 01             	lea    edx,[ebp+0x1]
c00005a4:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00005a7:	84 db                	test   bl,bl
c00005a9:	74 31                	je     c00005dc <strncpy+0x54>
c00005ab:	85 c9                	test   ecx,ecx
c00005ad:	74 26                	je     c00005d5 <strncpy+0x4d>
c00005af:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00005b2:	8d 48 fe             	lea    ecx,[eax-0x2]
c00005b5:	8d 55 02             	lea    edx,[ebp+0x2]
c00005b8:	8d 46 02             	lea    eax,[esi+0x2]
c00005bb:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00005be:	84 db                	test   bl,bl
c00005c0:	75 0f                	jne    c00005d1 <strncpy+0x49>
c00005c2:	eb 18                	jmp    c00005dc <strncpy+0x54>
c00005c4:	40                   	inc    eax
c00005c5:	42                   	inc    edx
c00005c6:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00005c9:	49                   	dec    ecx
c00005ca:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00005cd:	84 db                	test   bl,bl
c00005cf:	74 0b                	je     c00005dc <strncpy+0x54>
c00005d1:	85 c9                	test   ecx,ecx
c00005d3:	75 ef                	jne    c00005c4 <strncpy+0x3c>
c00005d5:	5b                   	pop    ebx
c00005d6:	89 e8                	mov    eax,ebp
c00005d8:	5e                   	pop    esi
c00005d9:	5f                   	pop    edi
c00005da:	5d                   	pop    ebp
c00005db:	c3                   	ret    
c00005dc:	85 c9                	test   ecx,ecx
c00005de:	74 f5                	je     c00005d5 <strncpy+0x4d>
c00005e0:	fc                   	cld    
c00005e1:	31 c0                	xor    eax,eax
c00005e3:	89 d7                	mov    edi,edx
c00005e5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00005e7:	89 e8                	mov    eax,ebp
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	5f                   	pop    edi
c00005ec:	5d                   	pop    ebp
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strcmp>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00005f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005fa:	8a 16                	mov    dl,BYTE PTR [esi]
c00005fc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005ff:	38 d1                	cmp    cl,dl
c0000601:	75 1d                	jne    c0000620 <strcmp+0x30>
c0000603:	84 c9                	test   cl,cl
c0000605:	74 21                	je     c0000628 <strcmp+0x38>
c0000607:	b8 01 00 00 00       	mov    eax,0x1
c000060c:	eb 07                	jmp    c0000615 <strcmp+0x25>
c000060e:	66 90                	xchg   ax,ax
c0000610:	40                   	inc    eax
c0000611:	84 d2                	test   dl,dl
c0000613:	74 13                	je     c0000628 <strcmp+0x38>
c0000615:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000618:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000061c:	38 ca                	cmp    dl,cl
c000061e:	74 f0                	je     c0000610 <strcmp+0x20>
c0000620:	0f b6 c2             	movzx  eax,dl
c0000623:	5b                   	pop    ebx
c0000624:	29 c8                	sub    eax,ecx
c0000626:	5e                   	pop    esi
c0000627:	c3                   	ret    
c0000628:	31 c0                	xor    eax,eax
c000062a:	5b                   	pop    ebx
c000062b:	5e                   	pop    esi
c000062c:	c3                   	ret    
c000062d:	8d 76 00             	lea    esi,[esi+0x0]

c0000630 <strchr>:
c0000630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000634:	8a 10                	mov    dl,BYTE PTR [eax]
c0000636:	84 d2                	test   dl,dl
c0000638:	74 15                	je     c000064f <strchr+0x1f>
c000063a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000063e:	38 ca                	cmp    dl,cl
c0000640:	75 06                	jne    c0000648 <strchr+0x18>
c0000642:	eb 0e                	jmp    c0000652 <strchr+0x22>
c0000644:	38 ca                	cmp    dl,cl
c0000646:	74 09                	je     c0000651 <strchr+0x21>
c0000648:	40                   	inc    eax
c0000649:	8a 10                	mov    dl,BYTE PTR [eax]
c000064b:	84 d2                	test   dl,dl
c000064d:	75 f5                	jne    c0000644 <strchr+0x14>
c000064f:	31 c0                	xor    eax,eax
c0000651:	c3                   	ret    
c0000652:	c3                   	ret    
c0000653:	90                   	nop

c0000654 <strncmp>:
c0000654:	57                   	push   edi
c0000655:	56                   	push   esi
c0000656:	53                   	push   ebx
c0000657:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000065b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000065f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000663:	85 ff                	test   edi,edi
c0000665:	74 28                	je     c000068f <strncmp+0x3b>
c0000667:	8a 16                	mov    dl,BYTE PTR [esi]
c0000669:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066c:	38 d1                	cmp    cl,dl
c000066e:	75 28                	jne    c0000698 <strncmp+0x44>
c0000670:	8d 46 01             	lea    eax,[esi+0x1]
c0000673:	84 c9                	test   cl,cl
c0000675:	74 18                	je     c000068f <strncmp+0x3b>
c0000677:	01 fe                	add    esi,edi
c0000679:	eb 0f                	jmp    c000068a <strncmp+0x36>
c000067b:	90                   	nop
c000067c:	8a 10                	mov    dl,BYTE PTR [eax]
c000067e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000681:	38 ca                	cmp    dl,cl
c0000683:	75 13                	jne    c0000698 <strncmp+0x44>
c0000685:	40                   	inc    eax
c0000686:	84 d2                	test   dl,dl
c0000688:	74 05                	je     c000068f <strncmp+0x3b>
c000068a:	43                   	inc    ebx
c000068b:	39 c6                	cmp    esi,eax
c000068d:	75 ed                	jne    c000067c <strncmp+0x28>
c000068f:	5b                   	pop    ebx
c0000690:	31 c0                	xor    eax,eax
c0000692:	5e                   	pop    esi
c0000693:	5f                   	pop    edi
c0000694:	c3                   	ret    
c0000695:	8d 76 00             	lea    esi,[esi+0x0]
c0000698:	5b                   	pop    ebx
c0000699:	0f b6 c2             	movzx  eax,dl
c000069c:	5e                   	pop    esi
c000069d:	29 c8                	sub    eax,ecx
c000069f:	5f                   	pop    edi
c00006a0:	c3                   	ret    
c00006a1:	8d 76 00             	lea    esi,[esi+0x0]

c00006a4 <strcat>:
c00006a4:	56                   	push   esi
c00006a5:	53                   	push   ebx
c00006a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006ae:	89 c3                	mov    ebx,eax
c00006b0:	eb 04                	jmp    c00006b6 <strcat+0x12>
c00006b2:	66 90                	xchg   ax,ax
c00006b4:	89 d3                	mov    ebx,edx
c00006b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00006b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006bd:	75 f5                	jne    c00006b4 <strcat+0x10>
c00006bf:	31 d2                	xor    edx,edx
c00006c1:	8d 76 00             	lea    esi,[esi+0x0]
c00006c4:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00006c7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00006ca:	42                   	inc    edx
c00006cb:	84 c9                	test   cl,cl
c00006cd:	75 f5                	jne    c00006c4 <strcat+0x20>
c00006cf:	5b                   	pop    ebx
c00006d0:	5e                   	pop    esi
c00006d1:	c3                   	ret    
c00006d2:	66 90                	xchg   ax,ax

c00006d4 <strncat>:
c00006d4:	56                   	push   esi
c00006d5:	53                   	push   ebx
c00006d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006e2:	85 f6                	test   esi,esi
c00006e4:	74 1e                	je     c0000704 <strncat+0x30>
c00006e6:	89 c2                	mov    edx,eax
c00006e8:	42                   	inc    edx
c00006e9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00006ed:	75 f9                	jne    c00006e8 <strncat+0x14>
c00006ef:	01 ce                	add    esi,ecx
c00006f1:	eb 06                	jmp    c00006f9 <strncat+0x25>
c00006f3:	90                   	nop
c00006f4:	39 f1                	cmp    ecx,esi
c00006f6:	74 10                	je     c0000708 <strncat+0x34>
c00006f8:	42                   	inc    edx
c00006f9:	41                   	inc    ecx
c00006fa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006fd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000700:	84 db                	test   bl,bl
c0000702:	75 f0                	jne    c00006f4 <strncat+0x20>
c0000704:	5b                   	pop    ebx
c0000705:	5e                   	pop    esi
c0000706:	c3                   	ret    
c0000707:	90                   	nop
c0000708:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000070b:	5b                   	pop    ebx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax

c0000710 <strstr>:
c0000710:	57                   	push   edi
c0000711:	56                   	push   esi
c0000712:	53                   	push   ebx
c0000713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000717:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000071b:	57                   	push   edi
c000071c:	e8 a3 fd ff ff       	call   c00004c4 <strlen>
c0000721:	59                   	pop    ecx
c0000722:	85 c0                	test   eax,eax
c0000724:	74 2a                	je     c0000750 <strstr+0x40>
c0000726:	89 c6                	mov    esi,eax
c0000728:	eb 12                	jmp    c000073c <strstr+0x2c>
c000072a:	66 90                	xchg   ax,ax
c000072c:	56                   	push   esi
c000072d:	57                   	push   edi
c000072e:	53                   	push   ebx
c000072f:	e8 70 fc ff ff       	call   c00003a4 <memcmp>
c0000734:	83 c4 0c             	add    esp,0xc
c0000737:	85 c0                	test   eax,eax
c0000739:	74 15                	je     c0000750 <strstr+0x40>
c000073b:	43                   	inc    ebx
c000073c:	53                   	push   ebx
c000073d:	e8 82 fd ff ff       	call   c00004c4 <strlen>
c0000742:	5a                   	pop    edx
c0000743:	39 f0                	cmp    eax,esi
c0000745:	73 e5                	jae    c000072c <strstr+0x1c>
c0000747:	5b                   	pop    ebx
c0000748:	31 c0                	xor    eax,eax
c000074a:	5e                   	pop    esi
c000074b:	5f                   	pop    edi
c000074c:	c3                   	ret    
c000074d:	8d 76 00             	lea    esi,[esi+0x0]
c0000750:	89 d8                	mov    eax,ebx
c0000752:	5b                   	pop    ebx
c0000753:	5e                   	pop    esi
c0000754:	5f                   	pop    edi
c0000755:	c3                   	ret    
c0000756:	66 90                	xchg   ax,ax

c0000758 <toupper>:
c0000758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000075c:	0f b6 d0             	movzx  edx,al
c000075f:	f6 82 80 07 02 c0 02 	test   BYTE PTR [edx-0x3ffdf880],0x2
c0000766:	74 03                	je     c000076b <toupper+0x13>
c0000768:	83 e8 20             	sub    eax,0x20
c000076b:	c3                   	ret    

c000076c <tolower>:
c000076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000770:	0f b6 d0             	movzx  edx,al
c0000773:	f6 82 80 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf880],0x1
c000077a:	74 03                	je     c000077f <tolower+0x13>
c000077c:	83 c0 20             	add    eax,0x20
c000077f:	c3                   	ret    

c0000780 <simple_strtoul>:
c0000780:	55                   	push   ebp
c0000781:	57                   	push   edi
c0000782:	56                   	push   esi
c0000783:	53                   	push   ebx
c0000784:	83 ec 08             	sub    esp,0x8
c0000787:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000078b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000078f:	90                   	nop
c0000790:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000793:	f6 82 80 07 02 c0 08 	test   BYTE PTR [edx-0x3ffdf880],0x8
c000079a:	75 05                	jne    c00007a1 <simple_strtoul+0x21>
c000079c:	80 fa 09             	cmp    dl,0x9
c000079f:	75 03                	jne    c00007a4 <simple_strtoul+0x24>
c00007a1:	41                   	inc    ecx
c00007a2:	eb ec                	jmp    c0000790 <simple_strtoul+0x10>
c00007a4:	80 fa 2d             	cmp    dl,0x2d
c00007a7:	0f 84 1b 01 00 00    	je     c00008c8 <simple_strtoul+0x148>
c00007ad:	80 fa 2b             	cmp    dl,0x2b
c00007b0:	0f 84 c2 00 00 00    	je     c0000878 <simple_strtoul+0xf8>
c00007b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00007be:	85 f6                	test   esi,esi
c00007c0:	0f 85 c3 00 00 00    	jne    c0000889 <simple_strtoul+0x109>
c00007c6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00007c8:	80 fa 30             	cmp    dl,0x30
c00007cb:	0f 84 47 01 00 00    	je     c0000918 <simple_strtoul+0x198>
c00007d1:	be 0a 00 00 00       	mov    esi,0xa
c00007d6:	84 d2                	test   dl,dl
c00007d8:	0f 84 6f 01 00 00    	je     c000094d <simple_strtoul+0x1cd>
c00007de:	31 ed                	xor    ebp,ebp
c00007e0:	31 ff                	xor    edi,edi
c00007e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00007e9:	eb 2b                	jmp    c0000816 <simple_strtoul+0x96>
c00007eb:	90                   	nop
c00007ec:	83 eb 30             	sub    ebx,0x30
c00007ef:	39 f3                	cmp    ebx,esi
c00007f1:	73 4d                	jae    c0000840 <simple_strtoul+0xc0>
c00007f3:	31 d2                	xor    edx,edx
c00007f5:	89 d8                	mov    eax,ebx
c00007f7:	f7 d0                	not    eax
c00007f9:	f7 f6                	div    esi
c00007fb:	39 f8                	cmp    eax,edi
c00007fd:	0f 82 b1 00 00 00    	jb     c00008b4 <simple_strtoul+0x134>
c0000803:	0f af fe             	imul   edi,esi
c0000806:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000080d:	01 df                	add    edi,ebx
c000080f:	41                   	inc    ecx
c0000810:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 2a                	je     c0000840 <simple_strtoul+0xc0>
c0000816:	0f b6 da             	movzx  ebx,dl
c0000819:	f6 83 80 07 02 c0 04 	test   BYTE PTR [ebx-0x3ffdf880],0x4
c0000820:	75 ca                	jne    c00007ec <simple_strtoul+0x6c>
c0000822:	0f be d2             	movsx  edx,dl
c0000825:	52                   	push   edx
c0000826:	e8 2d ff ff ff       	call   c0000758 <toupper>
c000082b:	5b                   	pop    ebx
c000082c:	0f b6 d0             	movzx  edx,al
c000082f:	f6 82 80 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf880],0x1
c0000836:	74 08                	je     c0000840 <simple_strtoul+0xc0>
c0000838:	8d 58 c9             	lea    ebx,[eax-0x37]
c000083b:	39 f3                	cmp    ebx,esi
c000083d:	72 b4                	jb     c00007f3 <simple_strtoul+0x73>
c000083f:	90                   	nop
c0000840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000844:	85 c0                	test   eax,eax
c0000846:	74 14                	je     c000085c <simple_strtoul+0xdc>
c0000848:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000084b:	09 f8                	or     eax,edi
c000084d:	75 71                	jne    c00008c0 <simple_strtoul+0x140>
c000084f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000857:	31 ff                	xor    edi,edi
c0000859:	89 30                	mov    DWORD PTR [eax],esi
c000085b:	90                   	nop
c000085c:	4d                   	dec    ebp
c000085d:	75 05                	jne    c0000864 <simple_strtoul+0xe4>
c000085f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000864:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000869:	75 02                	jne    c000086d <simple_strtoul+0xed>
c000086b:	f7 df                	neg    edi
c000086d:	83 c4 08             	add    esp,0x8
c0000870:	89 f8                	mov    eax,edi
c0000872:	5b                   	pop    ebx
c0000873:	5e                   	pop    esi
c0000874:	5f                   	pop    edi
c0000875:	5d                   	pop    ebp
c0000876:	c3                   	ret    
c0000877:	90                   	nop
c0000878:	41                   	inc    ecx
c0000879:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000881:	85 f6                	test   esi,esi
c0000883:	0f 84 3d ff ff ff    	je     c00007c6 <simple_strtoul+0x46>
c0000889:	8d 46 fe             	lea    eax,[esi-0x2]
c000088c:	83 f8 22             	cmp    eax,0x22
c000088f:	77 6a                	ja     c00008fb <simple_strtoul+0x17b>
c0000891:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000893:	83 fe 08             	cmp    esi,0x8
c0000896:	0f 84 a2 00 00 00    	je     c000093e <simple_strtoul+0x1be>
c000089c:	83 fe 10             	cmp    esi,0x10
c000089f:	0f 85 31 ff ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c00008a5:	80 fa 30             	cmp    dl,0x30
c00008a8:	74 2c                	je     c00008d6 <simple_strtoul+0x156>
c00008aa:	be 10 00 00 00       	mov    esi,0x10
c00008af:	e9 22 ff ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008b4:	bd 01 00 00 00       	mov    ebp,0x1
c00008b9:	31 ff                	xor    edi,edi
c00008bb:	e9 4f ff ff ff       	jmp    c000080f <simple_strtoul+0x8f>
c00008c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00008c4:	89 08                	mov    DWORD PTR [eax],ecx
c00008c6:	eb 94                	jmp    c000085c <simple_strtoul+0xdc>
c00008c8:	41                   	inc    ecx
c00008c9:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d1:	e9 e8 fe ff ff       	jmp    c00007be <simple_strtoul+0x3e>
c00008d6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008da:	88 04 24             	mov    BYTE PTR [esp],al
c00008dd:	50                   	push   eax
c00008de:	e8 89 fe ff ff       	call   c000076c <tolower>
c00008e3:	5e                   	pop    esi
c00008e4:	83 f8 78             	cmp    eax,0x78
c00008e7:	0f 84 84 00 00 00    	je     c0000971 <simple_strtoul+0x1f1>
c00008ed:	41                   	inc    ecx
c00008ee:	be 10 00 00 00       	mov    esi,0x10
c00008f3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c00008f6:	e9 db fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c00008fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00008ff:	85 ff                	test   edi,edi
c0000901:	74 5c                	je     c000095f <simple_strtoul+0x1df>
c0000903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000907:	85 c9                	test   ecx,ecx
c0000909:	75 4e                	jne    c0000959 <simple_strtoul+0x1d9>
c000090b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000911:	31 ff                	xor    edi,edi
c0000913:	e9 4c ff ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000918:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000091c:	88 04 24             	mov    BYTE PTR [esp],al
c000091f:	50                   	push   eax
c0000920:	e8 47 fe ff ff       	call   c000076c <tolower>
c0000925:	5d                   	pop    ebp
c0000926:	83 f8 78             	cmp    eax,0x78
c0000929:	74 3b                	je     c0000966 <simple_strtoul+0x1e6>
c000092b:	41                   	inc    ecx
c000092c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000092f:	80 fa 30             	cmp    dl,0x30
c0000932:	74 13                	je     c0000947 <simple_strtoul+0x1c7>
c0000934:	be 08 00 00 00       	mov    esi,0x8
c0000939:	e9 98 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>
c000093e:	80 fa 30             	cmp    dl,0x30
c0000941:	0f 85 8f fe ff ff    	jne    c00007d6 <simple_strtoul+0x56>
c0000947:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c000094a:	41                   	inc    ecx
c000094b:	eb e7                	jmp    c0000934 <simple_strtoul+0x1b4>
c000094d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000951:	85 d2                	test   edx,edx
c0000953:	74 0a                	je     c000095f <simple_strtoul+0x1df>
c0000955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000959:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000095d:	89 30                	mov    DWORD PTR [eax],esi
c000095f:	31 ff                	xor    edi,edi
c0000961:	e9 fe fe ff ff       	jmp    c0000864 <simple_strtoul+0xe4>
c0000966:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000969:	83 c1 02             	add    ecx,0x2
c000096c:	e9 34 ff ff ff       	jmp    c00008a5 <simple_strtoul+0x125>
c0000971:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000974:	be 10 00 00 00       	mov    esi,0x10
c0000979:	83 c1 02             	add    ecx,0x2
c000097c:	e9 55 fe ff ff       	jmp    c00007d6 <simple_strtoul+0x56>

c0000981 <largebin_index>:
c0000981:	89 c2                	mov    edx,eax
c0000983:	c1 ea 08             	shr    edx,0x8
c0000986:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098c:	77 10                	ja     c000099e <largebin_index+0x1d>
c000098e:	0f bd d2             	bsr    edx,edx
c0000991:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000994:	d3 e8                	shr    eax,cl
c0000996:	83 e0 03             	and    eax,0x3
c0000999:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099d:	c3                   	ret    
c000099e:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a3:	c3                   	ret    

c00009a4 <malloc_init_state>:
c00009a4:	53                   	push   ebx
c00009a5:	8d 50 34             	lea    edx,[eax+0x34]
c00009a8:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ae:	89 d1                	mov    ecx,edx
c00009b0:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b3:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b6:	83 c2 08             	add    edx,0x8
c00009b9:	39 da                	cmp    edx,ebx
c00009bb:	75 f3                	jne    c00009b0 <malloc_init_state+0xc>
c00009bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c9:	83 e2 03             	and    edx,0x3
c00009cc:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d6:	83 ca 48             	or     edx,0x48
c00009d9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ed:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f4:	89 10                	mov    DWORD PTR [eax],edx
c00009f6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a03:	5b                   	pop    ebx
c0000a04:	c3                   	ret    

c0000a05 <malloc_consolidate>:
c0000a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a07:	85 d2                	test   edx,edx
c0000a09:	0f 84 d8 00 00 00    	je     c0000ae7 <malloc_consolidate+0xe2>
c0000a0f:	55                   	push   ebp
c0000a10:	83 e2 fd             	and    edx,0xfffffffd
c0000a13:	57                   	push   edi
c0000a14:	89 c5                	mov    ebp,eax
c0000a16:	56                   	push   esi
c0000a17:	8d 78 34             	lea    edi,[eax+0x34]
c0000a1a:	53                   	push   ebx
c0000a1b:	83 ec 10             	sub    esp,0x10
c0000a1e:	89 10                	mov    DWORD PTR [eax],edx
c0000a20:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a24:	c1 ea 03             	shr    edx,0x3
c0000a27:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a32:	85 d2                	test   edx,edx
c0000a34:	0f 84 98 00 00 00    	je     c0000ad2 <malloc_consolidate+0xcd>
c0000a3a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a41:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a44:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4b:	89 f9                	mov    ecx,edi
c0000a4d:	83 e1 fe             	and    ecx,0xfffffffe
c0000a50:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a53:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a56:	83 e3 fc             	and    ebx,0xfffffffc
c0000a59:	83 e7 01             	and    edi,0x1
c0000a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5f:	75 14                	jne    c0000a75 <malloc_consolidate+0x70>
c0000a61:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a63:	29 fa                	sub    edx,edi
c0000a65:	01 f9                	add    ecx,edi
c0000a67:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a6a:	89 fb                	mov    ebx,edi
c0000a6c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a72:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a75:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a78:	74 40                	je     c0000aba <malloc_consolidate+0xb5>
c0000a7a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a80:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a84:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a87:	83 e7 01             	and    edi,0x1
c0000a8a:	75 0e                	jne    c0000a9a <malloc_consolidate+0x95>
c0000a8c:	01 d9                	add    ecx,ebx
c0000a8e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a91:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a97:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a9a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9d:	89 ce                	mov    esi,ecx
c0000a9f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa2:	83 ce 01             	or     esi,0x1
c0000aa5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa8:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aab:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aae:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ab2:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab5:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab8:	eb 0c                	jmp    c0000ac6 <malloc_consolidate+0xc1>
c0000aba:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abd:	83 c9 01             	or     ecx,0x1
c0000ac0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000aca:	85 d2                	test   edx,edx
c0000acc:	0f 85 6f ff ff ff    	jne    c0000a41 <malloc_consolidate+0x3c>
c0000ad2:	83 c5 04             	add    ebp,0x4
c0000ad5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad9:	0f 85 50 ff ff ff    	jne    c0000a2f <malloc_consolidate+0x2a>
c0000adf:	83 c4 10             	add    esp,0x10
c0000ae2:	5b                   	pop    ebx
c0000ae3:	5e                   	pop    esi
c0000ae4:	5f                   	pop    edi
c0000ae5:	5d                   	pop    ebp
c0000ae6:	c3                   	ret    
c0000ae7:	e9 b8 fe ff ff       	jmp    c00009a4 <malloc_init_state>

c0000aec <dlfree>:
c0000aec:	57                   	push   edi
c0000aed:	56                   	push   esi
c0000aee:	53                   	push   ebx
c0000aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af3:	85 db                	test   ebx,ebx
c0000af5:	0f 84 e2 00 00 00    	je     c0000bdd <dlfree+0xf1>
c0000afb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afe:	8b 0d a0 3b 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ba0
c0000b04:	89 f0                	mov    eax,esi
c0000b06:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b09:	83 e0 fc             	and    eax,0xfffffffc
c0000b0c:	39 c1                	cmp    ecx,eax
c0000b0e:	72 24                	jb     c0000b34 <dlfree+0x48>
c0000b10:	83 c9 03             	or     ecx,0x3
c0000b13:	c1 e8 03             	shr    eax,0x3
c0000b16:	89 0d a0 3b 02 c0    	mov    DWORD PTR ds:0xc0023ba0,ecx
c0000b1c:	83 e8 02             	sub    eax,0x2
c0000b1f:	8b 0c 85 a4 3b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc45c]
c0000b26:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b28:	89 14 85 a4 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc45c],edx
c0000b2f:	e9 a9 00 00 00       	jmp    c0000bdd <dlfree+0xf1>
c0000b34:	83 e6 02             	and    esi,0x2
c0000b37:	0f 85 a0 00 00 00    	jne    c0000bdd <dlfree+0xf1>
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b43:	89 0d a0 3b 02 c0    	mov    DWORD PTR ds:0xc0023ba0,ecx
c0000b49:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4c:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b53:	75 13                	jne    c0000b68 <dlfree+0x7c>
c0000b55:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b58:	29 da                	sub    edx,ebx
c0000b5a:	01 d8                	add    eax,ebx
c0000b5c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b62:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b65:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b68:	39 35 cc 3b 02 c0    	cmp    DWORD PTR ds:0xc0023bcc,esi
c0000b6e:	74 40                	je     c0000bb0 <dlfree+0xc4>
c0000b70:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b74:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b77:	80 e3 01             	and    bl,0x1
c0000b7a:	75 0e                	jne    c0000b8a <dlfree+0x9e>
c0000b7c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b82:	01 c8                	add    eax,ecx
c0000b84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b8a:	8b 0d dc 3b 02 c0    	mov    ecx,DWORD PTR ds:0xc0023bdc
c0000b90:	c7 42 0c d4 3b 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023bd4
c0000b97:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b9a:	89 15 dc 3b 02 c0    	mov    DWORD PTR ds:0xc0023bdc,edx
c0000ba0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba3:	89 c1                	mov    ecx,eax
c0000ba5:	83 c9 01             	or     ecx,0x1
c0000ba8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bab:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bae:	eb 10                	jmp    c0000bc0 <dlfree+0xd4>
c0000bb0:	01 c8                	add    eax,ecx
c0000bb2:	89 c1                	mov    ecx,eax
c0000bb4:	83 c9 01             	or     ecx,0x1
c0000bb7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bba:	89 15 cc 3b 02 c0    	mov    DWORD PTR ds:0xc0023bcc,edx
c0000bc0:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc5:	76 16                	jbe    c0000bdd <dlfree+0xf1>
c0000bc7:	f6 05 a0 3b 02 c0 02 	test   BYTE PTR ds:0xc0023ba0,0x2
c0000bce:	74 0d                	je     c0000bdd <dlfree+0xf1>
c0000bd0:	5b                   	pop    ebx
c0000bd1:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0000bd6:	5e                   	pop    esi
c0000bd7:	5f                   	pop    edi
c0000bd8:	e9 28 fe ff ff       	jmp    c0000a05 <malloc_consolidate>
c0000bdd:	5b                   	pop    ebx
c0000bde:	5e                   	pop    esi
c0000bdf:	5f                   	pop    edi
c0000be0:	c3                   	ret    

c0000be1 <sYSMALLOc>:
c0000be1:	55                   	push   ebp
c0000be2:	57                   	push   edi
c0000be3:	56                   	push   esi
c0000be4:	53                   	push   ebx
c0000be5:	89 d3                	mov    ebx,edx
c0000be7:	83 ec 2c             	sub    esp,0x2c
c0000bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000bee:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfe:	74 1f                	je     c0000c1f <sYSMALLOc+0x3e>
c0000c00:	89 d8                	mov    eax,ebx
c0000c02:	e8 fe fd ff ff       	call   c0000a05 <malloc_consolidate>
c0000c07:	83 ec 0c             	sub    esp,0xc
c0000c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0e:	83 e8 07             	sub    eax,0x7
c0000c11:	50                   	push   eax
c0000c12:	e8 30 02 00 00       	call   c0000e47 <dlmalloc>
c0000c17:	83 c4 10             	add    esp,0x10
c0000c1a:	e9 20 02 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c1f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c22:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c2b:	83 e0 fc             	and    eax,0xfffffffc
c0000c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c36:	83 c0 10             	add    eax,0x10
c0000c39:	01 c1                	add    ecx,eax
c0000c3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c46:	74 04                	je     c0000c4c <sYSMALLOc+0x6b>
c0000c48:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c4c:	f7 da                	neg    edx
c0000c4e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c56:	21 d1                	and    ecx,edx
c0000c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c5c:	7f 07                	jg     c0000c65 <sYSMALLOc+0x84>
c0000c5e:	31 c0                	xor    eax,eax
c0000c60:	e9 da 01 00 00       	jmp    c0000e3f <sYSMALLOc+0x25e>
c0000c65:	83 ec 0c             	sub    esp,0xc
c0000c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c6c:	e8 d7 89 00 00       	call   c0009648 <sbrk>
c0000c71:	83 c4 10             	add    esp,0x10
c0000c74:	89 c6                	mov    esi,eax
c0000c76:	83 f8 ff             	cmp    eax,0xffffffff
c0000c79:	74 e3                	je     c0000c5e <sYSMALLOc+0x7d>
c0000c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c83:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c86:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c8c:	39 f1                	cmp    ecx,esi
c0000c8e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c94:	75 13                	jne    c0000ca9 <sYSMALLOc+0xc8>
c0000c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9e:	83 c8 01             	or     eax,0x1
c0000ca1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca4:	e9 3e 01 00 00       	jmp    c0000de7 <sYSMALLOc+0x206>
c0000ca9:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000caf:	88 d0                	mov    al,dl
c0000cb1:	83 e0 01             	and    eax,0x1
c0000cb4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cbd:	0f 95 c0             	setne  al
c0000cc0:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc4:	39 f1                	cmp    ecx,esi
c0000cc6:	76 12                	jbe    c0000cda <sYSMALLOc+0xf9>
c0000cc8:	84 c0                	test   al,al
c0000cca:	74 0e                	je     c0000cda <sYSMALLOc+0xf9>
c0000ccc:	83 e2 fe             	and    edx,0xfffffffe
c0000ccf:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd5:	e9 83 00 00 00       	jmp    c0000d5d <sYSMALLOc+0x17c>
c0000cda:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdf:	74 7c                	je     c0000d5d <sYSMALLOc+0x17c>
c0000ce1:	84 c0                	test   al,al
c0000ce3:	74 0c                	je     c0000cf1 <sYSMALLOc+0x110>
c0000ce5:	89 f0                	mov    eax,esi
c0000ce7:	29 c8                	sub    eax,ecx
c0000ce9:	01 e8                	add    eax,ebp
c0000ceb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cf1:	89 f2                	mov    edx,esi
c0000cf3:	83 e2 07             	and    edx,0x7
c0000cf6:	74 0c                	je     c0000d04 <sYSMALLOc+0x123>
c0000cf8:	b8 08 00 00 00       	mov    eax,0x8
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d02:	eb 04                	jmp    c0000d08 <sYSMALLOc+0x127>
c0000d04:	89 f5                	mov    ebp,esi
c0000d06:	31 c0                	xor    eax,eax
c0000d08:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	83 ec 0c             	sub    esp,0xc
c0000d19:	01 f1                	add    ecx,esi
c0000d1b:	01 ca                	add    edx,ecx
c0000d1d:	29 c8                	sub    eax,ecx
c0000d1f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d23:	01 c2                	add    edx,eax
c0000d25:	52                   	push   edx
c0000d26:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d2a:	e8 19 89 00 00       	call   c0009648 <sbrk>
c0000d2f:	83 c4 10             	add    esp,0x10
c0000d32:	83 f8 ff             	cmp    eax,0xffffffff
c0000d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d39:	75 0f                	jne    c0000d4a <sYSMALLOc+0x169>
c0000d3b:	83 ec 0c             	sub    esp,0xc
c0000d3e:	6a 00                	push   0x0
c0000d40:	e8 03 89 00 00       	call   c0009648 <sbrk>
c0000d45:	83 c4 10             	add    esp,0x10
c0000d48:	eb 30                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d4a:	39 c6                	cmp    esi,eax
c0000d4c:	76 33                	jbe    c0000d81 <sYSMALLOc+0x1a0>
c0000d4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d52:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d59:	01 f0                	add    eax,esi
c0000d5b:	eb 1d                	jmp    c0000d7a <sYSMALLOc+0x199>
c0000d5d:	83 ec 0c             	sub    esp,0xc
c0000d60:	89 f5                	mov    ebp,esi
c0000d62:	6a 00                	push   0x0
c0000d64:	e8 df 88 00 00       	call   c0009648 <sbrk>
c0000d69:	89 c2                	mov    edx,eax
c0000d6b:	29 f2                	sub    edx,esi
c0000d6d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d7a:	31 d2                	xor    edx,edx
c0000d7c:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7f:	74 66                	je     c0000de7 <sYSMALLOc+0x206>
c0000d81:	29 e8                	sub    eax,ebp
c0000d83:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d86:	01 d0                	add    eax,edx
c0000d88:	83 c8 01             	or     eax,0x1
c0000d8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d94:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d99:	74 4c                	je     c0000de7 <sYSMALLOc+0x206>
c0000d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9f:	83 e8 0c             	sub    eax,0xc
c0000da2:	83 e0 f8             	and    eax,0xfffffff8
c0000da5:	89 c2                	mov    edx,eax
c0000da7:	83 ca 01             	or     edx,0x1
c0000daa:	83 f8 0f             	cmp    eax,0xf
c0000dad:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000db0:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db8:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dc0:	76 25                	jbe    c0000de7 <sYSMALLOc+0x206>
c0000dc2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc8:	83 ec 0c             	sub    esp,0xc
c0000dcb:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd5:	83 c7 08             	add    edi,0x8
c0000dd8:	57                   	push   edi
c0000dd9:	e8 0e fd ff ff       	call   c0000aec <dlfree>
c0000dde:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ded:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df3:	73 06                	jae    c0000dfb <sYSMALLOc+0x21a>
c0000df5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e01:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e07:	73 06                	jae    c0000e0f <sYSMALLOc+0x22e>
c0000e09:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e12:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e15:	83 e2 fc             	and    edx,0xfffffffc
c0000e18:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e1c:	0f 82 3c fe ff ff    	jb     c0000c5e <sYSMALLOc+0x7d>
c0000e22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e26:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e29:	29 fa                	sub    edx,edi
c0000e2b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2e:	83 ca 01             	or     edx,0x1
c0000e31:	89 fb                	mov    ebx,edi
c0000e33:	83 c0 08             	add    eax,0x8
c0000e36:	83 cb 01             	or     ebx,0x1
c0000e39:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3f:	83 c4 2c             	add    esp,0x2c
c0000e42:	5b                   	pop    ebx
c0000e43:	5e                   	pop    esi
c0000e44:	5f                   	pop    edi
c0000e45:	5d                   	pop    ebp
c0000e46:	c3                   	ret    

c0000e47 <dlmalloc>:
c0000e47:	55                   	push   ebp
c0000e48:	57                   	push   edi
c0000e49:	56                   	push   esi
c0000e4a:	53                   	push   ebx
c0000e4b:	83 ec 1c             	sub    esp,0x1c
c0000e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e52:	83 f8 df             	cmp    eax,0xffffffdf
c0000e55:	0f 87 70 03 00 00    	ja     c00011cb <dlmalloc+0x384>
c0000e5b:	83 c0 0b             	add    eax,0xb
c0000e5e:	be 10 00 00 00       	mov    esi,0x10
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	76 05                	jbe    c0000e6d <dlmalloc+0x26>
c0000e68:	83 e0 f8             	and    eax,0xfffffff8
c0000e6b:	89 c6                	mov    esi,eax
c0000e6d:	8b 3d a0 3b 02 c0    	mov    edi,DWORD PTR ds:0xc0023ba0
c0000e73:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e79:	75 17                	jne    c0000e92 <dlmalloc+0x4b>
c0000e7b:	85 ff                	test   edi,edi
c0000e7d:	0f 85 05 03 00 00    	jne    c0001188 <dlmalloc+0x341>
c0000e83:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0000e88:	e8 78 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000e8d:	e9 f6 02 00 00       	jmp    c0001188 <dlmalloc+0x341>
c0000e92:	39 f7                	cmp    edi,esi
c0000e94:	72 1f                	jb     c0000eb5 <dlmalloc+0x6e>
c0000e96:	89 f2                	mov    edx,esi
c0000e98:	c1 ea 03             	shr    edx,0x3
c0000e9b:	83 ea 02             	sub    edx,0x2
c0000e9e:	8b 04 95 a4 3b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc45c]
c0000ea5:	85 c0                	test   eax,eax
c0000ea7:	74 0c                	je     c0000eb5 <dlmalloc+0x6e>
c0000ea9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eac:	89 0c 95 a4 3b 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc45c],ecx
c0000eb3:	eb 30                	jmp    c0000ee5 <dlmalloc+0x9e>
c0000eb5:	89 f0                	mov    eax,esi
c0000eb7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebd:	77 2e                	ja     c0000eed <dlmalloc+0xa6>
c0000ebf:	c1 e8 03             	shr    eax,0x3
c0000ec2:	8d 14 c5 d4 3b 02 c0 	lea    edx,[eax*8-0x3ffdc42c]
c0000ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ecd:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed3:	39 c3                	cmp    ebx,eax
c0000ed5:	74 2e                	je     c0000f05 <dlmalloc+0xbe>
c0000ed7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000eda:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee5:	83 c0 08             	add    eax,0x8
c0000ee8:	e9 e0 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000eed:	e8 8f fa ff ff       	call   c0000981 <largebin_index>
c0000ef2:	83 e7 02             	and    edi,0x2
c0000ef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef9:	74 0a                	je     c0000f05 <dlmalloc+0xbe>
c0000efb:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0000f00:	e8 00 fb ff ff       	call   c0000a05 <malloc_consolidate>
c0000f05:	8d 46 10             	lea    eax,[esi+0x10]
c0000f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0c:	8b 1d e0 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023be0
c0000f12:	81 fb d4 3b 02 c0    	cmp    ebx,0xc0023bd4
c0000f18:	0f 84 13 01 00 00    	je     c0001031 <dlmalloc+0x1ea>
c0000f1e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f21:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f24:	83 e7 fc             	and    edi,0xfffffffc
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 4c                	ja     c0000f7b <dlmalloc+0x134>
c0000f2f:	3d d4 3b 02 c0       	cmp    eax,0xc0023bd4
c0000f34:	75 45                	jne    c0000f7b <dlmalloc+0x134>
c0000f36:	39 1d d0 3b 02 c0    	cmp    DWORD PTR ds:0xc0023bd0,ebx
c0000f3c:	75 3d                	jne    c0000f7b <dlmalloc+0x134>
c0000f3e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f42:	73 37                	jae    c0000f7b <dlmalloc+0x134>
c0000f44:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f47:	89 fa                	mov    edx,edi
c0000f49:	a3 dc 3b 02 c0       	mov    ds:0xc0023bdc,eax
c0000f4e:	a3 e0 3b 02 c0       	mov    ds:0xc0023be0,eax
c0000f53:	a3 d0 3b 02 c0       	mov    ds:0xc0023bd0,eax
c0000f58:	29 f2                	sub    edx,esi
c0000f5a:	c7 40 08 d4 3b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023bd4
c0000f61:	c7 40 0c d4 3b 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023bd4
c0000f68:	83 ce 01             	or     esi,0x1
c0000f6b:	89 d1                	mov    ecx,edx
c0000f6d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f70:	83 c9 01             	or     ecx,0x1
c0000f73:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f76:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f79:	eb 15                	jmp    c0000f90 <dlmalloc+0x149>
c0000f7b:	a3 e0 3b 02 c0       	mov    ds:0xc0023be0,eax
c0000f80:	39 fe                	cmp    esi,edi
c0000f82:	c7 40 08 d4 3b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023bd4
c0000f89:	75 0d                	jne    c0000f98 <dlmalloc+0x151>
c0000f8b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f90:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f93:	e9 35 02 00 00       	jmp    c00011cd <dlmalloc+0x386>
c0000f98:	89 f8                	mov    eax,edi
c0000f9a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa0:	77 19                	ja     c0000fbb <dlmalloc+0x174>
c0000fa2:	c1 e8 03             	shr    eax,0x3
c0000fa5:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa8:	83 c2 0d             	add    edx,0xd
c0000fab:	8d 2c 95 98 3b 02 c0 	lea    ebp,[edx*4-0x3ffdc468]
c0000fb2:	8b 14 95 a0 3b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc460]
c0000fb9:	eb 46                	jmp    c0001001 <dlmalloc+0x1ba>
c0000fbb:	e8 c1 f9 ff ff       	call   c0000981 <largebin_index>
c0000fc0:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc3:	83 c2 0d             	add    edx,0xd
c0000fc6:	8d 0c 95 a0 3b 02 c0 	lea    ecx,[edx*4-0x3ffdc460]
c0000fcd:	8b 14 95 a0 3b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc460]
c0000fd4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdb:	89 d5                	mov    ebp,edx
c0000fdd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe1:	74 1e                	je     c0001001 <dlmalloc+0x1ba>
c0000fe3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe9:	77 12                	ja     c0000ffd <dlmalloc+0x1b6>
c0000feb:	83 cf 01             	or     edi,0x1
c0000fee:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff1:	76 05                	jbe    c0000ff8 <dlmalloc+0x1b1>
c0000ff3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff6:	eb f6                	jmp    c0000fee <dlmalloc+0x1a7>
c0000ff8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffb:	eb 04                	jmp    c0001001 <dlmalloc+0x1ba>
c0000ffd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001001:	89 c7                	mov    edi,eax
c0001003:	88 c1                	mov    cl,al
c0001005:	c1 ff 05             	sar    edi,0x5
c0001008:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100c:	bf 01 00 00 00       	mov    edi,0x1
c0001011:	d3 e7                	shl    edi,cl
c0001013:	89 f8                	mov    eax,edi
c0001015:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001019:	09 04 bd d4 3e 02 c0 	or     DWORD PTR [edi*4-0x3ffdc12c],eax
c0001020:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001023:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001026:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001029:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102c:	e9 db fe ff ff       	jmp    c0000f0c <dlmalloc+0xc5>
c0001031:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001037:	76 78                	jbe    c00010b1 <dlmalloc+0x26a>
c0001039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103d:	8d 04 c5 d4 3b 02 c0 	lea    eax,[eax*8-0x3ffdc42c]
c0001044:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001047:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104a:	39 ca                	cmp    edx,ecx
c000104c:	74 63                	je     c00010b1 <dlmalloc+0x26a>
c000104e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001051:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001054:	83 e3 fc             	and    ebx,0xfffffffc
c0001057:	39 de                	cmp    esi,ebx
c0001059:	77 52                	ja     c00010ad <dlmalloc+0x266>
c000105b:	89 df                	mov    edi,ebx
c000105d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001060:	29 f7                	sub    edi,esi
c0001062:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001065:	01 d3                	add    ebx,edx
c0001067:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106a:	83 ff 0f             	cmp    edi,0xf
c000106d:	8d 42 08             	lea    eax,[edx+0x8]
c0001070:	77 09                	ja     c000107b <dlmalloc+0x234>
c0001072:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001076:	e9 52 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000107b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107e:	83 ce 01             	or     esi,0x1
c0001081:	89 0d dc 3b 02 c0    	mov    DWORD PTR ds:0xc0023bdc,ecx
c0001087:	89 0d e0 3b 02 c0    	mov    DWORD PTR ds:0xc0023be0,ecx
c000108d:	c7 41 08 d4 3b 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023bd4
c0001094:	c7 41 0c d4 3b 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023bd4
c000109b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109e:	89 fa                	mov    edx,edi
c00010a0:	83 ca 01             	or     edx,0x1
c00010a3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a6:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a8:	e9 20 01 00 00       	jmp    c00011cd <dlmalloc+0x386>
c00010ad:	89 c2                	mov    edx,eax
c00010af:	eb 99                	jmp    c000104a <dlmalloc+0x203>
c00010b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b5:	b8 01 00 00 00       	mov    eax,0x1
c00010ba:	41                   	inc    ecx
c00010bb:	89 cb                	mov    ebx,ecx
c00010bd:	8d 14 cd cc 3b 02 c0 	lea    edx,[ecx*8-0x3ffdc434]
c00010c4:	c1 eb 05             	shr    ebx,0x5
c00010c7:	d3 e0                	shl    eax,cl
c00010c9:	8b 3c 9d d4 3e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc12c]
c00010d0:	39 f8                	cmp    eax,edi
c00010d2:	77 04                	ja     c00010d8 <dlmalloc+0x291>
c00010d4:	85 c0                	test   eax,eax
c00010d6:	75 26                	jne    c00010fe <dlmalloc+0x2b7>
c00010d8:	43                   	inc    ebx
c00010d9:	83 fb 02             	cmp    ebx,0x2
c00010dc:	0f 87 a6 00 00 00    	ja     c0001188 <dlmalloc+0x341>
c00010e2:	8b 3c 9d d4 3e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc12c]
c00010e9:	85 ff                	test   edi,edi
c00010eb:	74 eb                	je     c00010d8 <dlmalloc+0x291>
c00010ed:	89 d8                	mov    eax,ebx
c00010ef:	c1 e0 06             	shl    eax,0x6
c00010f2:	8d 14 85 cc 3b 02 c0 	lea    edx,[eax*4-0x3ffdc434]
c00010f9:	b8 01 00 00 00       	mov    eax,0x1
c00010fe:	85 f8                	test   eax,edi
c0001100:	75 07                	jne    c0001109 <dlmalloc+0x2c2>
c0001102:	83 c2 08             	add    edx,0x8
c0001105:	01 c0                	add    eax,eax
c0001107:	eb f5                	jmp    c00010fe <dlmalloc+0x2b7>
c0001109:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110c:	39 ca                	cmp    edx,ecx
c000110e:	75 14                	jne    c0001124 <dlmalloc+0x2dd>
c0001110:	89 c1                	mov    ecx,eax
c0001112:	83 c2 08             	add    edx,0x8
c0001115:	f7 d1                	not    ecx
c0001117:	01 c0                	add    eax,eax
c0001119:	21 cf                	and    edi,ecx
c000111b:	89 3c 9d d4 3e 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdc12c],edi
c0001122:	eb ac                	jmp    c00010d0 <dlmalloc+0x289>
c0001124:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001127:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112a:	83 e0 fc             	and    eax,0xfffffffc
c000112d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001130:	89 c3                	mov    ebx,eax
c0001132:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001135:	29 f3                	sub    ebx,esi
c0001137:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113a:	83 fb 0f             	cmp    ebx,0xf
c000113d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001140:	77 09                	ja     c000114b <dlmalloc+0x304>
c0001142:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001146:	e9 82 00 00 00       	jmp    c00011cd <dlmalloc+0x386>
c000114b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001154:	89 3d dc 3b 02 c0    	mov    DWORD PTR ds:0xc0023bdc,edi
c000115a:	89 3d e0 3b 02 c0    	mov    DWORD PTR ds:0xc0023be0,edi
c0001160:	c7 47 08 d4 3b 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023bd4
c0001167:	c7 47 0c d4 3b 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023bd4
c000116e:	77 06                	ja     c0001176 <dlmalloc+0x32f>
c0001170:	89 3d d0 3b 02 c0    	mov    DWORD PTR ds:0xc0023bd0,edi
c0001176:	83 ce 01             	or     esi,0x1
c0001179:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117c:	89 d9                	mov    ecx,ebx
c000117e:	83 c9 01             	or     ecx,0x1
c0001181:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001184:	89 1a                	mov    DWORD PTR [edx],ebx
c0001186:	eb 45                	jmp    c00011cd <dlmalloc+0x386>
c0001188:	a1 cc 3b 02 c0       	mov    eax,ds:0xc0023bcc
c000118d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001193:	83 e2 fc             	and    edx,0xfffffffc
c0001196:	39 d1                	cmp    ecx,edx
c0001198:	77 1e                	ja     c00011b8 <dlmalloc+0x371>
c000119a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119d:	89 f3                	mov    ebx,esi
c000119f:	89 0d cc 3b 02 c0    	mov    DWORD PTR ds:0xc0023bcc,ecx
c00011a5:	83 cb 01             	or     ebx,0x1
c00011a8:	29 f2                	sub    edx,esi
c00011aa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011ad:	83 ca 01             	or     edx,0x1
c00011b0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b3:	e9 2d fd ff ff       	jmp    c0000ee5 <dlmalloc+0x9e>
c00011b8:	83 c4 1c             	add    esp,0x1c
c00011bb:	89 f0                	mov    eax,esi
c00011bd:	5b                   	pop    ebx
c00011be:	ba a0 3b 02 c0       	mov    edx,0xc0023ba0
c00011c3:	5e                   	pop    esi
c00011c4:	5f                   	pop    edi
c00011c5:	5d                   	pop    ebp
c00011c6:	e9 16 fa ff ff       	jmp    c0000be1 <sYSMALLOc>
c00011cb:	31 c0                	xor    eax,eax
c00011cd:	83 c4 1c             	add    esp,0x1c
c00011d0:	5b                   	pop    ebx
c00011d1:	5e                   	pop    esi
c00011d2:	5f                   	pop    edi
c00011d3:	5d                   	pop    ebp
c00011d4:	c3                   	ret    

c00011d5 <iALLOc>:
c00011d5:	55                   	push   ebp
c00011d6:	89 c5                	mov    ebp,eax
c00011d8:	57                   	push   edi
c00011d9:	56                   	push   esi
c00011da:	53                   	push   ebx
c00011db:	83 ec 2c             	sub    esp,0x2c
c00011de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011e2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011ea:	83 3d a0 3b 02 c0 00 	cmp    DWORD PTR ds:0xc0023ba0,0x0
c00011f1:	75 12                	jne    c0001205 <iALLOc+0x30>
c00011f3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f7:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c00011fc:	e8 04 f8 ff ff       	call   c0000a05 <malloc_consolidate>
c0001201:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001205:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120a:	74 12                	je     c000121e <iALLOc+0x49>
c000120c:	85 ed                	test   ebp,ebp
c000120e:	0f 84 64 01 00 00    	je     c0001378 <iALLOc+0x1a3>
c0001214:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121c:	eb 33                	jmp    c0001251 <iALLOc+0x7c>
c000121e:	85 ed                	test   ebp,ebp
c0001220:	75 14                	jne    c0001236 <iALLOc+0x61>
c0001222:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122a:	83 c4 2c             	add    esp,0x2c
c000122d:	5b                   	pop    ebx
c000122e:	5e                   	pop    esi
c000122f:	5f                   	pop    edi
c0001230:	5d                   	pop    ebp
c0001231:	e9 11 fc ff ff       	jmp    c0000e47 <dlmalloc>
c0001236:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001245:	83 f8 0f             	cmp    eax,0xf
c0001248:	76 07                	jbe    c0001251 <iALLOc+0x7c>
c000124a:	83 e0 f8             	and    eax,0xfffffff8
c000124d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001251:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001256:	75 09                	jne    c0001261 <iALLOc+0x8c>
c0001258:	89 d0                	mov    eax,edx
c000125a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125d:	31 f6                	xor    esi,esi
c000125f:	eb 3b                	jmp    c000129c <iALLOc+0xc7>
c0001261:	8b 02                	mov    eax,DWORD PTR [edx]
c0001263:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126b:	83 c0 0b             	add    eax,0xb
c000126e:	83 f8 0f             	cmp    eax,0xf
c0001271:	76 07                	jbe    c000127a <iALLOc+0xa5>
c0001273:	83 e0 f8             	and    eax,0xfffffff8
c0001276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127e:	0f af f5             	imul   esi,ebp
c0001281:	eb 25                	jmp    c00012a8 <iALLOc+0xd3>
c0001283:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001285:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001288:	bb 10 00 00 00       	mov    ebx,0x10
c000128d:	83 f9 0f             	cmp    ecx,0xf
c0001290:	76 05                	jbe    c0001297 <iALLOc+0xc2>
c0001292:	83 e1 f8             	and    ecx,0xfffffff8
c0001295:	89 cb                	mov    ebx,ecx
c0001297:	01 de                	add    esi,ebx
c0001299:	83 c0 04             	add    eax,0x4
c000129c:	39 c7                	cmp    edi,eax
c000129e:	75 e3                	jne    c0001283 <iALLOc+0xae>
c00012a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ac:	8b 1d f4 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ef4
c00012b2:	83 ec 0c             	sub    esp,0xc
c00012b5:	c7 05 f4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ef4,0x0
c00012bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c3:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c7:	50                   	push   eax
c00012c8:	e8 7a fb ff ff       	call   c0000e47 <dlmalloc>
c00012cd:	83 c4 10             	add    esp,0x10
c00012d0:	89 1d f4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ef4,ebx
c00012d6:	85 c0                	test   eax,eax
c00012d8:	0f 84 92 00 00 00    	je     c0001370 <iALLOc+0x19b>
c00012de:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e1:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e4:	83 e3 fc             	and    ebx,0xfffffffc
c00012e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012eb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f0:	74 1e                	je     c0001310 <iALLOc+0x13b>
c00012f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f6:	89 d9                	mov    ecx,ebx
c00012f8:	52                   	push   edx
c00012f9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fd:	83 e9 04             	sub    ecx,0x4
c0001300:	51                   	push   ecx
c0001301:	6a 00                	push   0x0
c0001303:	50                   	push   eax
c0001304:	e8 9f f1 ff ff       	call   c00004a8 <memset>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001315:	75 14                	jne    c000132b <iALLOc+0x156>
c0001317:	8d 04 37             	lea    eax,[edi+esi*1]
c000131a:	29 f3                	sub    ebx,esi
c000131c:	8d 48 08             	lea    ecx,[eax+0x8]
c000131f:	83 cb 01             	or     ebx,0x1
c0001322:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001326:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001329:	89 f3                	mov    ebx,esi
c000132b:	31 c0                	xor    eax,eax
c000132d:	4d                   	dec    ebp
c000132e:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001331:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001335:	39 c5                	cmp    ebp,eax
c0001337:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133a:	74 2c                	je     c0001368 <iALLOc+0x193>
c000133c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001340:	85 c9                	test   ecx,ecx
c0001342:	75 15                	jne    c0001359 <iALLOc+0x184>
c0001344:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001347:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134a:	b9 10 00 00 00       	mov    ecx,0x10
c000134f:	83 fe 0f             	cmp    esi,0xf
c0001352:	76 05                	jbe    c0001359 <iALLOc+0x184>
c0001354:	83 e6 f8             	and    esi,0xfffffff8
c0001357:	89 f1                	mov    ecx,esi
c0001359:	89 ce                	mov    esi,ecx
c000135b:	29 cb                	sub    ebx,ecx
c000135d:	83 ce 01             	or     esi,0x1
c0001360:	40                   	inc    eax
c0001361:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001364:	01 cf                	add    edi,ecx
c0001366:	eb c6                	jmp    c000132e <iALLOc+0x159>
c0001368:	83 cb 01             	or     ebx,0x1
c000136b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136e:	eb 08                	jmp    c0001378 <iALLOc+0x1a3>
c0001370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137c:	83 c4 2c             	add    esp,0x2c
c000137f:	5b                   	pop    ebx
c0001380:	5e                   	pop    esi
c0001381:	5f                   	pop    edi
c0001382:	5d                   	pop    ebp
c0001383:	c3                   	ret    

c0001384 <dlrealloc>:
c0001384:	55                   	push   ebp
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 1c             	sub    esp,0x1c
c000138b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001393:	85 db                	test   ebx,ebx
c0001395:	75 10                	jne    c00013a7 <dlrealloc+0x23>
c0001397:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139b:	83 c4 1c             	add    esp,0x1c
c000139e:	5b                   	pop    ebx
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 a0 fa ff ff       	jmp    c0000e47 <dlmalloc>
c00013a7:	83 f8 df             	cmp    eax,0xffffffdf
c00013aa:	76 07                	jbe    c00013b3 <dlrealloc+0x2f>
c00013ac:	31 db                	xor    ebx,ebx
c00013ae:	e9 6a 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c00013b3:	83 c0 0b             	add    eax,0xb
c00013b6:	bd 10 00 00 00       	mov    ebp,0x10
c00013bb:	83 f8 0f             	cmp    eax,0xf
c00013be:	76 05                	jbe    c00013c5 <dlrealloc+0x41>
c00013c0:	83 e0 f8             	and    eax,0xfffffff8
c00013c3:	89 c5                	mov    ebp,eax
c00013c5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c8:	8d 7b f8             	lea    edi,[ebx-0x8]
c00013cb:	89 c6                	mov    esi,eax
c00013cd:	83 e6 fc             	and    esi,0xfffffffc
c00013d0:	a8 02                	test   al,0x2
c00013d2:	75 d8                	jne    c00013ac <dlrealloc+0x28>
c00013d4:	39 f5                	cmp    ebp,esi
c00013d6:	0f 86 04 01 00 00    	jbe    c00014e0 <dlrealloc+0x15c>
c00013dc:	8d 14 37             	lea    edx,[edi+esi*1]
c00013df:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e2:	39 15 cc 3b 02 c0    	cmp    DWORD PTR ds:0xc0023bcc,edx
c00013e8:	75 33                	jne    c000141d <dlrealloc+0x99>
c00013ea:	83 e1 fc             	and    ecx,0xfffffffc
c00013ed:	01 f1                	add    ecx,esi
c00013ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f3:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00013f6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fa:	77 49                	ja     c0001445 <dlrealloc+0xc1>
c00013fc:	01 ef                	add    edi,ebp
c00013fe:	83 e0 01             	and    eax,0x1
c0001401:	09 e8                	or     eax,ebp
c0001403:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001406:	89 3d cc 3b 02 c0    	mov    DWORD PTR ds:0xc0023bcc,edi
c000140c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001410:	29 e8                	sub    eax,ebp
c0001412:	83 c8 01             	or     eax,0x1
c0001415:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001418:	e9 00 01 00 00       	jmp    c000151d <dlrealloc+0x199>
c000141d:	89 c8                	mov    eax,ecx
c000141f:	83 e0 fe             	and    eax,0xfffffffe
c0001422:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001427:	75 1c                	jne    c0001445 <dlrealloc+0xc1>
c0001429:	83 e1 fc             	and    ecx,0xfffffffc
c000142c:	01 f1                	add    ecx,esi
c000142e:	39 cd                	cmp    ebp,ecx
c0001430:	77 13                	ja     c0001445 <dlrealloc+0xc1>
c0001432:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001435:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001438:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143e:	89 ce                	mov    esi,ecx
c0001440:	e9 9b 00 00 00       	jmp    c00014e0 <dlrealloc+0x15c>
c0001445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001449:	8d 45 f9             	lea    eax,[ebp-0x7]
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	50                   	push   eax
c0001450:	e8 f2 f9 ff ff       	call   c0000e47 <dlmalloc>
c0001455:	83 c4 10             	add    esp,0x10
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 4c ff ff ff    	je     c00013ac <dlrealloc+0x28>
c0001460:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 ca                	cmp    edx,ecx
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf1>
c000146b:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 6b                	jmp    c00014e0 <dlrealloc+0x15c>
c0001475:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001478:	83 f9 27             	cmp    ecx,0x27
c000147b:	76 08                	jbe    c0001485 <dlrealloc+0x101>
c000147d:	89 de                	mov    esi,ebx
c000147f:	89 c7                	mov    edi,eax
c0001481:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001483:	eb 43                	jmp    c00014c8 <dlrealloc+0x144>
c0001485:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001487:	83 f9 13             	cmp    ecx,0x13
c000148a:	89 10                	mov    DWORD PTR [eax],edx
c000148c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000148f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001492:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001495:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001498:	76 2e                	jbe    c00014c8 <dlrealloc+0x144>
c000149a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000149d:	83 f9 1b             	cmp    ecx,0x1b
c00014a0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00014a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00014a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00014a9:	76 1d                	jbe    c00014c8 <dlrealloc+0x144>
c00014ab:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00014ae:	83 f9 23             	cmp    ecx,0x23
c00014b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00014b4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00014b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00014ba:	76 0c                	jbe    c00014c8 <dlrealloc+0x144>
c00014bc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00014bf:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00014c2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00014c5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00014c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014cc:	83 ec 0c             	sub    esp,0xc
c00014cf:	53                   	push   ebx
c00014d0:	e8 17 f6 ff ff       	call   c0000aec <dlfree>
c00014d5:	83 c4 10             	add    esp,0x10
c00014d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014dc:	89 c3                	mov    ebx,eax
c00014de:	eb 3d                	jmp    c000151d <dlrealloc+0x199>
c00014e0:	89 f2                	mov    edx,esi
c00014e2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014e5:	29 ea                	sub    edx,ebp
c00014e7:	83 e1 01             	and    ecx,0x1
c00014ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ed:	83 fa 0f             	cmp    edx,0xf
c00014f0:	77 0b                	ja     c00014fd <dlrealloc+0x179>
c00014f2:	09 ce                	or     esi,ecx
c00014f4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00014f7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00014fb:	eb 20                	jmp    c000151d <dlrealloc+0x199>
c00014fd:	01 ef                	add    edi,ebp
c00014ff:	83 ec 0c             	sub    esp,0xc
c0001502:	09 cd                	or     ebp,ecx
c0001504:	83 ca 01             	or     edx,0x1
c0001507:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000150a:	83 c7 08             	add    edi,0x8
c000150d:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001510:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001514:	57                   	push   edi
c0001515:	e8 d2 f5 ff ff       	call   c0000aec <dlfree>
c000151a:	83 c4 10             	add    esp,0x10
c000151d:	83 c4 1c             	add    esp,0x1c
c0001520:	89 d8                	mov    eax,ebx
c0001522:	5b                   	pop    ebx
c0001523:	5e                   	pop    esi
c0001524:	5f                   	pop    edi
c0001525:	5d                   	pop    ebp
c0001526:	c3                   	ret    

c0001527 <dlmemalign>:
c0001527:	55                   	push   ebp
c0001528:	57                   	push   edi
c0001529:	56                   	push   esi
c000152a:	53                   	push   ebx
c000152b:	83 ec 0c             	sub    esp,0xc
c000152e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001536:	83 fa 08             	cmp    edx,0x8
c0001539:	77 10                	ja     c000154b <dlmemalign+0x24>
c000153b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000153f:	83 c4 0c             	add    esp,0xc
c0001542:	5b                   	pop    ebx
c0001543:	5e                   	pop    esi
c0001544:	5f                   	pop    edi
c0001545:	5d                   	pop    ebp
c0001546:	e9 fc f8 ff ff       	jmp    c0000e47 <dlmalloc>
c000154b:	bf 10 00 00 00       	mov    edi,0x10
c0001550:	83 fa 0f             	cmp    edx,0xf
c0001553:	76 13                	jbe    c0001568 <dlmemalign+0x41>
c0001555:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001558:	85 d1                	test   ecx,edx
c000155a:	75 04                	jne    c0001560 <dlmemalign+0x39>
c000155c:	89 d7                	mov    edi,edx
c000155e:	eb 08                	jmp    c0001568 <dlmemalign+0x41>
c0001560:	39 d7                	cmp    edi,edx
c0001562:	73 04                	jae    c0001568 <dlmemalign+0x41>
c0001564:	01 ff                	add    edi,edi
c0001566:	eb f8                	jmp    c0001560 <dlmemalign+0x39>
c0001568:	83 f8 df             	cmp    eax,0xffffffdf
c000156b:	76 07                	jbe    c0001574 <dlmemalign+0x4d>
c000156d:	31 c0                	xor    eax,eax
c000156f:	e9 ce 00 00 00       	jmp    c0001642 <dlmemalign+0x11b>
c0001574:	83 c0 0b             	add    eax,0xb
c0001577:	bd 10 00 00 00       	mov    ebp,0x10
c000157c:	83 f8 0f             	cmp    eax,0xf
c000157f:	76 05                	jbe    c0001586 <dlmemalign+0x5f>
c0001581:	83 e0 f8             	and    eax,0xfffffff8
c0001584:	89 c5                	mov    ebp,eax
c0001586:	83 ec 0c             	sub    esp,0xc
c0001589:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000158d:	50                   	push   eax
c000158e:	e8 b4 f8 ff ff       	call   c0000e47 <dlmalloc>
c0001593:	83 c4 10             	add    esp,0x10
c0001596:	89 c1                	mov    ecx,eax
c0001598:	85 c0                	test   eax,eax
c000159a:	74 d1                	je     c000156d <dlmemalign+0x46>
c000159c:	31 d2                	xor    edx,edx
c000159e:	8d 70 f8             	lea    esi,[eax-0x8]
c00015a1:	f7 f7                	div    edi
c00015a3:	85 d2                	test   edx,edx
c00015a5:	74 62                	je     c0001609 <dlmemalign+0xe2>
c00015a7:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ab:	89 f8                	mov    eax,edi
c00015ad:	f7 d8                	neg    eax
c00015af:	21 c3                	and    ebx,eax
c00015b1:	83 eb 08             	sub    ebx,0x8
c00015b4:	89 d8                	mov    eax,ebx
c00015b6:	29 f0                	sub    eax,esi
c00015b8:	83 f8 0f             	cmp    eax,0xf
c00015bb:	77 02                	ja     c00015bf <dlmemalign+0x98>
c00015bd:	01 fb                	add    ebx,edi
c00015bf:	89 d8                	mov    eax,ebx
c00015c1:	29 f0                	sub    eax,esi
c00015c3:	89 c6                	mov    esi,eax
c00015c5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015c8:	89 c2                	mov    edx,eax
c00015ca:	83 e2 fc             	and    edx,0xfffffffc
c00015cd:	29 f2                	sub    edx,esi
c00015cf:	a8 02                	test   al,0x2
c00015d1:	74 10                	je     c00015e3 <dlmemalign+0xbc>
c00015d3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015d6:	83 ca 02             	or     edx,0x2
c00015d9:	8d 43 08             	lea    eax,[ebx+0x8]
c00015dc:	89 33                	mov    DWORD PTR [ebx],esi
c00015de:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015e1:	eb 5f                	jmp    c0001642 <dlmemalign+0x11b>
c00015e3:	83 ec 0c             	sub    esp,0xc
c00015e6:	89 d0                	mov    eax,edx
c00015e8:	83 c8 01             	or     eax,0x1
c00015eb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015ee:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00015f3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015f6:	83 e0 01             	and    eax,0x1
c00015f9:	09 f0                	or     eax,esi
c00015fb:	89 de                	mov    esi,ebx
c00015fd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001600:	51                   	push   ecx
c0001601:	e8 e6 f4 ff ff       	call   c0000aec <dlfree>
c0001606:	83 c4 10             	add    esp,0x10
c0001609:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000160c:	a8 02                	test   al,0x2
c000160e:	75 2f                	jne    c000163f <dlmemalign+0x118>
c0001610:	83 e0 fc             	and    eax,0xfffffffc
c0001613:	8d 55 10             	lea    edx,[ebp+0x10]
c0001616:	39 c2                	cmp    edx,eax
c0001618:	73 25                	jae    c000163f <dlmemalign+0x118>
c000161a:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000161d:	83 ec 0c             	sub    esp,0xc
c0001620:	29 e8                	sub    eax,ebp
c0001622:	83 c2 08             	add    edx,0x8
c0001625:	83 c8 01             	or     eax,0x1
c0001628:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000162b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000162e:	83 e0 01             	and    eax,0x1
c0001631:	09 c5                	or     ebp,eax
c0001633:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001636:	52                   	push   edx
c0001637:	e8 b0 f4 ff ff       	call   c0000aec <dlfree>
c000163c:	83 c4 10             	add    esp,0x10
c000163f:	8d 46 08             	lea    eax,[esi+0x8]
c0001642:	83 c4 0c             	add    esp,0xc
c0001645:	5b                   	pop    ebx
c0001646:	5e                   	pop    esi
c0001647:	5f                   	pop    edi
c0001648:	5d                   	pop    ebp
c0001649:	c3                   	ret    

c000164a <dlcalloc>:
c000164a:	53                   	push   ebx
c000164b:	83 ec 14             	sub    esp,0x14
c000164e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001652:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001657:	50                   	push   eax
c0001658:	e8 ea f7 ff ff       	call   c0000e47 <dlmalloc>
c000165d:	83 c4 10             	add    esp,0x10
c0001660:	89 c3                	mov    ebx,eax
c0001662:	85 c0                	test   eax,eax
c0001664:	74 77                	je     c00016dd <dlcalloc+0x93>
c0001666:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001669:	89 d0                	mov    eax,edx
c000166b:	83 e0 fc             	and    eax,0xfffffffc
c000166e:	80 e2 02             	and    dl,0x2
c0001671:	75 5a                	jne    c00016cd <dlcalloc+0x83>
c0001673:	83 e8 04             	sub    eax,0x4
c0001676:	83 f8 27             	cmp    eax,0x27
c0001679:	76 03                	jbe    c000167e <dlcalloc+0x34>
c000167b:	51                   	push   ecx
c000167c:	eb 53                	jmp    c00016d1 <dlcalloc+0x87>
c000167e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001684:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000168b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001692:	83 f8 13             	cmp    eax,0x13
c0001695:	76 46                	jbe    c00016dd <dlcalloc+0x93>
c0001697:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000169e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016a5:	83 f8 1b             	cmp    eax,0x1b
c00016a8:	76 33                	jbe    c00016dd <dlcalloc+0x93>
c00016aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016b1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016b8:	83 f8 23             	cmp    eax,0x23
c00016bb:	76 20                	jbe    c00016dd <dlcalloc+0x93>
c00016bd:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016c4:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016cb:	eb 10                	jmp    c00016dd <dlcalloc+0x93>
c00016cd:	83 e8 08             	sub    eax,0x8
c00016d0:	52                   	push   edx
c00016d1:	50                   	push   eax
c00016d2:	6a 00                	push   0x0
c00016d4:	53                   	push   ebx
c00016d5:	e8 ce ed ff ff       	call   c00004a8 <memset>
c00016da:	83 c4 10             	add    esp,0x10
c00016dd:	89 d8                	mov    eax,ebx
c00016df:	83 c4 08             	add    esp,0x8
c00016e2:	5b                   	pop    ebx
c00016e3:	c3                   	ret    

c00016e4 <dlcfree>:
c00016e4:	e9 03 f4 ff ff       	jmp    c0000aec <dlfree>

c00016e9 <dlindependent_calloc>:
c00016e9:	83 ec 28             	sub    esp,0x28
c00016ec:	b9 03 00 00 00       	mov    ecx,0x3
c00016f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00016f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00016f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00016fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001705:	e8 cb fa ff ff       	call   c00011d5 <iALLOc>
c000170a:	83 c4 2c             	add    esp,0x2c
c000170d:	c3                   	ret    

c000170e <dlindependent_comalloc>:
c000170e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001716:	31 c9                	xor    ecx,ecx
c0001718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000171c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001720:	e9 b0 fa ff ff       	jmp    c00011d5 <iALLOc>

c0001725 <dlvalloc>:
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	83 3d a0 3b 02 c0 00 	cmp    DWORD PTR ds:0xc0023ba0,0x0
c000172f:	75 0a                	jne    c000173b <dlvalloc+0x16>
c0001731:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0001736:	e8 ca f2 ff ff       	call   c0000a05 <malloc_consolidate>
c000173b:	50                   	push   eax
c000173c:	50                   	push   eax
c000173d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001741:	ff 35 fc 3e 02 c0    	push   DWORD PTR ds:0xc0023efc
c0001747:	e8 db fd ff ff       	call   c0001527 <dlmemalign>
c000174c:	83 c4 1c             	add    esp,0x1c
c000174f:	c3                   	ret    

c0001750 <dlpvalloc>:
c0001750:	83 ec 0c             	sub    esp,0xc
c0001753:	83 3d a0 3b 02 c0 00 	cmp    DWORD PTR ds:0xc0023ba0,0x0
c000175a:	75 0a                	jne    c0001766 <dlpvalloc+0x16>
c000175c:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0001761:	e8 9f f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001766:	a1 fc 3e 02 c0       	mov    eax,ds:0xc0023efc
c000176b:	89 c1                	mov    ecx,eax
c000176d:	52                   	push   edx
c000176e:	f7 d9                	neg    ecx
c0001770:	52                   	push   edx
c0001771:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001775:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001779:	21 ca                	and    edx,ecx
c000177b:	52                   	push   edx
c000177c:	50                   	push   eax
c000177d:	e8 a5 fd ff ff       	call   c0001527 <dlmemalign>
c0001782:	83 c4 1c             	add    esp,0x1c
c0001785:	c3                   	ret    

c0001786 <dlmalloc_trim>:
c0001786:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c000178b:	e8 75 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c0001790:	31 c0                	xor    eax,eax
c0001792:	c3                   	ret    

c0001793 <dlmalloc_usable_size>:
c0001793:	53                   	push   ebx
c0001794:	31 c0                	xor    eax,eax
c0001796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000179a:	85 c9                	test   ecx,ecx
c000179c:	74 24                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c000179e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017a1:	f6 c2 02             	test   dl,0x2
c00017a4:	74 08                	je     c00017ae <dlmalloc_usable_size+0x1b>
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	8d 42 f8             	lea    eax,[edx-0x8]
c00017ac:	eb 14                	jmp    c00017c2 <dlmalloc_usable_size+0x2f>
c00017ae:	89 d3                	mov    ebx,edx
c00017b0:	31 c0                	xor    eax,eax
c00017b2:	83 e3 fe             	and    ebx,0xfffffffe
c00017b5:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ba:	74 06                	je     c00017c2 <dlmalloc_usable_size+0x2f>
c00017bc:	83 e2 fc             	and    edx,0xfffffffc
c00017bf:	8d 42 fc             	lea    eax,[edx-0x4]
c00017c2:	5b                   	pop    ebx
c00017c3:	c3                   	ret    

c00017c4 <dlmallinfo>:
c00017c4:	55                   	push   ebp
c00017c5:	57                   	push   edi
c00017c6:	56                   	push   esi
c00017c7:	53                   	push   ebx
c00017c8:	83 ec 08             	sub    esp,0x8
c00017cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017cf:	83 3d cc 3b 02 c0 00 	cmp    DWORD PTR ds:0xc0023bcc,0x0
c00017d6:	75 0a                	jne    c00017e2 <dlmallinfo+0x1e>
c00017d8:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c00017dd:	e8 23 f2 ff ff       	call   c0000a05 <malloc_consolidate>
c00017e2:	a1 cc 3b 02 c0       	mov    eax,ds:0xc0023bcc
c00017e7:	31 ed                	xor    ebp,ebp
c00017e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017ec:	31 c9                	xor    ecx,ecx
c00017ee:	83 e0 fc             	and    eax,0xfffffffc
c00017f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00017f5:	31 c0                	xor    eax,eax
c00017f7:	8b 14 85 a4 3b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc45c]
c00017fe:	85 d2                	test   edx,edx
c0001800:	74 0e                	je     c0001810 <dlmallinfo+0x4c>
c0001802:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001805:	45                   	inc    ebp
c0001806:	83 e6 fc             	and    esi,0xfffffffc
c0001809:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000180c:	01 f1                	add    ecx,esi
c000180e:	eb ee                	jmp    c00017fe <dlmallinfo+0x3a>
c0001810:	40                   	inc    eax
c0001811:	83 f8 0a             	cmp    eax,0xa
c0001814:	75 e1                	jne    c00017f7 <dlmallinfo+0x33>
c0001816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000181a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001821:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001824:	b8 d4 3b 02 c0       	mov    eax,0xc0023bd4
c0001829:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000182c:	39 f0                	cmp    eax,esi
c000182e:	74 10                	je     c0001840 <dlmallinfo+0x7c>
c0001830:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001833:	ff 04 24             	inc    DWORD PTR [esp]
c0001836:	83 e7 fc             	and    edi,0xfffffffc
c0001839:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000183c:	01 fa                	add    edx,edi
c000183e:	eb ec                	jmp    c000182c <dlmallinfo+0x68>
c0001840:	83 c0 08             	add    eax,0x8
c0001843:	3d cc 3e 02 c0       	cmp    eax,0xc0023ecc
c0001848:	75 df                	jne    c0001829 <dlmallinfo+0x65>
c000184a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000184d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001850:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001853:	a1 08 3f 02 c0       	mov    eax,ds:0xc0023f08
c0001858:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000185b:	89 03                	mov    DWORD PTR [ebx],eax
c000185d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001860:	8b 35 f0 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ef0
c0001866:	29 d0                	sub    eax,edx
c0001868:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000186e:	8b 35 04 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023f04
c0001874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001878:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000187b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000187e:	8b 35 14 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023f14
c0001884:	89 d8                	mov    eax,ebx
c0001886:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001889:	83 c4 08             	add    esp,0x8
c000188c:	5b                   	pop    ebx
c000188d:	5e                   	pop    esi
c000188e:	5f                   	pop    edi
c000188f:	5d                   	pop    ebp
c0001890:	c2 04 00             	ret    0x4

c0001893 <dlmalloc_stats>:
c0001893:	83 ec 30             	sub    esp,0x30
c0001896:	8d 44 24 08          	lea    eax,[esp+0x8]
c000189a:	50                   	push   eax
c000189b:	e8 24 ff ff ff       	call   c00017c4 <dlmallinfo>
c00018a0:	83 c4 30             	add    esp,0x30
c00018a3:	c3                   	ret    

c00018a4 <dlmallopt>:
c00018a4:	56                   	push   esi
c00018a5:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c00018aa:	53                   	push   ebx
c00018ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018b3:	e8 4d f1 ff ff       	call   c0000a05 <malloc_consolidate>
c00018b8:	8d 46 04             	lea    eax,[esi+0x4]
c00018bb:	83 f8 05             	cmp    eax,0x5
c00018be:	77 67                	ja     c0001927 <dlmallopt+0x83>
c00018c0:	ff 24 85 84 08 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf77c]
c00018c7:	83 fb 50             	cmp    ebx,0x50
c00018ca:	77 5b                	ja     c0001927 <dlmallopt+0x83>
c00018cc:	ba 08 00 00 00       	mov    edx,0x8
c00018d1:	85 db                	test   ebx,ebx
c00018d3:	74 12                	je     c00018e7 <dlmallopt+0x43>
c00018d5:	83 c3 0b             	add    ebx,0xb
c00018d8:	ba 10 00 00 00       	mov    edx,0x10
c00018dd:	83 fb 0f             	cmp    ebx,0xf
c00018e0:	76 05                	jbe    c00018e7 <dlmallopt+0x43>
c00018e2:	89 da                	mov    edx,ebx
c00018e4:	83 e2 f8             	and    edx,0xfffffff8
c00018e7:	a1 a0 3b 02 c0       	mov    eax,ds:0xc0023ba0
c00018ec:	83 e0 03             	and    eax,0x3
c00018ef:	09 d0                	or     eax,edx
c00018f1:	a3 a0 3b 02 c0       	mov    ds:0xc0023ba0,eax
c00018f6:	eb 31                	jmp    c0001929 <dlmallopt+0x85>
c00018f8:	89 1d e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,ebx
c00018fe:	eb 06                	jmp    c0001906 <dlmallopt+0x62>
c0001900:	89 1d e8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee8,ebx
c0001906:	be 01 00 00 00       	mov    esi,0x1
c000190b:	eb 1c                	jmp    c0001929 <dlmallopt+0x85>
c000190d:	89 1d ec 3e 02 c0    	mov    DWORD PTR ds:0xc0023eec,ebx
c0001913:	eb f1                	jmp    c0001906 <dlmallopt+0x62>
c0001915:	31 f6                	xor    esi,esi
c0001917:	85 db                	test   ebx,ebx
c0001919:	75 0e                	jne    c0001929 <dlmallopt+0x85>
c000191b:	c7 05 f4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ef4,0x0
c0001925:	eb df                	jmp    c0001906 <dlmallopt+0x62>
c0001927:	31 f6                	xor    esi,esi
c0001929:	89 f0                	mov    eax,esi
c000192b:	5b                   	pop    ebx
c000192c:	5e                   	pop    esi
c000192d:	c3                   	ret    

c000192e <disk_status>:
c000192e:	31 c0                	xor    eax,eax
c0001930:	c3                   	ret    

c0001931 <disk_initialize>:
c0001931:	31 c0                	xor    eax,eax
c0001933:	c3                   	ret    

c0001934 <disk_read>:
c0001934:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001939:	0f b6 04 85 40 76 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd89c0]
c0001941:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001945:	e9 aa 88 01 00       	jmp    c001a1f4 <fatWrapperReadDisk>

c000194a <disk_write>:
c000194a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194f:	0f b6 04 85 40 76 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd89c0]
c0001957:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000195b:	e9 dc 88 01 00       	jmp    c001a23c <fatWrapperWriteDisk>

c0001960 <disk_ioctl>:
c0001960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001969:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000196e:	0f b6 04 85 40 76 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd89c0]
c0001976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000197a:	e9 05 89 01 00       	jmp    c001a284 <fatWrapperIoctl>

c000197f <ld_word>:
c000197f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001983:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001986:	c1 e2 08             	shl    edx,0x8
c0001989:	09 d0                	or     eax,edx
c000198b:	c3                   	ret    

c000198c <ld_dword>:
c000198c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001990:	89 d1                	mov    ecx,edx
c0001992:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001996:	c1 e1 08             	shl    ecx,0x8
c0001999:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199c:	09 ca                	or     edx,ecx
c000199e:	c1 e2 08             	shl    edx,0x8
c00019a1:	09 d0                	or     eax,edx
c00019a3:	c3                   	ret    

c00019a4 <ld_qword>:
c00019a4:	57                   	push   edi
c00019a5:	56                   	push   esi
c00019a6:	53                   	push   ebx
c00019a7:	31 db                	xor    ebx,ebx
c00019a9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019ac:	89 df                	mov    edi,ebx
c00019ae:	89 ce                	mov    esi,ecx
c00019b0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019b4:	0f a4 f7 08          	shld   edi,esi,0x8
c00019b8:	c1 e6 08             	shl    esi,0x8
c00019bb:	09 f2                	or     edx,esi
c00019bd:	89 d6                	mov    esi,edx
c00019bf:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019d9:	c1 e6 08             	shl    esi,0x8
c00019dc:	89 fb                	mov    ebx,edi
c00019de:	09 f2                	or     edx,esi
c00019e0:	89 d1                	mov    ecx,edx
c00019e2:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019e6:	c1 e1 08             	shl    ecx,0x8
c00019e9:	89 da                	mov    edx,ebx
c00019eb:	09 c8                	or     eax,ecx
c00019ed:	5b                   	pop    ebx
c00019ee:	5e                   	pop    esi
c00019ef:	5f                   	pop    edi
c00019f0:	c3                   	ret    

c00019f1 <st_word>:
c00019f1:	66 89 10             	mov    WORD PTR [eax],dx
c00019f4:	c3                   	ret    

c00019f5 <st_dword>:
c00019f5:	89 10                	mov    DWORD PTR [eax],edx
c00019f7:	c3                   	ret    

c00019f8 <st_qword>:
c00019f8:	89 10                	mov    DWORD PTR [eax],edx
c00019fa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00019fd:	c3                   	ret    

c00019fe <mem_cpy>:
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 10                	je     c0001a12 <mem_cpy+0x14>
c0001a02:	57                   	push   edi
c0001a03:	01 c1                	add    ecx,eax
c0001a05:	56                   	push   esi
c0001a06:	89 c7                	mov    edi,eax
c0001a08:	89 d6                	mov    esi,edx
c0001a0a:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0b:	39 f9                	cmp    ecx,edi
c0001a0d:	75 fb                	jne    c0001a0a <mem_cpy+0xc>
c0001a0f:	5e                   	pop    esi
c0001a10:	5f                   	pop    edi
c0001a11:	c3                   	ret    
c0001a12:	c3                   	ret    

c0001a13 <mem_set>:
c0001a13:	01 c1                	add    ecx,eax
c0001a15:	40                   	inc    eax
c0001a16:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a19:	39 c8                	cmp    eax,ecx
c0001a1b:	75 f8                	jne    c0001a15 <mem_set+0x2>
c0001a1d:	c3                   	ret    

c0001a1e <mem_cmp>:
c0001a1e:	57                   	push   edi
c0001a1f:	56                   	push   esi
c0001a20:	89 c6                	mov    esi,eax
c0001a22:	53                   	push   ebx
c0001a23:	46                   	inc    esi
c0001a24:	42                   	inc    edx
c0001a25:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a29:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a2d:	29 fb                	sub    ebx,edi
c0001a2f:	89 cf                	mov    edi,ecx
c0001a31:	29 f7                	sub    edi,esi
c0001a33:	01 c7                	add    edi,eax
c0001a35:	74 04                	je     c0001a3b <mem_cmp+0x1d>
c0001a37:	85 db                	test   ebx,ebx
c0001a39:	74 e8                	je     c0001a23 <mem_cmp+0x5>
c0001a3b:	89 d8                	mov    eax,ebx
c0001a3d:	5b                   	pop    ebx
c0001a3e:	5e                   	pop    esi
c0001a3f:	5f                   	pop    edi
c0001a40:	c3                   	ret    

c0001a41 <chk_chr>:
c0001a41:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a44:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a47:	74 07                	je     c0001a50 <chk_chr+0xf>
c0001a49:	39 d1                	cmp    ecx,edx
c0001a4b:	74 03                	je     c0001a50 <chk_chr+0xf>
c0001a4d:	40                   	inc    eax
c0001a4e:	eb f1                	jmp    c0001a41 <chk_chr>
c0001a50:	89 c8                	mov    eax,ecx
c0001a52:	c3                   	ret    

c0001a53 <dbc_1st>:
c0001a53:	31 c0                	xor    eax,eax
c0001a55:	c3                   	ret    

c0001a56 <dbc_2nd>:
c0001a56:	31 c0                	xor    eax,eax
c0001a58:	c3                   	ret    

c0001a59 <tchar2uni>:
c0001a59:	57                   	push   edi
c0001a5a:	89 c7                	mov    edi,eax
c0001a5c:	56                   	push   esi
c0001a5d:	53                   	push   ebx
c0001a5e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a60:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a62:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a65:	84 c9                	test   cl,cl
c0001a67:	78 0a                	js     c0001a73 <tchar2uni+0x1a>
c0001a69:	0f b6 d1             	movzx  edx,cl
c0001a6c:	89 f3                	mov    ebx,esi
c0001a6e:	e9 9f 00 00 00       	jmp    c0001b12 <tchar2uni+0xb9>
c0001a73:	88 ca                	mov    dl,cl
c0001a75:	83 e2 e0             	and    edx,0xffffffe0
c0001a78:	80 fa c0             	cmp    dl,0xc0
c0001a7b:	75 0c                	jne    c0001a89 <tchar2uni+0x30>
c0001a7d:	89 ca                	mov    edx,ecx
c0001a7f:	b9 01 00 00 00       	mov    ecx,0x1
c0001a84:	83 e2 1f             	and    edx,0x1f
c0001a87:	eb 2e                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a89:	88 ca                	mov    dl,cl
c0001a8b:	83 e2 f0             	and    edx,0xfffffff0
c0001a8e:	80 fa e0             	cmp    dl,0xe0
c0001a91:	75 0c                	jne    c0001a9f <tchar2uni+0x46>
c0001a93:	89 ca                	mov    edx,ecx
c0001a95:	b9 02 00 00 00       	mov    ecx,0x2
c0001a9a:	83 e2 0f             	and    edx,0xf
c0001a9d:	eb 18                	jmp    c0001ab7 <tchar2uni+0x5e>
c0001a9f:	88 ca                	mov    dl,cl
c0001aa1:	83 e2 f8             	and    edx,0xfffffff8
c0001aa4:	88 d0                	mov    al,dl
c0001aa6:	83 ca ff             	or     edx,0xffffffff
c0001aa9:	3c f0                	cmp    al,0xf0
c0001aab:	75 6c                	jne    c0001b19 <tchar2uni+0xc0>
c0001aad:	89 ca                	mov    edx,ecx
c0001aaf:	b9 03 00 00 00       	mov    ecx,0x3
c0001ab4:	83 e2 07             	and    edx,0x7
c0001ab7:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001abb:	46                   	inc    esi
c0001abc:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001abf:	88 c8                	mov    al,cl
c0001ac1:	83 e0 c0             	and    eax,0xffffffc0
c0001ac4:	3c 80                	cmp    al,0x80
c0001ac6:	75 4e                	jne    c0001b16 <tchar2uni+0xbd>
c0001ac8:	c1 e2 06             	shl    edx,0x6
c0001acb:	83 e1 3f             	and    ecx,0x3f
c0001ace:	09 ca                	or     edx,ecx
c0001ad0:	39 de                	cmp    esi,ebx
c0001ad2:	75 e7                	jne    c0001abb <tchar2uni+0x62>
c0001ad4:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ad7:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001add:	77 37                	ja     c0001b16 <tchar2uni+0xbd>
c0001adf:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ae5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001aeb:	76 29                	jbe    c0001b16 <tchar2uni+0xbd>
c0001aed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001af3:	76 1d                	jbe    c0001b12 <tchar2uni+0xb9>
c0001af5:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001afb:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b01:	c1 e1 06             	shl    ecx,0x6
c0001b04:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b0a:	09 ca                	or     edx,ecx
c0001b0c:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b12:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b14:	eb 03                	jmp    c0001b19 <tchar2uni+0xc0>
c0001b16:	83 ca ff             	or     edx,0xffffffff
c0001b19:	5b                   	pop    ebx
c0001b1a:	89 d0                	mov    eax,edx
c0001b1c:	5e                   	pop    esi
c0001b1d:	5f                   	pop    edi
c0001b1e:	c3                   	ret    

c0001b1f <put_utf>:
c0001b1f:	53                   	push   ebx
c0001b20:	83 f8 7f             	cmp    eax,0x7f
c0001b23:	89 c3                	mov    ebx,eax
c0001b25:	b0 00                	mov    al,0x0
c0001b27:	77 11                	ja     c0001b3a <put_utf+0x1b>
c0001b29:	85 c9                	test   ecx,ecx
c0001b2b:	0f 84 e5 00 00 00    	je     c0001c16 <put_utf+0xf7>
c0001b31:	88 1a                	mov    BYTE PTR [edx],bl
c0001b33:	b0 01                	mov    al,0x1
c0001b35:	e9 dc 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b3a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b40:	77 23                	ja     c0001b65 <put_utf+0x46>
c0001b42:	83 f9 01             	cmp    ecx,0x1
c0001b45:	0f 86 cb 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b4b:	89 d8                	mov    eax,ebx
c0001b4d:	83 e3 3f             	and    ebx,0x3f
c0001b50:	c1 e8 06             	shr    eax,0x6
c0001b53:	83 cb 80             	or     ebx,0xffffff80
c0001b56:	83 c8 c0             	or     eax,0xffffffc0
c0001b59:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b5c:	88 02                	mov    BYTE PTR [edx],al
c0001b5e:	b0 02                	mov    al,0x2
c0001b60:	e9 b1 00 00 00       	jmp    c0001c16 <put_utf+0xf7>
c0001b65:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b6b:	77 40                	ja     c0001bad <put_utf+0x8e>
c0001b6d:	83 f9 02             	cmp    ecx,0x2
c0001b70:	0f 86 a0 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b76:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b7c:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b82:	0f 86 8e 00 00 00    	jbe    c0001c16 <put_utf+0xf7>
c0001b88:	89 d8                	mov    eax,ebx
c0001b8a:	c1 e8 0c             	shr    eax,0xc
c0001b8d:	83 c8 e0             	or     eax,0xffffffe0
c0001b90:	88 02                	mov    BYTE PTR [edx],al
c0001b92:	89 d8                	mov    eax,ebx
c0001b94:	83 e3 3f             	and    ebx,0x3f
c0001b97:	c1 e8 06             	shr    eax,0x6
c0001b9a:	83 cb 80             	or     ebx,0xffffff80
c0001b9d:	83 e0 3f             	and    eax,0x3f
c0001ba0:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ba3:	83 c8 80             	or     eax,0xffffff80
c0001ba6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ba9:	b0 03                	mov    al,0x3
c0001bab:	eb 69                	jmp    c0001c16 <put_utf+0xf7>
c0001bad:	83 f9 03             	cmp    ecx,0x3
c0001bb0:	76 64                	jbe    c0001c16 <put_utf+0xf7>
c0001bb2:	89 d9                	mov    ecx,ebx
c0001bb4:	0f b7 c3             	movzx  eax,bx
c0001bb7:	66 31 c9             	xor    cx,cx
c0001bba:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bc0:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bc6:	c1 e9 06             	shr    ecx,0x6
c0001bc9:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bcf:	77 43                	ja     c0001c14 <put_utf+0xf5>
c0001bd1:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001bd7:	77 3b                	ja     c0001c14 <put_utf+0xf5>
c0001bd9:	09 cb                	or     ebx,ecx
c0001bdb:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001be1:	89 d8                	mov    eax,ebx
c0001be3:	c1 e8 12             	shr    eax,0x12
c0001be6:	83 c8 f0             	or     eax,0xfffffff0
c0001be9:	88 02                	mov    BYTE PTR [edx],al
c0001beb:	89 d8                	mov    eax,ebx
c0001bed:	c1 e8 0c             	shr    eax,0xc
c0001bf0:	83 e0 3f             	and    eax,0x3f
c0001bf3:	83 c8 80             	or     eax,0xffffff80
c0001bf6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bf9:	89 d8                	mov    eax,ebx
c0001bfb:	83 e3 3f             	and    ebx,0x3f
c0001bfe:	c1 e8 06             	shr    eax,0x6
c0001c01:	83 cb 80             	or     ebx,0xffffff80
c0001c04:	83 e0 3f             	and    eax,0x3f
c0001c07:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c0a:	83 c8 80             	or     eax,0xffffff80
c0001c0d:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c10:	b0 04                	mov    al,0x4
c0001c12:	eb 02                	jmp    c0001c16 <put_utf+0xf7>
c0001c14:	31 c0                	xor    eax,eax
c0001c16:	5b                   	pop    ebx
c0001c17:	c3                   	ret    

c0001c18 <clst2sect>:
c0001c18:	89 c1                	mov    ecx,eax
c0001c1a:	83 ea 02             	sub    edx,0x2
c0001c1d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c20:	83 e8 02             	sub    eax,0x2
c0001c23:	39 d0                	cmp    eax,edx
c0001c25:	76 0d                	jbe    c0001c34 <clst2sect+0x1c>
c0001c27:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c2b:	f7 e2                	mul    edx
c0001c2d:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c30:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c33:	c3                   	ret    
c0001c34:	31 c0                	xor    eax,eax
c0001c36:	31 d2                	xor    edx,edx
c0001c38:	c3                   	ret    

c0001c39 <clmt_clust>:
c0001c39:	57                   	push   edi
c0001c3a:	89 cf                	mov    edi,ecx
c0001c3c:	56                   	push   esi
c0001c3d:	89 d6                	mov    esi,edx
c0001c3f:	53                   	push   ebx
c0001c40:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c44:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c47:	89 f2                	mov    edx,esi
c0001c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c4b:	c1 ef 09             	shr    edi,0x9
c0001c4e:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c52:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c55:	89 f9                	mov    ecx,edi
c0001c57:	31 ff                	xor    edi,edi
c0001c59:	57                   	push   edi
c0001c5a:	56                   	push   esi
c0001c5b:	51                   	push   ecx
c0001c5c:	52                   	push   edx
c0001c5d:	e8 3e de 01 00       	call   c001faa0 <__udivdi3>
c0001c62:	83 c4 10             	add    esp,0x10
c0001c65:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c67:	85 d2                	test   edx,edx
c0001c69:	74 10                	je     c0001c7b <clmt_clust+0x42>
c0001c6b:	39 d0                	cmp    eax,edx
c0001c6d:	72 07                	jb     c0001c76 <clmt_clust+0x3d>
c0001c6f:	29 d0                	sub    eax,edx
c0001c71:	83 c3 08             	add    ebx,0x8
c0001c74:	eb ef                	jmp    c0001c65 <clmt_clust+0x2c>
c0001c76:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c79:	89 c2                	mov    edx,eax
c0001c7b:	5b                   	pop    ebx
c0001c7c:	89 d0                	mov    eax,edx
c0001c7e:	5e                   	pop    esi
c0001c7f:	5f                   	pop    edi
c0001c80:	c3                   	ret    

c0001c81 <pick_lfn>:
c0001c81:	55                   	push   ebp
c0001c82:	57                   	push   edi
c0001c83:	56                   	push   esi
c0001c84:	89 d6                	mov    esi,edx
c0001c86:	53                   	push   ebx
c0001c87:	89 c3                	mov    ebx,eax
c0001c89:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c8c:	e8 ee fc ff ff       	call   c000197f <ld_word>
c0001c91:	66 85 c0             	test   ax,ax
c0001c94:	74 04                	je     c0001c9a <pick_lfn+0x19>
c0001c96:	31 c0                	xor    eax,eax
c0001c98:	eb 5c                	jmp    c0001cf6 <pick_lfn+0x75>
c0001c9a:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001c9d:	bd 01 00 00 00       	mov    ebp,0x1
c0001ca2:	83 e1 bf             	and    ecx,0xffffffbf
c0001ca5:	31 ff                	xor    edi,edi
c0001ca7:	49                   	dec    ecx
c0001ca8:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cab:	0f b6 87 a0 09 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdf660]
c0001cb2:	01 f0                	add    eax,esi
c0001cb4:	e8 c6 fc ff ff       	call   c000197f <ld_word>
c0001cb9:	66 85 ed             	test   bp,bp
c0001cbc:	74 11                	je     c0001ccf <pick_lfn+0x4e>
c0001cbe:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cc4:	77 d0                	ja     c0001c96 <pick_lfn+0x15>
c0001cc6:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cca:	89 c5                	mov    ebp,eax
c0001ccc:	41                   	inc    ecx
c0001ccd:	eb 04                	jmp    c0001cd3 <pick_lfn+0x52>
c0001ccf:	66 40                	inc    ax
c0001cd1:	75 c3                	jne    c0001c96 <pick_lfn+0x15>
c0001cd3:	47                   	inc    edi
c0001cd4:	83 ff 0d             	cmp    edi,0xd
c0001cd7:	75 d2                	jne    c0001cab <pick_lfn+0x2a>
c0001cd9:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cdc:	74 13                	je     c0001cf1 <pick_lfn+0x70>
c0001cde:	66 85 ed             	test   bp,bp
c0001ce1:	74 0e                	je     c0001cf1 <pick_lfn+0x70>
c0001ce3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ce9:	77 ab                	ja     c0001c96 <pick_lfn+0x15>
c0001ceb:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001cf1:	b8 01 00 00 00       	mov    eax,0x1
c0001cf6:	5b                   	pop    ebx
c0001cf7:	5e                   	pop    esi
c0001cf8:	5f                   	pop    edi
c0001cf9:	5d                   	pop    ebp
c0001cfa:	c3                   	ret    

c0001cfb <put_lfn>:
c0001cfb:	55                   	push   ebp
c0001cfc:	31 ed                	xor    ebp,ebp
c0001cfe:	57                   	push   edi
c0001cff:	89 d7                	mov    edi,edx
c0001d01:	56                   	push   esi
c0001d02:	31 f6                	xor    esi,esi
c0001d04:	53                   	push   ebx
c0001d05:	83 ec 08             	sub    esp,0x8
c0001d08:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d0b:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d13:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d19:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1f:	31 d2                	xor    edx,edx
c0001d21:	e8 cb fc ff ff       	call   c00019f1 <st_word>
c0001d26:	0f b6 d9             	movzx  ebx,cl
c0001d29:	4b                   	dec    ebx
c0001d2a:	6b db 0d             	imul   ebx,ebx,0xd
c0001d2d:	66 83 fe ff          	cmp    si,0xffff
c0001d31:	74 08                	je     c0001d3b <put_lfn+0x40>
c0001d33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d36:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d3a:	43                   	inc    ebx
c0001d3b:	0f b6 85 a0 09 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdf660]
c0001d42:	0f b7 d6             	movzx  edx,si
c0001d45:	01 f8                	add    eax,edi
c0001d47:	e8 a5 fc ff ff       	call   c00019f1 <st_word>
c0001d4c:	66 85 f6             	test   si,si
c0001d4f:	75 03                	jne    c0001d54 <put_lfn+0x59>
c0001d51:	83 ce ff             	or     esi,0xffffffff
c0001d54:	45                   	inc    ebp
c0001d55:	83 fd 0d             	cmp    ebp,0xd
c0001d58:	75 d3                	jne    c0001d2d <put_lfn+0x32>
c0001d5a:	66 46                	inc    si
c0001d5c:	74 0a                	je     c0001d68 <put_lfn+0x6d>
c0001d5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d61:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d66:	75 09                	jne    c0001d71 <put_lfn+0x76>
c0001d68:	88 c8                	mov    al,cl
c0001d6a:	83 c8 40             	or     eax,0x40
c0001d6d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d75:	88 07                	mov    BYTE PTR [edi],al
c0001d77:	83 c4 08             	add    esp,0x8
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <gen_numname>:
c0001d7f:	57                   	push   edi
c0001d80:	89 cf                	mov    edi,ecx
c0001d82:	56                   	push   esi
c0001d83:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d88:	53                   	push   ebx
c0001d89:	89 c6                	mov    esi,eax
c0001d8b:	83 ec 10             	sub    esp,0x10
c0001d8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001d92:	e8 67 fc ff ff       	call   c00019fe <mem_cpy>
c0001d97:	83 fb 05             	cmp    ebx,0x5
c0001d9a:	76 2d                	jbe    c0001dc9 <gen_numname+0x4a>
c0001d9c:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001d9f:	66 85 c0             	test   ax,ax
c0001da2:	74 25                	je     c0001dc9 <gen_numname+0x4a>
c0001da4:	83 c7 02             	add    edi,0x2
c0001da7:	ba 10 00 00 00       	mov    edx,0x10
c0001dac:	01 db                	add    ebx,ebx
c0001dae:	89 c1                	mov    ecx,eax
c0001db0:	66 d1 e8             	shr    ax,1
c0001db3:	83 e1 01             	and    ecx,0x1
c0001db6:	01 cb                	add    ebx,ecx
c0001db8:	0f ba e3 10          	bt     ebx,0x10
c0001dbc:	73 06                	jae    c0001dc4 <gen_numname+0x45>
c0001dbe:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dc4:	4a                   	dec    edx
c0001dc5:	75 e5                	jne    c0001dac <gen_numname+0x2d>
c0001dc7:	eb d3                	jmp    c0001d9c <gen_numname+0x1d>
c0001dc9:	b8 07 00 00 00       	mov    eax,0x7
c0001dce:	88 d9                	mov    cl,bl
c0001dd0:	83 e1 0f             	and    ecx,0xf
c0001dd3:	8d 51 30             	lea    edx,[ecx+0x30]
c0001dd6:	80 fa 39             	cmp    dl,0x39
c0001dd9:	76 03                	jbe    c0001dde <gen_numname+0x5f>
c0001ddb:	8d 51 37             	lea    edx,[ecx+0x37]
c0001dde:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001de1:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001de5:	89 da                	mov    edx,ebx
c0001de7:	c1 ea 04             	shr    edx,0x4
c0001dea:	83 fb 0f             	cmp    ebx,0xf
c0001ded:	76 06                	jbe    c0001df5 <gen_numname+0x76>
c0001def:	89 c8                	mov    eax,ecx
c0001df1:	89 d3                	mov    ebx,edx
c0001df3:	eb d9                	jmp    c0001dce <gen_numname+0x4f>
c0001df5:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001dfa:	31 d2                	xor    edx,edx
c0001dfc:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001dff:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e02:	39 ca                	cmp    edx,ecx
c0001e04:	73 18                	jae    c0001e1e <gen_numname+0x9f>
c0001e06:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e09:	3c 20                	cmp    al,0x20
c0001e0b:	74 11                	je     c0001e1e <gen_numname+0x9f>
c0001e0d:	e8 41 fc ff ff       	call   c0001a53 <dbc_1st>
c0001e12:	85 c0                	test   eax,eax
c0001e14:	74 05                	je     c0001e1b <gen_numname+0x9c>
c0001e16:	39 d3                	cmp    ebx,edx
c0001e18:	74 04                	je     c0001e1e <gen_numname+0x9f>
c0001e1a:	42                   	inc    edx
c0001e1b:	42                   	inc    edx
c0001e1c:	eb e1                	jmp    c0001dff <gen_numname+0x80>
c0001e1e:	b0 20                	mov    al,0x20
c0001e20:	83 f9 07             	cmp    ecx,0x7
c0001e23:	77 05                	ja     c0001e2a <gen_numname+0xab>
c0001e25:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e29:	41                   	inc    ecx
c0001e2a:	42                   	inc    edx
c0001e2b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e2f:	83 fa 07             	cmp    edx,0x7
c0001e32:	76 ea                	jbe    c0001e1e <gen_numname+0x9f>
c0001e34:	83 c4 10             	add    esp,0x10
c0001e37:	5b                   	pop    ebx
c0001e38:	5e                   	pop    esi
c0001e39:	5f                   	pop    edi
c0001e3a:	c3                   	ret    

c0001e3b <sum_sfn>:
c0001e3b:	31 c9                	xor    ecx,ecx
c0001e3d:	31 d2                	xor    edx,edx
c0001e3f:	d0 ca                	ror    dl,1
c0001e41:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e44:	41                   	inc    ecx
c0001e45:	83 f9 0b             	cmp    ecx,0xb
c0001e48:	75 f5                	jne    c0001e3f <sum_sfn+0x4>
c0001e4a:	88 d0                	mov    al,dl
c0001e4c:	c3                   	ret    

c0001e4d <xdir_sum>:
c0001e4d:	56                   	push   esi
c0001e4e:	31 c9                	xor    ecx,ecx
c0001e50:	53                   	push   ebx
c0001e51:	31 d2                	xor    edx,edx
c0001e53:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e57:	43                   	inc    ebx
c0001e58:	c1 e3 05             	shl    ebx,0x5
c0001e5b:	83 fa 02             	cmp    edx,0x2
c0001e5e:	74 0b                	je     c0001e6b <xdir_sum+0x1e>
c0001e60:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e64:	66 d1 c9             	ror    cx,1
c0001e67:	01 f1                	add    ecx,esi
c0001e69:	eb 05                	jmp    c0001e70 <xdir_sum+0x23>
c0001e6b:	ba 03 00 00 00       	mov    edx,0x3
c0001e70:	42                   	inc    edx
c0001e71:	39 d3                	cmp    ebx,edx
c0001e73:	77 e6                	ja     c0001e5b <xdir_sum+0xe>
c0001e75:	89 c8                	mov    eax,ecx
c0001e77:	5b                   	pop    ebx
c0001e78:	5e                   	pop    esi
c0001e79:	c3                   	ret    

c0001e7a <xsum32>:
c0001e7a:	d1 ca                	ror    edx,1
c0001e7c:	0f b6 c0             	movzx  eax,al
c0001e7f:	01 d0                	add    eax,edx
c0001e81:	c3                   	ret    

c0001e82 <get_xfileinfo>:
c0001e82:	55                   	push   ebp
c0001e83:	31 c9                	xor    ecx,ecx
c0001e85:	57                   	push   edi
c0001e86:	bd 40 00 00 00       	mov    ebp,0x40
c0001e8b:	56                   	push   esi
c0001e8c:	31 ff                	xor    edi,edi
c0001e8e:	53                   	push   ebx
c0001e8f:	89 c6                	mov    esi,eax
c0001e91:	83 ec 0c             	sub    esp,0xc
c0001e94:	89 d3                	mov    ebx,edx
c0001e96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001e9d:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001ea1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001ea4:	76 6d                	jbe    c0001f13 <get_xfileinfo+0x91>
c0001ea6:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001eac:	76 0b                	jbe    c0001eb9 <get_xfileinfo+0x37>
c0001eae:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001eb2:	bf 01 00 00 00       	mov    edi,0x1
c0001eb7:	eb 63                	jmp    c0001f1c <get_xfileinfo+0x9a>
c0001eb9:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ebf:	75 03                	jne    c0001ec4 <get_xfileinfo+0x42>
c0001ec1:	83 c5 02             	add    ebp,0x2
c0001ec4:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ec7:	83 c5 02             	add    ebp,0x2
c0001eca:	e8 b0 fa ff ff       	call   c000197f <ld_word>
c0001ecf:	ff 04 24             	inc    DWORD PTR [esp]
c0001ed2:	66 85 c9             	test   cx,cx
c0001ed5:	75 0d                	jne    c0001ee4 <get_xfileinfo+0x62>
c0001ed7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001edd:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ee2:	76 2b                	jbe    c0001f0f <get_xfileinfo+0x8d>
c0001ee4:	c1 e1 10             	shl    ecx,0x10
c0001ee7:	ba ff 00 00 00       	mov    edx,0xff
c0001eec:	0f b7 c0             	movzx  eax,ax
c0001eef:	29 fa                	sub    edx,edi
c0001ef1:	09 c8                	or     eax,ecx
c0001ef3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001ef7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001efb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001eff:	e8 1b fc ff ff       	call   c0001b1f <put_utf>
c0001f04:	84 c0                	test   al,al
c0001f06:	74 a6                	je     c0001eae <get_xfileinfo+0x2c>
c0001f08:	0f b6 c0             	movzx  eax,al
c0001f0b:	01 c7                	add    edi,eax
c0001f0d:	31 c0                	xor    eax,eax
c0001f0f:	89 c1                	mov    ecx,eax
c0001f11:	eb 8a                	jmp    c0001e9d <get_xfileinfo+0x1b>
c0001f13:	85 ff                	test   edi,edi
c0001f15:	74 97                	je     c0001eae <get_xfileinfo+0x2c>
c0001f17:	66 85 c9             	test   cx,cx
c0001f1a:	75 92                	jne    c0001eae <get_xfileinfo+0x2c>
c0001f1c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f21:	31 c0                	xor    eax,eax
c0001f23:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f27:	31 d2                	xor    edx,edx
c0001f29:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f2c:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f2f:	80 e1 10             	and    cl,0x10
c0001f32:	75 08                	jne    c0001f3c <get_xfileinfo+0xba>
c0001f34:	8d 46 38             	lea    eax,[esi+0x38]
c0001f37:	e8 68 fa ff ff       	call   c00019a4 <ld_qword>
c0001f3c:	89 03                	mov    DWORD PTR [ebx],eax
c0001f3e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f41:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f44:	e8 36 fa ff ff       	call   c000197f <ld_word>
c0001f49:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f4d:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f50:	e8 2a fa ff ff       	call   c000197f <ld_word>
c0001f55:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f59:	83 c4 0c             	add    esp,0xc
c0001f5c:	5b                   	pop    ebx
c0001f5d:	5e                   	pop    esi
c0001f5e:	5f                   	pop    edi
c0001f5f:	5d                   	pop    ebp
c0001f60:	c3                   	ret    

c0001f61 <get_ldnumber>:
c0001f61:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f63:	85 d2                	test   edx,edx
c0001f65:	74 14                	je     c0001f7b <get_ldnumber+0x1a>
c0001f67:	56                   	push   esi
c0001f68:	53                   	push   ebx
c0001f69:	89 d3                	mov    ebx,edx
c0001f6b:	43                   	inc    ebx
c0001f6c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f6f:	80 f9 1f             	cmp    cl,0x1f
c0001f72:	76 0d                	jbe    c0001f81 <get_ldnumber+0x20>
c0001f74:	80 f9 3a             	cmp    cl,0x3a
c0001f77:	75 f2                	jne    c0001f6b <get_ldnumber+0xa>
c0001f79:	eb 0a                	jmp    c0001f85 <get_ldnumber+0x24>
c0001f7b:	83 c9 ff             	or     ecx,0xffffffff
c0001f7e:	89 c8                	mov    eax,ecx
c0001f80:	c3                   	ret    
c0001f81:	31 c9                	xor    ecx,ecx
c0001f83:	eb 24                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001f85:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f88:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f8b:	80 f9 09             	cmp    cl,0x9
c0001f8e:	77 16                	ja     c0001fa6 <get_ldnumber+0x45>
c0001f90:	83 c2 02             	add    edx,0x2
c0001f93:	83 c9 ff             	or     ecx,0xffffffff
c0001f96:	39 d3                	cmp    ebx,edx
c0001f98:	75 0f                	jne    c0001fa9 <get_ldnumber+0x48>
c0001f9a:	89 f2                	mov    edx,esi
c0001f9c:	89 18                	mov    DWORD PTR [eax],ebx
c0001f9e:	0f be ca             	movsx  ecx,dl
c0001fa1:	83 e9 30             	sub    ecx,0x30
c0001fa4:	eb 03                	jmp    c0001fa9 <get_ldnumber+0x48>
c0001fa6:	83 c9 ff             	or     ecx,0xffffffff
c0001fa9:	89 c8                	mov    eax,ecx
c0001fab:	5b                   	pop    ebx
c0001fac:	5e                   	pop    esi
c0001fad:	c3                   	ret    

c0001fae <crc32>:
c0001fae:	56                   	push   esi
c0001faf:	89 d6                	mov    esi,edx
c0001fb1:	53                   	push   ebx
c0001fb2:	b2 01                	mov    dl,0x1
c0001fb4:	bb 08 00 00 00       	mov    ebx,0x8
c0001fb9:	89 f1                	mov    ecx,esi
c0001fbb:	84 d1                	test   cl,dl
c0001fbd:	0f 95 c1             	setne  cl
c0001fc0:	0f b6 c9             	movzx  ecx,cl
c0001fc3:	31 c1                	xor    ecx,eax
c0001fc5:	89 c8                	mov    eax,ecx
c0001fc7:	d1 e8                	shr    eax,1
c0001fc9:	80 e1 01             	and    cl,0x1
c0001fcc:	74 05                	je     c0001fd3 <crc32+0x25>
c0001fce:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fd3:	d1 e2                	shl    edx,1
c0001fd5:	4b                   	dec    ebx
c0001fd6:	75 e1                	jne    c0001fb9 <crc32+0xb>
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	c3                   	ret    

c0001fdb <test_gpt_header>:
c0001fdb:	55                   	push   ebp
c0001fdc:	b9 10 00 00 00       	mov    ecx,0x10
c0001fe1:	57                   	push   edi
c0001fe2:	ba a0 08 02 c0       	mov    edx,0xc00208a0
c0001fe7:	56                   	push   esi
c0001fe8:	31 ff                	xor    edi,edi
c0001fea:	53                   	push   ebx
c0001feb:	89 c3                	mov    ebx,eax
c0001fed:	e8 2c fa ff ff       	call   c0001a1e <mem_cmp>
c0001ff2:	85 c0                	test   eax,eax
c0001ff4:	75 55                	jne    c000204b <test_gpt_header+0x70>
c0001ff6:	89 c7                	mov    edi,eax
c0001ff8:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0001ffd:	83 ce ff             	or     esi,0xffffffff
c0002000:	31 d2                	xor    edx,edx
c0002002:	83 fd 03             	cmp    ebp,0x3
c0002005:	76 05                	jbe    c000200c <test_gpt_header+0x31>
c0002007:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000200c:	89 f0                	mov    eax,esi
c000200e:	45                   	inc    ebp
c000200f:	e8 9a ff ff ff       	call   c0001fae <crc32>
c0002014:	83 fd 4c             	cmp    ebp,0x4c
c0002017:	89 c6                	mov    esi,eax
c0002019:	75 e5                	jne    c0002000 <test_gpt_header+0x25>
c000201b:	8d 43 10             	lea    eax,[ebx+0x10]
c000201e:	f7 d6                	not    esi
c0002020:	e8 67 f9 ff ff       	call   c000198c <ld_dword>
c0002025:	39 c6                	cmp    esi,eax
c0002027:	75 22                	jne    c000204b <test_gpt_header+0x70>
c0002029:	8d 43 54             	lea    eax,[ebx+0x54]
c000202c:	e8 5b f9 ff ff       	call   c000198c <ld_dword>
c0002031:	83 c0 80             	add    eax,0xffffff80
c0002034:	75 15                	jne    c000204b <test_gpt_header+0x70>
c0002036:	8d 43 50             	lea    eax,[ebx+0x50]
c0002039:	e8 4e f9 ff ff       	call   c000198c <ld_dword>
c000203e:	3d 80 00 00 00       	cmp    eax,0x80
c0002043:	0f 96 c0             	setbe  al
c0002046:	0f b6 c0             	movzx  eax,al
c0002049:	89 c7                	mov    edi,eax
c000204b:	5b                   	pop    ebx
c000204c:	89 f8                	mov    eax,edi
c000204e:	5e                   	pop    esi
c000204f:	5f                   	pop    edi
c0002050:	5d                   	pop    ebp
c0002051:	c3                   	ret    

c0002052 <make_rand>:
c0002052:	56                   	push   esi
c0002053:	85 c0                	test   eax,eax
c0002055:	53                   	push   ebx
c0002056:	75 05                	jne    c000205d <make_rand+0xb>
c0002058:	b8 01 00 00 00       	mov    eax,0x1
c000205d:	01 d1                	add    ecx,edx
c000205f:	bb 08 00 00 00       	mov    ebx,0x8
c0002064:	89 c6                	mov    esi,eax
c0002066:	d1 e8                	shr    eax,1
c0002068:	83 e6 01             	and    esi,0x1
c000206b:	85 f6                	test   esi,esi
c000206d:	74 05                	je     c0002074 <make_rand+0x22>
c000206f:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002074:	4b                   	dec    ebx
c0002075:	75 ed                	jne    c0002064 <make_rand+0x12>
c0002077:	42                   	inc    edx
c0002078:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000207b:	39 ca                	cmp    edx,ecx
c000207d:	75 e0                	jne    c000205f <make_rand+0xd>
c000207f:	5b                   	pop    ebx
c0002080:	5e                   	pop    esi
c0002081:	c3                   	ret    

c0002082 <validate>:
c0002082:	56                   	push   esi
c0002083:	53                   	push   ebx
c0002084:	89 d6                	mov    esi,edx
c0002086:	51                   	push   ecx
c0002087:	85 c0                	test   eax,eax
c0002089:	75 09                	jne    c0002094 <validate+0x12>
c000208b:	b8 09 00 00 00       	mov    eax,0x9
c0002090:	31 c9                	xor    ecx,ecx
c0002092:	eb 2f                	jmp    c00020c3 <validate+0x41>
c0002094:	89 c3                	mov    ebx,eax
c0002096:	8b 00                	mov    eax,DWORD PTR [eax]
c0002098:	85 c0                	test   eax,eax
c000209a:	74 ef                	je     c000208b <validate+0x9>
c000209c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000209f:	74 ea                	je     c000208b <validate+0x9>
c00020a1:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020a5:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020a9:	75 e0                	jne    c000208b <validate+0x9>
c00020ab:	83 ec 0c             	sub    esp,0xc
c00020ae:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020b2:	50                   	push   eax
c00020b3:	e8 76 f8 ff ff       	call   c000192e <disk_status>
c00020b8:	83 c4 10             	add    esp,0x10
c00020bb:	a8 01                	test   al,0x1
c00020bd:	75 cc                	jne    c000208b <validate+0x9>
c00020bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020c1:	31 c0                	xor    eax,eax
c00020c3:	89 0e                	mov    DWORD PTR [esi],ecx
c00020c5:	5a                   	pop    edx
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	c3                   	ret    

c00020c9 <sync_window>:
c00020c9:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020cd:	0f 84 85 00 00 00    	je     c0002158 <sync_window+0x8f>
c00020d3:	55                   	push   ebp
c00020d4:	8d 68 54             	lea    ebp,[eax+0x54]
c00020d7:	57                   	push   edi
c00020d8:	56                   	push   esi
c00020d9:	53                   	push   ebx
c00020da:	89 c3                	mov    ebx,eax
c00020dc:	83 ec 28             	sub    esp,0x28
c00020df:	6a 01                	push   0x1
c00020e1:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020e4:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020e7:	55                   	push   ebp
c00020e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020ec:	50                   	push   eax
c00020ed:	e8 58 f8 ff ff       	call   c000194a <disk_write>
c00020f2:	83 c4 20             	add    esp,0x20
c00020f5:	ba 01 00 00 00       	mov    edx,0x1
c00020fa:	85 c0                	test   eax,eax
c00020fc:	75 50                	jne    c000214e <sync_window+0x85>
c00020fe:	31 ff                	xor    edi,edi
c0002100:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002103:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002107:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000210b:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000210e:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002111:	89 c6                	mov    esi,eax
c0002113:	89 d7                	mov    edi,edx
c0002115:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002118:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000211c:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000211f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002123:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002127:	73 23                	jae    c000214c <sync_window+0x83>
c0002129:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000212d:	75 1d                	jne    c000214c <sync_window+0x83>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	6a 01                	push   0x1
c0002134:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002138:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000213c:	52                   	push   edx
c000213d:	50                   	push   eax
c000213e:	55                   	push   ebp
c000213f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002143:	50                   	push   eax
c0002144:	e8 01 f8 ff ff       	call   c000194a <disk_write>
c0002149:	83 c4 20             	add    esp,0x20
c000214c:	31 d2                	xor    edx,edx
c000214e:	83 c4 1c             	add    esp,0x1c
c0002151:	89 d0                	mov    eax,edx
c0002153:	5b                   	pop    ebx
c0002154:	5e                   	pop    esi
c0002155:	5f                   	pop    edi
c0002156:	5d                   	pop    ebp
c0002157:	c3                   	ret    
c0002158:	31 d2                	xor    edx,edx
c000215a:	89 d0                	mov    eax,edx
c000215c:	c3                   	ret    

c000215d <move_window>:
c000215d:	56                   	push   esi
c000215e:	53                   	push   ebx
c000215f:	89 c3                	mov    ebx,eax
c0002161:	83 ec 14             	sub    esp,0x14
c0002164:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002167:	75 07                	jne    c0002170 <move_window+0x13>
c0002169:	31 f6                	xor    esi,esi
c000216b:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000216e:	74 59                	je     c00021c9 <move_window+0x6c>
c0002170:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002174:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002178:	89 d8                	mov    eax,ebx
c000217a:	e8 4a ff ff ff       	call   c00020c9 <sync_window>
c000217f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002183:	89 c6                	mov    esi,eax
c0002185:	85 c0                	test   eax,eax
c0002187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000218b:	75 3c                	jne    c00021c9 <move_window+0x6c>
c000218d:	83 ec 0c             	sub    esp,0xc
c0002190:	8d 43 54             	lea    eax,[ebx+0x54]
c0002193:	6a 01                	push   0x1
c0002195:	51                   	push   ecx
c0002196:	52                   	push   edx
c0002197:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000219b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000219f:	50                   	push   eax
c00021a0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021a4:	50                   	push   eax
c00021a5:	e8 8a f7 ff ff       	call   c0001934 <disk_read>
c00021aa:	83 c4 20             	add    esp,0x20
c00021ad:	85 c0                	test   eax,eax
c00021af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021b7:	74 0a                	je     c00021c3 <move_window+0x66>
c00021b9:	83 ca ff             	or     edx,0xffffffff
c00021bc:	be 01 00 00 00       	mov    esi,0x1
c00021c1:	89 d1                	mov    ecx,edx
c00021c3:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021c6:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021c9:	89 f0                	mov    eax,esi
c00021cb:	83 c4 14             	add    esp,0x14
c00021ce:	5b                   	pop    ebx
c00021cf:	5e                   	pop    esi
c00021d0:	c3                   	ret    

c00021d1 <check_fs>:
c00021d1:	53                   	push   ebx
c00021d2:	89 c3                	mov    ebx,eax
c00021d4:	83 ec 08             	sub    esp,0x8
c00021d7:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021db:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021e2:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021e9:	e8 6f ff ff ff       	call   c000215d <move_window>
c00021ee:	ba 04 00 00 00       	mov    edx,0x4
c00021f3:	85 c0                	test   eax,eax
c00021f5:	0f 85 89 00 00 00    	jne    c0002284 <check_fs+0xb3>
c00021fb:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002201:	e8 79 f7 ff ff       	call   c000197f <ld_word>
c0002206:	ba 03 00 00 00       	mov    edx,0x3
c000220b:	66 3d 55 aa          	cmp    ax,0xaa55
c000220f:	75 73                	jne    c0002284 <check_fs+0xb3>
c0002211:	ba c0 09 02 c0       	mov    edx,0xc00209c0
c0002216:	8d 43 54             	lea    eax,[ebx+0x54]
c0002219:	b9 0b 00 00 00       	mov    ecx,0xb
c000221e:	e8 fb f7 ff ff       	call   c0001a1e <mem_cmp>
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	74 58                	je     c0002284 <check_fs+0xb3>
c000222c:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000222f:	8d 50 18             	lea    edx,[eax+0x18]
c0002232:	80 fa 01             	cmp    dl,0x1
c0002235:	76 09                	jbe    c0002240 <check_fs+0x6f>
c0002237:	ba 02 00 00 00       	mov    edx,0x2
c000223c:	3c eb                	cmp    al,0xeb
c000223e:	75 44                	jne    c0002284 <check_fs+0xb3>
c0002240:	ba 68 2e 02 c0       	mov    edx,0xc0022e68
c0002245:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000224b:	b9 03 00 00 00       	mov    ecx,0x3
c0002250:	e8 c9 f7 ff ff       	call   c0001a1e <mem_cmp>
c0002255:	31 d2                	xor    edx,edx
c0002257:	85 c0                	test   eax,eax
c0002259:	74 29                	je     c0002284 <check_fs+0xb3>
c000225b:	ba cc 09 02 c0       	mov    edx,0xc00209cc
c0002260:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002266:	b9 05 00 00 00       	mov    ecx,0x5
c000226b:	e8 ae f7 ff ff       	call   c0001a1e <mem_cmp>
c0002270:	31 d2                	xor    edx,edx
c0002272:	85 c0                	test   eax,eax
c0002274:	74 0e                	je     c0002284 <check_fs+0xb3>
c0002276:	31 d2                	xor    edx,edx
c0002278:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000227f:	0f 95 c2             	setne  dl
c0002282:	01 d2                	add    edx,edx
c0002284:	89 d0                	mov    eax,edx
c0002286:	83 c4 08             	add    esp,0x8
c0002289:	5b                   	pop    ebx
c000228a:	c3                   	ret    

c000228b <find_volume>:
c000228b:	55                   	push   ebp
c000228c:	31 c9                	xor    ecx,ecx
c000228e:	57                   	push   edi
c000228f:	56                   	push   esi
c0002290:	89 d6                	mov    esi,edx
c0002292:	53                   	push   ebx
c0002293:	31 d2                	xor    edx,edx
c0002295:	83 ec 3c             	sub    esp,0x3c
c0002298:	89 c3                	mov    ebx,eax
c000229a:	e8 32 ff ff ff       	call   c00021d1 <check_fs>
c000229f:	83 f8 02             	cmp    eax,0x2
c00022a2:	74 0e                	je     c00022b2 <find_volume+0x27>
c00022a4:	0f 87 5d 01 00 00    	ja     c0002407 <find_volume+0x17c>
c00022aa:	85 f6                	test   esi,esi
c00022ac:	0f 84 55 01 00 00    	je     c0002407 <find_volume+0x17c>
c00022b2:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022b9:	0f 85 dd 00 00 00    	jne    c000239c <find_volume+0x111>
c00022bf:	31 c9                	xor    ecx,ecx
c00022c1:	ba 01 00 00 00       	mov    edx,0x1
c00022c6:	89 d8                	mov    eax,ebx
c00022c8:	e8 90 fe ff ff       	call   c000215d <move_window>
c00022cd:	85 c0                	test   eax,eax
c00022cf:	74 0a                	je     c00022db <find_volume+0x50>
c00022d1:	b8 04 00 00 00       	mov    eax,0x4
c00022d6:	e9 2c 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022db:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022de:	89 e8                	mov    eax,ebp
c00022e0:	e8 f6 fc ff ff       	call   c0001fdb <test_gpt_header>
c00022e5:	85 c0                	test   eax,eax
c00022e7:	75 0a                	jne    c00022f3 <find_volume+0x68>
c00022e9:	b8 03 00 00 00       	mov    eax,0x3
c00022ee:	e9 14 01 00 00       	jmp    c0002407 <find_volume+0x17c>
c00022f3:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00022f9:	e8 8e f6 ff ff       	call   c000198c <ld_dword>
c00022fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002302:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002308:	e8 97 f6 ff ff       	call   c00019a4 <ld_qword>
c000230d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002315:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002319:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000231d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002325:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002329:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000232d:	74 ba                	je     c00022e9 <find_volume+0x5e>
c000232f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002333:	31 c9                	xor    ecx,ecx
c0002335:	c1 e7 07             	shl    edi,0x7
c0002338:	89 d8                	mov    eax,ebx
c000233a:	89 fa                	mov    edx,edi
c000233c:	c1 ea 09             	shr    edx,0x9
c000233f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002343:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002347:	e8 11 fe ff ff       	call   c000215d <move_window>
c000234c:	85 c0                	test   eax,eax
c000234e:	75 81                	jne    c00022d1 <find_volume+0x46>
c0002350:	81 e7 80 01 00 00    	and    edi,0x180
c0002356:	b9 10 00 00 00       	mov    ecx,0x10
c000235b:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000235f:	ba b0 09 02 c0       	mov    edx,0xc00209b0
c0002364:	e8 b5 f6 ff ff       	call   c0001a1e <mem_cmp>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 29                	jne    c0002396 <find_volume+0x10b>
c000236d:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002371:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002375:	e8 2a f6 ff ff       	call   c00019a4 <ld_qword>
c000237a:	89 d1                	mov    ecx,edx
c000237c:	89 c2                	mov    edx,eax
c000237e:	89 d8                	mov    eax,ebx
c0002380:	e8 4c fe ff ff       	call   c00021d1 <check_fs>
c0002385:	85 f6                	test   esi,esi
c0002387:	75 07                	jne    c0002390 <find_volume+0x105>
c0002389:	83 f8 01             	cmp    eax,0x1
c000238c:	77 08                	ja     c0002396 <find_volume+0x10b>
c000238e:	eb 77                	jmp    c0002407 <find_volume+0x17c>
c0002390:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002394:	74 71                	je     c0002407 <find_volume+0x17c>
c0002396:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000239a:	eb 89                	jmp    c0002325 <find_volume+0x9a>
c000239c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023a0:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023a6:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023b0:	89 cd                	mov    ebp,ecx
c00023b2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023b6:	89 f8                	mov    eax,edi
c00023b8:	83 c7 10             	add    edi,0x10
c00023bb:	e8 cc f5 ff ff       	call   c000198c <ld_dword>
c00023c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023c4:	89 01                	mov    DWORD PTR [ecx],eax
c00023c6:	83 c1 04             	add    ecx,0x4
c00023c9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023cd:	75 e3                	jne    c00023b2 <find_volume+0x127>
c00023cf:	31 ff                	xor    edi,edi
c00023d1:	85 f6                	test   esi,esi
c00023d3:	74 03                	je     c00023d8 <find_volume+0x14d>
c00023d5:	8d 7e ff             	lea    edi,[esi-0x1]
c00023d8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023dc:	85 d2                	test   edx,edx
c00023de:	74 14                	je     c00023f4 <find_volume+0x169>
c00023e0:	31 c9                	xor    ecx,ecx
c00023e2:	89 d8                	mov    eax,ebx
c00023e4:	e8 e8 fd ff ff       	call   c00021d1 <check_fs>
c00023e9:	83 f8 01             	cmp    eax,0x1
c00023ec:	76 19                	jbe    c0002407 <find_volume+0x17c>
c00023ee:	85 f6                	test   esi,esi
c00023f0:	74 0f                	je     c0002401 <find_volume+0x176>
c00023f2:	eb 13                	jmp    c0002407 <find_volume+0x17c>
c00023f4:	85 f6                	test   esi,esi
c00023f6:	0f 85 ed fe ff ff    	jne    c00022e9 <find_volume+0x5e>
c00023fc:	b8 03 00 00 00       	mov    eax,0x3
c0002401:	47                   	inc    edi
c0002402:	83 ff 03             	cmp    edi,0x3
c0002405:	76 d1                	jbe    c00023d8 <find_volume+0x14d>
c0002407:	83 c4 3c             	add    esp,0x3c
c000240a:	5b                   	pop    ebx
c000240b:	5e                   	pop    esi
c000240c:	5f                   	pop    edi
c000240d:	5d                   	pop    ebp
c000240e:	c3                   	ret    

c000240f <mount_volume>:
c000240f:	55                   	push   ebp
c0002410:	57                   	push   edi
c0002411:	89 cf                	mov    edi,ecx
c0002413:	56                   	push   esi
c0002414:	53                   	push   ebx
c0002415:	bb 0b 00 00 00       	mov    ebx,0xb
c000241a:	83 ec 3c             	sub    esp,0x3c
c000241d:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002423:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002427:	e8 35 fb ff ff       	call   c0001f61 <get_ldnumber>
c000242c:	85 c0                	test   eax,eax
c000242e:	0f 88 3a 05 00 00    	js     c000296e <mount_volume+0x55f>
c0002434:	8b 2c 85 40 3f 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdc0c0]
c000243b:	89 c6                	mov    esi,eax
c000243d:	bb 0c 00 00 00       	mov    ebx,0xc
c0002442:	85 ed                	test   ebp,ebp
c0002444:	0f 84 24 05 00 00    	je     c000296e <mount_volume+0x55f>
c000244a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000244e:	83 e7 fe             	and    edi,0xfffffffe
c0002451:	89 2a                	mov    DWORD PTR [edx],ebp
c0002453:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002457:	74 32                	je     c000248b <mount_volume+0x7c>
c0002459:	83 ec 0c             	sub    esp,0xc
c000245c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002460:	50                   	push   eax
c0002461:	e8 c8 f4 ff ff       	call   c000192e <disk_status>
c0002466:	83 c4 10             	add    esp,0x10
c0002469:	a8 01                	test   al,0x1
c000246b:	75 1e                	jne    c000248b <mount_volume+0x7c>
c000246d:	31 db                	xor    ebx,ebx
c000246f:	89 f9                	mov    ecx,edi
c0002471:	84 c9                	test   cl,cl
c0002473:	0f 84 f5 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002479:	a8 04                	test   al,0x4
c000247b:	0f 84 ed 04 00 00    	je     c000296e <mount_volume+0x55f>
c0002481:	bb 0a 00 00 00       	mov    ebx,0xa
c0002486:	e9 e3 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c000248b:	83 ec 0c             	sub    esp,0xc
c000248e:	89 f0                	mov    eax,esi
c0002490:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002494:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002497:	0f b6 f0             	movzx  esi,al
c000249a:	bb 03 00 00 00       	mov    ebx,0x3
c000249f:	56                   	push   esi
c00024a0:	e8 8c f4 ff ff       	call   c0001931 <disk_initialize>
c00024a5:	83 c4 10             	add    esp,0x10
c00024a8:	a8 01                	test   al,0x1
c00024aa:	0f 85 be 04 00 00    	jne    c000296e <mount_volume+0x55f>
c00024b0:	89 f9                	mov    ecx,edi
c00024b2:	84 c9                	test   cl,cl
c00024b4:	74 04                	je     c00024ba <mount_volume+0xab>
c00024b6:	a8 04                	test   al,0x4
c00024b8:	75 c7                	jne    c0002481 <mount_volume+0x72>
c00024ba:	31 d2                	xor    edx,edx
c00024bc:	89 e8                	mov    eax,ebp
c00024be:	e8 c8 fd ff ff       	call   c000228b <find_volume>
c00024c3:	83 f8 04             	cmp    eax,0x4
c00024c6:	75 0a                	jne    c00024d2 <mount_volume+0xc3>
c00024c8:	bb 01 00 00 00       	mov    ebx,0x1
c00024cd:	e9 9c 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024d2:	83 f8 01             	cmp    eax,0x1
c00024d5:	76 0a                	jbe    c00024e1 <mount_volume+0xd2>
c00024d7:	bb 0d 00 00 00       	mov    ebx,0xd
c00024dc:	e9 8d 04 00 00       	jmp    c000296e <mount_volume+0x55f>
c00024e1:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024e4:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024ef:	75 17                	jne    c0002508 <mount_volume+0xf9>
c00024f1:	b8 0b 00 00 00       	mov    eax,0xb
c00024f6:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00024fb:	75 da                	jne    c00024d7 <mount_volume+0xc8>
c00024fd:	40                   	inc    eax
c00024fe:	83 f8 40             	cmp    eax,0x40
c0002501:	75 f3                	jne    c00024f6 <mount_volume+0xe7>
c0002503:	e9 5a 02 00 00       	jmp    c0002762 <mount_volume+0x353>
c0002508:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000250b:	e8 6f f4 ff ff       	call   c000197f <ld_word>
c0002510:	66 3d 00 02          	cmp    ax,0x200
c0002514:	75 c1                	jne    c00024d7 <mount_volume+0xc8>
c0002516:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002519:	e8 61 f4 ff ff       	call   c000197f <ld_word>
c000251e:	0f b7 c0             	movzx  eax,ax
c0002521:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002525:	85 c0                	test   eax,eax
c0002527:	75 0c                	jne    c0002535 <mount_volume+0x126>
c0002529:	8d 45 78             	lea    eax,[ebp+0x78]
c000252c:	e8 5b f4 ff ff       	call   c000198c <ld_dword>
c0002531:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002539:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000253c:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000253f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002543:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002546:	48                   	dec    eax
c0002547:	3c 01                	cmp    al,0x1
c0002549:	77 8c                	ja     c00024d7 <mount_volume+0xc8>
c000254b:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000254f:	89 c3                	mov    ebx,eax
c0002551:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002555:	66 85 c0             	test   ax,ax
c0002558:	0f 84 79 ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c000255e:	8d 40 ff             	lea    eax,[eax-0x1]
c0002561:	85 d8                	test   eax,ebx
c0002563:	0f 85 6e ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002569:	8d 45 65             	lea    eax,[ebp+0x65]
c000256c:	e8 0e f4 ff ff       	call   c000197f <ld_word>
c0002571:	89 c7                	mov    edi,eax
c0002573:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002577:	a8 0f                	test   al,0xf
c0002579:	0f 85 58 ff ff ff    	jne    c00024d7 <mount_volume+0xc8>
c000257f:	8d 45 67             	lea    eax,[ebp+0x67]
c0002582:	e8 f8 f3 ff ff       	call   c000197f <ld_word>
c0002587:	0f b7 f0             	movzx  esi,ax
c000258a:	85 f6                	test   esi,esi
c000258c:	75 0a                	jne    c0002598 <mount_volume+0x189>
c000258e:	8d 45 74             	lea    eax,[ebp+0x74]
c0002591:	e8 f6 f3 ff ff       	call   c000198c <ld_dword>
c0002596:	89 c6                	mov    esi,eax
c0002598:	8d 45 62             	lea    eax,[ebp+0x62]
c000259b:	e8 df f3 ff ff       	call   c000197f <ld_word>
c00025a0:	66 85 c0             	test   ax,ax
c00025a3:	0f 84 2e ff ff ff    	je     c00024d7 <mount_volume+0xc8>
c00025a9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025ae:	0f b7 c8             	movzx  ecx,ax
c00025b1:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025ba:	89 fa                	mov    edx,edi
c00025bc:	66 c1 ea 04          	shr    dx,0x4
c00025c0:	0f b7 d2             	movzx  edx,dx
c00025c3:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025c7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025ce:	39 c6                	cmp    esi,eax
c00025d0:	0f 82 01 ff ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025d6:	29 c6                	sub    esi,eax
c00025d8:	31 d2                	xor    edx,edx
c00025da:	89 f0                	mov    eax,esi
c00025dc:	f7 f3                	div    ebx
c00025de:	39 de                	cmp    esi,ebx
c00025e0:	0f 82 f1 fe ff ff    	jb     c00024d7 <mount_volume+0xc8>
c00025e6:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025eb:	0f 87 e6 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00025f1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025f6:	0f 86 63 03 00 00    	jbe    c000295f <mount_volume+0x550>
c00025fc:	bb 03 00 00 00       	mov    ebx,0x3
c0002601:	8d 70 02             	lea    esi,[eax+0x2]
c0002604:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000260c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000260f:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002612:	31 d2                	xor    edx,edx
c0002614:	89 c8                	mov    eax,ecx
c0002616:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002619:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000261d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002621:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002625:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002629:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000262c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000262f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002633:	31 d2                	xor    edx,edx
c0002635:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002639:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000263d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002640:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002643:	83 fb 03             	cmp    ebx,0x3
c0002646:	75 2b                	jne    c0002673 <mount_volume+0x264>
c0002648:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000264b:	e8 2f f3 ff ff       	call   c000197f <ld_word>
c0002650:	66 09 c7             	or     di,ax
c0002653:	0f 85 7e fe ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002659:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000265f:	c1 e6 02             	shl    esi,0x2
c0002662:	e8 25 f3 ff ff       	call   c000198c <ld_dword>
c0002667:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000266e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002671:	eb 30                	jmp    c00026a3 <mount_volume+0x294>
c0002673:	66 85 ff             	test   di,di
c0002676:	0f 84 5b fe ff ff    	je     c00024d7 <mount_volume+0xc8>
c000267c:	31 d2                	xor    edx,edx
c000267e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002682:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002686:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000268a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000268d:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002690:	83 fb 02             	cmp    ebx,0x2
c0002693:	75 04                	jne    c0002699 <mount_volume+0x28a>
c0002695:	01 f6                	add    esi,esi
c0002697:	eb 0a                	jmp    c00026a3 <mount_volume+0x294>
c0002699:	8d 04 76             	lea    eax,[esi+esi*2]
c000269c:	83 e6 01             	and    esi,0x1
c000269f:	d1 e8                	shr    eax,1
c00026a1:	01 c6                	add    esi,eax
c00026a3:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026a9:	c1 ee 09             	shr    esi,0x9
c00026ac:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026b0:	0f 87 21 fe ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00026b6:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026bd:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026c4:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026c8:	83 fb 03             	cmp    ebx,0x3
c00026cb:	75 7a                	jne    c0002747 <mount_volume+0x338>
c00026cd:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026d3:	e8 a7 f2 ff ff       	call   c000197f <ld_word>
c00026d8:	66 48                	dec    ax
c00026da:	75 6b                	jne    c0002747 <mount_volume+0x338>
c00026dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026e4:	83 c2 01             	add    edx,0x1
c00026e7:	89 e8                	mov    eax,ebp
c00026e9:	83 d1 00             	adc    ecx,0x0
c00026ec:	e8 6c fa ff ff       	call   c000215d <move_window>
c00026f1:	85 c0                	test   eax,eax
c00026f3:	75 52                	jne    c0002747 <mount_volume+0x338>
c00026f5:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00026f9:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00026ff:	e8 7b f2 ff ff       	call   c000197f <ld_word>
c0002704:	66 3d 55 aa          	cmp    ax,0xaa55
c0002708:	75 3d                	jne    c0002747 <mount_volume+0x338>
c000270a:	8d 45 54             	lea    eax,[ebp+0x54]
c000270d:	e8 7a f2 ff ff       	call   c000198c <ld_dword>
c0002712:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002717:	75 2e                	jne    c0002747 <mount_volume+0x338>
c0002719:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000271f:	e8 68 f2 ff ff       	call   c000198c <ld_dword>
c0002724:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002729:	75 1c                	jne    c0002747 <mount_volume+0x338>
c000272b:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002731:	e8 56 f2 ff ff       	call   c000198c <ld_dword>
c0002736:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002739:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000273f:	e8 48 f2 ff ff       	call   c000198c <ld_dword>
c0002744:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002747:	66 a1 20 3f 02 c0    	mov    ax,ds:0xc0023f20
c000274d:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002750:	40                   	inc    eax
c0002751:	31 db                	xor    ebx,ebx
c0002753:	66 a3 20 3f 02 c0    	mov    ds:0xc0023f20,ax
c0002759:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000275d:	e9 0c 02 00 00       	jmp    c000296e <mount_volume+0x55f>
c0002762:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002768:	e8 12 f2 ff ff       	call   c000197f <ld_word>
c000276d:	66 3d 00 01          	cmp    ax,0x100
c0002771:	0f 85 60 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002777:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000277e:	0f 85 53 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c0002784:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000278a:	e8 15 f2 ff ff       	call   c00019a4 <ld_qword>
c000278f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002793:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002797:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000279d:	e8 ea f1 ff ff       	call   c000198c <ld_dword>
c00027a2:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027a5:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ab:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ae:	fe c8                	dec    al
c00027b0:	0f 85 21 fd ff ff    	jne    c00024d7 <mount_volume+0xc8>
c00027b6:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027bd:	bb 01 00 00 00       	mov    ebx,0x1
c00027c2:	d3 e3                	shl    ebx,cl
c00027c4:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027c8:	66 85 db             	test   bx,bx
c00027cb:	0f 84 06 fd ff ff    	je     c00024d7 <mount_volume+0xc8>
c00027d1:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027d7:	e8 b0 f1 ff ff       	call   c000198c <ld_dword>
c00027dc:	89 c6                	mov    esi,eax
c00027de:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027e3:	0f 87 ee fc ff ff    	ja     c00024d7 <mount_volume+0xc8>
c00027e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027ed:	8d 40 02             	lea    eax,[eax+0x2]
c00027f0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027f3:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00027f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027fa:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fd:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002803:	e8 84 f1 ff ff       	call   c000198c <ld_dword>
c0002808:	31 d2                	xor    edx,edx
c000280a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002812:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002816:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000281a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002820:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002826:	e8 61 f1 ff ff       	call   c000198c <ld_dword>
c000282b:	31 d2                	xor    edx,edx
c000282d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002831:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002835:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002839:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000283c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000283f:	0f b7 c3             	movzx  eax,bx
c0002842:	31 d2                	xor    edx,edx
c0002844:	0f af f0             	imul   esi,eax
c0002847:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000284b:	89 f0                	mov    eax,esi
c000284d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002851:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002855:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002859:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000285d:	39 c1                	cmp    ecx,eax
c000285f:	89 df                	mov    edi,ebx
c0002861:	19 d7                	sbb    edi,edx
c0002863:	0f 82 6e fc ff ff    	jb     c00024d7 <mount_volume+0xc8>
c0002869:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000286f:	31 db                	xor    ebx,ebx
c0002871:	e8 16 f1 ff ff       	call   c000198c <ld_dword>
c0002876:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000287d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002880:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002888:	85 db                	test   ebx,ebx
c000288a:	75 39                	jne    c00028c5 <mount_volume+0x4b6>
c000288c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002890:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002894:	0f 86 3d fc ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c000289a:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000289d:	31 ff                	xor    edi,edi
c000289f:	89 e8                	mov    eax,ebp
c00028a1:	e8 72 f3 ff ff       	call   c0001c18 <clst2sect>
c00028a6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028aa:	01 c6                	add    esi,eax
c00028ac:	89 e8                	mov    eax,ebp
c00028ae:	11 d7                	adc    edi,edx
c00028b0:	89 f2                	mov    edx,esi
c00028b2:	89 f9                	mov    ecx,edi
c00028b4:	e8 a4 f8 ff ff       	call   c000215d <move_window>
c00028b9:	85 c0                	test   eax,eax
c00028bb:	0f 85 07 fc ff ff    	jne    c00024c8 <mount_volume+0xb9>
c00028c1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028c5:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028ca:	74 0b                	je     c00028d7 <mount_volume+0x4c8>
c00028cc:	83 c3 20             	add    ebx,0x20
c00028cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028d5:	eb b1                	jmp    c0002888 <mount_volume+0x479>
c00028d7:	8d 75 54             	lea    esi,[ebp+0x54]
c00028da:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028de:	e8 a9 f0 ff ff       	call   c000198c <ld_dword>
c00028e3:	89 c3                	mov    ebx,eax
c00028e5:	83 f8 01             	cmp    eax,0x1
c00028e8:	0f 86 e9 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028ee:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00028f1:	0f 86 e0 fb ff ff    	jbe    c00024d7 <mount_volume+0xc8>
c00028f7:	8d 53 fe             	lea    edx,[ebx-0x2]
c00028fa:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00028fe:	0f af c2             	imul   eax,edx
c0002901:	31 d2                	xor    edx,edx
c0002903:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002906:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002909:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000290c:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000290f:	31 c9                	xor    ecx,ecx
c0002911:	89 da                	mov    edx,ebx
c0002913:	89 e8                	mov    eax,ebp
c0002915:	c1 ea 07             	shr    edx,0x7
c0002918:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000291b:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000291e:	e8 3a f8 ff ff       	call   c000215d <move_window>
c0002923:	85 c0                	test   eax,eax
c0002925:	0f 85 9d fb ff ff    	jne    c00024c8 <mount_volume+0xb9>
c000292b:	89 d8                	mov    eax,ebx
c000292d:	83 e0 7f             	and    eax,0x7f
c0002930:	8d 04 86             	lea    eax,[esi+eax*4]
c0002933:	e8 54 f0 ff ff       	call   c000198c <ld_dword>
c0002938:	83 f8 ff             	cmp    eax,0xffffffff
c000293b:	74 0a                	je     c0002947 <mount_volume+0x538>
c000293d:	43                   	inc    ebx
c000293e:	39 d8                	cmp    eax,ebx
c0002940:	74 cd                	je     c000290f <mount_volume+0x500>
c0002942:	e9 90 fb ff ff       	jmp    c00024d7 <mount_volume+0xc8>
c0002947:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000294e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002955:	bb 04 00 00 00       	mov    ebx,0x4
c000295a:	e9 e8 fd ff ff       	jmp    c0002747 <mount_volume+0x338>
c000295f:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002964:	19 db                	sbb    ebx,ebx
c0002966:	83 c3 02             	add    ebx,0x2
c0002969:	e9 93 fc ff ff       	jmp    c0002601 <mount_volume+0x1f2>
c000296e:	83 c4 3c             	add    esp,0x3c
c0002971:	89 d8                	mov    eax,ebx
c0002973:	5b                   	pop    ebx
c0002974:	5e                   	pop    esi
c0002975:	5f                   	pop    edi
c0002976:	5d                   	pop    ebp
c0002977:	c3                   	ret    

c0002978 <find_bitmap>:
c0002978:	55                   	push   ebp
c0002979:	57                   	push   edi
c000297a:	89 c7                	mov    edi,eax
c000297c:	56                   	push   esi
c000297d:	8d 72 fe             	lea    esi,[edx-0x2]
c0002980:	53                   	push   ebx
c0002981:	83 ec 1c             	sub    esp,0x1c
c0002984:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002987:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000298b:	83 e8 02             	sub    eax,0x2
c000298e:	39 f0                	cmp    eax,esi
c0002990:	77 02                	ja     c0002994 <find_bitmap+0x1c>
c0002992:	31 f6                	xor    esi,esi
c0002994:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002998:	89 f3                	mov    ebx,esi
c000299a:	31 ed                	xor    ebp,ebp
c000299c:	31 c9                	xor    ecx,ecx
c000299e:	89 da                	mov    edx,ebx
c00029a0:	89 f8                	mov    eax,edi
c00029a2:	c1 ea 0c             	shr    edx,0xc
c00029a5:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029a8:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ab:	e8 ad f7 ff ff       	call   c000215d <move_window>
c00029b0:	85 c0                	test   eax,eax
c00029b2:	75 68                	jne    c0002a1c <find_bitmap+0xa4>
c00029b4:	89 da                	mov    edx,ebx
c00029b6:	89 d9                	mov    ecx,ebx
c00029b8:	c1 ea 03             	shr    edx,0x3
c00029bb:	83 e1 07             	and    ecx,0x7
c00029be:	b8 01 00 00 00       	mov    eax,0x1
c00029c3:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029c9:	d3 e0                	shl    eax,cl
c00029cb:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029ce:	83 e9 02             	sub    ecx,0x2
c00029d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029d5:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029d9:	43                   	inc    ebx
c00029da:	21 c1                	and    ecx,eax
c00029dc:	d1 e0                	shl    eax,1
c00029de:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029e2:	77 09                	ja     c00029ed <find_bitmap+0x75>
c00029e4:	31 db                	xor    ebx,ebx
c00029e6:	ba 00 02 00 00       	mov    edx,0x200
c00029eb:	31 c0                	xor    eax,eax
c00029ed:	84 c9                	test   cl,cl
c00029ef:	75 10                	jne    c0002a01 <find_bitmap+0x89>
c00029f1:	45                   	inc    ebp
c00029f2:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00029f6:	75 0f                	jne    c0002a07 <find_bitmap+0x8f>
c00029f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029fc:	83 c0 02             	add    eax,0x2
c00029ff:	eb 22                	jmp    c0002a23 <find_bitmap+0xab>
c0002a01:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a05:	31 ed                	xor    ebp,ebp
c0002a07:	39 de                	cmp    esi,ebx
c0002a09:	74 16                	je     c0002a21 <find_bitmap+0xa9>
c0002a0b:	84 c0                	test   al,al
c0002a0d:	75 c6                	jne    c00029d5 <find_bitmap+0x5d>
c0002a0f:	42                   	inc    edx
c0002a10:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a16:	77 84                	ja     c000299c <find_bitmap+0x24>
c0002a18:	b0 01                	mov    al,0x1
c0002a1a:	eb b9                	jmp    c00029d5 <find_bitmap+0x5d>
c0002a1c:	83 c8 ff             	or     eax,0xffffffff
c0002a1f:	eb 02                	jmp    c0002a23 <find_bitmap+0xab>
c0002a21:	31 c0                	xor    eax,eax
c0002a23:	83 c4 1c             	add    esp,0x1c
c0002a26:	5b                   	pop    ebx
c0002a27:	5e                   	pop    esi
c0002a28:	5f                   	pop    edi
c0002a29:	5d                   	pop    ebp
c0002a2a:	c3                   	ret    

c0002a2b <change_bitmap>:
c0002a2b:	55                   	push   ebp
c0002a2c:	89 cd                	mov    ebp,ecx
c0002a2e:	57                   	push   edi
c0002a2f:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a32:	56                   	push   esi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	53                   	push   ebx
c0002a36:	89 c8                	mov    eax,ecx
c0002a38:	83 ec 1c             	sub    esp,0x1c
c0002a3b:	31 d2                	xor    edx,edx
c0002a3d:	89 ce                	mov    esi,ecx
c0002a3f:	c1 e8 0c             	shr    eax,0xc
c0002a42:	bb 01 00 00 00       	mov    ebx,0x1
c0002a47:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a4a:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a4d:	c1 ee 03             	shr    esi,0x3
c0002a50:	83 e1 07             	and    ecx,0x7
c0002a53:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a59:	d3 e3                	shl    ebx,cl
c0002a5b:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a5f:	89 c1                	mov    ecx,eax
c0002a61:	89 d3                	mov    ebx,edx
c0002a63:	83 c1 01             	add    ecx,0x1
c0002a66:	83 d3 00             	adc    ebx,0x0
c0002a69:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a6d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a71:	89 d1                	mov    ecx,edx
c0002a73:	89 c2                	mov    edx,eax
c0002a75:	89 f8                	mov    eax,edi
c0002a77:	e8 e1 f6 ff ff       	call   c000215d <move_window>
c0002a7c:	89 c1                	mov    ecx,eax
c0002a7e:	85 c0                	test   eax,eax
c0002a80:	75 48                	jne    c0002aca <change_bitmap+0x9f>
c0002a82:	31 d2                	xor    edx,edx
c0002a84:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a88:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a8c:	0f 95 c2             	setne  dl
c0002a8f:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002a93:	74 3c                	je     c0002ad1 <change_bitmap+0xa6>
c0002a95:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002a99:	4d                   	dec    ebp
c0002a9a:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002a9e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002aa2:	74 32                	je     c0002ad6 <change_bitmap+0xab>
c0002aa4:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002aa8:	75 d8                	jne    c0002a82 <change_bitmap+0x57>
c0002aaa:	8d 46 01             	lea    eax,[esi+0x1]
c0002aad:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ab2:	89 c3                	mov    ebx,eax
c0002ab4:	31 f6                	xor    esi,esi
c0002ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002abe:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ac4:	74 99                	je     c0002a5f <change_bitmap+0x34>
c0002ac6:	89 de                	mov    esi,ebx
c0002ac8:	eb b8                	jmp    c0002a82 <change_bitmap+0x57>
c0002aca:	b9 01 00 00 00       	mov    ecx,0x1
c0002acf:	eb 05                	jmp    c0002ad6 <change_bitmap+0xab>
c0002ad1:	b9 02 00 00 00       	mov    ecx,0x2
c0002ad6:	83 c4 1c             	add    esp,0x1c
c0002ad9:	89 c8                	mov    eax,ecx
c0002adb:	5b                   	pop    ebx
c0002adc:	5e                   	pop    esi
c0002add:	5f                   	pop    edi
c0002ade:	5d                   	pop    ebp
c0002adf:	c3                   	ret    

c0002ae0 <put_fat>:
c0002ae0:	83 fa 01             	cmp    edx,0x1
c0002ae3:	0f 86 7b 01 00 00    	jbe    c0002c64 <put_fat+0x184>
c0002ae9:	55                   	push   ebp
c0002aea:	57                   	push   edi
c0002aeb:	89 cf                	mov    edi,ecx
c0002aed:	56                   	push   esi
c0002aee:	b9 02 00 00 00       	mov    ecx,0x2
c0002af3:	53                   	push   ebx
c0002af4:	89 c6                	mov    esi,eax
c0002af6:	83 ec 1c             	sub    esp,0x1c
c0002af9:	89 d3                	mov    ebx,edx
c0002afb:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002afe:	0f 86 68 01 00 00    	jbe    c0002c6c <put_fat+0x18c>
c0002b04:	8a 00                	mov    al,BYTE PTR [eax]
c0002b06:	3c 02                	cmp    al,0x2
c0002b08:	0f 84 c7 00 00 00    	je     c0002bd5 <put_fat+0xf5>
c0002b0e:	77 09                	ja     c0002b19 <put_fat+0x39>
c0002b10:	fe c8                	dec    al
c0002b12:	74 17                	je     c0002b2b <put_fat+0x4b>
c0002b14:	e9 53 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b19:	b9 02 00 00 00       	mov    ecx,0x2
c0002b1e:	3c 04                	cmp    al,0x4
c0002b20:	0f 86 e1 00 00 00    	jbe    c0002c07 <put_fat+0x127>
c0002b26:	e9 41 01 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002b2b:	89 d5                	mov    ebp,edx
c0002b2d:	31 c9                	xor    ecx,ecx
c0002b2f:	d1 ed                	shr    ebp,1
c0002b31:	89 f0                	mov    eax,esi
c0002b33:	01 d5                	add    ebp,edx
c0002b35:	89 ea                	mov    edx,ebp
c0002b37:	c1 ea 09             	shr    edx,0x9
c0002b3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b40:	e8 18 f6 ff ff       	call   c000215d <move_window>
c0002b45:	89 c1                	mov    ecx,eax
c0002b47:	85 c0                	test   eax,eax
c0002b49:	0f 85 1d 01 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002b4f:	8d 46 54             	lea    eax,[esi+0x54]
c0002b52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b56:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b59:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b63:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b67:	89 f8                	mov    eax,edi
c0002b69:	83 e3 01             	and    ebx,0x1
c0002b6c:	74 0d                	je     c0002b7b <put_fat+0x9b>
c0002b6e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b71:	89 fa                	mov    edx,edi
c0002b73:	83 e0 0f             	and    eax,0xf
c0002b76:	c1 e2 04             	shl    edx,0x4
c0002b79:	09 d0                	or     eax,edx
c0002b7b:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b82:	31 c9                	xor    ecx,ecx
c0002b84:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b88:	c1 ea 09             	shr    edx,0x9
c0002b8b:	89 f0                	mov    eax,esi
c0002b8d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b90:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b93:	e8 c5 f5 ff ff       	call   c000215d <move_window>
c0002b98:	89 c1                	mov    ecx,eax
c0002b9a:	85 c0                	test   eax,eax
c0002b9c:	0f 85 ca 00 00 00    	jne    c0002c6c <put_fat+0x18c>
c0002ba2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ba6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bac:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bb0:	85 db                	test   ebx,ebx
c0002bb2:	74 07                	je     c0002bbb <put_fat+0xdb>
c0002bb4:	c1 ef 04             	shr    edi,0x4
c0002bb7:	89 fa                	mov    edx,edi
c0002bb9:	eb 0e                	jmp    c0002bc9 <put_fat+0xe9>
c0002bbb:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bbe:	c1 ef 08             	shr    edi,0x8
c0002bc1:	83 e2 f0             	and    edx,0xfffffff0
c0002bc4:	83 e7 0f             	and    edi,0xf
c0002bc7:	09 fa                	or     edx,edi
c0002bc9:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bcc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bd0:	e9 97 00 00 00       	jmp    c0002c6c <put_fat+0x18c>
c0002bd5:	31 c9                	xor    ecx,ecx
c0002bd7:	c1 ea 08             	shr    edx,0x8
c0002bda:	89 f0                	mov    eax,esi
c0002bdc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bdf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002be2:	e8 76 f5 ff ff       	call   c000215d <move_window>
c0002be7:	89 c1                	mov    ecx,eax
c0002be9:	85 c0                	test   eax,eax
c0002beb:	75 7f                	jne    c0002c6c <put_fat+0x18c>
c0002bed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bf1:	01 db                	add    ebx,ebx
c0002bf3:	0f b7 d7             	movzx  edx,di
c0002bf6:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bfc:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c00:	e8 ec ed ff ff       	call   c00019f1 <st_word>
c0002c05:	eb 53                	jmp    c0002c5a <put_fat+0x17a>
c0002c07:	31 c9                	xor    ecx,ecx
c0002c09:	c1 ea 07             	shr    edx,0x7
c0002c0c:	89 f0                	mov    eax,esi
c0002c0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c14:	e8 44 f5 ff ff       	call   c000215d <move_window>
c0002c19:	89 c1                	mov    ecx,eax
c0002c1b:	85 c0                	test   eax,eax
c0002c1d:	75 4d                	jne    c0002c6c <put_fat+0x18c>
c0002c1f:	c1 e3 02             	shl    ebx,0x2
c0002c22:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c2b:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c2f:	74 1c                	je     c0002c4d <put_fat+0x16d>
c0002c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c35:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c3b:	89 d8                	mov    eax,ebx
c0002c3d:	e8 4a ed ff ff       	call   c000198c <ld_dword>
c0002c42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c46:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c4b:	09 c7                	or     edi,eax
c0002c4d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c51:	89 fa                	mov    edx,edi
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	e8 9b ed ff ff       	call   c00019f5 <st_dword>
c0002c5a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c62:	eb 08                	jmp    c0002c6c <put_fat+0x18c>
c0002c64:	b9 02 00 00 00       	mov    ecx,0x2
c0002c69:	89 c8                	mov    eax,ecx
c0002c6b:	c3                   	ret    
c0002c6c:	83 c4 1c             	add    esp,0x1c
c0002c6f:	89 c8                	mov    eax,ecx
c0002c71:	5b                   	pop    ebx
c0002c72:	5e                   	pop    esi
c0002c73:	5f                   	pop    edi
c0002c74:	5d                   	pop    ebp
c0002c75:	c3                   	ret    

c0002c76 <fill_last_frag>:
c0002c76:	57                   	push   edi
c0002c77:	89 cf                	mov    edi,ecx
c0002c79:	56                   	push   esi
c0002c7a:	89 d6                	mov    esi,edx
c0002c7c:	53                   	push   ebx
c0002c7d:	89 c3                	mov    ebx,eax
c0002c7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c82:	85 c0                	test   eax,eax
c0002c84:	74 21                	je     c0002ca7 <fill_last_frag+0x31>
c0002c86:	89 f9                	mov    ecx,edi
c0002c88:	83 f8 01             	cmp    eax,0x1
c0002c8b:	76 05                	jbe    c0002c92 <fill_last_frag+0x1c>
c0002c8d:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c90:	29 c1                	sub    ecx,eax
c0002c92:	8d 56 01             	lea    edx,[esi+0x1]
c0002c95:	29 c2                	sub    edx,eax
c0002c97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002c99:	e8 42 fe ff ff       	call   c0002ae0 <put_fat>
c0002c9e:	85 c0                	test   eax,eax
c0002ca0:	75 05                	jne    c0002ca7 <fill_last_frag+0x31>
c0002ca2:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002ca5:	eb d8                	jmp    c0002c7f <fill_last_frag+0x9>
c0002ca7:	5b                   	pop    ebx
c0002ca8:	5e                   	pop    esi
c0002ca9:	5f                   	pop    edi
c0002caa:	c3                   	ret    

c0002cab <fill_first_frag>:
c0002cab:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002caf:	75 2d                	jne    c0002cde <fill_first_frag+0x33>
c0002cb1:	57                   	push   edi
c0002cb2:	56                   	push   esi
c0002cb3:	53                   	push   ebx
c0002cb4:	89 c3                	mov    ebx,eax
c0002cb6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cb9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cbc:	01 d7                	add    edi,edx
c0002cbe:	39 fa                	cmp    edx,edi
c0002cc0:	74 14                	je     c0002cd6 <fill_first_frag+0x2b>
c0002cc2:	8d 72 01             	lea    esi,[edx+0x1]
c0002cc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cc7:	89 f1                	mov    ecx,esi
c0002cc9:	e8 12 fe ff ff       	call   c0002ae0 <put_fat>
c0002cce:	89 f2                	mov    edx,esi
c0002cd0:	85 c0                	test   eax,eax
c0002cd2:	74 ea                	je     c0002cbe <fill_first_frag+0x13>
c0002cd4:	eb 0b                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cd6:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002cda:	31 c0                	xor    eax,eax
c0002cdc:	eb 03                	jmp    c0002ce1 <fill_first_frag+0x36>
c0002cde:	31 c0                	xor    eax,eax
c0002ce0:	c3                   	ret    
c0002ce1:	5b                   	pop    ebx
c0002ce2:	5e                   	pop    esi
c0002ce3:	5f                   	pop    edi
c0002ce4:	c3                   	ret    

c0002ce5 <get_fat>:
c0002ce5:	83 fa 01             	cmp    edx,0x1
c0002ce8:	0f 86 db 01 00 00    	jbe    c0002ec9 <get_fat+0x1e4>
c0002cee:	55                   	push   ebp
c0002cef:	b9 01 00 00 00       	mov    ecx,0x1
c0002cf4:	57                   	push   edi
c0002cf5:	56                   	push   esi
c0002cf6:	53                   	push   ebx
c0002cf7:	83 ec 1c             	sub    esp,0x1c
c0002cfa:	8b 38                	mov    edi,DWORD PTR [eax]
c0002cfc:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002cff:	0f 86 cc 01 00 00    	jbe    c0002ed1 <get_fat+0x1ec>
c0002d05:	89 c3                	mov    ebx,eax
c0002d07:	89 d6                	mov    esi,edx
c0002d09:	8a 07                	mov    al,BYTE PTR [edi]
c0002d0b:	3c 02                	cmp    al,0x2
c0002d0d:	0f 84 99 00 00 00    	je     c0002dac <get_fat+0xc7>
c0002d13:	77 09                	ja     c0002d1e <get_fat+0x39>
c0002d15:	fe c8                	dec    al
c0002d17:	74 1a                	je     c0002d33 <get_fat+0x4e>
c0002d19:	e9 b3 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d1e:	3c 03                	cmp    al,0x3
c0002d20:	0f 84 b5 00 00 00    	je     c0002ddb <get_fat+0xf6>
c0002d26:	3c 04                	cmp    al,0x4
c0002d28:	0f 84 e3 00 00 00    	je     c0002e11 <get_fat+0x12c>
c0002d2e:	e9 9e 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d33:	89 d3                	mov    ebx,edx
c0002d35:	31 c9                	xor    ecx,ecx
c0002d37:	d1 eb                	shr    ebx,1
c0002d39:	89 f8                	mov    eax,edi
c0002d3b:	01 d3                	add    ebx,edx
c0002d3d:	89 da                	mov    edx,ebx
c0002d3f:	c1 ea 09             	shr    edx,0x9
c0002d42:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d45:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d48:	e8 10 f4 ff ff       	call   c000215d <move_window>
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 08                	je     c0002d59 <get_fat+0x74>
c0002d51:	83 c9 ff             	or     ecx,0xffffffff
c0002d54:	e9 78 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002d59:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d5c:	31 c9                	xor    ecx,ecx
c0002d5e:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d64:	89 ea                	mov    edx,ebp
c0002d66:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d6a:	c1 ea 09             	shr    edx,0x9
c0002d6d:	89 f8                	mov    eax,edi
c0002d6f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d72:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d75:	e8 e3 f3 ff ff       	call   c000215d <move_window>
c0002d7a:	85 c0                	test   eax,eax
c0002d7c:	75 d3                	jne    c0002d51 <get_fat+0x6c>
c0002d7e:	0f b6 c3             	movzx  eax,bl
c0002d81:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d87:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d8c:	c1 e3 08             	shl    ebx,0x8
c0002d8f:	09 c3                	or     ebx,eax
c0002d91:	89 d9                	mov    ecx,ebx
c0002d93:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002d99:	83 e6 01             	and    esi,0x1
c0002d9c:	0f 84 2f 01 00 00    	je     c0002ed1 <get_fat+0x1ec>
c0002da2:	89 d9                	mov    ecx,ebx
c0002da4:	c1 e9 04             	shr    ecx,0x4
c0002da7:	e9 25 01 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002dac:	31 c9                	xor    ecx,ecx
c0002dae:	c1 ea 08             	shr    edx,0x8
c0002db1:	89 f8                	mov    eax,edi
c0002db3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002db6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002db9:	e8 9f f3 ff ff       	call   c000215d <move_window>
c0002dbe:	85 c0                	test   eax,eax
c0002dc0:	75 8f                	jne    c0002d51 <get_fat+0x6c>
c0002dc2:	01 f6                	add    esi,esi
c0002dc4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dce:	e8 ac eb ff ff       	call   c000197f <ld_word>
c0002dd3:	0f b7 c8             	movzx  ecx,ax
c0002dd6:	e9 f6 00 00 00       	jmp    c0002ed1 <get_fat+0x1ec>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f8                	mov    eax,edi
c0002de2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002de5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002de8:	e8 70 f3 ff ff       	call   c000215d <move_window>
c0002ded:	85 c0                	test   eax,eax
c0002def:	0f 85 5c ff ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002df5:	c1 e6 02             	shl    esi,0x2
c0002df8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002dfe:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e02:	e8 85 eb ff ff       	call   c000198c <ld_dword>
c0002e07:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e0c:	e9 b4 00 00 00       	jmp    c0002ec5 <get_fat+0x1e0>
c0002e11:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e14:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e17:	89 d1                	mov    ecx,edx
c0002e19:	09 c1                	or     ecx,eax
c0002e1b:	74 06                	je     c0002e23 <get_fat+0x13e>
c0002e1d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e21:	75 0f                	jne    c0002e32 <get_fat+0x14d>
c0002e23:	b9 01 00 00 00       	mov    ecx,0x1
c0002e28:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e2c:	0f 85 9f 00 00 00    	jne    c0002ed1 <get_fat+0x1ec>
c0002e32:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e36:	89 f5                	mov    ebp,esi
c0002e38:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e3d:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e40:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e43:	80 f9 02             	cmp    cl,0x2
c0002e46:	75 35                	jne    c0002e7d <get_fat+0x198>
c0002e48:	83 c0 ff             	add    eax,0xffffffff
c0002e4b:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e50:	83 d2 ff             	adc    edx,0xffffffff
c0002e53:	31 db                	xor    ebx,ebx
c0002e55:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e59:	53                   	push   ebx
c0002e5a:	c1 ea 09             	shr    edx,0x9
c0002e5d:	51                   	push   ecx
c0002e5e:	52                   	push   edx
c0002e5f:	50                   	push   eax
c0002e60:	e8 3b cc 01 00       	call   c001faa0 <__udivdi3>
c0002e65:	83 c4 10             	add    esp,0x10
c0002e68:	b9 01 00 00 00       	mov    ecx,0x1
c0002e6d:	39 c5                	cmp    ebp,eax
c0002e6f:	77 60                	ja     c0002ed1 <get_fat+0x1ec>
c0002e71:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e76:	74 59                	je     c0002ed1 <get_fat+0x1ec>
c0002e78:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e7b:	eb 54                	jmp    c0002ed1 <get_fat+0x1ec>
c0002e7d:	80 f9 03             	cmp    cl,0x3
c0002e80:	75 05                	jne    c0002e87 <get_fat+0x1a2>
c0002e82:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e85:	77 f1                	ja     c0002e78 <get_fat+0x193>
c0002e87:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e8c:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e90:	75 3f                	jne    c0002ed1 <get_fat+0x1ec>
c0002e92:	31 c9                	xor    ecx,ecx
c0002e94:	89 f2                	mov    edx,esi
c0002e96:	89 f8                	mov    eax,edi
c0002e98:	c1 ea 07             	shr    edx,0x7
c0002e9b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 b7 f2 ff ff       	call   c000215d <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 a3 fe ff ff    	jne    c0002d51 <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 cc ea ff ff       	call   c000198c <ld_dword>
c0002ec0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ec5:	89 c1                	mov    ecx,eax
c0002ec7:	eb 08                	jmp    c0002ed1 <get_fat+0x1ec>
c0002ec9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ece:	89 c8                	mov    eax,ecx
c0002ed0:	c3                   	ret    
c0002ed1:	83 c4 1c             	add    esp,0x1c
c0002ed4:	89 c8                	mov    eax,ecx
c0002ed6:	5b                   	pop    ebx
c0002ed7:	5e                   	pop    esi
c0002ed8:	5f                   	pop    edi
c0002ed9:	5d                   	pop    ebp
c0002eda:	c3                   	ret    

c0002edb <dir_sdi>:
c0002edb:	55                   	push   ebp
c0002edc:	57                   	push   edi
c0002edd:	56                   	push   esi
c0002ede:	53                   	push   ebx
c0002edf:	89 c3                	mov    ebx,eax
c0002ee1:	83 ec 1c             	sub    esp,0x1c
c0002ee4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee6:	31 c0                	xor    eax,eax
c0002ee8:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002eeb:	0f 94 c0             	sete   al
c0002eee:	48                   	dec    eax
c0002eef:	25 00 00 20 f0       	and    eax,0xf0200000
c0002ef4:	05 00 00 00 10       	add    eax,0x10000000
c0002ef9:	39 d0                	cmp    eax,edx
c0002efb:	77 0a                	ja     c0002f07 <dir_sdi+0x2c>
c0002efd:	b8 02 00 00 00       	mov    eax,0x2
c0002f02:	e9 c4 00 00 00       	jmp    c0002fcb <dir_sdi+0xf0>
c0002f07:	89 d6                	mov    esi,edx
c0002f09:	f6 c2 1f             	test   dl,0x1f
c0002f0c:	75 ef                	jne    c0002efd <dir_sdi+0x22>
c0002f0e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f11:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f14:	85 c9                	test   ecx,ecx
c0002f16:	75 2d                	jne    c0002f45 <dir_sdi+0x6a>
c0002f18:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f1b:	77 1b                	ja     c0002f38 <dir_sdi+0x5d>
c0002f1d:	89 f2                	mov    edx,esi
c0002f1f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f23:	c1 ea 05             	shr    edx,0x5
c0002f26:	39 c2                	cmp    edx,eax
c0002f28:	73 d3                	jae    c0002efd <dir_sdi+0x22>
c0002f2a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f2d:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f30:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f33:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f36:	eb 4b                	jmp    c0002f83 <dir_sdi+0xa8>
c0002f38:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3b:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f3f:	85 c0                	test   eax,eax
c0002f41:	74 da                	je     c0002f1d <dir_sdi+0x42>
c0002f43:	89 c1                	mov    ecx,eax
c0002f45:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f49:	c1 e5 09             	shl    ebp,0x9
c0002f4c:	89 ca                	mov    edx,ecx
c0002f4e:	39 ee                	cmp    esi,ebp
c0002f50:	72 1c                	jb     c0002f6e <dir_sdi+0x93>
c0002f52:	89 d8                	mov    eax,ebx
c0002f54:	e8 8c fd ff ff       	call   c0002ce5 <get_fat>
c0002f59:	89 c1                	mov    ecx,eax
c0002f5b:	83 f8 ff             	cmp    eax,0xffffffff
c0002f5e:	74 66                	je     c0002fc6 <dir_sdi+0xeb>
c0002f60:	83 f8 01             	cmp    eax,0x1
c0002f63:	76 98                	jbe    c0002efd <dir_sdi+0x22>
c0002f65:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f68:	76 93                	jbe    c0002efd <dir_sdi+0x22>
c0002f6a:	29 ee                	sub    esi,ebp
c0002f6c:	eb de                	jmp    c0002f4c <dir_sdi+0x71>
c0002f6e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f72:	89 f8                	mov    eax,edi
c0002f74:	e8 9f ec ff ff       	call   c0001c18 <clst2sect>
c0002f79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f7d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f80:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f83:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f86:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f89:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f8c:	89 d1                	mov    ecx,edx
c0002f8e:	09 c1                	or     ecx,eax
c0002f90:	0f 84 67 ff ff ff    	je     c0002efd <dir_sdi+0x22>
c0002f96:	89 f1                	mov    ecx,esi
c0002f98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fa0:	c1 e9 09             	shr    ecx,0x9
c0002fa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fa7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fab:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002faf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb2:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fb8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fbb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fbf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fc2:	31 c0                	xor    eax,eax
c0002fc4:	eb 05                	jmp    c0002fcb <dir_sdi+0xf0>
c0002fc6:	b8 01 00 00 00       	mov    eax,0x1
c0002fcb:	83 c4 1c             	add    esp,0x1c
c0002fce:	5b                   	pop    ebx
c0002fcf:	5e                   	pop    esi
c0002fd0:	5f                   	pop    edi
c0002fd1:	5d                   	pop    ebp
c0002fd2:	c3                   	ret    

c0002fd3 <create_chain>:
c0002fd3:	55                   	push   ebp
c0002fd4:	89 c5                	mov    ebp,eax
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	85 d2                	test   edx,edx
c0002fde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002fe2:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fe4:	75 0e                	jne    c0002ff4 <create_chain+0x21>
c0002fe6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002fe9:	85 ff                	test   edi,edi
c0002feb:	74 39                	je     c0003026 <create_chain+0x53>
c0002fed:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002ff0:	77 39                	ja     c000302b <create_chain+0x58>
c0002ff2:	eb 32                	jmp    c0003026 <create_chain+0x53>
c0002ff4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff8:	e8 e8 fc ff ff       	call   c0002ce5 <get_fat>
c0002ffd:	89 c3                	mov    ebx,eax
c0002fff:	83 f8 01             	cmp    eax,0x1
c0003002:	77 0a                	ja     c000300e <create_chain+0x3b>
c0003004:	bb 01 00 00 00       	mov    ebx,0x1
c0003009:	e9 ba 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c000300e:	83 f8 ff             	cmp    eax,0xffffffff
c0003011:	0f 84 62 01 00 00    	je     c0003179 <create_chain+0x1a6>
c0003017:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000301a:	0f 87 a8 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003020:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003024:	eb 05                	jmp    c000302b <create_chain+0x58>
c0003026:	bf 01 00 00 00       	mov    edi,0x1
c000302b:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000302f:	75 07                	jne    c0003038 <create_chain+0x65>
c0003031:	31 db                	xor    ebx,ebx
c0003033:	e9 90 01 00 00       	jmp    c00031c8 <create_chain+0x1f5>
c0003038:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000303b:	75 74                	jne    c00030b1 <create_chain+0xde>
c000303d:	b9 01 00 00 00       	mov    ecx,0x1
c0003042:	89 fa                	mov    edx,edi
c0003044:	89 f0                	mov    eax,esi
c0003046:	e8 2d f9 ff ff       	call   c0002978 <find_bitmap>
c000304b:	89 c3                	mov    ebx,eax
c000304d:	8d 40 ff             	lea    eax,[eax-0x1]
c0003050:	83 f8 fd             	cmp    eax,0xfffffffd
c0003053:	0f 87 6f 01 00 00    	ja     c00031c8 <create_chain+0x1f5>
c0003059:	83 ec 0c             	sub    esp,0xc
c000305c:	b9 01 00 00 00       	mov    ecx,0x1
c0003061:	6a 01                	push   0x1
c0003063:	89 da                	mov    edx,ebx
c0003065:	89 f0                	mov    eax,esi
c0003067:	e8 bf f9 ff ff       	call   c0002a2b <change_bitmap>
c000306c:	83 c4 10             	add    esp,0x10
c000306f:	83 f8 02             	cmp    eax,0x2
c0003072:	74 90                	je     c0003004 <create_chain+0x31>
c0003074:	83 f8 01             	cmp    eax,0x1
c0003077:	0f 84 fc 00 00 00    	je     c0003179 <create_chain+0x1a6>
c000307d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003082:	75 09                	jne    c000308d <create_chain+0xba>
c0003084:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003088:	e9 0c 01 00 00       	jmp    c0003199 <create_chain+0x1c6>
c000308d:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003091:	0f 85 e7 00 00 00    	jne    c000317e <create_chain+0x1ab>
c0003097:	8d 57 01             	lea    edx,[edi+0x1]
c000309a:	39 da                	cmp    edx,ebx
c000309c:	0f 84 f7 00 00 00    	je     c0003199 <create_chain+0x1c6>
c00030a2:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030a5:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030a9:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030ac:	e9 cd 00 00 00       	jmp    c000317e <create_chain+0x1ab>
c00030b1:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030b5:	75 41                	jne    c00030f8 <create_chain+0x125>
c00030b7:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030ba:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030bd:	77 05                	ja     c00030c4 <create_chain+0xf1>
c00030bf:	bb 02 00 00 00       	mov    ebx,0x2
c00030c4:	89 da                	mov    edx,ebx
c00030c6:	89 e8                	mov    eax,ebp
c00030c8:	e8 18 fc ff ff       	call   c0002ce5 <get_fat>
c00030cd:	83 f8 01             	cmp    eax,0x1
c00030d0:	0f 84 2e ff ff ff    	je     c0003004 <create_chain+0x31>
c00030d6:	83 f8 ff             	cmp    eax,0xffffffff
c00030d9:	0f 84 9a 00 00 00    	je     c0003179 <create_chain+0x1a6>
c00030df:	85 c0                	test   eax,eax
c00030e1:	74 11                	je     c00030f4 <create_chain+0x121>
c00030e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030e6:	83 f8 01             	cmp    eax,0x1
c00030e9:	76 0d                	jbe    c00030f8 <create_chain+0x125>
c00030eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ee:	76 08                	jbe    c00030f8 <create_chain+0x125>
c00030f0:	89 c7                	mov    edi,eax
c00030f2:	eb 04                	jmp    c00030f8 <create_chain+0x125>
c00030f4:	85 db                	test   ebx,ebx
c00030f6:	75 38                	jne    c0003130 <create_chain+0x15d>
c00030f8:	89 fb                	mov    ebx,edi
c00030fa:	43                   	inc    ebx
c00030fb:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030fe:	77 0e                	ja     c000310e <create_chain+0x13b>
c0003100:	83 ff 01             	cmp    edi,0x1
c0003103:	0f 86 28 ff ff ff    	jbe    c0003031 <create_chain+0x5e>
c0003109:	bb 02 00 00 00       	mov    ebx,0x2
c000310e:	89 da                	mov    edx,ebx
c0003110:	89 e8                	mov    eax,ebp
c0003112:	e8 ce fb ff ff       	call   c0002ce5 <get_fat>
c0003117:	85 c0                	test   eax,eax
c0003119:	74 15                	je     c0003130 <create_chain+0x15d>
c000311b:	83 f8 01             	cmp    eax,0x1
c000311e:	0f 84 e0 fe ff ff    	je     c0003004 <create_chain+0x31>
c0003124:	40                   	inc    eax
c0003125:	74 52                	je     c0003179 <create_chain+0x1a6>
c0003127:	39 fb                	cmp    ebx,edi
c0003129:	75 cf                	jne    c00030fa <create_chain+0x127>
c000312b:	e9 01 ff ff ff       	jmp    c0003031 <create_chain+0x5e>
c0003130:	83 c9 ff             	or     ecx,0xffffffff
c0003133:	89 da                	mov    edx,ebx
c0003135:	89 f0                	mov    eax,esi
c0003137:	e8 a4 f9 ff ff       	call   c0002ae0 <put_fat>
c000313c:	85 c0                	test   eax,eax
c000313e:	75 32                	jne    c0003172 <create_chain+0x19f>
c0003140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003145:	74 11                	je     c0003158 <create_chain+0x185>
c0003147:	89 d9                	mov    ecx,ebx
c0003149:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000314d:	89 f0                	mov    eax,esi
c000314f:	e8 8c f9 ff ff       	call   c0002ae0 <put_fat>
c0003154:	85 c0                	test   eax,eax
c0003156:	75 1a                	jne    c0003172 <create_chain+0x19f>
c0003158:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000315b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315e:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003161:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003164:	39 d0                	cmp    eax,edx
c0003166:	77 04                	ja     c000316c <create_chain+0x199>
c0003168:	48                   	dec    eax
c0003169:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000316c:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003170:	eb 56                	jmp    c00031c8 <create_chain+0x1f5>
c0003172:	48                   	dec    eax
c0003173:	0f 85 8b fe ff ff    	jne    c0003004 <create_chain+0x31>
c0003179:	83 cb ff             	or     ebx,0xffffffff
c000317c:	eb 4a                	jmp    c00031c8 <create_chain+0x1f5>
c000317e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003182:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003185:	41                   	inc    ecx
c0003186:	39 d9                	cmp    ecx,ebx
c0003188:	75 19                	jne    c00031a3 <create_chain+0x1d0>
c000318a:	b9 02 00 00 00       	mov    ecx,0x2
c000318f:	85 d2                	test   edx,edx
c0003191:	74 03                	je     c0003196 <create_chain+0x1c3>
c0003193:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003196:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003199:	85 c0                	test   eax,eax
c000319b:	0f 85 63 fe ff ff    	jne    c0003004 <create_chain+0x31>
c00031a1:	eb b5                	jmp    c0003158 <create_chain+0x185>
c00031a3:	85 d2                	test   edx,edx
c00031a5:	75 07                	jne    c00031ae <create_chain+0x1db>
c00031a7:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031ae:	89 d9                	mov    ecx,ebx
c00031b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031b4:	89 e8                	mov    eax,ebp
c00031b6:	e8 bb fa ff ff       	call   c0002c76 <fill_last_frag>
c00031bb:	85 c0                	test   eax,eax
c00031bd:	75 b3                	jne    c0003172 <create_chain+0x19f>
c00031bf:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031c6:	eb 90                	jmp    c0003158 <create_chain+0x185>
c00031c8:	83 c4 1c             	add    esp,0x1c
c00031cb:	89 d8                	mov    eax,ebx
c00031cd:	5b                   	pop    ebx
c00031ce:	5e                   	pop    esi
c00031cf:	5f                   	pop    edi
c00031d0:	5d                   	pop    ebp
c00031d1:	c3                   	ret    

c00031d2 <remove_chain>:
c00031d2:	55                   	push   ebp
c00031d3:	57                   	push   edi
c00031d4:	56                   	push   esi
c00031d5:	53                   	push   ebx
c00031d6:	83 ec 1c             	sub    esp,0x1c
c00031d9:	83 fa 01             	cmp    edx,0x1
c00031dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031e0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031e2:	77 0a                	ja     c00031ee <remove_chain+0x1c>
c00031e4:	b8 02 00 00 00       	mov    eax,0x2
c00031e9:	e9 24 01 00 00       	jmp    c0003312 <remove_chain+0x140>
c00031ee:	89 d6                	mov    esi,edx
c00031f0:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00031f3:	76 ef                	jbe    c00031e4 <remove_chain+0x12>
c00031f5:	89 c7                	mov    edi,eax
c00031f7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00031fc:	75 06                	jne    c0003204 <remove_chain+0x32>
c00031fe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003202:	eb 54                	jmp    c0003258 <remove_chain+0x86>
c0003204:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003207:	75 06                	jne    c000320f <remove_chain+0x3d>
c0003209:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000320d:	74 ef                	je     c00031fe <remove_chain+0x2c>
c000320f:	83 c9 ff             	or     ecx,0xffffffff
c0003212:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003216:	89 d8                	mov    eax,ebx
c0003218:	e8 c3 f8 ff ff       	call   c0002ae0 <put_fat>
c000321d:	85 c0                	test   eax,eax
c000321f:	74 dd                	je     c00031fe <remove_chain+0x2c>
c0003221:	e9 ec 00 00 00       	jmp    c0003312 <remove_chain+0x140>
c0003226:	83 f8 01             	cmp    eax,0x1
c0003229:	74 b9                	je     c00031e4 <remove_chain+0x12>
c000322b:	83 f8 ff             	cmp    eax,0xffffffff
c000322e:	74 6d                	je     c000329d <remove_chain+0xcb>
c0003230:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003233:	75 6f                	jne    c00032a4 <remove_chain+0xd2>
c0003235:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003238:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000323b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000323e:	39 d0                	cmp    eax,edx
c0003240:	73 08                	jae    c000324a <remove_chain+0x78>
c0003242:	40                   	inc    eax
c0003243:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003247:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000324a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000324d:	39 e9                	cmp    ecx,ebp
c000324f:	75 64                	jne    c00032b5 <remove_chain+0xe3>
c0003251:	89 ee                	mov    esi,ebp
c0003253:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003256:	76 0f                	jbe    c0003267 <remove_chain+0x95>
c0003258:	89 f2                	mov    edx,esi
c000325a:	89 f8                	mov    eax,edi
c000325c:	e8 84 fa ff ff       	call   c0002ce5 <get_fat>
c0003261:	89 c5                	mov    ebp,eax
c0003263:	85 c0                	test   eax,eax
c0003265:	75 bf                	jne    c0003226 <remove_chain+0x54>
c0003267:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000326a:	0f 85 a0 00 00 00    	jne    c0003310 <remove_chain+0x13e>
c0003270:	eb 6c                	jmp    c00032de <remove_chain+0x10c>
c0003272:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003275:	84 c0                	test   al,al
c0003277:	75 7d                	jne    c00032f6 <remove_chain+0x124>
c0003279:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000327c:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003280:	0f 84 86 00 00 00    	je     c000330c <remove_chain+0x13a>
c0003286:	89 da                	mov    edx,ebx
c0003288:	89 f8                	mov    eax,edi
c000328a:	e8 56 fa ff ff       	call   c0002ce5 <get_fat>
c000328f:	83 f8 01             	cmp    eax,0x1
c0003292:	0f 86 4c ff ff ff    	jbe    c00031e4 <remove_chain+0x12>
c0003298:	83 f8 ff             	cmp    eax,0xffffffff
c000329b:	75 4e                	jne    c00032eb <remove_chain+0x119>
c000329d:	b8 01 00 00 00       	mov    eax,0x1
c00032a2:	eb 6e                	jmp    c0003312 <remove_chain+0x140>
c00032a4:	31 c9                	xor    ecx,ecx
c00032a6:	89 f2                	mov    edx,esi
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 31 f8 ff ff       	call   c0002ae0 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 82                	je     c0003235 <remove_chain+0x63>
c00032b3:	eb 5d                	jmp    c0003312 <remove_chain+0x140>
c00032b5:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b8:	75 1b                	jne    c00032d5 <remove_chain+0x103>
c00032ba:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032be:	89 d8                	mov    eax,ebx
c00032c0:	83 ec 0c             	sub    esp,0xc
c00032c3:	6a 00                	push   0x0
c00032c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032c9:	e8 5d f7 ff ff       	call   c0002a2b <change_bitmap>
c00032ce:	83 c4 10             	add    esp,0x10
c00032d1:	85 c0                	test   eax,eax
c00032d3:	75 3d                	jne    c0003312 <remove_chain+0x140>
c00032d5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032d9:	e9 73 ff ff ff       	jmp    c0003251 <remove_chain+0x7f>
c00032de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032e3:	75 8d                	jne    c0003272 <remove_chain+0xa0>
c00032e5:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032e9:	eb 25                	jmp    c0003310 <remove_chain+0x13e>
c00032eb:	8d 53 01             	lea    edx,[ebx+0x1]
c00032ee:	89 c3                	mov    ebx,eax
c00032f0:	39 c2                	cmp    edx,eax
c00032f2:	74 88                	je     c000327c <remove_chain+0xaa>
c00032f4:	eb 1a                	jmp    c0003310 <remove_chain+0x13e>
c00032f6:	3c 03                	cmp    al,0x3
c00032f8:	75 16                	jne    c0003310 <remove_chain+0x13e>
c00032fa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00032fd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003301:	77 0d                	ja     c0003310 <remove_chain+0x13e>
c0003303:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003306:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000330a:	72 04                	jb     c0003310 <remove_chain+0x13e>
c000330c:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003310:	31 c0                	xor    eax,eax
c0003312:	83 c4 1c             	add    esp,0x1c
c0003315:	5b                   	pop    ebx
c0003316:	5e                   	pop    esi
c0003317:	5f                   	pop    edi
c0003318:	5d                   	pop    ebp
c0003319:	c3                   	ret    

c000331a <dir_clear>:
c000331a:	55                   	push   ebp
c000331b:	57                   	push   edi
c000331c:	56                   	push   esi
c000331d:	89 c6                	mov    esi,eax
c000331f:	53                   	push   ebx
c0003320:	83 ec 1c             	sub    esp,0x1c
c0003323:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003327:	e8 9d ed ff ff       	call   c00020c9 <sync_window>
c000332c:	85 c0                	test   eax,eax
c000332e:	0f 85 de 00 00 00    	jne    c0003412 <dir_clear+0xf8>
c0003334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003338:	89 f0                	mov    eax,esi
c000333a:	8d 6e 54             	lea    ebp,[esi+0x54]
c000333d:	e8 d6 e8 ff ff       	call   c0001c18 <clst2sect>
c0003342:	b9 00 02 00 00       	mov    ecx,0x200
c0003347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000334b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000334f:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003352:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003355:	89 e8                	mov    eax,ebp
c0003357:	31 d2                	xor    edx,edx
c0003359:	e8 b5 e6 ff ff       	call   c0001a13 <mem_set>
c000335e:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003362:	c1 e3 09             	shl    ebx,0x9
c0003365:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000336b:	76 1f                	jbe    c000338c <dir_clear+0x72>
c000336d:	bb 00 80 00 00       	mov    ebx,0x8000
c0003372:	eb 18                	jmp    c000338c <dir_clear+0x72>
c0003374:	83 ec 0c             	sub    esp,0xc
c0003377:	53                   	push   ebx
c0003378:	e8 6b 50 00 00       	call   c00083e8 <ff_memalloc>
c000337d:	83 c4 10             	add    esp,0x10
c0003380:	89 c7                	mov    edi,eax
c0003382:	85 c0                	test   eax,eax
c0003384:	0f 85 8f 00 00 00    	jne    c0003419 <dir_clear+0xff>
c000338a:	d1 eb                	shr    ebx,1
c000338c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003392:	77 e0                	ja     c0003374 <dir_clear+0x5a>
c0003394:	31 db                	xor    ebx,ebx
c0003396:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000339a:	39 d8                	cmp    eax,ebx
c000339c:	76 66                	jbe    c0003404 <dir_clear+0xea>
c000339e:	83 ec 0c             	sub    esp,0xc
c00033a1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033a5:	6a 01                	push   0x1
c00033a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033af:	55                   	push   ebp
c00033b0:	50                   	push   eax
c00033b1:	e8 94 e5 ff ff       	call   c000194a <disk_write>
c00033b6:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033bb:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033c0:	83 c4 20             	add    esp,0x20
c00033c3:	85 c0                	test   eax,eax
c00033c5:	75 3d                	jne    c0003404 <dir_clear+0xea>
c00033c7:	43                   	inc    ebx
c00033c8:	eb cc                	jmp    c0003396 <dir_clear+0x7c>
c00033ca:	83 ec 0c             	sub    esp,0xc
c00033cd:	31 d2                	xor    edx,edx
c00033cf:	55                   	push   ebp
c00033d0:	89 d8                	mov    eax,ebx
c00033d2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033d6:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033da:	52                   	push   edx
c00033db:	50                   	push   eax
c00033dc:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033e0:	57                   	push   edi
c00033e1:	50                   	push   eax
c00033e2:	e8 63 e5 ff ff       	call   c000194a <disk_write>
c00033e7:	83 c4 20             	add    esp,0x20
c00033ea:	85 c0                	test   eax,eax
c00033ec:	75 0a                	jne    c00033f8 <dir_clear+0xde>
c00033ee:	01 eb                	add    ebx,ebp
c00033f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033f4:	39 d8                	cmp    eax,ebx
c00033f6:	77 d2                	ja     c00033ca <dir_clear+0xb0>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	57                   	push   edi
c00033fc:	e8 ff 4f 00 00       	call   c0008400 <ff_memfree>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003408:	39 d8                	cmp    eax,ebx
c000340a:	0f 95 c0             	setne  al
c000340d:	0f b6 c0             	movzx  eax,al
c0003410:	eb 19                	jmp    c000342b <dir_clear+0x111>
c0003412:	b8 01 00 00 00       	mov    eax,0x1
c0003417:	eb 12                	jmp    c000342b <dir_clear+0x111>
c0003419:	89 d9                	mov    ecx,ebx
c000341b:	31 d2                	xor    edx,edx
c000341d:	c1 eb 09             	shr    ebx,0x9
c0003420:	e8 ee e5 ff ff       	call   c0001a13 <mem_set>
c0003425:	89 dd                	mov    ebp,ebx
c0003427:	31 db                	xor    ebx,ebx
c0003429:	eb c5                	jmp    c00033f0 <dir_clear+0xd6>
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	5b                   	pop    ebx
c000342f:	5e                   	pop    esi
c0003430:	5f                   	pop    edi
c0003431:	5d                   	pop    ebp
c0003432:	c3                   	ret    

c0003433 <dir_next>:
c0003433:	55                   	push   ebp
c0003434:	57                   	push   edi
c0003435:	56                   	push   esi
c0003436:	53                   	push   ebx
c0003437:	89 c3                	mov    ebx,eax
c0003439:	83 ec 1c             	sub    esp,0x1c
c000343c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000343e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003442:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003445:	8d 78 20             	lea    edi,[eax+0x20]
c0003448:	31 c0                	xor    eax,eax
c000344a:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000344e:	0f 94 c0             	sete   al
c0003451:	48                   	dec    eax
c0003452:	25 00 00 20 f0       	and    eax,0xf0200000
c0003457:	05 00 00 00 10       	add    eax,0x10000000
c000345c:	39 f8                	cmp    eax,edi
c000345e:	77 0e                	ja     c000346e <dir_next+0x3b>
c0003460:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003467:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000346e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003471:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003474:	b8 04 00 00 00       	mov    eax,0x4
c0003479:	89 ce                	mov    esi,ecx
c000347b:	09 d6                	or     esi,edx
c000347d:	0f 84 da 00 00 00    	je     c000355d <dir_next+0x12a>
c0003483:	89 f8                	mov    eax,edi
c0003485:	25 ff 01 00 00       	and    eax,0x1ff
c000348a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000348e:	0f 85 b9 00 00 00    	jne    c000354d <dir_next+0x11a>
c0003494:	83 c2 01             	add    edx,0x1
c0003497:	83 d1 00             	adc    ecx,0x0
c000349a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000349d:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034a3:	85 d2                	test   edx,edx
c00034a5:	75 29                	jne    c00034d0 <dir_next+0x9d>
c00034a7:	89 fa                	mov    edx,edi
c00034a9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034ad:	c1 ea 05             	shr    edx,0x5
c00034b0:	39 c2                	cmp    edx,eax
c00034b2:	0f 82 95 00 00 00    	jb     c000354d <dir_next+0x11a>
c00034b8:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034bf:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034c6:	b8 04 00 00 00       	mov    eax,0x4
c00034cb:	e9 8d 00 00 00       	jmp    c000355d <dir_next+0x12a>
c00034d0:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034d4:	89 f9                	mov    ecx,edi
c00034d6:	48                   	dec    eax
c00034d7:	c1 e9 09             	shr    ecx,0x9
c00034da:	85 c8                	test   eax,ecx
c00034dc:	75 6f                	jne    c000354d <dir_next+0x11a>
c00034de:	89 d8                	mov    eax,ebx
c00034e0:	e8 00 f8 ff ff       	call   c0002ce5 <get_fat>
c00034e5:	89 c6                	mov    esi,eax
c00034e7:	83 f8 01             	cmp    eax,0x1
c00034ea:	77 07                	ja     c00034f3 <dir_next+0xc0>
c00034ec:	b8 02 00 00 00       	mov    eax,0x2
c00034f1:	eb 6a                	jmp    c000355d <dir_next+0x12a>
c00034f3:	83 f8 ff             	cmp    eax,0xffffffff
c00034f6:	75 07                	jne    c00034ff <dir_next+0xcc>
c00034f8:	b8 01 00 00 00       	mov    eax,0x1
c00034fd:	eb 5e                	jmp    c000355d <dir_next+0x12a>
c00034ff:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003502:	77 37                	ja     c000353b <dir_next+0x108>
c0003504:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003509:	74 ad                	je     c00034b8 <dir_next+0x85>
c000350b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000350e:	89 d8                	mov    eax,ebx
c0003510:	e8 be fa ff ff       	call   c0002fd3 <create_chain>
c0003515:	89 c6                	mov    esi,eax
c0003517:	b8 07 00 00 00       	mov    eax,0x7
c000351c:	85 f6                	test   esi,esi
c000351e:	74 3d                	je     c000355d <dir_next+0x12a>
c0003520:	83 fe 01             	cmp    esi,0x1
c0003523:	74 c7                	je     c00034ec <dir_next+0xb9>
c0003525:	83 fe ff             	cmp    esi,0xffffffff
c0003528:	74 ce                	je     c00034f8 <dir_next+0xc5>
c000352a:	89 f2                	mov    edx,esi
c000352c:	89 e8                	mov    eax,ebp
c000352e:	e8 e7 fd ff ff       	call   c000331a <dir_clear>
c0003533:	85 c0                	test   eax,eax
c0003535:	75 c1                	jne    c00034f8 <dir_next+0xc5>
c0003537:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000353b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000353e:	89 f2                	mov    edx,esi
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 d1 e6 ff ff       	call   c0001c18 <clst2sect>
c0003547:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000354a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000354d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003551:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003554:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003558:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000355b:	31 c0                	xor    eax,eax
c000355d:	83 c4 1c             	add    esp,0x1c
c0003560:	5b                   	pop    ebx
c0003561:	5e                   	pop    esi
c0003562:	5f                   	pop    edi
c0003563:	5d                   	pop    ebp
c0003564:	c3                   	ret    

c0003565 <load_xdir>:
c0003565:	55                   	push   ebp
c0003566:	57                   	push   edi
c0003567:	56                   	push   esi
c0003568:	89 c6                	mov    esi,eax
c000356a:	53                   	push   ebx
c000356b:	83 ec 1c             	sub    esp,0x1c
c000356e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003570:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003573:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003576:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003579:	e8 df eb ff ff       	call   c000215d <move_window>
c000357e:	89 c3                	mov    ebx,eax
c0003580:	85 c0                	test   eax,eax
c0003582:	0f 85 0c 01 00 00    	jne    c0003694 <load_xdir+0x12f>
c0003588:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000358b:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000358e:	0f 85 fb 00 00 00    	jne    c000368f <load_xdir+0x12a>
c0003594:	89 f8                	mov    eax,edi
c0003596:	b9 20 00 00 00       	mov    ecx,0x20
c000359b:	e8 5e e4 ff ff       	call   c00019fe <mem_cpy>
c00035a0:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035a4:	40                   	inc    eax
c00035a5:	c1 e0 05             	shl    eax,0x5
c00035a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035ac:	83 e8 60             	sub    eax,0x60
c00035af:	3d 00 02 00 00       	cmp    eax,0x200
c00035b4:	0f 87 d5 00 00 00    	ja     c000368f <load_xdir+0x12a>
c00035ba:	31 d2                	xor    edx,edx
c00035bc:	89 f0                	mov    eax,esi
c00035be:	e8 70 fe ff ff       	call   c0003433 <dir_next>
c00035c3:	89 c3                	mov    ebx,eax
c00035c5:	83 f8 04             	cmp    eax,0x4
c00035c8:	0f 84 c1 00 00 00    	je     c000368f <load_xdir+0x12a>
c00035ce:	85 c0                	test   eax,eax
c00035d0:	0f 85 be 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035d6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035d9:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00035de:	e8 7a eb ff ff       	call   c000215d <move_window>
c00035e3:	89 c3                	mov    ebx,eax
c00035e5:	85 c0                	test   eax,eax
c00035e7:	0f 85 a7 00 00 00    	jne    c0003694 <load_xdir+0x12f>
c00035ed:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035f0:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00035f3:	0f 85 96 00 00 00    	jne    c000368f <load_xdir+0x12a>
c00035f9:	8d 47 20             	lea    eax,[edi+0x20]
c00035fc:	b9 20 00 00 00       	mov    ecx,0x20
c0003601:	e8 f8 e3 ff ff       	call   c00019fe <mem_cpy>
c0003606:	31 d2                	xor    edx,edx
c0003608:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000360c:	b9 0f 00 00 00       	mov    ecx,0xf
c0003611:	83 c0 2c             	add    eax,0x2c
c0003614:	f7 f1                	div    ecx
c0003616:	c1 e0 05             	shl    eax,0x5
c0003619:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000361d:	77 70                	ja     c000368f <load_xdir+0x12a>
c000361f:	bd 40 00 00 00       	mov    ebp,0x40
c0003624:	31 d2                	xor    edx,edx
c0003626:	89 f0                	mov    eax,esi
c0003628:	e8 06 fe ff ff       	call   c0003433 <dir_next>
c000362d:	89 c3                	mov    ebx,eax
c000362f:	83 f8 04             	cmp    eax,0x4
c0003632:	74 5b                	je     c000368f <load_xdir+0x12a>
c0003634:	85 c0                	test   eax,eax
c0003636:	75 5c                	jne    c0003694 <load_xdir+0x12f>
c0003638:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003640:	e8 18 eb ff ff       	call   c000215d <move_window>
c0003645:	89 c3                	mov    ebx,eax
c0003647:	85 c0                	test   eax,eax
c0003649:	75 49                	jne    c0003694 <load_xdir+0x12f>
c000364b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364e:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003651:	75 3c                	jne    c000368f <load_xdir+0x12a>
c0003653:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003659:	77 0d                	ja     c0003668 <load_xdir+0x103>
c000365b:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000365e:	b9 20 00 00 00       	mov    ecx,0x20
c0003663:	e8 96 e3 ff ff       	call   c00019fe <mem_cpy>
c0003668:	83 c5 20             	add    ebp,0x20
c000366b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000366f:	77 b3                	ja     c0003624 <load_xdir+0xbf>
c0003671:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003677:	77 1b                	ja     c0003694 <load_xdir+0x12f>
c0003679:	89 f8                	mov    eax,edi
c000367b:	e8 cd e7 ff ff       	call   c0001e4d <xdir_sum>
c0003680:	89 c1                	mov    ecx,eax
c0003682:	8d 47 02             	lea    eax,[edi+0x2]
c0003685:	e8 f5 e2 ff ff       	call   c000197f <ld_word>
c000368a:	66 39 c1             	cmp    cx,ax
c000368d:	74 05                	je     c0003694 <load_xdir+0x12f>
c000368f:	bb 02 00 00 00       	mov    ebx,0x2
c0003694:	83 c4 1c             	add    esp,0x1c
c0003697:	89 d8                	mov    eax,ebx
c0003699:	5b                   	pop    ebx
c000369a:	5e                   	pop    esi
c000369b:	5f                   	pop    edi
c000369c:	5d                   	pop    ebp
c000369d:	c3                   	ret    

c000369e <load_obj_xdir>:
c000369e:	53                   	push   ebx
c000369f:	89 c3                	mov    ebx,eax
c00036a1:	83 ec 08             	sub    esp,0x8
c00036a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00036a6:	89 03                	mov    DWORD PTR [ebx],eax
c00036a8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036ae:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b1:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036b4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036be:	30 c0                	xor    al,al
c00036c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036c7:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036cf:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036d2:	e8 04 f8 ff ff       	call   c0002edb <dir_sdi>
c00036d7:	85 c0                	test   eax,eax
c00036d9:	75 0b                	jne    c00036e6 <load_obj_xdir+0x48>
c00036db:	89 d8                	mov    eax,ebx
c00036dd:	83 c4 08             	add    esp,0x8
c00036e0:	5b                   	pop    ebx
c00036e1:	e9 7f fe ff ff       	jmp    c0003565 <load_xdir>
c00036e6:	83 c4 08             	add    esp,0x8
c00036e9:	5b                   	pop    ebx
c00036ea:	c3                   	ret    

c00036eb <dir_read>:
c00036eb:	55                   	push   ebp
c00036ec:	bd 04 00 00 00       	mov    ebp,0x4
c00036f1:	57                   	push   edi
c00036f2:	56                   	push   esi
c00036f3:	be ff ff ff ff       	mov    esi,0xffffffff
c00036f8:	53                   	push   ebx
c00036f9:	89 c3                	mov    ebx,eax
c00036fb:	83 ec 1c             	sub    esp,0x1c
c00036fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003702:	8b 38                	mov    edi,DWORD PTR [eax]
c0003704:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003709:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000370c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000370f:	89 c8                	mov    eax,ecx
c0003711:	09 d0                	or     eax,edx
c0003713:	0f 84 25 01 00 00    	je     c000383e <dir_read+0x153>
c0003719:	89 f8                	mov    eax,edi
c000371b:	e8 3d ea ff ff       	call   c000215d <move_window>
c0003720:	89 c5                	mov    ebp,eax
c0003722:	85 c0                	test   eax,eax
c0003724:	0f 85 23 01 00 00    	jne    c000384d <dir_read+0x162>
c000372a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000372d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000372f:	84 c9                	test   cl,cl
c0003731:	0f 84 11 01 00 00    	je     c0003848 <dir_read+0x15d>
c0003737:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000373a:	75 48                	jne    c0003784 <dir_read+0x99>
c000373c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003741:	74 10                	je     c0003753 <dir_read+0x68>
c0003743:	80 f9 83             	cmp    cl,0x83
c0003746:	0f 85 dd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000374c:	31 ed                	xor    ebp,ebp
c000374e:	e9 08 01 00 00       	jmp    c000385b <dir_read+0x170>
c0003753:	80 f9 85             	cmp    cl,0x85
c0003756:	0f 85 cd 00 00 00    	jne    c0003829 <dir_read+0x13e>
c000375c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000375f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003762:	89 d8                	mov    eax,ebx
c0003764:	e8 fc fd ff ff       	call   c0003565 <load_xdir>
c0003769:	89 c5                	mov    ebp,eax
c000376b:	85 c0                	test   eax,eax
c000376d:	0f 85 da 00 00 00    	jne    c000384d <dir_read+0x162>
c0003773:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003776:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003779:	83 e0 3f             	and    eax,0x3f
c000377c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000377f:	e9 d7 00 00 00       	jmp    c000385b <dir_read+0x170>
c0003784:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003787:	83 e0 3f             	and    eax,0x3f
c000378a:	80 f9 2e             	cmp    cl,0x2e
c000378d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003791:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003794:	0f 84 8a 00 00 00    	je     c0003824 <dir_read+0x139>
c000379a:	80 f9 e5             	cmp    cl,0xe5
c000379d:	0f 84 81 00 00 00    	je     c0003824 <dir_read+0x139>
c00037a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037a7:	83 e0 1f             	and    eax,0x1f
c00037aa:	83 f8 08             	cmp    eax,0x8
c00037ad:	0f 94 c0             	sete   al
c00037b0:	0f b6 c0             	movzx  eax,al
c00037b3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037b7:	75 6b                	jne    c0003824 <dir_read+0x139>
c00037b9:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037be:	75 44                	jne    c0003804 <dir_read+0x119>
c00037c0:	f6 c1 40             	test   cl,0x40
c00037c3:	74 12                	je     c00037d7 <dir_read+0xec>
c00037c5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037c8:	83 e1 bf             	and    ecx,0xffffffbf
c00037cb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037cf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037d2:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037d5:	eb 06                	jmp    c00037dd <dir_read+0xf2>
c00037d7:	89 f0                	mov    eax,esi
c00037d9:	38 c8                	cmp    al,cl
c00037db:	75 47                	jne    c0003824 <dir_read+0x139>
c00037dd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037e1:	be ff ff ff ff       	mov    esi,0xffffffff
c00037e6:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037e9:	75 3e                	jne    c0003829 <dir_read+0x13e>
c00037eb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037ef:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00037f2:	e8 8a e4 ff ff       	call   c0001c81 <pick_lfn>
c00037f7:	85 c0                	test   eax,eax
c00037f9:	74 2e                	je     c0003829 <dir_read+0x13e>
c00037fb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00037ff:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003802:	eb 25                	jmp    c0003829 <dir_read+0x13e>
c0003804:	89 f0                	mov    eax,esi
c0003806:	84 c0                	test   al,al
c0003808:	75 11                	jne    c000381b <dir_read+0x130>
c000380a:	89 d0                	mov    eax,edx
c000380c:	e8 2a e6 ff ff       	call   c0001e3b <sum_sfn>
c0003811:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003815:	0f 84 31 ff ff ff    	je     c000374c <dir_read+0x61>
c000381b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003822:	eb 37                	jmp    c000385b <dir_read+0x170>
c0003824:	be ff ff ff ff       	mov    esi,0xffffffff
c0003829:	31 d2                	xor    edx,edx
c000382b:	89 d8                	mov    eax,ebx
c000382d:	e8 01 fc ff ff       	call   c0003433 <dir_next>
c0003832:	89 c5                	mov    ebp,eax
c0003834:	85 c0                	test   eax,eax
c0003836:	0f 84 cd fe ff ff    	je     c0003709 <dir_read+0x1e>
c000383c:	eb 0f                	jmp    c000384d <dir_read+0x162>
c000383e:	85 ed                	test   ebp,ebp
c0003840:	0f 84 06 ff ff ff    	je     c000374c <dir_read+0x61>
c0003846:	eb 05                	jmp    c000384d <dir_read+0x162>
c0003848:	bd 04 00 00 00       	mov    ebp,0x4
c000384d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003854:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000385b:	83 c4 1c             	add    esp,0x1c
c000385e:	89 e8                	mov    eax,ebp
c0003860:	5b                   	pop    ebx
c0003861:	5e                   	pop    esi
c0003862:	5f                   	pop    edi
c0003863:	5d                   	pop    ebp
c0003864:	c3                   	ret    

c0003865 <dir_alloc>:
c0003865:	55                   	push   ebp
c0003866:	89 d5                	mov    ebp,edx
c0003868:	57                   	push   edi
c0003869:	31 d2                	xor    edx,edx
c000386b:	56                   	push   esi
c000386c:	53                   	push   ebx
c000386d:	89 c3                	mov    ebx,eax
c000386f:	83 ec 0c             	sub    esp,0xc
c0003872:	8b 38                	mov    edi,DWORD PTR [eax]
c0003874:	e8 62 f6 ff ff       	call   c0002edb <dir_sdi>
c0003879:	85 c0                	test   eax,eax
c000387b:	75 4e                	jne    c00038cb <dir_alloc+0x66>
c000387d:	31 f6                	xor    esi,esi
c000387f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003882:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003885:	89 f8                	mov    eax,edi
c0003887:	e8 d1 e8 ff ff       	call   c000215d <move_window>
c000388c:	85 c0                	test   eax,eax
c000388e:	75 3b                	jne    c00038cb <dir_alloc+0x66>
c0003890:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003893:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003896:	8a 12                	mov    dl,BYTE PTR [edx]
c0003898:	75 07                	jne    c00038a1 <dir_alloc+0x3c>
c000389a:	f7 d2                	not    edx
c000389c:	c0 ea 07             	shr    dl,0x7
c000389f:	eb 0d                	jmp    c00038ae <dir_alloc+0x49>
c00038a1:	84 d2                	test   dl,dl
c00038a3:	0f 94 c1             	sete   cl
c00038a6:	80 fa e5             	cmp    dl,0xe5
c00038a9:	0f 94 c2             	sete   dl
c00038ac:	09 ca                	or     edx,ecx
c00038ae:	84 d2                	test   dl,dl
c00038b0:	74 07                	je     c00038b9 <dir_alloc+0x54>
c00038b2:	46                   	inc    esi
c00038b3:	39 ee                	cmp    esi,ebp
c00038b5:	75 04                	jne    c00038bb <dir_alloc+0x56>
c00038b7:	eb 1c                	jmp    c00038d5 <dir_alloc+0x70>
c00038b9:	31 f6                	xor    esi,esi
c00038bb:	ba 01 00 00 00       	mov    edx,0x1
c00038c0:	89 d8                	mov    eax,ebx
c00038c2:	e8 6c fb ff ff       	call   c0003433 <dir_next>
c00038c7:	85 c0                	test   eax,eax
c00038c9:	74 b4                	je     c000387f <dir_alloc+0x1a>
c00038cb:	83 f8 04             	cmp    eax,0x4
c00038ce:	75 05                	jne    c00038d5 <dir_alloc+0x70>
c00038d0:	b8 07 00 00 00       	mov    eax,0x7
c00038d5:	83 c4 0c             	add    esp,0xc
c00038d8:	5b                   	pop    ebx
c00038d9:	5e                   	pop    esi
c00038da:	5f                   	pop    edi
c00038db:	5d                   	pop    ebp
c00038dc:	c3                   	ret    

c00038dd <store_xdir>:
c00038dd:	55                   	push   ebp
c00038de:	57                   	push   edi
c00038df:	89 c7                	mov    edi,eax
c00038e1:	56                   	push   esi
c00038e2:	53                   	push   ebx
c00038e3:	83 ec 0c             	sub    esp,0xc
c00038e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038e8:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038eb:	89 e8                	mov    eax,ebp
c00038ed:	e8 5b e5 ff ff       	call   c0001e4d <xdir_sum>
c00038f2:	0f b7 d0             	movzx  edx,ax
c00038f5:	8d 45 02             	lea    eax,[ebp+0x2]
c00038f8:	e8 f4 e0 ff ff       	call   c00019f1 <st_word>
c00038fd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003901:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003904:	89 f8                	mov    eax,edi
c0003906:	e8 d0 f5 ff ff       	call   c0002edb <dir_sdi>
c000390b:	89 c6                	mov    esi,eax
c000390d:	85 f6                	test   esi,esi
c000390f:	75 3d                	jne    c000394e <store_xdir+0x71>
c0003911:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003914:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003917:	8b 07                	mov    eax,DWORD PTR [edi]
c0003919:	e8 3f e8 ff ff       	call   c000215d <move_window>
c000391e:	89 c6                	mov    esi,eax
c0003920:	85 c0                	test   eax,eax
c0003922:	75 2a                	jne    c000394e <store_xdir+0x71>
c0003924:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003927:	b9 20 00 00 00       	mov    ecx,0x20
c000392c:	89 ea                	mov    edx,ebp
c000392e:	e8 cb e0 ff ff       	call   c00019fe <mem_cpy>
c0003933:	8b 07                	mov    eax,DWORD PTR [edi]
c0003935:	85 db                	test   ebx,ebx
c0003937:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000393b:	74 11                	je     c000394e <store_xdir+0x71>
c000393d:	31 d2                	xor    edx,edx
c000393f:	89 f8                	mov    eax,edi
c0003941:	83 c5 20             	add    ebp,0x20
c0003944:	e8 ea fa ff ff       	call   c0003433 <dir_next>
c0003949:	4b                   	dec    ebx
c000394a:	89 c6                	mov    esi,eax
c000394c:	eb bf                	jmp    c000390d <store_xdir+0x30>
c000394e:	89 f0                	mov    eax,esi
c0003950:	83 fe 02             	cmp    esi,0x2
c0003953:	76 05                	jbe    c000395a <store_xdir+0x7d>
c0003955:	b8 02 00 00 00       	mov    eax,0x2
c000395a:	83 c4 0c             	add    esp,0xc
c000395d:	5b                   	pop    ebx
c000395e:	5e                   	pop    esi
c000395f:	5f                   	pop    edi
c0003960:	5d                   	pop    ebp
c0003961:	c3                   	ret    

c0003962 <dir_remove>:
c0003962:	57                   	push   edi
c0003963:	56                   	push   esi
c0003964:	53                   	push   ebx
c0003965:	89 c3                	mov    ebx,eax
c0003967:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000396a:	8b 30                	mov    esi,DWORD PTR [eax]
c000396c:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000396f:	83 fa ff             	cmp    edx,0xffffffff
c0003972:	74 09                	je     c000397d <dir_remove+0x1b>
c0003974:	e8 62 f5 ff ff       	call   c0002edb <dir_sdi>
c0003979:	85 c0                	test   eax,eax
c000397b:	75 41                	jne    c00039be <dir_remove+0x5c>
c000397d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003980:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003983:	89 f0                	mov    eax,esi
c0003985:	e8 d3 e7 ff ff       	call   c000215d <move_window>
c000398a:	85 c0                	test   eax,eax
c000398c:	75 26                	jne    c00039b4 <dir_remove+0x52>
c000398e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003991:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003994:	75 05                	jne    c000399b <dir_remove+0x39>
c0003996:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003999:	eb 03                	jmp    c000399e <dir_remove+0x3c>
c000399b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000399e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039a2:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039a5:	73 17                	jae    c00039be <dir_remove+0x5c>
c00039a7:	31 d2                	xor    edx,edx
c00039a9:	89 d8                	mov    eax,ebx
c00039ab:	e8 83 fa ff ff       	call   c0003433 <dir_next>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 c9                	je     c000397d <dir_remove+0x1b>
c00039b4:	83 f8 04             	cmp    eax,0x4
c00039b7:	75 05                	jne    c00039be <dir_remove+0x5c>
c00039b9:	b8 02 00 00 00       	mov    eax,0x2
c00039be:	5b                   	pop    ebx
c00039bf:	5e                   	pop    esi
c00039c0:	5f                   	pop    edi
c00039c1:	c3                   	ret    

c00039c2 <create_name>:
c00039c2:	55                   	push   ebp
c00039c3:	89 d5                	mov    ebp,edx
c00039c5:	57                   	push   edi
c00039c6:	89 c7                	mov    edi,eax
c00039c8:	56                   	push   esi
c00039c9:	31 f6                	xor    esi,esi
c00039cb:	53                   	push   ebx
c00039cc:	83 ec 3c             	sub    esp,0x3c
c00039cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039de:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039e2:	e8 72 e0 ff ff       	call   c0001a59 <tchar2uni>
c00039e7:	89 c3                	mov    ebx,eax
c00039e9:	83 f8 ff             	cmp    eax,0xffffffff
c00039ec:	75 0a                	jne    c00039f8 <create_name+0x36>
c00039ee:	b8 06 00 00 00       	mov    eax,0x6
c00039f3:	e9 9e 02 00 00       	jmp    c0003c96 <create_name+0x2d4>
c00039f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00039fd:	76 0c                	jbe    c0003a0b <create_name+0x49>
c00039ff:	c1 e8 10             	shr    eax,0x10
c0003a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a06:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a0a:	46                   	inc    esi
c0003a0b:	66 83 fb 1f          	cmp    bx,0x1f
c0003a0f:	76 4f                	jbe    c0003a60 <create_name+0x9e>
c0003a11:	66 83 fb 5c          	cmp    bx,0x5c
c0003a15:	74 35                	je     c0003a4c <create_name+0x8a>
c0003a17:	66 83 fb 2f          	cmp    bx,0x2f
c0003a1b:	74 2f                	je     c0003a4c <create_name+0x8a>
c0003a1d:	66 83 fb 7f          	cmp    bx,0x7f
c0003a21:	77 11                	ja     c0003a34 <create_name+0x72>
c0003a23:	0f b7 d3             	movzx  edx,bx
c0003a26:	b8 d2 09 02 c0       	mov    eax,0xc00209d2
c0003a2b:	e8 11 e0 ff ff       	call   c0001a41 <chk_chr>
c0003a30:	85 c0                	test   eax,eax
c0003a32:	75 ba                	jne    c00039ee <create_name+0x2c>
c0003a34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a3a:	77 b2                	ja     c00039ee <create_name+0x2c>
c0003a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a40:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a44:	46                   	inc    esi
c0003a45:	eb 97                	jmp    c00039de <create_name+0x1c>
c0003a47:	40                   	inc    eax
c0003a48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a50:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a52:	80 fa 2f             	cmp    dl,0x2f
c0003a55:	74 f0                	je     c0003a47 <create_name+0x85>
c0003a57:	80 fa 5c             	cmp    dl,0x5c
c0003a5a:	74 eb                	je     c0003a47 <create_name+0x85>
c0003a5c:	31 db                	xor    ebx,ebx
c0003a5e:	eb 02                	jmp    c0003a62 <create_name+0xa0>
c0003a60:	b3 04                	mov    bl,0x4
c0003a62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a66:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a69:	85 f6                	test   esi,esi
c0003a6b:	74 18                	je     c0003a85 <create_name+0xc3>
c0003a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a71:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a76:	66 83 f8 20          	cmp    ax,0x20
c0003a7a:	74 06                	je     c0003a82 <create_name+0xc0>
c0003a7c:	66 83 f8 2e          	cmp    ax,0x2e
c0003a80:	75 03                	jne    c0003a85 <create_name+0xc3>
c0003a82:	4e                   	dec    esi
c0003a83:	eb e4                	jmp    c0003a69 <create_name+0xa7>
c0003a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a89:	31 ed                	xor    ebp,ebp
c0003a8b:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003a91:	85 f6                	test   esi,esi
c0003a93:	0f 84 55 ff ff ff    	je     c00039ee <create_name+0x2c>
c0003a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a9d:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aa0:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003aa4:	66 83 f8 20          	cmp    ax,0x20
c0003aa8:	75 04                	jne    c0003aae <create_name+0xec>
c0003aaa:	89 d5                	mov    ebp,edx
c0003aac:	eb eb                	jmp    c0003a99 <create_name+0xd7>
c0003aae:	85 ed                	test   ebp,ebp
c0003ab0:	75 06                	jne    c0003ab8 <create_name+0xf6>
c0003ab2:	66 83 f8 2e          	cmp    ax,0x2e
c0003ab6:	75 08                	jne    c0003ac0 <create_name+0xfe>
c0003ab8:	83 cb 03             	or     ebx,0x3
c0003abb:	eb 03                	jmp    c0003ac0 <create_name+0xfe>
c0003abd:	4e                   	dec    esi
c0003abe:	74 0c                	je     c0003acc <create_name+0x10a>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003aca:	75 f1                	jne    c0003abd <create_name+0xfb>
c0003acc:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ad1:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ad4:	ba 20 00 00 00       	mov    edx,0x20
c0003ad9:	e8 35 df ff ff       	call   c0001a13 <mem_set>
c0003ade:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003ae6:	31 c9                	xor    ecx,ecx
c0003ae8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003aed:	8d 45 01             	lea    eax,[ebp+0x1]
c0003af0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af8:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003afc:	66 85 ed             	test   bp,bp
c0003aff:	0f 84 30 01 00 00    	je     c0003c35 <create_name+0x273>
c0003b05:	66 83 fd 20          	cmp    bp,0x20
c0003b09:	74 10                	je     c0003b1b <create_name+0x159>
c0003b0b:	66 83 fd 2e          	cmp    bp,0x2e
c0003b0f:	75 13                	jne    c0003b24 <create_name+0x162>
c0003b11:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b15:	0f 84 6b 01 00 00    	je     c0003c86 <create_name+0x2c4>
c0003b1b:	83 cb 03             	or     ebx,0x3
c0003b1e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b22:	eb c9                	jmp    c0003aed <create_name+0x12b>
c0003b24:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b28:	73 0b                	jae    c0003b35 <create_name+0x173>
c0003b2a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b2e:	75 47                	jne    c0003b77 <create_name+0x1b5>
c0003b30:	e9 51 01 00 00       	jmp    c0003c86 <create_name+0x2c4>
c0003b35:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b3a:	75 10                	jne    c0003b4c <create_name+0x18a>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b47:	e9 e9 00 00 00       	jmp    c0003c35 <create_name+0x273>
c0003b4c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b50:	74 0d                	je     c0003b5f <create_name+0x19d>
c0003b52:	83 cb 03             	or     ebx,0x3
c0003b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b59:	0f 87 d6 00 00 00    	ja     c0003c35 <create_name+0x273>
c0003b5f:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b64:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b68:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b70:	b9 08 00 00 00       	mov    ecx,0x8
c0003b75:	eb a7                	jmp    c0003b1e <create_name+0x15c>
c0003b77:	66 83 fd 7f          	cmp    bp,0x7f
c0003b7b:	76 68                	jbe    c0003be5 <create_name+0x223>
c0003b7d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b81:	88 da                	mov    dl,bl
c0003b83:	83 ca 02             	or     edx,0x2
c0003b86:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b8a:	50                   	push   eax
c0003b8b:	50                   	push   eax
c0003b8c:	68 b5 01 00 00       	push   0x1b5
c0003b91:	55                   	push   ebp
c0003b92:	e8 81 48 00 00       	call   c0008418 <ff_uni2oem>
c0003b97:	83 c4 10             	add    esp,0x10
c0003b9a:	89 c5                	mov    ebp,eax
c0003b9c:	a8 80                	test   al,0x80
c0003b9e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ba6:	74 0c                	je     c0003bb4 <create_name+0x1f2>
c0003ba8:	83 e5 7f             	and    ebp,0x7f
c0003bab:	0f b6 ad 20 09 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdf6e0]
c0003bb2:	eb 2a                	jmp    c0003bde <create_name+0x21c>
c0003bb4:	66 3d ff 00          	cmp    ax,0xff
c0003bb8:	76 24                	jbe    c0003bde <create_name+0x21c>
c0003bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bbe:	48                   	dec    eax
c0003bbf:	39 c8                	cmp    eax,ecx
c0003bc1:	77 0c                	ja     c0003bcf <create_name+0x20d>
c0003bc3:	83 cb 03             	or     ebx,0x3
c0003bc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bca:	e9 4f ff ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003bcf:	89 e8                	mov    eax,ebp
c0003bd1:	88 d3                	mov    bl,dl
c0003bd3:	66 c1 e8 08          	shr    ax,0x8
c0003bd7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bdb:	41                   	inc    ecx
c0003bdc:	eb 4b                	jmp    c0003c29 <create_name+0x267>
c0003bde:	88 d3                	mov    bl,dl
c0003be0:	66 85 ed             	test   bp,bp
c0003be3:	74 19                	je     c0003bfe <create_name+0x23c>
c0003be5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003be9:	0f b7 d5             	movzx  edx,bp
c0003bec:	b8 db 09 02 c0       	mov    eax,0xc00209db
c0003bf1:	e8 4b de ff ff       	call   c0001a41 <chk_chr>
c0003bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003bfa:	85 c0                	test   eax,eax
c0003bfc:	74 0a                	je     c0003c08 <create_name+0x246>
c0003bfe:	83 cb 03             	or     ebx,0x3
c0003c01:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c06:	eb 21                	jmp    c0003c29 <create_name+0x267>
c0003c08:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c0b:	66 83 f8 19          	cmp    ax,0x19
c0003c0f:	77 07                	ja     c0003c18 <create_name+0x256>
c0003c11:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c16:	eb 11                	jmp    c0003c29 <create_name+0x267>
c0003c18:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c1b:	66 83 f8 19          	cmp    ax,0x19
c0003c1f:	77 08                	ja     c0003c29 <create_name+0x267>
c0003c21:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c26:	83 ed 20             	sub    ebp,0x20
c0003c29:	89 e8                	mov    eax,ebp
c0003c2b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c2f:	41                   	inc    ecx
c0003c30:	e9 e9 fe ff ff       	jmp    c0003b1e <create_name+0x15c>
c0003c35:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c39:	75 04                	jne    c0003c3f <create_name+0x27d>
c0003c3b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c3f:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c44:	75 05                	jne    c0003c4b <create_name+0x289>
c0003c46:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c4f:	83 e0 0c             	and    eax,0xc
c0003c52:	3c 0c                	cmp    al,0xc
c0003c54:	74 0b                	je     c0003c61 <create_name+0x29f>
c0003c56:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5a:	83 e0 03             	and    eax,0x3
c0003c5d:	3c 03                	cmp    al,0x3
c0003c5f:	75 05                	jne    c0003c66 <create_name+0x2a4>
c0003c61:	83 cb 02             	or     ebx,0x2
c0003c64:	eb 19                	jmp    c0003c7f <create_name+0x2bd>
c0003c66:	f6 c3 02             	test   bl,0x2
c0003c69:	75 14                	jne    c0003c7f <create_name+0x2bd>
c0003c6b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c70:	74 03                	je     c0003c75 <create_name+0x2b3>
c0003c72:	83 cb 10             	or     ebx,0x10
c0003c75:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c7a:	74 03                	je     c0003c7f <create_name+0x2bd>
c0003c7c:	83 cb 08             	or     ebx,0x8
c0003c7f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c82:	31 c0                	xor    eax,eax
c0003c84:	eb 10                	jmp    c0003c96 <create_name+0x2d4>
c0003c86:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c8b:	0f 85 ce fe ff ff    	jne    c0003b5f <create_name+0x19d>
c0003c91:	e9 a6 fe ff ff       	jmp    c0003b3c <create_name+0x17a>
c0003c96:	83 c4 3c             	add    esp,0x3c
c0003c99:	5b                   	pop    ebx
c0003c9a:	5e                   	pop    esi
c0003c9b:	5f                   	pop    edi
c0003c9c:	5d                   	pop    ebp
c0003c9d:	c3                   	ret    

c0003c9e <xname_sum>:
c0003c9e:	56                   	push   esi
c0003c9f:	53                   	push   ebx
c0003ca0:	89 c6                	mov    esi,eax
c0003ca2:	51                   	push   ecx
c0003ca3:	31 db                	xor    ebx,ebx
c0003ca5:	83 c6 02             	add    esi,0x2
c0003ca8:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cac:	66 85 c0             	test   ax,ax
c0003caf:	74 1f                	je     c0003cd0 <xname_sum+0x32>
c0003cb1:	83 ec 0c             	sub    esp,0xc
c0003cb4:	66 d1 cb             	ror    bx,1
c0003cb7:	50                   	push   eax
c0003cb8:	e8 67 48 00 00       	call   c0008524 <ff_wtoupper>
c0003cbd:	83 c4 10             	add    esp,0x10
c0003cc0:	0f b6 d0             	movzx  edx,al
c0003cc3:	66 c1 e8 08          	shr    ax,0x8
c0003cc7:	01 d3                	add    ebx,edx
c0003cc9:	66 d1 cb             	ror    bx,1
c0003ccc:	01 c3                	add    ebx,eax
c0003cce:	eb d5                	jmp    c0003ca5 <xname_sum+0x7>
c0003cd0:	89 d8                	mov    eax,ebx
c0003cd2:	5a                   	pop    edx
c0003cd3:	5b                   	pop    ebx
c0003cd4:	5e                   	pop    esi
c0003cd5:	c3                   	ret    

c0003cd6 <create_xdir>:
c0003cd6:	55                   	push   ebp
c0003cd7:	b9 40 00 00 00       	mov    ecx,0x40
c0003cdc:	57                   	push   edi
c0003cdd:	bd 01 00 00 00       	mov    ebp,0x1
c0003ce2:	56                   	push   esi
c0003ce3:	31 ff                	xor    edi,edi
c0003ce5:	53                   	push   ebx
c0003ce6:	be 40 00 00 00       	mov    esi,0x40
c0003ceb:	89 c3                	mov    ebx,eax
c0003ced:	83 ec 1c             	sub    esp,0x1c
c0003cf0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003cf4:	31 d2                	xor    edx,edx
c0003cf6:	e8 18 dd ff ff       	call   c0001a13 <mem_set>
c0003cfb:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003cfe:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d02:	31 c9                	xor    ecx,ecx
c0003d04:	8d 46 01             	lea    eax,[esi+0x1]
c0003d07:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d0b:	83 c6 02             	add    esi,0x2
c0003d0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d12:	66 85 ed             	test   bp,bp
c0003d15:	74 12                	je     c0003d29 <create_xdir+0x53>
c0003d17:	0f b6 c1             	movzx  eax,cl
c0003d1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d1e:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d22:	66 83 fd 01          	cmp    bp,0x1
c0003d26:	80 d9 ff             	sbb    cl,0xff
c0003d29:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d2c:	0f b7 d5             	movzx  edx,bp
c0003d2f:	83 c6 02             	add    esi,0x2
c0003d32:	e8 ba dc ff ff       	call   c00019f1 <st_word>
c0003d37:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d3d:	75 d3                	jne    c0003d12 <create_xdir+0x3c>
c0003d3f:	8d 47 01             	lea    eax,[edi+0x1]
c0003d42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d4a:	0f b6 c1             	movzx  eax,cl
c0003d4d:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d52:	74 07                	je     c0003d5b <create_xdir+0x85>
c0003d54:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d59:	eb a9                	jmp    c0003d04 <create_xdir+0x2e>
c0003d5b:	8d 47 02             	lea    eax,[edi+0x2]
c0003d5e:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d61:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d64:	89 d0                	mov    eax,edx
c0003d66:	e8 33 ff ff ff       	call   c0003c9e <xname_sum>
c0003d6b:	83 c4 1c             	add    esp,0x1c
c0003d6e:	0f b7 d0             	movzx  edx,ax
c0003d71:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d74:	5b                   	pop    ebx
c0003d75:	5e                   	pop    esi
c0003d76:	5f                   	pop    edi
c0003d77:	5d                   	pop    ebp
c0003d78:	e9 74 dc ff ff       	jmp    c00019f1 <st_word>

c0003d7d <cmp_lfn>:
c0003d7d:	55                   	push   ebp
c0003d7e:	57                   	push   edi
c0003d7f:	89 d7                	mov    edi,edx
c0003d81:	56                   	push   esi
c0003d82:	53                   	push   ebx
c0003d83:	83 ec 1c             	sub    esp,0x1c
c0003d86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d8d:	e8 ed db ff ff       	call   c000197f <ld_word>
c0003d92:	66 85 c0             	test   ax,ax
c0003d95:	74 07                	je     c0003d9e <cmp_lfn+0x21>
c0003d97:	31 c0                	xor    eax,eax
c0003d99:	e9 9a 00 00 00       	jmp    c0003e38 <cmp_lfn+0xbb>
c0003d9e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003da0:	bd 01 00 00 00       	mov    ebp,0x1
c0003da5:	83 e3 3f             	and    ebx,0x3f
c0003da8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003db0:	4b                   	dec    ebx
c0003db1:	6b db 0d             	imul   ebx,ebx,0xd
c0003db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003db8:	0f b6 80 a0 09 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf660]
c0003dbf:	01 f8                	add    eax,edi
c0003dc1:	e8 b9 db ff ff       	call   c000197f <ld_word>
c0003dc6:	66 85 ed             	test   bp,bp
c0003dc9:	89 c6                	mov    esi,eax
c0003dcb:	74 3c                	je     c0003e09 <cmp_lfn+0x8c>
c0003dcd:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003dd3:	77 c2                	ja     c0003d97 <cmp_lfn+0x1a>
c0003dd5:	83 ec 0c             	sub    esp,0xc
c0003dd8:	0f b7 c0             	movzx  eax,ax
c0003ddb:	50                   	push   eax
c0003ddc:	e8 43 47 00 00       	call   c0008524 <ff_wtoupper>
c0003de1:	89 c5                	mov    ebp,eax
c0003de3:	8d 43 01             	lea    eax,[ebx+0x1]
c0003de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003dea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dee:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003df2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003df5:	e8 2a 47 00 00       	call   c0008524 <ff_wtoupper>
c0003dfa:	83 c4 10             	add    esp,0x10
c0003dfd:	39 c5                	cmp    ebp,eax
c0003dff:	75 96                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e01:	89 f5                	mov    ebp,esi
c0003e03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e07:	eb 04                	jmp    c0003e0d <cmp_lfn+0x90>
c0003e09:	66 46                	inc    si
c0003e0b:	75 8a                	jne    c0003d97 <cmp_lfn+0x1a>
c0003e0d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e11:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e16:	75 9c                	jne    c0003db4 <cmp_lfn+0x37>
c0003e18:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e1b:	74 16                	je     c0003e33 <cmp_lfn+0xb6>
c0003e1d:	66 85 ed             	test   bp,bp
c0003e20:	74 11                	je     c0003e33 <cmp_lfn+0xb6>
c0003e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e26:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e2b:	0f 94 c0             	sete   al
c0003e2e:	0f b6 c0             	movzx  eax,al
c0003e31:	eb 05                	jmp    c0003e38 <cmp_lfn+0xbb>
c0003e33:	b8 01 00 00 00       	mov    eax,0x1
c0003e38:	83 c4 1c             	add    esp,0x1c
c0003e3b:	5b                   	pop    ebx
c0003e3c:	5e                   	pop    esi
c0003e3d:	5f                   	pop    edi
c0003e3e:	5d                   	pop    ebp
c0003e3f:	c3                   	ret    

c0003e40 <dir_find>:
c0003e40:	55                   	push   ebp
c0003e41:	31 d2                	xor    edx,edx
c0003e43:	57                   	push   edi
c0003e44:	56                   	push   esi
c0003e45:	53                   	push   ebx
c0003e46:	89 c3                	mov    ebx,eax
c0003e48:	83 ec 1c             	sub    esp,0x1c
c0003e4b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e4d:	e8 89 f0 ff ff       	call   c0002edb <dir_sdi>
c0003e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e55:	85 c0                	test   eax,eax
c0003e57:	0f 85 9e 01 00 00    	jne    c0003ffb <dir_find+0x1bb>
c0003e5d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e60:	0f 85 8d 00 00 00    	jne    c0003ef3 <dir_find+0xb3>
c0003e66:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e69:	e8 30 fe ff ff       	call   c0003c9e <xname_sum>
c0003e6e:	89 c7                	mov    edi,eax
c0003e70:	31 d2                	xor    edx,edx
c0003e72:	89 d8                	mov    eax,ebx
c0003e74:	e8 72 f8 ff ff       	call   c00036eb <dir_read>
c0003e79:	85 c0                	test   eax,eax
c0003e7b:	0f 85 5e 01 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003e81:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e84:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e87:	e8 f3 da ff ff       	call   c000197f <ld_word>
c0003e8c:	66 39 f8             	cmp    ax,di
c0003e8f:	75 df                	jne    c0003e70 <dir_find+0x30>
c0003e91:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003e94:	31 ed                	xor    ebp,ebp
c0003e96:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003e9a:	ba 40 00 00 00       	mov    edx,0x40
c0003e9f:	89 e9                	mov    ecx,ebp
c0003ea1:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003ea5:	0f 84 42 01 00 00    	je     c0003fed <dir_find+0x1ad>
c0003eab:	f6 c2 1f             	test   dl,0x1f
c0003eae:	75 03                	jne    c0003eb3 <dir_find+0x73>
c0003eb0:	83 c2 02             	add    edx,0x2
c0003eb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003eb7:	89 d0                	mov    eax,edx
c0003eb9:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ebc:	e8 be da ff ff       	call   c000197f <ld_word>
c0003ec1:	83 ec 0c             	sub    esp,0xc
c0003ec4:	0f b7 c0             	movzx  eax,ax
c0003ec7:	50                   	push   eax
c0003ec8:	e8 57 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ed1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ed4:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0003edb:	e8 44 46 00 00       	call   c0008524 <ff_wtoupper>
c0003ee0:	83 c4 10             	add    esp,0x10
c0003ee3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ee7:	75 87                	jne    c0003e70 <dir_find+0x30>
c0003ee9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003eed:	45                   	inc    ebp
c0003eee:	83 c2 02             	add    edx,0x2
c0003ef1:	eb ac                	jmp    c0003e9f <dir_find+0x5f>
c0003ef3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003efa:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003eff:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f04:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f07:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f0a:	89 f0                	mov    eax,esi
c0003f0c:	e8 4c e2 ff ff       	call   c000215d <move_window>
c0003f11:	85 c0                	test   eax,eax
c0003f13:	0f 85 c6 00 00 00    	jne    c0003fdf <dir_find+0x19f>
c0003f19:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f1c:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f1f:	84 c9                	test   cl,cl
c0003f21:	0f 84 bd 00 00 00    	je     c0003fe4 <dir_find+0x1a4>
c0003f27:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f2a:	88 d0                	mov    al,dl
c0003f2c:	83 e0 3f             	and    eax,0x3f
c0003f2f:	80 f9 e5             	cmp    cl,0xe5
c0003f32:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f35:	0f 84 87 00 00 00    	je     c0003fc2 <dir_find+0x182>
c0003f3b:	80 e2 08             	and    dl,0x8
c0003f3e:	74 06                	je     c0003f46 <dir_find+0x106>
c0003f40:	3c 0f                	cmp    al,0xf
c0003f42:	75 7e                	jne    c0003fc2 <dir_find+0x182>
c0003f44:	eb 04                	jmp    c0003f4a <dir_find+0x10a>
c0003f46:	3c 0f                	cmp    al,0xf
c0003f48:	75 4c                	jne    c0003f96 <dir_find+0x156>
c0003f4a:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f4e:	75 7e                	jne    c0003fce <dir_find+0x18e>
c0003f50:	f6 c1 40             	test   cl,0x40
c0003f53:	74 12                	je     c0003f67 <dir_find+0x127>
c0003f55:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f58:	83 e1 bf             	and    ecx,0xffffffbf
c0003f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f5f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f62:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f65:	eb 06                	jmp    c0003f6d <dir_find+0x12d>
c0003f67:	89 f8                	mov    eax,edi
c0003f69:	38 c8                	cmp    al,cl
c0003f6b:	75 5c                	jne    c0003fc9 <dir_find+0x189>
c0003f6d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f71:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f76:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f79:	75 53                	jne    c0003fce <dir_find+0x18e>
c0003f7b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f7f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f82:	89 ea                	mov    edx,ebp
c0003f84:	e8 f4 fd ff ff       	call   c0003d7d <cmp_lfn>
c0003f89:	85 c0                	test   eax,eax
c0003f8b:	74 41                	je     c0003fce <dir_find+0x18e>
c0003f8d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003f91:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003f94:	eb 38                	jmp    c0003fce <dir_find+0x18e>
c0003f96:	89 f8                	mov    eax,edi
c0003f98:	84 c0                	test   al,al
c0003f9a:	75 0d                	jne    c0003fa9 <dir_find+0x169>
c0003f9c:	89 e8                	mov    eax,ebp
c0003f9e:	e8 98 de ff ff       	call   c0001e3b <sum_sfn>
c0003fa3:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fa7:	74 52                	je     c0003ffb <dir_find+0x1bb>
c0003fa9:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fad:	75 13                	jne    c0003fc2 <dir_find+0x182>
c0003faf:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fb2:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fb7:	89 e8                	mov    eax,ebp
c0003fb9:	e8 60 da ff ff       	call   c0001a1e <mem_cmp>
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	74 39                	je     c0003ffb <dir_find+0x1bb>
c0003fc2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fce:	31 d2                	xor    edx,edx
c0003fd0:	89 d8                	mov    eax,ebx
c0003fd2:	e8 5c f4 ff ff       	call   c0003433 <dir_next>
c0003fd7:	85 c0                	test   eax,eax
c0003fd9:	0f 84 25 ff ff ff    	je     c0003f04 <dir_find+0xc4>
c0003fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe2:	eb 17                	jmp    c0003ffb <dir_find+0x1bb>
c0003fe4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003feb:	eb 0e                	jmp    c0003ffb <dir_find+0x1bb>
c0003fed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ff0:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0003ff5:	0f 85 75 fe ff ff    	jne    c0003e70 <dir_find+0x30>
c0003ffb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003ffe:	83 c4 1c             	add    esp,0x1c
c0004001:	5b                   	pop    ebx
c0004002:	5e                   	pop    esi
c0004003:	5f                   	pop    edi
c0004004:	5d                   	pop    ebp
c0004005:	c3                   	ret    

c0004006 <dir_register>:
c0004006:	55                   	push   ebp
c0004007:	57                   	push   edi
c0004008:	56                   	push   esi
c0004009:	be 06 00 00 00       	mov    esi,0x6
c000400e:	53                   	push   ebx
c000400f:	83 ec 6c             	sub    esp,0x6c
c0004012:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004016:	0f 85 62 02 00 00    	jne    c000427e <dir_register+0x278>
c000401c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000401e:	31 ff                	xor    edi,edi
c0004020:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004023:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004028:	74 03                	je     c000402d <dir_register+0x27>
c000402a:	47                   	inc    edi
c000402b:	eb f6                	jmp    c0004023 <dir_register+0x1d>
c000402d:	89 c3                	mov    ebx,eax
c000402f:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004033:	0f 85 e1 00 00 00    	jne    c000411a <dir_register+0x114>
c0004039:	83 c7 0e             	add    edi,0xe
c000403c:	b9 0f 00 00 00       	mov    ecx,0xf
c0004041:	89 f8                	mov    eax,edi
c0004043:	31 d2                	xor    edx,edx
c0004045:	f7 f1                	div    ecx
c0004047:	8d 50 02             	lea    edx,[eax+0x2]
c000404a:	89 c7                	mov    edi,eax
c000404c:	89 d8                	mov    eax,ebx
c000404e:	e8 12 f8 ff ff       	call   c0003865 <dir_alloc>
c0004053:	89 c6                	mov    esi,eax
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 21 02 00 00    	jne    c000427e <dir_register+0x278>
c000405d:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004063:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004066:	c1 e7 05             	shl    edi,0x5
c0004069:	29 f8                	sub    eax,edi
c000406b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000406e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004071:	a8 04                	test   al,0x4
c0004073:	0f 84 91 00 00 00    	je     c000410a <dir_register+0x104>
c0004079:	83 e0 fb             	and    eax,0xfffffffb
c000407c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000407f:	89 d8                	mov    eax,ebx
c0004081:	e8 25 ec ff ff       	call   c0002cab <fill_first_frag>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 85 ee 01 00 00    	jne    c000427c <dir_register+0x276>
c000408e:	83 c9 ff             	or     ecx,0xffffffff
c0004091:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004094:	89 d8                	mov    eax,ebx
c0004096:	e8 db eb ff ff       	call   c0002c76 <fill_last_frag>
c000409b:	85 c0                	test   eax,eax
c000409d:	0f 85 d9 01 00 00    	jne    c000427c <dir_register+0x276>
c00040a3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040a7:	74 61                	je     c000410a <dir_register+0x104>
c00040a9:	89 da                	mov    edx,ebx
c00040ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040af:	e8 ea f5 ff ff       	call   c000369e <load_obj_xdir>
c00040b4:	85 c0                	test   eax,eax
c00040b6:	0f 85 c0 01 00 00    	jne    c000427c <dir_register+0x276>
c00040bc:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040c0:	31 c9                	xor    ecx,ecx
c00040c2:	c1 e2 09             	shl    edx,0x9
c00040c5:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040c8:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040cb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040ce:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040d4:	83 c0 38             	add    eax,0x38
c00040d7:	e8 1c d9 ff ff       	call   c00019f8 <st_qword>
c00040dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040e2:	83 c0 28             	add    eax,0x28
c00040e5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040e8:	e8 0b d9 ff ff       	call   c00019f8 <st_qword>
c00040ed:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00040f3:	83 c8 01             	or     eax,0x1
c00040f6:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00040f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040fd:	e8 db f7 ff ff       	call   c00038dd <store_xdir>
c0004102:	85 c0                	test   eax,eax
c0004104:	0f 85 72 01 00 00    	jne    c000427c <dir_register+0x276>
c000410a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000410d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004110:	e8 c1 fb ff ff       	call   c0003cd6 <create_xdir>
c0004115:	e9 64 01 00 00       	jmp    c000427e <dir_register+0x278>
c000411a:	8d 40 3c             	lea    eax,[eax+0x3c]
c000411d:	b9 0c 00 00 00       	mov    ecx,0xc
c0004122:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004126:	89 c2                	mov    edx,eax
c0004128:	8d 44 24 14          	lea    eax,[esp+0x14]
c000412c:	e8 cd d8 ff ff       	call   c00019fe <mem_cpy>
c0004131:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004136:	74 58                	je     c0004190 <dir_register+0x18a>
c0004138:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000413c:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004144:	83 ec 0c             	sub    esp,0xc
c0004147:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000414a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000414e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004152:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004156:	e8 24 dc ff ff       	call   c0001d7f <gen_numname>
c000415b:	89 d8                	mov    eax,ebx
c000415d:	e8 de fc ff ff       	call   c0003e40 <dir_find>
c0004162:	83 c4 10             	add    esp,0x10
c0004165:	89 c6                	mov    esi,eax
c0004167:	85 c0                	test   eax,eax
c0004169:	75 15                	jne    c0004180 <dir_register+0x17a>
c000416b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000416f:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004174:	75 ce                	jne    c0004144 <dir_register+0x13e>
c0004176:	be 07 00 00 00       	mov    esi,0x7
c000417b:	e9 fe 00 00 00       	jmp    c000427e <dir_register+0x278>
c0004180:	83 f8 04             	cmp    eax,0x4
c0004183:	0f 85 f5 00 00 00    	jne    c000427e <dir_register+0x278>
c0004189:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000418d:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004190:	b9 01 00 00 00       	mov    ecx,0x1
c0004195:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000419a:	74 0f                	je     c00041ab <dir_register+0x1a5>
c000419c:	b9 0d 00 00 00       	mov    ecx,0xd
c00041a1:	8d 47 0c             	lea    eax,[edi+0xc]
c00041a4:	31 d2                	xor    edx,edx
c00041a6:	f7 f1                	div    ecx
c00041a8:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ab:	89 ca                	mov    edx,ecx
c00041ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b1:	89 d8                	mov    eax,ebx
c00041b3:	e8 ad f6 ff ff       	call   c0003865 <dir_alloc>
c00041b8:	89 c6                	mov    esi,eax
c00041ba:	85 c0                	test   eax,eax
c00041bc:	0f 85 bc 00 00 00    	jne    c000427e <dir_register+0x278>
c00041c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041c6:	49                   	dec    ecx
c00041c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041cb:	74 6a                	je     c0004237 <dir_register+0x231>
c00041cd:	89 c8                	mov    eax,ecx
c00041cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041d2:	c1 e0 05             	shl    eax,0x5
c00041d5:	29 c2                	sub    edx,eax
c00041d7:	89 d8                	mov    eax,ebx
c00041d9:	e8 fd ec ff ff       	call   c0002edb <dir_sdi>
c00041de:	89 c6                	mov    esi,eax
c00041e0:	85 c0                	test   eax,eax
c00041e2:	0f 85 96 00 00 00    	jne    c000427e <dir_register+0x278>
c00041e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041ec:	e8 4a dc ff ff       	call   c0001e3b <sum_sfn>
c00041f1:	0f b6 f8             	movzx  edi,al
c00041f4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041fa:	89 e8                	mov    eax,ebp
c00041fc:	e8 5c df ff ff       	call   c000215d <move_window>
c0004201:	89 c6                	mov    esi,eax
c0004203:	85 c0                	test   eax,eax
c0004205:	75 77                	jne    c000427e <dir_register+0x278>
c0004207:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000420c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004215:	57                   	push   edi
c0004216:	e8 e0 da ff ff       	call   c0001cfb <put_lfn>
c000421b:	31 d2                	xor    edx,edx
c000421d:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004221:	89 d8                	mov    eax,ebx
c0004223:	e8 0b f2 ff ff       	call   c0003433 <dir_next>
c0004228:	83 c4 10             	add    esp,0x10
c000422b:	89 c6                	mov    esi,eax
c000422d:	85 c0                	test   eax,eax
c000422f:	75 4d                	jne    c000427e <dir_register+0x278>
c0004231:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004235:	75 bd                	jne    c00041f4 <dir_register+0x1ee>
c0004237:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000423a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000423d:	89 e8                	mov    eax,ebp
c000423f:	e8 19 df ff ff       	call   c000215d <move_window>
c0004244:	89 c6                	mov    esi,eax
c0004246:	85 c0                	test   eax,eax
c0004248:	75 34                	jne    c000427e <dir_register+0x278>
c000424a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000424d:	b9 20 00 00 00       	mov    ecx,0x20
c0004252:	31 d2                	xor    edx,edx
c0004254:	e8 ba d7 ff ff       	call   c0001a13 <mem_set>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004260:	b9 0b 00 00 00       	mov    ecx,0xb
c0004265:	e8 94 d7 ff ff       	call   c00019fe <mem_cpy>
c000426a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000426d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004270:	83 e0 18             	and    eax,0x18
c0004273:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004276:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000427a:	eb 02                	jmp    c000427e <dir_register+0x278>
c000427c:	89 c6                	mov    esi,eax
c000427e:	83 c4 6c             	add    esp,0x6c
c0004281:	89 f0                	mov    eax,esi
c0004283:	5b                   	pop    ebx
c0004284:	5e                   	pop    esi
c0004285:	5f                   	pop    edi
c0004286:	5d                   	pop    ebp
c0004287:	c3                   	ret    

c0004288 <sync_fs>:
c0004288:	56                   	push   esi
c0004289:	53                   	push   ebx
c000428a:	53                   	push   ebx
c000428b:	89 c3                	mov    ebx,eax
c000428d:	e8 37 de ff ff       	call   c00020c9 <sync_window>
c0004292:	85 c0                	test   eax,eax
c0004294:	0f 85 b1 00 00 00    	jne    c000434b <sync_fs+0xc3>
c000429a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000429d:	0f 85 8e 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042a3:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042a7:	0f 85 84 00 00 00    	jne    c0004331 <sync_fs+0xa9>
c00042ad:	b9 00 02 00 00       	mov    ecx,0x200
c00042b2:	8d 73 54             	lea    esi,[ebx+0x54]
c00042b5:	31 d2                	xor    edx,edx
c00042b7:	89 f0                	mov    eax,esi
c00042b9:	e8 55 d7 ff ff       	call   c0001a13 <mem_set>
c00042be:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042c4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042c9:	e8 23 d7 ff ff       	call   c00019f1 <st_word>
c00042ce:	ba 52 52 61 41       	mov    edx,0x41615252
c00042d3:	89 f0                	mov    eax,esi
c00042d5:	e8 1b d7 ff ff       	call   c00019f5 <st_dword>
c00042da:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042e0:	ba 72 72 41 61       	mov    edx,0x61417272
c00042e5:	e8 0b d7 ff ff       	call   c00019f5 <st_dword>
c00042ea:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042ed:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00042f3:	e8 fd d6 ff ff       	call   c00019f5 <st_dword>
c00042f8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00042fb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004301:	e8 ef d6 ff ff       	call   c00019f5 <st_dword>
c0004306:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004309:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000430c:	83 c0 01             	add    eax,0x1
c000430f:	83 d2 00             	adc    edx,0x0
c0004312:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004315:	83 ec 0c             	sub    esp,0xc
c0004318:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000431b:	6a 01                	push   0x1
c000431d:	52                   	push   edx
c000431e:	50                   	push   eax
c000431f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004323:	56                   	push   esi
c0004324:	50                   	push   eax
c0004325:	e8 20 d6 ff ff       	call   c000194a <disk_write>
c000432a:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000432e:	83 c4 20             	add    esp,0x20
c0004331:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004335:	51                   	push   ecx
c0004336:	6a 00                	push   0x0
c0004338:	6a 00                	push   0x0
c000433a:	50                   	push   eax
c000433b:	e8 20 d6 ff ff       	call   c0001960 <disk_ioctl>
c0004340:	83 c4 10             	add    esp,0x10
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 95 c0             	setne  al
c0004348:	0f b6 c0             	movzx  eax,al
c000434b:	5a                   	pop    edx
c000434c:	5b                   	pop    ebx
c000434d:	5e                   	pop    esi
c000434e:	c3                   	ret    

c000434f <create_partition>:
c000434f:	55                   	push   ebp
c0004350:	0f b6 c0             	movzx  eax,al
c0004353:	57                   	push   edi
c0004354:	56                   	push   esi
c0004355:	53                   	push   ebx
c0004356:	83 ec 60             	sub    esp,0x60
c0004359:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000435d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004361:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004365:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004369:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000436d:	50                   	push   eax
c000436e:	6a 01                	push   0x1
c0004370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004374:	e8 e7 d5 ff ff       	call   c0001960 <disk_ioctl>
c0004379:	83 c4 10             	add    esp,0x10
c000437c:	85 c0                	test   eax,eax
c000437e:	74 0a                	je     c000438a <create_partition+0x3b>
c0004380:	b8 01 00 00 00       	mov    eax,0x1
c0004385:	e9 67 05 00 00       	jmp    c00048f1 <create_partition+0x5a2>
c000438a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000438e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004392:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004396:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000439a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000439f:	0f 86 ed 03 00 00    	jbe    c0004792 <create_partition+0x443>
c00043a5:	83 c0 df             	add    eax,0xffffffdf
c00043a8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043b0:	83 d2 ff             	adc    edx,0xffffffff
c00043b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043c3:	83 c0 bd             	add    eax,0xffffffbd
c00043c6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043cd:	83 d2 ff             	adc    edx,0xffffffff
c00043d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043d8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043e0:	be 22 00 00 00       	mov    esi,0x22
c00043e5:	31 ff                	xor    edi,edi
c00043e7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043ef:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00043f7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00043ff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004403:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004409:	75 0e                	jne    c0004419 <create_partition+0xca>
c000440b:	b9 00 02 00 00       	mov    ecx,0x200
c0004410:	31 d2                	xor    edx,edx
c0004412:	89 d8                	mov    eax,ebx
c0004414:	e8 fa d5 ff ff       	call   c0001a13 <mem_set>
c0004419:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000441d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004425:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004428:	0f 84 23 01 00 00    	je     c0004551 <create_partition+0x202>
c000442e:	89 f0                	mov    eax,esi
c0004430:	89 fa                	mov    edx,edi
c0004432:	05 ff 07 00 00       	add    eax,0x7ff
c0004437:	83 d2 00             	adc    edx,0x0
c000443a:	89 c1                	mov    ecx,eax
c000443c:	89 d7                	mov    edi,edx
c000443e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004444:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004448:	89 ce                	mov    esi,ecx
c000444a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000444e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004452:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004456:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004459:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000445d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004460:	b8 64 00 00 00       	mov    eax,0x64
c0004465:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004468:	b8 00 00 00 00       	mov    eax,0x0
c000446d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004471:	72 41                	jb     c00044b4 <create_partition+0x165>
c0004473:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000447b:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000447f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004484:	01 c1                	add    ecx,eax
c0004486:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000448a:	f7 24 24             	mul    DWORD PTR [esp]
c000448d:	6a 00                	push   0x0
c000448f:	01 ca                	add    edx,ecx
c0004491:	6a 64                	push   0x64
c0004493:	52                   	push   edx
c0004494:	50                   	push   eax
c0004495:	e8 06 b6 01 00       	call   c001faa0 <__udivdi3>
c000449a:	83 c4 10             	add    esp,0x10
c000449d:	05 ff 07 00 00       	add    eax,0x7ff
c00044a2:	83 d2 00             	adc    edx,0x0
c00044a5:	89 c1                	mov    ecx,eax
c00044a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ab:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044b1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044bb:	01 f0                	add    eax,esi
c00044bd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044c1:	11 fa                	adc    edx,edi
c00044c3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044c7:	19 d1                	sbb    ecx,edx
c00044c9:	73 2e                	jae    c00044f9 <create_partition+0x1aa>
c00044cb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044cf:	89 f8                	mov    eax,edi
c00044d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044d8:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044dc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044e4:	73 6b                	jae    c0004551 <create_partition+0x202>
c00044e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044ee:	29 f0                	sub    eax,esi
c00044f0:	19 fa                	sbb    edx,edi
c00044f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044fd:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004500:	74 4f                	je     c0004551 <create_partition+0x202>
c0004502:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004505:	b9 10 00 00 00       	mov    ecx,0x10
c000450a:	ba b0 09 02 c0       	mov    edx,0xc00209b0
c000450f:	e8 ea d4 ff ff       	call   c00019fe <mem_cpy>
c0004514:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004518:	b9 10 00 00 00       	mov    ecx,0x10
c000451d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004521:	e8 2c db ff ff       	call   c0002052 <make_rand>
c0004526:	89 f2                	mov    edx,esi
c0004528:	89 f9                	mov    ecx,edi
c000452a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000452e:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004532:	e8 c1 d4 ff ff       	call   c00019f8 <st_qword>
c0004537:	03 34 24             	add    esi,DWORD PTR [esp]
c000453a:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000453e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004542:	89 f2                	mov    edx,esi
c0004544:	89 f9                	mov    ecx,edi
c0004546:	83 c2 ff             	add    edx,0xffffffff
c0004549:	83 d1 ff             	adc    ecx,0xffffffff
c000454c:	e8 a7 d4 ff ff       	call   c00019f8 <st_qword>
c0004551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004555:	83 e8 80             	sub    eax,0xffffff80
c0004558:	89 c5                	mov    ebp,eax
c000455a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000455e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004564:	75 6b                	jne    c00045d1 <create_partition+0x282>
c0004566:	45                   	inc    ebp
c0004567:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000456b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004570:	e8 39 da ff ff       	call   c0001fae <crc32>
c0004575:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000457b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000457f:	75 e5                	jne    c0004566 <create_partition+0x217>
c0004581:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004585:	31 d2                	xor    edx,edx
c0004587:	83 ec 0c             	sub    esp,0xc
c000458a:	c1 ed 09             	shr    ebp,0x9
c000458d:	6a 01                	push   0x1
c000458f:	8d 45 02             	lea    eax,[ebp+0x2]
c0004592:	52                   	push   edx
c0004593:	50                   	push   eax
c0004594:	53                   	push   ebx
c0004595:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004599:	e8 ac d3 ff ff       	call   c000194a <disk_write>
c000459e:	83 c4 20             	add    esp,0x20
c00045a1:	85 c0                	test   eax,eax
c00045a3:	0f 85 d7 fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045a9:	83 ec 0c             	sub    esp,0xc
c00045ac:	31 d2                	xor    edx,edx
c00045ae:	6a 01                	push   0x1
c00045b0:	89 e8                	mov    eax,ebp
c00045b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045b6:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045ba:	52                   	push   edx
c00045bb:	50                   	push   eax
c00045bc:	53                   	push   ebx
c00045bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045c1:	e8 84 d3 ff ff       	call   c000194a <disk_write>
c00045c6:	83 c4 20             	add    esp,0x20
c00045c9:	85 c0                	test   eax,eax
c00045cb:	0f 85 af fd ff ff    	jne    c0004380 <create_partition+0x31>
c00045d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045d9:	3d 00 40 00 00       	cmp    eax,0x4000
c00045de:	74 0d                	je     c00045ed <create_partition+0x29e>
c00045e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e8:	e9 12 fe ff ff       	jmp    c00043ff <create_partition+0xb0>
c00045ed:	31 d2                	xor    edx,edx
c00045ef:	b9 00 02 00 00       	mov    ecx,0x200
c00045f4:	89 d8                	mov    eax,ebx
c00045f6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00045f9:	e8 15 d4 ff ff       	call   c0001a13 <mem_set>
c00045fe:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004601:	b9 10 00 00 00       	mov    ecx,0x10
c0004606:	ba a0 08 02 c0       	mov    edx,0xc00208a0
c000460b:	89 d8                	mov    eax,ebx
c000460d:	e8 ec d3 ff ff       	call   c00019fe <mem_cpy>
c0004612:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004616:	8d 43 58             	lea    eax,[ebx+0x58]
c0004619:	f7 d2                	not    edx
c000461b:	e8 d5 d3 ff ff       	call   c00019f5 <st_dword>
c0004620:	8d 43 18             	lea    eax,[ebx+0x18]
c0004623:	31 c9                	xor    ecx,ecx
c0004625:	89 04 24             	mov    DWORD PTR [esp],eax
c0004628:	ba 01 00 00 00       	mov    edx,0x1
c000462d:	e8 c6 d3 ff ff       	call   c00019f8 <st_qword>
c0004632:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004636:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000463a:	83 c2 ff             	add    edx,0xffffffff
c000463d:	89 e8                	mov    eax,ebp
c000463f:	83 d1 ff             	adc    ecx,0xffffffff
c0004642:	e8 b1 d3 ff ff       	call   c00019f8 <st_qword>
c0004647:	31 c9                	xor    ecx,ecx
c0004649:	8d 43 28             	lea    eax,[ebx+0x28]
c000464c:	ba 22 00 00 00       	mov    edx,0x22
c0004651:	e8 a2 d3 ff ff       	call   c00019f8 <st_qword>
c0004656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000465a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000465e:	83 c2 de             	add    edx,0xffffffde
c0004661:	8d 43 30             	lea    eax,[ebx+0x30]
c0004664:	83 d1 ff             	adc    ecx,0xffffffff
c0004667:	31 f6                	xor    esi,esi
c0004669:	e8 8a d3 ff ff       	call   c00019f8 <st_qword>
c000466e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004671:	ba 80 00 00 00       	mov    edx,0x80
c0004676:	e8 7a d3 ff ff       	call   c00019f5 <st_dword>
c000467b:	8d 43 50             	lea    eax,[ebx+0x50]
c000467e:	ba 80 00 00 00       	mov    edx,0x80
c0004683:	e8 6d d3 ff ff       	call   c00019f5 <st_dword>
c0004688:	ba 02 00 00 00       	mov    edx,0x2
c000468d:	89 f8                	mov    eax,edi
c000468f:	e8 61 d3 ff ff       	call   c00019f5 <st_dword>
c0004694:	8d 53 38             	lea    edx,[ebx+0x38]
c0004697:	b9 10 00 00 00       	mov    ecx,0x10
c000469c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046a0:	e8 ad d9 ff ff       	call   c0002052 <make_rand>
c00046a5:	83 c8 ff             	or     eax,0xffffffff
c00046a8:	46                   	inc    esi
c00046a9:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046ae:	e8 fb d8 ff ff       	call   c0001fae <crc32>
c00046b3:	83 fe 5c             	cmp    esi,0x5c
c00046b6:	75 f0                	jne    c00046a8 <create_partition+0x359>
c00046b8:	f7 d0                	not    eax
c00046ba:	8d 73 10             	lea    esi,[ebx+0x10]
c00046bd:	89 c2                	mov    edx,eax
c00046bf:	89 f0                	mov    eax,esi
c00046c1:	e8 2f d3 ff ff       	call   c00019f5 <st_dword>
c00046c6:	83 ec 0c             	sub    esp,0xc
c00046c9:	6a 01                	push   0x1
c00046cb:	6a 00                	push   0x0
c00046cd:	6a 01                	push   0x1
c00046cf:	53                   	push   ebx
c00046d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046d4:	e8 71 d2 ff ff       	call   c000194a <disk_write>
c00046d9:	83 c4 20             	add    esp,0x20
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 9c fc ff ff    	jne    c0004380 <create_partition+0x31>
c00046e4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046e8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046ec:	83 c2 ff             	add    edx,0xffffffff
c00046ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046f2:	83 d1 ff             	adc    ecx,0xffffffff
c00046f5:	e8 fe d2 ff ff       	call   c00019f8 <st_qword>
c00046fa:	ba 01 00 00 00       	mov    edx,0x1
c00046ff:	31 c9                	xor    ecx,ecx
c0004701:	89 e8                	mov    eax,ebp
c0004703:	e8 f0 d2 ff ff       	call   c00019f8 <st_qword>
c0004708:	89 f8                	mov    eax,edi
c000470a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000470e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004712:	31 ff                	xor    edi,edi
c0004714:	e8 df d2 ff ff       	call   c00019f8 <st_qword>
c0004719:	89 f0                	mov    eax,esi
c000471b:	31 d2                	xor    edx,edx
c000471d:	e8 d3 d2 ff ff       	call   c00019f5 <st_dword>
c0004722:	83 c8 ff             	or     eax,0xffffffff
c0004725:	47                   	inc    edi
c0004726:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000472b:	e8 7e d8 ff ff       	call   c0001fae <crc32>
c0004730:	83 ff 5c             	cmp    edi,0x5c
c0004733:	75 f0                	jne    c0004725 <create_partition+0x3d6>
c0004735:	f7 d0                	not    eax
c0004737:	89 c2                	mov    edx,eax
c0004739:	89 f0                	mov    eax,esi
c000473b:	e8 b5 d2 ff ff       	call   c00019f5 <st_dword>
c0004740:	83 ec 0c             	sub    esp,0xc
c0004743:	6a 01                	push   0x1
c0004745:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004749:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000474d:	83 c0 ff             	add    eax,0xffffffff
c0004750:	83 d2 ff             	adc    edx,0xffffffff
c0004753:	52                   	push   edx
c0004754:	50                   	push   eax
c0004755:	53                   	push   ebx
c0004756:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000475a:	e8 eb d1 ff ff       	call   c000194a <disk_write>
c000475f:	83 c4 20             	add    esp,0x20
c0004762:	85 c0                	test   eax,eax
c0004764:	0f 85 16 fc ff ff    	jne    c0004380 <create_partition+0x31>
c000476a:	31 d2                	xor    edx,edx
c000476c:	89 d8                	mov    eax,ebx
c000476e:	b9 00 02 00 00       	mov    ecx,0x200
c0004773:	e8 9b d2 ff ff       	call   c0001a13 <mem_set>
c0004778:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000477e:	b9 10 00 00 00       	mov    ecx,0x10
c0004783:	ba b0 08 02 c0       	mov    edx,0xc00208b0
c0004788:	e8 71 d2 ff ff       	call   c00019fe <mem_cpy>
c000478d:	e9 21 01 00 00       	jmp    c00048b3 <create_partition+0x564>
c0004792:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004796:	b9 05 00 00 00       	mov    ecx,0x5
c000479b:	89 04 24             	mov    DWORD PTR [esp],eax
c000479e:	bf 08 00 00 00       	mov    edi,0x8
c00047a3:	89 f8                	mov    eax,edi
c00047a5:	31 d2                	xor    edx,edx
c00047a7:	0f b6 f0             	movzx  esi,al
c00047aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047ad:	f7 f6                	div    esi
c00047af:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047b4:	76 0a                	jbe    c00047c0 <create_partition+0x471>
c00047b6:	d1 e7                	shl    edi,1
c00047b8:	49                   	dec    ecx
c00047b9:	75 e8                	jne    c00047a3 <create_partition+0x454>
c00047bb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047c0:	b9 00 02 00 00       	mov    ecx,0x200
c00047c5:	31 d2                	xor    edx,edx
c00047c7:	89 d8                	mov    eax,ebx
c00047c9:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047cf:	e8 3f d2 ff ff       	call   c0001a13 <mem_set>
c00047d4:	b9 64 00 00 00       	mov    ecx,0x64
c00047d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047dc:	31 d2                	xor    edx,edx
c00047de:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047e6:	f7 f1                	div    ecx
c00047e8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047f1:	89 f8                	mov    eax,edi
c00047f3:	0f b6 c0             	movzx  eax,al
c00047f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00047fa:	e9 80 00 00 00       	jmp    c000487f <create_partition+0x530>
c00047ff:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004802:	29 cf                	sub    edi,ecx
c0004804:	89 ca                	mov    edx,ecx
c0004806:	89 f0                	mov    eax,esi
c0004808:	bd 3f 00 00 00       	mov    ebp,0x3f
c000480d:	e8 e3 d1 ff ff       	call   c00019f5 <st_dword>
c0004812:	8d 46 04             	lea    eax,[esi+0x4]
c0004815:	89 fa                	mov    edx,edi
c0004817:	83 c6 10             	add    esi,0x10
c000481a:	e8 d6 d1 ff ff       	call   c00019f5 <st_dword>
c000481f:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004823:	31 d2                	xor    edx,edx
c0004825:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004828:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000482c:	89 c8                	mov    eax,ecx
c000482e:	01 f9                	add    ecx,edi
c0004830:	f7 f5                	div    ebp
c0004832:	89 d5                	mov    ebp,edx
c0004834:	31 d2                	xor    edx,edx
c0004836:	45                   	inc    ebp
c0004837:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000483b:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000483e:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004841:	89 c2                	mov    edx,eax
c0004843:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004846:	c1 ea 02             	shr    edx,0x2
c0004849:	83 e2 c0             	and    edx,0xffffffc0
c000484c:	09 ea                	or     edx,ebp
c000484e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004853:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004856:	31 d2                	xor    edx,edx
c0004858:	f7 f5                	div    ebp
c000485a:	89 d7                	mov    edi,edx
c000485c:	31 d2                	xor    edx,edx
c000485e:	47                   	inc    edi
c000485f:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004863:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004866:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004869:	89 c5                	mov    ebp,eax
c000486b:	c1 ed 02             	shr    ebp,0x2
c000486e:	83 e5 c0             	and    ebp,0xffffffc0
c0004871:	09 ef                	or     edi,ebp
c0004873:	89 fa                	mov    edx,edi
c0004875:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004878:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000487d:	74 34                	je     c00048b3 <create_partition+0x564>
c000487f:	85 c9                	test   ecx,ecx
c0004881:	74 30                	je     c00048b3 <create_partition+0x564>
c0004883:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004886:	76 2b                	jbe    c00048b3 <create_partition+0x564>
c0004888:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000488c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004890:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004893:	83 ff 64             	cmp    edi,0x64
c0004896:	76 4b                	jbe    c00048e3 <create_partition+0x594>
c0004898:	89 f8                	mov    eax,edi
c000489a:	01 c8                	add    eax,ecx
c000489c:	0f 82 5d ff ff ff    	jb     c00047ff <create_partition+0x4b0>
c00048a2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048a5:	0f 87 54 ff ff ff    	ja     c00047ff <create_partition+0x4b0>
c00048ab:	85 ff                	test   edi,edi
c00048ad:	0f 85 51 ff ff ff    	jne    c0004804 <create_partition+0x4b5>
c00048b3:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048b9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048be:	e8 2e d1 ff ff       	call   c00019f1 <st_word>
c00048c3:	83 ec 0c             	sub    esp,0xc
c00048c6:	6a 01                	push   0x1
c00048c8:	6a 00                	push   0x0
c00048ca:	6a 00                	push   0x0
c00048cc:	53                   	push   ebx
c00048cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048d1:	e8 74 d0 ff ff       	call   c000194a <disk_write>
c00048d6:	83 c4 20             	add    esp,0x20
c00048d9:	85 c0                	test   eax,eax
c00048db:	0f 95 c0             	setne  al
c00048de:	0f b6 c0             	movzx  eax,al
c00048e1:	eb 0e                	jmp    c00048f1 <create_partition+0x5a2>
c00048e3:	74 07                	je     c00048ec <create_partition+0x59d>
c00048e5:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048ea:	eb ac                	jmp    c0004898 <create_partition+0x549>
c00048ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ef:	eb a7                	jmp    c0004898 <create_partition+0x549>
c00048f1:	83 c4 5c             	add    esp,0x5c
c00048f4:	5b                   	pop    ebx
c00048f5:	5e                   	pop    esi
c00048f6:	5f                   	pop    edi
c00048f7:	5d                   	pop    ebp
c00048f8:	c3                   	ret    

c00048f9 <get_fileinfo>:
c00048f9:	55                   	push   ebp
c00048fa:	57                   	push   edi
c00048fb:	56                   	push   esi
c00048fc:	53                   	push   ebx
c00048fd:	83 ec 1c             	sub    esp,0x1c
c0004900:	8b 30                	mov    esi,DWORD PTR [eax]
c0004902:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004906:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000490a:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000490d:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004910:	0f 84 dc 01 00 00    	je     c0004af2 <get_fileinfo+0x1f9>
c0004916:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004919:	75 0f                	jne    c000492a <get_fileinfo+0x31>
c000491b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000491e:	83 c4 1c             	add    esp,0x1c
c0004921:	5b                   	pop    ebx
c0004922:	5e                   	pop    esi
c0004923:	5f                   	pop    edi
c0004924:	5d                   	pop    ebp
c0004925:	e9 58 d5 ff ff       	jmp    c0001e82 <get_xfileinfo>
c000492a:	89 d3                	mov    ebx,edx
c000492c:	89 c6                	mov    esi,eax
c000492e:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004932:	74 6a                	je     c000499e <get_fileinfo+0xa5>
c0004934:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000493c:	31 ed                	xor    ebp,ebp
c000493e:	31 ff                	xor    edi,edi
c0004940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004944:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004948:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000494b:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000494f:	66 85 d2             	test   dx,dx
c0004952:	74 3e                	je     c0004992 <get_fileinfo+0x99>
c0004954:	66 85 ed             	test   bp,bp
c0004957:	75 0c                	jne    c0004965 <get_fileinfo+0x6c>
c0004959:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000495f:	66 3d ff 07          	cmp    ax,0x7ff
c0004963:	76 22                	jbe    c0004987 <get_fileinfo+0x8e>
c0004965:	b9 ff 00 00 00       	mov    ecx,0xff
c000496a:	89 e8                	mov    eax,ebp
c000496c:	29 f9                	sub    ecx,edi
c000496e:	c1 e0 10             	shl    eax,0x10
c0004971:	09 d0                	or     eax,edx
c0004973:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004977:	e8 a3 d1 ff ff       	call   c0001b1f <put_utf>
c000497c:	84 c0                	test   al,al
c000497e:	74 10                	je     c0004990 <get_fileinfo+0x97>
c0004980:	0f b6 c0             	movzx  eax,al
c0004983:	31 d2                	xor    edx,edx
c0004985:	01 c7                	add    edi,eax
c0004987:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000498c:	89 d5                	mov    ebp,edx
c000498e:	eb b0                	jmp    c0004940 <get_fileinfo+0x47>
c0004990:	31 ff                	xor    edi,edi
c0004992:	66 85 ed             	test   bp,bp
c0004995:	74 02                	je     c0004999 <get_fileinfo+0xa0>
c0004997:	31 ff                	xor    edi,edi
c0004999:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000499e:	31 ff                	xor    edi,edi
c00049a0:	31 c9                	xor    ecx,ecx
c00049a2:	83 f9 0a             	cmp    ecx,0xa
c00049a5:	0f 87 ad 00 00 00    	ja     c0004a58 <get_fileinfo+0x15f>
c00049ab:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049ae:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049b1:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049b5:	66 83 fa 20          	cmp    dx,0x20
c00049b9:	0f 84 92 00 00 00    	je     c0004a51 <get_fileinfo+0x158>
c00049bf:	66 83 fa 05          	cmp    dx,0x5
c00049c3:	75 05                	jne    c00049ca <get_fileinfo+0xd1>
c00049c5:	ba e5 00 00 00       	mov    edx,0xe5
c00049ca:	83 ff 0b             	cmp    edi,0xb
c00049cd:	77 0b                	ja     c00049da <get_fileinfo+0xe1>
c00049cf:	83 fd 09             	cmp    ebp,0x9
c00049d2:	75 06                	jne    c00049da <get_fileinfo+0xe1>
c00049d4:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049d9:	47                   	inc    edi
c00049da:	0f b7 c2             	movzx  eax,dx
c00049dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049e1:	e8 6d d0 ff ff       	call   c0001a53 <dbc_1st>
c00049e6:	85 c0                	test   eax,eax
c00049e8:	74 2f                	je     c0004a19 <get_fileinfo+0x120>
c00049ea:	83 fd 08             	cmp    ebp,0x8
c00049ed:	74 2a                	je     c0004a19 <get_fileinfo+0x120>
c00049ef:	83 fd 0b             	cmp    ebp,0xb
c00049f2:	74 25                	je     c0004a19 <get_fileinfo+0x120>
c00049f4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049f7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00049fb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00049ff:	e8 52 d0 ff ff       	call   c0001a56 <dbc_2nd>
c0004a04:	85 c0                	test   eax,eax
c0004a06:	74 11                	je     c0004a19 <get_fileinfo+0x120>
c0004a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a11:	c1 e2 08             	shl    edx,0x8
c0004a14:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a17:	09 c2                	or     edx,eax
c0004a19:	0f b7 d2             	movzx  edx,dx
c0004a1c:	50                   	push   eax
c0004a1d:	50                   	push   eax
c0004a1e:	68 b5 01 00 00       	push   0x1b5
c0004a23:	52                   	push   edx
c0004a24:	e8 87 3a 00 00       	call   c00084b0 <ff_oem2uni>
c0004a29:	83 c4 10             	add    esp,0x10
c0004a2c:	66 85 c0             	test   ax,ax
c0004a2f:	75 04                	jne    c0004a35 <get_fileinfo+0x13c>
c0004a31:	31 ff                	xor    edi,edi
c0004a33:	eb 23                	jmp    c0004a58 <get_fileinfo+0x15f>
c0004a35:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a3a:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a3e:	29 f9                	sub    ecx,edi
c0004a40:	0f b7 c0             	movzx  eax,ax
c0004a43:	e8 d7 d0 ff ff       	call   c0001b1f <put_utf>
c0004a48:	84 c0                	test   al,al
c0004a4a:	74 e5                	je     c0004a31 <get_fileinfo+0x138>
c0004a4c:	0f b6 c0             	movzx  eax,al
c0004a4f:	01 c7                	add    edi,eax
c0004a51:	89 e9                	mov    ecx,ebp
c0004a53:	e9 4a ff ff ff       	jmp    c00049a2 <get_fileinfo+0xa9>
c0004a58:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a5d:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a61:	75 54                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004a63:	85 ff                	test   edi,edi
c0004a65:	75 0b                	jne    c0004a72 <get_fileinfo+0x179>
c0004a67:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a6b:	ba 01 00 00 00       	mov    edx,0x1
c0004a70:	eb 33                	jmp    c0004aa5 <get_fileinfo+0x1ac>
c0004a72:	b1 08                	mov    cl,0x8
c0004a74:	31 d2                	xor    edx,edx
c0004a76:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a7c:	84 c0                	test   al,al
c0004a7e:	74 25                	je     c0004aa5 <get_fileinfo+0x1ac>
c0004a80:	66 83 f8 2e          	cmp    ax,0x2e
c0004a84:	74 16                	je     c0004a9c <get_fileinfo+0x1a3>
c0004a86:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a89:	66 83 ff 19          	cmp    di,0x19
c0004a8d:	77 0f                	ja     c0004a9e <get_fileinfo+0x1a5>
c0004a8f:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004a92:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004a95:	74 07                	je     c0004a9e <get_fileinfo+0x1a5>
c0004a97:	83 c0 20             	add    eax,0x20
c0004a9a:	eb 02                	jmp    c0004a9e <get_fileinfo+0x1a5>
c0004a9c:	b1 10                	mov    cl,0x10
c0004a9e:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004aa2:	42                   	inc    edx
c0004aa3:	eb d1                	jmp    c0004a76 <get_fileinfo+0x17d>
c0004aa5:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004aaa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aad:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ab1:	75 04                	jne    c0004ab7 <get_fileinfo+0x1be>
c0004ab3:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ab7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aba:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004abd:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004ac0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac3:	83 c0 1c             	add    eax,0x1c
c0004ac6:	e8 c1 ce ff ff       	call   c000198c <ld_dword>
c0004acb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ad2:	89 03                	mov    DWORD PTR [ebx],eax
c0004ad4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad7:	83 c0 16             	add    eax,0x16
c0004ada:	e8 a0 ce ff ff       	call   c000197f <ld_word>
c0004adf:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 18             	add    eax,0x18
c0004ae9:	e8 91 ce ff ff       	call   c000197f <ld_word>
c0004aee:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	c3                   	ret    

c0004afa <ld_clust.isra.0>:
c0004afa:	56                   	push   esi
c0004afb:	89 c6                	mov    esi,eax
c0004afd:	53                   	push   ebx
c0004afe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b01:	89 d3                	mov    ebx,edx
c0004b03:	e8 77 ce ff ff       	call   c000197f <ld_word>
c0004b08:	0f b7 c8             	movzx  ecx,ax
c0004b0b:	89 f0                	mov    eax,esi
c0004b0d:	3c 03                	cmp    al,0x3
c0004b0f:	75 0d                	jne    c0004b1e <ld_clust.isra.0+0x24>
c0004b11:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b14:	e8 66 ce ff ff       	call   c000197f <ld_word>
c0004b19:	c1 e0 10             	shl    eax,0x10
c0004b1c:	09 c1                	or     ecx,eax
c0004b1e:	89 c8                	mov    eax,ecx
c0004b20:	5b                   	pop    ebx
c0004b21:	5e                   	pop    esi
c0004b22:	c3                   	ret    

c0004b23 <st_clust.isra.1>:
c0004b23:	56                   	push   esi
c0004b24:	89 c6                	mov    esi,eax
c0004b26:	53                   	push   ebx
c0004b27:	89 d3                	mov    ebx,edx
c0004b29:	0f b7 d1             	movzx  edx,cx
c0004b2c:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b2f:	e8 bd ce ff ff       	call   c00019f1 <st_word>
c0004b34:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b37:	75 0f                	jne    c0004b48 <st_clust.isra.1+0x25>
c0004b39:	c1 e9 10             	shr    ecx,0x10
c0004b3c:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b3f:	89 ca                	mov    edx,ecx
c0004b41:	5b                   	pop    ebx
c0004b42:	5e                   	pop    esi
c0004b43:	e9 a9 ce ff ff       	jmp    c00019f1 <st_word>
c0004b48:	5b                   	pop    ebx
c0004b49:	5e                   	pop    esi
c0004b4a:	c3                   	ret    

c0004b4b <init_alloc_info.isra.2>:
c0004b4b:	56                   	push   esi
c0004b4c:	53                   	push   ebx
c0004b4d:	89 c6                	mov    esi,eax
c0004b4f:	89 d3                	mov    ebx,edx
c0004b51:	51                   	push   ecx
c0004b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b54:	83 c0 34             	add    eax,0x34
c0004b57:	e8 30 ce ff ff       	call   c000198c <ld_dword>
c0004b5c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b61:	83 c0 38             	add    eax,0x38
c0004b64:	e8 3b ce ff ff       	call   c00019a4 <ld_qword>
c0004b69:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b6c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b71:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b74:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b7b:	83 e0 02             	and    eax,0x2
c0004b7e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b81:	5b                   	pop    ebx
c0004b82:	5b                   	pop    ebx
c0004b83:	5e                   	pop    esi
c0004b84:	c3                   	ret    

c0004b85 <follow_path>:
c0004b85:	56                   	push   esi
c0004b86:	53                   	push   ebx
c0004b87:	89 c3                	mov    ebx,eax
c0004b89:	83 ec 14             	sub    esp,0x14
c0004b8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b90:	8b 30                	mov    esi,DWORD PTR [eax]
c0004b92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b96:	8a 10                	mov    dl,BYTE PTR [eax]
c0004b98:	80 fa 5c             	cmp    dl,0x5c
c0004b9b:	75 07                	jne    c0004ba4 <follow_path+0x1f>
c0004b9d:	40                   	inc    eax
c0004b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ba2:	eb ee                	jmp    c0004b92 <follow_path+0xd>
c0004ba4:	80 fa 2f             	cmp    dl,0x2f
c0004ba7:	74 f4                	je     c0004b9d <follow_path+0x18>
c0004ba9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bb7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bba:	77 52                	ja     c0004c0e <follow_path+0x89>
c0004bbc:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bc0:	31 d2                	xor    edx,edx
c0004bc2:	89 d8                	mov    eax,ebx
c0004bc4:	e8 12 e3 ff ff       	call   c0002edb <dir_sdi>
c0004bc9:	eb 7c                	jmp    c0004c47 <follow_path+0xc2>
c0004bcb:	89 d8                	mov    eax,ebx
c0004bcd:	e8 6e f2 ff ff       	call   c0003e40 <dir_find>
c0004bd2:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bd5:	85 c0                	test   eax,eax
c0004bd7:	75 46                	jne    c0004c1f <follow_path+0x9a>
c0004bd9:	80 e2 04             	and    dl,0x4
c0004bdc:	75 69                	jne    c0004c47 <follow_path+0xc2>
c0004bde:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004be2:	74 5e                	je     c0004c42 <follow_path+0xbd>
c0004be4:	8a 06                	mov    al,BYTE PTR [esi]
c0004be6:	3c 04                	cmp    al,0x4
c0004be8:	75 41                	jne    c0004c2b <follow_path+0xa6>
c0004bea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bed:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004bf1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004bf4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004bf7:	30 c0                	xor    al,al
c0004bf9:	09 d0                	or     eax,edx
c0004bfb:	89 da                	mov    edx,ebx
c0004bfd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c00:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c03:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c06:	8d 46 10             	lea    eax,[esi+0x10]
c0004c09:	e8 3d ff ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004c0e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c12:	89 d8                	mov    eax,ebx
c0004c14:	e8 a9 ed ff ff       	call   c00039c2 <create_name>
c0004c19:	85 c0                	test   eax,eax
c0004c1b:	74 ae                	je     c0004bcb <follow_path+0x46>
c0004c1d:	eb 28                	jmp    c0004c47 <follow_path+0xc2>
c0004c1f:	83 f8 04             	cmp    eax,0x4
c0004c22:	75 23                	jne    c0004c47 <follow_path+0xc2>
c0004c24:	80 e2 04             	and    dl,0x4
c0004c27:	74 19                	je     c0004c42 <follow_path+0xbd>
c0004c29:	eb 1c                	jmp    c0004c47 <follow_path+0xc2>
c0004c2b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c2e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c34:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c38:	e8 bd fe ff ff       	call   c0004afa <ld_clust.isra.0>
c0004c3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c40:	eb cc                	jmp    c0004c0e <follow_path+0x89>
c0004c42:	b8 05 00 00 00       	mov    eax,0x5
c0004c47:	83 c4 14             	add    esp,0x14
c0004c4a:	5b                   	pop    ebx
c0004c4b:	5e                   	pop    esi
c0004c4c:	c3                   	ret    

c0004c4d <f_mount>:
c0004c4d:	53                   	push   ebx
c0004c4e:	83 ec 18             	sub    esp,0x18
c0004c51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c55:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c61:	e8 fb d2 ff ff       	call   c0001f61 <get_ldnumber>
c0004c66:	89 c2                	mov    edx,eax
c0004c68:	b8 0b 00 00 00       	mov    eax,0xb
c0004c6d:	85 d2                	test   edx,edx
c0004c6f:	78 39                	js     c0004caa <f_mount+0x5d>
c0004c71:	8b 04 95 40 3f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc0c0]
c0004c78:	85 c0                	test   eax,eax
c0004c7a:	74 03                	je     c0004c7f <f_mount+0x32>
c0004c7c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	74 03                	je     c0004c8a <f_mount+0x3d>
c0004c87:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c8e:	89 04 95 40 3f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc0c0],eax
c0004c95:	31 c0                	xor    eax,eax
c0004c97:	84 db                	test   bl,bl
c0004c99:	74 0f                	je     c0004caa <f_mount+0x5d>
c0004c9b:	31 c9                	xor    ecx,ecx
c0004c9d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ca1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ca5:	e8 65 d7 ff ff       	call   c000240f <mount_volume>
c0004caa:	83 c4 18             	add    esp,0x18
c0004cad:	5b                   	pop    ebx
c0004cae:	c3                   	ret    

c0004caf <f_open>:
c0004caf:	55                   	push   ebp
c0004cb0:	bd 09 00 00 00       	mov    ebp,0x9
c0004cb5:	57                   	push   edi
c0004cb6:	56                   	push   esi
c0004cb7:	53                   	push   ebx
c0004cb8:	83 ec 7c             	sub    esp,0x7c
c0004cbb:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cc2:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cc9:	85 db                	test   ebx,ebx
c0004ccb:	0f 84 10 04 00 00    	je     c00050e1 <f_open+0x432>
c0004cd1:	89 fe                	mov    esi,edi
c0004cd3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cd7:	83 e6 3f             	and    esi,0x3f
c0004cda:	89 f0                	mov    eax,esi
c0004cdc:	0f b6 c8             	movzx  ecx,al
c0004cdf:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ce6:	e8 24 d7 ff ff       	call   c000240f <mount_volume>
c0004ceb:	89 c5                	mov    ebp,eax
c0004ced:	85 c0                	test   eax,eax
c0004cef:	0f 85 e6 03 00 00    	jne    c00050db <f_open+0x42c>
c0004cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004cf9:	bd 11 00 00 00       	mov    ebp,0x11
c0004cfe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d02:	83 ec 0c             	sub    esp,0xc
c0004d05:	68 60 04 00 00       	push   0x460
c0004d0a:	e8 d9 36 00 00       	call   c00083e8 <ff_memalloc>
c0004d0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d1b:	0f 84 c0 03 00 00    	je     c00050e1 <f_open+0x432>
c0004d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d29:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d2f:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d35:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d40:	e8 40 fe ff ff       	call   c0004b85 <follow_path>
c0004d45:	89 c5                	mov    ebp,eax
c0004d47:	85 c0                	test   eax,eax
c0004d49:	75 0c                	jne    c0004d57 <f_open+0xa8>
c0004d4b:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d50:	79 05                	jns    c0004d57 <f_open+0xa8>
c0004d52:	bd 06 00 00 00       	mov    ebp,0x6
c0004d57:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d5d:	0f 84 84 01 00 00    	je     c0004ee7 <f_open+0x238>
c0004d63:	85 ed                	test   ebp,ebp
c0004d65:	74 20                	je     c0004d87 <f_open+0xd8>
c0004d67:	83 fd 04             	cmp    ebp,0x4
c0004d6a:	0f 85 58 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d70:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d74:	83 ce 08             	or     esi,0x8
c0004d77:	e8 8a f2 ff ff       	call   c0004006 <dir_register>
c0004d7c:	89 c5                	mov    ebp,eax
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	74 2f                	je     c0004db1 <f_open+0x102>
c0004d82:	e9 41 03 00 00       	jmp    c00050c8 <f_open+0x419>
c0004d87:	bd 07 00 00 00       	mov    ebp,0x7
c0004d8c:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004d91:	0f 85 31 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004d97:	bd 08 00 00 00       	mov    ebp,0x8
c0004d9c:	f7 c7 04 00 00 00    	test   edi,0x4
c0004da2:	0f 85 20 03 00 00    	jne    c00050c8 <f_open+0x419>
c0004da8:	83 e7 08             	and    edi,0x8
c0004dab:	0f 84 65 01 00 00    	je     c0004f16 <f_open+0x267>
c0004db1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004db5:	8a 02                	mov    al,BYTE PTR [edx]
c0004db7:	3c 04                	cmp    al,0x4
c0004db9:	0f 85 97 00 00 00    	jne    c0004e56 <f_open+0x1a7>
c0004dbf:	8d 42 10             	lea    eax,[edx+0x10]
c0004dc2:	89 13                	mov    DWORD PTR [ebx],edx
c0004dc4:	89 da                	mov    edx,ebx
c0004dc6:	e8 80 fd ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004dcb:	31 d2                	xor    edx,edx
c0004dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd1:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004dd6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dd9:	83 c0 02             	add    eax,0x2
c0004ddc:	e8 32 cc ff ff       	call   c0001a13 <mem_set>
c0004de1:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004de6:	31 d2                	xor    edx,edx
c0004de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004def:	83 c0 26             	add    eax,0x26
c0004df2:	e8 1c cc ff ff       	call   c0001a13 <mem_set>
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004dfe:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e07:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e0a:	83 c0 08             	add    eax,0x8
c0004e0d:	e8 e3 cb ff ff       	call   c00019f5 <st_dword>
c0004e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e21:	e8 b7 ea ff ff       	call   c00038dd <store_xdir>
c0004e26:	89 c5                	mov    ebp,eax
c0004e28:	85 c0                	test   eax,eax
c0004e2a:	0f 85 98 02 00 00    	jne    c00050c8 <f_open+0x419>
c0004e30:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e33:	85 d2                	test   edx,edx
c0004e35:	0f 84 db 00 00 00    	je     c0004f16 <f_open+0x267>
c0004e3b:	31 c9                	xor    ecx,ecx
c0004e3d:	89 d8                	mov    eax,ebx
c0004e3f:	e8 8e e3 ff ff       	call   c00031d2 <remove_chain>
c0004e44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e48:	89 c5                	mov    ebp,eax
c0004e4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e4d:	48                   	dec    eax
c0004e4e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e51:	e9 b8 00 00 00       	jmp    c0004f0e <f_open+0x25f>
c0004e56:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e5a:	89 ea                	mov    edx,ebp
c0004e5c:	e8 99 fc ff ff       	call   c0004afa <ld_clust.isra.0>
c0004e61:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e66:	89 c7                	mov    edi,eax
c0004e68:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e6b:	e8 85 cb ff ff       	call   c00019f5 <st_dword>
c0004e70:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e74:	31 c9                	xor    ecx,ecx
c0004e76:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e82:	e8 9c fc ff ff       	call   c0004b23 <st_clust.isra.1>
c0004e87:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e8b:	31 d2                	xor    edx,edx
c0004e8d:	83 c0 1c             	add    eax,0x1c
c0004e90:	e8 60 cb ff ff       	call   c00019f5 <st_dword>
c0004e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e99:	85 ff                	test   edi,edi
c0004e9b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e9f:	74 75                	je     c0004f16 <f_open+0x267>
c0004ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea5:	31 c9                	xor    ecx,ecx
c0004ea7:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eaa:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004eb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004eb5:	89 fa                	mov    edx,edi
c0004eb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ebb:	e8 12 e3 ff ff       	call   c00031d2 <remove_chain>
c0004ec0:	89 c5                	mov    ebp,eax
c0004ec2:	85 c0                	test   eax,eax
c0004ec4:	0f 85 fe 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004ece:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed6:	4f                   	dec    edi
c0004ed7:	e8 81 d2 ff ff       	call   c000215d <move_window>
c0004edc:	89 c5                	mov    ebp,eax
c0004ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee2:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ee5:	eb 27                	jmp    c0004f0e <f_open+0x25f>
c0004ee7:	85 ed                	test   ebp,ebp
c0004ee9:	0f 85 d9 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004eef:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004ef3:	bd 04 00 00 00       	mov    ebp,0x4
c0004ef8:	a8 10                	test   al,0x10
c0004efa:	0f 85 c8 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f00:	83 e7 02             	and    edi,0x2
c0004f03:	74 11                	je     c0004f16 <f_open+0x267>
c0004f05:	bd 07 00 00 00       	mov    ebp,0x7
c0004f0a:	a8 01                	test   al,0x1
c0004f0c:	eb 02                	jmp    c0004f10 <f_open+0x261>
c0004f0e:	85 ed                	test   ebp,ebp
c0004f10:	0f 85 b2 01 00 00    	jne    c00050c8 <f_open+0x419>
c0004f16:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f1c:	74 03                	je     c0004f21 <f_open+0x272>
c0004f1e:	83 ce 40             	or     esi,0x40
c0004f21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f25:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f28:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f2b:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f2e:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f31:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f35:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f38:	8a 02                	mov    al,BYTE PTR [edx]
c0004f3a:	3c 04                	cmp    al,0x4
c0004f3c:	75 2a                	jne    c0004f68 <f_open+0x2b9>
c0004f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f42:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f4e:	30 c0                	xor    al,al
c0004f50:	09 c8                	or     eax,ecx
c0004f52:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f55:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f59:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f5c:	8d 42 10             	lea    eax,[edx+0x10]
c0004f5f:	89 da                	mov    edx,ebx
c0004f61:	e8 e5 fb ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0004f66:	eb 1c                	jmp    c0004f84 <f_open+0x2d5>
c0004f68:	89 fa                	mov    edx,edi
c0004f6a:	e8 8b fb ff ff       	call   c0004afa <ld_clust.isra.0>
c0004f6f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f72:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f75:	e8 12 ca ff ff       	call   c000198c <ld_dword>
c0004f7a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f81:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f88:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f8f:	89 03                	mov    DWORD PTR [ebx],eax
c0004f91:	31 d2                	xor    edx,edx
c0004f93:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004f97:	b9 00 02 00 00       	mov    ecx,0x200
c0004f9c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004fa0:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fa4:	89 f0                	mov    eax,esi
c0004fa6:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fad:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fb0:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fb7:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fba:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fc1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fcc:	e8 42 ca ff ff       	call   c0001a13 <mem_set>
c0004fd1:	83 e6 20             	and    esi,0x20
c0004fd4:	75 07                	jne    c0004fdd <f_open+0x32e>
c0004fd6:	31 ed                	xor    ebp,ebp
c0004fd8:	e9 eb 00 00 00       	jmp    c00050c8 <f_open+0x419>
c0004fdd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fe0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fef:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0004ff3:	74 e1                	je     c0004fd6 <f_open+0x327>
c0004ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004ff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ffd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005000:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500a:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000500e:	31 ff                	xor    edi,edi
c0005010:	c1 e5 09             	shl    ebp,0x9
c0005013:	89 ee                	mov    esi,ebp
c0005015:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005019:	89 f8                	mov    eax,edi
c000501b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000501f:	73 22                	jae    c0005043 <f_open+0x394>
c0005021:	89 d8                	mov    eax,ebx
c0005023:	e8 bd dc ff ff       	call   c0002ce5 <get_fat>
c0005028:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000502c:	89 c2                	mov    edx,eax
c000502e:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005032:	83 f8 01             	cmp    eax,0x1
c0005035:	76 10                	jbe    c0005047 <f_open+0x398>
c0005037:	83 f8 ff             	cmp    eax,0xffffffff
c000503a:	75 d9                	jne    c0005015 <f_open+0x366>
c000503c:	bd 01 00 00 00       	mov    ebp,0x1
c0005041:	eb 09                	jmp    c000504c <f_open+0x39d>
c0005043:	31 ed                	xor    ebp,ebp
c0005045:	eb 05                	jmp    c000504c <f_open+0x39d>
c0005047:	bd 02 00 00 00       	mov    ebp,0x2
c000504c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000504f:	85 ed                	test   ebp,ebp
c0005051:	75 75                	jne    c00050c8 <f_open+0x419>
c0005053:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005057:	25 ff 01 00 00       	and    eax,0x1ff
c000505c:	0f 84 74 ff ff ff    	je     c0004fd6 <f_open+0x327>
c0005062:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005066:	bd 02 00 00 00       	mov    ebp,0x2
c000506b:	89 c8                	mov    eax,ecx
c000506d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005071:	e8 a2 cb ff ff       	call   c0001c18 <clst2sect>
c0005076:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000507a:	89 d7                	mov    edi,edx
c000507c:	09 c7                	or     edi,eax
c000507e:	74 48                	je     c00050c8 <f_open+0x419>
c0005080:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005084:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005088:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005090:	0f ac fe 09          	shrd   esi,edi,0x9
c0005094:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005098:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000509c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000509f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050a3:	83 ec 0c             	sub    esp,0xc
c00050a6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050a9:	6a 01                	push   0x1
c00050ab:	52                   	push   edx
c00050ac:	50                   	push   eax
c00050ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050b5:	50                   	push   eax
c00050b6:	e8 79 c8 ff ff       	call   c0001934 <disk_read>
c00050bb:	83 c4 20             	add    esp,0x20
c00050be:	85 c0                	test   eax,eax
c00050c0:	0f 95 c0             	setne  al
c00050c3:	0f b6 c0             	movzx  eax,al
c00050c6:	89 c5                	mov    ebp,eax
c00050c8:	83 ec 0c             	sub    esp,0xc
c00050cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050cf:	e8 2c 33 00 00       	call   c0008400 <ff_memfree>
c00050d4:	83 c4 10             	add    esp,0x10
c00050d7:	85 ed                	test   ebp,ebp
c00050d9:	74 06                	je     c00050e1 <f_open+0x432>
c00050db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050e1:	83 c4 7c             	add    esp,0x7c
c00050e4:	89 e8                	mov    eax,ebp
c00050e6:	5b                   	pop    ebx
c00050e7:	5e                   	pop    esi
c00050e8:	5f                   	pop    edi
c00050e9:	5d                   	pop    ebp
c00050ea:	c3                   	ret    

c00050eb <f_read>:
c00050eb:	55                   	push   ebp
c00050ec:	57                   	push   edi
c00050ed:	56                   	push   esi
c00050ee:	53                   	push   ebx
c00050ef:	83 ec 2c             	sub    esp,0x2c
c00050f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00050f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00050fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005100:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005104:	89 d8                	mov    eax,ebx
c0005106:	e8 77 cf ff ff       	call   c0002082 <validate>
c000510b:	89 c5                	mov    ebp,eax
c000510d:	85 c0                	test   eax,eax
c000510f:	0f 85 4c 02 00 00    	jne    c0005361 <f_read+0x276>
c0005115:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005119:	85 ed                	test   ebp,ebp
c000511b:	0f 85 40 02 00 00    	jne    c0005361 <f_read+0x276>
c0005121:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005125:	0f 84 31 02 00 00    	je     c000535c <f_read+0x271>
c000512b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000512e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005131:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005134:	bf 00 00 00 00       	mov    edi,0x0
c0005139:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000513c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005140:	89 d1                	mov    ecx,edx
c0005142:	19 f9                	sbb    ecx,edi
c0005144:	0f 83 cf 00 00 00    	jae    c0005219 <f_read+0x12e>
c000514a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000514e:	e9 c6 00 00 00       	jmp    c0005219 <f_read+0x12e>
c0005153:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005156:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005159:	89 d0                	mov    eax,edx
c000515b:	25 ff 01 00 00       	and    eax,0x1ff
c0005160:	0f 85 c9 01 00 00    	jne    c000532f <f_read+0x244>
c0005166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516a:	89 d6                	mov    esi,edx
c000516c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005170:	89 cf                	mov    edi,ecx
c0005172:	48                   	dec    eax
c0005173:	0f ac fe 09          	shrd   esi,edi,0x9
c0005177:	21 f0                	and    eax,esi
c0005179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000517d:	0f 84 a6 00 00 00    	je     c0005229 <f_read+0x13e>
c0005183:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005187:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000518a:	89 c8                	mov    eax,ecx
c000518c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000518f:	e8 84 ca ff ff       	call   c0001c18 <clst2sect>
c0005194:	89 d7                	mov    edi,edx
c0005196:	09 c7                	or     edi,eax
c0005198:	0f 84 b4 00 00 00    	je     c0005252 <f_read+0x167>
c000519e:	31 ff                	xor    edi,edi
c00051a0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051a4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051a7:	01 c6                	add    esi,eax
c00051a9:	11 d7                	adc    edi,edx
c00051ab:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051b3:	0f 86 fd 00 00 00    	jbe    c00052b6 <f_read+0x1cb>
c00051b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051c1:	c1 e8 09             	shr    eax,0x9
c00051c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00051c7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051cb:	03 14 24             	add    edx,DWORD PTR [esp]
c00051ce:	39 c2                	cmp    edx,eax
c00051d0:	76 07                	jbe    c00051d9 <f_read+0xee>
c00051d2:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d9:	83 ec 0c             	sub    esp,0xc
c00051dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051e0:	57                   	push   edi
c00051e1:	56                   	push   esi
c00051e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051e6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051ea:	50                   	push   eax
c00051eb:	e8 44 c7 ff ff       	call   c0001934 <disk_read>
c00051f0:	83 c4 20             	add    esp,0x20
c00051f3:	85 c0                	test   eax,eax
c00051f5:	75 6e                	jne    c0005265 <f_read+0x17a>
c00051f7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00051fb:	78 7e                	js     c000527b <f_read+0x190>
c00051fd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005200:	c1 e6 09             	shl    esi,0x9
c0005203:	31 ff                	xor    edi,edi
c0005205:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005209:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000520d:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005211:	01 30                	add    DWORD PTR [eax],esi
c0005213:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005216:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005219:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000521e:	0f 85 2f ff ff ff    	jne    c0005153 <f_read+0x68>
c0005224:	e9 38 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005229:	89 c8                	mov    eax,ecx
c000522b:	09 d0                	or     eax,edx
c000522d:	75 05                	jne    c0005234 <f_read+0x149>
c000522f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005232:	eb 19                	jmp    c000524d <f_read+0x162>
c0005234:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005238:	74 09                	je     c0005243 <f_read+0x158>
c000523a:	89 d8                	mov    eax,ebx
c000523c:	e8 f8 c9 ff ff       	call   c0001c39 <clmt_clust>
c0005241:	eb 0a                	jmp    c000524d <f_read+0x162>
c0005243:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005246:	89 d8                	mov    eax,ebx
c0005248:	e8 98 da ff ff       	call   c0002ce5 <get_fat>
c000524d:	83 f8 01             	cmp    eax,0x1
c0005250:	77 0e                	ja     c0005260 <f_read+0x175>
c0005252:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005256:	bd 02 00 00 00       	mov    ebp,0x2
c000525b:	e9 01 01 00 00       	jmp    c0005361 <f_read+0x276>
c0005260:	83 f8 ff             	cmp    eax,0xffffffff
c0005263:	75 0e                	jne    c0005273 <f_read+0x188>
c0005265:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005269:	bd 01 00 00 00       	mov    ebp,0x1
c000526e:	e9 ee 00 00 00       	jmp    c0005361 <f_read+0x276>
c0005273:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005276:	e9 08 ff ff ff       	jmp    c0005183 <f_read+0x98>
c000527b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000527e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005281:	29 f0                	sub    eax,esi
c0005283:	19 fa                	sbb    edx,edi
c0005285:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005288:	89 d7                	mov    edi,edx
c000528a:	ba 00 00 00 00       	mov    edx,0x0
c000528f:	89 f9                	mov    ecx,edi
c0005291:	19 d1                	sbb    ecx,edx
c0005293:	0f 83 64 ff ff ff    	jae    c00051fd <f_read+0x112>
c0005299:	89 c7                	mov    edi,eax
c000529b:	8d 53 50             	lea    edx,[ebx+0x50]
c000529e:	c1 e7 09             	shl    edi,0x9
c00052a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052a5:	b9 00 02 00 00       	mov    ecx,0x200
c00052aa:	01 f8                	add    eax,edi
c00052ac:	e8 4d c7 ff ff       	call   c00019fe <mem_cpy>
c00052b1:	e9 47 ff ff ff       	jmp    c00051fd <f_read+0x112>
c00052b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00052bf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052c3:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052c7:	75 05                	jne    c00052ce <f_read+0x1e3>
c00052c9:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052cc:	74 5b                	je     c0005329 <f_read+0x23e>
c00052ce:	8d 43 50             	lea    eax,[ebx+0x50]
c00052d1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052d9:	79 2a                	jns    c0005305 <f_read+0x21a>
c00052db:	83 ec 0c             	sub    esp,0xc
c00052de:	6a 01                	push   0x1
c00052e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052f0:	50                   	push   eax
c00052f1:	e8 54 c6 ff ff       	call   c000194a <disk_write>
c00052f6:	83 c4 20             	add    esp,0x20
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 64 ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005301:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	6a 01                	push   0x1
c000530a:	57                   	push   edi
c000530b:	56                   	push   esi
c000530c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005310:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005314:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005318:	50                   	push   eax
c0005319:	e8 16 c6 ff ff       	call   c0001934 <disk_read>
c000531e:	83 c4 20             	add    esp,0x20
c0005321:	85 c0                	test   eax,eax
c0005323:	0f 85 3c ff ff ff    	jne    c0005265 <f_read+0x17a>
c0005329:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000532c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000532f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005332:	ba 00 02 00 00       	mov    edx,0x200
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005340:	29 c2                	sub    edx,eax
c0005342:	39 d6                	cmp    esi,edx
c0005344:	76 02                	jbe    c0005348 <f_read+0x25d>
c0005346:	89 d6                	mov    esi,edx
c0005348:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000534c:	89 f1                	mov    ecx,esi
c000534e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005352:	e8 a7 c6 ff ff       	call   c00019fe <mem_cpy>
c0005357:	e9 a7 fe ff ff       	jmp    c0005203 <f_read+0x118>
c000535c:	bd 07 00 00 00       	mov    ebp,0x7
c0005361:	83 c4 2c             	add    esp,0x2c
c0005364:	89 e8                	mov    eax,ebp
c0005366:	5b                   	pop    ebx
c0005367:	5e                   	pop    esi
c0005368:	5f                   	pop    edi
c0005369:	5d                   	pop    ebp
c000536a:	c3                   	ret    

c000536b <f_write>:
c000536b:	55                   	push   ebp
c000536c:	57                   	push   edi
c000536d:	56                   	push   esi
c000536e:	53                   	push   ebx
c000536f:	83 ec 2c             	sub    esp,0x2c
c0005372:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005376:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000537a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005380:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005384:	89 d8                	mov    eax,ebx
c0005386:	e8 f7 cc ff ff       	call   c0002082 <validate>
c000538b:	89 c5                	mov    ebp,eax
c000538d:	85 c0                	test   eax,eax
c000538f:	0f 85 86 02 00 00    	jne    c000561b <f_write+0x2b0>
c0005395:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005399:	85 ed                	test   ebp,ebp
c000539b:	0f 85 7a 02 00 00    	jne    c000561b <f_write+0x2b0>
c00053a1:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053a5:	0f 84 6b 02 00 00    	je     c0005616 <f_write+0x2ab>
c00053ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053af:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053b2:	0f 84 43 01 00 00    	je     c00054fb <f_write+0x190>
c00053b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053bb:	89 c1                	mov    ecx,eax
c00053bd:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053c1:	0f 83 34 01 00 00    	jae    c00054fb <f_write+0x190>
c00053c7:	f7 d0                	not    eax
c00053c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053cd:	e9 29 01 00 00       	jmp    c00054fb <f_write+0x190>
c00053d2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053d5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053d8:	89 d0                	mov    eax,edx
c00053da:	25 ff 01 00 00       	and    eax,0x1ff
c00053df:	0f 85 00 02 00 00    	jne    c00055e5 <f_write+0x27a>
c00053e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e9:	89 d6                	mov    esi,edx
c00053eb:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053ef:	89 cf                	mov    edi,ecx
c00053f1:	48                   	dec    eax
c00053f2:	0f ac fe 09          	shrd   esi,edi,0x9
c00053f6:	21 f0                	and    eax,esi
c00053f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053fc:	0f 84 06 01 00 00    	je     c0005508 <f_write+0x19d>
c0005402:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005406:	0f 88 6e 01 00 00    	js     c000557a <f_write+0x20f>
c000540c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005410:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005413:	89 c8                	mov    eax,ecx
c0005415:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005419:	e8 fa c7 ff ff       	call   c0001c18 <clst2sect>
c000541e:	89 d1                	mov    ecx,edx
c0005420:	09 c1                	or     ecx,eax
c0005422:	0f 84 1c 01 00 00    	je     c0005544 <f_write+0x1d9>
c0005428:	31 ff                	xor    edi,edi
c000542a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000542e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005432:	01 c6                	add    esi,eax
c0005434:	11 d7                	adc    edi,edx
c0005436:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000543e:	0f 86 63 01 00 00    	jbe    c00055a7 <f_write+0x23c>
c0005444:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000544c:	c1 e8 09             	shr    eax,0x9
c000544f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005453:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005457:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000545b:	39 c2                	cmp    edx,eax
c000545d:	76 08                	jbe    c0005467 <f_write+0xfc>
c000545f:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005467:	83 ec 0c             	sub    esp,0xc
c000546a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000546e:	57                   	push   edi
c000546f:	56                   	push   esi
c0005470:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005474:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005478:	50                   	push   eax
c0005479:	e8 cc c4 ff ff       	call   c000194a <disk_write>
c000547e:	83 c4 20             	add    esp,0x20
c0005481:	85 c0                	test   eax,eax
c0005483:	0f 85 ce 00 00 00    	jne    c0005557 <f_write+0x1ec>
c0005489:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000548f:	29 f0                	sub    eax,esi
c0005491:	19 fa                	sbb    edx,edi
c0005493:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005497:	89 d7                	mov    edi,edx
c0005499:	ba 00 00 00 00       	mov    edx,0x0
c000549e:	89 f9                	mov    ecx,edi
c00054a0:	19 d1                	sbb    ecx,edx
c00054a2:	73 1c                	jae    c00054c0 <f_write+0x155>
c00054a4:	89 c7                	mov    edi,eax
c00054a6:	b9 00 02 00 00       	mov    ecx,0x200
c00054ab:	c1 e7 09             	shl    edi,0x9
c00054ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00054b1:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054b5:	89 fa                	mov    edx,edi
c00054b7:	e8 42 c5 ff ff       	call   c00019fe <mem_cpy>
c00054bc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054c0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054c4:	c1 e6 09             	shl    esi,0x9
c00054c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054cb:	31 ff                	xor    edi,edi
c00054cd:	01 30                	add    DWORD PTR [eax],esi
c00054cf:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054d3:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054da:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054e0:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054e3:	89 c1                	mov    ecx,eax
c00054e5:	39 f2                	cmp    edx,esi
c00054e7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054ea:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054ed:	19 f9                	sbb    ecx,edi
c00054ef:	73 04                	jae    c00054f5 <f_write+0x18a>
c00054f1:	89 f2                	mov    edx,esi
c00054f3:	89 f8                	mov    eax,edi
c00054f5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00054f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 cc fe ff ff    	jne    c00053d2 <f_write+0x67>
c0005506:	eb 2e                	jmp    c0005536 <f_write+0x1cb>
c0005508:	89 c8                	mov    eax,ecx
c000550a:	09 d0                	or     eax,edx
c000550c:	75 0b                	jne    c0005519 <f_write+0x1ae>
c000550e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005511:	31 d2                	xor    edx,edx
c0005513:	85 c0                	test   eax,eax
c0005515:	75 28                	jne    c000553f <f_write+0x1d4>
c0005517:	eb 12                	jmp    c000552b <f_write+0x1c0>
c0005519:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551d:	74 09                	je     c0005528 <f_write+0x1bd>
c000551f:	89 d8                	mov    eax,ebx
c0005521:	e8 13 c7 ff ff       	call   c0001c39 <clmt_clust>
c0005526:	eb 0a                	jmp    c0005532 <f_write+0x1c7>
c0005528:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000552b:	89 d8                	mov    eax,ebx
c000552d:	e8 a1 da ff ff       	call   c0002fd3 <create_chain>
c0005532:	85 c0                	test   eax,eax
c0005534:	75 09                	jne    c000553f <f_write+0x1d4>
c0005536:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000553a:	e9 dc 00 00 00       	jmp    c000561b <f_write+0x2b0>
c000553f:	83 f8 01             	cmp    eax,0x1
c0005542:	75 0e                	jne    c0005552 <f_write+0x1e7>
c0005544:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005548:	bd 02 00 00 00       	mov    ebp,0x2
c000554d:	e9 c9 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005552:	83 f8 ff             	cmp    eax,0xffffffff
c0005555:	75 0e                	jne    c0005565 <f_write+0x1fa>
c0005557:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000555b:	bd 01 00 00 00       	mov    ebp,0x1
c0005560:	e9 b6 00 00 00       	jmp    c000561b <f_write+0x2b0>
c0005565:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005568:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000556c:	0f 85 90 fe ff ff    	jne    c0005402 <f_write+0x97>
c0005572:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005575:	e9 88 fe ff ff       	jmp    c0005402 <f_write+0x97>
c000557a:	83 ec 0c             	sub    esp,0xc
c000557d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005580:	6a 01                	push   0x1
c0005582:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005585:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005588:	50                   	push   eax
c0005589:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000558d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005591:	50                   	push   eax
c0005592:	e8 b3 c3 ff ff       	call   c000194a <disk_write>
c0005597:	83 c4 20             	add    esp,0x20
c000559a:	85 c0                	test   eax,eax
c000559c:	75 b9                	jne    c0005557 <f_write+0x1ec>
c000559e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055a2:	e9 65 fe ff ff       	jmp    c000540c <f_write+0xa1>
c00055a7:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055aa:	75 05                	jne    c00055b1 <f_write+0x246>
c00055ac:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055af:	74 2e                	je     c00055df <f_write+0x274>
c00055b1:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b7:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055ba:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055bd:	73 20                	jae    c00055df <f_write+0x274>
c00055bf:	83 ec 0c             	sub    esp,0xc
c00055c2:	8d 43 50             	lea    eax,[ebx+0x50]
c00055c5:	6a 01                	push   0x1
c00055c7:	57                   	push   edi
c00055c8:	56                   	push   esi
c00055c9:	50                   	push   eax
c00055ca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ce:	50                   	push   eax
c00055cf:	e8 60 c3 ff ff       	call   c0001934 <disk_read>
c00055d4:	83 c4 20             	add    esp,0x20
c00055d7:	85 c0                	test   eax,eax
c00055d9:	0f 85 78 ff ff ff    	jne    c0005557 <f_write+0x1ec>
c00055df:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055e2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055e8:	ba 00 02 00 00       	mov    edx,0x200
c00055ed:	25 ff 01 00 00       	and    eax,0x1ff
c00055f2:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055f6:	29 c2                	sub    edx,eax
c00055f8:	39 d6                	cmp    esi,edx
c00055fa:	76 02                	jbe    c00055fe <f_write+0x293>
c00055fc:	89 d6                	mov    esi,edx
c00055fe:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005602:	89 f1                	mov    ecx,esi
c0005604:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005608:	e8 f1 c3 ff ff       	call   c00019fe <mem_cpy>
c000560d:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005611:	e9 b1 fe ff ff       	jmp    c00054c7 <f_write+0x15c>
c0005616:	bd 07 00 00 00       	mov    ebp,0x7
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 e8                	mov    eax,ebp
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_sync>:
c0005625:	56                   	push   esi
c0005626:	53                   	push   ebx
c0005627:	83 ec 64             	sub    esp,0x64
c000562a:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000562e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005632:	89 d8                	mov    eax,ebx
c0005634:	e8 49 ca ff ff       	call   c0002082 <validate>
c0005639:	85 c0                	test   eax,eax
c000563b:	0f 85 ba 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005641:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005644:	f6 c2 40             	test   dl,0x40
c0005647:	0f 84 ae 01 00 00    	je     c00057fb <f_sync+0x1d6>
c000564d:	84 d2                	test   dl,dl
c000564f:	79 33                	jns    c0005684 <f_sync+0x5f>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000565c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565f:	50                   	push   eax
c0005660:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005664:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005668:	50                   	push   eax
c0005669:	e8 dc c2 ff ff       	call   c000194a <disk_write>
c000566e:	83 c4 20             	add    esp,0x20
c0005671:	89 c2                	mov    edx,eax
c0005673:	b8 01 00 00 00       	mov    eax,0x1
c0005678:	85 d2                	test   edx,edx
c000567a:	0f 85 7b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c0005680:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005688:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000568b:	0f 85 11 01 00 00    	jne    c00057a2 <f_sync+0x17d>
c0005691:	89 d8                	mov    eax,ebx
c0005693:	e8 13 d6 ff ff       	call   c0002cab <fill_first_frag>
c0005698:	85 c0                	test   eax,eax
c000569a:	0f 85 5b 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056a0:	83 c9 ff             	or     ecx,0xffffffff
c00056a3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056a6:	89 d8                	mov    eax,ebx
c00056a8:	e8 c9 d5 ff ff       	call   c0002c76 <fill_last_frag>
c00056ad:	85 c0                	test   eax,eax
c00056af:	0f 85 46 01 00 00    	jne    c00057fb <f_sync+0x1d6>
c00056b5:	83 ec 0c             	sub    esp,0xc
c00056b8:	68 60 04 00 00       	push   0x460
c00056bd:	e8 26 2d 00 00       	call   c00083e8 <ff_memalloc>
c00056c2:	83 c4 10             	add    esp,0x10
c00056c5:	89 c6                	mov    esi,eax
c00056c7:	b8 11 00 00 00       	mov    eax,0x11
c00056cc:	85 f6                	test   esi,esi
c00056ce:	0f 84 27 01 00 00    	je     c00057fb <f_sync+0x1d6>
c00056d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056d8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056de:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056e1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056e4:	89 da                	mov    edx,ebx
c00056e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056ea:	e8 af df ff ff       	call   c000369e <load_obj_xdir>
c00056ef:	85 c0                	test   eax,eax
c00056f1:	0f 85 95 00 00 00    	jne    c000578c <f_sync+0x167>
c00056f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056fb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00056fe:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005702:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005705:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005708:	83 ca 01             	or     edx,0x1
c000570b:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000570e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005711:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005714:	83 c0 34             	add    eax,0x34
c0005717:	e8 d9 c2 ff ff       	call   c00019f5 <st_dword>
c000571c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005720:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005723:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005726:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005729:	83 c0 38             	add    eax,0x38
c000572c:	e8 c7 c2 ff ff       	call   c00019f8 <st_qword>
c0005731:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000573e:	83 c0 28             	add    eax,0x28
c0005741:	e8 b2 c2 ff ff       	call   c00019f8 <st_qword>
c0005746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000574a:	ba 00 00 21 50       	mov    edx,0x50210000
c000574f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005752:	83 c0 0c             	add    eax,0xc
c0005755:	e8 9b c2 ff ff       	call   c00019f5 <st_dword>
c000575a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005761:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005765:	31 d2                	xor    edx,edx
c0005767:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000576a:	83 c0 10             	add    eax,0x10
c000576d:	e8 83 c2 ff ff       	call   c00019f5 <st_dword>
c0005772:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005776:	e8 62 e1 ff ff       	call   c00038dd <store_xdir>
c000577b:	85 c0                	test   eax,eax
c000577d:	75 0d                	jne    c000578c <f_sync+0x167>
c000577f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005783:	e8 00 eb ff ff       	call   c0004288 <sync_fs>
c0005788:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000578c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005790:	83 ec 0c             	sub    esp,0xc
c0005793:	56                   	push   esi
c0005794:	e8 67 2c 00 00       	call   c0008400 <ff_memfree>
c0005799:	83 c4 10             	add    esp,0x10
c000579c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057a0:	eb 59                	jmp    c00057fb <f_sync+0x1d6>
c00057a2:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057a5:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057a8:	e8 b0 c9 ff ff       	call   c000215d <move_window>
c00057ad:	85 c0                	test   eax,eax
c00057af:	75 4a                	jne    c00057fb <f_sync+0x1d6>
c00057b1:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057b4:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057b8:	89 f2                	mov    edx,esi
c00057ba:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057bf:	e8 5f f3 ff ff       	call   c0004b23 <st_clust.isra.1>
c00057c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c7:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057ca:	e8 26 c2 ff ff       	call   c00019f5 <st_dword>
c00057cf:	8d 46 16             	lea    eax,[esi+0x16]
c00057d2:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d7:	e8 19 c2 ff ff       	call   c00019f5 <st_dword>
c00057dc:	8d 46 12             	lea    eax,[esi+0x12]
c00057df:	31 d2                	xor    edx,edx
c00057e1:	e8 0b c2 ff ff       	call   c00019f1 <st_word>
c00057e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f2:	e8 91 ea ff ff       	call   c0004288 <sync_fs>
c00057f7:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057fb:	83 c4 64             	add    esp,0x64
c00057fe:	5b                   	pop    ebx
c00057ff:	5e                   	pop    esi
c0005800:	c3                   	ret    

c0005801 <f_close>:
c0005801:	53                   	push   ebx
c0005802:	83 ec 24             	sub    esp,0x24
c0005805:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005809:	53                   	push   ebx
c000580a:	e8 16 fe ff ff       	call   c0005625 <f_sync>
c000580f:	83 c4 10             	add    esp,0x10
c0005812:	85 c0                	test   eax,eax
c0005814:	75 15                	jne    c000582b <f_close+0x2a>
c0005816:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000581a:	89 d8                	mov    eax,ebx
c000581c:	e8 61 c8 ff ff       	call   c0002082 <validate>
c0005821:	85 c0                	test   eax,eax
c0005823:	75 06                	jne    c000582b <f_close+0x2a>
c0005825:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000582b:	83 c4 18             	add    esp,0x18
c000582e:	5b                   	pop    ebx
c000582f:	c3                   	ret    

c0005830 <f_lseek>:
c0005830:	55                   	push   ebp
c0005831:	57                   	push   edi
c0005832:	56                   	push   esi
c0005833:	53                   	push   ebx
c0005834:	83 ec 3c             	sub    esp,0x3c
c0005837:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000583b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000583f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005843:	89 04 24             	mov    DWORD PTR [esp],eax
c0005846:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000584a:	89 d8                	mov    eax,ebx
c000584c:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005850:	e8 2d c8 ff ff       	call   c0002082 <validate>
c0005855:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005859:	85 c0                	test   eax,eax
c000585b:	0f 85 7a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005861:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005865:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005869:	85 c0                	test   eax,eax
c000586b:	0f 85 6a 04 00 00    	jne    c0005cdb <f_lseek+0x4ab>
c0005871:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005875:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005878:	74 0c                	je     c0005886 <f_lseek+0x56>
c000587a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000587d:	85 c0                	test   eax,eax
c000587f:	75 1f                	jne    c00058a0 <f_lseek+0x70>
c0005881:	e9 b5 01 00 00       	jmp    c0005a3b <f_lseek+0x20b>
c0005886:	83 c9 ff             	or     ecx,0xffffffff
c0005889:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000588c:	89 d8                	mov    eax,ebx
c000588e:	e8 e3 d3 ff ff       	call   c0002c76 <fill_last_frag>
c0005893:	85 c0                	test   eax,eax
c0005895:	74 e3                	je     c000587a <f_lseek+0x4a>
c0005897:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000589b:	e9 3b 04 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058a0:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058a5:	0f 85 ac 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058ab:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058af:	0f 85 a2 00 00 00    	jne    c0005957 <f_lseek+0x127>
c00058b5:	8d 78 04             	lea    edi,[eax+0x4]
c00058b8:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00058bd:	be 02 00 00 00       	mov    esi,0x2
c00058c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c6:	85 ed                	test   ebp,ebp
c00058c8:	74 73                	je     c000593d <f_lseek+0x10d>
c00058ca:	89 e9                	mov    ecx,ebp
c00058cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058d3:	ff 04 24             	inc    DWORD PTR [esp]
c00058d6:	89 ca                	mov    edx,ecx
c00058d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	e8 02 d4 ff ff       	call   c0002ce5 <get_fat>
c00058e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058e7:	83 f8 01             	cmp    eax,0x1
c00058ea:	77 11                	ja     c00058fd <f_lseek+0xcd>
c00058ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058f0:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00058f8:	e9 de 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c00058fd:	83 f8 ff             	cmp    eax,0xffffffff
c0005900:	75 11                	jne    c0005913 <f_lseek+0xe3>
c0005902:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005906:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000590e:	e9 c8 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005913:	8d 51 01             	lea    edx,[ecx+0x1]
c0005916:	89 c1                	mov    ecx,eax
c0005918:	39 c2                	cmp    edx,eax
c000591a:	74 b7                	je     c00058d3 <f_lseek+0xa3>
c000591c:	83 c6 02             	add    esi,0x2
c000591f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005923:	72 0b                	jb     c0005930 <f_lseek+0x100>
c0005925:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005928:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000592b:	89 0f                	mov    DWORD PTR [edi],ecx
c000592d:	83 c7 08             	add    edi,0x8
c0005930:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005934:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005937:	76 04                	jbe    c000593d <f_lseek+0x10d>
c0005939:	89 c5                	mov    ebp,eax
c000593b:	eb 8d                	jmp    c00058ca <f_lseek+0x9a>
c000593d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005940:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005944:	89 30                	mov    DWORD PTR [eax],esi
c0005946:	0f 87 87 03 00 00    	ja     c0005cd3 <f_lseek+0x4a3>
c000594c:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005952:	e9 84 03 00 00       	jmp    c0005cdb <f_lseek+0x4ab>
c0005957:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000595a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000595d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005961:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005965:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005969:	39 04 24             	cmp    DWORD PTR [esp],eax
c000596c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005970:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005974:	73 0f                	jae    c0005985 <f_lseek+0x155>
c0005976:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005979:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000597d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005981:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005985:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000598d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005990:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005993:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005997:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000599b:	0f 84 3a 03 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059a1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059a9:	83 c6 ff             	add    esi,0xffffffff
c00059ac:	89 d8                	mov    eax,ebx
c00059ae:	83 d7 ff             	adc    edi,0xffffffff
c00059b1:	89 f2                	mov    edx,esi
c00059b3:	89 f9                	mov    ecx,edi
c00059b5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00059bc:	e8 78 c2 ff ff       	call   c0001c39 <clmt_clust>
c00059c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059c5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059c8:	89 c2                	mov    edx,eax
c00059ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059ce:	89 c8                	mov    eax,ecx
c00059d0:	e8 43 c2 ff ff       	call   c0001c18 <clst2sect>
c00059d5:	89 d7                	mov    edi,edx
c00059d7:	09 c7                	or     edi,eax
c00059d9:	0f 84 0d ff ff ff    	je     c00058ec <f_lseek+0xbc>
c00059df:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059e3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059e9:	0f 84 ec 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c00059ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00059f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059f7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00059fa:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c00059fe:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a02:	4d                   	dec    ebp
c0005a03:	31 ff                	xor    edi,edi
c0005a05:	21 ee                	and    esi,ebp
c0005a07:	01 c6                	add    esi,eax
c0005a09:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a0c:	11 d7                	adc    edi,edx
c0005a0e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a11:	39 fa                	cmp    edx,edi
c0005a13:	75 08                	jne    c0005a1d <f_lseek+0x1ed>
c0005a15:	39 f0                	cmp    eax,esi
c0005a17:	0f 84 be 02 00 00    	je     c0005cdb <f_lseek+0x4ab>
c0005a1d:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a20:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a24:	0f 89 80 02 00 00    	jns    c0005caa <f_lseek+0x47a>
c0005a2a:	83 ec 0c             	sub    esp,0xc
c0005a2d:	6a 01                	push   0x1
c0005a2f:	52                   	push   edx
c0005a30:	50                   	push   eax
c0005a31:	55                   	push   ebp
c0005a32:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a36:	e9 5a 02 00 00       	jmp    c0005c95 <f_lseek+0x465>
c0005a3b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a3f:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a42:	74 16                	je     c0005a5a <f_lseek+0x22a>
c0005a44:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a49:	76 0f                	jbe    c0005a5a <f_lseek+0x22a>
c0005a4b:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a52:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a5a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a5d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a60:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a63:	89 c7                	mov    edi,eax
c0005a65:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a69:	73 0d                	jae    c0005a78 <f_lseek+0x248>
c0005a6b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a6f:	75 07                	jne    c0005a78 <f_lseek+0x248>
c0005a71:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a7b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a7e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a82:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a89:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a90:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005a93:	75 09                	jne    c0005a9e <f_lseek+0x26e>
c0005a95:	31 f6                	xor    esi,esi
c0005a97:	31 ff                	xor    edi,edi
c0005a99:	e9 af 01 00 00       	jmp    c0005c4d <f_lseek+0x41d>
c0005a9e:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005aa2:	89 d7                	mov    edi,edx
c0005aa4:	c1 e1 09             	shl    ecx,0x9
c0005aa7:	09 c7                	or     edi,eax
c0005aa9:	89 cd                	mov    ebp,ecx
c0005aab:	74 6d                	je     c0005b1a <f_lseek+0x2ea>
c0005aad:	83 c0 ff             	add    eax,0xffffffff
c0005ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab4:	83 d2 ff             	adc    edx,0xffffffff
c0005ab7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005aba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005abe:	83 c0 ff             	add    eax,0xffffffff
c0005ac1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ac5:	83 d2 ff             	adc    edx,0xffffffff
c0005ac8:	31 ff                	xor    edi,edi
c0005aca:	57                   	push   edi
c0005acb:	51                   	push   ecx
c0005acc:	52                   	push   edx
c0005acd:	50                   	push   eax
c0005ace:	e8 cd 9f 01 00       	call   c001faa0 <__udivdi3>
c0005ad3:	83 c4 10             	add    esp,0x10
c0005ad6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ada:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ade:	57                   	push   edi
c0005adf:	55                   	push   ebp
c0005ae0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005ae8:	e8 b3 9f 01 00       	call   c001faa0 <__udivdi3>
c0005aed:	83 c4 10             	add    esp,0x10
c0005af0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005af4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005af8:	19 d1                	sbb    ecx,edx
c0005afa:	72 1e                	jb     c0005b1a <f_lseek+0x2ea>
c0005afc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b00:	89 e9                	mov    ecx,ebp
c0005b02:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b05:	f7 d9                	neg    ecx
c0005b07:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b0a:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b0e:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b11:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b14:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b18:	eb 28                	jmp    c0005b42 <f_lseek+0x312>
c0005b1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b1d:	85 c0                	test   eax,eax
c0005b1f:	75 1e                	jne    c0005b3f <f_lseek+0x30f>
c0005b21:	31 d2                	xor    edx,edx
c0005b23:	89 d8                	mov    eax,ebx
c0005b25:	e8 a9 d4 ff ff       	call   c0002fd3 <create_chain>
c0005b2a:	83 f8 01             	cmp    eax,0x1
c0005b2d:	0f 84 b9 fd ff ff    	je     c00058ec <f_lseek+0xbc>
c0005b33:	83 f8 ff             	cmp    eax,0xffffffff
c0005b36:	0f 84 c6 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005b3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b3f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b42:	85 c0                	test   eax,eax
c0005b44:	0f 84 4b ff ff ff    	je     c0005a95 <f_lseek+0x265>
c0005b4a:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b4e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b56:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b5d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b60:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b63:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b67:	0f 83 9d 00 00 00    	jae    c0005c0a <f_lseek+0x3da>
c0005b6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b71:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b75:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b78:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b7c:	01 f2                	add    edx,esi
c0005b7e:	11 f9                	adc    ecx,edi
c0005b80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b88:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b8b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b8e:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005b91:	f6 c1 02             	test   cl,0x2
c0005b94:	74 35                	je     c0005bcb <f_lseek+0x39b>
c0005b96:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005b9a:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005b9d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ba0:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ba4:	73 16                	jae    c0005bbc <f_lseek+0x38c>
c0005ba6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005baa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bae:	88 ca                	mov    dl,cl
c0005bb0:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bb3:	83 ca 40             	or     edx,0x40
c0005bb6:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bb9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bbc:	89 c2                	mov    edx,eax
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 0e d4 ff ff       	call   c0002fd3 <create_chain>
c0005bc5:	85 c0                	test   eax,eax
c0005bc7:	75 0b                	jne    c0005bd4 <f_lseek+0x3a4>
c0005bc9:	eb 30                	jmp    c0005bfb <f_lseek+0x3cb>
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 11 d1 ff ff       	call   c0002ce5 <get_fat>
c0005bd4:	83 f8 ff             	cmp    eax,0xffffffff
c0005bd7:	0f 84 25 fd ff ff    	je     c0005902 <f_lseek+0xd2>
c0005bdd:	83 f8 01             	cmp    eax,0x1
c0005be0:	0f 86 06 fd ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005be6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bea:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bed:	0f 86 f9 fc ff ff    	jbe    c00058ec <f_lseek+0xbc>
c0005bf3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bf6:	e9 5b ff ff ff       	jmp    c0005b56 <f_lseek+0x326>
c0005bfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c02:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c0a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c0d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c11:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c14:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c17:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c20:	0f 84 6f fe ff ff    	je     c0005a95 <f_lseek+0x265>
c0005c26:	89 c2                	mov    edx,eax
c0005c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c2c:	e8 e7 bf ff ff       	call   c0001c18 <clst2sect>
c0005c31:	89 d7                	mov    edi,edx
c0005c33:	09 c7                	or     edi,eax
c0005c35:	0f 84 b1 fc ff ff    	je     c00058ec <f_lseek+0xbc>
c0005c3b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c3f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c42:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c46:	c1 ef 09             	shr    edi,0x9
c0005c49:	01 c6                	add    esi,eax
c0005c4b:	11 d7                	adc    edi,edx
c0005c4d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c50:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c53:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c56:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c59:	19 d1                	sbb    ecx,edx
c0005c5b:	73 0a                	jae    c0005c67 <f_lseek+0x437>
c0005c5d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c60:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c63:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c67:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c6c:	74 6d                	je     c0005cdb <f_lseek+0x4ab>
c0005c6e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c71:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c74:	39 fa                	cmp    edx,edi
c0005c76:	75 04                	jne    c0005c7c <f_lseek+0x44c>
c0005c78:	39 f0                	cmp    eax,esi
c0005c7a:	74 5f                	je     c0005cdb <f_lseek+0x4ab>
c0005c7c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c7f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c83:	79 25                	jns    c0005caa <f_lseek+0x47a>
c0005c85:	83 ec 0c             	sub    esp,0xc
c0005c88:	6a 01                	push   0x1
c0005c8a:	52                   	push   edx
c0005c8b:	50                   	push   eax
c0005c8c:	55                   	push   ebp
c0005c8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c95:	50                   	push   eax
c0005c96:	e8 af bc ff ff       	call   c000194a <disk_write>
c0005c9b:	83 c4 20             	add    esp,0x20
c0005c9e:	85 c0                	test   eax,eax
c0005ca0:	0f 85 5c fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ca6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005caa:	83 ec 0c             	sub    esp,0xc
c0005cad:	6a 01                	push   0x1
c0005caf:	57                   	push   edi
c0005cb0:	56                   	push   esi
c0005cb1:	55                   	push   ebp
c0005cb2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cb6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cba:	50                   	push   eax
c0005cbb:	e8 74 bc ff ff       	call   c0001934 <disk_read>
c0005cc0:	83 c4 20             	add    esp,0x20
c0005cc3:	85 c0                	test   eax,eax
c0005cc5:	0f 85 37 fc ff ff    	jne    c0005902 <f_lseek+0xd2>
c0005ccb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005cd1:	eb 08                	jmp    c0005cdb <f_lseek+0x4ab>
c0005cd3:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cdf:	83 c4 3c             	add    esp,0x3c
c0005ce2:	5b                   	pop    ebx
c0005ce3:	5e                   	pop    esi
c0005ce4:	5f                   	pop    edi
c0005ce5:	5d                   	pop    ebp
c0005ce6:	c3                   	ret    

c0005ce7 <f_opendir>:
c0005ce7:	56                   	push   esi
c0005ce8:	b8 09 00 00 00       	mov    eax,0x9
c0005ced:	53                   	push   ebx
c0005cee:	83 ec 24             	sub    esp,0x24
c0005cf1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005cf5:	85 db                	test   ebx,ebx
c0005cf7:	0f 84 e6 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005cfd:	31 c9                	xor    ecx,ecx
c0005cff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d03:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d07:	e8 03 c7 ff ff       	call   c000240f <mount_volume>
c0005d0c:	85 c0                	test   eax,eax
c0005d0e:	0f 85 c9 00 00 00    	jne    c0005ddd <f_opendir+0xf6>
c0005d14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d18:	83 ec 0c             	sub    esp,0xc
c0005d1b:	89 03                	mov    DWORD PTR [ebx],eax
c0005d1d:	68 60 04 00 00       	push   0x460
c0005d22:	e8 c1 26 00 00       	call   c00083e8 <ff_memalloc>
c0005d27:	83 c4 10             	add    esp,0x10
c0005d2a:	89 c6                	mov    esi,eax
c0005d2c:	b8 11 00 00 00       	mov    eax,0x11
c0005d31:	85 f6                	test   esi,esi
c0005d33:	0f 84 aa 00 00 00    	je     c0005de3 <f_opendir+0xfc>
c0005d39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d3d:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d43:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d49:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d4d:	89 d8                	mov    eax,ebx
c0005d4f:	e8 31 ee ff ff       	call   c0004b85 <follow_path>
c0005d54:	85 c0                	test   eax,eax
c0005d56:	75 61                	jne    c0005db9 <f_opendir+0xd2>
c0005d58:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d5c:	78 46                	js     c0005da4 <f_opendir+0xbd>
c0005d5e:	b8 05 00 00 00       	mov    eax,0x5
c0005d63:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d67:	74 50                	je     c0005db9 <f_opendir+0xd2>
c0005d69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d6d:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d6f:	3c 04                	cmp    al,0x4
c0005d71:	75 26                	jne    c0005d99 <f_opendir+0xb2>
c0005d73:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d76:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d79:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d7c:	30 d2                	xor    dl,dl
c0005d7e:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d82:	09 c2                	or     edx,eax
c0005d84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d87:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d8a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d8d:	89 da                	mov    edx,ebx
c0005d8f:	8d 41 10             	lea    eax,[ecx+0x10]
c0005d92:	e8 b4 ed ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c0005d97:	eb 0b                	jmp    c0005da4 <f_opendir+0xbd>
c0005d99:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005d9c:	e8 59 ed ff ff       	call   c0004afa <ld_clust.isra.0>
c0005da1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005da4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005da8:	31 d2                	xor    edx,edx
c0005daa:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dae:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005db2:	89 d8                	mov    eax,ebx
c0005db4:	e8 22 d1 ff ff       	call   c0002edb <dir_sdi>
c0005db9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dbd:	83 ec 0c             	sub    esp,0xc
c0005dc0:	56                   	push   esi
c0005dc1:	e8 3a 26 00 00       	call   c0008400 <ff_memfree>
c0005dc6:	83 c4 10             	add    esp,0x10
c0005dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dcd:	83 f8 04             	cmp    eax,0x4
c0005dd0:	74 06                	je     c0005dd8 <f_opendir+0xf1>
c0005dd2:	85 c0                	test   eax,eax
c0005dd4:	74 0d                	je     c0005de3 <f_opendir+0xfc>
c0005dd6:	eb 05                	jmp    c0005ddd <f_opendir+0xf6>
c0005dd8:	b8 05 00 00 00       	mov    eax,0x5
c0005ddd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005de3:	83 c4 24             	add    esp,0x24
c0005de6:	5b                   	pop    ebx
c0005de7:	5e                   	pop    esi
c0005de8:	c3                   	ret    

c0005de9 <f_closedir>:
c0005de9:	53                   	push   ebx
c0005dea:	83 ec 18             	sub    esp,0x18
c0005ded:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005df1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 86 c2 ff ff       	call   c0002082 <validate>
c0005dfc:	85 c0                	test   eax,eax
c0005dfe:	75 06                	jne    c0005e06 <f_closedir+0x1d>
c0005e00:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e06:	83 c4 18             	add    esp,0x18
c0005e09:	5b                   	pop    ebx
c0005e0a:	c3                   	ret    

c0005e0b <f_readdir>:
c0005e0b:	57                   	push   edi
c0005e0c:	56                   	push   esi
c0005e0d:	53                   	push   ebx
c0005e0e:	83 ec 20             	sub    esp,0x20
c0005e11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e15:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e19:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e1d:	89 d8                	mov    eax,ebx
c0005e1f:	e8 5e c2 ff ff       	call   c0002082 <validate>
c0005e24:	85 c0                	test   eax,eax
c0005e26:	75 77                	jne    c0005e9f <f_readdir+0x94>
c0005e28:	85 ff                	test   edi,edi
c0005e2a:	75 0b                	jne    c0005e37 <f_readdir+0x2c>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	89 d8                	mov    eax,ebx
c0005e30:	e8 a6 d0 ff ff       	call   c0002edb <dir_sdi>
c0005e35:	eb 68                	jmp    c0005e9f <f_readdir+0x94>
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	68 60 04 00 00       	push   0x460
c0005e3f:	e8 a4 25 00 00       	call   c00083e8 <ff_memalloc>
c0005e44:	83 c4 10             	add    esp,0x10
c0005e47:	89 c6                	mov    esi,eax
c0005e49:	b8 11 00 00 00       	mov    eax,0x11
c0005e4e:	85 f6                	test   esi,esi
c0005e50:	74 4d                	je     c0005e9f <f_readdir+0x94>
c0005e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e56:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e5c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e5f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e62:	31 d2                	xor    edx,edx
c0005e64:	89 d8                	mov    eax,ebx
c0005e66:	e8 80 d8 ff ff       	call   c00036eb <dir_read>
c0005e6b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e70:	75 19                	jne    c0005e8b <f_readdir+0x80>
c0005e72:	89 fa                	mov    edx,edi
c0005e74:	89 d8                	mov    eax,ebx
c0005e76:	e8 7e ea ff ff       	call   c00048f9 <get_fileinfo>
c0005e7b:	31 d2                	xor    edx,edx
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 af d5 ff ff       	call   c0003433 <dir_next>
c0005e84:	83 f8 04             	cmp    eax,0x4
c0005e87:	75 02                	jne    c0005e8b <f_readdir+0x80>
c0005e89:	31 c0                	xor    eax,eax
c0005e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e8f:	83 ec 0c             	sub    esp,0xc
c0005e92:	56                   	push   esi
c0005e93:	e8 68 25 00 00       	call   c0008400 <ff_memfree>
c0005e98:	83 c4 10             	add    esp,0x10
c0005e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e9f:	83 c4 20             	add    esp,0x20
c0005ea2:	5b                   	pop    ebx
c0005ea3:	5e                   	pop    esi
c0005ea4:	5f                   	pop    edi
c0005ea5:	c3                   	ret    

c0005ea6 <f_stat>:
c0005ea6:	57                   	push   edi
c0005ea7:	31 c9                	xor    ecx,ecx
c0005ea9:	56                   	push   esi
c0005eaa:	53                   	push   ebx
c0005eab:	83 ec 50             	sub    esp,0x50
c0005eae:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005eb2:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005eb6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005eba:	e8 50 c5 ff ff       	call   c000240f <mount_volume>
c0005ebf:	89 c3                	mov    ebx,eax
c0005ec1:	85 c0                	test   eax,eax
c0005ec3:	75 67                	jne    c0005f2c <f_stat+0x86>
c0005ec5:	83 ec 0c             	sub    esp,0xc
c0005ec8:	bb 11 00 00 00       	mov    ebx,0x11
c0005ecd:	68 60 04 00 00       	push   0x460
c0005ed2:	e8 11 25 00 00       	call   c00083e8 <ff_memalloc>
c0005ed7:	83 c4 10             	add    esp,0x10
c0005eda:	89 c6                	mov    esi,eax
c0005edc:	85 c0                	test   eax,eax
c0005ede:	74 4c                	je     c0005f2c <f_stat+0x86>
c0005ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ee4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eea:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005eed:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005ef4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ef8:	e8 88 ec ff ff       	call   c0004b85 <follow_path>
c0005efd:	89 c3                	mov    ebx,eax
c0005eff:	85 c0                	test   eax,eax
c0005f01:	75 1d                	jne    c0005f20 <f_stat+0x7a>
c0005f03:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f08:	78 11                	js     c0005f1b <f_stat+0x75>
c0005f0a:	85 ff                	test   edi,edi
c0005f0c:	74 12                	je     c0005f20 <f_stat+0x7a>
c0005f0e:	89 fa                	mov    edx,edi
c0005f10:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f14:	e8 e0 e9 ff ff       	call   c00048f9 <get_fileinfo>
c0005f19:	eb 05                	jmp    c0005f20 <f_stat+0x7a>
c0005f1b:	bb 06 00 00 00       	mov    ebx,0x6
c0005f20:	83 ec 0c             	sub    esp,0xc
c0005f23:	56                   	push   esi
c0005f24:	e8 d7 24 00 00       	call   c0008400 <ff_memfree>
c0005f29:	83 c4 10             	add    esp,0x10
c0005f2c:	83 c4 50             	add    esp,0x50
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	5b                   	pop    ebx
c0005f32:	5e                   	pop    esi
c0005f33:	5f                   	pop    edi
c0005f34:	c3                   	ret    

c0005f35 <f_getfree>:
c0005f35:	55                   	push   ebp
c0005f36:	31 c9                	xor    ecx,ecx
c0005f38:	57                   	push   edi
c0005f39:	56                   	push   esi
c0005f3a:	53                   	push   ebx
c0005f3b:	83 ec 5c             	sub    esp,0x5c
c0005f3e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f42:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f46:	e8 c4 c4 ff ff       	call   c000240f <mount_volume>
c0005f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f4f:	85 c0                	test   eax,eax
c0005f51:	0f 85 9d 01 00 00    	jne    c00060f4 <f_getfree+0x1bf>
c0005f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f5b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f5f:	89 02                	mov    DWORD PTR [edx],eax
c0005f61:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f67:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f6a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f6e:	39 f2                	cmp    edx,esi
c0005f70:	77 0b                	ja     c0005f7d <f_getfree+0x48>
c0005f72:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f76:	89 10                	mov    DWORD PTR [eax],edx
c0005f78:	e9 77 01 00 00       	jmp    c00060f4 <f_getfree+0x1bf>
c0005f7d:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f7f:	80 fa 01             	cmp    dl,0x1
c0005f82:	75 3a                	jne    c0005fbe <f_getfree+0x89>
c0005f84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f88:	be 02 00 00 00       	mov    esi,0x2
c0005f8d:	31 db                	xor    ebx,ebx
c0005f8f:	89 f2                	mov    edx,esi
c0005f91:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005f95:	e8 4b cd ff ff       	call   c0002ce5 <get_fat>
c0005f9a:	83 f8 ff             	cmp    eax,0xffffffff
c0005f9d:	0f 84 28 01 00 00    	je     c00060cb <f_getfree+0x196>
c0005fa3:	83 f8 01             	cmp    eax,0x1
c0005fa6:	0f 84 29 01 00 00    	je     c00060d5 <f_getfree+0x1a0>
c0005fac:	83 d3 00             	adc    ebx,0x0
c0005faf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb3:	46                   	inc    esi
c0005fb4:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fb7:	77 d6                	ja     c0005f8f <f_getfree+0x5a>
c0005fb9:	e9 25 01 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c0005fbe:	80 fa 04             	cmp    dl,0x4
c0005fc1:	0f 85 88 00 00 00    	jne    c000604f <f_getfree+0x11a>
c0005fc7:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fca:	31 ed                	xor    ebp,ebp
c0005fcc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fcf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fd7:	31 db                	xor    ebx,ebx
c0005fd9:	85 ed                	test   ebp,ebp
c0005fdb:	75 3f                	jne    c000601c <f_getfree+0xe7>
c0005fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fe1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005fe5:	83 c0 01             	add    eax,0x1
c0005fe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005fec:	83 d2 00             	adc    edx,0x0
c0005fef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005ff3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ffb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005fff:	e8 59 c1 ff ff       	call   c000215d <move_window>
c0006004:	85 c0                	test   eax,eax
c0006006:	0f 85 d3 00 00 00    	jne    c00060df <f_getfree+0x1aa>
c000600c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006010:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006014:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006018:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000601c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006020:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006023:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006027:	89 cf                	mov    edi,ecx
c0006029:	85 f6                	test   esi,esi
c000602b:	74 12                	je     c000603f <f_getfree+0x10a>
c000602d:	88 c1                	mov    cl,al
c000602f:	83 e1 01             	and    ecx,0x1
c0006032:	80 f9 01             	cmp    cl,0x1
c0006035:	83 d3 00             	adc    ebx,0x0
c0006038:	d0 e8                	shr    al,1
c000603a:	4e                   	dec    esi
c000603b:	39 fe                	cmp    esi,edi
c000603d:	75 ea                	jne    c0006029 <f_getfree+0xf4>
c000603f:	45                   	inc    ebp
c0006040:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006046:	85 f6                	test   esi,esi
c0006048:	75 8f                	jne    c0005fd9 <f_getfree+0xa4>
c000604a:	e9 94 00 00 00       	jmp    c00060e3 <f_getfree+0x1ae>
c000604f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006052:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006055:	31 f6                	xor    esi,esi
c0006057:	31 db                	xor    ebx,ebx
c0006059:	85 f6                	test   esi,esi
c000605b:	75 1b                	jne    c0006078 <f_getfree+0x143>
c000605d:	89 d7                	mov    edi,edx
c000605f:	89 cd                	mov    ebp,ecx
c0006061:	83 c7 01             	add    edi,0x1
c0006064:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006068:	83 d5 00             	adc    ebp,0x0
c000606b:	e8 ed c0 ff ff       	call   c000215d <move_window>
c0006070:	85 c0                	test   eax,eax
c0006072:	75 6b                	jne    c00060df <f_getfree+0x1aa>
c0006074:	89 fa                	mov    edx,edi
c0006076:	89 e9                	mov    ecx,ebp
c0006078:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006080:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006084:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006087:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000608b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608f:	75 11                	jne    c00060a2 <f_getfree+0x16d>
c0006091:	e8 e9 b8 ff ff       	call   c000197f <ld_word>
c0006096:	66 83 f8 01          	cmp    ax,0x1
c000609a:	83 d3 00             	adc    ebx,0x0
c000609d:	83 c6 02             	add    esi,0x2
c00060a0:	eb 13                	jmp    c00060b5 <f_getfree+0x180>
c00060a2:	e8 e5 b8 ff ff       	call   c000198c <ld_dword>
c00060a7:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060ac:	83 f8 01             	cmp    eax,0x1
c00060af:	83 d3 00             	adc    ebx,0x0
c00060b2:	83 c6 04             	add    esi,0x4
c00060b5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060c3:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060c7:	75 90                	jne    c0006059 <f_getfree+0x124>
c00060c9:	eb 18                	jmp    c00060e3 <f_getfree+0x1ae>
c00060cb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060d3:	eb 0e                	jmp    c00060e3 <f_getfree+0x1ae>
c00060d5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060dd:	eb 04                	jmp    c00060e3 <f_getfree+0x1ae>
c00060df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060e7:	89 18                	mov    DWORD PTR [eax],ebx
c00060e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ed:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060f0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00060f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f8:	83 c4 5c             	add    esp,0x5c
c00060fb:	5b                   	pop    ebx
c00060fc:	5e                   	pop    esi
c00060fd:	5f                   	pop    edi
c00060fe:	5d                   	pop    ebp
c00060ff:	c3                   	ret    

c0006100 <f_truncate>:
c0006100:	56                   	push   esi
c0006101:	53                   	push   ebx
c0006102:	83 ec 14             	sub    esp,0x14
c0006105:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006109:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000610d:	89 d8                	mov    eax,ebx
c000610f:	e8 6e bf ff ff       	call   c0002082 <validate>
c0006114:	89 c6                	mov    esi,eax
c0006116:	85 c0                	test   eax,eax
c0006118:	0f 85 d2 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000611e:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006122:	85 f6                	test   esi,esi
c0006124:	0f 85 c6 00 00 00    	jne    c00061f0 <f_truncate+0xf0>
c000612a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000612e:	0f 84 b7 00 00 00    	je     c00061eb <f_truncate+0xeb>
c0006134:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006137:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000613a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000613d:	89 d1                	mov    ecx,edx
c000613f:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006142:	0f 83 a8 00 00 00    	jae    c00061f0 <f_truncate+0xf0>
c0006148:	09 c2                	or     edx,eax
c000614a:	75 15                	jne    c0006161 <f_truncate+0x61>
c000614c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	89 d8                	mov    eax,ebx
c0006153:	e8 7a d0 ff ff       	call   c00031d2 <remove_chain>
c0006158:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000615f:	eb 35                	jmp    c0006196 <f_truncate+0x96>
c0006161:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006164:	89 d8                	mov    eax,ebx
c0006166:	e8 7a cb ff ff       	call   c0002ce5 <get_fat>
c000616b:	89 c2                	mov    edx,eax
c000616d:	b8 01 00 00 00       	mov    eax,0x1
c0006172:	83 fa ff             	cmp    edx,0xffffffff
c0006175:	74 1f                	je     c0006196 <f_truncate+0x96>
c0006177:	b8 02 00 00 00       	mov    eax,0x2
c000617c:	83 fa 01             	cmp    edx,0x1
c000617f:	74 15                	je     c0006196 <f_truncate+0x96>
c0006181:	31 c0                	xor    eax,eax
c0006183:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006187:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000618a:	76 0a                	jbe    c0006196 <f_truncate+0x96>
c000618c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000618f:	89 d8                	mov    eax,ebx
c0006191:	e8 3c d0 ff ff       	call   c00031d2 <remove_chain>
c0006196:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006199:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000619c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000619f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061a2:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061a5:	83 ca 40             	or     edx,0x40
c00061a8:	85 c0                	test   eax,eax
c00061aa:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061ad:	75 35                	jne    c00061e4 <f_truncate+0xe4>
c00061af:	84 d2                	test   dl,dl
c00061b1:	79 3d                	jns    c00061f0 <f_truncate+0xf0>
c00061b3:	83 ec 0c             	sub    esp,0xc
c00061b6:	8d 43 50             	lea    eax,[ebx+0x50]
c00061b9:	6a 01                	push   0x1
c00061bb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061c1:	50                   	push   eax
c00061c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061ca:	50                   	push   eax
c00061cb:	e8 7a b7 ff ff       	call   c000194a <disk_write>
c00061d0:	83 c4 20             	add    esp,0x20
c00061d3:	85 c0                	test   eax,eax
c00061d5:	75 08                	jne    c00061df <f_truncate+0xdf>
c00061d7:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061db:	31 f6                	xor    esi,esi
c00061dd:	eb 11                	jmp    c00061f0 <f_truncate+0xf0>
c00061df:	b8 01 00 00 00       	mov    eax,0x1
c00061e4:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061e7:	89 c6                	mov    esi,eax
c00061e9:	eb 05                	jmp    c00061f0 <f_truncate+0xf0>
c00061eb:	be 07 00 00 00       	mov    esi,0x7
c00061f0:	89 f0                	mov    eax,esi
c00061f2:	83 c4 14             	add    esp,0x14
c00061f5:	5b                   	pop    ebx
c00061f6:	5e                   	pop    esi
c00061f7:	c3                   	ret    

c00061f8 <f_unlink>:
c00061f8:	56                   	push   esi
c00061f9:	b9 02 00 00 00       	mov    ecx,0x2
c00061fe:	53                   	push   ebx
c00061ff:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006205:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006209:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006210:	e8 fa c1 ff ff       	call   c000240f <mount_volume>
c0006215:	85 c0                	test   eax,eax
c0006217:	0f 85 55 01 00 00    	jne    c0006372 <f_unlink+0x17a>
c000621d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006221:	83 ec 0c             	sub    esp,0xc
c0006224:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006228:	68 60 04 00 00       	push   0x460
c000622d:	e8 b6 21 00 00       	call   c00083e8 <ff_memalloc>
c0006232:	83 c4 10             	add    esp,0x10
c0006235:	89 c3                	mov    ebx,eax
c0006237:	b8 11 00 00 00       	mov    eax,0x11
c000623c:	85 db                	test   ebx,ebx
c000623e:	0f 84 2e 01 00 00    	je     c0006372 <f_unlink+0x17a>
c0006244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006248:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000624e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006251:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006254:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000625b:	8d 44 24 48          	lea    eax,[esp+0x48]
c000625f:	e8 21 e9 ff ff       	call   c0004b85 <follow_path>
c0006264:	85 c0                	test   eax,eax
c0006266:	0f 85 f2 00 00 00    	jne    c000635e <f_unlink+0x166>
c000626c:	b8 06 00 00 00       	mov    eax,0x6
c0006271:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006279:	0f 88 df 00 00 00    	js     c000635e <f_unlink+0x166>
c000627f:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006284:	74 0a                	je     c0006290 <f_unlink+0x98>
c0006286:	b8 07 00 00 00       	mov    eax,0x7
c000628b:	e9 ce 00 00 00       	jmp    c000635e <f_unlink+0x166>
c0006290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006294:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006298:	8a 02                	mov    al,BYTE PTR [edx]
c000629a:	3c 04                	cmp    al,0x4
c000629c:	75 12                	jne    c00062b0 <f_unlink+0xb8>
c000629e:	8d 42 10             	lea    eax,[edx+0x10]
c00062a1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062a5:	e8 a1 e8 ff ff       	call   c0004b4b <init_alloc_info.isra.2>
c00062aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062ae:	eb 0e                	jmp    c00062be <f_unlink+0xc6>
c00062b0:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062b7:	e8 3e e8 ff ff       	call   c0004afa <ld_clust.isra.0>
c00062bc:	89 c6                	mov    esi,eax
c00062be:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062c3:	75 12                	jne    c00062d7 <f_unlink+0xdf>
c00062c5:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062c9:	e8 94 d6 ff ff       	call   c0003962 <dir_remove>
c00062ce:	85 c0                	test   eax,eax
c00062d0:	74 6c                	je     c000633e <f_unlink+0x146>
c00062d2:	e9 87 00 00 00       	jmp    c000635e <f_unlink+0x166>
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062e2:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062e9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062ec:	75 21                	jne    c000630f <f_unlink+0x117>
c00062ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00062f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00062f6:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00062fd:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006304:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006308:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000630f:	31 d2                	xor    edx,edx
c0006311:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006318:	e8 be cb ff ff       	call   c0002edb <dir_sdi>
c000631d:	85 c0                	test   eax,eax
c000631f:	75 3d                	jne    c000635e <f_unlink+0x166>
c0006321:	31 d2                	xor    edx,edx
c0006323:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000632a:	e8 bc d3 ff ff       	call   c00036eb <dir_read>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 84 4f ff ff ff    	je     c0006286 <f_unlink+0x8e>
c0006337:	83 f8 04             	cmp    eax,0x4
c000633a:	75 22                	jne    c000635e <f_unlink+0x166>
c000633c:	eb 87                	jmp    c00062c5 <f_unlink+0xcd>
c000633e:	85 f6                	test   esi,esi
c0006340:	75 0b                	jne    c000634d <f_unlink+0x155>
c0006342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006346:	e8 3d df ff ff       	call   c0004288 <sync_fs>
c000634b:	eb 11                	jmp    c000635e <f_unlink+0x166>
c000634d:	31 c9                	xor    ecx,ecx
c000634f:	89 f2                	mov    edx,esi
c0006351:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006355:	e8 78 ce ff ff       	call   c00031d2 <remove_chain>
c000635a:	85 c0                	test   eax,eax
c000635c:	74 e4                	je     c0006342 <f_unlink+0x14a>
c000635e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006362:	83 ec 0c             	sub    esp,0xc
c0006365:	53                   	push   ebx
c0006366:	e8 95 20 00 00       	call   c0008400 <ff_memfree>
c000636b:	83 c4 10             	add    esp,0x10
c000636e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006372:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006378:	5b                   	pop    ebx
c0006379:	5e                   	pop    esi
c000637a:	c3                   	ret    

c000637b <f_mkdir>:
c000637b:	57                   	push   edi
c000637c:	b9 02 00 00 00       	mov    ecx,0x2
c0006381:	56                   	push   esi
c0006382:	53                   	push   ebx
c0006383:	83 c4 80             	add    esp,0xffffff80
c0006386:	8d 54 24 08          	lea    edx,[esp+0x8]
c000638a:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006391:	e8 79 c0 ff ff       	call   c000240f <mount_volume>
c0006396:	89 c3                	mov    ebx,eax
c0006398:	85 c0                	test   eax,eax
c000639a:	0f 85 fe 01 00 00    	jne    c000659e <f_mkdir+0x223>
c00063a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063a4:	bb 11 00 00 00       	mov    ebx,0x11
c00063a9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063ad:	83 ec 0c             	sub    esp,0xc
c00063b0:	68 60 04 00 00       	push   0x460
c00063b5:	e8 2e 20 00 00       	call   c00083e8 <ff_memalloc>
c00063ba:	83 c4 10             	add    esp,0x10
c00063bd:	89 c7                	mov    edi,eax
c00063bf:	85 c0                	test   eax,eax
c00063c1:	0f 84 d7 01 00 00    	je     c000659e <f_mkdir+0x223>
c00063c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063cb:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063d1:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063de:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063e2:	e8 9e e7 ff ff       	call   c0004b85 <follow_path>
c00063e7:	89 c3                	mov    ebx,eax
c00063e9:	85 c0                	test   eax,eax
c00063eb:	74 3e                	je     c000642b <f_mkdir+0xb0>
c00063ed:	83 f8 04             	cmp    eax,0x4
c00063f0:	75 3e                	jne    c0006430 <f_mkdir+0xb5>
c00063f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063f6:	31 d2                	xor    edx,edx
c00063f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006400:	e8 ce cb ff ff       	call   c0002fd3 <create_chain>
c0006405:	89 c6                	mov    esi,eax
c0006407:	85 c0                	test   eax,eax
c0006409:	74 0c                	je     c0006417 <f_mkdir+0x9c>
c000640b:	bb 02 00 00 00       	mov    ebx,0x2
c0006410:	83 f8 01             	cmp    eax,0x1
c0006413:	74 07                	je     c000641c <f_mkdir+0xa1>
c0006415:	eb 2a                	jmp    c0006441 <f_mkdir+0xc6>
c0006417:	bb 07 00 00 00       	mov    ebx,0x7
c000641c:	31 c9                	xor    ecx,ecx
c000641e:	89 f2                	mov    edx,esi
c0006420:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006424:	e8 a9 cd ff ff       	call   c00031d2 <remove_chain>
c0006429:	eb 05                	jmp    c0006430 <f_mkdir+0xb5>
c000642b:	bb 08 00 00 00       	mov    ebx,0x8
c0006430:	83 ec 0c             	sub    esp,0xc
c0006433:	57                   	push   edi
c0006434:	e8 c7 1f 00 00       	call   c0008400 <ff_memfree>
c0006439:	83 c4 10             	add    esp,0x10
c000643c:	e9 5d 01 00 00       	jmp    c000659e <f_mkdir+0x223>
c0006441:	bb 01 00 00 00       	mov    ebx,0x1
c0006446:	83 f8 ff             	cmp    eax,0xffffffff
c0006449:	74 d1                	je     c000641c <f_mkdir+0xa1>
c000644b:	89 f2                	mov    edx,esi
c000644d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006451:	e8 c4 ce ff ff       	call   c000331a <dir_clear>
c0006456:	89 c3                	mov    ebx,eax
c0006458:	85 c0                	test   eax,eax
c000645a:	75 c0                	jne    c000641c <f_mkdir+0xa1>
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006463:	74 69                	je     c00064ce <f_mkdir+0x153>
c0006465:	b9 0b 00 00 00       	mov    ecx,0xb
c000646a:	83 c0 54             	add    eax,0x54
c000646d:	ba 20 00 00 00       	mov    edx,0x20
c0006472:	e8 9c b5 ff ff       	call   c0001a13 <mem_set>
c0006477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006480:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006484:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006488:	83 c0 6a             	add    eax,0x6a
c000648b:	e8 65 b5 ff ff       	call   c00019f5 <st_dword>
c0006490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006494:	89 f1                	mov    ecx,esi
c0006496:	8d 50 54             	lea    edx,[eax+0x54]
c0006499:	e8 85 e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c000649e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a2:	b9 20 00 00 00       	mov    ecx,0x20
c00064a7:	8d 50 54             	lea    edx,[eax+0x54]
c00064aa:	83 c0 74             	add    eax,0x74
c00064ad:	e8 4c b5 ff ff       	call   c00019fe <mem_cpy>
c00064b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064ba:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064be:	8d 50 74             	lea    edx,[eax+0x74]
c00064c1:	e8 5d e6 ff ff       	call   c0004b23 <st_clust.isra.1>
c00064c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ca:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064ce:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064d2:	e8 2f db ff ff       	call   c0004006 <dir_register>
c00064d7:	89 c3                	mov    ebx,eax
c00064d9:	85 c0                	test   eax,eax
c00064db:	0f 85 3b ff ff ff    	jne    c000641c <f_mkdir+0xa1>
c00064e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e8:	75 74                	jne    c000655e <f_mkdir+0x1e3>
c00064ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064ed:	ba 00 00 21 50       	mov    edx,0x50210000
c00064f2:	83 c0 0c             	add    eax,0xc
c00064f5:	e8 fb b4 ff ff       	call   c00019f5 <st_dword>
c00064fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fe:	89 f2                	mov    edx,esi
c0006500:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006503:	83 c0 34             	add    eax,0x34
c0006506:	e8 ea b4 ff ff       	call   c00019f5 <st_dword>
c000650b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006513:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006516:	c1 e2 09             	shl    edx,0x9
c0006519:	83 c0 38             	add    eax,0x38
c000651c:	e8 d4 b4 ff ff       	call   c00019f5 <st_dword>
c0006521:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006525:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006529:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000652c:	c1 e2 09             	shl    edx,0x9
c000652f:	83 c0 28             	add    eax,0x28
c0006532:	e8 be b4 ff ff       	call   c00019f5 <st_dword>
c0006537:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000653e:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006542:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006545:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006549:	8d 44 24 34          	lea    eax,[esp+0x34]
c000654d:	e8 8b d3 ff ff       	call   c00038dd <store_xdir>
c0006552:	89 c3                	mov    ebx,eax
c0006554:	85 c0                	test   eax,eax
c0006556:	0f 85 d4 fe ff ff    	jne    c0006430 <f_mkdir+0xb5>
c000655c:	eb 30                	jmp    c000658e <f_mkdir+0x213>
c000655e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006562:	ba 00 00 21 50       	mov    edx,0x50210000
c0006567:	83 c0 16             	add    eax,0x16
c000656a:	e8 86 b4 ff ff       	call   c00019f5 <st_dword>
c000656f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006573:	89 f1                	mov    ecx,esi
c0006575:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006579:	e8 a5 e5 ff ff       	call   c0004b23 <st_clust.isra.1>
c000657e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006582:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000658e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006592:	e8 f1 dc ff ff       	call   c0004288 <sync_fs>
c0006597:	89 c3                	mov    ebx,eax
c0006599:	e9 92 fe ff ff       	jmp    c0006430 <f_mkdir+0xb5>
c000659e:	83 ec 80             	sub    esp,0xffffff80
c00065a1:	89 d8                	mov    eax,ebx
c00065a3:	5b                   	pop    ebx
c00065a4:	5e                   	pop    esi
c00065a5:	5f                   	pop    edi
c00065a6:	c3                   	ret    

c00065a7 <f_rename>:
c00065a7:	55                   	push   ebp
c00065a8:	57                   	push   edi
c00065a9:	56                   	push   esi
c00065aa:	53                   	push   ebx
c00065ab:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065b1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065b8:	e8 a4 b9 ff ff       	call   c0001f61 <get_ldnumber>
c00065bd:	b9 02 00 00 00       	mov    ecx,0x2
c00065c2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065c6:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065cd:	e8 3d be ff ff       	call   c000240f <mount_volume>
c00065d2:	85 c0                	test   eax,eax
c00065d4:	0f 85 b5 02 00 00    	jne    c000688f <f_rename+0x2e8>
c00065da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065de:	83 ec 0c             	sub    esp,0xc
c00065e1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065e5:	68 60 04 00 00       	push   0x460
c00065ea:	e8 f9 1d 00 00       	call   c00083e8 <ff_memalloc>
c00065ef:	83 c4 10             	add    esp,0x10
c00065f2:	89 c3                	mov    ebx,eax
c00065f4:	b8 11 00 00 00       	mov    eax,0x11
c00065f9:	85 db                	test   ebx,ebx
c00065fb:	0f 84 8e 02 00 00    	je     c000688f <f_rename+0x2e8>
c0006601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006605:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000660b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000660e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006611:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006618:	8d 44 24 58          	lea    eax,[esp+0x58]
c000661c:	e8 64 e5 ff ff       	call   c0004b85 <follow_path>
c0006621:	85 c0                	test   eax,eax
c0006623:	0f 85 52 02 00 00    	jne    c000687b <f_rename+0x2d4>
c0006629:	b8 06 00 00 00       	mov    eax,0x6
c000662e:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006636:	0f 85 3f 02 00 00    	jne    c000687b <f_rename+0x2d4>
c000663c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006640:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006643:	0f 85 05 01 00 00    	jne    c000674e <f_rename+0x1a7>
c0006649:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000664c:	b9 40 00 00 00       	mov    ecx,0x40
c0006651:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006655:	e8 a4 b3 ff ff       	call   c00019fe <mem_cpy>
c000665a:	b9 4c 00 00 00       	mov    ecx,0x4c
c000665f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006663:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000666a:	e8 8f b3 ff ff       	call   c00019fe <mem_cpy>
c000666f:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006676:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000667d:	e8 03 e5 ff ff       	call   c0004b85 <follow_path>
c0006682:	85 c0                	test   eax,eax
c0006684:	75 29                	jne    c00066af <f_rename+0x108>
c0006686:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000668a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006691:	74 0a                	je     c000669d <f_rename+0xf6>
c0006693:	b8 08 00 00 00       	mov    eax,0x8
c0006698:	e9 de 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000669d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066a4:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ab:	75 e6                	jne    c0006693 <f_rename+0xec>
c00066ad:	eb 09                	jmp    c00066b8 <f_rename+0x111>
c00066af:	83 f8 04             	cmp    eax,0x4
c00066b2:	0f 85 c3 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066b8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066bf:	e8 42 d9 ff ff       	call   c0004006 <dir_register>
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 af 01 00 00    	jne    c000687b <f_rename+0x2d4>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066d3:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066d6:	89 c5                	mov    ebp,eax
c00066d8:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066df:	8d 46 24             	lea    eax,[esi+0x24]
c00066e2:	e8 98 b2 ff ff       	call   c000197f <ld_word>
c00066e7:	b9 40 00 00 00       	mov    ecx,0x40
c00066ec:	89 c7                	mov    edi,eax
c00066ee:	8d 54 24 18          	lea    edx,[esp+0x18]
c00066f2:	89 f0                	mov    eax,esi
c00066f4:	e8 05 b3 ff ff       	call   c00019fe <mem_cpy>
c00066f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066fd:	89 e9                	mov    ecx,ebp
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006705:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006710:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006713:	0f b7 d7             	movzx  edx,di
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	83 c0 24             	add    eax,0x24
c000671c:	e8 d0 b2 ff ff       	call   c00019f1 <st_word>
c0006721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006725:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006728:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000672b:	a8 10                	test   al,0x10
c000672d:	75 06                	jne    c0006735 <f_rename+0x18e>
c000672f:	83 c8 20             	or     eax,0x20
c0006732:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006735:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673c:	e8 9c d1 ff ff       	call   c00038dd <store_xdir>
c0006741:	85 c0                	test   eax,eax
c0006743:	0f 84 1c 01 00 00    	je     c0006865 <f_rename+0x2be>
c0006749:	e9 2d 01 00 00       	jmp    c000687b <f_rename+0x2d4>
c000674e:	b9 20 00 00 00       	mov    ecx,0x20
c0006753:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000675a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000675e:	e8 9b b2 ff ff       	call   c00019fe <mem_cpy>
c0006763:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006768:	8d 54 24 58          	lea    edx,[esp+0x58]
c000676c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006773:	e8 86 b2 ff ff       	call   c00019fe <mem_cpy>
c0006778:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000677f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006786:	e8 fa e3 ff ff       	call   c0004b85 <follow_path>
c000678b:	85 c0                	test   eax,eax
c000678d:	75 27                	jne    c00067b6 <f_rename+0x20f>
c000678f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006793:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000679a:	0f 85 f3 fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067a0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067a7:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067ae:	0f 85 df fe ff ff    	jne    c0006693 <f_rename+0xec>
c00067b4:	eb 09                	jmp    c00067bf <f_rename+0x218>
c00067b6:	83 f8 04             	cmp    eax,0x4
c00067b9:	0f 85 bc 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067bf:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c6:	e8 3b d8 ff ff       	call   c0004006 <dir_register>
c00067cb:	85 c0                	test   eax,eax
c00067cd:	0f 85 a8 00 00 00    	jne    c000687b <f_rename+0x2d4>
c00067d3:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067da:	b9 13 00 00 00       	mov    ecx,0x13
c00067df:	8d 46 0d             	lea    eax,[esi+0xd]
c00067e2:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067e6:	e8 13 b2 ff ff       	call   c00019fe <mem_cpy>
c00067eb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067ef:	a8 10                	test   al,0x10
c00067f1:	75 03                	jne    c00067f6 <f_rename+0x24f>
c00067f3:	83 c8 20             	or     eax,0x20
c00067f6:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00067f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067fd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006801:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006805:	74 5e                	je     c0006865 <f_rename+0x2be>
c0006807:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000680e:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006812:	74 51                	je     c0006865 <f_rename+0x2be>
c0006814:	89 f2                	mov    edx,esi
c0006816:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000681a:	8a 07                	mov    al,BYTE PTR [edi]
c000681c:	e8 d9 e2 ff ff       	call   c0004afa <ld_clust.isra.0>
c0006821:	89 c2                	mov    edx,eax
c0006823:	89 f8                	mov    eax,edi
c0006825:	e8 ee b3 ff ff       	call   c0001c18 <clst2sect>
c000682a:	89 c6                	mov    esi,eax
c000682c:	89 d1                	mov    ecx,edx
c000682e:	b8 02 00 00 00       	mov    eax,0x2
c0006833:	09 f2                	or     edx,esi
c0006835:	74 44                	je     c000687b <f_rename+0x2d4>
c0006837:	89 f2                	mov    edx,esi
c0006839:	89 f8                	mov    eax,edi
c000683b:	e8 1d b9 ff ff       	call   c000215d <move_window>
c0006840:	85 c0                	test   eax,eax
c0006842:	75 37                	jne    c000687b <f_rename+0x2d4>
c0006844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006848:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000684c:	75 17                	jne    c0006865 <f_rename+0x2be>
c000684e:	8d 50 74             	lea    edx,[eax+0x74]
c0006851:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006858:	e8 c6 e2 ff ff       	call   c0004b23 <st_clust.isra.1>
c000685d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006861:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006865:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006869:	e8 f4 d0 ff ff       	call   c0003962 <dir_remove>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 09                	jne    c000687b <f_rename+0x2d4>
c0006872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006876:	e8 0d da ff ff       	call   c0004288 <sync_fs>
c000687b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000687f:	83 ec 0c             	sub    esp,0xc
c0006882:	53                   	push   ebx
c0006883:	e8 78 1b 00 00       	call   c0008400 <ff_memfree>
c0006888:	83 c4 10             	add    esp,0x10
c000688b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000688f:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006895:	5b                   	pop    ebx
c0006896:	5e                   	pop    esi
c0006897:	5f                   	pop    edi
c0006898:	5d                   	pop    ebp
c0006899:	c3                   	ret    

c000689a <f_chmod>:
c000689a:	57                   	push   edi
c000689b:	b9 02 00 00 00       	mov    ecx,0x2
c00068a0:	56                   	push   esi
c00068a1:	53                   	push   ebx
c00068a2:	83 ec 60             	sub    esp,0x60
c00068a5:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068a9:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068ad:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068b1:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068b5:	e8 55 bb ff ff       	call   c000240f <mount_volume>
c00068ba:	85 c0                	test   eax,eax
c00068bc:	0f 85 af 00 00 00    	jne    c0006971 <f_chmod+0xd7>
c00068c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068c6:	83 ec 0c             	sub    esp,0xc
c00068c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068cd:	68 60 04 00 00       	push   0x460
c00068d2:	e8 11 1b 00 00       	call   c00083e8 <ff_memalloc>
c00068d7:	83 c4 10             	add    esp,0x10
c00068da:	89 c6                	mov    esi,eax
c00068dc:	b8 11 00 00 00       	mov    eax,0x11
c00068e1:	85 f6                	test   esi,esi
c00068e3:	0f 84 88 00 00 00    	je     c0006971 <f_chmod+0xd7>
c00068e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068ed:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00068f3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00068f6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00068fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006901:	e8 7f e2 ff ff       	call   c0004b85 <follow_path>
c0006906:	85 c0                	test   eax,eax
c0006908:	75 53                	jne    c000695d <f_chmod+0xc3>
c000690a:	b8 06 00 00 00       	mov    eax,0x6
c000690f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006914:	75 47                	jne    c000695d <f_chmod+0xc3>
c0006916:	89 f9                	mov    ecx,edi
c0006918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000691c:	83 e1 27             	and    ecx,0x27
c000691f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006922:	75 1d                	jne    c0006941 <f_chmod+0xa7>
c0006924:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006927:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692a:	21 cb                	and    ebx,ecx
c000692c:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000692f:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006932:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006936:	e8 a2 cf ff ff       	call   c00038dd <store_xdir>
c000693b:	85 c0                	test   eax,eax
c000693d:	75 1e                	jne    c000695d <f_chmod+0xc3>
c000693f:	eb 13                	jmp    c0006954 <f_chmod+0xba>
c0006941:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006945:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006948:	21 cb                	and    ebx,ecx
c000694a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000694d:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006950:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	e8 2b d9 ff ff       	call   c0004288 <sync_fs>
c000695d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006961:	83 ec 0c             	sub    esp,0xc
c0006964:	56                   	push   esi
c0006965:	e8 96 1a 00 00       	call   c0008400 <ff_memfree>
c000696a:	83 c4 10             	add    esp,0x10
c000696d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006971:	83 c4 60             	add    esp,0x60
c0006974:	5b                   	pop    ebx
c0006975:	5e                   	pop    esi
c0006976:	5f                   	pop    edi
c0006977:	c3                   	ret    

c0006978 <f_utime>:
c0006978:	56                   	push   esi
c0006979:	b9 02 00 00 00       	mov    ecx,0x2
c000697e:	53                   	push   ebx
c000697f:	83 ec 64             	sub    esp,0x64
c0006982:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006986:	8d 54 24 10          	lea    edx,[esp+0x10]
c000698a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000698e:	e8 7c ba ff ff       	call   c000240f <mount_volume>
c0006993:	85 c0                	test   eax,eax
c0006995:	0f 85 b5 00 00 00    	jne    c0006a50 <f_utime+0xd8>
c000699b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699f:	83 ec 0c             	sub    esp,0xc
c00069a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069a6:	68 60 04 00 00       	push   0x460
c00069ab:	e8 38 1a 00 00       	call   c00083e8 <ff_memalloc>
c00069b0:	83 c4 10             	add    esp,0x10
c00069b3:	89 c3                	mov    ebx,eax
c00069b5:	b8 11 00 00 00       	mov    eax,0x11
c00069ba:	85 db                	test   ebx,ebx
c00069bc:	0f 84 8e 00 00 00    	je     c0006a50 <f_utime+0xd8>
c00069c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069c6:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069cc:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069d2:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069da:	e8 a6 e1 ff ff       	call   c0004b85 <follow_path>
c00069df:	85 c0                	test   eax,eax
c00069e1:	75 59                	jne    c0006a3c <f_utime+0xc4>
c00069e3:	b8 06 00 00 00       	mov    eax,0x6
c00069e8:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069ed:	75 4d                	jne    c0006a3c <f_utime+0xc4>
c00069ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f3:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c00069f7:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c00069fb:	c1 e2 10             	shl    edx,0x10
c00069fe:	09 ca                	or     edx,ecx
c0006a00:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a03:	75 1a                	jne    c0006a1f <f_utime+0xa7>
c0006a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a08:	83 c0 0c             	add    eax,0xc
c0006a0b:	e8 e5 af ff ff       	call   c00019f5 <st_dword>
c0006a10:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a14:	e8 c4 ce ff ff       	call   c00038dd <store_xdir>
c0006a19:	85 c0                	test   eax,eax
c0006a1b:	75 1f                	jne    c0006a3c <f_utime+0xc4>
c0006a1d:	eb 14                	jmp    c0006a33 <f_utime+0xbb>
c0006a1f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a23:	83 c0 16             	add    eax,0x16
c0006a26:	e8 ca af ff ff       	call   c00019f5 <st_dword>
c0006a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a2f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a37:	e8 4c d8 ff ff       	call   c0004288 <sync_fs>
c0006a3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a40:	83 ec 0c             	sub    esp,0xc
c0006a43:	53                   	push   ebx
c0006a44:	e8 b7 19 00 00       	call   c0008400 <ff_memfree>
c0006a49:	83 c4 10             	add    esp,0x10
c0006a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a50:	83 c4 64             	add    esp,0x64
c0006a53:	5b                   	pop    ebx
c0006a54:	5e                   	pop    esi
c0006a55:	c3                   	ret    

c0006a56 <f_getlabel>:
c0006a56:	55                   	push   ebp
c0006a57:	31 c9                	xor    ecx,ecx
c0006a59:	57                   	push   edi
c0006a5a:	56                   	push   esi
c0006a5b:	53                   	push   ebx
c0006a5c:	83 ec 6c             	sub    esp,0x6c
c0006a5f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a63:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a6a:	e8 a0 b9 ff ff       	call   c000240f <mount_volume>
c0006a6f:	89 c6                	mov    esi,eax
c0006a71:	85 c0                	test   eax,eax
c0006a73:	0f 85 c1 01 00 00    	jne    c0006c3a <f_getlabel+0x1e4>
c0006a79:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a81:	0f 84 5f 01 00 00    	je     c0006be6 <f_getlabel+0x190>
c0006a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8b:	31 d2                	xor    edx,edx
c0006a8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006a91:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006a99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a9d:	e8 39 c4 ff ff       	call   c0002edb <dir_sdi>
c0006aa2:	85 c0                	test   eax,eax
c0006aa4:	0f 85 2d 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006aaa:	ba 01 00 00 00       	mov    edx,0x1
c0006aaf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ab3:	e8 33 cc ff ff       	call   c00036eb <dir_read>
c0006ab8:	85 c0                	test   eax,eax
c0006aba:	0f 85 17 01 00 00    	jne    c0006bd7 <f_getlabel+0x181>
c0006ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ac7:	74 09                	je     c0006ad2 <f_getlabel+0x7c>
c0006ac9:	31 db                	xor    ebx,ebx
c0006acb:	31 c9                	xor    ecx,ecx
c0006acd:	e9 c8 00 00 00       	jmp    c0006b9a <f_getlabel+0x144>
c0006ad2:	31 ed                	xor    ebp,ebp
c0006ad4:	31 db                	xor    ebx,ebx
c0006ad6:	31 ff                	xor    edi,edi
c0006ad8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006adc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ae0:	39 fa                	cmp    edx,edi
c0006ae2:	76 4b                	jbe    c0006b2f <f_getlabel+0xd9>
c0006ae4:	47                   	inc    edi
c0006ae5:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ae8:	01 d0                	add    eax,edx
c0006aea:	e8 90 ae ff ff       	call   c000197f <ld_word>
c0006aef:	66 85 ed             	test   bp,bp
c0006af2:	75 0d                	jne    c0006b01 <f_getlabel+0xab>
c0006af4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006afa:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006aff:	76 28                	jbe    c0006b29 <f_getlabel+0xd3>
c0006b01:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b08:	89 e9                	mov    ecx,ebp
c0006b0a:	01 da                	add    edx,ebx
c0006b0c:	c1 e1 10             	shl    ecx,0x10
c0006b0f:	0f b7 c0             	movzx  eax,ax
c0006b12:	09 c8                	or     eax,ecx
c0006b14:	b9 04 00 00 00       	mov    ecx,0x4
c0006b19:	e8 01 b0 ff ff       	call   c0001b1f <put_utf>
c0006b1e:	84 c0                	test   al,al
c0006b20:	74 0b                	je     c0006b2d <f_getlabel+0xd7>
c0006b22:	0f b6 c0             	movzx  eax,al
c0006b25:	01 c3                	add    ebx,eax
c0006b27:	31 c0                	xor    eax,eax
c0006b29:	89 c5                	mov    ebp,eax
c0006b2b:	eb ab                	jmp    c0006ad8 <f_getlabel+0x82>
c0006b2d:	31 db                	xor    ebx,ebx
c0006b2f:	66 85 ed             	test   bp,bp
c0006b32:	74 02                	je     c0006b36 <f_getlabel+0xe0>
c0006b34:	31 db                	xor    ebx,ebx
c0006b36:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b3d:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b41:	e9 a0 00 00 00       	jmp    c0006be6 <f_getlabel+0x190>
c0006b46:	83 ff 0b             	cmp    edi,0xb
c0006b49:	74 11                	je     c0006b5c <f_getlabel+0x106>
c0006b4b:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b54:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b57:	c1 e0 08             	shl    eax,0x8
c0006b5a:	09 c2                	or     edx,eax
c0006b5c:	0f b7 d2             	movzx  edx,dx
c0006b5f:	50                   	push   eax
c0006b60:	50                   	push   eax
c0006b61:	68 b5 01 00 00       	push   0x1b5
c0006b66:	52                   	push   edx
c0006b67:	e8 44 19 00 00       	call   c00084b0 <ff_oem2uni>
c0006b6c:	83 c4 10             	add    esp,0x10
c0006b6f:	66 85 c0             	test   ax,ax
c0006b72:	74 46                	je     c0006bba <f_getlabel+0x164>
c0006b74:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b7b:	0f b7 c0             	movzx  eax,ax
c0006b7e:	01 da                	add    edx,ebx
c0006b80:	b9 04 00 00 00       	mov    ecx,0x4
c0006b85:	e8 95 af ff ff       	call   c0001b1f <put_utf>
c0006b8a:	84 c0                	test   al,al
c0006b8c:	74 2c                	je     c0006bba <f_getlabel+0x164>
c0006b8e:	0f b6 c0             	movzx  eax,al
c0006b91:	01 c3                	add    ebx,eax
c0006b93:	83 ff 0b             	cmp    edi,0xb
c0006b96:	74 24                	je     c0006bbc <f_getlabel+0x166>
c0006b98:	89 f9                	mov    ecx,edi
c0006b9a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006b9e:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ba1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ba6:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006baf:	e8 9f ae ff ff       	call   c0001a53 <dbc_1st>
c0006bb4:	85 c0                	test   eax,eax
c0006bb6:	74 a4                	je     c0006b5c <f_getlabel+0x106>
c0006bb8:	eb 8c                	jmp    c0006b46 <f_getlabel+0xf0>
c0006bba:	31 db                	xor    ebx,ebx
c0006bbc:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bc3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bc6:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bcd:	74 17                	je     c0006be6 <f_getlabel+0x190>
c0006bcf:	4b                   	dec    ebx
c0006bd0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006bd3:	74 ee                	je     c0006bc3 <f_getlabel+0x16d>
c0006bd5:	eb 0f                	jmp    c0006be6 <f_getlabel+0x190>
c0006bd7:	83 f8 04             	cmp    eax,0x4
c0006bda:	75 5c                	jne    c0006c38 <f_getlabel+0x1e2>
c0006bdc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006be3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006be6:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bee:	74 4a                	je     c0006c3a <f_getlabel+0x1e4>
c0006bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006bf7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006bfa:	e8 5e b5 ff ff       	call   c000215d <move_window>
c0006bff:	89 c6                	mov    esi,eax
c0006c01:	85 c0                	test   eax,eax
c0006c03:	75 35                	jne    c0006c3a <f_getlabel+0x1e4>
c0006c05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c09:	b8 43 00 00 00       	mov    eax,0x43
c0006c0e:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c10:	80 f9 03             	cmp    cl,0x3
c0006c13:	74 0f                	je     c0006c24 <f_getlabel+0x1ce>
c0006c15:	31 c0                	xor    eax,eax
c0006c17:	80 f9 04             	cmp    cl,0x4
c0006c1a:	0f 94 c0             	sete   al
c0006c1d:	48                   	dec    eax
c0006c1e:	83 e0 c3             	and    eax,0xffffffc3
c0006c21:	83 c0 64             	add    eax,0x64
c0006c24:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c28:	e8 5f ad ff ff       	call   c000198c <ld_dword>
c0006c2d:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c34:	89 07                	mov    DWORD PTR [edi],eax
c0006c36:	eb 02                	jmp    c0006c3a <f_getlabel+0x1e4>
c0006c38:	89 c6                	mov    esi,eax
c0006c3a:	83 c4 6c             	add    esp,0x6c
c0006c3d:	89 f0                	mov    eax,esi
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	5f                   	pop    edi
c0006c42:	5d                   	pop    ebp
c0006c43:	c3                   	ret    

c0006c44 <f_setlabel>:
c0006c44:	56                   	push   esi
c0006c45:	b9 02 00 00 00       	mov    ecx,0x2
c0006c4a:	53                   	push   ebx
c0006c4b:	83 ec 74             	sub    esp,0x74
c0006c4e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c52:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c59:	e8 b1 b7 ff ff       	call   c000240f <mount_volume>
c0006c5e:	89 c6                	mov    esi,eax
c0006c60:	85 c0                	test   eax,eax
c0006c62:	0f 85 41 02 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006c68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c6f:	0f 85 8e 00 00 00    	jne    c0006d03 <f_setlabel+0xbf>
c0006c75:	b9 16 00 00 00       	mov    ecx,0x16
c0006c7a:	31 d2                	xor    edx,edx
c0006c7c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c80:	31 db                	xor    ebx,ebx
c0006c82:	e8 8c ad ff ff       	call   c0001a13 <mem_set>
c0006c87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c8e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006c91:	0f 86 0a 01 00 00    	jbe    c0006da1 <f_setlabel+0x15d>
c0006c97:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c9e:	e8 b6 ad ff ff       	call   c0001a59 <tchar2uni>
c0006ca3:	89 c6                	mov    esi,eax
c0006ca5:	3d ff ff 00 00       	cmp    eax,0xffff
c0006caa:	76 2a                	jbe    c0006cd6 <f_setlabel+0x92>
c0006cac:	83 f8 ff             	cmp    eax,0xffffffff
c0006caf:	74 05                	je     c0006cb6 <f_setlabel+0x72>
c0006cb1:	83 fb 09             	cmp    ebx,0x9
c0006cb4:	76 0a                	jbe    c0006cc0 <f_setlabel+0x7c>
c0006cb6:	be 06 00 00 00       	mov    esi,0x6
c0006cbb:	e9 e9 01 00 00       	jmp    c0006ea9 <f_setlabel+0x265>
c0006cc0:	89 c2                	mov    edx,eax
c0006cc2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cc6:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cc9:	c1 ea 10             	shr    edx,0x10
c0006ccc:	01 c8                	add    eax,ecx
c0006cce:	43                   	inc    ebx
c0006ccf:	e8 1d ad ff ff       	call   c00019f1 <st_word>
c0006cd4:	eb 04                	jmp    c0006cda <f_setlabel+0x96>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	74 dc                	je     c0006cb6 <f_setlabel+0x72>
c0006cda:	89 f2                	mov    edx,esi
c0006cdc:	b8 f7 08 02 c0       	mov    eax,0xc00208f7
c0006ce1:	e8 5b ad ff ff       	call   c0001a41 <chk_chr>
c0006ce6:	85 c0                	test   eax,eax
c0006ce8:	75 cc                	jne    c0006cb6 <f_setlabel+0x72>
c0006cea:	83 fb 0a             	cmp    ebx,0xa
c0006ced:	77 c7                	ja     c0006cb6 <f_setlabel+0x72>
c0006cef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cf2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cf6:	0f b7 d6             	movzx  edx,si
c0006cf9:	01 c8                	add    eax,ecx
c0006cfb:	43                   	inc    ebx
c0006cfc:	e8 f0 ac ff ff       	call   c00019f1 <st_word>
c0006d01:	eb 84                	jmp    c0006c87 <f_setlabel+0x43>
c0006d03:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d08:	ba 20 00 00 00       	mov    edx,0x20
c0006d0d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d11:	31 db                	xor    ebx,ebx
c0006d13:	e8 fb ac ff ff       	call   c0001a13 <mem_set>
c0006d18:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d1f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d22:	76 60                	jbe    c0006d84 <f_setlabel+0x140>
c0006d24:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2b:	e8 29 ad ff ff       	call   c0001a59 <tchar2uni>
c0006d30:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d35:	0f 87 7b ff ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006d3b:	83 ec 0c             	sub    esp,0xc
c0006d3e:	50                   	push   eax
c0006d3f:	e8 e0 17 00 00       	call   c0008524 <ff_wtoupper>
c0006d44:	5a                   	pop    edx
c0006d45:	59                   	pop    ecx
c0006d46:	68 b5 01 00 00       	push   0x1b5
c0006d4b:	50                   	push   eax
c0006d4c:	e8 c7 16 00 00       	call   c0008418 <ff_uni2oem>
c0006d51:	83 c4 10             	add    esp,0x10
c0006d54:	89 c6                	mov    esi,eax
c0006d56:	66 85 c0             	test   ax,ax
c0006d59:	0f 84 57 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d5f:	0f b7 d0             	movzx  edx,ax
c0006d62:	b8 f0 08 02 c0       	mov    eax,0xc00208f0
c0006d67:	e8 d5 ac ff ff       	call   c0001a41 <chk_chr>
c0006d6c:	85 c0                	test   eax,eax
c0006d6e:	0f 85 42 ff ff ff    	jne    c0006cb6 <f_setlabel+0x72>
c0006d74:	66 81 fe ff 00       	cmp    si,0xff
c0006d79:	0f 87 14 01 00 00    	ja     c0006e93 <f_setlabel+0x24f>
c0006d7f:	e9 fa 00 00 00       	jmp    c0006e7e <f_setlabel+0x23a>
c0006d84:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d89:	0f 84 27 ff ff ff    	je     c0006cb6 <f_setlabel+0x72>
c0006d8f:	85 db                	test   ebx,ebx
c0006d91:	74 0e                	je     c0006da1 <f_setlabel+0x15d>
c0006d93:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006d96:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006d9b:	75 04                	jne    c0006da1 <f_setlabel+0x15d>
c0006d9d:	89 c3                	mov    ebx,eax
c0006d9f:	eb ee                	jmp    c0006d8f <f_setlabel+0x14b>
c0006da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006da5:	31 d2                	xor    edx,edx
c0006da7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006db3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006db7:	e8 1f c1 ff ff       	call   c0002edb <dir_sdi>
c0006dbc:	89 c6                	mov    esi,eax
c0006dbe:	85 c0                	test   eax,eax
c0006dc0:	0f 85 e3 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006dc6:	ba 01 00 00 00       	mov    edx,0x1
c0006dcb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dcf:	e8 17 c9 ff ff       	call   c00036eb <dir_read>
c0006dd4:	85 c0                	test   eax,eax
c0006dd6:	75 21                	jne    c0006df9 <f_setlabel+0x1b5>
c0006dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ddc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006de0:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006de3:	74 5d                	je     c0006e42 <f_setlabel+0x1fe>
c0006de5:	85 db                	test   ebx,ebx
c0006de7:	74 0b                	je     c0006df4 <f_setlabel+0x1b0>
c0006de9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006df2:	eb 70                	jmp    c0006e64 <f_setlabel+0x220>
c0006df4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006df7:	eb 70                	jmp    c0006e69 <f_setlabel+0x225>
c0006df9:	83 f8 04             	cmp    eax,0x4
c0006dfc:	75 7c                	jne    c0006e7a <f_setlabel+0x236>
c0006dfe:	85 db                	test   ebx,ebx
c0006e00:	0f 84 a3 00 00 00    	je     c0006ea9 <f_setlabel+0x265>
c0006e06:	ba 01 00 00 00       	mov    edx,0x1
c0006e0b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e0f:	e8 51 ca ff ff       	call   c0003865 <dir_alloc>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	85 c0                	test   eax,eax
c0006e18:	0f 85 8b 00 00 00    	jne    c0006ea9 <f_setlabel+0x265>
c0006e1e:	31 d2                	xor    edx,edx
c0006e20:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e24:	b9 20 00 00 00       	mov    ecx,0x20
c0006e29:	e8 e5 ab ff ff       	call   c0001a13 <mem_set>
c0006e2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e32:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e39:	75 18                	jne    c0006e53 <f_setlabel+0x20f>
c0006e3b:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e3e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e42:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e45:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e4e:	83 c0 02             	add    eax,0x2
c0006e51:	eb 9b                	jmp    c0006dee <f_setlabel+0x1aa>
c0006e53:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e57:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e5c:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	e8 95 ab ff ff       	call   c00019fe <mem_cpy>
c0006e69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e6d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e75:	e8 0e d4 ff ff       	call   c0004288 <sync_fs>
c0006e7a:	89 c6                	mov    esi,eax
c0006e7c:	eb 2b                	jmp    c0006ea9 <f_setlabel+0x265>
c0006e7e:	83 fb 0a             	cmp    ebx,0xa
c0006e81:	0f 87 2f fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e87:	89 f0                	mov    eax,esi
c0006e89:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e8d:	43                   	inc    ebx
c0006e8e:	e9 85 fe ff ff       	jmp    c0006d18 <f_setlabel+0xd4>
c0006e93:	83 fb 09             	cmp    ebx,0x9
c0006e96:	0f 87 1a fe ff ff    	ja     c0006cb6 <f_setlabel+0x72>
c0006e9c:	89 f0                	mov    eax,esi
c0006e9e:	66 c1 e8 08          	shr    ax,0x8
c0006ea2:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006ea6:	43                   	inc    ebx
c0006ea7:	eb de                	jmp    c0006e87 <f_setlabel+0x243>
c0006ea9:	89 f0                	mov    eax,esi
c0006eab:	83 c4 74             	add    esp,0x74
c0006eae:	5b                   	pop    ebx
c0006eaf:	5e                   	pop    esi
c0006eb0:	c3                   	ret    

c0006eb1 <f_expand>:
c0006eb1:	55                   	push   ebp
c0006eb2:	57                   	push   edi
c0006eb3:	56                   	push   esi
c0006eb4:	53                   	push   ebx
c0006eb5:	83 ec 3c             	sub    esp,0x3c
c0006eb8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0006ebc:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0006ec0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006ec4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ec8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006ecc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0006ed4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006ed8:	89 d8                	mov    eax,ebx
c0006eda:	e8 a3 b1 ff ff       	call   c0002082 <validate>
c0006edf:	89 c5                	mov    ebp,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 f4 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ee9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eed:	85 ed                	test   ebp,ebp
c0006eef:	0f 85 e8 01 00 00    	jne    c00070dd <f_expand+0x22c>
c0006ef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ef9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006efd:	75 0a                	jne    c0006f09 <f_expand+0x58>
c0006eff:	bd 07 00 00 00       	mov    ebp,0x7
c0006f04:	e9 d4 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006f09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0006f0c:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c0006f0f:	75 ee                	jne    c0006eff <f_expand+0x4e>
c0006f11:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006f15:	74 e8                	je     c0006eff <f_expand+0x4e>
c0006f17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0006f1b:	8a 0e                	mov    cl,BYTE PTR [esi]
c0006f1d:	80 f9 04             	cmp    cl,0x4
c0006f20:	74 07                	je     c0006f29 <f_expand+0x78>
c0006f22:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006f27:	77 d6                	ja     c0006eff <f_expand+0x4e>
c0006f29:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0006f2d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0006f31:	c1 e0 09             	shl    eax,0x9
c0006f34:	8d 50 ff             	lea    edx,[eax-0x1]
c0006f37:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0006f3b:	0f 95 c2             	setne  dl
c0006f3e:	0f b6 d2             	movzx  edx,dl
c0006f41:	89 d7                	mov    edi,edx
c0006f43:	31 d2                	xor    edx,edx
c0006f45:	52                   	push   edx
c0006f46:	50                   	push   eax
c0006f47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006f4f:	e8 4c 8b 01 00       	call   c001faa0 <__udivdi3>
c0006f54:	83 c4 10             	add    esp,0x10
c0006f57:	01 f8                	add    eax,edi
c0006f59:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0006f5d:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0006f60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006f64:	83 ff 01             	cmp    edi,0x1
c0006f67:	76 05                	jbe    c0006f6e <f_expand+0xbd>
c0006f69:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0006f6c:	77 05                	ja     c0006f73 <f_expand+0xc2>
c0006f6e:	bf 02 00 00 00       	mov    edi,0x2
c0006f73:	80 f9 04             	cmp    cl,0x4
c0006f76:	75 19                	jne    c0006f91 <f_expand+0xe0>
c0006f78:	89 f0                	mov    eax,esi
c0006f7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006f7e:	89 fa                	mov    edx,edi
c0006f80:	e8 f3 b9 ff ff       	call   c0002978 <find_bitmap>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	85 c0                	test   eax,eax
c0006f89:	0f 84 70 ff ff ff    	je     c0006eff <f_expand+0x4e>
c0006f8f:	eb 7f                	jmp    c0007010 <f_expand+0x15f>
c0006f91:	89 fe                	mov    esi,edi
c0006f93:	89 f9                	mov    ecx,edi
c0006f95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006f9d:	89 ca                	mov    edx,ecx
c0006f9f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006fa3:	89 d8                	mov    eax,ebx
c0006fa5:	e8 3b bd ff ff       	call   c0002ce5 <get_fat>
c0006faa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006fb2:	41                   	inc    ecx
c0006fb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006fb7:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0006fba:	77 05                	ja     c0006fc1 <f_expand+0x110>
c0006fbc:	b9 02 00 00 00       	mov    ecx,0x2
c0006fc1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0006fc6:	74 3e                	je     c0007006 <f_expand+0x155>
c0006fc8:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0006fcd:	75 0a                	jne    c0006fd9 <f_expand+0x128>
c0006fcf:	bd 01 00 00 00       	mov    ebp,0x1
c0006fd4:	e9 04 01 00 00       	jmp    c00070dd <f_expand+0x22c>
c0006fd9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0006fde:	75 13                	jne    c0006ff3 <f_expand+0x142>
c0006fe0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006fe4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006fe8:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c0006fec:	75 0f                	jne    c0006ffd <f_expand+0x14c>
c0006fee:	e9 ce 00 00 00       	jmp    c00070c1 <f_expand+0x210>
c0006ff3:	89 ce                	mov    esi,ecx
c0006ff5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0006ffd:	39 f9                	cmp    ecx,edi
c0006fff:	75 9c                	jne    c0006f9d <f_expand+0xec>
c0007001:	e9 f9 fe ff ff       	jmp    c0006eff <f_expand+0x4e>
c0007006:	bd 02 00 00 00       	mov    ebp,0x2
c000700b:	e9 cd 00 00 00       	jmp    c00070dd <f_expand+0x22c>
c0007010:	83 f8 ff             	cmp    eax,0xffffffff
c0007013:	74 ba                	je     c0006fcf <f_expand+0x11e>
c0007015:	8d 7e ff             	lea    edi,[esi-0x1]
c0007018:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000701c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007020:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007025:	74 51                	je     c0007078 <f_expand+0x1c7>
c0007027:	83 ec 0c             	sub    esp,0xc
c000702a:	89 f2                	mov    edx,esi
c000702c:	6a 01                	push   0x1
c000702e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007032:	e8 f4 b9 ff ff       	call   c0002a2b <change_bitmap>
c0007037:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000703b:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000703f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 2e                	je     c0007078 <f_expand+0x1c7>
c000704a:	eb 71                	jmp    c00070bd <f_expand+0x20c>
c000704c:	83 c9 ff             	or     ecx,0xffffffff
c000704f:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007054:	74 03                	je     c0007059 <f_expand+0x1a8>
c0007056:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007059:	89 fa                	mov    edx,edi
c000705b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000705f:	e8 7c ba ff ff       	call   c0002ae0 <put_fat>
c0007064:	85 c0                	test   eax,eax
c0007066:	75 55                	jne    c00070bd <f_expand+0x20c>
c0007068:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000706c:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007070:	47                   	inc    edi
c0007071:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007076:	75 d4                	jne    c000704c <f_expand+0x19b>
c0007078:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000707c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007080:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007085:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007088:	74 53                	je     c00070dd <f_expand+0x22c>
c000708a:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c000708d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007091:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007095:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007099:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000709d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00070a0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00070a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00070a6:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00070a9:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00070ac:	39 ca                	cmp    edx,ecx
c00070ae:	77 2d                	ja     c00070dd <f_expand+0x22c>
c00070b0:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00070b4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00070b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00070bb:	eb 20                	jmp    c00070dd <f_expand+0x22c>
c00070bd:	89 c5                	mov    ebp,eax
c00070bf:	eb 1c                	jmp    c00070dd <f_expand+0x22c>
c00070c1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00070c6:	74 0c                	je     c00070d4 <f_expand+0x223>
c00070c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070cc:	89 f7                	mov    edi,esi
c00070ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00070d2:	eb 9d                	jmp    c0007071 <f_expand+0x1c0>
c00070d4:	8d 46 ff             	lea    eax,[esi-0x1]
c00070d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00070db:	eb 9b                	jmp    c0007078 <f_expand+0x1c7>
c00070dd:	83 c4 3c             	add    esp,0x3c
c00070e0:	89 e8                	mov    eax,ebp
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	5f                   	pop    edi
c00070e5:	5d                   	pop    ebp
c00070e6:	c3                   	ret    

c00070e7 <f_forward>:
c00070e7:	55                   	push   ebp
c00070e8:	57                   	push   edi
c00070e9:	56                   	push   esi
c00070ea:	53                   	push   ebx
c00070eb:	83 ec 2c             	sub    esp,0x2c
c00070ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00070f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070fc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007100:	89 d8                	mov    eax,ebx
c0007102:	e8 7b af ff ff       	call   c0002082 <validate>
c0007107:	89 c5                	mov    ebp,eax
c0007109:	85 c0                	test   eax,eax
c000710b:	0f 85 aa 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c0007111:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007115:	85 ed                	test   ebp,ebp
c0007117:	0f 85 9e 01 00 00    	jne    c00072bb <f_forward+0x1d4>
c000711d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007121:	0f 84 8f 01 00 00    	je     c00072b6 <f_forward+0x1cf>
c0007127:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000712a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000712d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007130:	bf 00 00 00 00       	mov    edi,0x0
c0007135:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007138:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000713c:	89 d1                	mov    ecx,edx
c000713e:	19 f9                	sbb    ecx,edi
c0007140:	0f 83 cf 00 00 00    	jae    c0007215 <f_forward+0x12e>
c0007146:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000714a:	e9 c6 00 00 00       	jmp    c0007215 <f_forward+0x12e>
c000714f:	50                   	push   eax
c0007150:	50                   	push   eax
c0007151:	6a 00                	push   0x0
c0007153:	6a 00                	push   0x0
c0007155:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007159:	83 c4 10             	add    esp,0x10
c000715c:	85 c0                	test   eax,eax
c000715e:	0f 84 57 01 00 00    	je     c00072bb <f_forward+0x1d4>
c0007164:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007167:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000716b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000716e:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007172:	89 d7                	mov    edi,edx
c0007174:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007177:	89 c6                	mov    esi,eax
c0007179:	0f ac fe 09          	shrd   esi,edi,0x9
c000717d:	21 ce                	and    esi,ecx
c000717f:	89 c1                	mov    ecx,eax
c0007181:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007187:	0f 84 98 00 00 00    	je     c0007225 <f_forward+0x13e>
c000718d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007191:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007194:	89 c8                	mov    eax,ecx
c0007196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000719a:	e8 79 aa ff ff       	call   c0001c18 <clst2sect>
c000719f:	89 d7                	mov    edi,edx
c00071a1:	09 c7                	or     edi,eax
c00071a3:	0f 84 9e 00 00 00    	je     c0007247 <f_forward+0x160>
c00071a9:	31 ff                	xor    edi,edi
c00071ab:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00071ae:	01 c6                	add    esi,eax
c00071b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00071b4:	11 d7                	adc    edi,edx
c00071b6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00071b9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00071bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00071c0:	39 fa                	cmp    edx,edi
c00071c2:	0f 85 a2 00 00 00    	jne    c000726a <f_forward+0x183>
c00071c8:	39 f0                	cmp    eax,esi
c00071ca:	0f 85 9a 00 00 00    	jne    c000726a <f_forward+0x183>
c00071d0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d3:	ba 00 02 00 00       	mov    edx,0x200
c00071d8:	25 ff 01 00 00       	and    eax,0x1ff
c00071dd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00071e1:	29 c2                	sub    edx,eax
c00071e3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00071e6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00071e9:	39 d1                	cmp    ecx,edx
c00071eb:	76 02                	jbe    c00071ef <f_forward+0x108>
c00071ed:	89 d1                	mov    ecx,edx
c00071ef:	8d 73 50             	lea    esi,[ebx+0x50]
c00071f2:	52                   	push   edx
c00071f3:	01 c6                	add    esi,eax
c00071f5:	52                   	push   edx
c00071f6:	51                   	push   ecx
c00071f7:	56                   	push   esi
c00071f8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071fc:	83 c4 10             	add    esp,0x10
c00071ff:	85 c0                	test   eax,eax
c0007201:	74 44                	je     c0007247 <f_forward+0x160>
c0007203:	31 ff                	xor    edi,edi
c0007205:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007208:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000720b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000720f:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007213:	01 07                	add    DWORD PTR [edi],eax
c0007215:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000721a:	0f 85 2f ff ff ff    	jne    c000714f <f_forward+0x68>
c0007220:	e9 96 00 00 00       	jmp    c00072bb <f_forward+0x1d4>
c0007225:	85 f6                	test   esi,esi
c0007227:	0f 85 60 ff ff ff    	jne    c000718d <f_forward+0xa6>
c000722d:	89 d7                	mov    edi,edx
c000722f:	09 c7                	or     edi,eax
c0007231:	75 05                	jne    c0007238 <f_forward+0x151>
c0007233:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007236:	eb 0a                	jmp    c0007242 <f_forward+0x15b>
c0007238:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000723b:	89 d8                	mov    eax,ebx
c000723d:	e8 a3 ba ff ff       	call   c0002ce5 <get_fat>
c0007242:	83 f8 01             	cmp    eax,0x1
c0007245:	77 0b                	ja     c0007252 <f_forward+0x16b>
c0007247:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000724b:	bd 02 00 00 00       	mov    ebp,0x2
c0007250:	eb 69                	jmp    c00072bb <f_forward+0x1d4>
c0007252:	83 f8 ff             	cmp    eax,0xffffffff
c0007255:	75 0b                	jne    c0007262 <f_forward+0x17b>
c0007257:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000725b:	bd 01 00 00 00       	mov    ebp,0x1
c0007260:	eb 59                	jmp    c00072bb <f_forward+0x1d4>
c0007262:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007265:	e9 23 ff ff ff       	jmp    c000718d <f_forward+0xa6>
c000726a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000726e:	79 20                	jns    c0007290 <f_forward+0x1a9>
c0007270:	83 ec 0c             	sub    esp,0xc
c0007273:	6a 01                	push   0x1
c0007275:	52                   	push   edx
c0007276:	50                   	push   eax
c0007277:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000727b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000727f:	50                   	push   eax
c0007280:	e8 c5 a6 ff ff       	call   c000194a <disk_write>
c0007285:	83 c4 20             	add    esp,0x20
c0007288:	85 c0                	test   eax,eax
c000728a:	75 cb                	jne    c0007257 <f_forward+0x170>
c000728c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007290:	83 ec 0c             	sub    esp,0xc
c0007293:	6a 01                	push   0x1
c0007295:	57                   	push   edi
c0007296:	56                   	push   esi
c0007297:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000729b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000729f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00072a3:	50                   	push   eax
c00072a4:	e8 8b a6 ff ff       	call   c0001934 <disk_read>
c00072a9:	83 c4 20             	add    esp,0x20
c00072ac:	85 c0                	test   eax,eax
c00072ae:	0f 84 1c ff ff ff    	je     c00071d0 <f_forward+0xe9>
c00072b4:	eb a1                	jmp    c0007257 <f_forward+0x170>
c00072b6:	bd 07 00 00 00       	mov    ebp,0x7
c00072bb:	83 c4 2c             	add    esp,0x2c
c00072be:	89 e8                	mov    eax,ebp
c00072c0:	5b                   	pop    ebx
c00072c1:	5e                   	pop    esi
c00072c2:	5f                   	pop    edi
c00072c3:	5d                   	pop    ebp
c00072c4:	c3                   	ret    

c00072c5 <f_mkfs>:
c00072c5:	55                   	push   ebp
c00072c6:	57                   	push   edi
c00072c7:	56                   	push   esi
c00072c8:	53                   	push   ebx
c00072c9:	bb 0b 00 00 00       	mov    ebx,0xb
c00072ce:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00072d4:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00072db:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00072e2:	e8 7a ac ff ff       	call   c0001f61 <get_ldnumber>
c00072e7:	85 c0                	test   eax,eax
c00072e9:	0f 88 ec 10 00 00    	js     c00083db <f_mkfs+0x1116>
c00072ef:	8b 14 85 40 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc0c0]
c00072f6:	85 d2                	test   edx,edx
c00072f8:	74 03                	je     c00072fd <f_mkfs+0x38>
c00072fa:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00072fd:	85 f6                	test   esi,esi
c00072ff:	75 05                	jne    c0007306 <f_mkfs+0x41>
c0007301:	be e0 08 02 c0       	mov    esi,0xc00208e0
c0007306:	83 ec 0c             	sub    esp,0xc
c0007309:	0f b6 c0             	movzx  eax,al
c000730c:	bb 03 00 00 00       	mov    ebx,0x3
c0007311:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007319:	e8 13 a6 ff ff       	call   c0001931 <disk_initialize>
c000731e:	83 c4 10             	add    esp,0x10
c0007321:	a8 01                	test   al,0x1
c0007323:	0f 85 b2 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007329:	bb 0a 00 00 00       	mov    ebx,0xa
c000732e:	a8 04                	test   al,0x4
c0007330:	0f 85 a5 10 00 00    	jne    c00083db <f_mkfs+0x1116>
c0007336:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007339:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000733d:	85 c0                	test   eax,eax
c000733f:	75 20                	jne    c0007361 <f_mkfs+0x9c>
c0007341:	51                   	push   ecx
c0007342:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007346:	50                   	push   eax
c0007347:	6a 03                	push   0x3
c0007349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734d:	e8 0e a6 ff ff       	call   c0001960 <disk_ioctl>
c0007352:	83 c4 10             	add    esp,0x10
c0007355:	85 c0                	test   eax,eax
c0007357:	74 08                	je     c0007361 <f_mkfs+0x9c>
c0007359:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007361:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007365:	8d 42 ff             	lea    eax,[edx-0x1]
c0007368:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000736d:	77 04                	ja     c0007373 <f_mkfs+0xae>
c000736f:	85 c2                	test   edx,eax
c0007371:	74 08                	je     c000737b <f_mkfs+0xb6>
c0007373:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000737b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000737e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007382:	48                   	dec    eax
c0007383:	3c 01                	cmp    al,0x1
c0007385:	76 05                	jbe    c000738c <f_mkfs+0xc7>
c0007387:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000738c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000738f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007393:	48                   	dec    eax
c0007394:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007399:	77 07                	ja     c00073a2 <f_mkfs+0xdd>
c000739b:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00073a0:	74 08                	je     c00073aa <f_mkfs+0xe5>
c00073a2:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00073aa:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00073ad:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00073b3:	77 07                	ja     c00073bc <f_mkfs+0xf7>
c00073b5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00073b8:	85 d8                	test   eax,ebx
c00073ba:	74 02                	je     c00073be <f_mkfs+0xf9>
c00073bc:	31 db                	xor    ebx,ebx
c00073be:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00073c9:	77 0a                	ja     c00073d5 <f_mkfs+0x110>
c00073cb:	bb 11 00 00 00       	mov    ebx,0x11
c00073d0:	e9 06 10 00 00       	jmp    c00083db <f_mkfs+0x1116>
c00073d5:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00073dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00073de:	85 ed                	test   ebp,ebp
c00073e0:	75 1e                	jne    c0007400 <f_mkfs+0x13b>
c00073e2:	83 ec 0c             	sub    esp,0xc
c00073e5:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00073ec:	25 00 fe ff ff       	and    eax,0xfffffe00
c00073f1:	50                   	push   eax
c00073f2:	e8 f1 0f 00 00       	call   c00083e8 <ff_memalloc>
c00073f7:	83 c4 10             	add    esp,0x10
c00073fa:	89 c5                	mov    ebp,eax
c00073fc:	85 c0                	test   eax,eax
c00073fe:	74 cb                	je     c00073cb <f_mkfs+0x106>
c0007400:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007408:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007410:	52                   	push   edx
c0007411:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007415:	50                   	push   eax
c0007416:	6a 01                	push   0x1
c0007418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741c:	e8 3f a5 ff ff       	call   c0001960 <disk_ioctl>
c0007421:	83 c4 10             	add    esp,0x10
c0007424:	85 c0                	test   eax,eax
c0007426:	0f 85 4a 0f 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000742c:	89 f1                	mov    ecx,esi
c000742e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007436:	83 e1 0f             	and    ecx,0xf
c0007439:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007441:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007445:	83 e6 08             	and    esi,0x8
c0007448:	75 56                	jne    c00074a0 <f_mkfs+0x1db>
c000744a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000744e:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007452:	83 ff 00             	cmp    edi,0x0
c0007455:	76 20                	jbe    c0007477 <f_mkfs+0x1b2>
c0007457:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c000745c:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007464:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000746a:	83 d7 ff             	adc    edi,0xffffffff
c000746d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007471:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007475:	eb 21                	jmp    c0007498 <f_mkfs+0x1d3>
c0007477:	ba 3f 00 00 00       	mov    edx,0x3f
c000747c:	39 f2                	cmp    edx,esi
c000747e:	19 f8                	sbb    eax,edi
c0007480:	73 1e                	jae    c00074a0 <f_mkfs+0x1db>
c0007482:	83 c6 c1             	add    esi,0xffffffc1
c0007485:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000748d:	83 d7 ff             	adc    edi,0xffffffff
c0007490:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007494:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007498:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00074a4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00074a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00074ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00074af:	31 c0                	xor    eax,eax
c00074b1:	ba 7f 00 00 00       	mov    edx,0x7f
c00074b6:	89 c7                	mov    edi,eax
c00074b8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00074bb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00074bf:	0f 83 c5 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c00074c5:	89 df                	mov    edi,ebx
c00074c7:	c1 ef 09             	shr    edi,0x9
c00074ca:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00074ce:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00074d5:	c1 ef 09             	shr    edi,0x9
c00074d8:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00074dd:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00074e1:	74 29                	je     c000750c <f_mkfs+0x247>
c00074e3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00074e9:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00074ee:	0f 97 c2             	seta   dl
c00074f1:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00074f4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00074f8:	0f 92 c0             	setb   al
c00074fb:	08 c2                	or     dl,al
c00074fd:	75 5b                	jne    c000755a <f_mkfs+0x295>
c00074ff:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007503:	83 e0 07             	and    eax,0x7
c0007506:	3c 04                	cmp    al,0x4
c0007508:	74 50                	je     c000755a <f_mkfs+0x295>
c000750a:	eb 1b                	jmp    c0007527 <f_mkfs+0x262>
c000750c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007511:	0f 87 73 0a 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007517:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000751d:	76 08                	jbe    c0007527 <f_mkfs+0x262>
c000751f:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007527:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000752b:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000752f:	83 e0 01             	and    eax,0x1
c0007532:	80 e1 02             	and    cl,0x2
c0007535:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007539:	74 0d                	je     c0007548 <f_mkfs+0x283>
c000753b:	84 c0                	test   al,al
c000753d:	0f 84 53 09 00 00    	je     c0007e96 <f_mkfs+0xbd1>
c0007543:	e9 12 08 00 00       	jmp    c0007d5a <f_mkfs+0xa95>
c0007548:	bb 13 00 00 00       	mov    ebx,0x13
c000754d:	84 c0                	test   al,al
c000754f:	0f 85 05 08 00 00    	jne    c0007d5a <f_mkfs+0xa95>
c0007555:	e9 39 0e 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c000755a:	31 c0                	xor    eax,eax
c000755c:	ba ff 0f 00 00       	mov    edx,0xfff
c0007561:	89 c7                	mov    edi,eax
c0007563:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007566:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756a:	0f 83 1a 0a 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c0007570:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007576:	77 39                	ja     c00075b1 <f_mkfs+0x2ec>
c0007578:	ba ff ff 07 00       	mov    edx,0x7ffff
c000757d:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007585:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007588:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000758c:	73 08                	jae    c0007596 <f_mkfs+0x2d1>
c000758e:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007596:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000759b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000759e:	b8 00 00 00 00       	mov    eax,0x0
c00075a3:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a7:	73 08                	jae    c00075b1 <f_mkfs+0x2ec>
c00075a9:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00075b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b9:	83 c0 20             	add    eax,0x20
c00075bc:	83 d2 00             	adc    edx,0x0
c00075bf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00075c3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00075c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075cb:	31 d2                	xor    edx,edx
c00075cd:	31 ff                	xor    edi,edi
c00075cf:	52                   	push   edx
c00075d0:	89 fb                	mov    ebx,edi
c00075d2:	50                   	push   eax
c00075d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00075db:	e8 c0 84 01 00       	call   c001faa0 <__udivdi3>
c00075e0:	83 c4 10             	add    esp,0x10
c00075e3:	c1 e0 02             	shl    eax,0x2
c00075e6:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00075ea:	05 07 02 00 00       	add    eax,0x207
c00075ef:	89 f1                	mov    ecx,esi
c00075f1:	c1 e8 09             	shr    eax,0x9
c00075f4:	83 c1 ff             	add    ecx,0xffffffff
c00075f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00075fb:	83 d3 ff             	adc    ebx,0xffffffff
c00075fe:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007602:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007606:	31 d2                	xor    edx,edx
c0007608:	01 c8                	add    eax,ecx
c000760a:	11 da                	adc    edx,ebx
c000760c:	89 c1                	mov    ecx,eax
c000760e:	f7 de                	neg    esi
c0007610:	89 d0                	mov    eax,edx
c0007612:	83 d7 00             	adc    edi,0x0
c0007615:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007619:	f7 df                	neg    edi
c000761b:	21 f1                	and    ecx,esi
c000761d:	21 f8                	and    eax,edi
c000761f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007623:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007627:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000762b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000762f:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007633:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007636:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000763a:	0f ac d0 01          	shrd   eax,edx,0x1
c000763e:	89 df                	mov    edi,ebx
c0007640:	d1 ea                	shr    edx,1
c0007642:	39 c1                	cmp    ecx,eax
c0007644:	19 d7                	sbb    edi,edx
c0007646:	0f 83 3e 09 00 00    	jae    c0007f8a <f_mkfs+0xcc5>
c000764c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007650:	31 d2                	xor    edx,edx
c0007652:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007656:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000765a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000765e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007661:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007665:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007669:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000766d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007671:	83 f8 0f             	cmp    eax,0xf
c0007674:	0f 86 10 09 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c000767a:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007682:	0f 87 02 09 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007688:	31 d2                	xor    edx,edx
c000768a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000768e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007696:	83 c0 07             	add    eax,0x7
c0007699:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00076a1:	c1 e8 03             	shr    eax,0x3
c00076a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00076ab:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00076af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076b3:	c1 e0 09             	shl    eax,0x9
c00076b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ba:	48                   	dec    eax
c00076bb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076bf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00076c3:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00076c7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076cb:	31 d2                	xor    edx,edx
c00076cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00076d1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00076d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076dc:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00076e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00076e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00076e9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076ed:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00076f1:	31 ff                	xor    edi,edi
c00076f3:	31 f6                	xor    esi,esi
c00076f5:	31 db                	xor    ebx,ebx
c00076f7:	85 ff                	test   edi,edi
c00076f9:	74 05                	je     c0007700 <f_mkfs+0x43b>
c00076fb:	4f                   	dec    edi
c00076fc:	74 44                	je     c0007742 <f_mkfs+0x47d>
c00076fe:	eb 4f                	jmp    c000774f <f_mkfs+0x48a>
c0007700:	83 ec 0c             	sub    esp,0xc
c0007703:	0f b7 c3             	movzx  eax,bx
c0007706:	50                   	push   eax
c0007707:	e8 18 0e 00 00       	call   c0008524 <ff_wtoupper>
c000770c:	83 c4 10             	add    esp,0x10
c000770f:	89 c1                	mov    ecx,eax
c0007711:	8d 53 01             	lea    edx,[ebx+0x1]
c0007714:	66 39 c3             	cmp    bx,ax
c0007717:	75 3e                	jne    c0007757 <f_mkfs+0x492>
c0007719:	be 01 00 00 00       	mov    esi,0x1
c000771e:	89 df                	mov    edi,ebx
c0007720:	66 01 f7             	add    di,si
c0007723:	75 07                	jne    c000772c <f_mkfs+0x467>
c0007725:	83 fe 7f             	cmp    esi,0x7f
c0007728:	77 31                	ja     c000775b <f_mkfs+0x496>
c000772a:	eb 16                	jmp    c0007742 <f_mkfs+0x47d>
c000772c:	83 ec 0c             	sub    esp,0xc
c000772f:	0f b7 ff             	movzx  edi,di
c0007732:	57                   	push   edi
c0007733:	e8 ec 0d 00 00       	call   c0008524 <ff_wtoupper>
c0007738:	83 c4 10             	add    esp,0x10
c000773b:	39 c7                	cmp    edi,eax
c000773d:	75 e6                	jne    c0007725 <f_mkfs+0x460>
c000773f:	46                   	inc    esi
c0007740:	eb dc                	jmp    c000771e <f_mkfs+0x459>
c0007742:	31 c0                	xor    eax,eax
c0007744:	89 d9                	mov    ecx,ebx
c0007746:	4e                   	dec    esi
c0007747:	0f 95 c0             	setne  al
c000774a:	43                   	inc    ebx
c000774b:	89 c7                	mov    edi,eax
c000774d:	eb 14                	jmp    c0007763 <f_mkfs+0x49e>
c000774f:	89 f1                	mov    ecx,esi
c0007751:	01 f3                	add    ebx,esi
c0007753:	31 ff                	xor    edi,edi
c0007755:	eb 0c                	jmp    c0007763 <f_mkfs+0x49e>
c0007757:	89 d3                	mov    ebx,edx
c0007759:	eb 08                	jmp    c0007763 <f_mkfs+0x49e>
c000775b:	bf 02 00 00 00       	mov    edi,0x2
c0007760:	83 c9 ff             	or     ecx,0xffffffff
c0007763:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007767:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000776a:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000776e:	0f b6 c1             	movzx  eax,cl
c0007771:	e8 04 a7 ff ff       	call   c0001e7a <xsum32>
c0007776:	66 c1 e9 08          	shr    cx,0x8
c000777a:	89 c2                	mov    edx,eax
c000777c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000777f:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007783:	0f b7 c1             	movzx  eax,cx
c0007786:	e8 ef a6 ff ff       	call   c0001e7a <xsum32>
c000778b:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007790:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007794:	66 85 db             	test   bx,bx
c0007797:	74 1f                	je     c00077b8 <f_mkfs+0x4f3>
c0007799:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000779c:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00077a3:	83 c0 02             	add    eax,0x2
c00077a6:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00077ac:	39 c2                	cmp    edx,eax
c00077ae:	74 08                	je     c00077b8 <f_mkfs+0x4f3>
c00077b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00077b3:	e9 3f ff ff ff       	jmp    c00076f7 <f_mkfs+0x432>
c00077b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077bb:	83 ec 0c             	sub    esp,0xc
c00077be:	05 01 02 00 00       	add    eax,0x201
c00077c3:	c1 e8 09             	shr    eax,0x9
c00077c6:	50                   	push   eax
c00077c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00077cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077cf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077d3:	55                   	push   ebp
c00077d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d8:	e8 6d a1 ff ff       	call   c000194a <disk_write>
c00077dd:	83 c4 20             	add    esp,0x20
c00077e0:	85 c0                	test   eax,eax
c00077e2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00077e5:	0f 85 8b 0b 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00077eb:	89 d0                	mov    eax,edx
c00077ed:	31 d2                	xor    edx,edx
c00077ef:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00077f3:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077f7:	66 85 db             	test   bx,bx
c00077fa:	74 04                	je     c0007800 <f_mkfs+0x53b>
c00077fc:	31 c0                	xor    eax,eax
c00077fe:	eb b0                	jmp    c00077b0 <f_mkfs+0x4eb>
c0007800:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007804:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007808:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000780c:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007812:	31 d2                	xor    edx,edx
c0007814:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000781f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007823:	c1 eb 09             	shr    ebx,0x9
c0007826:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000782d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007831:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007835:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007839:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000783d:	8d 70 01             	lea    esi,[eax+0x1]
c0007840:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007848:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000784f:	31 d2                	xor    edx,edx
c0007851:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007856:	89 04 24             	mov    DWORD PTR [esp],eax
c0007859:	89 c1                	mov    ecx,eax
c000785b:	89 e8                	mov    eax,ebp
c000785d:	e8 b1 a1 ff ff       	call   c0001a13 <mem_set>
c0007862:	31 c0                	xor    eax,eax
c0007864:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007867:	76 10                	jbe    c0007879 <f_mkfs+0x5b4>
c0007869:	83 fe 07             	cmp    esi,0x7
c000786c:	76 0b                	jbe    c0007879 <f_mkfs+0x5b4>
c000786e:	40                   	inc    eax
c000786f:	83 ee 08             	sub    esi,0x8
c0007872:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007877:	eb eb                	jmp    c0007864 <f_mkfs+0x59f>
c0007879:	b2 01                	mov    dl,0x1
c000787b:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000787f:	85 f6                	test   esi,esi
c0007881:	74 0c                	je     c000788f <f_mkfs+0x5ca>
c0007883:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007886:	76 07                	jbe    c000788f <f_mkfs+0x5ca>
c0007888:	08 11                	or     BYTE PTR [ecx],dl
c000788a:	4e                   	dec    esi
c000788b:	d1 e2                	shl    edx,1
c000788d:	eb f0                	jmp    c000787f <f_mkfs+0x5ba>
c000788f:	89 df                	mov    edi,ebx
c0007891:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007895:	76 04                	jbe    c000789b <f_mkfs+0x5d6>
c0007897:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000789b:	83 ec 0c             	sub    esp,0xc
c000789e:	57                   	push   edi
c000789f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00078a7:	55                   	push   ebp
c00078a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ac:	e8 99 a0 ff ff       	call   c000194a <disk_write>
c00078b1:	83 c4 20             	add    esp,0x20
c00078b4:	85 c0                	test   eax,eax
c00078b6:	0f 85 ba 0a 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00078bc:	31 d2                	xor    edx,edx
c00078be:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00078c2:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00078c6:	29 fb                	sub    ebx,edi
c00078c8:	0f 85 7a ff ff ff    	jne    c0007848 <f_mkfs+0x583>
c00078ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00078d2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00078da:	31 f6                	xor    esi,esi
c00078dc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078e0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	89 e8                	mov    eax,ebp
c00078e7:	e8 27 a1 ff ff       	call   c0001a13 <mem_set>
c00078ec:	31 c9                	xor    ecx,ecx
c00078ee:	85 db                	test   ebx,ebx
c00078f0:	75 40                	jne    c0007932 <f_mkfs+0x66d>
c00078f2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00078f7:	89 e8                	mov    eax,ebp
c00078f9:	bb 02 00 00 00       	mov    ebx,0x2
c00078fe:	e8 f2 a0 ff ff       	call   c00019f5 <st_dword>
c0007903:	8d 45 04             	lea    eax,[ebp+0x4]
c0007906:	83 ca ff             	or     edx,0xffffffff
c0007909:	e8 e7 a0 ff ff       	call   c00019f5 <st_dword>
c000790e:	b9 08 00 00 00       	mov    ecx,0x8
c0007913:	eb 1d                	jmp    c0007932 <f_mkfs+0x66d>
c0007915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007918:	76 3b                	jbe    c0007955 <f_mkfs+0x690>
c000791a:	43                   	inc    ebx
c000791b:	83 fe 01             	cmp    esi,0x1
c000791e:	89 da                	mov    edx,ebx
c0007920:	77 03                	ja     c0007925 <f_mkfs+0x660>
c0007922:	83 ca ff             	or     edx,0xffffffff
c0007925:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007929:	4e                   	dec    esi
c000792a:	e8 c6 a0 ff ff       	call   c00019f5 <st_dword>
c000792f:	83 c1 04             	add    ecx,0x4
c0007932:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007936:	85 f6                	test   esi,esi
c0007938:	75 db                	jne    c0007915 <f_mkfs+0x650>
c000793a:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000793f:	77 14                	ja     c0007955 <f_mkfs+0x690>
c0007941:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007945:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000794c:	85 f6                	test   esi,esi
c000794e:	74 05                	je     c0007955 <f_mkfs+0x690>
c0007950:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007953:	77 dd                	ja     c0007932 <f_mkfs+0x66d>
c0007955:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007959:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000795d:	39 cf                	cmp    edi,ecx
c000795f:	76 02                	jbe    c0007963 <f_mkfs+0x69e>
c0007961:	89 cf                	mov    edi,ecx
c0007963:	83 ec 0c             	sub    esp,0xc
c0007966:	57                   	push   edi
c0007967:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000796f:	55                   	push   ebp
c0007970:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007974:	e8 d1 9f ff ff       	call   c000194a <disk_write>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 f2 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007984:	31 d2                	xor    edx,edx
c0007986:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000798a:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000798e:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007992:	0f 85 48 ff ff ff    	jne    c00078e0 <f_mkfs+0x61b>
c0007998:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000799b:	31 d2                	xor    edx,edx
c000799d:	89 e8                	mov    eax,ebp
c000799f:	31 ff                	xor    edi,edi
c00079a1:	e8 6d a0 ff ff       	call   c0001a13 <mem_set>
c00079a6:	8d 45 34             	lea    eax,[ebp+0x34]
c00079a9:	ba 02 00 00 00       	mov    edx,0x2
c00079ae:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00079b2:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00079b6:	e8 3a a0 ff ff       	call   c00019f5 <st_dword>
c00079bb:	8d 45 38             	lea    eax,[ebp+0x38]
c00079be:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00079c2:	e8 2e a0 ff ff       	call   c00019f5 <st_dword>
c00079c7:	8d 45 44             	lea    eax,[ebp+0x44]
c00079ca:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00079ce:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00079d2:	e8 1e a0 ff ff       	call   c00019f5 <st_dword>
c00079d7:	8d 45 54             	lea    eax,[ebp+0x54]
c00079da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00079de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079e2:	83 c2 02             	add    edx,0x2
c00079e5:	e8 0b a0 ff ff       	call   c00019f5 <st_dword>
c00079ea:	8d 45 58             	lea    eax,[ebp+0x58]
c00079ed:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00079f1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00079f5:	e8 fb 9f ff ff       	call   c00019f5 <st_dword>
c00079fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079fe:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a03:	89 c6                	mov    esi,eax
c0007a05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a09:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a10:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a14:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a1b:	39 cb                	cmp    ebx,ecx
c0007a1d:	76 02                	jbe    c0007a21 <f_mkfs+0x75c>
c0007a1f:	89 cb                	mov    ebx,ecx
c0007a21:	83 ec 0c             	sub    esp,0xc
c0007a24:	53                   	push   ebx
c0007a25:	57                   	push   edi
c0007a26:	56                   	push   esi
c0007a27:	55                   	push   ebp
c0007a28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2c:	e8 19 9f ff ff       	call   c000194a <disk_write>
c0007a31:	83 c4 20             	add    esp,0x20
c0007a34:	85 c0                	test   eax,eax
c0007a36:	0f 85 3a 09 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007a3c:	31 d2                	xor    edx,edx
c0007a3e:	b9 00 02 00 00       	mov    ecx,0x200
c0007a43:	89 e8                	mov    eax,ebp
c0007a45:	e8 c9 9f ff ff       	call   c0001a13 <mem_set>
c0007a4a:	31 d2                	xor    edx,edx
c0007a4c:	01 de                	add    esi,ebx
c0007a4e:	11 d7                	adc    edi,edx
c0007a50:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007a53:	75 bf                	jne    c0007a14 <f_mkfs+0x74f>
c0007a55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007a59:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007a5d:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007a65:	b9 00 02 00 00       	mov    ecx,0x200
c0007a6a:	31 d2                	xor    edx,edx
c0007a6c:	89 e8                	mov    eax,ebp
c0007a6e:	e8 a0 9f ff ff       	call   c0001a13 <mem_set>
c0007a73:	b9 0b 00 00 00       	mov    ecx,0xb
c0007a78:	ba c0 09 02 c0       	mov    edx,0xc00209c0
c0007a7d:	89 e8                	mov    eax,ebp
c0007a7f:	e8 7a 9f ff ff       	call   c00019fe <mem_cpy>
c0007a84:	8d 45 40             	lea    eax,[ebp+0x40]
c0007a87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007a8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007a8f:	e8 64 9f ff ff       	call   c00019f8 <st_qword>
c0007a94:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007a98:	8d 45 48             	lea    eax,[ebp+0x48]
c0007a9b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007a9f:	e8 54 9f ff ff       	call   c00019f8 <st_qword>
c0007aa4:	8d 45 50             	lea    eax,[ebp+0x50]
c0007aa7:	ba 20 00 00 00       	mov    edx,0x20
c0007aac:	e8 44 9f ff ff       	call   c00019f5 <st_dword>
c0007ab1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ab5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ab9:	e8 37 9f ff ff       	call   c00019f5 <st_dword>
c0007abe:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007ac2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ac6:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007aca:	e8 26 9f ff ff       	call   c00019f5 <st_dword>
c0007acf:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ad2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ad6:	e8 1a 9f ff ff       	call   c00019f5 <st_dword>
c0007adb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007adf:	8d 50 02             	lea    edx,[eax+0x2]
c0007ae2:	8d 45 60             	lea    eax,[ebp+0x60]
c0007ae5:	e8 0b 9f ff ff       	call   c00019f5 <st_dword>
c0007aea:	8d 45 64             	lea    eax,[ebp+0x64]
c0007aed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007af2:	e8 fe 9e ff ff       	call   c00019f5 <st_dword>
c0007af7:	8d 45 68             	lea    eax,[ebp+0x68]
c0007afa:	ba 00 01 00 00       	mov    edx,0x100
c0007aff:	e8 ed 9e ff ff       	call   c00019f1 <st_word>
c0007b04:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b08:	b8 0a 00 00 00       	mov    eax,0xa
c0007b0d:	48                   	dec    eax
c0007b0e:	74 05                	je     c0007b15 <f_mkfs+0x850>
c0007b10:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b13:	eb f8                	jmp    c0007b0d <f_mkfs+0x848>
c0007b15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b19:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b21:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b25:	74 05                	je     c0007b2c <f_mkfs+0x867>
c0007b27:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b2a:	eb f5                	jmp    c0007b21 <f_mkfs+0x85c>
c0007b2c:	8d 45 78             	lea    eax,[ebp+0x78]
c0007b2f:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007b34:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007b3a:	31 db                	xor    ebx,ebx
c0007b3c:	e8 b0 9e ff ff       	call   c00019f1 <st_word>
c0007b41:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007b47:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007b4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b4f:	e8 9d 9e ff ff       	call   c00019f1 <st_word>
c0007b54:	31 c9                	xor    ecx,ecx
c0007b56:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007b59:	83 f8 01             	cmp    eax,0x1
c0007b5c:	76 13                	jbe    c0007b71 <f_mkfs+0x8ac>
c0007b5e:	83 f9 70             	cmp    ecx,0x70
c0007b61:	74 0e                	je     c0007b71 <f_mkfs+0x8ac>
c0007b63:	89 da                	mov    edx,ebx
c0007b65:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007b6a:	e8 0b a3 ff ff       	call   c0001e7a <xsum32>
c0007b6f:	89 c3                	mov    ebx,eax
c0007b71:	41                   	inc    ecx
c0007b72:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b78:	75 dc                	jne    c0007b56 <f_mkfs+0x891>
c0007b7a:	89 f0                	mov    eax,esi
c0007b7c:	89 fa                	mov    edx,edi
c0007b7e:	83 c0 01             	add    eax,0x1
c0007b81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007b85:	83 d2 00             	adc    edx,0x0
c0007b88:	83 ec 0c             	sub    esp,0xc
c0007b8b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007b8f:	6a 01                	push   0x1
c0007b91:	57                   	push   edi
c0007b92:	56                   	push   esi
c0007b93:	55                   	push   ebp
c0007b94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b98:	e8 ad 9d ff ff       	call   c000194a <disk_write>
c0007b9d:	83 c4 20             	add    esp,0x20
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	0f 85 ce 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007ba8:	31 d2                	xor    edx,edx
c0007baa:	b9 00 02 00 00       	mov    ecx,0x200
c0007baf:	89 e8                	mov    eax,ebp
c0007bb1:	e8 5d 9e ff ff       	call   c0001a13 <mem_set>
c0007bb6:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bbe:	e8 2e 9e ff ff       	call   c00019f1 <st_word>
c0007bc3:	89 f0                	mov    eax,esi
c0007bc5:	89 fa                	mov    edx,edi
c0007bc7:	83 c0 09             	add    eax,0x9
c0007bca:	83 d2 00             	adc    edx,0x0
c0007bcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bd0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007bd4:	31 c9                	xor    ecx,ecx
c0007bd6:	41                   	inc    ecx
c0007bd7:	89 da                	mov    edx,ebx
c0007bd9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007bde:	e8 97 a2 ff ff       	call   c0001e7a <xsum32>
c0007be3:	89 c3                	mov    ebx,eax
c0007be5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007beb:	75 e9                	jne    c0007bd6 <f_mkfs+0x911>
c0007bed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007bf5:	83 c0 01             	add    eax,0x1
c0007bf8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007bfc:	83 d2 00             	adc    edx,0x0
c0007bff:	83 ec 0c             	sub    esp,0xc
c0007c02:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c06:	6a 01                	push   0x1
c0007c08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c10:	55                   	push   ebp
c0007c11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c15:	e8 30 9d ff ff       	call   c000194a <disk_write>
c0007c1a:	83 c4 20             	add    esp,0x20
c0007c1d:	85 c0                	test   eax,eax
c0007c1f:	0f 85 51 07 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007c25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c29:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c2d:	75 09                	jne    c0007c38 <f_mkfs+0x973>
c0007c2f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c32:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007c36:	74 12                	je     c0007c4a <f_mkfs+0x985>
c0007c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c3c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007c48:	eb 8a                	jmp    c0007bd4 <f_mkfs+0x90f>
c0007c4a:	31 d2                	xor    edx,edx
c0007c4c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 bb 9d ff ff       	call   c0001a13 <mem_set>
c0007c58:	83 c6 0b             	add    esi,0xb
c0007c5b:	83 d7 00             	adc    edi,0x0
c0007c5e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007c62:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007c66:	31 c9                	xor    ecx,ecx
c0007c68:	41                   	inc    ecx
c0007c69:	89 da                	mov    edx,ebx
c0007c6b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c70:	e8 05 a2 ff ff       	call   c0001e7a <xsum32>
c0007c75:	89 c3                	mov    ebx,eax
c0007c77:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c7d:	75 e9                	jne    c0007c68 <f_mkfs+0x9a3>
c0007c7f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007c82:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007c86:	83 c6 01             	add    esi,0x1
c0007c89:	83 d7 00             	adc    edi,0x0
c0007c8c:	83 ec 0c             	sub    esp,0xc
c0007c8f:	6a 01                	push   0x1
c0007c91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007c99:	55                   	push   ebp
c0007c9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c9e:	e8 a7 9c ff ff       	call   c000194a <disk_write>
c0007ca3:	83 c4 20             	add    esp,0x20
c0007ca6:	85 c0                	test   eax,eax
c0007ca8:	0f 85 c8 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007cae:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007cb2:	75 06                	jne    c0007cba <f_mkfs+0x9f5>
c0007cb4:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007cb8:	74 09                	je     c0007cc3 <f_mkfs+0x9fe>
c0007cba:	89 34 24             	mov    DWORD PTR [esp],esi
c0007cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007cc1:	eb a3                	jmp    c0007c66 <f_mkfs+0x9a1>
c0007cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cc7:	89 da                	mov    edx,ebx
c0007cc9:	01 e8                	add    eax,ebp
c0007ccb:	e8 25 9d ff ff       	call   c00019f5 <st_dword>
c0007cd0:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007cd5:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007cdd:	75 e4                	jne    c0007cc3 <f_mkfs+0x9fe>
c0007cdf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ce2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ce6:	83 c6 02             	add    esi,0x2
c0007ce9:	83 d7 00             	adc    edi,0x0
c0007cec:	83 ec 0c             	sub    esp,0xc
c0007cef:	6a 01                	push   0x1
c0007cf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007cf9:	55                   	push   ebp
c0007cfa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cfe:	e8 47 9c ff ff       	call   c000194a <disk_write>
c0007d03:	83 c4 20             	add    esp,0x20
c0007d06:	85 c0                	test   eax,eax
c0007d08:	0f 85 68 06 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c0007d0e:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d13:	74 0d                	je     c0007d22 <f_mkfs+0xa5d>
c0007d15:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d1d:	e9 43 fd ff ff       	jmp    c0007a65 <f_mkfs+0x7a0>
c0007d22:	b1 07                	mov    cl,0x7
c0007d24:	e9 e3 05 00 00       	jmp    c000830c <f_mkfs+0x1047>
c0007d29:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007d2e:	0f 85 4f 02 00 00    	jne    c0007f83 <f_mkfs+0xcbe>
c0007d34:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d39:	0f 86 22 02 00 00    	jbe    c0007f61 <f_mkfs+0xc9c>
c0007d3f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d44:	0f 85 81 06 00 00    	jne    c00083cb <f_mkfs+0x1106>
c0007d4a:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d51:	83 f8 40             	cmp    eax,0x40
c0007d54:	0f 87 51 06 00 00    	ja     c00083ab <f_mkfs+0x10e6>
c0007d5a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d5e:	85 ff                	test   edi,edi
c0007d60:	75 1c                	jne    c0007d7e <f_mkfs+0xab9>
c0007d62:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d65:	ba c0 08 02 c0       	mov    edx,0xc00208c0
c0007d6a:	c1 e9 0c             	shr    ecx,0xc
c0007d6d:	bf 01 00 00 00       	mov    edi,0x1
c0007d72:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d75:	66 85 c0             	test   ax,ax
c0007d78:	0f 85 95 01 00 00    	jne    c0007f13 <f_mkfs+0xc4e>
c0007d7e:	31 d2                	xor    edx,edx
c0007d80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d83:	f7 f7                	div    edi
c0007d85:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d8a:	0f 86 95 01 00 00    	jbe    c0007f25 <f_mkfs+0xc60>
c0007d90:	83 c0 02             	add    eax,0x2
c0007d93:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007d98:	01 c0                	add    eax,eax
c0007d9a:	05 ff 01 00 00       	add    eax,0x1ff
c0007d9f:	be 01 00 00 00       	mov    esi,0x1
c0007da4:	c1 e8 09             	shr    eax,0x9
c0007da7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007dab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007daf:	c1 e0 05             	shl    eax,0x5
c0007db2:	c1 e8 09             	shr    eax,0x9
c0007db5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007db9:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007dbe:	31 d2                	xor    edx,edx
c0007dc0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007dc4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007dc8:	89 f0                	mov    eax,esi
c0007dca:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007dce:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007dd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007dd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007dda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007dde:	31 d2                	xor    edx,edx
c0007de0:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007de5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007de9:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ded:	31 db                	xor    ebx,ebx
c0007def:	01 c8                	add    eax,ecx
c0007df1:	11 da                	adc    edx,ebx
c0007df3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007df7:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007dfb:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007dff:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e03:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e07:	f7 da                	neg    edx
c0007e09:	21 d1                	and    ecx,edx
c0007e0b:	29 d9                	sub    ecx,ebx
c0007e0d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e12:	0f 85 20 01 00 00    	jne    c0007f38 <f_mkfs+0xc73>
c0007e18:	31 db                	xor    ebx,ebx
c0007e1a:	01 ce                	add    esi,ecx
c0007e1c:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e20:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e24:	31 d2                	xor    edx,edx
c0007e26:	89 f8                	mov    eax,edi
c0007e28:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e2c:	c1 e0 04             	shl    eax,0x4
c0007e2f:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007e33:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007e37:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007e3b:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007e3f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007e42:	19 d3                	sbb    ebx,edx
c0007e44:	0f 82 40 01 00 00    	jb     c0007f8a <f_mkfs+0xcc5>
c0007e4a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e51:	89 c8                	mov    eax,ecx
c0007e53:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007e58:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007e5c:	29 f0                	sub    eax,esi
c0007e5e:	29 d0                	sub    eax,edx
c0007e60:	31 d2                	xor    edx,edx
c0007e62:	f7 f7                	div    edi
c0007e64:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e69:	89 c3                	mov    ebx,eax
c0007e6b:	0f 85 b8 fe ff ff    	jne    c0007d29 <f_mkfs+0xa64>
c0007e71:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e76:	0f 87 1d 01 00 00    	ja     c0007f99 <f_mkfs+0xcd4>
c0007e7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e81:	0f 85 03 01 00 00    	jne    c0007f8a <f_mkfs+0xcc5>
c0007e87:	83 ff 01             	cmp    edi,0x1
c0007e8a:	0f 86 fa 00 00 00    	jbe    c0007f8a <f_mkfs+0xcc5>
c0007e90:	d1 ef                	shr    edi,1
c0007e92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007e96:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007e9a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e9d:	85 db                	test   ebx,ebx
c0007e9f:	75 2d                	jne    c0007ece <f_mkfs+0xc09>
c0007ea1:	89 cb                	mov    ebx,ecx
c0007ea3:	ba d0 08 02 c0       	mov    edx,0xc00208d0
c0007ea8:	c1 eb 11             	shr    ebx,0x11
c0007eab:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007eb3:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007eb6:	66 85 c0             	test   ax,ax
c0007eb9:	74 11                	je     c0007ecc <f_mkfs+0xc07>
c0007ebb:	83 c2 02             	add    edx,0x2
c0007ebe:	39 d8                	cmp    eax,ebx
c0007ec0:	77 0a                	ja     c0007ecc <f_mkfs+0xc07>
c0007ec2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007ec6:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007eca:	eb e7                	jmp    c0007eb3 <f_mkfs+0xbee>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	31 d2                	xor    edx,edx
c0007ed0:	89 c8                	mov    eax,ecx
c0007ed2:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007ed6:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007edd:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007ee2:	c1 ea 09             	shr    edx,0x9
c0007ee5:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007eea:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007eee:	0f 87 96 00 00 00    	ja     c0007f8a <f_mkfs+0xcc5>
c0007ef4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ef8:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f00:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f04:	be 20 00 00 00       	mov    esi,0x20
c0007f09:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f0e:	e9 a6 fe ff ff       	jmp    c0007db9 <f_mkfs+0xaf4>
c0007f13:	83 c2 02             	add    edx,0x2
c0007f16:	39 c8                	cmp    eax,ecx
c0007f18:	0f 87 60 fe ff ff    	ja     c0007d7e <f_mkfs+0xab9>
c0007f1e:	01 ff                	add    edi,edi
c0007f20:	e9 4d fe ff ff       	jmp    c0007d72 <f_mkfs+0xaad>
c0007f25:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f28:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f2d:	40                   	inc    eax
c0007f2e:	d1 e8                	shr    eax,1
c0007f30:	83 c0 03             	add    eax,0x3
c0007f33:	e9 62 fe ff ff       	jmp    c0007d9a <f_mkfs+0xad5>
c0007f38:	31 d2                	xor    edx,edx
c0007f3a:	89 c8                	mov    eax,ecx
c0007f3c:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f40:	85 d2                	test   edx,edx
c0007f42:	74 0c                	je     c0007f50 <f_mkfs+0xc8b>
c0007f44:	49                   	dec    ecx
c0007f45:	46                   	inc    esi
c0007f46:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007f4b:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007f50:	89 c8                	mov    eax,ecx
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007f58:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007f5c:	e9 c3 fe ff ff       	jmp    c0007e24 <f_mkfs+0xb5f>
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	77 31                	ja     c0007f99 <f_mkfs+0xcd4>
c0007f68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f6d:	75 1b                	jne    c0007f8a <f_mkfs+0xcc5>
c0007f6f:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f76:	3d 80 00 00 00       	cmp    eax,0x80
c0007f7b:	0f 86 d9 fd ff ff    	jbe    c0007d5a <f_mkfs+0xa95>
c0007f81:	eb 07                	jmp    c0007f8a <f_mkfs+0xcc5>
c0007f83:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f88:	76 0a                	jbe    c0007f94 <f_mkfs+0xccf>
c0007f8a:	bb 0e 00 00 00       	mov    ebx,0xe
c0007f8f:	e9 ff 03 00 00       	jmp    c0008393 <f_mkfs+0x10ce>
c0007f94:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f99:	31 d2                	xor    edx,edx
c0007f9b:	b9 00 02 00 00       	mov    ecx,0x200
c0007fa0:	89 e8                	mov    eax,ebp
c0007fa2:	e8 6c 9a ff ff       	call   c0001a13 <mem_set>
c0007fa7:	b9 0b 00 00 00       	mov    ecx,0xb
c0007fac:	ba e2 09 02 c0       	mov    edx,0xc00209e2
c0007fb1:	89 e8                	mov    eax,ebp
c0007fb3:	e8 46 9a ff ff       	call   c00019fe <mem_cpy>
c0007fb8:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007fbb:	ba 00 02 00 00       	mov    edx,0x200
c0007fc0:	e8 2c 9a ff ff       	call   c00019f1 <st_word>
c0007fc5:	89 f8                	mov    eax,edi
c0007fc7:	0f b7 d6             	movzx  edx,si
c0007fca:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007fcd:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007fd0:	e8 1c 9a ff ff       	call   c00019f1 <st_word>
c0007fd5:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007fd9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fde:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007fe1:	75 08                	jne    c0007feb <f_mkfs+0xd26>
c0007fe3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007feb:	8d 45 11             	lea    eax,[ebp+0x11]
c0007fee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ff2:	e8 fa 99 ff ff       	call   c00019f1 <st_word>
c0007ff7:	b8 ff ff 00 00       	mov    eax,0xffff
c0007ffc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008000:	39 d0                	cmp    eax,edx
c0008002:	b8 00 00 00 00       	mov    eax,0x0
c0008007:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000800b:	72 0a                	jb     c0008017 <f_mkfs+0xd52>
c000800d:	8d 45 13             	lea    eax,[ebp+0x13]
c0008010:	e8 dc 99 ff ff       	call   c00019f1 <st_word>
c0008015:	eb 08                	jmp    c000801f <f_mkfs+0xd5a>
c0008017:	8d 45 20             	lea    eax,[ebp+0x20]
c000801a:	e8 d6 99 ff ff       	call   c00019f5 <st_dword>
c000801f:	8d 45 18             	lea    eax,[ebp+0x18]
c0008022:	ba 3f 00 00 00       	mov    edx,0x3f
c0008027:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000802b:	e8 c1 99 ff ff       	call   c00019f1 <st_word>
c0008030:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008033:	ba ff 00 00 00       	mov    edx,0xff
c0008038:	e8 b4 99 ff ff       	call   c00019f1 <st_word>
c000803d:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008040:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008044:	e8 ac 99 ff ff       	call   c00019f5 <st_dword>
c0008049:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804e:	75 57                	jne    c00080a7 <f_mkfs+0xde2>
c0008050:	8d 45 43             	lea    eax,[ebp+0x43]
c0008053:	ba 00 00 21 50       	mov    edx,0x50210000
c0008058:	e8 98 99 ff ff       	call   c00019f5 <st_dword>
c000805d:	8d 45 24             	lea    eax,[ebp+0x24]
c0008060:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008064:	e8 8c 99 ff ff       	call   c00019f5 <st_dword>
c0008069:	8d 45 2c             	lea    eax,[ebp+0x2c]
c000806c:	ba 02 00 00 00       	mov    edx,0x2
c0008071:	e8 7f 99 ff ff       	call   c00019f5 <st_dword>
c0008076:	8d 45 30             	lea    eax,[ebp+0x30]
c0008079:	ba 01 00 00 00       	mov    edx,0x1
c000807e:	e8 6e 99 ff ff       	call   c00019f1 <st_word>
c0008083:	8d 45 32             	lea    eax,[ebp+0x32]
c0008086:	ba 06 00 00 00       	mov    edx,0x6
c000808b:	e8 61 99 ff ff       	call   c00019f1 <st_word>
c0008090:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008094:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008098:	8d 45 47             	lea    eax,[ebp+0x47]
c000809b:	b9 13 00 00 00       	mov    ecx,0x13
c00080a0:	ba ee 09 02 c0       	mov    edx,0xc00209ee
c00080a5:	eb 2f                	jmp    c00080d6 <f_mkfs+0xe11>
c00080a7:	8d 45 27             	lea    eax,[ebp+0x27]
c00080aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00080af:	e8 41 99 ff ff       	call   c00019f5 <st_dword>
c00080b4:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00080b9:	8d 45 16             	lea    eax,[ebp+0x16]
c00080bc:	e8 30 99 ff ff       	call   c00019f1 <st_word>
c00080c1:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00080c5:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00080c9:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00080cc:	b9 13 00 00 00       	mov    ecx,0x13
c00080d1:	ba 02 0a 02 c0       	mov    edx,0xc0020a02
c00080d6:	e8 23 99 ff ff       	call   c00019fe <mem_cpy>
c00080db:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00080e1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00080e6:	89 f0                	mov    eax,esi
c00080e8:	e8 04 99 ff ff       	call   c00019f1 <st_word>
c00080ed:	83 ec 0c             	sub    esp,0xc
c00080f0:	6a 01                	push   0x1
c00080f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00080fa:	55                   	push   ebp
c00080fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ff:	e8 46 98 ff ff       	call   c000194a <disk_write>
c0008104:	83 c4 20             	add    esp,0x20
c0008107:	85 c0                	test   eax,eax
c0008109:	0f 85 67 02 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000810f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008114:	0f 85 b7 00 00 00    	jne    c00081d1 <f_mkfs+0xf0c>
c000811a:	83 ec 0c             	sub    esp,0xc
c000811d:	6a 01                	push   0x1
c000811f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008123:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008127:	83 c0 06             	add    eax,0x6
c000812a:	83 d2 00             	adc    edx,0x0
c000812d:	52                   	push   edx
c000812e:	50                   	push   eax
c000812f:	55                   	push   ebp
c0008130:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008134:	e8 11 98 ff ff       	call   c000194a <disk_write>
c0008139:	83 c4 20             	add    esp,0x20
c000813c:	b9 00 02 00 00       	mov    ecx,0x200
c0008141:	31 d2                	xor    edx,edx
c0008143:	89 e8                	mov    eax,ebp
c0008145:	e8 c9 98 ff ff       	call   c0001a13 <mem_set>
c000814a:	ba 52 52 61 41       	mov    edx,0x41615252
c000814f:	89 e8                	mov    eax,ebp
c0008151:	e8 9f 98 ff ff       	call   c00019f5 <st_dword>
c0008156:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c000815c:	ba 72 72 41 61       	mov    edx,0x61417272
c0008161:	e8 8f 98 ff ff       	call   c00019f5 <st_dword>
c0008166:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008169:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000816f:	e8 81 98 ff ff       	call   c00019f5 <st_dword>
c0008174:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000817a:	ba 02 00 00 00       	mov    edx,0x2
c000817f:	e8 71 98 ff ff       	call   c00019f5 <st_dword>
c0008184:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008189:	89 f0                	mov    eax,esi
c000818b:	e8 61 98 ff ff       	call   c00019f1 <st_word>
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	6a 01                	push   0x1
c0008195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008199:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000819d:	83 c0 07             	add    eax,0x7
c00081a0:	83 d2 00             	adc    edx,0x0
c00081a3:	52                   	push   edx
c00081a4:	50                   	push   eax
c00081a5:	55                   	push   ebp
c00081a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081aa:	e8 9b 97 ff ff       	call   c000194a <disk_write>
c00081af:	83 c4 14             	add    esp,0x14
c00081b2:	6a 01                	push   0x1
c00081b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	83 d2 00             	adc    edx,0x0
c00081c2:	52                   	push   edx
c00081c3:	50                   	push   eax
c00081c4:	55                   	push   ebp
c00081c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c9:	e8 7c 97 ff ff       	call   c000194a <disk_write>
c00081ce:	83 c4 20             	add    esp,0x20
c00081d1:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00081d8:	31 d2                	xor    edx,edx
c00081da:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00081e0:	31 db                	xor    ebx,ebx
c00081e2:	89 e8                	mov    eax,ebp
c00081e4:	e8 2a 98 ff ff       	call   c0001a13 <mem_set>
c00081e9:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00081ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00081f5:	0f 94 c3             	sete   bl
c00081f8:	4b                   	dec    ebx
c00081f9:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00081ff:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	75 21                	jne    c000822d <f_mkfs+0xf68>
c000820c:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008211:	89 e8                	mov    eax,ebp
c0008213:	e8 dd 97 ff ff       	call   c00019f5 <st_dword>
c0008218:	8d 45 04             	lea    eax,[ebp+0x4]
c000821b:	83 ca ff             	or     edx,0xffffffff
c000821e:	e8 d2 97 ff ff       	call   c00019f5 <st_dword>
c0008223:	8d 45 08             	lea    eax,[ebp+0x8]
c0008226:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000822b:	eb 04                	jmp    c0008231 <f_mkfs+0xf6c>
c000822d:	89 da                	mov    edx,ebx
c000822f:	89 e8                	mov    eax,ebp
c0008231:	e8 bf 97 ff ff       	call   c00019f5 <st_dword>
c0008236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000823a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000823e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008242:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008246:	39 ce                	cmp    esi,ecx
c0008248:	76 02                	jbe    c000824c <f_mkfs+0xf87>
c000824a:	89 ce                	mov    esi,ecx
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	56                   	push   esi
c0008250:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008254:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008258:	55                   	push   ebp
c0008259:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825d:	e8 e8 96 ff ff       	call   c000194a <disk_write>
c0008262:	83 c4 20             	add    esp,0x20
c0008265:	85 c0                	test   eax,eax
c0008267:	0f 85 09 01 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c000826d:	31 d2                	xor    edx,edx
c000826f:	b9 00 02 00 00       	mov    ecx,0x200
c0008274:	89 e8                	mov    eax,ebp
c0008276:	e8 98 97 ff ff       	call   c0001a13 <mem_set>
c000827b:	31 d2                	xor    edx,edx
c000827d:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008281:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008285:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008289:	75 b3                	jne    c000823e <f_mkfs+0xf79>
c000828b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000828e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008295:	40                   	inc    eax
c0008296:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000829a:	0f 87 65 ff ff ff    	ja     c0008205 <f_mkfs+0xf40>
c00082a0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082a5:	74 04                	je     c00082ab <f_mkfs+0xfe6>
c00082a7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00082ab:	89 fb                	mov    ebx,edi
c00082ad:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00082b1:	76 04                	jbe    c00082b7 <f_mkfs+0xff2>
c00082b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082b7:	83 ec 0c             	sub    esp,0xc
c00082ba:	53                   	push   ebx
c00082bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c3:	55                   	push   ebp
c00082c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082c8:	e8 7d 96 ff ff       	call   c000194a <disk_write>
c00082cd:	83 c4 20             	add    esp,0x20
c00082d0:	85 c0                	test   eax,eax
c00082d2:	0f 85 9e 00 00 00    	jne    c0008376 <f_mkfs+0x10b1>
c00082d8:	31 d2                	xor    edx,edx
c00082da:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00082de:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082e2:	29 df                	sub    edi,ebx
c00082e4:	75 c5                	jne    c00082ab <f_mkfs+0xfe6>
c00082e6:	b1 0c                	mov    cl,0xc
c00082e8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082ed:	74 1d                	je     c000830c <f_mkfs+0x1047>
c00082ef:	b8 ff ff 00 00       	mov    eax,0xffff
c00082f4:	b1 06                	mov    cl,0x6
c00082f6:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00082fa:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00082fe:	72 0c                	jb     c000830c <f_mkfs+0x1047>
c0008300:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008305:	0f 94 c1             	sete   cl
c0008308:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000830c:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008311:	75 4c                	jne    c000835f <f_mkfs+0x109a>
c0008313:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008317:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000831b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008322:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008329:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008334:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000833f:	0f b6 c9             	movzx  ecx,cl
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	55                   	push   ebp
c0008346:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000834d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008351:	e8 f9 bf ff ff       	call   c000434f <create_partition>
c0008356:	83 c4 10             	add    esp,0x10
c0008359:	89 c3                	mov    ebx,eax
c000835b:	85 c0                	test   eax,eax
c000835d:	75 34                	jne    c0008393 <f_mkfs+0x10ce>
c000835f:	31 db                	xor    ebx,ebx
c0008361:	50                   	push   eax
c0008362:	6a 00                	push   0x0
c0008364:	6a 00                	push   0x0
c0008366:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000836a:	e8 f1 95 ff ff       	call   c0001960 <disk_ioctl>
c000836f:	83 c4 10             	add    esp,0x10
c0008372:	85 c0                	test   eax,eax
c0008374:	74 1d                	je     c0008393 <f_mkfs+0x10ce>
c0008376:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000837e:	75 0c                	jne    c000838c <f_mkfs+0x10c7>
c0008380:	83 ec 0c             	sub    esp,0xc
c0008383:	55                   	push   ebp
c0008384:	e8 77 00 00 00       	call   c0008400 <ff_memfree>
c0008389:	83 c4 10             	add    esp,0x10
c000838c:	bb 01 00 00 00       	mov    ebx,0x1
c0008391:	eb 48                	jmp    c00083db <f_mkfs+0x1116>
c0008393:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000839b:	75 3e                	jne    c00083db <f_mkfs+0x1116>
c000839d:	83 ec 0c             	sub    esp,0xc
c00083a0:	55                   	push   ebp
c00083a1:	e8 5a 00 00 00       	call   c0008400 <ff_memfree>
c00083a6:	83 c4 10             	add    esp,0x10
c00083a9:	eb 30                	jmp    c00083db <f_mkfs+0x1116>
c00083ab:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083b0:	0f 85 eb fa ff ff    	jne    c0007ea1 <f_mkfs+0xbdc>
c00083b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00083ba:	81 ff 80 00 00 00    	cmp    edi,0x80
c00083c0:	0f 86 b8 f9 ff ff    	jbe    c0007d7e <f_mkfs+0xab9>
c00083c6:	e9 bf fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083cb:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00083d0:	0f 85 c0 fa ff ff    	jne    c0007e96 <f_mkfs+0xbd1>
c00083d6:	e9 af fb ff ff       	jmp    c0007f8a <f_mkfs+0xcc5>
c00083db:	81 c4 9c 00 00 00    	add    esp,0x9c
c00083e1:	89 d8                	mov    eax,ebx
c00083e3:	5b                   	pop    ebx
c00083e4:	5e                   	pop    esi
c00083e5:	5f                   	pop    edi
c00083e6:	5d                   	pop    ebp
c00083e7:	c3                   	ret    

c00083e8 <ff_memalloc>:
c00083e8:	83 ec 0c             	sub    esp,0xc
c00083eb:	83 ec 0c             	sub    esp,0xc
c00083ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083f2:	e8 88 13 00 00       	call   c000977f <malloc>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	83 c4 0c             	add    esp,0xc
c00083fd:	c3                   	ret    
c00083fe:	66 90                	xchg   ax,ax

c0008400 <ff_memfree>:
c0008400:	83 ec 0c             	sub    esp,0xc
c0008403:	83 ec 0c             	sub    esp,0xc
c0008406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000840a:	e8 80 13 00 00       	call   c000978f <free>
c000840f:	83 c4 10             	add    esp,0x10
c0008412:	90                   	nop
c0008413:	83 c4 0c             	add    esp,0xc
c0008416:	c3                   	ret    
c0008417:	90                   	nop

c0008418 <ff_uni2oem>:
c0008418:	83 ec 14             	sub    esp,0x14
c000841b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000841f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008423:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000842a:	c7 44 24 0c 20 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020d20
c0008432:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008437:	77 0b                	ja     c0008444 <ff_uni2oem+0x2c>
c0008439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000843d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008442:	eb 60                	jmp    c00084a4 <ff_uni2oem+0x8c>
c0008444:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000844c:	77 56                	ja     c00084a4 <ff_uni2oem+0x8c>
c000844e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008454:	75 4e                	jne    c00084a4 <ff_uni2oem+0x8c>
c0008456:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000845d:	eb 0d                	jmp    c000846c <ff_uni2oem+0x54>
c000845f:	90                   	nop
c0008460:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008465:	40                   	inc    eax
c0008466:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000846b:	90                   	nop
c000846c:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008472:	77 1c                	ja     c0008490 <ff_uni2oem+0x78>
c0008474:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008479:	01 c0                	add    eax,eax
c000847b:	89 c2                	mov    edx,eax
c000847d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008481:	01 d0                	add    eax,edx
c0008483:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008486:	0f b7 c0             	movzx  eax,ax
c0008489:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000848d:	75 d1                	jne    c0008460 <ff_uni2oem+0x48>
c000848f:	90                   	nop
c0008490:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008495:	83 e8 80             	sub    eax,0xffffff80
c0008498:	25 ff 00 00 00       	and    eax,0xff
c000849d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084a2:	66 90                	xchg   ax,ax
c00084a4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084a9:	83 c4 14             	add    esp,0x14
c00084ac:	c3                   	ret    
c00084ad:	8d 76 00             	lea    esi,[esi+0x0]

c00084b0 <ff_oem2uni>:
c00084b0:	83 ec 18             	sub    esp,0x18
c00084b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00084b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084bb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00084c0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084c4:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00084cb:	c7 44 24 10 20 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d20
c00084d3:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00084d9:	77 0d                	ja     c00084e8 <ff_oem2uni+0x38>
c00084db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084df:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00084e4:	eb 32                	jmp    c0008518 <ff_oem2uni+0x68>
c00084e6:	66 90                	xchg   ax,ax
c00084e8:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084ee:	75 28                	jne    c0008518 <ff_oem2uni+0x68>
c00084f0:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00084f7:	77 1f                	ja     c0008518 <ff_oem2uni+0x68>
c00084f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00084fe:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008503:	01 c0                	add    eax,eax
c0008505:	89 c2                	mov    edx,eax
c0008507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000850b:	01 d0                	add    eax,edx
c000850d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008510:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008515:	8d 76 00             	lea    esi,[esi+0x0]
c0008518:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000851d:	83 c4 18             	add    esp,0x18
c0008520:	c3                   	ret    
c0008521:	8d 76 00             	lea    esi,[esi+0x0]

c0008524 <ff_wtoupper>:
c0008524:	83 ec 10             	sub    esp,0x10
c0008527:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000852f:	0f 87 4f 01 00 00    	ja     c0008684 <ff_wtoupper+0x160>
c0008535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008539:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000853e:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008545:	77 09                	ja     c0008550 <ff_wtoupper+0x2c>
c0008547:	b8 20 0b 02 c0       	mov    eax,0xc0020b20
c000854c:	eb 0a                	jmp    c0008558 <ff_wtoupper+0x34>
c000854e:	66 90                	xchg   ax,ax
c0008550:	b8 60 0a 02 c0       	mov    eax,0xc0020a60
c0008555:	8d 76 00             	lea    esi,[esi+0x0]
c0008558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000855c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008560:	8d 50 02             	lea    edx,[eax+0x2]
c0008563:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008567:	66 8b 00             	mov    ax,WORD PTR [eax]
c000856a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000856f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008575:	0f 84 fd 00 00 00    	je     c0008678 <ff_wtoupper+0x154>
c000857b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008580:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008585:	0f 82 ed 00 00 00    	jb     c0008678 <ff_wtoupper+0x154>
c000858b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000858f:	8d 50 02             	lea    edx,[eax+0x2]
c0008592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008596:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008599:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000859e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085a3:	66 c1 e8 08          	shr    ax,0x8
c00085a7:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00085ac:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00085b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00085b8:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00085bd:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00085c2:	01 ca                	add    edx,ecx
c00085c4:	39 d0                	cmp    eax,edx
c00085c6:	0f 8d 8c 00 00 00    	jge    c0008658 <ff_wtoupper+0x134>
c00085cc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085d1:	83 f8 08             	cmp    eax,0x8
c00085d4:	0f 87 9a 00 00 00    	ja     c0008674 <ff_wtoupper+0x150>
c00085da:	8b 04 85 20 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf5e0]
c00085e1:	ff e0                	jmp    eax
c00085e3:	90                   	nop
c00085e4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00085e9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00085ee:	29 c2                	sub    edx,eax
c00085f0:	89 d0                	mov    eax,edx
c00085f2:	01 c0                	add    eax,eax
c00085f4:	89 c2                	mov    edx,eax
c00085f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fa:	01 d0                	add    eax,edx
c00085fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008604:	eb 4e                	jmp    c0008654 <ff_wtoupper+0x130>
c0008606:	66 90                	xchg   ax,ax
c0008608:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000860d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008611:	83 e0 01             	and    eax,0x1
c0008614:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008619:	eb 39                	jmp    c0008654 <ff_wtoupper+0x130>
c000861b:	90                   	nop
c000861c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008622:	eb 30                	jmp    c0008654 <ff_wtoupper+0x130>
c0008624:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000862a:	eb 28                	jmp    c0008654 <ff_wtoupper+0x130>
c000862c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008632:	eb 20                	jmp    c0008654 <ff_wtoupper+0x130>
c0008634:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000863a:	eb 18                	jmp    c0008654 <ff_wtoupper+0x130>
c000863c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008642:	eb 10                	jmp    c0008654 <ff_wtoupper+0x130>
c0008644:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000864a:	eb 08                	jmp    c0008654 <ff_wtoupper+0x130>
c000864c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008653:	90                   	nop
c0008654:	eb 1e                	jmp    c0008674 <ff_wtoupper+0x150>
c0008656:	66 90                	xchg   ax,ax
c0008658:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000865e:	0f 85 f8 fe ff ff    	jne    c000855c <ff_wtoupper+0x38>
c0008664:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008669:	01 c0                	add    eax,eax
c000866b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000866f:	e9 e8 fe ff ff       	jmp    c000855c <ff_wtoupper+0x38>
c0008674:	90                   	nop
c0008675:	8d 76 00             	lea    esi,[esi+0x0]
c0008678:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000867d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008681:	8d 76 00             	lea    esi,[esi+0x0]
c0008684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008688:	83 c4 10             	add    esp,0x10
c000868b:	c3                   	ret    

c000868c <CPU::current()>:
c000868c:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0008691:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008697:	c3                   	ret    

c0008698 <operator new(unsigned long)>:
c0008698:	e9 e2 10 00 00       	jmp    c000977f <malloc>

c000869d <operator delete(void*)>:
c000869d:	e9 fd 10 00 00       	jmp    c000979f <rfree>

c00086a2 <disableIRQs()>:
c00086a2:	fa                   	cli    
c00086a3:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00086a9:	c3                   	ret    

c00086aa <enableIRQs()>:
c00086aa:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00086af:	48                   	dec    eax
c00086b0:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00086b5:	75 01                	jne    c00086b8 <enableIRQs()+0xe>
c00086b7:	fb                   	sti    
c00086b8:	c3                   	ret    

c00086b9 <lockScheduler()>:
c00086b9:	fa                   	cli    
c00086ba:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00086c0:	c3                   	ret    

c00086c1 <unlockScheduler()>:
c00086c1:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00086c6:	48                   	dec    eax
c00086c7:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00086cc:	75 01                	jne    c00086cf <unlockScheduler()+0xe>
c00086ce:	fb                   	sti    
c00086cf:	c3                   	ret    

c00086d0 <lockStuff()>:
c00086d0:	fa                   	cli    
c00086d1:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00086d7:	ff 05 84 74 02 c0    	inc    DWORD PTR ds:0xc0027484
c00086dd:	c3                   	ret    

c00086de <unlockStuff()>:
c00086de:	83 ec 0c             	sub    esp,0xc
c00086e1:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c00086e6:	48                   	dec    eax
c00086e7:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c00086ec:	75 18                	jne    c0008706 <unlockStuff()+0x28>
c00086ee:	83 3d 80 74 02 c0 00 	cmp    DWORD PTR ds:0xc0027480,0x0
c00086f5:	74 0f                	je     c0008706 <unlockStuff()+0x28>
c00086f7:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c0008701:	e8 32 d4 00 00       	call   c0015b38 <schedule()>
c0008706:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000870b:	48                   	dec    eax
c000870c:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0008711:	75 01                	jne    c0008714 <unlockStuff()+0x36>
c0008713:	fb                   	sti    
c0008714:	83 c4 0c             	add    esp,0xc
c0008717:	c3                   	ret    

c0008718 <Virt::getAKernelVAS()>:
c0008718:	a1 94 40 02 c0       	mov    eax,ds:0xc0024094
c000871d:	c3                   	ret    

c000871e <__not_memcpy>:
c000871e:	57                   	push   edi
c000871f:	56                   	push   esi
c0008720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008724:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008728:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000872c:	89 c7                	mov    edi,eax
c000872e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008730:	5e                   	pop    esi
c0008731:	5f                   	pop    edi
c0008732:	c3                   	ret    
c0008733:	90                   	nop

c0008734 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008734:	83 ec 0c             	sub    esp,0xc
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	68 20 0e 02 c0       	push   0xc0020e20
c000873f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008743:	e8 a8 7e ff ff       	call   c00005f0 <strcmp>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	85 c0                	test   eax,eax
c000874d:	0f 94 c0             	sete   al
c0008750:	84 c0                	test   al,al
c0008752:	74 0c                	je     c0008760 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008754:	b8 a8 3f 02 c0       	mov    eax,0xc0023fa8
c0008759:	e9 ea 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000875e:	66 90                	xchg   ax,ax
c0008760:	83 ec 08             	sub    esp,0x8
c0008763:	68 29 0e 02 c0       	push   0xc0020e29
c0008768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000876c:	e8 7f 7e ff ff       	call   c00005f0 <strcmp>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	85 c0                	test   eax,eax
c0008776:	0f 94 c0             	sete   al
c0008779:	84 c0                	test   al,al
c000877b:	74 0b                	je     c0008788 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c000877d:	b8 a0 fa 01 c0       	mov    eax,0xc001faa0
c0008782:	e9 c1 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008787:	90                   	nop
c0008788:	83 ec 08             	sub    esp,0x8
c000878b:	68 33 0e 02 c0       	push   0xc0020e33
c0008790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008794:	e8 57 7e ff ff       	call   c00005f0 <strcmp>
c0008799:	83 c4 10             	add    esp,0x10
c000879c:	85 c0                	test   eax,eax
c000879e:	0f 94 c0             	sete   al
c00087a1:	84 c0                	test   al,al
c00087a3:	74 0b                	je     c00087b0 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c00087a5:	b8 d4 f7 01 c0       	mov    eax,0xc001f7d4
c00087aa:	e9 99 00 00 00       	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087af:	90                   	nop
c00087b0:	83 ec 08             	sub    esp,0x8
c00087b3:	68 3c 0e 02 c0       	push   0xc0020e3c
c00087b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087bc:	e8 2f 7e ff ff       	call   c00005f0 <strcmp>
c00087c1:	83 c4 10             	add    esp,0x10
c00087c4:	85 c0                	test   eax,eax
c00087c6:	0f 94 c0             	sete   al
c00087c9:	84 c0                	test   al,al
c00087cb:	74 07                	je     c00087d4 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00087cd:	b8 a0 fb 01 c0       	mov    eax,0xc001fba0
c00087d2:	eb 74                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087d4:	83 ec 08             	sub    esp,0x8
c00087d7:	68 46 0e 02 c0       	push   0xc0020e46
c00087dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087e0:	e8 0b 7e ff ff       	call   c00005f0 <strcmp>
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	85 c0                	test   eax,eax
c00087ea:	0f 94 c0             	sete   al
c00087ed:	84 c0                	test   al,al
c00087ef:	74 07                	je     c00087f8 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00087f1:	b8 20 f9 01 c0       	mov    eax,0xc001f920
c00087f6:	eb 50                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00087f8:	83 ec 08             	sub    esp,0x8
c00087fb:	68 4f 0e 02 c0       	push   0xc0020e4f
c0008800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008804:	e8 e7 7d ff ff       	call   c00005f0 <strcmp>
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	85 c0                	test   eax,eax
c000880e:	0f 94 c0             	sete   al
c0008811:	84 c0                	test   al,al
c0008813:	74 07                	je     c000881c <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008815:	b8 ac 3f 02 c0       	mov    eax,0xc0023fac
c000881a:	eb 2c                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000881c:	83 ec 08             	sub    esp,0x8
c000881f:	68 5c 0e 02 c0       	push   0xc0020e5c
c0008824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008828:	e8 c3 7d ff ff       	call   c00005f0 <strcmp>
c000882d:	83 c4 10             	add    esp,0x10
c0008830:	85 c0                	test   eax,eax
c0008832:	0f 94 c0             	sete   al
c0008835:	84 c0                	test   al,al
c0008837:	74 07                	je     c0008840 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008839:	b8 ad 3f 02 c0       	mov    eax,0xc0023fad
c000883e:	eb 08                	jmp    c0008848 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008840:	b8 00 00 00 00       	mov    eax,0x0
c0008845:	8d 76 00             	lea    esi,[esi+0x0]
c0008848:	83 c4 0c             	add    esp,0xc
c000884b:	c3                   	ret    

c000884c <Computer::close(int, int, void*)>:
c000884c:	57                   	push   edi
c000884d:	56                   	push   esi
c000884e:	53                   	push   ebx
c000884f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008853:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008857:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000885b:	83 ec 0c             	sub    esp,0xc
c000885e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008864:	e8 5f 54 00 00       	call   c000dcc8 <Device::closeAll()>
c0008869:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000886f:	83 c4 10             	add    esp,0x10
c0008872:	8b 10                	mov    edx,DWORD PTR [eax]
c0008874:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008878:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008880:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008884:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008888:	5b                   	pop    ebx
c0008889:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000888c:	5e                   	pop    esi
c000888d:	5f                   	pop    edi
c000888e:	ff e0                	jmp    eax

c0008890 <Krnl::firstTask()>:
c0008890:	53                   	push   ebx
c0008891:	83 ec 14             	sub    esp,0x14
c0008894:	fb                   	sti    
c0008895:	68 69 0e 02 c0       	push   0xc0020e69
c000889a:	e8 3a 0f 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c000889f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c00088a6:	e8 d4 0e 00 00       	call   c000977f <malloc>
c00088ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00088b2:	89 c3                	mov    ebx,eax
c00088b4:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c00088ba:	68 82 0e 02 c0       	push   0xc0020e82
c00088bf:	6a 01                	push   0x1
c00088c1:	50                   	push   eax
c00088c2:	e8 4d ce 00 00       	call   c0015714 <Process::Process(bool, char const*, Process*, char**)>
c00088c7:	83 c4 20             	add    esp,0x20
c00088ca:	68 ff 00 00 00       	push   0xff
c00088cf:	6a 00                	push   0x0
c00088d1:	68 c9 91 00 c0       	push   0xc00091c9
c00088d6:	53                   	push   ebx
c00088d7:	e8 40 d0 00 00       	call   c001591c <Process::createThread(void (*)(void*), void*, int)>
c00088dc:	6a 7a                	push   0x7a
c00088de:	6a 00                	push   0x0
c00088e0:	68 60 63 01 c0       	push   0xc0016360
c00088e5:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c00088eb:	e8 2c d0 00 00       	call   c001591c <Process::createThread(void (*)(void*), void*, int)>
c00088f0:	83 c4 14             	add    esp,0x14
c00088f3:	a3 68 74 02 c0       	mov    ds:0xc0027468,eax
c00088f8:	68 80 0f 02 c0       	push   0xc0020f80
c00088fd:	c6 05 ad 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fad,0x1
c0008904:	e8 d0 0e 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0008909:	e8 2d de 00 00       	call   c001673b <Vm::initialise8086()>
c000890e:	e8 45 41 00 00       	call   c000ca58 <Fs::initVFS()>
c0008913:	c7 04 24 8f 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e8f
c000891a:	e8 ba 0e 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c000891f:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0008924:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000892a:	8b 10                	mov    edx,DWORD PTR [eax]
c000892c:	6a 00                	push   0x0
c000892e:	6a 00                	push   0x0
c0008930:	6a 00                	push   0x0
c0008932:	50                   	push   eax
c0008933:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008936:	83 c4 14             	add    esp,0x14
c0008939:	68 80 0f 02 c0       	push   0xc0020f80
c000893e:	e8 96 0e 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0008943:	e8 49 b6 00 00       	call   c0013f91 <Sys::loadSyscalls()>
c0008948:	e8 ad 9b 00 00       	call   c00124fa <Krnl::loadSystemEnv()>
c000894d:	e8 ff 9f 00 00       	call   c0012951 <Krnl::setupPowerManager()>
c0008952:	83 c4 0c             	add    esp,0xc
c0008955:	6a 3a                	push   0x3a
c0008957:	68 a9 0e 02 c0       	push   0xc0020ea9
c000895c:	68 b2 0e 02 c0       	push   0xc0020eb2
c0008961:	e8 15 a5 00 00       	call   c0012e7b <Reg::readIntWithDefault(char*, char*, int)>
c0008966:	89 04 24             	mov    DWORD PTR [esp],eax
c0008969:	e8 46 4c 00 00       	call   c000d5b4 <User::loadClockSettings(int)>
c000896e:	c7 04 24 a4 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fa4
c0008975:	e8 5f 0e 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c000897a:	58                   	pop    eax
c000897b:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0008980:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008986:	e8 fd 52 00 00       	call   c000dc88 <Device::loadDriversForAll()>
c000898b:	c7 04 24 ba 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eba
c0008992:	e8 42 0e 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0008997:	e8 c6 96 00 00       	call   c0012062 <Krnl::startCPUs()>
c000899c:	c7 04 24 d4 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ed4
c00089a3:	e8 31 0e 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c00089a8:	5a                   	pop    edx
c00089a9:	8b 1d a8 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fa8
c00089af:	59                   	pop    ecx
c00089b0:	6a 01                	push   0x1
c00089b2:	68 e5 0e 02 c0       	push   0xc0020ee5
c00089b7:	e8 9b c7 00 00       	call   c0015157 <Thr::loadDLL(char const*, bool)>
c00089bc:	5a                   	pop    edx
c00089bd:	59                   	pop    ecx
c00089be:	53                   	push   ebx
c00089bf:	50                   	push   eax
c00089c0:	e8 c3 c9 00 00       	call   c0015388 <Thr::executeDLL(unsigned long, void*)>
c00089c5:	83 c4 10             	add    esp,0x10
c00089c8:	83 ec 0c             	sub    esp,0xc
c00089cb:	6a 02                	push   0x2
c00089cd:	e8 5e d3 00 00       	call   c0015d30 <blockTask(TaskState)>
c00089d2:	83 c4 10             	add    esp,0x10
c00089d5:	eb f1                	jmp    c00089c8 <Krnl::firstTask()+0x138>
c00089d7:	90                   	nop

c00089d8 <Computer::Computer()>:
c00089d8:	83 ec 0c             	sub    esp,0xc
c00089db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089df:	83 ec 08             	sub    esp,0x8
c00089e2:	68 01 0f 02 c0       	push   0xc0020f01
c00089e7:	50                   	push   eax
c00089e8:	e8 55 53 00 00       	call   c000dd42 <Device::Device(char const*)>
c00089ed:	83 c4 10             	add    esp,0x10
c00089f0:	ba f0 0f 02 c0       	mov    edx,0xc0020ff0
c00089f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f9:	89 10                	mov    DWORD PTR [eax],edx
c00089fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ff:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a1b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008a21:	83 ca 04             	or     edx,0x4
c0008a24:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a34:	0f b6 d0             	movzx  edx,al
c0008a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a46:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a4c:	0f b6 d0             	movzx  edx,al
c0008a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a53:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a62:	8d 50 01             	lea    edx,[eax+0x1]
c0008a65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008a69:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008a6f:	0f b6 d0             	movzx  edx,al
c0008a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a76:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008a7a:	83 e1 3f             	and    ecx,0x3f
c0008a7d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008a8b:	0f b6 d0             	movzx  edx,al
c0008a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a92:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008aa3:	0f b6 d0             	movzx  edx,al
c0008aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aaa:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ab9:	8d 50 01             	lea    edx,[eax+0x1]
c0008abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ac0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ac6:	0f b6 d0             	movzx  edx,al
c0008ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008acd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008ad1:	83 e1 3f             	and    ecx,0x3f
c0008ad4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008adc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ae2:	0f b6 d0             	movzx  edx,al
c0008ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008af4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008afa:	0f b6 d0             	movzx  edx,al
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008b10:	8d 50 01             	lea    edx,[eax+0x1]
c0008b13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008b17:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008b1d:	0f b6 d0             	movzx  edx,al
c0008b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b24:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008b28:	83 e1 3f             	and    ecx,0x3f
c0008b2b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008b2f:	90                   	nop
c0008b30:	83 c4 0c             	add    esp,0xc
c0008b33:	c3                   	ret    

c0008b34 <Computer::setBootMessage(char const*)>:
c0008b34:	c3                   	ret    
c0008b35:	90                   	nop

c0008b36 <Computer::detectFeatures()>:
c0008b36:	55                   	push   ebp
c0008b37:	57                   	push   edi
c0008b38:	56                   	push   esi
c0008b39:	53                   	push   ebx
c0008b3a:	83 ec 1c             	sub    esp,0x1c
c0008b3d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b41:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008b4b:	e8 c9 76 ff ff       	call   c0000219 <detectCPUID>
c0008b50:	85 c0                	test   eax,eax
c0008b52:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b58:	0f 95 c2             	setne  dl
c0008b5b:	83 e0 fd             	and    eax,0xfffffffd
c0008b5e:	d1 e2                	shl    edx,1
c0008b60:	09 d0                	or     eax,edx
c0008b62:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008b68:	a8 02                	test   al,0x2
c0008b6a:	75 46                	jne    c0008bb2 <Computer::detectFeatures()+0x7c>
c0008b6c:	f6 05 c1 3f 02 c0 04 	test   BYTE PTR ds:0xc0023fc1,0x4
c0008b73:	74 07                	je     c0008b7c <Computer::detectFeatures()+0x46>
c0008b75:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008b7c:	e8 e5 6b 01 00       	call   c001f766 <x87Detect>
c0008b81:	83 e0 01             	and    eax,0x1
c0008b84:	c1 e0 04             	shl    eax,0x4
c0008b87:	88 c2                	mov    dl,al
c0008b89:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008b8f:	83 e0 ef             	and    eax,0xffffffef
c0008b92:	09 d0                	or     eax,edx
c0008b94:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008b9a:	a8 10                	test   al,0x10
c0008b9c:	0f 85 2a 01 00 00    	jne    c0008ccc <Computer::detectFeatures()+0x196>
c0008ba2:	84 c0                	test   al,al
c0008ba4:	0f 88 45 01 00 00    	js     c0008cef <Computer::detectFeatures()+0x1b9>
c0008baa:	83 c4 1c             	add    esp,0x1c
c0008bad:	5b                   	pop    ebx
c0008bae:	5e                   	pop    esi
c0008baf:	5f                   	pop    edi
c0008bb0:	5d                   	pop    ebp
c0008bb1:	c3                   	ret    
c0008bb2:	83 ec 0c             	sub    esp,0xc
c0008bb5:	6a 20                	push   0x20
c0008bb7:	e8 e8 86 00 00       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c0008bbc:	83 e0 01             	and    eax,0x1
c0008bbf:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008bc6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008bcc:	83 e0 f7             	and    eax,0xfffffff7
c0008bcf:	09 d0                	or     eax,edx
c0008bd1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008bd7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008bde:	e8 c1 86 00 00       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c0008be3:	83 e0 01             	and    eax,0x1
c0008be6:	88 c2                	mov    dl,al
c0008be8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008bee:	83 e0 fe             	and    eax,0xfffffffe
c0008bf1:	09 d0                	or     eax,edx
c0008bf3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008bf9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008c00:	e8 9f 86 00 00       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c0008c05:	c1 e0 07             	shl    eax,0x7
c0008c08:	88 c2                	mov    dl,al
c0008c0a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008c10:	83 e0 7f             	and    eax,0x7f
c0008c13:	09 d0                	or     eax,edx
c0008c15:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008c1b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008c22:	e8 7d 86 00 00       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c0008c27:	83 c4 10             	add    esp,0x10
c0008c2a:	83 e0 01             	and    eax,0x1
c0008c2d:	c1 e0 05             	shl    eax,0x5
c0008c30:	88 c2                	mov    dl,al
c0008c32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c38:	83 e0 df             	and    eax,0xffffffdf
c0008c3b:	09 d0                	or     eax,edx
c0008c3d:	f7 05 c0 3f 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023fc0,0x401
c0008c47:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c4d:	0f 84 c2 00 00 00    	je     c0008d15 <Computer::detectFeatures()+0x1df>
c0008c53:	83 e0 fe             	and    eax,0xfffffffe
c0008c56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c5c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008c62:	88 c2                	mov    dl,al
c0008c64:	83 e2 09             	and    edx,0x9
c0008c67:	fe ca                	dec    dl
c0008c69:	75 09                	jne    c0008c74 <Computer::detectFeatures()+0x13e>
c0008c6b:	83 e0 fe             	and    eax,0xfffffffe
c0008c6e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008c7b:	50                   	push   eax
c0008c7c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008c80:	55                   	push   ebp
c0008c81:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008c85:	57                   	push   edi
c0008c86:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008c8a:	56                   	push   esi
c0008c8b:	68 00 00 00 80       	push   0x80000000
c0008c90:	e8 8b 85 00 00       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008c95:	83 c4 20             	add    esp,0x20
c0008c98:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008c9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008ca3:	0f 86 c3 fe ff ff    	jbe    c0008b6c <Computer::detectFeatures()+0x36>
c0008ca9:	83 ec 0c             	sub    esp,0xc
c0008cac:	50                   	push   eax
c0008cad:	55                   	push   ebp
c0008cae:	57                   	push   edi
c0008caf:	56                   	push   esi
c0008cb0:	68 01 00 00 80       	push   0x80000001
c0008cb5:	e8 66 85 00 00       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008cba:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008cc4:	83 c4 20             	add    esp,0x20
c0008cc7:	e9 a0 fe ff ff       	jmp    c0008b6c <Computer::detectFeatures()+0x36>
c0008ccc:	e8 4f 6a 01 00       	call   c001f720 <absolutelyNoChanceInHell>
c0008cd1:	88 c2                	mov    dl,al
c0008cd3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008cd9:	c1 e2 07             	shl    edx,0x7
c0008cdc:	83 e0 7f             	and    eax,0x7f
c0008cdf:	09 d0                	or     eax,edx
c0008ce1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ce7:	84 c0                	test   al,al
c0008ce9:	0f 89 bb fe ff ff    	jns    c0008baa <Computer::detectFeatures()+0x74>
c0008cef:	e8 ac 67 01 00       	call   c001f4a0 <avxDetect>
c0008cf4:	83 e0 01             	and    eax,0x1
c0008cf7:	c1 e0 05             	shl    eax,0x5
c0008cfa:	88 c2                	mov    dl,al
c0008cfc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008d02:	83 e0 df             	and    eax,0xffffffdf
c0008d05:	09 d0                	or     eax,edx
c0008d07:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008d0d:	83 c4 1c             	add    esp,0x1c
c0008d10:	5b                   	pop    ebx
c0008d11:	5e                   	pop    esi
c0008d12:	5f                   	pop    edi
c0008d13:	5d                   	pop    ebp
c0008d14:	c3                   	ret    
c0008d15:	83 ec 0c             	sub    esp,0xc
c0008d18:	68 00 02 00 00       	push   0x200
c0008d1d:	e8 82 85 00 00       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	83 e0 01             	and    eax,0x1
c0008d28:	88 c2                	mov    dl,al
c0008d2a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d30:	83 e0 fe             	and    eax,0xfffffffe
c0008d33:	09 d0                	or     eax,edx
c0008d35:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d3b:	e9 1c ff ff ff       	jmp    c0008c5c <Computer::detectFeatures()+0x126>

c0008d40 <Computer::displayFeatures()>:
c0008d40:	c3                   	ret    
c0008d41:	90                   	nop

c0008d42 <Computer::rdmsr(unsigned int)>:
c0008d42:	83 ec 0c             	sub    esp,0xc
c0008d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d49:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d50:	74 0a                	je     c0008d5c <Computer::rdmsr(unsigned int)+0x1a>
c0008d52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d56:	0f 32                	rdmsr  
c0008d58:	83 c4 0c             	add    esp,0xc
c0008d5b:	c3                   	ret    
c0008d5c:	83 ec 0c             	sub    esp,0xc
c0008d5f:	68 0a 0f 02 c0       	push   0xc0020f0a
c0008d64:	e8 9a 98 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0008d69:	83 c4 10             	add    esp,0x10
c0008d6c:	eb e4                	jmp    c0008d52 <Computer::rdmsr(unsigned int)+0x10>

c0008d6e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008d6e:	57                   	push   edi
c0008d6f:	56                   	push   esi
c0008d70:	52                   	push   edx
c0008d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d75:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008d79:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008d7d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008d84:	74 0e                	je     c0008d94 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008d86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d8a:	89 f0                	mov    eax,esi
c0008d8c:	89 fa                	mov    edx,edi
c0008d8e:	0f 30                	wrmsr  
c0008d90:	58                   	pop    eax
c0008d91:	5e                   	pop    esi
c0008d92:	5f                   	pop    edi
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	68 10 0f 02 c0       	push   0xc0020f10
c0008d9c:	e8 62 98 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	eb e0                	jmp    c0008d86 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008da6 <Computer::shutdown()>:
c0008da6:	83 ec 0c             	sub    esp,0xc
c0008da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dad:	8b 10                	mov    edx,DWORD PTR [eax]
c0008daf:	6a 00                	push   0x0
c0008db1:	6a 00                	push   0x0
c0008db3:	6a 00                	push   0x0
c0008db5:	50                   	push   eax
c0008db6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008db9:	83 c4 1c             	add    esp,0x1c
c0008dbc:	c3                   	ret    
c0008dbd:	90                   	nop

c0008dbe <Computer::restart()>:
c0008dbe:	83 ec 0c             	sub    esp,0xc
c0008dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dc7:	6a 00                	push   0x0
c0008dc9:	6a 00                	push   0x0
c0008dcb:	6a 01                	push   0x1
c0008dcd:	50                   	push   eax
c0008dce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008dd1:	83 c4 1c             	add    esp,0x1c
c0008dd4:	c3                   	ret    
c0008dd5:	90                   	nop

c0008dd6 <Computer::sleep()>:
c0008dd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dda:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008de0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008de4:	e9 33 7f 00 00       	jmp    c0010d1c <ACPI::sleep()>
c0008de9:	90                   	nop

c0008dea <Computer::nmiEnabled()>:
c0008dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dee:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008df4:	c3                   	ret    
c0008df5:	90                   	nop

c0008df6 <Computer::readCMOS(unsigned char)>:
c0008df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dfa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008e01:	19 c0                	sbb    eax,eax
c0008e03:	83 e0 80             	and    eax,0xffffff80
c0008e06:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008e0a:	e6 70                	out    0x70,al
c0008e0c:	e4 71                	in     al,0x71
c0008e0e:	c3                   	ret    
c0008e0f:	90                   	nop

c0008e10 <Computer::enableNMI(bool)>:
c0008e10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e18:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008e1e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008e26:	eb ce                	jmp    c0008df6 <Computer::readCMOS(unsigned char)>

c0008e28 <Computer::open(int, int, void*)>:
c0008e28:	56                   	push   esi
c0008e29:	53                   	push   ebx
c0008e2a:	83 ec 10             	sub    esp,0x10
c0008e2d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008e31:	f6 05 c0 3f 02 c0 04 	test   BYTE PTR ds:0xc0023fc0,0x4
c0008e38:	68 16 0f 02 c0       	push   0xc0020f16
c0008e3d:	0f 94 05 e0 38 02 c0 	sete   BYTE PTR ds:0xc00238e0
c0008e44:	e8 90 09 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0008e49:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0008e50:	e8 2a 09 00 00       	call   c000977f <malloc>
c0008e55:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e58:	89 c6                	mov    esi,eax
c0008e5a:	e8 61 7a 00 00       	call   c00108c0 <ACPI::ACPI()>
c0008e5f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0008e65:	58                   	pop    eax
c0008e66:	5a                   	pop    edx
c0008e67:	56                   	push   esi
c0008e68:	53                   	push   ebx
c0008e69:	e8 d0 4c 00 00       	call   c000db3e <Device::addChild(Device*)>
c0008e6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008e71:	e8 c0 fc ff ff       	call   c0008b36 <Computer::detectFeatures()>
c0008e76:	59                   	pop    ecx
c0008e77:	5e                   	pop    esi
c0008e78:	6a 01                	push   0x1
c0008e7a:	53                   	push   ebx
c0008e7b:	e8 90 ff ff ff       	call   c0008e10 <Computer::enableNMI(bool)>
c0008e80:	c7 04 24 ba 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eba
c0008e87:	e8 4d 09 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0008e8c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0008e93:	e8 e7 08 00 00       	call   c000977f <malloc>
c0008e98:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e9b:	89 c6                	mov    esi,eax
c0008e9d:	e8 ba 84 00 00       	call   c001135c <CPU::CPU()>
c0008ea2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0008ea8:	58                   	pop    eax
c0008ea9:	5a                   	pop    edx
c0008eaa:	56                   	push   esi
c0008eab:	53                   	push   ebx
c0008eac:	e8 8d 4c 00 00       	call   c000db3e <Device::addChild(Device*)>
c0008eb1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0008eb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008eb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008ebd:	6a 00                	push   0x0
c0008ebf:	6a 00                	push   0x0
c0008ec1:	50                   	push   eax
c0008ec2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008ec5:	83 c4 14             	add    esp,0x14
c0008ec8:	68 c4 0f 02 c0       	push   0xc0020fc4
c0008ecd:	e8 07 09 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0008ed2:	e8 2d f9 00 00       	call   c0018804 <Hal::initialiseCoprocessor()>
c0008ed7:	c7 04 24 2e 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f2e
c0008ede:	e8 f6 08 00 00       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0008ee3:	c7 04 24 90 88 00 c0 	mov    DWORD PTR [esp],0xc0008890
c0008eea:	e8 41 cb 00 00       	call   c0015a30 <setupMultitasking(void (*)())>
c0008eef:	83 c4 14             	add    esp,0x14
c0008ef2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0008ef7:	5b                   	pop    ebx
c0008ef8:	5e                   	pop    esi
c0008ef9:	c3                   	ret    

c0008efa <Computer::disableNMI()>:
c0008efa:	6a 00                	push   0x0
c0008efc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0008f00:	e8 0b ff ff ff       	call   c0008e10 <Computer::enableNMI(bool)>
c0008f05:	58                   	pop    eax
c0008f06:	5a                   	pop    edx
c0008f07:	c3                   	ret    

c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0008f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f0c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f13:	19 c0                	sbb    eax,eax
c0008f15:	83 e0 80             	and    eax,0xffffff80
c0008f18:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008f1c:	e6 70                	out    0x70,al
c0008f1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008f22:	e6 71                	out    0x71,al
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <Computer::handleNMI()>:
c0008f26:	56                   	push   esi
c0008f27:	53                   	push   ebx
c0008f28:	83 ec 10             	sub    esp,0x10
c0008f2b:	e4 92                	in     al,0x92
c0008f2d:	89 c6                	mov    esi,eax
c0008f2f:	e4 61                	in     al,0x61
c0008f31:	68 49 0f 02 c0       	push   0xc0020f49
c0008f36:	88 c3                	mov    bl,al
c0008f38:	e8 84 37 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	83 e6 10             	and    esi,0x10
c0008f43:	75 0d                	jne    c0008f52 <Computer::handleNMI()+0x2c>
c0008f45:	f6 c3 40             	test   bl,0x40
c0008f48:	75 1d                	jne    c0008f67 <Computer::handleNMI()+0x41>
c0008f4a:	84 db                	test   bl,bl
c0008f4c:	78 2d                	js     c0008f7b <Computer::handleNMI()+0x55>
c0008f4e:	58                   	pop    eax
c0008f4f:	5b                   	pop    ebx
c0008f50:	5e                   	pop    esi
c0008f51:	c3                   	ret    
c0008f52:	83 ec 0c             	sub    esp,0xc
c0008f55:	68 5a 0f 02 c0       	push   0xc0020f5a
c0008f5a:	e8 a4 96 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0008f5f:	83 c4 10             	add    esp,0x10
c0008f62:	f6 c3 40             	test   bl,0x40
c0008f65:	74 e3                	je     c0008f4a <Computer::handleNMI()+0x24>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	68 67 0f 02 c0       	push   0xc0020f67
c0008f6f:	e8 8f 96 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0008f74:	83 c4 10             	add    esp,0x10
c0008f77:	84 db                	test   bl,bl
c0008f79:	79 d3                	jns    c0008f4e <Computer::handleNMI()+0x28>
c0008f7b:	c7 44 24 10 71 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f71
c0008f83:	5a                   	pop    edx
c0008f84:	5b                   	pop    ebx
c0008f85:	5e                   	pop    esi
c0008f86:	e9 78 96 00 00       	jmp    c0012603 <Krnl::panic(char const*)>
c0008f8b:	90                   	nop

c0008f8c <Computer::setDiskActivityLight(int, bool)>:
c0008f8c:	56                   	push   esi
c0008f8d:	53                   	push   ebx
c0008f8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008f92:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0008f97:	77 1b                	ja     c0008fb4 <Computer::setDiskActivityLight(int, bool)+0x28>
c0008f99:	e4 92                	in     al,0x92
c0008f9b:	bb 40 00 00 00       	mov    ebx,0x40
c0008fa0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0008fa4:	89 da                	mov    edx,ebx
c0008fa6:	d3 e2                	shl    edx,cl
c0008fa8:	89 f1                	mov    ecx,esi
c0008faa:	f7 d2                	not    edx
c0008fac:	d3 e3                	shl    ebx,cl
c0008fae:	21 d0                	and    eax,edx
c0008fb0:	09 d8                	or     eax,ebx
c0008fb2:	e6 92                	out    0x92,al
c0008fb4:	5b                   	pop    ebx
c0008fb5:	5e                   	pop    esi
c0008fb6:	c3                   	ret    
c0008fb7:	90                   	nop

c0008fb8 <GDTEntry::setBase(unsigned int)>:
c0008fb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008fc0:	89 c1                	mov    ecx,eax
c0008fc2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0008fc6:	c1 e9 10             	shr    ecx,0x10
c0008fc9:	c1 e8 18             	shr    eax,0x18
c0008fcc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0008fcf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0008fd2:	c3                   	ret    
c0008fd3:	90                   	nop

c0008fd4 <GDTEntry::setLimit(unsigned int)>:
c0008fd4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008fd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fdc:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0008fdf:	66 89 01             	mov    WORD PTR [ecx],ax
c0008fe2:	83 e2 f0             	and    edx,0xfffffff0
c0008fe5:	c1 e8 10             	shr    eax,0x10
c0008fe8:	83 e0 0f             	and    eax,0xf
c0008feb:	09 d0                	or     eax,edx
c0008fed:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <GDT::GDT()>:
c0008ff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009000:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009006:	90                   	nop
c0009007:	c3                   	ret    

c0009008 <GDT::addEntry(GDTEntry)>:
c0009008:	53                   	push   ebx
c0009009:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000900d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009011:	8b 02                	mov    eax,DWORD PTR [edx]
c0009013:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009017:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000901b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000901f:	8d 48 01             	lea    ecx,[eax+0x1]
c0009022:	c1 e0 03             	shl    eax,0x3
c0009025:	89 0a                	mov    DWORD PTR [edx],ecx
c0009027:	5b                   	pop    ebx
c0009028:	c3                   	ret    
c0009029:	90                   	nop

c000902a <GDT::getNumberOfEntries()>:
c000902a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000902e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009030:	c3                   	ret    
c0009031:	90                   	nop

c0009032 <GDT::flush()>:
c0009032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009036:	8b 10                	mov    edx,DWORD PTR [eax]
c0009038:	83 c0 04             	add    eax,0x4
c000903b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009042:	a3 b2 3f 02 c0       	mov    ds:0xc0023fb2,eax
c0009047:	66 89 15 b0 3f 02 c0 	mov    WORD PTR ds:0xc0023fb0,dx
c000904e:	e9 2a 73 ff ff       	jmp    c000037d <loadGDT>
c0009053:	90                   	nop

c0009054 <GDT::setup()>:
c0009054:	57                   	push   edi
c0009055:	56                   	push   esi
c0009056:	53                   	push   ebx
c0009057:	83 ec 40             	sub    esp,0x40
c000905a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000905e:	6a 00                	push   0x0
c0009060:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0009064:	56                   	push   esi
c0009065:	e8 4e ff ff ff       	call   c0008fb8 <GDTEntry::setBase(unsigned int)>
c000906a:	6a 00                	push   0x0
c000906c:	56                   	push   esi
c000906d:	e8 62 ff ff ff       	call   c0008fd4 <GDTEntry::setLimit(unsigned int)>
c0009072:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c000907a:	6a 00                	push   0x0
c000907c:	8d 74 24 44          	lea    esi,[esp+0x44]
c0009080:	56                   	push   esi
c0009081:	e8 32 ff ff ff       	call   c0008fb8 <GDTEntry::setBase(unsigned int)>
c0009086:	68 ff ff ff 00       	push   0xffffff
c000908b:	56                   	push   esi
c000908c:	e8 43 ff ff ff       	call   c0008fd4 <GDTEntry::setLimit(unsigned int)>
c0009091:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0009095:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000909a:	0d 00 9a c0 00       	or     eax,0xc09a00
c000909f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00090a3:	83 c4 20             	add    esp,0x20
c00090a6:	6a 00                	push   0x0
c00090a8:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00090ac:	56                   	push   esi
c00090ad:	e8 06 ff ff ff       	call   c0008fb8 <GDTEntry::setBase(unsigned int)>
c00090b2:	68 ff ff ff 00       	push   0xffffff
c00090b7:	56                   	push   esi
c00090b8:	e8 17 ff ff ff       	call   c0008fd4 <GDTEntry::setLimit(unsigned int)>
c00090bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00090c1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00090c5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00090c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00090cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090d1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00090d6:	0d 00 92 c0 00       	or     eax,0xc09200
c00090db:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00090df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00090e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00090e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090f3:	89 fa                	mov    edx,edi
c00090f5:	80 cc 60             	or     ah,0x60
c00090f8:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c00090fe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009102:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009106:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000910a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000910e:	80 cc 60             	or     ah,0x60
c0009111:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009115:	89 f8                	mov    eax,edi
c0009117:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000911c:	09 d0                	or     eax,edx
c000911e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0009122:	89 c7                	mov    edi,eax
c0009124:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009128:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000912c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009130:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009134:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c000913a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000913e:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009143:	09 d0                	or     eax,edx
c0009145:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009149:	83 c4 0c             	add    esp,0xc
c000914c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009150:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009154:	53                   	push   ebx
c0009155:	e8 ae fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000915a:	83 c4 0c             	add    esp,0xc
c000915d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009161:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009165:	53                   	push   ebx
c0009166:	e8 9d fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000916b:	83 c4 0c             	add    esp,0xc
c000916e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009172:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0009176:	53                   	push   ebx
c0009177:	e8 8c fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000917c:	83 c4 0c             	add    esp,0xc
c000917f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009183:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009187:	53                   	push   ebx
c0009188:	e8 7b fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000918d:	83 c4 0c             	add    esp,0xc
c0009190:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009194:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009198:	53                   	push   ebx
c0009199:	e8 6a fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000919e:	83 c4 0c             	add    esp,0xc
c00091a1:	57                   	push   edi
c00091a2:	56                   	push   esi
c00091a3:	53                   	push   ebx
c00091a4:	e8 5f fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c00091a9:	83 c4 0c             	add    esp,0xc
c00091ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091b4:	53                   	push   ebx
c00091b5:	e8 4e fe ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c00091ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00091bd:	e8 70 fe ff ff       	call   c0009032 <GDT::flush()>
c00091c2:	83 c4 50             	add    esp,0x50
c00091c5:	5b                   	pop    ebx
c00091c6:	5e                   	pop    esi
c00091c7:	5f                   	pop    edi
c00091c8:	c3                   	ret    

c00091c9 <idleFunction(void*)>:
c00091c9:	83 ec 0c             	sub    esp,0xc
c00091cc:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00091d1:	48                   	dec    eax
c00091d2:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00091d7:	75 01                	jne    c00091da <idleFunction(void*)+0x11>
c00091d9:	fb                   	sti    
c00091da:	f4                   	hlt    
c00091db:	e8 42 6b 01 00       	call   c001fd22 <idleCommon()>
c00091e0:	eb f8                	jmp    c00091da <idleFunction(void*)+0x11>
c00091e2:	66 90                	xchg   ax,ax

c00091e4 <IDTEntry::IDTEntry(bool)>:
c00091e4:	83 ec 04             	sub    esp,0x4
c00091e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091eb:	88 04 24             	mov    BYTE PTR [esp],al
c00091ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091f2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00091f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091fc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009204:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009207:	83 e2 f0             	and    edx,0xfffffff0
c000920a:	83 ca 0e             	or     edx,0xe
c000920d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009214:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009217:	83 e2 ef             	and    edx,0xffffffef
c000921a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000921d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009221:	74 05                	je     c0009228 <IDTEntry::IDTEntry(bool)+0x44>
c0009223:	b2 03                	mov    dl,0x3
c0009225:	eb 05                	jmp    c000922c <IDTEntry::IDTEntry(bool)+0x48>
c0009227:	90                   	nop
c0009228:	b2 00                	mov    dl,0x0
c000922a:	66 90                	xchg   ax,ax
c000922c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009230:	83 e2 03             	and    edx,0x3
c0009233:	88 d1                	mov    cl,dl
c0009235:	c1 e1 05             	shl    ecx,0x5
c0009238:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000923b:	83 e2 9f             	and    edx,0xffffff9f
c000923e:	09 ca                	or     edx,ecx
c0009240:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009243:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009247:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000924a:	83 ca 80             	or     edx,0xffffff80
c000924d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009250:	90                   	nop
c0009251:	83 c4 04             	add    esp,0x4
c0009254:	c3                   	ret    
c0009255:	90                   	nop

c0009256 <IDTEntry::setOffset(unsigned int)>:
c0009256:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000925a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000925e:	66 89 02             	mov    WORD PTR [edx],ax
c0009261:	c1 e8 10             	shr    eax,0x10
c0009264:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0009268:	c3                   	ret    
c0009269:	90                   	nop
c000926a:	66 90                	xchg   ax,ax

c000926c <IDT::IDT()>:
c000926c:	90                   	nop
c000926d:	c3                   	ret    

c000926e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000926e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009272:	83 c0 30             	add    eax,0x30
c0009275:	c3                   	ret    

c0009276 <IDT::addEntry(IDTEntry, int)>:
c0009276:	53                   	push   ebx
c0009277:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000927b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000927f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009283:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009287:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000928a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000928e:	5b                   	pop    ebx
c000928f:	c3                   	ret    

c0009290 <IDT::addEntry(int, void (*)(), bool)>:
c0009290:	53                   	push   ebx
c0009291:	83 ec 10             	sub    esp,0x10
c0009294:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009299:	50                   	push   eax
c000929a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000929e:	53                   	push   ebx
c000929f:	e8 40 ff ff ff       	call   c00091e4 <IDTEntry::IDTEntry(bool)>
c00092a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092a8:	53                   	push   ebx
c00092a9:	e8 a8 ff ff ff       	call   c0009256 <IDTEntry::setOffset(unsigned int)>
c00092ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00092b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00092be:	e8 b3 ff ff ff       	call   c0009276 <IDT::addEntry(IDTEntry, int)>
c00092c3:	83 c4 30             	add    esp,0x30
c00092c6:	5b                   	pop    ebx
c00092c7:	c3                   	ret    

c00092c8 <IDT::flush()>:
c00092c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092cc:	66 c7 05 b8 3f 02 c0 ff 07 	mov    WORD PTR ds:0xc0023fb8,0x7ff
c00092d5:	a3 ba 3f 02 c0       	mov    ds:0xc0023fba,eax
c00092da:	0f 01 1d b8 3f 02 c0 	lidtd  ds:0xc0023fb8
c00092e1:	c3                   	ret    

c00092e2 <IDT::setup()>:
c00092e2:	57                   	push   edi
c00092e3:	56                   	push   esi
c00092e4:	53                   	push   ebx
c00092e5:	83 ec 10             	sub    esp,0x10
c00092e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00092ec:	6a 00                	push   0x0
c00092ee:	68 30 f5 01 c0       	push   0xc001f530
c00092f3:	6a 00                	push   0x0
c00092f5:	53                   	push   ebx
c00092f6:	e8 95 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00092fb:	6a 00                	push   0x0
c00092fd:	68 40 f5 01 c0       	push   0xc001f540
c0009302:	6a 01                	push   0x1
c0009304:	53                   	push   ebx
c0009305:	e8 86 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000930a:	83 c4 20             	add    esp,0x20
c000930d:	6a 00                	push   0x0
c000930f:	68 4a f5 01 c0       	push   0xc001f54a
c0009314:	6a 02                	push   0x2
c0009316:	53                   	push   ebx
c0009317:	e8 74 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000931c:	6a 00                	push   0x0
c000931e:	68 54 f5 01 c0       	push   0xc001f554
c0009323:	6a 03                	push   0x3
c0009325:	53                   	push   ebx
c0009326:	e8 65 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000932b:	83 c4 20             	add    esp,0x20
c000932e:	6a 00                	push   0x0
c0009330:	68 5e f5 01 c0       	push   0xc001f55e
c0009335:	6a 04                	push   0x4
c0009337:	53                   	push   ebx
c0009338:	e8 53 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000933d:	6a 00                	push   0x0
c000933f:	68 68 f5 01 c0       	push   0xc001f568
c0009344:	6a 05                	push   0x5
c0009346:	53                   	push   ebx
c0009347:	e8 44 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000934c:	83 c4 20             	add    esp,0x20
c000934f:	6a 00                	push   0x0
c0009351:	68 72 f5 01 c0       	push   0xc001f572
c0009356:	6a 06                	push   0x6
c0009358:	53                   	push   ebx
c0009359:	e8 32 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000935e:	6a 00                	push   0x0
c0009360:	68 7c f5 01 c0       	push   0xc001f57c
c0009365:	6a 07                	push   0x7
c0009367:	53                   	push   ebx
c0009368:	e8 23 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000936d:	83 c4 20             	add    esp,0x20
c0009370:	6a 00                	push   0x0
c0009372:	68 86 f5 01 c0       	push   0xc001f586
c0009377:	6a 08                	push   0x8
c0009379:	53                   	push   ebx
c000937a:	e8 11 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000937f:	6a 00                	push   0x0
c0009381:	68 8e f5 01 c0       	push   0xc001f58e
c0009386:	6a 09                	push   0x9
c0009388:	53                   	push   ebx
c0009389:	e8 02 ff ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000938e:	83 c4 20             	add    esp,0x20
c0009391:	6a 00                	push   0x0
c0009393:	68 98 f5 01 c0       	push   0xc001f598
c0009398:	6a 0a                	push   0xa
c000939a:	53                   	push   ebx
c000939b:	e8 f0 fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093a0:	6a 00                	push   0x0
c00093a2:	68 a0 f5 01 c0       	push   0xc001f5a0
c00093a7:	6a 0b                	push   0xb
c00093a9:	53                   	push   ebx
c00093aa:	e8 e1 fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093af:	83 c4 20             	add    esp,0x20
c00093b2:	6a 00                	push   0x0
c00093b4:	68 a8 f5 01 c0       	push   0xc001f5a8
c00093b9:	6a 0c                	push   0xc
c00093bb:	53                   	push   ebx
c00093bc:	e8 cf fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093c1:	6a 00                	push   0x0
c00093c3:	68 b0 f5 01 c0       	push   0xc001f5b0
c00093c8:	6a 0d                	push   0xd
c00093ca:	53                   	push   ebx
c00093cb:	e8 c0 fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093d0:	83 c4 20             	add    esp,0x20
c00093d3:	6a 00                	push   0x0
c00093d5:	68 b8 f5 01 c0       	push   0xc001f5b8
c00093da:	6a 0e                	push   0xe
c00093dc:	53                   	push   ebx
c00093dd:	e8 ae fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093e2:	6a 00                	push   0x0
c00093e4:	68 c0 f5 01 c0       	push   0xc001f5c0
c00093e9:	6a 0f                	push   0xf
c00093eb:	53                   	push   ebx
c00093ec:	e8 9f fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00093f1:	83 c4 20             	add    esp,0x20
c00093f4:	6a 00                	push   0x0
c00093f6:	68 ca f5 01 c0       	push   0xc001f5ca
c00093fb:	6a 10                	push   0x10
c00093fd:	53                   	push   ebx
c00093fe:	e8 8d fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009403:	6a 00                	push   0x0
c0009405:	68 d4 f5 01 c0       	push   0xc001f5d4
c000940a:	6a 11                	push   0x11
c000940c:	53                   	push   ebx
c000940d:	e8 7e fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009412:	83 c4 20             	add    esp,0x20
c0009415:	6a 00                	push   0x0
c0009417:	68 de f5 01 c0       	push   0xc001f5de
c000941c:	6a 12                	push   0x12
c000941e:	53                   	push   ebx
c000941f:	e8 6c fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009424:	6a 01                	push   0x1
c0009426:	68 78 f6 01 c0       	push   0xc001f678
c000942b:	6a 60                	push   0x60
c000942d:	53                   	push   ebx
c000942e:	e8 5d fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009433:	83 c4 20             	add    esp,0x20
c0009436:	6a 00                	push   0x0
c0009438:	68 7f f6 01 c0       	push   0xc001f67f
c000943d:	6a 20                	push   0x20
c000943f:	53                   	push   ebx
c0009440:	e8 4b fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009445:	6a 00                	push   0x0
c0009447:	68 6a f6 01 c0       	push   0xc001f66a
c000944c:	6a 21                	push   0x21
c000944e:	53                   	push   ebx
c000944f:	e8 3c fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009454:	83 c4 20             	add    esp,0x20
c0009457:	6a 00                	push   0x0
c0009459:	68 71 f6 01 c0       	push   0xc001f671
c000945e:	6a 22                	push   0x22
c0009460:	53                   	push   ebx
c0009461:	e8 2a fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009466:	6a 00                	push   0x0
c0009468:	68 e8 f5 01 c0       	push   0xc001f5e8
c000946d:	6a 23                	push   0x23
c000946f:	53                   	push   ebx
c0009470:	e8 1b fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009475:	83 c4 20             	add    esp,0x20
c0009478:	6a 00                	push   0x0
c000947a:	68 f2 f5 01 c0       	push   0xc001f5f2
c000947f:	6a 24                	push   0x24
c0009481:	53                   	push   ebx
c0009482:	e8 09 fe ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009487:	6a 00                	push   0x0
c0009489:	68 fc f5 01 c0       	push   0xc001f5fc
c000948e:	6a 25                	push   0x25
c0009490:	53                   	push   ebx
c0009491:	e8 fa fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c0009496:	83 c4 20             	add    esp,0x20
c0009499:	6a 00                	push   0x0
c000949b:	68 06 f6 01 c0       	push   0xc001f606
c00094a0:	6a 26                	push   0x26
c00094a2:	53                   	push   ebx
c00094a3:	e8 e8 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094a8:	6a 00                	push   0x0
c00094aa:	68 10 f6 01 c0       	push   0xc001f610
c00094af:	6a 27                	push   0x27
c00094b1:	53                   	push   ebx
c00094b2:	e8 d9 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094b7:	83 c4 20             	add    esp,0x20
c00094ba:	6a 00                	push   0x0
c00094bc:	68 1a f6 01 c0       	push   0xc001f61a
c00094c1:	6a 28                	push   0x28
c00094c3:	53                   	push   ebx
c00094c4:	e8 c7 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094c9:	6a 00                	push   0x0
c00094cb:	68 24 f6 01 c0       	push   0xc001f624
c00094d0:	6a 29                	push   0x29
c00094d2:	53                   	push   ebx
c00094d3:	e8 b8 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094d8:	83 c4 20             	add    esp,0x20
c00094db:	6a 00                	push   0x0
c00094dd:	68 2e f6 01 c0       	push   0xc001f62e
c00094e2:	6a 2a                	push   0x2a
c00094e4:	53                   	push   ebx
c00094e5:	e8 a6 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094ea:	6a 00                	push   0x0
c00094ec:	68 38 f6 01 c0       	push   0xc001f638
c00094f1:	6a 2b                	push   0x2b
c00094f3:	53                   	push   ebx
c00094f4:	e8 97 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00094f9:	83 c4 20             	add    esp,0x20
c00094fc:	6a 00                	push   0x0
c00094fe:	68 42 f6 01 c0       	push   0xc001f642
c0009503:	6a 2c                	push   0x2c
c0009505:	53                   	push   ebx
c0009506:	e8 85 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000950b:	6a 00                	push   0x0
c000950d:	68 4c f6 01 c0       	push   0xc001f64c
c0009512:	6a 2d                	push   0x2d
c0009514:	53                   	push   ebx
c0009515:	e8 76 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000951a:	83 c4 20             	add    esp,0x20
c000951d:	6a 00                	push   0x0
c000951f:	68 56 f6 01 c0       	push   0xc001f656
c0009524:	6a 2e                	push   0x2e
c0009526:	53                   	push   ebx
c0009527:	e8 64 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000952c:	6a 00                	push   0x0
c000952e:	68 60 f6 01 c0       	push   0xc001f660
c0009533:	6a 2f                	push   0x2f
c0009535:	53                   	push   ebx
c0009536:	e8 55 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000953b:	83 c4 20             	add    esp,0x20
c000953e:	6a 00                	push   0x0
c0009540:	68 b6 f6 01 c0       	push   0xc001f6b6
c0009545:	6a 30                	push   0x30
c0009547:	53                   	push   ebx
c0009548:	e8 43 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000954d:	6a 00                	push   0x0
c000954f:	68 c0 f6 01 c0       	push   0xc001f6c0
c0009554:	6a 31                	push   0x31
c0009556:	53                   	push   ebx
c0009557:	e8 34 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000955c:	83 c4 20             	add    esp,0x20
c000955f:	6a 00                	push   0x0
c0009561:	68 ca f6 01 c0       	push   0xc001f6ca
c0009566:	6a 32                	push   0x32
c0009568:	53                   	push   ebx
c0009569:	e8 22 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000956e:	6a 00                	push   0x0
c0009570:	68 d4 f6 01 c0       	push   0xc001f6d4
c0009575:	6a 33                	push   0x33
c0009577:	53                   	push   ebx
c0009578:	e8 13 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000957d:	83 c4 20             	add    esp,0x20
c0009580:	6a 00                	push   0x0
c0009582:	68 de f6 01 c0       	push   0xc001f6de
c0009587:	6a 34                	push   0x34
c0009589:	53                   	push   ebx
c000958a:	e8 01 fd ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000958f:	6a 00                	push   0x0
c0009591:	68 e8 f6 01 c0       	push   0xc001f6e8
c0009596:	6a 35                	push   0x35
c0009598:	53                   	push   ebx
c0009599:	e8 f2 fc ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c000959e:	83 c4 20             	add    esp,0x20
c00095a1:	6a 00                	push   0x0
c00095a3:	68 f2 f6 01 c0       	push   0xc001f6f2
c00095a8:	6a 36                	push   0x36
c00095aa:	53                   	push   ebx
c00095ab:	e8 e0 fc ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00095b0:	6a 00                	push   0x0
c00095b2:	68 fc f6 01 c0       	push   0xc001f6fc
c00095b7:	6a 37                	push   0x37
c00095b9:	53                   	push   ebx
c00095ba:	e8 d1 fc ff ff       	call   c0009290 <IDT::addEntry(int, void (*)(), bool)>
c00095bf:	83 c4 1c             	add    esp,0x1c
c00095c2:	6a 03                	push   0x3
c00095c4:	6a 02                	push   0x2
c00095c6:	ff 35 94 40 02 c0    	push   DWORD PTR ds:0xc0024094
c00095cc:	e8 03 25 00 00       	call   c000bad4 <VAS::allocatePages(int, int)>
c00095d1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00095d8:	89 c6                	mov    esi,eax
c00095da:	e8 a0 01 00 00       	call   c000977f <malloc>
c00095df:	81 c6 00 20 00 00    	add    esi,0x2000
c00095e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00095e8:	89 c7                	mov    edi,eax
c00095ea:	e8 b9 16 00 00       	call   c000aca8 <TSS::TSS()>
c00095ef:	83 c4 0c             	add    esp,0xc
c00095f2:	68 86 f5 01 c0       	push   0xc001f586
c00095f7:	56                   	push   esi
c00095f8:	57                   	push   edi
c00095f9:	e8 ee 16 00 00       	call   c000acec <TSS::setup(unsigned long, unsigned long)>
c00095fe:	89 c6                	mov    esi,eax
c0009600:	58                   	pop    eax
c0009601:	5a                   	pop    edx
c0009602:	6a 00                	push   0x0
c0009604:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009608:	50                   	push   eax
c0009609:	e8 d6 fb ff ff       	call   c00091e4 <IDTEntry::IDTEntry(bool)>
c000960e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009612:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009617:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000961e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009624:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009628:	80 ce 05             	or     dh,0x5
c000962b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000962e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009632:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009636:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009639:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000963c:	e8 87 fc ff ff       	call   c00092c8 <IDT::flush()>
c0009641:	83 c4 20             	add    esp,0x20
c0009644:	5b                   	pop    ebx
c0009645:	5e                   	pop    esi
c0009646:	5f                   	pop    edi
c0009647:	c3                   	ret    

c0009648 <sbrk>:
c0009648:	55                   	push   ebp
c0009649:	57                   	push   edi
c000964a:	56                   	push   esi
c000964b:	53                   	push   ebx
c000964c:	83 ec 24             	sub    esp,0x24
c000964f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009653:	53                   	push   ebx
c0009654:	68 14 10 02 c0       	push   0xc0021014
c0009659:	e8 63 30 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000965e:	83 c4 10             	add    esp,0x10
c0009661:	85 db                	test   ebx,ebx
c0009663:	74 5f                	je     c00096c4 <sbrk+0x7c>
c0009665:	78 64                	js     c00096cb <sbrk+0x83>
c0009667:	a1 74 37 02 c0       	mov    eax,ds:0xc0023774
c000966c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009670:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009676:	89 dd                	mov    ebp,ebx
c0009678:	78 69                	js     c00096e3 <sbrk+0x9b>
c000967a:	c1 fd 0c             	sar    ebp,0xc
c000967d:	bb 00 00 00 00       	mov    ebx,0x0
c0009682:	8b 35 94 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024094
c0009688:	8b 3d 74 37 02 c0    	mov    edi,DWORD PTR ds:0xc0023774
c000968e:	e8 1f 05 00 00       	call   c0009bb2 <Phys::allocatePage()>
c0009693:	68 01 04 00 00       	push   0x401
c0009698:	57                   	push   edi
c0009699:	50                   	push   eax
c000969a:	56                   	push   esi
c000969b:	e8 30 23 00 00       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00096a0:	81 05 74 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023774,0x1000
c00096aa:	43                   	inc    ebx
c00096ab:	83 c4 10             	add    esp,0x10
c00096ae:	39 dd                	cmp    ebp,ebx
c00096b0:	75 d0                	jne    c0009682 <sbrk+0x3a>
c00096b2:	0f 20 d8             	mov    eax,cr3
c00096b5:	0f 22 d8             	mov    cr3,eax
c00096b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00096bc:	83 c4 1c             	add    esp,0x1c
c00096bf:	5b                   	pop    ebx
c00096c0:	5e                   	pop    esi
c00096c1:	5f                   	pop    edi
c00096c2:	5d                   	pop    ebp
c00096c3:	c3                   	ret    
c00096c4:	a1 74 37 02 c0       	mov    eax,ds:0xc0023774
c00096c9:	eb f1                	jmp    c00096bc <sbrk+0x74>
c00096cb:	83 ec 08             	sub    esp,0x8
c00096ce:	53                   	push   ebx
c00096cf:	68 40 10 02 c0       	push   0xc0021040
c00096d4:	e8 e8 2f 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00096d9:	83 c4 10             	add    esp,0x10
c00096dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096e1:	eb d9                	jmp    c00096bc <sbrk+0x74>
c00096e3:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c00096e9:	eb 8f                	jmp    c000967a <sbrk+0x32>

c00096eb <mmap>:
c00096eb:	83 ec 18             	sub    esp,0x18
c00096ee:	68 32 10 02 c0       	push   0xc0021032
c00096f3:	e8 0b 8f 00 00       	call   c0012603 <Krnl::panic(char const*)>
c00096f8:	b8 00 00 00 00       	mov    eax,0x0
c00096fd:	83 c4 1c             	add    esp,0x1c
c0009700:	c3                   	ret    

c0009701 <munmap>:
c0009701:	83 ec 18             	sub    esp,0x18
c0009704:	68 37 10 02 c0       	push   0xc0021037
c0009709:	e8 f5 8e 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000970e:	b8 00 00 00 00       	mov    eax,0x0
c0009713:	83 c4 1c             	add    esp,0x1c
c0009716:	c3                   	ret    

c0009717 <liballoc_lock()>:
c0009717:	fa                   	cli    
c0009718:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c000971e:	b8 00 00 00 00       	mov    eax,0x0
c0009723:	c3                   	ret    

c0009724 <liballoc_unlock()>:
c0009724:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0009729:	48                   	dec    eax
c000972a:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000972f:	75 01                	jne    c0009732 <liballoc_unlock()+0xe>
c0009731:	fb                   	sti    
c0009732:	b8 00 00 00 00       	mov    eax,0x0
c0009737:	c3                   	ret    

c0009738 <liballoc_alloc(int)>:
c0009738:	83 ec 10             	sub    esp,0x10
c000973b:	6a 01                	push   0x1
c000973d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009741:	ff 35 94 40 02 c0    	push   DWORD PTR ds:0xc0024094
c0009747:	e8 88 23 00 00       	call   c000bad4 <VAS::allocatePages(int, int)>
c000974c:	83 c4 1c             	add    esp,0x1c
c000974f:	c3                   	ret    

c0009750 <liballoc_free(void*, int)>:
c0009750:	83 ec 14             	sub    esp,0x14
c0009753:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009757:	ff 35 94 40 02 c0    	push   DWORD PTR ds:0xc0024094
c000975d:	e8 1a 20 00 00       	call   c000b77c <VAS::freeAllocatedPages(unsigned long)>
c0009762:	b8 00 00 00 00       	mov    eax,0x0
c0009767:	83 c4 1c             	add    esp,0x1c
c000976a:	c3                   	ret    

c000976b <realloc>:
c000976b:	83 ec 14             	sub    esp,0x14
c000976e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009776:	e8 09 7c ff ff       	call   c0001384 <dlrealloc>
c000977b:	83 c4 1c             	add    esp,0x1c
c000977e:	c3                   	ret    

c000977f <malloc>:
c000977f:	83 ec 18             	sub    esp,0x18
c0009782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009786:	e8 bc 76 ff ff       	call   c0000e47 <dlmalloc>
c000978b:	83 c4 1c             	add    esp,0x1c
c000978e:	c3                   	ret    

c000978f <free>:
c000978f:	83 ec 18             	sub    esp,0x18
c0009792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009796:	e8 51 73 ff ff       	call   c0000aec <dlfree>
c000979b:	83 c4 1c             	add    esp,0x1c
c000979e:	c3                   	ret    

c000979f <rfree>:
c000979f:	83 ec 18             	sub    esp,0x18
c00097a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00097a6:	e8 41 73 ff ff       	call   c0000aec <dlfree>
c00097ab:	83 c4 1c             	add    esp,0x1c
c00097ae:	c3                   	ret    

c00097af <calloc>:
c00097af:	56                   	push   esi
c00097b0:	53                   	push   ebx
c00097b1:	83 ec 10             	sub    esp,0x10
c00097b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00097b8:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00097bd:	53                   	push   ebx
c00097be:	e8 bc ff ff ff       	call   c000977f <malloc>
c00097c3:	89 c6                	mov    esi,eax
c00097c5:	83 c4 0c             	add    esp,0xc
c00097c8:	53                   	push   ebx
c00097c9:	6a 00                	push   0x0
c00097cb:	50                   	push   eax
c00097cc:	e8 d7 6c ff ff       	call   c00004a8 <memset>
c00097d1:	89 f0                	mov    eax,esi
c00097d3:	83 c4 14             	add    esp,0x14
c00097d6:	5b                   	pop    ebx
c00097d7:	5e                   	pop    esi
c00097d8:	c3                   	ret    

c00097d9 <Krnl::setBootMessage(char const*)>:
c00097d9:	57                   	push   edi
c00097da:	56                   	push   esi
c00097db:	53                   	push   ebx
c00097dc:	81 ec a4 00 00 00    	sub    esp,0xa4
c00097e2:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00097e9:	68 9e 00 00 00       	push   0x9e
c00097ee:	6a 00                	push   0x0
c00097f0:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00097f4:	56                   	push   esi
c00097f5:	e8 ae 6c ff ff       	call   c00004a8 <memset>
c00097fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097fd:	e8 c2 6c ff ff       	call   c00004c4 <strlen>
c0009802:	ba 50 00 00 00       	mov    edx,0x50
c0009807:	83 c4 10             	add    esp,0x10
c000980a:	29 c2                	sub    edx,eax
c000980c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009810:	d1 ea                	shr    edx,1
c0009812:	84 c0                	test   al,al
c0009814:	74 19                	je     c000982f <Krnl::setBootMessage(char const*)+0x56>
c0009816:	01 d2                	add    edx,edx
c0009818:	43                   	inc    ebx
c0009819:	01 f2                	add    edx,esi
c000981b:	80 cc 0f             	or     ah,0xf
c000981e:	83 c2 02             	add    edx,0x2
c0009821:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009825:	43                   	inc    ebx
c0009826:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000982b:	84 c0                	test   al,al
c000982d:	75 ec                	jne    c000981b <Krnl::setBootMessage(char const*)+0x42>
c000982f:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009834:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009839:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000983b:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009841:	5b                   	pop    ebx
c0009842:	5e                   	pop    esi
c0009843:	5f                   	pop    edi
c0009844:	c3                   	ret    

c0009845 <kernel_main>:
c0009845:	55                   	push   ebp
c0009846:	57                   	push   edi
c0009847:	bf f9 03 00 00       	mov    edi,0x3f9
c000984c:	56                   	push   esi
c000984d:	89 fa                	mov    edx,edi
c000984f:	53                   	push   ebx
c0009850:	31 f6                	xor    esi,esi
c0009852:	83 ec 38             	sub    esp,0x38
c0009855:	a1 00 05 00 00       	mov    eax,ds:0x500
c000985a:	a3 c0 3f 02 c0       	mov    ds:0xc0023fc0,eax
c000985f:	89 f0                	mov    eax,esi
c0009861:	ee                   	out    dx,al
c0009862:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009867:	b0 80                	mov    al,0x80
c0009869:	89 da                	mov    edx,ebx
c000986b:	ee                   	out    dx,al
c000986c:	b1 03                	mov    cl,0x3
c000986e:	ba f8 03 00 00       	mov    edx,0x3f8
c0009873:	88 c8                	mov    al,cl
c0009875:	ee                   	out    dx,al
c0009876:	89 f0                	mov    eax,esi
c0009878:	89 fa                	mov    edx,edi
c000987a:	ee                   	out    dx,al
c000987b:	88 c8                	mov    al,cl
c000987d:	89 da                	mov    edx,ebx
c000987f:	ee                   	out    dx,al
c0009880:	b0 c7                	mov    al,0xc7
c0009882:	ba fa 03 00 00       	mov    edx,0x3fa
c0009887:	ee                   	out    dx,al
c0009888:	b0 0b                	mov    al,0xb
c000988a:	ba fc 03 00 00       	mov    edx,0x3fc
c000988f:	ee                   	out    dx,al
c0009890:	68 70 10 02 c0       	push   0xc0021070
c0009895:	e8 27 2e 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000989a:	0f be 05 80 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023780
c00098a1:	83 c4 10             	add    esp,0x10
c00098a4:	84 c0                	test   al,al
c00098a6:	74 5c                	je     c0009904 <kernel_main+0xbf>
c00098a8:	31 db                	xor    ebx,ebx
c00098aa:	bd 0a 00 00 00       	mov    ebp,0xa
c00098af:	bf 05 00 00 00       	mov    edi,0x5
c00098b4:	31 f6                	xor    esi,esi
c00098b6:	eb 14                	jmp    c00098cc <kernel_main+0x87>
c00098b8:	47                   	inc    edi
c00098b9:	bd 0a 00 00 00       	mov    ebp,0xa
c00098be:	31 f6                	xor    esi,esi
c00098c0:	43                   	inc    ebx
c00098c1:	0f be 83 80 37 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc880]
c00098c8:	84 c0                	test   al,al
c00098ca:	74 38                	je     c0009904 <kernel_main+0xbf>
c00098cc:	80 be b6 37 02 c0 db 	cmp    BYTE PTR [esi-0x3ffdc84a],0xdb
c00098d3:	0f 84 97 00 00 00    	je     c0009970 <kernel_main+0x12b>
c00098d9:	3c 0d                	cmp    al,0xd
c00098db:	74 e3                	je     c00098c0 <kernel_main+0x7b>
c00098dd:	3c 0a                	cmp    al,0xa
c00098df:	74 d7                	je     c00098b8 <kernel_main+0x73>
c00098e1:	83 ec 0c             	sub    esp,0xc
c00098e4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00098e8:	57                   	push   edi
c00098e9:	43                   	inc    ebx
c00098ea:	52                   	push   edx
c00098eb:	46                   	inc    esi
c00098ec:	6a 00                	push   0x0
c00098ee:	6a 0e                	push   0xe
c00098f0:	50                   	push   eax
c00098f1:	e8 02 fd 00 00       	call   c00195f8 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c00098f6:	83 c4 20             	add    esp,0x20
c00098f9:	0f be 83 80 37 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc880]
c0009900:	84 c0                	test   al,al
c0009902:	75 c8                	jne    c00098cc <kernel_main+0x87>
c0009904:	83 ec 0c             	sub    esp,0xc
c0009907:	a1 24 05 00 00       	mov    eax,ds:0x524
c000990c:	05 ff 0f 00 00       	add    eax,0xfff
c0009911:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009916:	50                   	push   eax
c0009917:	e8 15 04 00 00       	call   c0009d31 <Phys::physicalMemorySetup(unsigned int)>
c000991c:	e8 03 1c 00 00       	call   c000b524 <Virt::virtualMemorySetup()>
c0009921:	58                   	pop    eax
c0009922:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009926:	53                   	push   ebx
c0009927:	e8 d0 27 00 00       	call   c000c0fc <VAS::VAS()>
c000992c:	89 1d 94 40 02 c0    	mov    DWORD PTR ds:0xc0024094,ebx
c0009932:	e8 e9 66 ff ff       	call   c0000020 <callGlobalConstructors>
c0009937:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000993e:	e8 3c fe ff ff       	call   c000977f <malloc>
c0009943:	89 04 24             	mov    DWORD PTR [esp],eax
c0009946:	89 c6                	mov    esi,eax
c0009948:	e8 8b f0 ff ff       	call   c00089d8 <Computer::Computer()>
c000994d:	6a 00                	push   0x0
c000994f:	89 35 a8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa8,esi
c0009955:	6a 00                	push   0x0
c0009957:	6a 00                	push   0x0
c0009959:	56                   	push   esi
c000995a:	e8 c9 f4 ff ff       	call   c0008e28 <Computer::open(int, int, void*)>
c000995f:	83 c4 14             	add    esp,0x14
c0009962:	53                   	push   ebx
c0009963:	e8 ec 1e 00 00       	call   c000b854 <VAS::~VAS()>
c0009968:	83 c4 3c             	add    esp,0x3c
c000996b:	5b                   	pop    ebx
c000996c:	5e                   	pop    esi
c000996d:	5f                   	pop    edi
c000996e:	5d                   	pop    ebp
c000996f:	c3                   	ret    
c0009970:	0f b6 96 b5 37 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc84b]
c0009977:	83 e2 fe             	and    edx,0xfffffffe
c000997a:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009980:	0f 85 53 ff ff ff    	jne    c00098d9 <kernel_main+0x94>
c0009986:	45                   	inc    ebp
c0009987:	e9 4d ff ff ff       	jmp    c00098d9 <kernel_main+0x94>

c000998c <Phys::allocateDMA(unsigned long)>:
c000998c:	55                   	push   ebp
c000998d:	31 ed                	xor    ebp,ebp
c000998f:	57                   	push   edi
c0009990:	56                   	push   esi
c0009991:	53                   	push   ebx
c0009992:	31 db                	xor    ebx,ebx
c0009994:	83 ec 28             	sub    esp,0x28
c0009997:	68 87 10 02 c0       	push   0xc0021087
c000999c:	e8 20 2d 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00099a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00099a5:	83 c4 10             	add    esp,0x10
c00099a8:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00099ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00099b6:	c1 ef 0c             	shr    edi,0xc
c00099b9:	31 c0                	xor    eax,eax
c00099bb:	eb 19                	jmp    c00099d6 <Phys::allocateDMA(unsigned long)+0x4a>
c00099bd:	85 c0                	test   eax,eax
c00099bf:	75 06                	jne    c00099c7 <Phys::allocateDMA(unsigned long)+0x3b>
c00099c1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00099c5:	89 dd                	mov    ebp,ebx
c00099c7:	8d 70 01             	lea    esi,[eax+0x1]
c00099ca:	39 f7                	cmp    edi,esi
c00099cc:	74 3f                	je     c0009a0d <Phys::allocateDMA(unsigned long)+0x81>
c00099ce:	89 f0                	mov    eax,esi
c00099d0:	43                   	inc    ebx
c00099d1:	83 fb 0f             	cmp    ebx,0xf
c00099d4:	7f 11                	jg     c00099e7 <Phys::allocateDMA(unsigned long)+0x5b>
c00099d6:	80 bb dc 3f 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc024],0x0
c00099dd:	74 de                	je     c00099bd <Phys::allocateDMA(unsigned long)+0x31>
c00099df:	31 c0                	xor    eax,eax
c00099e1:	43                   	inc    ebx
c00099e2:	83 fb 0f             	cmp    ebx,0xf
c00099e5:	7e ef                	jle    c00099d6 <Phys::allocateDMA(unsigned long)+0x4a>
c00099e7:	83 ec 0c             	sub    esp,0xc
c00099ea:	68 b7 10 02 c0       	push   0xc00210b7
c00099ef:	e8 cd 2c 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00099f4:	c7 04 24 74 11 02 c0 	mov    DWORD PTR [esp],0xc0021174
c00099fb:	e8 03 8c 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0009a00:	83 c4 10             	add    esp,0x10
c0009a03:	31 c0                	xor    eax,eax
c0009a05:	83 c4 1c             	add    esp,0x1c
c0009a08:	5b                   	pop    ebx
c0009a09:	5e                   	pop    esi
c0009a0a:	5f                   	pop    edi
c0009a0b:	5d                   	pop    ebp
c0009a0c:	c3                   	ret    
c0009a0d:	89 e9                	mov    ecx,ebp
c0009a0f:	c1 f9 04             	sar    ecx,0x4
c0009a12:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a16:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009a1a:	89 ca                	mov    edx,ecx
c0009a1c:	4a                   	dec    edx
c0009a1d:	79 03                	jns    c0009a22 <Phys::allocateDMA(unsigned long)+0x96>
c0009a1f:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009a22:	c1 fa 04             	sar    edx,0x4
c0009a25:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009a29:	74 08                	je     c0009a33 <Phys::allocateDMA(unsigned long)+0xa7>
c0009a2b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009a2f:	31 c0                	xor    eax,eax
c0009a31:	eb ae                	jmp    c00099e1 <Phys::allocateDMA(unsigned long)+0x55>
c0009a33:	85 f6                	test   esi,esi
c0009a35:	74 15                	je     c0009a4c <Phys::allocateDMA(unsigned long)+0xc0>
c0009a37:	8d 95 dc 3f 02 c0    	lea    edx,[ebp-0x3ffdc024]
c0009a3d:	8d 84 05 dd 3f 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc023]
c0009a44:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009a47:	42                   	inc    edx
c0009a48:	39 d0                	cmp    eax,edx
c0009a4a:	75 f8                	jne    c0009a44 <Phys::allocateDMA(unsigned long)+0xb8>
c0009a4c:	83 ec 0c             	sub    esp,0xc
c0009a4f:	01 3d d4 3f 02 c0    	add    DWORD PTR ds:0xc0023fd4,edi
c0009a55:	68 a0 10 02 c0       	push   0xc00210a0
c0009a5a:	e8 62 2c 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009a5f:	83 c4 10             	add    esp,0x10
c0009a62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 23                	je     c0009a8d <Phys::allocateDMA(unsigned long)+0x101>
c0009a6a:	83 ec 0c             	sub    esp,0xc
c0009a6d:	68 24 36 02 c0       	push   0xc0023624
c0009a72:	e8 4a 2c 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009a77:	c7 04 24 74 11 02 c0 	mov    DWORD PTR [esp],0xc0021174
c0009a7e:	e8 80 8b 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0009a83:	83 c4 10             	add    esp,0x10
c0009a86:	89 f0                	mov    eax,esi
c0009a88:	e9 43 ff ff ff       	jmp    c00099d0 <Phys::allocateDMA(unsigned long)+0x44>
c0009a8d:	c1 e5 0c             	shl    ebp,0xc
c0009a90:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009a96:	e9 6a ff ff ff       	jmp    c0009a05 <Phys::allocateDMA(unsigned long)+0x79>

c0009a9b <Phys::freeDMA(unsigned long, unsigned long)>:
c0009a9b:	83 ec 18             	sub    esp,0x18
c0009a9e:	68 bb 10 02 c0       	push   0xc00210bb
c0009aa3:	e8 19 2c 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009aa8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009aac:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009ab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ab6:	c1 ea 0c             	shr    edx,0xc
c0009ab9:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009abe:	29 15 d4 3f 02 c0    	sub    DWORD PTR ds:0xc0023fd4,edx
c0009ac4:	c1 e8 0c             	shr    eax,0xc
c0009ac7:	83 c4 10             	add    esp,0x10
c0009aca:	85 d2                	test   edx,edx
c0009acc:	74 0f                	je     c0009add <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009ace:	05 dc 3f 02 c0       	add    eax,0xc0023fdc
c0009ad3:	01 c2                	add    edx,eax
c0009ad5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009ad8:	40                   	inc    eax
c0009ad9:	39 d0                	cmp    eax,edx
c0009adb:	75 f8                	jne    c0009ad5 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009add:	83 c4 0c             	add    esp,0xc
c0009ae0:	c3                   	ret    

c0009ae1 <Phys::setPageState(unsigned long, bool)>:
c0009ae1:	56                   	push   esi
c0009ae2:	ba 01 00 00 00       	mov    edx,0x1
c0009ae7:	53                   	push   ebx
c0009ae8:	8b 35 c4 38 02 c0    	mov    esi,DWORD PTR ds:0xc00238c4
c0009aee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009af2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009af6:	89 c8                	mov    eax,ecx
c0009af8:	83 e1 07             	and    ecx,0x7
c0009afb:	c1 e8 03             	shr    eax,0x3
c0009afe:	d3 e3                	shl    ebx,cl
c0009b00:	01 c6                	add    esi,eax
c0009b02:	d3 e2                	shl    edx,cl
c0009b04:	f7 d2                	not    edx
c0009b06:	20 16                	and    BYTE PTR [esi],dl
c0009b08:	03 05 c4 38 02 c0    	add    eax,DWORD PTR ds:0xc00238c4
c0009b0e:	08 18                	or     BYTE PTR [eax],bl
c0009b10:	5b                   	pop    ebx
c0009b11:	5e                   	pop    esi
c0009b12:	c3                   	ret    

c0009b13 <Phys::getPageState(unsigned long)>:
c0009b13:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009b17:	8b 15 c4 38 02 c0    	mov    edx,DWORD PTR ds:0xc00238c4
c0009b1d:	89 c8                	mov    eax,ecx
c0009b1f:	83 e1 07             	and    ecx,0x7
c0009b22:	c1 e8 03             	shr    eax,0x3
c0009b25:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009b29:	d3 f8                	sar    eax,cl
c0009b2b:	83 e0 01             	and    eax,0x1
c0009b2e:	c3                   	ret    

c0009b2f <Phys::freePage(unsigned long)>:
c0009b2f:	53                   	push   ebx
c0009b30:	83 ec 10             	sub    esp,0x10
c0009b33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b37:	53                   	push   ebx
c0009b38:	68 d1 10 02 c0       	push   0xc00210d1
c0009b3d:	e8 7f 2b 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009b42:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009b48:	83 c4 10             	add    esp,0x10
c0009b4b:	3d ff ff 00 00       	cmp    eax,0xffff
c0009b50:	76 3d                	jbe    c0009b8f <Phys::freePage(unsigned long)+0x60>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	c1 eb 0c             	shr    ebx,0xc
c0009b58:	53                   	push   ebx
c0009b59:	e8 b5 ff ff ff       	call   c0009b13 <Phys::getPageState(unsigned long)>
c0009b5e:	83 c4 10             	add    esp,0x10
c0009b61:	84 c0                	test   al,al
c0009b63:	74 19                	je     c0009b7e <Phys::freePage(unsigned long)+0x4f>
c0009b65:	83 ec 08             	sub    esp,0x8
c0009b68:	ff 0d d4 3f 02 c0    	dec    DWORD PTR ds:0xc0023fd4
c0009b6e:	6a 00                	push   0x0
c0009b70:	53                   	push   ebx
c0009b71:	e8 6b ff ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009b76:	83 c4 10             	add    esp,0x10
c0009b79:	83 c4 08             	add    esp,0x8
c0009b7c:	5b                   	pop    ebx
c0009b7d:	c3                   	ret    
c0009b7e:	c7 44 24 10 fb 10 02 c0 	mov    DWORD PTR [esp+0x10],0xc00210fb
c0009b86:	83 c4 08             	add    esp,0x8
c0009b89:	5b                   	pop    ebx
c0009b8a:	e9 74 8a 00 00       	jmp    c0012603 <Krnl::panic(char const*)>
c0009b8f:	83 ec 08             	sub    esp,0x8
c0009b92:	53                   	push   ebx
c0009b93:	68 e4 10 02 c0       	push   0xc00210e4
c0009b98:	e8 24 2b 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009b9d:	58                   	pop    eax
c0009b9e:	5a                   	pop    edx
c0009b9f:	68 00 10 00 00       	push   0x1000
c0009ba4:	53                   	push   ebx
c0009ba5:	e8 f1 fe ff ff       	call   c0009a9b <Phys::freeDMA(unsigned long, unsigned long)>
c0009baa:	83 c4 10             	add    esp,0x10
c0009bad:	83 c4 08             	add    esp,0x8
c0009bb0:	5b                   	pop    ebx
c0009bb1:	c3                   	ret    

c0009bb2 <Phys::allocatePage()>:
c0009bb2:	56                   	push   esi
c0009bb3:	53                   	push   ebx
c0009bb4:	83 ec 14             	sub    esp,0x14
c0009bb7:	8b 35 c8 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fc8
c0009bbd:	89 f3                	mov    ebx,esi
c0009bbf:	eb 0a                	jmp    c0009bcb <Phys::allocatePage()+0x19>
c0009bc1:	89 1d c8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc8,ebx
c0009bc7:	39 de                	cmp    esi,ebx
c0009bc9:	74 24                	je     c0009bef <Phys::allocatePage()+0x3d>
c0009bcb:	53                   	push   ebx
c0009bcc:	e8 42 ff ff ff       	call   c0009b13 <Phys::getPageState(unsigned long)>
c0009bd1:	5a                   	pop    edx
c0009bd2:	84 c0                	test   al,al
c0009bd4:	74 69                	je     c0009c3f <Phys::allocatePage()+0x8d>
c0009bd6:	43                   	inc    ebx
c0009bd7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009bdd:	75 e2                	jne    c0009bc1 <Phys::allocatePage()+0xf>
c0009bdf:	31 db                	xor    ebx,ebx
c0009be1:	c7 05 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc8,0x0
c0009beb:	39 de                	cmp    esi,ebx
c0009bed:	75 dc                	jne    c0009bcb <Phys::allocatePage()+0x19>
c0009bef:	83 ec 0c             	sub    esp,0xc
c0009bf2:	80 35 ec 3f 02 c0 01 	xor    BYTE PTR ds:0xc0023fec,0x1
c0009bf9:	68 9c 11 02 c0       	push   0xc002119c
c0009bfe:	e8 be 2a 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009c03:	58                   	pop    eax
c0009c04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009c09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c0c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009c12:	e8 39 27 00 00       	call   c000c350 <VAS::scanForEviction()>
c0009c17:	83 c4 10             	add    esp,0x10
c0009c1a:	85 c0                	test   eax,eax
c0009c1c:	75 62                	jne    c0009c80 <Phys::allocatePage()+0xce>
c0009c1e:	83 ec 0c             	sub    esp,0xc
c0009c21:	68 c0 11 02 c0       	push   0xc00211c0
c0009c26:	e8 d8 89 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	8b 1d c8 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fc8
c0009c34:	53                   	push   ebx
c0009c35:	e8 d9 fe ff ff       	call   c0009b13 <Phys::getPageState(unsigned long)>
c0009c3a:	5a                   	pop    edx
c0009c3b:	84 c0                	test   al,al
c0009c3d:	75 97                	jne    c0009bd6 <Phys::allocatePage()+0x24>
c0009c3f:	6a 01                	push   0x1
c0009c41:	53                   	push   ebx
c0009c42:	e8 9a fe ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009c47:	5a                   	pop    edx
c0009c48:	a1 d4 3f 02 c0       	mov    eax,ds:0xc0023fd4
c0009c4d:	59                   	pop    ecx
c0009c4e:	40                   	inc    eax
c0009c4f:	8b 15 c8 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fc8
c0009c55:	a3 d4 3f 02 c0       	mov    ds:0xc0023fd4,eax
c0009c5a:	c1 e2 0c             	shl    edx,0xc
c0009c5d:	52                   	push   edx
c0009c5e:	ff 35 d8 3f 02 c0    	push   DWORD PTR ds:0xc0023fd8
c0009c64:	50                   	push   eax
c0009c65:	68 11 11 02 c0       	push   0xc0021111
c0009c6a:	e8 52 2a 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009c6f:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c0009c74:	83 c4 10             	add    esp,0x10
c0009c77:	c1 e0 0c             	shl    eax,0xc
c0009c7a:	83 c4 14             	add    esp,0x14
c0009c7d:	5b                   	pop    ebx
c0009c7e:	5e                   	pop    esi
c0009c7f:	c3                   	ret    
c0009c80:	83 ec 08             	sub    esp,0x8
c0009c83:	89 c2                	mov    edx,eax
c0009c85:	6a 01                	push   0x1
c0009c87:	c1 ea 0c             	shr    edx,0xc
c0009c8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c8e:	52                   	push   edx
c0009c8f:	e8 4d fe ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009c94:	83 c4 10             	add    esp,0x10
c0009c97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c9b:	eb dd                	jmp    c0009c7a <Phys::allocatePage()+0xc8>

c0009c9d <Phys::allocateContiguousPages(int)>:
c0009c9d:	57                   	push   edi
c0009c9e:	56                   	push   esi
c0009c9f:	53                   	push   ebx
c0009ca0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ca4:	fa                   	cli    
c0009ca5:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0009cab:	31 db                	xor    ebx,ebx
c0009cad:	85 db                	test   ebx,ebx
c0009caf:	75 11                	jne    c0009cc2 <Phys::allocateContiguousPages(int)+0x25>
c0009cb1:	e8 fc fe ff ff       	call   c0009bb2 <Phys::allocatePage()>
c0009cb6:	83 fe 01             	cmp    esi,0x1
c0009cb9:	89 c7                	mov    edi,eax
c0009cbb:	74 21                	je     c0009cde <Phys::allocateContiguousPages(int)+0x41>
c0009cbd:	bb 01 00 00 00       	mov    ebx,0x1
c0009cc2:	e8 eb fe ff ff       	call   c0009bb2 <Phys::allocatePage()>
c0009cc7:	89 da                	mov    edx,ebx
c0009cc9:	c1 e2 0c             	shl    edx,0xc
c0009ccc:	01 fa                	add    edx,edi
c0009cce:	39 c2                	cmp    edx,eax
c0009cd0:	74 20                	je     c0009cf2 <Phys::allocateContiguousPages(int)+0x55>
c0009cd2:	bb 01 00 00 00       	mov    ebx,0x1
c0009cd7:	89 c7                	mov    edi,eax
c0009cd9:	83 fe 01             	cmp    esi,0x1
c0009cdc:	75 e4                	jne    c0009cc2 <Phys::allocateContiguousPages(int)+0x25>
c0009cde:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0009ce3:	48                   	dec    eax
c0009ce4:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0009ce9:	75 01                	jne    c0009cec <Phys::allocateContiguousPages(int)+0x4f>
c0009ceb:	fb                   	sti    
c0009cec:	89 f8                	mov    eax,edi
c0009cee:	5b                   	pop    ebx
c0009cef:	5e                   	pop    esi
c0009cf0:	5f                   	pop    edi
c0009cf1:	c3                   	ret    
c0009cf2:	43                   	inc    ebx
c0009cf3:	39 f3                	cmp    ebx,esi
c0009cf5:	75 b6                	jne    c0009cad <Phys::allocateContiguousPages(int)+0x10>
c0009cf7:	eb e5                	jmp    c0009cde <Phys::allocateContiguousPages(int)+0x41>

c0009cf9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009cf9:	56                   	push   esi
c0009cfa:	53                   	push   ebx
c0009cfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cff:	39 1d cc 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fcc,ebx
c0009d05:	73 06                	jae    c0009d0d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009d07:	89 1d cc 3f 02 c0    	mov    DWORD PTR ds:0xc0023fcc,ebx
c0009d0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d11:	c1 eb 0c             	shr    ebx,0xc
c0009d14:	c1 e8 0c             	shr    eax,0xc
c0009d17:	39 d8                	cmp    eax,ebx
c0009d19:	73 13                	jae    c0009d2e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009d1b:	6a 00                	push   0x0
c0009d1d:	8d 70 01             	lea    esi,[eax+0x1]
c0009d20:	50                   	push   eax
c0009d21:	e8 bb fd ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009d26:	5a                   	pop    edx
c0009d27:	89 f0                	mov    eax,esi
c0009d29:	59                   	pop    ecx
c0009d2a:	39 f3                	cmp    ebx,esi
c0009d2c:	75 ed                	jne    c0009d1b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009d2e:	5b                   	pop    ebx
c0009d2f:	5e                   	pop    esi
c0009d30:	c3                   	ret    

c0009d31 <Phys::physicalMemorySetup(unsigned int)>:
c0009d31:	55                   	push   ebp
c0009d32:	57                   	push   edi
c0009d33:	56                   	push   esi
c0009d34:	53                   	push   ebx
c0009d35:	31 db                	xor    ebx,ebx
c0009d37:	83 ec 40             	sub    esp,0x40
c0009d3a:	6a 10                	push   0x10
c0009d3c:	6a 00                	push   0x0
c0009d3e:	68 dc 3f 02 c0       	push   0xc0023fdc
c0009d43:	e8 60 67 ff ff       	call   c00004a8 <memset>
c0009d48:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009d4c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d51:	05 00 10 00 00       	add    eax,0x1000
c0009d56:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009d5a:	5a                   	pop    edx
c0009d5b:	59                   	pop    ecx
c0009d5c:	50                   	push   eax
c0009d5d:	68 2f 11 02 c0       	push   0xc002112f
c0009d62:	e8 5a 29 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009d67:	83 c4 10             	add    esp,0x10
c0009d6a:	83 ec 08             	sub    esp,0x8
c0009d6d:	6a 01                	push   0x1
c0009d6f:	53                   	push   ebx
c0009d70:	43                   	inc    ebx
c0009d71:	e8 6b fd ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009d76:	83 c4 10             	add    esp,0x10
c0009d79:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009d7f:	75 e9                	jne    c0009d6a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009d81:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009d88:	66 85 c0             	test   ax,ax
c0009d8b:	0f 84 8e 01 00 00    	je     c0009f1f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009d91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d95:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009d9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009da1:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009da6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009daa:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009db2:	eb 15                	jmp    c0009dc9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009db4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009db8:	83 c3 18             	add    ebx,0x18
c0009dbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009dbf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009dc3:	0f 84 66 01 00 00    	je     c0009f2f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009dc9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009dcc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0009dcf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0009dd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dda:	8b 33                	mov    esi,DWORD PTR [ebx]
c0009ddc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0009ddf:	01 f0                	add    eax,esi
c0009de1:	55                   	push   ebp
c0009de2:	11 fa                	adc    edx,edi
c0009de4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009de8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009dec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009df0:	56                   	push   esi
c0009df1:	68 f0 11 02 c0       	push   0xc00211f0
c0009df6:	e8 c6 28 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009dfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	09 f8                	or     eax,edi
c0009e04:	0f 85 25 01 00 00    	jne    c0009f2f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c0009e0a:	4d                   	dec    ebp
c0009e0b:	75 a7                	jne    c0009db4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e0d:	ba 00 00 08 00       	mov    edx,0x80000
c0009e12:	89 c1                	mov    ecx,eax
c0009e14:	39 f2                	cmp    edx,esi
c0009e16:	19 f9                	sbb    ecx,edi
c0009e18:	0f 82 a7 00 00 00    	jb     c0009ec5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009e1e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0009e22:	89 c1                	mov    ecx,eax
c0009e24:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0009e28:	0f 83 97 00 00 00    	jae    c0009ec5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c0009e2e:	ba 00 00 0a 00       	mov    edx,0xa0000
c0009e33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009e37:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009e3b:	39 fa                	cmp    edx,edi
c0009e3d:	19 e8                	sbb    eax,ebp
c0009e3f:	0f 82 9a 01 00 00    	jb     c0009fdf <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0009e45:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009e49:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0009e4d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0009e53:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009e58:	83 d5 ff             	adc    ebp,0xffffffff
c0009e5b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0009e5f:	31 c0                	xor    eax,eax
c0009e61:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0009e65:	39 fa                	cmp    edx,edi
c0009e67:	89 c1                	mov    ecx,eax
c0009e69:	19 e9                	sbb    ecx,ebp
c0009e6b:	0f 83 43 ff ff ff    	jae    c0009db4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009e71:	be 00 00 08 00       	mov    esi,0x80000
c0009e76:	51                   	push   ecx
c0009e77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009e7b:	57                   	push   edi
c0009e7c:	56                   	push   esi
c0009e7d:	68 14 12 02 c0       	push   0xc0021214
c0009e82:	e8 3a 28 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009e87:	5d                   	pop    ebp
c0009e88:	58                   	pop    eax
c0009e89:	57                   	push   edi
c0009e8a:	56                   	push   esi
c0009e8b:	e8 69 fe ff ff       	call   c0009cf9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0009e90:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009e94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e98:	83 c4 0c             	add    esp,0xc
c0009e9b:	0f ac d0 0c          	shrd   eax,edx,0xc
c0009e9f:	03 05 d8 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fd8
c0009ea5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009eac:	a3 d8 3f 02 c0       	mov    ds:0xc0023fd8,eax
c0009eb1:	52                   	push   edx
c0009eb2:	50                   	push   eax
c0009eb3:	68 55 11 02 c0       	push   0xc0021155
c0009eb8:	e8 04 28 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	e9 ef fe ff ff       	jmp    c0009db4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009ec5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0009ec9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ecd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009ed1:	39 ea                	cmp    edx,ebp
c0009ed3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0009ed7:	0f 82 d7 fe ff ff    	jb     c0009db4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009edd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0009ee2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0009ee6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0009eea:	0f 83 c4 fe ff ff    	jae    c0009db4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c0009ef0:	39 ee                	cmp    esi,ebp
c0009ef2:	89 f8                	mov    eax,edi
c0009ef4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0009ef8:	0f 83 78 ff ff ff    	jae    c0009e76 <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009efe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f06:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f0a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f0e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0009f12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f16:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f1a:	e9 57 ff ff ff       	jmp    c0009e76 <Phys::physicalMemorySetup(unsigned int)+0x145>
c0009f1f:	83 ec 0c             	sub    esp,0xc
c0009f22:	68 47 11 02 c0       	push   0xc0021147
c0009f27:	e8 d7 86 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0009f2c:	83 c4 10             	add    esp,0x10
c0009f2f:	83 ec 08             	sub    esp,0x8
c0009f32:	bb 60 00 00 00       	mov    ebx,0x60
c0009f37:	6a 00                	push   0x0
c0009f39:	6a 06                	push   0x6
c0009f3b:	e8 a1 fb ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009f40:	58                   	pop    eax
c0009f41:	5a                   	pop    edx
c0009f42:	6a 00                	push   0x0
c0009f44:	6a 07                	push   0x7
c0009f46:	e8 96 fb ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009f4b:	83 05 d8 3f 02 c0 02 	add    DWORD PTR ds:0xc0023fd8,0x2
c0009f52:	83 c4 10             	add    esp,0x10
c0009f55:	83 ec 08             	sub    esp,0x8
c0009f58:	6a 00                	push   0x0
c0009f5a:	53                   	push   ebx
c0009f5b:	43                   	inc    ebx
c0009f5c:	e8 80 fb ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009f61:	83 c4 10             	add    esp,0x10
c0009f64:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0009f6a:	75 e9                	jne    c0009f55 <Phys::physicalMemorySetup(unsigned int)+0x224>
c0009f6c:	a1 d8 3f 02 c0       	mov    eax,ds:0xc0023fd8
c0009f71:	bb 40 01 00 00       	mov    ebx,0x140
c0009f76:	83 c0 20             	add    eax,0x20
c0009f79:	a3 d8 3f 02 c0       	mov    ds:0xc0023fd8,eax
c0009f7e:	eb 22                	jmp    c0009fa2 <Phys::physicalMemorySetup(unsigned int)+0x271>
c0009f80:	83 ec 08             	sub    esp,0x8
c0009f83:	6a 00                	push   0x0
c0009f85:	53                   	push   ebx
c0009f86:	43                   	inc    ebx
c0009f87:	e8 55 fb ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009f8c:	a1 d8 3f 02 c0       	mov    eax,ds:0xc0023fd8
c0009f91:	83 c4 10             	add    esp,0x10
c0009f94:	40                   	inc    eax
c0009f95:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0009f9b:	a3 d8 3f 02 c0       	mov    ds:0xc0023fd8,eax
c0009fa0:	74 07                	je     c0009fa9 <Phys::physicalMemorySetup(unsigned int)+0x278>
c0009fa2:	3d ff 03 00 00       	cmp    eax,0x3ff
c0009fa7:	7e d7                	jle    c0009f80 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0009fa9:	bb d0 01 00 00       	mov    ebx,0x1d0
c0009fae:	3d ff 07 00 00       	cmp    eax,0x7ff
c0009fb3:	7f 22                	jg     c0009fd7 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c0009fb5:	83 ec 08             	sub    esp,0x8
c0009fb8:	6a 00                	push   0x0
c0009fba:	53                   	push   ebx
c0009fbb:	43                   	inc    ebx
c0009fbc:	e8 20 fb ff ff       	call   c0009ae1 <Phys::setPageState(unsigned long, bool)>
c0009fc1:	a1 d8 3f 02 c0       	mov    eax,ds:0xc0023fd8
c0009fc6:	83 c4 10             	add    esp,0x10
c0009fc9:	40                   	inc    eax
c0009fca:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0009fd0:	a3 d8 3f 02 c0       	mov    ds:0xc0023fd8,eax
c0009fd5:	75 d7                	jne    c0009fae <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0009fd7:	83 c4 3c             	add    esp,0x3c
c0009fda:	5b                   	pop    ebx
c0009fdb:	5e                   	pop    esi
c0009fdc:	5f                   	pop    edi
c0009fdd:	5d                   	pop    ebp
c0009fde:	c3                   	ret    
c0009fdf:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0009fe7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009fef:	e9 51 fe ff ff       	jmp    c0009e45 <Phys::physicalMemorySetup(unsigned int)+0x114>

c0009ff4 <Pipe::isAtty()>:
c0009ff4:	31 c0                	xor    eax,eax
c0009ff6:	c3                   	ret    
c0009ff7:	90                   	nop

c0009ff8 <Pipe::~Pipe()>:
c0009ff8:	83 ec 0c             	sub    esp,0xc
c0009ffb:	ba 80 12 02 c0       	mov    edx,0xc0021280
c000a000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a004:	89 10                	mov    DWORD PTR [eax],edx
c000a006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a00a:	83 ec 0c             	sub    esp,0xc
c000a00d:	50                   	push   eax
c000a00e:	e8 f1 10 00 00       	call   c000b104 <UnixFile::~UnixFile()>
c000a013:	83 c4 10             	add    esp,0x10
c000a016:	90                   	nop
c000a017:	83 c4 0c             	add    esp,0xc
c000a01a:	c3                   	ret    
c000a01b:	90                   	nop

c000a01c <Pipe::~Pipe()>:
c000a01c:	83 ec 0c             	sub    esp,0xc
c000a01f:	83 ec 0c             	sub    esp,0xc
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	e8 cd ff ff ff       	call   c0009ff8 <Pipe::~Pipe()>
c000a02b:	83 c4 10             	add    esp,0x10
c000a02e:	83 ec 08             	sub    esp,0x8
c000a031:	6a 20                	push   0x20
c000a033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a037:	e8 a4 25 00 00       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	83 c4 0c             	add    esp,0xc
c000a042:	c3                   	ret    
c000a043:	90                   	nop

c000a044 <Pipe::write(unsigned long long, void*, int*)>:
c000a044:	55                   	push   ebp
c000a045:	57                   	push   edi
c000a046:	56                   	push   esi
c000a047:	53                   	push   ebx
c000a048:	83 ec 1c             	sub    esp,0x1c
c000a04b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a04f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a053:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a056:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a05a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a05d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a061:	89 d8                	mov    eax,ebx
c000a063:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a066:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a06a:	89 d6                	mov    esi,edx
c000a06c:	89 d7                	mov    edi,edx
c000a06e:	c1 ff 1f             	sar    edi,0x1f
c000a071:	03 34 24             	add    esi,DWORD PTR [esp]
c000a074:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a078:	c1 f8 1f             	sar    eax,0x1f
c000a07b:	39 f3                	cmp    ebx,esi
c000a07d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a085:	19 f8                	sbb    eax,edi
c000a087:	b8 01 00 00 00       	mov    eax,0x1
c000a08c:	72 6e                	jb     c000a0fc <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a08e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a091:	01 d0                	add    eax,edx
c000a093:	99                   	cdq    
c000a094:	f7 fb                	idiv   ebx
c000a096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a09a:	29 d3                	sub    ebx,edx
c000a09c:	89 d7                	mov    edi,edx
c000a09e:	89 de                	mov    esi,ebx
c000a0a0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a0a3:	c1 fb 1f             	sar    ebx,0x1f
c000a0a6:	39 f2                	cmp    edx,esi
c000a0a8:	19 d8                	sbb    eax,ebx
c000a0aa:	b8 00 00 00 00       	mov    eax,0x0
c000a0af:	72 04                	jb     c000a0b5 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a0b1:	89 d0                	mov    eax,edx
c000a0b3:	29 f0                	sub    eax,esi
c000a0b5:	89 d3                	mov    ebx,edx
c000a0b7:	29 c3                	sub    ebx,eax
c000a0b9:	74 0b                	je     c000a0c6 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a0bb:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a0be:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a0c2:	89 d9                	mov    ecx,ebx
c000a0c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a0c6:	85 c0                	test   eax,eax
c000a0c8:	74 0d                	je     c000a0d7 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a0ca:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a0ce:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a0d1:	89 de                	mov    esi,ebx
c000a0d3:	89 c1                	mov    ecx,eax
c000a0d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a0d7:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a0da:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a0df:	75 10                	jne    c000a0f1 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a0e1:	83 ec 0c             	sub    esp,0xc
c000a0e4:	68 3d 12 02 c0       	push   0xc002123d
c000a0e9:	e8 15 85 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000a0ee:	83 c4 10             	add    esp,0x10
c000a0f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0f5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a0f8:	89 08                	mov    DWORD PTR [eax],ecx
c000a0fa:	31 c0                	xor    eax,eax
c000a0fc:	83 c4 1c             	add    esp,0x1c
c000a0ff:	5b                   	pop    ebx
c000a100:	5e                   	pop    esi
c000a101:	5f                   	pop    edi
c000a102:	5d                   	pop    ebp
c000a103:	c3                   	ret    

c000a104 <Pipe::read(unsigned long long, void*, int*)>:
c000a104:	55                   	push   ebp
c000a105:	57                   	push   edi
c000a106:	56                   	push   esi
c000a107:	53                   	push   ebx
c000a108:	83 ec 1c             	sub    esp,0x1c
c000a10b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a10f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a113:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a117:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a11a:	89 c8                	mov    eax,ecx
c000a11c:	99                   	cdq    
c000a11d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a121:	74 24                	je     c000a147 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a123:	39 f9                	cmp    ecx,edi
c000a125:	89 d1                	mov    ecx,edx
c000a127:	19 f1                	sbb    ecx,esi
c000a129:	73 1c                	jae    c000a147 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a12b:	fa                   	cli    
c000a12c:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c000a132:	e8 01 ba 00 00       	call   c0015b38 <schedule()>
c000a137:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000a13c:	48                   	dec    eax
c000a13d:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000a142:	75 d3                	jne    c000a117 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a144:	fb                   	sti    
c000a145:	eb d0                	jmp    c000a117 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a147:	39 f8                	cmp    eax,edi
c000a149:	89 d1                	mov    ecx,edx
c000a14b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a14e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a152:	19 f1                	sbb    ecx,esi
c000a154:	73 07                	jae    c000a15d <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a156:	89 04 24             	mov    DWORD PTR [esp],eax
c000a159:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a15d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a160:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a163:	29 f7                	sub    edi,esi
c000a165:	89 f8                	mov    eax,edi
c000a167:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a16b:	99                   	cdq    
c000a16c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a16f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a173:	19 d0                	sbb    eax,edx
c000a175:	73 07                	jae    c000a17e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a177:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a17a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a17e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a181:	89 ea                	mov    edx,ebp
c000a183:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a187:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a18c:	74 0d                	je     c000a19b <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a18e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a191:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a195:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a19b:	85 d2                	test   edx,edx
c000a19d:	74 11                	je     c000a1b0 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a19f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1a3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a1a6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a1aa:	89 d1                	mov    ecx,edx
c000a1ac:	89 c7                	mov    edi,eax
c000a1ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a1b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a1b3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a1b6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a1b9:	99                   	cdq    
c000a1ba:	89 f7                	mov    edi,esi
c000a1bc:	03 04 24             	add    eax,DWORD PTR [esp]
c000a1bf:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a1c3:	c1 ff 1f             	sar    edi,0x1f
c000a1c6:	57                   	push   edi
c000a1c7:	56                   	push   esi
c000a1c8:	52                   	push   edx
c000a1c9:	50                   	push   eax
c000a1ca:	e8 d1 59 01 00       	call   c001fba0 <__umoddi3>
c000a1cf:	83 c4 10             	add    esp,0x10
c000a1d2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1d5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a1da:	75 10                	jne    c000a1ec <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a1dc:	83 ec 0c             	sub    esp,0xc
c000a1df:	68 5a 12 02 c0       	push   0xc002125a
c000a1e4:	e8 1a 84 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000a1e9:	83 c4 10             	add    esp,0x10
c000a1ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a1f0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a1f3:	89 10                	mov    DWORD PTR [eax],edx
c000a1f5:	83 c4 1c             	add    esp,0x1c
c000a1f8:	31 c0                	xor    eax,eax
c000a1fa:	5b                   	pop    ebx
c000a1fb:	5e                   	pop    esi
c000a1fc:	5f                   	pop    edi
c000a1fd:	5d                   	pop    ebp
c000a1fe:	c3                   	ret    
c000a1ff:	90                   	nop

c000a200 <Pipe::Pipe(int)>:
c000a200:	83 ec 0c             	sub    esp,0xc
c000a203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a207:	83 ec 08             	sub    esp,0x8
c000a20a:	6a 00                	push   0x0
c000a20c:	50                   	push   eax
c000a20d:	e8 10 0d 00 00       	call   c000af22 <UnixFile::UnixFile(int)>
c000a212:	83 c4 10             	add    esp,0x10
c000a215:	ba 80 12 02 c0       	mov    edx,0xc0021280
c000a21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a21e:	89 10                	mov    DWORD PTR [eax],edx
c000a220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a224:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a228:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a22f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a23a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a241:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a245:	83 ec 0c             	sub    esp,0xc
c000a248:	50                   	push   eax
c000a249:	e8 31 f5 ff ff       	call   c000977f <malloc>
c000a24e:	83 c4 10             	add    esp,0x10
c000a251:	89 c2                	mov    edx,eax
c000a253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a257:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a25e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a262:	90                   	nop
c000a263:	83 c4 0c             	add    esp,0xc
c000a266:	c3                   	ret    
c000a267:	90                   	nop

c000a268 <VgaText::isAtty()>:
c000a268:	b0 01                	mov    al,0x1
c000a26a:	c3                   	ret    
c000a26b:	90                   	nop

c000a26c <VgaText::~VgaText()>:
c000a26c:	83 ec 0c             	sub    esp,0xc
c000a26f:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000a274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a278:	89 10                	mov    DWORD PTR [eax],edx
c000a27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a27e:	83 ec 0c             	sub    esp,0xc
c000a281:	50                   	push   eax
c000a282:	e8 7d 0e 00 00       	call   c000b104 <UnixFile::~UnixFile()>
c000a287:	83 c4 10             	add    esp,0x10
c000a28a:	90                   	nop
c000a28b:	83 c4 0c             	add    esp,0xc
c000a28e:	c3                   	ret    
c000a28f:	90                   	nop

c000a290 <VgaText::~VgaText()>:
c000a290:	83 ec 0c             	sub    esp,0xc
c000a293:	83 ec 0c             	sub    esp,0xc
c000a296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29a:	e8 cd ff ff ff       	call   c000a26c <VgaText::~VgaText()>
c000a29f:	83 c4 10             	add    esp,0x10
c000a2a2:	83 ec 08             	sub    esp,0x8
c000a2a5:	68 b4 01 00 00       	push   0x1b4
c000a2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ae:	e8 2d 23 00 00       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000a2b3:	83 c4 10             	add    esp,0x10
c000a2b6:	83 c4 0c             	add    esp,0xc
c000a2b9:	c3                   	ret    

c000a2ba <VgaText::read(unsigned long long, void*, int*)>:
c000a2ba:	83 ec 10             	sub    esp,0x10
c000a2bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2c9:	e8 cf 46 00 00       	call   c000e99d <readKeyboard(VgaText*, char*, unsigned long)>
c000a2ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a2d2:	89 02                	mov    DWORD PTR [edx],eax
c000a2d4:	31 c0                	xor    eax,eax
c000a2d6:	83 c4 1c             	add    esp,0x1c
c000a2d9:	c3                   	ret    

c000a2da <setTerminalScrollLock(bool)>:
c000a2da:	c3                   	ret    

c000a2db <doTerminalCycle()>:
c000a2db:	c3                   	ret    

c000a2dc <addToTerminalCycle(VgaText*)>:
c000a2dc:	c3                   	ret    

c000a2dd <scrollTerminalScrollLock(int)>:
c000a2dd:	c3                   	ret    

c000a2de <VgaText::updateTitle()>:
c000a2de:	c3                   	ret    
c000a2df:	90                   	nop

c000a2e0 <VgaText::load()>:
c000a2e0:	c3                   	ret    
c000a2e1:	90                   	nop

c000a2e2 <VgaText::updateCursor()>:
c000a2e2:	83 ec 14             	sub    esp,0x14
c000a2e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2e9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a2ec:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a2ef:	e8 68 f3 00 00       	call   c001965c <Hal::consoleCursorUpdate(int, int)>
c000a2f4:	83 c4 1c             	add    esp,0x1c
c000a2f7:	c3                   	ret    

c000a2f8 <VgaText::doANSI_SGR(int)>:
c000a2f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a300:	85 d2                	test   edx,edx
c000a302:	75 0b                	jne    c000a30f <VgaText::doANSI_SGR(int)+0x17>
c000a304:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a307:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a30a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a30d:	eb 59                	jmp    c000a368 <VgaText::doANSI_SGR(int)+0x70>
c000a30f:	83 fa 07             	cmp    edx,0x7
c000a312:	75 0b                	jne    c000a31f <VgaText::doANSI_SGR(int)+0x27>
c000a314:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a317:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a31a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a31d:	eb 49                	jmp    c000a368 <VgaText::doANSI_SGR(int)+0x70>
c000a31f:	83 fa 1b             	cmp    edx,0x1b
c000a322:	74 e0                	je     c000a304 <VgaText::doANSI_SGR(int)+0xc>
c000a324:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a327:	83 f9 07             	cmp    ecx,0x7
c000a32a:	77 09                	ja     c000a335 <VgaText::doANSI_SGR(int)+0x3d>
c000a32c:	8b 14 8d 00 39 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc700]
c000a333:	eb 20                	jmp    c000a355 <VgaText::doANSI_SGR(int)+0x5d>
c000a335:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a338:	83 f9 07             	cmp    ecx,0x7
c000a33b:	77 09                	ja     c000a346 <VgaText::doANSI_SGR(int)+0x4e>
c000a33d:	8b 14 8d 00 39 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc700]
c000a344:	eb 22                	jmp    c000a368 <VgaText::doANSI_SGR(int)+0x70>
c000a346:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a349:	83 f9 07             	cmp    ecx,0x7
c000a34c:	77 0b                	ja     c000a359 <VgaText::doANSI_SGR(int)+0x61>
c000a34e:	8b 14 95 b8 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc848]
c000a355:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a358:	c3                   	ret    
c000a359:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a35c:	83 f9 07             	cmp    ecx,0x7
c000a35f:	77 0a                	ja     c000a36b <VgaText::doANSI_SGR(int)+0x73>
c000a361:	8b 14 95 90 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc870]
c000a368:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a36b:	c3                   	ret    

c000a36c <VgaText::setDefaultBgColour(VgaColour)>:
c000a36c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a370:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a374:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a377:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a37a:	c3                   	ret    
c000a37b:	90                   	nop

c000a37c <VgaText::setDefaultFgColour(VgaColour)>:
c000a37c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a380:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a384:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a387:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a38a:	c3                   	ret    
c000a38b:	90                   	nop

c000a38c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a38c:	53                   	push   ebx
c000a38d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a391:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a395:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a399:	51                   	push   ecx
c000a39a:	e8 cd ff ff ff       	call   c000a36c <VgaText::setDefaultBgColour(VgaColour)>
c000a39f:	58                   	pop    eax
c000a3a0:	5a                   	pop    edx
c000a3a1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a3a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a3a9:	5b                   	pop    ebx
c000a3aa:	eb d0                	jmp    c000a37c <VgaText::setDefaultFgColour(VgaColour)>

c000a3ac <VgaText::setTitleTextColour(VgaColour)>:
c000a3ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3b4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a3b7:	c3                   	ret    

c000a3b8 <VgaText::setTitleColour(VgaColour)>:
c000a3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a3c3:	c3                   	ret    

c000a3c4 <VgaText::setTitle(char*)>:
c000a3c4:	81 44 24 04 82 00 00 00 	add    DWORD PTR [esp+0x4],0x82
c000a3cc:	e9 93 61 ff ff       	jmp    c0000564 <strcpy>
c000a3d1:	90                   	nop

c000a3d2 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a3d2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a3d6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a3db:	83 e0 0f             	and    eax,0xf
c000a3de:	c1 e2 04             	shl    edx,0x4
c000a3e1:	09 d0                	or     eax,edx
c000a3e3:	c3                   	ret    

c000a3e4 <VgaText::scrollScreen()>:
c000a3e4:	55                   	push   ebp
c000a3e5:	b9 01 00 00 00       	mov    ecx,0x1
c000a3ea:	57                   	push   edi
c000a3eb:	56                   	push   esi
c000a3ec:	53                   	push   ebx
c000a3ed:	83 ec 0c             	sub    esp,0xc
c000a3f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a3f4:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a3fa:	31 ff                	xor    edi,edi
c000a3fc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a3ff:	83 f9 18             	cmp    ecx,0x18
c000a402:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a405:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a40c:	75 27                	jne    c000a435 <VgaText::scrollScreen()+0x51>
c000a40e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a411:	01 f5                	add    ebp,esi
c000a413:	f7 c7 01 00 00 00    	test   edi,0x1
c000a419:	74 16                	je     c000a431 <VgaText::scrollScreen()+0x4d>
c000a41b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a41f:	50                   	push   eax
c000a420:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a424:	50                   	push   eax
c000a425:	e8 a8 ff ff ff       	call   c000a3d2 <VgaText::combineColours(unsigned char, unsigned char)>
c000a42a:	5a                   	pop    edx
c000a42b:	5a                   	pop    edx
c000a42c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a42f:	eb 04                	jmp    c000a435 <VgaText::scrollScreen()+0x51>
c000a431:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a435:	47                   	inc    edi
c000a436:	46                   	inc    esi
c000a437:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a43d:	75 bd                	jne    c000a3fc <VgaText::scrollScreen()+0x18>
c000a43f:	41                   	inc    ecx
c000a440:	83 f9 19             	cmp    ecx,0x19
c000a443:	75 af                	jne    c000a3f4 <VgaText::scrollScreen()+0x10>
c000a445:	39 1d f4 3f 02 c0    	cmp    DWORD PTR ds:0xc0023ff4,ebx
c000a44b:	75 1f                	jne    c000a46c <VgaText::scrollScreen()+0x88>
c000a44d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a451:	74 05                	je     c000a458 <VgaText::scrollScreen()+0x74>
c000a453:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a456:	eb 14                	jmp    c000a46c <VgaText::scrollScreen()+0x88>
c000a458:	50                   	push   eax
c000a459:	50                   	push   eax
c000a45a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a45e:	50                   	push   eax
c000a45f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a463:	50                   	push   eax
c000a464:	e8 87 f0 00 00       	call   c00194f0 <Hal::consoleScroll(int, int)>
c000a469:	83 c4 10             	add    esp,0x10
c000a46c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a470:	83 c4 0c             	add    esp,0xc
c000a473:	5b                   	pop    ebx
c000a474:	5e                   	pop    esi
c000a475:	5f                   	pop    edi
c000a476:	5d                   	pop    ebp
c000a477:	e9 66 fe ff ff       	jmp    c000a2e2 <VgaText::updateCursor()>

c000a47c <VgaText::combineCharAndColour(char, unsigned char)>:
c000a47c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a481:	c1 e0 08             	shl    eax,0x8
c000a484:	89 c2                	mov    edx,eax
c000a486:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a48b:	09 d0                	or     eax,edx
c000a48d:	c3                   	ret    

c000a48e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a48e:	55                   	push   ebp
c000a48f:	57                   	push   edi
c000a490:	56                   	push   esi
c000a491:	53                   	push   ebx
c000a492:	83 ec 1c             	sub    esp,0x1c
c000a495:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a499:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a49d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a4a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a4a9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a4ad:	0f b6 c3             	movzx  eax,bl
c000a4b0:	50                   	push   eax
c000a4b1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000a4b6:	50                   	push   eax
c000a4b7:	e8 16 ff ff ff       	call   c000a3d2 <VgaText::combineColours(unsigned char, unsigned char)>
c000a4bc:	5a                   	pop    edx
c000a4bd:	0f b6 c0             	movzx  eax,al
c000a4c0:	59                   	pop    ecx
c000a4c1:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000a4c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a4ca:	50                   	push   eax
c000a4cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a4cf:	e8 a8 ff ff ff       	call   c000a47c <VgaText::combineCharAndColour(char, unsigned char)>
c000a4d4:	5a                   	pop    edx
c000a4d5:	66 6b d7 50          	imul   dx,di,0x50
c000a4d9:	59                   	pop    ecx
c000a4da:	01 f2                	add    edx,esi
c000a4dc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a4df:	0f b7 d2             	movzx  edx,dx
c000a4e2:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000a4e6:	39 2d f4 3f 02 c0    	cmp    DWORD PTR ds:0xc0023ff4,ebp
c000a4ec:	75 28                	jne    c000a516 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000a4ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4f2:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000a4f6:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000a4fa:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000a4fe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a506:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a50a:	83 c4 1c             	add    esp,0x1c
c000a50d:	5b                   	pop    ebx
c000a50e:	5e                   	pop    esi
c000a50f:	5f                   	pop    edi
c000a510:	5d                   	pop    ebp
c000a511:	e9 e2 f0 00 00       	jmp    c00195f8 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000a516:	83 c4 1c             	add    esp,0x1c
c000a519:	5b                   	pop    ebx
c000a51a:	5e                   	pop    esi
c000a51b:	5f                   	pop    edi
c000a51c:	5d                   	pop    ebp
c000a51d:	c3                   	ret    

c000a51e <VgaText::getCursorX()>:
c000a51e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a522:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a525:	c3                   	ret    

c000a526 <VgaText::getCursorY()>:
c000a526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a52a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a52d:	c3                   	ret    

c000a52e <VgaText::setCursor(int, int)>:
c000a52e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a536:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a539:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a53d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a540:	e9 9d fd ff ff       	jmp    c000a2e2 <VgaText::updateCursor()>

c000a545 <setActiveTerminal(VgaText*)>:
c000a545:	53                   	push   ebx
c000a546:	83 ec 08             	sub    esp,0x8
c000a549:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a54d:	85 db                	test   ebx,ebx
c000a54f:	75 11                	jne    c000a562 <setActiveTerminal(VgaText*)+0x1d>
c000a551:	c7 44 24 10 94 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021294
c000a559:	83 c4 08             	add    esp,0x8
c000a55c:	5b                   	pop    ebx
c000a55d:	e9 a1 80 00 00       	jmp    c0012603 <Krnl::panic(char const*)>
c000a562:	a1 f4 3f 02 c0       	mov    eax,ds:0xc0023ff4
c000a567:	85 c0                	test   eax,eax
c000a569:	74 0c                	je     c000a577 <setActiveTerminal(VgaText*)+0x32>
c000a56b:	83 ec 0c             	sub    esp,0xc
c000a56e:	50                   	push   eax
c000a56f:	e8 6e fd ff ff       	call   c000a2e2 <VgaText::updateCursor()>
c000a574:	83 c4 10             	add    esp,0x10
c000a577:	89 1d f4 3f 02 c0    	mov    DWORD PTR ds:0xc0023ff4,ebx
c000a57d:	50                   	push   eax
c000a57e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a581:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a584:	53                   	push   ebx
c000a585:	e8 a4 ff ff ff       	call   c000a52e <VgaText::setCursor(int, int)>
c000a58a:	83 c4 18             	add    esp,0x18
c000a58d:	5b                   	pop    ebx
c000a58e:	c3                   	ret    
c000a58f:	90                   	nop

c000a590 <VgaText::clearScreen()>:
c000a590:	57                   	push   edi
c000a591:	56                   	push   esi
c000a592:	31 f6                	xor    esi,esi
c000a594:	53                   	push   ebx
c000a595:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a599:	52                   	push   edx
c000a59a:	6a 00                	push   0x0
c000a59c:	6a 00                	push   0x0
c000a59e:	53                   	push   ebx
c000a59f:	e8 8a ff ff ff       	call   c000a52e <VgaText::setCursor(int, int)>
c000a5a4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a5ab:	83 c4 10             	add    esp,0x10
c000a5ae:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000a5b1:	7e 20                	jle    c000a5d3 <VgaText::clearScreen()+0x43>
c000a5b3:	31 ff                	xor    edi,edi
c000a5b5:	50                   	push   eax
c000a5b6:	50                   	push   eax
c000a5b7:	56                   	push   esi
c000a5b8:	57                   	push   edi
c000a5b9:	47                   	inc    edi
c000a5ba:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a5bd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a5c0:	6a 20                	push   0x20
c000a5c2:	53                   	push   ebx
c000a5c3:	e8 c6 fe ff ff       	call   c000a48e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a5c8:	83 c4 20             	add    esp,0x20
c000a5cb:	83 ff 50             	cmp    edi,0x50
c000a5ce:	75 e5                	jne    c000a5b5 <VgaText::clearScreen()+0x25>
c000a5d0:	46                   	inc    esi
c000a5d1:	eb db                	jmp    c000a5ae <VgaText::clearScreen()+0x1e>
c000a5d3:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000a5da:	5b                   	pop    ebx
c000a5db:	5e                   	pop    esi
c000a5dc:	5f                   	pop    edi
c000a5dd:	c3                   	ret    

c000a5de <VgaText::setCursorX(int)>:
c000a5de:	83 ec 10             	sub    esp,0x10
c000a5e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a5e5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a5e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5ec:	50                   	push   eax
c000a5ed:	e8 3c ff ff ff       	call   c000a52e <VgaText::setCursor(int, int)>
c000a5f2:	83 c4 1c             	add    esp,0x1c
c000a5f5:	c3                   	ret    

c000a5f6 <VgaText::setCursorY(int)>:
c000a5f6:	83 ec 10             	sub    esp,0x10
c000a5f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a5fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a601:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a604:	50                   	push   eax
c000a605:	e8 24 ff ff ff       	call   c000a52e <VgaText::setCursor(int, int)>
c000a60a:	83 c4 1c             	add    esp,0x1c
c000a60d:	c3                   	ret    

c000a60e <VgaText::incrementCursor(bool)>:
c000a60e:	56                   	push   esi
c000a60f:	53                   	push   ebx
c000a610:	51                   	push   ecx
c000a611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a619:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a61c:	40                   	inc    eax
c000a61d:	83 f8 50             	cmp    eax,0x50
c000a620:	74 05                	je     c000a627 <VgaText::incrementCursor(bool)+0x19>
c000a622:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a625:	eb 24                	jmp    c000a64b <VgaText::incrementCursor(bool)+0x3d>
c000a627:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a62a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a631:	8d 50 01             	lea    edx,[eax+0x1]
c000a634:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a637:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a63a:	75 0f                	jne    c000a64b <VgaText::incrementCursor(bool)+0x3d>
c000a63c:	83 ec 0c             	sub    esp,0xc
c000a63f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a642:	53                   	push   ebx
c000a643:	e8 9c fd ff ff       	call   c000a3e4 <VgaText::scrollScreen()>
c000a648:	83 c4 10             	add    esp,0x10
c000a64b:	89 f0                	mov    eax,esi
c000a64d:	84 c0                	test   al,al
c000a64f:	74 0c                	je     c000a65d <VgaText::incrementCursor(bool)+0x4f>
c000a651:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a655:	5a                   	pop    edx
c000a656:	5b                   	pop    ebx
c000a657:	5e                   	pop    esi
c000a658:	e9 85 fc ff ff       	jmp    c000a2e2 <VgaText::updateCursor()>
c000a65d:	58                   	pop    eax
c000a65e:	5b                   	pop    ebx
c000a65f:	5e                   	pop    esi
c000a660:	c3                   	ret    
c000a661:	90                   	nop

c000a662 <VgaText::decrementCursor(bool)>:
c000a662:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a666:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a66a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a66d:	85 c0                	test   eax,eax
c000a66f:	74 04                	je     c000a675 <VgaText::decrementCursor(bool)+0x13>
c000a671:	48                   	dec    eax
c000a672:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a675:	84 c9                	test   cl,cl
c000a677:	74 09                	je     c000a682 <VgaText::decrementCursor(bool)+0x20>
c000a679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a67d:	e9 60 fc ff ff       	jmp    c000a2e2 <VgaText::updateCursor()>
c000a682:	c3                   	ret    
c000a683:	90                   	nop

c000a684 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a684:	53                   	push   ebx
c000a685:	83 ec 08             	sub    esp,0x8
c000a688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a68c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a690:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a698:	3c 07                	cmp    al,0x7
c000a69a:	75 21                	jne    c000a6bd <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000a69c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a6a4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000a6ac:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000a6b4:	83 c4 08             	add    esp,0x8
c000a6b7:	5b                   	pop    ebx
c000a6b8:	e9 9e 2e 00 00       	jmp    c000d55b <Krnl::beep(int, int, bool)>
c000a6bd:	3c 0d                	cmp    al,0xd
c000a6bf:	75 09                	jne    c000a6ca <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000a6c1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6c8:	eb 2c                	jmp    c000a6f6 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000a6ca:	3c 0a                	cmp    al,0xa
c000a6cc:	75 31                	jne    c000a6ff <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a6ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a6d1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6d8:	8d 50 01             	lea    edx,[eax+0x1]
c000a6db:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a6de:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a6e1:	75 0f                	jne    c000a6f2 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000a6e3:	83 ec 0c             	sub    esp,0xc
c000a6e6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a6e9:	53                   	push   ebx
c000a6ea:	e8 f5 fc ff ff       	call   c000a3e4 <VgaText::scrollScreen()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6f6:	83 c4 08             	add    esp,0x8
c000a6f9:	5b                   	pop    ebx
c000a6fa:	e9 e3 fb ff ff       	jmp    c000a2e2 <VgaText::updateCursor()>
c000a6ff:	3c 08                	cmp    al,0x8
c000a701:	75 25                	jne    c000a728 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000a703:	50                   	push   eax
c000a704:	50                   	push   eax
c000a705:	6a 01                	push   0x1
c000a707:	53                   	push   ebx
c000a708:	e8 55 ff ff ff       	call   c000a662 <VgaText::decrementCursor(bool)>
c000a70d:	5a                   	pop    edx
c000a70e:	59                   	pop    ecx
c000a70f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a712:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a715:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a718:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a71b:	6a 20                	push   0x20
c000a71d:	53                   	push   ebx
c000a71e:	e8 6b fd ff ff       	call   c000a48e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a723:	83 c4 28             	add    esp,0x28
c000a726:	5b                   	pop    ebx
c000a727:	c3                   	ret    
c000a728:	83 ec 08             	sub    esp,0x8
c000a72b:	0f be c0             	movsx  eax,al
c000a72e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a731:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a734:	51                   	push   ecx
c000a735:	52                   	push   edx
c000a736:	50                   	push   eax
c000a737:	53                   	push   ebx
c000a738:	e8 51 fd ff ff       	call   c000a48e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a73d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000a741:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000a749:	83 c4 28             	add    esp,0x28
c000a74c:	5b                   	pop    ebx
c000a74d:	e9 bc fe ff ff       	jmp    c000a60e <VgaText::incrementCursor(bool)>

c000a752 <VgaText::putchar(char)>:
c000a752:	56                   	push   esi
c000a753:	53                   	push   ebx
c000a754:	83 ec 14             	sub    esp,0x14
c000a757:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a75b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a75f:	3c 5b                	cmp    al,0x5b
c000a761:	75 18                	jne    c000a77b <VgaText::putchar(char)+0x29>
c000a763:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000a767:	74 1f                	je     c000a788 <VgaText::putchar(char)+0x36>
c000a769:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000a76f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000a776:	e9 bd 00 00 00       	jmp    c000a838 <VgaText::putchar(char)+0xe6>
c000a77b:	3c 1b                	cmp    al,0x1b
c000a77d:	75 09                	jne    c000a788 <VgaText::putchar(char)+0x36>
c000a77f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000a783:	e9 b0 00 00 00       	jmp    c000a838 <VgaText::putchar(char)+0xe6>
c000a788:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000a78b:	84 c9                	test   cl,cl
c000a78d:	0f 84 92 00 00 00    	je     c000a825 <VgaText::putchar(char)+0xd3>
c000a793:	8d 50 c0             	lea    edx,[eax-0x40]
c000a796:	80 fa 3e             	cmp    dl,0x3e
c000a799:	77 76                	ja     c000a811 <VgaText::putchar(char)+0xbf>
c000a79b:	3c 6d                	cmp    al,0x6d
c000a79d:	75 47                	jne    c000a7e6 <VgaText::putchar(char)+0x94>
c000a79f:	31 f6                	xor    esi,esi
c000a7a1:	31 d2                	xor    edx,edx
c000a7a3:	31 c0                	xor    eax,eax
c000a7a5:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000a7a8:	7e 2d                	jle    c000a7d7 <VgaText::putchar(char)+0x85>
c000a7aa:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000a7af:	80 fa 3b             	cmp    dl,0x3b
c000a7b2:	75 17                	jne    c000a7cb <VgaText::putchar(char)+0x79>
c000a7b4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000a7b8:	50                   	push   eax
c000a7b9:	53                   	push   ebx
c000a7ba:	e8 39 fb ff ff       	call   c000a2f8 <VgaText::doANSI_SGR(int)>
c000a7bf:	59                   	pop    ecx
c000a7c0:	31 d2                	xor    edx,edx
c000a7c2:	58                   	pop    eax
c000a7c3:	31 c0                	xor    eax,eax
c000a7c5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000a7c9:	eb 09                	jmp    c000a7d4 <VgaText::putchar(char)+0x82>
c000a7cb:	6b c0 0a             	imul   eax,eax,0xa
c000a7ce:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000a7d2:	88 ca                	mov    dl,cl
c000a7d4:	46                   	inc    esi
c000a7d5:	eb ce                	jmp    c000a7a5 <VgaText::putchar(char)+0x53>
c000a7d7:	84 d2                	test   dl,dl
c000a7d9:	74 2e                	je     c000a809 <VgaText::putchar(char)+0xb7>
c000a7db:	50                   	push   eax
c000a7dc:	53                   	push   ebx
c000a7dd:	e8 16 fb ff ff       	call   c000a2f8 <VgaText::doANSI_SGR(int)>
c000a7e2:	58                   	pop    eax
c000a7e3:	5a                   	pop    edx
c000a7e4:	eb 23                	jmp    c000a809 <VgaText::putchar(char)+0xb7>
c000a7e6:	3c 4a                	cmp    al,0x4a
c000a7e8:	75 1f                	jne    c000a809 <VgaText::putchar(char)+0xb7>
c000a7ea:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000a7ee:	75 19                	jne    c000a809 <VgaText::putchar(char)+0xb7>
c000a7f0:	83 ec 0c             	sub    esp,0xc
c000a7f3:	53                   	push   ebx
c000a7f4:	e8 97 fd ff ff       	call   c000a590 <VgaText::clearScreen()>
c000a7f9:	83 c4 0c             	add    esp,0xc
c000a7fc:	6a 00                	push   0x0
c000a7fe:	6a 00                	push   0x0
c000a800:	53                   	push   ebx
c000a801:	e8 28 fd ff ff       	call   c000a52e <VgaText::setCursor(int, int)>
c000a806:	83 c4 10             	add    esp,0x10
c000a809:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000a80f:	eb 27                	jmp    c000a838 <VgaText::putchar(char)+0xe6>
c000a811:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000a814:	83 fa 0e             	cmp    edx,0xe
c000a817:	7f 1f                	jg     c000a838 <VgaText::putchar(char)+0xe6>
c000a819:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a81c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000a81f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000a823:	eb 13                	jmp    c000a838 <VgaText::putchar(char)+0xe6>
c000a825:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a828:	0f be c0             	movsx  eax,al
c000a82b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a82e:	50                   	push   eax
c000a82f:	53                   	push   ebx
c000a830:	e8 4f fe ff ff       	call   c000a684 <VgaText::putchar(char, VgaColour, VgaColour)>
c000a835:	83 c4 10             	add    esp,0x10
c000a838:	83 c4 14             	add    esp,0x14
c000a83b:	5b                   	pop    ebx
c000a83c:	5e                   	pop    esi
c000a83d:	c3                   	ret    

c000a83e <VgaText::putx(unsigned int)>:
c000a83e:	57                   	push   edi
c000a83f:	b9 11 00 00 00       	mov    ecx,0x11
c000a844:	56                   	push   esi
c000a845:	be a2 12 02 c0       	mov    esi,0xc00212a2
c000a84a:	53                   	push   ebx
c000a84b:	83 ec 20             	sub    esp,0x20
c000a84e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a852:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000a856:	fc                   	cld    
c000a857:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a859:	be 08 00 00 00       	mov    esi,0x8
c000a85e:	50                   	push   eax
c000a85f:	50                   	push   eax
c000a860:	89 d8                	mov    eax,ebx
c000a862:	c1 e3 04             	shl    ebx,0x4
c000a865:	c1 e8 1c             	shr    eax,0x1c
c000a868:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000a86d:	50                   	push   eax
c000a86e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a872:	e8 db fe ff ff       	call   c000a752 <VgaText::putchar(char)>
c000a877:	83 c4 10             	add    esp,0x10
c000a87a:	4e                   	dec    esi
c000a87b:	75 e1                	jne    c000a85e <VgaText::putx(unsigned int)+0x20>
c000a87d:	83 c4 20             	add    esp,0x20
c000a880:	5b                   	pop    ebx
c000a881:	5e                   	pop    esi
c000a882:	5f                   	pop    edi
c000a883:	c3                   	ret    

c000a884 <VgaText::puts(char const*)>:
c000a884:	53                   	push   ebx
c000a885:	83 ec 08             	sub    esp,0x8
c000a888:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a88c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a88f:	84 c0                	test   al,al
c000a891:	74 12                	je     c000a8a5 <VgaText::puts(char const*)+0x21>
c000a893:	43                   	inc    ebx
c000a894:	51                   	push   ecx
c000a895:	51                   	push   ecx
c000a896:	50                   	push   eax
c000a897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a89b:	e8 b2 fe ff ff       	call   c000a752 <VgaText::putchar(char)>
c000a8a0:	83 c4 10             	add    esp,0x10
c000a8a3:	eb e7                	jmp    c000a88c <VgaText::puts(char const*)+0x8>
c000a8a5:	83 c4 08             	add    esp,0x8
c000a8a8:	5b                   	pop    ebx
c000a8a9:	c3                   	ret    

c000a8aa <VgaText::write(unsigned long long, void*, int*)>:
c000a8aa:	55                   	push   ebp
c000a8ab:	57                   	push   edi
c000a8ac:	56                   	push   esi
c000a8ad:	53                   	push   ebx
c000a8ae:	83 ec 0c             	sub    esp,0xc
c000a8b1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a8b5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a8b9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a8bd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000a8c4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000a8c7:	39 eb                	cmp    ebx,ebp
c000a8c9:	74 13                	je     c000a8de <VgaText::write(unsigned long long, void*, int*)+0x34>
c000a8cb:	43                   	inc    ebx
c000a8cc:	50                   	push   eax
c000a8cd:	50                   	push   eax
c000a8ce:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000a8d2:	50                   	push   eax
c000a8d3:	56                   	push   esi
c000a8d4:	e8 79 fe ff ff       	call   c000a752 <VgaText::putchar(char)>
c000a8d9:	83 c4 10             	add    esp,0x10
c000a8dc:	eb e9                	jmp    c000a8c7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000a8de:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000a8e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a8e9:	89 38                	mov    DWORD PTR [eax],edi
c000a8eb:	83 c4 0c             	add    esp,0xc
c000a8ee:	31 c0                	xor    eax,eax
c000a8f0:	5b                   	pop    ebx
c000a8f1:	5e                   	pop    esi
c000a8f2:	5f                   	pop    edi
c000a8f3:	5d                   	pop    ebp
c000a8f4:	c3                   	ret    
c000a8f5:	90                   	nop

c000a8f6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000a8f6:	55                   	push   ebp
c000a8f7:	57                   	push   edi
c000a8f8:	56                   	push   esi
c000a8f9:	53                   	push   ebx
c000a8fa:	83 ec 0c             	sub    esp,0xc
c000a8fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a901:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a906:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000a90d:	50                   	push   eax
c000a90e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000a913:	50                   	push   eax
c000a914:	e8 b9 fa ff ff       	call   c000a3d2 <VgaText::combineColours(unsigned char, unsigned char)>
c000a919:	5a                   	pop    edx
c000a91a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a91f:	59                   	pop    ecx
c000a920:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a923:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000a927:	0f b7 f6             	movzx  esi,si
c000a92a:	0f b6 e8             	movzx  ebp,al
c000a92d:	01 f6                	add    esi,esi
c000a92f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a932:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a935:	84 c0                	test   al,al
c000a937:	0f 84 ef 00 00 00    	je     c000aa2c <VgaText::puts(char const*, VgaColour, VgaColour)+0x136>
c000a93d:	3c 0d                	cmp    al,0xd
c000a93f:	75 0c                	jne    c000a94d <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c000a941:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a948:	e9 d9 00 00 00       	jmp    c000aa26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a94d:	3c 0a                	cmp    al,0xa
c000a94f:	75 45                	jne    c000a996 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c000a951:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a954:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a95b:	8d 48 01             	lea    ecx,[eax+0x1]
c000a95e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000a961:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000a964:	75 0f                	jne    c000a975 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7f>
c000a966:	83 ec 0c             	sub    esp,0xc
c000a969:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a96c:	53                   	push   ebx
c000a96d:	e8 72 fa ff ff       	call   c000a3e4 <VgaText::scrollScreen()>
c000a972:	83 c4 10             	add    esp,0x10
c000a975:	83 ec 0c             	sub    esp,0xc
c000a978:	53                   	push   ebx
c000a979:	e8 64 f9 ff ff       	call   c000a2e2 <VgaText::updateCursor()>
c000a97e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a983:	83 c4 10             	add    esp,0x10
c000a986:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a989:	0f b7 f6             	movzx  esi,si
c000a98c:	01 f6                	add    esi,esi
c000a98e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a991:	e9 90 00 00 00       	jmp    c000aa26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a996:	3c 08                	cmp    al,0x8
c000a998:	75 35                	jne    c000a9cf <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c000a99a:	51                   	push   ecx
c000a99b:	51                   	push   ecx
c000a99c:	6a 01                	push   0x1
c000a99e:	53                   	push   ebx
c000a99f:	e8 be fc ff ff       	call   c000a662 <VgaText::decrementCursor(bool)>
c000a9a4:	5e                   	pop    esi
c000a9a5:	58                   	pop    eax
c000a9a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9a9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9ac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a9af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a9b2:	6a 20                	push   0x20
c000a9b4:	53                   	push   ebx
c000a9b5:	e8 d4 fa ff ff       	call   c000a48e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a9ba:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000a9bf:	83 c4 20             	add    esp,0x20
c000a9c2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000a9c5:	0f b7 f6             	movzx  esi,si
c000a9c8:	01 f6                	add    esi,esi
c000a9ca:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a9cd:	eb 57                	jmp    c000aa26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000a9cf:	52                   	push   edx
c000a9d0:	52                   	push   edx
c000a9d1:	55                   	push   ebp
c000a9d2:	50                   	push   eax
c000a9d3:	e8 a4 fa ff ff       	call   c000a47c <VgaText::combineCharAndColour(char, unsigned char)>
c000a9d8:	83 c4 10             	add    esp,0x10
c000a9db:	66 89 06             	mov    WORD PTR [esi],ax
c000a9de:	39 1d f4 3f 02 c0    	cmp    DWORD PTR ds:0xc0023ff4,ebx
c000a9e4:	75 1d                	jne    c000aa03 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c000a9e6:	83 ec 0c             	sub    esp,0xc
c000a9e9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9ec:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9ef:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000a9f3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000a9f7:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000a9fa:	50                   	push   eax
c000a9fb:	e8 f8 eb 00 00       	call   c00195f8 <Hal::consoleWriteCharacter(char, int, int, int, int)>
c000aa00:	83 c4 20             	add    esp,0x20
c000aa03:	83 c6 02             	add    esi,0x2
c000aa06:	50                   	push   eax
c000aa07:	50                   	push   eax
c000aa08:	6a 00                	push   0x0
c000aa0a:	53                   	push   ebx
c000aa0b:	e8 fe fb ff ff       	call   c000a60e <VgaText::incrementCursor(bool)>
c000aa10:	83 c4 10             	add    esp,0x10
c000aa13:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aa17:	75 0d                	jne    c000aa26 <VgaText::puts(char const*, VgaColour, VgaColour)+0x130>
c000aa19:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa1e:	0f b7 f6             	movzx  esi,si
c000aa21:	01 f6                	add    esi,esi
c000aa23:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa26:	47                   	inc    edi
c000aa27:	e9 06 ff ff ff       	jmp    c000a932 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3c>
c000aa2c:	83 ec 0c             	sub    esp,0xc
c000aa2f:	53                   	push   ebx
c000aa30:	e8 ad f8 ff ff       	call   c000a2e2 <VgaText::updateCursor()>
c000aa35:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aa3c:	83 c4 1c             	add    esp,0x1c
c000aa3f:	5b                   	pop    ebx
c000aa40:	5e                   	pop    esi
c000aa41:	5f                   	pop    edi
c000aa42:	5d                   	pop    ebp
c000aa43:	c3                   	ret    

c000aa44 <VgaText::VgaText(char const*)>:
c000aa44:	56                   	push   esi
c000aa45:	53                   	push   ebx
c000aa46:	83 ec 04             	sub    esp,0x4
c000aa49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa4d:	83 ec 08             	sub    esp,0x8
c000aa50:	6a 00                	push   0x0
c000aa52:	50                   	push   eax
c000aa53:	e8 ca 04 00 00       	call   c000af22 <UnixFile::UnixFile(int)>
c000aa58:	83 c4 10             	add    esp,0x10
c000aa5b:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000aa60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa64:	89 10                	mov    DWORD PTR [eax],edx
c000aa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000aa71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa75:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000aa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa80:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000aa84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa88:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000aa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa90:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000aa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000aaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000aaad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000aab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabc:	05 82 00 00 00       	add    eax,0x82
c000aac1:	83 ec 08             	sub    esp,0x8
c000aac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aac8:	50                   	push   eax
c000aac9:	e8 96 5a ff ff       	call   c0000564 <strcpy>
c000aace:	83 c4 10             	add    esp,0x10
c000aad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad5:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c000aadc:	83 ec 0c             	sub    esp,0xc
c000aadf:	6a 01                	push   0x1
c000aae1:	e8 7f 08 00 00       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c000aae6:	83 c4 10             	add    esp,0x10
c000aae9:	89 c2                	mov    edx,eax
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aaf2:	8b 1d 94 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024094
c000aaf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aaff:	89 c6                	mov    esi,eax
c000ab01:	e8 ac f0 ff ff       	call   c0009bb2 <Phys::allocatePage()>
c000ab06:	68 05 0c 00 00       	push   0xc05
c000ab0b:	56                   	push   esi
c000ab0c:	50                   	push   eax
c000ab0d:	53                   	push   ebx
c000ab0e:	e8 bd 0e 00 00       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab1d:	83 ec 04             	sub    esp,0x4
c000ab20:	68 a0 0f 00 00       	push   0xfa0
c000ab25:	6a 00                	push   0x0
c000ab27:	50                   	push   eax
c000ab28:	e8 7b 59 ff ff       	call   c00004a8 <memset>
c000ab2d:	83 c4 10             	add    esp,0x10
c000ab30:	83 ec 04             	sub    esp,0x4
c000ab33:	6a 00                	push   0x0
c000ab35:	6a 07                	push   0x7
c000ab37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3b:	e8 4c f8 ff ff       	call   c000a38c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ab40:	83 c4 10             	add    esp,0x10
c000ab43:	83 ec 04             	sub    esp,0x4
c000ab46:	6a 00                	push   0x0
c000ab48:	6a 00                	push   0x0
c000ab4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab4e:	e8 db f9 ff ff       	call   c000a52e <VgaText::setCursor(int, int)>
c000ab53:	83 c4 10             	add    esp,0x10
c000ab56:	83 ec 0c             	sub    esp,0xc
c000ab59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab5d:	e8 2e fa ff ff       	call   c000a590 <VgaText::clearScreen()>
c000ab62:	83 c4 10             	add    esp,0x10
c000ab65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab69:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000ab6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab71:	05 02 01 00 00       	add    eax,0x102
c000ab76:	83 ec 04             	sub    esp,0x4
c000ab79:	6a 30                	push   0x30
c000ab7b:	6a 00                	push   0x0
c000ab7d:	50                   	push   eax
c000ab7e:	e8 25 59 ff ff       	call   c00004a8 <memset>
c000ab83:	83 c4 10             	add    esp,0x10
c000ab86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8a:	05 32 01 00 00       	add    eax,0x132
c000ab8f:	83 ec 04             	sub    esp,0x4
c000ab92:	68 80 00 00 00       	push   0x80
c000ab97:	6a 00                	push   0x0
c000ab99:	50                   	push   eax
c000ab9a:	e8 09 59 ff ff       	call   c00004a8 <memset>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	90                   	nop
c000aba3:	83 c4 04             	add    esp,0x4
c000aba6:	5b                   	pop    ebx
c000aba7:	5e                   	pop    esi
c000aba8:	c3                   	ret    
c000aba9:	90                   	nop

c000abaa <VgaText::receiveKey(unsigned char)>:
c000abaa:	57                   	push   edi
c000abab:	56                   	push   esi
c000abac:	53                   	push   ebx
c000abad:	83 ec 10             	sub    esp,0x10
c000abb0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000abb4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000abb8:	84 db                	test   bl,bl
c000abba:	0f 84 ba 00 00 00    	je     c000ac7a <VgaText::receiveKey(unsigned char)+0xd0>
c000abc0:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000abc6:	80 fb 08             	cmp    bl,0x8
c000abc9:	75 2c                	jne    c000abf7 <VgaText::receiveKey(unsigned char)+0x4d>
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	57                   	push   edi
c000abcf:	e8 f0 58 ff ff       	call   c00004c4 <strlen>
c000abd4:	83 c4 10             	add    esp,0x10
c000abd7:	85 c0                	test   eax,eax
c000abd9:	74 41                	je     c000ac1c <VgaText::receiveKey(unsigned char)+0x72>
c000abdb:	50                   	push   eax
c000abdc:	50                   	push   eax
c000abdd:	6a 08                	push   0x8
c000abdf:	56                   	push   esi
c000abe0:	e8 6d fb ff ff       	call   c000a752 <VgaText::putchar(char)>
c000abe5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000abe8:	e8 d7 58 ff ff       	call   c00004c4 <strlen>
c000abed:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000abf5:	eb 22                	jmp    c000ac19 <VgaText::receiveKey(unsigned char)+0x6f>
c000abf7:	0f be c3             	movsx  eax,bl
c000abfa:	52                   	push   edx
c000abfb:	52                   	push   edx
c000abfc:	50                   	push   eax
c000abfd:	56                   	push   esi
c000abfe:	e8 4f fb ff ff       	call   c000a752 <VgaText::putchar(char)>
c000ac03:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000ac07:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac0c:	59                   	pop    ecx
c000ac0d:	58                   	pop    eax
c000ac0e:	8d 44 24 16          	lea    eax,[esp+0x16]
c000ac12:	50                   	push   eax
c000ac13:	57                   	push   edi
c000ac14:	e8 8b 5a ff ff       	call   c00006a4 <strcat>
c000ac19:	83 c4 10             	add    esp,0x10
c000ac1c:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000ac23:	75 05                	jne    c000ac2a <VgaText::receiveKey(unsigned char)+0x80>
c000ac25:	80 fb 0a             	cmp    bl,0xa
c000ac28:	75 50                	jne    c000ac7a <VgaText::receiveKey(unsigned char)+0xd0>
c000ac2a:	83 ec 0c             	sub    esp,0xc
c000ac2d:	81 c6 32 01 00 00    	add    esi,0x132
c000ac33:	56                   	push   esi
c000ac34:	e8 8b 58 ff ff       	call   c00004c4 <strlen>
c000ac39:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ac3c:	89 c3                	mov    ebx,eax
c000ac3e:	e8 81 58 ff ff       	call   c00004c4 <strlen>
c000ac43:	83 c4 10             	add    esp,0x10
c000ac46:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c000ac4a:	3d 80 00 00 00       	cmp    eax,0x80
c000ac4f:	76 10                	jbe    c000ac61 <VgaText::receiveKey(unsigned char)+0xb7>
c000ac51:	83 ec 0c             	sub    esp,0xc
c000ac54:	68 b3 12 02 c0       	push   0xc00212b3
c000ac59:	e8 a5 79 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000ac5e:	83 c4 10             	add    esp,0x10
c000ac61:	50                   	push   eax
c000ac62:	50                   	push   eax
c000ac63:	57                   	push   edi
c000ac64:	56                   	push   esi
c000ac65:	e8 3a 5a ff ff       	call   c00006a4 <strcat>
c000ac6a:	83 c4 0c             	add    esp,0xc
c000ac6d:	6a 30                	push   0x30
c000ac6f:	6a 00                	push   0x0
c000ac71:	57                   	push   edi
c000ac72:	e8 31 58 ff ff       	call   c00004a8 <memset>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	83 c4 10             	add    esp,0x10
c000ac7d:	5b                   	pop    ebx
c000ac7e:	5e                   	pop    esi
c000ac7f:	5f                   	pop    edi
c000ac80:	c3                   	ret    
c000ac81:	90                   	nop

c000ac82 <VgaText::doUpdate()>:
c000ac82:	c3                   	ret    

c000ac83 <newTerminal(char*)>:
c000ac83:	83 ec 28             	sub    esp,0x28
c000ac86:	68 b4 01 00 00       	push   0x1b4
c000ac8b:	e8 ef ea ff ff       	call   c000977f <malloc>
c000ac90:	5a                   	pop    edx
c000ac91:	59                   	pop    ecx
c000ac92:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ac96:	50                   	push   eax
c000ac97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ac9b:	e8 a4 fd ff ff       	call   c000aa44 <VgaText::VgaText(char const*)>
c000aca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aca4:	83 c4 2c             	add    esp,0x2c
c000aca7:	c3                   	ret    

c000aca8 <TSS::TSS()>:
c000aca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000acb3:	90                   	nop
c000acb4:	c3                   	ret    
c000acb5:	90                   	nop
c000acb6:	66 90                	xchg   ax,ax

c000acb8 <TSS::setESP(unsigned long)>:
c000acb8:	55                   	push   ebp
c000acb9:	89 e5                	mov    ebp,esp
c000acbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000acc1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000acc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000acc7:	90                   	nop
c000acc8:	5d                   	pop    ebp
c000acc9:	c3                   	ret    
c000acca:	66 90                	xchg   ax,ax

c000accc <TSS::flush()>:
c000accc:	55                   	push   ebp
c000accd:	89 e5                	mov    ebp,esp
c000accf:	83 ec 10             	sub    esp,0x10
c000acd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000acd7:	83 c8 03             	or     eax,0x3
c000acda:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000acde:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000ace2:	66 89 d0             	mov    ax,dx
c000ace5:	0f 00 d8             	ltr    ax
c000ace8:	90                   	nop
c000ace9:	c9                   	leave  
c000acea:	c3                   	ret    
c000aceb:	90                   	nop

c000acec <TSS::setup(unsigned long, unsigned long)>:
c000acec:	55                   	push   ebp
c000aced:	89 e5                	mov    ebp,esp
c000acef:	83 ec 18             	sub    esp,0x18
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	6a 68                	push   0x68
c000acf7:	e8 83 ea ff ff       	call   c000977f <malloc>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 c2                	mov    edx,eax
c000ad01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad0d:	83 ec 04             	sub    esp,0x4
c000ad10:	6a 68                	push   0x68
c000ad12:	6a 00                	push   0x0
c000ad14:	50                   	push   eax
c000ad15:	e8 8e 57 ff ff       	call   c00004a8 <memset>
c000ad1a:	83 c4 10             	add    esp,0x10
c000ad1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad23:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000ad29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad2f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000ad35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad3b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ad3e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad47:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000ad4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad53:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000ad59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad5f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000ad65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad6b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000ad71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad77:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000ad7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad83:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000ad89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad8f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000ad92:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000ad95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ad9b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ad9e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ada1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ada4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ada7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000adae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adb4:	0f 20 da             	mov    edx,cr3
c000adb7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000adba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000adbd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000adc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000adc6:	83 ec 08             	sub    esp,0x8
c000adc9:	50                   	push   eax
c000adca:	8d 45 ec             	lea    eax,[ebp-0x14]
c000adcd:	50                   	push   eax
c000adce:	e8 e5 e1 ff ff       	call   c0008fb8 <GDTEntry::setBase(unsigned int)>
c000add3:	83 c4 10             	add    esp,0x10
c000add6:	83 ec 08             	sub    esp,0x8
c000add9:	6a 68                	push   0x68
c000addb:	8d 45 ec             	lea    eax,[ebp-0x14]
c000adde:	50                   	push   eax
c000addf:	e8 f0 e1 ff ff       	call   c0008fd4 <GDTEntry::setLimit(unsigned int)>
c000ade4:	83 c4 10             	add    esp,0x10
c000ade7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000adeb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000adee:	83 e0 0f             	and    eax,0xf
c000adf1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000adf4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000adf7:	83 c8 40             	or     eax,0x40
c000adfa:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000adfd:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000ae02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ae08:	05 78 01 00 00       	add    eax,0x178
c000ae0d:	83 ec 04             	sub    esp,0x4
c000ae10:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ae13:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000ae16:	50                   	push   eax
c000ae17:	e8 ec e1 ff ff       	call   c0009008 <GDT::addEntry(GDTEntry)>
c000ae1c:	83 c4 10             	add    esp,0x10
c000ae1f:	89 c2                	mov    edx,eax
c000ae21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae24:	89 10                	mov    DWORD PTR [eax],edx
c000ae26:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000ae2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ae31:	05 78 01 00 00       	add    eax,0x178
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	50                   	push   eax
c000ae3a:	e8 f3 e1 ff ff       	call   c0009032 <GDT::flush()>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae45:	8b 00                	mov    eax,DWORD PTR [eax]
c000ae47:	c9                   	leave  
c000ae48:	c3                   	ret    
c000ae49:	90                   	nop

c000ae4a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000ae4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ae52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ae55:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000ae5a:	75 08                	jne    c000ae64 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000ae5c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000ae62:	eb 38                	jmp    c000ae9c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000ae64:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000ae69:	75 17                	jne    c000ae82 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000ae6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ae70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ae73:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000ae79:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae7f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000ae82:	89 c1                	mov    ecx,eax
c000ae84:	83 e1 fd             	and    ecx,0xfffffffd
c000ae87:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000ae8d:	74 cd                	je     c000ae5c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000ae8f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000ae94:	83 e0 ef             	and    eax,0xffffffef
c000ae97:	83 f8 08             	cmp    eax,0x8
c000ae9a:	76 c0                	jbe    c000ae5c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000ae9c:	31 c0                	xor    eax,eax
c000ae9e:	c3                   	ret    
c000ae9f:	90                   	nop

c000aea0 <ReservedFilename::isAtty()>:
c000aea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aea4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000aea7:	31 c0                	xor    eax,eax
c000aea9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000aeaf:	74 09                	je     c000aeba <ReservedFilename::isAtty()+0x1a>
c000aeb1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000aeb7:	0f 94 c0             	sete   al
c000aeba:	c3                   	ret    
c000aebb:	90                   	nop

c000aebc <ReservedFilename::write(unsigned long long, void*, int*)>:
c000aebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aec0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aec4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aec7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aecb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000aed0:	75 08                	jne    c000aeda <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000aed2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000aed8:	eb 3d                	jmp    c000af17 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000aeda:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000aedf:	75 17                	jne    c000aef8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000aee1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000aee6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000aee9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000aeef:	8b 10                	mov    edx,DWORD PTR [eax]
c000aef1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aef5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000aef8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000aefd:	75 04                	jne    c000af03 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000aeff:	89 0a                	mov    DWORD PTR [edx],ecx
c000af01:	eb 14                	jmp    c000af17 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000af03:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000af08:	74 c8                	je     c000aed2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000af0a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000af0f:	83 e0 ef             	and    eax,0xffffffef
c000af12:	83 f8 08             	cmp    eax,0x8
c000af15:	76 bb                	jbe    c000aed2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000af17:	31 c0                	xor    eax,eax
c000af19:	c3                   	ret    

c000af1a <UnixFile::getFileDescriptor()>:
c000af1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000af21:	c3                   	ret    

c000af22 <UnixFile::UnixFile(int)>:
c000af22:	53                   	push   ebx
c000af23:	83 ec 28             	sub    esp,0x28
c000af26:	ba d0 13 02 c0       	mov    edx,0xc00213d0
c000af2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af2f:	89 10                	mov    DWORD PTR [eax],edx
c000af31:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000af39:	0f 8f 8c 01 00 00    	jg     c000b0cb <UnixFile::UnixFile(int)+0x1a9>
c000af3f:	a1 40 39 02 c0       	mov    eax,ds:0xc0023940
c000af44:	8d 50 01             	lea    edx,[eax+0x1]
c000af47:	89 15 40 39 02 c0    	mov    DWORD PTR ds:0xc0023940,edx
c000af4d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000af51:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000af54:	83 ec 08             	sub    esp,0x8
c000af57:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000af5b:	68 78 40 02 c0       	push   0xc0024078
c000af60:	e8 23 4e 01 00       	call   c001fd88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000af65:	83 c4 10             	add    esp,0x10
c000af68:	a0 74 40 02 c0       	mov    al,ds:0xc0024074
c000af6d:	83 f0 01             	xor    eax,0x1
c000af70:	84 c0                	test   al,al
c000af72:	0f 84 54 01 00 00    	je     c000b0cc <UnixFile::UnixFile(int)+0x1aa>
c000af78:	c6 05 74 40 02 c0 01 	mov    BYTE PTR ds:0xc0024074,0x1
c000af7f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000af87:	83 ec 0c             	sub    esp,0xc
c000af8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af8e:	e8 ec e7 ff ff       	call   c000977f <malloc>
c000af93:	83 c4 10             	add    esp,0x10
c000af96:	89 c3                	mov    ebx,eax
c000af98:	83 ec 08             	sub    esp,0x8
c000af9b:	68 03 ff ff 0f       	push   0xfffff03
c000afa0:	53                   	push   ebx
c000afa1:	e8 2c 01 00 00       	call   c000b0d2 <ReservedFilename::ReservedFilename(int)>
c000afa6:	83 c4 10             	add    esp,0x10
c000afa9:	89 1d 6c 40 02 c0    	mov    DWORD PTR ds:0xc002406c,ebx
c000afaf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000afb7:	83 ec 0c             	sub    esp,0xc
c000afba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afbe:	e8 bc e7 ff ff       	call   c000977f <malloc>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	89 c3                	mov    ebx,eax
c000afc8:	83 ec 08             	sub    esp,0x8
c000afcb:	68 01 ff ff 0f       	push   0xfffff01
c000afd0:	53                   	push   ebx
c000afd1:	e8 fc 00 00 00       	call   c000b0d2 <ReservedFilename::ReservedFilename(int)>
c000afd6:	83 c4 10             	add    esp,0x10
c000afd9:	89 1d 70 40 02 c0    	mov    DWORD PTR ds:0xc0024070,ebx
c000afdf:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000afe7:	83 ec 0c             	sub    esp,0xc
c000afea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000afee:	e8 8c e7 ff ff       	call   c000977f <malloc>
c000aff3:	83 c4 10             	add    esp,0x10
c000aff6:	89 c3                	mov    ebx,eax
c000aff8:	83 ec 08             	sub    esp,0x8
c000affb:	68 00 ff ff 0f       	push   0xfffff00
c000b000:	53                   	push   ebx
c000b001:	e8 cc 00 00 00       	call   c000b0d2 <ReservedFilename::ReservedFilename(int)>
c000b006:	83 c4 10             	add    esp,0x10
c000b009:	89 1d 64 40 02 c0    	mov    DWORD PTR ds:0xc0024064,ebx
c000b00f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b017:	83 ec 0c             	sub    esp,0xc
c000b01a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b01e:	e8 5c e7 ff ff       	call   c000977f <malloc>
c000b023:	83 c4 10             	add    esp,0x10
c000b026:	89 c3                	mov    ebx,eax
c000b028:	83 ec 08             	sub    esp,0x8
c000b02b:	68 02 ff ff 0f       	push   0xfffff02
c000b030:	53                   	push   ebx
c000b031:	e8 9c 00 00 00       	call   c000b0d2 <ReservedFilename::ReservedFilename(int)>
c000b036:	83 c4 10             	add    esp,0x10
c000b039:	89 1d 68 40 02 c0    	mov    DWORD PTR ds:0xc0024068,ebx
c000b03f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b047:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b04c:	7f 7e                	jg     c000b0cc <UnixFile::UnixFile(int)+0x1aa>
c000b04e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b05d:	e8 1d e7 ff ff       	call   c000977f <malloc>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	89 c3                	mov    ebx,eax
c000b067:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b06b:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b070:	83 ec 08             	sub    esp,0x8
c000b073:	50                   	push   eax
c000b074:	53                   	push   ebx
c000b075:	e8 58 00 00 00       	call   c000b0d2 <ReservedFilename::ReservedFilename(int)>
c000b07a:	83 c4 10             	add    esp,0x10
c000b07d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b081:	89 1c 85 40 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbfc0],ebx
c000b088:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b090:	83 ec 0c             	sub    esp,0xc
c000b093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b097:	e8 e3 e6 ff ff       	call   c000977f <malloc>
c000b09c:	83 c4 10             	add    esp,0x10
c000b09f:	89 c3                	mov    ebx,eax
c000b0a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0a5:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b0aa:	83 ec 08             	sub    esp,0x8
c000b0ad:	50                   	push   eax
c000b0ae:	53                   	push   ebx
c000b0af:	e8 1e 00 00 00       	call   c000b0d2 <ReservedFilename::ReservedFilename(int)>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0bb:	89 1c 85 00 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc000],ebx
c000b0c2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b0c6:	e9 7c ff ff ff       	jmp    c000b047 <UnixFile::UnixFile(int)+0x125>
c000b0cb:	90                   	nop
c000b0cc:	83 c4 28             	add    esp,0x28
c000b0cf:	5b                   	pop    ebx
c000b0d0:	c3                   	ret    
c000b0d1:	90                   	nop

c000b0d2 <ReservedFilename::ReservedFilename(int)>:
c000b0d2:	83 ec 0c             	sub    esp,0xc
c000b0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d9:	83 ec 08             	sub    esp,0x8
c000b0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0e0:	50                   	push   eax
c000b0e1:	e8 3c fe ff ff       	call   c000af22 <UnixFile::UnixFile(int)>
c000b0e6:	83 c4 10             	add    esp,0x10
c000b0e9:	ba ec 13 02 c0       	mov    edx,0xc00213ec
c000b0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f2:	89 10                	mov    DWORD PTR [eax],edx
c000b0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b0fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0ff:	90                   	nop
c000b100:	83 c4 0c             	add    esp,0xc
c000b103:	c3                   	ret    

c000b104 <UnixFile::~UnixFile()>:
c000b104:	83 ec 1c             	sub    esp,0x1c
c000b107:	ba d0 13 02 c0       	mov    edx,0xc00213d0
c000b10c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b110:	89 10                	mov    DWORD PTR [eax],edx
c000b112:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b119:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b11e:	7f 73                	jg     c000b193 <UnixFile::~UnixFile()+0x8f>
c000b120:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b128:	83 ec 0c             	sub    esp,0xc
c000b12b:	68 78 40 02 c0       	push   0xc0024078
c000b130:	e8 27 4d 01 00       	call   c001fe5c <LinkedList<UnixFile>::getFirstElement()>
c000b135:	83 c4 10             	add    esp,0x10
c000b138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b13c:	83 ec 0c             	sub    esp,0xc
c000b13f:	68 78 40 02 c0       	push   0xc0024078
c000b144:	e8 1b 4d 01 00       	call   c001fe64 <LinkedList<UnixFile>::removeFirst()>
c000b149:	83 c4 10             	add    esp,0x10
c000b14c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b150:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b154:	74 40                	je     c000b196 <UnixFile::~UnixFile()+0x92>
c000b156:	83 ec 08             	sub    esp,0x8
c000b159:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b15d:	68 78 40 02 c0       	push   0xc0024078
c000b162:	e8 21 4c 01 00       	call   c001fd88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b167:	83 c4 10             	add    esp,0x10
c000b16a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b16e:	8d 50 01             	lea    edx,[eax+0x1]
c000b171:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b175:	3d 88 13 00 00       	cmp    eax,0x1388
c000b17a:	0f 94 c0             	sete   al
c000b17d:	84 c0                	test   al,al
c000b17f:	74 a7                	je     c000b128 <UnixFile::~UnixFile()+0x24>
c000b181:	83 ec 0c             	sub    esp,0xc
c000b184:	68 a8 13 02 c0       	push   0xc00213a8
c000b189:	e8 75 74 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000b18e:	83 c4 10             	add    esp,0x10
c000b191:	eb 95                	jmp    c000b128 <UnixFile::~UnixFile()+0x24>
c000b193:	90                   	nop
c000b194:	eb 01                	jmp    c000b197 <UnixFile::~UnixFile()+0x93>
c000b196:	90                   	nop
c000b197:	90                   	nop
c000b198:	83 c4 1c             	add    esp,0x1c
c000b19b:	c3                   	ret    

c000b19c <UnixFile::~UnixFile()>:
c000b19c:	83 ec 0c             	sub    esp,0xc
c000b19f:	83 ec 0c             	sub    esp,0xc
c000b1a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1a6:	e8 59 ff ff ff       	call   c000b104 <UnixFile::~UnixFile()>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	83 ec 08             	sub    esp,0x8
c000b1b1:	6a 0c                	push   0xc
c000b1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1b7:	e8 24 14 00 00       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	83 c4 0c             	add    esp,0xc
c000b1c2:	c3                   	ret    
c000b1c3:	90                   	nop

c000b1c4 <ReservedFilename::~ReservedFilename()>:
c000b1c4:	83 ec 0c             	sub    esp,0xc
c000b1c7:	ba ec 13 02 c0       	mov    edx,0xc00213ec
c000b1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d0:	89 10                	mov    DWORD PTR [eax],edx
c000b1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	50                   	push   eax
c000b1da:	e8 25 ff ff ff       	call   c000b104 <UnixFile::~UnixFile()>
c000b1df:	83 c4 10             	add    esp,0x10
c000b1e2:	90                   	nop
c000b1e3:	83 c4 0c             	add    esp,0xc
c000b1e6:	c3                   	ret    
c000b1e7:	90                   	nop

c000b1e8 <ReservedFilename::~ReservedFilename()>:
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	83 ec 0c             	sub    esp,0xc
c000b1ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1f2:	e8 cd ff ff ff       	call   c000b1c4 <ReservedFilename::~ReservedFilename()>
c000b1f7:	83 c4 10             	add    esp,0x10
c000b1fa:	83 ec 08             	sub    esp,0x8
c000b1fd:	6a 0c                	push   0xc
c000b1ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b203:	e8 d8 13 00 00       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	83 c4 0c             	add    esp,0xc
c000b20e:	c3                   	ret    

c000b20f <getFromFileDescriptor(int)>:
c000b20f:	53                   	push   ebx
c000b210:	83 ec 08             	sub    esp,0x8
c000b213:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b217:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b21d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b223:	7f 2c                	jg     c000b251 <getFromFileDescriptor(int)+0x42>
c000b225:	83 ec 0c             	sub    esp,0xc
c000b228:	68 78 40 02 c0       	push   0xc0024078
c000b22d:	e8 2a 4c 01 00       	call   c001fe5c <LinkedList<UnixFile>::getFirstElement()>
c000b232:	83 c4 10             	add    esp,0x10
c000b235:	85 c0                	test   eax,eax
c000b237:	75 04                	jne    c000b23d <getFromFileDescriptor(int)+0x2e>
c000b239:	31 c0                	xor    eax,eax
c000b23b:	eb 6e                	jmp    c000b2ab <getFromFileDescriptor(int)+0x9c>
c000b23d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b240:	74 69                	je     c000b2ab <getFromFileDescriptor(int)+0x9c>
c000b242:	52                   	push   edx
c000b243:	52                   	push   edx
c000b244:	50                   	push   eax
c000b245:	68 78 40 02 c0       	push   0xc0024078
c000b24a:	e8 b7 4c 01 00       	call   c001ff06 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b24f:	eb e1                	jmp    c000b232 <getFromFileDescriptor(int)+0x23>
c000b251:	a1 6c 40 02 c0       	mov    eax,ds:0xc002406c
c000b256:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b25c:	74 4d                	je     c000b2ab <getFromFileDescriptor(int)+0x9c>
c000b25e:	a1 70 40 02 c0       	mov    eax,ds:0xc0024070
c000b263:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b269:	74 40                	je     c000b2ab <getFromFileDescriptor(int)+0x9c>
c000b26b:	a1 68 40 02 c0       	mov    eax,ds:0xc0024068
c000b270:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b276:	74 33                	je     c000b2ab <getFromFileDescriptor(int)+0x9c>
c000b278:	a1 64 40 02 c0       	mov    eax,ds:0xc0024064
c000b27d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b283:	74 26                	je     c000b2ab <getFromFileDescriptor(int)+0x9c>
c000b285:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b28b:	83 f8 08             	cmp    eax,0x8
c000b28e:	77 09                	ja     c000b299 <getFromFileDescriptor(int)+0x8a>
c000b290:	8b 04 85 40 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbfc0]
c000b297:	eb 12                	jmp    c000b2ab <getFromFileDescriptor(int)+0x9c>
c000b299:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b29f:	83 fb 08             	cmp    ebx,0x8
c000b2a2:	77 95                	ja     c000b239 <getFromFileDescriptor(int)+0x2a>
c000b2a4:	8b 04 9d 00 40 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc000]
c000b2ab:	83 c4 08             	add    esp,0x8
c000b2ae:	5b                   	pop    ebx
c000b2af:	c3                   	ret    

c000b2b0 <__static_initialization_and_destruction_0(int, int)>:
c000b2b0:	83 ec 0c             	sub    esp,0xc
c000b2b3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b2b8:	75 34                	jne    c000b2ee <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b2ba:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b2c2:	75 2a                	jne    c000b2ee <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b2c4:	83 ec 0c             	sub    esp,0xc
c000b2c7:	68 78 40 02 c0       	push   0xc0024078
c000b2cc:	e8 75 4a 01 00       	call   c001fd46 <LinkedList<UnixFile>::LinkedList()>
c000b2d1:	83 c4 10             	add    esp,0x10
c000b2d4:	83 ec 04             	sub    esp,0x4
c000b2d7:	68 70 37 02 c0       	push   0xc0023770
c000b2dc:	68 78 40 02 c0       	push   0xc0024078
c000b2e1:	68 44 fd 01 c0       	push   0xc001fd44
c000b2e6:	e8 6f 12 00 00       	call   c000c55a <__cxa_atexit>
c000b2eb:	83 c4 10             	add    esp,0x10
c000b2ee:	90                   	nop
c000b2ef:	83 c4 0c             	add    esp,0xc
c000b2f2:	c3                   	ret    

c000b2f3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b2f3:	83 ec 0c             	sub    esp,0xc
c000b2f6:	83 ec 08             	sub    esp,0x8
c000b2f9:	68 ff ff 00 00       	push   0xffff
c000b2fe:	6a 01                	push   0x1
c000b300:	e8 ab ff ff ff       	call   c000b2b0 <__static_initialization_and_destruction_0(int, int)>
c000b305:	83 c4 10             	add    esp,0x10
c000b308:	83 c4 0c             	add    esp,0xc
c000b30b:	c3                   	ret    

c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b30c:	53                   	push   ebx
c000b30d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b311:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b315:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b31b:	89 c8                	mov    eax,ecx
c000b31d:	d1 e8                	shr    eax,1
c000b31f:	03 05 48 39 02 c0    	add    eax,DWORD PTR ds:0xc0023948
c000b325:	83 e1 01             	and    ecx,0x1
c000b328:	8a 10                	mov    dl,BYTE PTR [eax]
c000b32a:	75 09                	jne    c000b335 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b32c:	83 e2 f0             	and    edx,0xfffffff0
c000b32f:	09 da                	or     edx,ebx
c000b331:	88 10                	mov    BYTE PTR [eax],dl
c000b333:	5b                   	pop    ebx
c000b334:	c3                   	ret    
c000b335:	c1 e3 04             	shl    ebx,0x4
c000b338:	83 e2 0f             	and    edx,0xf
c000b33b:	09 da                	or     edx,ebx
c000b33d:	88 10                	mov    BYTE PTR [eax],dl
c000b33f:	5b                   	pop    ebx
c000b340:	c3                   	ret    

c000b341 <Virt::getPageState(unsigned long)>:
c000b341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b345:	8b 0d 48 39 02 c0    	mov    ecx,DWORD PTR ds:0xc0023948
c000b34b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b351:	89 d0                	mov    eax,edx
c000b353:	d1 e8                	shr    eax,1
c000b355:	83 e2 01             	and    edx,0x1
c000b358:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b35b:	75 04                	jne    c000b361 <Virt::getPageState(unsigned long)+0x20>
c000b35d:	83 e0 0f             	and    eax,0xf
c000b360:	c3                   	ret    
c000b361:	c0 e8 04             	shr    al,0x4
c000b364:	c3                   	ret    

c000b365 <Virt::allocateKernelVirtualPages(int)>:
c000b365:	55                   	push   ebp
c000b366:	31 ed                	xor    ebp,ebp
c000b368:	57                   	push   edi
c000b369:	56                   	push   esi
c000b36a:	53                   	push   ebx
c000b36b:	31 db                	xor    ebx,ebx
c000b36d:	83 ec 1c             	sub    esp,0x1c
c000b370:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b374:	8b 3d 44 39 02 c0    	mov    edi,DWORD PTR ds:0xc0023944
c000b37a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b37f:	57                   	push   edi
c000b380:	e8 bc ff ff ff       	call   c000b341 <Virt::getPageState(unsigned long)>
c000b385:	5a                   	pop    edx
c000b386:	84 c0                	test   al,al
c000b388:	75 3a                	jne    c000b3c4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b38a:	85 db                	test   ebx,ebx
c000b38c:	75 02                	jne    c000b390 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b38e:	89 fd                	mov    ebp,edi
c000b390:	43                   	inc    ebx
c000b391:	39 f3                	cmp    ebx,esi
c000b393:	74 5a                	je     c000b3ef <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b395:	47                   	inc    edi
c000b396:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b39c:	76 31                	jbe    c000b3cf <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b39e:	c7 05 44 39 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023944,0xc8000
c000b3a8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b3ad:	75 28                	jne    c000b3d7 <Virt::allocateKernelVirtualPages(int)+0x72>
c000b3af:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b3b4:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b3b9:	57                   	push   edi
c000b3ba:	e8 82 ff ff ff       	call   c000b341 <Virt::getPageState(unsigned long)>
c000b3bf:	5a                   	pop    edx
c000b3c0:	84 c0                	test   al,al
c000b3c2:	74 c6                	je     c000b38a <Virt::allocateKernelVirtualPages(int)+0x25>
c000b3c4:	31 db                	xor    ebx,ebx
c000b3c6:	47                   	inc    edi
c000b3c7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b3cd:	77 cf                	ja     c000b39e <Virt::allocateKernelVirtualPages(int)+0x39>
c000b3cf:	89 3d 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,edi
c000b3d5:	eb a8                	jmp    c000b37f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b3d7:	83 ec 0c             	sub    esp,0xc
c000b3da:	68 00 14 02 c0       	push   0xc0021400
c000b3df:	e8 1f 72 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000b3e4:	8b 3d 44 39 02 c0    	mov    edi,DWORD PTR ds:0xc0023944
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	eb 90                	jmp    c000b37f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b3ef:	89 2d 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,ebp
c000b3f5:	4b                   	dec    ebx
c000b3f6:	74 5f                	je     c000b457 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b3f8:	85 f6                	test   esi,esi
c000b3fa:	74 3d                	je     c000b439 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b3fc:	89 e8                	mov    eax,ebp
c000b3fe:	31 db                	xor    ebx,ebx
c000b400:	8d 7e ff             	lea    edi,[esi-0x1]
c000b403:	eb 14                	jmp    c000b419 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b405:	6a 01                	push   0x1
c000b407:	43                   	inc    ebx
c000b408:	50                   	push   eax
c000b409:	e8 fe fe ff ff       	call   c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b40e:	58                   	pop    eax
c000b40f:	39 f3                	cmp    ebx,esi
c000b411:	5a                   	pop    edx
c000b412:	74 25                	je     c000b439 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b414:	a1 44 39 02 c0       	mov    eax,ds:0xc0023944
c000b419:	8d 50 01             	lea    edx,[eax+0x1]
c000b41c:	85 db                	test   ebx,ebx
c000b41e:	89 15 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,edx
c000b424:	74 20                	je     c000b446 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b426:	39 df                	cmp    edi,ebx
c000b428:	75 db                	jne    c000b405 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b42a:	6a 03                	push   0x3
c000b42c:	43                   	inc    ebx
c000b42d:	50                   	push   eax
c000b42e:	e8 d9 fe ff ff       	call   c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b433:	59                   	pop    ecx
c000b434:	39 f3                	cmp    ebx,esi
c000b436:	58                   	pop    eax
c000b437:	75 db                	jne    c000b414 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b439:	83 c4 1c             	add    esp,0x1c
c000b43c:	89 e8                	mov    eax,ebp
c000b43e:	5b                   	pop    ebx
c000b43f:	c1 e0 0c             	shl    eax,0xc
c000b442:	5e                   	pop    esi
c000b443:	5f                   	pop    edi
c000b444:	5d                   	pop    ebp
c000b445:	c3                   	ret    
c000b446:	6a 02                	push   0x2
c000b448:	bb 01 00 00 00       	mov    ebx,0x1
c000b44d:	50                   	push   eax
c000b44e:	e8 b9 fe ff ff       	call   c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b453:	58                   	pop    eax
c000b454:	5a                   	pop    edx
c000b455:	eb bd                	jmp    c000b414 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b457:	6a 04                	push   0x4
c000b459:	8d 45 01             	lea    eax,[ebp+0x1]
c000b45c:	55                   	push   ebp
c000b45d:	a3 44 39 02 c0       	mov    ds:0xc0023944,eax
c000b462:	e8 a5 fe ff ff       	call   c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b467:	59                   	pop    ecx
c000b468:	89 e8                	mov    eax,ebp
c000b46a:	5b                   	pop    ebx
c000b46b:	c1 e0 0c             	shl    eax,0xc
c000b46e:	83 c4 1c             	add    esp,0x1c
c000b471:	5b                   	pop    ebx
c000b472:	5e                   	pop    esi
c000b473:	5f                   	pop    edi
c000b474:	5d                   	pop    ebp
c000b475:	c3                   	ret    

c000b476 <Virt::freeSwapfilePage(unsigned long)>:
c000b476:	53                   	push   ebx
c000b477:	8b 15 90 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024090
c000b47d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b481:	b8 01 00 00 00       	mov    eax,0x1
c000b486:	89 cb                	mov    ebx,ecx
c000b488:	d3 e0                	shl    eax,cl
c000b48a:	c1 eb 05             	shr    ebx,0x5
c000b48d:	f7 d0                	not    eax
c000b48f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b492:	5b                   	pop    ebx
c000b493:	c3                   	ret    

c000b494 <Virt::swapIDToSector(unsigned long)>:
c000b494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b498:	0f af 05 4c 39 02 c0 	imul   eax,DWORD PTR ds:0xc002394c
c000b49f:	03 05 54 39 02 c0    	add    eax,DWORD PTR ds:0xc0023954
c000b4a5:	c3                   	ret    

c000b4a6 <Virt::allocateSwapfilePage()>:
c000b4a6:	55                   	push   ebp
c000b4a7:	31 d2                	xor    edx,edx
c000b4a9:	57                   	push   edi
c000b4aa:	56                   	push   esi
c000b4ab:	53                   	push   ebx
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8b 0d 4c 39 02 c0    	mov    ecx,DWORD PTR ds:0xc002394c
c000b4b5:	a1 50 39 02 c0       	mov    eax,ds:0xc0023950
c000b4ba:	f7 f1                	div    ecx
c000b4bc:	39 0d 50 39 02 c0    	cmp    DWORD PTR ds:0xc0023950,ecx
c000b4c2:	72 2d                	jb     c000b4f1 <Virt::allocateSwapfilePage()+0x4b>
c000b4c4:	8b 35 90 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024090
c000b4ca:	8b 16                	mov    edx,DWORD PTR [esi]
c000b4cc:	f6 c2 01             	test   dl,0x1
c000b4cf:	74 3c                	je     c000b50d <Virt::allocateSwapfilePage()+0x67>
c000b4d1:	31 c9                	xor    ecx,ecx
c000b4d3:	bf 01 00 00 00       	mov    edi,0x1
c000b4d8:	eb 12                	jmp    c000b4ec <Virt::allocateSwapfilePage()+0x46>
c000b4da:	89 fd                	mov    ebp,edi
c000b4dc:	89 ca                	mov    edx,ecx
c000b4de:	d3 e5                	shl    ebp,cl
c000b4e0:	c1 ea 05             	shr    edx,0x5
c000b4e3:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b4e6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b4e8:	85 ea                	test   edx,ebp
c000b4ea:	74 2a                	je     c000b516 <Virt::allocateSwapfilePage()+0x70>
c000b4ec:	41                   	inc    ecx
c000b4ed:	39 c8                	cmp    eax,ecx
c000b4ef:	77 e9                	ja     c000b4da <Virt::allocateSwapfilePage()+0x34>
c000b4f1:	83 ec 0c             	sub    esp,0xc
c000b4f4:	68 b8 15 02 c0       	push   0xc00215b8
c000b4f9:	e8 05 71 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	31 c9                	xor    ecx,ecx
c000b503:	83 c4 0c             	add    esp,0xc
c000b506:	89 c8                	mov    eax,ecx
c000b508:	5b                   	pop    ebx
c000b509:	5e                   	pop    esi
c000b50a:	5f                   	pop    edi
c000b50b:	5d                   	pop    ebp
c000b50c:	c3                   	ret    
c000b50d:	89 f3                	mov    ebx,esi
c000b50f:	bd 01 00 00 00       	mov    ebp,0x1
c000b514:	31 c9                	xor    ecx,ecx
c000b516:	09 ea                	or     edx,ebp
c000b518:	89 c8                	mov    eax,ecx
c000b51a:	89 13                	mov    DWORD PTR [ebx],edx
c000b51c:	83 c4 0c             	add    esp,0xc
c000b51f:	5b                   	pop    ebx
c000b520:	5e                   	pop    esi
c000b521:	5f                   	pop    edi
c000b522:	5d                   	pop    ebp
c000b523:	c3                   	ret    

c000b524 <Virt::virtualMemorySetup()>:
c000b524:	53                   	push   ebx
c000b525:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b52a:	6a 0f                	push   0xf
c000b52c:	53                   	push   ebx
c000b52d:	43                   	inc    ebx
c000b52e:	e8 d9 fd ff ff       	call   c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b533:	58                   	pop    eax
c000b534:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b53a:	5a                   	pop    edx
c000b53b:	75 ed                	jne    c000b52a <Virt::virtualMemorySetup()+0x6>
c000b53d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b542:	6a 00                	push   0x0
c000b544:	53                   	push   ebx
c000b545:	43                   	inc    ebx
c000b546:	e8 c1 fd ff ff       	call   c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b54b:	59                   	pop    ecx
c000b54c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b552:	58                   	pop    eax
c000b553:	75 ed                	jne    c000b542 <Virt::virtualMemorySetup()+0x1e>
c000b555:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b55a:	6a 0f                	push   0xf
c000b55c:	53                   	push   ebx
c000b55d:	43                   	inc    ebx
c000b55e:	e8 a9 fd ff ff       	call   c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b563:	58                   	pop    eax
c000b564:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b56a:	5a                   	pop    edx
c000b56b:	75 ed                	jne    c000b55a <Virt::virtualMemorySetup()+0x36>
c000b56d:	5b                   	pop    ebx
c000b56e:	c3                   	ret    

c000b56f <Virt::setupPageSwapping(int)>:
c000b56f:	53                   	push   ebx
c000b570:	83 ec 0c             	sub    esp,0xc
c000b573:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b577:	a1 28 65 02 c0       	mov    eax,ds:0xc0026528
c000b57c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b582:	8b 10                	mov    edx,DWORD PTR [eax]
c000b584:	53                   	push   ebx
c000b585:	c1 e3 0b             	shl    ebx,0xb
c000b588:	68 cf 15 02 c0       	push   0xc00215cf
c000b58d:	50                   	push   eax
c000b58e:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b591:	89 1d 50 39 02 c0    	mov    DWORD PTR ds:0xc0023950,ebx
c000b597:	c6 05 58 39 02 c0 43 	mov    BYTE PTR ds:0xc0023958,0x43
c000b59e:	c1 eb 08             	shr    ebx,0x8
c000b5a1:	a3 54 39 02 c0       	mov    ds:0xc0023954,eax
c000b5a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5a9:	c7 05 4c 39 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002394c,0x8
c000b5b3:	e8 c7 e1 ff ff       	call   c000977f <malloc>
c000b5b8:	83 c4 0c             	add    esp,0xc
c000b5bb:	89 c1                	mov    ecx,eax
c000b5bd:	a3 90 40 02 c0       	mov    ds:0xc0024090,eax
c000b5c2:	31 d2                	xor    edx,edx
c000b5c4:	a1 50 39 02 c0       	mov    eax,ds:0xc0023950
c000b5c9:	f7 35 4c 39 02 c0    	div    DWORD PTR ds:0xc002394c
c000b5cf:	c1 e8 05             	shr    eax,0x5
c000b5d2:	50                   	push   eax
c000b5d3:	6a 00                	push   0x0
c000b5d5:	51                   	push   ecx
c000b5d6:	e8 cd 4e ff ff       	call   c00004a8 <memset>
c000b5db:	83 c4 18             	add    esp,0x18
c000b5de:	5b                   	pop    ebx
c000b5df:	c3                   	ret    

c000b5e0 <VAS::VAS(VAS*)>:
c000b5e0:	83 ec 0c             	sub    esp,0xc
c000b5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b5ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b5f9:	83 ec 0c             	sub    esp,0xc
c000b5fc:	68 20 14 02 c0       	push   0xc0021420
c000b601:	e8 fd 6f 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000b606:	83 c4 10             	add    esp,0x10
c000b609:	90                   	nop
c000b60a:	83 c4 0c             	add    esp,0xc
c000b60d:	c3                   	ret    

c000b60e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b60e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b612:	89 c2                	mov    edx,eax
c000b614:	c1 e8 0a             	shr    eax,0xa
c000b617:	c1 ea 16             	shr    edx,0x16
c000b61a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b61f:	19 c9                	sbb    ecx,ecx
c000b621:	c1 e2 0c             	shl    edx,0xc
c000b624:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b62a:	25 fc 0f 00 00       	and    eax,0xffc
c000b62f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b636:	01 d0                	add    eax,edx
c000b638:	c3                   	ret    
c000b639:	90                   	nop

c000b63a <VAS::getPageTableEntry(unsigned long)>:
c000b63a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b63e:	89 ca                	mov    edx,ecx
c000b640:	c1 e9 0a             	shr    ecx,0xa
c000b643:	c1 ea 16             	shr    edx,0x16
c000b646:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000b64c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000b652:	c1 e0 0c             	shl    eax,0xc
c000b655:	8d 04 08             	lea    eax,[eax+ecx*1]
c000b658:	c3                   	ret    

c000b659 <Virt::freeKernelVirtualPages(unsigned long)>:
c000b659:	57                   	push   edi
c000b65a:	56                   	push   esi
c000b65b:	be 01 00 00 00       	mov    esi,0x1
c000b660:	53                   	push   ebx
c000b661:	83 ec 10             	sub    esp,0x10
c000b664:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b668:	c1 eb 0c             	shr    ebx,0xc
c000b66b:	eb 3f                	jmp    c000b6ac <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000b66d:	83 ec 08             	sub    esp,0x8
c000b670:	57                   	push   edi
c000b671:	ff 35 94 40 02 c0    	push   DWORD PTR ds:0xc0024094
c000b677:	e8 be ff ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c000b67c:	83 c4 10             	add    esp,0x10
c000b67f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b681:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b685:	f6 c4 04             	test   ah,0x4
c000b688:	75 5f                	jne    c000b6e9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000b68a:	80 fa 04             	cmp    dl,0x4
c000b68d:	74 78                	je     c000b707 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000b68f:	80 fa 02             	cmp    dl,0x2
c000b692:	0f 84 88 00 00 00    	je     c000b720 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000b698:	80 fa 03             	cmp    dl,0x3
c000b69b:	0f 84 ad 00 00 00    	je     c000b74e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000b6a1:	fe ca                	dec    dl
c000b6a3:	0f 84 92 00 00 00    	je     c000b73b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b6a9:	43                   	inc    ebx
c000b6aa:	31 f6                	xor    esi,esi
c000b6ac:	53                   	push   ebx
c000b6ad:	89 df                	mov    edi,ebx
c000b6af:	e8 8d fc ff ff       	call   c000b341 <Virt::getPageState(unsigned long)>
c000b6b4:	c1 e7 0c             	shl    edi,0xc
c000b6b7:	59                   	pop    ecx
c000b6b8:	84 c0                	test   al,al
c000b6ba:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000b6be:	75 ad                	jne    c000b66d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000b6c0:	83 ec 0c             	sub    esp,0xc
c000b6c3:	68 e6 15 02 c0       	push   0xc00215e6
c000b6c8:	e8 36 6f 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000b6cd:	58                   	pop    eax
c000b6ce:	5a                   	pop    edx
c000b6cf:	57                   	push   edi
c000b6d0:	ff 35 94 40 02 c0    	push   DWORD PTR ds:0xc0024094
c000b6d6:	e8 5f ff ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c000b6db:	83 c4 10             	add    esp,0x10
c000b6de:	8b 00                	mov    eax,DWORD PTR [eax]
c000b6e0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b6e4:	f6 c4 04             	test   ah,0x4
c000b6e7:	74 c0                	je     c000b6a9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b6e9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000b6ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b6f2:	83 ec 0c             	sub    esp,0xc
c000b6f5:	50                   	push   eax
c000b6f6:	e8 34 e4 ff ff       	call   c0009b2f <Phys::freePage(unsigned long)>
c000b6fb:	83 c4 10             	add    esp,0x10
c000b6fe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000b702:	80 fa 04             	cmp    dl,0x4
c000b705:	75 88                	jne    c000b68f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000b707:	89 f0                	mov    eax,esi
c000b709:	84 c0                	test   al,al
c000b70b:	75 47                	jne    c000b754 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000b70d:	c7 44 24 20 44 14 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021444
c000b715:	83 c4 10             	add    esp,0x10
c000b718:	5b                   	pop    ebx
c000b719:	5e                   	pop    esi
c000b71a:	5f                   	pop    edi
c000b71b:	e9 e3 6e 00 00       	jmp    c0012603 <Krnl::panic(char const*)>
c000b720:	89 f0                	mov    eax,esi
c000b722:	84 c0                	test   al,al
c000b724:	75 15                	jne    c000b73b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000b726:	83 ec 0c             	sub    esp,0xc
c000b729:	68 02 16 02 c0       	push   0xc0021602
c000b72e:	e8 d0 6e 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000b733:	83 c4 10             	add    esp,0x10
c000b736:	e9 6e ff ff ff       	jmp    c000b6a9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b73b:	83 ec 08             	sub    esp,0x8
c000b73e:	6a 00                	push   0x0
c000b740:	53                   	push   ebx
c000b741:	e8 c6 fb ff ff       	call   c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b746:	83 c4 10             	add    esp,0x10
c000b749:	e9 5b ff ff ff       	jmp    c000b6a9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000b74e:	89 f0                	mov    eax,esi
c000b750:	84 c0                	test   al,al
c000b752:	75 15                	jne    c000b769 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000b754:	83 ec 08             	sub    esp,0x8
c000b757:	6a 00                	push   0x0
c000b759:	53                   	push   ebx
c000b75a:	e8 ad fb ff ff       	call   c000b30c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	83 c4 10             	add    esp,0x10
c000b765:	5b                   	pop    ebx
c000b766:	5e                   	pop    esi
c000b767:	5f                   	pop    edi
c000b768:	c3                   	ret    
c000b769:	c7 44 24 20 1e 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc002161e
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	5b                   	pop    ebx
c000b775:	5e                   	pop    esi
c000b776:	5f                   	pop    edi
c000b777:	e9 87 6e 00 00       	jmp    c0012603 <Krnl::panic(char const*)>

c000b77c <VAS::freeAllocatedPages(unsigned long)>:
c000b77c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b784:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000b788:	74 09                	je     c000b793 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000b78a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b78e:	e9 c6 fe ff ff       	jmp    c000b659 <Virt::freeKernelVirtualPages(unsigned long)>
c000b793:	c7 44 24 04 68 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021468
c000b79b:	e9 21 0f 00 00       	jmp    c000c6c1 <Dbg::kprintf(char const*, ...)>

c000b7a0 <VAS::virtualToPhysical(unsigned long)>:
c000b7a0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b7a4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b7a8:	e8 8d fe ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c000b7ad:	5a                   	pop    edx
c000b7ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000b7b0:	59                   	pop    ecx
c000b7b1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b7b6:	c3                   	ret    
c000b7b7:	90                   	nop

c000b7b8 <VAS::reflagRange(unsigned long, int, int, int)>:
c000b7b8:	55                   	push   ebp
c000b7b9:	57                   	push   edi
c000b7ba:	56                   	push   esi
c000b7bb:	53                   	push   ebx
c000b7bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000b7c4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b7c8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b7cc:	85 db                	test   ebx,ebx
c000b7ce:	7e 22                	jle    c000b7f2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000b7d0:	c1 e3 0c             	shl    ebx,0xc
c000b7d3:	01 f3                	add    ebx,esi
c000b7d5:	56                   	push   esi
c000b7d6:	81 c6 00 10 00 00    	add    esi,0x1000
c000b7dc:	55                   	push   ebp
c000b7dd:	e8 58 fe ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c000b7e2:	5a                   	pop    edx
c000b7e3:	59                   	pop    ecx
c000b7e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b7e6:	21 f9                	and    ecx,edi
c000b7e8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000b7ec:	39 f3                	cmp    ebx,esi
c000b7ee:	89 08                	mov    DWORD PTR [eax],ecx
c000b7f0:	75 e3                	jne    c000b7d5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000b7f2:	5b                   	pop    ebx
c000b7f3:	5e                   	pop    esi
c000b7f4:	5f                   	pop    edi
c000b7f5:	5d                   	pop    ebp
c000b7f6:	c3                   	ret    
c000b7f7:	90                   	nop

c000b7f8 <VAS::setToWriteCombining(unsigned long, int)>:
c000b7f8:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000b7fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b803:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000b80a:	75 01                	jne    c000b80d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000b80c:	c3                   	ret    
c000b80d:	68 80 00 00 00       	push   0x80
c000b812:	6a ff                	push   0xffffffff
c000b814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b820:	e8 93 ff ff ff       	call   c000b7b8 <VAS::reflagRange(unsigned long, int, int, int)>
c000b825:	83 c4 14             	add    esp,0x14
c000b828:	c3                   	ret    
c000b829:	90                   	nop

c000b82a <VAS::mapOtherVASIn(bool, VAS*)>:
c000b82a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b82f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b833:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000b836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b83a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000b83d:	19 c0                	sbb    eax,eax
c000b83f:	83 ca 03             	or     edx,0x3
c000b842:	83 e0 fc             	and    eax,0xfffffffc
c000b845:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000b84c:	0f 20 d8             	mov    eax,cr3
c000b84f:	0f 22 d8             	mov    cr3,eax
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <VAS::~VAS()>:
c000b854:	83 ec 2c             	sub    esp,0x2c
c000b857:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b85f:	fa                   	cli    
c000b860:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000b865:	40                   	inc    eax
c000b866:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000b86b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b870:	8b 00                	mov    eax,DWORD PTR [eax]
c000b872:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b875:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b87b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b87f:	6a 01                	push   0x1
c000b881:	50                   	push   eax
c000b882:	e8 a3 ff ff ff       	call   c000b82a <VAS::mapOtherVASIn(bool, VAS*)>
c000b887:	83 c4 0c             	add    esp,0xc
c000b88a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b892:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000b89a:	0f 8f d4 00 00 00    	jg     c000b974 <VAS::~VAS()+0x120>
c000b8a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b8a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b8ab:	c1 e2 02             	shl    edx,0x2
c000b8ae:	01 d0                	add    eax,edx
c000b8b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000b8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ba:	83 e0 01             	and    eax,0x1
c000b8bd:	0f 84 a8 00 00 00    	je     c000b96b <VAS::~VAS()+0x117>
c000b8c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b8cb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000b8d3:	7f 72                	jg     c000b947 <VAS::~VAS()+0xf3>
c000b8d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b8d9:	c1 e0 0a             	shl    eax,0xa
c000b8dc:	89 c2                	mov    edx,eax
c000b8de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8e2:	01 d0                	add    eax,edx
c000b8e4:	c1 e0 0c             	shl    eax,0xc
c000b8e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8eb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b8f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000b8f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8f5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000b8fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b8ff:	6a 01                	push   0x1
c000b901:	50                   	push   eax
c000b902:	e8 07 fd ff ff       	call   c000b60e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000b907:	83 c4 0c             	add    esp,0xc
c000b90a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b912:	8b 00                	mov    eax,DWORD PTR [eax]
c000b914:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b91c:	25 01 04 00 00       	and    eax,0x401
c000b921:	3d 01 04 00 00       	cmp    eax,0x401
c000b926:	75 19                	jne    c000b941 <VAS::~VAS()+0xed>
c000b928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b92c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b931:	83 ec 0c             	sub    esp,0xc
c000b934:	50                   	push   eax
c000b935:	e8 f5 e1 ff ff       	call   c0009b2f <Phys::freePage(unsigned long)>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b941:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b945:	eb 84                	jmp    c000b8cb <VAS::~VAS()+0x77>
c000b947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b94b:	25 00 04 00 00       	and    eax,0x400
c000b950:	74 19                	je     c000b96b <VAS::~VAS()+0x117>
c000b952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b956:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b95b:	83 ec 0c             	sub    esp,0xc
c000b95e:	50                   	push   eax
c000b95f:	e8 cb e1 ff ff       	call   c0009b2f <Phys::freePage(unsigned long)>
c000b964:	83 c4 10             	add    esp,0x10
c000b967:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b96b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b96f:	e9 1e ff ff ff       	jmp    c000b892 <VAS::~VAS()+0x3e>
c000b974:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b978:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b97b:	83 ec 0c             	sub    esp,0xc
c000b97e:	50                   	push   eax
c000b97f:	e8 d5 fc ff ff       	call   c000b659 <Virt::freeKernelVirtualPages(unsigned long)>
c000b984:	83 c4 10             	add    esp,0x10
c000b987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b98b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b98e:	83 ec 0c             	sub    esp,0xc
c000b991:	50                   	push   eax
c000b992:	e8 98 e1 ff ff       	call   c0009b2f <Phys::freePage(unsigned long)>
c000b997:	83 c4 10             	add    esp,0x10
c000b99a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b99e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9a2:	c1 e0 02             	shl    eax,0x2
c000b9a5:	83 ec 08             	sub    esp,0x8
c000b9a8:	50                   	push   eax
c000b9a9:	68 8c 14 02 c0       	push   0xc002148c
c000b9ae:	e8 0e 0d 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000b9b3:	83 c4 10             	add    esp,0x10
c000b9b6:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000b9bb:	48                   	dec    eax
c000b9bc:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000b9c1:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000b9c6:	85 c0                	test   eax,eax
c000b9c8:	75 01                	jne    c000b9cb <VAS::~VAS()+0x177>
c000b9ca:	fb                   	sti    
c000b9cb:	90                   	nop
c000b9cc:	83 c4 2c             	add    esp,0x2c
c000b9cf:	c3                   	ret    

c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000b9d0:	55                   	push   ebp
c000b9d1:	57                   	push   edi
c000b9d2:	56                   	push   esi
c000b9d3:	53                   	push   ebx
c000b9d4:	83 ec 1c             	sub    esp,0x1c
c000b9d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b9db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000b9df:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000b9e5:	77 0b                	ja     c000b9f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000b9e7:	0f 20 d8             	mov    eax,cr3
c000b9ea:	0f 20 d8             	mov    eax,cr3
c000b9ed:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000b9f0:	75 47                	jne    c000ba39 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000b9f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b9f6:	09 d8                	or     eax,ebx
c000b9f8:	a9 ff 0f 00 00       	test   eax,0xfff
c000b9fd:	75 57                	jne    c000ba56 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000b9ff:	89 de                	mov    esi,ebx
c000ba01:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba04:	c1 ee 16             	shr    esi,0x16
c000ba07:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000ba0e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000ba12:	74 54                	je     c000ba68 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000ba14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ba18:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000ba1e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ba22:	c1 e6 0c             	shl    esi,0xc
c000ba25:	c1 eb 0a             	shr    ebx,0xa
c000ba28:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000ba2e:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000ba31:	83 c4 1c             	add    esp,0x1c
c000ba34:	5b                   	pop    ebx
c000ba35:	5e                   	pop    esi
c000ba36:	5f                   	pop    edi
c000ba37:	5d                   	pop    ebp
c000ba38:	c3                   	ret    
c000ba39:	83 ec 0c             	sub    esp,0xc
c000ba3c:	68 ac 14 02 c0       	push   0xc00214ac
c000ba41:	e8 7b 0c 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000ba46:	83 c4 10             	add    esp,0x10
c000ba49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ba4d:	09 d8                	or     eax,ebx
c000ba4f:	a9 ff 0f 00 00       	test   eax,0xfff
c000ba54:	74 a9                	je     c000b9ff <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000ba56:	83 ec 0c             	sub    esp,0xc
c000ba59:	68 14 15 02 c0       	push   0xc0021514
c000ba5e:	e8 a0 6b 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	eb 97                	jmp    c000b9ff <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000ba68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba6c:	e8 41 e1 ff ff       	call   c0009bb2 <Phys::allocatePage()>
c000ba71:	83 ec 0c             	sub    esp,0xc
c000ba74:	89 c5                	mov    ebp,eax
c000ba76:	8b 0d 94 40 02 c0    	mov    ecx,DWORD PTR ds:0xc0024094
c000ba7c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ba80:	6a 01                	push   0x1
c000ba82:	e8 de f8 ff ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c000ba87:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ba8e:	6a 01                	push   0x1
c000ba90:	50                   	push   eax
c000ba91:	55                   	push   ebp
c000ba92:	81 cd 07 04 00 00    	or     ebp,0x407
c000ba98:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ba9c:	51                   	push   ecx
c000ba9d:	e8 26 02 00 00       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000baa2:	83 c4 1c             	add    esp,0x1c
c000baa5:	68 00 10 00 00       	push   0x1000
c000baaa:	6a 00                	push   0x0
c000baac:	50                   	push   eax
c000baad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bab1:	e8 f2 49 ff ff       	call   c00004a8 <memset>
c000bab6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000baba:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000babd:	e8 97 fb ff ff       	call   c000b659 <Virt::freeKernelVirtualPages(unsigned long)>
c000bac2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bac6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000bacf:	e9 40 ff ff ff       	jmp    c000ba14 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000bad4 <VAS::allocatePages(int, int)>:
c000bad4:	55                   	push   ebp
c000bad5:	57                   	push   edi
c000bad6:	56                   	push   esi
c000bad7:	53                   	push   ebx
c000bad8:	83 ec 1c             	sub    esp,0x1c
c000badb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000badf:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000bae4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000baea:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000baf0:	83 e0 01             	and    eax,0x1
c000baf3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000baf7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bafb:	0f 85 cc 00 00 00    	jne    c000bbcd <VAS::allocatePages(int, int)+0xf9>
c000bb01:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bb04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bb08:	85 c0                	test   eax,eax
c000bb0a:	0f 84 a1 00 00 00    	je     c000bbb1 <VAS::allocatePages(int, int)+0xdd>
c000bb10:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bb14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bb18:	c1 e6 0c             	shl    esi,0xc
c000bb1b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bb1f:	85 c0                	test   eax,eax
c000bb21:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bb24:	7e 33                	jle    c000bb59 <VAS::allocatePages(int, int)+0x85>
c000bb26:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb2a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bb2e:	81 cd 00 04 00 00    	or     ebp,0x400
c000bb34:	e8 79 e0 ff ff       	call   c0009bb2 <Phys::allocatePage()>
c000bb39:	55                   	push   ebp
c000bb3a:	53                   	push   ebx
c000bb3b:	50                   	push   eax
c000bb3c:	57                   	push   edi
c000bb3d:	e8 8e fe ff ff       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bb4a:	74 03                	je     c000bb4f <VAS::allocatePages(int, int)+0x7b>
c000bb4c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb55:	39 de                	cmp    esi,ebx
c000bb57:	75 db                	jne    c000bb34 <VAS::allocatePages(int, int)+0x60>
c000bb59:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bb5e:	75 12                	jne    c000bb72 <VAS::allocatePages(int, int)+0x9e>
c000bb60:	0f 20 d8             	mov    eax,cr3
c000bb63:	0f 22 d8             	mov    cr3,eax
c000bb66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb6a:	83 c4 1c             	add    esp,0x1c
c000bb6d:	5b                   	pop    ebx
c000bb6e:	5e                   	pop    esi
c000bb6f:	5f                   	pop    edi
c000bb70:	5d                   	pop    ebp
c000bb71:	c3                   	ret    
c000bb72:	c1 ee 0a             	shr    esi,0xa
c000bb75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bb79:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bb7f:	c1 eb 0a             	shr    ebx,0xa
c000bb82:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bb88:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb8e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb94:	39 c3                	cmp    ebx,eax
c000bb96:	77 ce                	ja     c000bb66 <VAS::allocatePages(int, int)+0x92>
c000bb98:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb9b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bba1:	39 d8                	cmp    eax,ebx
c000bba3:	73 f3                	jae    c000bb98 <VAS::allocatePages(int, int)+0xc4>
c000bba5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bba9:	83 c4 1c             	add    esp,0x1c
c000bbac:	5b                   	pop    ebx
c000bbad:	5e                   	pop    esi
c000bbae:	5f                   	pop    edi
c000bbaf:	5d                   	pop    ebp
c000bbb0:	c3                   	ret    
c000bbb1:	83 ec 0c             	sub    esp,0xc
c000bbb4:	68 38 15 02 c0       	push   0xc0021538
c000bbb9:	e8 45 6a 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000bbbe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bbc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbc5:	83 c4 10             	add    esp,0x10
c000bbc8:	e9 43 ff ff ff       	jmp    c000bb10 <VAS::allocatePages(int, int)+0x3c>
c000bbcd:	83 ec 0c             	sub    esp,0xc
c000bbd0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bbd4:	e8 8c f7 ff ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c000bbd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbdd:	83 c4 10             	add    esp,0x10
c000bbe0:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bbe5:	0f 87 9b 00 00 00    	ja     c000bc86 <VAS::allocatePages(int, int)+0x1b2>
c000bbeb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bbef:	85 d2                	test   edx,edx
c000bbf1:	7e 3c                	jle    c000bc2f <VAS::allocatePages(int, int)+0x15b>
c000bbf3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bbf7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bbfb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bbff:	c1 e5 0c             	shl    ebp,0xc
c000bc02:	81 ce 00 04 00 00    	or     esi,0x400
c000bc08:	01 dd                	add    ebp,ebx
c000bc0a:	e8 a3 df ff ff       	call   c0009bb2 <Phys::allocatePage()>
c000bc0f:	56                   	push   esi
c000bc10:	53                   	push   ebx
c000bc11:	50                   	push   eax
c000bc12:	57                   	push   edi
c000bc13:	e8 b8 fd ff ff       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bc18:	83 c4 10             	add    esp,0x10
c000bc1b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bc20:	74 03                	je     c000bc25 <VAS::allocatePages(int, int)+0x151>
c000bc22:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bc25:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc2b:	39 dd                	cmp    ebp,ebx
c000bc2d:	75 db                	jne    c000bc0a <VAS::allocatePages(int, int)+0x136>
c000bc2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bc34:	0f 84 26 ff ff ff    	je     c000bb60 <VAS::allocatePages(int, int)+0x8c>
c000bc3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bc42:	89 d3                	mov    ebx,edx
c000bc44:	c1 e0 0c             	shl    eax,0xc
c000bc47:	c1 eb 0a             	shr    ebx,0xa
c000bc4a:	01 d0                	add    eax,edx
c000bc4c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bc52:	c1 e8 0a             	shr    eax,0xa
c000bc55:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bc5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc60:	2d 00 00 40 00       	sub    eax,0x400000
c000bc65:	39 c3                	cmp    ebx,eax
c000bc67:	0f 87 f9 fe ff ff    	ja     c000bb66 <VAS::allocatePages(int, int)+0x92>
c000bc6d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bc70:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bc76:	39 d8                	cmp    eax,ebx
c000bc78:	73 f3                	jae    c000bc6d <VAS::allocatePages(int, int)+0x199>
c000bc7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc7e:	83 c4 1c             	add    esp,0x1c
c000bc81:	5b                   	pop    ebx
c000bc82:	5e                   	pop    esi
c000bc83:	5f                   	pop    edi
c000bc84:	5d                   	pop    ebp
c000bc85:	c3                   	ret    
c000bc86:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000bc8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bc91:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000bc98:	0f 84 4d ff ff ff    	je     c000bbeb <VAS::allocatePages(int, int)+0x117>
c000bc9e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000bca6:	e9 40 ff ff ff       	jmp    c000bbeb <VAS::allocatePages(int, int)+0x117>
c000bcab:	90                   	nop

c000bcac <VAS::setCPUSpecific(unsigned long)>:
c000bcac:	83 ec 0c             	sub    esp,0xc
c000bcaf:	6a 05                	push   0x5
c000bcb1:	68 00 00 40 c2       	push   0xc2400000
c000bcb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcbe:	e8 0d fd ff ff       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bcc3:	83 c4 1c             	add    esp,0x1c
c000bcc6:	c3                   	ret    
c000bcc7:	90                   	nop

c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000bcc8:	55                   	push   ebp
c000bcc9:	57                   	push   edi
c000bcca:	56                   	push   esi
c000bccb:	53                   	push   ebx
c000bccc:	83 ec 1c             	sub    esp,0x1c
c000bccf:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000bcd4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bcd8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bcde:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bce2:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000bce8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000bcec:	83 e0 01             	and    eax,0x1
c000bcef:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bcf3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bcf7:	85 c0                	test   eax,eax
c000bcf9:	7e 39                	jle    c000bd34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000bcfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bcff:	89 f3                	mov    ebx,esi
c000bd01:	c1 e0 0c             	shl    eax,0xc
c000bd04:	01 f0                	add    eax,esi
c000bd06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd0a:	55                   	push   ebp
c000bd0b:	53                   	push   ebx
c000bd0c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd10:	29 f0                	sub    eax,esi
c000bd12:	01 d8                	add    eax,ebx
c000bd14:	50                   	push   eax
c000bd15:	57                   	push   edi
c000bd16:	e8 b5 fc ff ff       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bd1b:	83 c4 10             	add    esp,0x10
c000bd1e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bd23:	74 03                	je     c000bd28 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000bd25:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bd28:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bd2e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000bd32:	75 d6                	jne    c000bd0a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000bd34:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bd39:	75 10                	jne    c000bd4b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000bd3b:	0f 20 d8             	mov    eax,cr3
c000bd3e:	0f 22 d8             	mov    cr3,eax
c000bd41:	83 c4 1c             	add    esp,0x1c
c000bd44:	89 f0                	mov    eax,esi
c000bd46:	5b                   	pop    ebx
c000bd47:	5e                   	pop    esi
c000bd48:	5f                   	pop    edi
c000bd49:	5d                   	pop    ebp
c000bd4a:	c3                   	ret    
c000bd4b:	89 f3                	mov    ebx,esi
c000bd4d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bd51:	c1 eb 0a             	shr    ebx,0xa
c000bd54:	c1 e0 0c             	shl    eax,0xc
c000bd57:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bd5d:	01 f0                	add    eax,esi
c000bd5f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bd65:	c1 e8 0a             	shr    eax,0xa
c000bd68:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd6d:	2d 00 00 40 00       	sub    eax,0x400000
c000bd72:	39 c3                	cmp    ebx,eax
c000bd74:	77 cb                	ja     c000bd41 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000bd76:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bd79:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bd7f:	39 d8                	cmp    eax,ebx
c000bd81:	73 f3                	jae    c000bd76 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000bd83:	83 c4 1c             	add    esp,0x1c
c000bd86:	89 f0                	mov    eax,esi
c000bd88:	5b                   	pop    ebx
c000bd89:	5e                   	pop    esi
c000bd8a:	5f                   	pop    edi
c000bd8b:	5d                   	pop    ebp
c000bd8c:	c3                   	ret    
c000bd8d:	90                   	nop

c000bd8e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000bd8e:	55                   	push   ebp
c000bd8f:	57                   	push   edi
c000bd90:	56                   	push   esi
c000bd91:	53                   	push   ebx
c000bd92:	83 ec 1c             	sub    esp,0x1c
c000bd95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd99:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bd9d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000bda1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000bda5:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdaa:	75 4a                	jne    c000bdf6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000bdac:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000bdb0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bdb3:	c1 eb 16             	shr    ebx,0x16
c000bdb6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000bdbd:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000bdc1:	74 4d                	je     c000be10 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000bdc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000bdcb:	c1 e8 0a             	shr    eax,0xa
c000bdce:	80 fa 01             	cmp    dl,0x1
c000bdd1:	19 d2                	sbb    edx,edx
c000bdd3:	c1 e3 0c             	shl    ebx,0xc
c000bdd6:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000bdda:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000bde0:	25 fc 0f 00 00       	and    eax,0xffc
c000bde5:	01 d8                	add    eax,ebx
c000bde7:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000bdee:	83 c4 1c             	add    esp,0x1c
c000bdf1:	5b                   	pop    ebx
c000bdf2:	5e                   	pop    esi
c000bdf3:	5f                   	pop    edi
c000bdf4:	5d                   	pop    ebp
c000bdf5:	c3                   	ret    
c000bdf6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdfa:	83 ec 0c             	sub    esp,0xc
c000bdfd:	68 64 15 02 c0       	push   0xc0021564
c000be02:	e8 fc 67 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000be07:	83 c4 10             	add    esp,0x10
c000be0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be0e:	eb 9c                	jmp    c000bdac <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000be10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be14:	e8 99 dd ff ff       	call   c0009bb2 <Phys::allocatePage()>
c000be19:	83 ec 0c             	sub    esp,0xc
c000be1c:	89 c5                	mov    ebp,eax
c000be1e:	8b 0d 94 40 02 c0    	mov    ecx,DWORD PTR ds:0xc0024094
c000be24:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be28:	6a 01                	push   0x1
c000be2a:	e8 36 f5 ff ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c000be2f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be36:	6a 01                	push   0x1
c000be38:	50                   	push   eax
c000be39:	55                   	push   ebp
c000be3a:	81 cd 07 04 00 00    	or     ebp,0x407
c000be40:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be44:	51                   	push   ecx
c000be45:	e8 7e fe ff ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be4a:	83 c4 1c             	add    esp,0x1c
c000be4d:	68 00 10 00 00       	push   0x1000
c000be52:	6a 00                	push   0x0
c000be54:	50                   	push   eax
c000be55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be59:	e8 4a 46 ff ff       	call   c00004a8 <memset>
c000be5e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be62:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be65:	e8 ef f7 ff ff       	call   c000b659 <Virt::freeKernelVirtualPages(unsigned long)>
c000be6a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be6d:	83 c4 10             	add    esp,0x10
c000be70:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000be73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be77:	e9 47 ff ff ff       	jmp    c000bdc3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000be7c <VAS::VAS(bool)>:
c000be7c:	53                   	push   ebx
c000be7d:	83 ec 28             	sub    esp,0x28
c000be80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be84:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000be88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000be8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000be97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000be9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bea2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000bea6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000bea9:	e8 04 dd ff ff       	call   c0009bb2 <Phys::allocatePage()>
c000beae:	89 c2                	mov    edx,eax
c000beb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000beb4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000beb7:	8b 1d 94 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024094
c000bebd:	83 ec 0c             	sub    esp,0xc
c000bec0:	6a 01                	push   0x1
c000bec2:	e8 9e f4 ff ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 c2                	mov    edx,eax
c000becc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bed0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bed3:	83 ec 0c             	sub    esp,0xc
c000bed6:	6a 03                	push   0x3
c000bed8:	6a 01                	push   0x1
c000beda:	52                   	push   edx
c000bedb:	50                   	push   eax
c000bedc:	53                   	push   ebx
c000bedd:	e8 e6 fd ff ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000bee2:	83 c4 20             	add    esp,0x20
c000bee5:	89 c2                	mov    edx,eax
c000bee7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000beeb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000beee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bef6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000befe:	7f 1c                	jg     c000bf1c <VAS::VAS(bool)+0xa0>
c000bf00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf0b:	c1 e2 02             	shl    edx,0x2
c000bf0e:	01 d0                	add    eax,edx
c000bf10:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000bf16:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bf1a:	eb da                	jmp    c000bef6 <VAS::VAS(bool)+0x7a>
c000bf1c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000bf24:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000bf2c:	7f 7a                	jg     c000bfa8 <VAS::VAS(bool)+0x12c>
c000bf2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf32:	2d 00 02 00 00       	sub    eax,0x200
c000bf37:	c1 e0 0c             	shl    eax,0xc
c000bf3a:	83 c8 03             	or     eax,0x3
c000bf3d:	89 c2                	mov    edx,eax
c000bf3f:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000bf44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bf4a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000bf50:	83 e0 10             	and    eax,0x10
c000bf53:	84 c0                	test   al,al
c000bf55:	74 07                	je     c000bf5e <VAS::VAS(bool)+0xe2>
c000bf57:	b8 00 01 00 00       	mov    eax,0x100
c000bf5c:	eb 05                	jmp    c000bf63 <VAS::VAS(bool)+0xe7>
c000bf5e:	b8 00 00 00 00       	mov    eax,0x0
c000bf63:	09 d0                	or     eax,edx
c000bf65:	89 c1                	mov    ecx,eax
c000bf67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf6e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf72:	c1 e2 02             	shl    edx,0x2
c000bf75:	01 d0                	add    eax,edx
c000bf77:	89 ca                	mov    edx,ecx
c000bf79:	89 10                	mov    DWORD PTR [eax],edx
c000bf7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7f:	2d 40 03 00 00       	sub    eax,0x340
c000bf84:	83 f8 7f             	cmp    eax,0x7f
c000bf87:	77 16                	ja     c000bf9f <VAS::VAS(bool)+0x123>
c000bf89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf94:	c1 e2 02             	shl    edx,0x2
c000bf97:	01 d0                	add    eax,edx
c000bf99:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000bf9f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bfa3:	e9 7c ff ff ff       	jmp    c000bf24 <VAS::VAS(bool)+0xa8>
c000bfa8:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000bfad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfb3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000bfb9:	83 e0 10             	and    eax,0x10
c000bfbc:	84 c0                	test   al,al
c000bfbe:	74 07                	je     c000bfc7 <VAS::VAS(bool)+0x14b>
c000bfc0:	b8 03 41 00 00       	mov    eax,0x4103
c000bfc5:	eb 05                	jmp    c000bfcc <VAS::VAS(bool)+0x150>
c000bfc7:	b8 03 40 00 00       	mov    eax,0x4003
c000bfcc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bfd0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000bfd3:	81 c2 20 0c 00 00    	add    edx,0xc20
c000bfd9:	89 02                	mov    DWORD PTR [edx],eax
c000bfdb:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000bfe0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bfe6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000bfec:	83 ec 08             	sub    esp,0x8
c000bfef:	50                   	push   eax
c000bff0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bff4:	e8 b3 fc ff ff       	call   c000bcac <VAS::setCPUSpecific(unsigned long)>
c000bff9:	83 c4 10             	add    esp,0x10
c000bffc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c000:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c003:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000c008:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c00e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c014:	83 e0 10             	and    eax,0x10
c000c017:	84 c0                	test   al,al
c000c019:	74 07                	je     c000c022 <VAS::VAS(bool)+0x1a6>
c000c01b:	b8 00 01 00 00       	mov    eax,0x100
c000c020:	eb 05                	jmp    c000c027 <VAS::VAS(bool)+0x1ab>
c000c022:	b8 00 00 00 00       	mov    eax,0x0
c000c027:	09 c2                	or     edx,eax
c000c029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c02d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c030:	05 fc 0f 00 00       	add    eax,0xffc
c000c035:	83 ca 03             	or     edx,0x3
c000c038:	89 10                	mov    DWORD PTR [eax],edx
c000c03a:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000c03f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c045:	83 ec 0c             	sub    esp,0xc
c000c048:	50                   	push   eax
c000c049:	e8 f0 1d 00 00       	call   c000de3e <Device::getName()>
c000c04e:	83 c4 10             	add    esp,0x10
c000c051:	83 ec 08             	sub    esp,0x8
c000c054:	68 38 16 02 c0       	push   0xc0021638
c000c059:	50                   	push   eax
c000c05a:	e8 91 45 ff ff       	call   c00005f0 <strcmp>
c000c05f:	83 c4 10             	add    esp,0x10
c000c062:	85 c0                	test   eax,eax
c000c064:	0f 94 c0             	sete   al
c000c067:	84 c0                	test   al,al
c000c069:	0f 84 87 00 00 00    	je     c000c0f6 <VAS::VAS(bool)+0x27a>
c000c06f:	fa                   	cli    
c000c070:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000c075:	40                   	inc    eax
c000c076:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000c07b:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000c080:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c086:	05 7c 09 00 00       	add    eax,0x97c
c000c08b:	83 ec 0c             	sub    esp,0xc
c000c08e:	50                   	push   eax
c000c08f:	e8 da d1 ff ff       	call   c000926e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c094:	83 c4 10             	add    esp,0x10
c000c097:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c09c:	89 c3                	mov    ebx,eax
c000c09e:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000c0a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0a9:	05 7c 09 00 00       	add    eax,0x97c
c000c0ae:	83 ec 0c             	sub    esp,0xc
c000c0b1:	50                   	push   eax
c000c0b2:	e8 b7 d1 ff ff       	call   c000926e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	83 ec 08             	sub    esp,0x8
c000c0bd:	50                   	push   eax
c000c0be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c2:	e8 73 f5 ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c000c0c7:	83 c4 10             	add    esp,0x10
c000c0ca:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0d1:	6a 11                	push   0x11
c000c0d3:	53                   	push   ebx
c000c0d4:	50                   	push   eax
c000c0d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0d9:	e8 f2 f8 ff ff       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0de:	83 c4 10             	add    esp,0x10
c000c0e1:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000c0e6:	48                   	dec    eax
c000c0e7:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000c0ec:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000c0f1:	85 c0                	test   eax,eax
c000c0f3:	75 01                	jne    c000c0f6 <VAS::VAS(bool)+0x27a>
c000c0f5:	fb                   	sti    
c000c0f6:	90                   	nop
c000c0f7:	83 c4 28             	add    esp,0x28
c000c0fa:	5b                   	pop    ebx
c000c0fb:	c3                   	ret    

c000c0fc <VAS::VAS()>:
c000c0fc:	53                   	push   ebx
c000c0fd:	83 ec 18             	sub    esp,0x18
c000c100:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c104:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c10b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c10f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c11a:	a3 94 40 02 c0       	mov    ds:0xc0024094,eax
c000c11f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c123:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000c127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c12b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000c12e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c132:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000c139:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000c141:	83 ec 0c             	sub    esp,0xc
c000c144:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c148:	e8 32 d6 ff ff       	call   c000977f <malloc>
c000c14d:	83 c4 10             	add    esp,0x10
c000c150:	89 c3                	mov    ebx,eax
c000c152:	83 ec 08             	sub    esp,0x8
c000c155:	6a 01                	push   0x1
c000c157:	53                   	push   ebx
c000c158:	e8 1f fd ff ff       	call   c000be7c <VAS::VAS(bool)>
c000c15d:	83 c4 10             	add    esp,0x10
c000c160:	89 1d 8c 40 02 c0    	mov    DWORD PTR ds:0xc002408c,ebx
c000c166:	90                   	nop
c000c167:	83 c4 18             	add    esp,0x18
c000c16a:	5b                   	pop    ebx
c000c16b:	c3                   	ret    

c000c16c <VAS::evict(unsigned long)>:
c000c16c:	55                   	push   ebp
c000c16d:	57                   	push   edi
c000c16e:	56                   	push   esi
c000c16f:	53                   	push   ebx
c000c170:	83 ec 1c             	sub    esp,0x1c
c000c173:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c177:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c17b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c17f:	e8 22 f3 ff ff       	call   c000b4a6 <Virt::allocateSwapfilePage()>
c000c184:	89 c7                	mov    edi,eax
c000c186:	a1 4c 39 02 c0       	mov    eax,ds:0xc002394c
c000c18b:	85 c0                	test   eax,eax
c000c18d:	7e 3d                	jle    c000c1cc <VAS::evict(unsigned long)+0x60>
c000c18f:	89 ee                	mov    esi,ebp
c000c191:	31 db                	xor    ebx,ebx
c000c193:	83 ec 0c             	sub    esp,0xc
c000c196:	57                   	push   edi
c000c197:	e8 f8 f2 ff ff       	call   c000b494 <Virt::swapIDToSector(unsigned long)>
c000c19c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c19f:	01 d8                	add    eax,ebx
c000c1a1:	6a 01                	push   0x1
c000c1a3:	31 d2                	xor    edx,edx
c000c1a5:	43                   	inc    ebx
c000c1a6:	52                   	push   edx
c000c1a7:	81 c6 00 02 00 00    	add    esi,0x200
c000c1ad:	50                   	push   eax
c000c1ae:	0f be 05 58 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023958
c000c1b5:	ff 34 85 1c 64 02 c0 	push   DWORD PTR [eax*4-0x3ffd9be4]
c000c1bc:	e8 15 2d 00 00       	call   c000eed6 <LogicalDisk::write(unsigned long long, int, void*)>
c000c1c1:	83 c4 20             	add    esp,0x20
c000c1c4:	39 1d 4c 39 02 c0    	cmp    DWORD PTR ds:0xc002394c,ebx
c000c1ca:	7f c7                	jg     c000c193 <VAS::evict(unsigned long)+0x27>
c000c1cc:	83 ec 08             	sub    esp,0x8
c000c1cf:	c1 e7 0b             	shl    edi,0xb
c000c1d2:	55                   	push   ebp
c000c1d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1d7:	e8 5e f4 ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c000c1dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000c1de:	89 d3                	mov    ebx,edx
c000c1e0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c1e6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c1ec:	09 d7                	or     edi,edx
c000c1ee:	89 38                	mov    DWORD PTR [eax],edi
c000c1f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1f3:	ff 05 88 40 02 c0    	inc    DWORD PTR ds:0xc0024088
c000c1f9:	e8 31 d9 ff ff       	call   c0009b2f <Phys::freePage(unsigned long)>
c000c1fe:	0f 20 d8             	mov    eax,cr3
c000c201:	0f 22 d8             	mov    cr3,eax
c000c204:	ff 35 88 40 02 c0    	push   DWORD PTR ds:0xc0024088
c000c20a:	55                   	push   ebp
c000c20b:	53                   	push   ebx
c000c20c:	68 88 15 02 c0       	push   0xc0021588
c000c211:	e8 ab 04 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c216:	a1 84 40 02 c0       	mov    eax,ds:0xc0024084
c000c21b:	c7 44 24 50 46 16 02 c0 	mov    DWORD PTR [esp+0x50],0xc0021646
c000c223:	8d 50 01             	lea    edx,[eax+0x1]
c000c226:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c22a:	89 15 84 40 02 c0    	mov    DWORD PTR ds:0xc0024084,edx
c000c230:	83 c4 3c             	add    esp,0x3c
c000c233:	5b                   	pop    ebx
c000c234:	5e                   	pop    esi
c000c235:	5f                   	pop    edi
c000c236:	5d                   	pop    ebp
c000c237:	e9 85 04 00 00       	jmp    c000c6c1 <Dbg::kprintf(char const*, ...)>

c000c23c <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c23c:	55                   	push   ebp
c000c23d:	57                   	push   edi
c000c23e:	56                   	push   esi
c000c23f:	53                   	push   ebx
c000c240:	83 ec 14             	sub    esp,0x14
c000c243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c247:	68 57 16 02 c0       	push   0xc0021657
c000c24c:	e8 70 04 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c251:	83 c4 10             	add    esp,0x10
c000c254:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c258:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c25e:	74 20                	je     c000c280 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c260:	83 ec 08             	sub    esp,0x8
c000c263:	55                   	push   ebp
c000c264:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c268:	e8 cd f3 ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c000c26d:	83 c4 10             	add    esp,0x10
c000c270:	89 c3                	mov    ebx,eax
c000c272:	85 c0                	test   eax,eax
c000c274:	74 0a                	je     c000c280 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c276:	8b 38                	mov    edi,DWORD PTR [eax]
c000c278:	f7 c7 01 00 00 00    	test   edi,0x1
c000c27e:	74 0a                	je     c000c28a <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c280:	31 c0                	xor    eax,eax
c000c282:	83 c4 0c             	add    esp,0xc
c000c285:	5b                   	pop    ebx
c000c286:	5e                   	pop    esi
c000c287:	5f                   	pop    edi
c000c288:	5d                   	pop    ebp
c000c289:	c3                   	ret    
c000c28a:	e8 23 d9 ff ff       	call   c0009bb2 <Phys::allocatePage()>
c000c28f:	c1 ef 0b             	shr    edi,0xb
c000c292:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c294:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c29a:	09 c2                	or     edx,eax
c000c29c:	81 ca 01 08 00 00    	or     edx,0x801
c000c2a2:	89 13                	mov    DWORD PTR [ebx],edx
c000c2a4:	8b 0d 4c 39 02 c0    	mov    ecx,DWORD PTR ds:0xc002394c
c000c2aa:	85 c9                	test   ecx,ecx
c000c2ac:	7e 3d                	jle    c000c2eb <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c2ae:	89 ee                	mov    esi,ebp
c000c2b0:	31 db                	xor    ebx,ebx
c000c2b2:	83 ec 0c             	sub    esp,0xc
c000c2b5:	57                   	push   edi
c000c2b6:	e8 d9 f1 ff ff       	call   c000b494 <Virt::swapIDToSector(unsigned long)>
c000c2bb:	89 34 24             	mov    DWORD PTR [esp],esi
c000c2be:	01 d8                	add    eax,ebx
c000c2c0:	6a 01                	push   0x1
c000c2c2:	31 d2                	xor    edx,edx
c000c2c4:	43                   	inc    ebx
c000c2c5:	52                   	push   edx
c000c2c6:	81 c6 00 02 00 00    	add    esi,0x200
c000c2cc:	50                   	push   eax
c000c2cd:	0f be 05 58 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023958
c000c2d4:	ff 34 85 1c 64 02 c0 	push   DWORD PTR [eax*4-0x3ffd9be4]
c000c2db:	e8 8a 2b 00 00       	call   c000ee6a <LogicalDisk::read(unsigned long long, int, void*)>
c000c2e0:	83 c4 20             	add    esp,0x20
c000c2e3:	39 1d 4c 39 02 c0    	cmp    DWORD PTR ds:0xc002394c,ebx
c000c2e9:	7f c7                	jg     c000c2b2 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c2eb:	a1 88 40 02 c0       	mov    eax,ds:0xc0024088
c000c2f0:	48                   	dec    eax
c000c2f1:	52                   	push   edx
c000c2f2:	a3 88 40 02 c0       	mov    ds:0xc0024088,eax
c000c2f7:	50                   	push   eax
c000c2f8:	55                   	push   ebp
c000c2f9:	68 6a 16 02 c0       	push   0xc002166a
c000c2fe:	e8 be 03 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c303:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c306:	e8 6b f1 ff ff       	call   c000b476 <Virt::freeSwapfilePage(unsigned long)>
c000c30b:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000c310:	83 c4 10             	add    esp,0x10
c000c313:	48                   	dec    eax
c000c314:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000c319:	85 c0                	test   eax,eax
c000c31b:	74 1d                	je     c000c33a <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c31d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c321:	25 ff 0f 00 00       	and    eax,0xfff
c000c326:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c32b:	77 10                	ja     c000c33d <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c32d:	0f 20 d8             	mov    eax,cr3
c000c330:	0f 22 d8             	mov    cr3,eax
c000c333:	b0 01                	mov    al,0x1
c000c335:	e9 48 ff ff ff       	jmp    c000c282 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c33a:	fb                   	sti    
c000c33b:	eb e0                	jmp    c000c31d <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c33d:	83 ec 0c             	sub    esp,0xc
c000c340:	68 7f 16 02 c0       	push   0xc002167f
c000c345:	e8 77 03 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	eb de                	jmp    c000c32d <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c34f:	90                   	nop

c000c350 <VAS::scanForEviction()>:
c000c350:	57                   	push   edi
c000c351:	31 ff                	xor    edi,edi
c000c353:	56                   	push   esi
c000c354:	53                   	push   ebx
c000c355:	83 ec 10             	sub    esp,0x10
c000c358:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c35c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c35f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c365:	75 0e                	jne    c000c375 <VAS::scanForEviction()+0x25>
c000c367:	89 da                	mov    edx,ebx
c000c369:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c36c:	c1 ea 16             	shr    edx,0x16
c000c36f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c373:	74 4e                	je     c000c3c3 <VAS::scanForEviction()+0x73>
c000c375:	53                   	push   ebx
c000c376:	56                   	push   esi
c000c377:	e8 be f2 ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c000c37c:	5a                   	pop    edx
c000c37d:	8b 10                	mov    edx,DWORD PTR [eax]
c000c37f:	59                   	pop    ecx
c000c380:	89 d1                	mov    ecx,edx
c000c382:	81 e1 01 08 00 00    	and    ecx,0x801
c000c388:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c38e:	74 3e                	je     c000c3ce <VAS::scanForEviction()+0x7e>
c000c390:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c396:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c39c:	76 2b                	jbe    c000c3c9 <VAS::scanForEviction()+0x79>
c000c39e:	47                   	inc    edi
c000c39f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c3a6:	83 ff 03             	cmp    edi,0x3
c000c3a9:	74 32                	je     c000c3dd <VAS::scanForEviction()+0x8d>
c000c3ab:	31 db                	xor    ebx,ebx
c000c3ad:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c3b3:	75 c0                	jne    c000c375 <VAS::scanForEviction()+0x25>
c000c3b5:	89 da                	mov    edx,ebx
c000c3b7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c3ba:	c1 ea 16             	shr    edx,0x16
c000c3bd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c3c1:	75 b2                	jne    c000c375 <VAS::scanForEviction()+0x25>
c000c3c3:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c3c9:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c3cc:	eb 91                	jmp    c000c35f <VAS::scanForEviction()+0xf>
c000c3ce:	f6 c2 20             	test   dl,0x20
c000c3d1:	74 13                	je     c000c3e6 <VAS::scanForEviction()+0x96>
c000c3d3:	83 e2 df             	and    edx,0xffffffdf
c000c3d6:	89 10                	mov    DWORD PTR [eax],edx
c000c3d8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c3db:	eb b3                	jmp    c000c390 <VAS::scanForEviction()+0x40>
c000c3dd:	83 c4 10             	add    esp,0x10
c000c3e0:	31 c0                	xor    eax,eax
c000c3e2:	5b                   	pop    ebx
c000c3e3:	5e                   	pop    esi
c000c3e4:	5f                   	pop    edi
c000c3e5:	c3                   	ret    
c000c3e6:	83 ec 08             	sub    esp,0x8
c000c3e9:	89 d0                	mov    eax,edx
c000c3eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3f4:	53                   	push   ebx
c000c3f5:	68 8f 16 02 c0       	push   0xc002168f
c000c3fa:	e8 c2 02 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c3ff:	58                   	pop    eax
c000c400:	5a                   	pop    edx
c000c401:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c404:	56                   	push   esi
c000c405:	e8 62 fd ff ff       	call   c000c16c <VAS::evict(unsigned long)>
c000c40a:	59                   	pop    ecx
c000c40b:	5b                   	pop    ebx
c000c40c:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c40f:	68 a3 16 02 c0       	push   0xc00216a3
c000c414:	e8 a8 02 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c419:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c427:	83 c4 10             	add    esp,0x10
c000c42a:	5b                   	pop    ebx
c000c42b:	5e                   	pop    esi
c000c42c:	5f                   	pop    edi
c000c42d:	c3                   	ret    

c000c42e <mapVASFirstTime>:
c000c42e:	55                   	push   ebp
c000c42f:	57                   	push   edi
c000c430:	56                   	push   esi
c000c431:	53                   	push   ebx
c000c432:	83 ec 0c             	sub    esp,0xc
c000c435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c43a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c43d:	4a                   	dec    edx
c000c43e:	0f 84 fe 00 00 00    	je     c000c542 <mapVASFirstTime+0x114>
c000c444:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c447:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c44a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c44f:	c1 e5 15             	shl    ebp,0x15
c000c452:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c457:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c45d:	29 eb                	sub    ebx,ebp
c000c45f:	29 ef                	sub    edi,ebp
c000c461:	83 ec 08             	sub    esp,0x8
c000c464:	53                   	push   ebx
c000c465:	68 cf 16 02 c0       	push   0xc00216cf
c000c46a:	e8 52 02 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c46f:	e8 3e d7 ff ff       	call   c0009bb2 <Phys::allocatePage()>
c000c474:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c47b:	6a 01                	push   0x1
c000c47d:	53                   	push   ebx
c000c47e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c484:	50                   	push   eax
c000c485:	56                   	push   esi
c000c486:	e8 3d f8 ff ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c48b:	83 c4 20             	add    esp,0x20
c000c48e:	39 fb                	cmp    ebx,edi
c000c490:	75 cf                	jne    c000c461 <mapVASFirstTime+0x33>
c000c492:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c497:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c49c:	29 eb                	sub    ebx,ebp
c000c49e:	29 ef                	sub    edi,ebp
c000c4a0:	83 ec 08             	sub    esp,0x8
c000c4a3:	53                   	push   ebx
c000c4a4:	68 eb 16 02 c0       	push   0xc00216eb
c000c4a9:	e8 13 02 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c4ae:	58                   	pop    eax
c000c4af:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c4b3:	5a                   	pop    edx
c000c4b4:	19 c0                	sbb    eax,eax
c000c4b6:	83 e0 04             	and    eax,0x4
c000c4b9:	05 03 04 00 00       	add    eax,0x403
c000c4be:	50                   	push   eax
c000c4bf:	68 ff 16 02 c0       	push   0xc00216ff
c000c4c4:	e8 f8 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c4c9:	e8 e4 d6 ff ff       	call   c0009bb2 <Phys::allocatePage()>
c000c4ce:	59                   	pop    ecx
c000c4cf:	89 c5                	mov    ebp,eax
c000c4d1:	58                   	pop    eax
c000c4d2:	55                   	push   ebp
c000c4d3:	68 0d 17 02 c0       	push   0xc002170d
c000c4d8:	e8 e4 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c4dd:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c4e1:	19 d2                	sbb    edx,edx
c000c4e3:	83 e2 04             	and    edx,0x4
c000c4e6:	81 c2 03 04 00 00    	add    edx,0x403
c000c4ec:	89 14 24             	mov    DWORD PTR [esp],edx
c000c4ef:	6a 01                	push   0x1
c000c4f1:	53                   	push   ebx
c000c4f2:	55                   	push   ebp
c000c4f3:	56                   	push   esi
c000c4f4:	e8 cf f7 ff ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4f9:	83 c4 18             	add    esp,0x18
c000c4fc:	53                   	push   ebx
c000c4fd:	56                   	push   esi
c000c4fe:	e8 37 f1 ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c000c503:	5a                   	pop    edx
c000c504:	59                   	pop    ecx
c000c505:	ff 30                	push   DWORD PTR [eax]
c000c507:	68 29 17 02 c0       	push   0xc0021729
c000c50c:	e8 b0 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c511:	0f 20 d8             	mov    eax,cr3
c000c514:	83 c4 0c             	add    esp,0xc
c000c517:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c51d:	56                   	push   esi
c000c51e:	50                   	push   eax
c000c51f:	68 34 17 02 c0       	push   0xc0021734
c000c524:	e8 98 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c529:	83 c4 10             	add    esp,0x10
c000c52c:	39 df                	cmp    edi,ebx
c000c52e:	0f 85 6c ff ff ff    	jne    c000c4a0 <mapVASFirstTime+0x72>
c000c534:	0f 20 d8             	mov    eax,cr3
c000c537:	0f 22 d8             	mov    cr3,eax
c000c53a:	83 c4 0c             	add    esp,0xc
c000c53d:	5b                   	pop    ebx
c000c53e:	5e                   	pop    esi
c000c53f:	5f                   	pop    edi
c000c540:	5d                   	pop    ebp
c000c541:	c3                   	ret    
c000c542:	83 ec 0c             	sub    esp,0xc
c000c545:	68 b6 16 02 c0       	push   0xc00216b6
c000c54a:	e8 72 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c54f:	83 c4 10             	add    esp,0x10
c000c552:	83 c4 0c             	add    esp,0xc
c000c555:	5b                   	pop    ebx
c000c556:	5e                   	pop    esi
c000c557:	5f                   	pop    edi
c000c558:	5d                   	pop    ebp
c000c559:	c3                   	ret    

c000c55a <__cxa_atexit>:
c000c55a:	31 c0                	xor    eax,eax
c000c55c:	c3                   	ret    

c000c55d <__cxa_finalize>:
c000c55d:	c3                   	ret    

c000c55e <__stack_chk_fail>:
c000c55e:	55                   	push   ebp
c000c55f:	89 e5                	mov    ebp,esp
c000c561:	83 ec 14             	sub    esp,0x14
c000c564:	68 4c 17 02 c0       	push   0xc002174c
c000c569:	e8 53 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c56e:	58                   	pop    eax
c000c56f:	5a                   	pop    edx
c000c570:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c573:	68 9c 17 02 c0       	push   0xc002179c
c000c578:	e8 44 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c57d:	59                   	pop    ecx
c000c57e:	58                   	pop    eax
c000c57f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c582:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c585:	68 9c 17 02 c0       	push   0xc002179c
c000c58a:	e8 32 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c58f:	5a                   	pop    edx
c000c590:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c593:	59                   	pop    ecx
c000c594:	8b 00                	mov    eax,DWORD PTR [eax]
c000c596:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c599:	68 9c 17 02 c0       	push   0xc002179c
c000c59e:	e8 1e 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c5a3:	5a                   	pop    edx
c000c5a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5a7:	59                   	pop    ecx
c000c5a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5ac:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c5af:	68 9c 17 02 c0       	push   0xc002179c
c000c5b4:	e8 08 01 00 00       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000c5b9:	c7 04 24 a4 17 02 c0 	mov    DWORD PTR [esp],0xc00217a4
c000c5c0:	e8 3e 60 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	c9                   	leave  
c000c5c9:	c3                   	ret    

c000c5ca <__cxa_pure_virtual>:
c000c5ca:	83 ec 18             	sub    esp,0x18
c000c5cd:	68 bc 17 02 c0       	push   0xc00217bc
c000c5d2:	e8 2c 60 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000c5d7:	83 c4 1c             	add    esp,0x1c
c000c5da:	c3                   	ret    

c000c5db <operator new[](unsigned long)>:
c000c5db:	e9 9f d1 ff ff       	jmp    c000977f <malloc>

c000c5e0 <operator delete(void*, unsigned long)>:
c000c5e0:	e9 ba d1 ff ff       	jmp    c000979f <rfree>

c000c5e5 <operator delete[](void*)>:
c000c5e5:	e9 b5 d1 ff ff       	jmp    c000979f <rfree>

c000c5ea <operator delete[](void*, unsigned long)>:
c000c5ea:	e9 b0 d1 ff ff       	jmp    c000979f <rfree>

c000c5ef <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c5ef:	55                   	push   ebp
c000c5f0:	b9 11 00 00 00       	mov    ecx,0x11
c000c5f5:	57                   	push   edi
c000c5f6:	56                   	push   esi
c000c5f7:	be a2 12 02 c0       	mov    esi,0xc00212a2
c000c5fc:	53                   	push   ebx
c000c5fd:	83 ec 20             	sub    esp,0x20
c000c600:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c604:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c608:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c60c:	fc                   	cld    
c000c60d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c60f:	89 ee                	mov    esi,ebp
c000c611:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c615:	eb 02                	jmp    c000c619 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c617:	89 c6                	mov    esi,eax
c000c619:	31 d2                	xor    edx,edx
c000c61b:	41                   	inc    ecx
c000c61c:	89 f0                	mov    eax,esi
c000c61e:	f7 f3                	div    ebx
c000c620:	39 de                	cmp    esi,ebx
c000c622:	73 f3                	jae    c000c617 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c624:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c627:	eb 02                	jmp    c000c62b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c629:	89 c5                	mov    ebp,eax
c000c62b:	31 d2                	xor    edx,edx
c000c62d:	49                   	dec    ecx
c000c62e:	89 e8                	mov    eax,ebp
c000c630:	f7 f3                	div    ebx
c000c632:	39 dd                	cmp    ebp,ebx
c000c634:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c638:	88 11                	mov    BYTE PTR [ecx],dl
c000c63a:	73 ed                	jae    c000c629 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c63c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c640:	83 c4 20             	add    esp,0x20
c000c643:	5b                   	pop    ebx
c000c644:	5e                   	pop    esi
c000c645:	5f                   	pop    edi
c000c646:	5d                   	pop    ebp
c000c647:	c3                   	ret    

c000c648 <Dbg::logc(char)>:
c000c648:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c64c:	f6 05 c0 3f 02 c0 10 	test   BYTE PTR ds:0xc0023fc0,0x10
c000c653:	75 12                	jne    c000c667 <Dbg::logc(char)+0x1f>
c000c655:	ba fd 03 00 00       	mov    edx,0x3fd
c000c65a:	ec                   	in     al,dx
c000c65b:	a8 20                	test   al,0x20
c000c65d:	74 fb                	je     c000c65a <Dbg::logc(char)+0x12>
c000c65f:	ba f8 03 00 00       	mov    edx,0x3f8
c000c664:	88 c8                	mov    al,cl
c000c666:	ee                   	out    dx,al
c000c667:	c3                   	ret    

c000c668 <Dbg::logs(char*)>:
c000c668:	53                   	push   ebx
c000c669:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c66d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c670:	84 c0                	test   al,al
c000c672:	74 0f                	je     c000c683 <Dbg::logs(char*)+0x1b>
c000c674:	50                   	push   eax
c000c675:	43                   	inc    ebx
c000c676:	e8 cd ff ff ff       	call   c000c648 <Dbg::logc(char)>
c000c67b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000c67e:	5a                   	pop    edx
c000c67f:	84 c0                	test   al,al
c000c681:	75 f1                	jne    c000c674 <Dbg::logs(char*)+0xc>
c000c683:	5b                   	pop    ebx
c000c684:	c3                   	ret    

c000c685 <Dbg::logWriteInt(unsigned int)>:
c000c685:	83 ec 10             	sub    esp,0x10
c000c688:	6a 0a                	push   0xa
c000c68a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c68e:	50                   	push   eax
c000c68f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c693:	e8 57 ff ff ff       	call   c000c5ef <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c698:	50                   	push   eax
c000c699:	e8 ca ff ff ff       	call   c000c668 <Dbg::logs(char*)>
c000c69e:	83 c4 20             	add    esp,0x20
c000c6a1:	c3                   	ret    

c000c6a2 <Dbg::logWriteIntBase(unsigned int, int)>:
c000c6a2:	83 ec 10             	sub    esp,0x10
c000c6a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c6ad:	50                   	push   eax
c000c6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6b2:	e8 38 ff ff ff       	call   c000c5ef <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000c6b7:	50                   	push   eax
c000c6b8:	e8 ab ff ff ff       	call   c000c668 <Dbg::logs(char*)>
c000c6bd:	83 c4 20             	add    esp,0x20
c000c6c0:	c3                   	ret    

c000c6c1 <Dbg::kprintf(char const*, ...)>:
c000c6c1:	55                   	push   ebp
c000c6c2:	57                   	push   edi
c000c6c3:	56                   	push   esi
c000c6c4:	53                   	push   ebx
c000c6c5:	83 ec 0c             	sub    esp,0xc
c000c6c8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c6cc:	f6 05 c0 3f 02 c0 10 	test   BYTE PTR ds:0xc0023fc0,0x10
c000c6d3:	74 08                	je     c000c6dd <Dbg::kprintf(char const*, ...)+0x1c>
c000c6d5:	83 c4 0c             	add    esp,0xc
c000c6d8:	5b                   	pop    ebx
c000c6d9:	5e                   	pop    esi
c000c6da:	5f                   	pop    edi
c000c6db:	5d                   	pop    ebp
c000c6dc:	c3                   	ret    
c000c6dd:	8d 44 24 24          	lea    eax,[esp+0x24]
c000c6e1:	31 db                	xor    ebx,ebx
c000c6e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c6e7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000c6ea:	84 c0                	test   al,al
c000c6ec:	74 e7                	je     c000c6d5 <Dbg::kprintf(char const*, ...)+0x14>
c000c6ee:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c6f1:	3c 25                	cmp    al,0x25
c000c6f3:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c6f6:	75 44                	jne    c000c73c <Dbg::kprintf(char const*, ...)+0x7b>
c000c6f8:	83 c3 02             	add    ebx,0x2
c000c6fb:	8a 07                	mov    al,BYTE PTR [edi]
c000c6fd:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000c700:	83 e8 25             	sub    eax,0x25
c000c703:	3c 53                	cmp    al,0x53
c000c705:	0f 87 c9 00 00 00    	ja     c000c7d4 <Dbg::kprintf(char const*, ...)+0x113>
c000c70b:	0f b6 c0             	movzx  eax,al
c000c70e:	ff 24 85 d0 17 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde830]
c000c715:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c719:	89 c8                	mov    eax,ecx
c000c71b:	83 c1 04             	add    ecx,0x4
c000c71e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c722:	ff 30                	push   DWORD PTR [eax]
c000c724:	e8 5c ff ff ff       	call   c000c685 <Dbg::logWriteInt(unsigned int)>
c000c729:	5f                   	pop    edi
c000c72a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000c72e:	84 c0                	test   al,al
c000c730:	74 a3                	je     c000c6d5 <Dbg::kprintf(char const*, ...)+0x14>
c000c732:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c735:	3c 25                	cmp    al,0x25
c000c737:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000c73a:	74 bc                	je     c000c6f8 <Dbg::kprintf(char const*, ...)+0x37>
c000c73c:	50                   	push   eax
c000c73d:	89 eb                	mov    ebx,ebp
c000c73f:	e8 04 ff ff ff       	call   c000c648 <Dbg::logc(char)>
c000c744:	89 fd                	mov    ebp,edi
c000c746:	58                   	pop    eax
c000c747:	eb e1                	jmp    c000c72a <Dbg::kprintf(char const*, ...)+0x69>
c000c749:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c74d:	89 c8                	mov    eax,ecx
c000c74f:	83 c1 04             	add    ecx,0x4
c000c752:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c756:	ff 30                	push   DWORD PTR [eax]
c000c758:	e8 0b ff ff ff       	call   c000c668 <Dbg::logs(char*)>
c000c75d:	58                   	pop    eax
c000c75e:	eb ca                	jmp    c000c72a <Dbg::kprintf(char const*, ...)+0x69>
c000c760:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c764:	89 d0                	mov    eax,edx
c000c766:	83 c2 04             	add    edx,0x4
c000c769:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c76d:	ff 30                	push   DWORD PTR [eax]
c000c76f:	e8 11 ff ff ff       	call   c000c685 <Dbg::logWriteInt(unsigned int)>
c000c774:	58                   	pop    eax
c000c775:	eb b3                	jmp    c000c72a <Dbg::kprintf(char const*, ...)+0x69>
c000c777:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c77b:	89 d0                	mov    eax,edx
c000c77d:	83 c2 04             	add    edx,0x4
c000c780:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000c783:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c787:	50                   	push   eax
c000c788:	e8 bb fe ff ff       	call   c000c648 <Dbg::logc(char)>
c000c78d:	58                   	pop    eax
c000c78e:	eb 9a                	jmp    c000c72a <Dbg::kprintf(char const*, ...)+0x69>
c000c790:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c794:	89 c8                	mov    eax,ecx
c000c796:	83 c1 04             	add    ecx,0x4
c000c799:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000c79d:	6a 10                	push   0x10
c000c79f:	ff 30                	push   DWORD PTR [eax]
c000c7a1:	e8 fc fe ff ff       	call   c000c6a2 <Dbg::logWriteIntBase(unsigned int, int)>
c000c7a6:	59                   	pop    ecx
c000c7a7:	5f                   	pop    edi
c000c7a8:	eb 80                	jmp    c000c72a <Dbg::kprintf(char const*, ...)+0x69>
c000c7aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c7ae:	89 d0                	mov    eax,edx
c000c7b0:	83 c2 08             	add    edx,0x8
c000c7b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7b7:	6a 10                	push   0x10
c000c7b9:	ff 30                	push   DWORD PTR [eax]
c000c7bb:	e8 e2 fe ff ff       	call   c000c6a2 <Dbg::logWriteIntBase(unsigned int, int)>
c000c7c0:	58                   	pop    eax
c000c7c1:	5a                   	pop    edx
c000c7c2:	e9 63 ff ff ff       	jmp    c000c72a <Dbg::kprintf(char const*, ...)+0x69>
c000c7c7:	6a 25                	push   0x25
c000c7c9:	e8 7a fe ff ff       	call   c000c648 <Dbg::logc(char)>
c000c7ce:	58                   	pop    eax
c000c7cf:	e9 56 ff ff ff       	jmp    c000c72a <Dbg::kprintf(char const*, ...)+0x69>
c000c7d4:	6a 25                	push   0x25
c000c7d6:	e8 6d fe ff ff       	call   c000c648 <Dbg::logc(char)>
c000c7db:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000c7de:	50                   	push   eax
c000c7df:	e8 64 fe ff ff       	call   c000c648 <Dbg::logc(char)>
c000c7e4:	5a                   	pop    edx
c000c7e5:	59                   	pop    ecx
c000c7e6:	e9 3f ff ff ff       	jmp    c000c72a <Dbg::kprintf(char const*, ...)+0x69>
c000c7eb:	90                   	nop

c000c7ec <File::read(unsigned long long, void*, int*)>:
c000c7ec:	53                   	push   ebx
c000c7ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c7f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c7f5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c7fc:	3c 19                	cmp    al,0x19
c000c7fe:	77 35                	ja     c000c835 <File::read(unsigned long long, void*, int*)+0x49>
c000c800:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c000c807:	85 c0                	test   eax,eax
c000c809:	74 2a                	je     c000c835 <File::read(unsigned long long, void*, int*)+0x49>
c000c80b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c811:	85 c0                	test   eax,eax
c000c813:	74 20                	je     c000c835 <File::read(unsigned long long, void*, int*)+0x49>
c000c815:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c819:	74 21                	je     c000c83c <File::read(unsigned long long, void*, int*)+0x50>
c000c81b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c81d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c821:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c82b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c82f:	5b                   	pop    ebx
c000c830:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000c833:	ff e0                	jmp    eax
c000c835:	b8 0b 00 00 00       	mov    eax,0xb
c000c83a:	eb 05                	jmp    c000c841 <File::read(unsigned long long, void*, int*)+0x55>
c000c83c:	b8 05 00 00 00       	mov    eax,0x5
c000c841:	5b                   	pop    ebx
c000c842:	c3                   	ret    
c000c843:	90                   	nop

c000c844 <File::write(unsigned long long, void*, int*)>:
c000c844:	53                   	push   ebx
c000c845:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c849:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c84d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c854:	3c 19                	cmp    al,0x19
c000c856:	77 35                	ja     c000c88d <File::write(unsigned long long, void*, int*)+0x49>
c000c858:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c000c85f:	85 c0                	test   eax,eax
c000c861:	74 2a                	je     c000c88d <File::write(unsigned long long, void*, int*)+0x49>
c000c863:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c869:	85 c0                	test   eax,eax
c000c86b:	74 20                	je     c000c88d <File::write(unsigned long long, void*, int*)+0x49>
c000c86d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c871:	74 21                	je     c000c894 <File::write(unsigned long long, void*, int*)+0x50>
c000c873:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c875:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c879:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c87f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c883:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c887:	5b                   	pop    ebx
c000c888:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000c88b:	ff e0                	jmp    eax
c000c88d:	b8 0b 00 00 00       	mov    eax,0xb
c000c892:	eb 05                	jmp    c000c899 <File::write(unsigned long long, void*, int*)+0x55>
c000c894:	b8 05 00 00 00       	mov    eax,0x5
c000c899:	5b                   	pop    ebx
c000c89a:	c3                   	ret    
c000c89b:	90                   	nop

c000c89c <Directory::read(unsigned long long, void*, int*)>:
c000c89c:	53                   	push   ebx
c000c89d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c8a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000c8ac:	3c 19                	cmp    al,0x19
c000c8ae:	77 35                	ja     c000c8e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c8b0:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c000c8b7:	85 c0                	test   eax,eax
c000c8b9:	74 2a                	je     c000c8e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c8bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000c8c1:	85 c0                	test   eax,eax
c000c8c3:	74 20                	je     c000c8e5 <Directory::read(unsigned long long, void*, int*)+0x49>
c000c8c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c8c9:	74 21                	je     c000c8ec <Directory::read(unsigned long long, void*, int*)+0x50>
c000c8cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c8cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c8d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000c8d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8df:	5b                   	pop    ebx
c000c8e0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000c8e3:	ff e0                	jmp    eax
c000c8e5:	b8 0b 00 00 00       	mov    eax,0xb
c000c8ea:	eb 05                	jmp    c000c8f1 <Directory::read(unsigned long long, void*, int*)+0x55>
c000c8ec:	b8 05 00 00 00       	mov    eax,0x5
c000c8f1:	5b                   	pop    ebx
c000c8f2:	c3                   	ret    
c000c8f3:	90                   	nop

c000c8f4 <Directory::write(unsigned long long, void*, int*)>:
c000c8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8f8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000c8ff:	b8 0b 00 00 00       	mov    eax,0xb
c000c904:	80 fa 19             	cmp    dl,0x19
c000c907:	77 18                	ja     c000c921 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c909:	8b 14 95 20 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9ae0]
c000c910:	85 d2                	test   edx,edx
c000c912:	74 0d                	je     c000c921 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000c914:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000c91b:	19 c0                	sbb    eax,eax
c000c91d:	83 e0 0a             	and    eax,0xa
c000c920:	40                   	inc    eax
c000c921:	c3                   	ret    

c000c922 <File::isAtty()>:
c000c922:	31 c0                	xor    eax,eax
c000c924:	c3                   	ret    
c000c925:	90                   	nop

c000c926 <Directory::isAtty()>:
c000c926:	31 c0                	xor    eax,eax
c000c928:	c3                   	ret    
c000c929:	90                   	nop

c000c92a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000c92a:	b8 0a 00 00 00       	mov    eax,0xa
c000c92f:	c3                   	ret    

c000c930 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000c930:	b8 0a 00 00 00       	mov    eax,0xa
c000c935:	c3                   	ret    

c000c936 <Filesystem::allocateSwapfile(char const*, int)>:
c000c936:	31 c0                	xor    eax,eax
c000c938:	31 d2                	xor    edx,edx
c000c93a:	c3                   	ret    
c000c93b:	90                   	nop

c000c93c <File::~File()>:
c000c93c:	83 ec 0c             	sub    esp,0xc
c000c93f:	ba 0c 1a 02 c0       	mov    edx,0xc0021a0c
c000c944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c948:	89 10                	mov    DWORD PTR [eax],edx
c000c94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c94e:	83 ec 0c             	sub    esp,0xc
c000c951:	50                   	push   eax
c000c952:	e8 ad e7 ff ff       	call   c000b104 <UnixFile::~UnixFile()>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	90                   	nop
c000c95b:	83 c4 0c             	add    esp,0xc
c000c95e:	c3                   	ret    
c000c95f:	90                   	nop

c000c960 <File::~File()>:
c000c960:	83 ec 0c             	sub    esp,0xc
c000c963:	83 ec 0c             	sub    esp,0xc
c000c966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c96a:	e8 cd ff ff ff       	call   c000c93c <File::~File()>
c000c96f:	83 c4 10             	add    esp,0x10
c000c972:	83 ec 08             	sub    esp,0x8
c000c975:	68 14 01 00 00       	push   0x114
c000c97a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c97e:	e8 5d fc ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000c983:	83 c4 10             	add    esp,0x10
c000c986:	83 c4 0c             	add    esp,0xc
c000c989:	c3                   	ret    

c000c98a <Directory::~Directory()>:
c000c98a:	83 ec 0c             	sub    esp,0xc
c000c98d:	ba 28 1a 02 c0       	mov    edx,0xc0021a28
c000c992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c996:	89 10                	mov    DWORD PTR [eax],edx
c000c998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c99c:	83 ec 0c             	sub    esp,0xc
c000c99f:	50                   	push   eax
c000c9a0:	e8 5f e7 ff ff       	call   c000b104 <UnixFile::~UnixFile()>
c000c9a5:	83 c4 10             	add    esp,0x10
c000c9a8:	90                   	nop
c000c9a9:	83 c4 0c             	add    esp,0xc
c000c9ac:	c3                   	ret    
c000c9ad:	90                   	nop

c000c9ae <Directory::~Directory()>:
c000c9ae:	83 ec 0c             	sub    esp,0xc
c000c9b1:	83 ec 0c             	sub    esp,0xc
c000c9b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b8:	e8 cd ff ff ff       	call   c000c98a <Directory::~Directory()>
c000c9bd:	83 c4 10             	add    esp,0x10
c000c9c0:	83 ec 08             	sub    esp,0x8
c000c9c3:	68 14 01 00 00       	push   0x114
c000c9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9cc:	e8 0f fc ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000c9d1:	83 c4 10             	add    esp,0x10
c000c9d4:	83 c4 0c             	add    esp,0xc
c000c9d7:	c3                   	ret    

c000c9d8 <Filesystem::Filesystem()>:
c000c9d8:	ba a4 19 02 c0       	mov    edx,0xc00219a4
c000c9dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9e1:	89 10                	mov    DWORD PTR [eax],edx
c000c9e3:	8b 15 98 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024098
c000c9e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c9f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9f4:	a3 98 40 02 c0       	mov    ds:0xc0024098,eax
c000c9f9:	90                   	nop
c000c9fa:	c3                   	ret    
c000c9fb:	90                   	nop

c000c9fc <Filesystem::~Filesystem()>:
c000c9fc:	ba a4 19 02 c0       	mov    edx,0xc00219a4
c000ca01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca05:	89 10                	mov    DWORD PTR [eax],edx
c000ca07:	90                   	nop
c000ca08:	c3                   	ret    
c000ca09:	90                   	nop

c000ca0a <Filesystem::~Filesystem()>:
c000ca0a:	83 ec 0c             	sub    esp,0xc
c000ca0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ca11:	e8 e6 ff ff ff       	call   c000c9fc <Filesystem::~Filesystem()>
c000ca16:	83 c4 04             	add    esp,0x4
c000ca19:	83 ec 08             	sub    esp,0x8
c000ca1c:	6a 08                	push   0x8
c000ca1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca22:	e8 b9 fb ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000ca27:	83 c4 10             	add    esp,0x10
c000ca2a:	83 c4 0c             	add    esp,0xc
c000ca2d:	c3                   	ret    

c000ca2e <Fs::getcwd(Process*, char*, int)>:
c000ca2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca32:	31 c0                	xor    eax,eax
c000ca34:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca37:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ca3b:	7d 15                	jge    c000ca52 <Fs::getcwd(Process*, char*, int)+0x24>
c000ca3d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca41:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ca48:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ca4b:	84 c9                	test   cl,cl
c000ca4d:	74 06                	je     c000ca55 <Fs::getcwd(Process*, char*, int)+0x27>
c000ca4f:	40                   	inc    eax
c000ca50:	eb e2                	jmp    c000ca34 <Fs::getcwd(Process*, char*, int)+0x6>
c000ca52:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ca55:	31 c0                	xor    eax,eax
c000ca57:	c3                   	ret    

c000ca58 <Fs::initVFS()>:
c000ca58:	83 ec 18             	sub    esp,0x18
c000ca5b:	6a 08                	push   0x8
c000ca5d:	e8 1d cd ff ff       	call   c000977f <malloc>
c000ca62:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca65:	e8 2a d9 00 00       	call   c001a394 <FAT::FAT()>
c000ca6a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ca71:	e8 09 cd ff ff       	call   c000977f <malloc>
c000ca76:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca79:	e8 a6 eb 00 00       	call   c001b624 <ISO9660::ISO9660()>
c000ca7e:	83 c4 1c             	add    esp,0x1c
c000ca81:	c3                   	ret    

c000ca82 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ca82:	55                   	push   ebp
c000ca83:	57                   	push   edi
c000ca84:	56                   	push   esi
c000ca85:	53                   	push   ebx
c000ca86:	81 ec 10 04 00 00    	sub    esp,0x410
c000ca8c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ca93:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ca9a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000caa1:	68 00 04 00 00       	push   0x400
c000caa6:	6a 00                	push   0x0
c000caa8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000caac:	56                   	push   esi
c000caad:	e8 f6 39 ff ff       	call   c00004a8 <memset>
c000cab2:	83 c4 10             	add    esp,0x10
c000cab5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000cab9:	75 0b                	jne    c000cac6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000cabb:	50                   	push   eax
c000cabc:	50                   	push   eax
c000cabd:	57                   	push   edi
c000cabe:	56                   	push   esi
c000cabf:	e8 a0 3a ff ff       	call   c0000564 <strcpy>
c000cac4:	eb 41                	jmp    c000cb07 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000cac6:	8a 07                	mov    al,BYTE PTR [edi]
c000cac8:	3c 5c                	cmp    al,0x5c
c000caca:	74 04                	je     c000cad0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000cacc:	3c 2f                	cmp    al,0x2f
c000cace:	75 18                	jne    c000cae8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000cad0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000cad3:	3c 60                	cmp    al,0x60
c000cad5:	7e 03                	jle    c000cada <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000cad7:	83 e8 20             	sub    eax,0x20
c000cada:	88 04 24             	mov    BYTE PTR [esp],al
c000cadd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cae4:	50                   	push   eax
c000cae5:	50                   	push   eax
c000cae6:	eb 18                	jmp    c000cb00 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000cae8:	50                   	push   eax
c000cae9:	50                   	push   eax
c000caea:	55                   	push   ebp
c000caeb:	56                   	push   esi
c000caec:	e8 73 3a ff ff       	call   c0000564 <strcpy>
c000caf1:	5a                   	pop    edx
c000caf2:	59                   	pop    ecx
c000caf3:	68 cf 28 02 c0       	push   0xc00228cf
c000caf8:	56                   	push   esi
c000caf9:	e8 a6 3b ff ff       	call   c00006a4 <strcat>
c000cafe:	5d                   	pop    ebp
c000caff:	58                   	pop    eax
c000cb00:	57                   	push   edi
c000cb01:	56                   	push   esi
c000cb02:	e8 9d 3b ff ff       	call   c00006a4 <strcat>
c000cb07:	83 c4 10             	add    esp,0x10
c000cb0a:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cb0d:	3c 60                	cmp    al,0x60
c000cb0f:	7e 03                	jle    c000cb14 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cb11:	83 e8 20             	sub    eax,0x20
c000cb14:	88 04 24             	mov    BYTE PTR [esp],al
c000cb17:	88 03                	mov    BYTE PTR [ebx],al
c000cb19:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cb20:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cb26:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cb2a:	bf 03 00 00 00       	mov    edi,0x3
c000cb2f:	b8 03 00 00 00       	mov    eax,0x3
c000cb34:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cb37:	84 d2                	test   dl,dl
c000cb39:	0f 84 91 00 00 00    	je     c000cbd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cb3f:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cb42:	80 fa 5c             	cmp    dl,0x5c
c000cb45:	74 05                	je     c000cb4c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cb47:	80 fa 2f             	cmp    dl,0x2f
c000cb4a:	75 12                	jne    c000cb5e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cb4c:	89 c5                	mov    ebp,eax
c000cb4e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cb53:	74 09                	je     c000cb5e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cb55:	40                   	inc    eax
c000cb56:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cb5a:	89 cf                	mov    edi,ecx
c000cb5c:	eb d6                	jmp    c000cb34 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cb5e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cb63:	75 5b                	jne    c000cbc0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cb65:	80 fa 2e             	cmp    dl,0x2e
c000cb68:	75 56                	jne    c000cbc0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cb6a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cb6e:	74 19                	je     c000cb89 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cb70:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cb75:	74 53                	je     c000cbca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cb77:	89 f9                	mov    ecx,edi
c000cb79:	41                   	inc    ecx
c000cb7a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cb7d:	80 fa 2f             	cmp    dl,0x2f
c000cb80:	74 f7                	je     c000cb79 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cb82:	80 fa 5c             	cmp    dl,0x5c
c000cb85:	74 f2                	je     c000cb79 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cb87:	eb d1                	jmp    c000cb5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cb89:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cb8e:	74 3a                	je     c000cbca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cb90:	83 f8 03             	cmp    eax,0x3
c000cb93:	74 c5                	je     c000cb5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cb95:	41                   	inc    ecx
c000cb96:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cb99:	80 fa 2f             	cmp    dl,0x2f
c000cb9c:	74 f7                	je     c000cb95 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cb9e:	80 fa 5c             	cmp    dl,0x5c
c000cba1:	74 f2                	je     c000cb95 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cba3:	48                   	dec    eax
c000cba4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cba8:	75 06                	jne    c000cbb0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cbaa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cbae:	eb f3                	jmp    c000cba3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cbb0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cbb4:	74 07                	je     c000cbbd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cbb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cbba:	48                   	dec    eax
c000cbbb:	eb f3                	jmp    c000cbb0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cbbd:	40                   	inc    eax
c000cbbe:	eb 9a                	jmp    c000cb5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbc0:	80 fa 2f             	cmp    dl,0x2f
c000cbc3:	74 95                	je     c000cb5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbc5:	80 fa 5c             	cmp    dl,0x5c
c000cbc8:	74 90                	je     c000cb5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbca:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cbcd:	40                   	inc    eax
c000cbce:	eb 8a                	jmp    c000cb5a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cbd0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cbd4:	83 ec 0c             	sub    esp,0xc
c000cbd7:	53                   	push   ebx
c000cbd8:	e8 e7 38 ff ff       	call   c00004c4 <strlen>
c000cbdd:	83 c4 10             	add    esp,0x10
c000cbe0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cbe5:	75 26                	jne    c000cc0d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cbe7:	83 ec 0c             	sub    esp,0xc
c000cbea:	53                   	push   ebx
c000cbeb:	e8 d4 38 ff ff       	call   c00004c4 <strlen>
c000cbf0:	83 c4 10             	add    esp,0x10
c000cbf3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cbf8:	74 26                	je     c000cc20 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cbfa:	83 ec 0c             	sub    esp,0xc
c000cbfd:	53                   	push   ebx
c000cbfe:	e8 c1 38 ff ff       	call   c00004c4 <strlen>
c000cc03:	83 c4 10             	add    esp,0x10
c000cc06:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cc0b:	eb c7                	jmp    c000cbd4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cc0d:	83 ec 0c             	sub    esp,0xc
c000cc10:	53                   	push   ebx
c000cc11:	e8 ae 38 ff ff       	call   c00004c4 <strlen>
c000cc16:	83 c4 10             	add    esp,0x10
c000cc19:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cc1e:	74 c7                	je     c000cbe7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cc20:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cc26:	5b                   	pop    ebx
c000cc27:	5e                   	pop    esi
c000cc28:	5f                   	pop    edi
c000cc29:	5d                   	pop    ebp
c000cc2a:	c3                   	ret    
c000cc2b:	90                   	nop

c000cc2c <File::File(char const*, Process*)>:
c000cc2c:	83 ec 0c             	sub    esp,0xc
c000cc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc33:	83 ec 08             	sub    esp,0x8
c000cc36:	6a 00                	push   0x0
c000cc38:	50                   	push   eax
c000cc39:	e8 e4 e2 ff ff       	call   c000af22 <UnixFile::UnixFile(int)>
c000cc3e:	83 c4 10             	add    esp,0x10
c000cc41:	ba 0c 1a 02 c0       	mov    edx,0xc0021a0c
c000cc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc4a:	89 10                	mov    DWORD PTR [eax],edx
c000cc4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cc50:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000cc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc5a:	83 c0 0d             	add    eax,0xd
c000cc5d:	83 ec 04             	sub    esp,0x4
c000cc60:	52                   	push   edx
c000cc61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc65:	50                   	push   eax
c000cc66:	e8 17 fe ff ff       	call   c000ca82 <Fs::standardiseFiles(char*, char const*, char const*)>
c000cc6b:	83 c4 10             	add    esp,0x10
c000cc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc72:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000cc75:	8d 50 bf             	lea    edx,[eax-0x41]
c000cc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc7c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000cc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc86:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000cc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc8e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000cc94:	0f b6 c0             	movzx  eax,al
c000cc97:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c000cc9e:	85 c0                	test   eax,eax
c000cca0:	74 5e                	je     c000cd00 <File::File(char const*, Process*)+0xd4>
c000cca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ccac:	0f b6 c0             	movzx  eax,al
c000ccaf:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c000ccb6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ccbc:	85 c0                	test   eax,eax
c000ccbe:	75 40                	jne    c000cd00 <File::File(char const*, Process*)+0xd4>
c000ccc0:	83 ec 0c             	sub    esp,0xc
c000ccc3:	68 48 19 02 c0       	push   0xc0021948
c000ccc8:	e8 f4 f9 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000cccd:	83 c4 10             	add    esp,0x10
c000ccd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ccda:	0f b6 c0             	movzx  eax,al
c000ccdd:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c000cce4:	83 ec 0c             	sub    esp,0xc
c000cce7:	50                   	push   eax
c000cce8:	e8 7b 20 00 00       	call   c000ed68 <LogicalDisk::mount()>
c000cced:	83 c4 10             	add    esp,0x10
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	68 1b 34 02 c0       	push   0xc002341b
c000ccf8:	e8 c4 f9 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000ccfd:	83 c4 10             	add    esp,0x10
c000cd00:	90                   	nop
c000cd01:	83 c4 0c             	add    esp,0xc
c000cd04:	c3                   	ret    
c000cd05:	90                   	nop

c000cd06 <File::open(FileOpenMode)>:
c000cd06:	53                   	push   ebx
c000cd07:	b8 0b 00 00 00       	mov    eax,0xb
c000cd0c:	83 ec 08             	sub    esp,0x8
c000cd0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd13:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000cd1a:	80 fa 19             	cmp    dl,0x19
c000cd1d:	77 40                	ja     c000cd5f <File::open(FileOpenMode)+0x59>
c000cd1f:	8b 14 95 20 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9ae0]
c000cd26:	85 d2                	test   edx,edx
c000cd28:	74 35                	je     c000cd5f <File::open(FileOpenMode)+0x59>
c000cd2a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cd30:	85 d2                	test   edx,edx
c000cd32:	74 2b                	je     c000cd5f <File::open(FileOpenMode)+0x59>
c000cd34:	b8 06 00 00 00       	mov    eax,0x6
c000cd39:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000cd3d:	75 20                	jne    c000cd5f <File::open(FileOpenMode)+0x59>
c000cd3f:	8b 02                	mov    eax,DWORD PTR [edx]
c000cd41:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000cd47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd4b:	51                   	push   ecx
c000cd4c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000cd4f:	51                   	push   ecx
c000cd50:	52                   	push   edx
c000cd51:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cd54:	83 c4 10             	add    esp,0x10
c000cd57:	85 c0                	test   eax,eax
c000cd59:	75 04                	jne    c000cd5f <File::open(FileOpenMode)+0x59>
c000cd5b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000cd5f:	83 c4 08             	add    esp,0x8
c000cd62:	5b                   	pop    ebx
c000cd63:	c3                   	ret    

c000cd64 <File::close()>:
c000cd64:	53                   	push   ebx
c000cd65:	b8 0b 00 00 00       	mov    eax,0xb
c000cd6a:	83 ec 08             	sub    esp,0x8
c000cd6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cd71:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000cd78:	80 fa 19             	cmp    dl,0x19
c000cd7b:	77 41                	ja     c000cdbe <File::close()+0x5a>
c000cd7d:	8b 1c 95 20 65 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9ae0]
c000cd84:	85 db                	test   ebx,ebx
c000cd86:	74 36                	je     c000cdbe <File::close()+0x5a>
c000cd88:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000cd8f:	74 2d                	je     c000cdbe <File::close()+0x5a>
c000cd91:	b8 05 00 00 00       	mov    eax,0x5
c000cd96:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000cd9a:	74 22                	je     c000cdbe <File::close()+0x5a>
c000cd9c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000cda0:	8b 04 95 20 65 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9ae0]
c000cda7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cdad:	53                   	push   ebx
c000cdae:	53                   	push   ebx
c000cdaf:	8b 10                	mov    edx,DWORD PTR [eax]
c000cdb1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000cdb7:	50                   	push   eax
c000cdb8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000cdbb:	83 c4 10             	add    esp,0x10
c000cdbe:	83 c4 08             	add    esp,0x8
c000cdc1:	5b                   	pop    ebx
c000cdc2:	c3                   	ret    
c000cdc3:	90                   	nop

c000cdc4 <File::seek(unsigned long long)>:
c000cdc4:	56                   	push   esi
c000cdc5:	53                   	push   ebx
c000cdc6:	b8 0b 00 00 00       	mov    eax,0xb
c000cdcb:	51                   	push   ecx
c000cdcc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdd0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cdd4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000cddb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cddf:	80 fa 19             	cmp    dl,0x19
c000cde2:	77 31                	ja     c000ce15 <File::seek(unsigned long long)+0x51>
c000cde4:	8b 14 95 20 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9ae0]
c000cdeb:	85 d2                	test   edx,edx
c000cded:	74 26                	je     c000ce15 <File::seek(unsigned long long)+0x51>
c000cdef:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000cdf5:	85 d2                	test   edx,edx
c000cdf7:	74 1c                	je     c000ce15 <File::seek(unsigned long long)+0x51>
c000cdf9:	b8 05 00 00 00       	mov    eax,0x5
c000cdfe:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ce02:	74 11                	je     c000ce15 <File::seek(unsigned long long)+0x51>
c000ce04:	8b 02                	mov    eax,DWORD PTR [edx]
c000ce06:	53                   	push   ebx
c000ce07:	51                   	push   ecx
c000ce08:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ce0e:	52                   	push   edx
c000ce0f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ce12:	83 c4 10             	add    esp,0x10
c000ce15:	5a                   	pop    edx
c000ce16:	5b                   	pop    ebx
c000ce17:	5e                   	pop    esi
c000ce18:	c3                   	ret    
c000ce19:	90                   	nop

c000ce1a <File::tell(unsigned long long*)>:
c000ce1a:	83 ec 0c             	sub    esp,0xc
c000ce1d:	b8 0b 00 00 00       	mov    eax,0xb
c000ce22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce26:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ce2d:	80 fa 19             	cmp    dl,0x19
c000ce30:	77 34                	ja     c000ce66 <File::tell(unsigned long long*)+0x4c>
c000ce32:	8b 14 95 20 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9ae0]
c000ce39:	85 d2                	test   edx,edx
c000ce3b:	74 29                	je     c000ce66 <File::tell(unsigned long long*)+0x4c>
c000ce3d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ce43:	85 d2                	test   edx,edx
c000ce45:	74 1f                	je     c000ce66 <File::tell(unsigned long long*)+0x4c>
c000ce47:	b8 05 00 00 00       	mov    eax,0x5
c000ce4c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ce50:	74 14                	je     c000ce66 <File::tell(unsigned long long*)+0x4c>
c000ce52:	50                   	push   eax
c000ce53:	8b 02                	mov    eax,DWORD PTR [edx]
c000ce55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce59:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ce5f:	52                   	push   edx
c000ce60:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce63:	83 c4 10             	add    esp,0x10
c000ce66:	83 c4 0c             	add    esp,0xc
c000ce69:	c3                   	ret    

c000ce6a <File::rewind()>:
c000ce6a:	83 ec 10             	sub    esp,0x10
c000ce6d:	6a 00                	push   0x0
c000ce6f:	6a 00                	push   0x0
c000ce71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce75:	e8 4a ff ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c000ce7a:	83 c4 1c             	add    esp,0x1c
c000ce7d:	c3                   	ret    

c000ce7e <File::unlink()>:
c000ce7e:	83 ec 0c             	sub    esp,0xc
c000ce81:	b8 0b 00 00 00       	mov    eax,0xb
c000ce86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ce8a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ce91:	80 f9 19             	cmp    cl,0x19
c000ce94:	77 2f                	ja     c000cec5 <File::unlink()+0x47>
c000ce96:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c000ce9d:	85 c9                	test   ecx,ecx
c000ce9f:	74 24                	je     c000cec5 <File::unlink()+0x47>
c000cea1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cea7:	85 c9                	test   ecx,ecx
c000cea9:	74 1a                	je     c000cec5 <File::unlink()+0x47>
c000ceab:	b8 06 00 00 00       	mov    eax,0x6
c000ceb0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ceb4:	75 0f                	jne    c000cec5 <File::unlink()+0x47>
c000ceb6:	83 c2 0d             	add    edx,0xd
c000ceb9:	50                   	push   eax
c000ceba:	50                   	push   eax
c000cebb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cebd:	52                   	push   edx
c000cebe:	51                   	push   ecx
c000cebf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000cec2:	83 c4 10             	add    esp,0x10
c000cec5:	83 c4 0c             	add    esp,0xc
c000cec8:	c3                   	ret    
c000cec9:	90                   	nop

c000ceca <File::rename(char const*)>:
c000ceca:	83 ec 0c             	sub    esp,0xc
c000cecd:	b8 0b 00 00 00       	mov    eax,0xb
c000ced2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ced6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cedd:	80 f9 19             	cmp    cl,0x19
c000cee0:	77 32                	ja     c000cf14 <File::rename(char const*)+0x4a>
c000cee2:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c000cee9:	85 c9                	test   ecx,ecx
c000ceeb:	74 27                	je     c000cf14 <File::rename(char const*)+0x4a>
c000ceed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cef3:	85 c9                	test   ecx,ecx
c000cef5:	74 1d                	je     c000cf14 <File::rename(char const*)+0x4a>
c000cef7:	b8 06 00 00 00       	mov    eax,0x6
c000cefc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf00:	75 12                	jne    c000cf14 <File::rename(char const*)+0x4a>
c000cf02:	83 c2 0d             	add    edx,0xd
c000cf05:	50                   	push   eax
c000cf06:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cf08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf0c:	52                   	push   edx
c000cf0d:	51                   	push   ecx
c000cf0e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000cf11:	83 c4 10             	add    esp,0x10
c000cf14:	83 c4 0c             	add    esp,0xc
c000cf17:	c3                   	ret    

c000cf18 <File::chfatattr(unsigned char, unsigned char)>:
c000cf18:	57                   	push   edi
c000cf19:	b8 0b 00 00 00       	mov    eax,0xb
c000cf1e:	56                   	push   esi
c000cf1f:	53                   	push   ebx
c000cf20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf28:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cf2f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000cf33:	80 f9 19             	cmp    cl,0x19
c000cf36:	77 37                	ja     c000cf6f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cf38:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c000cf3f:	85 c9                	test   ecx,ecx
c000cf41:	74 2c                	je     c000cf6f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cf43:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cf49:	85 c9                	test   ecx,ecx
c000cf4b:	74 22                	je     c000cf6f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cf4d:	b8 06 00 00 00       	mov    eax,0x6
c000cf52:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf56:	75 17                	jne    c000cf6f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000cf58:	8b 39                	mov    edi,DWORD PTR [ecx]
c000cf5a:	89 f0                	mov    eax,esi
c000cf5c:	83 c2 0d             	add    edx,0xd
c000cf5f:	0f b6 f0             	movzx  esi,al
c000cf62:	0f b6 db             	movzx  ebx,bl
c000cf65:	56                   	push   esi
c000cf66:	53                   	push   ebx
c000cf67:	52                   	push   edx
c000cf68:	51                   	push   ecx
c000cf69:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000cf6c:	83 c4 10             	add    esp,0x10
c000cf6f:	5b                   	pop    ebx
c000cf70:	5e                   	pop    esi
c000cf71:	5f                   	pop    edi
c000cf72:	c3                   	ret    
c000cf73:	90                   	nop

c000cf74 <File::exists()>:
c000cf74:	83 ec 0c             	sub    esp,0xc
c000cf77:	31 c0                	xor    eax,eax
c000cf79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cf7d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cf84:	80 f9 19             	cmp    cl,0x19
c000cf87:	77 24                	ja     c000cfad <File::exists()+0x39>
c000cf89:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c000cf90:	85 c9                	test   ecx,ecx
c000cf92:	74 19                	je     c000cfad <File::exists()+0x39>
c000cf94:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cf9a:	85 c9                	test   ecx,ecx
c000cf9c:	74 0f                	je     c000cfad <File::exists()+0x39>
c000cf9e:	83 c2 0d             	add    edx,0xd
c000cfa1:	50                   	push   eax
c000cfa2:	50                   	push   eax
c000cfa3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cfa5:	52                   	push   edx
c000cfa6:	51                   	push   ecx
c000cfa7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000cfaa:	83 c4 10             	add    esp,0x10
c000cfad:	83 c4 0c             	add    esp,0xc
c000cfb0:	c3                   	ret    
c000cfb1:	90                   	nop

c000cfb2 <File::stat(unsigned long long*, bool*)>:
c000cfb2:	56                   	push   esi
c000cfb3:	53                   	push   ebx
c000cfb4:	50                   	push   eax
c000cfb5:	b8 0b 00 00 00       	mov    eax,0xb
c000cfba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cfbe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cfc2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000cfc9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cfcd:	80 f9 19             	cmp    cl,0x19
c000cfd0:	77 3d                	ja     c000d00f <File::stat(unsigned long long*, bool*)+0x5d>
c000cfd2:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c000cfd9:	85 c9                	test   ecx,ecx
c000cfdb:	74 32                	je     c000d00f <File::stat(unsigned long long*, bool*)+0x5d>
c000cfdd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000cfe3:	85 c9                	test   ecx,ecx
c000cfe5:	74 28                	je     c000d00f <File::stat(unsigned long long*, bool*)+0x5d>
c000cfe7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000cfe9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cfed:	74 13                	je     c000d002 <File::stat(unsigned long long*, bool*)+0x50>
c000cfef:	83 ec 04             	sub    esp,0x4
c000cff2:	56                   	push   esi
c000cff3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000cff9:	51                   	push   ecx
c000cffa:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000cffd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d000:	eb 0a                	jmp    c000d00c <File::stat(unsigned long long*, bool*)+0x5a>
c000d002:	53                   	push   ebx
c000d003:	83 c2 0d             	add    edx,0xd
c000d006:	56                   	push   esi
c000d007:	52                   	push   edx
c000d008:	51                   	push   ecx
c000d009:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d00c:	83 c4 10             	add    esp,0x10
c000d00f:	5a                   	pop    edx
c000d010:	5b                   	pop    ebx
c000d011:	5e                   	pop    esi
c000d012:	c3                   	ret    

c000d013 <Fs::setcwd(Process*, char*)>:
c000d013:	55                   	push   ebp
c000d014:	57                   	push   edi
c000d015:	56                   	push   esi
c000d016:	53                   	push   ebx
c000d017:	81 ec 20 02 00 00    	sub    esp,0x220
c000d01d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d024:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d02a:	57                   	push   edi
c000d02b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d032:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d036:	56                   	push   esi
c000d037:	e8 46 fa ff ff       	call   c000ca82 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d03c:	89 34 24             	mov    DWORD PTR [esp],esi
c000d03f:	e8 80 34 ff ff       	call   c00004c4 <strlen>
c000d044:	83 c4 10             	add    esp,0x10
c000d047:	83 f8 02             	cmp    eax,0x2
c000d04a:	77 15                	ja     c000d061 <Fs::setcwd(Process*, char*)+0x4e>
c000d04c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d051:	83 eb 41             	sub    ebx,0x41
c000d054:	8b 04 9d 20 65 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9ae0]
c000d05b:	85 c0                	test   eax,eax
c000d05d:	75 1c                	jne    c000d07b <Fs::setcwd(Process*, char*)+0x68>
c000d05f:	eb 4c                	jmp    c000d0ad <Fs::setcwd(Process*, char*)+0x9a>
c000d061:	83 ec 0c             	sub    esp,0xc
c000d064:	56                   	push   esi
c000d065:	e8 5a 34 ff ff       	call   c00004c4 <strlen>
c000d06a:	83 c4 10             	add    esp,0x10
c000d06d:	83 f8 03             	cmp    eax,0x3
c000d070:	75 74                	jne    c000d0e6 <Fs::setcwd(Process*, char*)+0xd3>
c000d072:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d077:	75 6d                	jne    c000d0e6 <Fs::setcwd(Process*, char*)+0xd3>
c000d079:	eb d1                	jmp    c000d04c <Fs::setcwd(Process*, char*)+0x39>
c000d07b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d082:	75 29                	jne    c000d0ad <Fs::setcwd(Process*, char*)+0x9a>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	68 20 19 02 c0       	push   0xc0021920
c000d08c:	e8 30 f6 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000d091:	5a                   	pop    edx
c000d092:	ff 34 9d 20 65 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9ae0]
c000d099:	e8 ca 1c 00 00       	call   c000ed68 <LogicalDisk::mount()>
c000d09e:	c7 04 24 1b 34 02 c0 	mov    DWORD PTR [esp],0xc002341b
c000d0a5:	e8 17 f6 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000d0aa:	83 c4 10             	add    esp,0x10
c000d0ad:	b8 03 00 00 00       	mov    eax,0x3
c000d0b2:	83 fb 19             	cmp    ebx,0x19
c000d0b5:	0f 87 c6 00 00 00    	ja     c000d181 <Fs::setcwd(Process*, char*)+0x16e>
c000d0bb:	8b 14 9d 20 65 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9ae0]
c000d0c2:	b8 05 00 00 00       	mov    eax,0x5
c000d0c7:	85 d2                	test   edx,edx
c000d0c9:	0f 84 b2 00 00 00    	je     c000d181 <Fs::setcwd(Process*, char*)+0x16e>
c000d0cf:	b8 06 00 00 00       	mov    eax,0x6
c000d0d4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d0db:	0f 85 92 00 00 00    	jne    c000d173 <Fs::setcwd(Process*, char*)+0x160>
c000d0e1:	e9 9b 00 00 00       	jmp    c000d181 <Fs::setcwd(Process*, char*)+0x16e>
c000d0e6:	83 ec 0c             	sub    esp,0xc
c000d0e9:	68 14 01 00 00       	push   0x114
c000d0ee:	e8 8c c6 ff ff       	call   c000977f <malloc>
c000d0f3:	83 c4 0c             	add    esp,0xc
c000d0f6:	89 c3                	mov    ebx,eax
c000d0f8:	55                   	push   ebp
c000d0f9:	56                   	push   esi
c000d0fa:	50                   	push   eax
c000d0fb:	e8 2c fb ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c000d100:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d105:	83 c4 0c             	add    esp,0xc
c000d108:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d10c:	50                   	push   eax
c000d10d:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d111:	50                   	push   eax
c000d112:	53                   	push   ebx
c000d113:	e8 9a fe ff ff       	call   c000cfb2 <File::stat(unsigned long long*, bool*)>
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	83 f8 02             	cmp    eax,0x2
c000d11e:	74 04                	je     c000d124 <Fs::setcwd(Process*, char*)+0x111>
c000d120:	85 c0                	test   eax,eax
c000d122:	74 1c                	je     c000d140 <Fs::setcwd(Process*, char*)+0x12d>
c000d124:	b8 01 00 00 00       	mov    eax,0x1
c000d129:	85 db                	test   ebx,ebx
c000d12b:	74 54                	je     c000d181 <Fs::setcwd(Process*, char*)+0x16e>
c000d12d:	83 ec 0c             	sub    esp,0xc
c000d130:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d132:	53                   	push   ebx
c000d133:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d136:	83 c4 10             	add    esp,0x10
c000d139:	b8 01 00 00 00       	mov    eax,0x1
c000d13e:	eb 41                	jmp    c000d181 <Fs::setcwd(Process*, char*)+0x16e>
c000d140:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d145:	75 1c                	jne    c000d163 <Fs::setcwd(Process*, char*)+0x150>
c000d147:	b8 02 00 00 00       	mov    eax,0x2
c000d14c:	85 db                	test   ebx,ebx
c000d14e:	74 31                	je     c000d181 <Fs::setcwd(Process*, char*)+0x16e>
c000d150:	83 ec 0c             	sub    esp,0xc
c000d153:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d155:	53                   	push   ebx
c000d156:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	b8 02 00 00 00       	mov    eax,0x2
c000d161:	eb 1e                	jmp    c000d181 <Fs::setcwd(Process*, char*)+0x16e>
c000d163:	85 db                	test   ebx,ebx
c000d165:	74 0c                	je     c000d173 <Fs::setcwd(Process*, char*)+0x160>
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d16c:	53                   	push   ebx
c000d16d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	50                   	push   eax
c000d174:	50                   	push   eax
c000d175:	56                   	push   esi
c000d176:	57                   	push   edi
c000d177:	e8 e8 33 ff ff       	call   c0000564 <strcpy>
c000d17c:	83 c4 10             	add    esp,0x10
c000d17f:	31 c0                	xor    eax,eax
c000d181:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d187:	5b                   	pop    ebx
c000d188:	5e                   	pop    esi
c000d189:	5f                   	pop    edi
c000d18a:	5d                   	pop    ebp
c000d18b:	c3                   	ret    

c000d18c <Directory::Directory(char const*, Process*)>:
c000d18c:	83 ec 0c             	sub    esp,0xc
c000d18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d193:	83 ec 08             	sub    esp,0x8
c000d196:	6a 00                	push   0x0
c000d198:	50                   	push   eax
c000d199:	e8 84 dd ff ff       	call   c000af22 <UnixFile::UnixFile(int)>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	ba 28 1a 02 c0       	mov    edx,0xc0021a28
c000d1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1aa:	89 10                	mov    DWORD PTR [eax],edx
c000d1ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1b0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ba:	83 c0 0d             	add    eax,0xd
c000d1bd:	83 ec 04             	sub    esp,0x4
c000d1c0:	52                   	push   edx
c000d1c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c5:	50                   	push   eax
c000d1c6:	e8 b7 f8 ff ff       	call   c000ca82 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d1cb:	83 c4 10             	add    esp,0x10
c000d1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d1d5:	8d 50 bf             	lea    edx,[eax-0x41]
c000d1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1dc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ee:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d1f4:	0f b6 c0             	movzx  eax,al
c000d1f7:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c000d1fe:	85 c0                	test   eax,eax
c000d200:	74 5e                	je     c000d260 <Directory::Directory(char const*, Process*)+0xd4>
c000d202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d206:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d20c:	0f b6 c0             	movzx  eax,al
c000d20f:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c000d216:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d21c:	85 c0                	test   eax,eax
c000d21e:	75 40                	jne    c000d260 <Directory::Directory(char const*, Process*)+0xd4>
c000d220:	83 ec 0c             	sub    esp,0xc
c000d223:	68 70 19 02 c0       	push   0xc0021970
c000d228:	e8 94 f4 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000d22d:	83 c4 10             	add    esp,0x10
c000d230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d234:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d23a:	0f b6 c0             	movzx  eax,al
c000d23d:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c000d244:	83 ec 0c             	sub    esp,0xc
c000d247:	50                   	push   eax
c000d248:	e8 1b 1b 00 00       	call   c000ed68 <LogicalDisk::mount()>
c000d24d:	83 c4 10             	add    esp,0x10
c000d250:	83 ec 0c             	sub    esp,0xc
c000d253:	68 1b 34 02 c0       	push   0xc002341b
c000d258:	e8 64 f4 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000d25d:	83 c4 10             	add    esp,0x10
c000d260:	90                   	nop
c000d261:	83 c4 0c             	add    esp,0xc
c000d264:	c3                   	ret    
c000d265:	90                   	nop

c000d266 <Directory::open()>:
c000d266:	53                   	push   ebx
c000d267:	b8 0b 00 00 00       	mov    eax,0xb
c000d26c:	83 ec 08             	sub    esp,0x8
c000d26f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d273:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d27a:	80 fa 19             	cmp    dl,0x19
c000d27d:	77 3d                	ja     c000d2bc <Directory::open()+0x56>
c000d27f:	8b 14 95 20 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9ae0]
c000d286:	85 d2                	test   edx,edx
c000d288:	74 32                	je     c000d2bc <Directory::open()+0x56>
c000d28a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d290:	85 d2                	test   edx,edx
c000d292:	74 28                	je     c000d2bc <Directory::open()+0x56>
c000d294:	b8 06 00 00 00       	mov    eax,0x6
c000d299:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d29d:	75 1d                	jne    c000d2bc <Directory::open()+0x56>
c000d29f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d2a5:	50                   	push   eax
c000d2a6:	8b 02                	mov    eax,DWORD PTR [edx]
c000d2a8:	51                   	push   ecx
c000d2a9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d2ac:	51                   	push   ecx
c000d2ad:	52                   	push   edx
c000d2ae:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d2b1:	83 c4 10             	add    esp,0x10
c000d2b4:	85 c0                	test   eax,eax
c000d2b6:	75 04                	jne    c000d2bc <Directory::open()+0x56>
c000d2b8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d2bc:	83 c4 08             	add    esp,0x8
c000d2bf:	5b                   	pop    ebx
c000d2c0:	c3                   	ret    
c000d2c1:	90                   	nop

c000d2c2 <Directory::close()>:
c000d2c2:	53                   	push   ebx
c000d2c3:	b8 0b 00 00 00       	mov    eax,0xb
c000d2c8:	83 ec 08             	sub    esp,0x8
c000d2cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d2cf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d2d6:	80 fa 19             	cmp    dl,0x19
c000d2d9:	77 41                	ja     c000d31c <Directory::close()+0x5a>
c000d2db:	8b 1c 95 20 65 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9ae0]
c000d2e2:	85 db                	test   ebx,ebx
c000d2e4:	74 36                	je     c000d31c <Directory::close()+0x5a>
c000d2e6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d2ed:	74 2d                	je     c000d31c <Directory::close()+0x5a>
c000d2ef:	b8 05 00 00 00       	mov    eax,0x5
c000d2f4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d2f8:	74 22                	je     c000d31c <Directory::close()+0x5a>
c000d2fa:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d2fe:	8b 04 95 20 65 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9ae0]
c000d305:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d30b:	53                   	push   ebx
c000d30c:	53                   	push   ebx
c000d30d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d30f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d315:	50                   	push   eax
c000d316:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	83 c4 08             	add    esp,0x8
c000d31f:	5b                   	pop    ebx
c000d320:	c3                   	ret    
c000d321:	90                   	nop

c000d322 <Directory::unlink()>:
c000d322:	83 ec 0c             	sub    esp,0xc
c000d325:	b8 0b 00 00 00       	mov    eax,0xb
c000d32a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d32e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d335:	80 f9 19             	cmp    cl,0x19
c000d338:	77 2f                	ja     c000d369 <Directory::unlink()+0x47>
c000d33a:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c000d341:	85 c9                	test   ecx,ecx
c000d343:	74 24                	je     c000d369 <Directory::unlink()+0x47>
c000d345:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d34b:	85 c9                	test   ecx,ecx
c000d34d:	74 1a                	je     c000d369 <Directory::unlink()+0x47>
c000d34f:	b8 06 00 00 00       	mov    eax,0x6
c000d354:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d358:	75 0f                	jne    c000d369 <Directory::unlink()+0x47>
c000d35a:	83 c2 0d             	add    edx,0xd
c000d35d:	50                   	push   eax
c000d35e:	50                   	push   eax
c000d35f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d361:	52                   	push   edx
c000d362:	51                   	push   ecx
c000d363:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d366:	83 c4 10             	add    esp,0x10
c000d369:	83 c4 0c             	add    esp,0xc
c000d36c:	c3                   	ret    
c000d36d:	90                   	nop

c000d36e <Directory::rename(char const*)>:
c000d36e:	83 ec 0c             	sub    esp,0xc
c000d371:	b8 0b 00 00 00       	mov    eax,0xb
c000d376:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d37a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d381:	80 f9 19             	cmp    cl,0x19
c000d384:	77 32                	ja     c000d3b8 <Directory::rename(char const*)+0x4a>
c000d386:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c000d38d:	85 c9                	test   ecx,ecx
c000d38f:	74 27                	je     c000d3b8 <Directory::rename(char const*)+0x4a>
c000d391:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d397:	85 c9                	test   ecx,ecx
c000d399:	74 1d                	je     c000d3b8 <Directory::rename(char const*)+0x4a>
c000d39b:	b8 06 00 00 00       	mov    eax,0x6
c000d3a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d3a4:	75 12                	jne    c000d3b8 <Directory::rename(char const*)+0x4a>
c000d3a6:	83 c2 0d             	add    edx,0xd
c000d3a9:	50                   	push   eax
c000d3aa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d3ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3b0:	52                   	push   edx
c000d3b1:	51                   	push   ecx
c000d3b2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d3b5:	83 c4 10             	add    esp,0x10
c000d3b8:	83 c4 0c             	add    esp,0xc
c000d3bb:	c3                   	ret    

c000d3bc <Directory::exists()>:
c000d3bc:	83 ec 0c             	sub    esp,0xc
c000d3bf:	31 c0                	xor    eax,eax
c000d3c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3c5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d3cc:	80 f9 19             	cmp    cl,0x19
c000d3cf:	77 24                	ja     c000d3f5 <Directory::exists()+0x39>
c000d3d1:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c000d3d8:	85 c9                	test   ecx,ecx
c000d3da:	74 19                	je     c000d3f5 <Directory::exists()+0x39>
c000d3dc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d3e2:	85 c9                	test   ecx,ecx
c000d3e4:	74 0f                	je     c000d3f5 <Directory::exists()+0x39>
c000d3e6:	83 c2 0d             	add    edx,0xd
c000d3e9:	50                   	push   eax
c000d3ea:	50                   	push   eax
c000d3eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d3ed:	52                   	push   edx
c000d3ee:	51                   	push   ecx
c000d3ef:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d3f2:	83 c4 10             	add    esp,0x10
c000d3f5:	83 c4 0c             	add    esp,0xc
c000d3f8:	c3                   	ret    
c000d3f9:	90                   	nop

c000d3fa <Directory::read(dirent*)>:
c000d3fa:	83 ec 1c             	sub    esp,0x1c
c000d3fd:	b8 0b 00 00 00       	mov    eax,0xb
c000d402:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d406:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d40d:	80 fa 19             	cmp    dl,0x19
c000d410:	77 30                	ja     c000d442 <Directory::read(dirent*)+0x48>
c000d412:	8b 14 95 20 65 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9ae0]
c000d419:	85 d2                	test   edx,edx
c000d41b:	74 25                	je     c000d442 <Directory::read(dirent*)+0x48>
c000d41d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d424:	74 1c                	je     c000d442 <Directory::read(dirent*)+0x48>
c000d426:	83 ec 0c             	sub    esp,0xc
c000d429:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d42b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d42f:	52                   	push   edx
c000d430:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d434:	6a 00                	push   0x0
c000d436:	68 10 01 00 00       	push   0x110
c000d43b:	51                   	push   ecx
c000d43c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d43f:	83 c4 20             	add    esp,0x20
c000d442:	83 c4 1c             	add    esp,0x1c
c000d445:	c3                   	ret    

c000d446 <Directory::create()>:
c000d446:	83 ec 0c             	sub    esp,0xc
c000d449:	b8 0b 00 00 00       	mov    eax,0xb
c000d44e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d452:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d459:	80 f9 19             	cmp    cl,0x19
c000d45c:	77 2f                	ja     c000d48d <Directory::create()+0x47>
c000d45e:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c000d465:	85 c9                	test   ecx,ecx
c000d467:	74 24                	je     c000d48d <Directory::create()+0x47>
c000d469:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d46f:	85 c9                	test   ecx,ecx
c000d471:	74 1a                	je     c000d48d <Directory::create()+0x47>
c000d473:	b8 06 00 00 00       	mov    eax,0x6
c000d478:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d47c:	75 0f                	jne    c000d48d <Directory::create()+0x47>
c000d47e:	83 c2 0d             	add    edx,0xd
c000d481:	50                   	push   eax
c000d482:	50                   	push   eax
c000d483:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d485:	52                   	push   edx
c000d486:	51                   	push   ecx
c000d487:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	83 c4 0c             	add    esp,0xc
c000d490:	c3                   	ret    
c000d491:	90                   	nop

c000d492 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d492:	b8 0a 00 00 00       	mov    eax,0xa
c000d497:	c3                   	ret    

c000d498 <Bus::Bus(char const*)>:
c000d498:	83 ec 0c             	sub    esp,0xc
c000d49b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d49f:	83 ec 08             	sub    esp,0x8
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	50                   	push   eax
c000d4a7:	e8 96 08 00 00       	call   c000dd42 <Device::Device(char const*)>
c000d4ac:	83 c4 10             	add    esp,0x10
c000d4af:	ba 44 1a 02 c0       	mov    edx,0xc0021a44
c000d4b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b8:	89 10                	mov    DWORD PTR [eax],edx
c000d4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4be:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d4c8:	90                   	nop
c000d4c9:	83 c4 0c             	add    esp,0xc
c000d4cc:	c3                   	ret    
c000d4cd:	90                   	nop
c000d4ce:	66 90                	xchg   ax,ax

c000d4d0 <Bus::~Bus()>:
c000d4d0:	83 ec 0c             	sub    esp,0xc
c000d4d3:	ba 44 1a 02 c0       	mov    edx,0xc0021a44
c000d4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4dc:	89 10                	mov    DWORD PTR [eax],edx
c000d4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4e2:	83 ec 0c             	sub    esp,0xc
c000d4e5:	50                   	push   eax
c000d4e6:	e8 55 05 00 00       	call   c000da40 <Device::~Device()>
c000d4eb:	83 c4 10             	add    esp,0x10
c000d4ee:	90                   	nop
c000d4ef:	83 c4 0c             	add    esp,0xc
c000d4f2:	c3                   	ret    
c000d4f3:	90                   	nop

c000d4f4 <Bus::~Bus()>:
c000d4f4:	83 ec 0c             	sub    esp,0xc
c000d4f7:	83 ec 0c             	sub    esp,0xc
c000d4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4fe:	e8 cd ff ff ff       	call   c000d4d0 <Bus::~Bus()>
c000d503:	83 c4 10             	add    esp,0x10
c000d506:	83 ec 08             	sub    esp,0x8
c000d509:	68 58 01 00 00       	push   0x158
c000d50e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d512:	e8 c9 f0 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000d517:	83 c4 10             	add    esp,0x10
c000d51a:	83 c4 0c             	add    esp,0xc
c000d51d:	c3                   	ret    

c000d51e <beepThread(void*)>:
c000d51e:	83 ec 0c             	sub    esp,0xc
c000d521:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000d526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d52a:	48                   	dec    eax
c000d52b:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000d530:	75 01                	jne    c000d533 <beepThread(void*)+0x15>
c000d532:	fb                   	sti    
c000d533:	83 ec 0c             	sub    esp,0xc
c000d536:	6b c2 0a             	imul   eax,edx,0xa
c000d539:	50                   	push   eax
c000d53a:	e8 f1 88 00 00       	call   c0015e30 <milliTenthSleep(unsigned int)>
c000d53f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d546:	e8 35 b5 00 00       	call   c0018a80 <Hal::makeBeep(int)>
c000d54b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d553:	83 c4 1c             	add    esp,0x1c
c000d556:	e9 d5 87 00 00       	jmp    c0015d30 <blockTask(TaskState)>

c000d55b <Krnl::beep(int, int, bool)>:
c000d55b:	56                   	push   esi
c000d55c:	53                   	push   ebx
c000d55d:	83 ec 10             	sub    esp,0x10
c000d560:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d564:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56c:	e8 0f b5 00 00       	call   c0018a80 <Hal::makeBeep(int)>
c000d571:	83 c4 10             	add    esp,0x10
c000d574:	89 f0                	mov    eax,esi
c000d576:	84 c0                	test   al,al
c000d578:	74 1e                	je     c000d598 <Krnl::beep(int, int, bool)+0x3d>
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	6b db 0a             	imul   ebx,ebx,0xa
c000d580:	53                   	push   ebx
c000d581:	e8 aa 88 00 00       	call   c0015e30 <milliTenthSleep(unsigned int)>
c000d586:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d58e:	83 c4 14             	add    esp,0x14
c000d591:	5b                   	pop    ebx
c000d592:	5e                   	pop    esi
c000d593:	e9 e8 b4 00 00       	jmp    c0018a80 <Hal::makeBeep(int)>
c000d598:	68 e6 00 00 00       	push   0xe6
c000d59d:	53                   	push   ebx
c000d59e:	68 1e d5 00 c0       	push   0xc000d51e
c000d5a3:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c000d5a9:	e8 6e 83 00 00       	call   c001591c <Process::createThread(void (*)(void*), void*, int)>
c000d5ae:	83 c4 14             	add    esp,0x14
c000d5b1:	5b                   	pop    ebx
c000d5b2:	5e                   	pop    esi
c000d5b3:	c3                   	ret    

c000d5b4 <User::loadClockSettings(int)>:
c000d5b4:	53                   	push   ebx
c000d5b5:	83 ec 14             	sub    esp,0x14
c000d5b8:	68 14 01 00 00       	push   0x114
c000d5bd:	e8 bd c1 ff ff       	call   c000977f <malloc>
c000d5c2:	83 c4 0c             	add    esp,0xc
c000d5c5:	89 c3                	mov    ebx,eax
c000d5c7:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c000d5cd:	68 68 1a 02 c0       	push   0xc0021a68
c000d5d2:	50                   	push   eax
c000d5d3:	e8 54 f6 ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c000d5d8:	58                   	pop    eax
c000d5d9:	5a                   	pop    edx
c000d5da:	6a 01                	push   0x1
c000d5dc:	53                   	push   ebx
c000d5dd:	e8 24 f7 ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c000d5e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d5e5:	e8 7a f7 ff ff       	call   c000cd64 <File::close()>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	85 db                	test   ebx,ebx
c000d5ef:	74 0f                	je     c000d600 <User::loadClockSettings(int)+0x4c>
c000d5f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d5f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d5fa:	83 c4 08             	add    esp,0x8
c000d5fd:	5b                   	pop    ebx
c000d5fe:	ff e0                	jmp    eax
c000d600:	83 c4 08             	add    esp,0x8
c000d603:	5b                   	pop    ebx
c000d604:	c3                   	ret    
c000d605:	90                   	nop

c000d606 <Clock::Clock(char const*)>:
c000d606:	83 ec 0c             	sub    esp,0xc
c000d609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60d:	83 ec 08             	sub    esp,0x8
c000d610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d614:	50                   	push   eax
c000d615:	e8 28 07 00 00       	call   c000dd42 <Device::Device(char const*)>
c000d61a:	83 c4 10             	add    esp,0x10
c000d61d:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000d622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d626:	89 10                	mov    DWORD PTR [eax],edx
c000d628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d62c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d636:	90                   	nop
c000d637:	83 c4 0c             	add    esp,0xc
c000d63a:	c3                   	ret    
c000d63b:	90                   	nop

c000d63c <Clock::~Clock()>:
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000d644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d648:	89 10                	mov    DWORD PTR [eax],edx
c000d64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d64e:	83 ec 0c             	sub    esp,0xc
c000d651:	50                   	push   eax
c000d652:	e8 e9 03 00 00       	call   c000da40 <Device::~Device()>
c000d657:	83 c4 10             	add    esp,0x10
c000d65a:	90                   	nop
c000d65b:	83 c4 0c             	add    esp,0xc
c000d65e:	c3                   	ret    
c000d65f:	90                   	nop

c000d660 <Clock::~Clock()>:
c000d660:	83 ec 0c             	sub    esp,0xc
c000d663:	83 ec 0c             	sub    esp,0xc
c000d666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d66a:	e8 cd ff ff ff       	call   c000d63c <Clock::~Clock()>
c000d66f:	83 c4 10             	add    esp,0x10
c000d672:	83 ec 08             	sub    esp,0x8
c000d675:	68 58 01 00 00       	push   0x158
c000d67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67e:	e8 5d ef ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000d683:	83 c4 10             	add    esp,0x10
c000d686:	83 c4 0c             	add    esp,0xc
c000d689:	c3                   	ret    

c000d68a <Clock::timeInSecondsLocal()>:
c000d68a:	53                   	push   ebx
c000d68b:	83 ec 14             	sub    esp,0x14
c000d68e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d692:	8b 10                	mov    edx,DWORD PTR [eax]
c000d694:	50                   	push   eax
c000d695:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d698:	0f b6 0d 9c 40 02 c0 	movzx  ecx,BYTE PTR ds:0xc002409c
c000d69f:	03 0d a0 40 02 c0    	add    ecx,DWORD PTR ds:0xc00240a0
c000d6a5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d6ab:	89 cb                	mov    ebx,ecx
c000d6ad:	c1 fb 1f             	sar    ebx,0x1f
c000d6b0:	01 c8                	add    eax,ecx
c000d6b2:	11 da                	adc    edx,ebx
c000d6b4:	83 c4 10             	add    esp,0x10
c000d6b7:	31 c9                	xor    ecx,ecx
c000d6b9:	80 3d 9d 40 02 c0 00 	cmp    BYTE PTR ds:0xc002409d,0x0
c000d6c0:	74 05                	je     c000d6c7 <Clock::timeInSecondsLocal()+0x3d>
c000d6c2:	b9 08 07 00 00       	mov    ecx,0x708
c000d6c7:	31 db                	xor    ebx,ebx
c000d6c9:	01 c8                	add    eax,ecx
c000d6cb:	11 da                	adc    edx,ebx
c000d6cd:	83 c4 08             	add    esp,0x8
c000d6d0:	5b                   	pop    ebx
c000d6d1:	c3                   	ret    

c000d6d2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000d6d2:	57                   	push   edi
c000d6d3:	56                   	push   esi
c000d6d4:	53                   	push   ebx
c000d6d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d6d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d6dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d6e3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000d6e6:	0f b6 05 9c 40 02 c0 	movzx  eax,BYTE PTR ds:0xc002409c
c000d6ed:	03 05 a0 40 02 c0    	add    eax,DWORD PTR ds:0xc00240a0
c000d6f3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000d6f9:	99                   	cdq    
c000d6fa:	29 c6                	sub    esi,eax
c000d6fc:	19 d7                	sbb    edi,edx
c000d6fe:	89 f0                	mov    eax,esi
c000d700:	89 fa                	mov    edx,edi
c000d702:	31 f6                	xor    esi,esi
c000d704:	80 3d 9d 40 02 c0 00 	cmp    BYTE PTR ds:0xc002409d,0x0
c000d70b:	74 05                	je     c000d712 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000d70d:	be 08 07 00 00       	mov    esi,0x708
c000d712:	31 ff                	xor    edi,edi
c000d714:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000d718:	29 f0                	sub    eax,esi
c000d71a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d71e:	19 fa                	sbb    edx,edi
c000d720:	89 d8                	mov    eax,ebx
c000d722:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d726:	5b                   	pop    ebx
c000d727:	5e                   	pop    esi
c000d728:	5f                   	pop    edi
c000d729:	ff e0                	jmp    eax

c000d72b <datetimeToSeconds(datetime_t)>:
c000d72b:	55                   	push   ebp
c000d72c:	57                   	push   edi
c000d72d:	56                   	push   esi
c000d72e:	53                   	push   ebx
c000d72f:	83 ec 14             	sub    esp,0x14
c000d732:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d736:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d73a:	89 d3                	mov    ebx,edx
c000d73c:	0f b6 c6             	movzx  eax,dh
c000d73f:	c1 eb 10             	shr    ebx,0x10
c000d742:	48                   	dec    eax
c000d743:	66 81 eb 6c 07       	sub    bx,0x76c
c000d748:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d74c:	0f b6 f5             	movzx  esi,ch
c000d74f:	89 cf                	mov    edi,ecx
c000d751:	6b f6 3c             	imul   esi,esi,0x3c
c000d754:	c1 ef 10             	shr    edi,0x10
c000d757:	0f b6 c9             	movzx  ecx,cl
c000d75a:	89 f8                	mov    eax,edi
c000d75c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d762:	0f b6 f8             	movzx  edi,al
c000d765:	0f b6 d2             	movzx  edx,dl
c000d768:	01 fe                	add    esi,edi
c000d76a:	01 f1                	add    ecx,esi
c000d76c:	0f b7 f3             	movzx  esi,bx
c000d76f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d773:	c1 f9 1f             	sar    ecx,0x1f
c000d776:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000d77b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d77f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000d784:	8b 0c 8d e0 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde520]
c000d78b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000d78f:	76 29                	jbe    c000d7ba <datetimeToSeconds(datetime_t)+0x8f>
c000d791:	f6 c3 03             	test   bl,0x3
c000d794:	75 24                	jne    c000d7ba <datetimeToSeconds(datetime_t)+0x8f>
c000d796:	31 d2                	xor    edx,edx
c000d798:	bf 64 00 00 00       	mov    edi,0x64
c000d79d:	89 d8                	mov    eax,ebx
c000d79f:	66 f7 f7             	div    di
c000d7a2:	66 85 d2             	test   dx,dx
c000d7a5:	75 12                	jne    c000d7b9 <datetimeToSeconds(datetime_t)+0x8e>
c000d7a7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000d7ad:	bf 90 01 00 00       	mov    edi,0x190
c000d7b2:	99                   	cdq    
c000d7b3:	f7 ff                	idiv   edi
c000d7b5:	85 d2                	test   edx,edx
c000d7b7:	75 01                	jne    c000d7ba <datetimeToSeconds(datetime_t)+0x8f>
c000d7b9:	41                   	inc    ecx
c000d7ba:	66 83 fb 46          	cmp    bx,0x46
c000d7be:	76 45                	jbe    c000d805 <datetimeToSeconds(datetime_t)+0xda>
c000d7c0:	bb 46 00 00 00       	mov    ebx,0x46
c000d7c5:	bf 64 00 00 00       	mov    edi,0x64
c000d7ca:	bd 90 01 00 00       	mov    ebp,0x190
c000d7cf:	b8 6d 01 00 00       	mov    eax,0x16d
c000d7d4:	f6 c3 03             	test   bl,0x3
c000d7d7:	75 23                	jne    c000d7fc <datetimeToSeconds(datetime_t)+0xd1>
c000d7d9:	89 d8                	mov    eax,ebx
c000d7db:	99                   	cdq    
c000d7dc:	f7 ff                	idiv   edi
c000d7de:	b8 6e 01 00 00       	mov    eax,0x16e
c000d7e3:	85 d2                	test   edx,edx
c000d7e5:	75 15                	jne    c000d7fc <datetimeToSeconds(datetime_t)+0xd1>
c000d7e7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000d7ed:	99                   	cdq    
c000d7ee:	f7 fd                	idiv   ebp
c000d7f0:	83 fa 01             	cmp    edx,0x1
c000d7f3:	19 c0                	sbb    eax,eax
c000d7f5:	f7 d0                	not    eax
c000d7f7:	05 6e 01 00 00       	add    eax,0x16e
c000d7fc:	01 c1                	add    ecx,eax
c000d7fe:	43                   	inc    ebx
c000d7ff:	39 f3                	cmp    ebx,esi
c000d801:	7c cc                	jl     c000d7cf <datetimeToSeconds(datetime_t)+0xa4>
c000d803:	eb 35                	jmp    c000d83a <datetimeToSeconds(datetime_t)+0x10f>
c000d805:	74 33                	je     c000d83a <datetimeToSeconds(datetime_t)+0x10f>
c000d807:	b8 45 00 00 00       	mov    eax,0x45
c000d80c:	89 c2                	mov    edx,eax
c000d80e:	83 e2 03             	and    edx,0x3
c000d811:	39 f0                	cmp    eax,esi
c000d813:	7e 0f                	jle    c000d824 <datetimeToSeconds(datetime_t)+0xf9>
c000d815:	83 fa 01             	cmp    edx,0x1
c000d818:	19 d2                	sbb    edx,edx
c000d81a:	48                   	dec    eax
c000d81b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000d822:	eb e8                	jmp    c000d80c <datetimeToSeconds(datetime_t)+0xe1>
c000d824:	b8 6d 01 00 00       	mov    eax,0x16d
c000d829:	85 d2                	test   edx,edx
c000d82b:	75 0b                	jne    c000d838 <datetimeToSeconds(datetime_t)+0x10d>
c000d82d:	66 83 fb 01          	cmp    bx,0x1
c000d831:	19 c0                	sbb    eax,eax
c000d833:	05 6e 01 00 00       	add    eax,0x16e
c000d838:	29 c1                	sub    ecx,eax
c000d83a:	b8 80 51 01 00       	mov    eax,0x15180
c000d83f:	f7 e9                	imul   ecx
c000d841:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000d845:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000d849:	83 c4 14             	add    esp,0x14
c000d84c:	5b                   	pop    ebx
c000d84d:	5e                   	pop    esi
c000d84e:	5f                   	pop    edi
c000d84f:	5d                   	pop    ebp
c000d850:	c3                   	ret    
c000d851:	90                   	nop

c000d852 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000d852:	57                   	push   edi
c000d853:	56                   	push   esi
c000d854:	53                   	push   ebx
c000d855:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d859:	8b 06                	mov    eax,DWORD PTR [esi]
c000d85b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000d85e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d862:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d866:	e8 c0 fe ff ff       	call   c000d72b <datetimeToSeconds(datetime_t)>
c000d86b:	59                   	pop    ecx
c000d86c:	0f b6 0d 9c 40 02 c0 	movzx  ecx,BYTE PTR ds:0xc002409c
c000d873:	5b                   	pop    ebx
c000d874:	03 0d a0 40 02 c0    	add    ecx,DWORD PTR ds:0xc00240a0
c000d87a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d880:	89 cb                	mov    ebx,ecx
c000d882:	c1 fb 1f             	sar    ebx,0x1f
c000d885:	29 c8                	sub    eax,ecx
c000d887:	19 da                	sbb    edx,ebx
c000d889:	31 c9                	xor    ecx,ecx
c000d88b:	80 3d 9d 40 02 c0 00 	cmp    BYTE PTR ds:0xc002409d,0x0
c000d892:	74 05                	je     c000d899 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000d894:	b9 08 07 00 00       	mov    ecx,0x708
c000d899:	31 db                	xor    ebx,ebx
c000d89b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d89f:	29 c8                	sub    eax,ecx
c000d8a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d8a5:	19 da                	sbb    edx,ebx
c000d8a7:	89 f8                	mov    eax,edi
c000d8a9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d8ad:	5b                   	pop    ebx
c000d8ae:	5e                   	pop    esi
c000d8af:	5f                   	pop    edi
c000d8b0:	ff e0                	jmp    eax

c000d8b2 <secondsToDatetime(unsigned long long)>:
c000d8b2:	55                   	push   ebp
c000d8b3:	57                   	push   edi
c000d8b4:	56                   	push   esi
c000d8b5:	53                   	push   ebx
c000d8b6:	83 ec 1c             	sub    esp,0x1c
c000d8b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d8c1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d8c5:	6a 00                	push   0x0
c000d8c7:	68 80 51 01 00       	push   0x15180
c000d8cc:	55                   	push   ebp
c000d8cd:	57                   	push   edi
c000d8ce:	e8 cd 21 01 00       	call   c001faa0 <__udivdi3>
c000d8d3:	83 c4 10             	add    esp,0x10
c000d8d6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000d8dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8e0:	6a 00                	push   0x0
c000d8e2:	68 80 51 01 00       	push   0x15180
c000d8e7:	55                   	push   ebp
c000d8e8:	57                   	push   edi
c000d8e9:	bf 10 0e 00 00       	mov    edi,0xe10
c000d8ee:	e8 ad 22 01 00       	call   c001fba0 <__umoddi3>
c000d8f3:	83 c4 10             	add    esp,0x10
c000d8f6:	99                   	cdq    
c000d8f7:	f7 ff                	idiv   edi
c000d8f9:	bf 3c 00 00 00       	mov    edi,0x3c
c000d8fe:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000d901:	89 d0                	mov    eax,edx
c000d903:	99                   	cdq    
c000d904:	f7 ff                	idiv   edi
c000d906:	85 db                	test   ebx,ebx
c000d908:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000d90b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000d90e:	79 11                	jns    c000d921 <secondsToDatetime(unsigned long long)+0x6f>
c000d910:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d914:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000d91a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d91f:	eb 07                	jmp    c000d928 <secondsToDatetime(unsigned long long)+0x76>
c000d921:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000d926:	89 d8                	mov    eax,ebx
c000d928:	bf b4 05 00 00       	mov    edi,0x5b4
c000d92d:	99                   	cdq    
c000d92e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000d933:	f7 f9                	idiv   ecx
c000d935:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000d93a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d93e:	31 d2                	xor    edx,edx
c000d940:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000d948:	01 c3                	add    ebx,eax
c000d94a:	89 d8                	mov    eax,ebx
c000d94c:	f7 f1                	div    ecx
c000d94e:	31 d2                	xor    edx,edx
c000d950:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000d953:	89 d8                	mov    eax,ebx
c000d955:	f7 f7                	div    edi
c000d957:	31 d2                	xor    edx,edx
c000d959:	29 c1                	sub    ecx,eax
c000d95b:	89 d8                	mov    eax,ebx
c000d95d:	f7 f5                	div    ebp
c000d95f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000d964:	29 c1                	sub    ecx,eax
c000d966:	31 d2                	xor    edx,edx
c000d968:	89 c8                	mov    eax,ecx
c000d96a:	f7 f5                	div    ebp
c000d96c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000d971:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d975:	31 d2                	xor    edx,edx
c000d977:	89 c8                	mov    eax,ecx
c000d979:	f7 f5                	div    ebp
c000d97b:	31 d2                	xor    edx,edx
c000d97d:	01 c3                	add    ebx,eax
c000d97f:	89 c8                	mov    eax,ecx
c000d981:	f7 f7                	div    edi
c000d983:	bf 99 00 00 00       	mov    edi,0x99
c000d988:	29 c3                	sub    ebx,eax
c000d98a:	31 d2                	xor    edx,edx
c000d98c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000d994:	29 c3                	sub    ebx,eax
c000d996:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d999:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d99c:	bb 05 00 00 00       	mov    ebx,0x5
c000d9a1:	83 c1 02             	add    ecx,0x2
c000d9a4:	89 c8                	mov    eax,ecx
c000d9a6:	f7 f7                	div    edi
c000d9a8:	31 d2                	xor    edx,edx
c000d9aa:	89 c7                	mov    edi,eax
c000d9ac:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000d9b2:	83 c0 02             	add    eax,0x2
c000d9b5:	f7 f3                	div    ebx
c000d9b7:	89 eb                	mov    ebx,ebp
c000d9b9:	29 c3                	sub    ebx,eax
c000d9bb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000d9c1:	88 1e                	mov    BYTE PTR [esi],bl
c000d9c3:	19 c0                	sbb    eax,eax
c000d9c5:	31 d2                	xor    edx,edx
c000d9c7:	83 e0 0c             	and    eax,0xc
c000d9ca:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000d9ce:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000d9d6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000d9da:	83 f9 01             	cmp    ecx,0x1
c000d9dd:	0f 96 c2             	setbe  dl
c000d9e0:	41                   	inc    ecx
c000d9e1:	01 d0                	add    eax,edx
c000d9e3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000d9e6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000d9ea:	83 c4 1c             	add    esp,0x1c
c000d9ed:	89 f0                	mov    eax,esi
c000d9ef:	5b                   	pop    ebx
c000d9f0:	5e                   	pop    esi
c000d9f1:	5f                   	pop    edi
c000d9f2:	5d                   	pop    ebp
c000d9f3:	c2 04 00             	ret    0x4

c000d9f6 <Clock::timeInDatetimeLocal()>:
c000d9f6:	53                   	push   ebx
c000d9f7:	83 ec 14             	sub    esp,0x14
c000d9fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d9fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da02:	e8 83 fc ff ff       	call   c000d68a <Clock::timeInSecondsLocal()>
c000da07:	83 c4 0c             	add    esp,0xc
c000da0a:	52                   	push   edx
c000da0b:	50                   	push   eax
c000da0c:	53                   	push   ebx
c000da0d:	e8 a0 fe ff ff       	call   c000d8b2 <secondsToDatetime(unsigned long long)>
c000da12:	89 d8                	mov    eax,ebx
c000da14:	83 c4 14             	add    esp,0x14
c000da17:	5b                   	pop    ebx
c000da18:	c2 04 00             	ret    0x4
c000da1b:	90                   	nop

c000da1c <Device::hibernate()>:
c000da1c:	c3                   	ret    
c000da1d:	90                   	nop

c000da1e <Device::wake()>:
c000da1e:	c3                   	ret    
c000da1f:	90                   	nop

c000da20 <Device::detect()>:
c000da20:	c3                   	ret    
c000da21:	90                   	nop

c000da22 <Device::disableLegacy()>:
c000da22:	c3                   	ret    
c000da23:	90                   	nop

c000da24 <Device::powerSaving(PowerSavingLevel)>:
c000da24:	c3                   	ret    
c000da25:	90                   	nop

c000da26 <DriverlessDevice::close(int, int, void*)>:
c000da26:	31 c0                	xor    eax,eax
c000da28:	c3                   	ret    
c000da29:	90                   	nop

c000da2a <DriverlessDevice::detect()>:
c000da2a:	c3                   	ret    
c000da2b:	90                   	nop

c000da2c <DriverlessDevice::open(int, int, void*)>:
c000da2c:	83 ec 18             	sub    esp,0x18
c000da2f:	68 10 1b 02 c0       	push   0xc0021b10
c000da34:	e8 ca 4b 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000da39:	83 c8 ff             	or     eax,0xffffffff
c000da3c:	83 c4 1c             	add    esp,0x1c
c000da3f:	c3                   	ret    

c000da40 <Device::~Device()>:
c000da40:	ba 70 1b 02 c0       	mov    edx,0xc0021b70
c000da45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da49:	89 10                	mov    DWORD PTR [eax],edx
c000da4b:	90                   	nop
c000da4c:	c3                   	ret    
c000da4d:	90                   	nop

c000da4e <Device::~Device()>:
c000da4e:	83 ec 0c             	sub    esp,0xc
c000da51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da55:	e8 e6 ff ff ff       	call   c000da40 <Device::~Device()>
c000da5a:	83 c4 04             	add    esp,0x4
c000da5d:	83 ec 08             	sub    esp,0x8
c000da60:	68 58 01 00 00       	push   0x158
c000da65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da69:	e8 72 eb ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000da6e:	83 c4 10             	add    esp,0x10
c000da71:	83 c4 0c             	add    esp,0xc
c000da74:	c3                   	ret    
c000da75:	90                   	nop

c000da76 <Device::findAndLoadDriver()>:
c000da76:	c7 44 24 04 2e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b2e
c000da7e:	e9 3e ec ff ff       	jmp    c000c6c1 <Dbg::kprintf(char const*, ...)>
c000da83:	90                   	nop

c000da84 <Device::preOpenPCI(PCIDeviceInfo)>:
c000da84:	57                   	push   edi
c000da85:	b9 09 00 00 00       	mov    ecx,0x9
c000da8a:	56                   	push   esi
c000da8b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000da8f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000da93:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000da9d:	81 c7 18 01 00 00    	add    edi,0x118
c000daa3:	fc                   	cld    
c000daa4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000daa6:	5e                   	pop    esi
c000daa7:	5f                   	pop    edi
c000daa8:	c3                   	ret    
c000daa9:	90                   	nop

c000daaa <Device::preOpenACPI(void*, char*, char*)>:
c000daaa:	57                   	push   edi
c000daab:	b9 1e 00 00 00       	mov    ecx,0x1e
c000dab0:	56                   	push   esi
c000dab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dab5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dab9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000dac3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000dac9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000dacf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dad3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dad5:	b9 0e 00 00 00       	mov    ecx,0xe
c000dada:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000dae0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dae4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dae6:	5e                   	pop    esi
c000dae7:	5f                   	pop    edi
c000dae8:	c3                   	ret    
c000dae9:	90                   	nop

c000daea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000daea:	53                   	push   ebx
c000daeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000daef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000daf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000daf7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dafb:	0f b6 c0             	movzx  eax,al
c000dafe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000db02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db06:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000db0e:	5b                   	pop    ebx
c000db0f:	e9 10 06 00 00       	jmp    c000e124 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000db14 <Device::getParent()>:
c000db14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db18:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000db1e:	c3                   	ret    
c000db1f:	90                   	nop

c000db20 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000db20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db28:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000db2d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000db31:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db39:	e9 45 07 00 00       	jmp    c000e283 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000db3e <Device::addChild(Device*)>:
c000db3e:	53                   	push   ebx
c000db3f:	83 ec 08             	sub    esp,0x8
c000db42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000db4a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000db50:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000db56:	8b 13                	mov    edx,DWORD PTR [ebx]
c000db58:	85 d2                	test   edx,edx
c000db5a:	74 04                	je     c000db60 <Device::addChild(Device*)+0x22>
c000db5c:	89 d3                	mov    ebx,edx
c000db5e:	eb f6                	jmp    c000db56 <Device::addChild(Device*)+0x18>
c000db60:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000db63:	83 ec 0c             	sub    esp,0xc
c000db66:	6a 08                	push   0x8
c000db68:	e8 12 bc ff ff       	call   c000977f <malloc>
c000db6d:	89 03                	mov    DWORD PTR [ebx],eax
c000db6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000db75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db7c:	83 c4 18             	add    esp,0x18
c000db7f:	5b                   	pop    ebx
c000db80:	c3                   	ret    
c000db81:	90                   	nop

c000db82 <Device::removeAllChildren()>:
c000db82:	56                   	push   esi
c000db83:	53                   	push   ebx
c000db84:	52                   	push   edx
c000db85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db89:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000db8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000db92:	74 17                	je     c000dbab <Device::removeAllChildren()+0x29>
c000db94:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db97:	85 c0                	test   eax,eax
c000db99:	74 0c                	je     c000dba7 <Device::removeAllChildren()+0x25>
c000db9b:	83 ec 0c             	sub    esp,0xc
c000db9e:	8b 10                	mov    edx,DWORD PTR [eax]
c000dba0:	50                   	push   eax
c000dba1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dba9:	eb e4                	jmp    c000db8f <Device::removeAllChildren()+0xd>
c000dbab:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dbb1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dbb7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000dbbd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dbc4:	58                   	pop    eax
c000dbc5:	5b                   	pop    ebx
c000dbc6:	5e                   	pop    esi
c000dbc7:	c3                   	ret    

c000dbc8 <Device::hibernateAll()>:
c000dbc8:	53                   	push   ebx
c000dbc9:	83 ec 14             	sub    esp,0x14
c000dbcc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dbd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbd2:	53                   	push   ebx
c000dbd3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dbd6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dbdc:	83 c4 10             	add    esp,0x10
c000dbdf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dbe2:	74 0f                	je     c000dbf3 <Device::hibernateAll()+0x2b>
c000dbe4:	83 ec 0c             	sub    esp,0xc
c000dbe7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbea:	e8 d9 ff ff ff       	call   c000dbc8 <Device::hibernateAll()>
c000dbef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dbf1:	eb e9                	jmp    c000dbdc <Device::hibernateAll()+0x14>
c000dbf3:	83 c4 08             	add    esp,0x8
c000dbf6:	5b                   	pop    ebx
c000dbf7:	c3                   	ret    

c000dbf8 <Device::wakeAll()>:
c000dbf8:	53                   	push   ebx
c000dbf9:	83 ec 14             	sub    esp,0x14
c000dbfc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc00:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc02:	53                   	push   ebx
c000dc03:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000dc06:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc0c:	83 c4 10             	add    esp,0x10
c000dc0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc12:	74 0f                	je     c000dc23 <Device::wakeAll()+0x2b>
c000dc14:	83 ec 0c             	sub    esp,0xc
c000dc17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc1a:	e8 d9 ff ff ff       	call   c000dbf8 <Device::wakeAll()>
c000dc1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc21:	eb e9                	jmp    c000dc0c <Device::wakeAll()+0x14>
c000dc23:	83 c4 08             	add    esp,0x8
c000dc26:	5b                   	pop    ebx
c000dc27:	c3                   	ret    

c000dc28 <Device::detectAll()>:
c000dc28:	53                   	push   ebx
c000dc29:	83 ec 14             	sub    esp,0x14
c000dc2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc30:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc32:	53                   	push   ebx
c000dc33:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dc36:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc3c:	83 c4 10             	add    esp,0x10
c000dc3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc42:	74 0f                	je     c000dc53 <Device::detectAll()+0x2b>
c000dc44:	83 ec 0c             	sub    esp,0xc
c000dc47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc4a:	e8 d9 ff ff ff       	call   c000dc28 <Device::detectAll()>
c000dc4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc51:	eb e9                	jmp    c000dc3c <Device::detectAll()+0x14>
c000dc53:	83 c4 08             	add    esp,0x8
c000dc56:	5b                   	pop    ebx
c000dc57:	c3                   	ret    

c000dc58 <Device::disableLegacyAll()>:
c000dc58:	53                   	push   ebx
c000dc59:	83 ec 14             	sub    esp,0x14
c000dc5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dc60:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc62:	53                   	push   ebx
c000dc63:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dc66:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dc72:	74 0f                	je     c000dc83 <Device::disableLegacyAll()+0x2b>
c000dc74:	83 ec 0c             	sub    esp,0xc
c000dc77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc7a:	e8 d9 ff ff ff       	call   c000dc58 <Device::disableLegacyAll()>
c000dc7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dc81:	eb e9                	jmp    c000dc6c <Device::disableLegacyAll()+0x14>
c000dc83:	83 c4 08             	add    esp,0x8
c000dc86:	5b                   	pop    ebx
c000dc87:	c3                   	ret    

c000dc88 <Device::loadDriversForAll()>:
c000dc88:	53                   	push   ebx
c000dc89:	83 ec 08             	sub    esp,0x8
c000dc8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc90:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000dc97:	75 0c                	jne    c000dca5 <Device::loadDriversForAll()+0x1d>
c000dc99:	83 ec 0c             	sub    esp,0xc
c000dc9c:	53                   	push   ebx
c000dc9d:	e8 d4 fd ff ff       	call   c000da76 <Device::findAndLoadDriver()>
c000dca2:	83 c4 10             	add    esp,0x10
c000dca5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dcab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dcae:	74 12                	je     c000dcc2 <Device::loadDriversForAll()+0x3a>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dcb6:	e8 cd ff ff ff       	call   c000dc88 <Device::loadDriversForAll()>
c000dcbb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dcbd:	83 c4 10             	add    esp,0x10
c000dcc0:	eb e9                	jmp    c000dcab <Device::loadDriversForAll()+0x23>
c000dcc2:	83 c4 08             	add    esp,0x8
c000dcc5:	5b                   	pop    ebx
c000dcc6:	c3                   	ret    
c000dcc7:	90                   	nop

c000dcc8 <Device::closeAll()>:
c000dcc8:	53                   	push   ebx
c000dcc9:	83 ec 08             	sub    esp,0x8
c000dccc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcd2:	6a 00                	push   0x0
c000dcd4:	6a 00                	push   0x0
c000dcd6:	6a 00                	push   0x0
c000dcd8:	53                   	push   ebx
c000dcd9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dcdc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dce2:	83 c4 10             	add    esp,0x10
c000dce5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dce8:	74 0f                	je     c000dcf9 <Device::closeAll()+0x31>
c000dcea:	83 ec 0c             	sub    esp,0xc
c000dced:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dcf0:	e8 d3 ff ff ff       	call   c000dcc8 <Device::closeAll()>
c000dcf5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dcf7:	eb e9                	jmp    c000dce2 <Device::closeAll()+0x1a>
c000dcf9:	83 c4 08             	add    esp,0x8
c000dcfc:	5b                   	pop    ebx
c000dcfd:	c3                   	ret    

c000dcfe <Device::powerSavingAll(PowerSavingLevel)>:
c000dcfe:	56                   	push   esi
c000dcff:	53                   	push   ebx
c000dd00:	83 ec 0c             	sub    esp,0xc
c000dd03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000dd0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd0d:	56                   	push   esi
c000dd0e:	53                   	push   ebx
c000dd0f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000dd12:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dd18:	83 c4 10             	add    esp,0x10
c000dd1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dd1e:	74 0f                	je     c000dd2f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000dd20:	52                   	push   edx
c000dd21:	52                   	push   edx
c000dd22:	56                   	push   esi
c000dd23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dd26:	e8 d3 ff ff ff       	call   c000dcfe <Device::powerSavingAll(PowerSavingLevel)>
c000dd2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dd2d:	eb e9                	jmp    c000dd18 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000dd2f:	58                   	pop    eax
c000dd30:	5b                   	pop    ebx
c000dd31:	5e                   	pop    esi
c000dd32:	c3                   	ret    
c000dd33:	90                   	nop

c000dd34 <Device::setName(char const*)>:
c000dd34:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000dd3c:	e9 23 28 ff ff       	jmp    c0000564 <strcpy>
c000dd41:	90                   	nop

c000dd42 <Device::Device(char const*)>:
c000dd42:	83 ec 1c             	sub    esp,0x1c
c000dd45:	ba 70 1b 02 c0       	mov    edx,0xc0021b70
c000dd4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd4e:	89 10                	mov    DWORD PTR [eax],edx
c000dd50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd54:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000dd5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd62:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000dd6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd70:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000dd7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd7e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000dd88:	83 ec 08             	sub    esp,0x8
c000dd8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd93:	e8 9c ff ff ff       	call   c000dd34 <Device::setName(char const*)>
c000dd98:	83 c4 10             	add    esp,0x10
c000dd9b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000dda3:	83 ec 0c             	sub    esp,0xc
c000dda6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddaa:	e8 d0 b9 ff ff       	call   c000977f <malloc>
c000ddaf:	83 c4 10             	add    esp,0x10
c000ddb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ddb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ddbf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddc3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000ddc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddcd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000ddd3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ddd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000dde3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ddea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddee:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000ddf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000de00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de04:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000de0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de12:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000de1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de20:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000de2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000de38:	90                   	nop
c000de39:	83 c4 1c             	add    esp,0x1c
c000de3c:	c3                   	ret    
c000de3d:	90                   	nop

c000de3e <Device::getName()>:
c000de3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de42:	05 d0 00 00 00       	add    eax,0xd0
c000de47:	c3                   	ret    

c000de48 <DriverlessDevice::DriverlessDevice(char const*)>:
c000de48:	83 ec 0c             	sub    esp,0xc
c000de4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de4f:	83 ec 08             	sub    esp,0x8
c000de52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de56:	50                   	push   eax
c000de57:	e8 e6 fe ff ff       	call   c000dd42 <Device::Device(char const*)>
c000de5c:	83 c4 10             	add    esp,0x10
c000de5f:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c000de64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de68:	89 10                	mov    DWORD PTR [eax],edx
c000de6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de6e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000de78:	90                   	nop
c000de79:	83 c4 0c             	add    esp,0xc
c000de7c:	c3                   	ret    
c000de7d:	90                   	nop

c000de7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000de7e:	57                   	push   edi
c000de7f:	56                   	push   esi
c000de80:	53                   	push   ebx
c000de81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000de85:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000de89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de8d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000de93:	75 0c                	jne    c000dea1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000de95:	52                   	push   edx
c000de96:	52                   	push   edx
c000de97:	53                   	push   ebx
c000de98:	56                   	push   esi
c000de99:	e8 b4 20 01 00       	call   c001ff52 <LinkedList<Device>::addElement(Device*)>
c000de9e:	83 c4 10             	add    esp,0x10
c000dea1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dea7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000deaa:	74 12                	je     c000debe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000deac:	50                   	push   eax
c000dead:	57                   	push   edi
c000deae:	56                   	push   esi
c000deaf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000deb2:	e8 c7 ff ff ff       	call   c000de7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000deb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000deb9:	83 c4 10             	add    esp,0x10
c000debc:	eb e9                	jmp    c000dea7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000debe:	5b                   	pop    ebx
c000debf:	5e                   	pop    esi
c000dec0:	5f                   	pop    edi
c000dec1:	c3                   	ret    

c000dec2 <getDevicesOfType(DeviceType)>:
c000dec2:	53                   	push   ebx
c000dec3:	83 ec 14             	sub    esp,0x14
c000dec6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000deca:	53                   	push   ebx
c000decb:	e8 5e 21 01 00       	call   c002002e <LinkedList<Device>::LinkedList()>
c000ded0:	83 c4 0c             	add    esp,0xc
c000ded3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ded7:	53                   	push   ebx
c000ded8:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c000dede:	e8 9b ff ff ff       	call   c000de7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000dee3:	89 d8                	mov    eax,ebx
c000dee5:	83 c4 18             	add    esp,0x18
c000dee8:	5b                   	pop    ebx
c000dee9:	c2 04 00             	ret    0x4

c000deec <HardDiskController::HardDiskController(char const*)>:
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def3:	83 ec 08             	sub    esp,0x8
c000def6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defa:	50                   	push   eax
c000defb:	e8 42 fe ff ff       	call   c000dd42 <Device::Device(char const*)>
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	ba c8 1b 02 c0       	mov    edx,0xc0021bc8
c000df08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df0c:	89 10                	mov    DWORD PTR [eax],edx
c000df0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df12:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000df1c:	90                   	nop
c000df1d:	83 c4 0c             	add    esp,0xc
c000df20:	c3                   	ret    
c000df21:	90                   	nop
c000df22:	66 90                	xchg   ax,ax

c000df24 <HardDiskController::~HardDiskController()>:
c000df24:	83 ec 0c             	sub    esp,0xc
c000df27:	ba c8 1b 02 c0       	mov    edx,0xc0021bc8
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	89 10                	mov    DWORD PTR [eax],edx
c000df32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df36:	83 ec 0c             	sub    esp,0xc
c000df39:	50                   	push   eax
c000df3a:	e8 01 fb ff ff       	call   c000da40 <Device::~Device()>
c000df3f:	83 c4 10             	add    esp,0x10
c000df42:	90                   	nop
c000df43:	83 c4 0c             	add    esp,0xc
c000df46:	c3                   	ret    
c000df47:	90                   	nop

c000df48 <HardDiskController::~HardDiskController()>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	83 ec 0c             	sub    esp,0xc
c000df4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df52:	e8 cd ff ff ff       	call   c000df24 <HardDiskController::~HardDiskController()>
c000df57:	83 c4 10             	add    esp,0x10
c000df5a:	83 ec 08             	sub    esp,0x8
c000df5d:	68 58 01 00 00       	push   0x158
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	e8 75 e6 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	83 c4 0c             	add    esp,0xc
c000df71:	c3                   	ret    

c000df72 <PhysicalDisk::eject()>:
c000df72:	83 c8 ff             	or     eax,0xffffffff
c000df75:	c3                   	ret    

c000df76 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000df76:	83 ec 0c             	sub    esp,0xc
c000df79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7d:	83 ec 08             	sub    esp,0x8
c000df80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df84:	50                   	push   eax
c000df85:	e8 b8 fd ff ff       	call   c000dd42 <Device::Device(char const*)>
c000df8a:	83 c4 10             	add    esp,0x10
c000df8d:	ba f4 1b 02 c0       	mov    edx,0xc0021bf4
c000df92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df96:	89 10                	mov    DWORD PTR [eax],edx
c000df98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000dfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dfc4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000dfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000dfd8:	90                   	nop
c000dfd9:	83 c4 0c             	add    esp,0xc
c000dfdc:	c3                   	ret    
c000dfdd:	90                   	nop

c000dfde <PhysicalDisk::startCache()>:
c000dfde:	56                   	push   esi
c000dfdf:	53                   	push   ebx
c000dfe0:	83 ec 10             	sub    esp,0x10
c000dfe3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfe7:	6a 44                	push   0x44
c000dfe9:	e8 91 b7 ff ff       	call   c000977f <malloc>
c000dfee:	89 c6                	mov    esi,eax
c000dff0:	58                   	pop    eax
c000dff1:	5a                   	pop    edx
c000dff2:	53                   	push   ebx
c000dff3:	56                   	push   esi
c000dff4:	e8 c7 15 00 00       	call   c000f5c0 <VCache::VCache(PhysicalDisk*)>
c000dff9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dfff:	83 c4 14             	add    esp,0x14
c000e002:	5b                   	pop    ebx
c000e003:	5e                   	pop    esi
c000e004:	c3                   	ret    
c000e005:	90                   	nop

c000e006 <PhysicalDisk::~PhysicalDisk()>:
c000e006:	83 ec 0c             	sub    esp,0xc
c000e009:	ba f4 1b 02 c0       	mov    edx,0xc0021bf4
c000e00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e012:	89 10                	mov    DWORD PTR [eax],edx
c000e014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	50                   	push   eax
c000e01c:	e8 1f fa ff ff       	call   c000da40 <Device::~Device()>
c000e021:	83 c4 10             	add    esp,0x10
c000e024:	90                   	nop
c000e025:	83 c4 0c             	add    esp,0xc
c000e028:	c3                   	ret    
c000e029:	90                   	nop

c000e02a <PhysicalDisk::~PhysicalDisk()>:
c000e02a:	83 ec 0c             	sub    esp,0xc
c000e02d:	83 ec 0c             	sub    esp,0xc
c000e030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e034:	e8 cd ff ff ff       	call   c000e006 <PhysicalDisk::~PhysicalDisk()>
c000e039:	83 c4 10             	add    esp,0x10
c000e03c:	83 ec 08             	sub    esp,0x8
c000e03f:	68 6c 01 00 00       	push   0x16c
c000e044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e048:	e8 93 e5 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000e04d:	83 c4 10             	add    esp,0x10
c000e050:	83 c4 0c             	add    esp,0xc
c000e053:	c3                   	ret    

c000e054 <int_handler>:
c000e054:	55                   	push   ebp
c000e055:	57                   	push   edi
c000e056:	56                   	push   esi
c000e057:	53                   	push   ebx
c000e058:	83 ec 0c             	sub    esp,0xc
c000e05b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e05f:	80 3d 44 6a 02 c0 00 	cmp    BYTE PTR ds:0xc0026a44,0x0
c000e066:	74 0b                	je     c000e073 <int_handler+0x1f>
c000e068:	fa                   	cli    
c000e069:	f4                   	hlt    
c000e06a:	80 3d 44 6a 02 c0 00 	cmp    BYTE PTR ds:0xc0026a44,0x0
c000e071:	75 f5                	jne    c000e068 <int_handler+0x14>
c000e073:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000e076:	8d 46 e0             	lea    eax,[esi-0x20]
c000e079:	83 f8 17             	cmp    eax,0x17
c000e07c:	76 3e                	jbe    c000e0bc <int_handler+0x68>
c000e07e:	c1 e6 04             	shl    esi,0x4
c000e081:	31 db                	xor    ebx,ebx
c000e083:	8d ae c0 50 02 c0    	lea    ebp,[esi-0x3ffdaf40]
c000e089:	81 c6 c0 40 02 c0    	add    esi,0xc00240c0
c000e08f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e093:	85 c0                	test   eax,eax
c000e095:	74 13                	je     c000e0aa <int_handler+0x56>
c000e097:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000e09a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000e09e:	74 2a                	je     c000e0ca <int_handler+0x76>
c000e0a0:	83 ec 08             	sub    esp,0x8
c000e0a3:	52                   	push   edx
c000e0a4:	57                   	push   edi
c000e0a5:	ff d0                	call   eax
c000e0a7:	83 c4 10             	add    esp,0x10
c000e0aa:	43                   	inc    ebx
c000e0ab:	83 fb 04             	cmp    ebx,0x4
c000e0ae:	75 df                	jne    c000e08f <int_handler+0x3b>
c000e0b0:	83 c4 0c             	add    esp,0xc
c000e0b3:	31 c0                	xor    eax,eax
c000e0b5:	5b                   	pop    ebx
c000e0b6:	31 d2                	xor    edx,edx
c000e0b8:	5e                   	pop    esi
c000e0b9:	5f                   	pop    edi
c000e0ba:	5d                   	pop    ebp
c000e0bb:	c3                   	ret    
c000e0bc:	83 ec 0c             	sub    esp,0xc
c000e0bf:	50                   	push   eax
c000e0c0:	e8 f8 a9 00 00       	call   c0018abd <Hal::endOfInterrupt(int)>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	eb b4                	jmp    c000e07e <int_handler+0x2a>
c000e0ca:	83 ec 08             	sub    esp,0x8
c000e0cd:	52                   	push   edx
c000e0ce:	57                   	push   edi
c000e0cf:	ff d0                	call   eax
c000e0d1:	83 c4 10             	add    esp,0x10
c000e0d4:	83 c4 0c             	add    esp,0xc
c000e0d7:	5b                   	pop    ebx
c000e0d8:	5e                   	pop    esi
c000e0d9:	5f                   	pop    edi
c000e0da:	5d                   	pop    ebp
c000e0db:	c3                   	ret    

c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e0dc:	56                   	push   esi
c000e0dd:	31 c0                	xor    eax,eax
c000e0df:	53                   	push   ebx
c000e0e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e0e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0e8:	89 ca                	mov    edx,ecx
c000e0ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e0ee:	c1 e2 04             	shl    edx,0x4
c000e0f1:	83 bc 82 c0 50 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdaf40],0x0
c000e0f9:	74 15                	je     c000e110 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000e0fb:	40                   	inc    eax
c000e0fc:	83 f8 04             	cmp    eax,0x4
c000e0ff:	75 f0                	jne    c000e0f1 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000e101:	c7 44 24 0c 24 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c24
c000e109:	5b                   	pop    ebx
c000e10a:	5e                   	pop    esi
c000e10b:	e9 f3 44 00 00       	jmp    c0012603 <Krnl::panic(char const*)>
c000e110:	8d 04 88             	lea    eax,[eax+ecx*4]
c000e113:	89 1c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ebx
c000e11a:	89 34 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],esi
c000e121:	5b                   	pop    ebx
c000e122:	5e                   	pop    esi
c000e123:	c3                   	ret    

c000e124 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e124:	57                   	push   edi
c000e125:	8b 15 a8 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fa8
c000e12b:	56                   	push   esi
c000e12c:	53                   	push   ebx
c000e12d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e131:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e135:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e13c:	74 55                	je     c000e193 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e13e:	89 c7                	mov    edi,eax
c000e140:	84 c0                	test   al,al
c000e142:	74 1e                	je     c000e162 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e144:	83 fe 0f             	cmp    esi,0xf
c000e147:	0f 8f cc 00 00 00    	jg     c000e219 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000e14d:	0f b6 b6 60 39 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc6a0]
c000e154:	66 8b bc 36 60 68 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffd97a0]
c000e15c:	66 d1 ef             	shr    di,1
c000e15f:	83 e7 01             	and    edi,0x1
c000e162:	83 ec 08             	sub    esp,0x8
c000e165:	31 db                	xor    ebx,ebx
c000e167:	ff 35 e0 7e 02 c0    	push   DWORD PTR ds:0xc0027ee0
c000e16d:	68 31 1c 02 c0       	push   0xc0021c31
c000e172:	e8 4a e5 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000e177:	83 c4 10             	add    esp,0x10
c000e17a:	a1 e0 7e 02 c0       	mov    eax,ds:0xc0027ee0
c000e17f:	85 c0                	test   eax,eax
c000e181:	7f 51                	jg     c000e1d4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000e183:	83 ec 0c             	sub    esp,0xc
c000e186:	68 48 1c 02 c0       	push   0xc0021c48
c000e18b:	e8 73 44 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000e190:	83 c4 10             	add    esp,0x10
c000e193:	8d 4e 20             	lea    ecx,[esi+0x20]
c000e196:	31 d2                	xor    edx,edx
c000e198:	89 c8                	mov    eax,ecx
c000e19a:	c1 e0 04             	shl    eax,0x4
c000e19d:	8b 9c 90 c0 50 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdaf40]
c000e1a4:	85 db                	test   ebx,ebx
c000e1a6:	0f 84 84 00 00 00    	je     c000e230 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000e1ac:	42                   	inc    edx
c000e1ad:	83 fa 04             	cmp    edx,0x4
c000e1b0:	75 eb                	jne    c000e19d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000e1b2:	83 ec 0c             	sub    esp,0xc
c000e1b5:	68 9c 1c 02 c0       	push   0xc0021c9c
c000e1ba:	e8 44 44 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e1c7:	5b                   	pop    ebx
c000e1c8:	5e                   	pop    esi
c000e1c9:	5f                   	pop    edi
c000e1ca:	c3                   	ret    
c000e1cb:	43                   	inc    ebx
c000e1cc:	39 1d e0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ee0,ebx
c000e1d2:	7e af                	jle    c000e183 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000e1d4:	83 ec 08             	sub    esp,0x8
c000e1d7:	56                   	push   esi
c000e1d8:	ff 34 9d 00 7f 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8100]
c000e1df:	e8 ae 0d 01 00       	call   c001ef92 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000e1e4:	83 c4 10             	add    esp,0x10
c000e1e7:	84 c0                	test   al,al
c000e1e9:	74 e0                	je     c000e1cb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000e1eb:	50                   	push   eax
c000e1ec:	89 f8                	mov    eax,edi
c000e1ee:	0f b6 f8             	movzx  edi,al
c000e1f1:	8d 46 20             	lea    eax,[esi+0x20]
c000e1f4:	57                   	push   edi
c000e1f5:	0f b6 c0             	movzx  eax,al
c000e1f8:	6a 00                	push   0x0
c000e1fa:	50                   	push   eax
c000e1fb:	89 f0                	mov    eax,esi
c000e1fd:	6a 00                	push   0x0
c000e1ff:	0f b6 c0             	movzx  eax,al
c000e202:	6a 00                	push   0x0
c000e204:	50                   	push   eax
c000e205:	ff 34 9d 00 7f 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8100]
c000e20c:	e8 fd 0e 01 00       	call   c001f10e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000e211:	83 c4 20             	add    esp,0x20
c000e214:	e9 7a ff ff ff       	jmp    c000e193 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000e219:	83 ec 0c             	sub    esp,0xc
c000e21c:	31 ff                	xor    edi,edi
c000e21e:	68 64 1c 02 c0       	push   0xc0021c64
c000e223:	e8 db 43 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	e9 32 ff ff ff       	jmp    c000e162 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000e230:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000e233:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e237:	89 14 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],edx
c000e23e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e242:	5b                   	pop    ebx
c000e243:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c000e24a:	89 f0                	mov    eax,esi
c000e24c:	5e                   	pop    esi
c000e24d:	5f                   	pop    edi
c000e24e:	c3                   	ret    

c000e24f <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e24f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e253:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e257:	c1 e0 04             	shl    eax,0x4
c000e25a:	8d 50 10             	lea    edx,[eax+0x10]
c000e25d:	39 88 c0 50 02 c0    	cmp    DWORD PTR [eax-0x3ffdaf40],ecx
c000e263:	74 08                	je     c000e26d <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000e265:	83 c0 04             	add    eax,0x4
c000e268:	39 d0                	cmp    eax,edx
c000e26a:	75 f1                	jne    c000e25d <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000e26c:	c3                   	ret    
c000e26d:	c7 80 c0 50 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaf40],0x0
c000e277:	c7 80 c0 40 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbf40],0x0
c000e281:	eb e2                	jmp    c000e265 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000e283 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e283:	53                   	push   ebx
c000e284:	83 ec 08             	sub    esp,0x8
c000e287:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e28b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e290:	74 0e                	je     c000e2a0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e292:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000e297:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000e29e:	75 37                	jne    c000e2d7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000e2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a4:	83 c0 20             	add    eax,0x20
c000e2a7:	c1 e0 04             	shl    eax,0x4
c000e2aa:	8d 50 10             	lea    edx,[eax+0x10]
c000e2ad:	39 98 c0 50 02 c0    	cmp    DWORD PTR [eax-0x3ffdaf40],ebx
c000e2b3:	74 0c                	je     c000e2c1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000e2b5:	83 c0 04             	add    eax,0x4
c000e2b8:	39 d0                	cmp    eax,edx
c000e2ba:	75 f1                	jne    c000e2ad <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000e2bc:	83 c4 08             	add    esp,0x8
c000e2bf:	5b                   	pop    ebx
c000e2c0:	c3                   	ret    
c000e2c1:	c7 80 c0 50 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaf40],0x0
c000e2cb:	c7 80 c0 40 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbf40],0x0
c000e2d5:	eb de                	jmp    c000e2b5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000e2d7:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000e2dc:	7f 11                	jg     c000e2ef <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000e2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e2:	0f b6 80 60 39 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc6a0]
c000e2e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ed:	eb b1                	jmp    c000e2a0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e2ef:	83 ec 0c             	sub    esp,0xc
c000e2f2:	68 55 1c 02 c0       	push   0xc0021c55
c000e2f7:	e8 07 43 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000e2fc:	83 c4 10             	add    esp,0x10
c000e2ff:	eb 9f                	jmp    c000e2a0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000e301 <setupINTS()>:
c000e301:	31 c0                	xor    eax,eax
c000e303:	c7 80 c0 50 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaf40],0x0
c000e30d:	c7 80 c0 40 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbf40],0x0
c000e317:	c7 80 c4 50 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaf3c],0x0
c000e321:	c7 80 c4 40 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbf3c],0x0
c000e32b:	c7 80 c8 50 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaf38],0x0
c000e335:	c7 80 c8 40 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbf38],0x0
c000e33f:	c7 80 cc 50 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaf34],0x0
c000e349:	c7 80 cc 40 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbf34],0x0
c000e353:	83 c0 10             	add    eax,0x10
c000e356:	3d 00 10 00 00       	cmp    eax,0x1000
c000e35b:	75 a6                	jne    c000e303 <setupINTS()+0x2>
c000e35d:	c3                   	ret    

c000e35e <convertLegacyIRQNumber(int)>:
c000e35e:	83 ec 0c             	sub    esp,0xc
c000e361:	8b 15 a8 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fa8
c000e367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000e372:	74 0c                	je     c000e380 <convertLegacyIRQNumber(int)+0x22>
c000e374:	83 f8 0f             	cmp    eax,0xf
c000e377:	7f 0b                	jg     c000e384 <convertLegacyIRQNumber(int)+0x26>
c000e379:	0f b6 80 60 39 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc6a0]
c000e380:	83 c4 0c             	add    esp,0xc
c000e383:	c3                   	ret    
c000e384:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e388:	83 ec 0c             	sub    esp,0xc
c000e38b:	68 64 1c 02 c0       	push   0xc0021c64
c000e390:	e8 6e 42 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39c:	83 c4 0c             	add    esp,0xc
c000e39f:	c3                   	ret    

c000e3a0 <startGUI(void*)>:
c000e3a0:	55                   	push   ebp
c000e3a1:	89 e5                	mov    ebp,esp
c000e3a3:	53                   	push   ebx
c000e3a4:	83 ec 04             	sub    esp,0x4
c000e3a7:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000e3ac:	48                   	dec    eax
c000e3ad:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000e3b2:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000e3b7:	85 c0                	test   eax,eax
c000e3b9:	75 01                	jne    c000e3bc <startGUI(void*)+0x1c>
c000e3bb:	fb                   	sti    
c000e3bc:	8b 1d a8 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fa8
c000e3c2:	83 ec 08             	sub    esp,0x8
c000e3c5:	6a 01                	push   0x1
c000e3c7:	68 c1 1c 02 c0       	push   0xc0021cc1
c000e3cc:	e8 86 6d 00 00       	call   c0015157 <Thr::loadDLL(char const*, bool)>
c000e3d1:	83 c4 10             	add    esp,0x10
c000e3d4:	83 ec 08             	sub    esp,0x8
c000e3d7:	53                   	push   ebx
c000e3d8:	50                   	push   eax
c000e3d9:	e8 aa 6f 00 00       	call   c0015388 <Thr::executeDLL(unsigned long, void*)>
c000e3de:	83 c4 10             	add    esp,0x10
c000e3e1:	8b 1d a8 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fa8
c000e3e7:	83 ec 08             	sub    esp,0x8
c000e3ea:	6a 01                	push   0x1
c000e3ec:	68 db 1c 02 c0       	push   0xc0021cdb
c000e3f1:	e8 61 6d 00 00       	call   c0015157 <Thr::loadDLL(char const*, bool)>
c000e3f6:	83 c4 10             	add    esp,0x10
c000e3f9:	83 ec 08             	sub    esp,0x8
c000e3fc:	53                   	push   ebx
c000e3fd:	50                   	push   eax
c000e3fe:	e8 85 6f 00 00       	call   c0015388 <Thr::executeDLL(unsigned long, void*)>
c000e403:	83 c4 10             	add    esp,0x10
c000e406:	90                   	nop
c000e407:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e40a:	c9                   	leave  
c000e40b:	c3                   	ret    

c000e40c <startGUIVESA(void*)>:
c000e40c:	55                   	push   ebp
c000e40d:	89 e5                	mov    ebp,esp
c000e40f:	53                   	push   ebx
c000e410:	83 ec 04             	sub    esp,0x4
c000e413:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000e418:	48                   	dec    eax
c000e419:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000e41e:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000e423:	85 c0                	test   eax,eax
c000e425:	75 01                	jne    c000e428 <startGUIVESA(void*)+0x1c>
c000e427:	fb                   	sti    
c000e428:	8b 1d a8 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fa8
c000e42e:	83 ec 08             	sub    esp,0x8
c000e431:	6a 01                	push   0x1
c000e433:	68 f9 1c 02 c0       	push   0xc0021cf9
c000e438:	e8 1a 6d 00 00       	call   c0015157 <Thr::loadDLL(char const*, bool)>
c000e43d:	83 c4 10             	add    esp,0x10
c000e440:	83 ec 08             	sub    esp,0x8
c000e443:	53                   	push   ebx
c000e444:	50                   	push   eax
c000e445:	e8 3e 6f 00 00       	call   c0015388 <Thr::executeDLL(unsigned long, void*)>
c000e44a:	83 c4 10             	add    esp,0x10
c000e44d:	8b 1d a8 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fa8
c000e453:	83 ec 08             	sub    esp,0x8
c000e456:	6a 01                	push   0x1
c000e458:	68 db 1c 02 c0       	push   0xc0021cdb
c000e45d:	e8 f5 6c 00 00       	call   c0015157 <Thr::loadDLL(char const*, bool)>
c000e462:	83 c4 10             	add    esp,0x10
c000e465:	83 ec 08             	sub    esp,0x8
c000e468:	53                   	push   ebx
c000e469:	50                   	push   eax
c000e46a:	e8 19 6f 00 00       	call   c0015388 <Thr::executeDLL(unsigned long, void*)>
c000e46f:	83 c4 10             	add    esp,0x10
c000e472:	90                   	nop
c000e473:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000e476:	c9                   	leave  
c000e477:	c3                   	ret    

c000e478 <sendKeyToTerminal(unsigned char)>:
c000e478:	55                   	push   ebp
c000e479:	89 e5                	mov    ebp,esp
c000e47b:	83 ec 28             	sub    esp,0x28
c000e47e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e481:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000e484:	a1 f4 3f 02 c0       	mov    eax,ds:0xc0023ff4
c000e489:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000e48d:	83 ec 08             	sub    esp,0x8
c000e490:	52                   	push   edx
c000e491:	50                   	push   eax
c000e492:	e8 13 c7 ff ff       	call   c000abaa <VgaText::receiveKey(unsigned char)>
c000e497:	83 c4 10             	add    esp,0x10
c000e49a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000e49e:	0f 85 8f 00 00 00    	jne    c000e533 <sendKeyToTerminal(unsigned char)+0xbb>
c000e4a4:	fa                   	cli    
c000e4a5:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000e4aa:	40                   	inc    eax
c000e4ab:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000e4b0:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c000e4b5:	40                   	inc    eax
c000e4b6:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c000e4bb:	a1 c0 60 02 c0       	mov    eax,ds:0xc00260c0
c000e4c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e4c3:	c7 05 c0 60 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00260c0,0x0
c000e4cd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000e4d1:	74 1f                	je     c000e4f2 <sendKeyToTerminal(unsigned char)+0x7a>
c000e4d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000e4d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000e4d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000e4dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000e4df:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000e4e8:	e8 07 7b 00 00       	call   c0015ff4 <unblockTask(ThreadControlBlock*)>
c000e4ed:	83 c4 10             	add    esp,0x10
c000e4f0:	eb db                	jmp    c000e4cd <sendKeyToTerminal(unsigned char)+0x55>
c000e4f2:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c000e4f7:	48                   	dec    eax
c000e4f8:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c000e4fd:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c000e502:	85 c0                	test   eax,eax
c000e504:	75 18                	jne    c000e51e <sendKeyToTerminal(unsigned char)+0xa6>
c000e506:	a1 80 74 02 c0       	mov    eax,ds:0xc0027480
c000e50b:	85 c0                	test   eax,eax
c000e50d:	74 0f                	je     c000e51e <sendKeyToTerminal(unsigned char)+0xa6>
c000e50f:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c000e519:	e8 1a 76 00 00       	call   c0015b38 <schedule()>
c000e51e:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000e523:	48                   	dec    eax
c000e524:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000e529:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000e52e:	85 c0                	test   eax,eax
c000e530:	75 01                	jne    c000e533 <sendKeyToTerminal(unsigned char)+0xbb>
c000e532:	fb                   	sti    
c000e533:	90                   	nop
c000e534:	c9                   	leave  
c000e535:	c3                   	ret    

c000e536 <sendKeyboardToken(KeyboardToken)>:
c000e536:	55                   	push   ebp
c000e537:	89 e5                	mov    ebp,esp
c000e539:	83 ec 18             	sub    esp,0x18
c000e53c:	e8 9b 43 00 00       	call   c00128dc <Krnl::userIOReceived()>
c000e541:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000e544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e547:	0f b7 c0             	movzx  eax,ax
c000e54a:	83 f2 01             	xor    edx,0x1
c000e54d:	88 90 e0 60 02 c0    	mov    BYTE PTR [eax-0x3ffd9f20],dl
c000e553:	a1 c8 60 02 c0       	mov    eax,ds:0xc00260c8
c000e558:	85 c0                	test   eax,eax
c000e55a:	74 24                	je     c000e580 <sendKeyboardToken(KeyboardToken)+0x4a>
c000e55c:	8b 0d c8 60 02 c0    	mov    ecx,DWORD PTR ds:0xc00260c8
c000e562:	83 ec 04             	sub    esp,0x4
c000e565:	68 e0 60 02 c0       	push   0xc00260e0
c000e56a:	83 ec 08             	sub    esp,0x8
c000e56d:	89 e2                	mov    edx,esp
c000e56f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e572:	89 02                	mov    DWORD PTR [edx],eax
c000e574:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000e577:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000e57b:	ff d1                	call   ecx
c000e57d:	83 c4 10             	add    esp,0x10
c000e580:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000e584:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000e587:	a0 e8 64 02 c0       	mov    al,ds:0xc00264e8
c000e58c:	38 c2                	cmp    dl,al
c000e58e:	74 1c                	je     c000e5ac <sendKeyboardToken(KeyboardToken)+0x76>
c000e590:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000e593:	a2 e8 64 02 c0       	mov    ds:0xc00264e8,al
c000e598:	a0 e8 64 02 c0       	mov    al,ds:0xc00264e8
c000e59d:	0f b6 c0             	movzx  eax,al
c000e5a0:	83 ec 0c             	sub    esp,0xc
c000e5a3:	50                   	push   eax
c000e5a4:	e8 31 bd ff ff       	call   c000a2da <setTerminalScrollLock(bool)>
c000e5a9:	83 c4 10             	add    esp,0x10
c000e5ac:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000e5af:	84 c0                	test   al,al
c000e5b1:	0f 84 ae 00 00 00    	je     c000e665 <sendKeyboardToken(KeyboardToken)+0x12f>
c000e5b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5ba:	66 3d 10 03          	cmp    ax,0x310
c000e5be:	75 06                	jne    c000e5c6 <sendKeyboardToken(KeyboardToken)+0x90>
c000e5c0:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000e5c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5c9:	66 3d 11 03          	cmp    ax,0x311
c000e5cd:	75 06                	jne    c000e5d5 <sendKeyboardToken(KeyboardToken)+0x9f>
c000e5cf:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000e5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5d8:	66 3d 12 03          	cmp    ax,0x312
c000e5dc:	75 06                	jne    c000e5e4 <sendKeyboardToken(KeyboardToken)+0xae>
c000e5de:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000e5e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5e7:	66 3d 13 03          	cmp    ax,0x313
c000e5eb:	75 06                	jne    c000e5f3 <sendKeyboardToken(KeyboardToken)+0xbd>
c000e5ed:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000e5f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e5f6:	66 3d 14 03          	cmp    ax,0x314
c000e5fa:	75 06                	jne    c000e602 <sendKeyboardToken(KeyboardToken)+0xcc>
c000e5fc:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000e602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e605:	66 3d 15 03          	cmp    ax,0x315
c000e609:	75 06                	jne    c000e611 <sendKeyboardToken(KeyboardToken)+0xdb>
c000e60b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e614:	66 3d 16 03          	cmp    ax,0x316
c000e618:	75 06                	jne    c000e620 <sendKeyboardToken(KeyboardToken)+0xea>
c000e61a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000e620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e623:	66 3d 17 03          	cmp    ax,0x317
c000e627:	75 06                	jne    c000e62f <sendKeyboardToken(KeyboardToken)+0xf9>
c000e629:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000e62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e632:	66 3d 18 03          	cmp    ax,0x318
c000e636:	75 06                	jne    c000e63e <sendKeyboardToken(KeyboardToken)+0x108>
c000e638:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000e63e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e641:	66 3d 19 03          	cmp    ax,0x319
c000e645:	75 06                	jne    c000e64d <sendKeyboardToken(KeyboardToken)+0x117>
c000e647:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000e64d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e650:	66 3d 1a 03          	cmp    ax,0x31a
c000e654:	0f 85 c9 00 00 00    	jne    c000e723 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e65a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000e660:	e9 be 00 00 00       	jmp    c000e723 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e668:	66 3d 10 03          	cmp    ax,0x310
c000e66c:	75 0a                	jne    c000e678 <sendKeyboardToken(KeyboardToken)+0x142>
c000e66e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000e674:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e67b:	66 3d 11 03          	cmp    ax,0x311
c000e67f:	75 0a                	jne    c000e68b <sendKeyboardToken(KeyboardToken)+0x155>
c000e681:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000e687:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e68e:	66 3d 12 03          	cmp    ax,0x312
c000e692:	75 0a                	jne    c000e69e <sendKeyboardToken(KeyboardToken)+0x168>
c000e694:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000e69a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e69e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6a1:	66 3d 13 03          	cmp    ax,0x313
c000e6a5:	75 0a                	jne    c000e6b1 <sendKeyboardToken(KeyboardToken)+0x17b>
c000e6a7:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000e6ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6b4:	66 3d 14 03          	cmp    ax,0x314
c000e6b8:	75 0a                	jne    c000e6c4 <sendKeyboardToken(KeyboardToken)+0x18e>
c000e6ba:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000e6c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6c7:	66 3d 15 03          	cmp    ax,0x315
c000e6cb:	75 0a                	jne    c000e6d7 <sendKeyboardToken(KeyboardToken)+0x1a1>
c000e6cd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000e6d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6da:	66 3d 16 03          	cmp    ax,0x316
c000e6de:	75 0a                	jne    c000e6ea <sendKeyboardToken(KeyboardToken)+0x1b4>
c000e6e0:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000e6e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e6ed:	66 3d 17 03          	cmp    ax,0x317
c000e6f1:	75 0a                	jne    c000e6fd <sendKeyboardToken(KeyboardToken)+0x1c7>
c000e6f3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000e6f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e700:	66 3d 18 03          	cmp    ax,0x318
c000e704:	75 0a                	jne    c000e710 <sendKeyboardToken(KeyboardToken)+0x1da>
c000e706:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000e70c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e713:	66 3d 19 03          	cmp    ax,0x319
c000e717:	75 0a                	jne    c000e723 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000e719:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000e71f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000e723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e726:	66 3d 00 02          	cmp    ax,0x200
c000e72a:	75 2c                	jne    c000e758 <sendKeyboardToken(KeyboardToken)+0x222>
c000e72c:	a0 e0 64 02 c0       	mov    al,ds:0xc00264e0
c000e731:	83 f0 01             	xor    eax,0x1
c000e734:	84 c0                	test   al,al
c000e736:	74 20                	je     c000e758 <sendKeyboardToken(KeyboardToken)+0x222>
c000e738:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c000e73d:	6a 01                	push   0x1
c000e73f:	6a 00                	push   0x0
c000e741:	68 a0 e3 00 c0       	push   0xc000e3a0
c000e746:	50                   	push   eax
c000e747:	e8 d0 71 00 00       	call   c001591c <Process::createThread(void (*)(void*), void*, int)>
c000e74c:	83 c4 10             	add    esp,0x10
c000e74f:	c6 05 e0 64 02 c0 01 	mov    BYTE PTR ds:0xc00264e0,0x1
c000e756:	eb 33                	jmp    c000e78b <sendKeyboardToken(KeyboardToken)+0x255>
c000e758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e75b:	66 3d 01 02          	cmp    ax,0x201
c000e75f:	75 2a                	jne    c000e78b <sendKeyboardToken(KeyboardToken)+0x255>
c000e761:	a0 e0 64 02 c0       	mov    al,ds:0xc00264e0
c000e766:	83 f0 01             	xor    eax,0x1
c000e769:	84 c0                	test   al,al
c000e76b:	74 1e                	je     c000e78b <sendKeyboardToken(KeyboardToken)+0x255>
c000e76d:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c000e772:	6a 01                	push   0x1
c000e774:	6a 00                	push   0x0
c000e776:	68 0c e4 00 c0       	push   0xc000e40c
c000e77b:	50                   	push   eax
c000e77c:	e8 9b 71 00 00       	call   c001591c <Process::createThread(void (*)(void*), void*, int)>
c000e781:	83 c4 10             	add    esp,0x10
c000e784:	c6 05 e0 64 02 c0 01 	mov    BYTE PTR ds:0xc00264e0,0x1
c000e78b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e78e:	66 3d 1d 03          	cmp    ax,0x31d
c000e792:	75 06                	jne    c000e79a <sendKeyboardToken(KeyboardToken)+0x264>
c000e794:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000e79a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e79d:	66 3d 1c 03          	cmp    ax,0x31c
c000e7a1:	75 06                	jne    c000e7a9 <sendKeyboardToken(KeyboardToken)+0x273>
c000e7a3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000e7a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7ac:	66 3d 1b 03          	cmp    ax,0x31b
c000e7b0:	75 06                	jne    c000e7b8 <sendKeyboardToken(KeyboardToken)+0x282>
c000e7b2:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000e7b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7bb:	66 3d 1e 03          	cmp    ax,0x31e
c000e7bf:	75 06                	jne    c000e7c7 <sendKeyboardToken(KeyboardToken)+0x291>
c000e7c1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000e7c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7ca:	66 3d 1f 03          	cmp    ax,0x31f
c000e7ce:	75 06                	jne    c000e7d6 <sendKeyboardToken(KeyboardToken)+0x2a0>
c000e7d0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000e7d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e7d9:	66 3d 1a 03          	cmp    ax,0x31a
c000e7dd:	75 06                	jne    c000e7e5 <sendKeyboardToken(KeyboardToken)+0x2af>
c000e7df:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000e7e5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000e7e9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e7ec:	83 f0 01             	xor    eax,0x1
c000e7ef:	84 c0                	test   al,al
c000e7f1:	74 77                	je     c000e86a <sendKeyboardToken(KeyboardToken)+0x334>
c000e7f3:	a0 e1 61 02 c0       	mov    al,ds:0xc00261e1
c000e7f8:	84 c0                	test   al,al
c000e7fa:	74 41                	je     c000e83d <sendKeyboardToken(KeyboardToken)+0x307>
c000e7fc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e800:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000e804:	74 2b                	je     c000e831 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000e806:	8b 15 e4 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264e4
c000e80c:	89 d0                	mov    eax,edx
c000e80e:	c1 e0 02             	shl    eax,0x2
c000e811:	01 d0                	add    eax,edx
c000e813:	01 c0                	add    eax,eax
c000e815:	a3 e4 64 02 c0       	mov    ds:0xc00264e4,eax
c000e81a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e81d:	0f b7 c0             	movzx  eax,ax
c000e820:	8d 50 d0             	lea    edx,[eax-0x30]
c000e823:	a1 e4 64 02 c0       	mov    eax,ds:0xc00264e4
c000e828:	01 d0                	add    eax,edx
c000e82a:	a3 e4 64 02 c0       	mov    ds:0xc00264e4,eax
c000e82f:	eb 6d                	jmp    c000e89e <sendKeyboardToken(KeyboardToken)+0x368>
c000e831:	c7 05 e4 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00264e4,0x0
c000e83b:	eb 61                	jmp    c000e89e <sendKeyboardToken(KeyboardToken)+0x368>
c000e83d:	a1 e4 64 02 c0       	mov    eax,ds:0xc00264e4
c000e842:	85 c0                	test   eax,eax
c000e844:	74 18                	je     c000e85e <sendKeyboardToken(KeyboardToken)+0x328>
c000e846:	a1 e4 64 02 c0       	mov    eax,ds:0xc00264e4
c000e84b:	0f b6 c0             	movzx  eax,al
c000e84e:	83 ec 0c             	sub    esp,0xc
c000e851:	50                   	push   eax
c000e852:	e8 21 fc ff ff       	call   c000e478 <sendKeyToTerminal(unsigned char)>
c000e857:	83 c4 10             	add    esp,0x10
c000e85a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e85e:	c7 05 e4 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00264e4,0x0
c000e868:	eb 34                	jmp    c000e89e <sendKeyboardToken(KeyboardToken)+0x368>
c000e86a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e86d:	66 3d 01 01          	cmp    ax,0x101
c000e871:	75 2b                	jne    c000e89e <sendKeyboardToken(KeyboardToken)+0x368>
c000e873:	a1 e4 64 02 c0       	mov    eax,ds:0xc00264e4
c000e878:	85 c0                	test   eax,eax
c000e87a:	74 18                	je     c000e894 <sendKeyboardToken(KeyboardToken)+0x35e>
c000e87c:	a1 e4 64 02 c0       	mov    eax,ds:0xc00264e4
c000e881:	0f b6 c0             	movzx  eax,al
c000e884:	83 ec 0c             	sub    esp,0xc
c000e887:	50                   	push   eax
c000e888:	e8 eb fb ff ff       	call   c000e478 <sendKeyToTerminal(unsigned char)>
c000e88d:	83 c4 10             	add    esp,0x10
c000e890:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000e894:	c7 05 e4 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00264e4,0x0
c000e89e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e8a1:	83 f0 01             	xor    eax,0x1
c000e8a4:	84 c0                	test   al,al
c000e8a6:	74 4c                	je     c000e8f4 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e8a8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e8ab:	83 f0 01             	xor    eax,0x1
c000e8ae:	84 c0                	test   al,al
c000e8b0:	74 42                	je     c000e8f4 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e8b2:	a0 e0 61 02 c0       	mov    al,ds:0xc00261e0
c000e8b7:	83 f0 01             	xor    eax,0x1
c000e8ba:	84 c0                	test   al,al
c000e8bc:	74 36                	je     c000e8f4 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e8be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8c1:	66 83 f8 1f          	cmp    ax,0x1f
c000e8c5:	76 09                	jbe    c000e8d0 <sendKeyboardToken(KeyboardToken)+0x39a>
c000e8c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8ca:	66 83 f8 7e          	cmp    ax,0x7e
c000e8ce:	76 12                	jbe    c000e8e2 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e8d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8d3:	66 83 f8 0a          	cmp    ax,0xa
c000e8d7:	74 09                	je     c000e8e2 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000e8d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8dc:	66 83 f8 08          	cmp    ax,0x8
c000e8e0:	75 12                	jne    c000e8f4 <sendKeyboardToken(KeyboardToken)+0x3be>
c000e8e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e8e5:	0f b6 c0             	movzx  eax,al
c000e8e8:	83 ec 0c             	sub    esp,0xc
c000e8eb:	50                   	push   eax
c000e8ec:	e8 87 fb ff ff       	call   c000e478 <sendKeyToTerminal(unsigned char)>
c000e8f1:	83 c4 10             	add    esp,0x10
c000e8f4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000e8f7:	83 f0 01             	xor    eax,0x1
c000e8fa:	84 c0                	test   al,al
c000e8fc:	74 4f                	je     c000e94d <sendKeyboardToken(KeyboardToken)+0x417>
c000e8fe:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e901:	83 f0 01             	xor    eax,0x1
c000e904:	84 c0                	test   al,al
c000e906:	74 45                	je     c000e94d <sendKeyboardToken(KeyboardToken)+0x417>
c000e908:	a0 e0 61 02 c0       	mov    al,ds:0xc00261e0
c000e90d:	84 c0                	test   al,al
c000e90f:	74 3c                	je     c000e94d <sendKeyboardToken(KeyboardToken)+0x417>
c000e911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e914:	66 83 f8 3f          	cmp    ax,0x3f
c000e918:	76 33                	jbe    c000e94d <sendKeyboardToken(KeyboardToken)+0x417>
c000e91a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e91d:	66 83 f8 7f          	cmp    ax,0x7f
c000e921:	77 2a                	ja     c000e94d <sendKeyboardToken(KeyboardToken)+0x417>
c000e923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e926:	88 c2                	mov    dl,al
c000e928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e92b:	66 83 f8 5f          	cmp    ax,0x5f
c000e92f:	76 04                	jbe    c000e935 <sendKeyboardToken(KeyboardToken)+0x3ff>
c000e931:	b0 20                	mov    al,0x20
c000e933:	eb 02                	jmp    c000e937 <sendKeyboardToken(KeyboardToken)+0x401>
c000e935:	b0 00                	mov    al,0x0
c000e937:	29 c2                	sub    edx,eax
c000e939:	88 d0                	mov    al,dl
c000e93b:	83 e8 40             	sub    eax,0x40
c000e93e:	0f b6 c0             	movzx  eax,al
c000e941:	83 ec 0c             	sub    esp,0xc
c000e944:	50                   	push   eax
c000e945:	e8 2e fb ff ff       	call   c000e478 <sendKeyToTerminal(unsigned char)>
c000e94a:	83 c4 10             	add    esp,0x10
c000e94d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e950:	66 3d 00 03          	cmp    ax,0x300
c000e954:	75 0f                	jne    c000e965 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e956:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000e959:	83 f0 01             	xor    eax,0x1
c000e95c:	84 c0                	test   al,al
c000e95e:	74 05                	je     c000e965 <sendKeyboardToken(KeyboardToken)+0x42f>
c000e960:	e8 76 b9 ff ff       	call   c000a2db <doTerminalCycle()>
c000e965:	90                   	nop
c000e966:	c9                   	leave  
c000e967:	c3                   	ret    

c000e968 <clearInternalKeybuffer(VgaText*)>:
c000e968:	55                   	push   ebp
c000e969:	89 e5                	mov    ebp,esp
c000e96b:	83 ec 08             	sub    esp,0x8
c000e96e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e971:	05 32 01 00 00       	add    eax,0x132
c000e976:	83 ec 0c             	sub    esp,0xc
c000e979:	50                   	push   eax
c000e97a:	e8 45 1b ff ff       	call   c00004c4 <strlen>
c000e97f:	83 c4 10             	add    esp,0x10
c000e982:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000e985:	81 c2 32 01 00 00    	add    edx,0x132
c000e98b:	83 ec 04             	sub    esp,0x4
c000e98e:	50                   	push   eax
c000e98f:	6a 00                	push   0x0
c000e991:	52                   	push   edx
c000e992:	e8 11 1b ff ff       	call   c00004a8 <memset>
c000e997:	83 c4 10             	add    esp,0x10
c000e99a:	90                   	nop
c000e99b:	c9                   	leave  
c000e99c:	c3                   	ret    

c000e99d <readKeyboard(VgaText*, char*, unsigned long)>:
c000e99d:	55                   	push   ebp
c000e99e:	89 e5                	mov    ebp,esp
c000e9a0:	83 ec 18             	sub    esp,0x18
c000e9a3:	a1 c8 60 02 c0       	mov    eax,ds:0xc00260c8
c000e9a8:	85 c0                	test   eax,eax
c000e9aa:	74 2a                	je     c000e9d6 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000e9ac:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000e9b2:	8b 0d c8 60 02 c0    	mov    ecx,DWORD PTR ds:0xc00260c8
c000e9b8:	83 ec 04             	sub    esp,0x4
c000e9bb:	68 e0 60 02 c0       	push   0xc00260e0
c000e9c0:	83 ec 08             	sub    esp,0x8
c000e9c3:	89 e2                	mov    edx,esp
c000e9c5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000e9c8:	89 02                	mov    DWORD PTR [edx],eax
c000e9ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000e9cd:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000e9d1:	ff d1                	call   ecx
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	fb                   	sti    
c000e9d7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000e9de:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000e9e2:	0f 84 a1 00 00 00    	je     c000ea89 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000e9e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000e9eb:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000e9f1:	84 c0                	test   al,al
c000e9f3:	75 28                	jne    c000ea1d <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000e9f5:	fa                   	cli    
c000e9f6:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000e9fb:	40                   	inc    eax
c000e9fc:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000ea01:	e8 32 71 00 00       	call   c0015b38 <schedule()>
c000ea06:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000ea0b:	48                   	dec    eax
c000ea0c:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000ea11:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000ea16:	85 c0                	test   eax,eax
c000ea18:	75 ce                	jne    c000e9e8 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ea1a:	fb                   	sti    
c000ea1b:	eb cb                	jmp    c000e9e8 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ea1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ea20:	8d 50 01             	lea    edx,[eax+0x1]
c000ea23:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ea26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ea29:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c000ea2f:	88 10                	mov    BYTE PTR [eax],dl
c000ea31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ea34:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000ea3a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ea3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ea40:	05 32 01 00 00       	add    eax,0x132
c000ea45:	83 ec 0c             	sub    esp,0xc
c000ea48:	50                   	push   eax
c000ea49:	e8 76 1a ff ff       	call   c00004c4 <strlen>
c000ea4e:	83 c4 10             	add    esp,0x10
c000ea51:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ea54:	81 c2 32 01 00 00    	add    edx,0x132
c000ea5a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ea5d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ea60:	81 c2 32 01 00 00    	add    edx,0x132
c000ea66:	83 ec 04             	sub    esp,0x4
c000ea69:	50                   	push   eax
c000ea6a:	51                   	push   ecx
c000ea6b:	52                   	push   edx
c000ea6c:	e8 6f 19 ff ff       	call   c00003e0 <memmove>
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ea77:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ea7a:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000ea7e:	0f 85 5a ff ff ff    	jne    c000e9de <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ea84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ea87:	eb 03                	jmp    c000ea8c <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000ea89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ea8c:	c9                   	leave  
c000ea8d:	c3                   	ret    

c000ea8e <Keyboard::Keyboard(char const*)>:
c000ea8e:	83 ec 0c             	sub    esp,0xc
c000ea91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea95:	83 ec 08             	sub    esp,0x8
c000ea98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea9c:	50                   	push   eax
c000ea9d:	e8 a0 f2 ff ff       	call   c000dd42 <Device::Device(char const*)>
c000eaa2:	83 c4 10             	add    esp,0x10
c000eaa5:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c000eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaae:	89 10                	mov    DWORD PTR [eax],edx
c000eab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eab4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000eabe:	c6 05 c4 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c4,0x1
c000eac5:	90                   	nop
c000eac6:	83 c4 0c             	add    esp,0xc
c000eac9:	c3                   	ret    

c000eaca <Keyboard::~Keyboard()>:
c000eaca:	83 ec 0c             	sub    esp,0xc
c000eacd:	ba 1c 1d 02 c0       	mov    edx,0xc0021d1c
c000ead2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ead6:	89 10                	mov    DWORD PTR [eax],edx
c000ead8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eadc:	83 ec 0c             	sub    esp,0xc
c000eadf:	50                   	push   eax
c000eae0:	e8 5b ef ff ff       	call   c000da40 <Device::~Device()>
c000eae5:	83 c4 10             	add    esp,0x10
c000eae8:	90                   	nop
c000eae9:	83 c4 0c             	add    esp,0xc
c000eaec:	c3                   	ret    
c000eaed:	90                   	nop

c000eaee <Keyboard::~Keyboard()>:
c000eaee:	83 ec 0c             	sub    esp,0xc
c000eaf1:	83 ec 0c             	sub    esp,0xc
c000eaf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaf8:	e8 cd ff ff ff       	call   c000eaca <Keyboard::~Keyboard()>
c000eafd:	83 c4 10             	add    esp,0x10
c000eb00:	83 ec 08             	sub    esp,0x8
c000eb03:	68 5c 01 00 00       	push   0x15c
c000eb08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb0c:	e8 cf da ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000eb11:	83 c4 10             	add    esp,0x10
c000eb14:	83 c4 0c             	add    esp,0xc
c000eb17:	c3                   	ret    

c000eb18 <LogicalDisk::close(int, int, void*)>:
c000eb18:	83 c8 ff             	or     eax,0xffffffff
c000eb1b:	c3                   	ret    

c000eb1c <LogicalDisk::~LogicalDisk()>:
c000eb1c:	83 ec 0c             	sub    esp,0xc
c000eb1f:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c000eb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb28:	89 10                	mov    DWORD PTR [eax],edx
c000eb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb2e:	83 ec 0c             	sub    esp,0xc
c000eb31:	50                   	push   eax
c000eb32:	e8 09 ef ff ff       	call   c000da40 <Device::~Device()>
c000eb37:	83 c4 10             	add    esp,0x10
c000eb3a:	90                   	nop
c000eb3b:	83 c4 0c             	add    esp,0xc
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <LogicalDisk::~LogicalDisk()>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	83 ec 0c             	sub    esp,0xc
c000eb46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb4a:	e8 cd ff ff ff       	call   c000eb1c <LogicalDisk::~LogicalDisk()>
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	83 ec 08             	sub    esp,0x8
c000eb55:	68 74 01 00 00       	push   0x174
c000eb5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb5e:	e8 7d da ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	83 c4 0c             	add    esp,0xc
c000eb69:	c3                   	ret    

c000eb6a <LogicalDisk::open(int, int, void*)>:
c000eb6a:	83 ec 18             	sub    esp,0x18
c000eb6d:	68 48 1d 02 c0       	push   0xc0021d48
c000eb72:	e8 8c 3a 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000eb77:	83 c8 ff             	or     eax,0xffffffff
c000eb7a:	83 c4 1c             	add    esp,0x1c
c000eb7d:	c3                   	ret    

c000eb7e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000eb7e:	53                   	push   ebx
c000eb7f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000eb83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb8b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000eb91:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000eb97:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000eb9d:	77 10                	ja     c000ebaf <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000eb9f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000eba5:	89 d3                	mov    ebx,edx
c000eba7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ebad:	72 05                	jb     c000ebb4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ebaf:	83 c8 ff             	or     eax,0xffffffff
c000ebb2:	89 c2                	mov    edx,eax
c000ebb4:	5b                   	pop    ebx
c000ebb5:	c3                   	ret    

c000ebb6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ebb6:	56                   	push   esi
c000ebb7:	83 c8 ff             	or     eax,0xffffffff
c000ebba:	53                   	push   ebx
c000ebbb:	89 c2                	mov    edx,eax
c000ebbd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ebc1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ebc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ebc9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ebcf:	77 27                	ja     c000ebf8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ebd1:	89 d8                	mov    eax,ebx
c000ebd3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ebd9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ebdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebe4:	89 c2                	mov    edx,eax
c000ebe6:	73 10                	jae    c000ebf8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ebe8:	89 c8                	mov    eax,ecx
c000ebea:	89 da                	mov    edx,ebx
c000ebec:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ebf2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ebf8:	5b                   	pop    ebx
c000ebf9:	5e                   	pop    esi
c000ebfa:	c3                   	ret    
c000ebfb:	90                   	nop

c000ebfc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ebfc:	83 ec 1c             	sub    esp,0x1c
c000ebff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ec1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec22:	83 ec 08             	sub    esp,0x8
c000ec25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec29:	50                   	push   eax
c000ec2a:	e8 13 f1 ff ff       	call   c000dd42 <Device::Device(char const*)>
c000ec2f:	83 c4 10             	add    esp,0x10
c000ec32:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c000ec37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec3b:	89 10                	mov    DWORD PTR [eax],edx
c000ec3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec41:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ec48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec4c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ec53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec57:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ec61:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ec65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec6d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ec73:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ec79:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ec7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ec80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ec84:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ec8a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ec90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec98:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ec9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eca2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ecac:	90                   	nop
c000ecad:	83 c4 1c             	add    esp,0x1c
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <LogicalDisk::assignDriveLetter()>:
c000ecb2:	55                   	push   ebp
c000ecb3:	57                   	push   edi
c000ecb4:	56                   	push   esi
c000ecb5:	53                   	push   ebx
c000ecb6:	83 ec 14             	sub    esp,0x14
c000ecb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecbd:	8b 3d 00 65 02 c0    	mov    edi,DWORD PTR ds:0xc0026500
c000ecc3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ecc9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000eccd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ecd3:	8b 3d 04 65 02 c0    	mov    edi,DWORD PTR ds:0xc0026504
c000ecd9:	3c 01                	cmp    al,0x1
c000ecdb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ecdf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ece3:	19 c0                	sbb    eax,eax
c000ece5:	83 e0 02             	and    eax,0x2
c000ece8:	83 c0 41             	add    eax,0x41
c000eceb:	0f be e8             	movsx  ebp,al
c000ecee:	3c 43                	cmp    al,0x43
c000ecf0:	75 10                	jne    c000ed02 <LogicalDisk::assignDriveLetter()+0x50>
c000ecf2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ecf9:	75 5d                	jne    c000ed58 <LogicalDisk::assignDriveLetter()+0xa6>
c000ecfb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ed00:	75 56                	jne    c000ed58 <LogicalDisk::assignDriveLetter()+0xa6>
c000ed02:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ed05:	ba 01 00 00 00       	mov    edx,0x1
c000ed0a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ed0e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ed12:	d3 e2                	shl    edx,cl
c000ed14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed18:	89 d7                	mov    edi,edx
c000ed1a:	89 d6                	mov    esi,edx
c000ed1c:	c1 ff 1f             	sar    edi,0x1f
c000ed1f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ed23:	21 f9                	and    ecx,edi
c000ed25:	09 d1                	or     ecx,edx
c000ed27:	75 2f                	jne    c000ed58 <LogicalDisk::assignDriveLetter()+0xa6>
c000ed29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ed2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed31:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ed37:	09 f2                	or     edx,esi
c000ed39:	89 15 00 65 02 c0    	mov    DWORD PTR ds:0xc0026500,edx
c000ed3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed43:	09 fa                	or     edx,edi
c000ed45:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ed49:	89 15 04 65 02 c0    	mov    DWORD PTR ds:0xc0026504,edx
c000ed4f:	89 1c bd 20 65 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9ae0],ebx
c000ed56:	eb 08                	jmp    c000ed60 <LogicalDisk::assignDriveLetter()+0xae>
c000ed58:	45                   	inc    ebp
c000ed59:	40                   	inc    eax
c000ed5a:	3c 5b                	cmp    al,0x5b
c000ed5c:	75 90                	jne    c000ecee <LogicalDisk::assignDriveLetter()+0x3c>
c000ed5e:	31 c0                	xor    eax,eax
c000ed60:	83 c4 14             	add    esp,0x14
c000ed63:	5b                   	pop    ebx
c000ed64:	5e                   	pop    esi
c000ed65:	5f                   	pop    edi
c000ed66:	5d                   	pop    ebp
c000ed67:	c3                   	ret    

c000ed68 <LogicalDisk::mount()>:
c000ed68:	56                   	push   esi
c000ed69:	53                   	push   ebx
c000ed6a:	83 ec 1c             	sub    esp,0x1c
c000ed6d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000ed71:	8b 1d 98 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024098
c000ed77:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ed7e:	50                   	push   eax
c000ed7f:	68 6c 1d 02 c0       	push   0xc0021d6c
c000ed84:	e8 38 d9 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000ed89:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000ed93:	83 c4 10             	add    esp,0x10
c000ed96:	85 db                	test   ebx,ebx
c000ed98:	74 4e                	je     c000ede8 <LogicalDisk::mount()+0x80>
c000ed9a:	83 ec 0c             	sub    esp,0xc
c000ed9d:	68 8d 1d 02 c0       	push   0xc0021d8d
c000eda2:	e8 1a d9 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000eda7:	83 c4 0c             	add    esp,0xc
c000edaa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000edb1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000edb3:	83 e8 41             	sub    eax,0x41
c000edb6:	50                   	push   eax
c000edb7:	56                   	push   esi
c000edb8:	53                   	push   ebx
c000edb9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000edbc:	83 c4 10             	add    esp,0x10
c000edbf:	84 c0                	test   al,al
c000edc1:	74 20                	je     c000ede3 <LogicalDisk::mount()+0x7b>
c000edc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000edc7:	83 ec 0c             	sub    esp,0xc
c000edca:	68 a9 1d 02 c0       	push   0xc0021da9
c000edcf:	e8 ed d8 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000edd4:	83 c4 10             	add    esp,0x10
c000edd7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000eddd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ede1:	eb 07                	jmp    c000edea <LogicalDisk::mount()+0x82>
c000ede3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ede6:	eb ae                	jmp    c000ed96 <LogicalDisk::mount()+0x2e>
c000ede8:	31 c0                	xor    eax,eax
c000edea:	83 c4 14             	add    esp,0x14
c000eded:	5b                   	pop    ebx
c000edee:	5e                   	pop    esi
c000edef:	c3                   	ret    

c000edf0 <LogicalDisk::unmount()>:
c000edf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000edfe:	c3                   	ret    
c000edff:	90                   	nop

c000ee00 <LogicalDisk::eject()>:
c000ee00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee04:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee0a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee10:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ee13:	90                   	nop

c000ee14 <LogicalDisk::unassignDriveLetter()>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee1a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ee21:	84 c9                	test   cl,cl
c000ee23:	75 0f                	jne    c000ee34 <LogicalDisk::unassignDriveLetter()+0x20>
c000ee25:	c7 44 24 0c c2 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021dc2
c000ee2d:	5e                   	pop    esi
c000ee2e:	5f                   	pop    edi
c000ee2f:	e9 cf 37 00 00       	jmp    c0012603 <Krnl::panic(char const*)>
c000ee34:	83 e9 41             	sub    ecx,0x41
c000ee37:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ee3e:	b8 01 00 00 00       	mov    eax,0x1
c000ee43:	c7 04 8d 20 65 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9ae0],0x0
c000ee4e:	d3 e0                	shl    eax,cl
c000ee50:	89 c7                	mov    edi,eax
c000ee52:	f7 d0                	not    eax
c000ee54:	c1 ff 1f             	sar    edi,0x1f
c000ee57:	21 05 00 65 02 c0    	and    DWORD PTR ds:0xc0026500,eax
c000ee5d:	89 fe                	mov    esi,edi
c000ee5f:	f7 d6                	not    esi
c000ee61:	21 35 04 65 02 c0    	and    DWORD PTR ds:0xc0026504,esi
c000ee67:	5e                   	pop    esi
c000ee68:	5f                   	pop    edi
c000ee69:	c3                   	ret    

c000ee6a <LogicalDisk::read(unsigned long long, int, void*)>:
c000ee6a:	57                   	push   edi
c000ee6b:	56                   	push   esi
c000ee6c:	53                   	push   ebx
c000ee6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee7d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ee83:	77 41                	ja     c000eec6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ee85:	99                   	cdq    
c000ee86:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ee8c:	01 c8                	add    eax,ecx
c000ee8e:	11 da                	adc    edx,ebx
c000ee90:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ee96:	19 d7                	sbb    edi,edx
c000ee98:	72 33                	jb     c000eecd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ee9a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000eea0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000eea6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eeaa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000eeae:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000eeb4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000eeba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eebe:	5b                   	pop    ebx
c000eebf:	5e                   	pop    esi
c000eec0:	5f                   	pop    edi
c000eec1:	e9 34 0a 00 00       	jmp    c000f8fa <VCache::read(unsigned long long, int, void*)>
c000eec6:	b8 05 00 00 00       	mov    eax,0x5
c000eecb:	eb 05                	jmp    c000eed2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000eecd:	b8 07 00 00 00       	mov    eax,0x7
c000eed2:	5b                   	pop    ebx
c000eed3:	5e                   	pop    esi
c000eed4:	5f                   	pop    edi
c000eed5:	c3                   	ret    

c000eed6 <LogicalDisk::write(unsigned long long, int, void*)>:
c000eed6:	57                   	push   edi
c000eed7:	56                   	push   esi
c000eed8:	53                   	push   ebx
c000eed9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eedd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eee1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eee5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eee9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000eeef:	77 41                	ja     c000ef32 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000eef1:	99                   	cdq    
c000eef2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000eef8:	01 c8                	add    eax,ecx
c000eefa:	11 da                	adc    edx,ebx
c000eefc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ef02:	19 d7                	sbb    edi,edx
c000ef04:	72 33                	jb     c000ef39 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ef06:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ef0c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ef12:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ef16:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ef1a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ef20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ef26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	e9 ce 08 00 00       	jmp    c000f800 <VCache::write(unsigned long long, int, void*)>
c000ef32:	b8 05 00 00 00       	mov    eax,0x5
c000ef37:	eb 05                	jmp    c000ef3e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ef39:	b8 07 00 00 00       	mov    eax,0x7
c000ef3e:	5b                   	pop    ebx
c000ef3f:	5e                   	pop    esi
c000ef40:	5f                   	pop    edi
c000ef41:	c3                   	ret    
c000ef42:	66 90                	xchg   ax,ax

c000ef44 <Mouse::Mouse(char const*)>:
c000ef44:	83 ec 0c             	sub    esp,0xc
c000ef47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef4b:	83 ec 08             	sub    esp,0x8
c000ef4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef52:	50                   	push   eax
c000ef53:	e8 ea ed ff ff       	call   c000dd42 <Device::Device(char const*)>
c000ef58:	83 c4 10             	add    esp,0x10
c000ef5b:	ba 18 1e 02 c0       	mov    edx,0xc0021e18
c000ef60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef64:	89 10                	mov    DWORD PTR [eax],edx
c000ef66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef6a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ef74:	90                   	nop
c000ef75:	83 c4 0c             	add    esp,0xc
c000ef78:	c3                   	ret    
c000ef79:	90                   	nop
c000ef7a:	66 90                	xchg   ax,ax

c000ef7c <Mouse::~Mouse()>:
c000ef7c:	83 ec 0c             	sub    esp,0xc
c000ef7f:	ba 18 1e 02 c0       	mov    edx,0xc0021e18
c000ef84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef88:	89 10                	mov    DWORD PTR [eax],edx
c000ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef8e:	83 ec 0c             	sub    esp,0xc
c000ef91:	50                   	push   eax
c000ef92:	e8 a9 ea ff ff       	call   c000da40 <Device::~Device()>
c000ef97:	83 c4 10             	add    esp,0x10
c000ef9a:	90                   	nop
c000ef9b:	83 c4 0c             	add    esp,0xc
c000ef9e:	c3                   	ret    
c000ef9f:	90                   	nop

c000efa0 <Mouse::~Mouse()>:
c000efa0:	83 ec 0c             	sub    esp,0xc
c000efa3:	83 ec 0c             	sub    esp,0xc
c000efa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efaa:	e8 cd ff ff ff       	call   c000ef7c <Mouse::~Mouse()>
c000efaf:	83 c4 10             	add    esp,0x10
c000efb2:	83 ec 08             	sub    esp,0x8
c000efb5:	68 58 01 00 00       	push   0x158
c000efba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efbe:	e8 1d d6 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000efc3:	83 c4 10             	add    esp,0x10
c000efc6:	83 c4 0c             	add    esp,0xc
c000efc9:	c3                   	ret    

c000efca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000efca:	55                   	push   ebp
c000efcb:	57                   	push   edi
c000efcc:	56                   	push   esi
c000efcd:	53                   	push   ebx
c000efce:	81 ec 28 01 00 00    	sub    esp,0x128
c000efd4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000efdb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000efe2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000efe9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000eff0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eff4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000eff8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000efff:	e8 3a ee ff ff       	call   c000de3e <Device::getName()>
c000f004:	5a                   	pop    edx
c000f005:	59                   	pop    ecx
c000f006:	50                   	push   eax
c000f007:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000f00b:	55                   	push   ebp
c000f00c:	e8 53 15 ff ff       	call   c0000564 <strcpy>
c000f011:	5b                   	pop    ebx
c000f012:	58                   	pop    eax
c000f013:	68 3c 1e 02 c0       	push   0xc0021e3c
c000f018:	55                   	push   ebp
c000f019:	e8 86 16 ff ff       	call   c00006a4 <strcat>
c000f01e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000f025:	e8 55 a7 ff ff       	call   c000977f <malloc>
c000f02a:	83 c4 0c             	add    esp,0xc
c000f02d:	89 c3                	mov    ebx,eax
c000f02f:	57                   	push   edi
c000f030:	56                   	push   esi
c000f031:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f035:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f039:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000f040:	55                   	push   ebp
c000f041:	50                   	push   eax
c000f042:	e8 b5 fb ff ff       	call   c000ebfc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000f047:	83 c4 14             	add    esp,0x14
c000f04a:	53                   	push   ebx
c000f04b:	e8 62 fc ff ff       	call   c000ecb2 <LogicalDisk::assignDriveLetter()>
c000f050:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f053:	e8 10 fd ff ff       	call   c000ed68 <LogicalDisk::mount()>
c000f058:	58                   	pop    eax
c000f059:	5a                   	pop    edx
c000f05a:	53                   	push   ebx
c000f05b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f062:	e8 d7 ea ff ff       	call   c000db3e <Device::addChild(Device*)>
c000f067:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f06d:	5b                   	pop    ebx
c000f06e:	5e                   	pop    esi
c000f06f:	5f                   	pop    edi
c000f070:	5d                   	pop    ebp
c000f071:	c3                   	ret    

c000f072 <createPartitionsForDisk(PhysicalDisk*)>:
c000f072:	55                   	push   ebp
c000f073:	57                   	push   edi
c000f074:	56                   	push   esi
c000f075:	53                   	push   ebx
c000f076:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000f07c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000f083:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f089:	3d 00 02 00 00       	cmp    eax,0x200
c000f08e:	74 27                	je     c000f0b7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000f090:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000f096:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000f09c:	83 ec 10             	sub    esp,0x10
c000f09f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000f0a3:	99                   	cdq    
c000f0a4:	c1 e6 0a             	shl    esi,0xa
c000f0a7:	52                   	push   edx
c000f0a8:	89 fd                	mov    ebp,edi
c000f0aa:	50                   	push   eax
c000f0ab:	55                   	push   ebp
c000f0ac:	56                   	push   esi
c000f0ad:	e8 ee 09 01 00       	call   c001faa0 <__udivdi3>
c000f0b2:	e9 b1 00 00 00       	jmp    c000f168 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f0b7:	83 ec 0c             	sub    esp,0xc
c000f0ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0bc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000f0c0:	56                   	push   esi
c000f0c1:	6a 01                	push   0x1
c000f0c3:	6a 00                	push   0x0
c000f0c5:	6a 00                	push   0x0
c000f0c7:	53                   	push   ebx
c000f0c8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f0cb:	83 c4 20             	add    esp,0x20
c000f0ce:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000f0d6:	75 0a                	jne    c000f0e2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000f0d8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000f0e0:	74 2c                	je     c000f10e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000f0e2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f0e8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f0ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f0f4:	83 ec 10             	sub    esp,0x10
c000f0f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f0fb:	89 f7                	mov    edi,esi
c000f0fd:	c1 e0 0a             	shl    eax,0xa
c000f100:	c1 ff 1f             	sar    edi,0x1f
c000f103:	57                   	push   edi
c000f104:	56                   	push   esi
c000f105:	52                   	push   edx
c000f106:	50                   	push   eax
c000f107:	e8 94 09 01 00       	call   c001faa0 <__udivdi3>
c000f10c:	eb 5a                	jmp    c000f168 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f10e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000f115:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000f11c:	83 e1 7f             	and    ecx,0x7f
c000f11f:	83 e0 7f             	and    eax,0x7f
c000f122:	01 c1                	add    ecx,eax
c000f124:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000f12b:	83 e0 7f             	and    eax,0x7f
c000f12e:	01 c1                	add    ecx,eax
c000f130:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000f137:	83 e0 7f             	and    eax,0x7f
c000f13a:	00 c1                	add    cl,al
c000f13c:	74 41                	je     c000f17f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000f13e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f144:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f14a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f150:	83 ec 10             	sub    esp,0x10
c000f153:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f157:	89 f7                	mov    edi,esi
c000f159:	c1 e0 0a             	shl    eax,0xa
c000f15c:	c1 ff 1f             	sar    edi,0x1f
c000f15f:	57                   	push   edi
c000f160:	56                   	push   esi
c000f161:	52                   	push   edx
c000f162:	50                   	push   eax
c000f163:	e8 38 09 01 00       	call   c001faa0 <__udivdi3>
c000f168:	83 c4 14             	add    esp,0x14
c000f16b:	52                   	push   edx
c000f16c:	50                   	push   eax
c000f16d:	6a 00                	push   0x0
c000f16f:	6a 00                	push   0x0
c000f171:	53                   	push   ebx
c000f172:	e8 53 fe ff ff       	call   c000efca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f177:	83 c4 20             	add    esp,0x20
c000f17a:	e9 79 01 00 00       	jmp    c000f2f8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000f17f:	89 f0                	mov    eax,esi
c000f181:	31 f6                	xor    esi,esi
c000f183:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000f18a:	75 02                	jne    c000f18e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000f18c:	89 f1                	mov    ecx,esi
c000f18e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000f195:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000f19c:	c1 e2 08             	shl    edx,0x8
c000f19f:	c1 e7 10             	shl    edi,0x10
c000f1a2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000f1aa:	09 fa                	or     edx,edi
c000f1ac:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000f1b4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000f1bb:	83 c0 10             	add    eax,0x10
c000f1be:	09 fa                	or     edx,edi
c000f1c0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000f1c7:	c1 e7 18             	shl    edi,0x18
c000f1ca:	09 fa                	or     edx,edi
c000f1cc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000f1d3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000f1d7:	c1 e7 10             	shl    edi,0x10
c000f1da:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000f1e1:	c1 e2 08             	shl    edx,0x8
c000f1e4:	09 fa                	or     edx,edi
c000f1e6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000f1ed:	09 fa                	or     edx,edi
c000f1ef:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000f1f6:	c1 e7 18             	shl    edi,0x18
c000f1f9:	09 fa                	or     edx,edi
c000f1fb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000f1ff:	46                   	inc    esi
c000f200:	83 fe 04             	cmp    esi,0x4
c000f203:	0f 85 7a ff ff ff    	jne    c000f183 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000f209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f20d:	83 f0 01             	xor    eax,0x1
c000f210:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f214:	75 57                	jne    c000f26d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f216:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f21a:	83 f0 01             	xor    eax,0x1
c000f21d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000f221:	75 4a                	jne    c000f26d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000f223:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000f227:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000f22f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f23d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f243:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f249:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f24d:	89 f7                	mov    edi,esi
c000f24f:	c1 e0 0a             	shl    eax,0xa
c000f252:	c1 ff 1f             	sar    edi,0x1f
c000f255:	57                   	push   edi
c000f256:	56                   	push   esi
c000f257:	52                   	push   edx
c000f258:	50                   	push   eax
c000f259:	e8 42 08 01 00       	call   c001faa0 <__udivdi3>
c000f25e:	83 c4 10             	add    esp,0x10
c000f261:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f265:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f269:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000f26d:	84 c9                	test   cl,cl
c000f26f:	74 53                	je     c000f2c4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000f271:	0f b6 c9             	movzx  ecx,cl
c000f274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f27c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f280:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f284:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f288:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f28c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000f290:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000f294:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f298:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2a4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000f2a8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000f2ac:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000f2b0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000f2b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2b8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f2bc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000f2c0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000f2c4:	31 ed                	xor    ebp,ebp
c000f2c6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000f2ca:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000f2ce:	89 f8                	mov    eax,edi
c000f2d0:	09 f0                	or     eax,esi
c000f2d2:	74 1e                	je     c000f2f2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f2d4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000f2d8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000f2dc:	89 d1                	mov    ecx,edx
c000f2de:	09 c1                	or     ecx,eax
c000f2e0:	74 10                	je     c000f2f2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000f2e2:	83 ec 0c             	sub    esp,0xc
c000f2e5:	57                   	push   edi
c000f2e6:	56                   	push   esi
c000f2e7:	52                   	push   edx
c000f2e8:	50                   	push   eax
c000f2e9:	53                   	push   ebx
c000f2ea:	e8 db fc ff ff       	call   c000efca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000f2ef:	83 c4 20             	add    esp,0x20
c000f2f2:	45                   	inc    ebp
c000f2f3:	83 fd 04             	cmp    ebp,0x4
c000f2f6:	75 ce                	jne    c000f2c6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000f2f8:	81 c4 5c 02 00 00    	add    esp,0x25c
c000f2fe:	5b                   	pop    ebx
c000f2ff:	5e                   	pop    esi
c000f300:	5f                   	pop    edi
c000f301:	5d                   	pop    ebp
c000f302:	c3                   	ret    
c000f303:	90                   	nop

c000f304 <Serial::Serial(char const*)>:
c000f304:	83 ec 0c             	sub    esp,0xc
c000f307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f30b:	83 ec 08             	sub    esp,0x8
c000f30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f312:	50                   	push   eax
c000f313:	e8 2a ea ff ff       	call   c000dd42 <Device::Device(char const*)>
c000f318:	83 c4 10             	add    esp,0x10
c000f31b:	ba 50 1e 02 c0       	mov    edx,0xc0021e50
c000f320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f324:	89 10                	mov    DWORD PTR [eax],edx
c000f326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f32a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000f334:	90                   	nop
c000f335:	83 c4 0c             	add    esp,0xc
c000f338:	c3                   	ret    
c000f339:	90                   	nop
c000f33a:	66 90                	xchg   ax,ax

c000f33c <Serial::~Serial()>:
c000f33c:	83 ec 0c             	sub    esp,0xc
c000f33f:	ba 50 1e 02 c0       	mov    edx,0xc0021e50
c000f344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f348:	89 10                	mov    DWORD PTR [eax],edx
c000f34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f34e:	83 ec 0c             	sub    esp,0xc
c000f351:	50                   	push   eax
c000f352:	e8 e9 e6 ff ff       	call   c000da40 <Device::~Device()>
c000f357:	83 c4 10             	add    esp,0x10
c000f35a:	90                   	nop
c000f35b:	83 c4 0c             	add    esp,0xc
c000f35e:	c3                   	ret    
c000f35f:	90                   	nop

c000f360 <Serial::~Serial()>:
c000f360:	83 ec 0c             	sub    esp,0xc
c000f363:	83 ec 0c             	sub    esp,0xc
c000f366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f36a:	e8 cd ff ff ff       	call   c000f33c <Serial::~Serial()>
c000f36f:	83 c4 10             	add    esp,0x10
c000f372:	83 ec 08             	sub    esp,0x8
c000f375:	68 58 01 00 00       	push   0x158
c000f37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f37e:	e8 5d d2 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000f383:	83 c4 10             	add    esp,0x10
c000f386:	83 c4 0c             	add    esp,0xc
c000f389:	c3                   	ret    
c000f38a:	66 90                	xchg   ax,ax

c000f38c <Timer::Timer(char const*)>:
c000f38c:	83 ec 0c             	sub    esp,0xc
c000f38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f393:	83 ec 08             	sub    esp,0x8
c000f396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f39a:	50                   	push   eax
c000f39b:	e8 a2 e9 ff ff       	call   c000dd42 <Device::Device(char const*)>
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	ba 94 1e 02 c0       	mov    edx,0xc0021e94
c000f3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ac:	89 10                	mov    DWORD PTR [eax],edx
c000f3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000f3bc:	90                   	nop
c000f3bd:	83 c4 0c             	add    esp,0xc
c000f3c0:	c3                   	ret    
c000f3c1:	90                   	nop
c000f3c2:	66 90                	xchg   ax,ax

c000f3c4 <Timer::~Timer()>:
c000f3c4:	83 ec 0c             	sub    esp,0xc
c000f3c7:	ba 94 1e 02 c0       	mov    edx,0xc0021e94
c000f3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d0:	89 10                	mov    DWORD PTR [eax],edx
c000f3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d6:	83 ec 0c             	sub    esp,0xc
c000f3d9:	50                   	push   eax
c000f3da:	e8 61 e6 ff ff       	call   c000da40 <Device::~Device()>
c000f3df:	83 c4 10             	add    esp,0x10
c000f3e2:	90                   	nop
c000f3e3:	83 c4 0c             	add    esp,0xc
c000f3e6:	c3                   	ret    
c000f3e7:	90                   	nop

c000f3e8 <Timer::~Timer()>:
c000f3e8:	83 ec 0c             	sub    esp,0xc
c000f3eb:	83 ec 0c             	sub    esp,0xc
c000f3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3f2:	e8 cd ff ff ff       	call   c000f3c4 <Timer::~Timer()>
c000f3f7:	83 c4 10             	add    esp,0x10
c000f3fa:	83 ec 08             	sub    esp,0x8
c000f3fd:	68 5c 01 00 00       	push   0x15c
c000f402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f406:	e8 d5 d1 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000f40b:	83 c4 10             	add    esp,0x10
c000f40e:	83 c4 0c             	add    esp,0xc
c000f411:	c3                   	ret    

c000f412 <Timer::read()>:
c000f412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f416:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f41c:	c3                   	ret    

c000f41d <setupTimer(int)>:
c000f41d:	53                   	push   ebx
c000f41e:	83 ec 14             	sub    esp,0x14
c000f421:	68 5c 01 00 00       	push   0x15c
c000f426:	e8 54 a3 ff ff       	call   c000977f <malloc>
c000f42b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f42e:	89 c3                	mov    ebx,eax
c000f430:	e8 e7 ff 00 00       	call   c001f41c <PIT::PIT()>
c000f435:	58                   	pop    eax
c000f436:	5a                   	pop    edx
c000f437:	53                   	push   ebx
c000f438:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c000f43e:	e8 fb e6 ff ff       	call   c000db3e <Device::addChild(Device*)>
c000f443:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f445:	6a 00                	push   0x0
c000f447:	6a 00                	push   0x0
c000f449:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f44d:	53                   	push   ebx
c000f44e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f451:	89 d8                	mov    eax,ebx
c000f453:	83 c4 28             	add    esp,0x28
c000f456:	5b                   	pop    ebx
c000f457:	c3                   	ret    

c000f458 <timerHandler(unsigned int)>:
c000f458:	56                   	push   esi
c000f459:	53                   	push   ebx
c000f45a:	51                   	push   ecx
c000f45b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f45f:	01 05 8c 65 02 c0    	add    DWORD PTR ds:0xc002658c,eax
c000f465:	80 3d ad 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fad,0x0
c000f46c:	0f 84 4a 01 00 00    	je     c000f5bc <timerHandler(unsigned int)+0x164>
c000f472:	fa                   	cli    
c000f473:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c000f479:	83 ec 0c             	sub    esp,0xc
c000f47c:	ff 05 84 74 02 c0    	inc    DWORD PTR ds:0xc0027484
c000f482:	68 98 74 02 c0       	push   0xc0027498
c000f487:	e8 e4 0b 01 00       	call   c0020070 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	84 c0                	test   al,al
c000f491:	0f 85 a1 00 00 00    	jne    c000f538 <timerHandler(unsigned int)+0xe0>
c000f497:	83 ec 0c             	sub    esp,0xc
c000f49a:	68 98 74 02 c0       	push   0xc0027498
c000f49f:	e8 e8 0b 01 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f4a4:	83 c4 10             	add    esp,0x10
c000f4a7:	89 c6                	mov    esi,eax
c000f4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4ac:	83 ec 0c             	sub    esp,0xc
c000f4af:	68 98 74 02 c0       	push   0xc0027498
c000f4b4:	e8 d3 0b 01 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f4b9:	c7 04 24 98 74 02 c0 	mov    DWORD PTR [esp],0xc0027498
c000f4c0:	89 c3                	mov    ebx,eax
c000f4c2:	e8 cd 0b 01 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000f4c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	3b 05 8c 65 02 c0    	cmp    eax,DWORD PTR ds:0xc002658c
c000f4d3:	77 23                	ja     c000f4f8 <timerHandler(unsigned int)+0xa0>
c000f4d5:	83 ec 0c             	sub    esp,0xc
c000f4d8:	53                   	push   ebx
c000f4d9:	e8 16 6b 00 00       	call   c0015ff4 <unblockTask(ThreadControlBlock*)>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	39 de                	cmp    esi,ebx
c000f4e3:	75 27                	jne    c000f50c <timerHandler(unsigned int)+0xb4>
c000f4e5:	83 ec 0c             	sub    esp,0xc
c000f4e8:	68 98 74 02 c0       	push   0xc0027498
c000f4ed:	e8 9a 0b 01 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f4f2:	89 c6                	mov    esi,eax
c000f4f4:	eb 12                	jmp    c000f508 <timerHandler(unsigned int)+0xb0>
c000f4f6:	66 90                	xchg   ax,ax
c000f4f8:	52                   	push   edx
c000f4f9:	52                   	push   edx
c000f4fa:	53                   	push   ebx
c000f4fb:	68 98 74 02 c0       	push   0xc0027498
c000f500:	e8 47 0c 01 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000f505:	8d 76 00             	lea    esi,[esi+0x0]
c000f508:	83 c4 10             	add    esp,0x10
c000f50b:	90                   	nop
c000f50c:	83 ec 0c             	sub    esp,0xc
c000f50f:	68 98 74 02 c0       	push   0xc0027498
c000f514:	e8 57 0b 01 00       	call   c0020070 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000f519:	83 c4 10             	add    esp,0x10
c000f51c:	84 c0                	test   al,al
c000f51e:	75 18                	jne    c000f538 <timerHandler(unsigned int)+0xe0>
c000f520:	83 ec 0c             	sub    esp,0xc
c000f523:	68 98 74 02 c0       	push   0xc0027498
c000f528:	e8 5f 0b 01 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000f52d:	83 c4 10             	add    esp,0x10
c000f530:	39 f0                	cmp    eax,esi
c000f532:	0f 85 74 ff ff ff    	jne    c000f4ac <timerHandler(unsigned int)+0x54>
c000f538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f53d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000f541:	74 41                	je     c000f584 <timerHandler(unsigned int)+0x12c>
c000f543:	80 3d ac 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fac,0x0
c000f54a:	74 38                	je     c000f584 <timerHandler(unsigned int)+0x12c>
c000f54c:	fa                   	cli    
c000f54d:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c000f553:	a1 8c 65 02 c0       	mov    eax,ds:0xc002658c
c000f558:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f55e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000f561:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000f567:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000f56a:	72 08                	jb     c000f574 <timerHandler(unsigned int)+0x11c>
c000f56c:	e8 c7 65 00 00       	call   c0015b38 <schedule()>
c000f571:	8d 76 00             	lea    esi,[esi+0x0]
c000f574:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000f579:	48                   	dec    eax
c000f57a:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000f57f:	75 03                	jne    c000f584 <timerHandler(unsigned int)+0x12c>
c000f581:	fb                   	sti    
c000f582:	66 90                	xchg   ax,ax
c000f584:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c000f589:	48                   	dec    eax
c000f58a:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c000f58f:	75 1b                	jne    c000f5ac <timerHandler(unsigned int)+0x154>
c000f591:	83 3d 80 74 02 c0 00 	cmp    DWORD PTR ds:0xc0027480,0x0
c000f598:	74 12                	je     c000f5ac <timerHandler(unsigned int)+0x154>
c000f59a:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c000f5a4:	e8 8f 65 00 00       	call   c0015b38 <schedule()>
c000f5a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f5ac:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c000f5b1:	48                   	dec    eax
c000f5b2:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c000f5b7:	75 03                	jne    c000f5bc <timerHandler(unsigned int)+0x164>
c000f5b9:	fb                   	sti    
c000f5ba:	66 90                	xchg   ax,ax
c000f5bc:	58                   	pop    eax
c000f5bd:	5b                   	pop    ebx
c000f5be:	5e                   	pop    esi
c000f5bf:	c3                   	ret    

c000f5c0 <VCache::VCache(PhysicalDisk*)>:
c000f5c0:	53                   	push   ebx
c000f5c1:	83 ec 18             	sub    esp,0x18
c000f5c4:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c000f5c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5cd:	89 10                	mov    DWORD PTR [eax],edx
c000f5cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5d3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000f5da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5de:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000f5e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5e9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000f5f0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000f5f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5fb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000f602:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000f609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f60d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000f614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f618:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f61c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f620:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000f627:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000f62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f632:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f63a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000f63e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f642:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f64a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f651:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000f659:	83 ec 0c             	sub    esp,0xc
c000f65c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f660:	e8 1a a1 ff ff       	call   c000977f <malloc>
c000f665:	83 c4 10             	add    esp,0x10
c000f668:	89 c3                	mov    ebx,eax
c000f66a:	83 ec 0c             	sub    esp,0xc
c000f66d:	53                   	push   ebx
c000f66e:	e8 95 62 00 00       	call   c0015908 <Mutex::Mutex()>
c000f673:	83 c4 10             	add    esp,0x10
c000f676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f67a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f67d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f681:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f685:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000f688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f68c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000f693:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f697:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000f69d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6a1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f6a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6a8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000f6ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f6b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f6b8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000f6bb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000f6be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000f6c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f6d0:	05 00 01 00 00       	add    eax,0x100
c000f6d5:	c1 e0 04             	shl    eax,0x4
c000f6d8:	83 ec 0c             	sub    esp,0xc
c000f6db:	50                   	push   eax
c000f6dc:	e8 9e a0 ff ff       	call   c000977f <malloc>
c000f6e1:	83 c4 10             	add    esp,0x10
c000f6e4:	89 c2                	mov    edx,eax
c000f6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6f1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000f6f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6fc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000f700:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f704:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f70a:	c1 e0 06             	shl    eax,0x6
c000f70d:	83 ec 0c             	sub    esp,0xc
c000f710:	50                   	push   eax
c000f711:	e8 69 a0 ff ff       	call   c000977f <malloc>
c000f716:	83 c4 10             	add    esp,0x10
c000f719:	89 c2                	mov    edx,eax
c000f71b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f71f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000f722:	90                   	nop
c000f723:	83 c4 18             	add    esp,0x18
c000f726:	5b                   	pop    ebx
c000f727:	c3                   	ret    

c000f728 <VCache::invalidateReadBuffer()>:
c000f728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f72c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000f732:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000f736:	c3                   	ret    
c000f737:	90                   	nop

c000f738 <VCache::writeWriteBuffer()>:
c000f738:	53                   	push   ebx
c000f739:	83 ec 08             	sub    esp,0x8
c000f73c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f740:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f744:	74 1e                	je     c000f764 <VCache::writeWriteBuffer()+0x2c>
c000f746:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f749:	83 ec 0c             	sub    esp,0xc
c000f74c:	8b 10                	mov    edx,DWORD PTR [eax]
c000f74e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f751:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f754:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f757:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f75a:	50                   	push   eax
c000f75b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f75e:	83 c4 20             	add    esp,0x20
c000f761:	8d 76 00             	lea    esi,[esi+0x0]
c000f764:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000f76b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000f772:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000f776:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000f77d:	83 c4 08             	add    esp,0x8
c000f780:	5b                   	pop    ebx
c000f781:	c3                   	ret    
c000f782:	66 90                	xchg   ax,ax

c000f784 <VCache::~VCache()>:
c000f784:	83 ec 0c             	sub    esp,0xc
c000f787:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c000f78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f790:	89 10                	mov    DWORD PTR [eax],edx
c000f792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f796:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000f799:	84 c0                	test   al,al
c000f79b:	74 0f                	je     c000f7ac <VCache::~VCache()+0x28>
c000f79d:	83 ec 0c             	sub    esp,0xc
c000f7a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7a4:	e8 8f ff ff ff       	call   c000f738 <VCache::writeWriteBuffer()>
c000f7a9:	83 c4 10             	add    esp,0x10
c000f7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f7b3:	83 ec 0c             	sub    esp,0xc
c000f7b6:	50                   	push   eax
c000f7b7:	e8 d3 9f ff ff       	call   c000978f <free>
c000f7bc:	83 c4 10             	add    esp,0x10
c000f7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7c6:	83 ec 0c             	sub    esp,0xc
c000f7c9:	50                   	push   eax
c000f7ca:	e8 c0 9f ff ff       	call   c000978f <free>
c000f7cf:	83 c4 10             	add    esp,0x10
c000f7d2:	90                   	nop
c000f7d3:	83 c4 0c             	add    esp,0xc
c000f7d6:	c3                   	ret    
c000f7d7:	90                   	nop

c000f7d8 <VCache::~VCache()>:
c000f7d8:	83 ec 0c             	sub    esp,0xc
c000f7db:	83 ec 0c             	sub    esp,0xc
c000f7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7e2:	e8 9d ff ff ff       	call   c000f784 <VCache::~VCache()>
c000f7e7:	83 c4 10             	add    esp,0x10
c000f7ea:	83 ec 08             	sub    esp,0x8
c000f7ed:	6a 44                	push   0x44
c000f7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7f3:	e8 e8 cd ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000f7f8:	83 c4 10             	add    esp,0x10
c000f7fb:	83 c4 0c             	add    esp,0xc
c000f7fe:	c3                   	ret    
c000f7ff:	90                   	nop

c000f800 <VCache::write(unsigned long long, int, void*)>:
c000f800:	55                   	push   ebp
c000f801:	31 c0                	xor    eax,eax
c000f803:	57                   	push   edi
c000f804:	56                   	push   esi
c000f805:	53                   	push   ebx
c000f806:	83 ec 0c             	sub    esp,0xc
c000f809:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f80d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f811:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f815:	8d 76 00             	lea    esi,[esi+0x0]
c000f818:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000f81c:	7d 1a                	jge    c000f838 <VCache::write(unsigned long long, int, void*)+0x38>
c000f81e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f821:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f827:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f82b:	0f af c8             	imul   ecx,eax
c000f82e:	01 ca                	add    edx,ecx
c000f830:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f832:	40                   	inc    eax
c000f833:	eb e3                	jmp    c000f818 <VCache::write(unsigned long long, int, void*)+0x18>
c000f835:	8d 76 00             	lea    esi,[esi+0x0]
c000f838:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f83c:	74 0a                	je     c000f848 <VCache::write(unsigned long long, int, void*)+0x48>
c000f83e:	53                   	push   ebx
c000f83f:	e8 e4 fe ff ff       	call   c000f728 <VCache::invalidateReadBuffer()>
c000f844:	58                   	pop    eax
c000f845:	8d 76 00             	lea    esi,[esi+0x0]
c000f848:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f84c:	74 5e                	je     c000f8ac <VCache::write(unsigned long long, int, void*)+0xac>
c000f84e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000f851:	89 e8                	mov    eax,ebp
c000f853:	99                   	cdq    
c000f854:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000f857:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000f85a:	89 c1                	mov    ecx,eax
c000f85c:	89 d0                	mov    eax,edx
c000f85e:	31 f1                	xor    ecx,esi
c000f860:	31 f8                	xor    eax,edi
c000f862:	09 c1                	or     ecx,eax
c000f864:	75 3a                	jne    c000f8a0 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f866:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000f86b:	75 33                	jne    c000f8a0 <VCache::write(unsigned long long, int, void*)+0xa0>
c000f86d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f870:	89 ef                	mov    edi,ebp
c000f872:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f878:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f87c:	0f af f9             	imul   edi,ecx
c000f87f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000f882:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f884:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000f887:	40                   	inc    eax
c000f888:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000f88b:	83 f8 40             	cmp    eax,0x40
c000f88e:	75 60                	jne    c000f8f0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f890:	83 ec 0c             	sub    esp,0xc
c000f893:	53                   	push   ebx
c000f894:	e8 9f fe ff ff       	call   c000f738 <VCache::writeWriteBuffer()>
c000f899:	83 c4 10             	add    esp,0x10
c000f89c:	eb 52                	jmp    c000f8f0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f89e:	66 90                	xchg   ax,ax
c000f8a0:	83 ec 0c             	sub    esp,0xc
c000f8a3:	53                   	push   ebx
c000f8a4:	e8 8f fe ff ff       	call   c000f738 <VCache::writeWriteBuffer()>
c000f8a9:	83 c4 10             	add    esp,0x10
c000f8ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f8af:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000f8b4:	7f 22                	jg     c000f8d8 <VCache::write(unsigned long long, int, void*)+0xd8>
c000f8b6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000f8b9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000f8bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f8c0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000f8c4:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000f8c7:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000f8ca:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f8d0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000f8d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8d6:	eb 18                	jmp    c000f8f0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000f8d8:	83 ec 0c             	sub    esp,0xc
c000f8db:	8b 10                	mov    edx,DWORD PTR [eax]
c000f8dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f8e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f8e5:	57                   	push   edi
c000f8e6:	56                   	push   esi
c000f8e7:	50                   	push   eax
c000f8e8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000f8eb:	83 c4 20             	add    esp,0x20
c000f8ee:	66 90                	xchg   ax,ax
c000f8f0:	83 c4 0c             	add    esp,0xc
c000f8f3:	31 c0                	xor    eax,eax
c000f8f5:	5b                   	pop    ebx
c000f8f6:	5e                   	pop    esi
c000f8f7:	5f                   	pop    edi
c000f8f8:	5d                   	pop    ebp
c000f8f9:	c3                   	ret    

c000f8fa <VCache::read(unsigned long long, int, void*)>:
c000f8fa:	55                   	push   ebp
c000f8fb:	31 c0                	xor    eax,eax
c000f8fd:	57                   	push   edi
c000f8fe:	56                   	push   esi
c000f8ff:	53                   	push   ebx
c000f900:	83 ec 1c             	sub    esp,0x1c
c000f903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f907:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000f90b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000f90f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000f913:	90                   	nop
c000f914:	39 e8                	cmp    eax,ebp
c000f916:	7d 18                	jge    c000f930 <VCache::read(unsigned long long, int, void*)+0x36>
c000f918:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000f91b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000f921:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f925:	0f af c8             	imul   ecx,eax
c000f928:	01 ca                	add    edx,ecx
c000f92a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f92c:	40                   	inc    eax
c000f92d:	eb e5                	jmp    c000f914 <VCache::read(unsigned long long, int, void*)+0x1a>
c000f92f:	90                   	nop
c000f930:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000f934:	74 0e                	je     c000f944 <VCache::read(unsigned long long, int, void*)+0x4a>
c000f936:	83 ec 0c             	sub    esp,0xc
c000f939:	53                   	push   ebx
c000f93a:	e8 f9 fd ff ff       	call   c000f738 <VCache::writeWriteBuffer()>
c000f93f:	83 c4 10             	add    esp,0x10
c000f942:	66 90                	xchg   ax,ax
c000f944:	83 fd 01             	cmp    ebp,0x1
c000f947:	0f 85 87 00 00 00    	jne    c000f9d4 <VCache::read(unsigned long long, int, void*)+0xda>
c000f94d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f954:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000f95b:	75 77                	jne    c000f9d4 <VCache::read(unsigned long long, int, void*)+0xda>
c000f95d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000f960:	89 e9                	mov    ecx,ebp
c000f962:	f7 d9                	neg    ecx
c000f964:	89 c8                	mov    eax,ecx
c000f966:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f96a:	c1 f8 1f             	sar    eax,0x1f
c000f96d:	21 f1                	and    ecx,esi
c000f96f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f973:	89 c8                	mov    eax,ecx
c000f975:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f979:	21 f9                	and    ecx,edi
c000f97b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000f97f:	89 ca                	mov    edx,ecx
c000f981:	74 0d                	je     c000f990 <VCache::read(unsigned long long, int, void*)+0x96>
c000f983:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000f986:	75 08                	jne    c000f990 <VCache::read(unsigned long long, int, void*)+0x96>
c000f988:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000f98b:	74 27                	je     c000f9b4 <VCache::read(unsigned long long, int, void*)+0xba>
c000f98d:	8d 76 00             	lea    esi,[esi+0x0]
c000f990:	83 ec 0c             	sub    esp,0xc
c000f993:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000f997:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f99b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000f99e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000f9a1:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000f9a3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f9a6:	55                   	push   ebp
c000f9a7:	52                   	push   edx
c000f9a8:	50                   	push   eax
c000f9a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f9ad:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f9b0:	83 c4 20             	add    esp,0x20
c000f9b3:	90                   	nop
c000f9b4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f9b7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000f9bb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000f9c1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000f9c4:	48                   	dec    eax
c000f9c5:	21 c6                	and    esi,eax
c000f9c7:	0f af f1             	imul   esi,ecx
c000f9ca:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000f9cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9cf:	eb 23                	jmp    c000f9f4 <VCache::read(unsigned long long, int, void*)+0xfa>
c000f9d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9d4:	83 ec 0c             	sub    esp,0xc
c000f9d7:	53                   	push   ebx
c000f9d8:	e8 4b fd ff ff       	call   c000f728 <VCache::invalidateReadBuffer()>
c000f9dd:	5a                   	pop    edx
c000f9de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f9e1:	8b 10                	mov    edx,DWORD PTR [eax]
c000f9e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f9e7:	55                   	push   ebp
c000f9e8:	57                   	push   edi
c000f9e9:	56                   	push   esi
c000f9ea:	50                   	push   eax
c000f9eb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000f9ee:	83 c4 20             	add    esp,0x20
c000f9f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9f4:	83 c4 1c             	add    esp,0x1c
c000f9f7:	31 c0                	xor    eax,eax
c000f9f9:	5b                   	pop    ebx
c000f9fa:	5e                   	pop    esi
c000f9fb:	5f                   	pop    edi
c000f9fc:	5d                   	pop    ebp
c000f9fd:	c3                   	ret    

c000f9fe <Video::putrect(int, int, int, int, unsigned int)>:
c000f9fe:	55                   	push   ebp
c000f9ff:	57                   	push   edi
c000fa00:	56                   	push   esi
c000fa01:	53                   	push   ebx
c000fa02:	83 ec 1c             	sub    esp,0x1c
c000fa05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000fa09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa0d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000fa11:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fa15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fa19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa1d:	01 df                	add    edi,ebx
c000fa1f:	39 fb                	cmp    ebx,edi
c000fa21:	7d 1f                	jge    c000fa42 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000fa23:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fa27:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000fa2b:	7d 12                	jge    c000fa3f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000fa2d:	8b 16                	mov    edx,DWORD PTR [esi]
c000fa2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fa33:	53                   	push   ebx
c000fa34:	55                   	push   ebp
c000fa35:	45                   	inc    ebp
c000fa36:	56                   	push   esi
c000fa37:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fa3a:	83 c4 10             	add    esp,0x10
c000fa3d:	eb e8                	jmp    c000fa27 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000fa3f:	43                   	inc    ebx
c000fa40:	eb dd                	jmp    c000fa1f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000fa42:	83 c4 1c             	add    esp,0x1c
c000fa45:	5b                   	pop    ebx
c000fa46:	5e                   	pop    esi
c000fa47:	5f                   	pop    edi
c000fa48:	5d                   	pop    ebp
c000fa49:	c3                   	ret    

c000fa4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000fa4a:	55                   	push   ebp
c000fa4b:	57                   	push   edi
c000fa4c:	31 ff                	xor    edi,edi
c000fa4e:	56                   	push   esi
c000fa4f:	53                   	push   ebx
c000fa50:	83 ec 1c             	sub    esp,0x1c
c000fa53:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000fa57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fa5b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000fa62:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000fa67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa6b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000fa6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000fa73:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000fa76:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fa7a:	01 f9                	add    ecx,edi
c000fa7c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000fa80:	7d 2f                	jge    c000fab1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000fa82:	31 f6                	xor    esi,esi
c000fa84:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000fa88:	01 f2                	add    edx,esi
c000fa8a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000fa8e:	7d 1a                	jge    c000faaa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000fa90:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fa93:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000fa96:	46                   	inc    esi
c000fa97:	51                   	push   ecx
c000fa98:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fa9c:	52                   	push   edx
c000fa9d:	55                   	push   ebp
c000fa9e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000faa1:	83 c4 10             	add    esp,0x10
c000faa4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faa8:	eb da                	jmp    c000fa84 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000faaa:	47                   	inc    edi
c000faab:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000faaf:	eb c5                	jmp    c000fa76 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000fab1:	83 c4 1c             	add    esp,0x1c
c000fab4:	5b                   	pop    ebx
c000fab5:	5e                   	pop    esi
c000fab6:	5f                   	pop    edi
c000fab7:	5d                   	pop    ebp
c000fab8:	c3                   	ret    
c000fab9:	90                   	nop

c000faba <Video::blit(unsigned int*, int, int, int, int)>:
c000faba:	55                   	push   ebp
c000fabb:	57                   	push   edi
c000fabc:	56                   	push   esi
c000fabd:	53                   	push   ebx
c000fabe:	83 ec 1c             	sub    esp,0x1c
c000fac1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fac5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fac9:	85 c0                	test   eax,eax
c000facb:	79 02                	jns    c000facf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000facd:	31 c0                	xor    eax,eax
c000facf:	c1 e0 02             	shl    eax,0x2
c000fad2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000fad6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fada:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fade:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000fae2:	39 d8                	cmp    eax,ebx
c000fae4:	7e 49                	jle    c000fb2f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000fae6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000faec:	7c 41                	jl     c000fb2f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000faee:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000faf2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000faf6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fafa:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000fafe:	39 f9                	cmp    ecx,edi
c000fb00:	7e 22                	jle    c000fb24 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000fb02:	83 c5 04             	add    ebp,0x4
c000fb05:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000fb0b:	7c 14                	jl     c000fb21 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000fb0d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000fb0f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000fb12:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000fb16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000fb1a:	56                   	push   esi
c000fb1b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000fb1e:	83 c4 10             	add    esp,0x10
c000fb21:	47                   	inc    edi
c000fb22:	eb d2                	jmp    c000faf6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000fb24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb28:	43                   	inc    ebx
c000fb29:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000fb2d:	eb ab                	jmp    c000fada <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000fb2f:	83 c4 1c             	add    esp,0x1c
c000fb32:	5b                   	pop    ebx
c000fb33:	5e                   	pop    esi
c000fb34:	5f                   	pop    edi
c000fb35:	5d                   	pop    ebp
c000fb36:	c3                   	ret    
c000fb37:	90                   	nop

c000fb38 <Video::clearScreen(unsigned int)>:
c000fb38:	57                   	push   edi
c000fb39:	56                   	push   esi
c000fb3a:	53                   	push   ebx
c000fb3b:	31 db                	xor    ebx,ebx
c000fb3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb41:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000fb47:	7e 1f                	jle    c000fb68 <Video::clearScreen(unsigned int)+0x30>
c000fb49:	31 ff                	xor    edi,edi
c000fb4b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000fb51:	7e 12                	jle    c000fb65 <Video::clearScreen(unsigned int)+0x2d>
c000fb53:	8b 06                	mov    eax,DWORD PTR [esi]
c000fb55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb59:	53                   	push   ebx
c000fb5a:	57                   	push   edi
c000fb5b:	47                   	inc    edi
c000fb5c:	56                   	push   esi
c000fb5d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fb60:	83 c4 10             	add    esp,0x10
c000fb63:	eb e6                	jmp    c000fb4b <Video::clearScreen(unsigned int)+0x13>
c000fb65:	43                   	inc    ebx
c000fb66:	eb d9                	jmp    c000fb41 <Video::clearScreen(unsigned int)+0x9>
c000fb68:	5b                   	pop    ebx
c000fb69:	5e                   	pop    esi
c000fb6a:	5f                   	pop    edi
c000fb6b:	c3                   	ret    

c000fb6c <Video::putpixel(int, int, unsigned int)>:
c000fb6c:	c7 44 24 04 cc 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ecc
c000fb74:	e9 8a 2a 00 00       	jmp    c0012603 <Krnl::panic(char const*)>
c000fb79:	90                   	nop

c000fb7a <Video::Video(char const*)>:
c000fb7a:	83 ec 0c             	sub    esp,0xc
c000fb7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb81:	83 ec 08             	sub    esp,0x8
c000fb84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb88:	50                   	push   eax
c000fb89:	e8 b4 e1 ff ff       	call   c000dd42 <Device::Device(char const*)>
c000fb8e:	83 c4 10             	add    esp,0x10
c000fb91:	ba 3c 1f 02 c0       	mov    edx,0xc0021f3c
c000fb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb9a:	89 10                	mov    DWORD PTR [eax],edx
c000fb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000fbaa:	90                   	nop
c000fbab:	83 c4 0c             	add    esp,0xc
c000fbae:	c3                   	ret    
c000fbaf:	90                   	nop

c000fbb0 <Video::~Video()>:
c000fbb0:	83 ec 0c             	sub    esp,0xc
c000fbb3:	ba 3c 1f 02 c0       	mov    edx,0xc0021f3c
c000fbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbbc:	89 10                	mov    DWORD PTR [eax],edx
c000fbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbc2:	83 ec 0c             	sub    esp,0xc
c000fbc5:	50                   	push   eax
c000fbc6:	e8 75 de ff ff       	call   c000da40 <Device::~Device()>
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	90                   	nop
c000fbcf:	83 c4 0c             	add    esp,0xc
c000fbd2:	c3                   	ret    
c000fbd3:	90                   	nop

c000fbd4 <Video::~Video()>:
c000fbd4:	83 ec 0c             	sub    esp,0xc
c000fbd7:	83 ec 0c             	sub    esp,0xc
c000fbda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbde:	e8 cd ff ff ff       	call   c000fbb0 <Video::~Video()>
c000fbe3:	83 c4 10             	add    esp,0x10
c000fbe6:	83 ec 08             	sub    esp,0x8
c000fbe9:	68 64 01 00 00       	push   0x164
c000fbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbf2:	e8 e9 c9 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c000fbf7:	83 c4 10             	add    esp,0x10
c000fbfa:	83 c4 0c             	add    esp,0xc
c000fbfd:	c3                   	ret    

c000fbfe <Video::isMonochrome()>:
c000fbfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc02:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000fc08:	c3                   	ret    
c000fc09:	90                   	nop

c000fc0a <Video::getWidth()>:
c000fc0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000fc14:	c3                   	ret    
c000fc15:	90                   	nop

c000fc16 <Video::getHeight()>:
c000fc16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc1a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fc20:	c3                   	ret    
c000fc21:	90                   	nop

c000fc22 <Video::drawCursor(int, int, unsigned char*, int)>:
c000fc22:	55                   	push   ebp
c000fc23:	57                   	push   edi
c000fc24:	56                   	push   esi
c000fc25:	53                   	push   ebx
c000fc26:	83 ec 2c             	sub    esp,0x2c
c000fc29:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000fc2d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fc31:	83 f8 01             	cmp    eax,0x1
c000fc34:	19 c9                	sbb    ecx,ecx
c000fc36:	31 db                	xor    ebx,ebx
c000fc38:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fc3c:	89 cd                	mov    ebp,ecx
c000fc3e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000fc46:	f7 d5                	not    ebp
c000fc48:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000fc4e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000fc52:	01 d8                	add    eax,ebx
c000fc54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc58:	56                   	push   esi
c000fc59:	e8 b8 ff ff ff       	call   c000fc16 <Video::getHeight()>
c000fc5e:	59                   	pop    ecx
c000fc5f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fc63:	7e 70                	jle    c000fcd5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000fc65:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fc69:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000fc6d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000fc70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fc74:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fc78:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000fc7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc83:	89 f8                	mov    eax,edi
c000fc85:	83 c0 20             	add    eax,0x20
c000fc88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fc8c:	56                   	push   esi
c000fc8d:	e8 78 ff ff ff       	call   c000fc0a <Video::getWidth()>
c000fc92:	5a                   	pop    edx
c000fc93:	39 c7                	cmp    edi,eax
c000fc95:	7d 34                	jge    c000fccb <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000fc97:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000fc9c:	74 05                	je     c000fca3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000fc9e:	8b 06                	mov    eax,DWORD PTR [esi]
c000fca0:	55                   	push   ebp
c000fca1:	eb 0d                	jmp    c000fcb0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000fca3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000fca8:	74 12                	je     c000fcbc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000fcaa:	8b 06                	mov    eax,DWORD PTR [esi]
c000fcac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcb0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcb4:	57                   	push   edi
c000fcb5:	56                   	push   esi
c000fcb6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fcb9:	83 c4 10             	add    esp,0x10
c000fcbc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000fcc0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000fcc4:	47                   	inc    edi
c000fcc5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000fcc9:	75 c1                	jne    c000fc8c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000fccb:	43                   	inc    ebx
c000fccc:	83 fb 20             	cmp    ebx,0x20
c000fccf:	0f 85 79 ff ff ff    	jne    c000fc4e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000fcd5:	83 c4 2c             	add    esp,0x2c
c000fcd8:	5b                   	pop    ebx
c000fcd9:	5e                   	pop    esi
c000fcda:	5f                   	pop    edi
c000fcdb:	5d                   	pop    ebp
c000fcdc:	c3                   	ret    
c000fcdd:	90                   	nop

c000fcde <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000fcde:	55                   	push   ebp
c000fcdf:	57                   	push   edi
c000fce0:	56                   	push   esi
c000fce1:	53                   	push   ebx
c000fce2:	83 ec 28             	sub    esp,0x28
c000fce5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000fce9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000fced:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000fcf1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000fcf5:	c1 e6 08             	shl    esi,0x8
c000fcf8:	01 c6                	add    esi,eax
c000fcfa:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000fcfe:	c1 e0 08             	shl    eax,0x8
c000fd01:	01 d0                	add    eax,edx
c000fd03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd0b:	0f af c6             	imul   eax,esi
c000fd0e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000fd15:	50                   	push   eax
c000fd16:	e8 64 9a ff ff       	call   c000977f <malloc>
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	89 c7                	mov    edi,eax
c000fd20:	85 c0                	test   eax,eax
c000fd22:	75 10                	jne    c000fd34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	68 ed 1e 02 c0       	push   0xc0021eed
c000fd2c:	e8 d2 28 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000fd31:	83 c4 10             	add    esp,0x10
c000fd34:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000fd37:	ba 12 00 00 00       	mov    edx,0x12
c000fd3c:	84 c0                	test   al,al
c000fd3e:	74 11                	je     c000fd51 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000fd40:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000fd44:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000fd48:	c1 fa 03             	sar    edx,0x3
c000fd4b:	0f af d1             	imul   edx,ecx
c000fd4e:	83 c2 12             	add    edx,0x12
c000fd51:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000fd55:	74 04                	je     c000fd5b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000fd57:	85 f6                	test   esi,esi
c000fd59:	75 12                	jne    c000fd6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000fd5b:	83 ec 0c             	sub    esp,0xc
c000fd5e:	68 fd 1e 02 c0       	push   0xc0021efd
c000fd63:	e8 59 c9 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000fd68:	e9 b8 00 00 00       	jmp    c000fe25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000fd6d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000fd71:	80 f9 02             	cmp    cl,0x2
c000fd74:	0f 85 96 00 00 00    	jne    c000fe10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000fd7a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000fd7f:	75 0e                	jne    c000fd8f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fd81:	84 c0                	test   al,al
c000fd83:	75 0a                	jne    c000fd8f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000fd85:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000fd88:	83 e8 18             	sub    eax,0x18
c000fd8b:	a8 f7                	test   al,0xf7
c000fd8d:	74 0a                	je     c000fd99 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000fd8f:	83 ec 0c             	sub    esp,0xc
c000fd92:	68 12 1f 02 c0       	push   0xc0021f12
c000fd97:	eb 7f                	jmp    c000fe18 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000fd99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fda1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000fda9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000fdad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fdb5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000fdb9:	75 0c                	jne    c000fdc7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000fdbb:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000fdc0:	c1 e0 18             	shl    eax,0x18
c000fdc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdc7:	45                   	inc    ebp
c000fdc8:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000fdcd:	c1 e1 10             	shl    ecx,0x10
c000fdd0:	89 c8                	mov    eax,ecx
c000fdd2:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000fdd7:	c1 e1 08             	shl    ecx,0x8
c000fdda:	09 c1                	or     ecx,eax
c000fddc:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000fde0:	09 c1                	or     ecx,eax
c000fde2:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000fde6:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000fdea:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000fdee:	c1 f8 03             	sar    eax,0x3
c000fdf1:	01 c2                	add    edx,eax
c000fdf3:	89 e8                	mov    eax,ebp
c000fdf5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000fdf9:	39 c6                	cmp    esi,eax
c000fdfb:	7f b0                	jg     c000fdad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000fdfd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fe01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe05:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000fe08:	7e 22                	jle    c000fe2c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000fe0a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000fe0e:	eb 99                	jmp    c000fda9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000fe10:	50                   	push   eax
c000fe11:	50                   	push   eax
c000fe12:	51                   	push   ecx
c000fe13:	68 20 1f 02 c0       	push   0xc0021f20
c000fe18:	e8 a4 c8 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c000fe1d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fe20:	e8 6a 99 ff ff       	call   c000978f <free>
c000fe25:	83 c4 10             	add    esp,0x10
c000fe28:	31 ff                	xor    edi,edi
c000fe2a:	eb 0f                	jmp    c000fe3b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000fe2c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fe30:	89 30                	mov    DWORD PTR [eax],esi
c000fe32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe36:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fe39:	89 30                	mov    DWORD PTR [eax],esi
c000fe3b:	83 c4 1c             	add    esp,0x1c
c000fe3e:	89 f8                	mov    eax,edi
c000fe40:	5b                   	pop    ebx
c000fe41:	5e                   	pop    esi
c000fe42:	5f                   	pop    edi
c000fe43:	5d                   	pop    ebp
c000fe44:	c3                   	ret    
c000fe45:	90                   	nop

c000fe46 <Video::putTGA(int, int, unsigned char*, int)>:
c000fe46:	55                   	push   ebp
c000fe47:	57                   	push   edi
c000fe48:	56                   	push   esi
c000fe49:	53                   	push   ebx
c000fe4a:	83 ec 28             	sub    esp,0x28
c000fe4d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fe51:	8d 44 24 18          	lea    eax,[esp+0x18]
c000fe55:	50                   	push   eax
c000fe56:	8d 44 24 18          	lea    eax,[esp+0x18]
c000fe5a:	50                   	push   eax
c000fe5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000fe5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000fe63:	56                   	push   esi
c000fe64:	e8 75 fe ff ff       	call   c000fcde <Video::tgaParse(unsigned char*, int, int*, int*)>
c000fe69:	83 c4 20             	add    esp,0x20
c000fe6c:	85 c0                	test   eax,eax
c000fe6e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000fe72:	74 35                	je     c000fea9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fe74:	89 c7                	mov    edi,eax
c000fe76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000fe7a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000fe7e:	39 d8                	cmp    eax,ebx
c000fe80:	7e 27                	jle    c000fea9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000fe82:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000fe86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe8a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fe8e:	39 e8                	cmp    eax,ebp
c000fe90:	7e 14                	jle    c000fea6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000fe92:	8b 06                	mov    eax,DWORD PTR [esi]
c000fe94:	83 c7 04             	add    edi,0x4
c000fe97:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000fe9a:	53                   	push   ebx
c000fe9b:	55                   	push   ebp
c000fe9c:	45                   	inc    ebp
c000fe9d:	56                   	push   esi
c000fe9e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fea1:	83 c4 10             	add    esp,0x10
c000fea4:	eb e0                	jmp    c000fe86 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000fea6:	43                   	inc    ebx
c000fea7:	eb cd                	jmp    c000fe76 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000fea9:	83 c4 1c             	add    esp,0x1c
c000feac:	5b                   	pop    ebx
c000fead:	5e                   	pop    esi
c000feae:	5f                   	pop    edi
c000feaf:	5d                   	pop    ebp
c000feb0:	c3                   	ret    
c000feb1:	66 90                	xchg   ax,ax
c000feb3:	90                   	nop

c000feb4 <ACPI::close(int, int, void*)>:
c000feb4:	83 ec 1c             	sub    esp,0x1c
c000feb7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000febf:	74 0b                	je     c000fecc <ACPI::close(int, int, void*)+0x18>
c000fec1:	b8 00 00 00 00       	mov    eax,0x0
c000fec6:	e9 99 00 00 00       	jmp    c000ff64 <ACPI::close(int, int, void*)+0xb0>
c000fecb:	90                   	nop
c000fecc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fed1:	75 29                	jne    c000fefc <ACPI::close(int, int, void*)+0x48>
c000fed3:	a1 a8 65 02 c0       	mov    eax,ds:0xc00265a8
c000fed8:	85 c0                	test   eax,eax
c000feda:	74 08                	je     c000fee4 <ACPI::close(int, int, void*)+0x30>
c000fedc:	a1 a8 65 02 c0       	mov    eax,ds:0xc00265a8
c000fee1:	ff d0                	call   eax
c000fee3:	90                   	nop
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	68 7c 1f 02 c0       	push   0xc0021f7c
c000feec:	e8 12 27 00 00       	call   c0012603 <Krnl::panic(char const*)>
c000fef1:	83 c4 10             	add    esp,0x10
c000fef4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fef9:	eb 69                	jmp    c000ff64 <ACPI::close(int, int, void*)+0xb0>
c000fefb:	90                   	nop
c000fefc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ff01:	75 59                	jne    c000ff5c <ACPI::close(int, int, void*)+0xa8>
c000ff03:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c000ff08:	85 c0                	test   eax,eax
c000ff0a:	74 08                	je     c000ff14 <ACPI::close(int, int, void*)+0x60>
c000ff0c:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c000ff11:	ff d0                	call   eax
c000ff13:	90                   	nop
c000ff14:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ff19:	8d 76 00             	lea    esi,[esi+0x0]
c000ff1c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ff21:	83 e0 02             	and    eax,0x2
c000ff24:	74 1e                	je     c000ff44 <ACPI::close(int, int, void*)+0x90>
c000ff26:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ff2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff31:	89 c2                	mov    edx,eax
c000ff33:	ec                   	in     al,dx
c000ff34:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ff38:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ff3c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ff40:	eb da                	jmp    c000ff1c <ACPI::close(int, int, void*)+0x68>
c000ff42:	66 90                	xchg   ax,ax
c000ff44:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ff4b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ff50:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ff54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff58:	ee                   	out    dx,al
c000ff59:	8d 76 00             	lea    esi,[esi+0x0]
c000ff5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff61:	8d 76 00             	lea    esi,[esi+0x0]
c000ff64:	83 c4 1c             	add    esp,0x1c
c000ff67:	c3                   	ret    

c000ff68 <findRSDP()>:
c000ff68:	83 ec 1c             	sub    esp,0x1c
c000ff6b:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000ff70:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000ff76:	83 e0 04             	and    eax,0x4
c000ff79:	84 c0                	test   al,al
c000ff7b:	75 07                	jne    c000ff84 <findRSDP()+0x1c>
c000ff7d:	b8 00 00 00 00       	mov    eax,0x0
c000ff82:	eb 70                	jmp    c000fff4 <findRSDP()+0x8c>
c000ff84:	a1 d8 3f 02 c0       	mov    eax,ds:0xc0023fd8
c000ff89:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ff8e:	7f 1c                	jg     c000ffac <findRSDP()+0x44>
c000ff90:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000ff95:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ff9b:	83 e2 fb             	and    edx,0xfffffffb
c000ff9e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ffa4:	b8 00 00 00 00       	mov    eax,0x0
c000ffa9:	eb 49                	jmp    c000fff4 <findRSDP()+0x8c>
c000ffab:	90                   	nop
c000ffac:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ffb4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ffbc:	77 2e                	ja     c000ffec <findRSDP()+0x84>
c000ffbe:	83 ec 04             	sub    esp,0x4
c000ffc1:	6a 08                	push   0x8
c000ffc3:	68 17 20 02 c0       	push   0xc0022017
c000ffc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffcc:	e8 d3 03 ff ff       	call   c00003a4 <memcmp>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	85 c0                	test   eax,eax
c000ffd6:	0f 94 c0             	sete   al
c000ffd9:	84 c0                	test   al,al
c000ffdb:	74 07                	je     c000ffe4 <findRSDP()+0x7c>
c000ffdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffe1:	eb 11                	jmp    c000fff4 <findRSDP()+0x8c>
c000ffe3:	90                   	nop
c000ffe4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ffe9:	eb c9                	jmp    c000ffb4 <findRSDP()+0x4c>
c000ffeb:	90                   	nop
c000ffec:	b8 00 00 00 00       	mov    eax,0x0
c000fff1:	8d 76 00             	lea    esi,[esi+0x0]
c000fff4:	83 c4 1c             	add    esp,0x1c
c000fff7:	c3                   	ret    

c000fff8 <loadACPITables(unsigned char*)>:
c000fff8:	57                   	push   edi
c000fff9:	56                   	push   esi
c000fffa:	53                   	push   ebx
c000fffb:	83 ec 60             	sub    esp,0x60
c000fffe:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0010003:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010009:	83 e0 04             	and    eax,0x4
c001000c:	84 c0                	test   al,al
c001000e:	0f 84 3c 02 00 00    	je     c0010250 <loadACPITables(unsigned char*)+0x258>
c0010014:	a0 c0 67 02 c0       	mov    al,ds:0xc00267c0
c0010019:	84 c0                	test   al,al
c001001b:	74 77                	je     c0010094 <loadACPITables(unsigned char*)+0x9c>
c001001d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010021:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0010025:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010029:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001002c:	83 e8 24             	sub    eax,0x24
c001002f:	c1 e8 03             	shr    eax,0x3
c0010032:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010036:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001003e:	66 90                	xchg   ax,ax
c0010040:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0010044:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0010048:	0f 8d b6 00 00 00    	jge    c0010104 <loadACPITables(unsigned char*)+0x10c>
c001004e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010052:	83 c0 24             	add    eax,0x24
c0010055:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0010059:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001005d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010061:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0010065:	c1 e0 03             	shl    eax,0x3
c0010068:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001006c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010070:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010073:	8b 00                	mov    eax,DWORD PTR [eax]
c0010075:	89 c1                	mov    ecx,eax
c0010077:	a1 ac 65 02 c0       	mov    eax,ds:0xc00265ac
c001007c:	8d 50 01             	lea    edx,[eax+0x1]
c001007f:	89 15 ac 65 02 c0    	mov    DWORD PTR ds:0xc00265ac,edx
c0010085:	89 ca                	mov    edx,ecx
c0010087:	89 14 c5 c4 65 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9a3c],edx
c001008e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0010092:	eb ac                	jmp    c0010040 <loadACPITables(unsigned char*)+0x48>
c0010094:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010098:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001009c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100a3:	83 e8 24             	sub    eax,0x24
c00100a6:	c1 e8 02             	shr    eax,0x2
c00100a9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00100ad:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00100b5:	8d 76 00             	lea    esi,[esi+0x0]
c00100b8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00100bc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00100c0:	7d 42                	jge    c0010104 <loadACPITables(unsigned char*)+0x10c>
c00100c2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00100c6:	83 c0 24             	add    eax,0x24
c00100c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00100cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00100d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100d5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00100d9:	c1 e0 02             	shl    eax,0x2
c00100dc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00100e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00100e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00100e6:	a1 ac 65 02 c0       	mov    eax,ds:0xc00265ac
c00100eb:	8d 50 01             	lea    edx,[eax+0x1]
c00100ee:	89 15 ac 65 02 c0    	mov    DWORD PTR ds:0xc00265ac,edx
c00100f4:	89 ca                	mov    edx,ecx
c00100f6:	89 14 c5 c4 65 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9a3c],edx
c00100fd:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0010101:	eb b5                	jmp    c00100b8 <loadACPITables(unsigned char*)+0xc0>
c0010103:	90                   	nop
c0010104:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001010c:	a1 ac 65 02 c0       	mov    eax,ds:0xc00265ac
c0010111:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0010115:	0f 8d 39 01 00 00    	jge    c0010254 <loadACPITables(unsigned char*)+0x25c>
c001011b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001011f:	8b 04 c5 c4 65 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9a3c]
c0010126:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001012a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001012e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010132:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010136:	25 ff 0f 00 00       	and    eax,0xfff
c001013b:	89 c6                	mov    esi,eax
c001013d:	8b 1d 94 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024094
c0010143:	83 ec 0c             	sub    esp,0xc
c0010146:	6a 01                	push   0x1
c0010148:	e8 18 b2 ff ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c001014d:	83 c4 10             	add    esp,0x10
c0010150:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010154:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001015a:	83 ec 0c             	sub    esp,0xc
c001015d:	6a 01                	push   0x1
c001015f:	6a 01                	push   0x1
c0010161:	50                   	push   eax
c0010162:	52                   	push   edx
c0010163:	53                   	push   ebx
c0010164:	e8 5f bb ff ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010169:	83 c4 20             	add    esp,0x20
c001016c:	09 f0                	or     eax,esi
c001016e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010172:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010176:	c1 e0 03             	shl    eax,0x3
c0010179:	05 c0 65 02 c0       	add    eax,0xc00265c0
c001017e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010182:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001018a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0010192:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010196:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001019a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001019e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101a6:	89 c6                	mov    esi,eax
c00101a8:	89 d7                	mov    edi,edx
c00101aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ac:	89 c8                	mov    eax,ecx
c00101ae:	89 fa                	mov    edx,edi
c00101b0:	89 f3                	mov    ebx,esi
c00101b2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101b6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00101ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00101be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00101c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101cd:	05 00 10 00 00       	add    eax,0x1000
c00101d2:	c1 e8 0c             	shr    eax,0xc
c00101d5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00101d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101dd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00101e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101e5:	25 ff 0f 00 00       	and    eax,0xfff
c00101ea:	89 c6                	mov    esi,eax
c00101ec:	8b 1d 94 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024094
c00101f2:	83 ec 0c             	sub    esp,0xc
c00101f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00101f9:	e8 67 b1 ff ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c00101fe:	83 c4 10             	add    esp,0x10
c0010201:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010205:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001020b:	83 ec 0c             	sub    esp,0xc
c001020e:	6a 01                	push   0x1
c0010210:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010214:	50                   	push   eax
c0010215:	52                   	push   edx
c0010216:	53                   	push   ebx
c0010217:	e8 ac ba ff ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001021c:	83 c4 20             	add    esp,0x20
c001021f:	09 f0                	or     eax,esi
c0010221:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010229:	83 ec 0c             	sub    esp,0xc
c001022c:	50                   	push   eax
c001022d:	e8 27 b4 ff ff       	call   c000b659 <Virt::freeKernelVirtualPages(unsigned long)>
c0010232:	83 c4 10             	add    esp,0x10
c0010235:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010239:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001023d:	89 14 c5 c4 65 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9a3c],edx
c0010244:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0010248:	e9 bf fe ff ff       	jmp    c001010c <loadACPITables(unsigned char*)+0x114>
c001024d:	8d 76 00             	lea    esi,[esi+0x0]
c0010250:	90                   	nop
c0010251:	8d 76 00             	lea    esi,[esi+0x0]
c0010254:	83 c4 60             	add    esp,0x60
c0010257:	5b                   	pop    ebx
c0010258:	5e                   	pop    esi
c0010259:	5f                   	pop    edi
c001025a:	c3                   	ret    
c001025b:	90                   	nop

c001025c <findRSDT(unsigned char*)>:
c001025c:	57                   	push   edi
c001025d:	56                   	push   esi
c001025e:	53                   	push   ebx
c001025f:	83 ec 50             	sub    esp,0x50
c0010262:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0010267:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001026d:	83 e0 04             	and    eax,0x4
c0010270:	84 c0                	test   al,al
c0010272:	75 0c                	jne    c0010280 <findRSDT(unsigned char*)+0x24>
c0010274:	b8 00 00 00 00       	mov    eax,0x0
c0010279:	e9 26 01 00 00       	jmp    c00103a4 <findRSDT(unsigned char*)+0x148>
c001027e:	66 90                	xchg   ax,ax
c0010280:	89 e0                	mov    eax,esp
c0010282:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010286:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001028a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001028e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0010296:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001029a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001029e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00102a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00102a6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00102aa:	89 c6                	mov    esi,eax
c00102ac:	89 d7                	mov    edi,edx
c00102ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102b0:	89 c8                	mov    eax,ecx
c00102b2:	89 fa                	mov    edx,edi
c00102b4:	89 f3                	mov    ebx,esi
c00102b6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00102ba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00102be:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00102c2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00102c6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00102ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00102d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00102d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00102da:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00102de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00102e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00102ea:	25 ff 0f 00 00       	and    eax,0xfff
c00102ef:	89 c6                	mov    esi,eax
c00102f1:	8b 1d 94 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024094
c00102f7:	83 ec 0c             	sub    esp,0xc
c00102fa:	6a 02                	push   0x2
c00102fc:	e8 64 b0 ff ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0010308:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	6a 01                	push   0x1
c0010313:	6a 02                	push   0x2
c0010315:	50                   	push   eax
c0010316:	52                   	push   edx
c0010317:	53                   	push   ebx
c0010318:	e8 ab b9 ff ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001031d:	83 c4 20             	add    esp,0x20
c0010320:	09 f0                	or     eax,esi
c0010322:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010326:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001032a:	25 ff 0f 00 00       	and    eax,0xfff
c001032f:	89 c6                	mov    esi,eax
c0010331:	8b 1d 94 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024094
c0010337:	83 ec 0c             	sub    esp,0xc
c001033a:	6a 02                	push   0x2
c001033c:	e8 24 b0 ff ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c0010341:	83 c4 10             	add    esp,0x10
c0010344:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010348:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001034e:	83 ec 0c             	sub    esp,0xc
c0010351:	6a 01                	push   0x1
c0010353:	6a 02                	push   0x2
c0010355:	50                   	push   eax
c0010356:	52                   	push   edx
c0010357:	53                   	push   ebx
c0010358:	e8 6b b9 ff ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001035d:	83 c4 20             	add    esp,0x20
c0010360:	09 f0                	or     eax,esi
c0010362:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010366:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001036b:	75 13                	jne    c0010380 <findRSDT(unsigned char*)+0x124>
c001036d:	c6 05 c0 67 02 c0 00 	mov    BYTE PTR ds:0xc00267c0,0x0
c0010374:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010378:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001037c:	eb 22                	jmp    c00103a0 <findRSDT(unsigned char*)+0x144>
c001037e:	66 90                	xchg   ax,ax
c0010380:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0010385:	75 11                	jne    c0010398 <findRSDT(unsigned char*)+0x13c>
c0010387:	c6 05 c0 67 02 c0 01 	mov    BYTE PTR ds:0xc00267c0,0x1
c001038e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010392:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010396:	eb 08                	jmp    c00103a0 <findRSDT(unsigned char*)+0x144>
c0010398:	b8 00 00 00 00       	mov    eax,0x0
c001039d:	eb 05                	jmp    c00103a4 <findRSDT(unsigned char*)+0x148>
c001039f:	90                   	nop
c00103a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00103a4:	83 c4 50             	add    esp,0x50
c00103a7:	5b                   	pop    ebx
c00103a8:	5e                   	pop    esi
c00103a9:	5f                   	pop    edi
c00103aa:	c3                   	ret    
c00103ab:	90                   	nop

c00103ac <findDataTable(unsigned char*, char*)>:
c00103ac:	83 ec 1c             	sub    esp,0x1c
c00103af:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00103b4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00103ba:	83 e0 04             	and    eax,0x4
c00103bd:	84 c0                	test   al,al
c00103bf:	75 07                	jne    c00103c8 <findDataTable(unsigned char*, char*)+0x1c>
c00103c1:	b8 00 00 00 00       	mov    eax,0x0
c00103c6:	eb 58                	jmp    c0010420 <findDataTable(unsigned char*, char*)+0x74>
c00103c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00103d0:	a1 ac 65 02 c0       	mov    eax,ds:0xc00265ac
c00103d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00103d9:	7d 3d                	jge    c0010418 <findDataTable(unsigned char*, char*)+0x6c>
c00103db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103df:	c1 e0 03             	shl    eax,0x3
c00103e2:	05 c0 65 02 c0       	add    eax,0xc00265c0
c00103e7:	83 ec 04             	sub    esp,0x4
c00103ea:	6a 04                	push   0x4
c00103ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00103f0:	50                   	push   eax
c00103f1:	e8 ae ff fe ff       	call   c00003a4 <memcmp>
c00103f6:	83 c4 10             	add    esp,0x10
c00103f9:	85 c0                	test   eax,eax
c00103fb:	0f 94 c0             	sete   al
c00103fe:	84 c0                	test   al,al
c0010400:	74 0e                	je     c0010410 <findDataTable(unsigned char*, char*)+0x64>
c0010402:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010406:	8b 04 c5 c4 65 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9a3c]
c001040d:	eb 11                	jmp    c0010420 <findDataTable(unsigned char*, char*)+0x74>
c001040f:	90                   	nop
c0010410:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010414:	eb ba                	jmp    c00103d0 <findDataTable(unsigned char*, char*)+0x24>
c0010416:	66 90                	xchg   ax,ax
c0010418:	b8 00 00 00 00       	mov    eax,0x0
c001041d:	8d 76 00             	lea    esi,[esi+0x0]
c0010420:	83 c4 1c             	add    esp,0x1c
c0010423:	c3                   	ret    

c0010424 <scanMADT()>:
c0010424:	53                   	push   ebx
c0010425:	83 ec 38             	sub    esp,0x38
c0010428:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c001042d:	25 00 04 00 00       	and    eax,0x400
c0010432:	74 14                	je     c0010448 <scanMADT()+0x24>
c0010434:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0010439:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001043f:	83 e2 fb             	and    edx,0xfffffffb
c0010442:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010448:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c001044d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010453:	83 e0 04             	and    eax,0x4
c0010456:	84 c0                	test   al,al
c0010458:	0f 84 52 04 00 00    	je     c00108b0 <scanMADT()+0x48c>
c001045e:	e8 05 fb ff ff       	call   c000ff68 <findRSDP()>
c0010463:	a3 cc 67 02 c0       	mov    ds:0xc00267cc,eax
c0010468:	a1 cc 67 02 c0       	mov    eax,ds:0xc00267cc
c001046d:	85 c0                	test   eax,eax
c001046f:	75 1b                	jne    c001048c <scanMADT()+0x68>
c0010471:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0010476:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001047c:	83 e2 fb             	and    edx,0xfffffffb
c001047f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010485:	e9 2e 04 00 00       	jmp    c00108b8 <scanMADT()+0x494>
c001048a:	66 90                	xchg   ax,ax
c001048c:	a1 cc 67 02 c0       	mov    eax,ds:0xc00267cc
c0010491:	83 ec 0c             	sub    esp,0xc
c0010494:	50                   	push   eax
c0010495:	e8 c2 fd ff ff       	call   c001025c <findRSDT(unsigned char*)>
c001049a:	83 c4 10             	add    esp,0x10
c001049d:	a3 c8 67 02 c0       	mov    ds:0xc00267c8,eax
c00104a2:	a1 c8 67 02 c0       	mov    eax,ds:0xc00267c8
c00104a7:	85 c0                	test   eax,eax
c00104a9:	75 19                	jne    c00104c4 <scanMADT()+0xa0>
c00104ab:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00104b0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00104b6:	83 e2 fb             	and    edx,0xfffffffb
c00104b9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00104bf:	e9 f4 03 00 00       	jmp    c00108b8 <scanMADT()+0x494>
c00104c4:	a1 c8 67 02 c0       	mov    eax,ds:0xc00267c8
c00104c9:	83 ec 0c             	sub    esp,0xc
c00104cc:	50                   	push   eax
c00104cd:	e8 26 fb ff ff       	call   c000fff8 <loadACPITables(unsigned char*)>
c00104d2:	83 c4 10             	add    esp,0x10
c00104d5:	a1 c8 67 02 c0       	mov    eax,ds:0xc00267c8
c00104da:	83 ec 08             	sub    esp,0x8
c00104dd:	68 20 20 02 c0       	push   0xc0022020
c00104e2:	50                   	push   eax
c00104e3:	e8 c4 fe ff ff       	call   c00103ac <findDataTable(unsigned char*, char*)>
c00104e8:	83 c4 10             	add    esp,0x10
c00104eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00104ef:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00104f4:	75 1a                	jne    c0010510 <scanMADT()+0xec>
c00104f6:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00104fb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010501:	83 e2 fe             	and    edx,0xfffffffe
c0010504:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001050a:	e9 a9 03 00 00       	jmp    c00108b8 <scanMADT()+0x494>
c001050f:	90                   	nop
c0010510:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010518:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001051c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001051f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0010523:	0f 87 8f 03 00 00    	ja     c00108b8 <scanMADT()+0x494>
c0010529:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0010531:	0f 87 81 03 00 00    	ja     c00108b8 <scanMADT()+0x494>
c0010537:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001053b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001053f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010543:	8d 50 01             	lea    edx,[eax+0x1]
c0010546:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001054a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001054e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010552:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0010556:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001055a:	8d 50 01             	lea    edx,[eax+0x1]
c001055d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010561:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010565:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010569:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001056d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0010572:	0f 86 3c 03 00 00    	jbe    c00108b4 <scanMADT()+0x490>
c0010578:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001057d:	75 59                	jne    c00105d8 <scanMADT()+0x1b4>
c001057f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010583:	8d 50 01             	lea    edx,[eax+0x1]
c0010586:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001058a:	8a 15 c0 69 02 c0    	mov    dl,BYTE PTR ds:0xc00269c0
c0010590:	0f b6 d2             	movzx  edx,dl
c0010593:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010597:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001059b:	88 82 00 6a 02 c0    	mov    BYTE PTR [edx-0x3ffd9600],al
c00105a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00105a5:	8d 50 01             	lea    edx,[eax+0x1]
c00105a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00105ac:	8a 15 c0 69 02 c0    	mov    dl,BYTE PTR ds:0xc00269c0
c00105b2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00105b5:	88 0d c0 69 02 c0    	mov    BYTE PTR ds:0xc00269c0,cl
c00105bb:	0f b6 d2             	movzx  edx,dl
c00105be:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00105c2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00105c6:	88 82 e0 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9620],al
c00105cc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00105d1:	e9 c6 02 00 00       	jmp    c001089c <scanMADT()+0x478>
c00105d6:	66 90                	xchg   ax,ax
c00105d8:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00105dd:	0f 85 15 01 00 00    	jne    c00106f8 <scanMADT()+0x2d4>
c00105e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00105e7:	8d 50 01             	lea    edx,[eax+0x1]
c00105ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00105ee:	8a 15 80 68 02 c0    	mov    dl,BYTE PTR ds:0xc0026880
c00105f4:	0f b6 d2             	movzx  edx,dl
c00105f7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00105fb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00105ff:	88 82 a0 68 02 c0    	mov    BYTE PTR [edx-0x3ffd9760],al
c0010605:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0010609:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001060d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010611:	01 d0                	add    eax,edx
c0010613:	83 c0 2c             	add    eax,0x2c
c0010616:	8a 00                	mov    al,BYTE PTR [eax]
c0010618:	0f b6 d0             	movzx  edx,al
c001061b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001061f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010622:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010626:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001062a:	0f b6 c0             	movzx  eax,al
c001062d:	c1 e0 08             	shl    eax,0x8
c0010630:	89 d1                	mov    ecx,edx
c0010632:	09 c1                	or     ecx,eax
c0010634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010638:	8d 50 02             	lea    edx,[eax+0x2]
c001063b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001063f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010643:	0f b6 c0             	movzx  eax,al
c0010646:	c1 e0 10             	shl    eax,0x10
c0010649:	09 c1                	or     ecx,eax
c001064b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001064f:	8d 50 03             	lea    edx,[eax+0x3]
c0010652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010656:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001065a:	0f b6 c0             	movzx  eax,al
c001065d:	c1 e0 18             	shl    eax,0x18
c0010660:	09 c1                	or     ecx,eax
c0010662:	89 ca                	mov    edx,ecx
c0010664:	a0 80 68 02 c0       	mov    al,ds:0xc0026880
c0010669:	0f b6 c0             	movzx  eax,al
c001066c:	89 14 85 c0 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9740],edx
c0010673:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010678:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001067c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010680:	01 d0                	add    eax,edx
c0010682:	83 c0 2c             	add    eax,0x2c
c0010685:	8a 00                	mov    al,BYTE PTR [eax]
c0010687:	0f b6 d0             	movzx  edx,al
c001068a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001068e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010695:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010699:	0f b6 c0             	movzx  eax,al
c001069c:	c1 e0 08             	shl    eax,0x8
c001069f:	89 d1                	mov    ecx,edx
c00106a1:	09 c1                	or     ecx,eax
c00106a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106a7:	8d 50 02             	lea    edx,[eax+0x2]
c00106aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00106ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00106b2:	0f b6 c0             	movzx  eax,al
c00106b5:	c1 e0 10             	shl    eax,0x10
c00106b8:	09 c1                	or     ecx,eax
c00106ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00106be:	8d 50 03             	lea    edx,[eax+0x3]
c00106c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00106c5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00106c9:	0f b6 c0             	movzx  eax,al
c00106cc:	c1 e0 18             	shl    eax,0x18
c00106cf:	09 c1                	or     ecx,eax
c00106d1:	89 ca                	mov    edx,ecx
c00106d3:	a0 80 68 02 c0       	mov    al,ds:0xc0026880
c00106d8:	0f b6 c0             	movzx  eax,al
c00106db:	89 14 85 40 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd96c0],edx
c00106e2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00106e7:	a0 80 68 02 c0       	mov    al,ds:0xc0026880
c00106ec:	40                   	inc    eax
c00106ed:	a2 80 68 02 c0       	mov    ds:0xc0026880,al
c00106f2:	e9 a5 01 00 00       	jmp    c001089c <scanMADT()+0x478>
c00106f7:	90                   	nop
c00106f8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00106fd:	0f 85 e9 00 00 00    	jne    c00107ec <scanMADT()+0x3c8>
c0010703:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010707:	8d 50 01             	lea    edx,[eax+0x1]
c001070a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001070e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010712:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010716:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001071a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001071e:	8d 50 01             	lea    edx,[eax+0x1]
c0010721:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010725:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010729:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001072d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0010731:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010735:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010739:	01 d0                	add    eax,edx
c001073b:	83 c0 2c             	add    eax,0x2c
c001073e:	8a 00                	mov    al,BYTE PTR [eax]
c0010740:	0f b6 d0             	movzx  edx,al
c0010743:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010747:	8d 48 01             	lea    ecx,[eax+0x1]
c001074a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001074e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010752:	0f b6 c0             	movzx  eax,al
c0010755:	c1 e0 08             	shl    eax,0x8
c0010758:	89 d1                	mov    ecx,edx
c001075a:	09 c1                	or     ecx,eax
c001075c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010760:	8d 50 02             	lea    edx,[eax+0x2]
c0010763:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010767:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001076b:	0f b6 c0             	movzx  eax,al
c001076e:	c1 e0 10             	shl    eax,0x10
c0010771:	09 c1                	or     ecx,eax
c0010773:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010777:	8d 50 03             	lea    edx,[eax+0x3]
c001077a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001077e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0010782:	0f b6 c0             	movzx  eax,al
c0010785:	c1 e0 18             	shl    eax,0x18
c0010788:	09 c8                	or     eax,ecx
c001078a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001078e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010793:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010797:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001079b:	01 d0                	add    eax,edx
c001079d:	83 c0 2c             	add    eax,0x2c
c00107a0:	8a 00                	mov    al,BYTE PTR [eax]
c00107a2:	0f b6 c0             	movzx  eax,al
c00107a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00107a9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00107b0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00107b4:	0f b6 d2             	movzx  edx,dl
c00107b7:	c1 e2 08             	shl    edx,0x8
c00107ba:	09 d0                	or     eax,edx
c00107bc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00107c1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00107c6:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00107cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00107cf:	88 90 60 39 02 c0    	mov    BYTE PTR [eax-0x3ffdc6a0],dl
c00107d5:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00107da:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00107df:	66 89 84 12 60 68 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd97a0],ax
c00107e7:	e9 b0 00 00 00       	jmp    c001089c <scanMADT()+0x478>
c00107ec:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00107f1:	0f 85 99 00 00 00    	jne    c0010890 <scanMADT()+0x46c>
c00107f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00107fb:	8d 50 01             	lea    edx,[eax+0x1]
c00107fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010802:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010806:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001080a:	0f b6 c0             	movzx  eax,al
c001080d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010811:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010815:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010819:	01 d0                	add    eax,edx
c001081b:	83 c0 2c             	add    eax,0x2c
c001081e:	8a 00                	mov    al,BYTE PTR [eax]
c0010820:	0f b6 d0             	movzx  edx,al
c0010823:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010827:	8d 48 01             	lea    ecx,[eax+0x1]
c001082a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001082e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0010832:	0f b6 c0             	movzx  eax,al
c0010835:	c1 e0 08             	shl    eax,0x8
c0010838:	09 d0                	or     eax,edx
c001083a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001083e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0010843:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010847:	8d 50 01             	lea    edx,[eax+0x1]
c001084a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001084e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010852:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010856:	0f b6 c0             	movzx  eax,al
c0010859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001085d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010861:	c1 e0 08             	shl    eax,0x8
c0010864:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010868:	89 c1                	mov    ecx,eax
c001086a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001086e:	c1 e0 18             	shl    eax,0x18
c0010871:	89 c3                	mov    ebx,eax
c0010873:	a1 d0 67 02 c0       	mov    eax,ds:0xc00267d0
c0010878:	8d 50 01             	lea    edx,[eax+0x1]
c001087b:	89 15 d0 67 02 c0    	mov    DWORD PTR ds:0xc00267d0,edx
c0010881:	09 d9                	or     ecx,ebx
c0010883:	89 ca                	mov    edx,ecx
c0010885:	89 14 85 e0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9820],edx
c001088c:	eb 0e                	jmp    c001089c <scanMADT()+0x478>
c001088e:	66 90                	xchg   ax,ax
c0010890:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0010895:	75 05                	jne    c001089c <scanMADT()+0x478>
c0010897:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001089c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00108a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00108a5:	01 d0                	add    eax,edx
c00108a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00108ab:	e9 68 fc ff ff       	jmp    c0010518 <scanMADT()+0xf4>
c00108b0:	90                   	nop
c00108b1:	eb 05                	jmp    c00108b8 <scanMADT()+0x494>
c00108b3:	90                   	nop
c00108b4:	90                   	nop
c00108b5:	8d 76 00             	lea    esi,[esi+0x0]
c00108b8:	83 c4 38             	add    esp,0x38
c00108bb:	5b                   	pop    ebx
c00108bc:	c3                   	ret    
c00108bd:	90                   	nop
c00108be:	66 90                	xchg   ax,ax

c00108c0 <ACPI::ACPI()>:
c00108c0:	83 ec 0c             	sub    esp,0xc
c00108c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c7:	83 ec 08             	sub    esp,0x8
c00108ca:	68 25 20 02 c0       	push   0xc0022025
c00108cf:	50                   	push   eax
c00108d0:	e8 6d d4 ff ff       	call   c000dd42 <Device::Device(char const*)>
c00108d5:	83 c4 10             	add    esp,0x10
c00108d8:	ba 5c 21 02 c0       	mov    edx,0xc002215c
c00108dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e1:	89 10                	mov    DWORD PTR [eax],edx
c00108e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00108ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00108fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010900:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001090a:	e8 15 fb ff ff       	call   c0010424 <scanMADT()>
c001090f:	90                   	nop
c0010910:	83 c4 0c             	add    esp,0xc
c0010913:	c3                   	ret    

c0010914 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0010914:	83 ec 2c             	sub    esp,0x2c
c0010917:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001091b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001091f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010923:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0010927:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001092c:	88 d0                	mov    al,dl
c001092e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010932:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010937:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001093f:	90                   	nop
c0010940:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010944:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001094a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001094e:	0f 8d 9c 00 00 00    	jge    c00109f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0010954:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010958:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001095c:	83 c2 2a             	add    edx,0x2a
c001095f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0010963:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0010968:	75 7a                	jne    c00109e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001096a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001096e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010972:	83 c2 2a             	add    edx,0x2a
c0010975:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0010979:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001097d:	75 65                	jne    c00109e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001097f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0010984:	74 3a                	je     c00109c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0010986:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001098a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001098e:	83 c2 2a             	add    edx,0x2a
c0010991:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0010995:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010999:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001099c:	39 c2                	cmp    edx,eax
c001099e:	74 10                	je     c00109b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00109a0:	83 ec 0c             	sub    esp,0xc
c00109a3:	68 a0 1f 02 c0       	push   0xc0021fa0
c00109a8:	e8 56 1c 00 00       	call   c0012603 <Krnl::panic(char const*)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	68 2a 20 02 c0       	push   0xc002202a
c00109b8:	e8 46 1c 00 00       	call   c0012603 <Krnl::panic(char const*)>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00109c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00109c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00109cc:	83 c2 2a             	add    edx,0x2a
c00109cf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00109d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00109d5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00109d8:	89 01                	mov    DWORD PTR [ecx],eax
c00109da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00109dd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00109e2:	66 90                	xchg   ax,ax
c00109e4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00109e8:	e9 53 ff ff ff       	jmp    c0010940 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00109ed:	8d 76 00             	lea    esi,[esi+0x0]
c00109f0:	90                   	nop
c00109f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109f5:	83 c4 2c             	add    esp,0x2c
c00109f8:	c2 04 00             	ret    0x4
c00109fb:	90                   	nop

c00109fc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00109fc:	83 ec 1c             	sub    esp,0x1c
c00109ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010a03:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010a07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010a0b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0010a10:	88 c8                	mov    al,cl
c0010a12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0010a16:	88 d0                	mov    al,dl
c0010a18:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0010a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a20:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a2a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0010a2d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0010a31:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0010a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a39:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010a3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010a43:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0010a46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a4a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0010a4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a53:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010a59:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0010a5d:	8d 48 01             	lea    ecx,[eax+0x1]
c0010a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a64:	83 c2 2a             	add    edx,0x2a
c0010a67:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0010a6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a6f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0010a75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a79:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0010a7c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a80:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0010a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a88:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010a8e:	8d 50 01             	lea    edx,[eax+0x1]
c0010a91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a95:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0010a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a9f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0010aa5:	3d 00 02 00 00       	cmp    eax,0x200
c0010aaa:	75 10                	jne    c0010abc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	68 39 20 02 c0       	push   0xc0022039
c0010ab4:	e8 4a 1b 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	90                   	nop
c0010abd:	83 c4 1c             	add    esp,0x1c
c0010ac0:	c3                   	ret    
c0010ac1:	90                   	nop
c0010ac2:	66 90                	xchg   ax,ax

c0010ac4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0010ac4:	b8 00 00 00 00       	mov    eax,0x0
c0010ac9:	c3                   	ret    
c0010aca:	66 90                	xchg   ax,ax

c0010acc <ACPI::detectPCI()>:
c0010acc:	53                   	push   ebx
c0010acd:	83 ec 28             	sub    esp,0x28
c0010ad0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ad5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0010ada:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0010adf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010ae5:	83 e0 04             	and    eax,0x4
c0010ae8:	84 c0                	test   al,al
c0010aea:	74 2c                	je     c0010b18 <ACPI::detectPCI()+0x4c>
c0010aec:	a1 c8 67 02 c0       	mov    eax,ds:0xc00267c8
c0010af1:	83 ec 08             	sub    esp,0x8
c0010af4:	68 56 20 02 c0       	push   0xc0022056
c0010af9:	50                   	push   eax
c0010afa:	e8 ad f8 ff ff       	call   c00103ac <findDataTable(unsigned char*, char*)>
c0010aff:	83 c4 10             	add    esp,0x10
c0010b02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010b06:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010b0b:	74 0b                	je     c0010b18 <ACPI::detectPCI()+0x4c>
c0010b0d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010b12:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0010b17:	90                   	nop
c0010b18:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0010b20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b24:	8a 00                	mov    al,BYTE PTR [eax]
c0010b26:	3c 01                	cmp    al,0x1
c0010b28:	75 0e                	jne    c0010b38 <ACPI::detectPCI()+0x6c>
c0010b2a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010b2f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0010b34:	eb 2a                	jmp    c0010b60 <ACPI::detectPCI()+0x94>
c0010b36:	66 90                	xchg   ax,ax
c0010b38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b3c:	8a 00                	mov    al,BYTE PTR [eax]
c0010b3e:	3c 02                	cmp    al,0x2
c0010b40:	75 1e                	jne    c0010b60 <ACPI::detectPCI()+0x94>
c0010b42:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010b47:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0010b4c:	74 12                	je     c0010b60 <ACPI::detectPCI()+0x94>
c0010b4e:	83 ec 0c             	sub    esp,0xc
c0010b51:	68 d0 1f 02 c0       	push   0xc0021fd0
c0010b56:	e8 a8 1a 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0010b5b:	83 c4 10             	add    esp,0x10
c0010b5e:	66 90                	xchg   ax,ax
c0010b60:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0010b64:	83 f0 01             	xor    eax,0x1
c0010b67:	84 c0                	test   al,al
c0010b69:	74 41                	je     c0010bac <ACPI::detectPCI()+0xe0>
c0010b6b:	e8 e0 f5 fe ff       	call   c0000150 <manualPCIProbe>
c0010b70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b74:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0010b79:	75 0d                	jne    c0010b88 <ACPI::detectPCI()+0xbc>
c0010b7b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010b80:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0010b85:	eb 25                	jmp    c0010bac <ACPI::detectPCI()+0xe0>
c0010b87:	90                   	nop
c0010b88:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0010b8d:	75 1d                	jne    c0010bac <ACPI::detectPCI()+0xe0>
c0010b8f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0010b94:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0010b99:	74 11                	je     c0010bac <ACPI::detectPCI()+0xe0>
c0010b9b:	83 ec 0c             	sub    esp,0xc
c0010b9e:	68 d0 1f 02 c0       	push   0xc0021fd0
c0010ba3:	e8 5b 1a 00 00       	call   c0012603 <Krnl::panic(char const*)>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	90                   	nop
c0010bac:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0010bb1:	0f 84 85 00 00 00    	je     c0010c3c <ACPI::detectPCI()+0x170>
c0010bb7:	83 ec 0c             	sub    esp,0xc
c0010bba:	68 5b 20 02 c0       	push   0xc002205b
c0010bbf:	e8 15 8c ff ff       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0010bc4:	83 c4 10             	add    esp,0x10
c0010bc7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0010bcf:	83 ec 0c             	sub    esp,0xc
c0010bd2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010bd6:	e8 a4 8b ff ff       	call   c000977f <malloc>
c0010bdb:	83 c4 10             	add    esp,0x10
c0010bde:	89 c3                	mov    ebx,eax
c0010be0:	83 ec 0c             	sub    esp,0xc
c0010be3:	53                   	push   ebx
c0010be4:	e8 15 b1 00 00       	call   c001bcfe <PCI::PCI()>
c0010be9:	83 c4 10             	add    esp,0x10
c0010bec:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010bf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010bf4:	83 ec 08             	sub    esp,0x8
c0010bf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010bfb:	50                   	push   eax
c0010bfc:	e8 3d cf ff ff       	call   c000db3e <Device::addChild(Device*)>
c0010c01:	83 c4 10             	add    esp,0x10
c0010c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c0a:	83 c0 08             	add    eax,0x8
c0010c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c0f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0010c14:	74 0a                	je     c0010c20 <ACPI::detectPCI()+0x154>
c0010c16:	ba 01 00 00 00       	mov    edx,0x1
c0010c1b:	eb 0b                	jmp    c0010c28 <ACPI::detectPCI()+0x15c>
c0010c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c20:	ba 02 00 00 00       	mov    edx,0x2
c0010c25:	8d 76 00             	lea    esi,[esi+0x0]
c0010c28:	6a 00                	push   0x0
c0010c2a:	6a 00                	push   0x0
c0010c2c:	52                   	push   edx
c0010c2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c31:	ff d0                	call   eax
c0010c33:	83 c4 10             	add    esp,0x10
c0010c36:	e9 91 00 00 00       	jmp    c0010ccc <ACPI::detectPCI()+0x200>
c0010c3b:	90                   	nop
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	68 73 20 02 c0       	push   0xc0022073
c0010c44:	e8 90 8b ff ff       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0010c53:	83 ec 0c             	sub    esp,0xc
c0010c56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010c5a:	e8 20 8b ff ff       	call   c000977f <malloc>
c0010c5f:	83 c4 10             	add    esp,0x10
c0010c62:	89 c3                	mov    ebx,eax
c0010c64:	83 ec 0c             	sub    esp,0xc
c0010c67:	53                   	push   ebx
c0010c68:	e8 b7 bb 00 00       	call   c001c824 <IDE::IDE()>
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010c74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010c78:	83 ec 08             	sub    esp,0x8
c0010c7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c7f:	50                   	push   eax
c0010c80:	e8 b9 ce ff ff       	call   c000db3e <Device::addChild(Device*)>
c0010c85:	83 c4 10             	add    esp,0x10
c0010c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c8c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0010c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c9a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0010ca3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ca7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0010cb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cb6:	83 c0 08             	add    eax,0x8
c0010cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cbb:	6a 00                	push   0x0
c0010cbd:	6a 00                	push   0x0
c0010cbf:	6a 00                	push   0x0
c0010cc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010cc5:	ff d0                	call   eax
c0010cc7:	83 c4 10             	add    esp,0x10
c0010cca:	66 90                	xchg   ax,ax
c0010ccc:	90                   	nop
c0010ccd:	83 c4 28             	add    esp,0x28
c0010cd0:	5b                   	pop    ebx
c0010cd1:	c3                   	ret    
c0010cd2:	66 90                	xchg   ax,ax

c0010cd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0010cd4:	83 ec 1c             	sub    esp,0x1c
c0010cd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010cdb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010cde:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010ce2:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0010ce7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0010cec:	83 ec 08             	sub    esp,0x8
c0010cef:	52                   	push   edx
c0010cf0:	50                   	push   eax
c0010cf1:	e8 00 81 ff ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0010cf6:	83 c4 10             	add    esp,0x10
c0010cf9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0010cfd:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0010d02:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0010d07:	83 ec 04             	sub    esp,0x4
c0010d0a:	6a 01                	push   0x1
c0010d0c:	52                   	push   edx
c0010d0d:	50                   	push   eax
c0010d0e:	e8 f5 81 ff ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0010d13:	83 c4 10             	add    esp,0x10
c0010d16:	90                   	nop
c0010d17:	83 c4 1c             	add    esp,0x1c
c0010d1a:	c3                   	ret    
c0010d1b:	90                   	nop

c0010d1c <ACPI::sleep()>:
c0010d1c:	83 ec 0c             	sub    esp,0xc
c0010d1f:	a1 a0 65 02 c0       	mov    eax,ds:0xc00265a0
c0010d24:	85 c0                	test   eax,eax
c0010d26:	74 08                	je     c0010d30 <ACPI::sleep()+0x14>
c0010d28:	a1 a0 65 02 c0       	mov    eax,ds:0xc00265a0
c0010d2d:	ff d0                	call   eax
c0010d2f:	90                   	nop
c0010d30:	90                   	nop
c0010d31:	83 c4 0c             	add    esp,0xc
c0010d34:	c3                   	ret    
c0010d35:	90                   	nop
c0010d36:	66 90                	xchg   ax,ax

c0010d38 <ACPI::open(int, int, void*)>:
c0010d38:	57                   	push   edi
c0010d39:	56                   	push   esi
c0010d3a:	53                   	push   ebx
c0010d3b:	81 ec 70 01 00 00    	sub    esp,0x170
c0010d41:	83 ec 0c             	sub    esp,0xc
c0010d44:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0010d4b:	e8 7c fd ff ff       	call   c0010acc <ACPI::detectPCI()>
c0010d50:	83 c4 10             	add    esp,0x10
c0010d53:	83 ec 0c             	sub    esp,0xc
c0010d56:	68 f8 1f 02 c0       	push   0xc0021ff8
c0010d5b:	e8 79 8a ff ff       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0010d60:	83 c4 10             	add    esp,0x10
c0010d63:	83 ec 0c             	sub    esp,0xc
c0010d66:	68 88 20 02 c0       	push   0xc0022088
c0010d6b:	e8 70 39 00 00       	call   c00146e0 <Thr::loadKernelSymbolTable(char const*)>
c0010d70:	83 c4 10             	add    esp,0x10
c0010d73:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0010d7b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0010d86:	83 ec 0c             	sub    esp,0xc
c0010d89:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010d90:	e8 ea 89 ff ff       	call   c000977f <malloc>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	89 c3                	mov    ebx,eax
c0010d9a:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0010d9f:	83 ec 04             	sub    esp,0x4
c0010da2:	50                   	push   eax
c0010da3:	68 a6 20 02 c0       	push   0xc00220a6
c0010da8:	53                   	push   ebx
c0010da9:	e8 7e be ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0010db8:	83 ec 08             	sub    esp,0x8
c0010dbb:	6a 01                	push   0x1
c0010dbd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0010dc4:	e8 3d bf ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c0010dc9:	83 c4 10             	add    esp,0x10
c0010dcc:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0010dd3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0010ddb:	75 17                	jne    c0010df4 <ACPI::open(int, int, void*)+0xbc>
c0010ddd:	83 ec 0c             	sub    esp,0xc
c0010de0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0010de7:	e8 78 bf ff ff       	call   c000cd64 <File::close()>
c0010dec:	83 c4 10             	add    esp,0x10
c0010def:	eb 0b                	jmp    c0010dfc <ACPI::open(int, int, void*)+0xc4>
c0010df1:	8d 76 00             	lea    esi,[esi+0x0]
c0010df4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0010dfc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0010e04:	74 1e                	je     c0010e24 <ACPI::open(int, int, void*)+0xec>
c0010e06:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0010e0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e0f:	83 c0 08             	add    eax,0x8
c0010e12:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e14:	83 ec 0c             	sub    esp,0xc
c0010e17:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0010e1e:	ff d0                	call   eax
c0010e20:	83 c4 10             	add    esp,0x10
c0010e23:	90                   	nop
c0010e24:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0010e2b:	83 f0 01             	xor    eax,0x1
c0010e2e:	84 c0                	test   al,al
c0010e30:	74 42                	je     c0010e74 <ACPI::open(int, int, void*)+0x13c>
c0010e32:	83 ec 0c             	sub    esp,0xc
c0010e35:	68 c4 20 02 c0       	push   0xc00220c4
c0010e3a:	e8 9a 89 ff ff       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0010e3f:	83 c4 10             	add    esp,0x10
c0010e42:	83 ec 04             	sub    esp,0x4
c0010e45:	6a 0c                	push   0xc
c0010e47:	68 df 20 02 c0       	push   0xc00220df
c0010e4c:	68 f0 20 02 c0       	push   0xc00220f0
c0010e51:	e8 25 20 00 00       	call   c0012e7b <Reg::readIntWithDefault(char*, char*, int)>
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0010e60:	83 ec 0c             	sub    esp,0xc
c0010e63:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0010e6a:	e8 00 a7 ff ff       	call   c000b56f <Virt::setupPageSwapping(int)>
c0010e6f:	83 c4 10             	add    esp,0x10
c0010e72:	66 90                	xchg   ax,ax
c0010e74:	83 ec 0c             	sub    esp,0xc
c0010e77:	68 8f 0e 02 c0       	push   0xc0020e8f
c0010e7c:	e8 58 89 ff ff       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0010e81:	83 c4 10             	add    esp,0x10
c0010e84:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0010e8b:	83 ec 08             	sub    esp,0x8
c0010e8e:	6a 12                	push   0x12
c0010e90:	50                   	push   eax
c0010e91:	e8 2c d0 ff ff       	call   c000dec2 <getDevicesOfType(DeviceType)>
c0010e96:	83 c4 0c             	add    esp,0xc
c0010e99:	8d 76 00             	lea    esi,[esi+0x0]
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010ea6:	50                   	push   eax
c0010ea7:	e8 d0 f3 00 00       	call   c002027c <LinkedList<Device>::isEmpty()>
c0010eac:	83 c4 10             	add    esp,0x10
c0010eaf:	83 f0 01             	xor    eax,0x1
c0010eb2:	84 c0                	test   al,al
c0010eb4:	0f 84 46 01 00 00    	je     c0011000 <ACPI::open(int, int, void*)+0x2c8>
c0010eba:	83 ec 0c             	sub    esp,0xc
c0010ebd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010ec4:	50                   	push   eax
c0010ec5:	e8 ce f3 00 00       	call   c0020298 <LinkedList<Device>::getFirstElement()>
c0010eca:	83 c4 10             	add    esp,0x10
c0010ecd:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0010ed4:	83 ec 0c             	sub    esp,0xc
c0010ed7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010ede:	50                   	push   eax
c0010edf:	e8 bc f3 00 00       	call   c00202a0 <LinkedList<Device>::removeFirst()>
c0010ee4:	83 c4 10             	add    esp,0x10
c0010ee7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0010eee:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010ef5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0010efc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010f00:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0010f06:	ba 09 00 00 00       	mov    edx,0x9
c0010f0b:	fc                   	cld    
c0010f0c:	89 c7                	mov    edi,eax
c0010f0e:	89 de                	mov    esi,ebx
c0010f10:	89 d1                	mov    ecx,edx
c0010f12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010f14:	83 ec 08             	sub    esp,0x8
c0010f17:	8d 44 24 38          	lea    eax,[esp+0x38]
c0010f1b:	50                   	push   eax
c0010f1c:	83 ec 24             	sub    esp,0x24
c0010f1f:	89 e0                	mov    eax,esp
c0010f21:	89 c3                	mov    ebx,eax
c0010f23:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0010f27:	ba 09 00 00 00       	mov    edx,0x9
c0010f2c:	89 df                	mov    edi,ebx
c0010f2e:	89 c6                	mov    esi,eax
c0010f30:	89 d1                	mov    ecx,edx
c0010f32:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010f34:	e8 a3 b2 00 00       	call   c001c1dc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010f39:	83 c4 30             	add    esp,0x30
c0010f3c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0010f43:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0010f4b:	0f 84 4b ff ff ff    	je     c0010e9c <ACPI::open(int, int, void*)+0x164>
c0010f51:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0010f5c:	83 ec 0c             	sub    esp,0xc
c0010f5f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010f66:	e8 14 88 ff ff       	call   c000977f <malloc>
c0010f6b:	83 c4 10             	add    esp,0x10
c0010f6e:	89 c3                	mov    ebx,eax
c0010f70:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0010f75:	83 ec 04             	sub    esp,0x4
c0010f78:	50                   	push   eax
c0010f79:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010f80:	53                   	push   ebx
c0010f81:	e8 a6 bc ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0010f86:	83 c4 10             	add    esp,0x10
c0010f89:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0010f90:	83 ec 0c             	sub    esp,0xc
c0010f93:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010f9a:	e8 d5 bf ff ff       	call   c000cf74 <File::exists()>
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	84 c0                	test   al,al
c0010fa4:	74 2a                	je     c0010fd0 <ACPI::open(int, int, void*)+0x298>
c0010fa6:	83 ec 08             	sub    esp,0x8
c0010fa9:	6a 01                	push   0x1
c0010fab:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010fb2:	e8 a0 41 00 00       	call   c0015157 <Thr::loadDLL(char const*, bool)>
c0010fb7:	83 c4 10             	add    esp,0x10
c0010fba:	83 ec 08             	sub    esp,0x8
c0010fbd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010fc4:	50                   	push   eax
c0010fc5:	e8 be 43 00 00       	call   c0015388 <Thr::executeDLL(unsigned long, void*)>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010fd8:	0f 84 be fe ff ff    	je     c0010e9c <ACPI::open(int, int, void*)+0x164>
c0010fde:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010fe5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fe7:	83 c0 08             	add    eax,0x8
c0010fea:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010ff6:	ff d0                	call   eax
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	e9 9c fe ff ff       	jmp    c0010e9c <ACPI::open(int, int, void*)+0x164>
c0011000:	83 ec 0c             	sub    esp,0xc
c0011003:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001100a:	50                   	push   eax
c001100b:	e8 68 f2 00 00       	call   c0020278 <LinkedList<Device>::~LinkedList()>
c0011010:	83 c4 10             	add    esp,0x10
c0011013:	8b 1d a8 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fa8
c0011019:	83 ec 08             	sub    esp,0x8
c001101c:	6a 01                	push   0x1
c001101e:	68 f7 20 02 c0       	push   0xc00220f7
c0011023:	e8 2f 41 00 00       	call   c0015157 <Thr::loadDLL(char const*, bool)>
c0011028:	83 c4 10             	add    esp,0x10
c001102b:	83 ec 08             	sub    esp,0x8
c001102e:	53                   	push   ebx
c001102f:	50                   	push   eax
c0011030:	e8 53 43 00 00       	call   c0015388 <Thr::executeDLL(unsigned long, void*)>
c0011035:	83 c4 10             	add    esp,0x10
c0011038:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c001103d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011043:	83 e0 04             	and    eax,0x4
c0011046:	84 c0                	test   al,al
c0011048:	0f 84 16 01 00 00    	je     c0011164 <ACPI::open(int, int, void*)+0x42c>
c001104e:	83 ec 0c             	sub    esp,0xc
c0011051:	68 14 21 02 c0       	push   0xc0022114
c0011056:	e8 7e 87 ff ff       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c001105b:	83 c4 10             	add    esp,0x10
c001105e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0011069:	83 ec 0c             	sub    esp,0xc
c001106c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0011073:	e8 07 87 ff ff       	call   c000977f <malloc>
c0011078:	83 c4 10             	add    esp,0x10
c001107b:	89 c3                	mov    ebx,eax
c001107d:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0011082:	83 ec 04             	sub    esp,0x4
c0011085:	50                   	push   eax
c0011086:	68 31 21 02 c0       	push   0xc0022131
c001108b:	53                   	push   ebx
c001108c:	e8 9b bb ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0011091:	83 c4 10             	add    esp,0x10
c0011094:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001109b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00110a3:	74 1b                	je     c00110c0 <ACPI::open(int, int, void*)+0x388>
c00110a5:	83 ec 0c             	sub    esp,0xc
c00110a8:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00110af:	e8 c0 be ff ff       	call   c000cf74 <File::exists()>
c00110b4:	83 c4 10             	add    esp,0x10
c00110b7:	84 c0                	test   al,al
c00110b9:	74 05                	je     c00110c0 <ACPI::open(int, int, void*)+0x388>
c00110bb:	b0 01                	mov    al,0x1
c00110bd:	eb 05                	jmp    c00110c4 <ACPI::open(int, int, void*)+0x38c>
c00110bf:	90                   	nop
c00110c0:	b0 00                	mov    al,0x0
c00110c2:	66 90                	xchg   ax,ax
c00110c4:	84 c0                	test   al,al
c00110c6:	74 28                	je     c00110f0 <ACPI::open(int, int, void*)+0x3b8>
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	6a 01                	push   0x1
c00110cd:	68 31 21 02 c0       	push   0xc0022131
c00110d2:	e8 80 40 00 00       	call   c0015157 <Thr::loadDLL(char const*, bool)>
c00110d7:	83 c4 10             	add    esp,0x10
c00110da:	83 ec 08             	sub    esp,0x8
c00110dd:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00110e4:	50                   	push   eax
c00110e5:	e8 9e 42 00 00       	call   c0015388 <Thr::executeDLL(unsigned long, void*)>
c00110ea:	83 c4 10             	add    esp,0x10
c00110ed:	8d 76 00             	lea    esi,[esi+0x0]
c00110f0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00110f8:	74 2a                	je     c0011124 <ACPI::open(int, int, void*)+0x3ec>
c00110fa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011102:	74 20                	je     c0011124 <ACPI::open(int, int, void*)+0x3ec>
c0011104:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001110b:	8b 00                	mov    eax,DWORD PTR [eax]
c001110d:	83 c0 08             	add    eax,0x8
c0011110:	8b 00                	mov    eax,DWORD PTR [eax]
c0011112:	83 ec 0c             	sub    esp,0xc
c0011115:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001111c:	ff d0                	call   eax
c001111e:	83 c4 10             	add    esp,0x10
c0011121:	8d 76 00             	lea    esi,[esi+0x0]
c0011124:	a1 c8 67 02 c0       	mov    eax,ds:0xc00267c8
c0011129:	83 ec 08             	sub    esp,0x8
c001112c:	68 4e 21 02 c0       	push   0xc002214e
c0011131:	50                   	push   eax
c0011132:	e8 75 f2 ff ff       	call   c00103ac <findDataTable(unsigned char*, char*)>
c0011137:	83 c4 10             	add    esp,0x10
c001113a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0011141:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0011149:	74 19                	je     c0011164 <ACPI::open(int, int, void*)+0x42c>
c001114b:	83 ec 08             	sub    esp,0x8
c001114e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011155:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001115c:	e8 73 fb ff ff       	call   c0010cd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0011161:	83 c4 10             	add    esp,0x10
c0011164:	b8 00 00 00 00       	mov    eax,0x0
c0011169:	81 c4 70 01 00 00    	add    esp,0x170
c001116f:	5b                   	pop    ebx
c0011170:	5e                   	pop    esi
c0011171:	5f                   	pop    edi
c0011172:	c3                   	ret    
c0011173:	90                   	nop

c0011174 <CPU::close(int, int, void*)>:
c0011174:	31 c0                	xor    eax,eax
c0011176:	c3                   	ret    
c0011177:	90                   	nop

c0011178 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0011178:	60                   	pusha  
c0011179:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001117d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011181:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011185:	9c                   	pushf  
c0011186:	fa                   	cli    
c0011187:	0f 09                	wbinvd 
c0011189:	0f 30                	wrmsr  
c001118b:	9d                   	popf   
c001118c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011190:	89 02                	mov    DWORD PTR [edx],eax
c0011192:	61                   	popa   
c0011193:	c3                   	ret    

c0011194 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0011194:	60                   	pusha  
c0011195:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0011199:	9c                   	pushf  
c001119a:	fa                   	cli    
c001119b:	0f 09                	wbinvd 
c001119d:	31 c0                	xor    eax,eax
c001119f:	31 d2                	xor    edx,edx
c00111a1:	0f 32                	rdmsr  
c00111a3:	9d                   	popf   
c00111a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00111a8:	89 02                	mov    DWORD PTR [edx],eax
c00111aa:	61                   	popa   
c00111ab:	c3                   	ret    

c00111ac <CPU::AMD_K6_writeback(int, int, int)>:
c00111ac:	56                   	push   esi
c00111ad:	53                   	push   ebx
c00111ae:	83 ec 10             	sub    esp,0x10
c00111b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111b5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00111ba:	75 5d                	jne    c0011219 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00111bc:	83 f8 08             	cmp    eax,0x8
c00111bf:	75 09                	jne    c00111ca <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00111c1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00111c6:	7e 13                	jle    c00111db <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00111c8:	eb 30                	jmp    c00111fa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00111ca:	83 f8 06             	cmp    eax,0x6
c00111cd:	7c 4a                	jl     c0011219 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00111cf:	83 f8 07             	cmp    eax,0x7
c00111d2:	7e 07                	jle    c00111db <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00111d4:	83 f8 09             	cmp    eax,0x9
c00111d7:	74 21                	je     c00111fa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00111d9:	eb 3e                	jmp    c0011219 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00111db:	89 e6                	mov    esi,esp
c00111dd:	8b 1d cc 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fcc
c00111e3:	56                   	push   esi
c00111e4:	c1 eb 15             	shr    ebx,0x15
c00111e7:	68 82 00 00 c0       	push   0xc0000082
c00111ec:	83 e3 7e             	and    ebx,0x7e
c00111ef:	e8 a0 ff ff ff       	call   c0011194 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00111f4:	56                   	push   esi
c00111f5:	6a 00                	push   0x0
c00111f7:	53                   	push   ebx
c00111f8:	eb 12                	jmp    c001120c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00111fa:	89 e3                	mov    ebx,esp
c00111fc:	53                   	push   ebx
c00111fd:	68 82 00 00 c0       	push   0xc0000082
c0011202:	e8 8d ff ff ff       	call   c0011194 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011207:	53                   	push   ebx
c0011208:	6a 00                	push   0x0
c001120a:	6a 00                	push   0x0
c001120c:	68 82 00 00 c0       	push   0xc0000082
c0011211:	e8 62 ff ff ff       	call   c0011178 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0011216:	83 c4 18             	add    esp,0x18
c0011219:	83 c4 10             	add    esp,0x10
c001121c:	5b                   	pop    ebx
c001121d:	5e                   	pop    esi
c001121e:	c3                   	ret    
c001121f:	90                   	nop

c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0011220:	55                   	push   ebp
c0011221:	57                   	push   edi
c0011222:	56                   	push   esi
c0011223:	53                   	push   ebx
c0011224:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011228:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001122c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011230:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0011234:	39 05 70 39 02 c0    	cmp    DWORD PTR ds:0xc0023970,eax
c001123a:	75 23                	jne    c001125f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001123c:	a1 2c 6a 02 c0       	mov    eax,ds:0xc0026a2c
c0011241:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011245:	89 06                	mov    DWORD PTR [esi],eax
c0011247:	a1 28 6a 02 c0       	mov    eax,ds:0xc0026a28
c001124c:	89 07                	mov    DWORD PTR [edi],eax
c001124e:	a1 24 6a 02 c0       	mov    eax,ds:0xc0026a24
c0011253:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011256:	a1 20 6a 02 c0       	mov    eax,ds:0xc0026a20
c001125b:	89 02                	mov    DWORD PTR [edx],eax
c001125d:	eb 3f                	jmp    c001129e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001125f:	31 c9                	xor    ecx,ecx
c0011261:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011265:	0f a2                	cpuid  
c0011267:	89 06                	mov    DWORD PTR [esi],eax
c0011269:	89 1f                	mov    DWORD PTR [edi],ebx
c001126b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001126f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0011272:	89 10                	mov    DWORD PTR [eax],edx
c0011274:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011278:	a3 70 39 02 c0       	mov    ds:0xc0023970,eax
c001127d:	8b 06                	mov    eax,DWORD PTR [esi]
c001127f:	a3 2c 6a 02 c0       	mov    ds:0xc0026a2c,eax
c0011284:	8b 07                	mov    eax,DWORD PTR [edi]
c0011286:	a3 28 6a 02 c0       	mov    ds:0xc0026a28,eax
c001128b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001128e:	a3 24 6a 02 c0       	mov    ds:0xc0026a24,eax
c0011293:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011297:	8b 00                	mov    eax,DWORD PTR [eax]
c0011299:	a3 20 6a 02 c0       	mov    ds:0xc0026a20,eax
c001129e:	5b                   	pop    ebx
c001129f:	5e                   	pop    esi
c00112a0:	5f                   	pop    edi
c00112a1:	5d                   	pop    ebp
c00112a2:	c3                   	ret    
c00112a3:	90                   	nop

c00112a4 <CPU::cpuidCheckEDX(unsigned int)>:
c00112a4:	83 ec 10             	sub    esp,0x10
c00112a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00112ab:	50                   	push   eax
c00112ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00112b0:	50                   	push   eax
c00112b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00112b5:	50                   	push   eax
c00112b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00112ba:	50                   	push   eax
c00112bb:	6a 01                	push   0x1
c00112bd:	e8 5e ff ff ff       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00112c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00112c6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00112ca:	0f 95 c0             	setne  al
c00112cd:	83 c4 24             	add    esp,0x24
c00112d0:	c3                   	ret    
c00112d1:	90                   	nop

c00112d2 <CPU::cpuidCheckECX(unsigned int)>:
c00112d2:	83 ec 10             	sub    esp,0x10
c00112d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00112d9:	50                   	push   eax
c00112da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00112de:	50                   	push   eax
c00112df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00112e3:	50                   	push   eax
c00112e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00112e8:	50                   	push   eax
c00112e9:	6a 01                	push   0x1
c00112eb:	e8 30 ff ff ff       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00112f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00112f4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00112f8:	0f 95 c0             	setne  al
c00112fb:	83 c4 24             	add    esp,0x24
c00112fe:	c3                   	ret    
c00112ff:	90                   	nop

c0011300 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0011300:	83 ec 10             	sub    esp,0x10
c0011303:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011307:	50                   	push   eax
c0011308:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001130c:	50                   	push   eax
c001130d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011311:	50                   	push   eax
c0011312:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011316:	50                   	push   eax
c0011317:	6a 07                	push   0x7
c0011319:	e8 02 ff ff ff       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001131e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011322:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0011326:	0f 95 c0             	setne  al
c0011329:	83 c4 24             	add    esp,0x24
c001132c:	c3                   	ret    
c001132d:	90                   	nop

c001132e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001132e:	83 ec 10             	sub    esp,0x10
c0011331:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011335:	50                   	push   eax
c0011336:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001133a:	50                   	push   eax
c001133b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001133f:	50                   	push   eax
c0011340:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011344:	50                   	push   eax
c0011345:	6a 07                	push   0x7
c0011347:	e8 d4 fe ff ff       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001134c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011350:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0011354:	0f 95 c0             	setne  al
c0011357:	83 c4 24             	add    esp,0x24
c001135a:	c3                   	ret    
c001135b:	90                   	nop

c001135c <CPU::CPU()>:
c001135c:	83 ec 0c             	sub    esp,0xc
c001135f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011363:	83 ec 08             	sub    esp,0x8
c0011366:	68 71 22 02 c0       	push   0xc0022271
c001136b:	50                   	push   eax
c001136c:	e8 d1 c9 ff ff       	call   c000dd42 <Device::Device(char const*)>
c0011371:	83 c4 10             	add    esp,0x10
c0011374:	ba f8 22 02 c0       	mov    edx,0xc00222f8
c0011379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001137d:	89 10                	mov    DWORD PTR [eax],edx
c001137f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011383:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001138d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011391:	05 78 01 00 00       	add    eax,0x178
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	50                   	push   eax
c001139a:	e8 53 7c ff ff       	call   c0008ff2 <GDT::GDT()>
c001139f:	83 c4 10             	add    esp,0x10
c00113a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113a6:	05 7c 09 00 00       	add    eax,0x97c
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	50                   	push   eax
c00113af:	e8 b8 7e ff ff       	call   c000926c <IDT::IDT()>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113bb:	05 7c 11 00 00       	add    eax,0x117c
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	50                   	push   eax
c00113c4:	e8 df 98 ff ff       	call   c000aca8 <TSS::TSS()>
c00113c9:	83 c4 10             	add    esp,0x10
c00113cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00113d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113db:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00113e5:	90                   	nop
c00113e6:	83 c4 0c             	add    esp,0xc
c00113e9:	c3                   	ret    

c00113ea <CPU::displayFeatures()>:
c00113ea:	c3                   	ret    
c00113eb:	90                   	nop

c00113ec <CPU::detectFeatures()>:
c00113ec:	55                   	push   ebp
c00113ed:	57                   	push   edi
c00113ee:	56                   	push   esi
c00113ef:	53                   	push   ebx
c00113f0:	83 ec 30             	sub    esp,0x30
c00113f3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00113f7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0011401:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0011408:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001140e:	6a 0d                	push   0xd
c0011410:	6a 00                	push   0x0
c0011412:	55                   	push   ebp
c0011413:	e8 90 f0 fe ff       	call   c00004a8 <memset>
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0011420:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0011427:	0f 84 e8 05 00 00    	je     c0011a15 <CPU::detectFeatures()+0x629>
c001142d:	83 ec 0c             	sub    esp,0xc
c0011430:	89 ef                	mov    edi,ebp
c0011432:	6a 10                	push   0x10
c0011434:	e8 6b fe ff ff       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c0011439:	83 e0 01             	and    eax,0x1
c001143c:	8d 14 00             	lea    edx,[eax+eax*1]
c001143f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011445:	83 e0 fd             	and    eax,0xfffffffd
c0011448:	09 d0                	or     eax,edx
c001144a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011450:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0011457:	e8 48 fe ff ff       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c001145c:	83 e0 01             	and    eax,0x1
c001145f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0011466:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001146c:	83 e0 fb             	and    eax,0xfffffffb
c001146f:	09 d0                	or     eax,edx
c0011471:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0011477:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001147e:	e8 21 fe ff ff       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c0011483:	83 e0 01             	and    eax,0x1
c0011486:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001148d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011493:	83 e0 f7             	and    eax,0xfffffff7
c0011496:	09 d0                	or     eax,edx
c0011498:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001149e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00114a5:	e8 fa fd ff ff       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c00114aa:	83 e0 01             	and    eax,0x1
c00114ad:	c1 e0 04             	shl    eax,0x4
c00114b0:	88 c2                	mov    dl,al
c00114b2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00114b8:	83 e0 ef             	and    eax,0xffffffef
c00114bb:	09 d0                	or     eax,edx
c00114bd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00114c3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00114ca:	e8 d5 fd ff ff       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c00114cf:	83 e0 01             	and    eax,0x1
c00114d2:	c1 e0 05             	shl    eax,0x5
c00114d5:	88 c2                	mov    dl,al
c00114d7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00114dd:	83 e0 df             	and    eax,0xffffffdf
c00114e0:	09 d0                	or     eax,edx
c00114e2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00114e8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00114ef:	e8 b0 fd ff ff       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c00114f4:	83 e0 01             	and    eax,0x1
c00114f7:	8d 14 00             	lea    edx,[eax+eax*1]
c00114fa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011500:	83 e0 fd             	and    eax,0xfffffffd
c0011503:	09 d0                	or     eax,edx
c0011505:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001150b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0011512:	e8 8d fd ff ff       	call   c00112a4 <CPU::cpuidCheckEDX(unsigned int)>
c0011517:	83 e0 01             	and    eax,0x1
c001151a:	c1 e0 06             	shl    eax,0x6
c001151d:	88 c2                	mov    dl,al
c001151f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011525:	83 e0 bf             	and    eax,0xffffffbf
c0011528:	09 d0                	or     eax,edx
c001152a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011530:	58                   	pop    eax
c0011531:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011535:	50                   	push   eax
c0011536:	8d 44 24 28          	lea    eax,[esp+0x28]
c001153a:	50                   	push   eax
c001153b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001153f:	56                   	push   esi
c0011540:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011544:	50                   	push   eax
c0011545:	6a 00                	push   0x0
c0011547:	e8 d4 fc ff ff       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001154c:	b8 04 00 00 00       	mov    eax,0x4
c0011551:	89 c1                	mov    ecx,eax
c0011553:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011555:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001155b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001155f:	89 c1                	mov    ecx,eax
c0011561:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011563:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0011569:	8d 74 24 38          	lea    esi,[esp+0x38]
c001156d:	89 c1                	mov    ecx,eax
c001156f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011571:	83 c4 18             	add    esp,0x18
c0011574:	68 80 21 02 c0       	push   0xc0022180
c0011579:	55                   	push   ebp
c001157a:	e8 71 f0 fe ff       	call   c00005f0 <strcmp>
c001157f:	83 c4 10             	add    esp,0x10
c0011582:	85 c0                	test   eax,eax
c0011584:	75 0f                	jne    c0011595 <CPU::detectFeatures()+0x1a9>
c0011586:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0011590:	e9 22 02 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c0011595:	50                   	push   eax
c0011596:	50                   	push   eax
c0011597:	68 8d 21 02 c0       	push   0xc002218d
c001159c:	55                   	push   ebp
c001159d:	e8 4e f0 fe ff       	call   c00005f0 <strcmp>
c00115a2:	83 c4 10             	add    esp,0x10
c00115a5:	85 c0                	test   eax,eax
c00115a7:	74 dd                	je     c0011586 <CPU::detectFeatures()+0x19a>
c00115a9:	50                   	push   eax
c00115aa:	50                   	push   eax
c00115ab:	68 9a 21 02 c0       	push   0xc002219a
c00115b0:	55                   	push   ebp
c00115b1:	e8 3a f0 fe ff       	call   c00005f0 <strcmp>
c00115b6:	83 c4 10             	add    esp,0x10
c00115b9:	85 c0                	test   eax,eax
c00115bb:	74 2a                	je     c00115e7 <CPU::detectFeatures()+0x1fb>
c00115bd:	50                   	push   eax
c00115be:	50                   	push   eax
c00115bf:	68 a7 21 02 c0       	push   0xc00221a7
c00115c4:	55                   	push   ebp
c00115c5:	e8 26 f0 fe ff       	call   c00005f0 <strcmp>
c00115ca:	83 c4 10             	add    esp,0x10
c00115cd:	85 c0                	test   eax,eax
c00115cf:	74 16                	je     c00115e7 <CPU::detectFeatures()+0x1fb>
c00115d1:	50                   	push   eax
c00115d2:	50                   	push   eax
c00115d3:	68 b4 21 02 c0       	push   0xc00221b4
c00115d8:	55                   	push   ebp
c00115d9:	e8 12 f0 fe ff       	call   c00005f0 <strcmp>
c00115de:	83 c4 10             	add    esp,0x10
c00115e1:	85 c0                	test   eax,eax
c00115e3:	74 48                	je     c001162d <CPU::detectFeatures()+0x241>
c00115e5:	eb 0f                	jmp    c00115f6 <CPU::detectFeatures()+0x20a>
c00115e7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00115f1:	e9 c1 01 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c00115f6:	50                   	push   eax
c00115f7:	50                   	push   eax
c00115f8:	68 c1 21 02 c0       	push   0xc00221c1
c00115fd:	55                   	push   ebp
c00115fe:	e8 ed ef fe ff       	call   c00005f0 <strcmp>
c0011603:	83 c4 10             	add    esp,0x10
c0011606:	85 c0                	test   eax,eax
c0011608:	74 23                	je     c001162d <CPU::detectFeatures()+0x241>
c001160a:	57                   	push   edi
c001160b:	57                   	push   edi
c001160c:	68 ce 21 02 c0       	push   0xc00221ce
c0011611:	55                   	push   ebp
c0011612:	e8 d9 ef fe ff       	call   c00005f0 <strcmp>
c0011617:	83 c4 10             	add    esp,0x10
c001161a:	85 c0                	test   eax,eax
c001161c:	75 1e                	jne    c001163c <CPU::detectFeatures()+0x250>
c001161e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0011628:	e9 8a 01 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c001162d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0011637:	e9 7b 01 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c001163c:	56                   	push   esi
c001163d:	56                   	push   esi
c001163e:	68 db 21 02 c0       	push   0xc00221db
c0011643:	55                   	push   ebp
c0011644:	e8 a7 ef fe ff       	call   c00005f0 <strcmp>
c0011649:	83 c4 10             	add    esp,0x10
c001164c:	85 c0                	test   eax,eax
c001164e:	75 0f                	jne    c001165f <CPU::detectFeatures()+0x273>
c0011650:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001165a:	e9 58 01 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c001165f:	51                   	push   ecx
c0011660:	51                   	push   ecx
c0011661:	68 9a 21 02 c0       	push   0xc002219a
c0011666:	55                   	push   ebp
c0011667:	e8 84 ef fe ff       	call   c00005f0 <strcmp>
c001166c:	83 c4 10             	add    esp,0x10
c001166f:	85 c0                	test   eax,eax
c0011671:	75 0f                	jne    c0011682 <CPU::detectFeatures()+0x296>
c0011673:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001167d:	e9 35 01 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c0011682:	52                   	push   edx
c0011683:	52                   	push   edx
c0011684:	68 e8 21 02 c0       	push   0xc00221e8
c0011689:	55                   	push   ebp
c001168a:	e8 61 ef fe ff       	call   c00005f0 <strcmp>
c001168f:	83 c4 10             	add    esp,0x10
c0011692:	85 c0                	test   eax,eax
c0011694:	75 0f                	jne    c00116a5 <CPU::detectFeatures()+0x2b9>
c0011696:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00116a0:	e9 12 01 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c00116a5:	50                   	push   eax
c00116a6:	50                   	push   eax
c00116a7:	68 f5 21 02 c0       	push   0xc00221f5
c00116ac:	55                   	push   ebp
c00116ad:	e8 3e ef fe ff       	call   c00005f0 <strcmp>
c00116b2:	83 c4 10             	add    esp,0x10
c00116b5:	85 c0                	test   eax,eax
c00116b7:	75 0f                	jne    c00116c8 <CPU::detectFeatures()+0x2dc>
c00116b9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00116c3:	e9 ef 00 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c00116c8:	50                   	push   eax
c00116c9:	50                   	push   eax
c00116ca:	68 02 22 02 c0       	push   0xc0022202
c00116cf:	55                   	push   ebp
c00116d0:	e8 1b ef fe ff       	call   c00005f0 <strcmp>
c00116d5:	83 c4 10             	add    esp,0x10
c00116d8:	85 c0                	test   eax,eax
c00116da:	75 0f                	jne    c00116eb <CPU::detectFeatures()+0x2ff>
c00116dc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00116e6:	e9 cc 00 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c00116eb:	50                   	push   eax
c00116ec:	50                   	push   eax
c00116ed:	68 0f 22 02 c0       	push   0xc002220f
c00116f2:	55                   	push   ebp
c00116f3:	e8 f8 ee fe ff       	call   c00005f0 <strcmp>
c00116f8:	83 c4 10             	add    esp,0x10
c00116fb:	85 c0                	test   eax,eax
c00116fd:	75 0f                	jne    c001170e <CPU::detectFeatures()+0x322>
c00116ff:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0011709:	e9 a9 00 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c001170e:	50                   	push   eax
c001170f:	50                   	push   eax
c0011710:	68 1c 22 02 c0       	push   0xc002221c
c0011715:	55                   	push   ebp
c0011716:	e8 d5 ee fe ff       	call   c00005f0 <strcmp>
c001171b:	83 c4 10             	add    esp,0x10
c001171e:	85 c0                	test   eax,eax
c0011720:	75 0f                	jne    c0011731 <CPU::detectFeatures()+0x345>
c0011722:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001172c:	e9 86 00 00 00       	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c0011731:	50                   	push   eax
c0011732:	50                   	push   eax
c0011733:	68 29 22 02 c0       	push   0xc0022229
c0011738:	55                   	push   ebp
c0011739:	e8 b2 ee fe ff       	call   c00005f0 <strcmp>
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	85 c0                	test   eax,eax
c0011743:	75 0c                	jne    c0011751 <CPU::detectFeatures()+0x365>
c0011745:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001174f:	eb 66                	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c0011751:	50                   	push   eax
c0011752:	50                   	push   eax
c0011753:	68 36 22 02 c0       	push   0xc0022236
c0011758:	55                   	push   ebp
c0011759:	e8 92 ee fe ff       	call   c00005f0 <strcmp>
c001175e:	83 c4 10             	add    esp,0x10
c0011761:	85 c0                	test   eax,eax
c0011763:	75 0c                	jne    c0011771 <CPU::detectFeatures()+0x385>
c0011765:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001176f:	eb 46                	jmp    c00117b7 <CPU::detectFeatures()+0x3cb>
c0011771:	57                   	push   edi
c0011772:	57                   	push   edi
c0011773:	68 43 22 02 c0       	push   0xc0022243
c0011778:	55                   	push   ebp
c0011779:	e8 72 ee fe ff       	call   c00005f0 <strcmp>
c001177e:	83 c4 10             	add    esp,0x10
c0011781:	85 c0                	test   eax,eax
c0011783:	74 e0                	je     c0011765 <CPU::detectFeatures()+0x379>
c0011785:	56                   	push   esi
c0011786:	56                   	push   esi
c0011787:	68 50 22 02 c0       	push   0xc0022250
c001178c:	55                   	push   ebp
c001178d:	e8 5e ee fe ff       	call   c00005f0 <strcmp>
c0011792:	83 c4 10             	add    esp,0x10
c0011795:	85 c0                	test   eax,eax
c0011797:	74 cc                	je     c0011765 <CPU::detectFeatures()+0x379>
c0011799:	51                   	push   ecx
c001179a:	51                   	push   ecx
c001179b:	68 5d 22 02 c0       	push   0xc002225d
c00117a0:	55                   	push   ebp
c00117a1:	e8 4a ee fe ff       	call   c00005f0 <strcmp>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	85 c0                	test   eax,eax
c00117ab:	74 b8                	je     c0011765 <CPU::detectFeatures()+0x379>
c00117ad:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00117b7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00117bc:	0f 86 be 00 00 00    	jbe    c0011880 <CPU::detectFeatures()+0x494>
c00117c2:	83 ec 0c             	sub    esp,0xc
c00117c5:	68 80 00 00 00       	push   0x80
c00117ca:	e8 31 fb ff ff       	call   c0011300 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00117cf:	83 e0 01             	and    eax,0x1
c00117d2:	c1 e0 06             	shl    eax,0x6
c00117d5:	88 c2                	mov    dl,al
c00117d7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00117dd:	83 e0 bf             	and    eax,0xffffffbf
c00117e0:	09 d0                	or     eax,edx
c00117e2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00117e8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00117ef:	e8 0c fb ff ff       	call   c0011300 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00117f4:	83 e0 01             	and    eax,0x1
c00117f7:	c1 e0 04             	shl    eax,0x4
c00117fa:	88 c2                	mov    dl,al
c00117fc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011802:	83 e0 ef             	and    eax,0xffffffef
c0011805:	09 d0                	or     eax,edx
c0011807:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001180d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0011814:	e8 e7 fa ff ff       	call   c0011300 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0011819:	c1 e0 07             	shl    eax,0x7
c001181c:	88 c2                	mov    dl,al
c001181e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0011824:	83 e0 7f             	and    eax,0x7f
c0011827:	09 d0                	or     eax,edx
c0011829:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001182f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0011836:	e8 f3 fa ff ff       	call   c001132e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001183b:	83 e0 01             	and    eax,0x1
c001183e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0011845:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001184b:	83 e0 f7             	and    eax,0xfffffff7
c001184e:	09 d0                	or     eax,edx
c0011850:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011856:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001185d:	e8 cc fa ff ff       	call   c001132e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0011862:	83 c4 10             	add    esp,0x10
c0011865:	83 e0 01             	and    eax,0x1
c0011868:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001186f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011875:	83 e0 fb             	and    eax,0xfffffffb
c0011878:	09 d0                	or     eax,edx
c001187a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011880:	83 ec 0c             	sub    esp,0xc
c0011883:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011887:	50                   	push   eax
c0011888:	8d 44 24 28          	lea    eax,[esp+0x28]
c001188c:	50                   	push   eax
c001188d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0011891:	56                   	push   esi
c0011892:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011896:	50                   	push   eax
c0011897:	6a 01                	push   0x1
c0011899:	e8 82 f9 ff ff       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001189e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00118a2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00118a8:	88 ca                	mov    dl,cl
c00118aa:	83 e0 f0             	and    eax,0xfffffff0
c00118ad:	83 e2 0f             	and    edx,0xf
c00118b0:	09 d0                	or     eax,edx
c00118b2:	88 ca                	mov    dl,cl
c00118b4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00118ba:	c0 ea 04             	shr    dl,0x4
c00118bd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00118c1:	0f b6 c2             	movzx  eax,dl
c00118c4:	83 c4 20             	add    esp,0x20
c00118c7:	c1 e0 06             	shl    eax,0x6
c00118ca:	89 c7                	mov    edi,eax
c00118cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00118d2:	66 25 3f c0          	and    ax,0xc03f
c00118d6:	09 f8                	or     eax,edi
c00118d8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00118df:	89 c8                	mov    eax,ecx
c00118e1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00118e8:	c1 e8 08             	shr    eax,0x8
c00118eb:	83 e5 3f             	and    ebp,0x3f
c00118ee:	83 e0 0f             	and    eax,0xf
c00118f1:	89 c7                	mov    edi,eax
c00118f3:	c1 e7 06             	shl    edi,0x6
c00118f6:	09 ef                	or     edi,ebp
c00118f8:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00118ff:	89 fa                	mov    edx,edi
c0011901:	83 e5 c0             	and    ebp,0xffffffc0
c0011904:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001190a:	88 c2                	mov    dl,al
c001190c:	c0 ea 02             	shr    dl,0x2
c001190f:	89 d7                	mov    edi,edx
c0011911:	09 ef                	or     edi,ebp
c0011913:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0011919:	89 fa                	mov    edx,edi
c001191b:	83 e5 cf             	and    ebp,0xffffffcf
c001191e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0011924:	89 cf                	mov    edi,ecx
c0011926:	c1 ef 0c             	shr    edi,0xc
c0011929:	83 e7 03             	and    edi,0x3
c001192c:	c1 e7 04             	shl    edi,0x4
c001192f:	09 ef                	or     edi,ebp
c0011931:	3c 06                	cmp    al,0x6
c0011933:	89 fa                	mov    edx,edi
c0011935:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001193b:	74 04                	je     c0011941 <CPU::detectFeatures()+0x555>
c001193d:	3c 0f                	cmp    al,0xf
c001193f:	75 5c                	jne    c001199d <CPU::detectFeatures()+0x5b1>
c0011941:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011945:	89 cf                	mov    edi,ecx
c0011947:	c1 ef 10             	shr    edi,0x10
c001194a:	c1 e7 04             	shl    edi,0x4
c001194d:	09 fa                	or     edx,edi
c001194f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0011955:	0f b6 d2             	movzx  edx,dl
c0011958:	66 81 e7 3f c0       	and    di,0xc03f
c001195d:	c1 e2 06             	shl    edx,0x6
c0011960:	09 fa                	or     edx,edi
c0011962:	3c 0f                	cmp    al,0xf
c0011964:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001196b:	75 30                	jne    c001199d <CPU::detectFeatures()+0x5b1>
c001196d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0011973:	c1 e9 14             	shr    ecx,0x14
c0011976:	83 e0 3f             	and    eax,0x3f
c0011979:	83 c1 0f             	add    ecx,0xf
c001197c:	88 ca                	mov    dl,cl
c001197e:	c0 e9 02             	shr    cl,0x2
c0011981:	c1 e2 06             	shl    edx,0x6
c0011984:	09 d0                	or     eax,edx
c0011986:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001198c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0011992:	83 e0 c0             	and    eax,0xffffffc0
c0011995:	09 c1                	or     ecx,eax
c0011997:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001199d:	83 ec 0c             	sub    esp,0xc
c00119a0:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c00119a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00119ab:	50                   	push   eax
c00119ac:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00119b0:	55                   	push   ebp
c00119b1:	56                   	push   esi
c00119b2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00119b6:	57                   	push   edi
c00119b7:	68 00 00 00 80       	push   0x80000000
c00119bc:	e8 5f f8 ff ff       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00119c1:	83 c4 20             	add    esp,0x20
c00119c4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00119cc:	76 22                	jbe    c00119f0 <CPU::detectFeatures()+0x604>
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00119d5:	50                   	push   eax
c00119d6:	55                   	push   ebp
c00119d7:	56                   	push   esi
c00119d8:	57                   	push   edi
c00119d9:	68 01 00 00 80       	push   0x80000001
c00119de:	e8 3d f8 ff ff       	call   c0011220 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00119e3:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00119ed:	83 c4 20             	add    esp,0x20
c00119f0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00119f6:	8d 50 ff             	lea    edx,[eax-0x1]
c00119f9:	83 fa 03             	cmp    edx,0x3
c00119fc:	76 7e                	jbe    c0011a7c <CPU::detectFeatures()+0x690>
c00119fe:	83 f8 06             	cmp    eax,0x6
c0011a01:	74 79                	je     c0011a7c <CPU::detectFeatures()+0x690>
c0011a03:	52                   	push   edx
c0011a04:	52                   	push   edx
c0011a05:	68 69 22 02 c0       	push   0xc0022269
c0011a0a:	53                   	push   ebx
c0011a0b:	e8 24 c3 ff ff       	call   c000dd34 <Device::setName(char const*)>
c0011a10:	83 c4 10             	add    esp,0x10
c0011a13:	eb 67                	jmp    c0011a7c <CPU::detectFeatures()+0x690>
c0011a15:	50                   	push   eax
c0011a16:	50                   	push   eax
c0011a17:	68 ce 21 02 c0       	push   0xc00221ce
c0011a1c:	55                   	push   ebp
c0011a1d:	e8 42 eb fe ff       	call   c0000564 <strcpy>
c0011a22:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0011a2c:	e8 b2 e7 fe ff       	call   c00001e3 <is486>
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	85 c0                	test   eax,eax
c0011a36:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0011a3c:	74 1d                	je     c0011a5b <CPU::detectFeatures()+0x66f>
c0011a3e:	83 c8 07             	or     eax,0x7
c0011a41:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0011a47:	0f 20 c0             	mov    eax,cr0
c0011a4a:	83 e0 14             	and    eax,0x14
c0011a4d:	83 f8 04             	cmp    eax,0x4
c0011a50:	75 0e                	jne    c0011a60 <CPU::detectFeatures()+0x674>
c0011a52:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c0011a59:	eb 21                	jmp    c0011a7c <CPU::detectFeatures()+0x690>
c0011a5b:	83 e0 f8             	and    eax,0xfffffff8
c0011a5e:	eb e1                	jmp    c0011a41 <CPU::detectFeatures()+0x655>
c0011a60:	e8 59 e7 fe ff       	call   c00001be <hasLegacyFPU>
c0011a65:	83 e0 01             	and    eax,0x1
c0011a68:	8d 14 00             	lea    edx,[eax+eax*1]
c0011a6b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011a71:	83 e0 fd             	and    eax,0xfffffffd
c0011a74:	09 d0                	or     eax,edx
c0011a76:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011a7c:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0011a83:	74 0e                	je     c0011a93 <CPU::detectFeatures()+0x6a7>
c0011a85:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0011a8a:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0011a91:	eb 20                	jmp    c0011ab3 <CPU::detectFeatures()+0x6c7>
c0011a93:	e8 26 e7 fe ff       	call   c00001be <hasLegacyFPU>
c0011a98:	83 e0 01             	and    eax,0x1
c0011a9b:	8d 14 00             	lea    edx,[eax+eax*1]
c0011a9e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0011aa4:	83 e0 fd             	and    eax,0xfffffffd
c0011aa7:	09 d0                	or     eax,edx
c0011aa9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0011aaf:	a8 02                	test   al,0x2
c0011ab1:	75 d2                	jne    c0011a85 <CPU::detectFeatures()+0x699>
c0011ab3:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0011aba:	83 c4 2c             	add    esp,0x2c
c0011abd:	5b                   	pop    ebx
c0011abe:	5e                   	pop    esi
c0011abf:	5f                   	pop    edi
c0011ac0:	5d                   	pop    ebp
c0011ac1:	c3                   	ret    

c0011ac2 <CPU::setupSMEP()>:
c0011ac2:	0f 20 e0             	mov    eax,cr4
c0011ac5:	0d 00 00 10 00       	or     eax,0x100000
c0011aca:	0f 22 e0             	mov    cr4,eax
c0011acd:	c3                   	ret    

c0011ace <CPU::setupUMIP()>:
c0011ace:	0f 20 e0             	mov    eax,cr4
c0011ad1:	80 cc 08             	or     ah,0x8
c0011ad4:	0f 22 e0             	mov    cr4,eax
c0011ad7:	c3                   	ret    

c0011ad8 <CPU::setupTSC()>:
c0011ad8:	0f 20 e0             	mov    eax,cr4
c0011adb:	83 c8 04             	or     eax,0x4
c0011ade:	0f 22 e0             	mov    cr4,eax
c0011ae1:	c3                   	ret    

c0011ae2 <CPU::setupLargePages()>:
c0011ae2:	0f 20 e0             	mov    eax,cr4
c0011ae5:	83 c8 10             	or     eax,0x10
c0011ae8:	0f 22 e0             	mov    cr4,eax
c0011aeb:	c3                   	ret    

c0011aec <CPU::setupPAT()>:
c0011aec:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0011af1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0011af8:	74 2c                	je     c0011b26 <CPU::setupPAT()+0x3a>
c0011afa:	53                   	push   ebx
c0011afb:	83 ec 10             	sub    esp,0x10
c0011afe:	68 77 02 00 00       	push   0x277
c0011b03:	50                   	push   eax
c0011b04:	e8 39 72 ff ff       	call   c0008d42 <Computer::rdmsr(unsigned int)>
c0011b09:	83 e2 f8             	and    edx,0xfffffff8
c0011b0c:	83 ca 01             	or     edx,0x1
c0011b0f:	52                   	push   edx
c0011b10:	50                   	push   eax
c0011b11:	68 77 02 00 00       	push   0x277
c0011b16:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0011b1c:	e8 4d 72 ff ff       	call   c0008d6e <Computer::wrmsr(unsigned int, unsigned long long)>
c0011b21:	83 c4 28             	add    esp,0x28
c0011b24:	5b                   	pop    ebx
c0011b25:	c3                   	ret    
c0011b26:	c3                   	ret    
c0011b27:	90                   	nop

c0011b28 <CPU::setupMTRR()>:
c0011b28:	c3                   	ret    
c0011b29:	90                   	nop

c0011b2a <CPU::setupGlobalPages()>:
c0011b2a:	0f 20 e0             	mov    eax,cr4
c0011b2d:	0c 80                	or     al,0x80
c0011b2f:	0f 22 e0             	mov    cr4,eax
c0011b32:	c3                   	ret    
c0011b33:	90                   	nop

c0011b34 <CPU::allowUsermodeDataAccess()>:
c0011b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b38:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011b3f:	74 03                	je     c0011b44 <CPU::allowUsermodeDataAccess()+0x10>
c0011b41:	0f 01 cb             	stac   
c0011b44:	c3                   	ret    
c0011b45:	90                   	nop

c0011b46 <CPU::prohibitUsermodeDataAccess()>:
c0011b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b4a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0011b51:	74 03                	je     c0011b56 <CPU::prohibitUsermodeDataAccess()+0x10>
c0011b53:	0f 01 ca             	clac   
c0011b56:	c3                   	ret    
c0011b57:	90                   	nop

c0011b58 <CPU::setupSMAP()>:
c0011b58:	0f 20 e0             	mov    eax,cr4
c0011b5b:	0d 00 00 20 00       	or     eax,0x200000
c0011b60:	0f 22 e0             	mov    cr4,eax
c0011b63:	eb e1                	jmp    c0011b46 <CPU::prohibitUsermodeDataAccess()>
c0011b65:	90                   	nop

c0011b66 <CPU::setupFeatures()>:
c0011b66:	53                   	push   ebx
c0011b67:	83 ec 08             	sub    esp,0x8
c0011b6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b6e:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0011b75:	74 18                	je     c0011b8f <CPU::setupFeatures()+0x29>
c0011b77:	83 ec 0c             	sub    esp,0xc
c0011b7a:	68 75 22 02 c0       	push   0xc0022275
c0011b7f:	e8 3d ab ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0011b84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b87:	e8 42 ff ff ff       	call   c0011ace <CPU::setupUMIP()>
c0011b8c:	83 c4 10             	add    esp,0x10
c0011b8f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0011b96:	74 18                	je     c0011bb0 <CPU::setupFeatures()+0x4a>
c0011b98:	83 ec 0c             	sub    esp,0xc
c0011b9b:	68 7f 22 02 c0       	push   0xc002227f
c0011ba0:	e8 1c ab ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0011ba5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ba8:	e8 2b ff ff ff       	call   c0011ad8 <CPU::setupTSC()>
c0011bad:	83 c4 10             	add    esp,0x10
c0011bb0:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0011bb7:	74 18                	je     c0011bd1 <CPU::setupFeatures()+0x6b>
c0011bb9:	83 ec 0c             	sub    esp,0xc
c0011bbc:	68 88 22 02 c0       	push   0xc0022288
c0011bc1:	e8 fb aa ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0011bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bc9:	e8 14 ff ff ff       	call   c0011ae2 <CPU::setupLargePages()>
c0011bce:	83 c4 10             	add    esp,0x10
c0011bd1:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0011bd8:	74 18                	je     c0011bf2 <CPU::setupFeatures()+0x8c>
c0011bda:	83 ec 0c             	sub    esp,0xc
c0011bdd:	68 91 22 02 c0       	push   0xc0022291
c0011be2:	e8 da aa ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0011be7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bea:	e8 3b ff ff ff       	call   c0011b2a <CPU::setupGlobalPages()>
c0011bef:	83 c4 10             	add    esp,0x10
c0011bf2:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0011bf9:	74 18                	je     c0011c13 <CPU::setupFeatures()+0xad>
c0011bfb:	83 ec 0c             	sub    esp,0xc
c0011bfe:	68 a3 22 02 c0       	push   0xc00222a3
c0011c03:	e8 b9 aa ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0011c08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c0b:	e8 dc fe ff ff       	call   c0011aec <CPU::setupPAT()>
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0011c1a:	74 11                	je     c0011c2d <CPU::setupFeatures()+0xc7>
c0011c1c:	c7 44 24 10 ac 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc00222ac
c0011c24:	83 c4 08             	add    esp,0x8
c0011c27:	5b                   	pop    ebx
c0011c28:	e9 94 aa ff ff       	jmp    c000c6c1 <Dbg::kprintf(char const*, ...)>
c0011c2d:	83 c4 08             	add    esp,0x8
c0011c30:	5b                   	pop    ebx
c0011c31:	c3                   	ret    

c0011c32 <CPU::open(int, int, void*)>:
c0011c32:	57                   	push   edi
c0011c33:	56                   	push   esi
c0011c34:	53                   	push   ebx
c0011c35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011c3d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0011c43:	83 ec 0c             	sub    esp,0xc
c0011c46:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0011c4c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0011c52:	50                   	push   eax
c0011c53:	e8 fc 73 ff ff       	call   c0009054 <GDT::setup()>
c0011c58:	83 c4 0c             	add    esp,0xc
c0011c5b:	6a 00                	push   0x0
c0011c5d:	68 ef be ad de       	push   0xdeadbeef
c0011c62:	57                   	push   edi
c0011c63:	e8 84 90 ff ff       	call   c000acec <TSS::setup(unsigned long, unsigned long)>
c0011c68:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c6b:	e8 5c 90 ff ff       	call   c000accc <TSS::flush()>
c0011c70:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0011c76:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c79:	e8 64 76 ff ff       	call   c00092e2 <IDT::setup()>
c0011c7e:	b8 00 04 00 00       	mov    eax,0x400
c0011c83:	0f 23 f8             	mov    db7,eax
c0011c86:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0011c90:	e8 1d 7f ff ff       	call   c0009bb2 <Phys::allocatePage()>
c0011c95:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0011c9b:	89 30                	mov    DWORD PTR [eax],esi
c0011c9d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0011ca3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0011ca6:	58                   	pop    eax
c0011ca7:	5a                   	pop    edx
c0011ca8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0011cae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011cb2:	e8 f5 9f ff ff       	call   c000bcac <VAS::setCPUSpecific(unsigned long)>
c0011cb7:	c7 04 24 b6 22 02 c0 	mov    DWORD PTR [esp],0xc00222b6
c0011cbe:	e8 16 7b ff ff       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0011cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011cc6:	e8 21 f7 ff ff       	call   c00113ec <CPU::detectFeatures()>
c0011ccb:	c7 04 24 d9 22 02 c0 	mov    DWORD PTR [esp],0xc00222d9
c0011cd2:	e8 02 7b ff ff       	call   c00097d9 <Krnl::setBootMessage(char const*)>
c0011cd7:	e8 db 6b 00 00       	call   c00188b7 <Hal::initialise()>
c0011cdc:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c0011ce1:	83 e0 10             	and    eax,0x10
c0011ce4:	83 f8 01             	cmp    eax,0x1
c0011ce7:	19 c0                	sbb    eax,eax
c0011ce9:	83 e0 46             	and    eax,0x46
c0011cec:	83 c0 1e             	add    eax,0x1e
c0011cef:	89 04 24             	mov    DWORD PTR [esp],eax
c0011cf2:	e8 26 d7 ff ff       	call   c000f41d <setupTimer(int)>
c0011cf7:	83 c4 10             	add    esp,0x10
c0011cfa:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0011d00:	f6 05 c0 3f 02 c0 20 	test   BYTE PTR ds:0xc0023fc0,0x20
c0011d07:	74 0c                	je     c0011d15 <CPU::open(int, int, void*)+0xe3>
c0011d09:	83 ec 0c             	sub    esp,0xc
c0011d0c:	53                   	push   ebx
c0011d0d:	e8 54 fe ff ff       	call   c0011b66 <CPU::setupFeatures()>
c0011d12:	83 c4 10             	add    esp,0x10
c0011d15:	5b                   	pop    ebx
c0011d16:	31 c0                	xor    eax,eax
c0011d18:	5e                   	pop    esi
c0011d19:	5f                   	pop    edi
c0011d1a:	c3                   	ret    
c0011d1b:	90                   	nop

c0011d1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0011d1c:	57                   	push   edi
c0011d1d:	56                   	push   esi
c0011d1e:	53                   	push   ebx
c0011d1f:	51                   	push   ecx
c0011d20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011d24:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0011d27:	0f 02 c0             	lar    eax,ax
c0011d2a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0011d2d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011d31:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0011d34:	88 ca                	mov    dl,cl
c0011d36:	c0 ea 06             	shr    dl,0x6
c0011d39:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0011d3d:	89 ca                	mov    edx,ecx
c0011d3f:	66 c1 ea 03          	shr    dx,0x3
c0011d43:	83 e2 07             	and    edx,0x7
c0011d46:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0011d4b:	88 17                	mov    BYTE PTR [edi],dl
c0011d4d:	0f 84 a6 01 00 00    	je     c0011ef9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0011d53:	83 e1 07             	and    ecx,0x7
c0011d56:	80 f9 04             	cmp    cl,0x4
c0011d59:	0f 84 98 00 00 00    	je     c0011df7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0011d5f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0011d64:	0f 95 c0             	setne  al
c0011d67:	80 f9 05             	cmp    cl,0x5
c0011d6a:	0f 95 c2             	setne  dl
c0011d6d:	08 c2                	or     dl,al
c0011d6f:	74 79                	je     c0011dea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0011d71:	84 c9                	test   cl,cl
c0011d73:	75 05                	jne    c0011d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0011d75:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0011d78:	eb 3c                	jmp    c0011db6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011d7a:	80 f9 01             	cmp    cl,0x1
c0011d7d:	75 05                	jne    c0011d84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0011d7f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011d82:	eb 32                	jmp    c0011db6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011d84:	80 f9 02             	cmp    cl,0x2
c0011d87:	75 05                	jne    c0011d8e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0011d89:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011d8c:	eb 28                	jmp    c0011db6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011d8e:	31 c0                	xor    eax,eax
c0011d90:	80 f9 03             	cmp    cl,0x3
c0011d93:	75 05                	jne    c0011d9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0011d95:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d98:	eb 1c                	jmp    c0011db6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011d9a:	80 f9 05             	cmp    cl,0x5
c0011d9d:	75 05                	jne    c0011da4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0011d9f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0011da2:	eb 12                	jmp    c0011db6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011da4:	80 f9 06             	cmp    cl,0x6
c0011da7:	75 05                	jne    c0011dae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0011da9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011dac:	eb 08                	jmp    c0011db6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011dae:	80 f9 07             	cmp    cl,0x7
c0011db1:	75 03                	jne    c0011db6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0011db3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011db6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0011dbb:	75 10                	jne    c0011dcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0011dbd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0011dc1:	b9 03 00 00 00       	mov    ecx,0x3
c0011dc6:	01 d0                	add    eax,edx
c0011dc8:	e9 37 01 00 00       	jmp    c0011f04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0011dcd:	b9 02 00 00 00       	mov    ecx,0x2
c0011dd2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0011dd7:	0f 85 27 01 00 00    	jne    c0011f04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0011ddd:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0011de0:	b9 06 00 00 00       	mov    ecx,0x6
c0011de5:	e9 1a 01 00 00       	jmp    c0011f04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0011dea:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0011ded:	b9 06 00 00 00       	mov    ecx,0x6
c0011df2:	e9 0f 01 00 00       	jmp    c0011f06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011df7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0011dfa:	88 ca                	mov    dl,cl
c0011dfc:	c0 ea 06             	shr    dl,0x6
c0011dff:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0011e03:	89 ca                	mov    edx,ecx
c0011e05:	66 c1 ea 03          	shr    dx,0x3
c0011e09:	83 e2 07             	and    edx,0x7
c0011e0c:	80 e1 07             	and    cl,0x7
c0011e0f:	75 05                	jne    c0011e16 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0011e11:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0011e14:	eb 4c                	jmp    c0011e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011e16:	80 f9 01             	cmp    cl,0x1
c0011e19:	75 05                	jne    c0011e20 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0011e1b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0011e1e:	eb 42                	jmp    c0011e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011e20:	80 f9 02             	cmp    cl,0x2
c0011e23:	75 05                	jne    c0011e2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0011e25:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011e28:	eb 38                	jmp    c0011e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011e2a:	80 f9 03             	cmp    cl,0x3
c0011e2d:	75 05                	jne    c0011e34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0011e2f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0011e32:	eb 2e                	jmp    c0011e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011e34:	80 f9 04             	cmp    cl,0x4
c0011e37:	75 12                	jne    c0011e4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0011e39:	f6 c4 60             	test   ah,0x60
c0011e3c:	75 08                	jne    c0011e46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0011e3e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0011e41:	8d 78 14             	lea    edi,[eax+0x14]
c0011e44:	eb 1c                	jmp    c0011e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011e46:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0011e49:	eb 17                	jmp    c0011e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011e4b:	80 f9 05             	cmp    cl,0x5
c0011e4e:	75 05                	jne    c0011e55 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0011e50:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0011e53:	eb 0d                	jmp    c0011e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011e55:	80 f9 06             	cmp    cl,0x6
c0011e58:	75 05                	jne    c0011e5f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0011e5a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0011e5d:	eb 03                	jmp    c0011e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0011e5f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0011e62:	84 d2                	test   dl,dl
c0011e64:	75 05                	jne    c0011e6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0011e66:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0011e69:	eb 3c                	jmp    c0011ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011e6b:	80 fa 01             	cmp    dl,0x1
c0011e6e:	75 05                	jne    c0011e75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0011e70:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011e73:	eb 32                	jmp    c0011ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011e75:	80 fa 02             	cmp    dl,0x2
c0011e78:	75 05                	jne    c0011e7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0011e7a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011e7d:	eb 28                	jmp    c0011ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011e7f:	80 fa 03             	cmp    dl,0x3
c0011e82:	75 05                	jne    c0011e89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0011e84:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011e87:	eb 1e                	jmp    c0011ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011e89:	31 c0                	xor    eax,eax
c0011e8b:	80 fa 04             	cmp    dl,0x4
c0011e8e:	74 17                	je     c0011ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011e90:	80 fa 05             	cmp    dl,0x5
c0011e93:	75 05                	jne    c0011e9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0011e95:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0011e98:	eb 0d                	jmp    c0011ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011e9a:	80 fa 06             	cmp    dl,0x6
c0011e9d:	75 05                	jne    c0011ea4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0011e9f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011ea2:	eb 03                	jmp    c0011ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0011ea4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011ea7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0011eac:	0f 94 c2             	sete   dl
c0011eaf:	80 f9 05             	cmp    cl,0x5
c0011eb2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0011eb6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0011ebb:	d3 e0                	shl    eax,cl
c0011ebd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0011ec1:	74 0a                	je     c0011ecd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0011ec3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0011ec6:	b9 07 00 00 00       	mov    ecx,0x7
c0011ecb:	eb 37                	jmp    c0011f04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0011ecd:	01 f8                	add    eax,edi
c0011ecf:	b9 03 00 00 00       	mov    ecx,0x3
c0011ed4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0011ed9:	74 2b                	je     c0011f06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011edb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0011ee0:	75 0d                	jne    c0011eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0011ee2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0011ee6:	01 c8                	add    eax,ecx
c0011ee8:	b9 04 00 00 00       	mov    ecx,0x4
c0011eed:	eb 17                	jmp    c0011f06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011eef:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0011ef2:	b9 07 00 00 00       	mov    ecx,0x7
c0011ef7:	eb 0d                	jmp    c0011f06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011ef9:	b9 02 00 00 00       	mov    ecx,0x2
c0011efe:	b2 01                	mov    dl,0x1
c0011f00:	31 c0                	xor    eax,eax
c0011f02:	eb 02                	jmp    c0011f06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0011f04:	31 d2                	xor    edx,edx
c0011f06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011f0a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0011f0c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011f10:	88 11                	mov    BYTE PTR [ecx],dl
c0011f12:	5a                   	pop    edx
c0011f13:	5b                   	pop    ebx
c0011f14:	5e                   	pop    esi
c0011f15:	5f                   	pop    edi
c0011f16:	c3                   	ret    

c0011f17 <Krnl::smpEntry()>:
c0011f17:	eb fe                	jmp    c0011f17 <Krnl::smpEntry()>

c0011f19 <Krnl::startCPU(int)>:
c0011f19:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0011f1e:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0011f25:	0f 84 36 01 00 00    	je     c0012061 <Krnl::startCPU(int)+0x148>
c0011f2b:	53                   	push   ebx
c0011f2c:	83 ec 10             	sub    esp,0x10
c0011f2f:	fa                   	cli    
c0011f30:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0011f36:	6a 1b                	push   0x1b
c0011f38:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0011f3e:	e8 ff 6d ff ff       	call   c0008d42 <Computer::rdmsr(unsigned int)>
c0011f43:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f48:	89 c3                	mov    ebx,eax
c0011f4a:	58                   	pop    eax
c0011f4b:	5a                   	pop    edx
c0011f4c:	53                   	push   ebx
c0011f4d:	68 1c 23 02 c0       	push   0xc002231c
c0011f52:	e8 6a a7 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0011f57:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0011f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f65:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0011f6f:	c1 e0 18             	shl    eax,0x18
c0011f72:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0011f78:	83 c4 10             	add    esp,0x10
c0011f7b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011f81:	09 c2                	or     edx,eax
c0011f83:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0011f89:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0011f8f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0011f95:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0011f9b:	80 cd c5             	or     ch,0xc5
c0011f9e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0011fa4:	f3 90                	pause  
c0011fa6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011fa8:	0f ba e1 0c          	bt     ecx,0xc
c0011fac:	72 f6                	jb     c0011fa4 <Krnl::startCPU(int)+0x8b>
c0011fae:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0011fb4:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0011fba:	09 c1                	or     ecx,eax
c0011fbc:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0011fc2:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0011fc8:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0011fce:	80 cd 85             	or     ch,0x85
c0011fd1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0011fd7:	f3 90                	pause  
c0011fd9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011fdb:	0f ba e1 0c          	bt     ecx,0xc
c0011fdf:	72 f6                	jb     c0011fd7 <Krnl::startCPU(int)+0xbe>
c0011fe1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0011feb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0011ff1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0011ff7:	09 c1                	or     ecx,eax
c0011ff9:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0011fff:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012005:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001200b:	81 c9 02 06 00 00    	or     ecx,0x602
c0012011:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0012017:	f3 90                	pause  
c0012019:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001201b:	0f ba e1 0c          	bt     ecx,0xc
c001201f:	72 f6                	jb     c0012017 <Krnl::startCPU(int)+0xfe>
c0012021:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001202b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0012031:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012037:	09 c8                	or     eax,ecx
c0012039:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001203f:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0012045:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001204a:	0d 02 06 00 00       	or     eax,0x602
c001204f:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0012055:	f3 90                	pause  
c0012057:	8b 02                	mov    eax,DWORD PTR [edx]
c0012059:	0f ba e0 0c          	bt     eax,0xc
c001205d:	72 f6                	jb     c0012055 <Krnl::startCPU(int)+0x13c>
c001205f:	eb fe                	jmp    c001205f <Krnl::startCPU(int)+0x146>
c0012061:	c3                   	ret    

c0012062 <Krnl::startCPUs()>:
c0012062:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0012067:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001206d:	88 c2                	mov    dl,al
c001206f:	83 e2 0a             	and    edx,0xa
c0012072:	80 fa 0a             	cmp    dl,0xa
c0012075:	75 09                	jne    c0012080 <Krnl::startCPUs()+0x1e>
c0012077:	a8 01                	test   al,0x1
c0012079:	74 05                	je     c0012080 <Krnl::startCPUs()+0x1e>
c001207b:	e9 1b e1 fe ff       	jmp    c000019b <prepareTramp>
c0012080:	c3                   	ret    
c0012081:	90                   	nop

c0012082 <EnvVarContainer::getEnv(char const*)>:
c0012082:	57                   	push   edi
c0012083:	56                   	push   esi
c0012084:	53                   	push   ebx
c0012085:	31 db                	xor    ebx,ebx
c0012087:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001208b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001208d:	7e 2b                	jle    c00120ba <EnvVarContainer::getEnv(char const*)+0x38>
c001208f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0012096:	50                   	push   eax
c0012097:	50                   	push   eax
c0012098:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001209b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001209e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120a2:	e8 49 e5 fe ff       	call   c00005f0 <strcmp>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	85 c0                	test   eax,eax
c00120ac:	75 09                	jne    c00120b7 <EnvVarContainer::getEnv(char const*)+0x35>
c00120ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00120b1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00120b5:	eb 05                	jmp    c00120bc <EnvVarContainer::getEnv(char const*)+0x3a>
c00120b7:	43                   	inc    ebx
c00120b8:	eb d1                	jmp    c001208b <EnvVarContainer::getEnv(char const*)+0x9>
c00120ba:	31 c0                	xor    eax,eax
c00120bc:	5b                   	pop    ebx
c00120bd:	5e                   	pop    esi
c00120be:	5f                   	pop    edi
c00120bf:	c3                   	ret    

c00120c0 <EnvVarContainer::setEnv(char const*, char const*)>:
c00120c0:	55                   	push   ebp
c00120c1:	57                   	push   edi
c00120c2:	56                   	push   esi
c00120c3:	53                   	push   ebx
c00120c4:	83 ec 28             	sub    esp,0x28
c00120c7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00120cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00120cf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00120d3:	56                   	push   esi
c00120d4:	e8 eb e3 fe ff       	call   c00004c4 <strlen>
c00120d9:	40                   	inc    eax
c00120da:	89 04 24             	mov    DWORD PTR [esp],eax
c00120dd:	e8 9d 76 ff ff       	call   c000977f <malloc>
c00120e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120e9:	e8 d6 e3 fe ff       	call   c00004c4 <strlen>
c00120ee:	40                   	inc    eax
c00120ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00120f2:	e8 88 76 ff ff       	call   c000977f <malloc>
c00120f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00120fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120fe:	e8 c1 e3 fe ff       	call   c00004c4 <strlen>
c0012103:	83 c4 0c             	add    esp,0xc
c0012106:	40                   	inc    eax
c0012107:	50                   	push   eax
c0012108:	6a 00                	push   0x0
c001210a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001210e:	e8 95 e3 fe ff       	call   c00004a8 <memset>
c0012113:	89 34 24             	mov    DWORD PTR [esp],esi
c0012116:	e8 a9 e3 fe ff       	call   c00004c4 <strlen>
c001211b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001211f:	8d 48 01             	lea    ecx,[eax+0x1]
c0012122:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012124:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012127:	89 de                	mov    esi,ebx
c0012129:	e8 96 e3 fe ff       	call   c00004c4 <strlen>
c001212e:	83 c4 0c             	add    esp,0xc
c0012131:	40                   	inc    eax
c0012132:	50                   	push   eax
c0012133:	6a 00                	push   0x0
c0012135:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012139:	e8 6a e3 fe ff       	call   c00004a8 <memset>
c001213e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012141:	e8 7e e3 fe ff       	call   c00004c4 <strlen>
c0012146:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001214a:	8d 48 01             	lea    ecx,[eax+0x1]
c001214d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001214f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012152:	40                   	inc    eax
c0012153:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012156:	c1 e0 03             	shl    eax,0x3
c0012159:	5a                   	pop    edx
c001215a:	59                   	pop    ecx
c001215b:	50                   	push   eax
c001215c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001215f:	e8 07 76 ff ff       	call   c000976b <realloc>
c0012164:	8d 74 24 18          	lea    esi,[esp+0x18]
c0012168:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001216b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001216e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0012172:	b9 08 00 00 00       	mov    ecx,0x8
c0012177:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012179:	83 c4 2c             	add    esp,0x2c
c001217c:	5b                   	pop    ebx
c001217d:	5e                   	pop    esi
c001217e:	5f                   	pop    edi
c001217f:	5d                   	pop    ebp
c0012180:	c3                   	ret    
c0012181:	90                   	nop

c0012182 <EnvVarContainer::deleteEnv(char const*)>:
c0012182:	c3                   	ret    
c0012183:	90                   	nop

c0012184 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0012184:	55                   	push   ebp
c0012185:	57                   	push   edi
c0012186:	56                   	push   esi
c0012187:	53                   	push   ebx
c0012188:	81 ec 38 01 00 00    	sub    esp,0x138
c001218e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0012195:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001219c:	68 14 01 00 00       	push   0x114
c00121a1:	e8 d9 75 ff ff       	call   c000977f <malloc>
c00121a6:	83 c4 0c             	add    esp,0xc
c00121a9:	89 c3                	mov    ebx,eax
c00121ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00121ae:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00121b5:	50                   	push   eax
c00121b6:	e8 71 aa ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c00121bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121be:	e8 b1 ad ff ff       	call   c000cf74 <File::exists()>
c00121c3:	83 c4 10             	add    esp,0x10
c00121c6:	84 c0                	test   al,al
c00121c8:	75 31                	jne    c00121fb <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00121ca:	50                   	push   eax
c00121cb:	50                   	push   eax
c00121cc:	6a 12                	push   0x12
c00121ce:	53                   	push   ebx
c00121cf:	e8 32 ab ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c00121d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121d6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00121d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00121dc:	e8 e3 e2 fe ff       	call   c00004c4 <strlen>
c00121e1:	5a                   	pop    edx
c00121e2:	31 d2                	xor    edx,edx
c00121e4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00121e8:	51                   	push   ecx
c00121e9:	56                   	push   esi
c00121ea:	52                   	push   edx
c00121eb:	50                   	push   eax
c00121ec:	53                   	push   ebx
c00121ed:	ff d7                	call   edi
c00121ef:	83 c4 14             	add    esp,0x14
c00121f2:	53                   	push   ebx
c00121f3:	e8 6c ab ff ff       	call   c000cd64 <File::close()>
c00121f8:	83 c4 10             	add    esp,0x10
c00121fb:	56                   	push   esi
c00121fc:	31 f6                	xor    esi,esi
c00121fe:	68 00 01 00 00       	push   0x100
c0012203:	6a 00                	push   0x0
c0012205:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0012209:	50                   	push   eax
c001220a:	e8 99 e2 fe ff       	call   c00004a8 <memset>
c001220f:	5f                   	pop    edi
c0012210:	58                   	pop    eax
c0012211:	6a 01                	push   0x1
c0012213:	53                   	push   ebx
c0012214:	e8 ed aa ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012224:	83 ec 0c             	sub    esp,0xc
c0012227:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012229:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001222d:	51                   	push   ecx
c001222e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0012232:	52                   	push   edx
c0012233:	6a 00                	push   0x0
c0012235:	6a 01                	push   0x1
c0012237:	53                   	push   ebx
c0012238:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001223b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001223f:	83 c4 20             	add    esp,0x20
c0012242:	3c 0d                	cmp    al,0xd
c0012244:	0f 84 09 01 00 00    	je     c0012353 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001224a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001224f:	0f 84 ef 00 00 00    	je     c0012344 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0012255:	3c 0a                	cmp    al,0xa
c0012257:	74 13                	je     c001226c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0012259:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001225e:	74 0c                	je     c001226c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0012260:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0012266:	0f 8e d8 00 00 00    	jle    c0012344 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001226c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012270:	83 ec 0c             	sub    esp,0xc
c0012273:	8d 78 01             	lea    edi,[eax+0x1]
c0012276:	57                   	push   edi
c0012277:	e8 03 75 ff ff       	call   c000977f <malloc>
c001227c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0012280:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012284:	8d 56 04             	lea    edx,[esi+0x4]
c0012287:	89 14 24             	mov    DWORD PTR [esp],edx
c001228a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001228e:	e8 ec 74 ff ff       	call   c000977f <malloc>
c0012293:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012297:	83 c4 0c             	add    esp,0xc
c001229a:	57                   	push   edi
c001229b:	6a 00                	push   0x0
c001229d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00122a1:	e8 02 e2 fe ff       	call   c00004a8 <memset>
c00122a6:	8d 74 24 30          	lea    esi,[esp+0x30]
c00122aa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00122ae:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00122b4:	83 c4 0c             	add    esp,0xc
c00122b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00122bb:	52                   	push   edx
c00122bc:	6a 00                	push   0x0
c00122be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00122c2:	e8 e1 e1 fe ff       	call   c00004a8 <memset>
c00122c7:	8d 74 24 30          	lea    esi,[esp+0x30]
c00122cb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00122cf:	89 34 24             	mov    DWORD PTR [esp],esi
c00122d2:	e8 ed e1 fe ff       	call   c00004c4 <strlen>
c00122d7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00122db:	89 c1                	mov    ecx,eax
c00122dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00122df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00122e2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00122e5:	40                   	inc    eax
c00122e6:	83 c4 10             	add    esp,0x10
c00122e9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00122ec:	85 d2                	test   edx,edx
c00122ee:	75 0c                	jne    c00122fc <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00122f0:	83 ec 0c             	sub    esp,0xc
c00122f3:	6a 08                	push   0x8
c00122f5:	e8 85 74 ff ff       	call   c000977f <malloc>
c00122fa:	eb 0c                	jmp    c0012308 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00122fc:	c1 e0 03             	shl    eax,0x3
c00122ff:	51                   	push   ecx
c0012300:	51                   	push   ecx
c0012301:	50                   	push   eax
c0012302:	52                   	push   edx
c0012303:	e8 63 74 ff ff       	call   c000976b <realloc>
c0012308:	83 c4 10             	add    esp,0x10
c001230b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001230e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012311:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0012314:	8d 74 24 18          	lea    esi,[esp+0x18]
c0012318:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001231c:	b9 08 00 00 00       	mov    ecx,0x8
c0012321:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012323:	31 f6                	xor    esi,esi
c0012325:	50                   	push   eax
c0012326:	68 00 01 00 00       	push   0x100
c001232b:	6a 00                	push   0x0
c001232d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0012331:	50                   	push   eax
c0012332:	e8 71 e1 fe ff       	call   c00004a8 <memset>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012342:	eb 0f                	jmp    c0012353 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0012344:	3c 3d                	cmp    al,0x3d
c0012346:	74 07                	je     c001234f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0012348:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001234c:	46                   	inc    esi
c001234d:	eb 04                	jmp    c0012353 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001234f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0012353:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012358:	0f 85 c6 fe ff ff    	jne    c0012224 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001235e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012364:	5b                   	pop    ebx
c0012365:	5e                   	pop    esi
c0012366:	5f                   	pop    edi
c0012367:	5d                   	pop    ebp
c0012368:	c3                   	ret    
c0012369:	90                   	nop

c001236a <EnvVarContainer::__loadSystem()>:
c001236a:	83 ec 10             	sub    esp,0x10
c001236d:	68 80 39 02 c0       	push   0xc0023980
c0012372:	68 2d 23 02 c0       	push   0xc002232d
c0012377:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001237b:	e8 04 fe ff ff       	call   c0012184 <EnvVarContainer::loadFrom(char const*, char const*)>
c0012380:	83 c4 1c             	add    esp,0x1c
c0012383:	c3                   	ret    

c0012384 <EnvVarContainer::__loadUser()>:
c0012384:	c3                   	ret    
c0012385:	90                   	nop

c0012386 <EnvVarContainer::EnvVarContainer(Process*)>:
c0012386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001238a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012394:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012398:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001239b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001239f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00123a6:	90                   	nop
c00123a7:	c3                   	ret    

c00123a8 <EnvVarContainer::~EnvVarContainer()>:
c00123a8:	83 ec 0c             	sub    esp,0xc
c00123ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123b2:	85 c0                	test   eax,eax
c00123b4:	74 1d                	je     c00123d3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00123b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00123bc:	85 c0                	test   eax,eax
c00123be:	74 13                	je     c00123d3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00123c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	50                   	push   eax
c00123cb:	e8 bf 73 ff ff       	call   c000978f <free>
c00123d0:	83 c4 10             	add    esp,0x10
c00123d3:	90                   	nop
c00123d4:	83 c4 0c             	add    esp,0xc
c00123d7:	c3                   	ret    

c00123d8 <Krnl::getEnv(Process*, char const*)>:
c00123d8:	53                   	push   ebx
c00123d9:	83 ec 08             	sub    esp,0x8
c00123dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00123e4:	39 05 b0 74 02 c0    	cmp    DWORD PTR ds:0xc00274b0,eax
c00123ea:	74 04                	je     c00123f0 <Krnl::getEnv(Process*, char const*)+0x18>
c00123ec:	85 c0                	test   eax,eax
c00123ee:	75 0b                	jne    c00123fb <Krnl::getEnv(Process*, char const*)+0x23>
c00123f0:	a1 34 6a 02 c0       	mov    eax,ds:0xc0026a34
c00123f5:	85 c0                	test   eax,eax
c00123f7:	75 19                	jne    c0012412 <Krnl::getEnv(Process*, char const*)+0x3a>
c00123f9:	eb 27                	jmp    c0012422 <Krnl::getEnv(Process*, char const*)+0x4a>
c00123fb:	52                   	push   edx
c00123fc:	52                   	push   edx
c00123fd:	53                   	push   ebx
c00123fe:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0012404:	e8 79 fc ff ff       	call   c0012082 <EnvVarContainer::getEnv(char const*)>
c0012409:	83 c4 10             	add    esp,0x10
c001240c:	85 c0                	test   eax,eax
c001240e:	75 28                	jne    c0012438 <Krnl::getEnv(Process*, char const*)+0x60>
c0012410:	eb de                	jmp    c00123f0 <Krnl::getEnv(Process*, char const*)+0x18>
c0012412:	52                   	push   edx
c0012413:	52                   	push   edx
c0012414:	53                   	push   ebx
c0012415:	50                   	push   eax
c0012416:	e8 67 fc ff ff       	call   c0012082 <EnvVarContainer::getEnv(char const*)>
c001241b:	83 c4 10             	add    esp,0x10
c001241e:	85 c0                	test   eax,eax
c0012420:	75 16                	jne    c0012438 <Krnl::getEnv(Process*, char const*)+0x60>
c0012422:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0012426:	a1 38 6a 02 c0       	mov    eax,ds:0xc0026a38
c001242b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001242f:	83 c4 08             	add    esp,0x8
c0012432:	5b                   	pop    ebx
c0012433:	e9 4a fc ff ff       	jmp    c0012082 <EnvVarContainer::getEnv(char const*)>
c0012438:	83 c4 08             	add    esp,0x8
c001243b:	5b                   	pop    ebx
c001243c:	c3                   	ret    

c001243d <Krnl::setEnvSystem(char const*, char const*)>:
c001243d:	83 ec 10             	sub    esp,0x10
c0012440:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012444:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012448:	ff 35 38 6a 02 c0    	push   DWORD PTR ds:0xc0026a38
c001244e:	e8 6d fc ff ff       	call   c00120c0 <EnvVarContainer::setEnv(char const*, char const*)>
c0012453:	83 c4 1c             	add    esp,0x1c
c0012456:	c3                   	ret    

c0012457 <Krnl::setEnvUser(char const*, char const*)>:
c0012457:	a1 34 6a 02 c0       	mov    eax,ds:0xc0026a34
c001245c:	85 c0                	test   eax,eax
c001245e:	74 15                	je     c0012475 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0012460:	83 ec 10             	sub    esp,0x10
c0012463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012467:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001246b:	50                   	push   eax
c001246c:	e8 4f fc ff ff       	call   c00120c0 <EnvVarContainer::setEnv(char const*, char const*)>
c0012471:	83 c4 1c             	add    esp,0x1c
c0012474:	c3                   	ret    
c0012475:	c3                   	ret    

c0012476 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0012476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001247a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0012480:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012484:	e9 37 fc ff ff       	jmp    c00120c0 <EnvVarContainer::setEnv(char const*, char const*)>

c0012489 <Krnl::deleteEnvSystem(char const*)>:
c0012489:	c3                   	ret    

c001248a <Krnl::deleteEnvUser(char const*)>:
c001248a:	c3                   	ret    

c001248b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001248b:	c3                   	ret    

c001248c <Krnl::newProcessEnv(Process*)>:
c001248c:	83 ec 28             	sub    esp,0x28
c001248f:	6a 0c                	push   0xc
c0012491:	e8 e9 72 ff ff       	call   c000977f <malloc>
c0012496:	5a                   	pop    edx
c0012497:	59                   	pop    ecx
c0012498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001249c:	50                   	push   eax
c001249d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124a1:	e8 e0 fe ff ff       	call   c0012386 <EnvVarContainer::EnvVarContainer(Process*)>
c00124a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124aa:	83 c4 2c             	add    esp,0x2c
c00124ad:	c3                   	ret    

c00124ae <Krnl::copyProcessEnv(Process*, Process*)>:
c00124ae:	57                   	push   edi
c00124af:	56                   	push   esi
c00124b0:	53                   	push   ebx
c00124b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b5:	83 ec 0c             	sub    esp,0xc
c00124b8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00124be:	6a 0c                	push   0xc
c00124c0:	e8 ba 72 ff ff       	call   c000977f <malloc>
c00124c5:	89 c3                	mov    ebx,eax
c00124c7:	58                   	pop    eax
c00124c8:	5a                   	pop    edx
c00124c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124cd:	53                   	push   ebx
c00124ce:	e8 b3 fe ff ff       	call   c0012386 <EnvVarContainer::EnvVarContainer(Process*)>
c00124d3:	8b 07                	mov    eax,DWORD PTR [edi]
c00124d5:	89 03                	mov    DWORD PTR [ebx],eax
c00124d7:	c1 e0 03             	shl    eax,0x3
c00124da:	89 04 24             	mov    DWORD PTR [esp],eax
c00124dd:	e8 9d 72 ff ff       	call   c000977f <malloc>
c00124e2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00124e5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00124e7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00124ea:	c1 e1 03             	shl    ecx,0x3
c00124ed:	89 c7                	mov    edi,eax
c00124ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00124f1:	83 c4 10             	add    esp,0x10
c00124f4:	89 d8                	mov    eax,ebx
c00124f6:	5b                   	pop    ebx
c00124f7:	5e                   	pop    esi
c00124f8:	5f                   	pop    edi
c00124f9:	c3                   	ret    

c00124fa <Krnl::loadSystemEnv()>:
c00124fa:	53                   	push   ebx
c00124fb:	83 ec 14             	sub    esp,0x14
c00124fe:	6a 0c                	push   0xc
c0012500:	e8 7a 72 ff ff       	call   c000977f <malloc>
c0012505:	89 c3                	mov    ebx,eax
c0012507:	58                   	pop    eax
c0012508:	5a                   	pop    edx
c0012509:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c001250f:	53                   	push   ebx
c0012510:	e8 71 fe ff ff       	call   c0012386 <EnvVarContainer::EnvVarContainer(Process*)>
c0012515:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012518:	89 1d 38 6a 02 c0    	mov    DWORD PTR ds:0xc0026a38,ebx
c001251e:	e8 47 fe ff ff       	call   c001236a <EnvVarContainer::__loadSystem()>
c0012523:	83 c4 18             	add    esp,0x18
c0012526:	5b                   	pop    ebx
c0012527:	c3                   	ret    

c0012528 <Krnl::loadUserEnv()>:
c0012528:	53                   	push   ebx
c0012529:	83 ec 14             	sub    esp,0x14
c001252c:	6a 0c                	push   0xc
c001252e:	e8 4c 72 ff ff       	call   c000977f <malloc>
c0012533:	89 c3                	mov    ebx,eax
c0012535:	58                   	pop    eax
c0012536:	5a                   	pop    edx
c0012537:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c001253d:	53                   	push   ebx
c001253e:	e8 43 fe ff ff       	call   c0012386 <EnvVarContainer::EnvVarContainer(Process*)>
c0012543:	89 1d 34 6a 02 c0    	mov    DWORD PTR ds:0xc0026a34,ebx
c0012549:	83 c4 18             	add    esp,0x18
c001254c:	5b                   	pop    ebx
c001254d:	c3                   	ret    

c001254e <Krnl::flushEnv()>:
c001254e:	c3                   	ret    

c001254f <Krnl::getProcessTotalEnvCount(Process*)>:
c001254f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012553:	8b 15 34 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a34
c0012559:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001255f:	a1 38 6a 02 c0       	mov    eax,ds:0xc0026a38
c0012564:	8b 00                	mov    eax,DWORD PTR [eax]
c0012566:	03 01                	add    eax,DWORD PTR [ecx]
c0012568:	85 d2                	test   edx,edx
c001256a:	74 02                	je     c001256e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001256c:	03 02                	add    eax,DWORD PTR [edx]
c001256e:	c3                   	ret    

c001256f <Krnl::getProcessEnvPair(Process*, int)>:
c001256f:	57                   	push   edi
c0012570:	56                   	push   esi
c0012571:	8b 35 34 6a 02 c0    	mov    esi,DWORD PTR ds:0xc0026a34
c0012577:	53                   	push   ebx
c0012578:	85 f6                	test   esi,esi
c001257a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001257e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012582:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0012588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001258c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001258e:	75 16                	jne    c00125a6 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0012590:	39 c2                	cmp    edx,eax
c0012592:	7c 16                	jl     c00125aa <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0012594:	8b 0d 38 6a 02 c0    	mov    ecx,DWORD PTR ds:0xc0026a38
c001259a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001259c:	01 c6                	add    esi,eax
c001259e:	39 d6                	cmp    esi,edx
c00125a0:	7e 3c                	jle    c00125de <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00125a2:	29 c2                	sub    edx,eax
c00125a4:	eb 04                	jmp    c00125aa <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00125a6:	39 c2                	cmp    edx,eax
c00125a8:	7d 05                	jge    c00125af <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00125aa:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00125ad:	eb 20                	jmp    c00125cf <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00125af:	8b 3e                	mov    edi,DWORD PTR [esi]
c00125b1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00125b4:	39 d1                	cmp    ecx,edx
c00125b6:	7e 04                	jle    c00125bc <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00125b8:	29 c2                	sub    edx,eax
c00125ba:	eb 10                	jmp    c00125cc <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00125bc:	8b 35 38 6a 02 c0    	mov    esi,DWORD PTR ds:0xc0026a38
c00125c2:	03 0e                	add    ecx,DWORD PTR [esi]
c00125c4:	39 d1                	cmp    ecx,edx
c00125c6:	7e 16                	jle    c00125de <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00125c8:	29 c2                	sub    edx,eax
c00125ca:	29 fa                	sub    edx,edi
c00125cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00125cf:	8d 14 d0             	lea    edx,[eax+edx*8]
c00125d2:	8b 02                	mov    eax,DWORD PTR [edx]
c00125d4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00125d7:	89 03                	mov    DWORD PTR [ebx],eax
c00125d9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00125dc:	eb 1d                	jmp    c00125fb <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00125de:	83 ec 0c             	sub    esp,0xc
c00125e1:	68 4f 23 02 c0       	push   0xc002234f
c00125e6:	e8 18 00 00 00       	call   c0012603 <Krnl::panic(char const*)>
c00125eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00125f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00125f8:	83 c4 10             	add    esp,0x10
c00125fb:	89 d8                	mov    eax,ebx
c00125fd:	5b                   	pop    ebx
c00125fe:	5e                   	pop    esi
c00125ff:	5f                   	pop    edi
c0012600:	c2 04 00             	ret    0x4

c0012603 <Krnl::panic(char const*)>:
c0012603:	53                   	push   ebx
c0012604:	83 ec 10             	sub    esp,0x10
c0012607:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001260b:	fa                   	cli    
c001260c:	c6 05 44 6a 02 c0 01 	mov    BYTE PTR ds:0xc0026a44,0x1
c0012613:	53                   	push   ebx
c0012614:	68 69 23 02 c0       	push   0xc0022369
c0012619:	e8 a3 a0 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001261e:	83 c4 0c             	add    esp,0xc
c0012621:	6a 01                	push   0x1
c0012623:	6a 0f                	push   0xf
c0012625:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001262b:	e8 5c 7d ff ff       	call   c000a38c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012630:	59                   	pop    ecx
c0012631:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012637:	e8 54 7f ff ff       	call   c000a590 <VgaText::clearScreen()>
c001263c:	58                   	pop    eax
c001263d:	5a                   	pop    edx
c001263e:	68 c0 23 02 c0       	push   0xc00223c0
c0012643:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012649:	e8 76 7d ff ff       	call   c000a3c4 <VgaText::setTitle(char*)>
c001264e:	83 c4 0c             	add    esp,0xc
c0012651:	6a 01                	push   0x1
c0012653:	6a 0f                	push   0xf
c0012655:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001265b:	e8 2c 7d ff ff       	call   c000a38c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012660:	59                   	pop    ecx
c0012661:	58                   	pop    eax
c0012662:	68 82 23 02 c0       	push   0xc0022382
c0012667:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001266d:	e8 12 82 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012672:	58                   	pop    eax
c0012673:	5a                   	pop    edx
c0012674:	68 0c 24 02 c0       	push   0xc002240c
c0012679:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001267f:	e8 00 82 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012684:	59                   	pop    ecx
c0012685:	58                   	pop    eax
c0012686:	68 9e 23 02 c0       	push   0xc002239e
c001268b:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012691:	e8 ee 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012696:	58                   	pop    eax
c0012697:	5a                   	pop    edx
c0012698:	53                   	push   ebx
c0012699:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001269f:	e8 e0 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00126a4:	59                   	pop    ecx
c00126a5:	5b                   	pop    ebx
c00126a6:	68 be 23 02 c0       	push   0xc00223be
c00126ab:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c00126b1:	e8 ce 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00126b6:	58                   	pop    eax
c00126b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126bb:	e8 46 2a 00 00       	call   c0015106 <Thr::getDriverNameFromAddress(unsigned long)>
c00126c0:	83 c4 10             	add    esp,0x10
c00126c3:	85 c0                	test   eax,eax
c00126c5:	0f 84 36 01 00 00    	je     c0012801 <Krnl::panic(char const*)+0x1fe>
c00126cb:	83 ec 08             	sub    esp,0x8
c00126ce:	89 c3                	mov    ebx,eax
c00126d0:	68 48 24 02 c0       	push   0xc0022448
c00126d5:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c00126db:	e8 a4 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00126e0:	59                   	pop    ecx
c00126e1:	58                   	pop    eax
c00126e2:	68 9e 23 02 c0       	push   0xc002239e
c00126e7:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c00126ed:	e8 92 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00126f2:	58                   	pop    eax
c00126f3:	5a                   	pop    edx
c00126f4:	53                   	push   ebx
c00126f5:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c00126fb:	e8 84 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012700:	83 c4 10             	add    esp,0x10
c0012703:	83 ec 08             	sub    esp,0x8
c0012706:	68 bd 23 02 c0       	push   0xc00223bd
c001270b:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012711:	e8 6e 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012716:	58                   	pop    eax
c0012717:	5a                   	pop    edx
c0012718:	68 a0 24 02 c0       	push   0xc00224a0
c001271d:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012723:	e8 5c 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012728:	59                   	pop    ecx
c0012729:	5b                   	pop    ebx
c001272a:	68 e0 24 02 c0       	push   0xc00224e0
c001272f:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012735:	e8 4a 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c001273a:	58                   	pop    eax
c001273b:	5a                   	pop    edx
c001273c:	68 a9 23 02 c0       	push   0xc00223a9
c0012741:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012747:	e8 38 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c001274c:	59                   	pop    ecx
c001274d:	5b                   	pop    ebx
c001274e:	68 24 25 02 c0       	push   0xc0022524
c0012753:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012759:	e8 26 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c001275e:	58                   	pop    eax
c001275f:	5a                   	pop    edx
c0012760:	68 c1 23 02 c0       	push   0xc00223c1
c0012765:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001276b:	e8 14 81 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012770:	0f 20 c0             	mov    eax,cr0
c0012773:	59                   	pop    ecx
c0012774:	5b                   	pop    ebx
c0012775:	50                   	push   eax
c0012776:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001277c:	e8 bd 80 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c0012781:	58                   	pop    eax
c0012782:	5a                   	pop    edx
c0012783:	68 cb 23 02 c0       	push   0xc00223cb
c0012788:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001278e:	e8 f1 80 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012793:	0f 20 d0             	mov    eax,cr2
c0012796:	59                   	pop    ecx
c0012797:	5b                   	pop    ebx
c0012798:	50                   	push   eax
c0012799:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001279f:	e8 9a 80 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c00127a4:	58                   	pop    eax
c00127a5:	5a                   	pop    edx
c00127a6:	68 d5 23 02 c0       	push   0xc00223d5
c00127ab:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c00127b1:	e8 ce 80 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00127b6:	0f 20 d8             	mov    eax,cr3
c00127b9:	59                   	pop    ecx
c00127ba:	5b                   	pop    ebx
c00127bb:	50                   	push   eax
c00127bc:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c00127c2:	e8 77 80 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c00127c7:	58                   	pop    eax
c00127c8:	5a                   	pop    edx
c00127c9:	68 e8 23 02 c0       	push   0xc00223e8
c00127ce:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c00127d4:	e8 ab 80 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00127d9:	0f 20 e0             	mov    eax,cr4
c00127dc:	59                   	pop    ecx
c00127dd:	5b                   	pop    ebx
c00127de:	50                   	push   eax
c00127df:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c00127e5:	e8 54 80 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c00127ea:	58                   	pop    eax
c00127eb:	5a                   	pop    edx
c00127ec:	68 f2 23 02 c0       	push   0xc00223f2
c00127f1:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c00127f7:	e8 88 80 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00127fc:	83 c4 10             	add    esp,0x10
c00127ff:	eb fe                	jmp    c00127ff <Krnl::panic(char const*)+0x1fc>
c0012801:	51                   	push   ecx
c0012802:	51                   	push   ecx
c0012803:	68 74 24 02 c0       	push   0xc0022474
c0012808:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c001280e:	e8 71 80 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012813:	5b                   	pop    ebx
c0012814:	58                   	pop    eax
c0012815:	68 9e 23 02 c0       	push   0xc002239e
c001281a:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012820:	e8 5f 80 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0012825:	58                   	pop    eax
c0012826:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001282b:	5a                   	pop    edx
c001282c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001282f:	83 c0 0c             	add    eax,0xc
c0012832:	50                   	push   eax
c0012833:	ff 35 f4 3f 02 c0    	push   DWORD PTR ds:0xc0023ff4
c0012839:	e8 46 80 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c001283e:	83 c4 10             	add    esp,0x10
c0012841:	e9 bd fe ff ff       	jmp    c0012703 <Krnl::panic(char const*)+0x100>

c0012846 <Krnl::powerThread(void*)>:
c0012846:	53                   	push   ebx
c0012847:	83 ec 08             	sub    esp,0x8
c001284a:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001284f:	48                   	dec    eax
c0012850:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0012855:	75 01                	jne    c0012858 <Krnl::powerThread(void*)+0x12>
c0012857:	fb                   	sti    
c0012858:	52                   	push   edx
c0012859:	52                   	push   edx
c001285a:	ff 35 a4 6a 02 c0    	push   DWORD PTR ds:0xc0026aa4
c0012860:	68 4a 25 02 c0       	push   0xc002254a
c0012865:	e8 57 9e ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001286a:	59                   	pop    ecx
c001286b:	8b 1d 94 6a 02 c0    	mov    ebx,DWORD PTR ds:0xc0026a94
c0012871:	58                   	pop    eax
c0012872:	c6 05 60 6a 02 c0 00 	mov    BYTE PTR ds:0xc0026a60,0x0
c0012879:	53                   	push   ebx
c001287a:	68 54 25 02 c0       	push   0xc0022554
c001287f:	e8 3d 9e ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0012884:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001288b:	e8 b0 35 00 00       	call   c0015e40 <sleep(unsigned int)>
c0012890:	a1 a4 6a 02 c0       	mov    eax,ds:0xc0026aa4
c0012895:	83 c4 10             	add    esp,0x10
c0012898:	83 c0 0a             	add    eax,0xa
c001289b:	85 db                	test   ebx,ebx
c001289d:	a3 a4 6a 02 c0       	mov    ds:0xc0026aa4,eax
c00128a2:	74 b4                	je     c0012858 <Krnl::powerThread(void*)+0x12>
c00128a4:	39 d8                	cmp    eax,ebx
c00128a6:	7e b0                	jle    c0012858 <Krnl::powerThread(void*)+0x12>
c00128a8:	83 ec 0c             	sub    esp,0xc
c00128ab:	68 6c 25 02 c0       	push   0xc002256c
c00128b0:	e8 0c 9e ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00128b5:	58                   	pop    eax
c00128b6:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c00128bc:	e8 15 65 ff ff       	call   c0008dd6 <Computer::sleep()>
c00128c1:	83 c4 10             	add    esp,0x10
c00128c4:	eb 92                	jmp    c0012858 <Krnl::powerThread(void*)+0x12>

c00128c6 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00128c6:	57                   	push   edi
c00128c7:	b9 09 00 00 00       	mov    ecx,0x9
c00128cc:	56                   	push   esi
c00128cd:	bf 80 6a 02 c0       	mov    edi,0xc0026a80
c00128d2:	fc                   	cld    
c00128d3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00128d9:	5e                   	pop    esi
c00128da:	5f                   	pop    edi
c00128db:	c3                   	ret    

c00128dc <Krnl::userIOReceived()>:
c00128dc:	c7 05 a4 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026aa4,0x0
c00128e6:	c3                   	ret    

c00128e7 <Krnl::handlePowerButton()>:
c00128e7:	83 ec 0c             	sub    esp,0xc
c00128ea:	a1 80 6a 02 c0       	mov    eax,ds:0xc0026a80
c00128ef:	83 f8 02             	cmp    eax,0x2
c00128f2:	75 10                	jne    c0012904 <Krnl::handlePowerButton()+0x1d>
c00128f4:	83 ec 0c             	sub    esp,0xc
c00128f7:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c00128fd:	e8 a4 64 ff ff       	call   c0008da6 <Computer::shutdown()>
c0012902:	eb 11                	jmp    c0012915 <Krnl::handlePowerButton()+0x2e>
c0012904:	48                   	dec    eax
c0012905:	75 11                	jne    c0012918 <Krnl::handlePowerButton()+0x31>
c0012907:	83 ec 0c             	sub    esp,0xc
c001290a:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0012910:	e8 c1 64 ff ff       	call   c0008dd6 <Computer::sleep()>
c0012915:	83 c4 10             	add    esp,0x10
c0012918:	83 c4 0c             	add    esp,0xc
c001291b:	c3                   	ret    

c001291c <Krnl::handleSleepButton()>:
c001291c:	83 ec 0c             	sub    esp,0xc
c001291f:	a1 84 6a 02 c0       	mov    eax,ds:0xc0026a84
c0012924:	83 f8 02             	cmp    eax,0x2
c0012927:	75 10                	jne    c0012939 <Krnl::handleSleepButton()+0x1d>
c0012929:	83 ec 0c             	sub    esp,0xc
c001292c:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0012932:	e8 6f 64 ff ff       	call   c0008da6 <Computer::shutdown()>
c0012937:	eb 11                	jmp    c001294a <Krnl::handleSleepButton()+0x2e>
c0012939:	48                   	dec    eax
c001293a:	75 11                	jne    c001294d <Krnl::handleSleepButton()+0x31>
c001293c:	83 ec 0c             	sub    esp,0xc
c001293f:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0012945:	e8 8c 64 ff ff       	call   c0008dd6 <Computer::sleep()>
c001294a:	83 c4 10             	add    esp,0x10
c001294d:	83 c4 0c             	add    esp,0xc
c0012950:	c3                   	ret    

c0012951 <Krnl::setupPowerManager()>:
c0012951:	83 ec 0c             	sub    esp,0xc
c0012954:	c7 05 a4 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026aa4,0x0
c001295e:	68 f0 00 00 00       	push   0xf0
c0012963:	c6 05 60 6a 02 c0 00 	mov    BYTE PTR ds:0xc0026a60,0x0
c001296a:	6a 00                	push   0x0
c001296c:	68 46 28 01 c0       	push   0xc0012846
c0012971:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c0012977:	e8 a0 2f 00 00       	call   c001591c <Process::createThread(void (*)(void*), void*, int)>
c001297c:	c7 05 80 6a 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026a80,0x2
c0012986:	c7 05 84 6a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026a84,0x1
c0012990:	c7 05 88 6a 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026a88,0x3
c001299a:	c7 05 8c 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a8c,0x0
c00129a4:	c7 05 98 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a98,0x0
c00129ae:	c7 05 90 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a90,0x0
c00129b8:	c7 05 9c 6a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026a9c,0x0
c00129c2:	c7 05 94 6a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026a94,0x3c
c00129cc:	c7 05 a0 6a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026aa0,0x3c
c00129d6:	83 c4 1c             	add    esp,0x1c
c00129d9:	c3                   	ret    

c00129da <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00129da:	55                   	push   ebp
c00129db:	57                   	push   edi
c00129dc:	56                   	push   esi
c00129dd:	53                   	push   ebx
c00129de:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00129e4:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00129eb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00129ed:	8d 6e 01             	lea    ebp,[esi+0x1]
c00129f0:	80 fb 40             	cmp    bl,0x40
c00129f3:	75 1b                	jne    c0012a10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00129f5:	8a 16                	mov    dl,BYTE PTR [esi]
c00129f7:	84 d2                	test   dl,dl
c00129f9:	0f 84 f1 00 00 00    	je     c0012af0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00129ff:	8d 46 01             	lea    eax,[esi+0x1]
c0012a02:	80 fa 3a             	cmp    dl,0x3a
c0012a05:	74 04                	je     c0012a0b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0012a07:	89 c6                	mov    esi,eax
c0012a09:	eb ea                	jmp    c00129f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012a0b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a0e:	89 c6                	mov    esi,eax
c0012a10:	50                   	push   eax
c0012a11:	6a 40                	push   0x40
c0012a13:	6a 00                	push   0x0
c0012a15:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a19:	50                   	push   eax
c0012a1a:	e8 89 da fe ff       	call   c00004a8 <memset>
c0012a1f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a26:	31 c0                	xor    eax,eax
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	8a 0f                	mov    cl,BYTE PTR [edi]
c0012a2d:	84 c9                	test   cl,cl
c0012a2f:	0f 84 bb 00 00 00    	je     c0012af0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012a35:	3d c7 00 00 00       	cmp    eax,0xc7
c0012a3a:	0f 8f b0 00 00 00    	jg     c0012af0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012a40:	80 f9 0a             	cmp    cl,0xa
c0012a43:	0f 85 98 00 00 00    	jne    c0012ae1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0012a49:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012a4e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012a52:	a8 df                	test   al,0xdf
c0012a54:	0f 94 c1             	sete   cl
c0012a57:	3c 23                	cmp    al,0x23
c0012a59:	0f 94 c2             	sete   dl
c0012a5c:	08 d1                	or     cl,dl
c0012a5e:	75 4a                	jne    c0012aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012a60:	8d 50 f7             	lea    edx,[eax-0x9]
c0012a63:	80 fa 01             	cmp    dl,0x1
c0012a66:	76 42                	jbe    c0012aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012a68:	3c 5b                	cmp    al,0x5b
c0012a6a:	75 42                	jne    c0012aae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012a6c:	80 fb 40             	cmp    bl,0x40
c0012a6f:	75 39                	jne    c0012aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012a71:	83 ec 0c             	sub    esp,0xc
c0012a74:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012a78:	52                   	push   edx
c0012a79:	e8 46 da fe ff       	call   c00004c4 <strlen>
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	83 f8 3f             	cmp    eax,0x3f
c0012a84:	77 6a                	ja     c0012af0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012a86:	50                   	push   eax
c0012a87:	50                   	push   eax
c0012a88:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012a8c:	52                   	push   edx
c0012a8d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012a91:	52                   	push   edx
c0012a92:	e8 cd da fe ff       	call   c0000564 <strcpy>
c0012a97:	58                   	pop    eax
c0012a98:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012a9c:	52                   	push   edx
c0012a9d:	e8 22 da fe ff       	call   c00004c4 <strlen>
c0012aa2:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012aa7:	83 c4 10             	add    esp,0x10
c0012aaa:	31 d2                	xor    edx,edx
c0012aac:	eb 3a                	jmp    c0012ae8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0012aae:	80 fb 40             	cmp    bl,0x40
c0012ab1:	74 06                	je     c0012ab9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0012ab3:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012ab7:	eb 20                	jmp    c0012ad9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012ab9:	50                   	push   eax
c0012aba:	50                   	push   eax
c0012abb:	55                   	push   ebp
c0012abc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ac0:	50                   	push   eax
c0012ac1:	e8 2a db fe ff       	call   c00005f0 <strcmp>
c0012ac6:	83 c4 10             	add    esp,0x10
c0012ac9:	85 c0                	test   eax,eax
c0012acb:	75 dd                	jne    c0012aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012acd:	eb e4                	jmp    c0012ab3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0012acf:	8d 50 01             	lea    edx,[eax+0x1]
c0012ad2:	80 f9 3d             	cmp    cl,0x3d
c0012ad5:	74 1d                	je     c0012af4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0012ad7:	89 d0                	mov    eax,edx
c0012ad9:	8a 08                	mov    cl,BYTE PTR [eax]
c0012adb:	84 c9                	test   cl,cl
c0012add:	75 f0                	jne    c0012acf <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0012adf:	eb 0f                	jmp    c0012af0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012ae1:	8d 50 01             	lea    edx,[eax+0x1]
c0012ae4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012ae8:	47                   	inc    edi
c0012ae9:	89 d0                	mov    eax,edx
c0012aeb:	e9 3b ff ff ff       	jmp    c0012a2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0012af0:	31 c0                	xor    eax,eax
c0012af2:	eb 33                	jmp    c0012b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0012af4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012af8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012afb:	50                   	push   eax
c0012afc:	50                   	push   eax
c0012afd:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b01:	50                   	push   eax
c0012b02:	56                   	push   esi
c0012b03:	e8 e8 da fe ff       	call   c00005f0 <strcmp>
c0012b08:	83 c4 10             	add    esp,0x10
c0012b0b:	85 c0                	test   eax,eax
c0012b0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b11:	75 97                	jne    c0012aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012b13:	51                   	push   ecx
c0012b14:	51                   	push   ecx
c0012b15:	52                   	push   edx
c0012b16:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b1d:	e8 42 da fe ff       	call   c0000564 <strcpy>
c0012b22:	83 c4 10             	add    esp,0x10
c0012b25:	b0 01                	mov    al,0x1
c0012b27:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b2d:	5b                   	pop    ebx
c0012b2e:	5e                   	pop    esi
c0012b2f:	5f                   	pop    edi
c0012b30:	5d                   	pop    ebp
c0012b31:	c3                   	ret    

c0012b32 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012b32:	57                   	push   edi
c0012b33:	56                   	push   esi
c0012b34:	53                   	push   ebx
c0012b35:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012b3b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012b42:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012b49:	53                   	push   ebx
c0012b4a:	e8 75 d9 fe ff       	call   c00004c4 <strlen>
c0012b4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b52:	89 c7                	mov    edi,eax
c0012b54:	e8 6b d9 fe ff       	call   c00004c4 <strlen>
c0012b59:	83 c4 10             	add    esp,0x10
c0012b5c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012b60:	3d ff 00 00 00       	cmp    eax,0xff
c0012b65:	0f 87 d3 00 00 00    	ja     c0012c3e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012b6b:	57                   	push   edi
c0012b6c:	57                   	push   edi
c0012b6d:	56                   	push   esi
c0012b6e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012b72:	56                   	push   esi
c0012b73:	e8 ec d9 fe ff       	call   c0000564 <strcpy>
c0012b78:	58                   	pop    eax
c0012b79:	5a                   	pop    edx
c0012b7a:	68 cf 28 02 c0       	push   0xc00228cf
c0012b7f:	56                   	push   esi
c0012b80:	e8 1f db fe ff       	call   c00006a4 <strcat>
c0012b85:	59                   	pop    ecx
c0012b86:	5f                   	pop    edi
c0012b87:	53                   	push   ebx
c0012b88:	56                   	push   esi
c0012b89:	e8 16 db fe ff       	call   c00006a4 <strcat>
c0012b8e:	58                   	pop    eax
c0012b8f:	5a                   	pop    edx
c0012b90:	68 79 25 02 c0       	push   0xc0022579
c0012b95:	56                   	push   esi
c0012b96:	e8 09 db fe ff       	call   c00006a4 <strcat>
c0012b9b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012ba2:	e8 d8 6b ff ff       	call   c000977f <malloc>
c0012ba7:	83 c4 0c             	add    esp,0xc
c0012baa:	89 c3                	mov    ebx,eax
c0012bac:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c0012bb2:	56                   	push   esi
c0012bb3:	50                   	push   eax
c0012bb4:	e8 73 a0 ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0012bb9:	83 c4 10             	add    esp,0x10
c0012bbc:	85 db                	test   ebx,ebx
c0012bbe:	74 7e                	je     c0012c3e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bc0:	51                   	push   ecx
c0012bc1:	51                   	push   ecx
c0012bc2:	6a 01                	push   0x1
c0012bc4:	53                   	push   ebx
c0012bc5:	e8 3c a1 ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c0012bca:	83 c4 10             	add    esp,0x10
c0012bcd:	85 c0                	test   eax,eax
c0012bcf:	74 08                	je     c0012bd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012bd1:	83 ec 0c             	sub    esp,0xc
c0012bd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bd6:	53                   	push   ebx
c0012bd7:	eb 5f                	jmp    c0012c38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012bd9:	52                   	push   edx
c0012bda:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012bde:	50                   	push   eax
c0012bdf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012be3:	50                   	push   eax
c0012be4:	53                   	push   ebx
c0012be5:	e8 c8 a3 ff ff       	call   c000cfb2 <File::stat(unsigned long long*, bool*)>
c0012bea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012bee:	83 c4 10             	add    esp,0x10
c0012bf1:	89 c1                	mov    ecx,eax
c0012bf3:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012bf7:	74 31                	je     c0012c2a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012bf9:	83 ec 0c             	sub    esp,0xc
c0012bfc:	50                   	push   eax
c0012bfd:	e8 7d 6b ff ff       	call   c000977f <malloc>
c0012c02:	89 c6                	mov    esi,eax
c0012c04:	58                   	pop    eax
c0012c05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c07:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c0b:	52                   	push   edx
c0012c0c:	56                   	push   esi
c0012c0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c15:	53                   	push   ebx
c0012c16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c19:	83 c4 20             	add    esp,0x20
c0012c1c:	85 c0                	test   eax,eax
c0012c1e:	75 0a                	jne    c0012c2a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c24:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012c28:	74 18                	je     c0012c42 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	53                   	push   ebx
c0012c2e:	e8 31 a1 ff ff       	call   c000cd64 <File::close()>
c0012c33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c3b:	83 c4 10             	add    esp,0x10
c0012c3e:	31 c0                	xor    eax,eax
c0012c40:	eb 3b                	jmp    c0012c7d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	53                   	push   ebx
c0012c46:	e8 19 a1 ff ff       	call   c000cd64 <File::close()>
c0012c4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c53:	83 c4 0c             	add    esp,0xc
c0012c56:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012c5d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012c64:	56                   	push   esi
c0012c65:	e8 70 fd ff ff       	call   c00129da <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012c6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c6d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012c71:	e8 19 6b ff ff       	call   c000978f <free>
c0012c76:	83 c4 10             	add    esp,0x10
c0012c79:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012c7d:	81 c4 20 01 00 00    	add    esp,0x120
c0012c83:	5b                   	pop    ebx
c0012c84:	5e                   	pop    esi
c0012c85:	5f                   	pop    edi
c0012c86:	c3                   	ret    

c0012c87 <Reg::getLine(char*, char*, char*)>:
c0012c87:	57                   	push   edi
c0012c88:	56                   	push   esi
c0012c89:	53                   	push   ebx
c0012c8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012c92:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012c96:	57                   	push   edi
c0012c97:	56                   	push   esi
c0012c98:	53                   	push   ebx
c0012c99:	68 7e 25 02 c0       	push   0xc002257e
c0012c9e:	e8 8f fe ff ff       	call   c0012b32 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012ca3:	83 c4 10             	add    esp,0x10
c0012ca6:	84 c0                	test   al,al
c0012ca8:	75 10                	jne    c0012cba <Reg::getLine(char*, char*, char*)+0x33>
c0012caa:	57                   	push   edi
c0012cab:	56                   	push   esi
c0012cac:	53                   	push   ebx
c0012cad:	68 a3 25 02 c0       	push   0xc00225a3
c0012cb2:	e8 7b fe ff ff       	call   c0012b32 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012cb7:	83 c4 10             	add    esp,0x10
c0012cba:	5b                   	pop    ebx
c0012cbb:	5e                   	pop    esi
c0012cbc:	5f                   	pop    edi
c0012cbd:	c3                   	ret    

c0012cbe <Reg::readInt(char*, char*, int*)>:
c0012cbe:	55                   	push   ebp
c0012cbf:	57                   	push   edi
c0012cc0:	56                   	push   esi
c0012cc1:	53                   	push   ebx
c0012cc2:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012cc8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0012ccc:	57                   	push   edi
c0012ccd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012cd4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012cdb:	e8 a7 ff ff ff       	call   c0012c87 <Reg::getLine(char*, char*, char*)>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	84 c0                	test   al,al
c0012ce5:	0f 84 b3 00 00 00    	je     c0012d9e <Reg::readInt(char*, char*, int*)+0xe0>
c0012ceb:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0012cef:	80 fa 2b             	cmp    dl,0x2b
c0012cf2:	74 0c                	je     c0012d00 <Reg::readInt(char*, char*, int*)+0x42>
c0012cf4:	80 fa 2d             	cmp    dl,0x2d
c0012cf7:	75 0e                	jne    c0012d07 <Reg::readInt(char*, char*, int*)+0x49>
c0012cf9:	ba 01 00 00 00       	mov    edx,0x1
c0012cfe:	eb 0b                	jmp    c0012d0b <Reg::readInt(char*, char*, int*)+0x4d>
c0012d00:	ba 01 00 00 00       	mov    edx,0x1
c0012d05:	eb 02                	jmp    c0012d09 <Reg::readInt(char*, char*, int*)+0x4b>
c0012d07:	31 d2                	xor    edx,edx
c0012d09:	31 c0                	xor    eax,eax
c0012d0b:	be 0a 00 00 00       	mov    esi,0xa
c0012d10:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012d15:	75 20                	jne    c0012d37 <Reg::readInt(char*, char*, int*)+0x79>
c0012d17:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0012d1b:	80 f9 78             	cmp    cl,0x78
c0012d1e:	75 0a                	jne    c0012d2a <Reg::readInt(char*, char*, int*)+0x6c>
c0012d20:	83 c2 02             	add    edx,0x2
c0012d23:	be 10 00 00 00       	mov    esi,0x10
c0012d28:	eb 0d                	jmp    c0012d37 <Reg::readInt(char*, char*, int*)+0x79>
c0012d2a:	80 f9 62             	cmp    cl,0x62
c0012d2d:	75 08                	jne    c0012d37 <Reg::readInt(char*, char*, int*)+0x79>
c0012d2f:	83 c2 02             	add    edx,0x2
c0012d32:	be 02 00 00 00       	mov    esi,0x2
c0012d37:	01 d7                	add    edi,edx
c0012d39:	31 d2                	xor    edx,edx
c0012d3b:	8a 1f                	mov    bl,BYTE PTR [edi]
c0012d3d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0012d41:	80 fb 0d             	cmp    bl,0xd
c0012d44:	0f 94 c3             	sete   bl
c0012d47:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012d4c:	0f 94 c1             	sete   cl
c0012d4f:	08 cb                	or     bl,cl
c0012d51:	75 3a                	jne    c0012d8d <Reg::readInt(char*, char*, int*)+0xcf>
c0012d53:	0f af d6             	imul   edx,esi
c0012d56:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0012d5b:	83 fe 10             	cmp    esi,0x10
c0012d5e:	75 26                	jne    c0012d86 <Reg::readInt(char*, char*, int*)+0xc8>
c0012d60:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012d64:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0012d67:	89 e9                	mov    ecx,ebp
c0012d69:	80 f9 05             	cmp    cl,0x5
c0012d6c:	77 06                	ja     c0012d74 <Reg::readInt(char*, char*, int*)+0xb6>
c0012d6e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0012d72:	eb 16                	jmp    c0012d8a <Reg::readInt(char*, char*, int*)+0xcc>
c0012d74:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012d78:	83 e9 61             	sub    ecx,0x61
c0012d7b:	80 f9 05             	cmp    cl,0x5
c0012d7e:	77 06                	ja     c0012d86 <Reg::readInt(char*, char*, int*)+0xc8>
c0012d80:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0012d84:	eb 04                	jmp    c0012d8a <Reg::readInt(char*, char*, int*)+0xcc>
c0012d86:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0012d8a:	47                   	inc    edi
c0012d8b:	eb ae                	jmp    c0012d3b <Reg::readInt(char*, char*, int*)+0x7d>
c0012d8d:	84 c0                	test   al,al
c0012d8f:	74 02                	je     c0012d93 <Reg::readInt(char*, char*, int*)+0xd5>
c0012d91:	f7 da                	neg    edx
c0012d93:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012d9a:	89 10                	mov    DWORD PTR [eax],edx
c0012d9c:	88 d8                	mov    al,bl
c0012d9e:	81 c4 ec 00 00 00    	add    esp,0xec
c0012da4:	5b                   	pop    ebx
c0012da5:	5e                   	pop    esi
c0012da6:	5f                   	pop    edi
c0012da7:	5d                   	pop    ebp
c0012da8:	c3                   	ret    

c0012da9 <Reg::readString(char*, char*, char*, int)>:
c0012da9:	57                   	push   edi
c0012daa:	56                   	push   esi
c0012dab:	53                   	push   ebx
c0012dac:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012db2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012db9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012dbd:	57                   	push   edi
c0012dbe:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012dc5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012dcc:	e8 b6 fe ff ff       	call   c0012c87 <Reg::getLine(char*, char*, char*)>
c0012dd1:	83 c4 10             	add    esp,0x10
c0012dd4:	89 c6                	mov    esi,eax
c0012dd6:	84 c0                	test   al,al
c0012dd8:	74 44                	je     c0012e1e <Reg::readString(char*, char*, char*, int)+0x75>
c0012dda:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012de1:	31 c0                	xor    eax,eax
c0012de3:	4a                   	dec    edx
c0012de4:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012de7:	84 c9                	test   cl,cl
c0012de9:	74 0f                	je     c0012dfa <Reg::readString(char*, char*, char*, int)+0x51>
c0012deb:	39 c2                	cmp    edx,eax
c0012ded:	7e 0b                	jle    c0012dfa <Reg::readString(char*, char*, char*, int)+0x51>
c0012def:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012df2:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012df7:	40                   	inc    eax
c0012df8:	eb ea                	jmp    c0012de4 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	53                   	push   ebx
c0012dfe:	e8 c1 d6 fe ff       	call   c00004c4 <strlen>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e0b:	75 11                	jne    c0012e1e <Reg::readString(char*, char*, char*, int)+0x75>
c0012e0d:	83 ec 0c             	sub    esp,0xc
c0012e10:	53                   	push   ebx
c0012e11:	e8 ae d6 fe ff       	call   c00004c4 <strlen>
c0012e16:	83 c4 10             	add    esp,0x10
c0012e19:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e1e:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012e24:	89 f0                	mov    eax,esi
c0012e26:	5b                   	pop    ebx
c0012e27:	5e                   	pop    esi
c0012e28:	5f                   	pop    edi
c0012e29:	c3                   	ret    

c0012e2a <Reg::readBool(char*, char*, bool*)>:
c0012e2a:	83 ec 20             	sub    esp,0x20
c0012e2d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e31:	50                   	push   eax
c0012e32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e3a:	e8 7f fe ff ff       	call   c0012cbe <Reg::readInt(char*, char*, int*)>
c0012e3f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012e48:	0f 95 02             	setne  BYTE PTR [edx]
c0012e4b:	83 c4 2c             	add    esp,0x2c
c0012e4e:	c3                   	ret    

c0012e4f <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012e4f:	53                   	push   ebx
c0012e50:	83 ec 1c             	sub    esp,0x1c
c0012e53:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012e57:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012e5b:	50                   	push   eax
c0012e5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e64:	e8 c1 ff ff ff       	call   c0012e2a <Reg::readBool(char*, char*, bool*)>
c0012e69:	83 c4 10             	add    esp,0x10
c0012e6c:	84 c0                	test   al,al
c0012e6e:	74 04                	je     c0012e74 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012e70:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012e74:	88 d8                	mov    al,bl
c0012e76:	83 c4 18             	add    esp,0x18
c0012e79:	5b                   	pop    ebx
c0012e7a:	c3                   	ret    

c0012e7b <Reg::readIntWithDefault(char*, char*, int)>:
c0012e7b:	53                   	push   ebx
c0012e7c:	83 ec 1c             	sub    esp,0x1c
c0012e7f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012e83:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e87:	50                   	push   eax
c0012e88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e90:	e8 29 fe ff ff       	call   c0012cbe <Reg::readInt(char*, char*, int*)>
c0012e95:	83 c4 10             	add    esp,0x10
c0012e98:	84 c0                	test   al,al
c0012e9a:	74 04                	je     c0012ea0 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012e9c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ea0:	89 d8                	mov    eax,ebx
c0012ea2:	83 c4 18             	add    esp,0x18
c0012ea5:	5b                   	pop    ebx
c0012ea6:	c3                   	ret    

c0012ea7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012ea7:	57                   	push   edi
c0012ea8:	56                   	push   esi
c0012ea9:	56                   	push   esi
c0012eaa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012eae:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012eb2:	56                   	push   esi
c0012eb3:	57                   	push   edi
c0012eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ebc:	e8 e8 fe ff ff       	call   c0012da9 <Reg::readString(char*, char*, char*, int)>
c0012ec1:	83 c4 10             	add    esp,0x10
c0012ec4:	84 c0                	test   al,al
c0012ec6:	75 1a                	jne    c0012ee2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012ec8:	51                   	push   ecx
c0012ec9:	56                   	push   esi
c0012eca:	6a 00                	push   0x0
c0012ecc:	57                   	push   edi
c0012ecd:	e8 d6 d5 fe ff       	call   c00004a8 <memset>
c0012ed2:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012ed5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012ed9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012edb:	83 c4 10             	add    esp,0x10
c0012ede:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012ee2:	89 f8                	mov    eax,edi
c0012ee4:	5a                   	pop    edx
c0012ee5:	5e                   	pop    esi
c0012ee6:	5f                   	pop    edi
c0012ee7:	c3                   	ret    

c0012ee8 <Sys::eject(regs*)>:
c0012ee8:	83 ec 0c             	sub    esp,0xc
c0012eeb:	83 ca ff             	or     edx,0xffffffff
c0012eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012ef5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012efa:	83 e9 41             	sub    ecx,0x41
c0012efd:	83 f9 19             	cmp    ecx,0x19
c0012f00:	77 18                	ja     c0012f1a <Sys::eject(regs*)+0x32>
c0012f02:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c0012f09:	85 c9                	test   ecx,ecx
c0012f0b:	74 0d                	je     c0012f1a <Sys::eject(regs*)+0x32>
c0012f0d:	83 ec 0c             	sub    esp,0xc
c0012f10:	51                   	push   ecx
c0012f11:	e8 ea be ff ff       	call   c000ee00 <LogicalDisk::eject()>
c0012f16:	83 c4 10             	add    esp,0x10
c0012f19:	99                   	cdq    
c0012f1a:	83 c4 0c             	add    esp,0xc
c0012f1d:	c3                   	ret    

c0012f1e <Sys::exit(regs*)>:
c0012f1e:	83 ec 18             	sub    esp,0x18
c0012f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f25:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f28:	e8 23 35 00 00       	call   c0016450 <terminateTask(int)>
c0012f2d:	83 c8 ff             	or     eax,0xffffffff
c0012f30:	83 c4 1c             	add    esp,0x1c
c0012f33:	89 c2                	mov    edx,eax
c0012f35:	c3                   	ret    

c0012f36 <Sys::getCwd(regs*)>:
c0012f36:	83 ec 10             	sub    esp,0x10
c0012f39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f3d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012f40:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f48:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012f4b:	e8 de 9a ff ff       	call   c000ca2e <Fs::getcwd(Process*, char*, int)>
c0012f50:	83 c4 1c             	add    esp,0x1c
c0012f53:	99                   	cdq    
c0012f54:	c3                   	ret    

c0012f55 <Sys::getPID(regs*)>:
c0012f55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f5f:	99                   	cdq    
c0012f60:	c3                   	ret    

c0012f61 <Sys::getRAMData(regs*)>:
c0012f61:	8b 0d d8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fd8
c0012f67:	69 05 d4 3f 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023fd4,0xc8
c0012f71:	99                   	cdq    
c0012f72:	f7 f9                	idiv   ecx
c0012f74:	c1 e0 18             	shl    eax,0x18
c0012f77:	09 c8                	or     eax,ecx
c0012f79:	99                   	cdq    
c0012f7a:	c3                   	ret    

c0012f7b <Sys::getVGAPtr(regs*)>:
c0012f7b:	55                   	push   ebp
c0012f7c:	57                   	push   edi
c0012f7d:	56                   	push   esi
c0012f7e:	53                   	push   ebx
c0012f7f:	83 ec 18             	sub    esp,0x18
c0012f82:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0012f86:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0012f89:	e8 c6 2f 00 00       	call   c0015f54 <Thr::processFromPID(int)>
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	89 c1                	mov    ecx,eax
c0012f93:	b8 01 00 00 00       	mov    eax,0x1
c0012f98:	85 c9                	test   ecx,ecx
c0012f9a:	74 59                	je     c0012ff5 <Sys::getVGAPtr(regs*)+0x7a>
c0012f9c:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0012fa2:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0012fa6:	74 0c                	je     c0012fb4 <Sys::getVGAPtr(regs*)+0x39>
c0012fa8:	83 ec 0c             	sub    esp,0xc
c0012fab:	53                   	push   ebx
c0012fac:	e8 94 75 ff ff       	call   c000a545 <setActiveTerminal(VgaText*)>
c0012fb1:	83 c4 10             	add    esp,0x10
c0012fb4:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0012fb7:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0012fba:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012fbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fc1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0012fc4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0012fc7:	81 c3 82 00 00 00    	add    ebx,0x82
c0012fcd:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012fd3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0012fd6:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0012fd9:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012fdf:	50                   	push   eax
c0012fe0:	50                   	push   eax
c0012fe1:	53                   	push   ebx
c0012fe2:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0012fe5:	05 a8 0f 00 00       	add    eax,0xfa8
c0012fea:	50                   	push   eax
c0012feb:	e8 74 d5 fe ff       	call   c0000564 <strcpy>
c0012ff0:	83 c4 10             	add    esp,0x10
c0012ff3:	31 c0                	xor    eax,eax
c0012ff5:	83 c4 0c             	add    esp,0xc
c0012ff8:	31 d2                	xor    edx,edx
c0012ffa:	5b                   	pop    ebx
c0012ffb:	5e                   	pop    esi
c0012ffc:	5f                   	pop    edi
c0012ffd:	5d                   	pop    ebp
c0012ffe:	c3                   	ret    

c0012fff <Sys::loadDLL(regs*)>:
c0012fff:	56                   	push   esi
c0013000:	53                   	push   ebx
c0013001:	31 d2                	xor    edx,edx
c0013003:	51                   	push   ecx
c0013004:	b8 01 00 00 00       	mov    eax,0x1
c0013009:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001300d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013011:	0f 84 8c 00 00 00    	je     c00130a3 <Sys::loadDLL(regs*)+0xa4>
c0013017:	83 ec 0c             	sub    esp,0xc
c001301a:	68 14 01 00 00       	push   0x114
c001301f:	e8 5b 67 ff ff       	call   c000977f <malloc>
c0013024:	83 c4 0c             	add    esp,0xc
c0013027:	89 c3                	mov    ebx,eax
c0013029:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001302e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013031:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013034:	53                   	push   ebx
c0013035:	e8 f2 9b ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c001303a:	83 c4 10             	add    esp,0x10
c001303d:	31 d2                	xor    edx,edx
c001303f:	b8 02 00 00 00       	mov    eax,0x2
c0013044:	85 db                	test   ebx,ebx
c0013046:	74 5b                	je     c00130a3 <Sys::loadDLL(regs*)+0xa4>
c0013048:	83 ec 0c             	sub    esp,0xc
c001304b:	53                   	push   ebx
c001304c:	e8 23 9f ff ff       	call   c000cf74 <File::exists()>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	84 c0                	test   al,al
c0013056:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013058:	75 11                	jne    c001306b <Sys::loadDLL(regs*)+0x6c>
c001305a:	83 ec 0c             	sub    esp,0xc
c001305d:	53                   	push   ebx
c001305e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	b8 03 00 00 00       	mov    eax,0x3
c0013069:	eb 36                	jmp    c00130a1 <Sys::loadDLL(regs*)+0xa2>
c001306b:	83 ec 0c             	sub    esp,0xc
c001306e:	53                   	push   ebx
c001306f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013072:	58                   	pop    eax
c0013073:	5a                   	pop    edx
c0013074:	6a 00                	push   0x0
c0013076:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013079:	e8 d9 20 00 00       	call   c0015157 <Thr::loadDLL(char const*, bool)>
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	89 c1                	mov    ecx,eax
c0013083:	31 d2                	xor    edx,edx
c0013085:	b8 04 00 00 00       	mov    eax,0x4
c001308a:	85 c9                	test   ecx,ecx
c001308c:	74 15                	je     c00130a3 <Sys::loadDLL(regs*)+0xa4>
c001308e:	53                   	push   ebx
c001308f:	53                   	push   ebx
c0013090:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0013096:	51                   	push   ecx
c0013097:	e8 ec 22 00 00       	call   c0015388 <Thr::executeDLL(unsigned long, void*)>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	31 c0                	xor    eax,eax
c00130a1:	31 d2                	xor    edx,edx
c00130a3:	59                   	pop    ecx
c00130a4:	5b                   	pop    ebx
c00130a5:	5e                   	pop    esi
c00130a6:	c3                   	ret    

c00130a7 <Sys::read(regs*)>:
c00130a7:	57                   	push   edi
c00130a8:	56                   	push   esi
c00130a9:	53                   	push   ebx
c00130aa:	83 ec 10             	sub    esp,0x10
c00130ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00130b1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130b4:	83 f8 02             	cmp    eax,0x2
c00130b7:	77 10                	ja     c00130c9 <Sys::read(regs*)+0x22>
c00130b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130c1:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00130c7:	eb 0e                	jmp    c00130d7 <Sys::read(regs*)+0x30>
c00130c9:	83 ec 0c             	sub    esp,0xc
c00130cc:	50                   	push   eax
c00130cd:	e8 3d 81 ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c00130d2:	83 c4 10             	add    esp,0x10
c00130d5:	89 c1                	mov    ecx,eax
c00130d7:	83 c8 ff             	or     eax,0xffffffff
c00130da:	85 c9                	test   ecx,ecx
c00130dc:	89 c2                	mov    edx,eax
c00130de:	74 28                	je     c0013108 <Sys::read(regs*)+0x61>
c00130e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00130e8:	31 ff                	xor    edi,edi
c00130ea:	83 ec 0c             	sub    esp,0xc
c00130ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130ef:	8d 54 24 18          	lea    edx,[esp+0x18]
c00130f3:	52                   	push   edx
c00130f4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130f7:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00130fa:	57                   	push   edi
c00130fb:	56                   	push   esi
c00130fc:	51                   	push   ecx
c00130fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013100:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013104:	83 c4 20             	add    esp,0x20
c0013107:	99                   	cdq    
c0013108:	83 c4 10             	add    esp,0x10
c001310b:	5b                   	pop    ebx
c001310c:	5e                   	pop    esi
c001310d:	5f                   	pop    edi
c001310e:	c3                   	ret    

c001310f <Sys::sbrk(regs*)>:
c001310f:	56                   	push   esi
c0013110:	53                   	push   ebx
c0013111:	50                   	push   eax
c0013112:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013117:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001311b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001311e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013121:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013127:	85 db                	test   ebx,ebx
c0013129:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001312c:	74 02                	je     c0013130 <Sys::sbrk(regs*)+0x21>
c001312e:	79 06                	jns    c0013136 <Sys::sbrk(regs*)+0x27>
c0013130:	89 f0                	mov    eax,esi
c0013132:	31 d2                	xor    edx,edx
c0013134:	eb 2a                	jmp    c0013160 <Sys::sbrk(regs*)+0x51>
c0013136:	83 c8 ff             	or     eax,0xffffffff
c0013139:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001313f:	89 c2                	mov    edx,eax
c0013141:	77 1d                	ja     c0013160 <Sys::sbrk(regs*)+0x51>
c0013143:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013149:	50                   	push   eax
c001314a:	c1 ea 0c             	shr    edx,0xc
c001314d:	68 07 0c 00 00       	push   0xc07
c0013152:	52                   	push   edx
c0013153:	51                   	push   ecx
c0013154:	e8 7b 89 ff ff       	call   c000bad4 <VAS::allocatePages(int, int)>
c0013159:	89 f0                	mov    eax,esi
c001315b:	31 d2                	xor    edx,edx
c001315d:	83 c4 10             	add    esp,0x10
c0013160:	59                   	pop    ecx
c0013161:	5b                   	pop    ebx
c0013162:	5e                   	pop    esi
c0013163:	c3                   	ret    

c0013164 <Sys::setCwd(regs*)>:
c0013164:	83 ec 14             	sub    esp,0x14
c0013167:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001316b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001316e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013173:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013176:	e8 98 9e ff ff       	call   c000d013 <Fs::setcwd(Process*, char*)>
c001317b:	83 c4 1c             	add    esp,0x1c
c001317e:	99                   	cdq    
c001317f:	c3                   	ret    

c0013180 <Sys::setTime(regs*)>:
c0013180:	55                   	push   ebp
c0013181:	31 c9                	xor    ecx,ecx
c0013183:	57                   	push   edi
c0013184:	bd 0c 00 00 00       	mov    ebp,0xc
c0013189:	56                   	push   esi
c001318a:	53                   	push   ebx
c001318b:	31 db                	xor    ebx,ebx
c001318d:	83 ec 10             	sub    esp,0x10
c0013190:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013194:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013197:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001319a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001319d:	89 c2                	mov    edx,eax
c001319f:	66 81 ef 6c 07       	sub    di,0x76c
c00131a4:	83 e2 1f             	and    edx,0x1f
c00131a7:	c1 e7 10             	shl    edi,0x10
c00131aa:	42                   	inc    edx
c00131ab:	c1 e8 05             	shr    eax,0x5
c00131ae:	88 d1                	mov    cl,dl
c00131b0:	31 d2                	xor    edx,edx
c00131b2:	f7 f5                	div    ebp
c00131b4:	89 dd                	mov    ebp,ebx
c00131b6:	88 d5                	mov    ch,dl
c00131b8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00131be:	0f b7 c1             	movzx  eax,cx
c00131c1:	31 d2                	xor    edx,edx
c00131c3:	09 f8                	or     eax,edi
c00131c5:	bf 3c 00 00 00       	mov    edi,0x3c
c00131ca:	89 c1                	mov    ecx,eax
c00131cc:	89 f0                	mov    eax,esi
c00131ce:	f7 f7                	div    edi
c00131d0:	c1 e2 10             	shl    edx,0x10
c00131d3:	09 d5                	or     ebp,edx
c00131d5:	31 d2                	xor    edx,edx
c00131d7:	89 eb                	mov    ebx,ebp
c00131d9:	f7 f7                	div    edi
c00131db:	bf 10 0e 00 00       	mov    edi,0xe10
c00131e0:	88 d7                	mov    bh,dl
c00131e2:	89 f0                	mov    eax,esi
c00131e4:	31 d2                	xor    edx,edx
c00131e6:	f7 f7                	div    edi
c00131e8:	bf 18 00 00 00       	mov    edi,0x18
c00131ed:	31 d2                	xor    edx,edx
c00131ef:	f7 f7                	div    edi
c00131f1:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00131f6:	88 d3                	mov    bl,dl
c00131f8:	53                   	push   ebx
c00131f9:	51                   	push   ecx
c00131fa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013200:	e8 4d a6 ff ff       	call   c000d852 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013205:	83 c4 1c             	add    esp,0x1c
c0013208:	83 f0 01             	xor    eax,0x1
c001320b:	5b                   	pop    ebx
c001320c:	0f b6 c0             	movzx  eax,al
c001320f:	5e                   	pop    esi
c0013210:	31 d2                	xor    edx,edx
c0013212:	5f                   	pop    edi
c0013213:	5d                   	pop    ebp
c0013214:	c3                   	ret    

c0013215 <Sys::timezone(regs*)>:
c0013215:	53                   	push   ebx
c0013216:	83 ec 08             	sub    esp,0x8
c0013219:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001321d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013221:	75 17                	jne    c001323a <Sys::timezone(regs*)+0x25>
c0013223:	83 ec 0c             	sub    esp,0xc
c0013226:	68 be 25 02 c0       	push   0xc00225be
c001322b:	e8 91 94 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0013230:	83 c8 ff             	or     eax,0xffffffff
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	89 c2                	mov    edx,eax
c0013238:	eb 20                	jmp    c001325a <Sys::timezone(regs*)+0x45>
c001323a:	83 ec 0c             	sub    esp,0xc
c001323d:	68 d3 25 02 c0       	push   0xc00225d3
c0013242:	e8 7a 94 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0013247:	58                   	pop    eax
c0013248:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001324b:	e8 64 a3 ff ff       	call   c000d5b4 <User::loadClockSettings(int)>
c0013250:	83 c4 10             	add    esp,0x10
c0013253:	b8 01 00 00 00       	mov    eax,0x1
c0013258:	31 d2                	xor    edx,edx
c001325a:	83 c4 08             	add    esp,0x8
c001325d:	5b                   	pop    ebx
c001325e:	c3                   	ret    

c001325f <Sys::write(regs*)>:
c001325f:	57                   	push   edi
c0013260:	56                   	push   esi
c0013261:	53                   	push   ebx
c0013262:	83 ec 10             	sub    esp,0x10
c0013265:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013269:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001326c:	83 f8 02             	cmp    eax,0x2
c001326f:	77 10                	ja     c0013281 <Sys::write(regs*)+0x22>
c0013271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013276:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013279:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001327f:	eb 0e                	jmp    c001328f <Sys::write(regs*)+0x30>
c0013281:	83 ec 0c             	sub    esp,0xc
c0013284:	50                   	push   eax
c0013285:	e8 85 7f ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c001328a:	83 c4 10             	add    esp,0x10
c001328d:	89 c1                	mov    ecx,eax
c001328f:	83 c8 ff             	or     eax,0xffffffff
c0013292:	85 c9                	test   ecx,ecx
c0013294:	89 c2                	mov    edx,eax
c0013296:	74 28                	je     c00132c0 <Sys::write(regs*)+0x61>
c0013298:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00132a0:	31 ff                	xor    edi,edi
c00132a2:	83 ec 0c             	sub    esp,0xc
c00132a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132ab:	52                   	push   edx
c00132ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132af:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00132b2:	57                   	push   edi
c00132b3:	56                   	push   esi
c00132b4:	51                   	push   ecx
c00132b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00132b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00132bc:	83 c4 20             	add    esp,0x20
c00132bf:	99                   	cdq    
c00132c0:	83 c4 10             	add    esp,0x10
c00132c3:	5b                   	pop    ebx
c00132c4:	5e                   	pop    esi
c00132c5:	5f                   	pop    edi
c00132c6:	c3                   	ret    

c00132c7 <Sys::wsbe(regs*)>:
c00132c7:	57                   	push   edi
c00132c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00132cd:	56                   	push   esi
c00132ce:	be 12 26 02 c0       	mov    esi,0xc0022612
c00132d3:	53                   	push   ebx
c00132d4:	83 ec 30             	sub    esp,0x30
c00132d7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00132db:	fc                   	cld    
c00132dc:	83 ec 0c             	sub    esp,0xc
c00132df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00132e1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00132e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132ed:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00132f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00132f5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00132f8:	57                   	push   edi
c00132f9:	e8 c6 d1 fe ff       	call   c00004c4 <strlen>
c00132fe:	5a                   	pop    edx
c00132ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013303:	52                   	push   edx
c0013304:	31 d2                	xor    edx,edx
c0013306:	57                   	push   edi
c0013307:	52                   	push   edx
c0013308:	50                   	push   eax
c0013309:	56                   	push   esi
c001330a:	ff d3                	call   ebx
c001330c:	83 c4 14             	add    esp,0x14
c001330f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013313:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013316:	e8 35 31 00 00       	call   c0016450 <terminateTask(int)>
c001331b:	83 c4 40             	add    esp,0x40
c001331e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013323:	5b                   	pop    ebx
c0013324:	31 d2                	xor    edx,edx
c0013326:	5e                   	pop    esi
c0013327:	5f                   	pop    edi
c0013328:	c3                   	ret    

c0013329 <Sys::yield(regs*)>:
c0013329:	83 ec 0c             	sub    esp,0xc
c001332c:	fa                   	cli    
c001332d:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0013333:	e8 00 28 00 00       	call   c0015b38 <schedule()>
c0013338:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001333d:	48                   	dec    eax
c001333e:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0013343:	75 01                	jne    c0013346 <Sys::yield(regs*)+0x1d>
c0013345:	fb                   	sti    
c0013346:	31 c0                	xor    eax,eax
c0013348:	31 d2                	xor    edx,edx
c001334a:	83 c4 0c             	add    esp,0xc
c001334d:	c3                   	ret    

c001334e <sysCallSeekDir(regs*)>:
c001334e:	31 c0                	xor    eax,eax
c0013350:	31 d2                	xor    edx,edx
c0013352:	c3                   	ret    

c0013353 <sysCallTellDir(regs*)>:
c0013353:	31 c0                	xor    eax,eax
c0013355:	31 d2                	xor    edx,edx
c0013357:	c3                   	ret    

c0013358 <sysCallVerify(regs*)>:
c0013358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001335c:	31 d2                	xor    edx,edx
c001335e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013361:	c3                   	ret    

c0013362 <sysCallGetArgc(regs*)>:
c0013362:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013367:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001336a:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0013370:	99                   	cdq    
c0013371:	c3                   	ret    

c0013372 <sysFormatDisk(regs*)>:
c0013372:	56                   	push   esi
c0013373:	53                   	push   ebx
c0013374:	53                   	push   ebx
c0013375:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013379:	8b 1d 98 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024098
c001337f:	eb 25                	jmp    c00133a6 <sysFormatDisk(regs*)+0x34>
c0013381:	83 ec 0c             	sub    esp,0xc
c0013384:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013387:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013389:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001338c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001338f:	50                   	push   eax
c0013390:	ff 34 85 20 65 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ae0]
c0013397:	53                   	push   ebx
c0013398:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001339b:	83 c4 20             	add    esp,0x20
c001339e:	83 f8 08             	cmp    eax,0x8
c00133a1:	75 12                	jne    c00133b5 <sysFormatDisk(regs*)+0x43>
c00133a3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00133a6:	85 db                	test   ebx,ebx
c00133a8:	75 d7                	jne    c0013381 <sysFormatDisk(regs*)+0xf>
c00133aa:	59                   	pop    ecx
c00133ab:	b8 03 00 00 00       	mov    eax,0x3
c00133b0:	31 d2                	xor    edx,edx
c00133b2:	5b                   	pop    ebx
c00133b3:	5e                   	pop    esi
c00133b4:	c3                   	ret    
c00133b5:	85 c0                	test   eax,eax
c00133b7:	74 1b                	je     c00133d4 <sysFormatDisk(regs*)+0x62>
c00133b9:	83 f8 09             	cmp    eax,0x9
c00133bc:	74 0b                	je     c00133c9 <sysFormatDisk(regs*)+0x57>
c00133be:	59                   	pop    ecx
c00133bf:	b8 02 00 00 00       	mov    eax,0x2
c00133c4:	31 d2                	xor    edx,edx
c00133c6:	5b                   	pop    ebx
c00133c7:	5e                   	pop    esi
c00133c8:	c3                   	ret    
c00133c9:	59                   	pop    ecx
c00133ca:	b8 01 00 00 00       	mov    eax,0x1
c00133cf:	31 d2                	xor    edx,edx
c00133d1:	5b                   	pop    ebx
c00133d2:	5e                   	pop    esi
c00133d3:	c3                   	ret    
c00133d4:	59                   	pop    ecx
c00133d5:	31 c0                	xor    eax,eax
c00133d7:	31 d2                	xor    edx,edx
c00133d9:	5b                   	pop    ebx
c00133da:	5e                   	pop    esi
c00133db:	c3                   	ret    

c00133dc <sysSetDiskVolumeLabel(regs*)>:
c00133dc:	56                   	push   esi
c00133dd:	53                   	push   ebx
c00133de:	53                   	push   ebx
c00133df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133e3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00133e6:	83 f8 19             	cmp    eax,0x19
c00133e9:	77 2d                	ja     c0013418 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00133eb:	8b 0c 85 20 65 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ae0]
c00133f2:	85 c9                	test   ecx,ecx
c00133f4:	74 22                	je     c0013418 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00133f6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00133f9:	85 db                	test   ebx,ebx
c00133fb:	74 1b                	je     c0013418 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00133fd:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0013403:	85 d2                	test   edx,edx
c0013405:	74 11                	je     c0013418 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0013407:	8b 32                	mov    esi,DWORD PTR [edx]
c0013409:	53                   	push   ebx
c001340a:	50                   	push   eax
c001340b:	51                   	push   ecx
c001340c:	52                   	push   edx
c001340d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0013410:	83 c4 10             	add    esp,0x10
c0013413:	99                   	cdq    
c0013414:	59                   	pop    ecx
c0013415:	5b                   	pop    ebx
c0013416:	5e                   	pop    esi
c0013417:	c3                   	ret    
c0013418:	59                   	pop    ecx
c0013419:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001341e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013423:	5b                   	pop    ebx
c0013424:	5e                   	pop    esi
c0013425:	c3                   	ret    

c0013426 <sysGetDiskVolumeLabel(regs*)>:
c0013426:	57                   	push   edi
c0013427:	56                   	push   esi
c0013428:	53                   	push   ebx
c0013429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013430:	83 fa 19             	cmp    edx,0x19
c0013433:	77 38                	ja     c001346d <sysGetDiskVolumeLabel(regs*)+0x47>
c0013435:	8b 0c 95 20 65 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9ae0]
c001343c:	85 c9                	test   ecx,ecx
c001343e:	74 2d                	je     c001346d <sysGetDiskVolumeLabel(regs*)+0x47>
c0013440:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0013443:	85 db                	test   ebx,ebx
c0013445:	74 26                	je     c001346d <sysGetDiskVolumeLabel(regs*)+0x47>
c0013447:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001344a:	85 f6                	test   esi,esi
c001344c:	74 1f                	je     c001346d <sysGetDiskVolumeLabel(regs*)+0x47>
c001344e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0013454:	85 c0                	test   eax,eax
c0013456:	74 15                	je     c001346d <sysGetDiskVolumeLabel(regs*)+0x47>
c0013458:	83 ec 0c             	sub    esp,0xc
c001345b:	8b 38                	mov    edi,DWORD PTR [eax]
c001345d:	56                   	push   esi
c001345e:	53                   	push   ebx
c001345f:	52                   	push   edx
c0013460:	51                   	push   ecx
c0013461:	50                   	push   eax
c0013462:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0013465:	83 c4 20             	add    esp,0x20
c0013468:	99                   	cdq    
c0013469:	5b                   	pop    ebx
c001346a:	5e                   	pop    esi
c001346b:	5f                   	pop    edi
c001346c:	c3                   	ret    
c001346d:	5b                   	pop    ebx
c001346e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013473:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013478:	5e                   	pop    esi
c0013479:	5f                   	pop    edi
c001347a:	c3                   	ret    

c001347b <sysShutdown(regs*)>:
c001347b:	83 ec 0c             	sub    esp,0xc
c001347e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013482:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013485:	85 c0                	test   eax,eax
c0013487:	74 18                	je     c00134a1 <sysShutdown(regs*)+0x26>
c0013489:	83 f8 01             	cmp    eax,0x1
c001348c:	74 38                	je     c00134c6 <sysShutdown(regs*)+0x4b>
c001348e:	83 f8 02             	cmp    eax,0x2
c0013491:	74 24                	je     c00134b7 <sysShutdown(regs*)+0x3c>
c0013493:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013498:	ba ff ff ff ff       	mov    edx,0xffffffff
c001349d:	83 c4 0c             	add    esp,0xc
c00134a0:	c3                   	ret    
c00134a1:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00134a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00134a8:	6a 00                	push   0x0
c00134aa:	6a 00                	push   0x0
c00134ac:	6a 00                	push   0x0
c00134ae:	50                   	push   eax
c00134af:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00134b2:	83 c4 10             	add    esp,0x10
c00134b5:	eb dc                	jmp    c0013493 <sysShutdown(regs*)+0x18>
c00134b7:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00134bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00134be:	6a 00                	push   0x0
c00134c0:	6a 00                	push   0x0
c00134c2:	6a 01                	push   0x1
c00134c4:	eb e8                	jmp    c00134ae <sysShutdown(regs*)+0x33>
c00134c6:	a1 a0 65 02 c0       	mov    eax,ds:0xc00265a0
c00134cb:	85 c0                	test   eax,eax
c00134cd:	74 02                	je     c00134d1 <sysShutdown(regs*)+0x56>
c00134cf:	ff d0                	call   eax
c00134d1:	31 c0                	xor    eax,eax
c00134d3:	31 d2                	xor    edx,edx
c00134d5:	83 c4 0c             	add    esp,0xc
c00134d8:	c3                   	ret    

c00134d9 <sysCallRealpath(regs*)>:
c00134d9:	83 ec 0c             	sub    esp,0xc
c00134dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00134e3:	85 d2                	test   edx,edx
c00134e5:	74 07                	je     c00134ee <sysCallRealpath(regs*)+0x15>
c00134e7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00134ea:	85 c0                	test   eax,eax
c00134ec:	75 0b                	jne    c00134f9 <sysCallRealpath(regs*)+0x20>
c00134ee:	b8 01 00 00 00       	mov    eax,0x1
c00134f3:	31 d2                	xor    edx,edx
c00134f5:	83 c4 0c             	add    esp,0xc
c00134f8:	c3                   	ret    
c00134f9:	51                   	push   ecx
c00134fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013500:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0013503:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0013509:	51                   	push   ecx
c001350a:	52                   	push   edx
c001350b:	50                   	push   eax
c001350c:	e8 71 95 ff ff       	call   c000ca82 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	31 c0                	xor    eax,eax
c0013516:	31 d2                	xor    edx,edx
c0013518:	83 c4 0c             	add    esp,0xc
c001351b:	c3                   	ret    

c001351c <sysCallReadDir(regs*)>:
c001351c:	53                   	push   ebx
c001351d:	83 ec 18             	sub    esp,0x18
c0013520:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013524:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013527:	83 f8 02             	cmp    eax,0x2
c001352a:	76 60                	jbe    c001358c <sysCallReadDir(regs*)+0x70>
c001352c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0013533:	77 48                	ja     c001357d <sysCallReadDir(regs*)+0x61>
c0013535:	83 ec 0c             	sub    esp,0xc
c0013538:	50                   	push   eax
c0013539:	e8 d1 7c ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c001353e:	83 c4 10             	add    esp,0x10
c0013541:	85 c0                	test   eax,eax
c0013543:	74 38                	je     c001357d <sysCallReadDir(regs*)+0x61>
c0013545:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001354d:	83 ec 0c             	sub    esp,0xc
c0013550:	8b 10                	mov    edx,DWORD PTR [eax]
c0013552:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013556:	51                   	push   ecx
c0013557:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001355a:	6a 00                	push   0x0
c001355c:	68 10 01 00 00       	push   0x110
c0013561:	50                   	push   eax
c0013562:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013565:	83 c4 20             	add    esp,0x20
c0013568:	85 c0                	test   eax,eax
c001356a:	74 29                	je     c0013595 <sysCallReadDir(regs*)+0x79>
c001356c:	83 f8 07             	cmp    eax,0x7
c001356f:	74 1b                	je     c001358c <sysCallReadDir(regs*)+0x70>
c0013571:	b8 02 00 00 00       	mov    eax,0x2
c0013576:	31 d2                	xor    edx,edx
c0013578:	83 c4 18             	add    esp,0x18
c001357b:	5b                   	pop    ebx
c001357c:	c3                   	ret    
c001357d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013582:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013587:	83 c4 18             	add    esp,0x18
c001358a:	5b                   	pop    ebx
c001358b:	c3                   	ret    
c001358c:	b8 01 00 00 00       	mov    eax,0x1
c0013591:	31 d2                	xor    edx,edx
c0013593:	eb e3                	jmp    c0013578 <sysCallReadDir(regs*)+0x5c>
c0013595:	31 c0                	xor    eax,eax
c0013597:	31 d2                	xor    edx,edx
c0013599:	eb dd                	jmp    c0013578 <sysCallReadDir(regs*)+0x5c>

c001359b <sysCallIsATTY(regs*)>:
c001359b:	83 ec 0c             	sub    esp,0xc
c001359e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00135a5:	83 f8 02             	cmp    eax,0x2
c00135a8:	76 07                	jbe    c00135b1 <sysCallIsATTY(regs*)+0x16>
c00135aa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00135af:	75 26                	jne    c00135d7 <sysCallIsATTY(regs*)+0x3c>
c00135b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00135bf:	85 c0                	test   eax,eax
c00135c1:	74 24                	je     c00135e7 <sysCallIsATTY(regs*)+0x4c>
c00135c3:	83 ec 0c             	sub    esp,0xc
c00135c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00135c8:	50                   	push   eax
c00135c9:	ff 12                	call   DWORD PTR [edx]
c00135cb:	31 d2                	xor    edx,edx
c00135cd:	0f b6 c0             	movzx  eax,al
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	83 c4 0c             	add    esp,0xc
c00135d6:	c3                   	ret    
c00135d7:	83 ec 0c             	sub    esp,0xc
c00135da:	50                   	push   eax
c00135db:	e8 2f 7c ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c00135e0:	83 c4 10             	add    esp,0x10
c00135e3:	85 c0                	test   eax,eax
c00135e5:	75 dc                	jne    c00135c3 <sysCallIsATTY(regs*)+0x28>
c00135e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00135f1:	83 c4 0c             	add    esp,0xc
c00135f4:	c3                   	ret    

c00135f5 <sysCallSeek(regs*)>:
c00135f5:	53                   	push   ebx
c00135f6:	83 ec 08             	sub    esp,0x8
c00135f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013600:	8d 50 fd             	lea    edx,[eax-0x3]
c0013603:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0013609:	77 32                	ja     c001363d <sysCallSeek(regs*)+0x48>
c001360b:	83 ec 0c             	sub    esp,0xc
c001360e:	50                   	push   eax
c001360f:	e8 fb 7b ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c0013614:	83 c4 0c             	add    esp,0xc
c0013617:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001361a:	31 db                	xor    ebx,ebx
c001361c:	53                   	push   ebx
c001361d:	51                   	push   ecx
c001361e:	50                   	push   eax
c001361f:	e8 a0 97 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	85 c0                	test   eax,eax
c0013629:	0f 95 c0             	setne  al
c001362c:	31 d2                	xor    edx,edx
c001362e:	0f b6 c0             	movzx  eax,al
c0013631:	f7 d8                	neg    eax
c0013633:	83 d2 00             	adc    edx,0x0
c0013636:	83 c4 08             	add    esp,0x8
c0013639:	f7 da                	neg    edx
c001363b:	5b                   	pop    ebx
c001363c:	c3                   	ret    
c001363d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013642:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013647:	83 c4 08             	add    esp,0x8
c001364a:	5b                   	pop    ebx
c001364b:	c3                   	ret    

c001364c <sysCallTell(regs*)>:
c001364c:	53                   	push   ebx
c001364d:	83 ec 08             	sub    esp,0x8
c0013650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013654:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013657:	83 f8 02             	cmp    eax,0x2
c001365a:	76 4d                	jbe    c00136a9 <sysCallTell(regs*)+0x5d>
c001365c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013661:	76 19                	jbe    c001367c <sysCallTell(regs*)+0x30>
c0013663:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013666:	31 d2                	xor    edx,edx
c0013668:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001366e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013675:	31 c0                	xor    eax,eax
c0013677:	83 c4 08             	add    esp,0x8
c001367a:	5b                   	pop    ebx
c001367b:	c3                   	ret    
c001367c:	83 ec 0c             	sub    esp,0xc
c001367f:	50                   	push   eax
c0013680:	e8 8a 7b ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c0013685:	5a                   	pop    edx
c0013686:	59                   	pop    ecx
c0013687:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001368a:	50                   	push   eax
c001368b:	e8 8a 97 ff ff       	call   c000ce1a <File::tell(unsigned long long*)>
c0013690:	83 c4 10             	add    esp,0x10
c0013693:	85 c0                	test   eax,eax
c0013695:	0f 95 c0             	setne  al
c0013698:	31 d2                	xor    edx,edx
c001369a:	0f b6 c0             	movzx  eax,al
c001369d:	f7 d8                	neg    eax
c001369f:	83 d2 00             	adc    edx,0x0
c00136a2:	83 c4 08             	add    esp,0x8
c00136a5:	f7 da                	neg    edx
c00136a7:	5b                   	pop    ebx
c00136a8:	c3                   	ret    
c00136a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00136ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c00136b3:	83 c4 08             	add    esp,0x8
c00136b6:	5b                   	pop    ebx
c00136b7:	c3                   	ret    

c00136b8 <sysCallSize(regs*)>:
c00136b8:	53                   	push   ebx
c00136b9:	83 ec 18             	sub    esp,0x18
c00136bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00136c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00136c3:	83 f8 02             	cmp    eax,0x2
c00136c6:	76 53                	jbe    c001371b <sysCallSize(regs*)+0x63>
c00136c8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00136cd:	76 19                	jbe    c00136e8 <sysCallSize(regs*)+0x30>
c00136cf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00136d2:	31 d2                	xor    edx,edx
c00136d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e1:	31 c0                	xor    eax,eax
c00136e3:	83 c4 18             	add    esp,0x18
c00136e6:	5b                   	pop    ebx
c00136e7:	c3                   	ret    
c00136e8:	83 ec 0c             	sub    esp,0xc
c00136eb:	50                   	push   eax
c00136ec:	e8 1e 7b ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c00136f1:	83 c4 0c             	add    esp,0xc
c00136f4:	8d 54 24 13          	lea    edx,[esp+0x13]
c00136f8:	52                   	push   edx
c00136f9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136fc:	50                   	push   eax
c00136fd:	e8 b0 98 ff ff       	call   c000cfb2 <File::stat(unsigned long long*, bool*)>
c0013702:	83 c4 10             	add    esp,0x10
c0013705:	85 c0                	test   eax,eax
c0013707:	0f 95 c0             	setne  al
c001370a:	31 d2                	xor    edx,edx
c001370c:	0f b6 c0             	movzx  eax,al
c001370f:	f7 d8                	neg    eax
c0013711:	83 d2 00             	adc    edx,0x0
c0013714:	83 c4 18             	add    esp,0x18
c0013717:	f7 da                	neg    edx
c0013719:	5b                   	pop    ebx
c001371a:	c3                   	ret    
c001371b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013720:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013725:	83 c4 18             	add    esp,0x18
c0013728:	5b                   	pop    ebx
c0013729:	c3                   	ret    

c001372a <sysCallSizeFromFilename(regs*)>:
c001372a:	57                   	push   edi
c001372b:	56                   	push   esi
c001372c:	53                   	push   ebx
c001372d:	83 ec 20             	sub    esp,0x20
c0013730:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013734:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0013737:	83 fb 02             	cmp    ebx,0x2
c001373a:	0f 86 88 00 00 00    	jbe    c00137c8 <sysCallSizeFromFilename(regs*)+0x9e>
c0013740:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013746:	76 1b                	jbe    c0013763 <sysCallSizeFromFilename(regs*)+0x39>
c0013748:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001374b:	31 d2                	xor    edx,edx
c001374d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013753:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001375a:	83 c4 20             	add    esp,0x20
c001375d:	31 c0                	xor    eax,eax
c001375f:	5b                   	pop    ebx
c0013760:	5e                   	pop    esi
c0013761:	5f                   	pop    edi
c0013762:	c3                   	ret    
c0013763:	83 ec 0c             	sub    esp,0xc
c0013766:	68 14 01 00 00       	push   0x114
c001376b:	e8 0f 60 ff ff       	call   c000977f <malloc>
c0013770:	83 c4 0c             	add    esp,0xc
c0013773:	89 c7                	mov    edi,eax
c0013775:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001377a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001377d:	53                   	push   ebx
c001377e:	57                   	push   edi
c001377f:	e8 a8 94 ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0013784:	83 c4 0c             	add    esp,0xc
c0013787:	8d 44 24 23          	lea    eax,[esp+0x23]
c001378b:	50                   	push   eax
c001378c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001378f:	57                   	push   edi
c0013790:	e8 1d 98 ff ff       	call   c000cfb2 <File::stat(unsigned long long*, bool*)>
c0013795:	83 c4 10             	add    esp,0x10
c0013798:	85 ff                	test   edi,edi
c001379a:	74 14                	je     c00137b0 <sysCallSizeFromFilename(regs*)+0x86>
c001379c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137a0:	8b 17                	mov    edx,DWORD PTR [edi]
c00137a2:	83 ec 0c             	sub    esp,0xc
c00137a5:	57                   	push   edi
c00137a6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00137a9:	83 c4 10             	add    esp,0x10
c00137ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137b0:	85 c0                	test   eax,eax
c00137b2:	0f 95 c0             	setne  al
c00137b5:	31 d2                	xor    edx,edx
c00137b7:	0f b6 c0             	movzx  eax,al
c00137ba:	f7 d8                	neg    eax
c00137bc:	83 d2 00             	adc    edx,0x0
c00137bf:	83 c4 20             	add    esp,0x20
c00137c2:	f7 da                	neg    edx
c00137c4:	5b                   	pop    ebx
c00137c5:	5e                   	pop    esi
c00137c6:	5f                   	pop    edi
c00137c7:	c3                   	ret    
c00137c8:	83 c4 20             	add    esp,0x20
c00137cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00137d0:	5b                   	pop    ebx
c00137d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00137d6:	5e                   	pop    esi
c00137d7:	5f                   	pop    edi
c00137d8:	c3                   	ret    

c00137d9 <sysCallClose(regs*)>:
c00137d9:	53                   	push   ebx
c00137da:	83 ec 08             	sub    esp,0x8
c00137dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00137e4:	83 f8 02             	cmp    eax,0x2
c00137e7:	76 41                	jbe    c001382a <sysCallClose(regs*)+0x51>
c00137e9:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00137ef:	83 fa 01             	cmp    edx,0x1
c00137f2:	76 2d                	jbe    c0013821 <sysCallClose(regs*)+0x48>
c00137f4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00137f9:	77 2f                	ja     c001382a <sysCallClose(regs*)+0x51>
c00137fb:	83 ec 0c             	sub    esp,0xc
c00137fe:	50                   	push   eax
c00137ff:	e8 0b 7a ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c0013804:	89 c3                	mov    ebx,eax
c0013806:	89 04 24             	mov    DWORD PTR [esp],eax
c0013809:	e8 56 95 ff ff       	call   c000cd64 <File::close()>
c001380e:	83 c4 10             	add    esp,0x10
c0013811:	85 db                	test   ebx,ebx
c0013813:	74 0c                	je     c0013821 <sysCallClose(regs*)+0x48>
c0013815:	83 ec 0c             	sub    esp,0xc
c0013818:	8b 03                	mov    eax,DWORD PTR [ebx]
c001381a:	53                   	push   ebx
c001381b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001381e:	83 c4 10             	add    esp,0x10
c0013821:	31 c0                	xor    eax,eax
c0013823:	31 d2                	xor    edx,edx
c0013825:	83 c4 08             	add    esp,0x8
c0013828:	5b                   	pop    ebx
c0013829:	c3                   	ret    
c001382a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001382f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013834:	83 c4 08             	add    esp,0x8
c0013837:	5b                   	pop    ebx
c0013838:	c3                   	ret    

c0013839 <sysCallOpenDir(regs*)>:
c0013839:	56                   	push   esi
c001383a:	53                   	push   ebx
c001383b:	53                   	push   ebx
c001383c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013840:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0013843:	85 f6                	test   esi,esi
c0013845:	74 59                	je     c00138a0 <sysCallOpenDir(regs*)+0x67>
c0013847:	83 ec 0c             	sub    esp,0xc
c001384a:	68 14 01 00 00       	push   0x114
c001384f:	e8 2b 5f ff ff       	call   c000977f <malloc>
c0013854:	83 c4 0c             	add    esp,0xc
c0013857:	89 c6                	mov    esi,eax
c0013859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001385e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013861:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013864:	56                   	push   esi
c0013865:	e8 22 99 ff ff       	call   c000d18c <Directory::Directory(char const*, Process*)>
c001386a:	83 c4 10             	add    esp,0x10
c001386d:	85 f6                	test   esi,esi
c001386f:	74 2f                	je     c00138a0 <sysCallOpenDir(regs*)+0x67>
c0013871:	83 ec 0c             	sub    esp,0xc
c0013874:	56                   	push   esi
c0013875:	e8 ec 99 ff ff       	call   c000d266 <Directory::open()>
c001387a:	83 c4 10             	add    esp,0x10
c001387d:	85 c0                	test   eax,eax
c001387f:	75 1f                	jne    c00138a0 <sysCallOpenDir(regs*)+0x67>
c0013881:	83 ec 0c             	sub    esp,0xc
c0013884:	56                   	push   esi
c0013885:	e8 90 76 ff ff       	call   c000af1a <UnixFile::getFileDescriptor()>
c001388a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001388d:	83 c4 10             	add    esp,0x10
c0013890:	89 02                	mov    DWORD PTR [edx],eax
c0013892:	c1 f8 1f             	sar    eax,0x1f
c0013895:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013898:	31 c0                	xor    eax,eax
c001389a:	59                   	pop    ecx
c001389b:	31 d2                	xor    edx,edx
c001389d:	5b                   	pop    ebx
c001389e:	5e                   	pop    esi
c001389f:	c3                   	ret    
c00138a0:	59                   	pop    ecx
c00138a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00138a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00138ab:	5b                   	pop    ebx
c00138ac:	5e                   	pop    esi
c00138ad:	c3                   	ret    

c00138ae <sysCallCloseDir(regs*)>:
c00138ae:	53                   	push   ebx
c00138af:	83 ec 08             	sub    esp,0x8
c00138b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00138b9:	8d 50 fd             	lea    edx,[eax-0x3]
c00138bc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00138c2:	77 2f                	ja     c00138f3 <sysCallCloseDir(regs*)+0x45>
c00138c4:	83 ec 0c             	sub    esp,0xc
c00138c7:	50                   	push   eax
c00138c8:	e8 42 79 ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c00138cd:	89 c3                	mov    ebx,eax
c00138cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00138d2:	e8 eb 99 ff ff       	call   c000d2c2 <Directory::close()>
c00138d7:	83 c4 10             	add    esp,0x10
c00138da:	85 db                	test   ebx,ebx
c00138dc:	74 0c                	je     c00138ea <sysCallCloseDir(regs*)+0x3c>
c00138de:	83 ec 0c             	sub    esp,0xc
c00138e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138e3:	53                   	push   ebx
c00138e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138e7:	83 c4 10             	add    esp,0x10
c00138ea:	31 c0                	xor    eax,eax
c00138ec:	31 d2                	xor    edx,edx
c00138ee:	83 c4 08             	add    esp,0x8
c00138f1:	5b                   	pop    ebx
c00138f2:	c3                   	ret    
c00138f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00138f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00138fd:	83 c4 08             	add    esp,0x8
c0013900:	5b                   	pop    ebx
c0013901:	c3                   	ret    

c0013902 <sysCallMakeDir(regs*)>:
c0013902:	56                   	push   esi
c0013903:	53                   	push   ebx
c0013904:	83 ec 10             	sub    esp,0x10
c0013907:	68 14 01 00 00       	push   0x114
c001390c:	e8 6e 5e ff ff       	call   c000977f <malloc>
c0013911:	83 c4 0c             	add    esp,0xc
c0013914:	89 c3                	mov    ebx,eax
c0013916:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001391b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001391e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013922:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013925:	53                   	push   ebx
c0013926:	e8 61 98 ff ff       	call   c000d18c <Directory::Directory(char const*, Process*)>
c001392b:	83 c4 10             	add    esp,0x10
c001392e:	85 db                	test   ebx,ebx
c0013930:	74 32                	je     c0013964 <sysCallMakeDir(regs*)+0x62>
c0013932:	83 ec 0c             	sub    esp,0xc
c0013935:	53                   	push   ebx
c0013936:	e8 0b 9b ff ff       	call   c000d446 <Directory::create()>
c001393b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001393e:	89 c6                	mov    esi,eax
c0013940:	e8 7d 99 ff ff       	call   c000d2c2 <Directory::close()>
c0013945:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013947:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001394a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001394d:	83 c4 10             	add    esp,0x10
c0013950:	31 c0                	xor    eax,eax
c0013952:	59                   	pop    ecx
c0013953:	85 f6                	test   esi,esi
c0013955:	5b                   	pop    ebx
c0013956:	0f 95 c0             	setne  al
c0013959:	5e                   	pop    esi
c001395a:	31 d2                	xor    edx,edx
c001395c:	f7 d8                	neg    eax
c001395e:	83 d2 00             	adc    edx,0x0
c0013961:	f7 da                	neg    edx
c0013963:	c3                   	ret    
c0013964:	59                   	pop    ecx
c0013965:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001396a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001396f:	5b                   	pop    ebx
c0013970:	5e                   	pop    esi
c0013971:	c3                   	ret    

c0013972 <sysCallWait(regs*)>:
c0013972:	83 ec 10             	sub    esp,0x10
c0013975:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013979:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001397c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001397f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013982:	e8 d9 23 00 00       	call   c0015d60 <waitTask(int, int*, int)>
c0013987:	83 c4 1c             	add    esp,0x1c
c001398a:	99                   	cdq    
c001398b:	c3                   	ret    

c001398c <sysCallNotImpl(regs*)>:
c001398c:	83 ec 18             	sub    esp,0x18
c001398f:	68 3e 26 02 c0       	push   0xc002263e
c0013994:	e8 6a ec ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0013999:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001399e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00139a3:	83 c4 1c             	add    esp,0x1c
c00139a6:	c3                   	ret    

c00139a7 <sysPanic(regs*)>:
c00139a7:	83 ec 18             	sub    esp,0x18
c00139aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139ae:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00139b1:	e8 4d ec ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00139b6:	b8 01 00 00 00       	mov    eax,0x1
c00139bb:	31 d2                	xor    edx,edx
c00139bd:	83 c4 1c             	add    esp,0x1c
c00139c0:	c3                   	ret    

c00139c1 <sysCallRmdir(regs*)>:
c00139c1:	56                   	push   esi
c00139c2:	53                   	push   ebx
c00139c3:	83 ec 20             	sub    esp,0x20
c00139c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00139ca:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00139cd:	68 14 01 00 00       	push   0x114
c00139d2:	e8 a8 5d ff ff       	call   c000977f <malloc>
c00139d7:	83 c4 0c             	add    esp,0xc
c00139da:	89 c3                	mov    ebx,eax
c00139dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139e1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00139e4:	56                   	push   esi
c00139e5:	53                   	push   ebx
c00139e6:	e8 41 92 ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c00139eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139ee:	e8 8b 94 ff ff       	call   c000ce7e <File::unlink()>
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	85 db                	test   ebx,ebx
c00139f8:	74 14                	je     c0013a0e <sysCallRmdir(regs*)+0x4d>
c00139fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a00:	83 ec 0c             	sub    esp,0xc
c0013a03:	53                   	push   ebx
c0013a04:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013a07:	83 c4 10             	add    esp,0x10
c0013a0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a0e:	85 c0                	test   eax,eax
c0013a10:	0f 95 c0             	setne  al
c0013a13:	31 d2                	xor    edx,edx
c0013a15:	0f b6 c0             	movzx  eax,al
c0013a18:	f7 d8                	neg    eax
c0013a1a:	83 d2 00             	adc    edx,0x0
c0013a1d:	83 c4 14             	add    esp,0x14
c0013a20:	f7 da                	neg    edx
c0013a22:	5b                   	pop    ebx
c0013a23:	5e                   	pop    esi
c0013a24:	c3                   	ret    

c0013a25 <sysCallUnlink(regs*)>:
c0013a25:	56                   	push   esi
c0013a26:	53                   	push   ebx
c0013a27:	83 ec 20             	sub    esp,0x20
c0013a2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013a2e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0013a31:	68 14 01 00 00       	push   0x114
c0013a36:	e8 44 5d ff ff       	call   c000977f <malloc>
c0013a3b:	83 c4 0c             	add    esp,0xc
c0013a3e:	89 c3                	mov    ebx,eax
c0013a40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a45:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a48:	56                   	push   esi
c0013a49:	53                   	push   ebx
c0013a4a:	e8 dd 91 ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0013a4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a52:	e8 27 94 ff ff       	call   c000ce7e <File::unlink()>
c0013a57:	83 c4 10             	add    esp,0x10
c0013a5a:	85 db                	test   ebx,ebx
c0013a5c:	74 14                	je     c0013a72 <sysCallUnlink(regs*)+0x4d>
c0013a5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a62:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a64:	83 ec 0c             	sub    esp,0xc
c0013a67:	53                   	push   ebx
c0013a68:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a72:	85 c0                	test   eax,eax
c0013a74:	0f 95 c0             	setne  al
c0013a77:	31 d2                	xor    edx,edx
c0013a79:	0f b6 c0             	movzx  eax,al
c0013a7c:	f7 d8                	neg    eax
c0013a7e:	83 d2 00             	adc    edx,0x0
c0013a81:	83 c4 14             	add    esp,0x14
c0013a84:	f7 da                	neg    edx
c0013a86:	5b                   	pop    ebx
c0013a87:	5e                   	pop    esi
c0013a88:	c3                   	ret    

c0013a89 <sysCallGetArgv(regs*)>:
c0013a89:	83 ec 0c             	sub    esp,0xc
c0013a8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a90:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0013a93:	85 c0                	test   eax,eax
c0013a95:	78 2b                	js     c0013ac2 <sysCallGetArgv(regs*)+0x39>
c0013a97:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013a9d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0013aa0:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0013aa6:	7d 1a                	jge    c0013ac2 <sysCallGetArgv(regs*)+0x39>
c0013aa8:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0013aaf:	85 c0                	test   eax,eax
c0013ab1:	74 17                	je     c0013aca <sysCallGetArgv(regs*)+0x41>
c0013ab3:	83 ec 08             	sub    esp,0x8
c0013ab6:	50                   	push   eax
c0013ab7:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013aba:	e8 a5 ca fe ff       	call   c0000564 <strcpy>
c0013abf:	83 c4 10             	add    esp,0x10
c0013ac2:	31 c0                	xor    eax,eax
c0013ac4:	31 d2                	xor    edx,edx
c0013ac6:	83 c4 0c             	add    esp,0xc
c0013ac9:	c3                   	ret    
c0013aca:	b8 01 00 00 00       	mov    eax,0x1
c0013acf:	31 d2                	xor    edx,edx
c0013ad1:	83 c4 0c             	add    esp,0xc
c0013ad4:	c3                   	ret    

c0013ad5 <sysCallTTYName(regs*)>:
c0013ad5:	56                   	push   esi
c0013ad6:	53                   	push   ebx
c0013ad7:	53                   	push   ebx
c0013ad8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013adc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013adf:	85 c0                	test   eax,eax
c0013ae1:	74 5f                	je     c0013b42 <sysCallTTYName(regs*)+0x6d>
c0013ae3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013ae6:	83 f8 02             	cmp    eax,0x2
c0013ae9:	77 3e                	ja     c0013b29 <sysCallTTYName(regs*)+0x54>
c0013aeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013af3:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0013af9:	85 db                	test   ebx,ebx
c0013afb:	74 45                	je     c0013b42 <sysCallTTYName(regs*)+0x6d>
c0013afd:	83 ec 0c             	sub    esp,0xc
c0013b00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b02:	53                   	push   ebx
c0013b03:	ff 10                	call   DWORD PTR [eax]
c0013b05:	83 c4 10             	add    esp,0x10
c0013b08:	84 c0                	test   al,al
c0013b0a:	74 41                	je     c0013b4d <sysCallTTYName(regs*)+0x78>
c0013b0c:	83 ec 08             	sub    esp,0x8
c0013b0f:	81 c3 82 00 00 00    	add    ebx,0x82
c0013b15:	53                   	push   ebx
c0013b16:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013b19:	e8 46 ca fe ff       	call   c0000564 <strcpy>
c0013b1e:	83 c4 10             	add    esp,0x10
c0013b21:	31 c0                	xor    eax,eax
c0013b23:	59                   	pop    ecx
c0013b24:	31 d2                	xor    edx,edx
c0013b26:	5b                   	pop    ebx
c0013b27:	5e                   	pop    esi
c0013b28:	c3                   	ret    
c0013b29:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013b2e:	74 bb                	je     c0013aeb <sysCallTTYName(regs*)+0x16>
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	50                   	push   eax
c0013b34:	e8 d6 76 ff ff       	call   c000b20f <getFromFileDescriptor(int)>
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	89 c3                	mov    ebx,eax
c0013b3e:	85 db                	test   ebx,ebx
c0013b40:	75 bb                	jne    c0013afd <sysCallTTYName(regs*)+0x28>
c0013b42:	59                   	pop    ecx
c0013b43:	b8 01 00 00 00       	mov    eax,0x1
c0013b48:	31 d2                	xor    edx,edx
c0013b4a:	5b                   	pop    ebx
c0013b4b:	5e                   	pop    esi
c0013b4c:	c3                   	ret    
c0013b4d:	59                   	pop    ecx
c0013b4e:	b8 02 00 00 00       	mov    eax,0x2
c0013b53:	31 d2                	xor    edx,edx
c0013b55:	5b                   	pop    ebx
c0013b56:	5e                   	pop    esi
c0013b57:	c3                   	ret    

c0013b58 <sysCallUSleep(regs*)>:
c0013b58:	83 ec 1c             	sub    esp,0x1c
c0013b5b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b5f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013b62:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0013b65:	6a 00                	push   0x0
c0013b67:	6a 64                	push   0x64
c0013b69:	52                   	push   edx
c0013b6a:	50                   	push   eax
c0013b6b:	e8 30 bf 00 00       	call   c001faa0 <__udivdi3>
c0013b70:	83 c4 14             	add    esp,0x14
c0013b73:	50                   	push   eax
c0013b74:	e8 b7 22 00 00       	call   c0015e30 <milliTenthSleep(unsigned int)>
c0013b79:	31 c0                	xor    eax,eax
c0013b7b:	31 d2                	xor    edx,edx
c0013b7d:	83 c4 1c             	add    esp,0x1c
c0013b80:	c3                   	ret    

c0013b81 <sysCallSpawn(regs*)>:
c0013b81:	56                   	push   esi
c0013b82:	53                   	push   ebx
c0013b83:	50                   	push   eax
c0013b84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b88:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013b8b:	85 c0                	test   eax,eax
c0013b8d:	75 08                	jne    c0013b97 <sysCallSpawn(regs*)+0x16>
c0013b8f:	59                   	pop    ecx
c0013b90:	31 c0                	xor    eax,eax
c0013b92:	31 d2                	xor    edx,edx
c0013b94:	5b                   	pop    ebx
c0013b95:	5e                   	pop    esi
c0013b96:	c3                   	ret    
c0013b97:	83 ec 0c             	sub    esp,0xc
c0013b9a:	68 1f 07 00 00       	push   0x71f
c0013b9f:	e8 db 5b ff ff       	call   c000977f <malloc>
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	89 c6                	mov    esi,eax
c0013ba9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0013bac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013baf:	85 c0                	test   eax,eax
c0013bb1:	75 32                	jne    c0013be5 <sysCallSpawn(regs*)+0x64>
c0013bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bb8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bbb:	52                   	push   edx
c0013bbc:	50                   	push   eax
c0013bbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bc0:	56                   	push   esi
c0013bc1:	e8 62 19 00 00       	call   c0015528 <Process::Process(char const*, Process*, char**)>
c0013bc6:	83 c4 10             	add    esp,0x10
c0013bc9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0013bd0:	75 bd                	jne    c0013b8f <sysCallSpawn(regs*)+0xe>
c0013bd2:	83 ec 0c             	sub    esp,0xc
c0013bd5:	56                   	push   esi
c0013bd6:	e8 39 1e 00 00       	call   c0015a14 <Process::createUserThread()>
c0013bdb:	8b 06                	mov    eax,DWORD PTR [esi]
c0013bdd:	83 c4 10             	add    esp,0x10
c0013be0:	99                   	cdq    
c0013be1:	59                   	pop    ecx
c0013be2:	5b                   	pop    ebx
c0013be3:	5e                   	pop    esi
c0013be4:	c3                   	ret    
c0013be5:	31 c0                	xor    eax,eax
c0013be7:	eb d2                	jmp    c0013bbb <sysCallSpawn(regs*)+0x3a>

c0013be9 <sysCallGetEnv(regs*)>:
c0013be9:	57                   	push   edi
c0013bea:	56                   	push   esi
c0013beb:	53                   	push   ebx
c0013bec:	83 ec 1c             	sub    esp,0x1c
c0013bef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013bf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bf8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013bfb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0013bfe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c01:	e8 49 e9 ff ff       	call   c001254f <Krnl::getProcessTotalEnvCount(Process*)>
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	39 c7                	cmp    edi,eax
c0013c0b:	7c 14                	jl     c0013c21 <sysCallGetEnv(regs*)+0x38>
c0013c0d:	85 f6                	test   esi,esi
c0013c0f:	75 0b                	jne    c0013c1c <sysCallGetEnv(regs*)+0x33>
c0013c11:	83 c4 10             	add    esp,0x10
c0013c14:	31 c0                	xor    eax,eax
c0013c16:	5b                   	pop    ebx
c0013c17:	31 d2                	xor    edx,edx
c0013c19:	5e                   	pop    esi
c0013c1a:	5f                   	pop    edi
c0013c1b:	c3                   	ret    
c0013c1c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013c1f:	eb f0                	jmp    c0013c11 <sysCallGetEnv(regs*)+0x28>
c0013c21:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013c25:	52                   	push   edx
c0013c26:	57                   	push   edi
c0013c27:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013c2d:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0013c30:	50                   	push   eax
c0013c31:	e8 39 e9 ff ff       	call   c001256f <Krnl::getProcessEnvPair(Process*, int)>
c0013c36:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013c39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c3d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c41:	83 c4 0c             	add    esp,0xc
c0013c44:	85 c9                	test   ecx,ecx
c0013c46:	75 23                	jne    c0013c6b <sysCallGetEnv(regs*)+0x82>
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	50                   	push   eax
c0013c4c:	e8 73 c8 fe ff       	call   c00004c4 <strlen>
c0013c51:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013c54:	89 c3                	mov    ebx,eax
c0013c56:	e8 69 c8 fe ff       	call   c00004c4 <strlen>
c0013c5b:	83 c4 10             	add    esp,0x10
c0013c5e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013c62:	83 c4 10             	add    esp,0x10
c0013c65:	31 d2                	xor    edx,edx
c0013c67:	5b                   	pop    ebx
c0013c68:	5e                   	pop    esi
c0013c69:	5f                   	pop    edi
c0013c6a:	c3                   	ret    
c0013c6b:	83 ec 08             	sub    esp,0x8
c0013c6e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013c71:	50                   	push   eax
c0013c72:	56                   	push   esi
c0013c73:	e8 ec c8 fe ff       	call   c0000564 <strcpy>
c0013c78:	58                   	pop    eax
c0013c79:	5a                   	pop    edx
c0013c7a:	68 58 26 02 c0       	push   0xc0022658
c0013c7f:	56                   	push   esi
c0013c80:	e8 1f ca fe ff       	call   c00006a4 <strcat>
c0013c85:	59                   	pop    ecx
c0013c86:	5b                   	pop    ebx
c0013c87:	57                   	push   edi
c0013c88:	56                   	push   esi
c0013c89:	e8 16 ca fe ff       	call   c00006a4 <strcat>
c0013c8e:	83 c4 10             	add    esp,0x10
c0013c91:	e9 7b ff ff ff       	jmp    c0013c11 <sysCallGetEnv(regs*)+0x28>

c0013c96 <sysSetFatAttrib(regs*)>:
c0013c96:	57                   	push   edi
c0013c97:	56                   	push   esi
c0013c98:	53                   	push   ebx
c0013c99:	83 ec 1c             	sub    esp,0x1c
c0013c9c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013ca0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013ca3:	68 14 01 00 00       	push   0x114
c0013ca8:	e8 d2 5a ff ff       	call   c000977f <malloc>
c0013cad:	83 c4 0c             	add    esp,0xc
c0013cb0:	89 c3                	mov    ebx,eax
c0013cb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cb7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013cba:	57                   	push   edi
c0013cbb:	53                   	push   ebx
c0013cbc:	e8 6b 8f ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0013cc1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013cc4:	83 c4 0c             	add    esp,0xc
c0013cc7:	0f b6 d4             	movzx  edx,ah
c0013cca:	0f b6 c0             	movzx  eax,al
c0013ccd:	52                   	push   edx
c0013cce:	50                   	push   eax
c0013ccf:	53                   	push   ebx
c0013cd0:	e8 43 92 ff ff       	call   c000cf18 <File::chfatattr(unsigned char, unsigned char)>
c0013cd5:	83 c4 10             	add    esp,0x10
c0013cd8:	85 db                	test   ebx,ebx
c0013cda:	74 14                	je     c0013cf0 <sysSetFatAttrib(regs*)+0x5a>
c0013cdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ce0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013ce2:	83 ec 0c             	sub    esp,0xc
c0013ce5:	53                   	push   ebx
c0013ce6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0013ce9:	83 c4 10             	add    esp,0x10
c0013cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013cf0:	85 c0                	test   eax,eax
c0013cf2:	0f 95 c0             	setne  al
c0013cf5:	31 d2                	xor    edx,edx
c0013cf7:	0f b6 c0             	movzx  eax,al
c0013cfa:	f7 d8                	neg    eax
c0013cfc:	83 d2 00             	adc    edx,0x0
c0013cff:	83 c4 10             	add    esp,0x10
c0013d02:	f7 da                	neg    edx
c0013d04:	5b                   	pop    ebx
c0013d05:	5e                   	pop    esi
c0013d06:	5f                   	pop    edi
c0013d07:	c3                   	ret    

c0013d08 <sysPipe(regs*)>:
c0013d08:	57                   	push   edi
c0013d09:	56                   	push   esi
c0013d0a:	53                   	push   ebx
c0013d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0f:	83 ec 0c             	sub    esp,0xc
c0013d12:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0013d15:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0013d18:	6a 20                	push   0x20
c0013d1a:	e8 60 5a ff ff       	call   c000977f <malloc>
c0013d1f:	89 c3                	mov    ebx,eax
c0013d21:	58                   	pop    eax
c0013d22:	5a                   	pop    edx
c0013d23:	68 00 50 00 00       	push   0x5000
c0013d28:	53                   	push   ebx
c0013d29:	e8 d2 64 ff ff       	call   c000a200 <Pipe::Pipe(int)>
c0013d2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d31:	e8 e4 71 ff ff       	call   c000af1a <UnixFile::getFileDescriptor()>
c0013d36:	89 07                	mov    DWORD PTR [edi],eax
c0013d38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d3b:	e8 da 71 ff ff       	call   c000af1a <UnixFile::getFileDescriptor()>
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	89 06                	mov    DWORD PTR [esi],eax
c0013d45:	31 d2                	xor    edx,edx
c0013d47:	5b                   	pop    ebx
c0013d48:	31 c0                	xor    eax,eax
c0013d4a:	5e                   	pop    esi
c0013d4b:	5f                   	pop    edi
c0013d4c:	c3                   	ret    

c0013d4d <sysGetUnixTime(regs*)>:
c0013d4d:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0013d52:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013d58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d5c:	e9 29 99 ff ff       	jmp    c000d68a <Clock::timeInSecondsLocal()>

c0013d61 <string_ends_with(char const*, char const*)>:
c0013d61:	57                   	push   edi
c0013d62:	56                   	push   esi
c0013d63:	53                   	push   ebx
c0013d64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013d6c:	83 ec 0c             	sub    esp,0xc
c0013d6f:	53                   	push   ebx
c0013d70:	e8 4f c7 fe ff       	call   c00004c4 <strlen>
c0013d75:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d78:	89 c6                	mov    esi,eax
c0013d7a:	e8 45 c7 fe ff       	call   c00004c4 <strlen>
c0013d7f:	83 c4 10             	add    esp,0x10
c0013d82:	39 c6                	cmp    esi,eax
c0013d84:	7d 06                	jge    c0013d8c <string_ends_with(char const*, char const*)+0x2b>
c0013d86:	5b                   	pop    ebx
c0013d87:	31 c0                	xor    eax,eax
c0013d89:	5e                   	pop    esi
c0013d8a:	5f                   	pop    edi
c0013d8b:	c3                   	ret    
c0013d8c:	83 ec 08             	sub    esp,0x8
c0013d8f:	29 c6                	sub    esi,eax
c0013d91:	57                   	push   edi
c0013d92:	01 f3                	add    ebx,esi
c0013d94:	53                   	push   ebx
c0013d95:	e8 56 c8 fe ff       	call   c00005f0 <strcmp>
c0013d9a:	83 c4 10             	add    esp,0x10
c0013d9d:	85 c0                	test   eax,eax
c0013d9f:	5b                   	pop    ebx
c0013da0:	0f 94 c0             	sete   al
c0013da3:	5e                   	pop    esi
c0013da4:	0f b6 c0             	movzx  eax,al
c0013da7:	5f                   	pop    edi
c0013da8:	c3                   	ret    

c0013da9 <sysCallOpen(regs*)>:
c0013da9:	56                   	push   esi
c0013daa:	53                   	push   ebx
c0013dab:	81 ec 04 01 00 00    	sub    esp,0x104
c0013db1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0013db8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0013dbb:	85 c9                	test   ecx,ecx
c0013dbd:	0f 84 ad 01 00 00    	je     c0013f70 <sysCallOpen(regs*)+0x1c7>
c0013dc3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013dc6:	85 c0                	test   eax,eax
c0013dc8:	0f 84 a2 01 00 00    	je     c0013f70 <sysCallOpen(regs*)+0x1c7>
c0013dce:	52                   	push   edx
c0013dcf:	68 5a 26 02 c0       	push   0xc002265a
c0013dd4:	50                   	push   eax
c0013dd5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013dd9:	56                   	push   esi
c0013dda:	e8 a3 8c ff ff       	call   c000ca82 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013ddf:	89 34 24             	mov    DWORD PTR [esp],esi
c0013de2:	e8 dd c6 fe ff       	call   c00004c4 <strlen>
c0013de7:	83 c4 10             	add    esp,0x10
c0013dea:	48                   	dec    eax
c0013deb:	74 1d                	je     c0013e0a <sysCallOpen(regs*)+0x61>
c0013ded:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0013df0:	eb 0f                	jmp    c0013e01 <sysCallOpen(regs*)+0x58>
c0013df2:	80 fa 3a             	cmp    dl,0x3a
c0013df5:	74 0f                	je     c0013e06 <sysCallOpen(regs*)+0x5d>
c0013df7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0013dfb:	48                   	dec    eax
c0013dfc:	74 0c                	je     c0013e0a <sysCallOpen(regs*)+0x61>
c0013dfe:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0013e01:	80 fa 2e             	cmp    dl,0x2e
c0013e04:	75 ec                	jne    c0013df2 <sysCallOpen(regs*)+0x49>
c0013e06:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0013e0a:	83 ec 08             	sub    esp,0x8
c0013e0d:	68 5e 26 02 c0       	push   0xc002265e
c0013e12:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e15:	e8 47 ff ff ff       	call   c0013d61 <string_ends_with(char const*, char const*)>
c0013e1a:	83 c4 10             	add    esp,0x10
c0013e1d:	85 c0                	test   eax,eax
c0013e1f:	74 1d                	je     c0013e3e <sysCallOpen(regs*)+0x95>
c0013e21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013e24:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0013e2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e31:	81 c4 04 01 00 00    	add    esp,0x104
c0013e37:	31 c0                	xor    eax,eax
c0013e39:	31 d2                	xor    edx,edx
c0013e3b:	5b                   	pop    ebx
c0013e3c:	5e                   	pop    esi
c0013e3d:	c3                   	ret    
c0013e3e:	83 ec 08             	sub    esp,0x8
c0013e41:	68 63 26 02 c0       	push   0xc0022663
c0013e46:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e49:	e8 13 ff ff ff       	call   c0013d61 <string_ends_with(char const*, char const*)>
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	85 c0                	test   eax,eax
c0013e53:	75 cc                	jne    c0013e21 <sysCallOpen(regs*)+0x78>
c0013e55:	83 ec 08             	sub    esp,0x8
c0013e58:	68 5f 26 02 c0       	push   0xc002265f
c0013e5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e60:	e8 8b c7 fe ff       	call   c00005f0 <strcmp>
c0013e65:	83 c4 10             	add    esp,0x10
c0013e68:	85 c0                	test   eax,eax
c0013e6a:	74 b5                	je     c0013e21 <sysCallOpen(regs*)+0x78>
c0013e6c:	83 ec 08             	sub    esp,0x8
c0013e6f:	68 5e 26 02 c0       	push   0xc002265e
c0013e74:	56                   	push   esi
c0013e75:	e8 e7 fe ff ff       	call   c0013d61 <string_ends_with(char const*, char const*)>
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	85 c0                	test   eax,eax
c0013e7f:	75 a0                	jne    c0013e21 <sysCallOpen(regs*)+0x78>
c0013e81:	83 ec 08             	sub    esp,0x8
c0013e84:	68 68 26 02 c0       	push   0xc0022668
c0013e89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e8c:	e8 d0 fe ff ff       	call   c0013d61 <string_ends_with(char const*, char const*)>
c0013e91:	83 c4 10             	add    esp,0x10
c0013e94:	85 c0                	test   eax,eax
c0013e96:	0f 85 e7 00 00 00    	jne    c0013f83 <sysCallOpen(regs*)+0x1da>
c0013e9c:	83 ec 08             	sub    esp,0x8
c0013e9f:	68 6d 26 02 c0       	push   0xc002266d
c0013ea4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ea7:	e8 b5 fe ff ff       	call   c0013d61 <string_ends_with(char const*, char const*)>
c0013eac:	83 c4 10             	add    esp,0x10
c0013eaf:	85 c0                	test   eax,eax
c0013eb1:	0f 85 cc 00 00 00    	jne    c0013f83 <sysCallOpen(regs*)+0x1da>
c0013eb7:	83 ec 08             	sub    esp,0x8
c0013eba:	68 69 26 02 c0       	push   0xc0022669
c0013ebf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ec2:	e8 29 c7 fe ff       	call   c00005f0 <strcmp>
c0013ec7:	83 c4 10             	add    esp,0x10
c0013eca:	85 c0                	test   eax,eax
c0013ecc:	0f 84 b1 00 00 00    	je     c0013f83 <sysCallOpen(regs*)+0x1da>
c0013ed2:	83 ec 08             	sub    esp,0x8
c0013ed5:	68 68 26 02 c0       	push   0xc0022668
c0013eda:	56                   	push   esi
c0013edb:	e8 81 fe ff ff       	call   c0013d61 <string_ends_with(char const*, char const*)>
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	85 c0                	test   eax,eax
c0013ee5:	0f 85 98 00 00 00    	jne    c0013f83 <sysCallOpen(regs*)+0x1da>
c0013eeb:	83 ec 0c             	sub    esp,0xc
c0013eee:	68 14 01 00 00       	push   0x114
c0013ef3:	e8 87 58 ff ff       	call   c000977f <malloc>
c0013ef8:	83 c4 0c             	add    esp,0xc
c0013efb:	89 c6                	mov    esi,eax
c0013efd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f02:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f05:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f08:	56                   	push   esi
c0013f09:	e8 1e 8d ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0013f0e:	83 c4 10             	add    esp,0x10
c0013f11:	85 f6                	test   esi,esi
c0013f13:	74 5b                	je     c0013f70 <sysCallOpen(regs*)+0x1c7>
c0013f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0013f18:	0f b6 c2             	movzx  eax,dl
c0013f1b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0013f1e:	89 d0                	mov    eax,edx
c0013f20:	83 e0 01             	and    eax,0x1
c0013f23:	f6 c2 02             	test   dl,0x2
c0013f26:	74 03                	je     c0013f2b <sysCallOpen(regs*)+0x182>
c0013f28:	83 c8 02             	or     eax,0x2
c0013f2b:	f6 c2 04             	test   dl,0x4
c0013f2e:	74 03                	je     c0013f33 <sysCallOpen(regs*)+0x18a>
c0013f30:	83 c8 04             	or     eax,0x4
c0013f33:	f6 c2 08             	test   dl,0x8
c0013f36:	74 03                	je     c0013f3b <sysCallOpen(regs*)+0x192>
c0013f38:	83 c8 0a             	or     eax,0xa
c0013f3b:	83 e2 10             	and    edx,0x10
c0013f3e:	74 03                	je     c0013f43 <sysCallOpen(regs*)+0x19a>
c0013f40:	83 c8 12             	or     eax,0x12
c0013f43:	83 ec 08             	sub    esp,0x8
c0013f46:	50                   	push   eax
c0013f47:	56                   	push   esi
c0013f48:	e8 b9 8d ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c0013f4d:	83 c4 10             	add    esp,0x10
c0013f50:	85 c0                	test   eax,eax
c0013f52:	75 1c                	jne    c0013f70 <sysCallOpen(regs*)+0x1c7>
c0013f54:	83 ec 0c             	sub    esp,0xc
c0013f57:	56                   	push   esi
c0013f58:	e8 bd 6f ff ff       	call   c000af1a <UnixFile::getFileDescriptor()>
c0013f5d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	89 02                	mov    DWORD PTR [edx],eax
c0013f65:	c1 f8 1f             	sar    eax,0x1f
c0013f68:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013f6b:	e9 c1 fe ff ff       	jmp    c0013e31 <sysCallOpen(regs*)+0x88>
c0013f70:	81 c4 04 01 00 00    	add    esp,0x104
c0013f76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013f7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0013f80:	5b                   	pop    ebx
c0013f81:	5e                   	pop    esi
c0013f82:	c3                   	ret    
c0013f83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f86:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0013f8c:	e9 99 fe ff ff       	jmp    c0013e2a <sysCallOpen(regs*)+0x81>

c0013f91 <Sys::loadSyscalls()>:
c0013f91:	c7 05 c0 6a 02 c0 29 33 01 c0 	mov    DWORD PTR ds:0xc0026ac0,0xc0013329
c0013f9b:	c7 05 c4 6a 02 c0 1e 2f 01 c0 	mov    DWORD PTR ds:0xc0026ac4,0xc0012f1e
c0013fa5:	c7 05 c8 6a 02 c0 0f 31 01 c0 	mov    DWORD PTR ds:0xc0026ac8,0xc001310f
c0013faf:	c7 05 cc 6a 02 c0 5f 32 01 c0 	mov    DWORD PTR ds:0xc0026acc,0xc001325f
c0013fb9:	c7 05 d0 6a 02 c0 a7 30 01 c0 	mov    DWORD PTR ds:0xc0026ad0,0xc00130a7
c0013fc3:	c7 05 d4 6a 02 c0 55 2f 01 c0 	mov    DWORD PTR ds:0xc0026ad4,0xc0012f55
c0013fcd:	c7 05 d8 6a 02 c0 36 2f 01 c0 	mov    DWORD PTR ds:0xc0026ad8,0xc0012f36
c0013fd7:	c7 05 dc 6a 02 c0 64 31 01 c0 	mov    DWORD PTR ds:0xc0026adc,0xc0013164
c0013fe1:	c7 05 e4 6a 02 c0 d9 37 01 c0 	mov    DWORD PTR ds:0xc0026ae4,0xc00137d9
c0013feb:	c7 05 e0 6a 02 c0 a9 3d 01 c0 	mov    DWORD PTR ds:0xc0026ae0,0xc0013da9
c0013ff5:	c7 05 e8 6a 02 c0 39 38 01 c0 	mov    DWORD PTR ds:0xc0026ae8,0xc0013839
c0013fff:	c7 05 ec 6a 02 c0 1c 35 01 c0 	mov    DWORD PTR ds:0xc0026aec,0xc001351c
c0014009:	c7 05 f0 6a 02 c0 4e 33 01 c0 	mov    DWORD PTR ds:0xc0026af0,0xc001334e
c0014013:	c7 05 f4 6a 02 c0 53 33 01 c0 	mov    DWORD PTR ds:0xc0026af4,0xc0013353
c001401d:	c7 05 f8 6a 02 c0 02 39 01 c0 	mov    DWORD PTR ds:0xc0026af8,0xc0013902
c0014027:	c7 05 fc 6a 02 c0 ae 38 01 c0 	mov    DWORD PTR ds:0xc0026afc,0xc00138ae
c0014031:	c7 05 00 6b 02 c0 f5 35 01 c0 	mov    DWORD PTR ds:0xc0026b00,0xc00135f5
c001403b:	c7 05 04 6b 02 c0 4c 36 01 c0 	mov    DWORD PTR ds:0xc0026b04,0xc001364c
c0014045:	c7 05 08 6b 02 c0 b8 36 01 c0 	mov    DWORD PTR ds:0xc0026b08,0xc00136b8
c001404f:	c7 05 0c 6b 02 c0 58 33 01 c0 	mov    DWORD PTR ds:0xc0026b0c,0xc0013358
c0014059:	c7 05 10 6b 02 c0 72 39 01 c0 	mov    DWORD PTR ds:0xc0026b10,0xc0013972
c0014063:	c7 05 14 6b 02 c0 8c 39 01 c0 	mov    DWORD PTR ds:0xc0026b14,0xc001398c
c001406d:	c7 05 18 6b 02 c0 8c 39 01 c0 	mov    DWORD PTR ds:0xc0026b18,0xc001398c
c0014077:	c7 05 1c 6b 02 c0 c1 39 01 c0 	mov    DWORD PTR ds:0xc0026b1c,0xc00139c1
c0014081:	c7 05 20 6b 02 c0 25 3a 01 c0 	mov    DWORD PTR ds:0xc0026b20,0xc0013a25
c001408b:	c7 05 24 6b 02 c0 62 33 01 c0 	mov    DWORD PTR ds:0xc0026b24,0xc0013362
c0014095:	c7 05 28 6b 02 c0 89 3a 01 c0 	mov    DWORD PTR ds:0xc0026b28,0xc0013a89
c001409f:	c7 05 2c 6b 02 c0 d9 34 01 c0 	mov    DWORD PTR ds:0xc0026b2c,0xc00134d9
c00140a9:	c7 05 30 6b 02 c0 d5 3a 01 c0 	mov    DWORD PTR ds:0xc0026b30,0xc0013ad5
c00140b3:	c7 05 34 6b 02 c0 9b 35 01 c0 	mov    DWORD PTR ds:0xc0026b34,0xc001359b
c00140bd:	c7 05 38 6b 02 c0 58 3b 01 c0 	mov    DWORD PTR ds:0xc0026b38,0xc0013b58
c00140c7:	c7 05 3c 6b 02 c0 2a 37 01 c0 	mov    DWORD PTR ds:0xc0026b3c,0xc001372a
c00140d1:	c7 05 40 6b 02 c0 81 3b 01 c0 	mov    DWORD PTR ds:0xc0026b40,0xc0013b81
c00140db:	c7 05 44 6b 02 c0 e9 3b 01 c0 	mov    DWORD PTR ds:0xc0026b44,0xc0013be9
c00140e5:	c7 05 4c 6b 02 c0 72 33 01 c0 	mov    DWORD PTR ds:0xc0026b4c,0xc0013372
c00140ef:	c7 05 50 6b 02 c0 dc 33 01 c0 	mov    DWORD PTR ds:0xc0026b50,0xc00133dc
c00140f9:	c7 05 54 6b 02 c0 26 34 01 c0 	mov    DWORD PTR ds:0xc0026b54,0xc0013426
c0014103:	c7 05 58 6b 02 c0 96 3c 01 c0 	mov    DWORD PTR ds:0xc0026b58,0xc0013c96
c001410d:	c7 05 5c 6b 02 c0 a7 39 01 c0 	mov    DWORD PTR ds:0xc0026b5c,0xc00139a7
c0014117:	c7 05 60 6b 02 c0 7b 34 01 c0 	mov    DWORD PTR ds:0xc0026b60,0xc001347b
c0014121:	c7 05 64 6b 02 c0 08 3d 01 c0 	mov    DWORD PTR ds:0xc0026b64,0xc0013d08
c001412b:	c7 05 68 6b 02 c0 4d 3d 01 c0 	mov    DWORD PTR ds:0xc0026b68,0xc0013d4d
c0014135:	c7 05 6c 6b 02 c0 ff 2f 01 c0 	mov    DWORD PTR ds:0xc0026b6c,0xc0012fff
c001413f:	c7 05 70 6b 02 c0 80 31 01 c0 	mov    DWORD PTR ds:0xc0026b70,0xc0013180
c0014149:	c7 05 74 6b 02 c0 15 32 01 c0 	mov    DWORD PTR ds:0xc0026b74,0xc0013215
c0014153:	c7 05 78 6b 02 c0 e8 2e 01 c0 	mov    DWORD PTR ds:0xc0026b78,0xc0012ee8
c001415d:	c7 05 7c 6b 02 c0 c7 32 01 c0 	mov    DWORD PTR ds:0xc0026b7c,0xc00132c7
c0014167:	c7 05 80 6b 02 c0 61 2f 01 c0 	mov    DWORD PTR ds:0xc0026b80,0xc0012f61
c0014171:	c7 05 84 6b 02 c0 7b 2f 01 c0 	mov    DWORD PTR ds:0xc0026b84,0xc0012f7b
c001417b:	c3                   	ret    

c001417c <Sys::systemCall(regs*, void*)>:
c001417c:	53                   	push   ebx
c001417d:	83 ec 08             	sub    esp,0x8
c0014180:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014184:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014187:	83 f8 7f             	cmp    eax,0x7f
c001418a:	77 16                	ja     c00141a2 <Sys::systemCall(regs*, void*)+0x26>
c001418c:	8b 14 85 c0 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9540]
c0014193:	85 d2                	test   edx,edx
c0014195:	74 0b                	je     c00141a2 <Sys::systemCall(regs*, void*)+0x26>
c0014197:	83 ec 0c             	sub    esp,0xc
c001419a:	53                   	push   ebx
c001419b:	ff d2                	call   edx
c001419d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00141a0:	eb 0d                	jmp    c00141af <Sys::systemCall(regs*, void*)+0x33>
c00141a2:	52                   	push   edx
c00141a3:	52                   	push   edx
c00141a4:	50                   	push   eax
c00141a5:	68 72 26 02 c0       	push   0xc0022672
c00141aa:	e8 12 85 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00141af:	83 c4 10             	add    esp,0x10
c00141b2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00141b7:	31 d2                	xor    edx,edx
c00141b9:	83 c4 08             	add    esp,0x8
c00141bc:	5b                   	pop    ebx
c00141bd:	c3                   	ret    

c00141be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00141be:	55                   	push   ebp
c00141bf:	57                   	push   edi
c00141c0:	56                   	push   esi
c00141c1:	53                   	push   ebx
c00141c2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00141c8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00141cf:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00141d6:	85 c0                	test   eax,eax
c00141d8:	0f 95 c1             	setne  cl
c00141db:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00141e3:	0f 94 c2             	sete   dl
c00141e6:	84 d1                	test   cl,dl
c00141e8:	74 23                	je     c001420d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00141ea:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00141f0:	74 1b                	je     c001420d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00141f2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00141f8:	89 da                	mov    edx,ebx
c00141fa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014200:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014206:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001420d:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0014214:	05 ff 0f 00 00       	add    eax,0xfff
c0014219:	83 ec 0c             	sub    esp,0xc
c001421c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014220:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0014226:	c1 e8 0c             	shr    eax,0xc
c0014229:	89 fe                	mov    esi,edi
c001422b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001422f:	c1 ee 0c             	shr    esi,0xc
c0014232:	6a 01                	push   0x1
c0014234:	e8 2c 71 ff ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c0014239:	89 c5                	mov    ebp,eax
c001423b:	58                   	pop    eax
c001423c:	5a                   	pop    edx
c001423d:	56                   	push   esi
c001423e:	68 86 26 02 c0       	push   0xc0022686
c0014243:	e8 79 84 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0014248:	59                   	pop    ecx
c0014249:	58                   	pop    eax
c001424a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001424e:	68 98 26 02 c0       	push   0xc0022698
c0014253:	e8 69 84 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0014258:	83 c4 10             	add    esp,0x10
c001425b:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0014261:	0f 86 31 01 00 00    	jbe    c0014398 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0014267:	c1 e6 0c             	shl    esi,0xc
c001426a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001426d:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0014270:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014274:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001427b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001427e:	01 df                	add    edi,ebx
c0014280:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0014283:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0014287:	0f 84 08 01 00 00    	je     c0014395 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001428d:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014293:	76 05                	jbe    c001429a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0014295:	bf 00 10 00 00       	mov    edi,0x1000
c001429a:	83 ec 0c             	sub    esp,0xc
c001429d:	31 d2                	xor    edx,edx
c001429f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00142a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00142ac:	50                   	push   eax
c00142ad:	8d 74 24 30          	lea    esi,[esp+0x30]
c00142b1:	56                   	push   esi
c00142b2:	52                   	push   edx
c00142b3:	57                   	push   edi
c00142b4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00142bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142be:	83 c4 20             	add    esp,0x20
c00142c1:	85 c0                	test   eax,eax
c00142c3:	74 0a                	je     c00142cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c00142c5:	53                   	push   ebx
c00142c6:	53                   	push   ebx
c00142c7:	50                   	push   eax
c00142c8:	68 aa 26 02 c0       	push   0xc00226aa
c00142cd:	eb 0f                	jmp    c00142de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c00142cf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00142d3:	74 20                	je     c00142f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00142d5:	51                   	push   ecx
c00142d6:	51                   	push   ecx
c00142d7:	6a 00                	push   0x0
c00142d9:	68 d5 26 02 c0       	push   0xc00226d5
c00142de:	e8 de 83 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00142e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00142e6:	e8 6e 73 ff ff       	call   c000b659 <Virt::freeKernelVirtualPages(unsigned long)>
c00142eb:	83 c4 10             	add    esp,0x10
c00142ee:	31 c0                	xor    eax,eax
c00142f0:	e9 68 01 00 00       	jmp    c001445d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00142f5:	fa                   	cli    
c00142f6:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00142fc:	e8 b1 58 ff ff       	call   c0009bb2 <Phys::allocatePage()>
c0014301:	6a 07                	push   0x7
c0014303:	89 c7                	mov    edi,eax
c0014305:	55                   	push   ebp
c0014306:	50                   	push   eax
c0014307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001430c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001430f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014315:	e8 b6 76 ff ff       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001431a:	83 c4 0c             	add    esp,0xc
c001431d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014324:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001432a:	6a 00                	push   0x0
c001432c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014331:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014334:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001433a:	e8 eb 74 ff ff       	call   c000b82a <VAS::mapOtherVASIn(bool, VAS*)>
c001433f:	58                   	pop    eax
c0014340:	5a                   	pop    edx
c0014341:	68 07 0c 00 00       	push   0xc07
c0014346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001434a:	57                   	push   edi
c001434b:	89 ef                	mov    edi,ebp
c001434d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014354:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001435a:	6a 00                	push   0x0
c001435c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014361:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014364:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001436a:	e8 1f 7a ff ff       	call   c000bd8e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001436f:	b9 00 10 00 00       	mov    ecx,0x1000
c0014374:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014376:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001437b:	83 c4 20             	add    esp,0x20
c001437e:	48                   	dec    eax
c001437f:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0014384:	85 c0                	test   eax,eax
c0014386:	75 01                	jne    c0014389 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0014388:	fb                   	sti    
c0014389:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0014390:	e9 df fe ff ff       	jmp    c0014274 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0014395:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0014398:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c00143a0:	0f 86 a9 00 00 00    	jbe    c001444f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00143a6:	fa                   	cli    
c00143a7:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00143ad:	51                   	push   ecx
c00143ae:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143b5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143bb:	6a 00                	push   0x0
c00143bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143c5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143cb:	e8 5a 74 ff ff       	call   c000b82a <VAS::mapOtherVASIn(bool, VAS*)>
c00143d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143d4:	c1 e6 0c             	shl    esi,0xc
c00143d7:	01 de                	add    esi,ebx
c00143d9:	83 c4 10             	add    esp,0x10
c00143dc:	39 de                	cmp    esi,ebx
c00143de:	74 61                	je     c0014441 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00143e0:	e8 cd 57 ff ff       	call   c0009bb2 <Phys::allocatePage()>
c00143e5:	6a 07                	push   0x7
c00143e7:	89 c7                	mov    edi,eax
c00143e9:	55                   	push   ebp
c00143ea:	50                   	push   eax
c00143eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143f9:	e8 d2 75 ff ff       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00143fe:	58                   	pop    eax
c00143ff:	5a                   	pop    edx
c0014400:	68 07 0c 00 00       	push   0xc07
c0014405:	53                   	push   ebx
c0014406:	81 c3 00 10 00 00    	add    ebx,0x1000
c001440c:	57                   	push   edi
c001440d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014414:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001441a:	6a 00                	push   0x0
c001441c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014421:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014424:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001442a:	e8 5f 79 ff ff       	call   c000bd8e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001442f:	83 c4 1c             	add    esp,0x1c
c0014432:	68 00 10 00 00       	push   0x1000
c0014437:	6a 00                	push   0x0
c0014439:	55                   	push   ebp
c001443a:	e8 69 c0 fe ff       	call   c00004a8 <memset>
c001443f:	eb 98                	jmp    c00143d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0014441:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0014446:	48                   	dec    eax
c0014447:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c001444c:	75 01                	jne    c001444f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001444e:	fb                   	sti    
c001444f:	83 ec 0c             	sub    esp,0xc
c0014452:	55                   	push   ebp
c0014453:	e8 01 72 ff ff       	call   c000b659 <Virt::freeKernelVirtualPages(unsigned long)>
c0014458:	83 c4 10             	add    esp,0x10
c001445b:	b0 01                	mov    al,0x1
c001445d:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014463:	5b                   	pop    ebx
c0014464:	5e                   	pop    esi
c0014465:	5f                   	pop    edi
c0014466:	5d                   	pop    ebp
c0014467:	c3                   	ret    

c0014468 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014468:	55                   	push   ebp
c0014469:	57                   	push   edi
c001446a:	56                   	push   esi
c001446b:	53                   	push   ebx
c001446c:	83 ec 48             	sub    esp,0x48
c001446f:	68 14 01 00 00       	push   0x114
c0014474:	e8 06 53 ff ff       	call   c000977f <malloc>
c0014479:	83 c4 0c             	add    esp,0xc
c001447c:	89 c6                	mov    esi,eax
c001447e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014482:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014486:	50                   	push   eax
c0014487:	e8 a0 87 ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c001448c:	58                   	pop    eax
c001448d:	5a                   	pop    edx
c001448e:	6a 01                	push   0x1
c0014490:	56                   	push   esi
c0014491:	e8 70 88 ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c0014496:	83 c4 10             	add    esp,0x10
c0014499:	85 c0                	test   eax,eax
c001449b:	0f 85 47 01 00 00    	jne    c00145e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00144a1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00144a9:	83 ec 0c             	sub    esp,0xc
c00144ac:	6a 34                	push   0x34
c00144ae:	e8 cc 52 ff ff       	call   c000977f <malloc>
c00144b3:	89 c3                	mov    ebx,eax
c00144b5:	58                   	pop    eax
c00144b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00144b8:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00144bc:	57                   	push   edi
c00144bd:	53                   	push   ebx
c00144be:	6a 00                	push   0x0
c00144c0:	6a 34                	push   0x34
c00144c2:	56                   	push   esi
c00144c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144c6:	83 c4 20             	add    esp,0x20
c00144c9:	85 c0                	test   eax,eax
c00144cb:	0f 85 17 01 00 00    	jne    c00145e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00144d1:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00144d7:	0f 85 0b 01 00 00    	jne    c00145e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00144dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00144e0:	85 c0                	test   eax,eax
c00144e2:	0f 84 00 01 00 00    	je     c00145e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00144e8:	31 d2                	xor    edx,edx
c00144ea:	55                   	push   ebp
c00144eb:	52                   	push   edx
c00144ec:	50                   	push   eax
c00144ed:	56                   	push   esi
c00144ee:	e8 d1 88 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c00144f3:	83 c4 10             	add    esp,0x10
c00144f6:	85 c0                	test   eax,eax
c00144f8:	0f 85 ea 00 00 00    	jne    c00145e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00144fe:	83 ec 0c             	sub    esp,0xc
c0014501:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014504:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014508:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001450c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014510:	0f af c2             	imul   eax,edx
c0014513:	50                   	push   eax
c0014514:	e8 66 52 ff ff       	call   c000977f <malloc>
c0014519:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001451b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001451f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014522:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014526:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001452a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001452e:	0f af c2             	imul   eax,edx
c0014531:	99                   	cdq    
c0014532:	52                   	push   edx
c0014533:	50                   	push   eax
c0014534:	56                   	push   esi
c0014535:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014538:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001453b:	83 c4 20             	add    esp,0x20
c001453e:	85 c0                	test   eax,eax
c0014540:	0f 84 a2 00 00 00    	je     c00145e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0014546:	31 d2                	xor    edx,edx
c0014548:	51                   	push   ecx
c0014549:	52                   	push   edx
c001454a:	50                   	push   eax
c001454b:	56                   	push   esi
c001454c:	e8 73 88 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014551:	83 c4 10             	add    esp,0x10
c0014554:	85 c0                	test   eax,eax
c0014556:	0f 85 8c 00 00 00    	jne    c00145e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001455c:	83 ec 0c             	sub    esp,0xc
c001455f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014563:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014567:	31 ed                	xor    ebp,ebp
c0014569:	0f af c2             	imul   eax,edx
c001456c:	50                   	push   eax
c001456d:	e8 0d 52 ff ff       	call   c000977f <malloc>
c0014572:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014574:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014578:	89 3c 24             	mov    DWORD PTR [esp],edi
c001457b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001457f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014583:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014587:	0f af c2             	imul   eax,edx
c001458a:	99                   	cdq    
c001458b:	52                   	push   edx
c001458c:	50                   	push   eax
c001458d:	56                   	push   esi
c001458e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014591:	83 c4 20             	add    esp,0x20
c0014594:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001459c:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00145a0:	0f 86 80 00 00 00    	jbe    c0014626 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00145a6:	0f b7 fd             	movzx  edi,bp
c00145a9:	c1 e7 05             	shl    edi,0x5
c00145ac:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00145b0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00145b3:	75 6b                	jne    c0014620 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00145b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00145b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145bc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00145bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145c3:	52                   	push   edx
c00145c4:	31 d2                	xor    edx,edx
c00145c6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00145c9:	52                   	push   edx
c00145ca:	50                   	push   eax
c00145cb:	56                   	push   esi
c00145cc:	e8 f3 87 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c00145d1:	83 c4 10             	add    esp,0x10
c00145d4:	85 c0                	test   eax,eax
c00145d6:	74 17                	je     c00145ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00145d8:	83 ec 0c             	sub    esp,0xc
c00145db:	68 01 27 02 c0       	push   0xc0022701
c00145e0:	e8 dc 80 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00145e5:	83 c4 10             	add    esp,0x10
c00145e8:	31 c0                	xor    eax,eax
c00145ea:	e9 87 00 00 00       	jmp    c0014676 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00145ef:	83 ec 0c             	sub    esp,0xc
c00145f2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00145f5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00145f8:	50                   	push   eax
c00145f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014601:	56                   	push   esi
c0014602:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014606:	e8 b3 fb ff ff       	call   c00141be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001460b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001460f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014613:	83 c4 20             	add    esp,0x20
c0014616:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001461a:	73 04                	jae    c0014620 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001461c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014620:	45                   	inc    ebp
c0014621:	e9 76 ff ff ff       	jmp    c001459c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014626:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001462a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001462e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014632:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014638:	83 ec 0c             	sub    esp,0xc
c001463b:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014641:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014646:	05 00 10 00 00       	add    eax,0x1000
c001464b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001464e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014652:	e8 38 51 ff ff       	call   c000978f <free>
c0014657:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001465a:	e8 30 51 ff ff       	call   c000978f <free>
c001465f:	58                   	pop    eax
c0014660:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014664:	e8 26 51 ff ff       	call   c000978f <free>
c0014669:	89 34 24             	mov    DWORD PTR [esp],esi
c001466c:	e8 f3 86 ff ff       	call   c000cd64 <File::close()>
c0014671:	83 c4 10             	add    esp,0x10
c0014674:	b0 01                	mov    al,0x1
c0014676:	83 c4 3c             	add    esp,0x3c
c0014679:	5b                   	pop    ebx
c001467a:	5e                   	pop    esi
c001467b:	5f                   	pop    edi
c001467c:	5d                   	pop    ebp
c001467d:	c3                   	ret    

c001467e <Thr::runtimeReferenceHelper()>:
c001467e:	83 ec 18             	sub    esp,0x18
c0014681:	68 09 27 02 c0       	push   0xc0022709
c0014686:	e8 36 80 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001468b:	fa                   	cli    
c001468c:	83 c4 10             	add    esp,0x10
c001468f:	eb fe                	jmp    c001468f <Thr::runtimeReferenceHelper()+0x11>

c0014691 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014691:	57                   	push   edi
c0014692:	56                   	push   esi
c0014693:	53                   	push   ebx
c0014694:	31 db                	xor    ebx,ebx
c0014696:	39 1d 60 74 02 c0    	cmp    DWORD PTR ds:0xc0027460,ebx
c001469c:	7e 3c                	jle    c00146da <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001469e:	8b 34 9d e0 73 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8c20]
c00146a5:	31 ff                	xor    edi,edi
c00146a7:	39 3c 9d e0 72 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8d20],edi
c00146ae:	7e 27                	jle    c00146d7 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00146b0:	50                   	push   eax
c00146b1:	50                   	push   eax
c00146b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00146b8:	03 04 9d 60 73 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8ca0]
c00146bf:	50                   	push   eax
c00146c0:	e8 2b bf fe ff       	call   c00005f0 <strcmp>
c00146c5:	83 c4 10             	add    esp,0x10
c00146c8:	85 c0                	test   eax,eax
c00146ca:	75 05                	jne    c00146d1 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00146cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00146cf:	eb 0b                	jmp    c00146dc <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00146d1:	83 c6 10             	add    esi,0x10
c00146d4:	47                   	inc    edi
c00146d5:	eb d0                	jmp    c00146a7 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00146d7:	43                   	inc    ebx
c00146d8:	eb bc                	jmp    c0014696 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00146da:	31 c0                	xor    eax,eax
c00146dc:	5b                   	pop    ebx
c00146dd:	5e                   	pop    esi
c00146de:	5f                   	pop    edi
c00146df:	c3                   	ret    

c00146e0 <Thr::loadKernelSymbolTable(char const*)>:
c00146e0:	55                   	push   ebp
c00146e1:	57                   	push   edi
c00146e2:	56                   	push   esi
c00146e3:	53                   	push   ebx
c00146e4:	83 ec 68             	sub    esp,0x68
c00146e7:	8b 35 b0 74 02 c0    	mov    esi,DWORD PTR ds:0xc00274b0
c00146ed:	68 14 01 00 00       	push   0x114
c00146f2:	e8 88 50 ff ff       	call   c000977f <malloc>
c00146f7:	83 c4 0c             	add    esp,0xc
c00146fa:	89 c3                	mov    ebx,eax
c00146fc:	56                   	push   esi
c00146fd:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014701:	50                   	push   eax
c0014702:	e8 25 85 ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0014707:	5e                   	pop    esi
c0014708:	5f                   	pop    edi
c0014709:	6a 01                	push   0x1
c001470b:	53                   	push   ebx
c001470c:	e8 f5 85 ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	85 c0                	test   eax,eax
c0014716:	74 0a                	je     c0014722 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014718:	83 ec 0c             	sub    esp,0xc
c001471b:	68 2b 27 02 c0       	push   0xc002272b
c0014720:	eb 34                	jmp    c0014756 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014722:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001472a:	83 ec 0c             	sub    esp,0xc
c001472d:	6a 34                	push   0x34
c001472f:	e8 4b 50 ff ff       	call   c000977f <malloc>
c0014734:	59                   	pop    ecx
c0014735:	89 c7                	mov    edi,eax
c0014737:	8d 74 24 34          	lea    esi,[esp+0x34]
c001473b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001473d:	56                   	push   esi
c001473e:	57                   	push   edi
c001473f:	6a 00                	push   0x0
c0014741:	6a 34                	push   0x34
c0014743:	53                   	push   ebx
c0014744:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014747:	83 c4 20             	add    esp,0x20
c001474a:	85 c0                	test   eax,eax
c001474c:	74 17                	je     c0014765 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001474e:	83 ec 0c             	sub    esp,0xc
c0014751:	68 42 27 02 c0       	push   0xc0022742
c0014756:	e8 a8 de ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001475b:	83 c4 10             	add    esp,0x10
c001475e:	31 c0                	xor    eax,eax
c0014760:	e9 31 02 00 00       	jmp    c0014996 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014765:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001476b:	75 e1                	jne    c001474e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001476d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014770:	85 c0                	test   eax,eax
c0014772:	74 da                	je     c001474e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014774:	52                   	push   edx
c0014775:	31 d2                	xor    edx,edx
c0014777:	52                   	push   edx
c0014778:	50                   	push   eax
c0014779:	53                   	push   ebx
c001477a:	e8 45 86 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c001477f:	83 c4 10             	add    esp,0x10
c0014782:	85 c0                	test   eax,eax
c0014784:	75 c8                	jne    c001474e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014786:	83 ec 0c             	sub    esp,0xc
c0014789:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001478d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014791:	31 ed                	xor    ebp,ebp
c0014793:	0f af c2             	imul   eax,edx
c0014796:	50                   	push   eax
c0014797:	e8 e3 4f ff ff       	call   c000977f <malloc>
c001479c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001479e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147a2:	89 34 24             	mov    DWORD PTR [esp],esi
c00147a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147a9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00147ad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147b1:	0f af c2             	imul   eax,edx
c00147b4:	99                   	cdq    
c00147b5:	52                   	push   edx
c00147b6:	50                   	push   eax
c00147b7:	53                   	push   ebx
c00147b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147bb:	83 c4 20             	add    esp,0x20
c00147be:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00147c6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00147ce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00147d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147de:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00147e2:	0f 86 aa 00 00 00    	jbe    c0014892 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00147e8:	0f b7 f5             	movzx  esi,bp
c00147eb:	6b f6 28             	imul   esi,esi,0x28
c00147ee:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00147f2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00147f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147f9:	50                   	push   eax
c00147fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147fe:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014802:	8b 16                	mov    edx,DWORD PTR [esi]
c0014804:	6b c0 28             	imul   eax,eax,0x28
c0014807:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001480b:	89 d0                	mov    eax,edx
c001480d:	31 d2                	xor    edx,edx
c001480f:	52                   	push   edx
c0014810:	50                   	push   eax
c0014811:	53                   	push   ebx
c0014812:	e8 ad 85 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014817:	83 c4 0c             	add    esp,0xc
c001481a:	6a 20                	push   0x20
c001481c:	6a 00                	push   0x0
c001481e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014822:	52                   	push   edx
c0014823:	e8 80 bc fe ff       	call   c00004a8 <memset>
c0014828:	58                   	pop    eax
c0014829:	8b 03                	mov    eax,DWORD PTR [ebx]
c001482b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001482f:	51                   	push   ecx
c0014830:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014834:	52                   	push   edx
c0014835:	6a 00                	push   0x0
c0014837:	6a 1f                	push   0x1f
c0014839:	53                   	push   ebx
c001483a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001483d:	83 c4 18             	add    esp,0x18
c0014840:	68 59 27 02 c0       	push   0xc0022759
c0014845:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014849:	52                   	push   edx
c001484a:	e8 a1 bd fe ff       	call   c00005f0 <strcmp>
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	85 c0                	test   eax,eax
c0014854:	75 0f                	jne    c0014865 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014856:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014859:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001485d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014865:	50                   	push   eax
c0014866:	50                   	push   eax
c0014867:	68 61 27 02 c0       	push   0xc0022761
c001486c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014870:	50                   	push   eax
c0014871:	e8 7a bd fe ff       	call   c00005f0 <strcmp>
c0014876:	83 c4 10             	add    esp,0x10
c0014879:	85 c0                	test   eax,eax
c001487b:	75 0f                	jne    c001488c <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001487d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014880:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014884:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014888:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001488c:	45                   	inc    ebp
c001488d:	e9 4c ff ff ff       	jmp    c00147de <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014892:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014897:	75 10                	jne    c00148a9 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014899:	83 ec 0c             	sub    esp,0xc
c001489c:	68 69 27 02 c0       	push   0xc0022769
c00148a1:	e8 5d dd ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00148a6:	83 c4 10             	add    esp,0x10
c00148a9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00148ae:	75 10                	jne    c00148c0 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00148b0:	83 ec 0c             	sub    esp,0xc
c00148b3:	68 69 27 02 c0       	push   0xc0022769
c00148b8:	e8 46 dd ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00148bd:	83 c4 10             	add    esp,0x10
c00148c0:	31 d2                	xor    edx,edx
c00148c2:	50                   	push   eax
c00148c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c7:	52                   	push   edx
c00148c8:	50                   	push   eax
c00148c9:	53                   	push   ebx
c00148ca:	e8 f5 84 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c00148cf:	5a                   	pop    edx
c00148d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00148d4:	e8 a6 4e ff ff       	call   c000977f <malloc>
c00148d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00148dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148e1:	31 c9                	xor    ecx,ecx
c00148e3:	5e                   	pop    esi
c00148e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148e6:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00148ea:	55                   	push   ebp
c00148eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148ef:	51                   	push   ecx
c00148f0:	52                   	push   edx
c00148f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00148f5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00148f9:	53                   	push   ebx
c00148fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148fd:	83 c4 14             	add    esp,0x14
c0014900:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014904:	e8 76 4e ff ff       	call   c000977f <malloc>
c0014909:	89 c6                	mov    esi,eax
c001490b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001490d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014910:	56                   	push   esi
c0014911:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014915:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014919:	51                   	push   ecx
c001491a:	52                   	push   edx
c001491b:	53                   	push   ebx
c001491c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001491f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014923:	8b 15 60 74 02 c0    	mov    edx,DWORD PTR ds:0xc0027460
c0014929:	83 c4 1c             	add    esp,0x1c
c001492c:	c1 e8 04             	shr    eax,0x4
c001492f:	89 04 95 e0 72 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8d20],eax
c0014936:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001493a:	31 d2                	xor    edx,edx
c001493c:	52                   	push   edx
c001493d:	50                   	push   eax
c001493e:	53                   	push   ebx
c001493f:	e8 80 84 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014944:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014946:	31 d2                	xor    edx,edx
c0014948:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001494b:	56                   	push   esi
c001494c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014950:	52                   	push   edx
c0014951:	50                   	push   eax
c0014952:	53                   	push   ebx
c0014953:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014956:	83 c4 14             	add    esp,0x14
c0014959:	53                   	push   ebx
c001495a:	e8 05 84 ff ff       	call   c000cd64 <File::close()>
c001495f:	5d                   	pop    ebp
c0014960:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014964:	e8 26 4e ff ff       	call   c000978f <free>
c0014969:	89 3c 24             	mov    DWORD PTR [esp],edi
c001496c:	e8 1e 4e ff ff       	call   c000978f <free>
c0014971:	a1 60 74 02 c0       	mov    eax,ds:0xc0027460
c0014976:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001497a:	8d 50 01             	lea    edx,[eax+0x1]
c001497d:	89 0c 85 e0 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c20],ecx
c0014984:	89 34 85 60 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8ca0],esi
c001498b:	89 15 60 74 02 c0    	mov    DWORD PTR ds:0xc0027460,edx
c0014991:	83 c4 10             	add    esp,0x10
c0014994:	b0 01                	mov    al,0x1
c0014996:	83 c4 5c             	add    esp,0x5c
c0014999:	5b                   	pop    ebx
c001499a:	5e                   	pop    esi
c001499b:	5f                   	pop    edi
c001499c:	5d                   	pop    ebp
c001499d:	c3                   	ret    

c001499e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001499e:	55                   	push   ebp
c001499f:	57                   	push   edi
c00149a0:	56                   	push   esi
c00149a1:	53                   	push   ebx
c00149a2:	81 ec 68 03 00 00    	sub    esp,0x368
c00149a8:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00149af:	8b 1d b0 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274b0
c00149b5:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00149b9:	68 14 01 00 00       	push   0x114
c00149be:	e8 bc 4d ff ff       	call   c000977f <malloc>
c00149c3:	83 c4 0c             	add    esp,0xc
c00149c6:	89 c5                	mov    ebp,eax
c00149c8:	53                   	push   ebx
c00149c9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00149d0:	50                   	push   eax
c00149d1:	e8 56 82 ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c00149d6:	5e                   	pop    esi
c00149d7:	5f                   	pop    edi
c00149d8:	6a 01                	push   0x1
c00149da:	55                   	push   ebp
c00149db:	e8 26 83 ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c00149e0:	83 c4 10             	add    esp,0x10
c00149e3:	85 c0                	test   eax,eax
c00149e5:	0f 85 a7 06 00 00    	jne    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00149eb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00149f3:	83 ec 0c             	sub    esp,0xc
c00149f6:	6a 34                	push   0x34
c00149f8:	e8 82 4d ff ff       	call   c000977f <malloc>
c00149fd:	5b                   	pop    ebx
c00149fe:	89 c7                	mov    edi,eax
c0014a00:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014a04:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a07:	53                   	push   ebx
c0014a08:	57                   	push   edi
c0014a09:	6a 00                	push   0x0
c0014a0b:	6a 34                	push   0x34
c0014a0d:	55                   	push   ebp
c0014a0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a11:	83 c4 20             	add    esp,0x20
c0014a14:	85 c0                	test   eax,eax
c0014a16:	0f 85 76 06 00 00    	jne    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014a1c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014a22:	0f 85 6a 06 00 00    	jne    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014a28:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014a2b:	85 c0                	test   eax,eax
c0014a2d:	0f 84 5f 06 00 00    	je     c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014a33:	31 d2                	xor    edx,edx
c0014a35:	51                   	push   ecx
c0014a36:	52                   	push   edx
c0014a37:	50                   	push   eax
c0014a38:	55                   	push   ebp
c0014a39:	e8 86 83 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014a3e:	83 c4 10             	add    esp,0x10
c0014a41:	85 c0                	test   eax,eax
c0014a43:	0f 85 49 06 00 00    	jne    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014a49:	83 ec 0c             	sub    esp,0xc
c0014a4c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014a4f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014a53:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014a57:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014a5b:	0f af c2             	imul   eax,edx
c0014a5e:	50                   	push   eax
c0014a5f:	e8 1b 4d ff ff       	call   c000977f <malloc>
c0014a64:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a72:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014a76:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014a7a:	0f af c2             	imul   eax,edx
c0014a7d:	99                   	cdq    
c0014a7e:	52                   	push   edx
c0014a7f:	50                   	push   eax
c0014a80:	55                   	push   ebp
c0014a81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a84:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014a87:	83 c4 20             	add    esp,0x20
c0014a8a:	85 c0                	test   eax,eax
c0014a8c:	0f 84 00 06 00 00    	je     c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014a92:	52                   	push   edx
c0014a93:	31 d2                	xor    edx,edx
c0014a95:	52                   	push   edx
c0014a96:	50                   	push   eax
c0014a97:	55                   	push   ebp
c0014a98:	e8 27 83 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	85 c0                	test   eax,eax
c0014aa2:	0f 85 ea 05 00 00    	jne    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014aa8:	83 ec 0c             	sub    esp,0xc
c0014aab:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014aaf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014ab3:	31 f6                	xor    esi,esi
c0014ab5:	0f af c2             	imul   eax,edx
c0014ab8:	50                   	push   eax
c0014ab9:	e8 c1 4c ff ff       	call   c000977f <malloc>
c0014abe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ac1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014ac5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ac8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014acc:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014ad0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014ad4:	0f af c2             	imul   eax,edx
c0014ad7:	99                   	cdq    
c0014ad8:	52                   	push   edx
c0014ad9:	50                   	push   eax
c0014ada:	55                   	push   ebp
c0014adb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ade:	83 c4 20             	add    esp,0x20
c0014ae1:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0014ae5:	0f 86 8a 00 00 00    	jbe    c0014b75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014aeb:	0f b7 de             	movzx  ebx,si
c0014aee:	c1 e3 05             	shl    ebx,0x5
c0014af1:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014af5:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014af8:	75 75                	jne    c0014b6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014afa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014afd:	31 d2                	xor    edx,edx
c0014aff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b0a:	50                   	push   eax
c0014b0b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014b0e:	52                   	push   edx
c0014b0f:	50                   	push   eax
c0014b10:	55                   	push   ebp
c0014b11:	e8 ae 82 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014b16:	83 c4 10             	add    esp,0x10
c0014b19:	85 c0                	test   eax,eax
c0014b1b:	0f 85 71 05 00 00    	jne    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014b21:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014b28:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b2b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014b2f:	31 d2                	xor    edx,edx
c0014b31:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b3c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b43:	50                   	push   eax
c0014b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b4c:	52                   	push   edx
c0014b4d:	50                   	push   eax
c0014b4e:	55                   	push   ebp
c0014b4f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b52:	83 c4 1c             	add    esp,0x1c
c0014b55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014b58:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014b5b:	50                   	push   eax
c0014b5c:	6a 00                	push   0x0
c0014b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b62:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014b66:	50                   	push   eax
c0014b67:	e8 3c b9 fe ff       	call   c00004a8 <memset>
c0014b6c:	83 c4 10             	add    esp,0x10
c0014b6f:	46                   	inc    esi
c0014b70:	e9 6c ff ff ff       	jmp    c0014ae1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014b75:	53                   	push   ebx
c0014b76:	31 db                	xor    ebx,ebx
c0014b78:	68 00 01 00 00       	push   0x100
c0014b7d:	6a 00                	push   0x0
c0014b7f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014b83:	50                   	push   eax
c0014b84:	e8 1f b9 fe ff       	call   c00004a8 <memset>
c0014b89:	83 c4 0c             	add    esp,0xc
c0014b8c:	68 00 01 00 00       	push   0x100
c0014b91:	6a 00                	push   0x0
c0014b93:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014b9a:	50                   	push   eax
c0014b9b:	e8 08 b9 fe ff       	call   c00004a8 <memset>
c0014ba0:	83 c4 10             	add    esp,0x10
c0014ba3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014bab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014bb3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0014bbb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014bc3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014bcb:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0014bcf:	0f 86 30 01 00 00    	jbe    c0014d05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014bd5:	0f b7 f3             	movzx  esi,bx
c0014bd8:	6b f6 28             	imul   esi,esi,0x28
c0014bdb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014bdf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014be2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014be6:	52                   	push   edx
c0014be7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014beb:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014bef:	8b 06                	mov    eax,DWORD PTR [esi]
c0014bf1:	6b d2 28             	imul   edx,edx,0x28
c0014bf4:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014bf8:	31 d2                	xor    edx,edx
c0014bfa:	52                   	push   edx
c0014bfb:	50                   	push   eax
c0014bfc:	55                   	push   ebp
c0014bfd:	e8 c2 81 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014c02:	83 c4 0c             	add    esp,0xc
c0014c05:	6a 20                	push   0x20
c0014c07:	6a 00                	push   0x0
c0014c09:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c10:	51                   	push   ecx
c0014c11:	e8 92 b8 fe ff       	call   c00004a8 <memset>
c0014c16:	59                   	pop    ecx
c0014c17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c1a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014c1e:	52                   	push   edx
c0014c1f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014c26:	51                   	push   ecx
c0014c27:	6a 00                	push   0x0
c0014c29:	6a 1f                	push   0x1f
c0014c2b:	55                   	push   ebp
c0014c2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c2f:	83 c4 1c             	add    esp,0x1c
c0014c32:	6a 09                	push   0x9
c0014c34:	68 83 27 02 c0       	push   0xc0022783
c0014c39:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c40:	51                   	push   ecx
c0014c41:	e8 5e b7 fe ff       	call   c00003a4 <memcmp>
c0014c46:	83 c4 10             	add    esp,0x10
c0014c49:	85 c0                	test   eax,eax
c0014c4b:	75 21                	jne    c0014c6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014c4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c55:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014c59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014c5d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c60:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014c67:	89 d0                	mov    eax,edx
c0014c69:	40                   	inc    eax
c0014c6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c6e:	50                   	push   eax
c0014c6f:	6a 09                	push   0x9
c0014c71:	68 8d 27 02 c0       	push   0xc002278d
c0014c76:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c7d:	50                   	push   eax
c0014c7e:	e8 21 b7 fe ff       	call   c00003a4 <memcmp>
c0014c83:	83 c4 10             	add    esp,0x10
c0014c86:	85 c0                	test   eax,eax
c0014c88:	75 21                	jne    c0014cab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c92:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014c96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014c9a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c9d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014ca4:	89 d0                	mov    eax,edx
c0014ca6:	40                   	inc    eax
c0014ca7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cab:	50                   	push   eax
c0014cac:	50                   	push   eax
c0014cad:	68 59 27 02 c0       	push   0xc0022759
c0014cb2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cb9:	50                   	push   eax
c0014cba:	e8 31 b9 fe ff       	call   c00005f0 <strcmp>
c0014cbf:	83 c4 10             	add    esp,0x10
c0014cc2:	85 c0                	test   eax,eax
c0014cc4:	75 0f                	jne    c0014cd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014cc6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ccd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014cd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cd5:	50                   	push   eax
c0014cd6:	50                   	push   eax
c0014cd7:	68 61 27 02 c0       	push   0xc0022761
c0014cdc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ce3:	50                   	push   eax
c0014ce4:	e8 07 b9 fe ff       	call   c00005f0 <strcmp>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	85 c0                	test   eax,eax
c0014cee:	75 0f                	jne    c0014cff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014cf0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cf3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014cf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014cfb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014cff:	43                   	inc    ebx
c0014d00:	e9 c6 fe ff ff       	jmp    c0014bcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014d05:	31 d2                	xor    edx,edx
c0014d07:	50                   	push   eax
c0014d08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d0c:	52                   	push   edx
c0014d0d:	50                   	push   eax
c0014d0e:	55                   	push   ebp
c0014d0f:	e8 b0 80 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014d14:	58                   	pop    eax
c0014d15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d19:	e8 61 4a ff ff       	call   c000977f <malloc>
c0014d1e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d21:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014d25:	31 d2                	xor    edx,edx
c0014d27:	58                   	pop    eax
c0014d28:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014d2c:	53                   	push   ebx
c0014d2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014d31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d35:	52                   	push   edx
c0014d36:	50                   	push   eax
c0014d37:	55                   	push   ebp
c0014d38:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d3b:	83 c4 14             	add    esp,0x14
c0014d3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d42:	e8 38 4a ff ff       	call   c000977f <malloc>
c0014d47:	31 d2                	xor    edx,edx
c0014d49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d4d:	83 c4 0c             	add    esp,0xc
c0014d50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d54:	52                   	push   edx
c0014d55:	50                   	push   eax
c0014d56:	55                   	push   ebp
c0014d57:	e8 68 80 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014d5c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d5f:	31 d2                	xor    edx,edx
c0014d61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014d68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014d6c:	52                   	push   edx
c0014d6d:	50                   	push   eax
c0014d6e:	55                   	push   ebp
c0014d6f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d72:	83 c4 20             	add    esp,0x20
c0014d75:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d7d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014d81:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014d85:	0f 84 0b 03 00 00    	je     c0015096 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0014d8b:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014d92:	31 d2                	xor    edx,edx
c0014d94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d98:	c1 e8 03             	shr    eax,0x3
c0014d9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014d9f:	51                   	push   ecx
c0014da0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014da4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014da8:	52                   	push   edx
c0014da9:	50                   	push   eax
c0014daa:	55                   	push   ebp
c0014dab:	e8 14 80 ff ff       	call   c000cdc4 <File::seek(unsigned long long)>
c0014db0:	5b                   	pop    ebx
c0014db1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014dbc:	e8 be 49 ff ff       	call   c000977f <malloc>
c0014dc1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014dc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014dc8:	31 d2                	xor    edx,edx
c0014dca:	5e                   	pop    esi
c0014dcb:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014dcf:	50                   	push   eax
c0014dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dd8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014ddf:	52                   	push   edx
c0014de0:	50                   	push   eax
c0014de1:	55                   	push   ebp
c0014de2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014de5:	83 c4 20             	add    esp,0x20
c0014de8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014df0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014df4:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0014df8:	0f 8d 7c 02 00 00    	jge    c001507a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0014dfe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014e02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e06:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0014e0b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0014e0e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e16:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0014e1a:	89 d8                	mov    eax,ebx
c0014e1c:	c1 e8 08             	shr    eax,0x8
c0014e1f:	89 c6                	mov    esi,eax
c0014e21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014e25:	c1 e6 04             	shl    esi,0x4
c0014e28:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014e2c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0014e2f:	85 d2                	test   edx,edx
c0014e31:	0f 85 bf 00 00 00    	jne    c0014ef6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0014e37:	83 ec 0c             	sub    esp,0xc
c0014e3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e3e:	03 06                	add    eax,DWORD PTR [esi]
c0014e40:	50                   	push   eax
c0014e41:	e8 4b f8 ff ff       	call   c0014691 <Thr::getAddressOfKernelSymbol(char const*)>
c0014e46:	83 c4 10             	add    esp,0x10
c0014e49:	89 c2                	mov    edx,eax
c0014e4b:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0014e50:	85 c0                	test   eax,eax
c0014e52:	0f 85 9e 00 00 00    	jne    c0014ef6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0014e58:	83 ec 0c             	sub    esp,0xc
c0014e5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e5f:	03 06                	add    eax,DWORD PTR [esi]
c0014e61:	50                   	push   eax
c0014e62:	e8 cd 38 ff ff       	call   c0008734 <Krnl::resolveCompatibilitySymbol(char*)>
c0014e67:	83 c4 10             	add    esp,0x10
c0014e6a:	89 c2                	mov    edx,eax
c0014e6c:	85 c0                	test   eax,eax
c0014e6e:	0f 85 82 00 00 00    	jne    c0014ef6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0014e74:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014e78:	50                   	push   eax
c0014e79:	50                   	push   eax
c0014e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e7e:	03 06                	add    eax,DWORD PTR [esi]
c0014e80:	50                   	push   eax
c0014e81:	68 97 27 02 c0       	push   0xc0022797
c0014e86:	e8 36 78 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0014e8b:	58                   	pop    eax
c0014e8c:	5a                   	pop    edx
c0014e8d:	68 b1 27 02 c0       	push   0xc00227b1
c0014e92:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e99:	50                   	push   eax
c0014e9a:	e8 c5 b6 fe ff       	call   c0000564 <strcpy>
c0014e9f:	59                   	pop    ecx
c0014ea0:	58                   	pop    eax
c0014ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ea5:	03 06                	add    eax,DWORD PTR [esi]
c0014ea7:	50                   	push   eax
c0014ea8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014eaf:	50                   	push   eax
c0014eb0:	e8 ef b7 fe ff       	call   c00006a4 <strcat>
c0014eb5:	58                   	pop    eax
c0014eb6:	5a                   	pop    edx
c0014eb7:	68 47 28 02 c0       	push   0xc0022847
c0014ebc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ec3:	50                   	push   eax
c0014ec4:	e8 db b7 fe ff       	call   c00006a4 <strcat>
c0014ec9:	83 c4 10             	add    esp,0x10
c0014ecc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0014ed1:	0f 84 5d 01 00 00    	je     c0015034 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0014ed7:	83 ec 0c             	sub    esp,0xc
c0014eda:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ee1:	50                   	push   eax
c0014ee2:	e8 1c d7 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0014ee7:	83 c4 10             	add    esp,0x10
c0014eea:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0014eee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014ef2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0014ef6:	80 fb 01             	cmp    bl,0x1
c0014ef9:	0f 85 88 00 00 00    	jne    c0014f87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0014eff:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014f06:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014f0a:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0014f0e:	01 ce                	add    esi,ecx
c0014f10:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0014f16:	0f 94 c0             	sete   al
c0014f19:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0014f1f:	0f 94 c3             	sete   bl
c0014f22:	09 c3                	or     ebx,eax
c0014f24:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f26:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0014f2b:	74 41                	je     c0014f6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0014f2d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0014f30:	84 db                	test   bl,bl
c0014f32:	75 15                	jne    c0014f49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0014f34:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f38:	66 83 f8 0c          	cmp    ax,0xc
c0014f3c:	76 05                	jbe    c0014f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0014f3e:	b8 0c 00 00 00       	mov    eax,0xc
c0014f43:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014f47:	76 37                	jbe    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0014f49:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0014f4d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0014f52:	0f 84 dc 00 00 00    	je     c0015034 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	68 c8 27 02 c0       	push   0xc00227c8
c0014f60:	e8 9e d6 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0014f65:	83 c4 10             	add    esp,0x10
c0014f68:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014f6c:	eb 12                	jmp    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0014f6e:	01 c1                	add    ecx,eax
c0014f70:	84 db                	test   bl,bl
c0014f72:	75 0c                	jne    c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0014f74:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f78:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014f7c:	77 02                	ja     c0014f80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0014f7e:	01 d1                	add    ecx,edx
c0014f80:	89 0e                	mov    DWORD PTR [esi],ecx
c0014f82:	e9 ea 00 00 00       	jmp    c0015071 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0014f87:	80 fb 02             	cmp    bl,0x2
c0014f8a:	75 7c                	jne    c0015008 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014f8c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014f93:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0014f97:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0014f9b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0014fa1:	74 20                	je     c0014fc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0014fa3:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0014fa9:	74 18                	je     c0014fc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0014fab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014faf:	b9 0a 00 00 00       	mov    ecx,0xa
c0014fb4:	66 83 f8 0e          	cmp    ax,0xe
c0014fb8:	77 03                	ja     c0014fbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0014fba:	8d 48 fc             	lea    ecx,[eax-0x4]
c0014fbd:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0014fc1:	76 1f                	jbe    c0014fe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0014fc3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0014fc7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0014fcc:	74 66                	je     c0015034 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0014fce:	83 ec 0c             	sub    esp,0xc
c0014fd1:	68 e4 27 02 c0       	push   0xc00227e4
c0014fd6:	e8 28 d6 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0014fdb:	83 c4 10             	add    esp,0x10
c0014fde:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014fe2:	8b 06                	mov    eax,DWORD PTR [esi]
c0014fe4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0014fe9:	74 13                	je     c0014ffe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0014feb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0014fef:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014ff6:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0014ffa:	01 c8                	add    eax,ecx
c0014ffc:	eb 04                	jmp    c0015002 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0014ffe:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015002:	01 c2                	add    edx,eax
c0015004:	89 16                	mov    DWORD PTR [esi],edx
c0015006:	eb 69                	jmp    c0015071 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015008:	0f b6 db             	movzx  ebx,bl
c001500b:	50                   	push   eax
c001500c:	50                   	push   eax
c001500d:	53                   	push   ebx
c001500e:	68 00 28 02 c0       	push   0xc0022800
c0015013:	e8 a9 76 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0015018:	83 c4 10             	add    esp,0x10
c001501b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015020:	74 12                	je     c0015034 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015022:	83 ec 0c             	sub    esp,0xc
c0015025:	68 0b 28 02 c0       	push   0xc002280b
c001502a:	e8 d4 d5 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001502f:	83 c4 10             	add    esp,0x10
c0015032:	eb 3d                	jmp    c0015071 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015034:	83 ec 0c             	sub    esp,0xc
c0015037:	55                   	push   ebp
c0015038:	e8 27 7d ff ff       	call   c000cd64 <File::close()>
c001503d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015040:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015043:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015046:	59                   	pop    ecx
c0015047:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001504b:	e8 3f 47 ff ff       	call   c000978f <free>
c0015050:	5b                   	pop    ebx
c0015051:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015055:	e8 35 47 ff ff       	call   c000978f <free>
c001505a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001505d:	e8 2d 47 ff ff       	call   c000978f <free>
c0015062:	5e                   	pop    esi
c0015063:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015067:	e8 23 47 ff ff       	call   c000978f <free>
c001506c:	83 c4 10             	add    esp,0x10
c001506f:	eb 21                	jmp    c0015092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015071:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015075:	e9 76 fd ff ff       	jmp    c0014df0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001507a:	83 ec 0c             	sub    esp,0xc
c001507d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015081:	e8 09 47 ff ff       	call   c000978f <free>
c0015086:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001508a:	83 c4 10             	add    esp,0x10
c001508d:	e9 eb fc ff ff       	jmp    c0014d7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0015092:	31 c0                	xor    eax,eax
c0015094:	eb 33                	jmp    c00150c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0015096:	83 ec 0c             	sub    esp,0xc
c0015099:	55                   	push   ebp
c001509a:	e8 c5 7c ff ff       	call   c000cd64 <File::close()>
c001509f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00150a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150a8:	58                   	pop    eax
c00150a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150ad:	e8 dd 46 ff ff       	call   c000978f <free>
c00150b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00150b5:	e8 d5 46 ff ff       	call   c000978f <free>
c00150ba:	5a                   	pop    edx
c00150bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150bf:	e8 cb 46 ff ff       	call   c000978f <free>
c00150c4:	83 c4 10             	add    esp,0x10
c00150c7:	b0 01                	mov    al,0x1
c00150c9:	81 c4 5c 03 00 00    	add    esp,0x35c
c00150cf:	5b                   	pop    ebx
c00150d0:	5e                   	pop    esi
c00150d1:	5f                   	pop    edi
c00150d2:	5d                   	pop    ebp
c00150d3:	c3                   	ret    

c00150d4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00150d4:	56                   	push   esi
c00150d5:	31 d2                	xor    edx,edx
c00150d7:	53                   	push   ebx
c00150d8:	8b 1d c0 6c 02 c0    	mov    ebx,DWORD PTR ds:0xc0026cc0
c00150de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150e2:	39 d3                	cmp    ebx,edx
c00150e4:	7e 1b                	jle    c0015101 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00150e6:	8b 04 95 e0 6e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9120]
c00150ed:	39 c8                	cmp    eax,ecx
c00150ef:	77 0d                	ja     c00150fe <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00150f1:	8b 34 95 e0 6c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9320]
c00150f8:	01 c6                	add    esi,eax
c00150fa:	39 ce                	cmp    esi,ecx
c00150fc:	77 05                	ja     c0015103 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00150fe:	42                   	inc    edx
c00150ff:	eb e1                	jmp    c00150e2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015101:	31 c0                	xor    eax,eax
c0015103:	5b                   	pop    ebx
c0015104:	5e                   	pop    esi
c0015105:	c3                   	ret    

c0015106 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015106:	53                   	push   ebx
c0015107:	31 c0                	xor    eax,eax
c0015109:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001510d:	8b 1d c0 6c 02 c0    	mov    ebx,DWORD PTR ds:0xc0026cc0
c0015113:	39 c3                	cmp    ebx,eax
c0015115:	7e 22                	jle    c0015139 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015117:	8b 14 85 e0 6e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9120]
c001511e:	39 ca                	cmp    edx,ecx
c0015120:	77 14                	ja     c0015136 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015122:	03 14 85 e0 6c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9320]
c0015129:	39 ca                	cmp    edx,ecx
c001512b:	76 09                	jbe    c0015136 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001512d:	8b 04 85 e0 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f20]
c0015134:	eb 05                	jmp    c001513b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015136:	40                   	inc    eax
c0015137:	eb da                	jmp    c0015113 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015139:	31 c0                	xor    eax,eax
c001513b:	5b                   	pop    ebx
c001513c:	c3                   	ret    

c001513d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001513d:	53                   	push   ebx
c001513e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015142:	53                   	push   ebx
c0015143:	e8 8c ff ff ff       	call   c00150d4 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015148:	5a                   	pop    edx
c0015149:	31 d2                	xor    edx,edx
c001514b:	85 c0                	test   eax,eax
c001514d:	74 04                	je     c0015153 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001514f:	89 da                	mov    edx,ebx
c0015151:	29 c2                	sub    edx,eax
c0015153:	89 d0                	mov    eax,edx
c0015155:	5b                   	pop    ebx
c0015156:	c3                   	ret    

c0015157 <Thr::loadDLL(char const*, bool)>:
c0015157:	55                   	push   ebp
c0015158:	57                   	push   edi
c0015159:	56                   	push   esi
c001515a:	53                   	push   ebx
c001515b:	81 ec 34 01 00 00    	sub    esp,0x134
c0015161:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015168:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001516f:	56                   	push   esi
c0015170:	68 23 28 02 c0       	push   0xc0022823
c0015175:	e8 47 75 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001517a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015181:	e8 f9 45 ff ff       	call   c000977f <malloc>
c0015186:	83 c4 0c             	add    esp,0xc
c0015189:	89 c3                	mov    ebx,eax
c001518b:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c0015191:	56                   	push   esi
c0015192:	50                   	push   eax
c0015193:	e8 94 7a ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0015198:	83 c4 10             	add    esp,0x10
c001519b:	85 db                	test   ebx,ebx
c001519d:	75 3c                	jne    c00151db <Thr::loadDLL(char const*, bool)+0x84>
c001519f:	89 f8                	mov    eax,edi
c00151a1:	84 c0                	test   al,al
c00151a3:	0f 84 d2 01 00 00    	je     c001537b <Thr::loadDLL(char const*, bool)+0x224>
c00151a9:	55                   	push   ebp
c00151aa:	55                   	push   ebp
c00151ab:	68 34 28 02 c0       	push   0xc0022834
c00151b0:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00151b4:	55                   	push   ebp
c00151b5:	e8 aa b3 fe ff       	call   c0000564 <strcpy>
c00151ba:	58                   	pop    eax
c00151bb:	5a                   	pop    edx
c00151bc:	56                   	push   esi
c00151bd:	55                   	push   ebp
c00151be:	e8 e1 b4 fe ff       	call   c00006a4 <strcat>
c00151c3:	59                   	pop    ecx
c00151c4:	58                   	pop    eax
c00151c5:	68 47 28 02 c0       	push   0xc0022847
c00151ca:	55                   	push   ebp
c00151cb:	e8 d4 b4 fe ff       	call   c00006a4 <strcat>
c00151d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00151d3:	e8 2b d4 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00151d8:	83 c4 10             	add    esp,0x10
c00151db:	51                   	push   ecx
c00151dc:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00151e0:	50                   	push   eax
c00151e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00151e5:	50                   	push   eax
c00151e6:	53                   	push   ebx
c00151e7:	e8 c6 7d ff ff       	call   c000cfb2 <File::stat(unsigned long long*, bool*)>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	85 db                	test   ebx,ebx
c00151f1:	74 0c                	je     c00151ff <Thr::loadDLL(char const*, bool)+0xa8>
c00151f3:	83 ec 0c             	sub    esp,0xc
c00151f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151f8:	53                   	push   ebx
c00151f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015204:	75 0a                	jne    c0015210 <Thr::loadDLL(char const*, bool)+0xb9>
c0015206:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001520a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001520e:	75 3c                	jne    c001524c <Thr::loadDLL(char const*, bool)+0xf5>
c0015210:	89 f8                	mov    eax,edi
c0015212:	84 c0                	test   al,al
c0015214:	0f 84 49 01 00 00    	je     c0015363 <Thr::loadDLL(char const*, bool)+0x20c>
c001521a:	51                   	push   ecx
c001521b:	51                   	push   ecx
c001521c:	68 34 28 02 c0       	push   0xc0022834
c0015221:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015225:	53                   	push   ebx
c0015226:	e8 39 b3 fe ff       	call   c0000564 <strcpy>
c001522b:	5d                   	pop    ebp
c001522c:	58                   	pop    eax
c001522d:	56                   	push   esi
c001522e:	53                   	push   ebx
c001522f:	e8 70 b4 fe ff       	call   c00006a4 <strcat>
c0015234:	58                   	pop    eax
c0015235:	5a                   	pop    edx
c0015236:	68 47 28 02 c0       	push   0xc0022847
c001523b:	53                   	push   ebx
c001523c:	e8 63 b4 fe ff       	call   c00006a4 <strcat>
c0015241:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015244:	e8 ba d3 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0015249:	83 c4 10             	add    esp,0x10
c001524c:	52                   	push   edx
c001524d:	6a 03                	push   0x3
c001524f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015253:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015257:	05 ff 0f 00 00       	add    eax,0xfff
c001525c:	83 d2 00             	adc    edx,0x0
c001525f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015263:	50                   	push   eax
c0015264:	ff 35 94 40 02 c0    	push   DWORD PTR ds:0xc0024094
c001526a:	e8 65 68 ff ff       	call   c000bad4 <VAS::allocatePages(int, int)>
c001526f:	59                   	pop    ecx
c0015270:	89 c3                	mov    ebx,eax
c0015272:	5d                   	pop    ebp
c0015273:	50                   	push   eax
c0015274:	68 3a 11 02 c0       	push   0xc002113a
c0015279:	e8 43 74 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001527e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015281:	e8 3e b2 fe ff       	call   c00004c4 <strlen>
c0015286:	8b 2d c0 6c 02 c0    	mov    ebp,DWORD PTR ds:0xc0026cc0
c001528c:	40                   	inc    eax
c001528d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015290:	e8 ea 44 ff ff       	call   c000977f <malloc>
c0015295:	89 04 ad e0 70 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8f20],eax
c001529c:	58                   	pop    eax
c001529d:	a1 c0 6c 02 c0       	mov    eax,ds:0xc0026cc0
c00152a2:	5a                   	pop    edx
c00152a3:	56                   	push   esi
c00152a4:	ff 34 85 e0 70 02 c0 	push   DWORD PTR [eax*4-0x3ffd8f20]
c00152ab:	e8 b4 b2 fe ff       	call   c0000564 <strcpy>
c00152b0:	a1 c0 6c 02 c0       	mov    eax,ds:0xc0026cc0
c00152b5:	8d 50 01             	lea    edx,[eax+0x1]
c00152b8:	89 1c 85 e0 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9120],ebx
c00152bf:	89 15 c0 6c 02 c0    	mov    DWORD PTR ds:0xc0026cc0,edx
c00152c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00152c9:	83 c4 0c             	add    esp,0xc
c00152cc:	89 14 85 e0 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9320],edx
c00152d3:	6a 01                	push   0x1
c00152d5:	53                   	push   ebx
c00152d6:	56                   	push   esi
c00152d7:	e8 c2 f6 ff ff       	call   c001499e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00152dc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00152e0:	83 c4 10             	add    esp,0x10
c00152e3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152e8:	0f 85 89 00 00 00    	jne    c0015377 <Thr::loadDLL(char const*, bool)+0x220>
c00152ee:	89 f8                	mov    eax,edi
c00152f0:	84 c0                	test   al,al
c00152f2:	74 73                	je     c0015367 <Thr::loadDLL(char const*, bool)+0x210>
c00152f4:	83 ec 0c             	sub    esp,0xc
c00152f7:	68 49 28 02 c0       	push   0xc0022849
c00152fc:	e8 02 d3 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	eb 61                	jmp    c0015367 <Thr::loadDLL(char const*, bool)+0x210>
c0015306:	50                   	push   eax
c0015307:	50                   	push   eax
c0015308:	89 e8                	mov    eax,ebp
c001530a:	c1 e0 0c             	shl    eax,0xc
c001530d:	01 d8                	add    eax,ebx
c001530f:	50                   	push   eax
c0015310:	ff 35 94 40 02 c0    	push   DWORD PTR ds:0xc0024094
c0015316:	e8 1f 63 ff ff       	call   c000b63a <VAS::getPageTableEntry(unsigned long)>
c001531b:	83 c4 10             	add    esp,0x10
c001531e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015320:	a8 60                	test   al,0x60
c0015322:	75 11                	jne    c0015335 <Thr::loadDLL(char const*, bool)+0x1de>
c0015324:	83 ec 0c             	sub    esp,0xc
c0015327:	25 00 f0 ff ff       	and    eax,0xfffff000
c001532c:	50                   	push   eax
c001532d:	e8 fd 47 ff ff       	call   c0009b2f <Phys::freePage(unsigned long)>
c0015332:	83 c4 10             	add    esp,0x10
c0015335:	45                   	inc    ebp
c0015336:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001533a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001533e:	05 ff 0f 00 00       	add    eax,0xfff
c0015343:	bf 00 00 00 00       	mov    edi,0x0
c0015348:	83 d2 00             	adc    edx,0x0
c001534b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001534f:	c1 ea 0c             	shr    edx,0xc
c0015352:	39 c5                	cmp    ebp,eax
c0015354:	89 d1                	mov    ecx,edx
c0015356:	89 f8                	mov    eax,edi
c0015358:	19 c8                	sbb    eax,ecx
c001535a:	72 aa                	jb     c0015306 <Thr::loadDLL(char const*, bool)+0x1af>
c001535c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015361:	75 18                	jne    c001537b <Thr::loadDLL(char const*, bool)+0x224>
c0015363:	31 db                	xor    ebx,ebx
c0015365:	eb 14                	jmp    c001537b <Thr::loadDLL(char const*, bool)+0x224>
c0015367:	83 ec 0c             	sub    esp,0xc
c001536a:	68 68 28 02 c0       	push   0xc0022868
c001536f:	e8 8f d2 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	31 ed                	xor    ebp,ebp
c0015379:	eb bb                	jmp    c0015336 <Thr::loadDLL(char const*, bool)+0x1df>
c001537b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015381:	89 d8                	mov    eax,ebx
c0015383:	5b                   	pop    ebx
c0015384:	5e                   	pop    esi
c0015385:	5f                   	pop    edi
c0015386:	5d                   	pop    ebp
c0015387:	c3                   	ret    

c0015388 <Thr::executeDLL(unsigned long, void*)>:
c0015388:	56                   	push   esi
c0015389:	53                   	push   ebx
c001538a:	52                   	push   edx
c001538b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001538f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015393:	85 db                	test   ebx,ebx
c0015395:	75 10                	jne    c00153a7 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015397:	83 ec 0c             	sub    esp,0xc
c001539a:	68 84 28 02 c0       	push   0xc0022884
c001539f:	e8 5f d2 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00153a4:	83 c4 10             	add    esp,0x10
c00153a7:	50                   	push   eax
c00153a8:	50                   	push   eax
c00153a9:	53                   	push   ebx
c00153aa:	68 ae 28 02 c0       	push   0xc00228ae
c00153af:	e8 0d 73 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00153b4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00153b8:	89 d8                	mov    eax,ebx
c00153ba:	83 c4 14             	add    esp,0x14
c00153bd:	5b                   	pop    ebx
c00153be:	5e                   	pop    esi
c00153bf:	ff e0                	jmp    eax
c00153c1:	66 90                	xchg   ax,ax
c00153c3:	90                   	nop

c00153c4 <userModeEntryPoint(void*)>:
c00153c4:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00153c9:	48                   	dec    eax
c00153ca:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00153cf:	75 03                	jne    c00153d4 <userModeEntryPoint(void*)+0x10>
c00153d1:	fb                   	sti    
c00153d2:	66 90                	xchg   ax,ax
c00153d4:	fb                   	sti    
c00153d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153dd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00153e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153e7:	e9 73 ae fe ff       	jmp    c000025f <goToUsermode>

c00153ec <changeTSS>:
c00153ec:	83 ec 14             	sub    esp,0x14
c00153ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153f4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153f7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00153fc:	c1 e2 15             	shl    edx,0x15
c00153ff:	29 d0                	sub    eax,edx
c0015401:	50                   	push   eax
c0015402:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0015407:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001540d:	05 7c 11 00 00       	add    eax,0x117c
c0015412:	50                   	push   eax
c0015413:	e8 a0 58 ff ff       	call   c000acb8 <TSS::setESP(unsigned long)>
c0015418:	83 c4 1c             	add    esp,0x1c
c001541b:	c3                   	ret    

c001541c <switchToThread(ThreadControlBlock*)>:
c001541c:	57                   	push   edi
c001541d:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c0015422:	56                   	push   esi
c0015423:	85 c0                	test   eax,eax
c0015425:	53                   	push   ebx
c0015426:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001542a:	0f 85 88 00 00 00    	jne    c00154b8 <switchToThread(ThreadControlBlock*)+0x9c>
c0015430:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c0015433:	3c ff                	cmp    al,0xff
c0015435:	74 7d                	je     c00154b4 <switchToThread(ThreadControlBlock*)+0x98>
c0015437:	0f b6 d0             	movzx  edx,al
c001543a:	b8 00 04 00 00       	mov    eax,0x400
c001543f:	29 d0                	sub    eax,edx
c0015441:	d1 f8                	sar    eax,1
c0015443:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0015446:	66 90                	xchg   ax,ax
c0015448:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001544b:	ff 15 78 75 02 c0    	call   DWORD PTR ds:0xc0027578
c0015451:	a3 c8 74 02 c0       	mov    ds:0xc00274c8,eax
c0015456:	89 15 cc 74 02 c0    	mov    DWORD PTR ds:0xc00274cc,edx
c001545c:	89 c6                	mov    esi,eax
c001545e:	89 d7                	mov    edi,edx
c0015460:	2b 35 b8 74 02 c0    	sub    esi,DWORD PTR ds:0xc00274b8
c0015466:	a3 b8 74 02 c0       	mov    ds:0xc00274b8,eax
c001546b:	1b 3d bc 74 02 c0    	sbb    edi,DWORD PTR ds:0xc00274bc
c0015471:	89 35 c0 74 02 c0    	mov    DWORD PTR ds:0xc00274c0,esi
c0015477:	89 3d c4 74 02 c0    	mov    DWORD PTR ds:0xc00274c4,edi
c001547d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015483:	89 15 bc 74 02 c0    	mov    DWORD PTR ds:0xc00274bc,edx
c0015489:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001548c:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001548f:	01 c6                	add    esi,eax
c0015491:	11 d7                	adc    edi,edx
c0015493:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015496:	83 ec 0c             	sub    esp,0xc
c0015499:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001549c:	53                   	push   ebx
c001549d:	e8 f5 ad fe ff       	call   c0000297 <switchToThreadASM>
c00154a2:	0f 20 c0             	mov    eax,cr0
c00154a5:	83 c8 08             	or     eax,0x8
c00154a8:	0f 22 c0             	mov    cr0,eax
c00154ab:	83 c4 10             	add    esp,0x10
c00154ae:	5b                   	pop    ebx
c00154af:	5e                   	pop    esi
c00154b0:	5f                   	pop    edi
c00154b1:	c3                   	ret    
c00154b2:	66 90                	xchg   ax,ax
c00154b4:	31 c0                	xor    eax,eax
c00154b6:	eb 90                	jmp    c0015448 <switchToThread(ThreadControlBlock*)+0x2c>
c00154b8:	5b                   	pop    ebx
c00154b9:	c7 05 80 74 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x1
c00154c3:	5e                   	pop    esi
c00154c4:	5f                   	pop    edi
c00154c5:	c3                   	ret    
c00154c6:	66 90                	xchg   ax,ax

c00154c8 <Process::addArgs(char**)>:
c00154c8:	57                   	push   edi
c00154c9:	56                   	push   esi
c00154ca:	53                   	push   ebx
c00154cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00154d3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00154dd:	85 ff                	test   edi,edi
c00154df:	74 43                	je     c0015524 <Process::addArgs(char**)+0x5c>
c00154e1:	8b 07                	mov    eax,DWORD PTR [edi]
c00154e3:	85 c0                	test   eax,eax
c00154e5:	74 3d                	je     c0015524 <Process::addArgs(char**)+0x5c>
c00154e7:	31 db                	xor    ebx,ebx
c00154e9:	8d 76 00             	lea    esi,[esi+0x0]
c00154ec:	83 ec 0c             	sub    esp,0xc
c00154ef:	50                   	push   eax
c00154f0:	e8 cf af fe ff       	call   c00004c4 <strlen>
c00154f5:	40                   	inc    eax
c00154f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00154f9:	e8 81 42 ff ff       	call   c000977f <malloc>
c00154fe:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015505:	5a                   	pop    edx
c0015506:	59                   	pop    ecx
c0015507:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001550a:	43                   	inc    ebx
c001550b:	50                   	push   eax
c001550c:	e8 53 b0 fe ff       	call   c0000564 <strcpy>
c0015511:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001551d:	85 c0                	test   eax,eax
c001551f:	75 cb                	jne    c00154ec <Process::addArgs(char**)+0x24>
c0015521:	8d 76 00             	lea    esi,[esi+0x0]
c0015524:	5b                   	pop    ebx
c0015525:	5e                   	pop    esi
c0015526:	5f                   	pop    edi
c0015527:	c3                   	ret    

c0015528 <Process::Process(char const*, Process*, char**)>:
c0015528:	56                   	push   esi
c0015529:	53                   	push   ebx
c001552a:	83 ec 14             	sub    esp,0x14
c001552d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015531:	05 0c 02 00 00       	add    eax,0x20c
c0015536:	bb 07 00 00 00       	mov    ebx,0x7
c001553b:	89 c6                	mov    esi,eax
c001553d:	8d 76 00             	lea    esi,[esi+0x0]
c0015540:	85 db                	test   ebx,ebx
c0015542:	78 14                	js     c0015558 <Process::Process(char const*, Process*, char**)+0x30>
c0015544:	83 ec 0c             	sub    esp,0xc
c0015547:	56                   	push   esi
c0015548:	e8 5f ae 00 00       	call   c00203ac <ThreadControlBlock::ThreadControlBlock()>
c001554d:	83 c4 10             	add    esp,0x10
c0015550:	83 c6 5f             	add    esi,0x5f
c0015553:	4b                   	dec    ebx
c0015554:	eb ea                	jmp    c0015540 <Process::Process(char const*, Process*, char**)+0x18>
c0015556:	66 90                	xchg   ax,ax
c0015558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001555c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015563:	83 ec 0c             	sub    esp,0xc
c0015566:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001556a:	e8 1d cf ff ff       	call   c001248c <Krnl::newProcessEnv(Process*)>
c001556f:	83 c4 10             	add    esp,0x10
c0015572:	89 c2                	mov    edx,eax
c0015574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015578:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001557e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015582:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001558b:	a1 d0 39 02 c0       	mov    eax,ds:0xc00239d0
c0015590:	8d 50 01             	lea    edx,[eax+0x1]
c0015593:	89 15 d0 39 02 c0    	mov    DWORD PTR ds:0xc00239d0,edx
c0015599:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001559d:	89 02                	mov    DWORD PTR [edx],eax
c001559f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00155a7:	83 ec 0c             	sub    esp,0xc
c00155aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155ae:	e8 cc 41 ff ff       	call   c000977f <malloc>
c00155b3:	83 c4 10             	add    esp,0x10
c00155b6:	89 c3                	mov    ebx,eax
c00155b8:	83 ec 08             	sub    esp,0x8
c00155bb:	6a 00                	push   0x0
c00155bd:	53                   	push   ebx
c00155be:	e8 b9 68 ff ff       	call   c000be7c <VAS::VAS(bool)>
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155ca:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00155d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155d4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00155de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00155e6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00155ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155f6:	85 c0                	test   eax,eax
c00155f8:	74 42                	je     c001563c <Process::Process(char const*, Process*, char**)+0x114>
c00155fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155fe:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015604:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001560a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001560e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015618:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001561e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015628:	05 0c 01 00 00       	add    eax,0x10c
c001562d:	83 ec 08             	sub    esp,0x8
c0015630:	52                   	push   edx
c0015631:	50                   	push   eax
c0015632:	e8 2d af fe ff       	call   c0000564 <strcpy>
c0015637:	83 c4 10             	add    esp,0x10
c001563a:	eb 64                	jmp    c00156a0 <Process::Process(char const*, Process*, char**)+0x178>
c001563c:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0015644:	83 ec 0c             	sub    esp,0xc
c0015647:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001564b:	e8 2f 41 ff ff       	call   c000977f <malloc>
c0015650:	83 c4 10             	add    esp,0x10
c0015653:	89 c3                	mov    ebx,eax
c0015655:	83 ec 08             	sub    esp,0x8
c0015658:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001565c:	53                   	push   ebx
c001565d:	e8 e2 53 ff ff       	call   c000aa44 <VgaText::VgaText(char const*)>
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015669:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001566f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015673:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015679:	83 ec 0c             	sub    esp,0xc
c001567c:	50                   	push   eax
c001567d:	e8 5a 4c ff ff       	call   c000a2dc <addToTerminalCycle(VgaText*)>
c0015682:	83 c4 10             	add    esp,0x10
c0015685:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015689:	05 0c 01 00 00       	add    eax,0x10c
c001568e:	83 ec 08             	sub    esp,0x8
c0015691:	68 cd 28 02 c0       	push   0xc00228cd
c0015696:	50                   	push   eax
c0015697:	e8 c8 ae fe ff       	call   c0000564 <strcpy>
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	90                   	nop
c00156a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a4:	83 c0 0c             	add    eax,0xc
c00156a7:	83 ec 08             	sub    esp,0x8
c00156aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156ae:	50                   	push   eax
c00156af:	e8 b0 ae fe ff       	call   c0000564 <strcpy>
c00156b4:	83 c4 10             	add    esp,0x10
c00156b7:	83 ec 08             	sub    esp,0x8
c00156ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00156be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156c2:	e8 01 fe ff ff       	call   c00154c8 <Process::addArgs(char**)>
c00156c7:	83 c4 10             	add    esp,0x10
c00156ca:	83 ec 08             	sub    esp,0x8
c00156cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156d5:	e8 8e ed ff ff       	call   c0014468 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00156da:	83 c4 10             	add    esp,0x10
c00156dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00156e1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00156e5:	83 f0 01             	xor    eax,0x1
c00156e8:	88 c2                	mov    dl,al
c00156ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ee:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00156f4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00156f9:	83 ec 08             	sub    esp,0x8
c00156fc:	50                   	push   eax
c00156fd:	68 24 29 02 c0       	push   0xc0022924
c0015702:	e8 ba 6f ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0015707:	83 c4 10             	add    esp,0x10
c001570a:	90                   	nop
c001570b:	83 c4 14             	add    esp,0x14
c001570e:	5b                   	pop    ebx
c001570f:	5e                   	pop    esi
c0015710:	c3                   	ret    
c0015711:	90                   	nop
c0015712:	66 90                	xchg   ax,ax

c0015714 <Process::Process(bool, char const*, Process*, char**)>:
c0015714:	56                   	push   esi
c0015715:	53                   	push   ebx
c0015716:	83 ec 24             	sub    esp,0x24
c0015719:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001571d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015721:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015725:	05 0c 02 00 00       	add    eax,0x20c
c001572a:	bb 07 00 00 00       	mov    ebx,0x7
c001572f:	89 c6                	mov    esi,eax
c0015731:	8d 76 00             	lea    esi,[esi+0x0]
c0015734:	85 db                	test   ebx,ebx
c0015736:	78 14                	js     c001574c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015738:	83 ec 0c             	sub    esp,0xc
c001573b:	56                   	push   esi
c001573c:	e8 6b ac 00 00       	call   c00203ac <ThreadControlBlock::ThreadControlBlock()>
c0015741:	83 c4 10             	add    esp,0x10
c0015744:	83 c6 5f             	add    esi,0x5f
c0015747:	4b                   	dec    ebx
c0015748:	eb ea                	jmp    c0015734 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001574a:	66 90                	xchg   ax,ax
c001574c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015750:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015757:	83 ec 0c             	sub    esp,0xc
c001575a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001575e:	e8 29 cd ff ff       	call   c001248c <Krnl::newProcessEnv(Process*)>
c0015763:	83 c4 10             	add    esp,0x10
c0015766:	89 c2                	mov    edx,eax
c0015768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001576c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015772:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015776:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001577f:	a1 d0 39 02 c0       	mov    eax,ds:0xc00239d0
c0015784:	8d 50 01             	lea    edx,[eax+0x1]
c0015787:	89 15 d0 39 02 c0    	mov    DWORD PTR ds:0xc00239d0,edx
c001578d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015791:	89 02                	mov    DWORD PTR [edx],eax
c0015793:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001579b:	83 ec 0c             	sub    esp,0xc
c001579e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157a2:	e8 d8 3f ff ff       	call   c000977f <malloc>
c00157a7:	83 c4 10             	add    esp,0x10
c00157aa:	89 c3                	mov    ebx,eax
c00157ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00157b1:	83 ec 08             	sub    esp,0x8
c00157b4:	50                   	push   eax
c00157b5:	53                   	push   ebx
c00157b6:	e8 c1 66 ff ff       	call   c000be7c <VAS::VAS(bool)>
c00157bb:	83 c4 10             	add    esp,0x10
c00157be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157c2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00157c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157cc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00157d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00157de:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00157e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157ee:	85 c0                	test   eax,eax
c00157f0:	74 42                	je     c0015834 <Process::Process(bool, char const*, Process*, char**)+0x120>
c00157f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157f6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157fc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015806:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001580c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015810:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015816:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001581c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015820:	05 0c 01 00 00       	add    eax,0x10c
c0015825:	83 ec 08             	sub    esp,0x8
c0015828:	52                   	push   edx
c0015829:	50                   	push   eax
c001582a:	e8 35 ad fe ff       	call   c0000564 <strcpy>
c001582f:	83 c4 10             	add    esp,0x10
c0015832:	eb 64                	jmp    c0015898 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0015834:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c001583c:	83 ec 0c             	sub    esp,0xc
c001583f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015843:	e8 37 3f ff ff       	call   c000977f <malloc>
c0015848:	83 c4 10             	add    esp,0x10
c001584b:	89 c3                	mov    ebx,eax
c001584d:	83 ec 08             	sub    esp,0x8
c0015850:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015854:	53                   	push   ebx
c0015855:	e8 ea 51 ff ff       	call   c000aa44 <VgaText::VgaText(char const*)>
c001585a:	83 c4 10             	add    esp,0x10
c001585d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015861:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015867:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001586b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015871:	83 ec 0c             	sub    esp,0xc
c0015874:	50                   	push   eax
c0015875:	e8 62 4a ff ff       	call   c000a2dc <addToTerminalCycle(VgaText*)>
c001587a:	83 c4 10             	add    esp,0x10
c001587d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015881:	05 0c 01 00 00       	add    eax,0x10c
c0015886:	83 ec 08             	sub    esp,0x8
c0015889:	68 cd 28 02 c0       	push   0xc00228cd
c001588e:	50                   	push   eax
c001588f:	e8 d0 ac fe ff       	call   c0000564 <strcpy>
c0015894:	83 c4 10             	add    esp,0x10
c0015897:	90                   	nop
c0015898:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001589c:	83 c0 0c             	add    eax,0xc
c001589f:	83 ec 08             	sub    esp,0x8
c00158a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00158a6:	50                   	push   eax
c00158a7:	e8 b8 ac fe ff       	call   c0000564 <strcpy>
c00158ac:	83 c4 10             	add    esp,0x10
c00158af:	83 ec 08             	sub    esp,0x8
c00158b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00158b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00158ba:	e8 09 fc ff ff       	call   c00154c8 <Process::addArgs(char**)>
c00158bf:	83 c4 10             	add    esp,0x10
c00158c2:	90                   	nop
c00158c3:	83 c4 24             	add    esp,0x24
c00158c6:	5b                   	pop    ebx
c00158c7:	5e                   	pop    esi
c00158c8:	c3                   	ret    
c00158c9:	8d 76 00             	lea    esi,[esi+0x0]

c00158cc <taskStartupFunction>:
c00158cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158d1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00158d4:	c3                   	ret    
c00158d5:	90                   	nop
c00158d6:	66 90                	xchg   ax,ax

c00158d8 <Semaphore::Semaphore(int)>:
c00158d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00158e0:	89 10                	mov    DWORD PTR [eax],edx
c00158e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158e6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00158ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015903:	90                   	nop
c0015904:	c3                   	ret    
c0015905:	90                   	nop
c0015906:	66 90                	xchg   ax,ax

c0015908 <Mutex::Mutex()>:
c0015908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001590c:	6a 01                	push   0x1
c001590e:	50                   	push   eax
c001590f:	e8 c4 ff ff ff       	call   c00158d8 <Semaphore::Semaphore(int)>
c0015914:	83 c4 08             	add    esp,0x8
c0015917:	90                   	nop
c0015918:	c3                   	ret    
c0015919:	90                   	nop
c001591a:	66 90                	xchg   ax,ax

c001591c <Process::createThread(void (*)(void*), void*, int)>:
c001591c:	57                   	push   edi
c001591d:	31 c9                	xor    ecx,ecx
c001591f:	56                   	push   esi
c0015920:	53                   	push   ebx
c0015921:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015925:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001592c:	89 f2                	mov    edx,esi
c001592e:	66 90                	xchg   ax,ax
c0015930:	0f b7 c2             	movzx  eax,dx
c0015933:	83 e2 01             	and    edx,0x1
c0015936:	74 14                	je     c001594c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015938:	d1 f8                	sar    eax,1
c001593a:	41                   	inc    ecx
c001593b:	89 c2                	mov    edx,eax
c001593d:	83 f9 10             	cmp    ecx,0x10
c0015940:	75 ee                	jne    c0015930 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015942:	31 db                	xor    ebx,ebx
c0015944:	89 d8                	mov    eax,ebx
c0015946:	5b                   	pop    ebx
c0015947:	5e                   	pop    esi
c0015948:	5f                   	pop    edi
c0015949:	c3                   	ret    
c001594a:	66 90                	xchg   ax,ax
c001594c:	b8 01 00 00 00       	mov    eax,0x1
c0015951:	d3 e0                	shl    eax,cl
c0015953:	09 c6                	or     esi,eax
c0015955:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015958:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001595f:	01 c0                	add    eax,eax
c0015961:	01 c8                	add    eax,ecx
c0015963:	8d 04 80             	lea    eax,[eax+eax*4]
c0015966:	01 d8                	add    eax,ebx
c0015968:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001596f:	75 0b                	jne    c001597c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015971:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001597b:	90                   	nop
c001597c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015982:	83 ec 08             	sub    esp,0x8
c0015985:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015988:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001598b:	01 c0                	add    eax,eax
c001598d:	01 c8                	add    eax,ecx
c001598f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015992:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015995:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001599b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00159a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159a5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00159ab:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00159b1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00159b8:	89 ca                	mov    edx,ecx
c00159ba:	f7 da                	neg    edx
c00159bc:	c1 e2 15             	shl    edx,0x15
c00159bf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00159c5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00159cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00159cf:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00159d9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00159df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00159e3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00159e9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00159f3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00159fd:	53                   	push   ebx
c00159fe:	68 a4 74 02 c0       	push   0xc00274a4
c0015a03:	e8 44 a7 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a08:	83 c4 10             	add    esp,0x10
c0015a0b:	89 d8                	mov    eax,ebx
c0015a0d:	5b                   	pop    ebx
c0015a0e:	5e                   	pop    esi
c0015a0f:	5f                   	pop    edi
c0015a10:	c3                   	ret    
c0015a11:	90                   	nop
c0015a12:	66 90                	xchg   ax,ax

c0015a14 <Process::createUserThread()>:
c0015a14:	83 ec 0c             	sub    esp,0xc
c0015a17:	68 80 00 00 00       	push   0x80
c0015a1c:	6a 00                	push   0x0
c0015a1e:	68 c4 53 01 c0       	push   0xc00153c4
c0015a23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a27:	e8 f0 fe ff ff       	call   c001591c <Process::createThread(void (*)(void*), void*, int)>
c0015a2c:	83 c4 1c             	add    esp,0x1c
c0015a2f:	c3                   	ret    

c0015a30 <setupMultitasking(void (*)())>:
c0015a30:	56                   	push   esi
c0015a31:	53                   	push   ebx
c0015a32:	51                   	push   ecx
c0015a33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a37:	eb 13                	jmp    c0015a4c <setupMultitasking(void (*)())+0x1c>
c0015a39:	8d 76 00             	lea    esi,[esi+0x0]
c0015a3c:	83 ec 0c             	sub    esp,0xc
c0015a3f:	68 a4 74 02 c0       	push   0xc00274a4
c0015a44:	e8 4b a6 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a49:	83 c4 10             	add    esp,0x10
c0015a4c:	83 ec 0c             	sub    esp,0xc
c0015a4f:	68 a4 74 02 c0       	push   0xc00274a4
c0015a54:	e8 17 a6 00 00       	call   c0020070 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a59:	83 c4 10             	add    esp,0x10
c0015a5c:	84 c0                	test   al,al
c0015a5e:	74 dc                	je     c0015a3c <setupMultitasking(void (*)())+0xc>
c0015a60:	83 ec 0c             	sub    esp,0xc
c0015a63:	68 1f 07 00 00       	push   0x71f
c0015a68:	e8 12 3d ff ff       	call   c000977f <malloc>
c0015a6d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015a74:	89 c3                	mov    ebx,eax
c0015a76:	6a 00                	push   0x0
c0015a78:	68 d1 28 02 c0       	push   0xc00228d1
c0015a7d:	6a 01                	push   0x1
c0015a7f:	50                   	push   eax
c0015a80:	e8 8f fc ff ff       	call   c0015714 <Process::Process(bool, char const*, Process*, char**)>
c0015a85:	83 c4 14             	add    esp,0x14
c0015a88:	89 1d b0 74 02 c0    	mov    DWORD PTR ds:0xc00274b0,ebx
c0015a8e:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0015a94:	e8 ac 4a ff ff       	call   c000a545 <setActiveTerminal(VgaText*)>
c0015a99:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0015aa1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015aab:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ab1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015ab4:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015abe:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015ac4:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015aca:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015ad4:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015ade:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015ae8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015aee:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015af8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015afe:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015b08:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015b0e:	58                   	pop    eax
c0015b0f:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015b15:	5a                   	pop    edx
c0015b16:	68 cd 28 02 c0       	push   0xc00228cd
c0015b1b:	50                   	push   eax
c0015b1c:	e8 43 aa fe ff       	call   c0000564 <strcpy>
c0015b21:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015b28:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015b2c:	83 c4 14             	add    esp,0x14
c0015b2f:	5b                   	pop    ebx
c0015b30:	5e                   	pop    esi
c0015b31:	e9 53 a7 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0015b36:	66 90                	xchg   ax,ax

c0015b38 <schedule()>:
c0015b38:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c0015b3d:	85 c0                	test   eax,eax
c0015b3f:	74 0b                	je     c0015b4c <schedule()+0x14>
c0015b41:	c7 05 80 74 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x1
c0015b4b:	c3                   	ret    
c0015b4c:	53                   	push   ebx
c0015b4d:	83 ec 14             	sub    esp,0x14
c0015b50:	68 a4 74 02 c0       	push   0xc00274a4
c0015b55:	e8 16 a5 00 00       	call   c0020070 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	84 c0                	test   al,al
c0015b5f:	75 3b                	jne    c0015b9c <schedule()+0x64>
c0015b61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015b69:	4a                   	dec    edx
c0015b6a:	74 38                	je     c0015ba4 <schedule()+0x6c>
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	68 a4 74 02 c0       	push   0xc00274a4
c0015b74:	e8 13 a5 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b79:	c7 04 24 a4 74 02 c0 	mov    DWORD PTR [esp],0xc00274a4
c0015b80:	89 c3                	mov    ebx,eax
c0015b82:	e8 0d a5 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b87:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b91:	e8 86 f8 ff ff       	call   c001541c <switchToThread(ThreadControlBlock*)>
c0015b96:	83 c4 10             	add    esp,0x10
c0015b99:	8d 76 00             	lea    esi,[esi+0x0]
c0015b9c:	83 c4 08             	add    esp,0x8
c0015b9f:	5b                   	pop    ebx
c0015ba0:	c3                   	ret    
c0015ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ba4:	83 ec 08             	sub    esp,0x8
c0015ba7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015bae:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0015bb4:	68 a4 74 02 c0       	push   0xc00274a4
c0015bb9:	e8 8e a5 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	eb a9                	jmp    c0015b6c <schedule()+0x34>
c0015bc3:	90                   	nop

c0015bc4 <Semaphore::tryAcquire()>:
c0015bc4:	53                   	push   ebx
c0015bc5:	83 ec 08             	sub    esp,0x8
c0015bc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bcc:	fa                   	cli    
c0015bcd:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015bd2:	8d 50 01             	lea    edx,[eax+0x1]
c0015bd5:	89 15 88 74 02 c0    	mov    DWORD PTR ds:0xc0027488,edx
c0015bdb:	8b 15 84 74 02 c0    	mov    edx,DWORD PTR ds:0xc0027484
c0015be1:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015be4:	89 1d 84 74 02 c0    	mov    DWORD PTR ds:0xc0027484,ebx
c0015bea:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015bed:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015bef:	7c 33                	jl     c0015c24 <Semaphore::tryAcquire()+0x60>
c0015bf1:	89 15 84 74 02 c0    	mov    DWORD PTR ds:0xc0027484,edx
c0015bf7:	85 d2                	test   edx,edx
c0015bf9:	75 0d                	jne    c0015c08 <Semaphore::tryAcquire()+0x44>
c0015bfb:	8b 15 80 74 02 c0    	mov    edx,DWORD PTR ds:0xc0027480
c0015c01:	85 d2                	test   edx,edx
c0015c03:	75 6b                	jne    c0015c70 <Semaphore::tryAcquire()+0xac>
c0015c05:	8d 76 00             	lea    esi,[esi+0x0]
c0015c08:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015c0d:	85 c0                	test   eax,eax
c0015c0f:	74 0b                	je     c0015c1c <Semaphore::tryAcquire()+0x58>
c0015c11:	8d 76 00             	lea    esi,[esi+0x0]
c0015c14:	31 c0                	xor    eax,eax
c0015c16:	83 c4 08             	add    esp,0x8
c0015c19:	5b                   	pop    ebx
c0015c1a:	c3                   	ret    
c0015c1b:	90                   	nop
c0015c1c:	fb                   	sti    
c0015c1d:	83 c4 08             	add    esp,0x8
c0015c20:	5b                   	pop    ebx
c0015c21:	c3                   	ret    
c0015c22:	66 90                	xchg   ax,ax
c0015c24:	43                   	inc    ebx
c0015c25:	89 15 84 74 02 c0    	mov    DWORD PTR ds:0xc0027484,edx
c0015c2b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015c2e:	85 d2                	test   edx,edx
c0015c30:	75 22                	jne    c0015c54 <Semaphore::tryAcquire()+0x90>
c0015c32:	8b 0d 80 74 02 c0    	mov    ecx,DWORD PTR ds:0xc0027480
c0015c38:	85 c9                	test   ecx,ecx
c0015c3a:	74 18                	je     c0015c54 <Semaphore::tryAcquire()+0x90>
c0015c3c:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c0015c46:	e8 ed fe ff ff       	call   c0015b38 <schedule()>
c0015c4b:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015c50:	48                   	dec    eax
c0015c51:	8d 76 00             	lea    esi,[esi+0x0]
c0015c54:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015c59:	85 c0                	test   eax,eax
c0015c5b:	75 0b                	jne    c0015c68 <Semaphore::tryAcquire()+0xa4>
c0015c5d:	fb                   	sti    
c0015c5e:	b0 01                	mov    al,0x1
c0015c60:	83 c4 08             	add    esp,0x8
c0015c63:	5b                   	pop    ebx
c0015c64:	c3                   	ret    
c0015c65:	8d 76 00             	lea    esi,[esi+0x0]
c0015c68:	b0 01                	mov    al,0x1
c0015c6a:	83 c4 08             	add    esp,0x8
c0015c6d:	5b                   	pop    ebx
c0015c6e:	c3                   	ret    
c0015c6f:	90                   	nop
c0015c70:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c0015c7a:	e8 b9 fe ff ff       	call   c0015b38 <schedule()>
c0015c7f:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015c84:	48                   	dec    eax
c0015c85:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015c8a:	85 c0                	test   eax,eax
c0015c8c:	75 86                	jne    c0015c14 <Semaphore::tryAcquire()+0x50>
c0015c8e:	eb 8c                	jmp    c0015c1c <Semaphore::tryAcquire()+0x58>

c0015c90 <Semaphore::assertLocked(char const*)>:
c0015c90:	83 ec 0c             	sub    esp,0xc
c0015c93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c97:	fa                   	cli    
c0015c98:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0015c9e:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c0015ca3:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ca6:	89 0d 84 74 02 c0    	mov    DWORD PTR ds:0xc0027484,ecx
c0015cac:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015cae:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015cb1:	7c 29                	jl     c0015cdc <Semaphore::assertLocked(char const*)+0x4c>
c0015cb3:	90                   	nop
c0015cb4:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c0015cb9:	85 c0                	test   eax,eax
c0015cbb:	75 0b                	jne    c0015cc8 <Semaphore::assertLocked(char const*)+0x38>
c0015cbd:	a1 80 74 02 c0       	mov    eax,ds:0xc0027480
c0015cc2:	85 c0                	test   eax,eax
c0015cc4:	75 2e                	jne    c0015cf4 <Semaphore::assertLocked(char const*)+0x64>
c0015cc6:	66 90                	xchg   ax,ax
c0015cc8:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015ccd:	48                   	dec    eax
c0015cce:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015cd3:	75 03                	jne    c0015cd8 <Semaphore::assertLocked(char const*)+0x48>
c0015cd5:	fb                   	sti    
c0015cd6:	66 90                	xchg   ax,ax
c0015cd8:	83 c4 0c             	add    esp,0xc
c0015cdb:	c3                   	ret    
c0015cdc:	83 ec 0c             	sub    esp,0xc
c0015cdf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ce3:	e8 1b c9 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0015ce8:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c0015ced:	83 c4 10             	add    esp,0x10
c0015cf0:	48                   	dec    eax
c0015cf1:	eb c1                	jmp    c0015cb4 <Semaphore::assertLocked(char const*)+0x24>
c0015cf3:	90                   	nop
c0015cf4:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c0015cfe:	e8 35 fe ff ff       	call   c0015b38 <schedule()>
c0015d03:	eb c3                	jmp    c0015cc8 <Semaphore::assertLocked(char const*)+0x38>
c0015d05:	8d 76 00             	lea    esi,[esi+0x0]

c0015d08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015d08:	83 ec 0c             	sub    esp,0xc
c0015d0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d17:	e8 1c fe ff ff       	call   c0015b38 <schedule()>
c0015d1c:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015d21:	48                   	dec    eax
c0015d22:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015d27:	75 03                	jne    c0015d2c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015d29:	fb                   	sti    
c0015d2a:	66 90                	xchg   ax,ax
c0015d2c:	83 c4 0c             	add    esp,0xc
c0015d2f:	c3                   	ret    

c0015d30 <blockTask(TaskState)>:
c0015d30:	83 ec 0c             	sub    esp,0xc
c0015d33:	fa                   	cli    
c0015d34:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0015d3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d46:	e8 ed fd ff ff       	call   c0015b38 <schedule()>
c0015d4b:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015d50:	48                   	dec    eax
c0015d51:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015d56:	75 04                	jne    c0015d5c <blockTask(TaskState)+0x2c>
c0015d58:	fb                   	sti    
c0015d59:	8d 76 00             	lea    esi,[esi+0x0]
c0015d5c:	83 c4 0c             	add    esp,0xc
c0015d5f:	c3                   	ret    

c0015d60 <waitTask(int, int*, int)>:
c0015d60:	83 ec 18             	sub    esp,0x18
c0015d63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d6c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d78:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d7b:	6a 07                	push   0x7
c0015d7d:	e8 ae ff ff ff       	call   c0015d30 <blockTask(TaskState)>
c0015d82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d87:	83 c4 10             	add    esp,0x10
c0015d8a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015d8d:	85 d2                	test   edx,edx
c0015d8f:	74 0b                	je     c0015d9c <waitTask(int, int*, int)+0x3c>
c0015d91:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015d94:	89 02                	mov    DWORD PTR [edx],eax
c0015d96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d9b:	90                   	nop
c0015d9c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015d9f:	83 c4 0c             	add    esp,0xc
c0015da2:	c3                   	ret    
c0015da3:	90                   	nop

c0015da4 <milliTenthSleepUntil(unsigned int)>:
c0015da4:	83 ec 0c             	sub    esp,0xc
c0015da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dab:	39 05 8c 65 02 c0    	cmp    DWORD PTR ds:0xc002658c,eax
c0015db1:	76 05                	jbe    c0015db8 <milliTenthSleepUntil(unsigned int)+0x14>
c0015db3:	90                   	nop
c0015db4:	83 c4 0c             	add    esp,0xc
c0015db7:	c3                   	ret    
c0015db8:	fa                   	cli    
c0015db9:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0015dbf:	83 ec 08             	sub    esp,0x8
c0015dc2:	ff 05 84 74 02 c0    	inc    DWORD PTR ds:0xc0027484
c0015dc8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015dce:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015dd1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0015dd7:	68 98 74 02 c0       	push   0xc0027498
c0015ddc:	e8 6b a3 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015de1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015de8:	e8 43 ff ff ff       	call   c0015d30 <blockTask(TaskState)>
c0015ded:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c0015df2:	83 c4 10             	add    esp,0x10
c0015df5:	48                   	dec    eax
c0015df6:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c0015dfb:	85 c0                	test   eax,eax
c0015dfd:	75 09                	jne    c0015e08 <milliTenthSleepUntil(unsigned int)+0x64>
c0015dff:	a1 80 74 02 c0       	mov    eax,ds:0xc0027480
c0015e04:	85 c0                	test   eax,eax
c0015e06:	75 14                	jne    c0015e1c <milliTenthSleepUntil(unsigned int)+0x78>
c0015e08:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015e0d:	48                   	dec    eax
c0015e0e:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015e13:	75 9f                	jne    c0015db4 <milliTenthSleepUntil(unsigned int)+0x10>
c0015e15:	fb                   	sti    
c0015e16:	83 c4 0c             	add    esp,0xc
c0015e19:	c3                   	ret    
c0015e1a:	66 90                	xchg   ax,ax
c0015e1c:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c0015e26:	e8 0d fd ff ff       	call   c0015b38 <schedule()>
c0015e2b:	eb db                	jmp    c0015e08 <milliTenthSleepUntil(unsigned int)+0x64>
c0015e2d:	8d 76 00             	lea    esi,[esi+0x0]

c0015e30 <milliTenthSleep(unsigned int)>:
c0015e30:	a1 8c 65 02 c0       	mov    eax,ds:0xc002658c
c0015e35:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0015e39:	e9 66 ff ff ff       	jmp    c0015da4 <milliTenthSleepUntil(unsigned int)>
c0015e3e:	66 90                	xchg   ax,ax

c0015e40 <sleep(unsigned int)>:
c0015e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e44:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e47:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e4a:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e4d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e50:	c1 e0 04             	shl    eax,0x4
c0015e53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e57:	eb d7                	jmp    c0015e30 <milliTenthSleep(unsigned int)>
c0015e59:	90                   	nop
c0015e5a:	66 90                	xchg   ax,ax

c0015e5c <Semaphore::acquire()>:
c0015e5c:	83 ec 0c             	sub    esp,0xc
c0015e5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e63:	fa                   	cli    
c0015e64:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c0015e69:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0015e6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e72:	89 0d 84 74 02 c0    	mov    DWORD PTR ds:0xc0027484,ecx
c0015e78:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e7b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015e7d:	7d 2d                	jge    c0015eac <Semaphore::acquire()+0x50>
c0015e7f:	41                   	inc    ecx
c0015e80:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e83:	90                   	nop
c0015e84:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c0015e89:	85 c0                	test   eax,eax
c0015e8b:	75 0b                	jne    c0015e98 <Semaphore::acquire()+0x3c>
c0015e8d:	a1 80 74 02 c0       	mov    eax,ds:0xc0027480
c0015e92:	85 c0                	test   eax,eax
c0015e94:	75 62                	jne    c0015ef8 <Semaphore::acquire()+0x9c>
c0015e96:	66 90                	xchg   ax,ax
c0015e98:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015e9d:	48                   	dec    eax
c0015e9e:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015ea3:	75 03                	jne    c0015ea8 <Semaphore::acquire()+0x4c>
c0015ea5:	fb                   	sti    
c0015ea6:	66 90                	xchg   ax,ax
c0015ea8:	83 c4 0c             	add    esp,0xc
c0015eab:	c3                   	ret    
c0015eac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015eb8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015ebb:	85 c9                	test   ecx,ecx
c0015ebd:	74 4d                	je     c0015f0c <Semaphore::acquire()+0xb0>
c0015ebf:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015ec2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ec8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015ecb:	90                   	nop
c0015ecc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed1:	83 ec 0c             	sub    esp,0xc
c0015ed4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015ed7:	68 4c 29 02 c0       	push   0xc002294c
c0015edc:	e8 e0 67 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0015ee1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015ee8:	e8 43 fe ff ff       	call   c0015d30 <blockTask(TaskState)>
c0015eed:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c0015ef2:	83 c4 10             	add    esp,0x10
c0015ef5:	48                   	dec    eax
c0015ef6:	eb 8c                	jmp    c0015e84 <Semaphore::acquire()+0x28>
c0015ef8:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c0015f02:	e8 31 fc ff ff       	call   c0015b38 <schedule()>
c0015f07:	eb 8f                	jmp    c0015e98 <Semaphore::acquire()+0x3c>
c0015f09:	8d 76 00             	lea    esi,[esi+0x0]
c0015f0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f11:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f14:	eb b6                	jmp    c0015ecc <Semaphore::acquire()+0x70>
c0015f16:	66 90                	xchg   ax,ax

c0015f18 <taskReturned>:
c0015f18:	83 ec 18             	sub    esp,0x18
c0015f1b:	68 6c 29 02 c0       	push   0xc002296c
c0015f20:	e8 de c6 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0015f25:	83 c4 10             	add    esp,0x10
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	6a 02                	push   0x2
c0015f2d:	e8 fe fd ff ff       	call   c0015d30 <blockTask(TaskState)>
c0015f32:	fa                   	cli    
c0015f33:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0015f39:	e8 fa fb ff ff       	call   c0015b38 <schedule()>
c0015f3e:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015f43:	83 c4 10             	add    esp,0x10
c0015f46:	48                   	dec    eax
c0015f47:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015f4c:	85 c0                	test   eax,eax
c0015f4e:	75 d8                	jne    c0015f28 <taskReturned+0x10>
c0015f50:	fb                   	sti    
c0015f51:	eb d5                	jmp    c0015f28 <taskReturned+0x10>
c0015f53:	90                   	nop

c0015f54 <Thr::processFromPID(int)>:
c0015f54:	57                   	push   edi
c0015f55:	56                   	push   esi
c0015f56:	53                   	push   ebx
c0015f57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f5b:	fa                   	cli    
c0015f5c:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0015f62:	83 ec 0c             	sub    esp,0xc
c0015f65:	68 a4 74 02 c0       	push   0xc00274a4
c0015f6a:	e8 1d a1 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f6f:	83 c4 10             	add    esp,0x10
c0015f72:	89 c7                	mov    edi,eax
c0015f74:	eb 16                	jmp    c0015f8c <Thr::processFromPID(int)+0x38>
c0015f76:	66 90                	xchg   ax,ax
c0015f78:	83 ec 0c             	sub    esp,0xc
c0015f7b:	68 a4 74 02 c0       	push   0xc00274a4
c0015f80:	e8 07 a1 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f85:	83 c4 10             	add    esp,0x10
c0015f88:	39 f8                	cmp    eax,edi
c0015f8a:	74 4c                	je     c0015fd8 <Thr::processFromPID(int)+0x84>
c0015f8c:	83 ec 0c             	sub    esp,0xc
c0015f8f:	68 a4 74 02 c0       	push   0xc00274a4
c0015f94:	e8 f3 a0 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f99:	c7 04 24 a4 74 02 c0 	mov    DWORD PTR [esp],0xc00274a4
c0015fa0:	89 c3                	mov    ebx,eax
c0015fa2:	e8 ed a0 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015fa7:	58                   	pop    eax
c0015fa8:	5a                   	pop    edx
c0015fa9:	53                   	push   ebx
c0015faa:	68 a4 74 02 c0       	push   0xc00274a4
c0015faf:	e8 98 a1 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015fb4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015fb7:	83 c4 10             	add    esp,0x10
c0015fba:	39 30                	cmp    DWORD PTR [eax],esi
c0015fbc:	75 ba                	jne    c0015f78 <Thr::processFromPID(int)+0x24>
c0015fbe:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015fc3:	48                   	dec    eax
c0015fc4:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015fc9:	74 09                	je     c0015fd4 <Thr::processFromPID(int)+0x80>
c0015fcb:	90                   	nop
c0015fcc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015fcf:	5b                   	pop    ebx
c0015fd0:	5e                   	pop    esi
c0015fd1:	5f                   	pop    edi
c0015fd2:	c3                   	ret    
c0015fd3:	90                   	nop
c0015fd4:	fb                   	sti    
c0015fd5:	eb f5                	jmp    c0015fcc <Thr::processFromPID(int)+0x78>
c0015fd7:	90                   	nop
c0015fd8:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0015fdd:	48                   	dec    eax
c0015fde:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0015fe3:	75 07                	jne    c0015fec <Thr::processFromPID(int)+0x98>
c0015fe5:	fb                   	sti    
c0015fe6:	5b                   	pop    ebx
c0015fe7:	5e                   	pop    esi
c0015fe8:	5f                   	pop    edi
c0015fe9:	c3                   	ret    
c0015fea:	66 90                	xchg   ax,ax
c0015fec:	5b                   	pop    ebx
c0015fed:	31 c0                	xor    eax,eax
c0015fef:	5e                   	pop    esi
c0015ff0:	5f                   	pop    edi
c0015ff1:	c3                   	ret    
c0015ff2:	66 90                	xchg   ax,ax

c0015ff4 <unblockTask(ThreadControlBlock*)>:
c0015ff4:	53                   	push   ebx
c0015ff5:	83 ec 08             	sub    esp,0x8
c0015ff8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ffc:	fa                   	cli    
c0015ffd:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0016003:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016006:	85 c0                	test   eax,eax
c0016008:	74 66                	je     c0016070 <unblockTask(ThreadControlBlock*)+0x7c>
c001600a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001600d:	48                   	dec    eax
c001600e:	74 38                	je     c0016048 <unblockTask(ThreadControlBlock*)+0x54>
c0016010:	83 ec 0c             	sub    esp,0xc
c0016013:	68 a4 74 02 c0       	push   0xc00274a4
c0016018:	e8 6f a0 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001601d:	83 c4 10             	add    esp,0x10
c0016020:	85 c0                	test   eax,eax
c0016022:	75 1c                	jne    c0016040 <unblockTask(ThreadControlBlock*)+0x4c>
c0016024:	eb 5e                	jmp    c0016084 <unblockTask(ThreadControlBlock*)+0x90>
c0016026:	66 90                	xchg   ax,ax
c0016028:	83 ec 08             	sub    esp,0x8
c001602b:	50                   	push   eax
c001602c:	68 a4 74 02 c0       	push   0xc00274a4
c0016031:	e8 06 a4 00 00       	call   c002043c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016036:	83 c4 10             	add    esp,0x10
c0016039:	85 c0                	test   eax,eax
c001603b:	74 47                	je     c0016084 <unblockTask(ThreadControlBlock*)+0x90>
c001603d:	8d 76 00             	lea    esi,[esi+0x0]
c0016040:	39 c3                	cmp    ebx,eax
c0016042:	75 e4                	jne    c0016028 <unblockTask(ThreadControlBlock*)+0x34>
c0016044:	eb 12                	jmp    c0016058 <unblockTask(ThreadControlBlock*)+0x64>
c0016046:	66 90                	xchg   ax,ax
c0016048:	83 ec 0c             	sub    esp,0xc
c001604b:	68 ef 28 02 c0       	push   0xc00228ef
c0016050:	e8 6c 66 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001605d:	48                   	dec    eax
c001605e:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0016063:	75 03                	jne    c0016068 <unblockTask(ThreadControlBlock*)+0x74>
c0016065:	fb                   	sti    
c0016066:	66 90                	xchg   ax,ax
c0016068:	83 c4 08             	add    esp,0x8
c001606b:	5b                   	pop    ebx
c001606c:	c3                   	ret    
c001606d:	8d 76 00             	lea    esi,[esi+0x0]
c0016070:	83 ec 0c             	sub    esp,0xc
c0016073:	68 d8 28 02 c0       	push   0xc00228d8
c0016078:	e8 44 66 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001607d:	83 c4 10             	add    esp,0x10
c0016080:	eb d6                	jmp    c0016058 <unblockTask(ThreadControlBlock*)+0x64>
c0016082:	66 90                	xchg   ax,ax
c0016084:	83 ec 08             	sub    esp,0x8
c0016087:	53                   	push   ebx
c0016088:	68 a4 74 02 c0       	push   0xc00274a4
c001608d:	e8 ba a0 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016092:	83 c4 10             	add    esp,0x10
c0016095:	eb c1                	jmp    c0016058 <unblockTask(ThreadControlBlock*)+0x64>
c0016097:	90                   	nop

c0016098 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016098:	55                   	push   ebp
c0016099:	57                   	push   edi
c001609a:	56                   	push   esi
c001609b:	53                   	push   ebx
c001609c:	83 ec 1c             	sub    esp,0x1c
c001609f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00160a3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160a6:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00160ac:	85 ff                	test   edi,edi
c00160ae:	7e 24                	jle    c00160d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00160b0:	31 f6                	xor    esi,esi
c00160b2:	66 90                	xchg   ax,ax
c00160b4:	83 ec 0c             	sub    esp,0xc
c00160b7:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00160be:	46                   	inc    esi
c00160bf:	e8 cb 36 ff ff       	call   c000978f <free>
c00160c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160c7:	83 c4 10             	add    esp,0x10
c00160ca:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00160d0:	7f e2                	jg     c00160b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00160d2:	66 90                	xchg   ax,ax
c00160d4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00160de:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00160e3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00160e6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00160e9:	d3 c0                	rol    eax,cl
c00160eb:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00160f2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00160f5:	89 f7                	mov    edi,esi
c00160f7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00160ff:	0f 85 73 01 00 00    	jne    c0016278 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0016105:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001610b:	85 ed                	test   ebp,ebp
c001610d:	74 1d                	je     c001612c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001610f:	83 ec 0c             	sub    esp,0xc
c0016112:	55                   	push   ebp
c0016113:	e8 90 c2 ff ff       	call   c00123a8 <EnvVarContainer::~EnvVarContainer()>
c0016118:	59                   	pop    ecx
c0016119:	5e                   	pop    esi
c001611a:	6a 0c                	push   0xc
c001611c:	55                   	push   ebp
c001611d:	e8 be 64 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c0016122:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016125:	83 c4 10             	add    esp,0x10
c0016128:	89 f7                	mov    edi,esi
c001612a:	66 90                	xchg   ax,ax
c001612c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016132:	85 c0                	test   eax,eax
c0016134:	0f 84 b2 00 00 00    	je     c00161ec <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001613a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001613d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016141:	31 c9                	xor    ecx,ecx
c0016143:	eb 17                	jmp    c001615c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0016145:	8d 76 00             	lea    esi,[esi+0x0]
c0016148:	41                   	inc    ecx
c0016149:	83 f9 10             	cmp    ecx,0x10
c001614c:	0f 84 9a 00 00 00    	je     c00161ec <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0016152:	66 90                	xchg   ax,ax
c0016154:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001615a:	66 90                	xchg   ax,ax
c001615c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016163:	d3 fa                	sar    edx,cl
c0016165:	83 e2 01             	and    edx,0x1
c0016168:	74 de                	je     c0016148 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001616a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001616d:	01 d2                	add    edx,edx
c001616f:	01 ca                	add    edx,ecx
c0016171:	8d 14 92             	lea    edx,[edx+edx*4]
c0016174:	01 d0                	add    eax,edx
c0016176:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001617c:	83 fd 07             	cmp    ebp,0x7
c001617f:	75 c7                	jne    c0016148 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0016181:	05 40 02 00 00       	add    eax,0x240
c0016186:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016189:	83 fd ff             	cmp    ebp,0xffffffff
c001618c:	0f 8c ee 00 00 00    	jl     c0016280 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0016192:	0f 84 ac 01 00 00    	je     c0016344 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0016198:	85 ed                	test   ebp,ebp
c001619a:	0f 84 90 01 00 00    	je     c0016330 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00161a0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00161a2:	75 a4                	jne    c0016148 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00161a4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00161ae:	01 d0                	add    eax,edx
c00161b0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00161b4:	83 ec 0c             	sub    esp,0xc
c00161b7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00161bd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161c0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00161c6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00161cd:	50                   	push   eax
c00161ce:	e8 21 fe ff ff       	call   c0015ff4 <unblockTask(ThreadControlBlock*)>
c00161d3:	83 c4 10             	add    esp,0x10
c00161d6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161dd:	89 f7                	mov    edi,esi
c00161df:	41                   	inc    ecx
c00161e0:	83 f9 10             	cmp    ecx,0x10
c00161e3:	0f 85 6b ff ff ff    	jne    c0016154 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161e9:	8d 76 00             	lea    esi,[esi+0x0]
c00161ec:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00161f2:	85 c0                	test   eax,eax
c00161f4:	74 62                	je     c0016258 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00161f6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00161fc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016202:	74 54                	je     c0016258 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0016204:	83 ec 0c             	sub    esp,0xc
c0016207:	68 a4 74 02 c0       	push   0xc00274a4
c001620c:	e8 7b 9e 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016211:	c7 04 24 a4 74 02 c0 	mov    DWORD PTR [esp],0xc00274a4
c0016218:	89 c7                	mov    edi,eax
c001621a:	e8 51 9e 00 00       	call   c0020070 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001621f:	83 c4 10             	add    esp,0x10
c0016222:	84 c0                	test   al,al
c0016224:	0f 84 ce 00 00 00    	je     c00162f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c001622a:	66 90                	xchg   ax,ax
c001622c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001622f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016235:	85 d2                	test   edx,edx
c0016237:	74 0f                	je     c0016248 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0016239:	83 ec 0c             	sub    esp,0xc
c001623c:	8b 02                	mov    eax,DWORD PTR [edx]
c001623e:	52                   	push   edx
c001623f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016242:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016245:	83 c4 10             	add    esp,0x10
c0016248:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016252:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016255:	8d 76 00             	lea    esi,[esi+0x0]
c0016258:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001625e:	85 db                	test   ebx,ebx
c0016260:	74 16                	je     c0016278 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0016262:	83 ec 0c             	sub    esp,0xc
c0016265:	53                   	push   ebx
c0016266:	e8 e9 55 ff ff       	call   c000b854 <VAS::~VAS()>
c001626b:	58                   	pop    eax
c001626c:	5a                   	pop    edx
c001626d:	6a 14                	push   0x14
c001626f:	53                   	push   ebx
c0016270:	e8 6b 63 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c0016275:	83 c4 10             	add    esp,0x10
c0016278:	83 c4 1c             	add    esp,0x1c
c001627b:	5b                   	pop    ebx
c001627c:	5e                   	pop    esi
c001627d:	5f                   	pop    edi
c001627e:	5d                   	pop    ebp
c001627f:	c3                   	ret    
c0016280:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016284:	83 ec 0c             	sub    esp,0xc
c0016287:	68 a0 29 02 c0       	push   0xc00229a0
c001628c:	e8 72 c3 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0016291:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016294:	83 c4 10             	add    esp,0x10
c0016297:	89 f7                	mov    edi,esi
c0016299:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001629d:	e9 a6 fe ff ff       	jmp    c0016148 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00162a2:	66 90                	xchg   ax,ax
c00162a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162aa:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00162b0:	75 1e                	jne    c00162d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00162b2:	83 ec 0c             	sub    esp,0xc
c00162b5:	68 08 2a 02 c0       	push   0xc0022a08
c00162ba:	e8 02 64 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00162bf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00162c6:	e8 65 fa ff ff       	call   c0015d30 <blockTask(TaskState)>
c00162cb:	83 c4 10             	add    esp,0x10
c00162ce:	66 90                	xchg   ax,ax
c00162d0:	83 ec 08             	sub    esp,0x8
c00162d3:	56                   	push   esi
c00162d4:	68 a4 74 02 c0       	push   0xc00274a4
c00162d9:	e8 6e 9e 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162de:	c7 04 24 a4 74 02 c0 	mov    DWORD PTR [esp],0xc00274a4
c00162e5:	e8 a2 9d 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162ea:	83 c4 10             	add    esp,0x10
c00162ed:	39 f8                	cmp    eax,edi
c00162ef:	0f 84 37 ff ff ff    	je     c001622c <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00162f5:	8d 76 00             	lea    esi,[esi+0x0]
c00162f8:	83 ec 0c             	sub    esp,0xc
c00162fb:	68 a4 74 02 c0       	push   0xc00274a4
c0016300:	e8 87 9d 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016305:	c7 04 24 a4 74 02 c0 	mov    DWORD PTR [esp],0xc00274a4
c001630c:	89 c6                	mov    esi,eax
c001630e:	e8 81 9d 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016313:	83 c4 10             	add    esp,0x10
c0016316:	39 f3                	cmp    ebx,esi
c0016318:	74 b6                	je     c00162d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001631a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001631d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016320:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016326:	75 a8                	jne    c00162d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0016328:	e9 77 ff ff ff       	jmp    c00162a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c001632d:	8d 76 00             	lea    esi,[esi+0x0]
c0016330:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016334:	83 ec 0c             	sub    esp,0xc
c0016337:	68 d4 29 02 c0       	push   0xc00229d4
c001633c:	e9 4b ff ff ff       	jmp    c001628c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016341:	8d 76 00             	lea    esi,[esi+0x0]
c0016344:	8b 36                	mov    esi,DWORD PTR [esi]
c0016346:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001634a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001634d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016350:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016356:	01 d7                	add    edi,edx
c0016358:	89 f8                	mov    eax,edi
c001635a:	e9 51 fe ff ff       	jmp    c00161b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001635f:	90                   	nop

c0016360 <cleanerTaskFunction(void*)>:
c0016360:	53                   	push   ebx
c0016361:	83 ec 08             	sub    esp,0x8
c0016364:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0016369:	48                   	dec    eax
c001636a:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c001636f:	75 03                	jne    c0016374 <cleanerTaskFunction(void*)+0x14>
c0016371:	fb                   	sti    
c0016372:	66 90                	xchg   ax,ax
c0016374:	fa                   	cli    
c0016375:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001637a:	80 3d 6c 74 02 c0 00 	cmp    BYTE PTR ds:0xc002746c,0x0
c0016381:	8d 50 01             	lea    edx,[eax+0x1]
c0016384:	89 15 88 74 02 c0    	mov    DWORD PTR ds:0xc0027488,edx
c001638a:	0f 84 ac 00 00 00    	je     c001643c <cleanerTaskFunction(void*)+0xdc>
c0016390:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0016395:	85 c0                	test   eax,eax
c0016397:	75 03                	jne    c001639c <cleanerTaskFunction(void*)+0x3c>
c0016399:	fb                   	sti    
c001639a:	66 90                	xchg   ax,ax
c001639c:	c6 05 6c 74 02 c0 00 	mov    BYTE PTR ds:0xc002746c,0x0
c00163a3:	fa                   	cli    
c00163a4:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00163aa:	ff 05 84 74 02 c0    	inc    DWORD PTR ds:0xc0027484
c00163b0:	fa                   	cli    
c00163b1:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00163b7:	eb 2b                	jmp    c00163e4 <cleanerTaskFunction(void*)+0x84>
c00163b9:	8d 76 00             	lea    esi,[esi+0x0]
c00163bc:	83 ec 0c             	sub    esp,0xc
c00163bf:	68 8c 74 02 c0       	push   0xc002748c
c00163c4:	e8 c3 9c 00 00       	call   c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163c9:	c7 04 24 8c 74 02 c0 	mov    DWORD PTR [esp],0xc002748c
c00163d0:	89 c3                	mov    ebx,eax
c00163d2:	e8 bd 9c 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163da:	e8 b9 fc ff ff       	call   c0016098 <cleanupTerminatedTask(ThreadControlBlock*)>
c00163df:	83 c4 10             	add    esp,0x10
c00163e2:	66 90                	xchg   ax,ax
c00163e4:	83 ec 0c             	sub    esp,0xc
c00163e7:	68 8c 74 02 c0       	push   0xc002748c
c00163ec:	e8 7f 9c 00 00       	call   c0020070 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163f1:	83 c4 10             	add    esp,0x10
c00163f4:	84 c0                	test   al,al
c00163f6:	74 c4                	je     c00163bc <cleanerTaskFunction(void*)+0x5c>
c00163f8:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00163fd:	48                   	dec    eax
c00163fe:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0016403:	75 03                	jne    c0016408 <cleanerTaskFunction(void*)+0xa8>
c0016405:	fb                   	sti    
c0016406:	66 90                	xchg   ax,ax
c0016408:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c001640d:	48                   	dec    eax
c001640e:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c0016413:	0f 85 4b ff ff ff    	jne    c0016364 <cleanerTaskFunction(void*)+0x4>
c0016419:	a1 80 74 02 c0       	mov    eax,ds:0xc0027480
c001641e:	85 c0                	test   eax,eax
c0016420:	0f 84 3e ff ff ff    	je     c0016364 <cleanerTaskFunction(void*)+0x4>
c0016426:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c0016430:	e8 03 f7 ff ff       	call   c0015b38 <schedule()>
c0016435:	e9 2a ff ff ff       	jmp    c0016364 <cleanerTaskFunction(void*)+0x4>
c001643a:	66 90                	xchg   ax,ax
c001643c:	83 ec 0c             	sub    esp,0xc
c001643f:	6a 02                	push   0x2
c0016441:	e8 c2 f8 ff ff       	call   c0015d08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016446:	83 c4 10             	add    esp,0x10
c0016449:	e9 4e ff ff ff       	jmp    c001639c <cleanerTaskFunction(void*)+0x3c>
c001644e:	66 90                	xchg   ax,ax

c0016450 <terminateTask(int)>:
c0016450:	83 ec 14             	sub    esp,0x14
c0016453:	fa                   	cli    
c0016454:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c001645a:	ff 05 84 74 02 c0    	inc    DWORD PTR ds:0xc0027484
c0016460:	fa                   	cli    
c0016461:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0016467:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001646b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016470:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016478:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001647b:	50                   	push   eax
c001647c:	68 8c 74 02 c0       	push   0xc002748c
c0016481:	e8 c6 9c 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016486:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001648b:	83 c4 10             	add    esp,0x10
c001648e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016495:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c001649a:	85 c0                	test   eax,eax
c001649c:	74 5e                	je     c00164fc <terminateTask(int)+0xac>
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	c6 05 6c 74 02 c0 01 	mov    BYTE PTR ds:0xc002746c,0x1
c00164a8:	50                   	push   eax
c00164a9:	e8 46 fb ff ff       	call   c0015ff4 <unblockTask(ThreadControlBlock*)>
c00164ae:	83 c4 10             	add    esp,0x10
c00164b1:	8d 76 00             	lea    esi,[esi+0x0]
c00164b4:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00164b9:	48                   	dec    eax
c00164ba:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00164bf:	75 03                	jne    c00164c4 <terminateTask(int)+0x74>
c00164c1:	fb                   	sti    
c00164c2:	66 90                	xchg   ax,ax
c00164c4:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c00164c9:	48                   	dec    eax
c00164ca:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c00164cf:	75 0b                	jne    c00164dc <terminateTask(int)+0x8c>
c00164d1:	83 3d 80 74 02 c0 00 	cmp    DWORD PTR ds:0xc0027480,0x0
c00164d8:	75 36                	jne    c0016510 <terminateTask(int)+0xc0>
c00164da:	66 90                	xchg   ax,ax
c00164dc:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00164e1:	48                   	dec    eax
c00164e2:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00164e7:	75 03                	jne    c00164ec <terminateTask(int)+0x9c>
c00164e9:	fb                   	sti    
c00164ea:	66 90                	xchg   ax,ax
c00164ec:	fa                   	cli    
c00164ed:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00164f3:	90                   	nop
c00164f4:	e8 3f f6 ff ff       	call   c0015b38 <schedule()>
c00164f9:	eb e1                	jmp    c00164dc <terminateTask(int)+0x8c>
c00164fb:	90                   	nop
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	68 06 29 02 c0       	push   0xc0022906
c0016504:	e8 b8 61 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	eb a6                	jmp    c00164b4 <terminateTask(int)+0x64>
c001650e:	66 90                	xchg   ax,ax
c0016510:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c001651a:	eb d8                	jmp    c00164f4 <terminateTask(int)+0xa4>

c001651c <Thr::terminateFromIRQ(int)>:
c001651c:	83 ec 18             	sub    esp,0x18
c001651f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016523:	e8 28 ff ff ff       	call   c0016450 <terminateTask(int)>

c0016528 <Semaphore::release()>:
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001652f:	fa                   	cli    
c0016530:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c0016535:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c001653b:	8d 48 01             	lea    ecx,[eax+0x1]
c001653e:	89 0d 84 74 02 c0    	mov    DWORD PTR ds:0xc0027484,ecx
c0016544:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016547:	85 c9                	test   ecx,ecx
c0016549:	74 41                	je     c001658c <Semaphore::release()+0x64>
c001654b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001654e:	83 ec 0c             	sub    esp,0xc
c0016551:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016554:	51                   	push   ecx
c0016555:	e8 9a fa ff ff       	call   c0015ff4 <unblockTask(ThreadControlBlock*)>
c001655a:	a1 84 74 02 c0       	mov    eax,ds:0xc0027484
c001655f:	83 c4 10             	add    esp,0x10
c0016562:	48                   	dec    eax
c0016563:	90                   	nop
c0016564:	a3 84 74 02 c0       	mov    ds:0xc0027484,eax
c0016569:	85 c0                	test   eax,eax
c001656b:	75 0b                	jne    c0016578 <Semaphore::release()+0x50>
c001656d:	a1 80 74 02 c0       	mov    eax,ds:0xc0027480
c0016572:	85 c0                	test   eax,eax
c0016574:	75 1e                	jne    c0016594 <Semaphore::release()+0x6c>
c0016576:	66 90                	xchg   ax,ax
c0016578:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001657d:	48                   	dec    eax
c001657e:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0016583:	75 03                	jne    c0016588 <Semaphore::release()+0x60>
c0016585:	fb                   	sti    
c0016586:	66 90                	xchg   ax,ax
c0016588:	83 c4 0c             	add    esp,0xc
c001658b:	c3                   	ret    
c001658c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001658f:	eb d3                	jmp    c0016564 <Semaphore::release()+0x3c>
c0016591:	8d 76 00             	lea    esi,[esi+0x0]
c0016594:	c7 05 80 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027480,0x0
c001659e:	e8 95 f5 ff ff       	call   c0015b38 <schedule()>
c00165a3:	eb d3                	jmp    c0016578 <Semaphore::release()+0x50>
c00165a5:	8d 76 00             	lea    esi,[esi+0x0]

c00165a8 <__static_initialization_and_destruction_0(int, int)>:
c00165a8:	83 ec 0c             	sub    esp,0xc
c00165ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00165b0:	0f 85 8e 00 00 00    	jne    c0016644 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165b6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00165be:	0f 85 80 00 00 00    	jne    c0016644 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	68 a4 74 02 c0       	push   0xc00274a4
c00165cc:	e8 27 9e 00 00       	call   c00203f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165d1:	83 c4 10             	add    esp,0x10
c00165d4:	83 ec 04             	sub    esp,0x4
c00165d7:	68 70 37 02 c0       	push   0xc0023770
c00165dc:	68 a4 74 02 c0       	push   0xc00274a4
c00165e1:	68 a8 03 02 c0       	push   0xc00203a8
c00165e6:	e8 6f 5f ff ff       	call   c000c55a <__cxa_atexit>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	83 ec 0c             	sub    esp,0xc
c00165f1:	68 98 74 02 c0       	push   0xc0027498
c00165f6:	e8 fd 9d 00 00       	call   c00203f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165fb:	83 c4 10             	add    esp,0x10
c00165fe:	83 ec 04             	sub    esp,0x4
c0016601:	68 70 37 02 c0       	push   0xc0023770
c0016606:	68 98 74 02 c0       	push   0xc0027498
c001660b:	68 a8 03 02 c0       	push   0xc00203a8
c0016610:	e8 45 5f ff ff       	call   c000c55a <__cxa_atexit>
c0016615:	83 c4 10             	add    esp,0x10
c0016618:	83 ec 0c             	sub    esp,0xc
c001661b:	68 8c 74 02 c0       	push   0xc002748c
c0016620:	e8 d3 9d 00 00       	call   c00203f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016625:	83 c4 10             	add    esp,0x10
c0016628:	83 ec 04             	sub    esp,0x4
c001662b:	68 70 37 02 c0       	push   0xc0023770
c0016630:	68 8c 74 02 c0       	push   0xc002748c
c0016635:	68 a8 03 02 c0       	push   0xc00203a8
c001663a:	e8 1b 5f ff ff       	call   c000c55a <__cxa_atexit>
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	66 90                	xchg   ax,ax
c0016644:	90                   	nop
c0016645:	83 c4 0c             	add    esp,0xc
c0016648:	c3                   	ret    
c0016649:	8d 76 00             	lea    esi,[esi+0x0]

c001664c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001664c:	83 ec 0c             	sub    esp,0xc
c001664f:	83 ec 08             	sub    esp,0x8
c0016652:	68 ff ff 00 00       	push   0xffff
c0016657:	6a 01                	push   0x1
c0016659:	e8 4a ff ff ff       	call   c00165a8 <__static_initialization_and_destruction_0(int, int)>
c001665e:	83 c4 10             	add    esp,0x10
c0016661:	83 c4 0c             	add    esp,0xc
c0016664:	c3                   	ret    

c0016665 <Vm::inbv(unsigned short)>:
c0016665:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016669:	66 81 fa fe fe       	cmp    dx,0xfefe
c001666e:	75 06                	jne    c0016676 <Vm::inbv(unsigned short)+0x11>
c0016670:	a0 ec 74 02 c0       	mov    al,ds:0xc00274ec
c0016675:	c3                   	ret    
c0016676:	ec                   	in     al,dx
c0016677:	c3                   	ret    

c0016678 <Vm::outbv(unsigned short, unsigned char)>:
c0016678:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001667c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016680:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016685:	75 25                	jne    c00166ac <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016687:	8b 0d ec 74 02 c0    	mov    ecx,DWORD PTR ds:0xc00274ec
c001668d:	8d 51 01             	lea    edx,[ecx+0x1]
c0016690:	88 81 00 75 02 c0    	mov    BYTE PTR [ecx-0x3ffd8b00],al
c0016696:	89 15 ec 74 02 c0    	mov    DWORD PTR ds:0xc00274ec,edx
c001669c:	83 fa 20             	cmp    edx,0x20
c001669f:	75 0c                	jne    c00166ad <Vm::outbv(unsigned short, unsigned char)+0x35>
c00166a1:	c7 05 ec 74 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00274ec,0x1f
c00166ab:	c3                   	ret    
c00166ac:	ee                   	out    dx,al
c00166ad:	c3                   	ret    

c00166ae <Vm::realToLinear(unsigned short, unsigned short)>:
c00166ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166b8:	c1 e0 04             	shl    eax,0x4
c00166bb:	01 d0                	add    eax,edx
c00166bd:	c3                   	ret    

c00166be <Vm::getSegment(unsigned int)>:
c00166be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166c2:	c1 e8 10             	shr    eax,0x10
c00166c5:	c3                   	ret    

c00166c6 <Vm::getOffset(unsigned int)>:
c00166c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166ca:	c3                   	ret    

c00166cb <Vm::mainloop2()>:
c00166cb:	83 ec 18             	sub    esp,0x18
c00166ce:	fa                   	cli    
c00166cf:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00166d5:	6a 02                	push   0x2
c00166d7:	c6 05 e5 74 02 c0 01 	mov    BYTE PTR ds:0xc00274e5,0x1
c00166de:	e8 25 f6 ff ff       	call   c0015d08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00166e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00166ec:	52                   	push   edx
c00166ed:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00166f1:	52                   	push   edx
c00166f2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00166f6:	52                   	push   edx
c00166f7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00166fb:	50                   	push   eax
c00166fc:	e8 2e 9b fe ff       	call   c000022f <goToVM86>
c0016701:	83 c4 2c             	add    esp,0x2c
c0016704:	c3                   	ret    

c0016705 <Vm::mainVm8086Loop(void*)>:
c0016705:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001670a:	48                   	dec    eax
c001670b:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0016710:	75 01                	jne    c0016713 <Vm::mainVm8086Loop(void*)+0xe>
c0016712:	fb                   	sti    
c0016713:	eb b6                	jmp    c00166cb <Vm::mainloop2()>

c0016715 <Vm::mainloop3(unsigned long)>:
c0016715:	83 ec 18             	sub    esp,0x18
c0016718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001671c:	fa                   	cli    
c001671d:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0016723:	6a 02                	push   0x2
c0016725:	c6 05 e4 74 02 c0 01 	mov    BYTE PTR ds:0xc00274e4,0x1
c001672c:	a3 e0 74 02 c0       	mov    ds:0xc00274e0,eax
c0016731:	e8 d2 f5 ff ff       	call   c0015d08 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016736:	83 c4 1c             	add    esp,0x1c
c0016739:	eb 90                	jmp    c00166cb <Vm::mainloop2()>

c001673b <Vm::initialise8086()>:
c001673b:	83 ec 0c             	sub    esp,0xc
c001673e:	68 80 00 00 00       	push   0x80
c0016743:	6a 00                	push   0x0
c0016745:	68 05 67 01 c0       	push   0xc0016705
c001674a:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c0016750:	e8 c7 f1 ff ff       	call   c001591c <Process::createThread(void (*)(void*), void*, int)>
c0016755:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001675c:	a3 e8 74 02 c0       	mov    ds:0xc00274e8,eax
c0016761:	68 00 01 00 00       	push   0x100
c0016766:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c001676b:	6a 00                	push   0x0
c001676d:	6a 00                	push   0x0
c001676f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016775:	e8 4e 55 ff ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001677a:	83 c4 2c             	add    esp,0x2c
c001677d:	c3                   	ret    

c001677e <Vm::finish8086()>:
c001677e:	53                   	push   ebx
c001677f:	83 ec 08             	sub    esp,0x8
c0016782:	fa                   	cli    
c0016783:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0016789:	80 3d e4 74 02 c0 00 	cmp    BYTE PTR ds:0xc00274e4,0x0
c0016790:	75 15                	jne    c00167a7 <Vm::finish8086()+0x29>
c0016792:	e8 a1 f3 ff ff       	call   c0015b38 <schedule()>
c0016797:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001679c:	48                   	dec    eax
c001679d:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00167a2:	75 de                	jne    c0016782 <Vm::finish8086()+0x4>
c00167a4:	fb                   	sti    
c00167a5:	eb db                	jmp    c0016782 <Vm::finish8086()+0x4>
c00167a7:	83 ec 0c             	sub    esp,0xc
c00167aa:	8b 1d e0 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274e0
c00167b0:	ff 35 e8 74 02 c0    	push   DWORD PTR ds:0xc00274e8
c00167b6:	c6 05 e4 74 02 c0 00 	mov    BYTE PTR ds:0xc00274e4,0x0
c00167bd:	e8 32 f8 ff ff       	call   c0015ff4 <unblockTask(ThreadControlBlock*)>
c00167c2:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00167c7:	83 c4 10             	add    esp,0x10
c00167ca:	8d 50 ff             	lea    edx,[eax-0x1]
c00167cd:	89 15 88 74 02 c0    	mov    DWORD PTR ds:0xc0027488,edx
c00167d3:	85 d2                	test   edx,edx
c00167d5:	75 01                	jne    c00167d8 <Vm::finish8086()+0x5a>
c00167d7:	fb                   	sti    
c00167d8:	89 d8                	mov    eax,ebx
c00167da:	83 c4 08             	add    esp,0x8
c00167dd:	5b                   	pop    ebx
c00167de:	c3                   	ret    

c00167df <Vm::getOutput8086(unsigned char*)>:
c00167df:	57                   	push   edi
c00167e0:	8b 0d ec 74 02 c0    	mov    ecx,DWORD PTR ds:0xc00274ec
c00167e6:	56                   	push   esi
c00167e7:	be 00 75 02 c0       	mov    esi,0xc0027500
c00167ec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00167f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00167f2:	a1 ec 74 02 c0       	mov    eax,ds:0xc00274ec
c00167f7:	5e                   	pop    esi
c00167f8:	c7 05 ec 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00274ec,0x0
c0016802:	5f                   	pop    edi
c0016803:	c3                   	ret    

c0016804 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016804:	55                   	push   ebp
c0016805:	57                   	push   edi
c0016806:	56                   	push   esi
c0016807:	53                   	push   ebx
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001680f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016813:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016817:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001681b:	fa                   	cli    
c001681c:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c0016822:	80 3d e5 74 02 c0 00 	cmp    BYTE PTR ds:0xc00274e5,0x0
c0016829:	75 15                	jne    c0016840 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001682b:	e8 08 f3 ff ff       	call   c0015b38 <schedule()>
c0016830:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0016835:	48                   	dec    eax
c0016836:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c001683b:	75 de                	jne    c001681b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001683d:	fb                   	sti    
c001683e:	eb db                	jmp    c001681b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016840:	a1 e8 74 02 c0       	mov    eax,ds:0xc00274e8
c0016845:	c7 05 ec 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00274ec,0x0
c001684f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016853:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016857:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001685b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001685f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016863:	0f b7 ff             	movzx  edi,di
c0016866:	0f b7 f6             	movzx  esi,si
c0016869:	50                   	push   eax
c001686a:	6a 20                	push   0x20
c001686c:	6a 00                	push   0x0
c001686e:	68 00 75 02 c0       	push   0xc0027500
c0016873:	e8 30 9c fe ff       	call   c00004a8 <memset>
c0016878:	5a                   	pop    edx
c0016879:	59                   	pop    ecx
c001687a:	57                   	push   edi
c001687b:	56                   	push   esi
c001687c:	e8 2d fe ff ff       	call   c00166ae <Vm::realToLinear(unsigned short, unsigned short)>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	89 c7                	mov    edi,eax
c0016886:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001688a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001688e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016890:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c0016895:	c6 05 e5 74 02 c0 00 	mov    BYTE PTR ds:0xc00274e5,0x0
c001689c:	48                   	dec    eax
c001689d:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00168a2:	75 01                	jne    c00168a5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00168a4:	fb                   	sti    
c00168a5:	83 ec 0c             	sub    esp,0xc
c00168a8:	ff 35 e8 74 02 c0    	push   DWORD PTR ds:0xc00274e8
c00168ae:	e8 41 f7 ff ff       	call   c0015ff4 <unblockTask(ThreadControlBlock*)>
c00168b3:	83 c4 1c             	add    esp,0x1c
c00168b6:	b0 01                	mov    al,0x1
c00168b8:	5b                   	pop    ebx
c00168b9:	5e                   	pop    esi
c00168ba:	5f                   	pop    edi
c00168bb:	5d                   	pop    ebp
c00168bc:	c3                   	ret    

c00168bd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168bd:	55                   	push   ebp
c00168be:	57                   	push   edi
c00168bf:	56                   	push   esi
c00168c0:	53                   	push   ebx
c00168c1:	83 ec 2c             	sub    esp,0x2c
c00168c4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00168c8:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00168cc:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00168d0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00168d4:	fa                   	cli    
c00168d5:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c00168db:	0f b6 35 e5 74 02 c0 	movzx  esi,BYTE PTR ds:0xc00274e5
c00168e2:	89 f0                	mov    eax,esi
c00168e4:	84 c0                	test   al,al
c00168e6:	75 1d                	jne    c0016905 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00168e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00168ec:	e8 47 f2 ff ff       	call   c0015b38 <schedule()>
c00168f1:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00168f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00168fa:	48                   	dec    eax
c00168fb:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0016900:	75 d2                	jne    c00168d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016902:	fb                   	sti    
c0016903:	eb cf                	jmp    c00168d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016905:	a1 e8 74 02 c0       	mov    eax,ds:0xc00274e8
c001690a:	c7 05 ec 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00274ec,0x0
c0016914:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0016918:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001691c:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0016920:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0016924:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016928:	50                   	push   eax
c0016929:	6a 20                	push   0x20
c001692b:	6a 00                	push   0x0
c001692d:	68 00 75 02 c0       	push   0xc0027500
c0016932:	e8 71 9b fe ff       	call   c00004a8 <memset>
c0016937:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001693e:	e8 3c 2e ff ff       	call   c000977f <malloc>
c0016943:	83 c4 0c             	add    esp,0xc
c0016946:	89 c3                	mov    ebx,eax
c0016948:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c001694e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016952:	50                   	push   eax
c0016953:	e8 d4 62 ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0016958:	83 c4 10             	add    esp,0x10
c001695b:	85 db                	test   ebx,ebx
c001695d:	75 0a                	jne    c0016969 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001695f:	83 ec 0c             	sub    esp,0xc
c0016962:	68 30 2a 02 c0       	push   0xc0022a30
c0016967:	eb 3e                	jmp    c00169a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0016969:	50                   	push   eax
c001696a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001696e:	50                   	push   eax
c001696f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016973:	50                   	push   eax
c0016974:	53                   	push   ebx
c0016975:	e8 38 66 ff ff       	call   c000cfb2 <File::stat(unsigned long long*, bool*)>
c001697a:	83 c4 10             	add    esp,0x10
c001697d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016982:	74 0a                	je     c001698e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0016984:	83 ec 0c             	sub    esp,0xc
c0016987:	68 44 2a 02 c0       	push   0xc0022a44
c001698c:	eb 19                	jmp    c00169a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001698e:	51                   	push   ecx
c001698f:	51                   	push   ecx
c0016990:	6a 01                	push   0x1
c0016992:	53                   	push   ebx
c0016993:	e8 6e 63 ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c0016998:	83 c4 10             	add    esp,0x10
c001699b:	85 c0                	test   eax,eax
c001699d:	74 24                	je     c00169c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001699f:	83 ec 0c             	sub    esp,0xc
c00169a2:	68 5d 2a 02 c0       	push   0xc0022a5d
c00169a7:	e8 57 bc ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00169ac:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	48                   	dec    eax
c00169b5:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00169ba:	85 c0                	test   eax,eax
c00169bc:	75 01                	jne    c00169bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00169be:	fb                   	sti    
c00169bf:	31 f6                	xor    esi,esi
c00169c1:	eb 58                	jmp    c0016a1b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00169c3:	0f b7 ed             	movzx  ebp,bp
c00169c6:	50                   	push   eax
c00169c7:	0f b7 ff             	movzx  edi,di
c00169ca:	50                   	push   eax
c00169cb:	55                   	push   ebp
c00169cc:	57                   	push   edi
c00169cd:	e8 dc fc ff ff       	call   c00166ae <Vm::realToLinear(unsigned short, unsigned short)>
c00169d2:	5a                   	pop    edx
c00169d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00169d5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00169d9:	51                   	push   ecx
c00169da:	50                   	push   eax
c00169db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169e3:	53                   	push   ebx
c00169e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00169e7:	83 c4 14             	add    esp,0x14
c00169ea:	53                   	push   ebx
c00169eb:	e8 74 63 ff ff       	call   c000cd64 <File::close()>
c00169f0:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00169f5:	83 c4 10             	add    esp,0x10
c00169f8:	48                   	dec    eax
c00169f9:	c6 05 e5 74 02 c0 00 	mov    BYTE PTR ds:0xc00274e5,0x0
c0016a00:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0016a05:	85 c0                	test   eax,eax
c0016a07:	75 01                	jne    c0016a0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0016a09:	fb                   	sti    
c0016a0a:	83 ec 0c             	sub    esp,0xc
c0016a0d:	ff 35 e8 74 02 c0    	push   DWORD PTR ds:0xc00274e8
c0016a13:	e8 dc f5 ff ff       	call   c0015ff4 <unblockTask(ThreadControlBlock*)>
c0016a18:	83 c4 10             	add    esp,0x10
c0016a1b:	83 c4 2c             	add    esp,0x2c
c0016a1e:	89 f0                	mov    eax,esi
c0016a20:	5b                   	pop    ebx
c0016a21:	5e                   	pop    esi
c0016a22:	5f                   	pop    edi
c0016a23:	5d                   	pop    ebp
c0016a24:	c3                   	ret    

c0016a25 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016a25:	57                   	push   edi
c0016a26:	56                   	push   esi
c0016a27:	53                   	push   ebx
c0016a28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016a34:	83 e8 06             	sub    eax,0x6
c0016a37:	0f b7 c0             	movzx  eax,ax
c0016a3a:	50                   	push   eax
c0016a3b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016a40:	50                   	push   eax
c0016a41:	e8 68 fc ff ff       	call   c00166ae <Vm::realToLinear(unsigned short, unsigned short)>
c0016a46:	5a                   	pop    edx
c0016a47:	5e                   	pop    esi
c0016a48:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016a4b:	8d 56 fa             	lea    edx,[esi-0x6]
c0016a4e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016a54:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0016a57:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0016a5a:	83 c2 02             	add    edx,0x2
c0016a5d:	66 89 10             	mov    WORD PTR [eax],dx
c0016a60:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016a63:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016a67:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016a6a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016a6e:	89 d6                	mov    esi,edx
c0016a70:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016a76:	66 81 e6 ff fd       	and    si,0xfdff
c0016a7b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016a7f:	74 07                	je     c0016a88 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0016a81:	89 d6                	mov    esi,edx
c0016a83:	66 81 ce 00 02       	or     si,0x200
c0016a88:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016a8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a91:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016a95:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016a9d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016aa0:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0016aa8:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016aab:	5b                   	pop    ebx
c0016aac:	5e                   	pop    esi
c0016aad:	5f                   	pop    edi
c0016aae:	c3                   	ret    

c0016aaf <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016aaf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ab4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ab9:	c1 e0 04             	shl    eax,0x4
c0016abc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016abf:	c3                   	ret    

c0016ac0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016ac0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ac5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016aca:	c1 e0 04             	shl    eax,0x4
c0016acd:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016ad1:	c3                   	ret    

c0016ad2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016ad2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ad7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016adc:	c1 e0 04             	shl    eax,0x4
c0016adf:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016ae2:	c3                   	ret    

c0016ae3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016ae3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ae8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016aed:	c1 e0 04             	shl    eax,0x4
c0016af0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016af4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016af7:	c3                   	ret    

c0016af8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016af8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016afd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b02:	c1 e0 04             	shl    eax,0x4
c0016b05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b09:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b0d:	c3                   	ret    

c0016b0e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b18:	c1 e0 04             	shl    eax,0x4
c0016b1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b1f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016b22:	c3                   	ret    

c0016b23 <Vm::faultHandler(regs*)>:
c0016b23:	55                   	push   ebp
c0016b24:	57                   	push   edi
c0016b25:	56                   	push   esi
c0016b26:	53                   	push   ebx
c0016b27:	83 ec 1c             	sub    esp,0x1c
c0016b2a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016b2e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016b31:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016b35:	0f b7 f8             	movzx  edi,ax
c0016b38:	52                   	push   edx
c0016b39:	0f b7 c0             	movzx  eax,ax
c0016b3c:	50                   	push   eax
c0016b3d:	e8 6c fb ff ff       	call   c00166ae <Vm::realToLinear(unsigned short, unsigned short)>
c0016b42:	5a                   	pop    edx
c0016b43:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0016b46:	59                   	pop    ecx
c0016b47:	89 c1                	mov    ecx,eax
c0016b49:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016b4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b50:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b59:	0f b7 c5             	movzx  eax,bp
c0016b5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b60:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0016b64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b68:	e8 41 fb ff ff       	call   c00166ae <Vm::realToLinear(unsigned short, unsigned short)>
c0016b6d:	5e                   	pop    esi
c0016b6e:	be 06 00 00 00       	mov    esi,0x6
c0016b73:	5a                   	pop    edx
c0016b74:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0016b79:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0016b7e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016b81:	80 fa 9d             	cmp    dl,0x9d
c0016b84:	0f 84 2c 02 00 00    	je     c0016db6 <Vm::faultHandler(regs*)+0x293>
c0016b8a:	0f 87 91 00 00 00    	ja     c0016c21 <Vm::faultHandler(regs*)+0xfe>
c0016b90:	80 fa 66             	cmp    dl,0x66
c0016b93:	0f 84 98 01 00 00    	je     c0016d31 <Vm::faultHandler(regs*)+0x20e>
c0016b99:	77 47                	ja     c0016be2 <Vm::faultHandler(regs*)+0xbf>
c0016b9b:	80 fa 36             	cmp    dl,0x36
c0016b9e:	0f 84 80 01 00 00    	je     c0016d24 <Vm::faultHandler(regs*)+0x201>
c0016ba4:	77 1a                	ja     c0016bc0 <Vm::faultHandler(regs*)+0x9d>
c0016ba6:	80 fa 26             	cmp    dl,0x26
c0016ba9:	0f 84 4e 01 00 00    	je     c0016cfd <Vm::faultHandler(regs*)+0x1da>
c0016baf:	80 fa 2e             	cmp    dl,0x2e
c0016bb2:	0f 85 e2 05 00 00    	jne    c001719a <Vm::faultHandler(regs*)+0x677>
c0016bb8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bbb:	31 f6                	xor    esi,esi
c0016bbd:	41                   	inc    ecx
c0016bbe:	eb be                	jmp    c0016b7e <Vm::faultHandler(regs*)+0x5b>
c0016bc0:	80 fa 64             	cmp    dl,0x64
c0016bc3:	0f 84 41 01 00 00    	je     c0016d0a <Vm::faultHandler(regs*)+0x1e7>
c0016bc9:	0f 87 48 01 00 00    	ja     c0016d17 <Vm::faultHandler(regs*)+0x1f4>
c0016bcf:	80 fa 3e             	cmp    dl,0x3e
c0016bd2:	0f 85 c2 05 00 00    	jne    c001719a <Vm::faultHandler(regs*)+0x677>
c0016bd8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016bdb:	be 01 00 00 00       	mov    esi,0x1
c0016be0:	eb db                	jmp    c0016bbd <Vm::faultHandler(regs*)+0x9a>
c0016be2:	80 fa 6d             	cmp    dl,0x6d
c0016be5:	0f 84 ec 02 00 00    	je     c0016ed7 <Vm::faultHandler(regs*)+0x3b4>
c0016beb:	77 17                	ja     c0016c04 <Vm::faultHandler(regs*)+0xe1>
c0016bed:	80 fa 67             	cmp    dl,0x67
c0016bf0:	0f 84 48 01 00 00    	je     c0016d3e <Vm::faultHandler(regs*)+0x21b>
c0016bf6:	80 fa 6c             	cmp    dl,0x6c
c0016bf9:	0f 84 69 02 00 00    	je     c0016e68 <Vm::faultHandler(regs*)+0x345>
c0016bff:	e9 96 05 00 00       	jmp    c001719a <Vm::faultHandler(regs*)+0x677>
c0016c04:	80 fa 6f             	cmp    dl,0x6f
c0016c07:	0f 84 f4 03 00 00    	je     c0017001 <Vm::faultHandler(regs*)+0x4de>
c0016c0d:	0f 82 59 03 00 00    	jb     c0016f6c <Vm::faultHandler(regs*)+0x449>
c0016c13:	80 fa 9c             	cmp    dl,0x9c
c0016c16:	0f 84 2f 01 00 00    	je     c0016d4b <Vm::faultHandler(regs*)+0x228>
c0016c1c:	e9 79 05 00 00       	jmp    c001719a <Vm::faultHandler(regs*)+0x677>
c0016c21:	80 fa ec             	cmp    dl,0xec
c0016c24:	0f 84 14 05 00 00    	je     c001713e <Vm::faultHandler(regs*)+0x61b>
c0016c2a:	77 7b                	ja     c0016ca7 <Vm::faultHandler(regs*)+0x184>
c0016c2c:	80 fa e4             	cmp    dl,0xe4
c0016c2f:	0f 84 93 04 00 00    	je     c00170c8 <Vm::faultHandler(regs*)+0x5a5>
c0016c35:	77 53                	ja     c0016c8a <Vm::faultHandler(regs*)+0x167>
c0016c37:	80 fa cd             	cmp    dl,0xcd
c0016c3a:	0f 84 d9 01 00 00    	je     c0016e19 <Vm::faultHandler(regs*)+0x2f6>
c0016c40:	80 fa cf             	cmp    dl,0xcf
c0016c43:	0f 85 51 05 00 00    	jne    c001719a <Vm::faultHandler(regs*)+0x677>
c0016c49:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016c4c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016c4f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0016c53:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016c56:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0016c5a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016c60:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016c63:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0016c67:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c6d:	66 c1 e8 09          	shr    ax,0x9
c0016c71:	83 e0 01             	and    eax,0x1
c0016c74:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016c77:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016c7a:	83 c0 06             	add    eax,0x6
c0016c7d:	25 ff ff 00 00       	and    eax,0xffff
c0016c82:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016c85:	e9 0c 05 00 00       	jmp    c0017196 <Vm::faultHandler(regs*)+0x673>
c0016c8a:	80 fa e6             	cmp    dl,0xe6
c0016c8d:	0f 84 7f 04 00 00    	je     c0017112 <Vm::faultHandler(regs*)+0x5ef>
c0016c93:	0f 82 4b 04 00 00    	jb     c00170e4 <Vm::faultHandler(regs*)+0x5c1>
c0016c99:	80 fa e7             	cmp    dl,0xe7
c0016c9c:	0f 84 87 04 00 00    	je     c0017129 <Vm::faultHandler(regs*)+0x606>
c0016ca2:	e9 f3 04 00 00       	jmp    c001719a <Vm::faultHandler(regs*)+0x677>
c0016ca7:	80 fa ef             	cmp    dl,0xef
c0016caa:	0f 84 d1 04 00 00    	je     c0017181 <Vm::faultHandler(regs*)+0x65e>
c0016cb0:	77 28                	ja     c0016cda <Vm::faultHandler(regs*)+0x1b7>
c0016cb2:	80 fa ed             	cmp    dl,0xed
c0016cb5:	0f 84 9f 04 00 00    	je     c001715a <Vm::faultHandler(regs*)+0x637>
c0016cbb:	80 fa ee             	cmp    dl,0xee
c0016cbe:	0f 85 d6 04 00 00    	jne    c001719a <Vm::faultHandler(regs*)+0x677>
c0016cc4:	50                   	push   eax
c0016cc5:	50                   	push   eax
c0016cc6:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016cca:	50                   	push   eax
c0016ccb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ccf:	50                   	push   eax
c0016cd0:	e8 a3 f9 ff ff       	call   c0016678 <Vm::outbv(unsigned short, unsigned char)>
c0016cd5:	e9 9f 04 00 00       	jmp    c0017179 <Vm::faultHandler(regs*)+0x656>
c0016cda:	80 fa fa             	cmp    dl,0xfa
c0016cdd:	0f 84 69 01 00 00    	je     c0016e4c <Vm::faultHandler(regs*)+0x329>
c0016ce3:	80 fa fb             	cmp    dl,0xfb
c0016ce6:	0f 84 6e 01 00 00    	je     c0016e5a <Vm::faultHandler(regs*)+0x337>
c0016cec:	80 fa f3             	cmp    dl,0xf3
c0016cef:	0f 85 a5 04 00 00    	jne    c001719a <Vm::faultHandler(regs*)+0x677>
c0016cf5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cf8:	e9 c0 fe ff ff       	jmp    c0016bbd <Vm::faultHandler(regs*)+0x9a>
c0016cfd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d00:	be 02 00 00 00       	mov    esi,0x2
c0016d05:	e9 b3 fe ff ff       	jmp    c0016bbd <Vm::faultHandler(regs*)+0x9a>
c0016d0a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d0d:	be 03 00 00 00       	mov    esi,0x3
c0016d12:	e9 a6 fe ff ff       	jmp    c0016bbd <Vm::faultHandler(regs*)+0x9a>
c0016d17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d1a:	be 04 00 00 00       	mov    esi,0x4
c0016d1f:	e9 99 fe ff ff       	jmp    c0016bbd <Vm::faultHandler(regs*)+0x9a>
c0016d24:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d27:	be 05 00 00 00       	mov    esi,0x5
c0016d2c:	e9 8c fe ff ff       	jmp    c0016bbd <Vm::faultHandler(regs*)+0x9a>
c0016d31:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d34:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0016d39:	e9 7f fe ff ff       	jmp    c0016bbd <Vm::faultHandler(regs*)+0x9a>
c0016d3e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d41:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0016d46:	e9 72 fe ff ff       	jmp    c0016bbd <Vm::faultHandler(regs*)+0x9a>
c0016d4b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016d4e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016d52:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016d57:	74 30                	je     c0016d89 <Vm::faultHandler(regs*)+0x266>
c0016d59:	83 e9 04             	sub    ecx,0x4
c0016d5c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016d62:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016d68:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016d6b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016d6e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016d74:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016d78:	0f 84 15 04 00 00    	je     c0017193 <Vm::faultHandler(regs*)+0x670>
c0016d7e:	80 ce 02             	or     dh,0x2
c0016d81:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016d84:	e9 0a 04 00 00       	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c0016d89:	83 e9 02             	sub    ecx,0x2
c0016d8c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016d92:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016d95:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016d99:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016d9f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016da3:	74 05                	je     c0016daa <Vm::faultHandler(regs*)+0x287>
c0016da5:	80 ce 02             	or     dh,0x2
c0016da8:	eb 03                	jmp    c0016dad <Vm::faultHandler(regs*)+0x28a>
c0016daa:	80 e6 fd             	and    dh,0xfd
c0016dad:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016db1:	e9 dd 03 00 00       	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c0016db6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016dbb:	74 2a                	je     c0016de7 <Vm::faultHandler(regs*)+0x2c4>
c0016dbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0016dbf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016dc5:	81 ca 00 02 02 00    	or     edx,0x20200
c0016dcb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016dce:	8b 00                	mov    eax,DWORD PTR [eax]
c0016dd0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016dd6:	c1 e8 09             	shr    eax,0x9
c0016dd9:	83 e0 01             	and    eax,0x1
c0016ddc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ddf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016de2:	83 c0 04             	add    eax,0x4
c0016de5:	eb 25                	jmp    c0016e0c <Vm::faultHandler(regs*)+0x2e9>
c0016de7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016dea:	81 ca 00 02 02 00    	or     edx,0x20200
c0016df0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016df3:	66 8b 00             	mov    ax,WORD PTR [eax]
c0016df6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016dfc:	66 c1 e8 09          	shr    ax,0x9
c0016e00:	83 e0 01             	and    eax,0x1
c0016e03:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e06:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e09:	83 c0 02             	add    eax,0x2
c0016e0c:	25 ff ff 00 00       	and    eax,0xffff
c0016e11:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016e14:	e9 7a 03 00 00       	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c0016e19:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016e1d:	3c ee                	cmp    al,0xee
c0016e1f:	75 10                	jne    c0016e31 <Vm::faultHandler(regs*)+0x30e>
c0016e21:	83 ec 0c             	sub    esp,0xc
c0016e24:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016e27:	e8 e9 f8 ff ff       	call   c0016715 <Vm::mainloop3(unsigned long)>
c0016e2c:	e9 4b 03 00 00       	jmp    c001717c <Vm::faultHandler(regs*)+0x659>
c0016e31:	83 ec 0c             	sub    esp,0xc
c0016e34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e3c:	51                   	push   ecx
c0016e3d:	50                   	push   eax
c0016e3e:	53                   	push   ebx
c0016e3f:	e8 e1 fb ff ff       	call   c0016a25 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016e44:	83 c4 20             	add    esp,0x20
c0016e47:	e9 4a 03 00 00       	jmp    c0017196 <Vm::faultHandler(regs*)+0x673>
c0016e4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e51:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016e55:	e9 39 03 00 00       	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c0016e5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e5f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016e63:	e9 2b 03 00 00       	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c0016e68:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016e6b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016e70:	74 2b                	je     c0016e9d <Vm::faultHandler(regs*)+0x37a>
c0016e72:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016e79:	76 22                	jbe    c0016e9d <Vm::faultHandler(regs*)+0x37a>
c0016e7b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016e7f:	50                   	push   eax
c0016e80:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016e84:	50                   	push   eax
c0016e85:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016e89:	50                   	push   eax
c0016e8a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016e8e:	50                   	push   eax
c0016e8f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016e93:	50                   	push   eax
c0016e94:	6a 6c                	push   0x6c
c0016e96:	6a 6c                	push   0x6c
c0016e98:	e9 b9 01 00 00       	jmp    c0017056 <Vm::faultHandler(regs*)+0x533>
c0016e9d:	83 ec 0c             	sub    esp,0xc
c0016ea0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016ea4:	0f b7 f6             	movzx  esi,si
c0016ea7:	50                   	push   eax
c0016ea8:	e8 b8 f7 ff ff       	call   c0016665 <Vm::inbv(unsigned short)>
c0016ead:	83 c4 0c             	add    esp,0xc
c0016eb0:	0f b6 c0             	movzx  eax,al
c0016eb3:	50                   	push   eax
c0016eb4:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016eb8:	50                   	push   eax
c0016eb9:	56                   	push   esi
c0016eba:	e8 24 fc ff ff       	call   c0016ae3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016ebf:	83 c4 10             	add    esp,0x10
c0016ec2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ec5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016ec9:	74 03                	je     c0016ece <Vm::faultHandler(regs*)+0x3ab>
c0016ecb:	48                   	dec    eax
c0016ecc:	eb 01                	jmp    c0016ecf <Vm::faultHandler(regs*)+0x3ac>
c0016ece:	40                   	inc    eax
c0016ecf:	0f b7 c0             	movzx  eax,ax
c0016ed2:	e9 8d 00 00 00       	jmp    c0016f64 <Vm::faultHandler(regs*)+0x441>
c0016ed7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016eda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016edd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016ee2:	74 29                	je     c0016f0d <Vm::faultHandler(regs*)+0x3ea>
c0016ee4:	3d ff ff 00 00       	cmp    eax,0xffff
c0016ee9:	76 22                	jbe    c0016f0d <Vm::faultHandler(regs*)+0x3ea>
c0016eeb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016eef:	50                   	push   eax
c0016ef0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016ef4:	50                   	push   eax
c0016ef5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016ef9:	50                   	push   eax
c0016efa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016efe:	50                   	push   eax
c0016eff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f03:	50                   	push   eax
c0016f04:	6a 6d                	push   0x6d
c0016f06:	6a 6d                	push   0x6d
c0016f08:	e9 49 01 00 00       	jmp    c0017056 <Vm::faultHandler(regs*)+0x533>
c0016f0d:	0f b7 c8             	movzx  ecx,ax
c0016f10:	0f b7 f6             	movzx  esi,si
c0016f13:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016f16:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016f1b:	74 20                	je     c0016f3d <Vm::faultHandler(regs*)+0x41a>
c0016f1d:	ed                   	in     eax,dx
c0016f1e:	55                   	push   ebp
c0016f1f:	50                   	push   eax
c0016f20:	51                   	push   ecx
c0016f21:	56                   	push   esi
c0016f22:	e8 e7 fb ff ff       	call   c0016b0e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016f27:	83 c4 10             	add    esp,0x10
c0016f2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f2d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f31:	74 05                	je     c0016f38 <Vm::faultHandler(regs*)+0x415>
c0016f33:	83 e8 04             	sub    eax,0x4
c0016f36:	eb 27                	jmp    c0016f5f <Vm::faultHandler(regs*)+0x43c>
c0016f38:	83 c0 04             	add    eax,0x4
c0016f3b:	eb 22                	jmp    c0016f5f <Vm::faultHandler(regs*)+0x43c>
c0016f3d:	66 ed                	in     ax,dx
c0016f3f:	0f b7 c0             	movzx  eax,ax
c0016f42:	57                   	push   edi
c0016f43:	50                   	push   eax
c0016f44:	51                   	push   ecx
c0016f45:	56                   	push   esi
c0016f46:	e8 ad fb ff ff       	call   c0016af8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016f4b:	83 c4 10             	add    esp,0x10
c0016f4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f51:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f55:	74 05                	je     c0016f5c <Vm::faultHandler(regs*)+0x439>
c0016f57:	83 e8 02             	sub    eax,0x2
c0016f5a:	eb 03                	jmp    c0016f5f <Vm::faultHandler(regs*)+0x43c>
c0016f5c:	83 c0 02             	add    eax,0x2
c0016f5f:	25 ff ff 00 00       	and    eax,0xffff
c0016f64:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016f67:	e9 27 02 00 00       	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c0016f6c:	8d 46 ff             	lea    eax,[esi-0x1]
c0016f6f:	3c 05                	cmp    al,0x5
c0016f71:	77 24                	ja     c0016f97 <Vm::faultHandler(regs*)+0x474>
c0016f73:	0f b6 c0             	movzx  eax,al
c0016f76:	ff 24 85 d0 2a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd530]
c0016f7d:	0f b7 fd             	movzx  edi,bp
c0016f80:	eb 15                	jmp    c0016f97 <Vm::faultHandler(regs*)+0x474>
c0016f82:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016f86:	eb 0f                	jmp    c0016f97 <Vm::faultHandler(regs*)+0x474>
c0016f88:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016f8c:	eb 09                	jmp    c0016f97 <Vm::faultHandler(regs*)+0x474>
c0016f8e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016f92:	eb 03                	jmp    c0016f97 <Vm::faultHandler(regs*)+0x474>
c0016f94:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016f97:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f9a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016f9f:	74 29                	je     c0016fca <Vm::faultHandler(regs*)+0x4a7>
c0016fa1:	3d ff ff 00 00       	cmp    eax,0xffff
c0016fa6:	76 22                	jbe    c0016fca <Vm::faultHandler(regs*)+0x4a7>
c0016fa8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fac:	50                   	push   eax
c0016fad:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fb1:	50                   	push   eax
c0016fb2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fb6:	50                   	push   eax
c0016fb7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fbb:	50                   	push   eax
c0016fbc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fc0:	50                   	push   eax
c0016fc1:	6a 6e                	push   0x6e
c0016fc3:	6a 6e                	push   0x6e
c0016fc5:	e9 8c 00 00 00       	jmp    c0017056 <Vm::faultHandler(regs*)+0x533>
c0016fca:	0f b7 c0             	movzx  eax,ax
c0016fcd:	52                   	push   edx
c0016fce:	52                   	push   edx
c0016fcf:	50                   	push   eax
c0016fd0:	57                   	push   edi
c0016fd1:	e8 d9 fa ff ff       	call   c0016aaf <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016fd6:	59                   	pop    ecx
c0016fd7:	0f b6 c0             	movzx  eax,al
c0016fda:	5e                   	pop    esi
c0016fdb:	50                   	push   eax
c0016fdc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016fe0:	50                   	push   eax
c0016fe1:	e8 92 f6 ff ff       	call   c0016678 <Vm::outbv(unsigned short, unsigned char)>
c0016fe6:	83 c4 10             	add    esp,0x10
c0016fe9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016fec:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016ff0:	74 03                	je     c0016ff5 <Vm::faultHandler(regs*)+0x4d2>
c0016ff2:	48                   	dec    eax
c0016ff3:	eb 01                	jmp    c0016ff6 <Vm::faultHandler(regs*)+0x4d3>
c0016ff5:	40                   	inc    eax
c0016ff6:	0f b7 c0             	movzx  eax,ax
c0016ff9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016ffc:	e9 92 01 00 00       	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c0017001:	8d 46 ff             	lea    eax,[esi-0x1]
c0017004:	3c 05                	cmp    al,0x5
c0017006:	77 1f                	ja     c0017027 <Vm::faultHandler(regs*)+0x504>
c0017008:	0f b6 c0             	movzx  eax,al
c001700b:	ff 24 85 e8 2a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd518]
c0017012:	89 ef                	mov    edi,ebp
c0017014:	eb 11                	jmp    c0017027 <Vm::faultHandler(regs*)+0x504>
c0017016:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017019:	eb 0c                	jmp    c0017027 <Vm::faultHandler(regs*)+0x504>
c001701b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001701e:	eb 07                	jmp    c0017027 <Vm::faultHandler(regs*)+0x504>
c0017020:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017023:	eb 02                	jmp    c0017027 <Vm::faultHandler(regs*)+0x504>
c0017025:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017027:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001702a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001702f:	74 37                	je     c0017068 <Vm::faultHandler(regs*)+0x545>
c0017031:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017037:	76 2f                	jbe    c0017068 <Vm::faultHandler(regs*)+0x545>
c0017039:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001703d:	50                   	push   eax
c001703e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017042:	50                   	push   eax
c0017043:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017047:	50                   	push   eax
c0017048:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001704c:	50                   	push   eax
c001704d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017051:	50                   	push   eax
c0017052:	6a 6f                	push   0x6f
c0017054:	6a 6f                	push   0x6f
c0017056:	68 76 2a 02 c0       	push   0xc0022a76
c001705b:	e8 61 56 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0017060:	83 c4 20             	add    esp,0x20
c0017063:	e9 86 01 00 00       	jmp    c00171ee <Vm::faultHandler(regs*)+0x6cb>
c0017068:	0f b7 d7             	movzx  edx,di
c001706b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001706e:	0f b7 c6             	movzx  eax,si
c0017071:	81 e1 00 04 00 00    	and    ecx,0x400
c0017077:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001707a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001707f:	74 1d                	je     c001709e <Vm::faultHandler(regs*)+0x57b>
c0017081:	55                   	push   ebp
c0017082:	55                   	push   ebp
c0017083:	50                   	push   eax
c0017084:	52                   	push   edx
c0017085:	e8 48 fa ff ff       	call   c0016ad2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001708a:	83 c4 10             	add    esp,0x10
c001708d:	89 fa                	mov    edx,edi
c001708f:	ef                   	out    dx,eax
c0017090:	85 c9                	test   ecx,ecx
c0017092:	74 05                	je     c0017099 <Vm::faultHandler(regs*)+0x576>
c0017094:	83 ee 04             	sub    esi,0x4
c0017097:	eb 21                	jmp    c00170ba <Vm::faultHandler(regs*)+0x597>
c0017099:	83 c6 04             	add    esi,0x4
c001709c:	eb 1c                	jmp    c00170ba <Vm::faultHandler(regs*)+0x597>
c001709e:	55                   	push   ebp
c001709f:	55                   	push   ebp
c00170a0:	50                   	push   eax
c00170a1:	52                   	push   edx
c00170a2:	e8 19 fa ff ff       	call   c0016ac0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00170a7:	83 c4 10             	add    esp,0x10
c00170aa:	89 fa                	mov    edx,edi
c00170ac:	66 ef                	out    dx,ax
c00170ae:	85 c9                	test   ecx,ecx
c00170b0:	74 05                	je     c00170b7 <Vm::faultHandler(regs*)+0x594>
c00170b2:	83 ee 02             	sub    esi,0x2
c00170b5:	eb 03                	jmp    c00170ba <Vm::faultHandler(regs*)+0x597>
c00170b7:	83 c6 02             	add    esi,0x2
c00170ba:	81 e6 ff ff 00 00    	and    esi,0xffff
c00170c0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00170c3:	e9 cb 00 00 00       	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c00170c8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00170cf:	83 ec 0c             	sub    esp,0xc
c00170d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170d6:	50                   	push   eax
c00170d7:	e8 89 f5 ff ff       	call   c0016665 <Vm::inbv(unsigned short)>
c00170dc:	0f b6 c0             	movzx  eax,al
c00170df:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00170e2:	eb 3f                	jmp    c0017123 <Vm::faultHandler(regs*)+0x600>
c00170e4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00170e9:	74 07                	je     c00170f2 <Vm::faultHandler(regs*)+0x5cf>
c00170eb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00170ef:	ed                   	in     eax,dx
c00170f0:	eb 14                	jmp    c0017106 <Vm::faultHandler(regs*)+0x5e3>
c00170f2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00170f5:	66 31 f6             	xor    si,si
c00170f8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00170fb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00170ff:	66 ed                	in     ax,dx
c0017101:	0f b7 c0             	movzx  eax,ax
c0017104:	09 f0                	or     eax,esi
c0017106:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017109:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001710d:	e9 84 00 00 00       	jmp    c0017196 <Vm::faultHandler(regs*)+0x673>
c0017112:	52                   	push   edx
c0017113:	52                   	push   edx
c0017114:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017118:	50                   	push   eax
c0017119:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001711d:	50                   	push   eax
c001711e:	e8 55 f5 ff ff       	call   c0016678 <Vm::outbv(unsigned short, unsigned char)>
c0017123:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017127:	eb 53                	jmp    c001717c <Vm::faultHandler(regs*)+0x659>
c0017129:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001712c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017130:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017135:	74 03                	je     c001713a <Vm::faultHandler(regs*)+0x617>
c0017137:	ef                   	out    dx,eax
c0017138:	eb cf                	jmp    c0017109 <Vm::faultHandler(regs*)+0x5e6>
c001713a:	66 ef                	out    dx,ax
c001713c:	eb cb                	jmp    c0017109 <Vm::faultHandler(regs*)+0x5e6>
c001713e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017145:	83 ec 0c             	sub    esp,0xc
c0017148:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001714c:	50                   	push   eax
c001714d:	e8 13 f5 ff ff       	call   c0016665 <Vm::inbv(unsigned short)>
c0017152:	0f b6 c0             	movzx  eax,al
c0017155:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017158:	eb 1f                	jmp    c0017179 <Vm::faultHandler(regs*)+0x656>
c001715a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001715d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017162:	74 03                	je     c0017167 <Vm::faultHandler(regs*)+0x644>
c0017164:	ed                   	in     eax,dx
c0017165:	eb 0d                	jmp    c0017174 <Vm::faultHandler(regs*)+0x651>
c0017167:	66 ed                	in     ax,dx
c0017169:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001716c:	0f b7 c0             	movzx  eax,ax
c001716f:	66 31 d2             	xor    dx,dx
c0017172:	09 d0                	or     eax,edx
c0017174:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017177:	eb 1a                	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c0017179:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001717c:	83 c4 10             	add    esp,0x10
c001717f:	eb 15                	jmp    c0017196 <Vm::faultHandler(regs*)+0x673>
c0017181:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017184:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017187:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001718c:	74 03                	je     c0017191 <Vm::faultHandler(regs*)+0x66e>
c001718e:	ef                   	out    dx,eax
c001718f:	eb 02                	jmp    c0017193 <Vm::faultHandler(regs*)+0x670>
c0017191:	66 ef                	out    dx,ax
c0017193:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017196:	b0 01                	mov    al,0x1
c0017198:	eb 56                	jmp    c00171f0 <Vm::faultHandler(regs*)+0x6cd>
c001719a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001719e:	50                   	push   eax
c001719f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00171a3:	50                   	push   eax
c00171a4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00171a8:	50                   	push   eax
c00171a9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00171ad:	50                   	push   eax
c00171ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171b2:	50                   	push   eax
c00171b3:	52                   	push   edx
c00171b4:	52                   	push   edx
c00171b5:	68 a3 2a 02 c0       	push   0xc0022aa3
c00171ba:	e8 02 55 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00171bf:	83 c4 20             	add    esp,0x20
c00171c2:	83 ec 0c             	sub    esp,0xc
c00171c5:	6a 60                	push   0x60
c00171c7:	e8 99 f4 ff ff       	call   c0016665 <Vm::inbv(unsigned short)>
c00171cc:	83 c4 10             	add    esp,0x10
c00171cf:	3c 1c                	cmp    al,0x1c
c00171d1:	74 04                	je     c00171d7 <Vm::faultHandler(regs*)+0x6b4>
c00171d3:	3c 5a                	cmp    al,0x5a
c00171d5:	75 eb                	jne    c00171c2 <Vm::faultHandler(regs*)+0x69f>
c00171d7:	3c 5a                	cmp    al,0x5a
c00171d9:	74 04                	je     c00171df <Vm::faultHandler(regs*)+0x6bc>
c00171db:	3c 1c                	cmp    al,0x1c
c00171dd:	75 0f                	jne    c00171ee <Vm::faultHandler(regs*)+0x6cb>
c00171df:	83 ec 0c             	sub    esp,0xc
c00171e2:	6a 60                	push   0x60
c00171e4:	e8 7c f4 ff ff       	call   c0016665 <Vm::inbv(unsigned short)>
c00171e9:	83 c4 10             	add    esp,0x10
c00171ec:	eb e9                	jmp    c00171d7 <Vm::faultHandler(regs*)+0x6b4>
c00171ee:	31 c0                	xor    eax,eax
c00171f0:	83 c4 1c             	add    esp,0x1c
c00171f3:	5b                   	pop    ebx
c00171f4:	5e                   	pop    esi
c00171f5:	5f                   	pop    edi
c00171f6:	5d                   	pop    ebp
c00171f7:	c3                   	ret    

c00171f8 <Vm::fpuInternalTo32(unsigned long long)>:
c00171f8:	57                   	push   edi
c00171f9:	56                   	push   esi
c00171fa:	53                   	push   ebx
c00171fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00171ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017203:	89 d6                	mov    esi,edx
c0017205:	89 d7                	mov    edi,edx
c0017207:	89 c1                	mov    ecx,eax
c0017209:	c1 ef 14             	shr    edi,0x14
c001720c:	89 d3                	mov    ebx,edx
c001720e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0017214:	31 d2                	xor    edx,edx
c0017216:	89 f8                	mov    eax,edi
c0017218:	81 e6 00 00 00 80    	and    esi,0x80000000
c001721e:	bf ff 00 00 00       	mov    edi,0xff
c0017223:	05 80 fc ff ff       	add    eax,0xfffffc80
c0017228:	83 d2 ff             	adc    edx,0xffffffff
c001722b:	39 c7                	cmp    edi,eax
c001722d:	bf 00 00 00 00       	mov    edi,0x0
c0017232:	19 d7                	sbb    edi,edx
c0017234:	72 16                	jb     c001724c <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0017236:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001723a:	c1 e0 17             	shl    eax,0x17
c001723d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0017243:	09 f1                	or     ecx,esi
c0017245:	09 c1                	or     ecx,eax
c0017247:	89 cf                	mov    edi,ecx
c0017249:	eb 05                	jmp    c0017250 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001724b:	90                   	nop
c001724c:	31 ff                	xor    edi,edi
c001724e:	66 90                	xchg   ax,ax
c0017250:	89 f8                	mov    eax,edi
c0017252:	5b                   	pop    ebx
c0017253:	5e                   	pop    esi
c0017254:	5f                   	pop    edi
c0017255:	c3                   	ret    

c0017256 <Vm::fpuInternalTo64(unsigned long long)>:
c0017256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001725a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001725e:	c3                   	ret    

c001725f <Vm::fpu32ToInternal(unsigned int)>:
c001725f:	57                   	push   edi
c0017260:	31 ff                	xor    edi,edi
c0017262:	56                   	push   esi
c0017263:	53                   	push   ebx
c0017264:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017268:	89 cb                	mov    ebx,ecx
c001726a:	89 ce                	mov    esi,ecx
c001726c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0017272:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0017278:	c1 e9 17             	shr    ecx,0x17
c001727b:	89 f0                	mov    eax,esi
c001727d:	0f b6 d1             	movzx  edx,cl
c0017280:	81 c2 80 03 00 00    	add    edx,0x380
c0017286:	89 d1                	mov    ecx,edx
c0017288:	89 fa                	mov    edx,edi
c001728a:	c1 e1 14             	shl    ecx,0x14
c001728d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0017291:	c1 e0 1d             	shl    eax,0x1d
c0017294:	89 d7                	mov    edi,edx
c0017296:	89 c6                	mov    esi,eax
c0017298:	89 ca                	mov    edx,ecx
c001729a:	89 f0                	mov    eax,esi
c001729c:	09 fa                	or     edx,edi
c001729e:	09 da                	or     edx,ebx
c00172a0:	5b                   	pop    ebx
c00172a1:	5e                   	pop    esi
c00172a2:	5f                   	pop    edi
c00172a3:	c3                   	ret    

c00172a4 <Vm::fpu64ToInternal(unsigned long long)>:
c00172a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00172ac:	c3                   	ret    

c00172ad <Vm::fpuFloatToLong(unsigned long long)>:
c00172ad:	57                   	push   edi
c00172ae:	31 c0                	xor    eax,eax
c00172b0:	56                   	push   esi
c00172b1:	31 d2                	xor    edx,edx
c00172b3:	53                   	push   ebx
c00172b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00172b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00172bc:	89 d9                	mov    ecx,ebx
c00172be:	c1 e9 14             	shr    ecx,0x14
c00172c1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00172c7:	89 cf                	mov    edi,ecx
c00172c9:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00172cf:	78 37                	js     c0017308 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00172d1:	89 d9                	mov    ecx,ebx
c00172d3:	89 f0                	mov    eax,esi
c00172d5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00172db:	81 c9 00 00 10 00    	or     ecx,0x100000
c00172e1:	89 ca                	mov    edx,ecx
c00172e3:	b9 34 00 00 00       	mov    ecx,0x34
c00172e8:	29 f9                	sub    ecx,edi
c00172ea:	0f ad d0             	shrd   eax,edx,cl
c00172ed:	d3 fa                	sar    edx,cl
c00172ef:	f6 c1 20             	test   cl,0x20
c00172f2:	74 08                	je     c00172fc <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c00172f4:	89 d0                	mov    eax,edx
c00172f6:	c1 fa 1f             	sar    edx,0x1f
c00172f9:	8d 76 00             	lea    esi,[esi+0x0]
c00172fc:	85 db                	test   ebx,ebx
c00172fe:	79 08                	jns    c0017308 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0017300:	f7 d8                	neg    eax
c0017302:	83 d2 00             	adc    edx,0x0
c0017305:	f7 da                	neg    edx
c0017307:	90                   	nop
c0017308:	5b                   	pop    ebx
c0017309:	5e                   	pop    esi
c001730a:	5f                   	pop    edi
c001730b:	c3                   	ret    

c001730c <Vm::fpuULongToFloat(unsigned long long)>:
c001730c:	57                   	push   edi
c001730d:	31 c9                	xor    ecx,ecx
c001730f:	56                   	push   esi
c0017310:	53                   	push   ebx
c0017311:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017315:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017319:	8d 76 00             	lea    esi,[esi+0x0]
c001731c:	0f ba e7 14          	bt     edi,0x14
c0017320:	72 0a                	jb     c001732c <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0017322:	01 f6                	add    esi,esi
c0017324:	11 ff                	adc    edi,edi
c0017326:	41                   	inc    ecx
c0017327:	eb f3                	jmp    c001731c <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0017329:	8d 76 00             	lea    esi,[esi+0x0]
c001732c:	89 fa                	mov    edx,edi
c001732e:	89 f0                	mov    eax,esi
c0017330:	bb 33 04 00 00       	mov    ebx,0x433
c0017335:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001733b:	29 cb                	sub    ebx,ecx
c001733d:	89 d9                	mov    ecx,ebx
c001733f:	5b                   	pop    ebx
c0017340:	c1 e1 14             	shl    ecx,0x14
c0017343:	5e                   	pop    esi
c0017344:	09 ca                	or     edx,ecx
c0017346:	5f                   	pop    edi
c0017347:	c3                   	ret    

c0017348 <Vm::fpuLongToFloat(long long)>:
c0017348:	56                   	push   esi
c0017349:	31 c0                	xor    eax,eax
c001734b:	53                   	push   ebx
c001734c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017350:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017354:	39 c8                	cmp    eax,ecx
c0017356:	19 d8                	sbb    eax,ebx
c0017358:	7d 06                	jge    c0017360 <Vm::fpuLongToFloat(long long)+0x18>
c001735a:	31 f6                	xor    esi,esi
c001735c:	eb 0e                	jmp    c001736c <Vm::fpuLongToFloat(long long)+0x24>
c001735e:	66 90                	xchg   ax,ax
c0017360:	f7 d9                	neg    ecx
c0017362:	be 01 00 00 00       	mov    esi,0x1
c0017367:	83 d3 00             	adc    ebx,0x0
c001736a:	f7 db                	neg    ebx
c001736c:	31 c0                	xor    eax,eax
c001736e:	66 90                	xchg   ax,ax
c0017370:	0f ba e3 14          	bt     ebx,0x14
c0017374:	72 0a                	jb     c0017380 <Vm::fpuLongToFloat(long long)+0x38>
c0017376:	01 c9                	add    ecx,ecx
c0017378:	11 db                	adc    ebx,ebx
c001737a:	40                   	inc    eax
c001737b:	eb f3                	jmp    c0017370 <Vm::fpuLongToFloat(long long)+0x28>
c001737d:	8d 76 00             	lea    esi,[esi+0x0]
c0017380:	ba 33 04 00 00       	mov    edx,0x433
c0017385:	29 c2                	sub    edx,eax
c0017387:	89 c8                	mov    eax,ecx
c0017389:	c1 e2 14             	shl    edx,0x14
c001738c:	89 d9                	mov    ecx,ebx
c001738e:	89 f3                	mov    ebx,esi
c0017390:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0017396:	09 ca                	or     edx,ecx
c0017398:	84 db                	test   bl,bl
c001739a:	74 08                	je     c00173a4 <Vm::fpuLongToFloat(long long)+0x5c>
c001739c:	81 ca 00 00 00 80    	or     edx,0x80000000
c00173a2:	66 90                	xchg   ax,ax
c00173a4:	5b                   	pop    ebx
c00173a5:	5e                   	pop    esi
c00173a6:	c3                   	ret    

c00173a7 <Vm::fpuGet0()>:
c00173a7:	31 c0                	xor    eax,eax
c00173a9:	31 d2                	xor    edx,edx
c00173ab:	c3                   	ret    

c00173ac <Vm::fpuGet1()>:
c00173ac:	b8 01 00 00 00       	mov    eax,0x1
c00173b1:	31 d2                	xor    edx,edx
c00173b3:	c3                   	ret    

c00173b4 <Vm::fpuGetPi()>:
c00173b4:	b8 03 00 00 00       	mov    eax,0x3
c00173b9:	31 d2                	xor    edx,edx
c00173bb:	c3                   	ret    

c00173bc <Vm::fpuGetLog2E()>:
c00173bc:	83 ec 18             	sub    esp,0x18
c00173bf:	68 00 2b 02 c0       	push   0xc0022b00
c00173c4:	e8 3a b2 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00173c9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00173ce:	31 d2                	xor    edx,edx
c00173d0:	83 c4 1c             	add    esp,0x1c
c00173d3:	c3                   	ret    

c00173d4 <Vm::fpuGetLogE2()>:
c00173d4:	83 ec 18             	sub    esp,0x18
c00173d7:	68 0c 2b 02 c0       	push   0xc0022b0c
c00173dc:	e8 22 b2 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00173e1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00173e6:	31 d2                	xor    edx,edx
c00173e8:	83 c4 1c             	add    esp,0x1c
c00173eb:	c3                   	ret    

c00173ec <Vm::fpuGetLog210()>:
c00173ec:	83 ec 18             	sub    esp,0x18
c00173ef:	68 18 2b 02 c0       	push   0xc0022b18
c00173f4:	e8 0a b2 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00173f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00173fe:	31 d2                	xor    edx,edx
c0017400:	83 c4 1c             	add    esp,0x1c
c0017403:	c3                   	ret    

c0017404 <Vm::fpuGetLog102()>:
c0017404:	83 ec 18             	sub    esp,0x18
c0017407:	68 25 2b 02 c0       	push   0xc0022b25
c001740c:	e8 f2 b1 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0017411:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017416:	31 d2                	xor    edx,edx
c0017418:	83 c4 1c             	add    esp,0x1c
c001741b:	c3                   	ret    

c001741c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001741c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017420:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0017424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017428:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001742c:	0f 92 c0             	setb   al
c001742f:	c3                   	ret    

c0017430 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0017430:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017438:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001743c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0017440:	09 c2                	or     edx,eax
c0017442:	0f 94 c0             	sete   al
c0017445:	c3                   	ret    

c0017446 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0017446:	57                   	push   edi
c0017447:	56                   	push   esi
c0017448:	53                   	push   ebx
c0017449:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001744d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017451:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017455:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017459:	57                   	push   edi
c001745a:	56                   	push   esi
c001745b:	53                   	push   ebx
c001745c:	51                   	push   ecx
c001745d:	e8 ce ff ff ff       	call   c0017430 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0017462:	83 c4 10             	add    esp,0x10
c0017465:	88 c2                	mov    dl,al
c0017467:	31 c0                	xor    eax,eax
c0017469:	84 d2                	test   dl,dl
c001746b:	75 0f                	jne    c001747c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001746d:	57                   	push   edi
c001746e:	56                   	push   esi
c001746f:	53                   	push   ebx
c0017470:	51                   	push   ecx
c0017471:	e8 a6 ff ff ff       	call   c001741c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0017476:	83 c4 10             	add    esp,0x10
c0017479:	8d 76 00             	lea    esi,[esi+0x0]
c001747c:	83 e0 01             	and    eax,0x1
c001747f:	5b                   	pop    ebx
c0017480:	88 c1                	mov    cl,al
c0017482:	83 e2 01             	and    edx,0x1
c0017485:	a0 21 75 02 c0       	mov    al,ds:0xc0027521
c001748a:	c1 e2 06             	shl    edx,0x6
c001748d:	83 e0 ba             	and    eax,0xffffffba
c0017490:	5e                   	pop    esi
c0017491:	09 c8                	or     eax,ecx
c0017493:	5f                   	pop    edi
c0017494:	09 d0                	or     eax,edx
c0017496:	a2 21 75 02 c0       	mov    ds:0xc0027521,al
c001749b:	c3                   	ret    

c001749c <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001749c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00174a4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00174a8:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c00174ac:	c3                   	ret    

c00174ad <Vm::fpuAbs(unsigned long long)>:
c00174ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00174b5:	c3                   	ret    

c00174b6 <Vm::fpuChs(unsigned long long)>:
c00174b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00174be:	f7 d8                	neg    eax
c00174c0:	83 d2 00             	adc    edx,0x0
c00174c3:	f7 da                	neg    edx
c00174c5:	c3                   	ret    

c00174c6 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00174c6:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00174ca:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00174cf:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00174d3:	eb c7                	jmp    c001749c <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00174d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00174d5:	53                   	push   ebx
c00174d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00174da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00174de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00174e6:	0f af ca             	imul   ecx,edx
c00174e9:	0f af d8             	imul   ebx,eax
c00174ec:	f7 e2                	mul    edx
c00174ee:	01 d9                	add    ecx,ebx
c00174f0:	5b                   	pop    ebx
c00174f1:	01 ca                	add    edx,ecx
c00174f3:	c3                   	ret    

c00174f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c00174f4:	83 ec 0c             	sub    esp,0xc
c00174f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017507:	e8 94 85 00 00       	call   c001faa0 <__udivdi3>
c001750c:	83 c4 1c             	add    esp,0x1c
c001750f:	c3                   	ret    

c0017510 <Vm::fpuSquare(unsigned long long)>:
c0017510:	50                   	push   eax
c0017511:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017515:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017519:	52                   	push   edx
c001751a:	50                   	push   eax
c001751b:	52                   	push   edx
c001751c:	50                   	push   eax
c001751d:	e8 b3 ff ff ff       	call   c00174d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017522:	83 c4 14             	add    esp,0x14
c0017525:	c3                   	ret    

c0017526 <Vm::fpuGetReg(int)>:
c0017526:	83 ec 0c             	sub    esp,0xc
c0017529:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001752e:	76 10                	jbe    c0017540 <Vm::fpuGetReg(int)+0x1a>
c0017530:	83 ec 0c             	sub    esp,0xc
c0017533:	68 32 2b 02 c0       	push   0xc0022b32
c0017538:	e8 c6 b0 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001753d:	83 c4 10             	add    esp,0x10
c0017540:	a0 21 75 02 c0       	mov    al,ds:0xc0027521
c0017545:	b9 08 00 00 00       	mov    ecx,0x8
c001754a:	c0 e8 03             	shr    al,0x3
c001754d:	83 e0 07             	and    eax,0x7
c0017550:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017554:	99                   	cdq    
c0017555:	f7 f9                	idiv   ecx
c0017557:	8b 04 d5 24 75 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd8adc]
c001755e:	8b 14 d5 28 75 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8ad8]
c0017565:	83 c4 0c             	add    esp,0xc
c0017568:	c3                   	ret    

c0017569 <Vm::fpuSetReg(int, unsigned long long)>:
c0017569:	57                   	push   edi
c001756a:	56                   	push   esi
c001756b:	52                   	push   edx
c001756c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017570:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017574:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0017579:	76 11                	jbe    c001758c <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001757b:	83 ec 0c             	sub    esp,0xc
c001757e:	68 45 2b 02 c0       	push   0xc0022b45
c0017583:	e8 7b b0 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0017588:	83 c4 10             	add    esp,0x10
c001758b:	90                   	nop
c001758c:	a0 21 75 02 c0       	mov    al,ds:0xc0027521
c0017591:	b9 08 00 00 00       	mov    ecx,0x8
c0017596:	c0 e8 03             	shr    al,0x3
c0017599:	83 e0 07             	and    eax,0x7
c001759c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00175a0:	99                   	cdq    
c00175a1:	f7 f9                	idiv   ecx
c00175a3:	89 34 d5 24 75 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8adc],esi
c00175aa:	89 3c d5 28 75 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8ad8],edi
c00175b1:	58                   	pop    eax
c00175b2:	5e                   	pop    esi
c00175b3:	5f                   	pop    edi
c00175b4:	c3                   	ret    

c00175b5 <Vm::fpuPush(unsigned long long)>:
c00175b5:	a0 21 75 02 c0       	mov    al,ds:0xc0027521
c00175ba:	c0 e8 03             	shr    al,0x3
c00175bd:	83 e0 07             	and    eax,0x7
c00175c0:	83 c0 07             	add    eax,0x7
c00175c3:	88 c2                	mov    dl,al
c00175c5:	83 e0 07             	and    eax,0x7
c00175c8:	83 e2 07             	and    edx,0x7
c00175cb:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00175d2:	8a 15 21 75 02 c0    	mov    dl,BYTE PTR ds:0xc0027521
c00175d8:	83 e2 c7             	and    edx,0xffffffc7
c00175db:	09 ca                	or     edx,ecx
c00175dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00175e1:	88 15 21 75 02 c0    	mov    BYTE PTR ds:0xc0027521,dl
c00175e7:	89 0c c5 28 75 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8ad8],ecx
c00175ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00175f2:	89 14 c5 24 75 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8adc],edx
c00175f9:	a1 64 75 02 c0       	mov    eax,ds:0xc0027564
c00175fe:	83 f8 08             	cmp    eax,0x8
c0017601:	75 09                	jne    c001760c <Vm::fpuPush(unsigned long long)+0x57>
c0017603:	80 0d 20 75 02 c0 40 	or     BYTE PTR ds:0xc0027520,0x40
c001760a:	c3                   	ret    
c001760b:	90                   	nop
c001760c:	40                   	inc    eax
c001760d:	a3 64 75 02 c0       	mov    ds:0xc0027564,eax
c0017612:	c3                   	ret    

c0017613 <Vm::fpuPop()>:
c0017613:	8a 0d 21 75 02 c0    	mov    cl,BYTE PTR ds:0xc0027521
c0017619:	53                   	push   ebx
c001761a:	c0 e9 03             	shr    cl,0x3
c001761d:	8a 1d 21 75 02 c0    	mov    bl,BYTE PTR ds:0xc0027521
c0017623:	83 e1 07             	and    ecx,0x7
c0017626:	83 e3 c7             	and    ebx,0xffffffc7
c0017629:	8b 04 cd 24 75 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd8adc]
c0017630:	8b 14 cd 28 75 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8ad8]
c0017637:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001763e:	83 e1 38             	and    ecx,0x38
c0017641:	09 d9                	or     ecx,ebx
c0017643:	88 0d 21 75 02 c0    	mov    BYTE PTR ds:0xc0027521,cl
c0017649:	8b 0d 64 75 02 c0    	mov    ecx,DWORD PTR ds:0xc0027564
c001764f:	85 c9                	test   ecx,ecx
c0017651:	74 09                	je     c001765c <Vm::fpuPop()+0x49>
c0017653:	49                   	dec    ecx
c0017654:	89 0d 64 75 02 c0    	mov    DWORD PTR ds:0xc0027564,ecx
c001765a:	eb 08                	jmp    c0017664 <Vm::fpuPop()+0x51>
c001765c:	80 0d 20 75 02 c0 40 	or     BYTE PTR ds:0xc0027520,0x40
c0017663:	90                   	nop
c0017664:	5b                   	pop    ebx
c0017665:	c3                   	ret    

c0017666 <Vm::x87Handler(regs*)>:
c0017666:	55                   	push   ebp
c0017667:	57                   	push   edi
c0017668:	56                   	push   esi
c0017669:	53                   	push   ebx
c001766a:	83 ec 1c             	sub    esp,0x1c
c001766d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017671:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0017676:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017679:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0017681:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0017685:	50                   	push   eax
c0017686:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001768a:	50                   	push   eax
c001768b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001768f:	50                   	push   eax
c0017690:	53                   	push   ebx
c0017691:	e8 86 a6 ff ff       	call   c0011d1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0017696:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0017699:	83 c4 10             	add    esp,0x10
c001769c:	89 c6                	mov    esi,eax
c001769e:	80 fa d9             	cmp    dl,0xd9
c00176a1:	0f 85 79 01 00 00    	jne    c0017820 <Vm::x87Handler(regs*)+0x1ba>
c00176a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00176ab:	8d 50 20             	lea    edx,[eax+0x20]
c00176ae:	80 fa 0e             	cmp    dl,0xe
c00176b1:	0f 87 a5 00 00 00    	ja     c001775c <Vm::x87Handler(regs*)+0xf6>
c00176b7:	0f b6 d2             	movzx  edx,dl
c00176ba:	ff 24 95 58 2b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdd4a8]
c00176c1:	8d 76 00             	lea    esi,[esi+0x0]
c00176c4:	e8 de fc ff ff       	call   c00173a7 <Vm::fpuGet0()>
c00176c9:	eb 09                	jmp    c00176d4 <Vm::x87Handler(regs*)+0x6e>
c00176cb:	90                   	nop
c00176cc:	e8 db fc ff ff       	call   c00173ac <Vm::fpuGet1()>
c00176d1:	8d 76 00             	lea    esi,[esi+0x0]
c00176d4:	57                   	push   edi
c00176d5:	57                   	push   edi
c00176d6:	66 90                	xchg   ax,ax
c00176d8:	52                   	push   edx
c00176d9:	50                   	push   eax
c00176da:	e8 d6 fe ff ff       	call   c00175b5 <Vm::fpuPush(unsigned long long)>
c00176df:	90                   	nop
c00176e0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00176e4:	83 c4 10             	add    esp,0x10
c00176e7:	90                   	nop
c00176e8:	b0 01                	mov    al,0x1
c00176ea:	e9 89 0a 00 00       	jmp    c0018178 <Vm::x87Handler(regs*)+0xb12>
c00176ef:	90                   	nop
c00176f0:	83 ec 0c             	sub    esp,0xc
c00176f3:	6a 00                	push   0x0
c00176f5:	e8 2c fe ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c00176fa:	59                   	pop    ecx
c00176fb:	5e                   	pop    esi
c00176fc:	52                   	push   edx
c00176fd:	50                   	push   eax
c00176fe:	e8 b3 fd ff ff       	call   c00174b6 <Vm::fpuChs(unsigned long long)>
c0017703:	eb 17                	jmp    c001771c <Vm::x87Handler(regs*)+0xb6>
c0017705:	8d 76 00             	lea    esi,[esi+0x0]
c0017708:	83 ec 0c             	sub    esp,0xc
c001770b:	6a 00                	push   0x0
c001770d:	e8 14 fe ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017712:	5f                   	pop    edi
c0017713:	5d                   	pop    ebp
c0017714:	52                   	push   edx
c0017715:	50                   	push   eax
c0017716:	e8 92 fd ff ff       	call   c00174ad <Vm::fpuAbs(unsigned long long)>
c001771b:	90                   	nop
c001771c:	83 c4 0c             	add    esp,0xc
c001771f:	90                   	nop
c0017720:	52                   	push   edx
c0017721:	50                   	push   eax
c0017722:	66 90                	xchg   ax,ax
c0017724:	6a 00                	push   0x0
c0017726:	66 90                	xchg   ax,ax
c0017728:	e8 3c fe ff ff       	call   c0017569 <Vm::fpuSetReg(int, unsigned long long)>
c001772d:	eb b1                	jmp    c00176e0 <Vm::x87Handler(regs*)+0x7a>
c001772f:	90                   	nop
c0017730:	e8 b7 fc ff ff       	call   c00173ec <Vm::fpuGetLog210()>
c0017735:	eb 9d                	jmp    c00176d4 <Vm::x87Handler(regs*)+0x6e>
c0017737:	90                   	nop
c0017738:	e8 7f fc ff ff       	call   c00173bc <Vm::fpuGetLog2E()>
c001773d:	eb 95                	jmp    c00176d4 <Vm::x87Handler(regs*)+0x6e>
c001773f:	90                   	nop
c0017740:	e8 6f fc ff ff       	call   c00173b4 <Vm::fpuGetPi()>
c0017745:	eb 8d                	jmp    c00176d4 <Vm::x87Handler(regs*)+0x6e>
c0017747:	90                   	nop
c0017748:	e8 b7 fc ff ff       	call   c0017404 <Vm::fpuGetLog102()>
c001774d:	eb 85                	jmp    c00176d4 <Vm::x87Handler(regs*)+0x6e>
c001774f:	90                   	nop
c0017750:	e8 7f fc ff ff       	call   c00173d4 <Vm::fpuGetLogE2()>
c0017755:	e9 7a ff ff ff       	jmp    c00176d4 <Vm::x87Handler(regs*)+0x6e>
c001775a:	66 90                	xchg   ax,ax
c001775c:	8d 50 40             	lea    edx,[eax+0x40]
c001775f:	80 fa 07             	cmp    dl,0x7
c0017762:	77 18                	ja     c001777c <Vm::x87Handler(regs*)+0x116>
c0017764:	83 ec 0c             	sub    esp,0xc
c0017767:	2d c0 00 00 00       	sub    eax,0xc0
c001776c:	50                   	push   eax
c001776d:	e8 b4 fd ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017772:	59                   	pop    ecx
c0017773:	5e                   	pop    esi
c0017774:	e9 5f ff ff ff       	jmp    c00176d8 <Vm::x87Handler(regs*)+0x72>
c0017779:	8d 76 00             	lea    esi,[esi+0x0]
c001777c:	8d 50 38             	lea    edx,[eax+0x38]
c001777f:	80 fa 07             	cmp    dl,0x7
c0017782:	77 3c                	ja     c00177c0 <Vm::x87Handler(regs*)+0x15a>
c0017784:	83 ec 0c             	sub    esp,0xc
c0017787:	2d c8 00 00 00       	sub    eax,0xc8
c001778c:	50                   	push   eax
c001778d:	e8 94 fd ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017792:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017799:	89 c6                	mov    esi,eax
c001779b:	89 d7                	mov    edi,edx
c001779d:	e8 84 fd ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c00177a2:	83 c4 0c             	add    esp,0xc
c00177a5:	52                   	push   edx
c00177a6:	50                   	push   eax
c00177a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00177ab:	2d c8 00 00 00       	sub    eax,0xc8
c00177b0:	50                   	push   eax
c00177b1:	e8 b3 fd ff ff       	call   c0017569 <Vm::fpuSetReg(int, unsigned long long)>
c00177b6:	83 c4 0c             	add    esp,0xc
c00177b9:	57                   	push   edi
c00177ba:	56                   	push   esi
c00177bb:	e9 64 ff ff ff       	jmp    c0017724 <Vm::x87Handler(regs*)+0xbe>
c00177c0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00177c4:	84 d2                	test   dl,dl
c00177c6:	75 10                	jne    c00177d8 <Vm::x87Handler(regs*)+0x172>
c00177c8:	83 ec 0c             	sub    esp,0xc
c00177cb:	ff 36                	push   DWORD PTR [esi]
c00177cd:	e8 8d fa ff ff       	call   c001725f <Vm::fpu32ToInternal(unsigned int)>
c00177d2:	e9 c9 00 00 00       	jmp    c00178a0 <Vm::x87Handler(regs*)+0x23a>
c00177d7:	90                   	nop
c00177d8:	80 fa 03             	cmp    dl,0x3
c00177db:	75 13                	jne    c00177f0 <Vm::x87Handler(regs*)+0x18a>
c00177dd:	e8 31 fe ff ff       	call   c0017613 <Vm::fpuPop()>
c00177e2:	55                   	push   ebp
c00177e3:	55                   	push   ebp
c00177e4:	52                   	push   edx
c00177e5:	50                   	push   eax
c00177e6:	e8 0d fa ff ff       	call   c00171f8 <Vm::fpuInternalTo32(unsigned long long)>
c00177eb:	e9 90 00 00 00       	jmp    c0017880 <Vm::x87Handler(regs*)+0x21a>
c00177f0:	80 fa 05             	cmp    dl,0x5
c00177f3:	75 0f                	jne    c0017804 <Vm::x87Handler(regs*)+0x19e>
c00177f5:	66 8b 06             	mov    ax,WORD PTR [esi]
c00177f8:	66 a3 22 75 02 c0    	mov    ds:0xc0027522,ax
c00177fe:	e9 ed 00 00 00       	jmp    c00178f0 <Vm::x87Handler(regs*)+0x28a>
c0017803:	90                   	nop
c0017804:	31 c0                	xor    eax,eax
c0017806:	80 fa 07             	cmp    dl,0x7
c0017809:	0f 85 69 09 00 00    	jne    c0018178 <Vm::x87Handler(regs*)+0xb12>
c001780f:	66 a1 22 75 02 c0    	mov    ax,ds:0xc0027522
c0017815:	66 89 06             	mov    WORD PTR [esi],ax
c0017818:	e9 d3 00 00 00       	jmp    c00178f0 <Vm::x87Handler(regs*)+0x28a>
c001781d:	8d 76 00             	lea    esi,[esi+0x0]
c0017820:	80 fa d8             	cmp    dl,0xd8
c0017823:	0f 84 d3 00 00 00    	je     c00178fc <Vm::x87Handler(regs*)+0x296>
c0017829:	80 fa dc             	cmp    dl,0xdc
c001782c:	0f 84 2a 02 00 00    	je     c0017a5c <Vm::x87Handler(regs*)+0x3f6>
c0017832:	80 fa de             	cmp    dl,0xde
c0017835:	0f 84 f1 02 00 00    	je     c0017b2c <Vm::x87Handler(regs*)+0x4c6>
c001783b:	80 fa dd             	cmp    dl,0xdd
c001783e:	0f 84 94 04 00 00    	je     c0017cd8 <Vm::x87Handler(regs*)+0x672>
c0017844:	80 fa da             	cmp    dl,0xda
c0017847:	0f 84 5f 05 00 00    	je     c0017dac <Vm::x87Handler(regs*)+0x746>
c001784d:	80 fa df             	cmp    dl,0xdf
c0017850:	0f 84 aa 05 00 00    	je     c0017e00 <Vm::x87Handler(regs*)+0x79a>
c0017856:	31 c0                	xor    eax,eax
c0017858:	80 fa db             	cmp    dl,0xdb
c001785b:	0f 85 17 09 00 00    	jne    c0018178 <Vm::x87Handler(regs*)+0xb12>
c0017861:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017865:	80 fa 03             	cmp    dl,0x3
c0017868:	0f 85 c2 06 00 00    	jne    c0017f30 <Vm::x87Handler(regs*)+0x8ca>
c001786e:	e8 a0 fd ff ff       	call   c0017613 <Vm::fpuPop()>
c0017873:	55                   	push   ebp
c0017874:	55                   	push   ebp
c0017875:	8d 76 00             	lea    esi,[esi+0x0]
c0017878:	52                   	push   edx
c0017879:	50                   	push   eax
c001787a:	e8 2e fa ff ff       	call   c00172ad <Vm::fpuFloatToLong(unsigned long long)>
c001787f:	90                   	nop
c0017880:	83 c4 10             	add    esp,0x10
c0017883:	89 06                	mov    DWORD PTR [esi],eax
c0017885:	eb 69                	jmp    c00178f0 <Vm::x87Handler(regs*)+0x28a>
c0017887:	90                   	nop
c0017888:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001788c:	84 d2                	test   dl,dl
c001788e:	0f 85 2c 06 00 00    	jne    c0017ec0 <Vm::x87Handler(regs*)+0x85a>
c0017894:	57                   	push   edi
c0017895:	57                   	push   edi
c0017896:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017899:	ff 36                	push   DWORD PTR [esi]
c001789b:	e8 04 fa ff ff       	call   c00172a4 <Vm::fpu64ToInternal(unsigned long long)>
c00178a0:	5e                   	pop    esi
c00178a1:	5f                   	pop    edi
c00178a2:	52                   	push   edx
c00178a3:	50                   	push   eax
c00178a4:	e8 0c fd ff ff       	call   c00175b5 <Vm::fpuPush(unsigned long long)>
c00178a9:	8d 76 00             	lea    esi,[esi+0x0]
c00178ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178b0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00178b3:	e9 2c fe ff ff       	jmp    c00176e4 <Vm::x87Handler(regs*)+0x7e>
c00178b8:	80 fa 03             	cmp    dl,0x3
c00178bb:	0f 85 2b 07 00 00    	jne    c0017fec <Vm::x87Handler(regs*)+0x986>
c00178c1:	57                   	push   edi
c00178c2:	57                   	push   edi
c00178c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00178c6:	ff 36                	push   DWORD PTR [esi]
c00178c8:	e8 d7 f9 ff ff       	call   c00172a4 <Vm::fpu64ToInternal(unsigned long long)>
c00178cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00178d4:	89 c6                	mov    esi,eax
c00178d6:	89 d7                	mov    edi,edx
c00178d8:	e8 49 fc ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c00178dd:	57                   	push   edi
c00178de:	56                   	push   esi
c00178df:	52                   	push   edx
c00178e0:	50                   	push   eax
c00178e1:	e8 60 fb ff ff       	call   c0017446 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00178e6:	83 c4 20             	add    esp,0x20
c00178e9:	e8 25 fd ff ff       	call   c0017613 <Vm::fpuPop()>
c00178ee:	66 90                	xchg   ax,ax
c00178f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178f4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00178f7:	e9 ec fd ff ff       	jmp    c00176e8 <Vm::x87Handler(regs*)+0x82>
c00178fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017900:	8d 50 40             	lea    edx,[eax+0x40]
c0017903:	80 fa 07             	cmp    dl,0x7
c0017906:	77 2c                	ja     c0017934 <Vm::x87Handler(regs*)+0x2ce>
c0017908:	83 ec 0c             	sub    esp,0xc
c001790b:	2d c0 00 00 00       	sub    eax,0xc0
c0017910:	50                   	push   eax
c0017911:	e8 10 fc ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017916:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001791d:	89 c6                	mov    esi,eax
c001791f:	89 d7                	mov    edi,edx
c0017921:	e8 00 fc ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017926:	57                   	push   edi
c0017927:	56                   	push   esi
c0017928:	52                   	push   edx
c0017929:	50                   	push   eax
c001792a:	e8 6d fb ff ff       	call   c001749c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001792f:	eb 33                	jmp    c0017964 <Vm::x87Handler(regs*)+0x2fe>
c0017931:	8d 76 00             	lea    esi,[esi+0x0]
c0017934:	8d 50 38             	lea    edx,[eax+0x38]
c0017937:	80 fa 07             	cmp    dl,0x7
c001793a:	77 30                	ja     c001796c <Vm::x87Handler(regs*)+0x306>
c001793c:	83 ec 0c             	sub    esp,0xc
c001793f:	2d c8 00 00 00       	sub    eax,0xc8
c0017944:	50                   	push   eax
c0017945:	e8 dc fb ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c001794a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017951:	89 c6                	mov    esi,eax
c0017953:	89 d7                	mov    edi,edx
c0017955:	e8 cc fb ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c001795a:	57                   	push   edi
c001795b:	56                   	push   esi
c001795c:	52                   	push   edx
c001795d:	50                   	push   eax
c001795e:	e8 72 fb ff ff       	call   c00174d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017963:	90                   	nop
c0017964:	83 c4 1c             	add    esp,0x1c
c0017967:	e9 b4 fd ff ff       	jmp    c0017720 <Vm::x87Handler(regs*)+0xba>
c001796c:	8d 50 30             	lea    edx,[eax+0x30]
c001796f:	80 fa 07             	cmp    dl,0x7
c0017972:	77 10                	ja     c0017984 <Vm::x87Handler(regs*)+0x31e>
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	2d d0 00 00 00       	sub    eax,0xd0
c001797c:	e9 c3 03 00 00       	jmp    c0017d44 <Vm::x87Handler(regs*)+0x6de>
c0017981:	8d 76 00             	lea    esi,[esi+0x0]
c0017984:	8d 50 28             	lea    edx,[eax+0x28]
c0017987:	80 fa 07             	cmp    dl,0x7
c001798a:	77 10                	ja     c001799c <Vm::x87Handler(regs*)+0x336>
c001798c:	83 ec 0c             	sub    esp,0xc
c001798f:	2d d8 00 00 00       	sub    eax,0xd8
c0017994:	e9 e7 03 00 00       	jmp    c0017d80 <Vm::x87Handler(regs*)+0x71a>
c0017999:	8d 76 00             	lea    esi,[esi+0x0]
c001799c:	8d 50 20             	lea    edx,[eax+0x20]
c001799f:	80 fa 07             	cmp    dl,0x7
c00179a2:	77 1c                	ja     c00179c0 <Vm::x87Handler(regs*)+0x35a>
c00179a4:	83 ec 0c             	sub    esp,0xc
c00179a7:	2d e0 00 00 00       	sub    eax,0xe0
c00179ac:	50                   	push   eax
c00179ad:	e8 74 fb ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c00179b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00179b9:	89 c6                	mov    esi,eax
c00179bb:	89 d7                	mov    edi,edx
c00179bd:	eb 25                	jmp    c00179e4 <Vm::x87Handler(regs*)+0x37e>
c00179bf:	90                   	nop
c00179c0:	8d 50 18             	lea    edx,[eax+0x18]
c00179c3:	80 fa 07             	cmp    dl,0x7
c00179c6:	77 30                	ja     c00179f8 <Vm::x87Handler(regs*)+0x392>
c00179c8:	83 ec 0c             	sub    esp,0xc
c00179cb:	6a 00                	push   0x0
c00179cd:	e8 54 fb ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c00179d2:	89 c6                	mov    esi,eax
c00179d4:	89 d7                	mov    edi,edx
c00179d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00179da:	2d e8 00 00 00       	sub    eax,0xe8
c00179df:	89 04 24             	mov    DWORD PTR [esp],eax
c00179e2:	66 90                	xchg   ax,ax
c00179e4:	e8 3d fb ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c00179e9:	57                   	push   edi
c00179ea:	56                   	push   esi
c00179eb:	52                   	push   edx
c00179ec:	50                   	push   eax
c00179ed:	e8 d4 fa ff ff       	call   c00174c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00179f2:	e9 6d ff ff ff       	jmp    c0017964 <Vm::x87Handler(regs*)+0x2fe>
c00179f7:	90                   	nop
c00179f8:	8d 50 10             	lea    edx,[eax+0x10]
c00179fb:	80 fa 07             	cmp    dl,0x7
c00179fe:	77 1c                	ja     c0017a1c <Vm::x87Handler(regs*)+0x3b6>
c0017a00:	83 ec 0c             	sub    esp,0xc
c0017a03:	2d f0 00 00 00       	sub    eax,0xf0
c0017a08:	50                   	push   eax
c0017a09:	e8 18 fb ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017a0e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017a15:	89 c6                	mov    esi,eax
c0017a17:	89 d7                	mov    edi,edx
c0017a19:	eb 25                	jmp    c0017a40 <Vm::x87Handler(regs*)+0x3da>
c0017a1b:	90                   	nop
c0017a1c:	3c f7                	cmp    al,0xf7
c0017a1e:	0f 86 00 04 00 00    	jbe    c0017e24 <Vm::x87Handler(regs*)+0x7be>
c0017a24:	83 ec 0c             	sub    esp,0xc
c0017a27:	6a 00                	push   0x0
c0017a29:	e8 f8 fa ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017a2e:	89 c6                	mov    esi,eax
c0017a30:	89 d7                	mov    edi,edx
c0017a32:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017a36:	2d f8 00 00 00       	sub    eax,0xf8
c0017a3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a3e:	66 90                	xchg   ax,ax
c0017a40:	e8 e1 fa ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017a45:	57                   	push   edi
c0017a46:	56                   	push   esi
c0017a47:	52                   	push   edx
c0017a48:	50                   	push   eax
c0017a49:	e8 a6 fa ff ff       	call   c00174f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0017a4e:	83 c4 1c             	add    esp,0x1c
c0017a51:	52                   	push   edx
c0017a52:	50                   	push   eax
c0017a53:	6a 00                	push   0x0
c0017a55:	e9 6a 02 00 00       	jmp    c0017cc4 <Vm::x87Handler(regs*)+0x65e>
c0017a5a:	66 90                	xchg   ax,ax
c0017a5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017a60:	8d 50 40             	lea    edx,[eax+0x40]
c0017a63:	80 fa 07             	cmp    dl,0x7
c0017a66:	77 38                	ja     c0017aa0 <Vm::x87Handler(regs*)+0x43a>
c0017a68:	83 ec 0c             	sub    esp,0xc
c0017a6b:	2d c0 00 00 00       	sub    eax,0xc0
c0017a70:	50                   	push   eax
c0017a71:	e8 b0 fa ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017a76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017a7d:	89 c6                	mov    esi,eax
c0017a7f:	89 d7                	mov    edi,edx
c0017a81:	e8 a0 fa ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017a86:	57                   	push   edi
c0017a87:	56                   	push   esi
c0017a88:	52                   	push   edx
c0017a89:	50                   	push   eax
c0017a8a:	e8 0d fa ff ff       	call   c001749c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017a8f:	83 c4 1c             	add    esp,0x1c
c0017a92:	52                   	push   edx
c0017a93:	50                   	push   eax
c0017a94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017a98:	2d c0 00 00 00       	sub    eax,0xc0
c0017a9d:	eb 41                	jmp    c0017ae0 <Vm::x87Handler(regs*)+0x47a>
c0017a9f:	90                   	nop
c0017aa0:	8d 50 38             	lea    edx,[eax+0x38]
c0017aa3:	80 fa 07             	cmp    dl,0x7
c0017aa6:	77 40                	ja     c0017ae8 <Vm::x87Handler(regs*)+0x482>
c0017aa8:	83 ec 0c             	sub    esp,0xc
c0017aab:	2d c8 00 00 00       	sub    eax,0xc8
c0017ab0:	50                   	push   eax
c0017ab1:	e8 70 fa ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017ab6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017abd:	89 c6                	mov    esi,eax
c0017abf:	89 d7                	mov    edi,edx
c0017ac1:	e8 60 fa ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017ac6:	57                   	push   edi
c0017ac7:	56                   	push   esi
c0017ac8:	52                   	push   edx
c0017ac9:	50                   	push   eax
c0017aca:	e8 06 fa ff ff       	call   c00174d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017acf:	83 c4 1c             	add    esp,0x1c
c0017ad2:	52                   	push   edx
c0017ad3:	50                   	push   eax
c0017ad4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017ad8:	2d c8 00 00 00       	sub    eax,0xc8
c0017add:	8d 76 00             	lea    esi,[esi+0x0]
c0017ae0:	50                   	push   eax
c0017ae1:	e9 42 fc ff ff       	jmp    c0017728 <Vm::x87Handler(regs*)+0xc2>
c0017ae6:	66 90                	xchg   ax,ax
c0017ae8:	83 c0 18             	add    eax,0x18
c0017aeb:	3c 07                	cmp    al,0x7
c0017aed:	0f 87 6d 04 00 00    	ja     c0017f60 <Vm::x87Handler(regs*)+0x8fa>
c0017af3:	83 ec 0c             	sub    esp,0xc
c0017af6:	6a 00                	push   0x0
c0017af8:	e8 29 fa ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017afd:	89 c6                	mov    esi,eax
c0017aff:	89 d7                	mov    edi,edx
c0017b01:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017b05:	2d e8 00 00 00       	sub    eax,0xe8
c0017b0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b0d:	e8 14 fa ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017b12:	57                   	push   edi
c0017b13:	56                   	push   esi
c0017b14:	52                   	push   edx
c0017b15:	50                   	push   eax
c0017b16:	e8 ab f9 ff ff       	call   c00174c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017b1b:	83 c4 1c             	add    esp,0x1c
c0017b1e:	52                   	push   edx
c0017b1f:	50                   	push   eax
c0017b20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017b24:	2d e8 00 00 00       	sub    eax,0xe8
c0017b29:	eb b5                	jmp    c0017ae0 <Vm::x87Handler(regs*)+0x47a>
c0017b2b:	90                   	nop
c0017b2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017b30:	8d 50 40             	lea    edx,[eax+0x40]
c0017b33:	80 fa 07             	cmp    dl,0x7
c0017b36:	77 3c                	ja     c0017b74 <Vm::x87Handler(regs*)+0x50e>
c0017b38:	83 ec 0c             	sub    esp,0xc
c0017b3b:	2d c0 00 00 00       	sub    eax,0xc0
c0017b40:	50                   	push   eax
c0017b41:	e8 e0 f9 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017b46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017b4d:	89 c6                	mov    esi,eax
c0017b4f:	89 d7                	mov    edi,edx
c0017b51:	e8 d0 f9 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017b56:	57                   	push   edi
c0017b57:	56                   	push   esi
c0017b58:	52                   	push   edx
c0017b59:	50                   	push   eax
c0017b5a:	e8 3d f9 ff ff       	call   c001749c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017b5f:	83 c4 1c             	add    esp,0x1c
c0017b62:	52                   	push   edx
c0017b63:	50                   	push   eax
c0017b64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017b68:	2d c0 00 00 00       	sub    eax,0xc0
c0017b6d:	e9 b2 01 00 00       	jmp    c0017d24 <Vm::x87Handler(regs*)+0x6be>
c0017b72:	66 90                	xchg   ax,ax
c0017b74:	8d 50 20             	lea    edx,[eax+0x20]
c0017b77:	80 fa 07             	cmp    dl,0x7
c0017b7a:	77 3c                	ja     c0017bb8 <Vm::x87Handler(regs*)+0x552>
c0017b7c:	83 ec 0c             	sub    esp,0xc
c0017b7f:	2d e0 00 00 00       	sub    eax,0xe0
c0017b84:	50                   	push   eax
c0017b85:	e8 9c f9 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017b8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017b91:	89 c6                	mov    esi,eax
c0017b93:	89 d7                	mov    edi,edx
c0017b95:	e8 8c f9 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017b9a:	57                   	push   edi
c0017b9b:	56                   	push   esi
c0017b9c:	52                   	push   edx
c0017b9d:	50                   	push   eax
c0017b9e:	e8 23 f9 ff ff       	call   c00174c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017ba3:	83 c4 1c             	add    esp,0x1c
c0017ba6:	52                   	push   edx
c0017ba7:	50                   	push   eax
c0017ba8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017bac:	2d e0 00 00 00       	sub    eax,0xe0
c0017bb1:	e9 6e 01 00 00       	jmp    c0017d24 <Vm::x87Handler(regs*)+0x6be>
c0017bb6:	66 90                	xchg   ax,ax
c0017bb8:	8d 50 18             	lea    edx,[eax+0x18]
c0017bbb:	80 fa 07             	cmp    dl,0x7
c0017bbe:	77 3c                	ja     c0017bfc <Vm::x87Handler(regs*)+0x596>
c0017bc0:	83 ec 0c             	sub    esp,0xc
c0017bc3:	6a 00                	push   0x0
c0017bc5:	e8 5c f9 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017bca:	89 c6                	mov    esi,eax
c0017bcc:	89 d7                	mov    edi,edx
c0017bce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017bd2:	2d e8 00 00 00       	sub    eax,0xe8
c0017bd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bda:	e8 47 f9 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017bdf:	57                   	push   edi
c0017be0:	56                   	push   esi
c0017be1:	52                   	push   edx
c0017be2:	50                   	push   eax
c0017be3:	e8 de f8 ff ff       	call   c00174c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0017be8:	83 c4 1c             	add    esp,0x1c
c0017beb:	52                   	push   edx
c0017bec:	50                   	push   eax
c0017bed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017bf1:	2d e8 00 00 00       	sub    eax,0xe8
c0017bf6:	e9 29 01 00 00       	jmp    c0017d24 <Vm::x87Handler(regs*)+0x6be>
c0017bfb:	90                   	nop
c0017bfc:	8d 50 38             	lea    edx,[eax+0x38]
c0017bff:	80 fa 07             	cmp    dl,0x7
c0017c02:	77 3c                	ja     c0017c40 <Vm::x87Handler(regs*)+0x5da>
c0017c04:	83 ec 0c             	sub    esp,0xc
c0017c07:	2d c8 00 00 00       	sub    eax,0xc8
c0017c0c:	50                   	push   eax
c0017c0d:	e8 14 f9 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017c12:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017c19:	89 c6                	mov    esi,eax
c0017c1b:	89 d7                	mov    edi,edx
c0017c1d:	e8 04 f9 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017c22:	57                   	push   edi
c0017c23:	56                   	push   esi
c0017c24:	52                   	push   edx
c0017c25:	50                   	push   eax
c0017c26:	e8 aa f8 ff ff       	call   c00174d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0017c2b:	83 c4 1c             	add    esp,0x1c
c0017c2e:	52                   	push   edx
c0017c2f:	50                   	push   eax
c0017c30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017c34:	2d c8 00 00 00       	sub    eax,0xc8
c0017c39:	e9 82 00 00 00       	jmp    c0017cc0 <Vm::x87Handler(regs*)+0x65a>
c0017c3e:	66 90                	xchg   ax,ax
c0017c40:	3c f7                	cmp    al,0xf7
c0017c42:	76 38                	jbe    c0017c7c <Vm::x87Handler(regs*)+0x616>
c0017c44:	83 ec 0c             	sub    esp,0xc
c0017c47:	6a 00                	push   0x0
c0017c49:	e8 d8 f8 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017c4e:	89 c6                	mov    esi,eax
c0017c50:	89 d7                	mov    edi,edx
c0017c52:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017c56:	2d f8 00 00 00       	sub    eax,0xf8
c0017c5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c5e:	e8 c3 f8 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017c63:	57                   	push   edi
c0017c64:	56                   	push   esi
c0017c65:	52                   	push   edx
c0017c66:	50                   	push   eax
c0017c67:	e8 88 f8 ff ff       	call   c00174f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0017c6c:	83 c4 1c             	add    esp,0x1c
c0017c6f:	52                   	push   edx
c0017c70:	50                   	push   eax
c0017c71:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017c75:	2d f8 00 00 00       	sub    eax,0xf8
c0017c7a:	eb 44                	jmp    c0017cc0 <Vm::x87Handler(regs*)+0x65a>
c0017c7c:	8d 50 10             	lea    edx,[eax+0x10]
c0017c7f:	80 fa 07             	cmp    dl,0x7
c0017c82:	0f 87 6c 01 00 00    	ja     c0017df4 <Vm::x87Handler(regs*)+0x78e>
c0017c88:	83 ec 0c             	sub    esp,0xc
c0017c8b:	2d f0 00 00 00       	sub    eax,0xf0
c0017c90:	50                   	push   eax
c0017c91:	e8 90 f8 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017c96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017c9d:	89 c6                	mov    esi,eax
c0017c9f:	89 d7                	mov    edi,edx
c0017ca1:	e8 80 f8 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017ca6:	57                   	push   edi
c0017ca7:	56                   	push   esi
c0017ca8:	52                   	push   edx
c0017ca9:	50                   	push   eax
c0017caa:	e8 45 f8 ff ff       	call   c00174f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0017caf:	83 c4 1c             	add    esp,0x1c
c0017cb2:	52                   	push   edx
c0017cb3:	50                   	push   eax
c0017cb4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017cb8:	2d f0 00 00 00       	sub    eax,0xf0
c0017cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc0:	50                   	push   eax
c0017cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc4:	e8 a0 f8 ff ff       	call   c0017569 <Vm::fpuSetReg(int, unsigned long long)>
c0017cc9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017ccd:	e8 41 f9 ff ff       	call   c0017613 <Vm::fpuPop()>
c0017cd2:	e9 0d fa ff ff       	jmp    c00176e4 <Vm::x87Handler(regs*)+0x7e>
c0017cd7:	90                   	nop
c0017cd8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017cdc:	8d 50 30             	lea    edx,[eax+0x30]
c0017cdf:	80 fa 07             	cmp    dl,0x7
c0017ce2:	77 20                	ja     c0017d04 <Vm::x87Handler(regs*)+0x69e>
c0017ce4:	83 ec 0c             	sub    esp,0xc
c0017ce7:	6a 00                	push   0x0
c0017ce9:	e8 38 f8 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017cee:	83 c4 0c             	add    esp,0xc
c0017cf1:	52                   	push   edx
c0017cf2:	50                   	push   eax
c0017cf3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017cf7:	2d d0 00 00 00       	sub    eax,0xd0
c0017cfc:	e9 df fd ff ff       	jmp    c0017ae0 <Vm::x87Handler(regs*)+0x47a>
c0017d01:	8d 76 00             	lea    esi,[esi+0x0]
c0017d04:	8d 50 28             	lea    edx,[eax+0x28]
c0017d07:	80 fa 07             	cmp    dl,0x7
c0017d0a:	77 28                	ja     c0017d34 <Vm::x87Handler(regs*)+0x6ce>
c0017d0c:	83 ec 0c             	sub    esp,0xc
c0017d0f:	6a 00                	push   0x0
c0017d11:	e8 10 f8 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017d16:	83 c4 0c             	add    esp,0xc
c0017d19:	52                   	push   edx
c0017d1a:	50                   	push   eax
c0017d1b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0017d1f:	2d d8 00 00 00       	sub    eax,0xd8
c0017d24:	50                   	push   eax
c0017d25:	e8 3f f8 ff ff       	call   c0017569 <Vm::fpuSetReg(int, unsigned long long)>
c0017d2a:	e8 e4 f8 ff ff       	call   c0017613 <Vm::fpuPop()>
c0017d2f:	e9 ac f9 ff ff       	jmp    c00176e0 <Vm::x87Handler(regs*)+0x7a>
c0017d34:	8d 50 20             	lea    edx,[eax+0x20]
c0017d37:	80 fa 07             	cmp    dl,0x7
c0017d3a:	77 30                	ja     c0017d6c <Vm::x87Handler(regs*)+0x706>
c0017d3c:	83 ec 0c             	sub    esp,0xc
c0017d3f:	2d e0 00 00 00       	sub    eax,0xe0
c0017d44:	50                   	push   eax
c0017d45:	e8 dc f7 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017d4a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017d51:	89 c6                	mov    esi,eax
c0017d53:	89 d7                	mov    edi,edx
c0017d55:	e8 cc f7 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017d5a:	57                   	push   edi
c0017d5b:	56                   	push   esi
c0017d5c:	52                   	push   edx
c0017d5d:	50                   	push   eax
c0017d5e:	e8 e3 f6 ff ff       	call   c0017446 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0017d63:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017d67:	e9 78 02 00 00       	jmp    c0017fe4 <Vm::x87Handler(regs*)+0x97e>
c0017d6c:	8d 50 18             	lea    edx,[eax+0x18]
c0017d6f:	80 fa 07             	cmp    dl,0x7
c0017d72:	0f 87 10 fb ff ff    	ja     c0017888 <Vm::x87Handler(regs*)+0x222>
c0017d78:	83 ec 0c             	sub    esp,0xc
c0017d7b:	2d e8 00 00 00       	sub    eax,0xe8
c0017d80:	50                   	push   eax
c0017d81:	e8 a0 f7 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017d86:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017d8d:	89 c6                	mov    esi,eax
c0017d8f:	89 d7                	mov    edi,edx
c0017d91:	e8 90 f7 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017d96:	57                   	push   edi
c0017d97:	56                   	push   esi
c0017d98:	52                   	push   edx
c0017d99:	50                   	push   eax
c0017d9a:	e8 a7 f6 ff ff       	call   c0017446 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0017d9f:	83 c4 20             	add    esp,0x20
c0017da2:	e8 6c f8 ff ff       	call   c0017613 <Vm::fpuPop()>
c0017da7:	eb 6f                	jmp    c0017e18 <Vm::x87Handler(regs*)+0x7b2>
c0017da9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dac:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0017db0:	0f 85 22 01 00 00    	jne    c0017ed8 <Vm::x87Handler(regs*)+0x872>
c0017db6:	66 90                	xchg   ax,ax
c0017db8:	83 ec 0c             	sub    esp,0xc
c0017dbb:	6a 01                	push   0x1
c0017dbd:	e8 64 f7 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017dc2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017dc9:	89 c6                	mov    esi,eax
c0017dcb:	89 d7                	mov    edi,edx
c0017dcd:	e8 54 f7 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017dd2:	57                   	push   edi
c0017dd3:	56                   	push   esi
c0017dd4:	52                   	push   edx
c0017dd5:	50                   	push   eax
c0017dd6:	e8 6b f6 ff ff       	call   c0017446 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0017ddb:	83 c4 20             	add    esp,0x20
c0017dde:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017de2:	e8 2c f8 ff ff       	call   c0017613 <Vm::fpuPop()>
c0017de7:	e8 27 f8 ff ff       	call   c0017613 <Vm::fpuPop()>
c0017dec:	e9 f7 f8 ff ff       	jmp    c00176e8 <Vm::x87Handler(regs*)+0x82>
c0017df1:	8d 76 00             	lea    esi,[esi+0x0]
c0017df4:	3c d9                	cmp    al,0xd9
c0017df6:	0f 85 e8 02 00 00    	jne    c00180e4 <Vm::x87Handler(regs*)+0xa7e>
c0017dfc:	eb ba                	jmp    c0017db8 <Vm::x87Handler(regs*)+0x752>
c0017dfe:	66 90                	xchg   ax,ax
c0017e00:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0017e04:	0f 85 2a 03 00 00    	jne    c0018134 <Vm::x87Handler(regs*)+0xace>
c0017e0a:	0f b7 05 20 75 02 c0 	movzx  eax,WORD PTR ds:0xc0027520
c0017e11:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0017e15:	8d 76 00             	lea    esi,[esi+0x0]
c0017e18:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017e1c:	e9 c7 f8 ff ff       	jmp    c00176e8 <Vm::x87Handler(regs*)+0x82>
c0017e21:	8d 76 00             	lea    esi,[esi+0x0]
c0017e24:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017e28:	84 d2                	test   dl,dl
c0017e2a:	75 10                	jne    c0017e3c <Vm::x87Handler(regs*)+0x7d6>
c0017e2c:	83 ec 0c             	sub    esp,0xc
c0017e2f:	ff 36                	push   DWORD PTR [esi]
c0017e31:	e8 29 f4 ff ff       	call   c001725f <Vm::fpu32ToInternal(unsigned int)>
c0017e36:	e9 39 01 00 00       	jmp    c0017f74 <Vm::x87Handler(regs*)+0x90e>
c0017e3b:	90                   	nop
c0017e3c:	80 fa 01             	cmp    dl,0x1
c0017e3f:	75 0f                	jne    c0017e50 <Vm::x87Handler(regs*)+0x7ea>
c0017e41:	83 ec 0c             	sub    esp,0xc
c0017e44:	ff 36                	push   DWORD PTR [esi]
c0017e46:	e8 14 f4 ff ff       	call   c001725f <Vm::fpu32ToInternal(unsigned int)>
c0017e4b:	e9 b4 02 00 00       	jmp    c0018104 <Vm::x87Handler(regs*)+0xa9e>
c0017e50:	80 fa 04             	cmp    dl,0x4
c0017e53:	75 0f                	jne    c0017e64 <Vm::x87Handler(regs*)+0x7fe>
c0017e55:	83 ec 0c             	sub    esp,0xc
c0017e58:	ff 36                	push   DWORD PTR [esi]
c0017e5a:	e8 00 f4 ff ff       	call   c001725f <Vm::fpu32ToInternal(unsigned int)>
c0017e5f:	e9 9c 01 00 00       	jmp    c0018000 <Vm::x87Handler(regs*)+0x99a>
c0017e64:	80 fa 05             	cmp    dl,0x5
c0017e67:	75 1b                	jne    c0017e84 <Vm::x87Handler(regs*)+0x81e>
c0017e69:	83 ec 0c             	sub    esp,0xc
c0017e6c:	6a 00                	push   0x0
c0017e6e:	e8 b3 f6 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017e73:	89 c7                	mov    edi,eax
c0017e75:	89 d5                	mov    ebp,edx
c0017e77:	58                   	pop    eax
c0017e78:	ff 36                	push   DWORD PTR [esi]
c0017e7a:	e8 e0 f3 ff ff       	call   c001725f <Vm::fpu32ToInternal(unsigned int)>
c0017e7f:	e9 bc 01 00 00       	jmp    c0018040 <Vm::x87Handler(regs*)+0x9da>
c0017e84:	80 fa 06             	cmp    dl,0x6
c0017e87:	75 0f                	jne    c0017e98 <Vm::x87Handler(regs*)+0x832>
c0017e89:	83 ec 0c             	sub    esp,0xc
c0017e8c:	ff 36                	push   DWORD PTR [esi]
c0017e8e:	e8 cc f3 ff ff       	call   c001725f <Vm::fpu32ToInternal(unsigned int)>
c0017e93:	e9 cc 01 00 00       	jmp    c0018064 <Vm::x87Handler(regs*)+0x9fe>
c0017e98:	31 c0                	xor    eax,eax
c0017e9a:	80 fa 07             	cmp    dl,0x7
c0017e9d:	0f 85 d5 02 00 00    	jne    c0018178 <Vm::x87Handler(regs*)+0xb12>
c0017ea3:	83 ec 0c             	sub    esp,0xc
c0017ea6:	6a 00                	push   0x0
c0017ea8:	e8 79 f6 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017ead:	89 c7                	mov    edi,eax
c0017eaf:	89 d5                	mov    ebp,edx
c0017eb1:	58                   	pop    eax
c0017eb2:	ff 36                	push   DWORD PTR [esi]
c0017eb4:	e8 a6 f3 ff ff       	call   c001725f <Vm::fpu32ToInternal(unsigned int)>
c0017eb9:	e9 ee 01 00 00       	jmp    c00180ac <Vm::x87Handler(regs*)+0xa46>
c0017ebe:	66 90                	xchg   ax,ax
c0017ec0:	80 fa 03             	cmp    dl,0x3
c0017ec3:	0f 85 f7 01 00 00    	jne    c00180c0 <Vm::x87Handler(regs*)+0xa5a>
c0017ec9:	e8 45 f7 ff ff       	call   c0017613 <Vm::fpuPop()>
c0017ece:	51                   	push   ecx
c0017ecf:	51                   	push   ecx
c0017ed0:	e9 03 02 00 00       	jmp    c00180d8 <Vm::x87Handler(regs*)+0xa72>
c0017ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ed8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017edc:	80 fa 01             	cmp    dl,0x1
c0017edf:	75 0b                	jne    c0017eec <Vm::x87Handler(regs*)+0x886>
c0017ee1:	57                   	push   edi
c0017ee2:	57                   	push   edi
c0017ee3:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ee5:	e9 0e 02 00 00       	jmp    c00180f8 <Vm::x87Handler(regs*)+0xa92>
c0017eea:	66 90                	xchg   ax,ax
c0017eec:	80 fa 04             	cmp    dl,0x4
c0017eef:	75 13                	jne    c0017f04 <Vm::x87Handler(regs*)+0x89e>
c0017ef1:	31 d2                	xor    edx,edx
c0017ef3:	51                   	push   ecx
c0017ef4:	51                   	push   ecx
c0017ef5:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ef7:	52                   	push   edx
c0017ef8:	50                   	push   eax
c0017ef9:	e8 4a f4 ff ff       	call   c0017348 <Vm::fpuLongToFloat(long long)>
c0017efe:	e9 fd 00 00 00       	jmp    c0018000 <Vm::x87Handler(regs*)+0x99a>
c0017f03:	90                   	nop
c0017f04:	31 c0                	xor    eax,eax
c0017f06:	80 fa 07             	cmp    dl,0x7
c0017f09:	0f 85 69 02 00 00    	jne    c0018178 <Vm::x87Handler(regs*)+0xb12>
c0017f0f:	83 ec 0c             	sub    esp,0xc
c0017f12:	6a 00                	push   0x0
c0017f14:	e8 0d f6 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017f19:	89 c7                	mov    edi,eax
c0017f1b:	89 d5                	mov    ebp,edx
c0017f1d:	58                   	pop    eax
c0017f1e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017f20:	5a                   	pop    edx
c0017f21:	31 d2                	xor    edx,edx
c0017f23:	52                   	push   edx
c0017f24:	50                   	push   eax
c0017f25:	e8 1e f4 ff ff       	call   c0017348 <Vm::fpuLongToFloat(long long)>
c0017f2a:	e9 7d 01 00 00       	jmp    c00180ac <Vm::x87Handler(regs*)+0xa46>
c0017f2f:	90                   	nop
c0017f30:	84 d2                	test   dl,dl
c0017f32:	75 10                	jne    c0017f44 <Vm::x87Handler(regs*)+0x8de>
c0017f34:	31 d2                	xor    edx,edx
c0017f36:	55                   	push   ebp
c0017f37:	55                   	push   ebp
c0017f38:	8b 06                	mov    eax,DWORD PTR [esi]
c0017f3a:	52                   	push   edx
c0017f3b:	50                   	push   eax
c0017f3c:	e9 03 02 00 00       	jmp    c0018144 <Vm::x87Handler(regs*)+0xade>
c0017f41:	8d 76 00             	lea    esi,[esi+0x0]
c0017f44:	31 c0                	xor    eax,eax
c0017f46:	80 fa 02             	cmp    dl,0x2
c0017f49:	0f 85 29 02 00 00    	jne    c0018178 <Vm::x87Handler(regs*)+0xb12>
c0017f4f:	83 ec 0c             	sub    esp,0xc
c0017f52:	6a 00                	push   0x0
c0017f54:	e8 cd f5 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017f59:	59                   	pop    ecx
c0017f5a:	5f                   	pop    edi
c0017f5b:	e9 18 f9 ff ff       	jmp    c0017878 <Vm::x87Handler(regs*)+0x212>
c0017f60:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0017f64:	84 d2                	test   dl,dl
c0017f66:	75 2c                	jne    c0017f94 <Vm::x87Handler(regs*)+0x92e>
c0017f68:	50                   	push   eax
c0017f69:	50                   	push   eax
c0017f6a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017f6d:	ff 36                	push   DWORD PTR [esi]
c0017f6f:	e8 30 f3 ff ff       	call   c00172a4 <Vm::fpu64ToInternal(unsigned long long)>
c0017f74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017f7b:	89 c6                	mov    esi,eax
c0017f7d:	89 d7                	mov    edi,edx
c0017f7f:	e8 a2 f5 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017f84:	57                   	push   edi
c0017f85:	56                   	push   esi
c0017f86:	52                   	push   edx
c0017f87:	50                   	push   eax
c0017f88:	e8 0f f5 ff ff       	call   c001749c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0017f8d:	e9 8e 01 00 00       	jmp    c0018120 <Vm::x87Handler(regs*)+0xaba>
c0017f92:	66 90                	xchg   ax,ax
c0017f94:	80 fa 01             	cmp    dl,0x1
c0017f97:	75 13                	jne    c0017fac <Vm::x87Handler(regs*)+0x946>
c0017f99:	50                   	push   eax
c0017f9a:	50                   	push   eax
c0017f9b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017f9e:	ff 36                	push   DWORD PTR [esi]
c0017fa0:	e8 ff f2 ff ff       	call   c00172a4 <Vm::fpu64ToInternal(unsigned long long)>
c0017fa5:	e9 5a 01 00 00       	jmp    c0018104 <Vm::x87Handler(regs*)+0xa9e>
c0017faa:	66 90                	xchg   ax,ax
c0017fac:	80 fa 02             	cmp    dl,0x2
c0017faf:	0f 85 03 f9 ff ff    	jne    c00178b8 <Vm::x87Handler(regs*)+0x252>
c0017fb5:	55                   	push   ebp
c0017fb6:	55                   	push   ebp
c0017fb7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017fba:	ff 36                	push   DWORD PTR [esi]
c0017fbc:	e8 e3 f2 ff ff       	call   c00172a4 <Vm::fpu64ToInternal(unsigned long long)>
c0017fc1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017fc8:	89 c6                	mov    esi,eax
c0017fca:	89 d7                	mov    edi,edx
c0017fcc:	e8 55 f5 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0017fd1:	57                   	push   edi
c0017fd2:	56                   	push   esi
c0017fd3:	52                   	push   edx
c0017fd4:	50                   	push   eax
c0017fd5:	e8 6c f4 ff ff       	call   c0017446 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0017fda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fde:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0017fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fe4:	83 c4 20             	add    esp,0x20
c0017fe7:	e9 fc f6 ff ff       	jmp    c00176e8 <Vm::x87Handler(regs*)+0x82>
c0017fec:	80 fa 04             	cmp    dl,0x4
c0017fef:	75 2f                	jne    c0018020 <Vm::x87Handler(regs*)+0x9ba>
c0017ff1:	51                   	push   ecx
c0017ff2:	51                   	push   ecx
c0017ff3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0017ff6:	ff 36                	push   DWORD PTR [esi]
c0017ff8:	e8 a7 f2 ff ff       	call   c00172a4 <Vm::fpu64ToInternal(unsigned long long)>
c0017ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0018000:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018007:	89 c6                	mov    esi,eax
c0018009:	89 d7                	mov    edi,edx
c001800b:	e8 16 f5 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0018010:	57                   	push   edi
c0018011:	56                   	push   esi
c0018012:	52                   	push   edx
c0018013:	50                   	push   eax
c0018014:	e8 ad f4 ff ff       	call   c00174c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018019:	e9 02 01 00 00       	jmp    c0018120 <Vm::x87Handler(regs*)+0xaba>
c001801e:	66 90                	xchg   ax,ax
c0018020:	80 fa 05             	cmp    dl,0x5
c0018023:	75 2b                	jne    c0018050 <Vm::x87Handler(regs*)+0x9ea>
c0018025:	83 ec 0c             	sub    esp,0xc
c0018028:	6a 00                	push   0x0
c001802a:	e8 f7 f4 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c001802f:	89 c7                	mov    edi,eax
c0018031:	89 d5                	mov    ebp,edx
c0018033:	58                   	pop    eax
c0018034:	5a                   	pop    edx
c0018035:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018038:	ff 36                	push   DWORD PTR [esi]
c001803a:	e8 65 f2 ff ff       	call   c00172a4 <Vm::fpu64ToInternal(unsigned long long)>
c001803f:	90                   	nop
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	55                   	push   ebp
c0018044:	57                   	push   edi
c0018045:	52                   	push   edx
c0018046:	50                   	push   eax
c0018047:	e8 7a f4 ff ff       	call   c00174c6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001804c:	eb 6a                	jmp    c00180b8 <Vm::x87Handler(regs*)+0xa52>
c001804e:	66 90                	xchg   ax,ax
c0018050:	80 fa 06             	cmp    dl,0x6
c0018053:	75 2f                	jne    c0018084 <Vm::x87Handler(regs*)+0xa1e>
c0018055:	51                   	push   ecx
c0018056:	51                   	push   ecx
c0018057:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001805a:	ff 36                	push   DWORD PTR [esi]
c001805c:	e8 43 f2 ff ff       	call   c00172a4 <Vm::fpu64ToInternal(unsigned long long)>
c0018061:	8d 76 00             	lea    esi,[esi+0x0]
c0018064:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001806b:	89 c6                	mov    esi,eax
c001806d:	89 d7                	mov    edi,edx
c001806f:	e8 b2 f4 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0018074:	57                   	push   edi
c0018075:	56                   	push   esi
c0018076:	52                   	push   edx
c0018077:	50                   	push   eax
c0018078:	e8 77 f4 ff ff       	call   c00174f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001807d:	e9 9e 00 00 00       	jmp    c0018120 <Vm::x87Handler(regs*)+0xaba>
c0018082:	66 90                	xchg   ax,ax
c0018084:	31 c0                	xor    eax,eax
c0018086:	80 fa 07             	cmp    dl,0x7
c0018089:	0f 85 e9 00 00 00    	jne    c0018178 <Vm::x87Handler(regs*)+0xb12>
c001808f:	83 ec 0c             	sub    esp,0xc
c0018092:	6a 00                	push   0x0
c0018094:	e8 8d f4 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0018099:	89 c7                	mov    edi,eax
c001809b:	89 d5                	mov    ebp,edx
c001809d:	58                   	pop    eax
c001809e:	5a                   	pop    edx
c001809f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00180a2:	ff 36                	push   DWORD PTR [esi]
c00180a4:	e8 fb f1 ff ff       	call   c00172a4 <Vm::fpu64ToInternal(unsigned long long)>
c00180a9:	8d 76 00             	lea    esi,[esi+0x0]
c00180ac:	83 c4 10             	add    esp,0x10
c00180af:	55                   	push   ebp
c00180b0:	57                   	push   edi
c00180b1:	52                   	push   edx
c00180b2:	50                   	push   eax
c00180b3:	e8 3c f4 ff ff       	call   c00174f4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00180b8:	83 c4 0c             	add    esp,0xc
c00180bb:	eb 67                	jmp    c0018124 <Vm::x87Handler(regs*)+0xabe>
c00180bd:	8d 76 00             	lea    esi,[esi+0x0]
c00180c0:	31 c0                	xor    eax,eax
c00180c2:	80 fa 02             	cmp    dl,0x2
c00180c5:	0f 85 ad 00 00 00    	jne    c0018178 <Vm::x87Handler(regs*)+0xb12>
c00180cb:	83 ec 0c             	sub    esp,0xc
c00180ce:	6a 00                	push   0x0
c00180d0:	e8 51 f4 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c00180d5:	59                   	pop    ecx
c00180d6:	5f                   	pop    edi
c00180d7:	90                   	nop
c00180d8:	52                   	push   edx
c00180d9:	50                   	push   eax
c00180da:	e8 77 f1 ff ff       	call   c0017256 <Vm::fpuInternalTo64(unsigned long long)>
c00180df:	e9 84 00 00 00       	jmp    c0018168 <Vm::x87Handler(regs*)+0xb02>
c00180e4:	31 c0                	xor    eax,eax
c00180e6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00180eb:	0f 85 87 00 00 00    	jne    c0018178 <Vm::x87Handler(regs*)+0xb12>
c00180f1:	50                   	push   eax
c00180f2:	50                   	push   eax
c00180f3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00180f6:	66 90                	xchg   ax,ax
c00180f8:	31 d2                	xor    edx,edx
c00180fa:	52                   	push   edx
c00180fb:	50                   	push   eax
c00180fc:	e8 47 f2 ff ff       	call   c0017348 <Vm::fpuLongToFloat(long long)>
c0018101:	8d 76 00             	lea    esi,[esi+0x0]
c0018104:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001810b:	89 c6                	mov    esi,eax
c001810d:	89 d7                	mov    edi,edx
c001810f:	e8 12 f4 ff ff       	call   c0017526 <Vm::fpuGetReg(int)>
c0018114:	57                   	push   edi
c0018115:	56                   	push   esi
c0018116:	52                   	push   edx
c0018117:	50                   	push   eax
c0018118:	e8 b8 f3 ff ff       	call   c00174d5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001811d:	8d 76 00             	lea    esi,[esi+0x0]
c0018120:	83 c4 1c             	add    esp,0x1c
c0018123:	90                   	nop
c0018124:	52                   	push   edx
c0018125:	50                   	push   eax
c0018126:	6a 00                	push   0x0
c0018128:	e8 3c f4 ff ff       	call   c0017569 <Vm::fpuSetReg(int, unsigned long long)>
c001812d:	e9 7a f7 ff ff       	jmp    c00178ac <Vm::x87Handler(regs*)+0x246>
c0018132:	66 90                	xchg   ax,ax
c0018134:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018138:	80 fa 05             	cmp    dl,0x5
c001813b:	75 13                	jne    c0018150 <Vm::x87Handler(regs*)+0xaea>
c001813d:	55                   	push   ebp
c001813e:	55                   	push   ebp
c001813f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018142:	ff 36                	push   DWORD PTR [esi]
c0018144:	e8 c3 f1 ff ff       	call   c001730c <Vm::fpuULongToFloat(unsigned long long)>
c0018149:	e9 52 f7 ff ff       	jmp    c00178a0 <Vm::x87Handler(regs*)+0x23a>
c001814e:	66 90                	xchg   ax,ax
c0018150:	31 c0                	xor    eax,eax
c0018152:	80 fa 07             	cmp    dl,0x7
c0018155:	75 21                	jne    c0018178 <Vm::x87Handler(regs*)+0xb12>
c0018157:	e8 b7 f4 ff ff       	call   c0017613 <Vm::fpuPop()>
c001815c:	51                   	push   ecx
c001815d:	51                   	push   ecx
c001815e:	52                   	push   edx
c001815f:	50                   	push   eax
c0018160:	e8 48 f1 ff ff       	call   c00172ad <Vm::fpuFloatToLong(unsigned long long)>
c0018165:	8d 76 00             	lea    esi,[esi+0x0]
c0018168:	83 c4 10             	add    esp,0x10
c001816b:	89 06                	mov    DWORD PTR [esi],eax
c001816d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0018170:	e9 7b f7 ff ff       	jmp    c00178f0 <Vm::x87Handler(regs*)+0x28a>
c0018175:	8d 76 00             	lea    esi,[esi+0x0]
c0018178:	83 c4 1c             	add    esp,0x1c
c001817b:	5b                   	pop    ebx
c001817c:	5e                   	pop    esi
c001817d:	5f                   	pop    edi
c001817e:	5d                   	pop    ebp
c001817f:	c3                   	ret    

c0018180 <__static_initialization_and_destruction_0(int, int)>:
c0018180:	83 ec 0c             	sub    esp,0xc
c0018183:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018188:	75 1a                	jne    c00181a4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001818a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018192:	75 10                	jne    c00181a4 <__static_initialization_and_destruction_0(int, int)+0x24>
c0018194:	83 ec 0c             	sub    esp,0xc
c0018197:	68 20 75 02 c0       	push   0xc0027520
c001819c:	e8 a3 82 00 00       	call   c0020444 <Vm::_FPUState::_FPUState()>
c00181a1:	83 c4 10             	add    esp,0x10
c00181a4:	90                   	nop
c00181a5:	83 c4 0c             	add    esp,0xc
c00181a8:	c3                   	ret    
c00181a9:	8d 76 00             	lea    esi,[esi+0x0]

c00181ac <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00181ac:	83 ec 0c             	sub    esp,0xc
c00181af:	83 ec 08             	sub    esp,0x8
c00181b2:	68 ff ff 00 00       	push   0xffff
c00181b7:	6a 01                	push   0x1
c00181b9:	e8 c2 ff ff ff       	call   c0018180 <__static_initialization_and_destruction_0(int, int)>
c00181be:	83 c4 10             	add    esp,0x10
c00181c1:	83 c4 0c             	add    esp,0xc
c00181c4:	c3                   	ret    

c00181c5 <Hal::noCopro(unsigned long)>:
c00181c5:	c3                   	ret    

c00181c6 <Hal::noTSC()>:
c00181c6:	31 c0                	xor    eax,eax
c00181c8:	31 d2                	xor    edx,edx
c00181ca:	c3                   	ret    

c00181cb <Hal::readTSC()>:
c00181cb:	0f 31                	rdtsc  
c00181cd:	c3                   	ret    

c00181ce <nmiHandler(regs*, void*)>:
c00181ce:	83 ec 0c             	sub    esp,0xc
c00181d1:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00181d6:	83 ec 0c             	sub    esp,0xc
c00181d9:	50                   	push   eax
c00181da:	e8 47 0d ff ff       	call   c0008f26 <Computer::handleNMI()>
c00181df:	83 c4 10             	add    esp,0x10
c00181e2:	90                   	nop
c00181e3:	83 c4 0c             	add    esp,0xc
c00181e6:	c3                   	ret    

c00181e7 <doubleFault(regs*, void*)>:
c00181e7:	55                   	push   ebp
c00181e8:	89 e5                	mov    ebp,esp
c00181ea:	83 ec 08             	sub    esp,0x8
c00181ed:	83 ec 0c             	sub    esp,0xc
c00181f0:	68 94 2b 02 c0       	push   0xc0022b94
c00181f5:	e8 09 a4 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00181fa:	83 c4 10             	add    esp,0x10
c00181fd:	90                   	nop
c00181fe:	c9                   	leave  
c00181ff:	c3                   	ret    

c0018200 <displayDebugInfo(regs*)>:
c0018200:	83 ec 1c             	sub    esp,0x1c
c0018203:	0f 20 c0             	mov    eax,cr0
c0018206:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001820a:	0f 20 d0             	mov    eax,cr2
c001820d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018211:	0f 20 d8             	mov    eax,cr3
c0018214:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018218:	0f 20 e0             	mov    eax,cr4
c001821b:	89 04 24             	mov    DWORD PTR [esp],eax
c001821e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018222:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018225:	83 ec 08             	sub    esp,0x8
c0018228:	50                   	push   eax
c0018229:	68 b0 2b 02 c0       	push   0xc0022bb0
c001822e:	e8 8e 44 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0018233:	83 c4 10             	add    esp,0x10
c0018236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001823a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001823d:	83 ec 08             	sub    esp,0x8
c0018240:	50                   	push   eax
c0018241:	68 a1 2b 02 c0       	push   0xc0022ba1
c0018246:	e8 76 44 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001824b:	83 c4 10             	add    esp,0x10
c001824e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018252:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018255:	83 ec 08             	sub    esp,0x8
c0018258:	50                   	push   eax
c0018259:	68 ac 2b 02 c0       	push   0xc0022bac
c001825e:	e8 5e 44 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0018263:	83 c4 10             	add    esp,0x10
c0018266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001826a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001826d:	83 ec 08             	sub    esp,0x8
c0018270:	50                   	push   eax
c0018271:	68 bb 2b 02 c0       	push   0xc0022bbb
c0018276:	e8 46 44 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001827b:	83 c4 10             	add    esp,0x10
c001827e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018282:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018285:	83 ec 08             	sub    esp,0x8
c0018288:	50                   	push   eax
c0018289:	68 c6 2b 02 c0       	push   0xc0022bc6
c001828e:	e8 2e 44 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0018293:	83 c4 10             	add    esp,0x10
c0018296:	83 ec 08             	sub    esp,0x8
c0018299:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001829d:	68 d1 2b 02 c0       	push   0xc0022bd1
c00182a2:	e8 1a 44 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00182a7:	83 c4 10             	add    esp,0x10
c00182aa:	83 ec 08             	sub    esp,0x8
c00182ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182b1:	68 dc 2b 02 c0       	push   0xc0022bdc
c00182b6:	e8 06 44 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c00182c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182c9:	83 ec 0c             	sub    esp,0xc
c00182cc:	50                   	push   eax
c00182cd:	e8 73 22 ff ff       	call   c000a545 <setActiveTerminal(VgaText*)>
c00182d2:	83 c4 10             	add    esp,0x10
c00182d5:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c00182da:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182e0:	83 ec 08             	sub    esp,0x8
c00182e3:	68 e7 2b 02 c0       	push   0xc0022be7
c00182e8:	50                   	push   eax
c00182e9:	e8 96 25 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00182ee:	83 c4 10             	add    esp,0x10
c00182f1:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c00182f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182fc:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018301:	8b 12                	mov    edx,DWORD PTR [edx]
c0018303:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018306:	83 c2 0c             	add    edx,0xc
c0018309:	83 ec 08             	sub    esp,0x8
c001830c:	52                   	push   edx
c001830d:	50                   	push   eax
c001830e:	e8 71 25 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0018313:	83 c4 10             	add    esp,0x10
c0018316:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c001831b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018321:	83 ec 08             	sub    esp,0x8
c0018324:	68 f0 2b 02 c0       	push   0xc0022bf0
c0018329:	50                   	push   eax
c001832a:	e8 55 25 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0018337:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001833d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018341:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0018344:	83 ec 08             	sub    esp,0x8
c0018347:	52                   	push   edx
c0018348:	50                   	push   eax
c0018349:	e8 f0 24 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0018356:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001835c:	83 ec 08             	sub    esp,0x8
c001835f:	68 f8 2b 02 c0       	push   0xc0022bf8
c0018364:	50                   	push   eax
c0018365:	e8 1a 25 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c001836a:	83 c4 10             	add    esp,0x10
c001836d:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0018372:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018378:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001837c:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001837f:	83 ec 08             	sub    esp,0x8
c0018382:	52                   	push   edx
c0018383:	50                   	push   eax
c0018384:	e8 b5 24 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c0018389:	83 c4 10             	add    esp,0x10
c001838c:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0018391:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018397:	83 ec 08             	sub    esp,0x8
c001839a:	68 00 2c 02 c0       	push   0xc0022c00
c001839f:	50                   	push   eax
c00183a0:	e8 df 24 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00183a5:	83 c4 10             	add    esp,0x10
c00183a8:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c00183ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183b7:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00183ba:	83 ec 08             	sub    esp,0x8
c00183bd:	52                   	push   edx
c00183be:	50                   	push   eax
c00183bf:	e8 7a 24 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c00183cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183d2:	83 ec 08             	sub    esp,0x8
c00183d5:	68 08 2c 02 c0       	push   0xc0022c08
c00183da:	50                   	push   eax
c00183db:	e8 a4 24 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00183e0:	83 c4 10             	add    esp,0x10
c00183e3:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c00183e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183f2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00183f5:	83 ec 08             	sub    esp,0x8
c00183f8:	52                   	push   edx
c00183f9:	50                   	push   eax
c00183fa:	e8 3f 24 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c00183ff:	83 c4 10             	add    esp,0x10
c0018402:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0018407:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001840d:	83 ec 08             	sub    esp,0x8
c0018410:	68 10 2c 02 c0       	push   0xc0022c10
c0018415:	50                   	push   eax
c0018416:	e8 69 24 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c001841b:	83 c4 10             	add    esp,0x10
c001841e:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0018423:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018429:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001842d:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018430:	83 ec 08             	sub    esp,0x8
c0018433:	52                   	push   edx
c0018434:	50                   	push   eax
c0018435:	e8 04 24 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c001843a:	83 c4 10             	add    esp,0x10
c001843d:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0018442:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018448:	83 ec 08             	sub    esp,0x8
c001844b:	68 18 2c 02 c0       	push   0xc0022c18
c0018450:	50                   	push   eax
c0018451:	e8 2e 24 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0018456:	83 c4 10             	add    esp,0x10
c0018459:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c001845e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018464:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018468:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001846b:	83 ec 08             	sub    esp,0x8
c001846e:	52                   	push   edx
c001846f:	50                   	push   eax
c0018470:	e8 c9 23 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c0018475:	83 c4 10             	add    esp,0x10
c0018478:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c001847d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018483:	83 ec 08             	sub    esp,0x8
c0018486:	68 20 2c 02 c0       	push   0xc0022c20
c001848b:	50                   	push   eax
c001848c:	e8 f3 23 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c0018491:	83 c4 10             	add    esp,0x10
c0018494:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0018499:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001849f:	83 ec 08             	sub    esp,0x8
c00184a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00184a6:	50                   	push   eax
c00184a7:	e8 92 23 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c00184ac:	83 c4 10             	add    esp,0x10
c00184af:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c00184b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184ba:	83 ec 08             	sub    esp,0x8
c00184bd:	68 29 2c 02 c0       	push   0xc0022c29
c00184c2:	50                   	push   eax
c00184c3:	e8 bc 23 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00184c8:	83 c4 10             	add    esp,0x10
c00184cb:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c00184d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184d6:	83 ec 08             	sub    esp,0x8
c00184d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00184dd:	50                   	push   eax
c00184de:	e8 5b 23 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c00184e3:	83 c4 10             	add    esp,0x10
c00184e6:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c00184eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00184f1:	83 ec 08             	sub    esp,0x8
c00184f4:	68 31 2c 02 c0       	push   0xc0022c31
c00184f9:	50                   	push   eax
c00184fa:	e8 85 23 ff ff       	call   c000a884 <VgaText::puts(char const*)>
c00184ff:	83 c4 10             	add    esp,0x10
c0018502:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0018507:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001850d:	83 ec 08             	sub    esp,0x8
c0018510:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018514:	50                   	push   eax
c0018515:	e8 24 23 ff ff       	call   c000a83e <VgaText::putx(unsigned int)>
c001851a:	83 c4 10             	add    esp,0x10
c001851d:	fa                   	cli    
c001851e:	f4                   	hlt    
c001851f:	eb fe                	jmp    c001851f <displayDebugInfo(regs*)+0x31f>

c0018521 <displayProgramFault(char const*)>:
c0018521:	83 ec 0c             	sub    esp,0xc
c0018524:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018529:	8b 00                	mov    eax,DWORD PTR [eax]
c001852b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001852e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018534:	85 c0                	test   eax,eax
c0018536:	74 21                	je     c0018559 <displayProgramFault(char const*)+0x38>
c0018538:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001853d:	8b 00                	mov    eax,DWORD PTR [eax]
c001853f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018542:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018548:	6a 04                	push   0x4
c001854a:	6a 0f                	push   0xf
c001854c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018550:	50                   	push   eax
c0018551:	e8 a0 23 ff ff       	call   c000a8f6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0018556:	83 c4 10             	add    esp,0x10
c0018559:	90                   	nop
c001855a:	83 c4 0c             	add    esp,0xc
c001855d:	c3                   	ret    

c001855e <gpFault(regs*, void*)>:
c001855e:	83 ec 1c             	sub    esp,0x1c
c0018561:	c7 05 7c 75 02 c0 23 6b 01 c0 	mov    DWORD PTR ds:0xc002757c,0xc0016b23
c001856b:	a1 7c 75 02 c0       	mov    eax,ds:0xc002757c
c0018570:	85 c0                	test   eax,eax
c0018572:	74 1c                	je     c0018590 <gpFault(regs*, void*)+0x32>
c0018574:	a1 7c 75 02 c0       	mov    eax,ds:0xc002757c
c0018579:	83 ec 0c             	sub    esp,0xc
c001857c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018580:	ff d0                	call   eax
c0018582:	83 c4 10             	add    esp,0x10
c0018585:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018589:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001858e:	75 3e                	jne    c00185ce <gpFault(regs*, void*)+0x70>
c0018590:	83 ec 0c             	sub    esp,0xc
c0018593:	68 39 2c 02 c0       	push   0xc0022c39
c0018598:	e8 24 41 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001859d:	83 c4 10             	add    esp,0x10
c00185a0:	83 ec 0c             	sub    esp,0xc
c00185a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00185a7:	e8 54 fc ff ff       	call   c0018200 <displayDebugInfo(regs*)>
c00185ac:	83 c4 10             	add    esp,0x10
c00185af:	83 ec 0c             	sub    esp,0xc
c00185b2:	68 54 2c 02 c0       	push   0xc0022c54
c00185b7:	e8 65 ff ff ff       	call   c0018521 <displayProgramFault(char const*)>
c00185bc:	83 c4 10             	add    esp,0x10
c00185bf:	83 ec 0c             	sub    esp,0xc
c00185c2:	6a 00                	push   0x0
c00185c4:	e8 53 df ff ff       	call   c001651c <Thr::terminateFromIRQ(int)>
c00185c9:	83 c4 10             	add    esp,0x10
c00185cc:	eb 01                	jmp    c00185cf <gpFault(regs*, void*)+0x71>
c00185ce:	90                   	nop
c00185cf:	83 c4 1c             	add    esp,0x1c
c00185d2:	c3                   	ret    

c00185d3 <pgFault(regs*, void*)>:
c00185d3:	83 ec 1c             	sub    esp,0x1c
c00185d6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00185db:	8b 00                	mov    eax,DWORD PTR [eax]
c00185dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00185e0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00185e6:	0f 20 d2             	mov    edx,cr2
c00185e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00185f1:	83 ec 08             	sub    esp,0x8
c00185f4:	52                   	push   edx
c00185f5:	50                   	push   eax
c00185f6:	e8 41 3c ff ff       	call   c000c23c <VAS::tryLoadBackOffDisk(unsigned long)>
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	84 c0                	test   al,al
c0018600:	75 3e                	jne    c0018640 <pgFault(regs*, void*)+0x6d>
c0018602:	83 ec 0c             	sub    esp,0xc
c0018605:	68 6d 2c 02 c0       	push   0xc0022c6d
c001860a:	e8 b2 40 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001860f:	83 c4 10             	add    esp,0x10
c0018612:	83 ec 0c             	sub    esp,0xc
c0018615:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018619:	e8 e2 fb ff ff       	call   c0018200 <displayDebugInfo(regs*)>
c001861e:	83 c4 10             	add    esp,0x10
c0018621:	83 ec 0c             	sub    esp,0xc
c0018624:	68 7a 2c 02 c0       	push   0xc0022c7a
c0018629:	e8 f3 fe ff ff       	call   c0018521 <displayProgramFault(char const*)>
c001862e:	83 c4 10             	add    esp,0x10
c0018631:	83 ec 0c             	sub    esp,0xc
c0018634:	6a 00                	push   0x0
c0018636:	e8 e1 de ff ff       	call   c001651c <Thr::terminateFromIRQ(int)>
c001863b:	83 c4 10             	add    esp,0x10
c001863e:	eb 01                	jmp    c0018641 <pgFault(regs*, void*)+0x6e>
c0018640:	90                   	nop
c0018641:	83 c4 1c             	add    esp,0x1c
c0018644:	c3                   	ret    

c0018645 <otherISRHandler(regs*, void*)>:
c0018645:	83 ec 0c             	sub    esp,0xc
c0018648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001864c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001864f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018653:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018656:	83 ec 04             	sub    esp,0x4
c0018659:	52                   	push   edx
c001865a:	50                   	push   eax
c001865b:	68 85 2c 02 c0       	push   0xc0022c85
c0018660:	e8 5c 40 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0018665:	83 c4 10             	add    esp,0x10
c0018668:	83 ec 0c             	sub    esp,0xc
c001866b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001866f:	e8 8c fb ff ff       	call   c0018200 <displayDebugInfo(regs*)>
c0018674:	83 c4 10             	add    esp,0x10
c0018677:	83 ec 0c             	sub    esp,0xc
c001867a:	68 f8 2c 02 c0       	push   0xc0022cf8
c001867f:	e8 9d fe ff ff       	call   c0018521 <displayProgramFault(char const*)>
c0018684:	83 c4 10             	add    esp,0x10
c0018687:	83 ec 0c             	sub    esp,0xc
c001868a:	6a 00                	push   0x0
c001868c:	e8 8b de ff ff       	call   c001651c <Thr::terminateFromIRQ(int)>
c0018691:	83 c4 10             	add    esp,0x10
c0018694:	90                   	nop
c0018695:	83 c4 0c             	add    esp,0xc
c0018698:	c3                   	ret    

c0018699 <opcodeFault(regs*, void*)>:
c0018699:	55                   	push   ebp
c001869a:	89 e5                	mov    ebp,esp
c001869c:	83 ec 08             	sub    esp,0x8
c001869f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00186a5:	83 ec 08             	sub    esp,0x8
c00186a8:	50                   	push   eax
c00186a9:	68 a2 2c 02 c0       	push   0xc0022ca2
c00186ae:	e8 0e 40 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00186b3:	83 c4 10             	add    esp,0x10
c00186b6:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00186bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00186c1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00186c7:	84 c0                	test   al,al
c00186c9:	74 21                	je     c00186ec <opcodeFault(regs*, void*)+0x53>
c00186cb:	83 ec 0c             	sub    esp,0xc
c00186ce:	68 20 2d 02 c0       	push   0xc0022d20
c00186d3:	e8 e9 3f ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00186d8:	83 c4 10             	add    esp,0x10
c00186db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00186e1:	8d 50 19             	lea    edx,[eax+0x19]
c00186e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00186ea:	eb 3b                	jmp    c0018727 <opcodeFault(regs*, void*)+0x8e>
c00186ec:	83 ec 0c             	sub    esp,0xc
c00186ef:	68 b0 2c 02 c0       	push   0xc0022cb0
c00186f4:	e8 c8 3f ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	83 ec 0c             	sub    esp,0xc
c00186ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018702:	e8 f9 fa ff ff       	call   c0018200 <displayDebugInfo(regs*)>
c0018707:	83 c4 10             	add    esp,0x10
c001870a:	83 ec 0c             	sub    esp,0xc
c001870d:	68 c1 2c 02 c0       	push   0xc0022cc1
c0018712:	e8 0a fe ff ff       	call   c0018521 <displayProgramFault(char const*)>
c0018717:	83 c4 10             	add    esp,0x10
c001871a:	83 ec 0c             	sub    esp,0xc
c001871d:	6a 00                	push   0x0
c001871f:	e8 f8 dd ff ff       	call   c001651c <Thr::terminateFromIRQ(int)>
c0018724:	83 c4 10             	add    esp,0x10
c0018727:	c9                   	leave  
c0018728:	c3                   	ret    

c0018729 <i386SaveCoprocessor(void*)>:
c0018729:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001872d:	83 c0 3f             	add    eax,0x3f
c0018730:	83 e0 c0             	and    eax,0xffffffc0
c0018733:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018737:	ff 25 74 75 02 c0    	jmp    DWORD PTR ds:0xc0027574

c001873d <i386LoadCoprocessor(void*)>:
c001873d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018741:	83 c0 3f             	add    eax,0x3f
c0018744:	83 e0 c0             	and    eax,0xffffffc0
c0018747:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001874b:	ff 25 70 75 02 c0    	jmp    DWORD PTR ds:0xc0027570

c0018751 <x87EmulHandler(regs*, void*)>:
c0018751:	53                   	push   ebx
c0018752:	83 ec 08             	sub    esp,0x8
c0018755:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001875a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001875e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018762:	74 10                	je     c0018774 <x87EmulHandler(regs*, void*)+0x23>
c0018764:	83 ec 0c             	sub    esp,0xc
c0018767:	68 ce 2c 02 c0       	push   0xc0022cce
c001876c:	e8 92 9e ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0018771:	83 c4 10             	add    esp,0x10
c0018774:	0f 20 c0             	mov    eax,cr0
c0018777:	a8 08                	test   al,0x8
c0018779:	74 56                	je     c00187d1 <x87EmulHandler(regs*, void*)+0x80>
c001877b:	0f 06                	clts   
c001877d:	a1 6c 75 02 c0       	mov    eax,ds:0xc002756c
c0018782:	85 c0                	test   eax,eax
c0018784:	74 0e                	je     c0018794 <x87EmulHandler(regs*, void*)+0x43>
c0018786:	83 ec 0c             	sub    esp,0xc
c0018789:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001878c:	e8 98 ff ff ff       	call   c0018729 <i386SaveCoprocessor(void*)>
c0018791:	83 c4 10             	add    esp,0x10
c0018794:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001879a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001879e:	75 12                	jne    c00187b2 <x87EmulHandler(regs*, void*)+0x61>
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	68 40 02 00 00       	push   0x240
c00187a8:	e8 d2 0f ff ff       	call   c000977f <malloc>
c00187ad:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00187b0:	eb 10                	jmp    c00187c2 <x87EmulHandler(regs*, void*)+0x71>
c00187b2:	83 ec 0c             	sub    esp,0xc
c00187b5:	a1 6c 75 02 c0       	mov    eax,ds:0xc002756c
c00187ba:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00187bd:	e8 7b ff ff ff       	call   c001873d <i386LoadCoprocessor(void*)>
c00187c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187c7:	83 c4 10             	add    esp,0x10
c00187ca:	a3 6c 75 02 c0       	mov    ds:0xc002756c,eax
c00187cf:	eb 2e                	jmp    c00187ff <x87EmulHandler(regs*, void*)+0xae>
c00187d1:	83 ec 0c             	sub    esp,0xc
c00187d4:	53                   	push   ebx
c00187d5:	e8 8c ee ff ff       	call   c0017666 <Vm::x87Handler(regs*)>
c00187da:	83 c4 10             	add    esp,0x10
c00187dd:	84 c0                	test   al,al
c00187df:	75 1e                	jne    c00187ff <x87EmulHandler(regs*, void*)+0xae>
c00187e1:	83 ec 0c             	sub    esp,0xc
c00187e4:	68 e2 2c 02 c0       	push   0xc0022ce2
c00187e9:	e8 d3 3e ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c00187ee:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00187f6:	83 c4 18             	add    esp,0x18
c00187f9:	5b                   	pop    ebx
c00187fa:	e9 1d dd ff ff       	jmp    c001651c <Thr::terminateFromIRQ(int)>
c00187ff:	83 c4 08             	add    esp,0x8
c0018802:	5b                   	pop    ebx
c0018803:	c3                   	ret    

c0018804 <Hal::initialiseCoprocessor()>:
c0018804:	83 ec 10             	sub    esp,0x10
c0018807:	c7 05 6c 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002756c,0x0
c0018811:	6a 00                	push   0x0
c0018813:	68 51 87 01 c0       	push   0xc0018751
c0018818:	6a 07                	push   0x7
c001881a:	e8 bd 58 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001881f:	e8 7c 6c 00 00       	call   c001f4a0 <avxDetect>
c0018824:	83 c4 10             	add    esp,0x10
c0018827:	85 c0                	test   eax,eax
c0018829:	74 1c                	je     c0018847 <Hal::initialiseCoprocessor()+0x43>
c001882b:	c7 05 74 75 02 c0 ca f4 01 c0 	mov    DWORD PTR ds:0xc0027574,0xc001f4ca
c0018835:	c7 05 70 75 02 c0 db f4 01 c0 	mov    DWORD PTR ds:0xc0027570,0xc001f4db
c001883f:	83 c4 0c             	add    esp,0xc
c0018842:	e9 a5 6c 00 00       	jmp    c001f4ec <avxInit>
c0018847:	e8 d4 6e 00 00       	call   c001f720 <absolutelyNoChanceInHell>
c001884c:	85 c0                	test   eax,eax
c001884e:	74 1c                	je     c001886c <Hal::initialiseCoprocessor()+0x68>
c0018850:	c7 05 74 75 02 c0 38 f7 01 c0 	mov    DWORD PTR ds:0xc0027574,0xc001f738
c001885a:	c7 05 70 75 02 c0 40 f7 01 c0 	mov    DWORD PTR ds:0xc0027570,0xc001f740
c0018864:	83 c4 0c             	add    esp,0xc
c0018867:	e9 dc 6e 00 00       	jmp    c001f748 <sseInit>
c001886c:	e8 f5 6e 00 00       	call   c001f766 <x87Detect>
c0018871:	85 c0                	test   eax,eax
c0018873:	74 1c                	je     c0018891 <Hal::initialiseCoprocessor()+0x8d>
c0018875:	c7 05 74 75 02 c0 81 f7 01 c0 	mov    DWORD PTR ds:0xc0027574,0xc001f781
c001887f:	c7 05 70 75 02 c0 88 f7 01 c0 	mov    DWORD PTR ds:0xc0027570,0xc001f788
c0018889:	83 c4 0c             	add    esp,0xc
c001888c:	e9 fe 6e 00 00       	jmp    c001f78f <x87Init>
c0018891:	c7 05 74 75 02 c0 c5 81 01 c0 	mov    DWORD PTR ds:0xc0027574,0xc00181c5
c001889b:	c7 05 70 75 02 c0 c5 81 01 c0 	mov    DWORD PTR ds:0xc0027570,0xc00181c5
c00188a5:	0f 20 c0             	mov    eax,cr0
c00188a8:	83 c8 04             	or     eax,0x4
c00188ab:	0f 22 c0             	mov    cr0,eax
c00188ae:	83 c4 0c             	add    esp,0xc
c00188b1:	c3                   	ret    

c00188b2 <Hal::panic(char const*)>:
c00188b2:	e9 4c 9d ff ff       	jmp    c0012603 <Krnl::panic(char const*)>

c00188b7 <Hal::initialise()>:
c00188b7:	53                   	push   ebx
c00188b8:	83 ec 08             	sub    esp,0x8
c00188bb:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00188c0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00188c6:	b8 c6 81 01 c0       	mov    eax,0xc00181c6
c00188cb:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c00188d2:	74 05                	je     c00188d9 <Hal::initialise()+0x22>
c00188d4:	b8 cb 81 01 c0       	mov    eax,0xc00181cb
c00188d9:	a3 78 75 02 c0       	mov    ds:0xc0027578,eax
c00188de:	e8 1e 5a ff ff       	call   c000e301 <setupINTS()>
c00188e3:	80 3d 80 68 02 c0 00 	cmp    BYTE PTR ds:0xc0026880,0x0
c00188ea:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00188ef:	75 07                	jne    c00188f8 <Hal::initialise()+0x41>
c00188f1:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c00188f8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00188fe:	83 e0 01             	and    eax,0x1
c0018901:	a2 68 75 02 c0       	mov    ds:0xc0027568,al
c0018906:	e8 9d 02 00 00       	call   c0018ba8 <picOpen()>
c001890b:	80 3d 68 75 02 c0 00 	cmp    BYTE PTR ds:0xc0027568,0x0
c0018912:	74 0a                	je     c001891e <Hal::initialise()+0x67>
c0018914:	e8 df 01 00 00       	call   c0018af8 <picDisable()>
c0018919:	e8 1a 65 00 00       	call   c001ee38 <apicOpen()>
c001891e:	bb 0f 00 00 00       	mov    ebx,0xf
c0018923:	50                   	push   eax
c0018924:	6a 00                	push   0x0
c0018926:	68 45 86 01 c0       	push   0xc0018645
c001892b:	6a 00                	push   0x0
c001892d:	e8 aa 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018932:	83 c4 0c             	add    esp,0xc
c0018935:	6a 00                	push   0x0
c0018937:	68 45 86 01 c0       	push   0xc0018645
c001893c:	6a 01                	push   0x1
c001893e:	e8 99 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018943:	83 c4 0c             	add    esp,0xc
c0018946:	6a 00                	push   0x0
c0018948:	68 ce 81 01 c0       	push   0xc00181ce
c001894d:	6a 02                	push   0x2
c001894f:	e8 88 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018954:	83 c4 0c             	add    esp,0xc
c0018957:	6a 00                	push   0x0
c0018959:	68 45 86 01 c0       	push   0xc0018645
c001895e:	6a 03                	push   0x3
c0018960:	e8 77 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018965:	83 c4 0c             	add    esp,0xc
c0018968:	6a 00                	push   0x0
c001896a:	68 45 86 01 c0       	push   0xc0018645
c001896f:	6a 04                	push   0x4
c0018971:	e8 66 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018976:	83 c4 0c             	add    esp,0xc
c0018979:	6a 00                	push   0x0
c001897b:	68 45 86 01 c0       	push   0xc0018645
c0018980:	6a 05                	push   0x5
c0018982:	e8 55 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018987:	83 c4 0c             	add    esp,0xc
c001898a:	6a 00                	push   0x0
c001898c:	68 99 86 01 c0       	push   0xc0018699
c0018991:	6a 06                	push   0x6
c0018993:	e8 44 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018998:	83 c4 0c             	add    esp,0xc
c001899b:	6a 00                	push   0x0
c001899d:	68 e7 81 01 c0       	push   0xc00181e7
c00189a2:	6a 08                	push   0x8
c00189a4:	e8 33 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00189a9:	83 c4 0c             	add    esp,0xc
c00189ac:	6a 00                	push   0x0
c00189ae:	68 45 86 01 c0       	push   0xc0018645
c00189b3:	6a 09                	push   0x9
c00189b5:	e8 22 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00189ba:	83 c4 0c             	add    esp,0xc
c00189bd:	6a 00                	push   0x0
c00189bf:	68 45 86 01 c0       	push   0xc0018645
c00189c4:	6a 0a                	push   0xa
c00189c6:	e8 11 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00189cb:	83 c4 0c             	add    esp,0xc
c00189ce:	6a 00                	push   0x0
c00189d0:	68 45 86 01 c0       	push   0xc0018645
c00189d5:	6a 0b                	push   0xb
c00189d7:	e8 00 57 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00189dc:	83 c4 0c             	add    esp,0xc
c00189df:	6a 00                	push   0x0
c00189e1:	68 5e 85 01 c0       	push   0xc001855e
c00189e6:	6a 0d                	push   0xd
c00189e8:	e8 ef 56 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00189ed:	83 c4 0c             	add    esp,0xc
c00189f0:	6a 00                	push   0x0
c00189f2:	68 d3 85 01 c0       	push   0xc00185d3
c00189f7:	6a 0e                	push   0xe
c00189f9:	e8 de 56 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00189fe:	83 c4 10             	add    esp,0x10
c0018a01:	50                   	push   eax
c0018a02:	6a 00                	push   0x0
c0018a04:	68 45 86 01 c0       	push   0xc0018645
c0018a09:	53                   	push   ebx
c0018a0a:	43                   	inc    ebx
c0018a0b:	e8 cc 56 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018a10:	83 c4 10             	add    esp,0x10
c0018a13:	83 fb 1e             	cmp    ebx,0x1e
c0018a16:	75 e9                	jne    c0018a01 <Hal::initialise()+0x14a>
c0018a18:	50                   	push   eax
c0018a19:	6a 00                	push   0x0
c0018a1b:	68 7c 41 01 c0       	push   0xc001417c
c0018a20:	6a 60                	push   0x60
c0018a22:	e8 b5 56 ff ff       	call   c000e0dc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018a27:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0018a2c:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018a36:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018a3d:	e8 3d 0d ff ff       	call   c000977f <malloc>
c0018a42:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a45:	89 c3                	mov    ebx,eax
c0018a47:	e8 ee 09 00 00       	call   c001943a <RTC::RTC()>
c0018a4c:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018a56:	5a                   	pop    edx
c0018a57:	59                   	pop    ecx
c0018a58:	53                   	push   ebx
c0018a59:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018a5f:	e8 da 50 ff ff       	call   c000db3e <Device::addChild(Device*)>
c0018a64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018a66:	6a 00                	push   0x0
c0018a68:	6a 00                	push   0x0
c0018a6a:	6a 00                	push   0x0
c0018a6c:	53                   	push   ebx
c0018a6d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018a70:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0018a75:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018a7b:	83 c4 28             	add    esp,0x28
c0018a7e:	5b                   	pop    ebx
c0018a7f:	c3                   	ret    

c0018a80 <Hal::makeBeep(int)>:
c0018a80:	53                   	push   ebx
c0018a81:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018a85:	85 db                	test   ebx,ebx
c0018a87:	75 07                	jne    c0018a90 <Hal::makeBeep(int)+0x10>
c0018a89:	e4 61                	in     al,0x61
c0018a8b:	83 e0 fc             	and    eax,0xfffffffc
c0018a8e:	eb 26                	jmp    c0018ab6 <Hal::makeBeep(int)+0x36>
c0018a90:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018a95:	99                   	cdq    
c0018a96:	f7 fb                	idiv   ebx
c0018a98:	89 c1                	mov    ecx,eax
c0018a9a:	b0 b6                	mov    al,0xb6
c0018a9c:	e6 43                	out    0x43,al
c0018a9e:	88 c8                	mov    al,cl
c0018aa0:	e6 42                	out    0x42,al
c0018aa2:	89 c8                	mov    eax,ecx
c0018aa4:	c1 e8 08             	shr    eax,0x8
c0018aa7:	e6 42                	out    0x42,al
c0018aa9:	e4 61                	in     al,0x61
c0018aab:	88 c2                	mov    dl,al
c0018aad:	83 ca 03             	or     edx,0x3
c0018ab0:	38 c2                	cmp    dl,al
c0018ab2:	74 04                	je     c0018ab8 <Hal::makeBeep(int)+0x38>
c0018ab4:	88 d0                	mov    al,dl
c0018ab6:	e6 61                	out    0x61,al
c0018ab8:	5b                   	pop    ebx
c0018ab9:	c3                   	ret    

c0018aba <Hal::getRand()>:
c0018aba:	31 c0                	xor    eax,eax
c0018abc:	c3                   	ret    

c0018abd <Hal::endOfInterrupt(int)>:
c0018abd:	80 3d 68 75 02 c0 00 	cmp    BYTE PTR ds:0xc0027568,0x0
c0018ac4:	74 23                	je     c0018ae9 <Hal::endOfInterrupt(int)+0x2c>
c0018ac6:	83 ec 14             	sub    esp,0x14
c0018ac9:	6a 1b                	push   0x1b
c0018acb:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018ad1:	e8 6c 02 ff ff       	call   c0008d42 <Computer::rdmsr(unsigned int)>
c0018ad6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018adb:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018ae5:	83 c4 1c             	add    esp,0x1c
c0018ae8:	c3                   	ret    
c0018ae9:	e9 3e 02 00 00       	jmp    c0018d2c <picEOI(int)>
c0018aee:	66 90                	xchg   ax,ax

c0018af0 <picIoWait()>:
c0018af0:	eb 00                	jmp    c0018af2 <picIoWait()+0x2>
c0018af2:	eb 00                	jmp    c0018af4 <picIoWait()+0x4>
c0018af4:	90                   	nop
c0018af5:	c3                   	ret    
c0018af6:	66 90                	xchg   ax,ax

c0018af8 <picDisable()>:
c0018af8:	83 ec 10             	sub    esp,0x10
c0018afb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018b02:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018b07:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b0b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018b10:	ee                   	out    dx,al
c0018b11:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018b18:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018b1d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b21:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018b26:	ee                   	out    dx,al
c0018b27:	90                   	nop
c0018b28:	83 c4 10             	add    esp,0x10
c0018b2b:	c3                   	ret    

c0018b2c <picGetIRQReg(int)>:
c0018b2c:	83 ec 10             	sub    esp,0x10
c0018b2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b33:	0f b6 c0             	movzx  eax,al
c0018b36:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018b3d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018b41:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018b45:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018b4a:	ee                   	out    dx,al
c0018b4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b4f:	0f b6 c0             	movzx  eax,al
c0018b52:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018b59:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b5d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018b61:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018b66:	ee                   	out    dx,al
c0018b67:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018b6e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018b73:	89 c2                	mov    edx,eax
c0018b75:	ec                   	in     al,dx
c0018b76:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b7a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b7e:	0f b6 c0             	movzx  eax,al
c0018b81:	c1 e0 08             	shl    eax,0x8
c0018b84:	89 c1                	mov    ecx,eax
c0018b86:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018b8d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018b92:	89 c2                	mov    edx,eax
c0018b94:	ec                   	in     al,dx
c0018b95:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b99:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b9d:	0f b6 c0             	movzx  eax,al
c0018ba0:	09 c8                	or     eax,ecx
c0018ba2:	83 c4 10             	add    esp,0x10
c0018ba5:	c3                   	ret    
c0018ba6:	66 90                	xchg   ax,ax

c0018ba8 <picOpen()>:
c0018ba8:	83 ec 50             	sub    esp,0x50
c0018bab:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018bb2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018bb7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018bbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bbf:	ee                   	out    dx,al
c0018bc0:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018bc7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018bcc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018bd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018bd4:	ee                   	out    dx,al
c0018bd5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018bdd:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018be5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018bec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bf0:	89 c2                	mov    edx,eax
c0018bf2:	ec                   	in     al,dx
c0018bf3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018bf7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018bfb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018bff:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018c06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c0a:	89 c2                	mov    edx,eax
c0018c0c:	ec                   	in     al,dx
c0018c0d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018c11:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018c15:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018c19:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018c20:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018c25:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018c29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018c2d:	ee                   	out    dx,al
c0018c2e:	e8 bd fe ff ff       	call   c0018af0 <picIoWait()>
c0018c33:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018c3a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018c3f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018c43:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c47:	ee                   	out    dx,al
c0018c48:	e8 a3 fe ff ff       	call   c0018af0 <picIoWait()>
c0018c4d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018c51:	0f b6 c0             	movzx  eax,al
c0018c54:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018c5b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018c5f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018c63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018c67:	ee                   	out    dx,al
c0018c68:	e8 83 fe ff ff       	call   c0018af0 <picIoWait()>
c0018c6d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018c71:	0f b6 c0             	movzx  eax,al
c0018c74:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018c7b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018c7f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018c83:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018c87:	ee                   	out    dx,al
c0018c88:	e8 63 fe ff ff       	call   c0018af0 <picIoWait()>
c0018c8d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018c94:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018c99:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018c9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ca1:	ee                   	out    dx,al
c0018ca2:	e8 49 fe ff ff       	call   c0018af0 <picIoWait()>
c0018ca7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018cae:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018cb3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018cb7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018cbb:	ee                   	out    dx,al
c0018cbc:	e8 2f fe ff ff       	call   c0018af0 <picIoWait()>
c0018cc1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018cc8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018ccd:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018cd1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018cd5:	ee                   	out    dx,al
c0018cd6:	e8 15 fe ff ff       	call   c0018af0 <picIoWait()>
c0018cdb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018ce2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018ce7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018ceb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018cef:	ee                   	out    dx,al
c0018cf0:	e8 fb fd ff ff       	call   c0018af0 <picIoWait()>
c0018cf5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018cfa:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018d01:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018d05:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018d09:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018d0d:	ee                   	out    dx,al
c0018d0e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018d13:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018d1a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018d1e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018d22:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018d26:	ee                   	out    dx,al
c0018d27:	90                   	nop
c0018d28:	83 c4 50             	add    esp,0x50
c0018d2b:	c3                   	ret    

c0018d2c <picEOI(int)>:
c0018d2c:	83 ec 10             	sub    esp,0x10
c0018d2f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018d34:	75 1e                	jne    c0018d54 <picEOI(int)+0x28>
c0018d36:	6a 0b                	push   0xb
c0018d38:	e8 ef fd ff ff       	call   c0018b2c <picGetIRQReg(int)>
c0018d3d:	83 c4 04             	add    esp,0x4
c0018d40:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018d45:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018d4a:	25 80 00 00 00       	and    eax,0x80
c0018d4f:	74 73                	je     c0018dc4 <picEOI(int)+0x98>
c0018d51:	8d 76 00             	lea    esi,[esi+0x0]
c0018d54:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018d59:	75 31                	jne    c0018d8c <picEOI(int)+0x60>
c0018d5b:	6a 0b                	push   0xb
c0018d5d:	e8 ca fd ff ff       	call   c0018b2c <picGetIRQReg(int)>
c0018d62:	83 c4 04             	add    esp,0x4
c0018d65:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d6e:	66 85 c0             	test   ax,ax
c0018d71:	78 19                	js     c0018d8c <picEOI(int)+0x60>
c0018d73:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018d7a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018d7f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d83:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018d88:	ee                   	out    dx,al
c0018d89:	eb 3d                	jmp    c0018dc8 <picEOI(int)+0x9c>
c0018d8b:	90                   	nop
c0018d8c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018d91:	7e 19                	jle    c0018dac <picEOI(int)+0x80>
c0018d93:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018d9a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018d9f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018da3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018da8:	ee                   	out    dx,al
c0018da9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dac:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018db3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018db8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018dbc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018dc1:	ee                   	out    dx,al
c0018dc2:	eb 04                	jmp    c0018dc8 <picEOI(int)+0x9c>
c0018dc4:	90                   	nop
c0018dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018dc8:	83 c4 10             	add    esp,0x10
c0018dcb:	c3                   	ret    

c0018dcc <RTC::open(int, int, void*)>:
c0018dcc:	31 c0                	xor    eax,eax
c0018dce:	c3                   	ret    
c0018dcf:	90                   	nop

c0018dd0 <RTC::close(int, int, void*)>:
c0018dd0:	31 c0                	xor    eax,eax
c0018dd2:	c3                   	ret    
c0018dd3:	90                   	nop

c0018dd4 <RTC::timeInSecondsUTC()>:
c0018dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dd8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018dde:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018de4:	c3                   	ret    
c0018de5:	90                   	nop

c0018de6 <RTC::timeInDatetimeUTC()>:
c0018de6:	53                   	push   ebx
c0018de7:	83 ec 14             	sub    esp,0x14
c0018dea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018dee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018df2:	8b 10                	mov    edx,DWORD PTR [eax]
c0018df4:	50                   	push   eax
c0018df5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018df8:	83 c4 0c             	add    esp,0xc
c0018dfb:	52                   	push   edx
c0018dfc:	50                   	push   eax
c0018dfd:	53                   	push   ebx
c0018dfe:	e8 af 4a ff ff       	call   c000d8b2 <secondsToDatetime(unsigned long long)>
c0018e03:	89 d8                	mov    eax,ebx
c0018e05:	83 c4 14             	add    esp,0x14
c0018e08:	5b                   	pop    ebx
c0018e09:	c2 04 00             	ret    0x4

c0018e0c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018e0c:	56                   	push   esi
c0018e0d:	53                   	push   ebx
c0018e0e:	83 ec 14             	sub    esp,0x14
c0018e11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018e15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018e17:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018e1a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e1e:	52                   	push   edx
c0018e1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e27:	50                   	push   eax
c0018e28:	e8 85 4a ff ff       	call   c000d8b2 <secondsToDatetime(unsigned long long)>
c0018e2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e35:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018e39:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018e3d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018e41:	89 f0                	mov    eax,esi
c0018e43:	83 c4 20             	add    esp,0x20
c0018e46:	5b                   	pop    ebx
c0018e47:	5e                   	pop    esi
c0018e48:	ff e0                	jmp    eax

c0018e4a <RTC::~RTC()>:
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	ba 10 2e 02 c0       	mov    edx,0xc0022e10
c0018e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e56:	89 10                	mov    DWORD PTR [eax],edx
c0018e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e5c:	83 ec 0c             	sub    esp,0xc
c0018e5f:	50                   	push   eax
c0018e60:	e8 d7 47 ff ff       	call   c000d63c <Clock::~Clock()>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	90                   	nop
c0018e69:	83 c4 0c             	add    esp,0xc
c0018e6c:	c3                   	ret    
c0018e6d:	90                   	nop

c0018e6e <RTC::~RTC()>:
c0018e6e:	83 ec 0c             	sub    esp,0xc
c0018e71:	83 ec 0c             	sub    esp,0xc
c0018e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e78:	e8 cd ff ff ff       	call   c0018e4a <RTC::~RTC()>
c0018e7d:	83 c4 10             	add    esp,0x10
c0018e80:	83 ec 08             	sub    esp,0x8
c0018e83:	68 60 01 00 00       	push   0x160
c0018e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e8c:	e8 4f 37 ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c0018e91:	83 c4 10             	add    esp,0x10
c0018e94:	83 c4 0c             	add    esp,0xc
c0018e97:	c3                   	ret    

c0018e98 <RTC::get_update_in_progress_flag()>:
c0018e98:	83 ec 14             	sub    esp,0x14
c0018e9b:	6a 0a                	push   0xa
c0018e9d:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018ea3:	e8 4e ff fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018ea8:	83 c4 1c             	add    esp,0x1c
c0018eab:	c0 e8 07             	shr    al,0x7
c0018eae:	c3                   	ret    
c0018eaf:	90                   	nop

c0018eb0 <RTC::completeRTCRefresh()>:
c0018eb0:	55                   	push   ebp
c0018eb1:	57                   	push   edi
c0018eb2:	56                   	push   esi
c0018eb3:	53                   	push   ebx
c0018eb4:	83 ec 2c             	sub    esp,0x2c
c0018eb7:	8b 1d 8c 65 02 c0    	mov    ebx,DWORD PTR ds:0xc002658c
c0018ebd:	83 ec 0c             	sub    esp,0xc
c0018ec0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018ec4:	e8 cf ff ff ff       	call   c0018e98 <RTC::get_update_in_progress_flag()>
c0018ec9:	83 c4 10             	add    esp,0x10
c0018ecc:	84 c0                	test   al,al
c0018ece:	74 0e                	je     c0018ede <RTC::completeRTCRefresh()+0x2e>
c0018ed0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018ed6:	3b 05 8c 65 02 c0    	cmp    eax,DWORD PTR ds:0xc002658c
c0018edc:	73 df                	jae    c0018ebd <RTC::completeRTCRefresh()+0xd>
c0018ede:	55                   	push   ebp
c0018edf:	55                   	push   ebp
c0018ee0:	6a 00                	push   0x0
c0018ee2:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018ee8:	e8 09 ff fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018eed:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018ef1:	58                   	pop    eax
c0018ef2:	5a                   	pop    edx
c0018ef3:	6a 02                	push   0x2
c0018ef5:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018efb:	e8 f6 fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018f00:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018f04:	59                   	pop    ecx
c0018f05:	5b                   	pop    ebx
c0018f06:	6a 04                	push   0x4
c0018f08:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018f0e:	e8 e3 fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018f13:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0018f17:	5e                   	pop    esi
c0018f18:	5f                   	pop    edi
c0018f19:	6a 07                	push   0x7
c0018f1b:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018f21:	e8 d0 fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018f26:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0018f2a:	5d                   	pop    ebp
c0018f2b:	58                   	pop    eax
c0018f2c:	6a 08                	push   0x8
c0018f2e:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018f34:	e8 bd fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018f39:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0018f3d:	58                   	pop    eax
c0018f3e:	5a                   	pop    edx
c0018f3f:	6a 09                	push   0x9
c0018f41:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018f47:	e8 aa fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	0f b6 e8             	movzx  ebp,al
c0018f52:	8b 1d 8c 65 02 c0    	mov    ebx,DWORD PTR ds:0xc002658c
c0018f58:	83 ec 0c             	sub    esp,0xc
c0018f5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018f5f:	e8 34 ff ff ff       	call   c0018e98 <RTC::get_update_in_progress_flag()>
c0018f64:	83 c4 10             	add    esp,0x10
c0018f67:	84 c0                	test   al,al
c0018f69:	74 0e                	je     c0018f79 <RTC::completeRTCRefresh()+0xc9>
c0018f6b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018f71:	3b 05 8c 65 02 c0    	cmp    eax,DWORD PTR ds:0xc002658c
c0018f77:	73 df                	jae    c0018f58 <RTC::completeRTCRefresh()+0xa8>
c0018f79:	50                   	push   eax
c0018f7a:	50                   	push   eax
c0018f7b:	6a 00                	push   0x0
c0018f7d:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018f83:	e8 6e fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018f88:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0018f8c:	58                   	pop    eax
c0018f8d:	5a                   	pop    edx
c0018f8e:	6a 02                	push   0x2
c0018f90:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018f96:	e8 5b fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018f9b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018f9f:	59                   	pop    ecx
c0018fa0:	5b                   	pop    ebx
c0018fa1:	6a 04                	push   0x4
c0018fa3:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018fa9:	e8 48 fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018fae:	5e                   	pop    esi
c0018faf:	88 c3                	mov    bl,al
c0018fb1:	5f                   	pop    edi
c0018fb2:	6a 07                	push   0x7
c0018fb4:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018fba:	e8 37 fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018fbf:	89 c6                	mov    esi,eax
c0018fc1:	58                   	pop    eax
c0018fc2:	5a                   	pop    edx
c0018fc3:	6a 08                	push   0x8
c0018fc5:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018fcb:	e8 26 fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018fd0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018fd4:	59                   	pop    ecx
c0018fd5:	5f                   	pop    edi
c0018fd6:	6a 09                	push   0x9
c0018fd8:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0018fde:	e8 13 fe fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0018fe3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018fe7:	0f b6 f8             	movzx  edi,al
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0018ff0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018ff4:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0018ff8:	89 f1                	mov    ecx,esi
c0018ffa:	0f 94 c0             	sete   al
c0018ffd:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0019001:	0f 94 c2             	sete   dl
c0019004:	21 d0                	and    eax,edx
c0019006:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001900a:	0f 94 c2             	sete   dl
c001900d:	21 c2                	and    edx,eax
c001900f:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0019013:	0f 94 c0             	sete   al
c0019016:	21 d0                	and    eax,edx
c0019018:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001901c:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0019020:	0f 94 c1             	sete   cl
c0019023:	84 c8                	test   al,cl
c0019025:	75 28                	jne    c001904f <RTC::completeRTCRefresh()+0x19f>
c0019027:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001902b:	89 fd                	mov    ebp,edi
c001902d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019031:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0019035:	89 f0                	mov    eax,esi
c0019037:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001903b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001903f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019043:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019046:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001904a:	e9 03 ff ff ff       	jmp    c0018f52 <RTC::completeRTCRefresh()+0xa2>
c001904f:	39 fd                	cmp    ebp,edi
c0019051:	75 d4                	jne    c0019027 <RTC::completeRTCRefresh()+0x177>
c0019053:	55                   	push   ebp
c0019054:	55                   	push   ebp
c0019055:	6a 0b                	push   0xb
c0019057:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c001905d:	e8 94 fd fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0019062:	83 c4 10             	add    esp,0x10
c0019065:	89 c5                	mov    ebp,eax
c0019067:	a8 04                	test   al,0x4
c0019069:	75 75                	jne    c00190e0 <RTC::completeRTCRefresh()+0x230>
c001906b:	b1 0a                	mov    cl,0xa
c001906d:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0019070:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019073:	83 e2 0f             	and    edx,0xf
c0019076:	c0 e8 04             	shr    al,0x4
c0019079:	c1 ef 04             	shr    edi,0x4
c001907c:	f6 e1                	mul    cl
c001907e:	6b ff 0a             	imul   edi,edi,0xa
c0019081:	01 d0                	add    eax,edx
c0019083:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019087:	88 04 24             	mov    BYTE PTR [esp],al
c001908a:	83 e2 0f             	and    edx,0xf
c001908d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019091:	c0 e8 04             	shr    al,0x4
c0019094:	f6 e1                	mul    cl
c0019096:	01 d0                	add    eax,edx
c0019098:	88 da                	mov    dl,bl
c001909a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001909e:	83 e2 0f             	and    edx,0xf
c00190a1:	88 d8                	mov    al,bl
c00190a3:	83 e3 80             	and    ebx,0xffffff80
c00190a6:	c0 e8 04             	shr    al,0x4
c00190a9:	83 e0 07             	and    eax,0x7
c00190ac:	f6 e1                	mul    cl
c00190ae:	01 d0                	add    eax,edx
c00190b0:	89 f2                	mov    edx,esi
c00190b2:	09 c3                	or     ebx,eax
c00190b4:	83 e2 0f             	and    edx,0xf
c00190b7:	89 f0                	mov    eax,esi
c00190b9:	c0 e8 04             	shr    al,0x4
c00190bc:	f6 e1                	mul    cl
c00190be:	8d 34 02             	lea    esi,[edx+eax*1]
c00190c1:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00190c5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00190c9:	83 e2 0f             	and    edx,0xf
c00190cc:	c0 e8 04             	shr    al,0x4
c00190cf:	f6 e1                	mul    cl
c00190d1:	01 d0                	add    eax,edx
c00190d3:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00190d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00190db:	83 e0 0f             	and    eax,0xf
c00190de:	01 c7                	add    edi,eax
c00190e0:	83 e5 02             	and    ebp,0x2
c00190e3:	75 14                	jne    c00190f9 <RTC::completeRTCRefresh()+0x249>
c00190e5:	84 db                	test   bl,bl
c00190e7:	79 10                	jns    c00190f9 <RTC::completeRTCRefresh()+0x249>
c00190e9:	83 e3 7f             	and    ebx,0x7f
c00190ec:	b9 18 00 00 00       	mov    ecx,0x18
c00190f1:	8d 43 0c             	lea    eax,[ebx+0xc]
c00190f4:	99                   	cdq    
c00190f5:	f7 f9                	idiv   ecx
c00190f7:	88 d3                	mov    bl,dl
c00190f9:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c00190ff:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0019105:	77 06                	ja     c001910d <RTC::completeRTCRefresh()+0x25d>
c0019107:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001910d:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c0019111:	31 d2                	xor    edx,edx
c0019113:	c1 e1 10             	shl    ecx,0x10
c0019116:	89 d7                	mov    edi,edx
c0019118:	c1 e5 10             	shl    ebp,0x10
c001911b:	31 c0                	xor    eax,eax
c001911d:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0019123:	09 cf                	or     edi,ecx
c0019125:	89 f1                	mov    ecx,esi
c0019127:	89 fa                	mov    edx,edi
c0019129:	88 c8                	mov    al,cl
c001912b:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001912f:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0019133:	88 da                	mov    dl,bl
c0019135:	0f b7 c8             	movzx  ecx,ax
c0019138:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001913c:	09 e9                	or     ecx,ebp
c001913e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019141:	0f b6 db             	movzx  ebx,bl
c0019144:	50                   	push   eax
c0019145:	50                   	push   eax
c0019146:	53                   	push   ebx
c0019147:	68 43 2d 02 c0       	push   0xc0022d43
c001914c:	e8 70 35 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0019151:	5a                   	pop    edx
c0019152:	59                   	pop    ecx
c0019153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019157:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001915b:	52                   	push   edx
c001915c:	50                   	push   eax
c001915d:	e8 c9 45 ff ff       	call   c000d72b <datetimeToSeconds(datetime_t)>
c0019162:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0019166:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001916c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019172:	83 c4 3c             	add    esp,0x3c
c0019175:	5b                   	pop    ebx
c0019176:	5e                   	pop    esi
c0019177:	5f                   	pop    edi
c0019178:	5d                   	pop    ebp
c0019179:	c3                   	ret    

c001917a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001917a:	55                   	push   ebp
c001917b:	57                   	push   edi
c001917c:	56                   	push   esi
c001917d:	53                   	push   ebx
c001917e:	83 ec 40             	sub    esp,0x40
c0019181:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0019185:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019189:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001918d:	0f b6 6c 24 10       	movzx  ebp,BYTE PTR [esp+0x10]
c0019192:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019196:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001919a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001919e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00191a2:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c00191a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191aa:	0f b6 fe             	movzx  edi,dh
c00191ad:	0f b6 c4             	movzx  eax,ah
c00191b0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00191b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00191b8:	89 d7                	mov    edi,edx
c00191ba:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c00191bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00191c3:	c1 ef 10             	shr    edi,0x10
c00191c6:	c1 e8 10             	shr    eax,0x10
c00191c9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00191cd:	89 c6                	mov    esi,eax
c00191cf:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c00191d4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00191d8:	89 fa                	mov    edx,edi
c00191da:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00191df:	88 54 24 2c          	mov    BYTE PTR [esp+0x2c],dl
c00191e3:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00191e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00191eb:	0f b6 fb             	movzx  edi,bl
c00191ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191f2:	57                   	push   edi
c00191f3:	50                   	push   eax
c00191f4:	51                   	push   ecx
c00191f5:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00191f9:	55                   	push   ebp
c00191fa:	68 59 2d 02 c0       	push   0xc0022d59
c00191ff:	e8 bd 34 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0019204:	83 c4 1c             	add    esp,0x1c
c0019207:	6a 00                	push   0x0
c0019209:	6a 00                	push   0x0
c001920b:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0019211:	e8 f2 fc fe ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019216:	83 c4 0c             	add    esp,0xc
c0019219:	6a 00                	push   0x0
c001921b:	6a 02                	push   0x2
c001921d:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0019223:	e8 e0 fc fe ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019228:	b9 64 00 00 00       	mov    ecx,0x64
c001922d:	89 f0                	mov    eax,esi
c001922f:	31 d2                	xor    edx,edx
c0019231:	66 f7 f1             	div    cx
c0019234:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c0019238:	89 d6                	mov    esi,edx
c001923a:	58                   	pop    eax
c001923b:	5a                   	pop    edx
c001923c:	6a 0b                	push   0xb
c001923e:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0019244:	e8 ad fb fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0019249:	c7 04 24 74 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d74
c0019250:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0019254:	e8 68 34 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0019259:	83 c4 0c             	add    esp,0xc
c001925c:	0f b7 c6             	movzx  eax,si
c001925f:	50                   	push   eax
c0019260:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019264:	51                   	push   ecx
c0019265:	55                   	push   ebp
c0019266:	57                   	push   edi
c0019267:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001926b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001926f:	68 8a 2d 02 c0       	push   0xc0022d8a
c0019274:	e8 48 34 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0019279:	83 c4 20             	add    esp,0x20
c001927c:	f6 44 24 2b 04       	test   BYTE PTR [esp+0x2b],0x4
c0019281:	0f 85 88 00 00 00    	jne    c001930f <RTC::setTimeInDatetimeUTC(datetime_t)+0x195>
c0019287:	83 ec 0c             	sub    esp,0xc
c001928a:	68 ca 2d 02 c0       	push   0xc0022dca
c001928f:	e8 2d 34 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0019294:	b2 0a                	mov    dl,0xa
c0019296:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001929b:	f6 f2                	div    dl
c001929d:	88 c1                	mov    cl,al
c001929f:	88 e0                	mov    al,ah
c00192a1:	c1 e1 04             	shl    ecx,0x4
c00192a4:	09 c1                	or     ecx,eax
c00192a6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00192ab:	88 4c 24 38          	mov    BYTE PTR [esp+0x38],cl
c00192af:	f6 f2                	div    dl
c00192b1:	88 c1                	mov    cl,al
c00192b3:	88 e0                	mov    al,ah
c00192b5:	c1 e1 04             	shl    ecx,0x4
c00192b8:	09 c1                	or     ecx,eax
c00192ba:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00192bf:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c00192c3:	f6 f2                	div    dl
c00192c5:	88 c3                	mov    bl,al
c00192c7:	88 e0                	mov    al,ah
c00192c9:	c1 e3 04             	shl    ebx,0x4
c00192cc:	09 c3                	or     ebx,eax
c00192ce:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00192d3:	f6 f2                	div    dl
c00192d5:	88 c1                	mov    cl,al
c00192d7:	88 e0                	mov    al,ah
c00192d9:	c1 e1 04             	shl    ecx,0x4
c00192dc:	09 c1                	or     ecx,eax
c00192de:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c00192e3:	88 4c 24 39          	mov    BYTE PTR [esp+0x39],cl
c00192e7:	f6 f2                	div    dl
c00192e9:	88 c1                	mov    cl,al
c00192eb:	88 e0                	mov    al,ah
c00192ed:	c1 e1 04             	shl    ecx,0x4
c00192f0:	09 c1                	or     ecx,eax
c00192f2:	89 f0                	mov    eax,esi
c00192f4:	88 4c 24 28          	mov    BYTE PTR [esp+0x28],cl
c00192f8:	0f b6 c0             	movzx  eax,al
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	f6 f2                	div    dl
c0019300:	89 c6                	mov    esi,eax
c0019302:	88 e0                	mov    al,ah
c0019304:	c1 e6 04             	shl    esi,0x4
c0019307:	09 c6                	or     esi,eax
c0019309:	89 f0                	mov    eax,esi
c001930b:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c001930f:	f6 44 24 2b 02       	test   BYTE PTR [esp+0x2b],0x2
c0019314:	75 27                	jne    c001933d <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c0019316:	83 ec 0c             	sub    esp,0xc
c0019319:	68 db 2d 02 c0       	push   0xc0022ddb
c001931e:	e8 9e 33 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0019323:	83 c4 10             	add    esp,0x10
c0019326:	80 fb 0b             	cmp    bl,0xb
c0019329:	76 0c                	jbe    c0019337 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1bd>
c001932b:	80 eb 0c             	sub    bl,0xc
c001932e:	75 02                	jne    c0019332 <RTC::setTimeInDatetimeUTC(datetime_t)+0x1b8>
c0019330:	b3 0c                	mov    bl,0xc
c0019332:	83 cb 80             	or     ebx,0xffffff80
c0019335:	eb 06                	jmp    c001933d <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c0019337:	84 db                	test   bl,bl
c0019339:	75 02                	jne    c001933d <RTC::setTimeInDatetimeUTC(datetime_t)+0x1c3>
c001933b:	b3 0c                	mov    bl,0xc
c001933d:	0f b6 54 24 29       	movzx  edx,BYTE PTR [esp+0x29]
c0019342:	0f b6 74 24 2a       	movzx  esi,BYTE PTR [esp+0x2a]
c0019347:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001934c:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019351:	0f b6 44 24 28       	movzx  eax,BYTE PTR [esp+0x28]
c0019356:	0f b6 db             	movzx  ebx,bl
c0019359:	51                   	push   ecx
c001935a:	56                   	push   esi
c001935b:	55                   	push   ebp
c001935c:	52                   	push   edx
c001935d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0019361:	53                   	push   ebx
c0019362:	57                   	push   edi
c0019363:	50                   	push   eax
c0019364:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019368:	68 8a 2d 02 c0       	push   0xc0022d8a
c001936d:	e8 4f 33 ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c0019372:	83 c4 1c             	add    esp,0x1c
c0019375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019379:	50                   	push   eax
c001937a:	6a 00                	push   0x0
c001937c:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0019382:	e8 81 fb fe ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019387:	83 c4 0c             	add    esp,0xc
c001938a:	57                   	push   edi
c001938b:	6a 02                	push   0x2
c001938d:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0019393:	e8 70 fb fe ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c0019398:	83 c4 0c             	add    esp,0xc
c001939b:	53                   	push   ebx
c001939c:	6a 04                	push   0x4
c001939e:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c00193a4:	e8 5f fb fe ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c00193a9:	83 c4 0c             	add    esp,0xc
c00193ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00193b0:	52                   	push   edx
c00193b1:	6a 07                	push   0x7
c00193b3:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c00193b9:	e8 4a fb fe ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c00193be:	83 c4 0c             	add    esp,0xc
c00193c1:	55                   	push   ebp
c00193c2:	6a 08                	push   0x8
c00193c4:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c00193ca:	e8 39 fb fe ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c00193cf:	83 c4 0c             	add    esp,0xc
c00193d2:	56                   	push   esi
c00193d3:	6a 09                	push   0x9
c00193d5:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c00193db:	e8 28 fb fe ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c00193e0:	5b                   	pop    ebx
c00193e1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00193e5:	e8 c6 fa ff ff       	call   c0018eb0 <RTC::completeRTCRefresh()>
c00193ea:	83 c4 4c             	add    esp,0x4c
c00193ed:	b0 01                	mov    al,0x1
c00193ef:	5b                   	pop    ebx
c00193f0:	5e                   	pop    esi
c00193f1:	5f                   	pop    edi
c00193f2:	5d                   	pop    ebp
c00193f3:	c3                   	ret    

c00193f4 <rtcIRQHandler(regs*, void*)>:
c00193f4:	53                   	push   ebx
c00193f5:	83 ec 10             	sub    esp,0x10
c00193f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00193fc:	6a 0c                	push   0xc
c00193fe:	ff 35 a8 3f 02 c0    	push   DWORD PTR ds:0xc0023fa8
c0019404:	e8 ed f9 fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c0019409:	83 c4 10             	add    esp,0x10
c001940c:	84 c0                	test   al,al
c001940e:	79 24                	jns    c0019434 <rtcIRQHandler(regs*, void*)+0x40>
c0019410:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019417:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001941e:	66 ff 05 80 75 02 c0 	inc    WORD PTR ds:0xc0027580
c0019425:	75 0d                	jne    c0019434 <rtcIRQHandler(regs*, void*)+0x40>
c0019427:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001942b:	83 c4 08             	add    esp,0x8
c001942e:	5b                   	pop    ebx
c001942f:	e9 7c fa ff ff       	jmp    c0018eb0 <RTC::completeRTCRefresh()>
c0019434:	83 c4 08             	add    esp,0x8
c0019437:	5b                   	pop    ebx
c0019438:	c3                   	ret    
c0019439:	90                   	nop

c001943a <RTC::RTC()>:
c001943a:	83 ec 1c             	sub    esp,0x1c
c001943d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019441:	83 ec 08             	sub    esp,0x8
c0019444:	68 f3 2d 02 c0       	push   0xc0022df3
c0019449:	50                   	push   eax
c001944a:	e8 b7 41 ff ff       	call   c000d606 <Clock::Clock(char const*)>
c001944f:	83 c4 10             	add    esp,0x10
c0019452:	ba 10 2e 02 c0       	mov    edx,0xc0022e10
c0019457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001945b:	89 10                	mov    DWORD PTR [eax],edx
c001945d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019461:	83 ec 0c             	sub    esp,0xc
c0019464:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019468:	6a 01                	push   0x1
c001946a:	68 f4 93 01 c0       	push   0xc00193f4
c001946f:	6a 08                	push   0x8
c0019471:	50                   	push   eax
c0019472:	e8 73 46 ff ff       	call   c000daea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019477:	83 c4 20             	add    esp,0x20
c001947a:	89 c2                	mov    edx,eax
c001947c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019480:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0019486:	fa                   	cli    
c0019487:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001948c:	40                   	inc    eax
c001948d:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c0019492:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c0019497:	83 ec 08             	sub    esp,0x8
c001949a:	6a 0b                	push   0xb
c001949c:	50                   	push   eax
c001949d:	e8 54 f9 fe ff       	call   c0008df6 <Computer::readCMOS(unsigned char)>
c00194a2:	83 c4 10             	add    esp,0x10
c00194a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00194a9:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c00194ae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194b2:	83 ca 10             	or     edx,0x10
c00194b5:	0f b6 d2             	movzx  edx,dl
c00194b8:	83 ec 04             	sub    esp,0x4
c00194bb:	52                   	push   edx
c00194bc:	6a 0b                	push   0xb
c00194be:	50                   	push   eax
c00194bf:	e8 44 fa fe ff       	call   c0008f08 <Computer::writeCMOS(unsigned char, unsigned char)>
c00194c4:	83 c4 10             	add    esp,0x10
c00194c7:	83 ec 0c             	sub    esp,0xc
c00194ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194ce:	e8 dd f9 ff ff       	call   c0018eb0 <RTC::completeRTCRefresh()>
c00194d3:	83 c4 10             	add    esp,0x10
c00194d6:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00194db:	48                   	dec    eax
c00194dc:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c00194e1:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c00194e6:	85 c0                	test   eax,eax
c00194e8:	75 01                	jne    c00194eb <RTC::RTC()+0xb1>
c00194ea:	fb                   	sti    
c00194eb:	90                   	nop
c00194ec:	83 c4 1c             	add    esp,0x1c
c00194ef:	c3                   	ret    

c00194f0 <Hal::consoleScroll(int, int)>:
c00194f0:	83 ec 10             	sub    esp,0x10
c00194f3:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00194fb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0019503:	90                   	nop
c0019504:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019509:	0f 8f e1 00 00 00    	jg     c00195f0 <Hal::consoleScroll(int, int)+0x100>
c001950f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019517:	90                   	nop
c0019518:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019520:	0f 8f be 00 00 00    	jg     c00195e4 <Hal::consoleScroll(int, int)+0xf4>
c0019526:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001952a:	89 d0                	mov    eax,edx
c001952c:	c1 e0 02             	shl    eax,0x2
c001952f:	01 d0                	add    eax,edx
c0019531:	c1 e0 05             	shl    eax,0x5
c0019534:	89 c2                	mov    edx,eax
c0019536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001953a:	01 d0                	add    eax,edx
c001953c:	89 c2                	mov    edx,eax
c001953e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019542:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0019545:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019549:	89 d0                	mov    eax,edx
c001954b:	c1 e0 02             	shl    eax,0x2
c001954e:	01 d0                	add    eax,edx
c0019550:	c1 e0 05             	shl    eax,0x5
c0019553:	89 c2                	mov    edx,eax
c0019555:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019559:	01 d0                	add    eax,edx
c001955b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019565:	01 c2                	add    edx,eax
c0019567:	8a 01                	mov    al,BYTE PTR [ecx]
c0019569:	88 02                	mov    BYTE PTR [edx],al
c001956b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019570:	75 66                	jne    c00195d8 <Hal::consoleScroll(int, int)+0xe8>
c0019572:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019576:	83 e0 01             	and    eax,0x1
c0019579:	74 39                	je     c00195b4 <Hal::consoleScroll(int, int)+0xc4>
c001957b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001957f:	83 e0 0f             	and    eax,0xf
c0019582:	88 c2                	mov    dl,al
c0019584:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019588:	c1 e0 04             	shl    eax,0x4
c001958b:	88 d1                	mov    cl,dl
c001958d:	09 c1                	or     ecx,eax
c001958f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019593:	89 d0                	mov    eax,edx
c0019595:	c1 e0 02             	shl    eax,0x2
c0019598:	01 d0                	add    eax,edx
c001959a:	c1 e0 05             	shl    eax,0x5
c001959d:	89 c2                	mov    edx,eax
c001959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195a3:	01 d0                	add    eax,edx
c00195a5:	89 c2                	mov    edx,eax
c00195a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195ab:	01 d0                	add    eax,edx
c00195ad:	88 ca                	mov    dl,cl
c00195af:	88 10                	mov    BYTE PTR [eax],dl
c00195b1:	eb 25                	jmp    c00195d8 <Hal::consoleScroll(int, int)+0xe8>
c00195b3:	90                   	nop
c00195b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195b8:	89 d0                	mov    eax,edx
c00195ba:	c1 e0 02             	shl    eax,0x2
c00195bd:	01 d0                	add    eax,edx
c00195bf:	c1 e0 05             	shl    eax,0x5
c00195c2:	89 c2                	mov    edx,eax
c00195c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195c8:	01 d0                	add    eax,edx
c00195ca:	89 c2                	mov    edx,eax
c00195cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195d0:	01 d0                	add    eax,edx
c00195d2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00195d5:	8d 76 00             	lea    esi,[esi+0x0]
c00195d8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00195dc:	e9 37 ff ff ff       	jmp    c0019518 <Hal::consoleScroll(int, int)+0x28>
c00195e1:	8d 76 00             	lea    esi,[esi+0x0]
c00195e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00195e8:	e9 17 ff ff ff       	jmp    c0019504 <Hal::consoleScroll(int, int)+0x14>
c00195ed:	8d 76 00             	lea    esi,[esi+0x0]
c00195f0:	90                   	nop
c00195f1:	83 c4 10             	add    esp,0x10
c00195f4:	c3                   	ret    
c00195f5:	8d 76 00             	lea    esi,[esi+0x0]

c00195f8 <Hal::consoleWriteCharacter(char, int, int, int, int)>:
c00195f8:	83 ec 14             	sub    esp,0x14
c00195fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195ff:	88 04 24             	mov    BYTE PTR [esp],al
c0019602:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019605:	0f b6 c0             	movzx  eax,al
c0019608:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001960c:	89 d1                	mov    ecx,edx
c001960e:	83 e1 0f             	and    ecx,0xf
c0019611:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019615:	c1 e2 04             	shl    edx,0x4
c0019618:	0f b6 d2             	movzx  edx,dl
c001961b:	09 ca                	or     edx,ecx
c001961d:	c1 e2 08             	shl    edx,0x8
c0019620:	09 d0                	or     eax,edx
c0019622:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0019627:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001962f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019633:	89 d0                	mov    eax,edx
c0019635:	c1 e0 02             	shl    eax,0x2
c0019638:	01 d0                	add    eax,edx
c001963a:	c1 e0 04             	shl    eax,0x4
c001963d:	89 c2                	mov    edx,eax
c001963f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019643:	01 d0                	add    eax,edx
c0019645:	01 c0                	add    eax,eax
c0019647:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001964b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001964f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019654:	66 89 02             	mov    WORD PTR [edx],ax
c0019657:	90                   	nop
c0019658:	83 c4 14             	add    esp,0x14
c001965b:	c3                   	ret    

c001965c <Hal::consoleCursorUpdate(int, int)>:
c001965c:	83 ec 20             	sub    esp,0x20
c001965f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019663:	89 c2                	mov    edx,eax
c0019665:	89 d0                	mov    eax,edx
c0019667:	c1 e0 02             	shl    eax,0x2
c001966a:	01 d0                	add    eax,edx
c001966c:	c1 e0 04             	shl    eax,0x4
c001966f:	89 c2                	mov    edx,eax
c0019671:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019675:	01 d0                	add    eax,edx
c0019677:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001967c:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019683:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0019688:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001968c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019690:	ee                   	out    dx,al
c0019691:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019696:	0f b6 c0             	movzx  eax,al
c0019699:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00196a0:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00196a4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00196a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196ac:	ee                   	out    dx,al
c00196ad:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00196b4:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00196b9:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00196bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00196c1:	ee                   	out    dx,al
c00196c2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00196c7:	66 c1 e8 08          	shr    ax,0x8
c00196cb:	0f b6 c0             	movzx  eax,al
c00196ce:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00196d5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00196d9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00196dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196e1:	ee                   	out    dx,al
c00196e2:	90                   	nop
c00196e3:	83 c4 20             	add    esp,0x20
c00196e6:	c3                   	ret    
c00196e7:	90                   	nop

c00196e8 <FAT::getName()>:
c00196e8:	b8 44 2e 02 c0       	mov    eax,0xc0022e44
c00196ed:	c3                   	ret    
c00196ee:	66 90                	xchg   ax,ax

c00196f0 <FAT::tell(void*, unsigned long long*)>:
c00196f0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00196f5:	75 09                	jne    c0019700 <FAT::tell(void*, unsigned long long*)+0x10>
c00196f7:	b8 04 00 00 00       	mov    eax,0x4
c00196fc:	c3                   	ret    
c00196fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019700:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019705:	75 09                	jne    c0019710 <FAT::tell(void*, unsigned long long*)+0x20>
c0019707:	b8 04 00 00 00       	mov    eax,0x4
c001970c:	c3                   	ret    
c001970d:	8d 76 00             	lea    esi,[esi+0x0]
c0019710:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019714:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019717:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001971a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001971e:	89 01                	mov    DWORD PTR [ecx],eax
c0019720:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019723:	b8 00 00 00 00       	mov    eax,0x0
c0019728:	c3                   	ret    
c0019729:	90                   	nop
c001972a:	66 90                	xchg   ax,ax

c001972c <FAT::stat(void*, unsigned long long*)>:
c001972c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019731:	75 09                	jne    c001973c <FAT::stat(void*, unsigned long long*)+0x10>
c0019733:	b8 04 00 00 00       	mov    eax,0x4
c0019738:	c3                   	ret    
c0019739:	8d 76 00             	lea    esi,[esi+0x0]
c001973c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019741:	75 09                	jne    c001974c <FAT::stat(void*, unsigned long long*)+0x20>
c0019743:	b8 04 00 00 00       	mov    eax,0x4
c0019748:	c3                   	ret    
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019750:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019753:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019756:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001975a:	89 01                	mov    DWORD PTR [ecx],eax
c001975c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001975f:	b8 00 00 00 00       	mov    eax,0x0
c0019764:	c3                   	ret    
c0019765:	90                   	nop
c0019766:	66 90                	xchg   ax,ax

c0019768 <FAT::~FAT()>:
c0019768:	83 ec 0c             	sub    esp,0xc
c001976b:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c0019770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019774:	89 10                	mov    DWORD PTR [eax],edx
c0019776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001977a:	83 ec 0c             	sub    esp,0xc
c001977d:	50                   	push   eax
c001977e:	e8 79 32 ff ff       	call   c000c9fc <Filesystem::~Filesystem()>
c0019783:	83 c4 10             	add    esp,0x10
c0019786:	90                   	nop
c0019787:	83 c4 0c             	add    esp,0xc
c001978a:	c3                   	ret    
c001978b:	90                   	nop

c001978c <FAT::~FAT()>:
c001978c:	83 ec 0c             	sub    esp,0xc
c001978f:	83 ec 0c             	sub    esp,0xc
c0019792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019796:	e8 cd ff ff ff       	call   c0019768 <FAT::~FAT()>
c001979b:	83 c4 10             	add    esp,0x10
c001979e:	83 ec 08             	sub    esp,0x8
c00197a1:	6a 08                	push   0x8
c00197a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197a7:	e8 34 2e ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c00197ac:	83 c4 10             	add    esp,0x10
c00197af:	83 c4 0c             	add    esp,0xc
c00197b2:	c3                   	ret    
c00197b3:	90                   	nop

c00197b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00197b4:	83 ec 1c             	sub    esp,0x1c
c00197b7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00197be:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00197c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197c7:	8b 04 85 c0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a40]
c00197ce:	83 f8 ff             	cmp    eax,0xffffffff
c00197d1:	75 35                	jne    c0019808 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00197d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00197d7:	88 c2                	mov    dl,al
c00197d9:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c00197de:	01 d0                	add    eax,edx
c00197e0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00197e4:	8b 15 a0 75 02 c0    	mov    edx,DWORD PTR ds:0xc00275a0
c00197ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197ee:	89 14 85 c0 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8a40],edx
c00197f5:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c00197fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00197fe:	89 14 85 40 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd89c0],edx
c0019805:	eb 19                	jmp    c0019820 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019807:	90                   	nop
c0019808:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001980c:	88 c2                	mov    dl,al
c001980e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019812:	8b 04 85 c0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a40]
c0019819:	01 d0                	add    eax,edx
c001981b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001981f:	90                   	nop
c0019820:	83 ec 04             	sub    esp,0x4
c0019823:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019827:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001982b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001982f:	50                   	push   eax
c0019830:	e8 21 d2 fe ff       	call   c0006a56 <f_getlabel>
c0019835:	83 c4 10             	add    esp,0x10
c0019838:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001983c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019841:	75 09                	jne    c001984c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019843:	b8 00 00 00 00       	mov    eax,0x0
c0019848:	eb 0a                	jmp    c0019854 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001984a:	66 90                	xchg   ax,ax
c001984c:	b8 01 00 00 00       	mov    eax,0x1
c0019851:	8d 76 00             	lea    esi,[esi+0x0]
c0019854:	83 c4 1c             	add    esp,0x1c
c0019857:	c3                   	ret    

c0019858 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019858:	57                   	push   edi
c0019859:	83 ec 58             	sub    esp,0x58
c001985c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019864:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019868:	b9 0f 00 00 00       	mov    ecx,0xf
c001986d:	b8 00 00 00 00       	mov    eax,0x0
c0019872:	fc                   	cld    
c0019873:	89 d7                	mov    edi,edx
c0019875:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019877:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001987b:	8b 04 85 c0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a40]
c0019882:	83 f8 ff             	cmp    eax,0xffffffff
c0019885:	75 35                	jne    c00198bc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0019887:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001988b:	88 c2                	mov    dl,al
c001988d:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c0019892:	01 d0                	add    eax,edx
c0019894:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019898:	8b 15 a0 75 02 c0    	mov    edx,DWORD PTR ds:0xc00275a0
c001989e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00198a2:	89 14 85 c0 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8a40],edx
c00198a9:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c00198ae:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00198b2:	89 14 85 40 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd89c0],edx
c00198b9:	eb 19                	jmp    c00198d4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00198bb:	90                   	nop
c00198bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00198c0:	88 c2                	mov    dl,al
c00198c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00198c6:	8b 04 85 c0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a40]
c00198cd:	01 d0                	add    eax,edx
c00198cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00198d3:	90                   	nop
c00198d4:	83 ec 08             	sub    esp,0x8
c00198d7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00198db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198df:	50                   	push   eax
c00198e0:	e8 bf 6d fe ff       	call   c00006a4 <strcat>
c00198e5:	83 c4 10             	add    esp,0x10
c00198e8:	83 ec 0c             	sub    esp,0xc
c00198eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198ef:	50                   	push   eax
c00198f0:	e8 4f d3 fe ff       	call   c0006c44 <f_setlabel>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00198fc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019901:	75 09                	jne    c001990c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019903:	b8 00 00 00 00       	mov    eax,0x0
c0019908:	eb 0a                	jmp    c0019914 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001990a:	66 90                	xchg   ax,ax
c001990c:	b8 01 00 00 00       	mov    eax,0x1
c0019911:	8d 76 00             	lea    esi,[esi+0x0]
c0019914:	83 c4 58             	add    esp,0x58
c0019917:	5f                   	pop    edi
c0019918:	c3                   	ret    
c0019919:	90                   	nop
c001991a:	66 90                	xchg   ax,ax

c001991c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001991c:	83 ec 2c             	sub    esp,0x2c
c001991f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019927:	83 ec 08             	sub    esp,0x8
c001992a:	68 68 2e 02 c0       	push   0xc0022e68
c001992f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019933:	e8 b8 6c fe ff       	call   c00005f0 <strcmp>
c0019938:	83 c4 10             	add    esp,0x10
c001993b:	85 c0                	test   eax,eax
c001993d:	0f 94 c0             	sete   al
c0019940:	84 c0                	test   al,al
c0019942:	74 10                	je     c0019954 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019944:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001994c:	e9 b3 00 00 00       	jmp    c0019a04 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0019951:	8d 76 00             	lea    esi,[esi+0x0]
c0019954:	83 ec 08             	sub    esp,0x8
c0019957:	68 5a 2e 02 c0       	push   0xc0022e5a
c001995c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019960:	e8 8b 6c fe ff       	call   c00005f0 <strcmp>
c0019965:	83 c4 10             	add    esp,0x10
c0019968:	85 c0                	test   eax,eax
c001996a:	0f 94 c0             	sete   al
c001996d:	84 c0                	test   al,al
c001996f:	74 0f                	je     c0019980 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0019971:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019979:	e9 86 00 00 00       	jmp    c0019a04 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001997e:	66 90                	xchg   ax,ax
c0019980:	83 ec 08             	sub    esp,0x8
c0019983:	68 60 2e 02 c0       	push   0xc0022e60
c0019988:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001998c:	e8 5f 6c fe ff       	call   c00005f0 <strcmp>
c0019991:	83 c4 10             	add    esp,0x10
c0019994:	85 c0                	test   eax,eax
c0019996:	0f 94 c0             	sete   al
c0019999:	84 c0                	test   al,al
c001999b:	74 0b                	je     c00199a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001999d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00199a5:	eb 5d                	jmp    c0019a04 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00199a7:	90                   	nop
c00199a8:	83 ec 08             	sub    esp,0x8
c00199ab:	68 cc 09 02 c0       	push   0xc00209cc
c00199b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199b4:	e8 37 6c fe ff       	call   c00005f0 <strcmp>
c00199b9:	83 c4 10             	add    esp,0x10
c00199bc:	85 c0                	test   eax,eax
c00199be:	0f 94 c0             	sete   al
c00199c1:	84 c0                	test   al,al
c00199c3:	74 0b                	je     c00199d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00199c5:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00199cd:	eb 35                	jmp    c0019a04 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00199cf:	90                   	nop
c00199d0:	83 ec 08             	sub    esp,0x8
c00199d3:	68 66 2e 02 c0       	push   0xc0022e66
c00199d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199dc:	e8 0f 6c fe ff       	call   c00005f0 <strcmp>
c00199e1:	83 c4 10             	add    esp,0x10
c00199e4:	85 c0                	test   eax,eax
c00199e6:	0f 94 c0             	sete   al
c00199e9:	84 c0                	test   al,al
c00199eb:	74 0b                	je     c00199f8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00199ed:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00199f5:	eb 0d                	jmp    c0019a04 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00199f7:	90                   	nop
c00199f8:	b8 08 00 00 00       	mov    eax,0x8
c00199fd:	e9 ea 00 00 00       	jmp    c0019aec <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0019a02:	66 90                	xchg   ax,ax
c0019a04:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019a0b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019a10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a14:	8b 04 85 c0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a40]
c0019a1b:	83 f8 ff             	cmp    eax,0xffffffff
c0019a1e:	75 34                	jne    c0019a54 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0019a20:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a24:	88 c2                	mov    dl,al
c0019a26:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c0019a2b:	01 d0                	add    eax,edx
c0019a2d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a31:	8b 15 a0 75 02 c0    	mov    edx,DWORD PTR ds:0xc00275a0
c0019a37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a3b:	89 14 85 c0 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8a40],edx
c0019a42:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c0019a47:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019a4b:	89 14 85 40 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd89c0],edx
c0019a52:	eb 18                	jmp    c0019a6c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0019a54:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a58:	88 c2                	mov    dl,al
c0019a5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a5e:	8b 04 85 c0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a40]
c0019a65:	01 d0                	add    eax,edx
c0019a67:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a6b:	90                   	nop
c0019a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a70:	88 04 24             	mov    BYTE PTR [esp],al
c0019a73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019a77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a7b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019a83:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019a88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a90:	83 ec 0c             	sub    esp,0xc
c0019a93:	68 00 20 00 00       	push   0x2000
c0019a98:	e8 e2 fc fe ff       	call   c000977f <malloc>
c0019a9d:	83 c4 10             	add    esp,0x10
c0019aa0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019aa4:	68 00 20 00 00       	push   0x2000
c0019aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019aad:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ab1:	50                   	push   eax
c0019ab2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019ab6:	50                   	push   eax
c0019ab7:	e8 09 d8 fe ff       	call   c00072c5 <f_mkfs>
c0019abc:	83 c4 10             	add    esp,0x10
c0019abf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019ac8:	75 0a                	jne    c0019ad4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0019aca:	b8 00 00 00 00       	mov    eax,0x0
c0019acf:	eb 1b                	jmp    c0019aec <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0019ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019ad9:	75 09                	jne    c0019ae4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019adb:	b8 09 00 00 00       	mov    eax,0x9
c0019ae0:	eb 0a                	jmp    c0019aec <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0019ae2:	66 90                	xchg   ax,ax
c0019ae4:	b8 01 00 00 00       	mov    eax,0x1
c0019ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aec:	83 c4 2c             	add    esp,0x2c
c0019aef:	c3                   	ret    

c0019af0 <FAT::tryMount(LogicalDisk*, int)>:
c0019af0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0019af6:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c0019afb:	83 f8 14             	cmp    eax,0x14
c0019afe:	75 18                	jne    c0019b18 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019b00:	83 ec 0c             	sub    esp,0xc
c0019b03:	68 6c 2e 02 c0       	push   0xc0022e6c
c0019b08:	e8 f6 8a ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0019b0d:	83 c4 10             	add    esp,0x10
c0019b10:	b0 00                	mov    al,0x0
c0019b12:	e9 e9 01 00 00       	jmp    c0019d00 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0019b17:	90                   	nop
c0019b18:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019b1f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b25:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b2b:	3d 00 02 00 00       	cmp    eax,0x200
c0019b30:	74 0a                	je     c0019b3c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019b32:	b0 00                	mov    al,0x0
c0019b34:	e9 c7 01 00 00       	jmp    c0019d00 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0019b39:	8d 76 00             	lea    esi,[esi+0x0]
c0019b3c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019b44:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019b4b:	8b 04 85 c0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a40]
c0019b52:	83 f8 ff             	cmp    eax,0xffffffff
c0019b55:	74 09                	je     c0019b60 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019b57:	b0 01                	mov    al,0x1
c0019b59:	e9 a2 01 00 00       	jmp    c0019d00 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0019b5e:	66 90                	xchg   ax,ax
c0019b60:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019b6a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019b72:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019b79:	88 c2                	mov    dl,al
c0019b7b:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c0019b80:	01 d0                	add    eax,edx
c0019b82:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019b89:	8b 15 a0 75 02 c0    	mov    edx,DWORD PTR ds:0xc00275a0
c0019b8f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019b96:	89 14 85 c0 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8a40],edx
c0019b9d:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c0019ba2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019ba9:	89 14 85 40 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd89c0],edx
c0019bb0:	83 ec 0c             	sub    esp,0xc
c0019bb3:	68 54 02 00 00       	push   0x254
c0019bb8:	e8 c2 fb fe ff       	call   c000977f <malloc>
c0019bbd:	83 c4 10             	add    esp,0x10
c0019bc0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019bc7:	83 ec 04             	sub    esp,0x4
c0019bca:	6a 00                	push   0x0
c0019bcc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019bd3:	50                   	push   eax
c0019bd4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019bdb:	e8 6d b0 fe ff       	call   c0004c4d <f_mount>
c0019be0:	83 c4 10             	add    esp,0x10
c0019be3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019bea:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019bf2:	74 1c                	je     c0019c10 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019bf4:	83 ec 0c             	sub    esp,0xc
c0019bf7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019bfe:	e8 9c fb fe ff       	call   c000979f <rfree>
c0019c03:	83 c4 10             	add    esp,0x10
c0019c06:	b0 00                	mov    al,0x0
c0019c08:	e9 f3 00 00 00       	jmp    c0019d00 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0019c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c10:	83 ec 04             	sub    esp,0x4
c0019c13:	68 00 01 00 00       	push   0x100
c0019c18:	6a 00                	push   0x0
c0019c1a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019c21:	50                   	push   eax
c0019c22:	e8 81 68 fe ff       	call   c00004a8 <memset>
c0019c27:	83 c4 10             	add    esp,0x10
c0019c2a:	83 ec 08             	sub    esp,0x8
c0019c2d:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019c34:	50                   	push   eax
c0019c35:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019c3c:	50                   	push   eax
c0019c3d:	e8 62 6a fe ff       	call   c00006a4 <strcat>
c0019c42:	83 c4 10             	add    esp,0x10
c0019c45:	83 ec 08             	sub    esp,0x8
c0019c48:	68 7a 2e 02 c0       	push   0xc0022e7a
c0019c4d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019c54:	50                   	push   eax
c0019c55:	e8 4a 6a fe ff       	call   c00006a4 <strcat>
c0019c5a:	83 c4 10             	add    esp,0x10
c0019c5d:	83 ec 04             	sub    esp,0x4
c0019c60:	6a 01                	push   0x1
c0019c62:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019c69:	50                   	push   eax
c0019c6a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019c6e:	50                   	push   eax
c0019c6f:	e8 3b b0 fe ff       	call   c0004caf <f_open>
c0019c74:	83 c4 10             	add    esp,0x10
c0019c77:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019c7e:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019c85:	85 c0                	test   eax,eax
c0019c87:	74 0b                	je     c0019c94 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019c89:	78 31                	js     c0019cbc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019c8b:	83 e8 04             	sub    eax,0x4
c0019c8e:	83 f8 01             	cmp    eax,0x1
c0019c91:	77 29                	ja     c0019cbc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019c93:	90                   	nop
c0019c94:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019c9c:	83 ec 0c             	sub    esp,0xc
c0019c9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ca3:	50                   	push   eax
c0019ca4:	e8 58 bb fe ff       	call   c0005801 <f_close>
c0019ca9:	83 c4 10             	add    esp,0x10
c0019cac:	90                   	nop
c0019cad:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019cb5:	74 41                	je     c0019cf8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0019cb7:	eb 33                	jmp    c0019cec <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cbc:	83 ec 0c             	sub    esp,0xc
c0019cbf:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019cc6:	e8 d4 fa fe ff       	call   c000979f <rfree>
c0019ccb:	83 c4 10             	add    esp,0x10
c0019cce:	83 ec 04             	sub    esp,0x4
c0019cd1:	6a 00                	push   0x0
c0019cd3:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019cda:	50                   	push   eax
c0019cdb:	6a 00                	push   0x0
c0019cdd:	e8 6b af fe ff       	call   c0004c4d <f_mount>
c0019ce2:	83 c4 10             	add    esp,0x10
c0019ce5:	b0 00                	mov    al,0x0
c0019ce7:	eb 17                	jmp    c0019d00 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0019ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cec:	a1 a0 75 02 c0       	mov    eax,ds:0xc00275a0
c0019cf1:	40                   	inc    eax
c0019cf2:	a3 a0 75 02 c0       	mov    ds:0xc00275a0,eax
c0019cf7:	90                   	nop
c0019cf8:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019cff:	90                   	nop
c0019d00:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019d06:	c3                   	ret    
c0019d07:	90                   	nop

c0019d08 <FAT::allocateSwapfile(char const*, int)>:
c0019d08:	55                   	push   ebp
c0019d09:	57                   	push   edi
c0019d0a:	56                   	push   esi
c0019d0b:	53                   	push   ebx
c0019d0c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019d12:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019d1d:	83 ec 0c             	sub    esp,0xc
c0019d20:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019d27:	e8 53 fa fe ff       	call   c000977f <malloc>
c0019d2c:	83 c4 10             	add    esp,0x10
c0019d2f:	89 c7                	mov    edi,eax
c0019d31:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c0019d36:	83 ec 04             	sub    esp,0x4
c0019d39:	50                   	push   eax
c0019d3a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019d41:	57                   	push   edi
c0019d42:	e8 e5 2e ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c0019d47:	83 c4 10             	add    esp,0x10
c0019d4a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019d51:	83 ec 04             	sub    esp,0x4
c0019d54:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019d58:	50                   	push   eax
c0019d59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d5d:	50                   	push   eax
c0019d5e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d65:	e8 48 32 ff ff       	call   c000cfb2 <File::stat(unsigned long long*, bool*)>
c0019d6a:	83 c4 10             	add    esp,0x10
c0019d6d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d74:	c1 e0 14             	shl    eax,0x14
c0019d77:	89 c7                	mov    edi,eax
c0019d79:	89 c5                	mov    ebp,eax
c0019d7b:	c1 fd 1f             	sar    ebp,0x1f
c0019d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d86:	89 f9                	mov    ecx,edi
c0019d88:	31 c1                	xor    ecx,eax
c0019d8a:	89 cb                	mov    ebx,ecx
c0019d8c:	89 e9                	mov    ecx,ebp
c0019d8e:	31 d1                	xor    ecx,edx
c0019d90:	89 ce                	mov    esi,ecx
c0019d92:	89 f0                	mov    eax,esi
c0019d94:	09 d8                	or     eax,ebx
c0019d96:	0f 84 98 00 00 00    	je     c0019e34 <FAT::allocateSwapfile(char const*, int)+0x12c>
c0019d9c:	83 ec 0c             	sub    esp,0xc
c0019d9f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019da6:	e8 d3 30 ff ff       	call   c000ce7e <File::unlink()>
c0019dab:	83 c4 10             	add    esp,0x10
c0019dae:	83 ec 08             	sub    esp,0x8
c0019db1:	6a 12                	push   0x12
c0019db3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019dba:	e8 47 2f ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c0019dbf:	83 c4 10             	add    esp,0x10
c0019dc2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019dc9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019dcf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019dd6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019ddd:	c1 e0 14             	shl    eax,0x14
c0019de0:	99                   	cdq    
c0019de1:	6a 01                	push   0x1
c0019de3:	52                   	push   edx
c0019de4:	50                   	push   eax
c0019de5:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019dec:	e8 c0 d0 fe ff       	call   c0006eb1 <f_expand>
c0019df1:	83 c4 10             	add    esp,0x10
c0019df4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019dfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dfd:	83 c0 10             	add    eax,0x10
c0019e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e02:	83 ec 0c             	sub    esp,0xc
c0019e05:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019e09:	52                   	push   edx
c0019e0a:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019e0e:	52                   	push   edx
c0019e0f:	6a 00                	push   0x0
c0019e11:	68 00 04 00 00       	push   0x400
c0019e16:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e1d:	ff d0                	call   eax
c0019e1f:	83 c4 20             	add    esp,0x20
c0019e22:	83 ec 0c             	sub    esp,0xc
c0019e25:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e2c:	e8 33 2f ff ff       	call   c000cd64 <File::close()>
c0019e31:	83 c4 10             	add    esp,0x10
c0019e34:	83 ec 08             	sub    esp,0x8
c0019e37:	6a 01                	push   0x1
c0019e39:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e40:	e8 c1 2e ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c0019e45:	83 c4 10             	add    esp,0x10
c0019e48:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e51:	83 c0 0c             	add    eax,0xc
c0019e54:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e56:	83 ec 0c             	sub    esp,0xc
c0019e59:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019e5d:	52                   	push   edx
c0019e5e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019e62:	52                   	push   edx
c0019e63:	6a 00                	push   0x0
c0019e65:	6a 04                	push   0x4
c0019e67:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e6e:	ff d0                	call   eax
c0019e70:	83 c4 20             	add    esp,0x20
c0019e73:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e7a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019e80:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019e87:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019e8e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0019e91:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019e94:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019e9b:	83 ec 0c             	sub    esp,0xc
c0019e9e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019ea5:	e8 ba 2e ff ff       	call   c000cd64 <File::close()>
c0019eaa:	83 c4 10             	add    esp,0x10
c0019ead:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019eb4:	ba 00 00 00 00       	mov    edx,0x0
c0019eb9:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019ebf:	5b                   	pop    ebx
c0019ec0:	5e                   	pop    esi
c0019ec1:	5f                   	pop    edi
c0019ec2:	5d                   	pop    ebp
c0019ec3:	c3                   	ret    

c0019ec4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019ec4:	57                   	push   edi
c0019ec5:	56                   	push   esi
c0019ec6:	53                   	push   ebx
c0019ec7:	81 ec 50 02 00 00    	sub    esp,0x250
c0019ecd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019ed5:	74 0d                	je     c0019ee4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019ed7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019edf:	75 0f                	jne    c0019ef0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ee4:	b8 04 00 00 00       	mov    eax,0x4
c0019ee9:	e9 36 01 00 00       	jmp    c001a024 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0019eee:	66 90                	xchg   ax,ax
c0019ef0:	83 ec 08             	sub    esp,0x8
c0019ef3:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019efa:	50                   	push   eax
c0019efb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019f02:	e8 04 bf fe ff       	call   c0005e0b <f_readdir>
c0019f07:	83 c4 10             	add    esp,0x10
c0019f0a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019f11:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0019f18:	83 ec 0c             	sub    esp,0xc
c0019f1b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019f22:	83 c0 1a             	add    eax,0x1a
c0019f25:	50                   	push   eax
c0019f26:	e8 99 65 fe ff       	call   c00004c4 <strlen>
c0019f2b:	83 c4 10             	add    esp,0x10
c0019f2e:	ba 00 00 00 00       	mov    edx,0x0
c0019f33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f3b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019f42:	0f b6 c0             	movzx  eax,al
c0019f45:	83 e0 10             	and    eax,0x10
c0019f48:	74 0a                	je     c0019f54 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019f4a:	b8 02 00 00 00       	mov    eax,0x2
c0019f4f:	eb 0b                	jmp    c0019f5c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	b8 01 00 00 00       	mov    eax,0x1
c0019f59:	8d 76 00             	lea    esi,[esi+0x0]
c0019f5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f60:	83 ec 08             	sub    esp,0x8
c0019f63:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019f6a:	83 c0 1a             	add    eax,0x1a
c0019f6d:	50                   	push   eax
c0019f6e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f72:	83 c0 10             	add    eax,0x10
c0019f75:	50                   	push   eax
c0019f76:	e8 e9 65 fe ff       	call   c0000564 <strcpy>
c0019f7b:	83 c4 10             	add    esp,0x10
c0019f7e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019f85:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019f8c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0019f90:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019f97:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019f9e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019fa5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019fac:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019fb3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019fba:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019fc1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019fc8:	89 c6                	mov    esi,eax
c0019fca:	89 d7                	mov    edi,edx
c0019fcc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fce:	89 c8                	mov    eax,ecx
c0019fd0:	89 fa                	mov    edx,edi
c0019fd2:	89 f3                	mov    ebx,esi
c0019fd4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019fdb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019fe2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019fe9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019ff0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019ff6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019ffd:	84 c0                	test   al,al
c0019fff:	75 07                	jne    c001a008 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001a001:	b8 07 00 00 00       	mov    eax,0x7
c001a006:	eb 1c                	jmp    c001a024 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001a008:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a00f:	85 c0                	test   eax,eax
c001a011:	75 09                	jne    c001a01c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001a013:	b8 00 00 00 00       	mov    eax,0x0
c001a018:	eb 0a                	jmp    c001a024 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001a01a:	66 90                	xchg   ax,ax
c001a01c:	b8 01 00 00 00       	mov    eax,0x1
c001a021:	8d 76 00             	lea    esi,[esi+0x0]
c001a024:	81 c4 50 02 00 00    	add    esp,0x250
c001a02a:	5b                   	pop    ebx
c001a02b:	5e                   	pop    esi
c001a02c:	5f                   	pop    edi
c001a02d:	c3                   	ret    
c001a02e:	66 90                	xchg   ax,ax

c001a030 <FAT::read(void*, unsigned long, void*, int*)>:
c001a030:	83 ec 1c             	sub    esp,0x1c
c001a033:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a038:	74 0a                	je     c001a044 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a03a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a03f:	75 0b                	jne    c001a04c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a041:	8d 76 00             	lea    esi,[esi+0x0]
c001a044:	b8 04 00 00 00       	mov    eax,0x4
c001a049:	eb 41                	jmp    c001a08c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a04b:	90                   	nop
c001a04c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a050:	50                   	push   eax
c001a051:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a055:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a059:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a05d:	e8 89 b0 fe ff       	call   c00050eb <f_read>
c001a062:	83 c4 10             	add    esp,0x10
c001a065:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a069:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a06d:	89 c2                	mov    edx,eax
c001a06f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a073:	89 10                	mov    DWORD PTR [eax],edx
c001a075:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a079:	85 c0                	test   eax,eax
c001a07b:	75 07                	jne    c001a084 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a07d:	b8 00 00 00 00       	mov    eax,0x0
c001a082:	eb 08                	jmp    c001a08c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a084:	b8 01 00 00 00       	mov    eax,0x1
c001a089:	8d 76 00             	lea    esi,[esi+0x0]
c001a08c:	83 c4 1c             	add    esp,0x1c
c001a08f:	c3                   	ret    

c001a090 <FAT::write(void*, unsigned long, void*, int*)>:
c001a090:	83 ec 1c             	sub    esp,0x1c
c001a093:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a098:	74 0a                	je     c001a0a4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a09a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a09f:	75 0b                	jne    c001a0ac <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0a4:	b8 04 00 00 00       	mov    eax,0x4
c001a0a9:	eb 41                	jmp    c001a0ec <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a0ab:	90                   	nop
c001a0ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a0b0:	50                   	push   eax
c001a0b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a0b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0bd:	e8 a9 b2 fe ff       	call   c000536b <f_write>
c001a0c2:	83 c4 10             	add    esp,0x10
c001a0c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0cd:	89 c2                	mov    edx,eax
c001a0cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0d3:	89 10                	mov    DWORD PTR [eax],edx
c001a0d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0d9:	85 c0                	test   eax,eax
c001a0db:	75 07                	jne    c001a0e4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a0dd:	b8 00 00 00 00       	mov    eax,0x0
c001a0e2:	eb 08                	jmp    c001a0ec <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a0e4:	b8 01 00 00 00       	mov    eax,0x1
c001a0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0ec:	83 c4 1c             	add    esp,0x1c
c001a0ef:	c3                   	ret    

c001a0f0 <FAT::close(void*)>:
c001a0f0:	83 ec 1c             	sub    esp,0x1c
c001a0f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0f8:	75 0a                	jne    c001a104 <FAT::close(void*)+0x14>
c001a0fa:	b8 04 00 00 00       	mov    eax,0x4
c001a0ff:	eb 3f                	jmp    c001a140 <FAT::close(void*)+0x50>
c001a101:	8d 76 00             	lea    esi,[esi+0x0]
c001a104:	83 ec 0c             	sub    esp,0xc
c001a107:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a10b:	e8 f1 b6 fe ff       	call   c0005801 <f_close>
c001a110:	83 c4 10             	add    esp,0x10
c001a113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a117:	83 ec 0c             	sub    esp,0xc
c001a11a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a11e:	e8 6c f6 fe ff       	call   c000978f <free>
c001a123:	83 c4 10             	add    esp,0x10
c001a126:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a12a:	85 c0                	test   eax,eax
c001a12c:	75 0a                	jne    c001a138 <FAT::close(void*)+0x48>
c001a12e:	b8 00 00 00 00       	mov    eax,0x0
c001a133:	eb 0b                	jmp    c001a140 <FAT::close(void*)+0x50>
c001a135:	8d 76 00             	lea    esi,[esi+0x0]
c001a138:	b8 01 00 00 00       	mov    eax,0x1
c001a13d:	8d 76 00             	lea    esi,[esi+0x0]
c001a140:	83 c4 1c             	add    esp,0x1c
c001a143:	c3                   	ret    

c001a144 <FAT::closeDir(void*)>:
c001a144:	83 ec 1c             	sub    esp,0x1c
c001a147:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a14c:	75 0a                	jne    c001a158 <FAT::closeDir(void*)+0x14>
c001a14e:	b8 04 00 00 00       	mov    eax,0x4
c001a153:	eb 3f                	jmp    c001a194 <FAT::closeDir(void*)+0x50>
c001a155:	8d 76 00             	lea    esi,[esi+0x0]
c001a158:	83 ec 0c             	sub    esp,0xc
c001a15b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a15f:	e8 85 bc fe ff       	call   c0005de9 <f_closedir>
c001a164:	83 c4 10             	add    esp,0x10
c001a167:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a16b:	83 ec 0c             	sub    esp,0xc
c001a16e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a172:	e8 18 f6 fe ff       	call   c000978f <free>
c001a177:	83 c4 10             	add    esp,0x10
c001a17a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a17e:	85 c0                	test   eax,eax
c001a180:	75 0a                	jne    c001a18c <FAT::closeDir(void*)+0x48>
c001a182:	b8 00 00 00 00       	mov    eax,0x0
c001a187:	eb 0b                	jmp    c001a194 <FAT::closeDir(void*)+0x50>
c001a189:	8d 76 00             	lea    esi,[esi+0x0]
c001a18c:	b8 01 00 00 00       	mov    eax,0x1
c001a191:	8d 76 00             	lea    esi,[esi+0x0]
c001a194:	83 c4 1c             	add    esp,0x1c
c001a197:	c3                   	ret    

c001a198 <FAT::seek(void*, unsigned long long)>:
c001a198:	83 ec 2c             	sub    esp,0x2c
c001a19b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a19f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1ab:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a1b0:	75 0a                	jne    c001a1bc <FAT::seek(void*, unsigned long long)+0x24>
c001a1b2:	b8 04 00 00 00       	mov    eax,0x4
c001a1b7:	eb 37                	jmp    c001a1f0 <FAT::seek(void*, unsigned long long)+0x58>
c001a1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1bc:	83 ec 04             	sub    esp,0x4
c001a1bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a1c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a1c7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a1cb:	e8 60 b6 fe ff       	call   c0005830 <f_lseek>
c001a1d0:	83 c4 10             	add    esp,0x10
c001a1d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1db:	85 c0                	test   eax,eax
c001a1dd:	75 09                	jne    c001a1e8 <FAT::seek(void*, unsigned long long)+0x50>
c001a1df:	b8 00 00 00 00       	mov    eax,0x0
c001a1e4:	eb 0a                	jmp    c001a1f0 <FAT::seek(void*, unsigned long long)+0x58>
c001a1e6:	66 90                	xchg   ax,ax
c001a1e8:	b8 01 00 00 00       	mov    eax,0x1
c001a1ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a1f0:	83 c4 2c             	add    esp,0x2c
c001a1f3:	c3                   	ret    

c001a1f4 <fatWrapperReadDisk>:
c001a1f4:	83 ec 1c             	sub    esp,0x1c
c001a1f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a1ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a203:	89 04 24             	mov    DWORD PTR [esp],eax
c001a206:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a20a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a20e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a213:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c001a21a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a21e:	83 ec 0c             	sub    esp,0xc
c001a221:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a225:	52                   	push   edx
c001a226:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a22a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a22e:	50                   	push   eax
c001a22f:	e8 36 4c ff ff       	call   c000ee6a <LogicalDisk::read(unsigned long long, int, void*)>
c001a234:	83 c4 20             	add    esp,0x20
c001a237:	83 c4 1c             	add    esp,0x1c
c001a23a:	c3                   	ret    
c001a23b:	90                   	nop

c001a23c <fatWrapperWriteDisk>:
c001a23c:	83 ec 1c             	sub    esp,0x1c
c001a23f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a243:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a247:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a24b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a24e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a252:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a256:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a25b:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c001a262:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a266:	83 ec 0c             	sub    esp,0xc
c001a269:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a26d:	52                   	push   edx
c001a26e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a272:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a276:	50                   	push   eax
c001a277:	e8 5a 4c ff ff       	call   c000eed6 <LogicalDisk::write(unsigned long long, int, void*)>
c001a27c:	83 c4 20             	add    esp,0x20
c001a27f:	83 c4 1c             	add    esp,0x1c
c001a282:	c3                   	ret    
c001a283:	90                   	nop

c001a284 <fatWrapperIoctl>:
c001a284:	53                   	push   ebx
c001a285:	83 ec 28             	sub    esp,0x28
c001a288:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a28c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a290:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a294:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a298:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a29d:	75 31                	jne    c001a2d0 <fatWrapperIoctl+0x4c>
c001a29f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2a7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2ac:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c001a2b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a2b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a2bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2c3:	66 89 02             	mov    WORD PTR [edx],ax
c001a2c6:	b8 00 00 00 00       	mov    eax,0x0
c001a2cb:	e9 bc 00 00 00       	jmp    c001a38c <fatWrapperIoctl+0x108>
c001a2d0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a2d5:	75 6d                	jne    c001a344 <fatWrapperIoctl+0xc0>
c001a2d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2e4:	8b 04 85 20 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ae0]
c001a2eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a2f1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a2f7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a2fd:	89 c8                	mov    eax,ecx
c001a2ff:	89 da                	mov    edx,ebx
c001a301:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a305:	c1 e0 0a             	shl    eax,0xa
c001a308:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a30d:	8b 0c 8d 20 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9ae0]
c001a314:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a31a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a320:	89 cb                	mov    ebx,ecx
c001a322:	c1 fb 1f             	sar    ebx,0x1f
c001a325:	53                   	push   ebx
c001a326:	51                   	push   ecx
c001a327:	52                   	push   edx
c001a328:	50                   	push   eax
c001a329:	e8 72 57 00 00       	call   c001faa0 <__udivdi3>
c001a32e:	83 c4 10             	add    esp,0x10
c001a331:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a335:	89 01                	mov    DWORD PTR [ecx],eax
c001a337:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a33a:	b8 00 00 00 00       	mov    eax,0x0
c001a33f:	eb 4b                	jmp    c001a38c <fatWrapperIoctl+0x108>
c001a341:	8d 76 00             	lea    esi,[esi+0x0]
c001a344:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a349:	75 09                	jne    c001a354 <fatWrapperIoctl+0xd0>
c001a34b:	b8 00 00 00 00       	mov    eax,0x0
c001a350:	eb 3a                	jmp    c001a38c <fatWrapperIoctl+0x108>
c001a352:	66 90                	xchg   ax,ax
c001a354:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a359:	75 19                	jne    c001a374 <fatWrapperIoctl+0xf0>
c001a35b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a35f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a363:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a367:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a36d:	b8 00 00 00 00       	mov    eax,0x0
c001a372:	eb 18                	jmp    c001a38c <fatWrapperIoctl+0x108>
c001a374:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a379:	75 09                	jne    c001a384 <fatWrapperIoctl+0x100>
c001a37b:	b8 00 00 00 00       	mov    eax,0x0
c001a380:	eb 0a                	jmp    c001a38c <fatWrapperIoctl+0x108>
c001a382:	66 90                	xchg   ax,ax
c001a384:	b8 04 00 00 00       	mov    eax,0x4
c001a389:	8d 76 00             	lea    esi,[esi+0x0]
c001a38c:	83 c4 28             	add    esp,0x28
c001a38f:	5b                   	pop    ebx
c001a390:	c3                   	ret    
c001a391:	90                   	nop
c001a392:	66 90                	xchg   ax,ax

c001a394 <FAT::FAT()>:
c001a394:	83 ec 1c             	sub    esp,0x1c
c001a397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a39b:	83 ec 0c             	sub    esp,0xc
c001a39e:	50                   	push   eax
c001a39f:	e8 34 26 ff ff       	call   c000c9d8 <Filesystem::Filesystem()>
c001a3a4:	83 c4 10             	add    esp,0x10
c001a3a7:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001a3ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3b0:	89 10                	mov    DWORD PTR [eax],edx
c001a3b2:	c7 05 a0 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00275a0,0x0
c001a3bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a3c4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a3c9:	7f 15                	jg     c001a3e0 <FAT::FAT()+0x4c>
c001a3cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3cf:	c7 04 85 c0 75 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8a40],0xffffffff
c001a3da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a3de:	eb e4                	jmp    c001a3c4 <FAT::FAT()+0x30>
c001a3e0:	90                   	nop
c001a3e1:	83 c4 1c             	add    esp,0x1c
c001a3e4:	c3                   	ret    
c001a3e5:	90                   	nop
c001a3e6:	66 90                	xchg   ax,ax

c001a3e8 <FAT::fixFilepath(char*)>:
c001a3e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3ec:	8a 00                	mov    al,BYTE PTR [eax]
c001a3ee:	3c 40                	cmp    al,0x40
c001a3f0:	7e 2e                	jle    c001a420 <FAT::fixFilepath(char*)+0x38>
c001a3f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3f6:	8a 00                	mov    al,BYTE PTR [eax]
c001a3f8:	83 e8 41             	sub    eax,0x41
c001a3fb:	88 c2                	mov    dl,al
c001a3fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a401:	88 10                	mov    BYTE PTR [eax],dl
c001a403:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a407:	8a 00                	mov    al,BYTE PTR [eax]
c001a409:	0f be c0             	movsx  eax,al
c001a40c:	8b 04 85 c0 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a40]
c001a413:	83 c0 30             	add    eax,0x30
c001a416:	88 c2                	mov    dl,al
c001a418:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a41c:	88 10                	mov    BYTE PTR [eax],dl
c001a41e:	66 90                	xchg   ax,ax
c001a420:	90                   	nop
c001a421:	c3                   	ret    
c001a422:	66 90                	xchg   ax,ax

c001a424 <FAT::open(char const*, void**, FileOpenMode)>:
c001a424:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a42a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a432:	74 0c                	je     c001a440 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a434:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a43c:	75 0e                	jne    c001a44c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a43e:	66 90                	xchg   ax,ax
c001a440:	b8 04 00 00 00       	mov    eax,0x4
c001a445:	e9 06 01 00 00       	jmp    c001a550 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001a44a:	66 90                	xchg   ax,ax
c001a44c:	83 ec 08             	sub    esp,0x8
c001a44f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a456:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a45a:	50                   	push   eax
c001a45b:	e8 04 61 fe ff       	call   c0000564 <strcpy>
c001a460:	83 c4 10             	add    esp,0x10
c001a463:	83 ec 08             	sub    esp,0x8
c001a466:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a46a:	50                   	push   eax
c001a46b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a472:	e8 71 ff ff ff       	call   c001a3e8 <FAT::fixFilepath(char*)>
c001a477:	83 c4 10             	add    esp,0x10
c001a47a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a482:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a489:	83 e0 01             	and    eax,0x1
c001a48c:	74 0a                	je     c001a498 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001a48e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a496:	66 90                	xchg   ax,ax
c001a498:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a49f:	83 e0 04             	and    eax,0x4
c001a4a2:	74 10                	je     c001a4b4 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001a4a4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a4ac:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a4b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4bb:	83 e0 02             	and    eax,0x2
c001a4be:	74 08                	je     c001a4c8 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001a4c0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a4c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4cf:	83 e0 08             	and    eax,0x8
c001a4d2:	74 08                	je     c001a4dc <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001a4d4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a4dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4e3:	83 e0 10             	and    eax,0x10
c001a4e6:	74 08                	je     c001a4f0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a4e8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a4f0:	83 ec 0c             	sub    esp,0xc
c001a4f3:	68 50 02 00 00       	push   0x250
c001a4f8:	e8 82 f2 fe ff       	call   c000977f <malloc>
c001a4fd:	83 c4 10             	add    esp,0x10
c001a500:	89 c2                	mov    edx,eax
c001a502:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a509:	89 10                	mov    DWORD PTR [eax],edx
c001a50b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a513:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a51a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a51c:	83 ec 04             	sub    esp,0x4
c001a51f:	52                   	push   edx
c001a520:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a524:	52                   	push   edx
c001a525:	50                   	push   eax
c001a526:	e8 84 a7 fe ff       	call   c0004caf <f_open>
c001a52b:	83 c4 10             	add    esp,0x10
c001a52e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a535:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a53d:	74 09                	je     c001a548 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a53f:	b8 01 00 00 00       	mov    eax,0x1
c001a544:	eb 0a                	jmp    c001a550 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001a546:	66 90                	xchg   ax,ax
c001a548:	b8 00 00 00 00       	mov    eax,0x0
c001a54d:	8d 76 00             	lea    esi,[esi+0x0]
c001a550:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a556:	c3                   	ret    
c001a557:	90                   	nop

c001a558 <FAT::openDir(char const*, void**)>:
c001a558:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a55e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a566:	74 0c                	je     c001a574 <FAT::openDir(char const*, void**)+0x1c>
c001a568:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a570:	75 0e                	jne    c001a580 <FAT::openDir(char const*, void**)+0x28>
c001a572:	66 90                	xchg   ax,ax
c001a574:	b8 04 00 00 00       	mov    eax,0x4
c001a579:	e9 82 00 00 00       	jmp    c001a600 <FAT::openDir(char const*, void**)+0xa8>
c001a57e:	66 90                	xchg   ax,ax
c001a580:	83 ec 08             	sub    esp,0x8
c001a583:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a58a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a58e:	50                   	push   eax
c001a58f:	e8 d0 5f fe ff       	call   c0000564 <strcpy>
c001a594:	83 c4 10             	add    esp,0x10
c001a597:	83 ec 08             	sub    esp,0x8
c001a59a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a59e:	50                   	push   eax
c001a59f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a5a6:	e8 3d fe ff ff       	call   c001a3e8 <FAT::fixFilepath(char*)>
c001a5ab:	83 c4 10             	add    esp,0x10
c001a5ae:	83 ec 0c             	sub    esp,0xc
c001a5b1:	6a 4c                	push   0x4c
c001a5b3:	e8 c7 f1 fe ff       	call   c000977f <malloc>
c001a5b8:	83 c4 10             	add    esp,0x10
c001a5bb:	89 c2                	mov    edx,eax
c001a5bd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5c4:	89 10                	mov    DWORD PTR [eax],edx
c001a5c6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5cd:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5cf:	83 ec 08             	sub    esp,0x8
c001a5d2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a5d6:	52                   	push   edx
c001a5d7:	50                   	push   eax
c001a5d8:	e8 0a b7 fe ff       	call   c0005ce7 <f_opendir>
c001a5dd:	83 c4 10             	add    esp,0x10
c001a5e0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a5e7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a5ef:	74 07                	je     c001a5f8 <FAT::openDir(char const*, void**)+0xa0>
c001a5f1:	b8 01 00 00 00       	mov    eax,0x1
c001a5f6:	eb 08                	jmp    c001a600 <FAT::openDir(char const*, void**)+0xa8>
c001a5f8:	b8 00 00 00 00       	mov    eax,0x0
c001a5fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a600:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a606:	c3                   	ret    
c001a607:	90                   	nop

c001a608 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a608:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a60e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a616:	75 0c                	jne    c001a624 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a618:	b8 04 00 00 00       	mov    eax,0x4
c001a61d:	e9 d2 00 00 00       	jmp    c001a6f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a622:	66 90                	xchg   ax,ax
c001a624:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a62c:	75 0a                	jne    c001a638 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a62e:	b8 04 00 00 00       	mov    eax,0x4
c001a633:	e9 bc 00 00 00       	jmp    c001a6f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a638:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a640:	75 0a                	jne    c001a64c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a642:	b8 04 00 00 00       	mov    eax,0x4
c001a647:	e9 a8 00 00 00       	jmp    c001a6f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a64c:	83 ec 08             	sub    esp,0x8
c001a64f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a656:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a65d:	50                   	push   eax
c001a65e:	e8 01 5f fe ff       	call   c0000564 <strcpy>
c001a663:	83 c4 10             	add    esp,0x10
c001a666:	83 ec 08             	sub    esp,0x8
c001a669:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a670:	50                   	push   eax
c001a671:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a678:	e8 6b fd ff ff       	call   c001a3e8 <FAT::fixFilepath(char*)>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	83 ec 08             	sub    esp,0x8
c001a683:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a687:	50                   	push   eax
c001a688:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a68f:	50                   	push   eax
c001a690:	e8 11 b8 fe ff       	call   c0005ea6 <f_stat>
c001a695:	83 c4 10             	add    esp,0x10
c001a698:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a69f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a6a6:	85 c0                	test   eax,eax
c001a6a8:	74 0a                	je     c001a6b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a6aa:	83 f8 04             	cmp    eax,0x4
c001a6ad:	74 35                	je     c001a6e4 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001a6af:	eb 3b                	jmp    c001a6ec <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001a6b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6b8:	0f b6 c0             	movzx  eax,al
c001a6bb:	83 e0 10             	and    eax,0x10
c001a6be:	0f 95 c2             	setne  dl
c001a6c1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a6c8:	88 10                	mov    BYTE PTR [eax],dl
c001a6ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a6cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a6d1:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a6d8:	89 01                	mov    DWORD PTR [ecx],eax
c001a6da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a6dd:	b8 00 00 00 00       	mov    eax,0x0
c001a6e2:	eb 10                	jmp    c001a6f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a6e4:	b8 02 00 00 00       	mov    eax,0x2
c001a6e9:	eb 09                	jmp    c001a6f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001a6eb:	90                   	nop
c001a6ec:	b8 01 00 00 00       	mov    eax,0x1
c001a6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6f4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a6fa:	c3                   	ret    
c001a6fb:	90                   	nop

c001a6fc <FAT::unlink(char const*)>:
c001a6fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a702:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a70a:	75 08                	jne    c001a714 <FAT::unlink(char const*)+0x18>
c001a70c:	b8 04 00 00 00       	mov    eax,0x4
c001a711:	eb 61                	jmp    c001a774 <FAT::unlink(char const*)+0x78>
c001a713:	90                   	nop
c001a714:	83 ec 08             	sub    esp,0x8
c001a717:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a71e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a722:	50                   	push   eax
c001a723:	e8 3c 5e fe ff       	call   c0000564 <strcpy>
c001a728:	83 c4 10             	add    esp,0x10
c001a72b:	83 ec 08             	sub    esp,0x8
c001a72e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a732:	50                   	push   eax
c001a733:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a73a:	e8 a9 fc ff ff       	call   c001a3e8 <FAT::fixFilepath(char*)>
c001a73f:	83 c4 10             	add    esp,0x10
c001a742:	83 ec 0c             	sub    esp,0xc
c001a745:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a749:	50                   	push   eax
c001a74a:	e8 a9 ba fe ff       	call   c00061f8 <f_unlink>
c001a74f:	83 c4 10             	add    esp,0x10
c001a752:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a759:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a760:	85 c0                	test   eax,eax
c001a762:	75 08                	jne    c001a76c <FAT::unlink(char const*)+0x70>
c001a764:	b8 00 00 00 00       	mov    eax,0x0
c001a769:	eb 09                	jmp    c001a774 <FAT::unlink(char const*)+0x78>
c001a76b:	90                   	nop
c001a76c:	b8 01 00 00 00       	mov    eax,0x1
c001a771:	8d 76 00             	lea    esi,[esi+0x0]
c001a774:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a77a:	c3                   	ret    
c001a77b:	90                   	nop

c001a77c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a77c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a782:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a789:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a790:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a794:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a798:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a7a0:	75 0a                	jne    c001a7ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a7a2:	b8 04 00 00 00       	mov    eax,0x4
c001a7a7:	e9 30 01 00 00       	jmp    c001a8dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001a7ac:	83 ec 08             	sub    esp,0x8
c001a7af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a7b6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7ba:	50                   	push   eax
c001a7bb:	e8 a4 5d fe ff       	call   c0000564 <strcpy>
c001a7c0:	83 c4 10             	add    esp,0x10
c001a7c3:	83 ec 08             	sub    esp,0x8
c001a7c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7ca:	50                   	push   eax
c001a7cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a7d2:	e8 11 fc ff ff       	call   c001a3e8 <FAT::fixFilepath(char*)>
c001a7d7:	83 c4 10             	add    esp,0x10
c001a7da:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a7e2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a7ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a7ef:	83 e0 01             	and    eax,0x1
c001a7f2:	74 08                	je     c001a7fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001a7f4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a7fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a801:	83 e0 02             	and    eax,0x2
c001a804:	74 0a                	je     c001a810 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001a806:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a80e:	66 90                	xchg   ax,ax
c001a810:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a815:	83 e0 04             	and    eax,0x4
c001a818:	74 0a                	je     c001a824 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a81a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a822:	66 90                	xchg   ax,ax
c001a824:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a829:	83 e0 08             	and    eax,0x8
c001a82c:	74 0a                	je     c001a838 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001a82e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a836:	66 90                	xchg   ax,ax
c001a838:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a83d:	83 e0 01             	and    eax,0x1
c001a840:	74 0a                	je     c001a84c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001a842:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a84a:	66 90                	xchg   ax,ax
c001a84c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a851:	83 e0 02             	and    eax,0x2
c001a854:	74 0a                	je     c001a860 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a856:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a85e:	66 90                	xchg   ax,ax
c001a860:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a865:	83 e0 04             	and    eax,0x4
c001a868:	74 0a                	je     c001a874 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001a86a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a872:	66 90                	xchg   ax,ax
c001a874:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a879:	83 e0 08             	and    eax,0x8
c001a87c:	74 0a                	je     c001a888 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001a87e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a886:	66 90                	xchg   ax,ax
c001a888:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a88f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a896:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a89e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a8a6:	83 ec 04             	sub    esp,0x4
c001a8a9:	52                   	push   edx
c001a8aa:	50                   	push   eax
c001a8ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8af:	50                   	push   eax
c001a8b0:	e8 e5 bf fe ff       	call   c000689a <f_chmod>
c001a8b5:	83 c4 10             	add    esp,0x10
c001a8b8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a8bf:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a8c6:	85 c0                	test   eax,eax
c001a8c8:	75 0a                	jne    c001a8d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001a8ca:	b8 00 00 00 00       	mov    eax,0x0
c001a8cf:	eb 0b                	jmp    c001a8dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001a8d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8d4:	b8 01 00 00 00       	mov    eax,0x1
c001a8d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8dc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8e2:	c3                   	ret    
c001a8e3:	90                   	nop

c001a8e4 <FAT::rename(char const*, char const*)>:
c001a8e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a8ea:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a8f2:	74 0c                	je     c001a900 <FAT::rename(char const*, char const*)+0x1c>
c001a8f4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a8fc:	75 0e                	jne    c001a90c <FAT::rename(char const*, char const*)+0x28>
c001a8fe:	66 90                	xchg   ax,ax
c001a900:	b8 04 00 00 00       	mov    eax,0x4
c001a905:	e9 9e 00 00 00       	jmp    c001a9a8 <FAT::rename(char const*, char const*)+0xc4>
c001a90a:	66 90                	xchg   ax,ax
c001a90c:	83 ec 08             	sub    esp,0x8
c001a90f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a916:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a91d:	50                   	push   eax
c001a91e:	e8 41 5c fe ff       	call   c0000564 <strcpy>
c001a923:	83 c4 10             	add    esp,0x10
c001a926:	83 ec 08             	sub    esp,0x8
c001a929:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a930:	50                   	push   eax
c001a931:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a938:	e8 ab fa ff ff       	call   c001a3e8 <FAT::fixFilepath(char*)>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	83 ec 08             	sub    esp,0x8
c001a943:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a94a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a94e:	50                   	push   eax
c001a94f:	e8 10 5c fe ff       	call   c0000564 <strcpy>
c001a954:	83 c4 10             	add    esp,0x10
c001a957:	83 ec 08             	sub    esp,0x8
c001a95a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a95e:	50                   	push   eax
c001a95f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a966:	e8 7d fa ff ff       	call   c001a3e8 <FAT::fixFilepath(char*)>
c001a96b:	83 c4 10             	add    esp,0x10
c001a96e:	83 ec 08             	sub    esp,0x8
c001a971:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a975:	50                   	push   eax
c001a976:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a97d:	50                   	push   eax
c001a97e:	e8 24 bc fe ff       	call   c00065a7 <f_rename>
c001a983:	83 c4 10             	add    esp,0x10
c001a986:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a98d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a994:	85 c0                	test   eax,eax
c001a996:	75 08                	jne    c001a9a0 <FAT::rename(char const*, char const*)+0xbc>
c001a998:	b8 00 00 00 00       	mov    eax,0x0
c001a99d:	eb 09                	jmp    c001a9a8 <FAT::rename(char const*, char const*)+0xc4>
c001a99f:	90                   	nop
c001a9a0:	b8 01 00 00 00       	mov    eax,0x1
c001a9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a9ae:	c3                   	ret    
c001a9af:	90                   	nop

c001a9b0 <FAT::mkdir(char const*)>:
c001a9b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a9be:	75 08                	jne    c001a9c8 <FAT::mkdir(char const*)+0x18>
c001a9c0:	b8 04 00 00 00       	mov    eax,0x4
c001a9c5:	eb 61                	jmp    c001aa28 <FAT::mkdir(char const*)+0x78>
c001a9c7:	90                   	nop
c001a9c8:	83 ec 08             	sub    esp,0x8
c001a9cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a9d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a9d6:	50                   	push   eax
c001a9d7:	e8 88 5b fe ff       	call   c0000564 <strcpy>
c001a9dc:	83 c4 10             	add    esp,0x10
c001a9df:	83 ec 08             	sub    esp,0x8
c001a9e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a9e6:	50                   	push   eax
c001a9e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a9ee:	e8 f5 f9 ff ff       	call   c001a3e8 <FAT::fixFilepath(char*)>
c001a9f3:	83 c4 10             	add    esp,0x10
c001a9f6:	83 ec 0c             	sub    esp,0xc
c001a9f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a9fd:	50                   	push   eax
c001a9fe:	e8 78 b9 fe ff       	call   c000637b <f_mkdir>
c001aa03:	83 c4 10             	add    esp,0x10
c001aa06:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa0d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aa14:	85 c0                	test   eax,eax
c001aa16:	75 08                	jne    c001aa20 <FAT::mkdir(char const*)+0x70>
c001aa18:	b8 00 00 00 00       	mov    eax,0x0
c001aa1d:	eb 09                	jmp    c001aa28 <FAT::mkdir(char const*)+0x78>
c001aa1f:	90                   	nop
c001aa20:	b8 01 00 00 00       	mov    eax,0x1
c001aa25:	8d 76 00             	lea    esi,[esi+0x0]
c001aa28:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa2e:	c3                   	ret    
c001aa2f:	90                   	nop

c001aa30 <FAT::exists(char const*)>:
c001aa30:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aa36:	83 ec 08             	sub    esp,0x8
c001aa39:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa44:	50                   	push   eax
c001aa45:	e8 1a 5b fe ff       	call   c0000564 <strcpy>
c001aa4a:	83 c4 10             	add    esp,0x10
c001aa4d:	83 ec 08             	sub    esp,0x8
c001aa50:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa54:	50                   	push   eax
c001aa55:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa5c:	e8 87 f9 ff ff       	call   c001a3e8 <FAT::fixFilepath(char*)>
c001aa61:	83 c4 10             	add    esp,0x10
c001aa64:	83 ec 08             	sub    esp,0x8
c001aa67:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001aa6e:	50                   	push   eax
c001aa6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa73:	50                   	push   eax
c001aa74:	e8 2d b4 fe ff       	call   c0005ea6 <f_stat>
c001aa79:	83 c4 10             	add    esp,0x10
c001aa7c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aa83:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aa8a:	85 c0                	test   eax,eax
c001aa8c:	75 06                	jne    c001aa94 <FAT::exists(char const*)+0x64>
c001aa8e:	b0 01                	mov    al,0x1
c001aa90:	eb 06                	jmp    c001aa98 <FAT::exists(char const*)+0x68>
c001aa92:	66 90                	xchg   ax,ax
c001aa94:	b0 00                	mov    al,0x0
c001aa96:	66 90                	xchg   ax,ax
c001aa98:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aa9e:	c3                   	ret    
c001aa9f:	90                   	nop

c001aaa0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001aaa0:	b8 08 00 00 00       	mov    eax,0x8
c001aaa5:	c3                   	ret    

c001aaa6 <ISO9660::seek(void*, unsigned long long)>:
c001aaa6:	53                   	push   ebx
c001aaa7:	b8 04 00 00 00       	mov    eax,0x4
c001aaac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aab4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aab8:	85 d2                	test   edx,edx
c001aaba:	74 17                	je     c001aad3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001aabc:	89 c8                	mov    eax,ecx
c001aabe:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001aac1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001aac4:	b8 01 00 00 00       	mov    eax,0x1
c001aac9:	73 08                	jae    c001aad3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001aacb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001aace:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001aad1:	31 c0                	xor    eax,eax
c001aad3:	5b                   	pop    ebx
c001aad4:	c3                   	ret    
c001aad5:	90                   	nop

c001aad6 <ISO9660::tell(void*, unsigned long long*)>:
c001aad6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aade:	85 d2                	test   edx,edx
c001aae0:	74 12                	je     c001aaf4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001aae2:	85 c0                	test   eax,eax
c001aae4:	74 0e                	je     c001aaf4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001aae6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aae9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001aaec:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001aaef:	89 10                	mov    DWORD PTR [eax],edx
c001aaf1:	31 c0                	xor    eax,eax
c001aaf3:	c3                   	ret    
c001aaf4:	b8 04 00 00 00       	mov    eax,0x4
c001aaf9:	c3                   	ret    

c001aafa <ISO9660::getName()>:
c001aafa:	b8 f0 2e 02 c0       	mov    eax,0xc0022ef0
c001aaff:	c3                   	ret    

c001ab00 <ISO9660::stat(void*, unsigned long long*)>:
c001ab00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ab04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab08:	85 d2                	test   edx,edx
c001ab0a:	74 12                	je     c001ab1e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ab0c:	85 c0                	test   eax,eax
c001ab0e:	74 0e                	je     c001ab1e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ab10:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ab13:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ab16:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ab19:	89 10                	mov    DWORD PTR [eax],edx
c001ab1b:	31 c0                	xor    eax,eax
c001ab1d:	c3                   	ret    
c001ab1e:	b8 04 00 00 00       	mov    eax,0x4
c001ab23:	c3                   	ret    

c001ab24 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ab24:	b8 01 00 00 00       	mov    eax,0x1
c001ab29:	c3                   	ret    

c001ab2a <ISO9660::unlink(char const*)>:
c001ab2a:	b8 01 00 00 00       	mov    eax,0x1
c001ab2f:	c3                   	ret    

c001ab30 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ab30:	b8 01 00 00 00       	mov    eax,0x1
c001ab35:	c3                   	ret    

c001ab36 <ISO9660::rename(char const*, char const*)>:
c001ab36:	b8 01 00 00 00       	mov    eax,0x1
c001ab3b:	c3                   	ret    

c001ab3c <ISO9660::mkdir(char const*)>:
c001ab3c:	b8 01 00 00 00       	mov    eax,0x1
c001ab41:	c3                   	ret    

c001ab42 <ISO9660::close(void*)>:
c001ab42:	83 ec 0c             	sub    esp,0xc
c001ab45:	b8 04 00 00 00       	mov    eax,0x4
c001ab4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab4e:	85 d2                	test   edx,edx
c001ab50:	74 0e                	je     c001ab60 <ISO9660::close(void*)+0x1e>
c001ab52:	83 ec 0c             	sub    esp,0xc
c001ab55:	52                   	push   edx
c001ab56:	e8 34 ec fe ff       	call   c000978f <free>
c001ab5b:	83 c4 10             	add    esp,0x10
c001ab5e:	31 c0                	xor    eax,eax
c001ab60:	83 c4 0c             	add    esp,0xc
c001ab63:	c3                   	ret    

c001ab64 <ISO9660::closeDir(void*)>:
c001ab64:	83 ec 0c             	sub    esp,0xc
c001ab67:	b8 04 00 00 00       	mov    eax,0x4
c001ab6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab70:	85 d2                	test   edx,edx
c001ab72:	74 0e                	je     c001ab82 <ISO9660::closeDir(void*)+0x1e>
c001ab74:	83 ec 0c             	sub    esp,0xc
c001ab77:	52                   	push   edx
c001ab78:	e8 12 ec fe ff       	call   c000978f <free>
c001ab7d:	83 c4 10             	add    esp,0x10
c001ab80:	31 c0                	xor    eax,eax
c001ab82:	83 c4 0c             	add    esp,0xc
c001ab85:	c3                   	ret    

c001ab86 <ISO9660::~ISO9660()>:
c001ab86:	83 ec 0c             	sub    esp,0xc
c001ab89:	ba 14 2f 02 c0       	mov    edx,0xc0022f14
c001ab8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab92:	89 10                	mov    DWORD PTR [eax],edx
c001ab94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab98:	83 ec 0c             	sub    esp,0xc
c001ab9b:	50                   	push   eax
c001ab9c:	e8 5b 1e ff ff       	call   c000c9fc <Filesystem::~Filesystem()>
c001aba1:	83 c4 10             	add    esp,0x10
c001aba4:	90                   	nop
c001aba5:	83 c4 0c             	add    esp,0xc
c001aba8:	c3                   	ret    
c001aba9:	90                   	nop

c001abaa <ISO9660::~ISO9660()>:
c001abaa:	83 ec 0c             	sub    esp,0xc
c001abad:	83 ec 0c             	sub    esp,0xc
c001abb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abb4:	e8 cd ff ff ff       	call   c001ab86 <ISO9660::~ISO9660()>
c001abb9:	83 c4 10             	add    esp,0x10
c001abbc:	83 ec 08             	sub    esp,0x8
c001abbf:	6a 08                	push   0x8
c001abc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abc5:	e8 16 1a ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c001abca:	83 c4 10             	add    esp,0x10
c001abcd:	83 c4 0c             	add    esp,0xc
c001abd0:	c3                   	ret    

c001abd1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001abd1:	55                   	push   ebp
c001abd2:	31 c9                	xor    ecx,ecx
c001abd4:	57                   	push   edi
c001abd5:	56                   	push   esi
c001abd6:	53                   	push   ebx
c001abd7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001abdb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001abdf:	89 eb                	mov    ebx,ebp
c001abe1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001abe5:	39 ce                	cmp    esi,ecx
c001abe7:	7e 17                	jle    c001ac00 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001abe9:	31 d2                	xor    edx,edx
c001abeb:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001abef:	7d 13                	jge    c001ac04 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001abf1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001abf5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001abf8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001abfb:	75 0d                	jne    c001ac0a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001abfd:	42                   	inc    edx
c001abfe:	eb eb                	jmp    c001abeb <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ac00:	31 c0                	xor    eax,eax
c001ac02:	eb 0a                	jmp    c001ac0e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ac04:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ac08:	eb 04                	jmp    c001ac0e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ac0a:	41                   	inc    ecx
c001ac0b:	43                   	inc    ebx
c001ac0c:	eb d7                	jmp    c001abe5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ac0e:	5b                   	pop    ebx
c001ac0f:	5e                   	pop    esi
c001ac10:	5f                   	pop    edi
c001ac11:	5d                   	pop    ebp
c001ac12:	c3                   	ret    

c001ac13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ac13:	57                   	push   edi
c001ac14:	56                   	push   esi
c001ac15:	53                   	push   ebx
c001ac16:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac1a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ac1e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ac22:	39 35 a0 76 02 c0    	cmp    DWORD PTR ds:0xc00276a0,esi
c001ac28:	75 08                	jne    c001ac32 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ac2a:	38 1d d4 39 02 c0    	cmp    BYTE PTR ds:0xc00239d4,bl
c001ac30:	74 4a                	je     c001ac7c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001ac32:	83 ec 0c             	sub    esp,0xc
c001ac35:	31 d2                	xor    edx,edx
c001ac37:	68 c0 76 02 c0       	push   0xc00276c0
c001ac3c:	0f be c3             	movsx  eax,bl
c001ac3f:	6a 01                	push   0x1
c001ac41:	52                   	push   edx
c001ac42:	56                   	push   esi
c001ac43:	ff 34 85 1c 64 02 c0 	push   DWORD PTR [eax*4-0x3ffd9be4]
c001ac4a:	e8 1b 42 ff ff       	call   c000ee6a <LogicalDisk::read(unsigned long long, int, void*)>
c001ac4f:	83 c4 20             	add    esp,0x20
c001ac52:	85 c0                	test   eax,eax
c001ac54:	75 0e                	jne    c001ac64 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001ac56:	89 35 a0 76 02 c0    	mov    DWORD PTR ds:0xc00276a0,esi
c001ac5c:	88 1d d4 39 02 c0    	mov    BYTE PTR ds:0xc00239d4,bl
c001ac62:	eb 18                	jmp    c001ac7c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001ac64:	50                   	push   eax
c001ac65:	68 00 08 00 00       	push   0x800
c001ac6a:	6a 00                	push   0x0
c001ac6c:	57                   	push   edi
c001ac6d:	e8 36 58 fe ff       	call   c00004a8 <memset>
c001ac72:	83 c4 10             	add    esp,0x10
c001ac75:	b8 01 00 00 00       	mov    eax,0x1
c001ac7a:	eb 0e                	jmp    c001ac8a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001ac7c:	be c0 76 02 c0       	mov    esi,0xc00276c0
c001ac81:	b9 00 08 00 00       	mov    ecx,0x800
c001ac86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac88:	31 c0                	xor    eax,eax
c001ac8a:	5b                   	pop    ebx
c001ac8b:	5e                   	pop    esi
c001ac8c:	5f                   	pop    edi
c001ac8d:	c3                   	ret    

c001ac8e <ISO9660::tryMount(LogicalDisk*, int)>:
c001ac8e:	81 ec 10 08 00 00    	sub    esp,0x810
c001ac94:	c7 05 a0 76 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00276a0,0xdeadbeef
c001ac9e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001aca5:	83 c0 41             	add    eax,0x41
c001aca8:	0f be c0             	movsx  eax,al
c001acab:	50                   	push   eax
c001acac:	8d 44 24 08          	lea    eax,[esp+0x8]
c001acb0:	50                   	push   eax
c001acb1:	6a 10                	push   0x10
c001acb3:	e8 5b ff ff ff       	call   c001ac13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001acb8:	83 c4 10             	add    esp,0x10
c001acbb:	31 d2                	xor    edx,edx
c001acbd:	85 c0                	test   eax,eax
c001acbf:	75 24                	jne    c001ace5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001acc1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001acc6:	75 1d                	jne    c001ace5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001acc8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001accd:	75 16                	jne    c001ace5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001accf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001acd4:	75 0f                	jne    c001ace5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001acd6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001acdb:	75 08                	jne    c001ace5 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001acdd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ace2:	0f 94 c2             	sete   dl
c001ace5:	88 d0                	mov    al,dl
c001ace7:	81 c4 0c 08 00 00    	add    esp,0x80c
c001aced:	c3                   	ret    

c001acee <ISO9660::read(void*, unsigned long, void*, int*)>:
c001acee:	55                   	push   ebp
c001acef:	57                   	push   edi
c001acf0:	56                   	push   esi
c001acf1:	53                   	push   ebx
c001acf2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001acf8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001acff:	85 ed                	test   ebp,ebp
c001ad01:	0f 84 da 01 00 00    	je     c001aee1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001ad07:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001ad0f:	0f 84 cc 01 00 00    	je     c001aee1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001ad15:	b8 01 00 00 00       	mov    eax,0x1
c001ad1a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001ad1e:	0f 85 c2 01 00 00    	jne    c001aee6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001ad24:	31 d2                	xor    edx,edx
c001ad26:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001ad2d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ad30:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001ad33:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ad36:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad39:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ad3d:	01 c8                	add    eax,ecx
c001ad3f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ad42:	11 da                	adc    edx,ebx
c001ad44:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001ad48:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ad4c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ad50:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ad54:	19 d7                	sbb    edi,edx
c001ad56:	72 11                	jb     c001ad69 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001ad58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001ad5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001ad5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad67:	eb 0c                	jmp    c001ad75 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001ad69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001ad6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ad71:	29 ce                	sub    esi,ecx
c001ad73:	19 df                	sbb    edi,ebx
c001ad75:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ad78:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001ad7b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ad7f:	c1 e0 0b             	shl    eax,0xb
c001ad82:	01 c8                	add    eax,ecx
c001ad84:	11 da                	adc    edx,ebx
c001ad86:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ad8d:	51                   	push   ecx
c001ad8e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ad92:	50                   	push   eax
c001ad93:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001ad97:	53                   	push   ebx
c001ad98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ada0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ada4:	50                   	push   eax
c001ada5:	e8 69 fe ff ff       	call   c001ac13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001adaa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001adad:	b8 00 08 00 00       	mov    eax,0x800
c001adb2:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001adb8:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001adbc:	29 d0                	sub    eax,edx
c001adbe:	83 c4 10             	add    esp,0x10
c001adc1:	89 f9                	mov    ecx,edi
c001adc3:	39 c6                	cmp    esi,eax
c001adc5:	83 d9 00             	sbb    ecx,0x0
c001adc8:	7d 1b                	jge    c001ade5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001adca:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001adcf:	75 12                	jne    c001ade3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001add1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001add8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001adde:	e9 fa 00 00 00       	jmp    c001aedd <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001ade3:	89 f0                	mov    eax,esi
c001ade5:	01 d3                	add    ebx,edx
c001ade7:	31 d2                	xor    edx,edx
c001ade9:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001aded:	39 c2                	cmp    edx,eax
c001adef:	7d 14                	jge    c001ae05 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001adf1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001adf8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001adfc:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001adff:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001ae02:	42                   	inc    edx
c001ae03:	eb e8                	jmp    c001aded <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001ae05:	89 c2                	mov    edx,eax
c001ae07:	85 c0                	test   eax,eax
c001ae09:	79 02                	jns    c001ae0d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001ae0b:	31 d2                	xor    edx,edx
c001ae0d:	01 c2                	add    edx,eax
c001ae0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001ae12:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001ae19:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001ae1d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae21:	99                   	cdq    
c001ae22:	01 c1                	add    ecx,eax
c001ae24:	11 d3                	adc    ebx,edx
c001ae26:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ae2a:	29 c6                	sub    esi,eax
c001ae2c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ae30:	19 d7                	sbb    edi,edx
c001ae32:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae35:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001ae39:	b8 ff 07 00 00       	mov    eax,0x7ff
c001ae3e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001ae41:	b8 00 00 00 00       	mov    eax,0x0
c001ae46:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001ae4a:	7d 43                	jge    c001ae8f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001ae4c:	52                   	push   edx
c001ae4d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ae51:	50                   	push   eax
c001ae52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ae56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae5a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae5e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ae62:	50                   	push   eax
c001ae63:	e8 ab fd ff ff       	call   c001ac13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ae68:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001ae70:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001ae75:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001ae7d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001ae85:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001ae8a:	83 c4 10             	add    esp,0x10
c001ae8d:	eb aa                	jmp    c001ae39 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001ae8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae93:	0b 04 24             	or     eax,DWORD PTR [esp]
c001ae96:	74 2a                	je     c001aec2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001ae98:	50                   	push   eax
c001ae99:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ae9d:	50                   	push   eax
c001ae9e:	8d 74 24 28          	lea    esi,[esp+0x28]
c001aea2:	56                   	push   esi
c001aea3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aea7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aeab:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001aeaf:	51                   	push   ecx
c001aeb0:	e8 5e fd ff ff       	call   c001ac13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aeb5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aeb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aebd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aebf:	83 c4 10             	add    esp,0x10
c001aec2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aec9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aecd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aed1:	89 18                	mov    DWORD PTR [eax],ebx
c001aed3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aed7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001aeda:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001aedd:	31 c0                	xor    eax,eax
c001aedf:	eb 05                	jmp    c001aee6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001aee1:	b8 04 00 00 00       	mov    eax,0x4
c001aee6:	81 c4 2c 08 00 00    	add    esp,0x82c
c001aeec:	5b                   	pop    ebx
c001aeed:	5e                   	pop    esi
c001aeee:	5f                   	pop    edi
c001aeef:	5d                   	pop    ebp
c001aef0:	c3                   	ret    
c001aef1:	90                   	nop

c001aef2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001aef2:	55                   	push   ebp
c001aef3:	57                   	push   edi
c001aef4:	56                   	push   esi
c001aef5:	53                   	push   ebx
c001aef6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001aefc:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001af03:	85 ed                	test   ebp,ebp
c001af05:	0f 84 51 02 00 00    	je     c001b15c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001af0b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001af13:	0f 84 43 02 00 00    	je     c001b15c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001af19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001af1c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001af1f:	75 0a                	jne    c001af2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001af21:	b8 07 00 00 00       	mov    eax,0x7
c001af26:	e9 36 02 00 00       	jmp    c001b161 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001af2b:	50                   	push   eax
c001af2c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001af30:	50                   	push   eax
c001af31:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001af38:	53                   	push   ebx
c001af39:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001af3c:	c1 e0 0b             	shl    eax,0xb
c001af3f:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001af42:	c1 e8 0b             	shr    eax,0xb
c001af45:	50                   	push   eax
c001af46:	e8 c8 fc ff ff       	call   c001ac13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001af4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001af4e:	83 c4 10             	add    esp,0x10
c001af51:	89 c1                	mov    ecx,eax
c001af53:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001af56:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001af5c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001af5f:	84 db                	test   bl,bl
c001af61:	0f 85 8b 00 00 00    	jne    c001aff2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001af67:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001af6d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001af70:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001af76:	29 c6                	sub    esi,eax
c001af78:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001af7c:	89 f3                	mov    ebx,esi
c001af7e:	89 f1                	mov    ecx,esi
c001af80:	c1 fb 1f             	sar    ebx,0x1f
c001af83:	01 f0                	add    eax,esi
c001af85:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001af88:	11 da                	adc    edx,ebx
c001af8a:	89 04 24             	mov    DWORD PTR [esp],eax
c001af8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001af91:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001af94:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001af97:	89 d8                	mov    eax,ebx
c001af99:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001af9d:	ba 00 00 00 00       	mov    edx,0x0
c001afa2:	19 f8                	sbb    eax,edi
c001afa4:	b8 00 00 00 00       	mov    eax,0x0
c001afa9:	73 08                	jae    c001afb3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001afab:	89 f0                	mov    eax,esi
c001afad:	89 fa                	mov    edx,edi
c001afaf:	29 c8                	sub    eax,ecx
c001afb1:	19 da                	sbb    edx,ebx
c001afb3:	89 d7                	mov    edi,edx
c001afb5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001afb8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001afbb:	09 c7                	or     edi,eax
c001afbd:	0f 84 5e ff ff ff    	je     c001af21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001afc3:	57                   	push   edi
c001afc4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001afc8:	50                   	push   eax
c001afc9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001afd0:	53                   	push   ebx
c001afd1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001afd4:	c1 e0 0b             	shl    eax,0xb
c001afd7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001afdb:	c1 e8 0b             	shr    eax,0xb
c001afde:	50                   	push   eax
c001afdf:	e8 2f fc ff ff       	call   c001ac13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001afe4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001afe7:	83 c4 10             	add    esp,0x10
c001afea:	25 ff 07 00 00       	and    eax,0x7ff
c001afef:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001aff2:	31 ff                	xor    edi,edi
c001aff4:	56                   	push   esi
c001aff5:	6a 28                	push   0x28
c001aff7:	6a 00                	push   0x0
c001aff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001affd:	50                   	push   eax
c001affe:	e8 a5 54 fe ff       	call   c00004a8 <memset>
c001b003:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b006:	25 ff 07 00 00       	and    eax,0x7ff
c001b00b:	89 c6                	mov    esi,eax
c001b00d:	83 c6 21             	add    esi,0x21
c001b010:	83 d7 00             	adc    edi,0x0
c001b013:	83 c4 10             	add    esp,0x10
c001b016:	31 c9                	xor    ecx,ecx
c001b018:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001b01f:	83 f9 28             	cmp    ecx,0x28
c001b022:	88 04 24             	mov    BYTE PTR [esp],al
c001b025:	0f 94 c2             	sete   dl
c001b028:	88 d0                	mov    al,dl
c001b02a:	ba ff 07 00 00       	mov    edx,0x7ff
c001b02f:	39 f2                	cmp    edx,esi
c001b031:	ba 00 00 00 00       	mov    edx,0x0
c001b036:	19 fa                	sbb    edx,edi
c001b038:	0f 92 c2             	setb   dl
c001b03b:	09 c2                	or     edx,eax
c001b03d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b041:	0f 94 c0             	sete   al
c001b044:	08 d0                	or     al,dl
c001b046:	75 16                	jne    c001b05e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001b048:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b04c:	74 10                	je     c001b05e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001b04e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b051:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b055:	41                   	inc    ecx
c001b056:	83 c6 01             	add    esi,0x1
c001b059:	83 d7 00             	adc    edi,0x0
c001b05c:	eb ba                	jmp    c001b018 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001b05e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b065:	83 ec 0c             	sub    esp,0xc
c001b068:	8d 74 24 24          	lea    esi,[esp+0x24]
c001b06c:	56                   	push   esi
c001b06d:	e8 52 54 fe ff       	call   c00004c4 <strlen>
c001b072:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001b079:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b07d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b085:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b088:	5a                   	pop    edx
c001b089:	25 ff 07 00 00       	and    eax,0x7ff
c001b08e:	59                   	pop    ecx
c001b08f:	01 f8                	add    eax,edi
c001b091:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001b097:	83 e0 02             	and    eax,0x2
c001b09a:	3c 01                	cmp    al,0x1
c001b09c:	19 c0                	sbb    eax,eax
c001b09e:	83 c0 02             	add    eax,0x2
c001b0a1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b0a5:	56                   	push   esi
c001b0a6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b0aa:	50                   	push   eax
c001b0ab:	e8 b4 54 fe ff       	call   c0000564 <strcpy>
c001b0b0:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b0b4:	83 c4 10             	add    esp,0x10
c001b0b7:	84 c0                	test   al,al
c001b0b9:	75 21                	jne    c001b0dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001b0bb:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b0c3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b0cb:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b0d3:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b0da:	eb 28                	jmp    c001b104 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001b0dc:	fe c8                	dec    al
c001b0de:	75 24                	jne    c001b104 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001b0e0:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b0e8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b0f0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b0f8:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b0ff:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b104:	8d 74 24 40          	lea    esi,[esp+0x40]
c001b108:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001b10f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001b116:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b118:	0f b6 f3             	movzx  esi,bl
c001b11b:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001b122:	31 db                	xor    ebx,ebx
c001b124:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b12a:	89 df                	mov    edi,ebx
c001b12c:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001b12f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b132:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001b135:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b138:	39 c6                	cmp    esi,eax
c001b13a:	19 d7                	sbb    edi,edx
c001b13c:	72 10                	jb     c001b14e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001b13e:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001b145:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001b14c:	eb 0a                	jmp    c001b158 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001b14e:	29 f0                	sub    eax,esi
c001b150:	19 da                	sbb    edx,ebx
c001b152:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001b155:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001b158:	31 c0                	xor    eax,eax
c001b15a:	eb 05                	jmp    c001b161 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001b15c:	b8 04 00 00 00       	mov    eax,0x4
c001b161:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b167:	5b                   	pop    ebx
c001b168:	5e                   	pop    esi
c001b169:	5f                   	pop    edi
c001b16a:	5d                   	pop    ebp
c001b16b:	c3                   	ret    

c001b16c <readRoot(unsigned int*, unsigned int*, char)>:
c001b16c:	57                   	push   edi
c001b16d:	56                   	push   esi
c001b16e:	81 ec 38 08 00 00    	sub    esp,0x838
c001b174:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b17c:	50                   	push   eax
c001b17d:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b181:	50                   	push   eax
c001b182:	6a 10                	push   0x10
c001b184:	e8 8a fa ff ff       	call   c001ac13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b189:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001b190:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001b194:	b9 22 00 00 00       	mov    ecx,0x22
c001b199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b19b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b1a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b1a6:	89 10                	mov    DWORD PTR [eax],edx
c001b1a8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b1af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b1b3:	89 10                	mov    DWORD PTR [eax],edx
c001b1b5:	81 c4 44 08 00 00    	add    esp,0x844
c001b1bb:	b0 01                	mov    al,0x1
c001b1bd:	5e                   	pop    esi
c001b1be:	5f                   	pop    edi
c001b1bf:	c3                   	ret    

c001b1c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b1c0:	55                   	push   ebp
c001b1c1:	57                   	push   edi
c001b1c2:	56                   	push   esi
c001b1c3:	53                   	push   ebx
c001b1c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b1ca:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b1d1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b1d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b1dc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b1e0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b1e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b1e8:	75 03                	jne    c001b1ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b1ea:	83 c3 02             	add    ebx,0x2
c001b1ed:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b1f0:	75 03                	jne    c001b1f5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b1f2:	43                   	inc    ebx
c001b1f3:	eb f8                	jmp    c001b1ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b1f5:	52                   	push   edx
c001b1f6:	68 00 01 00 00       	push   0x100
c001b1fb:	6a 00                	push   0x0
c001b1fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b201:	50                   	push   eax
c001b202:	e8 a1 52 fe ff       	call   c00004a8 <memset>
c001b207:	83 c4 10             	add    esp,0x10
c001b20a:	31 d2                	xor    edx,edx
c001b20c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b20f:	84 c0                	test   al,al
c001b211:	74 21                	je     c001b234 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b213:	3c 2f                	cmp    al,0x2f
c001b215:	75 0b                	jne    c001b222 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b217:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b21b:	bd 01 00 00 00       	mov    ebp,0x1
c001b220:	eb 14                	jmp    c001b236 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b222:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b225:	80 f9 19             	cmp    cl,0x19
c001b228:	77 03                	ja     c001b22d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b22a:	83 e8 20             	sub    eax,0x20
c001b22d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b231:	42                   	inc    edx
c001b232:	eb d8                	jmp    c001b20c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b234:	31 ed                	xor    ebp,ebp
c001b236:	83 ec 0c             	sub    esp,0xc
c001b239:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b240:	e8 3a e5 fe ff       	call   c000977f <malloc>
c001b245:	89 c6                	mov    esi,eax
c001b247:	89 c2                	mov    edx,eax
c001b249:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001b250:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b256:	c1 ef 0b             	shr    edi,0xb
c001b259:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b260:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b264:	83 c4 10             	add    esp,0x10
c001b267:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b26c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b270:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001b277:	74 29                	je     c001b2a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001b279:	50                   	push   eax
c001b27a:	57                   	push   edi
c001b27b:	52                   	push   edx
c001b27c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b280:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b287:	e8 87 f9 ff ff       	call   c001ac13 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b28c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b290:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b297:	81 c2 00 08 00 00    	add    edx,0x800
c001b29d:	83 c4 10             	add    esp,0x10
c001b2a0:	eb ca                	jmp    c001b26c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001b2a2:	83 ec 0c             	sub    esp,0xc
c001b2a5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b2a9:	57                   	push   edi
c001b2aa:	e8 15 52 fe ff       	call   c00004c4 <strlen>
c001b2af:	50                   	push   eax
c001b2b0:	57                   	push   edi
c001b2b1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b2b8:	56                   	push   esi
c001b2b9:	e8 13 f9 ff ff       	call   c001abd1 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b2be:	83 c4 20             	add    esp,0x20
c001b2c1:	85 c0                	test   eax,eax
c001b2c3:	75 13                	jne    c001b2d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001b2c5:	83 ec 0c             	sub    esp,0xc
c001b2c8:	56                   	push   esi
c001b2c9:	e8 c1 e4 fe ff       	call   c000978f <free>
c001b2ce:	83 c4 10             	add    esp,0x10
c001b2d1:	31 c0                	xor    eax,eax
c001b2d3:	e9 b3 00 00 00       	jmp    c001b38b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001b2d8:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b2dc:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b2e0:	c1 e7 08             	shl    edi,0x8
c001b2e3:	c1 e2 10             	shl    edx,0x10
c001b2e6:	09 d7                	or     edi,edx
c001b2e8:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b2ec:	09 d7                	or     edi,edx
c001b2ee:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b2f2:	c1 e2 18             	shl    edx,0x18
c001b2f5:	09 d7                	or     edi,edx
c001b2f7:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b2fb:	89 d1                	mov    ecx,edx
c001b2fd:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b301:	c1 e1 08             	shl    ecx,0x8
c001b304:	c1 e2 10             	shl    edx,0x10
c001b307:	09 ca                	or     edx,ecx
c001b309:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b30d:	09 ca                	or     edx,ecx
c001b30f:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b313:	c1 e1 18             	shl    ecx,0x18
c001b316:	09 ca                	or     edx,ecx
c001b318:	89 e9                	mov    ecx,ebp
c001b31a:	84 c9                	test   cl,cl
c001b31c:	74 3c                	je     c001b35a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001b31e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b322:	83 ec 0c             	sub    esp,0xc
c001b325:	56                   	push   esi
c001b326:	e8 64 e4 fe ff       	call   c000978f <free>
c001b32b:	83 c4 0c             	add    esp,0xc
c001b32e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b335:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b33a:	50                   	push   eax
c001b33b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b342:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b34d:	52                   	push   edx
c001b34e:	57                   	push   edi
c001b34f:	53                   	push   ebx
c001b350:	e8 6b fe ff ff       	call   c001b1c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b355:	83 c4 20             	add    esp,0x20
c001b358:	eb 31                	jmp    c001b38b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001b35a:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b35d:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b364:	d0 e8                	shr    al,1
c001b366:	89 3b                	mov    DWORD PTR [ebx],edi
c001b368:	83 e0 01             	and    eax,0x1
c001b36b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b372:	83 ec 0c             	sub    esp,0xc
c001b375:	89 13                	mov    DWORD PTR [ebx],edx
c001b377:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b37e:	89 03                	mov    DWORD PTR [ebx],eax
c001b380:	56                   	push   esi
c001b381:	e8 09 e4 fe ff       	call   c000978f <free>
c001b386:	83 c4 10             	add    esp,0x10
c001b389:	b0 01                	mov    al,0x1
c001b38b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b391:	5b                   	pop    ebx
c001b392:	5e                   	pop    esi
c001b393:	5f                   	pop    edi
c001b394:	5d                   	pop    ebp
c001b395:	c3                   	ret    

c001b396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b396:	55                   	push   ebp
c001b397:	57                   	push   edi
c001b398:	56                   	push   esi
c001b399:	53                   	push   ebx
c001b39a:	83 ec 20             	sub    esp,0x20
c001b39d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b3a1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b3a5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b3a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b3b9:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b3be:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b3c4:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b3ca:	57                   	push   edi
c001b3cb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b3cf:	50                   	push   eax
c001b3d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b3d4:	50                   	push   eax
c001b3d5:	e8 92 fd ff ff       	call   c001b16c <readRoot(unsigned int*, unsigned int*, char)>
c001b3da:	5a                   	pop    edx
c001b3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3df:	e8 e0 50 fe ff       	call   c00004c4 <strlen>
c001b3e4:	83 c4 10             	add    esp,0x10
c001b3e7:	83 f8 03             	cmp    eax,0x3
c001b3ea:	77 17                	ja     c001b403 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b3ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3f0:	89 03                	mov    DWORD PTR [ebx],eax
c001b3f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3f6:	89 06                	mov    DWORD PTR [esi],eax
c001b3f8:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b3ff:	b0 01                	mov    al,0x1
c001b401:	eb 19                	jmp    c001b41c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b403:	50                   	push   eax
c001b404:	55                   	push   ebp
c001b405:	57                   	push   edi
c001b406:	56                   	push   esi
c001b407:	53                   	push   ebx
c001b408:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b40c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b410:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b414:	e8 a7 fd ff ff       	call   c001b1c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b419:	83 c4 20             	add    esp,0x20
c001b41c:	83 c4 1c             	add    esp,0x1c
c001b41f:	5b                   	pop    ebx
c001b420:	5e                   	pop    esi
c001b421:	5f                   	pop    edi
c001b422:	5d                   	pop    ebp
c001b423:	c3                   	ret    

c001b424 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b424:	57                   	push   edi
c001b425:	56                   	push   esi
c001b426:	53                   	push   ebx
c001b427:	83 ec 10             	sub    esp,0x10
c001b42a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b42e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b432:	85 ff                	test   edi,edi
c001b434:	0f 84 8b 00 00 00    	je     c001b4c5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001b43a:	85 f6                	test   esi,esi
c001b43c:	0f 84 83 00 00 00    	je     c001b4c5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001b442:	b8 03 00 00 00       	mov    eax,0x3
c001b447:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001b44c:	75 7c                	jne    c001b4ca <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001b44e:	83 ec 0c             	sub    esp,0xc
c001b451:	6a 1c                	push   0x1c
c001b453:	e8 27 e3 fe ff       	call   c000977f <malloc>
c001b458:	89 07                	mov    DWORD PTR [edi],eax
c001b45a:	89 c3                	mov    ebx,eax
c001b45c:	58                   	pop    eax
c001b45d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b461:	50                   	push   eax
c001b462:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b465:	50                   	push   eax
c001b466:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b46a:	50                   	push   eax
c001b46b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b46f:	50                   	push   eax
c001b470:	56                   	push   esi
c001b471:	e8 20 ff ff ff       	call   c001b396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b476:	83 c4 20             	add    esp,0x20
c001b479:	84 c0                	test   al,al
c001b47b:	74 07                	je     c001b484 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001b47d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b482:	74 0b                	je     c001b48f <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001b484:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b488:	b8 01 00 00 00       	mov    eax,0x1
c001b48d:	eb 3b                	jmp    c001b4ca <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001b48f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b493:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b497:	89 03                	mov    DWORD PTR [ebx],eax
c001b499:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b4a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b4ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b4b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b4b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b4bc:	8a 06                	mov    al,BYTE PTR [esi]
c001b4be:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b4c1:	31 c0                	xor    eax,eax
c001b4c3:	eb 05                	jmp    c001b4ca <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001b4c5:	b8 04 00 00 00       	mov    eax,0x4
c001b4ca:	83 c4 10             	add    esp,0x10
c001b4cd:	5b                   	pop    ebx
c001b4ce:	5e                   	pop    esi
c001b4cf:	5f                   	pop    edi
c001b4d0:	c3                   	ret    
c001b4d1:	90                   	nop

c001b4d2 <ISO9660::exists(char const*)>:
c001b4d2:	83 ec 28             	sub    esp,0x28
c001b4d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b4d9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4dd:	52                   	push   edx
c001b4de:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b4e1:	52                   	push   edx
c001b4e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b4e6:	52                   	push   edx
c001b4e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b4eb:	52                   	push   edx
c001b4ec:	50                   	push   eax
c001b4ed:	e8 a4 fe ff ff       	call   c001b396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b4f2:	83 c4 3c             	add    esp,0x3c
c001b4f5:	c3                   	ret    

c001b4f6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b4f6:	56                   	push   esi
c001b4f7:	53                   	push   ebx
c001b4f8:	83 ec 14             	sub    esp,0x14
c001b4fb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b4ff:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b503:	85 db                	test   ebx,ebx
c001b505:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b509:	0f 94 c2             	sete   dl
c001b50c:	85 f6                	test   esi,esi
c001b50e:	0f 94 c0             	sete   al
c001b511:	08 c2                	or     dl,al
c001b513:	75 68                	jne    c001b57d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b515:	85 c9                	test   ecx,ecx
c001b517:	74 64                	je     c001b57d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b519:	83 ec 0c             	sub    esp,0xc
c001b51c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b51f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b523:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b529:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b530:	50                   	push   eax
c001b531:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b534:	50                   	push   eax
c001b535:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b539:	50                   	push   eax
c001b53a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b53e:	50                   	push   eax
c001b53f:	51                   	push   ecx
c001b540:	e8 51 fe ff ff       	call   c001b396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b545:	83 c4 20             	add    esp,0x20
c001b548:	ba 01 00 00 00       	mov    edx,0x1
c001b54d:	84 c0                	test   al,al
c001b54f:	74 31                	je     c001b582 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b551:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b555:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b55c:	89 03                	mov    DWORD PTR [ebx],eax
c001b55e:	ba 00 00 00 00       	mov    edx,0x0
c001b563:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b567:	85 c0                	test   eax,eax
c001b569:	0f 95 06             	setne  BYTE PTR [esi]
c001b56c:	74 14                	je     c001b582 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b56e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b574:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b57b:	eb 05                	jmp    c001b582 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b57d:	ba 04 00 00 00       	mov    edx,0x4
c001b582:	83 c4 14             	add    esp,0x14
c001b585:	89 d0                	mov    eax,edx
c001b587:	5b                   	pop    ebx
c001b588:	5e                   	pop    esi
c001b589:	c3                   	ret    

c001b58a <ISO9660::openDir(char const*, void**)>:
c001b58a:	57                   	push   edi
c001b58b:	56                   	push   esi
c001b58c:	53                   	push   ebx
c001b58d:	83 ec 10             	sub    esp,0x10
c001b590:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b594:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b598:	85 ff                	test   edi,edi
c001b59a:	74 7b                	je     c001b617 <ISO9660::openDir(char const*, void**)+0x8d>
c001b59c:	85 f6                	test   esi,esi
c001b59e:	74 77                	je     c001b617 <ISO9660::openDir(char const*, void**)+0x8d>
c001b5a0:	83 ec 0c             	sub    esp,0xc
c001b5a3:	6a 1c                	push   0x1c
c001b5a5:	e8 d5 e1 fe ff       	call   c000977f <malloc>
c001b5aa:	89 07                	mov    DWORD PTR [edi],eax
c001b5ac:	89 c3                	mov    ebx,eax
c001b5ae:	58                   	pop    eax
c001b5af:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5b3:	50                   	push   eax
c001b5b4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b5b7:	50                   	push   eax
c001b5b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b5bc:	50                   	push   eax
c001b5bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b5c1:	50                   	push   eax
c001b5c2:	56                   	push   esi
c001b5c3:	e8 ce fd ff ff       	call   c001b396 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b5c8:	83 c4 20             	add    esp,0x20
c001b5cb:	84 c0                	test   al,al
c001b5cd:	74 07                	je     c001b5d6 <ISO9660::openDir(char const*, void**)+0x4c>
c001b5cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b5d4:	75 0b                	jne    c001b5e1 <ISO9660::openDir(char const*, void**)+0x57>
c001b5d6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b5da:	b8 01 00 00 00       	mov    eax,0x1
c001b5df:	eb 3b                	jmp    c001b61c <ISO9660::openDir(char const*, void**)+0x92>
c001b5e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5e5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b5e9:	89 03                	mov    DWORD PTR [ebx],eax
c001b5eb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b5f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5f6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b5fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b607:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b60e:	8a 06                	mov    al,BYTE PTR [esi]
c001b610:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b613:	31 c0                	xor    eax,eax
c001b615:	eb 05                	jmp    c001b61c <ISO9660::openDir(char const*, void**)+0x92>
c001b617:	b8 04 00 00 00       	mov    eax,0x4
c001b61c:	83 c4 10             	add    esp,0x10
c001b61f:	5b                   	pop    ebx
c001b620:	5e                   	pop    esi
c001b621:	5f                   	pop    edi
c001b622:	c3                   	ret    
c001b623:	90                   	nop

c001b624 <ISO9660::ISO9660()>:
c001b624:	83 ec 0c             	sub    esp,0xc
c001b627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62b:	83 ec 0c             	sub    esp,0xc
c001b62e:	50                   	push   eax
c001b62f:	e8 a4 13 ff ff       	call   c000c9d8 <Filesystem::Filesystem()>
c001b634:	83 c4 10             	add    esp,0x10
c001b637:	ba 14 2f 02 c0       	mov    edx,0xc0022f14
c001b63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b640:	89 10                	mov    DWORD PTR [eax],edx
c001b642:	90                   	nop
c001b643:	83 c4 0c             	add    esp,0xc
c001b646:	c3                   	ret    
c001b647:	90                   	nop

c001b648 <SoundCard::beginPlayback()>:
c001b648:	c7 44 24 04 74 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f74
c001b650:	e9 ae 6f ff ff       	jmp    c0012603 <Krnl::panic(char const*)>
c001b655:	90                   	nop

c001b656 <SoundCard::stopPlayback()>:
c001b656:	c7 44 24 04 a8 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022fa8
c001b65e:	e9 a0 6f ff ff       	jmp    c0012603 <Krnl::panic(char const*)>
c001b663:	90                   	nop

c001b664 <SoundCard::SoundCard(char const*)>:
c001b664:	83 ec 1c             	sub    esp,0x1c
c001b667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b66b:	83 ec 08             	sub    esp,0x8
c001b66e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b672:	50                   	push   eax
c001b673:	e8 ca 26 ff ff       	call   c000dd42 <Device::Device(char const*)>
c001b678:	83 c4 10             	add    esp,0x10
c001b67b:	ba 40 30 02 c0       	mov    edx,0xc0023040
c001b680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b684:	89 10                	mov    DWORD PTR [eax],edx
c001b686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b68a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b695:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b69f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6a3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b6ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b6bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6bf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b6c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6d1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b6d6:	7f 19                	jg     c001b6f1 <SoundCard::SoundCard(char const*)+0x8d>
c001b6d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b6e0:	83 c2 54             	add    edx,0x54
c001b6e3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b6eb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b6ef:	eb e0                	jmp    c001b6d1 <SoundCard::SoundCard(char const*)+0x6d>
c001b6f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b6fc:	90                   	nop
c001b6fd:	83 c4 1c             	add    esp,0x1c
c001b700:	c3                   	ret    
c001b701:	90                   	nop

c001b702 <SoundCard::~SoundCard()>:
c001b702:	83 ec 0c             	sub    esp,0xc
c001b705:	ba 40 30 02 c0       	mov    edx,0xc0023040
c001b70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b70e:	89 10                	mov    DWORD PTR [eax],edx
c001b710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b714:	83 ec 0c             	sub    esp,0xc
c001b717:	50                   	push   eax
c001b718:	e8 23 23 ff ff       	call   c000da40 <Device::~Device()>
c001b71d:	83 c4 10             	add    esp,0x10
c001b720:	90                   	nop
c001b721:	83 c4 0c             	add    esp,0xc
c001b724:	c3                   	ret    
c001b725:	90                   	nop

c001b726 <SoundCard::~SoundCard()>:
c001b726:	83 ec 0c             	sub    esp,0xc
c001b729:	83 ec 0c             	sub    esp,0xc
c001b72c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b730:	e8 cd ff ff ff       	call   c001b702 <SoundCard::~SoundCard()>
c001b735:	83 c4 10             	add    esp,0x10
c001b738:	83 ec 08             	sub    esp,0x8
c001b73b:	68 e8 01 00 00       	push   0x1e8
c001b740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b744:	e8 97 0e ff ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c001b749:	83 c4 10             	add    esp,0x10
c001b74c:	83 c4 0c             	add    esp,0xc
c001b74f:	c3                   	ret    

c001b750 <SoundCard::configureRates(int, int, int)>:
c001b750:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b754:	31 c0                	xor    eax,eax
c001b756:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b75d:	75 20                	jne    c001b77f <SoundCard::configureRates(int, int, int)+0x2f>
c001b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b763:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b769:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b76d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b777:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b77d:	b0 01                	mov    al,0x1
c001b77f:	c3                   	ret    

c001b780 <SoundCard::getSamples16(int, short*)>:
c001b780:	55                   	push   ebp
c001b781:	57                   	push   edi
c001b782:	31 ff                	xor    edi,edi
c001b784:	56                   	push   esi
c001b785:	53                   	push   ebx
c001b786:	31 db                	xor    ebx,ebx
c001b788:	83 ec 18             	sub    esp,0x18
c001b78b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b78f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b793:	68 db 2f 02 c0       	push   0xc0022fdb
c001b798:	e8 24 0f ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001b79d:	83 c4 0c             	add    esp,0xc
c001b7a0:	8d 04 36             	lea    eax,[esi+esi*1]
c001b7a3:	50                   	push   eax
c001b7a4:	6a 00                	push   0x0
c001b7a6:	55                   	push   ebp
c001b7a7:	e8 fc 4c fe ff       	call   c00004a8 <memset>
c001b7ac:	83 c4 10             	add    esp,0x10
c001b7af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7b3:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001b7ba:	85 c0                	test   eax,eax
c001b7bc:	74 1b                	je     c001b7d9 <SoundCard::getSamples16(int, short*)+0x59>
c001b7be:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b7c2:	75 15                	jne    c001b7d9 <SoundCard::getSamples16(int, short*)+0x59>
c001b7c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b7c8:	55                   	push   ebp
c001b7c9:	56                   	push   esi
c001b7ca:	50                   	push   eax
c001b7cb:	e8 58 03 00 00       	call   c001bb28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	39 c7                	cmp    edi,eax
c001b7d5:	7d 02                	jge    c001b7d9 <SoundCard::getSamples16(int, short*)+0x59>
c001b7d7:	89 c7                	mov    edi,eax
c001b7d9:	43                   	inc    ebx
c001b7da:	83 fb 20             	cmp    ebx,0x20
c001b7dd:	75 d0                	jne    c001b7af <SoundCard::getSamples16(int, short*)+0x2f>
c001b7df:	83 c4 0c             	add    esp,0xc
c001b7e2:	89 f8                	mov    eax,edi
c001b7e4:	5b                   	pop    ebx
c001b7e5:	5e                   	pop    esi
c001b7e6:	5f                   	pop    edi
c001b7e7:	5d                   	pop    ebp
c001b7e8:	c3                   	ret    
c001b7e9:	90                   	nop

c001b7ea <SoundCard::getSamples32(int, int*)>:
c001b7ea:	55                   	push   ebp
c001b7eb:	57                   	push   edi
c001b7ec:	31 ff                	xor    edi,edi
c001b7ee:	56                   	push   esi
c001b7ef:	31 f6                	xor    esi,esi
c001b7f1:	53                   	push   ebx
c001b7f2:	83 ec 10             	sub    esp,0x10
c001b7f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7f9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b7fd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b801:	c1 e0 02             	shl    eax,0x2
c001b804:	50                   	push   eax
c001b805:	6a 00                	push   0x0
c001b807:	55                   	push   ebp
c001b808:	e8 9b 4c fe ff       	call   c00004a8 <memset>
c001b80d:	83 c4 10             	add    esp,0x10
c001b810:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b817:	85 c0                	test   eax,eax
c001b819:	74 1b                	je     c001b836 <SoundCard::getSamples32(int, int*)+0x4c>
c001b81b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b81f:	75 15                	jne    c001b836 <SoundCard::getSamples32(int, int*)+0x4c>
c001b821:	53                   	push   ebx
c001b822:	55                   	push   ebp
c001b823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b827:	50                   	push   eax
c001b828:	e8 f7 03 00 00       	call   c001bc24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b82d:	83 c4 10             	add    esp,0x10
c001b830:	39 c6                	cmp    esi,eax
c001b832:	7d 02                	jge    c001b836 <SoundCard::getSamples32(int, int*)+0x4c>
c001b834:	89 c6                	mov    esi,eax
c001b836:	47                   	inc    edi
c001b837:	83 ff 20             	cmp    edi,0x20
c001b83a:	75 d4                	jne    c001b810 <SoundCard::getSamples32(int, int*)+0x26>
c001b83c:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001b842:	85 f6                	test   esi,esi
c001b844:	75 0f                	jne    c001b855 <SoundCard::getSamples32(int, int*)+0x6b>
c001b846:	84 c0                	test   al,al
c001b848:	74 1b                	je     c001b865 <SoundCard::getSamples32(int, int*)+0x7b>
c001b84a:	83 ec 0c             	sub    esp,0xc
c001b84d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b84f:	53                   	push   ebx
c001b850:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b853:	eb 0d                	jmp    c001b862 <SoundCard::getSamples32(int, int*)+0x78>
c001b855:	84 c0                	test   al,al
c001b857:	75 0c                	jne    c001b865 <SoundCard::getSamples32(int, int*)+0x7b>
c001b859:	83 ec 0c             	sub    esp,0xc
c001b85c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b85e:	53                   	push   ebx
c001b85f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b862:	83 c4 10             	add    esp,0x10
c001b865:	83 c4 0c             	add    esp,0xc
c001b868:	89 f0                	mov    eax,esi
c001b86a:	5b                   	pop    ebx
c001b86b:	5e                   	pop    esi
c001b86c:	5f                   	pop    edi
c001b86d:	5d                   	pop    ebp
c001b86e:	c3                   	ret    
c001b86f:	90                   	nop

c001b870 <SoundCard::addChannel(SoundPort*)>:
c001b870:	56                   	push   esi
c001b871:	53                   	push   ebx
c001b872:	53                   	push   ebx
c001b873:	31 db                	xor    ebx,ebx
c001b875:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b879:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001b881:	74 27                	je     c001b8aa <SoundCard::addChannel(SoundPort*)+0x3a>
c001b883:	43                   	inc    ebx
c001b884:	83 fb 20             	cmp    ebx,0x20
c001b887:	75 f0                	jne    c001b879 <SoundCard::addChannel(SoundPort*)+0x9>
c001b889:	83 ec 0c             	sub    esp,0xc
c001b88c:	83 cb ff             	or     ebx,0xffffffff
c001b88f:	68 01 30 02 c0       	push   0xc0023001
c001b894:	e8 28 0e ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001b899:	c7 04 24 fa 2f 02 c0 	mov    DWORD PTR [esp],0xc0022ffa
c001b8a0:	e8 5e 6d ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001b8a5:	83 c4 10             	add    esp,0x10
c001b8a8:	eb 1b                	jmp    c001b8c5 <SoundCard::addChannel(SoundPort*)+0x55>
c001b8aa:	51                   	push   ecx
c001b8ab:	51                   	push   ecx
c001b8ac:	53                   	push   ebx
c001b8ad:	68 19 30 02 c0       	push   0xc0023019
c001b8b2:	e8 0a 0e ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001b8b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b8bb:	83 c4 10             	add    esp,0x10
c001b8be:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001b8c5:	89 d8                	mov    eax,ebx
c001b8c7:	5a                   	pop    edx
c001b8c8:	5b                   	pop    ebx
c001b8c9:	5e                   	pop    esi
c001b8ca:	c3                   	ret    
c001b8cb:	90                   	nop

c001b8cc <SoundCard::removeChannel(int)>:
c001b8cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8d4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b8df:	c3                   	ret    

c001b8e0 <SoundPort::SoundPort(int, int, int, int)>:
c001b8e0:	83 ec 0c             	sub    esp,0xc
c001b8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8fe:	89 10                	mov    DWORD PTR [eax],edx
c001b900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b904:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b908:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b90f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b913:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b916:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b91b:	75 13                	jne    c001b930 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b921:	8b 00                	mov    eax,DWORD PTR [eax]
c001b923:	05 a0 0f 00 00       	add    eax,0xfa0
c001b928:	01 c0                	add    eax,eax
c001b92a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b92e:	66 90                	xchg   ax,ax
c001b930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b934:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b938:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b93f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b94d:	c1 e0 02             	shl    eax,0x2
c001b950:	83 ec 0c             	sub    esp,0xc
c001b953:	50                   	push   eax
c001b954:	e8 26 de fe ff       	call   c000977f <malloc>
c001b959:	83 c4 10             	add    esp,0x10
c001b95c:	89 c2                	mov    edx,eax
c001b95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b962:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b965:	90                   	nop
c001b966:	83 c4 0c             	add    esp,0xc
c001b969:	c3                   	ret    
c001b96a:	66 90                	xchg   ax,ax

c001b96c <SoundPort::~SoundPort()>:
c001b96c:	83 ec 0c             	sub    esp,0xc
c001b96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b973:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b976:	85 c0                	test   eax,eax
c001b978:	74 1e                	je     c001b998 <SoundPort::~SoundPort()+0x2c>
c001b97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b981:	83 ec 0c             	sub    esp,0xc
c001b984:	50                   	push   eax
c001b985:	e8 05 de fe ff       	call   c000978f <free>
c001b98a:	83 c4 10             	add    esp,0x10
c001b98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b991:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b998:	90                   	nop
c001b999:	83 c4 0c             	add    esp,0xc
c001b99c:	c3                   	ret    
c001b99d:	90                   	nop
c001b99e:	66 90                	xchg   ax,ax

c001b9a0 <SoundPort::unpause()>:
c001b9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9a4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b9a8:	c3                   	ret    
c001b9a9:	90                   	nop
c001b9aa:	66 90                	xchg   ax,ax

c001b9ac <SoundPort::pause()>:
c001b9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9b0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b9b4:	c3                   	ret    
c001b9b5:	90                   	nop
c001b9b6:	66 90                	xchg   ax,ax

c001b9b8 <SoundPort::getBufferUsed()>:
c001b9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9bc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b9bf:	c3                   	ret    

c001b9c0 <SoundPort::getBufferSize()>:
c001b9c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b9c7:	c3                   	ret    

c001b9c8 <SoundPort::buffer16(short*, int)>:
c001b9c8:	55                   	push   ebp
c001b9c9:	57                   	push   edi
c001b9ca:	56                   	push   esi
c001b9cb:	53                   	push   ebx
c001b9cc:	83 ec 1c             	sub    esp,0x1c
c001b9cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b9d3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b9d7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b9da:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b9dd:	0f 84 85 00 00 00    	je     c001ba68 <SoundPort::buffer16(short*, int)+0xa0>
c001b9e3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b9e7:	85 c9                	test   ecx,ecx
c001b9e9:	7e 7d                	jle    c001ba68 <SoundPort::buffer16(short*, int)+0xa0>
c001b9eb:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b9ef:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b9f2:	c1 e1 0f             	shl    ecx,0xf
c001b9f5:	8d 70 01             	lea    esi,[eax+0x1]
c001b9f8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b9fb:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b9fe:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba01:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba04:	74 6e                	je     c001ba74 <SoundPort::buffer16(short*, int)+0xac>
c001ba06:	31 f6                	xor    esi,esi
c001ba08:	eb 22                	jmp    c001ba2c <SoundPort::buffer16(short*, int)+0x64>
c001ba0a:	66 90                	xchg   ax,ax
c001ba0c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ba11:	8d 79 01             	lea    edi,[ecx+0x1]
c001ba14:	c1 e3 0f             	shl    ebx,0xf
c001ba17:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ba1a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ba1d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ba20:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba23:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba26:	74 1c                	je     c001ba44 <SoundPort::buffer16(short*, int)+0x7c>
c001ba28:	89 c6                	mov    esi,eax
c001ba2a:	66 90                	xchg   ax,ax
c001ba2c:	8d 46 01             	lea    eax,[esi+0x1]
c001ba2f:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001ba33:	75 d7                	jne    c001ba0c <SoundPort::buffer16(short*, int)+0x44>
c001ba35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba39:	83 c4 1c             	add    esp,0x1c
c001ba3c:	5b                   	pop    ebx
c001ba3d:	5e                   	pop    esi
c001ba3e:	5f                   	pop    edi
c001ba3f:	5d                   	pop    ebp
c001ba40:	c3                   	ret    
c001ba41:	8d 76 00             	lea    esi,[esi+0x0]
c001ba44:	8d 46 02             	lea    eax,[esi+0x2]
c001ba47:	90                   	nop
c001ba48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba4c:	83 ec 0c             	sub    esp,0xc
c001ba4f:	68 6c 30 02 c0       	push   0xc002306c
c001ba54:	e8 68 0c ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001ba59:	83 c4 10             	add    esp,0x10
c001ba5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba60:	83 c4 1c             	add    esp,0x1c
c001ba63:	5b                   	pop    ebx
c001ba64:	5e                   	pop    esi
c001ba65:	5f                   	pop    edi
c001ba66:	5d                   	pop    ebp
c001ba67:	c3                   	ret    
c001ba68:	83 c4 1c             	add    esp,0x1c
c001ba6b:	31 c0                	xor    eax,eax
c001ba6d:	5b                   	pop    ebx
c001ba6e:	5e                   	pop    esi
c001ba6f:	5f                   	pop    edi
c001ba70:	5d                   	pop    ebp
c001ba71:	c3                   	ret    
c001ba72:	66 90                	xchg   ax,ax
c001ba74:	b8 01 00 00 00       	mov    eax,0x1
c001ba79:	eb cd                	jmp    c001ba48 <SoundPort::buffer16(short*, int)+0x80>
c001ba7b:	90                   	nop

c001ba7c <SoundPort::buffer32(int*, int)>:
c001ba7c:	55                   	push   ebp
c001ba7d:	57                   	push   edi
c001ba7e:	56                   	push   esi
c001ba7f:	53                   	push   ebx
c001ba80:	83 ec 1c             	sub    esp,0x1c
c001ba83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ba87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba8b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba8e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ba92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba96:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba99:	74 79                	je     c001bb14 <SoundPort::buffer32(int*, int)+0x98>
c001ba9b:	85 c0                	test   eax,eax
c001ba9d:	7e 75                	jle    c001bb14 <SoundPort::buffer32(int*, int)+0x98>
c001ba9f:	8d 71 01             	lea    esi,[ecx+0x1]
c001baa2:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001baa5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001baa8:	8b 37                	mov    esi,DWORD PTR [edi]
c001baaa:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001baad:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bab0:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bab3:	74 6b                	je     c001bb20 <SoundPort::buffer32(int*, int)+0xa4>
c001bab5:	31 f6                	xor    esi,esi
c001bab7:	eb 1f                	jmp    c001bad8 <SoundPort::buffer32(int*, int)+0x5c>
c001bab9:	8d 76 00             	lea    esi,[esi+0x0]
c001babc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001babf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001bac2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001bac5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001bac8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001bacc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bacf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bad2:	74 1c                	je     c001baf0 <SoundPort::buffer32(int*, int)+0x74>
c001bad4:	89 de                	mov    esi,ebx
c001bad6:	66 90                	xchg   ax,ax
c001bad8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001badb:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001badf:	75 db                	jne    c001babc <SoundPort::buffer32(int*, int)+0x40>
c001bae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bae5:	83 c4 1c             	add    esp,0x1c
c001bae8:	5b                   	pop    ebx
c001bae9:	5e                   	pop    esi
c001baea:	5f                   	pop    edi
c001baeb:	5d                   	pop    ebp
c001baec:	c3                   	ret    
c001baed:	8d 76 00             	lea    esi,[esi+0x0]
c001baf0:	8d 46 02             	lea    eax,[esi+0x2]
c001baf3:	90                   	nop
c001baf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baf8:	83 ec 0c             	sub    esp,0xc
c001bafb:	68 87 30 02 c0       	push   0xc0023087
c001bb00:	e8 bc 0b ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001bb05:	83 c4 10             	add    esp,0x10
c001bb08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb0c:	83 c4 1c             	add    esp,0x1c
c001bb0f:	5b                   	pop    ebx
c001bb10:	5e                   	pop    esi
c001bb11:	5f                   	pop    edi
c001bb12:	5d                   	pop    ebp
c001bb13:	c3                   	ret    
c001bb14:	83 c4 1c             	add    esp,0x1c
c001bb17:	31 c0                	xor    eax,eax
c001bb19:	5b                   	pop    ebx
c001bb1a:	5e                   	pop    esi
c001bb1b:	5f                   	pop    edi
c001bb1c:	5d                   	pop    ebp
c001bb1d:	c3                   	ret    
c001bb1e:	66 90                	xchg   ax,ax
c001bb20:	b8 01 00 00 00       	mov    eax,0x1
c001bb25:	eb cd                	jmp    c001baf4 <SoundPort::buffer32(int*, int)+0x78>
c001bb27:	90                   	nop

c001bb28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001bb28:	57                   	push   edi
c001bb29:	56                   	push   esi
c001bb2a:	53                   	push   ebx
c001bb2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001bb33:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001bb39:	39 03                	cmp    DWORD PTR [ebx],eax
c001bb3b:	74 13                	je     c001bb50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001bb3d:	83 ec 0c             	sub    esp,0xc
c001bb40:	68 dc 30 02 c0       	push   0xc00230dc
c001bb45:	e8 b9 6a ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001bb4a:	83 c4 10             	add    esp,0x10
c001bb4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb50:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001bb56:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001bb59:	74 11                	je     c001bb6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001bb5b:	83 ec 0c             	sub    esp,0xc
c001bb5e:	68 a2 30 02 c0       	push   0xc00230a2
c001bb63:	e8 9b 6a ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001bb68:	83 c4 10             	add    esp,0x10
c001bb6b:	90                   	nop
c001bb6c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001bb72:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bb75:	74 11                	je     c001bb88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001bb77:	83 ec 0c             	sub    esp,0xc
c001bb7a:	68 a2 30 02 c0       	push   0xc00230a2
c001bb7f:	e8 7f 6a ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	90                   	nop
c001bb88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bb8b:	89 c6                	mov    esi,eax
c001bb8d:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001bb91:	7e 05                	jle    c001bb98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001bb93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bb97:	90                   	nop
c001bb98:	85 f6                	test   esi,esi
c001bb9a:	7e 30                	jle    c001bbcc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001bb9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bba0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001bba3:	31 c9                	xor    ecx,ecx
c001bba5:	01 d7                	add    edi,edx
c001bba7:	90                   	nop
c001bba8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001bbab:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001bbae:	85 c0                	test   eax,eax
c001bbb0:	79 06                	jns    c001bbb8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001bbb2:	05 ff 7f 00 00       	add    eax,0x7fff
c001bbb7:	90                   	nop
c001bbb8:	c1 f8 0f             	sar    eax,0xf
c001bbbb:	83 c1 04             	add    ecx,0x4
c001bbbe:	66 01 02             	add    WORD PTR [edx],ax
c001bbc1:	83 c2 02             	add    edx,0x2
c001bbc4:	39 d7                	cmp    edi,edx
c001bbc6:	75 e0                	jne    c001bba8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001bbc8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bbcb:	90                   	nop
c001bbcc:	56                   	push   esi
c001bbcd:	89 c2                	mov    edx,eax
c001bbcf:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001bbd6:	29 f2                	sub    edx,esi
c001bbd8:	52                   	push   edx
c001bbd9:	50                   	push   eax
c001bbda:	68 fc 30 02 c0       	push   0xc00230fc
c001bbdf:	e8 dd 0a ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001bbe4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001bbe7:	50                   	push   eax
c001bbe8:	01 f8                	add    eax,edi
c001bbea:	50                   	push   eax
c001bbeb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bbee:	29 f0                	sub    eax,esi
c001bbf0:	c1 e0 02             	shl    eax,0x2
c001bbf3:	50                   	push   eax
c001bbf4:	68 2c 31 02 c0       	push   0xc002312c
c001bbf9:	e8 c3 0a ff ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001bbfe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bc01:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bc04:	83 c4 1c             	add    esp,0x1c
c001bc07:	01 d7                	add    edi,edx
c001bc09:	29 f0                	sub    eax,esi
c001bc0b:	c1 e0 02             	shl    eax,0x2
c001bc0e:	50                   	push   eax
c001bc0f:	57                   	push   edi
c001bc10:	52                   	push   edx
c001bc11:	e8 ca 47 fe ff       	call   c00003e0 <memmove>
c001bc16:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001bc19:	83 c4 10             	add    esp,0x10
c001bc1c:	89 f0                	mov    eax,esi
c001bc1e:	5b                   	pop    ebx
c001bc1f:	5e                   	pop    esi
c001bc20:	5f                   	pop    edi
c001bc21:	c3                   	ret    
c001bc22:	66 90                	xchg   ax,ax

c001bc24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001bc24:	57                   	push   edi
c001bc25:	56                   	push   esi
c001bc26:	53                   	push   ebx
c001bc27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bc2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bc33:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001bc39:	39 06                	cmp    DWORD PTR [esi],eax
c001bc3b:	74 13                	je     c001bc50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001bc3d:	83 ec 0c             	sub    esp,0xc
c001bc40:	68 50 31 02 c0       	push   0xc0023150
c001bc45:	e8 b9 69 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001bc4a:	83 c4 10             	add    esp,0x10
c001bc4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc50:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001bc56:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001bc59:	74 11                	je     c001bc6c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001bc5b:	83 ec 0c             	sub    esp,0xc
c001bc5e:	68 be 30 02 c0       	push   0xc00230be
c001bc63:	e8 9b 69 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001bc68:	83 c4 10             	add    esp,0x10
c001bc6b:	90                   	nop
c001bc6c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001bc72:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001bc75:	74 11                	je     c001bc88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001bc77:	83 ec 0c             	sub    esp,0xc
c001bc7a:	68 be 30 02 c0       	push   0xc00230be
c001bc7f:	e8 7f 69 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001bc84:	83 c4 10             	add    esp,0x10
c001bc87:	90                   	nop
c001bc88:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001bc8b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001bc8f:	7e 07                	jle    c001bc98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001bc91:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc95:	8d 76 00             	lea    esi,[esi+0x0]
c001bc98:	85 ff                	test   edi,edi
c001bc9a:	7e 1c                	jle    c001bcb8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001bc9c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001bca3:	31 c0                	xor    eax,eax
c001bca5:	8d 76 00             	lea    esi,[esi+0x0]
c001bca8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001bcab:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001bcae:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001bcb1:	83 c0 04             	add    eax,0x4
c001bcb4:	39 c1                	cmp    ecx,eax
c001bcb6:	75 f0                	jne    c001bca8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001bcb8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001bcbb:	50                   	push   eax
c001bcbc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bcbf:	29 f8                	sub    eax,edi
c001bcc1:	c1 e0 02             	shl    eax,0x2
c001bcc4:	50                   	push   eax
c001bcc5:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bcc8:	50                   	push   eax
c001bcc9:	52                   	push   edx
c001bcca:	e8 11 47 fe ff       	call   c00003e0 <memmove>
c001bccf:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001bcd2:	83 c4 10             	add    esp,0x10
c001bcd5:	89 f8                	mov    eax,edi
c001bcd7:	5b                   	pop    ebx
c001bcd8:	5e                   	pop    esi
c001bcd9:	5f                   	pop    edi
c001bcda:	c3                   	ret    
c001bcdb:	90                   	nop

c001bcdc <PCI::open(int, int, void*)>:
c001bcdc:	83 ec 18             	sub    esp,0x18
c001bcdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bce3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bce7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bced:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcef:	50                   	push   eax
c001bcf0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bcf3:	31 c0                	xor    eax,eax
c001bcf5:	83 c4 1c             	add    esp,0x1c
c001bcf8:	c3                   	ret    
c001bcf9:	90                   	nop

c001bcfa <PCI::close(int, int, void*)>:
c001bcfa:	31 c0                	xor    eax,eax
c001bcfc:	c3                   	ret    
c001bcfd:	90                   	nop

c001bcfe <PCI::PCI()>:
c001bcfe:	83 ec 0c             	sub    esp,0xc
c001bd01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd05:	83 ec 08             	sub    esp,0x8
c001bd08:	68 6f 31 02 c0       	push   0xc002316f
c001bd0d:	50                   	push   eax
c001bd0e:	e8 85 17 ff ff       	call   c000d498 <Bus::Bus(char const*)>
c001bd13:	83 c4 10             	add    esp,0x10
c001bd16:	ba 18 32 02 c0       	mov    edx,0xc0023218
c001bd1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd1f:	89 10                	mov    DWORD PTR [eax],edx
c001bd21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd25:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001bd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd33:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c001bd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd42:	0f b6 d0             	movzx  edx,al
c001bd45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd49:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd5a:	0f b6 d0             	movzx  edx,al
c001bd5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd61:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd70:	8d 50 01             	lea    edx,[eax+0x1]
c001bd73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bd77:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bd7d:	0f b6 d0             	movzx  edx,al
c001bd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd84:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bd88:	83 c9 c0             	or     ecx,0xffffffc0
c001bd8b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bd8f:	90                   	nop
c001bd90:	83 c4 0c             	add    esp,0xc
c001bd93:	c3                   	ret    

c001bd94 <PCI::readBAR8(unsigned int, int)>:
c001bd94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd9c:	f6 c2 01             	test   dl,0x1
c001bd9f:	74 07                	je     c001bda8 <PCI::readBAR8(unsigned int, int)+0x14>
c001bda1:	83 e2 fc             	and    edx,0xfffffffc
c001bda4:	01 c2                	add    edx,eax
c001bda6:	ec                   	in     al,dx
c001bda7:	c3                   	ret    
c001bda8:	83 e2 f0             	and    edx,0xfffffff0
c001bdab:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001bdae:	c3                   	ret    
c001bdaf:	90                   	nop

c001bdb0 <PCI::readBAR16(unsigned int, int)>:
c001bdb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bdb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdb8:	f6 c2 01             	test   dl,0x1
c001bdbb:	74 08                	je     c001bdc5 <PCI::readBAR16(unsigned int, int)+0x15>
c001bdbd:	83 e2 fc             	and    edx,0xfffffffc
c001bdc0:	01 c2                	add    edx,eax
c001bdc2:	66 ed                	in     ax,dx
c001bdc4:	c3                   	ret    
c001bdc5:	83 e2 f0             	and    edx,0xfffffff0
c001bdc8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001bdcc:	c3                   	ret    
c001bdcd:	90                   	nop

c001bdce <PCI::readBAR32(unsigned int, int)>:
c001bdce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bdd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdd6:	f6 c2 01             	test   dl,0x1
c001bdd9:	74 07                	je     c001bde2 <PCI::readBAR32(unsigned int, int)+0x14>
c001bddb:	83 e2 fc             	and    edx,0xfffffffc
c001bdde:	01 c2                	add    edx,eax
c001bde0:	ed                   	in     eax,dx
c001bde1:	c3                   	ret    
c001bde2:	83 e2 f0             	and    edx,0xfffffff0
c001bde5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001bde8:	c3                   	ret    
c001bde9:	90                   	nop

c001bdea <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001bdea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bdee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdf2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bdf6:	f6 c2 01             	test   dl,0x1
c001bdf9:	74 07                	je     c001be02 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001bdfb:	83 e2 fc             	and    edx,0xfffffffc
c001bdfe:	01 ca                	add    edx,ecx
c001be00:	ee                   	out    dx,al
c001be01:	c3                   	ret    
c001be02:	83 e2 f0             	and    edx,0xfffffff0
c001be05:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001be08:	c3                   	ret    
c001be09:	90                   	nop

c001be0a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001be0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be16:	f6 c2 01             	test   dl,0x1
c001be19:	74 08                	je     c001be23 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001be1b:	83 e2 fc             	and    edx,0xfffffffc
c001be1e:	01 ca                	add    edx,ecx
c001be20:	66 ef                	out    dx,ax
c001be22:	c3                   	ret    
c001be23:	83 e2 f0             	and    edx,0xfffffff0
c001be26:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001be2a:	c3                   	ret    
c001be2b:	90                   	nop

c001be2c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001be2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be38:	f6 c2 01             	test   dl,0x1
c001be3b:	74 07                	je     c001be44 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001be3d:	83 e2 fc             	and    edx,0xfffffffc
c001be40:	01 ca                	add    edx,ecx
c001be42:	ef                   	out    dx,eax
c001be43:	c3                   	ret    
c001be44:	83 e2 f0             	and    edx,0xfffffff0
c001be47:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001be4a:	c3                   	ret    
c001be4b:	90                   	nop

c001be4c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001be4c:	55                   	push   ebp
c001be4d:	57                   	push   edi
c001be4e:	56                   	push   esi
c001be4f:	53                   	push   ebx
c001be50:	83 ec 0c             	sub    esp,0xc
c001be53:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001be57:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001be5b:	89 f0                	mov    eax,esi
c001be5d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001be61:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be65:	3c 07                	cmp    al,0x7
c001be67:	76 10                	jbe    c001be79 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001be69:	83 ec 0c             	sub    esp,0xc
c001be6c:	68 77 31 02 c0       	push   0xc0023177
c001be71:	e8 8d 67 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001be76:	83 c4 10             	add    esp,0x10
c001be79:	80 fb 0f             	cmp    bl,0xf
c001be7c:	76 10                	jbe    c001be8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001be7e:	83 ec 0c             	sub    esp,0xc
c001be81:	68 a7 31 02 c0       	push   0xc00231a7
c001be86:	e8 78 67 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001be8b:	83 c4 10             	add    esp,0x10
c001be8e:	8d 04 36             	lea    eax,[esi+esi*1]
c001be91:	ba f8 0c 00 00       	mov    edx,0xcf8
c001be96:	83 c8 f0             	or     eax,0xfffffff0
c001be99:	ee                   	out    dx,al
c001be9a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001be9f:	89 e8                	mov    eax,ebp
c001bea1:	ee                   	out    dx,al
c001bea2:	83 c4 0c             	add    esp,0xc
c001bea5:	89 d8                	mov    eax,ebx
c001bea7:	66 81 e7 fc 00       	and    di,0xfc
c001beac:	5b                   	pop    ebx
c001bead:	c1 e0 08             	shl    eax,0x8
c001beb0:	5e                   	pop    esi
c001beb1:	09 f8                	or     eax,edi
c001beb3:	5f                   	pop    edi
c001beb4:	66 0d 00 c0          	or     ax,0xc000
c001beb8:	5d                   	pop    ebp
c001beb9:	c3                   	ret    

c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001beba:	57                   	push   edi
c001bebb:	56                   	push   esi
c001bebc:	53                   	push   ebx
c001bebd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bec1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bec5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001becb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001becf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bed3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bed7:	83 ff 01             	cmp    edi,0x1
c001beda:	75 3e                	jne    c001bf1a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001bedc:	89 de                	mov    esi,ebx
c001bede:	0f b6 c0             	movzx  eax,al
c001bee1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bee7:	c1 e0 10             	shl    eax,0x10
c001beea:	0f b6 c9             	movzx  ecx,cl
c001beed:	09 f0                	or     eax,esi
c001beef:	c1 e1 08             	shl    ecx,0x8
c001bef2:	0f b6 d2             	movzx  edx,dl
c001bef5:	09 c8                	or     eax,ecx
c001bef7:	c1 e2 0b             	shl    edx,0xb
c001befa:	09 d0                	or     eax,edx
c001befc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bf01:	0d 00 00 00 80       	or     eax,0x80000000
c001bf06:	ef                   	out    dx,eax
c001bf07:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bf0c:	ed                   	in     eax,dx
c001bf0d:	83 e3 02             	and    ebx,0x2
c001bf10:	0f b6 cb             	movzx  ecx,bl
c001bf13:	c1 e1 03             	shl    ecx,0x3
c001bf16:	d3 e8                	shr    eax,cl
c001bf18:	eb 43                	jmp    c001bf5d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001bf1a:	83 ff 02             	cmp    edi,0x2
c001bf1d:	75 2c                	jne    c001bf4b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001bf1f:	83 ec 0c             	sub    esp,0xc
c001bf22:	0f b6 c9             	movzx  ecx,cl
c001bf25:	0f b6 d2             	movzx  edx,dl
c001bf28:	0f b6 fb             	movzx  edi,bl
c001bf2b:	0f b6 c0             	movzx  eax,al
c001bf2e:	57                   	push   edi
c001bf2f:	51                   	push   ecx
c001bf30:	52                   	push   edx
c001bf31:	50                   	push   eax
c001bf32:	56                   	push   esi
c001bf33:	e8 14 ff ff ff       	call   c001be4c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf38:	89 c2                	mov    edx,eax
c001bf3a:	ed                   	in     eax,dx
c001bf3b:	83 e3 02             	and    ebx,0x2
c001bf3e:	83 c4 20             	add    esp,0x20
c001bf41:	0f b6 cb             	movzx  ecx,bl
c001bf44:	c1 e1 03             	shl    ecx,0x3
c001bf47:	d3 e8                	shr    eax,cl
c001bf49:	eb 12                	jmp    c001bf5d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001bf4b:	83 ec 0c             	sub    esp,0xc
c001bf4e:	68 d7 31 02 c0       	push   0xc00231d7
c001bf53:	e8 ab 66 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001bf58:	83 c4 10             	add    esp,0x10
c001bf5b:	31 c0                	xor    eax,eax
c001bf5d:	5b                   	pop    ebx
c001bf5e:	5e                   	pop    esi
c001bf5f:	5f                   	pop    edi
c001bf60:	c3                   	ret    
c001bf61:	90                   	nop

c001bf62 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bf62:	83 ec 18             	sub    esp,0x18
c001bf65:	6a 00                	push   0x0
c001bf67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf6c:	50                   	push   eax
c001bf6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf72:	50                   	push   eax
c001bf73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf78:	50                   	push   eax
c001bf79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf7d:	e8 38 ff ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf82:	83 c4 2c             	add    esp,0x2c
c001bf85:	c3                   	ret    

c001bf86 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bf86:	83 ec 18             	sub    esp,0x18
c001bf89:	6a 0e                	push   0xe
c001bf8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf90:	50                   	push   eax
c001bf91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf96:	50                   	push   eax
c001bf97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf9c:	50                   	push   eax
c001bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfa1:	e8 14 ff ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfa6:	83 c4 2c             	add    esp,0x2c
c001bfa9:	0f b6 c0             	movzx  eax,al
c001bfac:	c3                   	ret    
c001bfad:	90                   	nop

c001bfae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bfae:	55                   	push   ebp
c001bfaf:	57                   	push   edi
c001bfb0:	56                   	push   esi
c001bfb1:	53                   	push   ebx
c001bfb2:	83 ec 18             	sub    esp,0x18
c001bfb5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bfba:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bfbf:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bfc4:	6a 0a                	push   0xa
c001bfc6:	56                   	push   esi
c001bfc7:	55                   	push   ebp
c001bfc8:	57                   	push   edi
c001bfc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bfcd:	e8 e8 fe ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfd2:	83 c4 14             	add    esp,0x14
c001bfd5:	89 c3                	mov    ebx,eax
c001bfd7:	6a 0a                	push   0xa
c001bfd9:	0f b6 db             	movzx  ebx,bl
c001bfdc:	56                   	push   esi
c001bfdd:	55                   	push   ebp
c001bfde:	57                   	push   edi
c001bfdf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bfe3:	e8 d2 fe ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfe8:	83 c4 2c             	add    esp,0x2c
c001bfeb:	25 00 ff 00 00       	and    eax,0xff00
c001bff0:	09 d8                	or     eax,ebx
c001bff2:	5b                   	pop    ebx
c001bff3:	5e                   	pop    esi
c001bff4:	5f                   	pop    edi
c001bff5:	5d                   	pop    ebp
c001bff6:	c3                   	ret    
c001bff7:	90                   	nop

c001bff8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bff8:	83 ec 18             	sub    esp,0x18
c001bffb:	6a 08                	push   0x8
c001bffd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c002:	50                   	push   eax
c001c003:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c008:	50                   	push   eax
c001c009:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c00e:	50                   	push   eax
c001c00f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c013:	e8 a2 fe ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c018:	83 c4 2c             	add    esp,0x2c
c001c01b:	0f b6 c4             	movzx  eax,ah
c001c01e:	c3                   	ret    
c001c01f:	90                   	nop

c001c020 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c020:	83 ec 18             	sub    esp,0x18
c001c023:	6a 08                	push   0x8
c001c025:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c02a:	50                   	push   eax
c001c02b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c030:	50                   	push   eax
c001c031:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c036:	50                   	push   eax
c001c037:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c03b:	e8 7a fe ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c040:	83 c4 2c             	add    esp,0x2c
c001c043:	c3                   	ret    

c001c044 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c044:	83 ec 18             	sub    esp,0x18
c001c047:	6a 3c                	push   0x3c
c001c049:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c04e:	50                   	push   eax
c001c04f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c054:	50                   	push   eax
c001c055:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c05a:	50                   	push   eax
c001c05b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c05f:	e8 56 fe ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c064:	83 c4 2c             	add    esp,0x2c
c001c067:	c3                   	ret    

c001c068 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c068:	83 ec 18             	sub    esp,0x18
c001c06b:	6a 18                	push   0x18
c001c06d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c072:	50                   	push   eax
c001c073:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c078:	50                   	push   eax
c001c079:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c07e:	50                   	push   eax
c001c07f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c083:	e8 32 fe ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c088:	83 c4 2c             	add    esp,0x2c
c001c08b:	0f b6 c4             	movzx  eax,ah
c001c08e:	c3                   	ret    
c001c08f:	90                   	nop

c001c090 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c090:	55                   	push   ebp
c001c091:	57                   	push   edi
c001c092:	56                   	push   esi
c001c093:	53                   	push   ebx
c001c094:	83 ec 28             	sub    esp,0x28
c001c097:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c09b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001c0a0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001c0a5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001c0aa:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c0b1:	8d 43 12             	lea    eax,[ebx+0x12]
c001c0b4:	83 c3 10             	add    ebx,0x10
c001c0b7:	0f b6 c0             	movzx  eax,al
c001c0ba:	0f b6 db             	movzx  ebx,bl
c001c0bd:	50                   	push   eax
c001c0be:	51                   	push   ecx
c001c0bf:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001c0c3:	57                   	push   edi
c001c0c4:	55                   	push   ebp
c001c0c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c0c9:	e8 ec fd ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0ce:	83 c4 14             	add    esp,0x14
c001c0d1:	89 c6                	mov    esi,eax
c001c0d3:	53                   	push   ebx
c001c0d4:	c1 e6 10             	shl    esi,0x10
c001c0d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c0db:	51                   	push   ecx
c001c0dc:	57                   	push   edi
c001c0dd:	55                   	push   ebp
c001c0de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c0e2:	e8 d3 fd ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0e7:	83 c4 3c             	add    esp,0x3c
c001c0ea:	0f b7 c0             	movzx  eax,ax
c001c0ed:	5b                   	pop    ebx
c001c0ee:	09 f0                	or     eax,esi
c001c0f0:	5e                   	pop    esi
c001c0f1:	5f                   	pop    edi
c001c0f2:	5d                   	pop    ebp
c001c0f3:	c3                   	ret    

c001c0f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c0f4:	55                   	push   ebp
c001c0f5:	57                   	push   edi
c001c0f6:	56                   	push   esi
c001c0f7:	53                   	push   ebx
c001c0f8:	83 ec 0c             	sub    esp,0xc
c001c0fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c103:	89 f5                	mov    ebp,esi
c001c105:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001c10b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c10f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c113:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c117:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c11b:	83 f9 01             	cmp    ecx,0x1
c001c11e:	75 5d                	jne    c001c17d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001c120:	0f b6 c8             	movzx  ecx,al
c001c123:	0f b6 d2             	movzx  edx,dl
c001c126:	c1 e1 10             	shl    ecx,0x10
c001c129:	c1 e2 0b             	shl    edx,0xb
c001c12c:	89 f0                	mov    eax,esi
c001c12e:	25 fc 00 00 00       	and    eax,0xfc
c001c133:	09 c1                	or     ecx,eax
c001c135:	89 e8                	mov    eax,ebp
c001c137:	0f b6 c0             	movzx  eax,al
c001c13a:	c1 e0 08             	shl    eax,0x8
c001c13d:	09 c1                	or     ecx,eax
c001c13f:	09 d1                	or     ecx,edx
c001c141:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c146:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c14c:	89 c8                	mov    eax,ecx
c001c14e:	ef                   	out    dx,eax
c001c14f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c154:	ed                   	in     eax,dx
c001c155:	0f b7 db             	movzx  ebx,bx
c001c158:	83 e6 02             	and    esi,0x2
c001c15b:	74 0a                	je     c001c167 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001c15d:	0f b7 d0             	movzx  edx,ax
c001c160:	c1 e3 10             	shl    ebx,0x10
c001c163:	09 d3                	or     ebx,edx
c001c165:	eb 05                	jmp    c001c16c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001c167:	66 31 c0             	xor    ax,ax
c001c16a:	09 c3                	or     ebx,eax
c001c16c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c171:	89 c8                	mov    eax,ecx
c001c173:	ef                   	out    dx,eax
c001c174:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c179:	89 d8                	mov    eax,ebx
c001c17b:	eb 41                	jmp    c001c1be <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001c17d:	83 f9 02             	cmp    ecx,0x2
c001c180:	75 45                	jne    c001c1c7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001c182:	83 ec 0c             	sub    esp,0xc
c001c185:	0f b6 d2             	movzx  edx,dl
c001c188:	89 f1                	mov    ecx,esi
c001c18a:	0f b6 c0             	movzx  eax,al
c001c18d:	0f b6 f1             	movzx  esi,cl
c001c190:	89 e9                	mov    ecx,ebp
c001c192:	56                   	push   esi
c001c193:	0f b6 c9             	movzx  ecx,cl
c001c196:	51                   	push   ecx
c001c197:	52                   	push   edx
c001c198:	50                   	push   eax
c001c199:	57                   	push   edi
c001c19a:	e8 ad fc ff ff       	call   c001be4c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c19f:	89 c2                	mov    edx,eax
c001c1a1:	ed                   	in     eax,dx
c001c1a2:	83 c4 20             	add    esp,0x20
c001c1a5:	0f b7 db             	movzx  ebx,bx
c001c1a8:	f6 c2 02             	test   dl,0x2
c001c1ab:	74 0c                	je     c001c1b9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001c1ad:	0f b7 c8             	movzx  ecx,ax
c001c1b0:	89 d8                	mov    eax,ebx
c001c1b2:	c1 e0 10             	shl    eax,0x10
c001c1b5:	09 c8                	or     eax,ecx
c001c1b7:	eb 05                	jmp    c001c1be <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001c1b9:	66 31 c0             	xor    ax,ax
c001c1bc:	09 d8                	or     eax,ebx
c001c1be:	ef                   	out    dx,eax
c001c1bf:	83 c4 0c             	add    esp,0xc
c001c1c2:	5b                   	pop    ebx
c001c1c3:	5e                   	pop    esi
c001c1c4:	5f                   	pop    edi
c001c1c5:	5d                   	pop    ebp
c001c1c6:	c3                   	ret    
c001c1c7:	c7 44 24 20 d7 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc00231d7
c001c1cf:	83 c4 0c             	add    esp,0xc
c001c1d2:	5b                   	pop    ebx
c001c1d3:	5e                   	pop    esi
c001c1d4:	5f                   	pop    edi
c001c1d5:	5d                   	pop    ebp
c001c1d6:	e9 28 64 ff ff       	jmp    c0012603 <Krnl::panic(char const*)>
c001c1db:	90                   	nop

c001c1dc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001c1dc:	55                   	push   ebp
c001c1dd:	57                   	push   edi
c001c1de:	56                   	push   esi
c001c1df:	53                   	push   ebx
c001c1e0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c1e6:	80 3d cc 7e 02 c0 00 	cmp    BYTE PTR ds:0xc0027ecc,0x0
c001c1ed:	0f 85 84 00 00 00    	jne    c001c277 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001c1f3:	83 ec 0c             	sub    esp,0xc
c001c1f6:	68 14 01 00 00       	push   0x114
c001c1fb:	e8 7f d5 fe ff       	call   c000977f <malloc>
c001c200:	83 c4 0c             	add    esp,0xc
c001c203:	89 c3                	mov    ebx,eax
c001c205:	ff 35 b0 74 02 c0    	push   DWORD PTR ds:0xc00274b0
c001c20b:	68 dd 31 02 c0       	push   0xc00231dd
c001c210:	50                   	push   eax
c001c211:	e8 16 0a ff ff       	call   c000cc2c <File::File(char const*, Process*)>
c001c216:	5a                   	pop    edx
c001c217:	59                   	pop    ecx
c001c218:	6a 01                	push   0x1
c001c21a:	53                   	push   ebx
c001c21b:	e8 e6 0a ff ff       	call   c000cd06 <File::open(FileOpenMode)>
c001c220:	83 c4 0c             	add    esp,0xc
c001c223:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001c227:	50                   	push   eax
c001c228:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c22c:	50                   	push   eax
c001c22d:	53                   	push   ebx
c001c22e:	e8 7f 0d ff ff       	call   c000cfb2 <File::stat(unsigned long long*, bool*)>
c001c233:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c237:	40                   	inc    eax
c001c238:	89 04 24             	mov    DWORD PTR [esp],eax
c001c23b:	e8 3f d5 fe ff       	call   c000977f <malloc>
c001c240:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c244:	a3 c8 7e 02 c0       	mov    ds:0xc0027ec8,eax
c001c249:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001c24d:	5e                   	pop    esi
c001c24e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c250:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001c254:	51                   	push   ecx
c001c255:	50                   	push   eax
c001c256:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c25a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c25e:	53                   	push   ebx
c001c25f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c262:	83 c4 14             	add    esp,0x14
c001c265:	53                   	push   ebx
c001c266:	e8 f9 0a ff ff       	call   c000cd64 <File::close()>
c001c26b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c26f:	83 c4 10             	add    esp,0x10
c001c272:	a3 c4 7e 02 c0       	mov    ds:0xc0027ec4,eax
c001c277:	a1 c4 7e 02 c0       	mov    eax,ds:0xc0027ec4
c001c27c:	8b 15 c8 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027ec8
c001c282:	89 04 24             	mov    DWORD PTR [esp],eax
c001c285:	31 ff                	xor    edi,edi
c001c287:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001c28f:	31 f6                	xor    esi,esi
c001c291:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001c296:	31 db                	xor    ebx,ebx
c001c298:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001c2a0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001c2a5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001c2ac:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001c2b0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001c2b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c2bb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001c2be:	0f 8e 6b 01 00 00    	jle    c001c42f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001c2c4:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001c2c7:	d4 40                	aam    0x40
c001c2c9:	d5 39                	aad    0x39
c001c2cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c2cf:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001c2d3:	d4 40                	aam    0x40
c001c2d5:	d5 39                	aad    0x39
c001c2d7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c2db:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001c2df:	d4 40                	aam    0x40
c001c2e1:	d5 39                	aad    0x39
c001c2e3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c2e7:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001c2eb:	d4 40                	aam    0x40
c001c2ed:	d5 39                	aad    0x39
c001c2ef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c2f3:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001c2f7:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001c2fb:	3c 56                	cmp    al,0x56
c001c2fd:	74 45                	je     c001c344 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001c2ff:	d4 40                	aam    0x40
c001c301:	d5 39                	aad    0x39
c001c303:	8d 48 d0             	lea    ecx,[eax-0x30]
c001c306:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001c30a:	0f b6 c9             	movzx  ecx,cl
c001c30d:	c1 e1 04             	shl    ecx,0x4
c001c310:	d4 40                	aam    0x40
c001c312:	d5 39                	aad    0x39
c001c314:	8d 58 d0             	lea    ebx,[eax-0x30]
c001c317:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001c31b:	0f b6 db             	movzx  ebx,bl
c001c31e:	09 cb                	or     ebx,ecx
c001c320:	c1 e3 04             	shl    ebx,0x4
c001c323:	d4 40                	aam    0x40
c001c325:	d5 39                	aad    0x39
c001c327:	8d 48 d0             	lea    ecx,[eax-0x30]
c001c32a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001c32e:	0f b6 c9             	movzx  ecx,cl
c001c331:	09 cb                	or     ebx,ecx
c001c333:	c1 e3 04             	shl    ebx,0x4
c001c336:	89 d9                	mov    ecx,ebx
c001c338:	d4 40                	aam    0x40
c001c33a:	d5 39                	aad    0x39
c001c33c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001c33f:	0f b6 db             	movzx  ebx,bl
c001c342:	09 cb                	or     ebx,ecx
c001c344:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001c348:	80 f9 44             	cmp    cl,0x44
c001c34b:	74 47                	je     c001c394 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001c34d:	88 c8                	mov    al,cl
c001c34f:	d4 40                	aam    0x40
c001c351:	d5 39                	aad    0x39
c001c353:	83 e8 30             	sub    eax,0x30
c001c356:	0f b6 e8             	movzx  ebp,al
c001c359:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001c35d:	c1 e5 04             	shl    ebp,0x4
c001c360:	d4 40                	aam    0x40
c001c362:	d5 39                	aad    0x39
c001c364:	83 e8 30             	sub    eax,0x30
c001c367:	0f b6 f0             	movzx  esi,al
c001c36a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001c36e:	09 ee                	or     esi,ebp
c001c370:	c1 e6 04             	shl    esi,0x4
c001c373:	d4 40                	aam    0x40
c001c375:	d5 39                	aad    0x39
c001c377:	83 e8 30             	sub    eax,0x30
c001c37a:	0f b6 e8             	movzx  ebp,al
c001c37d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001c381:	09 ee                	or     esi,ebp
c001c383:	c1 e6 04             	shl    esi,0x4
c001c386:	89 f5                	mov    ebp,esi
c001c388:	d4 40                	aam    0x40
c001c38a:	d5 39                	aad    0x39
c001c38c:	83 e8 30             	sub    eax,0x30
c001c38f:	0f b6 f0             	movzx  esi,al
c001c392:	09 ee                	or     esi,ebp
c001c394:	83 c7 10             	add    edi,0x10
c001c397:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001c39b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001c39e:	3c 0a                	cmp    al,0xa
c001c3a0:	74 09                	je     c001c3ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001c3a2:	45                   	inc    ebp
c001c3a3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001c3a6:	75 16                	jne    c001c3be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001c3a8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c3ab:	3c 0a                	cmp    al,0xa
c001c3ad:	0f 94 c0             	sete   al
c001c3b0:	0f b6 c0             	movzx  eax,al
c001c3b3:	01 c7                	add    edi,eax
c001c3b5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001c3ba:	75 0c                	jne    c001c3c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001c3bc:	eb 15                	jmp    c001c3d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001c3be:	47                   	inc    edi
c001c3bf:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001c3c2:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001c3c6:	eb d3                	jmp    c001c39b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001c3c8:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001c3cd:	0f 85 e8 fe ff ff    	jne    c001c2bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001c3d3:	80 f9 44             	cmp    cl,0x44
c001c3d6:	74 0b                	je     c001c3e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001c3d8:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001c3dd:	0f 85 d8 fe ff ff    	jne    c001c2bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001c3e3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c3e7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001c3eb:	c1 e1 04             	shl    ecx,0x4
c001c3ee:	83 e8 30             	sub    eax,0x30
c001c3f1:	09 c8                	or     eax,ecx
c001c3f3:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001c3f7:	0f 85 be fe ff ff    	jne    c001c2bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001c3fd:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001c401:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c405:	c1 e1 04             	shl    ecx,0x4
c001c408:	83 e8 30             	sub    eax,0x30
c001c40b:	09 c8                	or     eax,ecx
c001c40d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001c411:	0f 85 a4 fe ff ff    	jne    c001c2bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001c417:	50                   	push   eax
c001c418:	50                   	push   eax
c001c419:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c41d:	50                   	push   eax
c001c41e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001c425:	e8 3a 41 fe ff       	call   c0000564 <strcpy>
c001c42a:	83 c4 10             	add    esp,0x10
c001c42d:	eb 15                	jmp    c001c444 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001c42f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001c436:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001c441:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001c444:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001c44b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c451:	5b                   	pop    ebx
c001c452:	5e                   	pop    esi
c001c453:	5f                   	pop    edi
c001c454:	5d                   	pop    ebp
c001c455:	c3                   	ret    

c001c456 <PCI::checkBus(unsigned char)>:
c001c456:	56                   	push   esi
c001c457:	53                   	push   ebx
c001c458:	31 db                	xor    ebx,ebx
c001c45a:	51                   	push   ecx
c001c45b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c460:	52                   	push   edx
c001c461:	53                   	push   ebx
c001c462:	43                   	inc    ebx
c001c463:	56                   	push   esi
c001c464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c468:	e8 f3 02 00 00       	call   c001c760 <PCI::checkDevice(unsigned char, unsigned char)>
c001c46d:	83 c4 10             	add    esp,0x10
c001c470:	83 fb 20             	cmp    ebx,0x20
c001c473:	75 eb                	jne    c001c460 <PCI::checkBus(unsigned char)+0xa>
c001c475:	58                   	pop    eax
c001c476:	5b                   	pop    ebx
c001c477:	5e                   	pop    esi
c001c478:	c3                   	ret    
c001c479:	90                   	nop

c001c47a <PCI::foundDevice(PCIDeviceInfo)>:
c001c47a:	55                   	push   ebp
c001c47b:	57                   	push   edi
c001c47c:	56                   	push   esi
c001c47d:	53                   	push   ebx
c001c47e:	83 ec 1c             	sub    esp,0x1c
c001c481:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c485:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c48b:	0f 84 52 01 00 00    	je     c001c5e3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001c491:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c495:	66 81 f9 06 04       	cmp    cx,0x406
c001c49a:	75 2c                	jne    c001c4c8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c49c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c4a1:	50                   	push   eax
c001c4a2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c4a7:	50                   	push   eax
c001c4a8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c4ad:	50                   	push   eax
c001c4ae:	56                   	push   esi
c001c4af:	e8 b4 fb ff ff       	call   c001c068 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c4b4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4b8:	0f b6 c0             	movzx  eax,al
c001c4bb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c4bf:	83 c4 2c             	add    esp,0x2c
c001c4c2:	5b                   	pop    ebx
c001c4c3:	5e                   	pop    esi
c001c4c4:	5f                   	pop    edi
c001c4c5:	5d                   	pop    ebp
c001c4c6:	eb 8e                	jmp    c001c456 <PCI::checkBus(unsigned char)>
c001c4c8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4cc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4d6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4da:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4de:	88 d3                	mov    bl,dl
c001c4e0:	85 c0                	test   eax,eax
c001c4e2:	74 33                	je     c001c517 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4e7:	85 d2                	test   edx,edx
c001c4e9:	74 28                	je     c001c513 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4eb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4f1:	31 ef                	xor    edi,ebp
c001c4f3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4f9:	75 18                	jne    c001c513 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4ff:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c505:	75 0c                	jne    c001c513 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c507:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c50d:	0f 84 d0 00 00 00    	je     c001c5e3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001c513:	8b 00                	mov    eax,DWORD PTR [eax]
c001c515:	eb c9                	jmp    c001c4e0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c517:	66 81 f9 01 06       	cmp    cx,0x601
c001c51c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c520:	75 19                	jne    c001c53b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001c522:	83 ec 0c             	sub    esp,0xc
c001c525:	68 64 01 00 00       	push   0x164
c001c52a:	e8 50 d2 fe ff       	call   c000977f <malloc>
c001c52f:	89 c5                	mov    ebp,eax
c001c531:	89 04 24             	mov    DWORD PTR [esp],eax
c001c534:	e8 53 0e 00 00       	call   c001d38c <SATABus::SATABus()>
c001c539:	eb 1e                	jmp    c001c559 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001c53b:	66 81 f9 01 01       	cmp    cx,0x101
c001c540:	75 60                	jne    c001c5a2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001c542:	83 ec 0c             	sub    esp,0xc
c001c545:	68 70 02 00 00       	push   0x270
c001c54a:	e8 30 d2 fe ff       	call   c000977f <malloc>
c001c54f:	89 c5                	mov    ebp,eax
c001c551:	89 04 24             	mov    DWORD PTR [esp],eax
c001c554:	e8 cb 02 00 00       	call   c001c824 <IDE::IDE()>
c001c559:	58                   	pop    eax
c001c55a:	5a                   	pop    edx
c001c55b:	55                   	push   ebp
c001c55c:	56                   	push   esi
c001c55d:	e8 dc 15 ff ff       	call   c000db3e <Device::addChild(Device*)>
c001c562:	83 ec 1c             	sub    esp,0x1c
c001c565:	b9 09 00 00 00       	mov    ecx,0x9
c001c56a:	fc                   	cld    
c001c56b:	89 e7                	mov    edi,esp
c001c56d:	89 de                	mov    esi,ebx
c001c56f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c571:	55                   	push   ebp
c001c572:	e8 0d 15 ff ff       	call   c000da84 <Device::preOpenPCI(PCIDeviceInfo)>
c001c577:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c57a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c57e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c586:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c58e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c596:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c599:	83 c4 4c             	add    esp,0x4c
c001c59c:	5b                   	pop    ebx
c001c59d:	5e                   	pop    esi
c001c59e:	5f                   	pop    edi
c001c59f:	5d                   	pop    ebp
c001c5a0:	ff e0                	jmp    eax
c001c5a2:	83 ec 0c             	sub    esp,0xc
c001c5a5:	68 58 01 00 00       	push   0x158
c001c5aa:	e8 d0 d1 fe ff       	call   c000977f <malloc>
c001c5af:	89 c5                	mov    ebp,eax
c001c5b1:	58                   	pop    eax
c001c5b2:	5a                   	pop    edx
c001c5b3:	68 f6 31 02 c0       	push   0xc00231f6
c001c5b8:	55                   	push   ebp
c001c5b9:	e8 8a 18 ff ff       	call   c000de48 <DriverlessDevice::DriverlessDevice(char const*)>
c001c5be:	59                   	pop    ecx
c001c5bf:	5f                   	pop    edi
c001c5c0:	55                   	push   ebp
c001c5c1:	56                   	push   esi
c001c5c2:	e8 77 15 ff ff       	call   c000db3e <Device::addChild(Device*)>
c001c5c7:	b9 09 00 00 00       	mov    ecx,0x9
c001c5cc:	fc                   	cld    
c001c5cd:	89 df                	mov    edi,ebx
c001c5cf:	89 de                	mov    esi,ebx
c001c5d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5d3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5d7:	83 c4 2c             	add    esp,0x2c
c001c5da:	5b                   	pop    ebx
c001c5db:	5e                   	pop    esi
c001c5dc:	5f                   	pop    edi
c001c5dd:	5d                   	pop    ebp
c001c5de:	e9 a1 14 ff ff       	jmp    c000da84 <Device::preOpenPCI(PCIDeviceInfo)>
c001c5e3:	83 c4 1c             	add    esp,0x1c
c001c5e6:	5b                   	pop    ebx
c001c5e7:	5e                   	pop    esi
c001c5e8:	5f                   	pop    edi
c001c5e9:	5d                   	pop    ebp
c001c5ea:	c3                   	ret    
c001c5eb:	90                   	nop

c001c5ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5ec:	55                   	push   ebp
c001c5ed:	57                   	push   edi
c001c5ee:	56                   	push   esi
c001c5ef:	53                   	push   ebx
c001c5f0:	83 ec 68             	sub    esp,0x68
c001c5f3:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c5f7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c5fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c602:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c609:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001c60e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c612:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c619:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001c61e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c622:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c627:	6a 0c                	push   0xc
c001c629:	57                   	push   edi
c001c62a:	53                   	push   ebx
c001c62b:	56                   	push   esi
c001c62c:	55                   	push   ebp
c001c62d:	e8 88 f8 ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c632:	83 c4 20             	add    esp,0x20
c001c635:	57                   	push   edi
c001c636:	53                   	push   ebx
c001c637:	56                   	push   esi
c001c638:	55                   	push   ebp
c001c639:	e8 70 f9 ff ff       	call   c001bfae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c63e:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001c643:	57                   	push   edi
c001c644:	53                   	push   ebx
c001c645:	56                   	push   esi
c001c646:	55                   	push   ebp
c001c647:	e8 f8 f9 ff ff       	call   c001c044 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c64c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c650:	83 c4 14             	add    esp,0x14
c001c653:	6a 3c                	push   0x3c
c001c655:	57                   	push   edi
c001c656:	53                   	push   ebx
c001c657:	56                   	push   esi
c001c658:	55                   	push   ebp
c001c659:	e8 5c f8 ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c65e:	0f b6 c4             	movzx  eax,ah
c001c661:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c665:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001c669:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c66d:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c001c672:	8b 90 e4 01 00 00    	mov    edx,DWORD PTR [eax+0x1e4]
c001c678:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c67e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c682:	83 c4 20             	add    esp,0x20
c001c685:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c68a:	74 30                	je     c001c6bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c68c:	31 c0                	xor    eax,eax
c001c68e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c692:	7e 28                	jle    c001c6bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c694:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c69c:	39 cb                	cmp    ebx,ecx
c001c69e:	75 19                	jne    c001c6b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c6a0:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c6a8:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001c6ac:	75 0b                	jne    c001c6b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c6ae:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c6b5:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001c6b9:	40                   	inc    eax
c001c6ba:	eb d2                	jmp    c001c68e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c6bc:	31 d2                	xor    edx,edx
c001c6be:	83 ec 0c             	sub    esp,0xc
c001c6c1:	57                   	push   edi
c001c6c2:	53                   	push   ebx
c001c6c3:	56                   	push   esi
c001c6c4:	52                   	push   edx
c001c6c5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001c6c9:	55                   	push   ebp
c001c6ca:	e8 c1 f9 ff ff       	call   c001c090 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c6cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c6d3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c6d7:	42                   	inc    edx
c001c6d8:	83 c4 20             	add    esp,0x20
c001c6db:	83 fa 06             	cmp    edx,0x6
c001c6de:	75 de                	jne    c001c6be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c6e0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c6e5:	83 ec 0c             	sub    esp,0xc
c001c6e8:	86 e0                	xchg   al,ah
c001c6ea:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c6ef:	6a 02                	push   0x2
c001c6f1:	57                   	push   edi
c001c6f2:	53                   	push   ebx
c001c6f3:	56                   	push   esi
c001c6f4:	55                   	push   ebp
c001c6f5:	e8 c0 f7 ff ff       	call   c001beba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c6fa:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c6ff:	83 c4 20             	add    esp,0x20
c001c702:	57                   	push   edi
c001c703:	53                   	push   ebx
c001c704:	56                   	push   esi
c001c705:	55                   	push   ebp
c001c706:	e8 ed f8 ff ff       	call   c001bff8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c70b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c70f:	57                   	push   edi
c001c710:	53                   	push   ebx
c001c711:	56                   	push   esi
c001c712:	55                   	push   ebp
c001c713:	e8 4a f8 ff ff       	call   c001bf62 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c718:	b9 09 00 00 00       	mov    ecx,0x9
c001c71d:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c722:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001c726:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c72a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c72e:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c732:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c736:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c73a:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c73e:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c742:	83 ec 0c             	sub    esp,0xc
c001c745:	fc                   	cld    
c001c746:	89 e7                	mov    edi,esp
c001c748:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c74c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c74e:	55                   	push   ebp
c001c74f:	e8 26 fd ff ff       	call   c001c47a <PCI::foundDevice(PCIDeviceInfo)>
c001c754:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c75a:	5b                   	pop    ebx
c001c75b:	5e                   	pop    esi
c001c75c:	5f                   	pop    edi
c001c75d:	5d                   	pop    ebp
c001c75e:	c3                   	ret    
c001c75f:	90                   	nop

c001c760 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c760:	55                   	push   ebp
c001c761:	57                   	push   edi
c001c762:	56                   	push   esi
c001c763:	53                   	push   ebx
c001c764:	83 ec 0c             	sub    esp,0xc
c001c767:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c76b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c770:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c775:	6a 00                	push   0x0
c001c777:	56                   	push   esi
c001c778:	57                   	push   edi
c001c779:	55                   	push   ebp
c001c77a:	e8 e3 f7 ff ff       	call   c001bf62 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c77f:	6a 00                	push   0x0
c001c781:	56                   	push   esi
c001c782:	57                   	push   edi
c001c783:	55                   	push   ebp
c001c784:	e8 63 fe ff ff       	call   c001c5ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c789:	83 c4 20             	add    esp,0x20
c001c78c:	6a 00                	push   0x0
c001c78e:	56                   	push   esi
c001c78f:	57                   	push   edi
c001c790:	55                   	push   ebp
c001c791:	e8 f0 f7 ff ff       	call   c001bf86 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c796:	83 c4 10             	add    esp,0x10
c001c799:	84 c0                	test   al,al
c001c79b:	79 27                	jns    c001c7c4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c79d:	bb 01 00 00 00       	mov    ebx,0x1
c001c7a2:	53                   	push   ebx
c001c7a3:	56                   	push   esi
c001c7a4:	57                   	push   edi
c001c7a5:	55                   	push   ebp
c001c7a6:	e8 b7 f7 ff ff       	call   c001bf62 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7ab:	83 c4 10             	add    esp,0x10
c001c7ae:	66 40                	inc    ax
c001c7b0:	74 0c                	je     c001c7be <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c7b2:	53                   	push   ebx
c001c7b3:	56                   	push   esi
c001c7b4:	57                   	push   edi
c001c7b5:	55                   	push   ebp
c001c7b6:	e8 31 fe ff ff       	call   c001c5ec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7bb:	83 c4 10             	add    esp,0x10
c001c7be:	43                   	inc    ebx
c001c7bf:	83 fb 08             	cmp    ebx,0x8
c001c7c2:	75 de                	jne    c001c7a2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c7c4:	83 c4 0c             	add    esp,0xc
c001c7c7:	5b                   	pop    ebx
c001c7c8:	5e                   	pop    esi
c001c7c9:	5f                   	pop    edi
c001c7ca:	5d                   	pop    ebp
c001c7cb:	c3                   	ret    

c001c7cc <PCI::detect()>:
c001c7cc:	56                   	push   esi
c001c7cd:	53                   	push   ebx
c001c7ce:	53                   	push   ebx
c001c7cf:	31 db                	xor    ebx,ebx
c001c7d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7d5:	6a 00                	push   0x0
c001c7d7:	6a 00                	push   0x0
c001c7d9:	6a 00                	push   0x0
c001c7db:	56                   	push   esi
c001c7dc:	e8 a5 f7 ff ff       	call   c001bf86 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7e1:	83 c4 10             	add    esp,0x10
c001c7e4:	a8 80                	test   al,0x80
c001c7e6:	75 21                	jne    c001c809 <PCI::detect()+0x3d>
c001c7e8:	51                   	push   ecx
c001c7e9:	51                   	push   ecx
c001c7ea:	6a 00                	push   0x0
c001c7ec:	56                   	push   esi
c001c7ed:	e8 64 fc ff ff       	call   c001c456 <PCI::checkBus(unsigned char)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	eb 24                	jmp    c001c81b <PCI::detect()+0x4f>
c001c7f7:	52                   	push   edx
c001c7f8:	52                   	push   edx
c001c7f9:	53                   	push   ebx
c001c7fa:	43                   	inc    ebx
c001c7fb:	56                   	push   esi
c001c7fc:	e8 55 fc ff ff       	call   c001c456 <PCI::checkBus(unsigned char)>
c001c801:	83 c4 10             	add    esp,0x10
c001c804:	83 fb 08             	cmp    ebx,0x8
c001c807:	74 12                	je     c001c81b <PCI::detect()+0x4f>
c001c809:	53                   	push   ebx
c001c80a:	6a 00                	push   0x0
c001c80c:	6a 00                	push   0x0
c001c80e:	56                   	push   esi
c001c80f:	e8 4e f7 ff ff       	call   c001bf62 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c814:	83 c4 10             	add    esp,0x10
c001c817:	66 40                	inc    ax
c001c819:	74 dc                	je     c001c7f7 <PCI::detect()+0x2b>
c001c81b:	58                   	pop    eax
c001c81c:	5b                   	pop    ebx
c001c81d:	5e                   	pop    esi
c001c81e:	c3                   	ret    
c001c81f:	90                   	nop

c001c820 <IDE::close(int, int, void*)>:
c001c820:	83 c8 ff             	or     eax,0xffffffff
c001c823:	c3                   	ret    

c001c824 <IDE::IDE()>:
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82b:	83 ec 08             	sub    esp,0x8
c001c82e:	68 3c 32 02 c0       	push   0xc002323c
c001c833:	50                   	push   eax
c001c834:	e8 b3 16 ff ff       	call   c000deec <HardDiskController::HardDiskController(char const*)>
c001c839:	83 c4 10             	add    esp,0x10
c001c83c:	ba e8 32 02 c0       	mov    edx,0xc00232e8
c001c841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c845:	89 10                	mov    DWORD PTR [eax],edx
c001c847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c852:	90                   	nop
c001c853:	83 c4 0c             	add    esp,0xc
c001c856:	c3                   	ret    
c001c857:	90                   	nop

c001c858 <IDE::prepareInterrupt(unsigned char)>:
c001c858:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c85d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c861:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c869:	c3                   	ret    

c001c86a <selectDrive(unsigned char, unsigned char)>:
c001c86a:	c3                   	ret    
c001c86b:	90                   	nop

c001c86c <IDE::getBase(unsigned char)>:
c001c86c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c875:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c87d:	c3                   	ret    

c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c87e:	55                   	push   ebp
c001c87f:	57                   	push   edi
c001c880:	56                   	push   esi
c001c881:	53                   	push   ebx
c001c882:	83 ec 1c             	sub    esp,0x1c
c001c885:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c889:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c88d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c890:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c894:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c898:	80 f9 03             	cmp    cl,0x3
c001c89b:	77 51                	ja     c001c8ee <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c89d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8a1:	0f b6 f2             	movzx  esi,dl
c001c8a4:	0f b6 db             	movzx  ebx,bl
c001c8a7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8aa:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c8ae:	83 ca 80             	or     edx,0xffffff80
c001c8b1:	0f b6 d2             	movzx  edx,dl
c001c8b4:	52                   	push   edx
c001c8b5:	6a 0c                	push   0xc
c001c8b7:	56                   	push   esi
c001c8b8:	57                   	push   edi
c001c8b9:	e8 c0 ff ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8be:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c8c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c8c7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c8cb:	ee                   	out    dx,al
c001c8cc:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c8d1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c8d5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c8d9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c8dd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c8e5:	83 c4 2c             	add    esp,0x2c
c001c8e8:	5b                   	pop    ebx
c001c8e9:	5e                   	pop    esi
c001c8ea:	5f                   	pop    edi
c001c8eb:	5d                   	pop    ebp
c001c8ec:	eb 90                	jmp    c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ee:	80 fb 07             	cmp    bl,0x7
c001c8f1:	77 12                	ja     c001c905 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c8f3:	0f b6 d2             	movzx  edx,dl
c001c8f6:	0f b6 db             	movzx  ebx,bl
c001c8f9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c901:	89 da                	mov    edx,ebx
c001c903:	eb 2f                	jmp    c001c934 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c905:	80 fb 0d             	cmp    bl,0xd
c001c908:	77 13                	ja     c001c91d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c90a:	0f b6 d2             	movzx  edx,dl
c001c90d:	0f b6 db             	movzx  ebx,bl
c001c910:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c917:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c91b:	eb 17                	jmp    c001c934 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c91d:	80 fb 15             	cmp    bl,0x15
c001c920:	77 13                	ja     c001c935 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c922:	0f b6 d2             	movzx  edx,dl
c001c925:	0f b6 db             	movzx  ebx,bl
c001c928:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c930:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c934:	ee                   	out    dx,al
c001c935:	83 c4 1c             	add    esp,0x1c
c001c938:	5b                   	pop    ebx
c001c939:	5e                   	pop    esi
c001c93a:	5f                   	pop    edi
c001c93b:	5d                   	pop    ebp
c001c93c:	c3                   	ret    
c001c93d:	90                   	nop

c001c93e <IDE::read(unsigned char, unsigned char)>:
c001c93e:	55                   	push   ebp
c001c93f:	57                   	push   edi
c001c940:	56                   	push   esi
c001c941:	53                   	push   ebx
c001c942:	83 ec 1c             	sub    esp,0x1c
c001c945:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c949:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c94d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c950:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c954:	3c 03                	cmp    al,0x3
c001c956:	77 43                	ja     c001c99b <IDE::read(unsigned char, unsigned char)+0x5d>
c001c958:	0f b6 f2             	movzx  esi,dl
c001c95b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c95e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c962:	83 c8 80             	or     eax,0xffffff80
c001c965:	0f b6 c0             	movzx  eax,al
c001c968:	50                   	push   eax
c001c969:	6a 0c                	push   0xc
c001c96b:	56                   	push   esi
c001c96c:	57                   	push   edi
c001c96d:	e8 0c ff ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c972:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c977:	0f b6 c3             	movzx  eax,bl
c001c97a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c97e:	ec                   	in     al,dx
c001c97f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c983:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c988:	52                   	push   edx
c001c989:	6a 0c                	push   0xc
c001c98b:	56                   	push   esi
c001c98c:	57                   	push   edi
c001c98d:	e8 ec fe ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c992:	83 c4 20             	add    esp,0x20
c001c995:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c999:	eb 49                	jmp    c001c9e4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c99b:	80 fb 07             	cmp    bl,0x7
c001c99e:	77 12                	ja     c001c9b2 <IDE::read(unsigned char, unsigned char)+0x74>
c001c9a0:	0f b6 d2             	movzx  edx,dl
c001c9a3:	0f b6 c3             	movzx  eax,bl
c001c9a6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c9ae:	89 c2                	mov    edx,eax
c001c9b0:	eb 31                	jmp    c001c9e3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c9b2:	80 fb 0d             	cmp    bl,0xd
c001c9b5:	77 13                	ja     c001c9ca <IDE::read(unsigned char, unsigned char)+0x8c>
c001c9b7:	0f b6 d2             	movzx  edx,dl
c001c9ba:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c9c1:	0f b6 d3             	movzx  edx,bl
c001c9c4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c9c8:	eb 19                	jmp    c001c9e3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c9ca:	31 c0                	xor    eax,eax
c001c9cc:	80 fb 15             	cmp    bl,0x15
c001c9cf:	77 13                	ja     c001c9e4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9d1:	0f b6 d2             	movzx  edx,dl
c001c9d4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c9dc:	0f b6 d3             	movzx  edx,bl
c001c9df:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c9e3:	ec                   	in     al,dx
c001c9e4:	83 c4 1c             	add    esp,0x1c
c001c9e7:	5b                   	pop    ebx
c001c9e8:	5e                   	pop    esi
c001c9e9:	5f                   	pop    edi
c001c9ea:	5d                   	pop    ebp
c001c9eb:	c3                   	ret    

c001c9ec <IDE::waitInterrupt(unsigned char)>:
c001c9ec:	55                   	push   ebp
c001c9ed:	57                   	push   edi
c001c9ee:	56                   	push   esi
c001c9ef:	53                   	push   ebx
c001c9f0:	31 db                	xor    ebx,ebx
c001c9f2:	83 ec 0c             	sub    esp,0xc
c001c9f5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c9f9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c9fe:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ca06:	89 e8                	mov    eax,ebp
c001ca08:	84 c0                	test   al,al
c001ca0a:	75 30                	jne    c001ca3c <IDE::waitInterrupt(unsigned char)+0x50>
c001ca0c:	50                   	push   eax
c001ca0d:	6a 0c                	push   0xc
c001ca0f:	56                   	push   esi
c001ca10:	57                   	push   edi
c001ca11:	e8 28 ff ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001ca16:	83 c4 10             	add    esp,0x10
c001ca19:	a8 01                	test   al,0x1
c001ca1b:	75 27                	jne    c001ca44 <IDE::waitInterrupt(unsigned char)+0x58>
c001ca1d:	f6 c3 04             	test   bl,0x4
c001ca20:	75 12                	jne    c001ca34 <IDE::waitInterrupt(unsigned char)+0x48>
c001ca22:	83 fb 32             	cmp    ebx,0x32
c001ca25:	7e 0d                	jle    c001ca34 <IDE::waitInterrupt(unsigned char)+0x48>
c001ca27:	83 ec 0c             	sub    esp,0xc
c001ca2a:	6a 64                	push   0x64
c001ca2c:	e8 ff 93 ff ff       	call   c0015e30 <milliTenthSleep(unsigned int)>
c001ca31:	83 c4 10             	add    esp,0x10
c001ca34:	83 fb 3c             	cmp    ebx,0x3c
c001ca37:	74 0b                	je     c001ca44 <IDE::waitInterrupt(unsigned char)+0x58>
c001ca39:	43                   	inc    ebx
c001ca3a:	eb c2                	jmp    c001c9fe <IDE::waitInterrupt(unsigned char)+0x12>
c001ca3c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ca44:	83 c4 0c             	add    esp,0xc
c001ca47:	89 e8                	mov    eax,ebp
c001ca49:	5b                   	pop    ebx
c001ca4a:	5e                   	pop    esi
c001ca4b:	5f                   	pop    edi
c001ca4c:	5d                   	pop    ebp
c001ca4d:	c3                   	ret    

c001ca4e <ideChannel0IRQHandler(regs*, void*)>:
c001ca4e:	83 ec 10             	sub    esp,0x10
c001ca51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca55:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ca5c:	6a 07                	push   0x7
c001ca5e:	6a 00                	push   0x0
c001ca60:	50                   	push   eax
c001ca61:	e8 d8 fe ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001ca66:	83 c4 1c             	add    esp,0x1c
c001ca69:	c3                   	ret    

c001ca6a <ideChannel1IRQHandler(regs*, void*)>:
c001ca6a:	83 ec 10             	sub    esp,0x10
c001ca6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca71:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ca78:	6a 07                	push   0x7
c001ca7a:	6a 01                	push   0x1
c001ca7c:	50                   	push   eax
c001ca7d:	e8 bc fe ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001ca82:	83 c4 1c             	add    esp,0x1c
c001ca85:	c3                   	ret    

c001ca86 <IDE::enableIRQs(unsigned char, bool)>:
c001ca86:	57                   	push   edi
c001ca87:	56                   	push   esi
c001ca88:	be 04 00 00 00       	mov    esi,0x4
c001ca8d:	53                   	push   ebx
c001ca8e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ca93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca97:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ca9c:	0f 94 c0             	sete   al
c001ca9f:	d1 e0                	shl    eax,1
c001caa1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001caa8:	0f b6 c0             	movzx  eax,al
c001caab:	50                   	push   eax
c001caac:	6a 0c                	push   0xc
c001caae:	57                   	push   edi
c001caaf:	53                   	push   ebx
c001cab0:	e8 c9 fd ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cab5:	83 c4 10             	add    esp,0x10
c001cab8:	50                   	push   eax
c001cab9:	6a 0c                	push   0xc
c001cabb:	57                   	push   edi
c001cabc:	53                   	push   ebx
c001cabd:	e8 7c fe ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001cac2:	83 c4 10             	add    esp,0x10
c001cac5:	4e                   	dec    esi
c001cac6:	75 f0                	jne    c001cab8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cac8:	5b                   	pop    ebx
c001cac9:	5e                   	pop    esi
c001caca:	5f                   	pop    edi
c001cacb:	c3                   	ret    

c001cacc <IDE::open(int, int, void*)>:
c001cacc:	55                   	push   ebp
c001cacd:	57                   	push   edi
c001cace:	56                   	push   esi
c001cacf:	53                   	push   ebx
c001cad0:	83 ec 1c             	sub    esp,0x1c
c001cad3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cad7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cae0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cae9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001caf0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001caf7:	0f 85 cb 02 00 00    	jne    c001cdc8 <IDE::open(int, int, void*)+0x2fc>
c001cafd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb03:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001cb07:	83 e0 7f             	and    eax,0x7f
c001cb0a:	3c 05                	cmp    al,0x5
c001cb0c:	74 04                	je     c001cb12 <IDE::open(int, int, void*)+0x46>
c001cb0e:	3c 0f                	cmp    al,0xf
c001cb10:	75 32                	jne    c001cb44 <IDE::open(int, int, void*)+0x78>
c001cb12:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb18:	83 e0 fc             	and    eax,0xfffffffc
c001cb1b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb22:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb28:	83 e0 fc             	and    eax,0xfffffffc
c001cb2b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb32:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb38:	83 e0 fc             	and    eax,0xfffffffc
c001cb3b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb42:	eb 14                	jmp    c001cb58 <IDE::open(int, int, void*)+0x8c>
c001cb44:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cb4e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cb58:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cb5f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cb66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb6a:	89 c6                	mov    esi,eax
c001cb6c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cb71:	c1 e6 10             	shl    esi,0x10
c001cb74:	89 e8                	mov    eax,ebp
c001cb76:	89 fa                	mov    edx,edi
c001cb78:	c1 e0 0b             	shl    eax,0xb
c001cb7b:	09 f0                	or     eax,esi
c001cb7d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cb84:	c1 e6 08             	shl    esi,0x8
c001cb87:	09 c6                	or     esi,eax
c001cb89:	89 f0                	mov    eax,esi
c001cb8b:	0d 08 00 00 80       	or     eax,0x80000008
c001cb90:	ef                   	out    dx,eax
c001cb91:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cb96:	89 ca                	mov    edx,ecx
c001cb98:	ed                   	in     eax,dx
c001cb99:	c1 e8 10             	shr    eax,0x10
c001cb9c:	3d ff ff 00 00       	cmp    eax,0xffff
c001cba1:	0f 84 f5 00 00 00    	je     c001cc9c <IDE::open(int, int, void*)+0x1d0>
c001cba7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cbad:	89 fa                	mov    edx,edi
c001cbaf:	89 f0                	mov    eax,esi
c001cbb1:	ef                   	out    dx,eax
c001cbb2:	b0 fe                	mov    al,0xfe
c001cbb4:	89 ca                	mov    edx,ecx
c001cbb6:	ee                   	out    dx,al
c001cbb7:	89 f0                	mov    eax,esi
c001cbb9:	89 fa                	mov    edx,edi
c001cbbb:	ef                   	out    dx,eax
c001cbbc:	89 ca                	mov    edx,ecx
c001cbbe:	ed                   	in     eax,dx
c001cbbf:	3c fe                	cmp    al,0xfe
c001cbc1:	0f 85 a9 00 00 00    	jne    c001cc70 <IDE::open(int, int, void*)+0x1a4>
c001cbc7:	8b 15 a8 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fa8
c001cbcd:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cbd4:	74 33                	je     c001cc09 <IDE::open(int, int, void*)+0x13d>
c001cbd6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cbdc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cbe0:	40                   	inc    eax
c001cbe1:	83 ec 0c             	sub    esp,0xc
c001cbe4:	0f b6 c0             	movzx  eax,al
c001cbe7:	50                   	push   eax
c001cbe8:	55                   	push   ebp
c001cbe9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbed:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cbf3:	51                   	push   ecx
c001cbf4:	e8 1b 3d ff ff       	call   c0010914 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cbf9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cbfe:	83 c4 1c             	add    esp,0x1c
c001cc01:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc07:	eb 0a                	jmp    c001cc13 <IDE::open(int, int, void*)+0x147>
c001cc09:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc13:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc1a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc21:	c1 e1 10             	shl    ecx,0x10
c001cc24:	c1 e0 08             	shl    eax,0x8
c001cc27:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc2c:	09 c1                	or     ecx,eax
c001cc2e:	89 fa                	mov    edx,edi
c001cc30:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc37:	c1 e0 0b             	shl    eax,0xb
c001cc3a:	09 c1                	or     ecx,eax
c001cc3c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cc42:	89 c8                	mov    eax,ecx
c001cc44:	ef                   	out    dx,eax
c001cc45:	be fc 0c 00 00       	mov    esi,0xcfc
c001cc4a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cc50:	89 f2                	mov    edx,esi
c001cc52:	ee                   	out    dx,al
c001cc53:	89 c8                	mov    eax,ecx
c001cc55:	89 fa                	mov    edx,edi
c001cc57:	ef                   	out    dx,eax
c001cc58:	89 f2                	mov    edx,esi
c001cc5a:	ed                   	in     eax,dx
c001cc5b:	0f b6 c0             	movzx  eax,al
c001cc5e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001cc64:	74 46                	je     c001ccac <IDE::open(int, int, void*)+0x1e0>
c001cc66:	83 ec 0c             	sub    esp,0xc
c001cc69:	68 54 32 02 c0       	push   0xc0023254
c001cc6e:	eb 34                	jmp    c001cca4 <IDE::open(int, int, void*)+0x1d8>
c001cc70:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cc79:	75 17                	jne    c001cc92 <IDE::open(int, int, void*)+0x1c6>
c001cc7b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001cc80:	74 07                	je     c001cc89 <IDE::open(int, int, void*)+0x1bd>
c001cc82:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001cc87:	75 09                	jne    c001cc92 <IDE::open(int, int, void*)+0x1c6>
c001cc89:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cc90:	eb 1a                	jmp    c001ccac <IDE::open(int, int, void*)+0x1e0>
c001cc92:	83 ec 0c             	sub    esp,0xc
c001cc95:	68 5c 32 02 c0       	push   0xc002325c
c001cc9a:	eb 08                	jmp    c001cca4 <IDE::open(int, int, void*)+0x1d8>
c001cc9c:	83 ec 0c             	sub    esp,0xc
c001cc9f:	68 8d 32 02 c0       	push   0xc002328d
c001cca4:	e8 5a 59 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001cca9:	83 c4 10             	add    esp,0x10
c001ccac:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ccb3:	79 1a                	jns    c001cccf <IDE::open(int, int, void*)+0x203>
c001ccb5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ccbb:	83 e0 fc             	and    eax,0xfffffffc
c001ccbe:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ccc5:	83 c0 08             	add    eax,0x8
c001ccc8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cccf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ccd5:	89 c2                	mov    edx,eax
c001ccd7:	83 e2 0f             	and    edx,0xf
c001ccda:	66 83 fa 08          	cmp    dx,0x8
c001ccde:	75 0a                	jne    c001ccea <IDE::open(int, int, void*)+0x21e>
c001cce0:	83 e8 02             	sub    eax,0x2
c001cce3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ccea:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ccf0:	89 c2                	mov    edx,eax
c001ccf2:	83 e2 0f             	and    edx,0xf
c001ccf5:	66 83 fa 08          	cmp    dx,0x8
c001ccf9:	75 0a                	jne    c001cd05 <IDE::open(int, int, void*)+0x239>
c001ccfb:	83 e8 02             	sub    eax,0x2
c001ccfe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd05:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001cd0c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd13:	89 c8                	mov    eax,ecx
c001cd15:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd18:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd1c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cd20:	8d 51 01             	lea    edx,[ecx+0x1]
c001cd23:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cd28:	0f b6 d2             	movzx  edx,dl
c001cd2b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd32:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd35:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd39:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd3d:	8d 48 02             	lea    ecx,[eax+0x2]
c001cd40:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd45:	0f b6 c9             	movzx  ecx,cl
c001cd48:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd4e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd51:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd55:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cd59:	8d 50 03             	lea    edx,[eax+0x3]
c001cd5c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cd61:	0f b6 d2             	movzx  edx,dl
c001cd64:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cd6a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd6d:	83 c0 04             	add    eax,0x4
c001cd70:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd74:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cd78:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cd7e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd83:	56                   	push   esi
c001cd84:	56                   	push   esi
c001cd85:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001cd8c:	50                   	push   eax
c001cd8d:	68 b7 32 02 c0       	push   0xc00232b7
c001cd92:	e8 2a f9 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001cd97:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cd9e:	83 c4 10             	add    esp,0x10
c001cda1:	66 85 f6             	test   si,si
c001cda4:	74 5f                	je     c001ce05 <IDE::open(int, int, void*)+0x339>
c001cda6:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cdad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdb0:	89 d0                	mov    eax,edx
c001cdb2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdb6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cdba:	40                   	inc    eax
c001cdbb:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cdc1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdc6:	eb 3d                	jmp    c001ce05 <IDE::open(int, int, void*)+0x339>
c001cdc8:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001cdce:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cdd5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cddc:	66 05 06 02          	add    ax,0x206
c001cde0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cde7:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001cdee:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cdf5:	66 05 06 02          	add    ax,0x206
c001cdf9:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ce00:	e9 ca fe ff ff       	jmp    c001cccf <IDE::open(int, int, void*)+0x203>
c001ce05:	50                   	push   eax
c001ce06:	50                   	push   eax
c001ce07:	6a 00                	push   0x0
c001ce09:	53                   	push   ebx
c001ce0a:	e8 49 fa ff ff       	call   c001c858 <IDE::prepareInterrupt(unsigned char)>
c001ce0f:	5a                   	pop    edx
c001ce10:	59                   	pop    ecx
c001ce11:	6a 01                	push   0x1
c001ce13:	53                   	push   ebx
c001ce14:	e8 3f fa ff ff       	call   c001c858 <IDE::prepareInterrupt(unsigned char)>
c001ce19:	83 c4 0c             	add    esp,0xc
c001ce1c:	6a 00                	push   0x0
c001ce1e:	6a 00                	push   0x0
c001ce20:	53                   	push   ebx
c001ce21:	e8 60 fc ff ff       	call   c001ca86 <IDE::enableIRQs(unsigned char, bool)>
c001ce26:	83 c4 0c             	add    esp,0xc
c001ce29:	6a 00                	push   0x0
c001ce2b:	6a 01                	push   0x1
c001ce2d:	53                   	push   ebx
c001ce2e:	e8 53 fc ff ff       	call   c001ca86 <IDE::enableIRQs(unsigned char, bool)>
c001ce33:	83 c4 10             	add    esp,0x10
c001ce36:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce3d:	74 34                	je     c001ce73 <IDE::open(int, int, void*)+0x3a7>
c001ce3f:	83 ec 0c             	sub    esp,0xc
c001ce42:	53                   	push   ebx
c001ce43:	6a 01                	push   0x1
c001ce45:	68 4e ca 01 c0       	push   0xc001ca4e
c001ce4a:	6a 0e                	push   0xe
c001ce4c:	53                   	push   ebx
c001ce4d:	e8 98 0c ff ff       	call   c000daea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce52:	83 c4 14             	add    esp,0x14
c001ce55:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce5b:	53                   	push   ebx
c001ce5c:	6a 01                	push   0x1
c001ce5e:	68 6a ca 01 c0       	push   0xc001ca6a
c001ce63:	6a 0f                	push   0xf
c001ce65:	53                   	push   ebx
c001ce66:	e8 7f 0c ff ff       	call   c000daea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce6b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ce71:	eb 38                	jmp    c001ceab <IDE::open(int, int, void*)+0x3df>
c001ce73:	83 ec 0c             	sub    esp,0xc
c001ce76:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ce80:	53                   	push   ebx
c001ce81:	6a 00                	push   0x0
c001ce83:	68 4e ca 01 c0       	push   0xc001ca4e
c001ce88:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ce8e:	53                   	push   ebx
c001ce8f:	e8 56 0c ff ff       	call   c000daea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce94:	83 c4 14             	add    esp,0x14
c001ce97:	53                   	push   ebx
c001ce98:	6a 00                	push   0x0
c001ce9a:	68 6a ca 01 c0       	push   0xc001ca6a
c001ce9f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cea5:	53                   	push   ebx
c001cea6:	e8 3f 0c ff ff       	call   c000daea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ceab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cead:	83 c4 20             	add    esp,0x20
c001ceb0:	83 ec 0c             	sub    esp,0xc
c001ceb3:	53                   	push   ebx
c001ceb4:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ceb7:	83 c4 0c             	add    esp,0xc
c001ceba:	6a 07                	push   0x7
c001cebc:	6a 00                	push   0x0
c001cebe:	53                   	push   ebx
c001cebf:	e8 7a fa ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001cec4:	83 c4 0c             	add    esp,0xc
c001cec7:	6a 07                	push   0x7
c001cec9:	6a 01                	push   0x1
c001cecb:	53                   	push   ebx
c001cecc:	e8 6d fa ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001ced1:	83 c4 0c             	add    esp,0xc
c001ced4:	6a 01                	push   0x1
c001ced6:	6a 00                	push   0x0
c001ced8:	53                   	push   ebx
c001ced9:	e8 a8 fb ff ff       	call   c001ca86 <IDE::enableIRQs(unsigned char, bool)>
c001cede:	83 c4 0c             	add    esp,0xc
c001cee1:	6a 01                	push   0x1
c001cee3:	6a 01                	push   0x1
c001cee5:	53                   	push   ebx
c001cee6:	e8 9b fb ff ff       	call   c001ca86 <IDE::enableIRQs(unsigned char, bool)>
c001ceeb:	83 c4 2c             	add    esp,0x2c
c001ceee:	31 c0                	xor    eax,eax
c001cef0:	5b                   	pop    ebx
c001cef1:	5e                   	pop    esi
c001cef2:	5f                   	pop    edi
c001cef3:	5d                   	pop    ebp
c001cef4:	c3                   	ret    
c001cef5:	90                   	nop

c001cef6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cef6:	55                   	push   ebp
c001cef7:	57                   	push   edi
c001cef8:	56                   	push   esi
c001cef9:	53                   	push   ebx
c001cefa:	83 ec 1c             	sub    esp,0x1c
c001cefd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf05:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf08:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf0c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf10:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf14:	80 fa 03             	cmp    dl,0x3
c001cf17:	77 5d                	ja     c001cf76 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf21:	0f b6 db             	movzx  ebx,bl
c001cf24:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf27:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf2b:	83 ca 80             	or     edx,0xffffff80
c001cf2e:	0f b6 d2             	movzx  edx,dl
c001cf31:	52                   	push   edx
c001cf32:	6a 0c                	push   0xc
c001cf34:	53                   	push   ebx
c001cf35:	56                   	push   esi
c001cf36:	e8 43 f9 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf3b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf44:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf48:	0f b6 c0             	movzx  eax,al
c001cf4b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf4f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf51:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cf56:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cf5a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cf5e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cf62:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cf6a:	83 c4 2c             	add    esp,0x2c
c001cf6d:	5b                   	pop    ebx
c001cf6e:	5e                   	pop    esi
c001cf6f:	5f                   	pop    edi
c001cf70:	5d                   	pop    ebp
c001cf71:	e9 08 f9 ff ff       	jmp    c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf76:	3c 07                	cmp    al,0x7
c001cf78:	77 10                	ja     c001cf8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cf7a:	0f b6 db             	movzx  ebx,bl
c001cf7d:	0f b6 d0             	movzx  edx,al
c001cf80:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cf88:	eb 2d                	jmp    c001cfb7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cf8a:	3c 0d                	cmp    al,0xd
c001cf8c:	77 13                	ja     c001cfa1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cf8e:	0f b6 db             	movzx  ebx,bl
c001cf91:	0f b6 c0             	movzx  eax,al
c001cf94:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cf9b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cf9f:	eb 16                	jmp    c001cfb7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfa1:	3c 15                	cmp    al,0x15
c001cfa3:	77 14                	ja     c001cfb9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfa5:	0f b6 db             	movzx  ebx,bl
c001cfa8:	0f b6 c0             	movzx  eax,al
c001cfab:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cfb3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cfb7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cfb9:	83 c4 1c             	add    esp,0x1c
c001cfbc:	5b                   	pop    ebx
c001cfbd:	5e                   	pop    esi
c001cfbe:	5f                   	pop    edi
c001cfbf:	5d                   	pop    ebp
c001cfc0:	c3                   	ret    
c001cfc1:	90                   	nop

c001cfc2 <IDE::detect()>:
c001cfc2:	55                   	push   ebp
c001cfc3:	57                   	push   edi
c001cfc4:	56                   	push   esi
c001cfc5:	53                   	push   ebx
c001cfc6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cfcc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cfd3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cfda:	0f 85 97 02 00 00    	jne    c001d277 <IDE::detect()+0x2b5>
c001cfe0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cfe7:	31 f6                	xor    esi,esi
c001cfe9:	31 ed                	xor    ebp,ebp
c001cfeb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cff3:	89 e8                	mov    eax,ebp
c001cff5:	c1 e0 06             	shl    eax,0x6
c001cff8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d000:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d004:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d008:	c1 e0 04             	shl    eax,0x4
c001d00b:	83 c8 a0             	or     eax,0xffffffa0
c001d00e:	0f b6 c0             	movzx  eax,al
c001d011:	50                   	push   eax
c001d012:	6a 06                	push   0x6
c001d014:	56                   	push   esi
c001d015:	53                   	push   ebx
c001d016:	e8 63 f8 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d01b:	83 c4 0c             	add    esp,0xc
c001d01e:	6a 0c                	push   0xc
c001d020:	56                   	push   esi
c001d021:	53                   	push   ebx
c001d022:	e8 17 f9 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d027:	83 c4 0c             	add    esp,0xc
c001d02a:	6a 0c                	push   0xc
c001d02c:	56                   	push   esi
c001d02d:	53                   	push   ebx
c001d02e:	e8 0b f9 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d033:	83 c4 0c             	add    esp,0xc
c001d036:	6a 0c                	push   0xc
c001d038:	56                   	push   esi
c001d039:	53                   	push   ebx
c001d03a:	e8 ff f8 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d03f:	83 c4 0c             	add    esp,0xc
c001d042:	6a 0c                	push   0xc
c001d044:	56                   	push   esi
c001d045:	53                   	push   ebx
c001d046:	e8 f3 f8 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d04b:	68 ec 00 00 00       	push   0xec
c001d050:	6a 07                	push   0x7
c001d052:	56                   	push   esi
c001d053:	53                   	push   ebx
c001d054:	e8 25 f8 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d059:	83 c4 1c             	add    esp,0x1c
c001d05c:	6a 0c                	push   0xc
c001d05e:	56                   	push   esi
c001d05f:	53                   	push   ebx
c001d060:	e8 d9 f8 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d065:	83 c4 0c             	add    esp,0xc
c001d068:	6a 0c                	push   0xc
c001d06a:	56                   	push   esi
c001d06b:	53                   	push   ebx
c001d06c:	e8 cd f8 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d071:	83 c4 0c             	add    esp,0xc
c001d074:	6a 0c                	push   0xc
c001d076:	56                   	push   esi
c001d077:	53                   	push   ebx
c001d078:	e8 c1 f8 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d07d:	83 c4 0c             	add    esp,0xc
c001d080:	6a 0c                	push   0xc
c001d082:	56                   	push   esi
c001d083:	53                   	push   ebx
c001d084:	e8 b5 f8 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d089:	83 c4 0c             	add    esp,0xc
c001d08c:	6a 0c                	push   0xc
c001d08e:	56                   	push   esi
c001d08f:	53                   	push   ebx
c001d090:	e8 a9 f8 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d095:	83 c4 10             	add    esp,0x10
c001d098:	84 c0                	test   al,al
c001d09a:	0f 84 5f 01 00 00    	je     c001d1ff <IDE::detect()+0x23d>
c001d0a0:	31 ff                	xor    edi,edi
c001d0a2:	50                   	push   eax
c001d0a3:	6a 0c                	push   0xc
c001d0a5:	56                   	push   esi
c001d0a6:	53                   	push   ebx
c001d0a7:	e8 92 f8 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d0ac:	83 c4 10             	add    esp,0x10
c001d0af:	a8 01                	test   al,0x1
c001d0b1:	0f 85 69 01 00 00    	jne    c001d220 <IDE::detect()+0x25e>
c001d0b7:	84 c0                	test   al,al
c001d0b9:	78 04                	js     c001d0bf <IDE::detect()+0xfd>
c001d0bb:	a8 08                	test   al,0x8
c001d0bd:	75 23                	jne    c001d0e2 <IDE::detect()+0x120>
c001d0bf:	47                   	inc    edi
c001d0c0:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d0c6:	7e da                	jle    c001d0a2 <IDE::detect()+0xe0>
c001d0c8:	83 ec 0c             	sub    esp,0xc
c001d0cb:	6a 32                	push   0x32
c001d0cd:	e8 5e 8d ff ff       	call   c0015e30 <milliTenthSleep(unsigned int)>
c001d0d2:	83 c4 10             	add    esp,0x10
c001d0d5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d0db:	75 c5                	jne    c001d0a2 <IDE::detect()+0xe0>
c001d0dd:	e9 3e 01 00 00       	jmp    c001d220 <IDE::detect()+0x25e>
c001d0e2:	31 c9                	xor    ecx,ecx
c001d0e4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d0e8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d0ec:	83 ec 0c             	sub    esp,0xc
c001d0ef:	68 80 00 00 00       	push   0x80
c001d0f4:	57                   	push   edi
c001d0f5:	6a 00                	push   0x0
c001d0f7:	56                   	push   esi
c001d0f8:	53                   	push   ebx
c001d0f9:	e8 f8 fd ff ff       	call   c001cef6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d0fe:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d103:	89 e8                	mov    eax,ebp
c001d105:	89 d1                	mov    ecx,edx
c001d107:	c1 e0 06             	shl    eax,0x6
c001d10a:	01 d8                	add    eax,ebx
c001d10c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d113:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d11a:	89 f2                	mov    edx,esi
c001d11c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d122:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d126:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d12c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d130:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d137:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d13f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d146:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d14e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d154:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d15b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d161:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d165:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d169:	83 c4 20             	add    esp,0x20
c001d16c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d16f:	83 c0 02             	add    eax,0x2
c001d172:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001d178:	83 c7 02             	add    edi,0x2
c001d17b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d17e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001d184:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001d188:	75 e2                	jne    c001d16c <IDE::detect()+0x1aa>
c001d18a:	89 e8                	mov    eax,ebp
c001d18c:	c1 e0 06             	shl    eax,0x6
c001d18f:	01 d8                	add    eax,ebx
c001d191:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d197:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d19e:	66 c1 ea 09          	shr    dx,0x9
c001d1a2:	83 e2 01             	and    edx,0x1
c001d1a5:	84 c9                	test   cl,cl
c001d1a7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1ad:	75 22                	jne    c001d1d1 <IDE::detect()+0x20f>
c001d1af:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001d1b6:	74 46                	je     c001d1fe <IDE::detect()+0x23c>
c001d1b8:	83 ec 0c             	sub    esp,0xc
c001d1bb:	68 7c 01 00 00       	push   0x17c
c001d1c0:	e8 ba c5 fe ff       	call   c000977f <malloc>
c001d1c5:	89 c7                	mov    edi,eax
c001d1c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1ca:	e8 11 05 00 00       	call   c001d6e0 <ATA::ATA()>
c001d1cf:	eb 17                	jmp    c001d1e8 <IDE::detect()+0x226>
c001d1d1:	83 ec 0c             	sub    esp,0xc
c001d1d4:	68 84 01 00 00       	push   0x184
c001d1d9:	e8 a1 c5 fe ff       	call   c000977f <malloc>
c001d1de:	89 c7                	mov    edi,eax
c001d1e0:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1e3:	e8 80 0b 00 00       	call   c001dd68 <ATAPI::ATAPI()>
c001d1e8:	5a                   	pop    edx
c001d1e9:	59                   	pop    ecx
c001d1ea:	57                   	push   edi
c001d1eb:	53                   	push   ebx
c001d1ec:	e8 4d 09 ff ff       	call   c000db3e <Device::addChild(Device*)>
c001d1f1:	8b 07                	mov    eax,DWORD PTR [edi]
c001d1f3:	53                   	push   ebx
c001d1f4:	55                   	push   ebp
c001d1f5:	6a 00                	push   0x0
c001d1f7:	57                   	push   edi
c001d1f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d1fb:	83 c4 20             	add    esp,0x20
c001d1fe:	45                   	inc    ebp
c001d1ff:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001d204:	74 0d                	je     c001d213 <IDE::detect()+0x251>
c001d206:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d20e:	e9 e0 fd ff ff       	jmp    c001cff3 <IDE::detect()+0x31>
c001d213:	4e                   	dec    esi
c001d214:	74 61                	je     c001d277 <IDE::detect()+0x2b5>
c001d216:	be 01 00 00 00       	mov    esi,0x1
c001d21b:	e9 cb fd ff ff       	jmp    c001cfeb <IDE::detect()+0x29>
c001d220:	50                   	push   eax
c001d221:	6a 04                	push   0x4
c001d223:	56                   	push   esi
c001d224:	53                   	push   ebx
c001d225:	e8 14 f7 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d22a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d22e:	83 c4 0c             	add    esp,0xc
c001d231:	6a 05                	push   0x5
c001d233:	56                   	push   esi
c001d234:	53                   	push   ebx
c001d235:	e8 04 f7 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d23a:	83 c4 10             	add    esp,0x10
c001d23d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d241:	80 fa 14             	cmp    dl,0x14
c001d244:	75 04                	jne    c001d24a <IDE::detect()+0x288>
c001d246:	3c eb                	cmp    al,0xeb
c001d248:	eb 07                	jmp    c001d251 <IDE::detect()+0x28f>
c001d24a:	3c 96                	cmp    al,0x96
c001d24c:	75 b1                	jne    c001d1ff <IDE::detect()+0x23d>
c001d24e:	80 fa 69             	cmp    dl,0x69
c001d251:	75 ac                	jne    c001d1ff <IDE::detect()+0x23d>
c001d253:	68 a1 00 00 00       	push   0xa1
c001d258:	6a 07                	push   0x7
c001d25a:	56                   	push   esi
c001d25b:	53                   	push   ebx
c001d25c:	e8 1d f6 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d261:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d268:	e8 c3 8b ff ff       	call   c0015e30 <milliTenthSleep(unsigned int)>
c001d26d:	83 c4 10             	add    esp,0x10
c001d270:	b1 01                	mov    cl,0x1
c001d272:	e9 6d fe ff ff       	jmp    c001d0e4 <IDE::detect()+0x122>
c001d277:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d27d:	5b                   	pop    ebx
c001d27e:	5e                   	pop    esi
c001d27f:	5f                   	pop    edi
c001d280:	5d                   	pop    ebp
c001d281:	c3                   	ret    

c001d282 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d282:	55                   	push   ebp
c001d283:	57                   	push   edi
c001d284:	56                   	push   esi
c001d285:	53                   	push   ebx
c001d286:	83 ec 1c             	sub    esp,0x1c
c001d289:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d28d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d291:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d295:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d299:	88 c3                	mov    bl,al
c001d29b:	84 c0                	test   al,al
c001d29d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2a1:	0f 84 81 00 00 00    	je     c001d328 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001d2a7:	83 ec 0c             	sub    esp,0xc
c001d2aa:	68 d3 32 02 c0       	push   0xc00232d3
c001d2af:	e8 0d f4 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001d2b4:	83 c4 10             	add    esp,0x10
c001d2b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2bb:	3c 01                	cmp    al,0x1
c001d2bd:	74 63                	je     c001d322 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001d2bf:	3c 02                	cmp    al,0x2
c001d2c1:	75 53                	jne    c001d316 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d2c3:	d1 e6                	shl    esi,1
c001d2c5:	09 ee                	or     esi,ebp
c001d2c7:	50                   	push   eax
c001d2c8:	89 f0                	mov    eax,esi
c001d2ca:	6a 01                	push   0x1
c001d2cc:	0f b6 f0             	movzx  esi,al
c001d2cf:	c1 e6 06             	shl    esi,0x6
c001d2d2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d2da:	50                   	push   eax
c001d2db:	57                   	push   edi
c001d2dc:	e8 5d f6 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d2e1:	83 c4 10             	add    esp,0x10
c001d2e4:	a8 01                	test   al,0x1
c001d2e6:	74 02                	je     c001d2ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001d2e8:	b3 07                	mov    bl,0x7
c001d2ea:	a8 02                	test   al,0x2
c001d2ec:	74 02                	je     c001d2f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001d2ee:	b3 03                	mov    bl,0x3
c001d2f0:	a8 04                	test   al,0x4
c001d2f2:	74 02                	je     c001d2f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001d2f4:	b3 14                	mov    bl,0x14
c001d2f6:	a8 08                	test   al,0x8
c001d2f8:	74 02                	je     c001d2fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001d2fa:	b3 03                	mov    bl,0x3
c001d2fc:	a8 10                	test   al,0x10
c001d2fe:	74 02                	je     c001d302 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001d300:	b3 15                	mov    bl,0x15
c001d302:	a8 20                	test   al,0x20
c001d304:	74 02                	je     c001d308 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001d306:	b3 03                	mov    bl,0x3
c001d308:	a8 40                	test   al,0x40
c001d30a:	74 02                	je     c001d30e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001d30c:	b3 16                	mov    bl,0x16
c001d30e:	84 c0                	test   al,al
c001d310:	79 16                	jns    c001d328 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001d312:	b3 0d                	mov    bl,0xd
c001d314:	eb 12                	jmp    c001d328 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001d316:	3c 03                	cmp    al,0x3
c001d318:	74 0c                	je     c001d326 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001d31a:	3c 04                	cmp    al,0x4
c001d31c:	75 0a                	jne    c001d328 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001d31e:	b3 08                	mov    bl,0x8
c001d320:	eb 06                	jmp    c001d328 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001d322:	b3 13                	mov    bl,0x13
c001d324:	eb 02                	jmp    c001d328 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001d326:	b3 17                	mov    bl,0x17
c001d328:	83 c4 1c             	add    esp,0x1c
c001d32b:	88 d8                	mov    al,bl
c001d32d:	5b                   	pop    ebx
c001d32e:	5e                   	pop    esi
c001d32f:	5f                   	pop    edi
c001d330:	5d                   	pop    ebp
c001d331:	c3                   	ret    

c001d332 <IDE::polling(unsigned char, unsigned int)>:
c001d332:	57                   	push   edi
c001d333:	56                   	push   esi
c001d334:	53                   	push   ebx
c001d335:	bb 04 00 00 00       	mov    ebx,0x4
c001d33a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d33e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d343:	52                   	push   edx
c001d344:	6a 0c                	push   0xc
c001d346:	56                   	push   esi
c001d347:	57                   	push   edi
c001d348:	e8 f1 f5 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d34d:	83 c4 10             	add    esp,0x10
c001d350:	4b                   	dec    ebx
c001d351:	75 f0                	jne    c001d343 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d353:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d358:	50                   	push   eax
c001d359:	6a 0c                	push   0xc
c001d35b:	56                   	push   esi
c001d35c:	57                   	push   edi
c001d35d:	e8 dc f5 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d362:	83 c4 10             	add    esp,0x10
c001d365:	a8 01                	test   al,0x1
c001d367:	75 17                	jne    c001d380 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d369:	a8 20                	test   al,0x20
c001d36b:	75 0f                	jne    c001d37c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d36d:	4b                   	dec    ebx
c001d36e:	74 10                	je     c001d380 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d370:	84 c0                	test   al,al
c001d372:	78 e4                	js     c001d358 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d374:	a8 08                	test   al,0x8
c001d376:	74 e0                	je     c001d358 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d378:	31 c0                	xor    eax,eax
c001d37a:	eb 06                	jmp    c001d382 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d37c:	b0 01                	mov    al,0x1
c001d37e:	eb 02                	jmp    c001d382 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d380:	b0 02                	mov    al,0x2
c001d382:	5b                   	pop    ebx
c001d383:	5e                   	pop    esi
c001d384:	5f                   	pop    edi
c001d385:	c3                   	ret    

c001d386 <SATABus::close(int, int, void*)>:
c001d386:	31 c0                	xor    eax,eax
c001d388:	c3                   	ret    
c001d389:	90                   	nop

c001d38a <SATABus::detect()>:
c001d38a:	c3                   	ret    
c001d38b:	90                   	nop

c001d38c <SATABus::SATABus()>:
c001d38c:	83 ec 0c             	sub    esp,0xc
c001d38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d393:	83 ec 08             	sub    esp,0x8
c001d396:	68 0c 33 02 c0       	push   0xc002330c
c001d39b:	50                   	push   eax
c001d39c:	e8 4b 0b ff ff       	call   c000deec <HardDiskController::HardDiskController(char const*)>
c001d3a1:	83 c4 10             	add    esp,0x10
c001d3a4:	ba 4c 33 02 c0       	mov    edx,0xc002334c
c001d3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ad:	89 10                	mov    DWORD PTR [eax],edx
c001d3af:	83 ec 0c             	sub    esp,0xc
c001d3b2:	6a 50                	push   0x50
c001d3b4:	e8 e4 c8 fe ff       	call   c0009c9d <Phys::allocateContiguousPages(int)>
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	89 c2                	mov    edx,eax
c001d3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d3c8:	83 ec 0c             	sub    esp,0xc
c001d3cb:	6a 50                	push   0x50
c001d3cd:	e8 93 df fe ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c001d3d2:	83 c4 10             	add    esp,0x10
c001d3d5:	89 c2                	mov    edx,eax
c001d3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d3e1:	a1 94 40 02 c0       	mov    eax,ds:0xc0024094
c001d3e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d3ea:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d3f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d3f4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d3fa:	83 ec 0c             	sub    esp,0xc
c001d3fd:	6a 03                	push   0x3
c001d3ff:	6a 50                	push   0x50
c001d401:	51                   	push   ecx
c001d402:	52                   	push   edx
c001d403:	50                   	push   eax
c001d404:	e8 bf e8 fe ff       	call   c000bcc8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d409:	83 c4 20             	add    esp,0x20
c001d40c:	90                   	nop
c001d40d:	83 c4 0c             	add    esp,0xc
c001d410:	c3                   	ret    
c001d411:	90                   	nop

c001d412 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d416:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d419:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d41c:	09 c2                	or     edx,eax
c001d41e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d422:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d428:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d42a:	31 c0                	xor    eax,eax
c001d42c:	c1 e9 08             	shr    ecx,0x8
c001d42f:	83 e1 0f             	and    ecx,0xf
c001d432:	39 c8                	cmp    eax,ecx
c001d434:	74 0a                	je     c001d440 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d436:	f6 c2 01             	test   dl,0x1
c001d439:	74 08                	je     c001d443 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d43b:	d1 ea                	shr    edx,1
c001d43d:	40                   	inc    eax
c001d43e:	eb f2                	jmp    c001d432 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d440:	83 c8 ff             	or     eax,0xffffffff
c001d443:	c3                   	ret    

c001d444 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d444:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d448:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d44b:	89 c2                	mov    edx,eax
c001d44d:	c1 ea 08             	shr    edx,0x8
c001d450:	83 e2 0f             	and    edx,0xf
c001d453:	fe ca                	dec    dl
c001d455:	75 31                	jne    c001d488 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d457:	83 e0 0f             	and    eax,0xf
c001d45a:	3c 03                	cmp    al,0x3
c001d45c:	75 2a                	jne    c001d488 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d45e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d461:	b8 02 00 00 00       	mov    eax,0x2
c001d466:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d46c:	74 1c                	je     c001d48a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d46e:	b8 04 00 00 00       	mov    eax,0x4
c001d473:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d479:	74 0f                	je     c001d48a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d47b:	31 c0                	xor    eax,eax
c001d47d:	83 fa 03             	cmp    edx,0x3
c001d480:	0f 94 c0             	sete   al
c001d483:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d487:	c3                   	ret    
c001d488:	31 c0                	xor    eax,eax
c001d48a:	c3                   	ret    
c001d48b:	90                   	nop

c001d48c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d48c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d490:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d493:	0f ba e2 0f          	bt     edx,0xf
c001d497:	72 f7                	jb     c001d490 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d499:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d49c:	83 ca 10             	or     edx,0x10
c001d49f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4a5:	83 ca 01             	or     edx,0x1
c001d4a8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4ab:	c3                   	ret    

c001d4ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d4ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4b3:	83 e2 fe             	and    edx,0xfffffffe
c001d4b6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4b9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4bc:	83 e2 ef             	and    edx,0xffffffef
c001d4bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4c5:	0f ba e2 0e          	bt     edx,0xe
c001d4c9:	72 f7                	jb     c001d4c2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d4cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4ce:	0f ba e2 0f          	bt     edx,0xf
c001d4d2:	72 ee                	jb     c001d4c2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d4d4:	c3                   	ret    
c001d4d5:	90                   	nop

c001d4d6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d4d6:	55                   	push   ebp
c001d4d7:	57                   	push   edi
c001d4d8:	56                   	push   esi
c001d4d9:	53                   	push   ebx
c001d4da:	83 ec 1c             	sub    esp,0x1c
c001d4dd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d4e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d4e5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d4e9:	53                   	push   ebx
c001d4ea:	89 fd                	mov    ebp,edi
c001d4ec:	56                   	push   esi
c001d4ed:	c1 e5 0a             	shl    ebp,0xa
c001d4f0:	e8 b7 ff ff ff       	call   c001d4ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d4f5:	83 ec 0c             	sub    esp,0xc
c001d4f8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d4fe:	01 e8                	add    eax,ebp
c001d500:	89 03                	mov    DWORD PTR [ebx],eax
c001d502:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d504:	68 00 04 00 00       	push   0x400
c001d509:	6a 00                	push   0x0
c001d50b:	50                   	push   eax
c001d50c:	e8 97 2f fe ff       	call   c00004a8 <memset>
c001d511:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001d517:	89 fa                	mov    edx,edi
c001d519:	01 e8                	add    eax,ebp
c001d51b:	c1 e7 0d             	shl    edi,0xd
c001d51e:	89 03                	mov    DWORD PTR [ebx],eax
c001d520:	c1 e2 08             	shl    edx,0x8
c001d523:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d52a:	81 c2 00 80 00 00    	add    edx,0x8000
c001d530:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001d534:	89 d0                	mov    eax,edx
c001d536:	83 c4 1c             	add    esp,0x1c
c001d539:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001d53f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d542:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d545:	68 00 01 00 00       	push   0x100
c001d54a:	6a 00                	push   0x0
c001d54c:	50                   	push   eax
c001d54d:	e8 56 2f fe ff       	call   c00004a8 <memset>
c001d552:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d556:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001d55c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001d562:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d566:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001d569:	83 c4 10             	add    esp,0x10
c001d56c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d573:	31 ff                	xor    edi,edi
c001d575:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001d57b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001d581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d585:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001d58b:	83 c5 20             	add    ebp,0x20
c001d58e:	01 f8                	add    eax,edi
c001d590:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d593:	52                   	push   edx
c001d594:	68 00 01 00 00       	push   0x100
c001d599:	6a 00                	push   0x0
c001d59b:	50                   	push   eax
c001d59c:	e8 07 2f fe ff       	call   c00004a8 <memset>
c001d5a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5a5:	83 c4 10             	add    esp,0x10
c001d5a8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001d5ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d5b5:	01 f8                	add    eax,edi
c001d5b7:	81 c7 00 01 00 00    	add    edi,0x100
c001d5bd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d5c0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001d5c6:	75 b3                	jne    c001d57b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001d5c8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001d5cc:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001d5d0:	83 c4 1c             	add    esp,0x1c
c001d5d3:	5b                   	pop    ebx
c001d5d4:	5e                   	pop    esi
c001d5d5:	5f                   	pop    edi
c001d5d6:	5d                   	pop    ebp
c001d5d7:	e9 b0 fe ff ff       	jmp    c001d48c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001d5dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d5dc:	55                   	push   ebp
c001d5dd:	57                   	push   edi
c001d5de:	56                   	push   esi
c001d5df:	53                   	push   ebx
c001d5e0:	31 db                	xor    ebx,ebx
c001d5e2:	83 ec 0c             	sub    esp,0xc
c001d5e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d5e9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d5ed:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d5f0:	f7 c7 01 00 00 00    	test   edi,0x1
c001d5f6:	74 7a                	je     c001d672 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d5f8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5fc:	89 d8                	mov    eax,ebx
c001d5fe:	c1 e0 07             	shl    eax,0x7
c001d601:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d608:	55                   	push   ebp
c001d609:	56                   	push   esi
c001d60a:	e8 35 fe ff ff       	call   c001d444 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d60f:	5a                   	pop    edx
c001d610:	83 f8 01             	cmp    eax,0x1
c001d613:	59                   	pop    ecx
c001d614:	75 21                	jne    c001d637 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d616:	50                   	push   eax
c001d617:	53                   	push   ebx
c001d618:	55                   	push   ebp
c001d619:	56                   	push   esi
c001d61a:	e8 b7 fe ff ff       	call   c001d4d6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d61f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d626:	e8 54 c1 fe ff       	call   c000977f <malloc>
c001d62b:	89 c5                	mov    ebp,eax
c001d62d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d630:	e8 1f 0e 00 00       	call   c001e454 <SATA::SATA()>
c001d635:	eb 24                	jmp    c001d65b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d637:	83 f8 04             	cmp    eax,0x4
c001d63a:	75 36                	jne    c001d672 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d63c:	51                   	push   ecx
c001d63d:	53                   	push   ebx
c001d63e:	55                   	push   ebp
c001d63f:	56                   	push   esi
c001d640:	e8 91 fe ff ff       	call   c001d4d6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d645:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d64c:	e8 2e c1 fe ff       	call   c000977f <malloc>
c001d651:	89 c5                	mov    ebp,eax
c001d653:	89 04 24             	mov    DWORD PTR [esp],eax
c001d656:	e8 55 11 00 00       	call   c001e7b0 <SATAPI::SATAPI()>
c001d65b:	58                   	pop    eax
c001d65c:	5a                   	pop    edx
c001d65d:	55                   	push   ebp
c001d65e:	56                   	push   esi
c001d65f:	e8 da 04 ff ff       	call   c000db3e <Device::addChild(Device*)>
c001d664:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d667:	56                   	push   esi
c001d668:	6a 00                	push   0x0
c001d66a:	53                   	push   ebx
c001d66b:	55                   	push   ebp
c001d66c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d66f:	83 c4 20             	add    esp,0x20
c001d672:	d1 ef                	shr    edi,1
c001d674:	43                   	inc    ebx
c001d675:	83 fb 20             	cmp    ebx,0x20
c001d678:	0f 85 72 ff ff ff    	jne    c001d5f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d67e:	83 c4 0c             	add    esp,0xc
c001d681:	5b                   	pop    ebx
c001d682:	5e                   	pop    esi
c001d683:	5f                   	pop    edi
c001d684:	5d                   	pop    ebp
c001d685:	c3                   	ret    

c001d686 <SATABus::open(int, int, void*)>:
c001d686:	53                   	push   ebx
c001d687:	83 ec 10             	sub    esp,0x10
c001d68a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d68e:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d694:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d69a:	50                   	push   eax
c001d69b:	68 30 33 02 c0       	push   0xc0023330
c001d6a0:	e8 1c f0 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001d6a5:	58                   	pop    eax
c001d6a6:	5a                   	pop    edx
c001d6a7:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d6ad:	53                   	push   ebx
c001d6ae:	e8 29 ff ff ff       	call   c001d5dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d6b3:	31 c0                	xor    eax,eax
c001d6b5:	83 c4 18             	add    esp,0x18
c001d6b8:	5b                   	pop    ebx
c001d6b9:	c3                   	ret    

c001d6ba <ATA::close(int, int, void*)>:
c001d6ba:	83 ec 0c             	sub    esp,0xc
c001d6bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d6c7:	85 c0                	test   eax,eax
c001d6c9:	74 0c                	je     c001d6d7 <ATA::close(int, int, void*)+0x1d>
c001d6cb:	83 ec 0c             	sub    esp,0xc
c001d6ce:	8b 10                	mov    edx,DWORD PTR [eax]
c001d6d0:	50                   	push   eax
c001d6d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d6d4:	83 c4 10             	add    esp,0x10
c001d6d7:	31 c0                	xor    eax,eax
c001d6d9:	83 c4 0c             	add    esp,0xc
c001d6dc:	c3                   	ret    
c001d6dd:	90                   	nop

c001d6de <ATA::powerSaving(PowerSavingLevel)>:
c001d6de:	c3                   	ret    
c001d6df:	90                   	nop

c001d6e0 <ATA::ATA()>:
c001d6e0:	83 ec 0c             	sub    esp,0xc
c001d6e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6e7:	83 ec 04             	sub    esp,0x4
c001d6ea:	68 00 02 00 00       	push   0x200
c001d6ef:	68 81 34 02 c0       	push   0xc0023481
c001d6f4:	50                   	push   eax
c001d6f5:	e8 7c 08 ff ff       	call   c000df76 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d6fa:	83 c4 10             	add    esp,0x10
c001d6fd:	ba c4 33 02 c0       	mov    edx,0xc00233c4
c001d702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d706:	89 10                	mov    DWORD PTR [eax],edx
c001d708:	90                   	nop
c001d709:	83 c4 0c             	add    esp,0xc
c001d70c:	c3                   	ret    
c001d70d:	90                   	nop

c001d70e <ATA::flush(bool)>:
c001d70e:	53                   	push   ebx
c001d70f:	83 ec 08             	sub    esp,0x8
c001d712:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d717:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d71b:	19 c0                	sbb    eax,eax
c001d71d:	83 e0 fd             	and    eax,0xfffffffd
c001d720:	05 ea 00 00 00       	add    eax,0xea
c001d725:	50                   	push   eax
c001d726:	6a 07                	push   0x7
c001d728:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d72f:	50                   	push   eax
c001d730:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d736:	e8 43 f1 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d73b:	83 c4 0c             	add    esp,0xc
c001d73e:	6a 00                	push   0x0
c001d740:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d747:	50                   	push   eax
c001d748:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d74e:	e8 df fb ff ff       	call   c001d332 <IDE::polling(unsigned char, unsigned int)>
c001d753:	83 c4 18             	add    esp,0x18
c001d756:	5b                   	pop    ebx
c001d757:	c3                   	ret    

c001d758 <ATA::readyForCommand()>:
c001d758:	56                   	push   esi
c001d759:	53                   	push   ebx
c001d75a:	53                   	push   ebx
c001d75b:	31 db                	xor    ebx,ebx
c001d75d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d761:	51                   	push   ecx
c001d762:	6a 0c                	push   0xc
c001d764:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d76b:	50                   	push   eax
c001d76c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d772:	e8 c7 f1 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001d777:	83 c4 10             	add    esp,0x10
c001d77a:	a8 88                	test   al,0x88
c001d77c:	74 1f                	je     c001d79d <ATA::readyForCommand()+0x45>
c001d77e:	43                   	inc    ebx
c001d77f:	83 fb 63             	cmp    ebx,0x63
c001d782:	7e dd                	jle    c001d761 <ATA::readyForCommand()+0x9>
c001d784:	83 ec 0c             	sub    esp,0xc
c001d787:	6a 0a                	push   0xa
c001d789:	e8 a2 86 ff ff       	call   c0015e30 <milliTenthSleep(unsigned int)>
c001d78e:	83 c4 10             	add    esp,0x10
c001d791:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d797:	75 c8                	jne    c001d761 <ATA::readyForCommand()+0x9>
c001d799:	31 c0                	xor    eax,eax
c001d79b:	eb 02                	jmp    c001d79f <ATA::readyForCommand()+0x47>
c001d79d:	b0 01                	mov    al,0x1
c001d79f:	5a                   	pop    edx
c001d7a0:	5b                   	pop    ebx
c001d7a1:	5e                   	pop    esi
c001d7a2:	c3                   	ret    
c001d7a3:	90                   	nop

c001d7a4 <ATA::access(unsigned long long, int, void*, bool)>:
c001d7a4:	55                   	push   ebp
c001d7a5:	57                   	push   edi
c001d7a6:	56                   	push   esi
c001d7a7:	53                   	push   ebx
c001d7a8:	83 ec 38             	sub    esp,0x38
c001d7ab:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d7af:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001d7b3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d7b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d7bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d7bf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d7c3:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001d7c7:	68 70 33 02 c0       	push   0xc0023370
c001d7cc:	e8 f0 ee fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001d7d1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d7d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7db:	83 c4 10             	add    esp,0x10
c001d7de:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d7e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7e8:	c1 e0 06             	shl    eax,0x6
c001d7eb:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d7f3:	74 5d                	je     c001d852 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001d7f5:	89 fa                	mov    edx,edi
c001d7f7:	89 f0                	mov    eax,esi
c001d7f9:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d7fd:	c1 ea 1c             	shr    edx,0x1c
c001d800:	89 d1                	mov    ecx,edx
c001d802:	09 c1                	or     ecx,eax
c001d804:	74 25                	je     c001d82b <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001d806:	31 ed                	xor    ebp,ebp
c001d808:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d80f:	89 fa                	mov    edx,edi
c001d811:	89 f0                	mov    eax,esi
c001d813:	0f ad d0             	shrd   eax,edx,cl
c001d816:	d3 ea                	shr    edx,cl
c001d818:	f6 c1 20             	test   cl,0x20
c001d81b:	74 02                	je     c001d81f <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001d81d:	89 d0                	mov    eax,edx
c001d81f:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d823:	45                   	inc    ebp
c001d824:	83 fd 06             	cmp    ebp,0x6
c001d827:	75 df                	jne    c001d808 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001d829:	eb 76                	jmp    c001d8a1 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001d82b:	89 f0                	mov    eax,esi
c001d82d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d832:	89 fa                	mov    edx,edi
c001d834:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d83b:	0f ac d0 10          	shrd   eax,edx,0x10
c001d83f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d844:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d848:	c1 ee 18             	shr    esi,0x18
c001d84b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d850:	eb 56                	jmp    c001d8a8 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001d852:	6a 00                	push   0x0
c001d854:	6a 3f                	push   0x3f
c001d856:	57                   	push   edi
c001d857:	56                   	push   esi
c001d858:	e8 43 23 00 00       	call   c001fba0 <__umoddi3>
c001d85d:	83 c4 10             	add    esp,0x10
c001d860:	40                   	inc    eax
c001d861:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d865:	6a 00                	push   0x0
c001d867:	68 f0 03 00 00       	push   0x3f0
c001d86c:	57                   	push   edi
c001d86d:	56                   	push   esi
c001d86e:	e8 2d 22 00 00       	call   c001faa0 <__udivdi3>
c001d873:	83 c4 10             	add    esp,0x10
c001d876:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d87b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d882:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d887:	6a 00                	push   0x0
c001d889:	6a 3f                	push   0x3f
c001d88b:	57                   	push   edi
c001d88c:	56                   	push   esi
c001d88d:	e8 0e 22 00 00       	call   c001faa0 <__udivdi3>
c001d892:	83 c4 10             	add    esp,0x10
c001d895:	89 c6                	mov    esi,eax
c001d897:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d89c:	83 e6 0f             	and    esi,0xf
c001d89f:	eb 07                	jmp    c001d8a8 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001d8a1:	31 f6                	xor    esi,esi
c001d8a3:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d8a8:	bf 01 00 00 00       	mov    edi,0x1
c001d8ad:	50                   	push   eax
c001d8ae:	6a 00                	push   0x0
c001d8b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8b7:	50                   	push   eax
c001d8b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d8bc:	e8 c5 f1 ff ff       	call   c001ca86 <IDE::enableIRQs(unsigned char, bool)>
c001d8c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8c4:	e8 8f fe ff ff       	call   c001d758 <ATA::readyForCommand()>
c001d8c9:	83 c4 10             	add    esp,0x10
c001d8cc:	84 c0                	test   al,al
c001d8ce:	0f 84 bc 02 00 00    	je     c001db90 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001d8d4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d8da:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d8e0:	c1 e0 04             	shl    eax,0x4
c001d8e3:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d8ea:	09 c6                	or     esi,eax
c001d8ec:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d8f1:	75 05                	jne    c001d8f8 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001d8f3:	83 ce a0             	or     esi,0xffffffa0
c001d8f6:	eb 03                	jmp    c001d8fb <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001d8f8:	83 ce e0             	or     esi,0xffffffe0
c001d8fb:	89 f0                	mov    eax,esi
c001d8fd:	0f b6 f0             	movzx  esi,al
c001d900:	56                   	push   esi
c001d901:	6a 06                	push   0x6
c001d903:	51                   	push   ecx
c001d904:	52                   	push   edx
c001d905:	e8 74 ef ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d90a:	83 c4 10             	add    esp,0x10
c001d90d:	6a 00                	push   0x0
c001d90f:	6a 01                	push   0x1
c001d911:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d918:	50                   	push   eax
c001d919:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d91f:	e8 5a ef ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d92c:	75 6e                	jne    c001d99c <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001d92e:	6a 00                	push   0x0
c001d930:	6a 08                	push   0x8
c001d932:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d939:	50                   	push   eax
c001d93a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d940:	e8 39 ef ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d945:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d94a:	50                   	push   eax
c001d94b:	6a 09                	push   0x9
c001d94d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d954:	50                   	push   eax
c001d955:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d95b:	e8 1e ef ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d960:	83 c4 20             	add    esp,0x20
c001d963:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d968:	50                   	push   eax
c001d969:	6a 0a                	push   0xa
c001d96b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d972:	50                   	push   eax
c001d973:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d979:	e8 00 ef ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d97e:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d983:	50                   	push   eax
c001d984:	6a 0b                	push   0xb
c001d986:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d98d:	50                   	push   eax
c001d98e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d994:	e8 e5 ee ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d999:	83 c4 20             	add    esp,0x20
c001d99c:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d9a1:	50                   	push   eax
c001d9a2:	6a 02                	push   0x2
c001d9a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9ab:	50                   	push   eax
c001d9ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9b2:	e8 c7 ee ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9b7:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d9bc:	50                   	push   eax
c001d9bd:	6a 03                	push   0x3
c001d9bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9c6:	50                   	push   eax
c001d9c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9cd:	e8 ac ee ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9d2:	83 c4 20             	add    esp,0x20
c001d9d5:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d9da:	50                   	push   eax
c001d9db:	6a 04                	push   0x4
c001d9dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9e4:	50                   	push   eax
c001d9e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9eb:	e8 8e ee ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9f0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d9f5:	50                   	push   eax
c001d9f6:	6a 05                	push   0x5
c001d9f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9ff:	50                   	push   eax
c001da00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da06:	e8 73 ee ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da0b:	83 c4 20             	add    esp,0x20
c001da0e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001da13:	0f 94 c0             	sete   al
c001da16:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001da1b:	74 09                	je     c001da26 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001da1d:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001da24:	eb 07                	jmp    c001da2d <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001da26:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001da2d:	0f b6 c0             	movzx  eax,al
c001da30:	50                   	push   eax
c001da31:	6a 07                	push   0x7
c001da33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da3a:	50                   	push   eax
c001da3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da41:	e8 38 ee ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da46:	c7 04 24 7d 33 02 c0 	mov    DWORD PTR [esp],0xc002337d
c001da4d:	e8 6f ec fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001da52:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001da56:	83 c4 10             	add    esp,0x10
c001da59:	85 f6                	test   esi,esi
c001da5b:	0f 84 f7 00 00 00    	je     c001db58 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001da61:	83 ec 0c             	sub    esp,0xc
c001da64:	68 80 33 02 c0       	push   0xc0023380
c001da69:	e8 53 ec fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001da6e:	83 c4 0c             	add    esp,0xc
c001da71:	6a 01                	push   0x1
c001da73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da7a:	50                   	push   eax
c001da7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da81:	e8 ac f8 ff ff       	call   c001d332 <IDE::polling(unsigned char, unsigned int)>
c001da86:	c7 04 24 83 33 02 c0 	mov    DWORD PTR [esp],0xc0023383
c001da8d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001da91:	e8 2b ec fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001da96:	83 c4 10             	add    esp,0x10
c001da99:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001da9d:	84 c0                	test   al,al
c001da9f:	74 2b                	je     c001dacc <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001daa1:	0f b6 f8             	movzx  edi,al
c001daa4:	57                   	push   edi
c001daa5:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001daac:	50                   	push   eax
c001daad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dab4:	50                   	push   eax
c001dab5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dabb:	e8 c2 f7 ff ff       	call   c001d282 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dac0:	c7 04 24 86 33 02 c0 	mov    DWORD PTR [esp],0xc0023386
c001dac7:	e9 bc 00 00 00       	jmp    c001db88 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001dacc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dad1:	74 50                	je     c001db23 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001dad3:	83 ec 0c             	sub    esp,0xc
c001dad6:	31 ed                	xor    ebp,ebp
c001dad8:	68 91 33 02 c0       	push   0xc0023391
c001dadd:	e8 df eb fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001dae2:	83 c4 10             	add    esp,0x10
c001dae5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dae9:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001daed:	50                   	push   eax
c001daee:	50                   	push   eax
c001daef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001daf6:	50                   	push   eax
c001daf7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dafd:	e8 6a ed ff ff       	call   c001c86c <IDE::getBase(unsigned char)>
c001db02:	89 c2                	mov    edx,eax
c001db04:	89 f8                	mov    eax,edi
c001db06:	66 ef                	out    dx,ax
c001db08:	45                   	inc    ebp
c001db09:	83 c4 10             	add    esp,0x10
c001db0c:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001db12:	75 d1                	jne    c001dae5 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001db14:	83 ec 0c             	sub    esp,0xc
c001db17:	68 94 33 02 c0       	push   0xc0023394
c001db1c:	e8 a0 eb fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001db21:	eb 24                	jmp    c001db47 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001db23:	51                   	push   ecx
c001db24:	51                   	push   ecx
c001db25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db2c:	50                   	push   eax
c001db2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db33:	e8 34 ed ff ff       	call   c001c86c <IDE::getBase(unsigned char)>
c001db38:	b9 00 01 00 00       	mov    ecx,0x100
c001db3d:	89 c2                	mov    edx,eax
c001db3f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001db43:	fc                   	cld    
c001db44:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001db47:	83 c4 10             	add    esp,0x10
c001db4a:	4e                   	dec    esi
c001db4b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001db53:	e9 01 ff ff ff       	jmp    c001da59 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001db58:	31 ff                	xor    edi,edi
c001db5a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001db5f:	74 2f                	je     c001db90 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001db61:	83 ec 0c             	sub    esp,0xc
c001db64:	68 97 33 02 c0       	push   0xc0023397
c001db69:	e8 53 eb fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001db6e:	58                   	pop    eax
c001db6f:	31 c0                	xor    eax,eax
c001db71:	5a                   	pop    edx
c001db72:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001db77:	0f 94 c0             	sete   al
c001db7a:	50                   	push   eax
c001db7b:	53                   	push   ebx
c001db7c:	e8 8d fb ff ff       	call   c001d70e <ATA::flush(bool)>
c001db81:	c7 04 24 9a 33 02 c0 	mov    DWORD PTR [esp],0xc002339a
c001db88:	e8 34 eb fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001db8d:	83 c4 10             	add    esp,0x10
c001db90:	83 c4 2c             	add    esp,0x2c
c001db93:	89 f8                	mov    eax,edi
c001db95:	5b                   	pop    ebx
c001db96:	5e                   	pop    esi
c001db97:	5f                   	pop    edi
c001db98:	5d                   	pop    ebp
c001db99:	c3                   	ret    

c001db9a <ATA::read(unsigned long long, int, void*)>:
c001db9a:	57                   	push   edi
c001db9b:	b8 04 00 00 00       	mov    eax,0x4
c001dba0:	56                   	push   esi
c001dba1:	53                   	push   ebx
c001dba2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dba6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dbaa:	8d 7a ff             	lea    edi,[edx-0x1]
c001dbad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dbb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dbb5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dbbb:	77 25                	ja     c001dbe2 <ATA::read(unsigned long long, int, void*)+0x48>
c001dbbd:	b8 06 00 00 00       	mov    eax,0x6
c001dbc2:	85 f6                	test   esi,esi
c001dbc4:	74 1c                	je     c001dbe2 <ATA::read(unsigned long long, int, void*)+0x48>
c001dbc6:	50                   	push   eax
c001dbc7:	50                   	push   eax
c001dbc8:	6a 00                	push   0x0
c001dbca:	56                   	push   esi
c001dbcb:	52                   	push   edx
c001dbcc:	53                   	push   ebx
c001dbcd:	51                   	push   ecx
c001dbce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd2:	e8 cd fb ff ff       	call   c001d7a4 <ATA::access(unsigned long long, int, void*, bool)>
c001dbd7:	83 c4 20             	add    esp,0x20
c001dbda:	85 c0                	test   eax,eax
c001dbdc:	0f 95 c0             	setne  al
c001dbdf:	0f b6 c0             	movzx  eax,al
c001dbe2:	5b                   	pop    ebx
c001dbe3:	5e                   	pop    esi
c001dbe4:	5f                   	pop    edi
c001dbe5:	c3                   	ret    

c001dbe6 <ATA::write(unsigned long long, int, void*)>:
c001dbe6:	55                   	push   ebp
c001dbe7:	57                   	push   edi
c001dbe8:	56                   	push   esi
c001dbe9:	53                   	push   ebx
c001dbea:	83 ec 18             	sub    esp,0x18
c001dbed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dbf1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dbf5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dbf9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dbfd:	68 9d 33 02 c0       	push   0xc002339d
c001dc02:	e8 ba ea fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001dc07:	8d 53 ff             	lea    edx,[ebx-0x1]
c001dc0a:	83 c4 10             	add    esp,0x10
c001dc0d:	b8 04 00 00 00       	mov    eax,0x4
c001dc12:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001dc18:	77 25                	ja     c001dc3f <ATA::write(unsigned long long, int, void*)+0x59>
c001dc1a:	b8 06 00 00 00       	mov    eax,0x6
c001dc1f:	85 f6                	test   esi,esi
c001dc21:	74 1c                	je     c001dc3f <ATA::write(unsigned long long, int, void*)+0x59>
c001dc23:	50                   	push   eax
c001dc24:	50                   	push   eax
c001dc25:	6a 01                	push   0x1
c001dc27:	56                   	push   esi
c001dc28:	53                   	push   ebx
c001dc29:	55                   	push   ebp
c001dc2a:	57                   	push   edi
c001dc2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc2f:	e8 70 fb ff ff       	call   c001d7a4 <ATA::access(unsigned long long, int, void*, bool)>
c001dc34:	83 c4 20             	add    esp,0x20
c001dc37:	85 c0                	test   eax,eax
c001dc39:	0f 95 c0             	setne  al
c001dc3c:	0f b6 c0             	movzx  eax,al
c001dc3f:	83 c4 0c             	add    esp,0xc
c001dc42:	5b                   	pop    ebx
c001dc43:	5e                   	pop    esi
c001dc44:	5f                   	pop    edi
c001dc45:	5d                   	pop    ebp
c001dc46:	c3                   	ret    
c001dc47:	90                   	nop

c001dc48 <ATA::detectCHS()>:
c001dc48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dc4c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001dc52:	c1 e0 06             	shl    eax,0x6
c001dc55:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001dc5b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001dc65:	c7 44 24 04 a9 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233a9
c001dc6d:	e9 91 49 ff ff       	jmp    c0012603 <Krnl::panic(char const*)>

c001dc72 <ATA::open(int, int, void*)>:
c001dc72:	53                   	push   ebx
c001dc73:	83 ec 08             	sub    esp,0x8
c001dc76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc82:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dc88:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc8e:	c1 e0 06             	shl    eax,0x6
c001dc91:	01 d0                	add    eax,edx
c001dc93:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001dc9a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dca0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dca7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dcb1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dcb7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dcbe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dcc5:	75 0c                	jne    c001dcd3 <ATA::open(int, int, void*)+0x61>
c001dcc7:	83 ec 0c             	sub    esp,0xc
c001dcca:	53                   	push   ebx
c001dccb:	e8 78 ff ff ff       	call   c001dc48 <ATA::detectCHS()>
c001dcd0:	83 c4 10             	add    esp,0x10
c001dcd3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dcd9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dcdf:	c1 e0 06             	shl    eax,0x6
c001dce2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dce9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dcf3:	d1 e8                	shr    eax,1
c001dcf5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dcfb:	6a 04                	push   0x4
c001dcfd:	6a 0c                	push   0xc
c001dcff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd06:	50                   	push   eax
c001dd07:	52                   	push   edx
c001dd08:	e8 71 eb ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd0d:	90                   	nop
c001dd0e:	90                   	nop
c001dd0f:	6a 00                	push   0x0
c001dd11:	6a 0c                	push   0xc
c001dd13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd1a:	50                   	push   eax
c001dd1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd21:	e8 58 eb ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd26:	83 c4 14             	add    esp,0x14
c001dd29:	53                   	push   ebx
c001dd2a:	e8 af 02 ff ff       	call   c000dfde <PhysicalDisk::startCache()>
c001dd2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd32:	e8 3b 13 ff ff       	call   c000f072 <createPartitionsForDisk(PhysicalDisk*)>
c001dd37:	31 c0                	xor    eax,eax
c001dd39:	83 c4 18             	add    esp,0x18
c001dd3c:	5b                   	pop    ebx
c001dd3d:	c3                   	ret    

c001dd3e <ATAPI::write(unsigned long long, int, void*)>:
c001dd3e:	b8 03 00 00 00       	mov    eax,0x3
c001dd43:	c3                   	ret    

c001dd44 <ATAPI::close(int, int, void*)>:
c001dd44:	83 ec 0c             	sub    esp,0xc
c001dd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd51:	85 c0                	test   eax,eax
c001dd53:	74 0c                	je     c001dd61 <ATAPI::close(int, int, void*)+0x1d>
c001dd55:	83 ec 0c             	sub    esp,0xc
c001dd58:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd5a:	50                   	push   eax
c001dd5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd5e:	83 c4 10             	add    esp,0x10
c001dd61:	31 c0                	xor    eax,eax
c001dd63:	83 c4 0c             	add    esp,0xc
c001dd66:	c3                   	ret    
c001dd67:	90                   	nop

c001dd68 <ATAPI::ATAPI()>:
c001dd68:	83 ec 0c             	sub    esp,0xc
c001dd6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6f:	83 ec 04             	sub    esp,0x4
c001dd72:	68 00 08 00 00       	push   0x800
c001dd77:	68 21 35 02 c0       	push   0xc0023521
c001dd7c:	50                   	push   eax
c001dd7d:	e8 f4 01 ff ff       	call   c000df76 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd82:	83 c4 10             	add    esp,0x10
c001dd85:	ba 3c 34 02 c0       	mov    edx,0xc002343c
c001dd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd8e:	89 10                	mov    DWORD PTR [eax],edx
c001dd90:	90                   	nop
c001dd91:	83 c4 0c             	add    esp,0xc
c001dd94:	c3                   	ret    
c001dd95:	90                   	nop

c001dd96 <ATAPI::readyForCommand()>:
c001dd96:	56                   	push   esi
c001dd97:	53                   	push   ebx
c001dd98:	53                   	push   ebx
c001dd99:	31 db                	xor    ebx,ebx
c001dd9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd9f:	51                   	push   ecx
c001dda0:	6a 0c                	push   0xc
c001dda2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dda9:	50                   	push   eax
c001ddaa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ddb0:	e8 89 eb ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001ddb5:	83 c4 10             	add    esp,0x10
c001ddb8:	a8 88                	test   al,0x88
c001ddba:	74 25                	je     c001dde1 <ATAPI::readyForCommand()+0x4b>
c001ddbc:	43                   	inc    ebx
c001ddbd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001ddc3:	7e da                	jle    c001dd9f <ATAPI::readyForCommand()+0x9>
c001ddc5:	83 ec 0c             	sub    esp,0xc
c001ddc8:	68 5e 01 00 00       	push   0x15e
c001ddcd:	e8 5e 80 ff ff       	call   c0015e30 <milliTenthSleep(unsigned int)>
c001ddd2:	83 c4 10             	add    esp,0x10
c001ddd5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001dddb:	75 c2                	jne    c001dd9f <ATAPI::readyForCommand()+0x9>
c001dddd:	31 c0                	xor    eax,eax
c001dddf:	eb 02                	jmp    c001dde3 <ATAPI::readyForCommand()+0x4d>
c001dde1:	b0 01                	mov    al,0x1
c001dde3:	5a                   	pop    edx
c001dde4:	5b                   	pop    ebx
c001dde5:	5e                   	pop    esi
c001dde6:	c3                   	ret    
c001dde7:	90                   	nop

c001dde8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dde8:	55                   	push   ebp
c001dde9:	57                   	push   edi
c001ddea:	56                   	push   esi
c001ddeb:	53                   	push   ebx
c001ddec:	83 ec 20             	sub    esp,0x20
c001ddef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ddf3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ddf7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ddfb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ddff:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001de03:	6a 01                	push   0x1
c001de05:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de0c:	50                   	push   eax
c001de0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de13:	e8 6e ec ff ff       	call   c001ca86 <IDE::enableIRQs(unsigned char, bool)>
c001de18:	5e                   	pop    esi
c001de19:	58                   	pop    eax
c001de1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de21:	50                   	push   eax
c001de22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de28:	e8 2b ea ff ff       	call   c001c858 <IDE::prepareInterrupt(unsigned char)>
c001de2d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001de30:	e8 61 ff ff ff       	call   c001dd96 <ATAPI::readyForCommand()>
c001de35:	83 c4 10             	add    esp,0x10
c001de38:	84 c0                	test   al,al
c001de3a:	75 0a                	jne    c001de46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001de3c:	bb 01 00 00 00       	mov    ebx,0x1
c001de41:	e9 57 02 00 00       	jmp    c001e09d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de46:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001de4c:	c1 e0 04             	shl    eax,0x4
c001de4f:	0f b6 c0             	movzx  eax,al
c001de52:	50                   	push   eax
c001de53:	6a 06                	push   0x6
c001de55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de5c:	50                   	push   eax
c001de5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de63:	e8 16 ea ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de68:	6a 00                	push   0x0
c001de6a:	6a 01                	push   0x1
c001de6c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de73:	50                   	push   eax
c001de74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de7a:	e8 ff e9 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de7f:	83 c4 20             	add    esp,0x20
c001de82:	0f b6 c3             	movzx  eax,bl
c001de85:	0f b6 df             	movzx  ebx,bh
c001de88:	50                   	push   eax
c001de89:	6a 04                	push   0x4
c001de8b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de92:	50                   	push   eax
c001de93:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de99:	e8 e0 e9 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de9e:	53                   	push   ebx
c001de9f:	6a 05                	push   0x5
c001dea1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dea8:	50                   	push   eax
c001dea9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001deaf:	e8 ca e9 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deb4:	83 c4 20             	add    esp,0x20
c001deb7:	68 a0 00 00 00       	push   0xa0
c001debc:	6a 07                	push   0x7
c001debe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dec5:	50                   	push   eax
c001dec6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001decc:	e8 ad e9 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ded1:	83 c4 0c             	add    esp,0xc
c001ded4:	6a 01                	push   0x1
c001ded6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dedd:	50                   	push   eax
c001dede:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dee4:	e8 49 f4 ff ff       	call   c001d332 <IDE::polling(unsigned char, unsigned int)>
c001dee9:	83 c4 10             	add    esp,0x10
c001deec:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001def2:	84 c0                	test   al,al
c001def4:	74 23                	je     c001df19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001def6:	0f b6 d8             	movzx  ebx,al
c001def9:	0f b6 d2             	movzx  edx,dl
c001defc:	53                   	push   ebx
c001defd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001df04:	50                   	push   eax
c001df05:	52                   	push   edx
c001df06:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df0c:	e8 71 f3 ff ff       	call   c001d282 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001df11:	83 c4 10             	add    esp,0x10
c001df14:	e9 84 01 00 00       	jmp    c001e09d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001df19:	0f b6 d2             	movzx  edx,dl
c001df1c:	53                   	push   ebx
c001df1d:	53                   	push   ebx
c001df1e:	52                   	push   edx
c001df1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df25:	e8 42 e9 ff ff       	call   c001c86c <IDE::getBase(unsigned char)>
c001df2a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001df2e:	b9 06 00 00 00       	mov    ecx,0x6
c001df33:	89 c2                	mov    edx,eax
c001df35:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001df38:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001df3c:	83 c4 10             	add    esp,0x10
c001df3f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df45:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df4c:	85 db                	test   ebx,ebx
c001df4e:	0f 84 ec 00 00 00    	je     c001e040 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001df54:	51                   	push   ecx
c001df55:	51                   	push   ecx
c001df56:	52                   	push   edx
c001df57:	50                   	push   eax
c001df58:	e8 8f ea ff ff       	call   c001c9ec <IDE::waitInterrupt(unsigned char)>
c001df5d:	83 c4 10             	add    esp,0x10
c001df60:	84 c0                	test   al,al
c001df62:	0f 84 d4 fe ff ff    	je     c001de3c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001df68:	56                   	push   esi
c001df69:	56                   	push   esi
c001df6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df71:	50                   	push   eax
c001df72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df78:	e8 db e8 ff ff       	call   c001c858 <IDE::prepareInterrupt(unsigned char)>
c001df7d:	83 c4 0c             	add    esp,0xc
c001df80:	6a 04                	push   0x4
c001df82:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df89:	50                   	push   eax
c001df8a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df90:	e8 a9 e9 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001df95:	83 c4 0c             	add    esp,0xc
c001df98:	89 c6                	mov    esi,eax
c001df9a:	6a 05                	push   0x5
c001df9c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dfa3:	50                   	push   eax
c001dfa4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfaa:	e8 8f e9 ff ff       	call   c001c93e <IDE::read(unsigned char, unsigned char)>
c001dfaf:	89 f1                	mov    ecx,esi
c001dfb1:	0f b6 c0             	movzx  eax,al
c001dfb4:	0f b6 f1             	movzx  esi,cl
c001dfb7:	c1 e0 08             	shl    eax,0x8
c001dfba:	09 c6                	or     esi,eax
c001dfbc:	d1 fe                	sar    esi,1
c001dfbe:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dfc2:	83 c4 10             	add    esp,0x10
c001dfc5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001dfca:	74 41                	je     c001e00d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001dfcc:	31 c9                	xor    ecx,ecx
c001dfce:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dfd4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dfdb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dfdf:	75 0a                	jne    c001dfeb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dfe1:	01 c9                	add    ecx,ecx
c001dfe3:	01 cd                	add    ebp,ecx
c001dfe5:	4b                   	dec    ebx
c001dfe6:	e9 54 ff ff ff       	jmp    c001df3f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dfeb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dff0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dff4:	51                   	push   ecx
c001dff5:	51                   	push   ecx
c001dff6:	52                   	push   edx
c001dff7:	50                   	push   eax
c001dff8:	e8 6f e8 ff ff       	call   c001c86c <IDE::getBase(unsigned char)>
c001dffd:	89 c2                	mov    edx,eax
c001dfff:	89 f0                	mov    eax,esi
c001e001:	66 ef                	out    dx,ax
c001e003:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e007:	83 c4 10             	add    esp,0x10
c001e00a:	41                   	inc    ecx
c001e00b:	eb c1                	jmp    c001dfce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001e00d:	31 f6                	xor    esi,esi
c001e00f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e015:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e01c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001e020:	75 06                	jne    c001e028 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001e022:	01 f6                	add    esi,esi
c001e024:	01 f5                	add    ebp,esi
c001e026:	eb bd                	jmp    c001dfe5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001e028:	51                   	push   ecx
c001e029:	51                   	push   ecx
c001e02a:	52                   	push   edx
c001e02b:	50                   	push   eax
c001e02c:	e8 3b e8 ff ff       	call   c001c86c <IDE::getBase(unsigned char)>
c001e031:	89 c2                	mov    edx,eax
c001e033:	66 ed                	in     ax,dx
c001e035:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	46                   	inc    esi
c001e03e:	eb cf                	jmp    c001e00f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001e040:	51                   	push   ecx
c001e041:	51                   	push   ecx
c001e042:	52                   	push   edx
c001e043:	50                   	push   eax
c001e044:	e8 a3 e9 ff ff       	call   c001c9ec <IDE::waitInterrupt(unsigned char)>
c001e049:	83 c4 10             	add    esp,0x10
c001e04c:	84 c0                	test   al,al
c001e04e:	0f 84 e8 fd ff ff    	je     c001de3c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e054:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e059:	52                   	push   edx
c001e05a:	52                   	push   edx
c001e05b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e062:	50                   	push   eax
c001e063:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e069:	e8 ea e7 ff ff       	call   c001c858 <IDE::prepareInterrupt(unsigned char)>
c001e06e:	83 c4 10             	add    esp,0x10
c001e071:	50                   	push   eax
c001e072:	50                   	push   eax
c001e073:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e07a:	50                   	push   eax
c001e07b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e081:	e8 e6 e7 ff ff       	call   c001c86c <IDE::getBase(unsigned char)>
c001e086:	8d 50 07             	lea    edx,[eax+0x7]
c001e089:	ec                   	in     al,dx
c001e08a:	83 c4 10             	add    esp,0x10
c001e08d:	a8 88                	test   al,0x88
c001e08f:	74 0a                	je     c001e09b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001e091:	4b                   	dec    ebx
c001e092:	75 dd                	jne    c001e071 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001e094:	bb 02 00 00 00       	mov    ebx,0x2
c001e099:	eb 02                	jmp    c001e09d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001e09b:	31 db                	xor    ebx,ebx
c001e09d:	83 c4 1c             	add    esp,0x1c
c001e0a0:	89 d8                	mov    eax,ebx
c001e0a2:	5b                   	pop    ebx
c001e0a3:	5e                   	pop    esi
c001e0a4:	5f                   	pop    edi
c001e0a5:	5d                   	pop    ebp
c001e0a6:	c3                   	ret    
c001e0a7:	90                   	nop

c001e0a8 <ATAPI::diskRemoved()>:
c001e0a8:	53                   	push   ebx
c001e0a9:	83 ec 14             	sub    esp,0x14
c001e0ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e0b0:	68 f4 33 02 c0       	push   0xc00233f4
c001e0b5:	e8 07 e6 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001e0ba:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e0c1:	c7 04 24 0a 34 02 c0 	mov    DWORD PTR [esp],0xc002340a
c001e0c8:	e8 f4 e5 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001e0cd:	58                   	pop    eax
c001e0ce:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e0d4:	e8 17 0d ff ff       	call   c000edf0 <LogicalDisk::unmount()>
c001e0d9:	c7 04 24 19 34 02 c0 	mov    DWORD PTR [esp],0xc0023419
c001e0e0:	e8 dc e5 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001e0e5:	5a                   	pop    edx
c001e0e6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0ec:	e8 47 16 ff ff       	call   c000f738 <VCache::writeWriteBuffer()>
c001e0f1:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e0f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0fb:	83 c4 18             	add    esp,0x18
c001e0fe:	5b                   	pop    ebx
c001e0ff:	e9 24 16 ff ff       	jmp    c000f728 <VCache::invalidateReadBuffer()>

c001e104 <ATAPI::eject()>:
c001e104:	57                   	push   edi
c001e105:	b9 03 00 00 00       	mov    ecx,0x3
c001e10a:	53                   	push   ebx
c001e10b:	83 ec 14             	sub    esp,0x14
c001e10e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e112:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e116:	fc                   	cld    
c001e117:	31 c0                	xor    eax,eax
c001e119:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e11b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e120:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e125:	50                   	push   eax
c001e126:	50                   	push   eax
c001e127:	6a 00                	push   0x0
c001e129:	6a 00                	push   0x0
c001e12b:	6a 00                	push   0x0
c001e12d:	6a 02                	push   0x2
c001e12f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e133:	50                   	push   eax
c001e134:	53                   	push   ebx
c001e135:	e8 ae fc ff ff       	call   c001dde8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e13a:	83 c4 14             	add    esp,0x14
c001e13d:	53                   	push   ebx
c001e13e:	e8 65 ff ff ff       	call   c001e0a8 <ATAPI::diskRemoved()>
c001e143:	83 c4 24             	add    esp,0x24
c001e146:	31 c0                	xor    eax,eax
c001e148:	5b                   	pop    ebx
c001e149:	5f                   	pop    edi
c001e14a:	c3                   	ret    
c001e14b:	90                   	nop

c001e14c <ATAPI::diskInserted()>:
c001e14c:	83 ec 18             	sub    esp,0x18
c001e14f:	68 2d 35 02 c0       	push   0xc002352d
c001e154:	e8 68 e5 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001e159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e15d:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e164:	83 c4 1c             	add    esp,0x1c
c001e167:	c3                   	ret    

c001e168 <ATAPI::detectMedia()>:
c001e168:	56                   	push   esi
c001e169:	53                   	push   ebx
c001e16a:	83 ec 28             	sub    esp,0x28
c001e16d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e171:	6a 0c                	push   0xc
c001e173:	6a 00                	push   0x0
c001e175:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e179:	56                   	push   esi
c001e17a:	e8 29 23 fe ff       	call   c00004a8 <memset>
c001e17f:	58                   	pop    eax
c001e180:	5a                   	pop    edx
c001e181:	6a 00                	push   0x0
c001e183:	6a 00                	push   0x0
c001e185:	6a 00                	push   0x0
c001e187:	6a 00                	push   0x0
c001e189:	56                   	push   esi
c001e18a:	53                   	push   ebx
c001e18b:	e8 58 fc ff ff       	call   c001dde8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e190:	83 c4 1c             	add    esp,0x1c
c001e193:	6a 0c                	push   0xc
c001e195:	6a 00                	push   0x0
c001e197:	56                   	push   esi
c001e198:	e8 0b 23 fe ff       	call   c00004a8 <memset>
c001e19d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e1a2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e1a7:	59                   	pop    ecx
c001e1a8:	58                   	pop    eax
c001e1a9:	6a 01                	push   0x1
c001e1ab:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e1af:	50                   	push   eax
c001e1b0:	6a 00                	push   0x0
c001e1b2:	6a 12                	push   0x12
c001e1b4:	56                   	push   esi
c001e1b5:	53                   	push   ebx
c001e1b6:	e8 2d fc ff ff       	call   c001dde8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e1bb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e1bf:	83 c4 20             	add    esp,0x20
c001e1c2:	83 e0 7f             	and    eax,0x7f
c001e1c5:	3c 70                	cmp    al,0x70
c001e1c7:	74 15                	je     c001e1de <ATAPI::detectMedia()+0x76>
c001e1c9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e1d0:	75 0c                	jne    c001e1de <ATAPI::detectMedia()+0x76>
c001e1d2:	83 ec 0c             	sub    esp,0xc
c001e1d5:	53                   	push   ebx
c001e1d6:	e8 71 ff ff ff       	call   c001e14c <ATAPI::diskInserted()>
c001e1db:	83 c4 10             	add    esp,0x10
c001e1de:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e1e2:	83 e0 0f             	and    eax,0xf
c001e1e5:	3c 02                	cmp    al,0x2
c001e1e7:	75 1b                	jne    c001e204 <ATAPI::detectMedia()+0x9c>
c001e1e9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e1ee:	75 2d                	jne    c001e21d <ATAPI::detectMedia()+0xb5>
c001e1f0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e1f7:	74 24                	je     c001e21d <ATAPI::detectMedia()+0xb5>
c001e1f9:	83 ec 0c             	sub    esp,0xc
c001e1fc:	53                   	push   ebx
c001e1fd:	e8 a6 fe ff ff       	call   c001e0a8 <ATAPI::diskRemoved()>
c001e202:	eb 16                	jmp    c001e21a <ATAPI::detectMedia()+0xb2>
c001e204:	84 c0                	test   al,al
c001e206:	75 15                	jne    c001e21d <ATAPI::detectMedia()+0xb5>
c001e208:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e20f:	75 0c                	jne    c001e21d <ATAPI::detectMedia()+0xb5>
c001e211:	83 ec 0c             	sub    esp,0xc
c001e214:	53                   	push   ebx
c001e215:	e8 32 ff ff ff       	call   c001e14c <ATAPI::diskInserted()>
c001e21a:	83 c4 10             	add    esp,0x10
c001e21d:	83 c4 24             	add    esp,0x24
c001e220:	5b                   	pop    ebx
c001e221:	5e                   	pop    esi
c001e222:	c3                   	ret    
c001e223:	90                   	nop

c001e224 <ATAPI::open(int, int, void*)>:
c001e224:	56                   	push   esi
c001e225:	53                   	push   ebx
c001e226:	50                   	push   eax
c001e227:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e22b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e22f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e233:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e239:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e23f:	c1 e0 06             	shl    eax,0x6
c001e242:	01 d0                	add    eax,edx
c001e244:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e24b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e251:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e258:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e262:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e268:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e26f:	6a 04                	push   0x4
c001e271:	6a 0c                	push   0xc
c001e273:	51                   	push   ecx
c001e274:	52                   	push   edx
c001e275:	e8 04 e6 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e27a:	90                   	nop
c001e27b:	90                   	nop
c001e27c:	6a 00                	push   0x0
c001e27e:	6a 0c                	push   0xc
c001e280:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e287:	50                   	push   eax
c001e288:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e28e:	e8 eb e5 ff ff       	call   c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e293:	83 c4 14             	add    esp,0x14
c001e296:	68 74 01 00 00       	push   0x174
c001e29b:	e8 df b4 fe ff       	call   c000977f <malloc>
c001e2a0:	83 c4 0c             	add    esp,0xc
c001e2a3:	89 c6                	mov    esi,eax
c001e2a5:	6a 00                	push   0x0
c001e2a7:	68 ff ff ff 7f       	push   0x7fffffff
c001e2ac:	6a 00                	push   0x0
c001e2ae:	6a 00                	push   0x0
c001e2b0:	53                   	push   ebx
c001e2b1:	68 0a 36 02 c0       	push   0xc002360a
c001e2b6:	50                   	push   eax
c001e2b7:	e8 40 09 ff ff       	call   c000ebfc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e2bc:	83 c4 14             	add    esp,0x14
c001e2bf:	56                   	push   esi
c001e2c0:	e8 ed 09 ff ff       	call   c000ecb2 <LogicalDisk::assignDriveLetter()>
c001e2c5:	5a                   	pop    edx
c001e2c6:	0f be c0             	movsx  eax,al
c001e2c9:	59                   	pop    ecx
c001e2ca:	50                   	push   eax
c001e2cb:	68 27 34 02 c0       	push   0xc0023427
c001e2d0:	e8 ec e3 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001e2d5:	58                   	pop    eax
c001e2d6:	5a                   	pop    edx
c001e2d7:	56                   	push   esi
c001e2d8:	53                   	push   ebx
c001e2d9:	e8 60 f8 fe ff       	call   c000db3e <Device::addChild(Device*)>
c001e2de:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e2e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2e7:	e8 f2 fc fe ff       	call   c000dfde <PhysicalDisk::startCache()>
c001e2ec:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e2f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2f6:	e8 6d fe ff ff       	call   c001e168 <ATAPI::detectMedia()>
c001e2fb:	83 c4 14             	add    esp,0x14
c001e2fe:	31 c0                	xor    eax,eax
c001e300:	5b                   	pop    ebx
c001e301:	5e                   	pop    esi
c001e302:	c3                   	ret    
c001e303:	90                   	nop

c001e304 <ATAPI::read(unsigned long long, int, void*)>:
c001e304:	55                   	push   ebp
c001e305:	57                   	push   edi
c001e306:	56                   	push   esi
c001e307:	53                   	push   ebx
c001e308:	83 ec 1c             	sub    esp,0x1c
c001e30b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e30f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e313:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e317:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001e31e:	74 41                	je     c001e361 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001e320:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e324:	b9 03 00 00 00       	mov    ecx,0x3
c001e329:	fc                   	cld    
c001e32a:	31 c0                	xor    eax,eax
c001e32c:	86 fb                	xchg   bl,bh
c001e32e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e330:	c1 c3 10             	rol    ebx,0x10
c001e333:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e338:	89 e8                	mov    eax,ebp
c001e33a:	86 fb                	xchg   bl,bh
c001e33c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e340:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001e344:	50                   	push   eax
c001e345:	50                   	push   eax
c001e346:	55                   	push   ebp
c001e347:	c1 e5 0b             	shl    ebp,0xb
c001e34a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e34e:	6a 00                	push   0x0
c001e350:	55                   	push   ebp
c001e351:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e355:	50                   	push   eax
c001e356:	56                   	push   esi
c001e357:	e8 8c fa ff ff       	call   c001dde8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e35c:	83 c4 20             	add    esp,0x20
c001e35f:	eb 1a                	jmp    c001e37b <ATAPI::read(unsigned long long, int, void*)+0x77>
c001e361:	83 ec 0c             	sub    esp,0xc
c001e364:	56                   	push   esi
c001e365:	e8 fe fd ff ff       	call   c001e168 <ATAPI::detectMedia()>
c001e36a:	83 c4 10             	add    esp,0x10
c001e36d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001e374:	75 aa                	jne    c001e320 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e376:	b8 02 00 00 00       	mov    eax,0x2
c001e37b:	83 c4 1c             	add    esp,0x1c
c001e37e:	5b                   	pop    ebx
c001e37f:	5e                   	pop    esi
c001e380:	5f                   	pop    edi
c001e381:	5d                   	pop    ebp
c001e382:	c3                   	ret    
c001e383:	90                   	nop

c001e384 <SATA::close(int, int, void*)>:
c001e384:	83 ec 0c             	sub    esp,0xc
c001e387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e38b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e391:	85 c0                	test   eax,eax
c001e393:	74 0c                	je     c001e3a1 <SATA::close(int, int, void*)+0x1d>
c001e395:	83 ec 0c             	sub    esp,0xc
c001e398:	8b 10                	mov    edx,DWORD PTR [eax]
c001e39a:	50                   	push   eax
c001e39b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e39e:	83 c4 10             	add    esp,0x10
c001e3a1:	31 c0                	xor    eax,eax
c001e3a3:	83 c4 0c             	add    esp,0xc
c001e3a6:	c3                   	ret    
c001e3a7:	90                   	nop

c001e3a8 <SATA::powerSaving(PowerSavingLevel)>:
c001e3a8:	c3                   	ret    
c001e3a9:	90                   	nop

c001e3aa <SATA::open(int, int, void*)>:
c001e3aa:	56                   	push   esi
c001e3ab:	53                   	push   ebx
c001e3ac:	50                   	push   eax
c001e3ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e3b5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e3bf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e3c5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e3cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3d3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e3dd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e3e3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e3ea:	e8 c3 b7 fe ff       	call   c0009bb2 <Phys::allocatePage()>
c001e3ef:	89 c6                	mov    esi,eax
c001e3f1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e3f7:	81 c6 00 10 00 00    	add    esi,0x1000
c001e3fd:	e8 b0 b7 fe ff       	call   c0009bb2 <Phys::allocatePage()>
c001e402:	39 c6                	cmp    esi,eax
c001e404:	74 10                	je     c001e416 <SATA::open(int, int, void*)+0x6c>
c001e406:	83 ec 0c             	sub    esp,0xc
c001e409:	68 6c 34 02 c0       	push   0xc002346c
c001e40e:	e8 f0 41 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001e413:	83 c4 10             	add    esp,0x10
c001e416:	83 ec 0c             	sub    esp,0xc
c001e419:	6a 02                	push   0x2
c001e41b:	e8 45 cf fe ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c001e420:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e426:	6a 03                	push   0x3
c001e428:	50                   	push   eax
c001e429:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e42f:	ff 35 94 40 02 c0    	push   DWORD PTR ds:0xc0024094
c001e435:	e8 96 d5 fe ff       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e43a:	83 c4 14             	add    esp,0x14
c001e43d:	53                   	push   ebx
c001e43e:	e8 9b fb fe ff       	call   c000dfde <PhysicalDisk::startCache()>
c001e443:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e446:	e8 27 0c ff ff       	call   c000f072 <createPartitionsForDisk(PhysicalDisk*)>
c001e44b:	83 c4 14             	add    esp,0x14
c001e44e:	31 c0                	xor    eax,eax
c001e450:	5b                   	pop    ebx
c001e451:	5e                   	pop    esi
c001e452:	c3                   	ret    
c001e453:	90                   	nop

c001e454 <SATA::SATA()>:
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45b:	83 ec 04             	sub    esp,0x4
c001e45e:	68 00 02 00 00       	push   0x200
c001e463:	68 80 34 02 c0       	push   0xc0023480
c001e468:	50                   	push   eax
c001e469:	e8 08 fb fe ff       	call   c000df76 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e46e:	83 c4 10             	add    esp,0x10
c001e471:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c001e476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47a:	89 10                	mov    DWORD PTR [eax],edx
c001e47c:	90                   	nop
c001e47d:	83 c4 0c             	add    esp,0xc
c001e480:	c3                   	ret    
c001e481:	90                   	nop

c001e482 <SATA::access(unsigned long long, int, void*, bool)>:
c001e482:	55                   	push   ebp
c001e483:	57                   	push   edi
c001e484:	56                   	push   esi
c001e485:	53                   	push   ebx
c001e486:	83 ec 2c             	sub    esp,0x2c
c001e489:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e48d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e491:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e495:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e499:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e49d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e4a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4a6:	7e 10                	jle    c001e4b8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001e4a8:	83 ec 0c             	sub    esp,0xc
c001e4ab:	68 90 34 02 c0       	push   0xc0023490
c001e4b0:	e8 4e 41 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001e4b5:	83 c4 10             	add    esp,0x10
c001e4b8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e4be:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e4c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e4ce:	89 d0                	mov    eax,edx
c001e4d0:	c1 e0 07             	shl    eax,0x7
c001e4d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e4d7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e4e1:	51                   	push   ecx
c001e4e2:	8d 42 02             	lea    eax,[edx+0x2]
c001e4e5:	51                   	push   ecx
c001e4e6:	c1 e0 07             	shl    eax,0x7
c001e4e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e4ed:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4f1:	50                   	push   eax
c001e4f2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e4f8:	e8 15 ef ff ff       	call   c001d412 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e501:	83 c4 10             	add    esp,0x10
c001e504:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e509:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e50d:	0f 84 4f 01 00 00    	je     c001e662 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001e513:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e517:	c1 e0 09             	shl    eax,0x9
c001e51a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e51f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e523:	74 0e                	je     c001e533 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001e525:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e52b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e52f:	89 c1                	mov    ecx,eax
c001e531:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e533:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e537:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e53d:	8d 42 02             	lea    eax,[edx+0x2]
c001e540:	c1 e0 07             	shl    eax,0x7
c001e543:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e547:	8b 00                	mov    eax,DWORD PTR [eax]
c001e549:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e54f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e555:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e559:	c1 e1 05             	shl    ecx,0x5
c001e55c:	01 c8                	add    eax,ecx
c001e55e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001e562:	83 e1 01             	and    ecx,0x1
c001e565:	89 ce                	mov    esi,ecx
c001e567:	8a 08                	mov    cl,BYTE PTR [eax]
c001e569:	c1 e6 06             	shl    esi,0x6
c001e56c:	83 e1 bf             	and    ecx,0xffffffbf
c001e56f:	09 f1                	or     ecx,esi
c001e571:	88 08                	mov    BYTE PTR [eax],cl
c001e573:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e575:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e57b:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e581:	89 08                	mov    DWORD PTR [eax],ecx
c001e583:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e589:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e58f:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e595:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e598:	50                   	push   eax
c001e599:	68 90 00 00 00       	push   0x90
c001e59e:	6a 00                	push   0x0
c001e5a0:	56                   	push   esi
c001e5a1:	e8 02 1f fe ff       	call   c00004a8 <memset>
c001e5a6:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e5ac:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001e5b0:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e5b6:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e5ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e5be:	83 c4 10             	add    esp,0x10
c001e5c1:	48                   	dec    eax
c001e5c2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e5c7:	89 c1                	mov    ecx,eax
c001e5c9:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e5cf:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e5d4:	09 c8                	or     eax,ecx
c001e5d6:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e5dc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e5df:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001e5e6:	66 25 00 7f          	and    ax,0x7f00
c001e5ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e5ee:	66 0d 27 80          	or     ax,0x8027
c001e5f2:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001e5f7:	66 89 06             	mov    WORD PTR [esi],ax
c001e5fa:	19 c0                	sbb    eax,eax
c001e5fc:	83 e0 f0             	and    eax,0xfffffff0
c001e5ff:	83 c0 35             	add    eax,0x35
c001e602:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e605:	89 e8                	mov    eax,ebp
c001e607:	c1 e8 10             	shr    eax,0x10
c001e60a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e60d:	89 e8                	mov    eax,ebp
c001e60f:	c1 e8 18             	shr    eax,0x18
c001e612:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e615:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e619:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e61c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e620:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e623:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e627:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e62b:	89 d6                	mov    esi,edx
c001e62d:	31 c0                	xor    eax,eax
c001e62f:	c1 e6 07             	shl    esi,0x7
c001e632:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001e636:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e63c:	80 e1 88             	and    cl,0x88
c001e63f:	74 0a                	je     c001e64b <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001e641:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e646:	74 0a                	je     c001e652 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001e648:	40                   	inc    eax
c001e649:	eb eb                	jmp    c001e636 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001e64b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e650:	75 17                	jne    c001e669 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001e652:	83 ec 0c             	sub    esp,0xc
c001e655:	68 c9 34 02 c0       	push   0xc00234c9
c001e65a:	e8 62 e0 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001e65f:	83 c4 10             	add    esp,0x10
c001e662:	b8 01 00 00 00       	mov    eax,0x1
c001e667:	eb 5d                	jmp    c001e6c6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001e669:	b8 01 00 00 00       	mov    eax,0x1
c001e66e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e672:	c1 e2 07             	shl    edx,0x7
c001e675:	d3 e0                	shl    eax,cl
c001e677:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001e67b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e681:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e687:	85 c8                	test   eax,ecx
c001e689:	74 16                	je     c001e6a1 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001e68b:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e691:	0f ba e1 1e          	bt     ecx,0x1e
c001e695:	73 ea                	jae    c001e681 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001e697:	83 ec 0c             	sub    esp,0xc
c001e69a:	68 d7 34 02 c0       	push   0xc00234d7
c001e69f:	eb b9                	jmp    c001e65a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e6a1:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e6a7:	0f ba e0 1e          	bt     eax,0x1e
c001e6ab:	72 b5                	jb     c001e662 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001e6ad:	31 c0                	xor    eax,eax
c001e6af:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e6b4:	75 10                	jne    c001e6c6 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001e6b6:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e6bc:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e6c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e6c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e6c6:	83 c4 2c             	add    esp,0x2c
c001e6c9:	5b                   	pop    ebx
c001e6ca:	5e                   	pop    esi
c001e6cb:	5f                   	pop    edi
c001e6cc:	5d                   	pop    ebp
c001e6cd:	c3                   	ret    

c001e6ce <SATA::read(unsigned long long, int, void*)>:
c001e6ce:	57                   	push   edi
c001e6cf:	b8 04 00 00 00       	mov    eax,0x4
c001e6d4:	56                   	push   esi
c001e6d5:	53                   	push   ebx
c001e6d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e6de:	8d 7a ff             	lea    edi,[edx-0x1]
c001e6e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e6e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e6e9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e6ef:	77 25                	ja     c001e716 <SATA::read(unsigned long long, int, void*)+0x48>
c001e6f1:	b8 06 00 00 00       	mov    eax,0x6
c001e6f6:	85 f6                	test   esi,esi
c001e6f8:	74 1c                	je     c001e716 <SATA::read(unsigned long long, int, void*)+0x48>
c001e6fa:	50                   	push   eax
c001e6fb:	50                   	push   eax
c001e6fc:	6a 00                	push   0x0
c001e6fe:	56                   	push   esi
c001e6ff:	52                   	push   edx
c001e700:	53                   	push   ebx
c001e701:	51                   	push   ecx
c001e702:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e706:	e8 77 fd ff ff       	call   c001e482 <SATA::access(unsigned long long, int, void*, bool)>
c001e70b:	83 c4 20             	add    esp,0x20
c001e70e:	85 c0                	test   eax,eax
c001e710:	0f 95 c0             	setne  al
c001e713:	0f b6 c0             	movzx  eax,al
c001e716:	5b                   	pop    ebx
c001e717:	5e                   	pop    esi
c001e718:	5f                   	pop    edi
c001e719:	c3                   	ret    

c001e71a <SATA::write(unsigned long long, int, void*)>:
c001e71a:	55                   	push   ebp
c001e71b:	b8 04 00 00 00       	mov    eax,0x4
c001e720:	57                   	push   edi
c001e721:	56                   	push   esi
c001e722:	53                   	push   ebx
c001e723:	83 ec 0c             	sub    esp,0xc
c001e726:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e72a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e72e:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e731:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e735:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e739:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e73f:	77 3d                	ja     c001e77e <SATA::write(unsigned long long, int, void*)+0x64>
c001e741:	b8 06 00 00 00       	mov    eax,0x6
c001e746:	85 ed                	test   ebp,ebp
c001e748:	74 34                	je     c001e77e <SATA::write(unsigned long long, int, void*)+0x64>
c001e74a:	c1 e3 09             	shl    ebx,0x9
c001e74d:	01 eb                	add    ebx,ebp
c001e74f:	89 d6                	mov    esi,edx
c001e751:	89 cf                	mov    edi,ecx
c001e753:	83 c6 01             	add    esi,0x1
c001e756:	83 d7 00             	adc    edi,0x0
c001e759:	50                   	push   eax
c001e75a:	50                   	push   eax
c001e75b:	6a 01                	push   0x1
c001e75d:	55                   	push   ebp
c001e75e:	81 c5 00 02 00 00    	add    ebp,0x200
c001e764:	6a 01                	push   0x1
c001e766:	51                   	push   ecx
c001e767:	52                   	push   edx
c001e768:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e76c:	e8 11 fd ff ff       	call   c001e482 <SATA::access(unsigned long long, int, void*, bool)>
c001e771:	83 c4 20             	add    esp,0x20
c001e774:	89 f2                	mov    edx,esi
c001e776:	89 f9                	mov    ecx,edi
c001e778:	39 dd                	cmp    ebp,ebx
c001e77a:	75 d3                	jne    c001e74f <SATA::write(unsigned long long, int, void*)+0x35>
c001e77c:	31 c0                	xor    eax,eax
c001e77e:	83 c4 0c             	add    esp,0xc
c001e781:	5b                   	pop    ebx
c001e782:	5e                   	pop    esi
c001e783:	5f                   	pop    edi
c001e784:	5d                   	pop    ebp
c001e785:	c3                   	ret    

c001e786 <SATAPI::write(unsigned long long, int, void*)>:
c001e786:	b8 03 00 00 00       	mov    eax,0x3
c001e78b:	c3                   	ret    

c001e78c <SATAPI::close(int, int, void*)>:
c001e78c:	83 ec 0c             	sub    esp,0xc
c001e78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e793:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e799:	85 c0                	test   eax,eax
c001e79b:	74 0c                	je     c001e7a9 <SATAPI::close(int, int, void*)+0x1d>
c001e79d:	83 ec 0c             	sub    esp,0xc
c001e7a0:	8b 10                	mov    edx,DWORD PTR [eax]
c001e7a2:	50                   	push   eax
c001e7a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e7a6:	83 c4 10             	add    esp,0x10
c001e7a9:	31 c0                	xor    eax,eax
c001e7ab:	83 c4 0c             	add    esp,0xc
c001e7ae:	c3                   	ret    
c001e7af:	90                   	nop

c001e7b0 <SATAPI::SATAPI()>:
c001e7b0:	83 ec 0c             	sub    esp,0xc
c001e7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b7:	83 ec 04             	sub    esp,0x4
c001e7ba:	68 00 08 00 00       	push   0x800
c001e7bf:	68 20 35 02 c0       	push   0xc0023520
c001e7c4:	50                   	push   eax
c001e7c5:	e8 ac f7 fe ff       	call   c000df76 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e7ca:	83 c4 10             	add    esp,0x10
c001e7cd:	ba 5c 36 02 c0       	mov    edx,0xc002365c
c001e7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d6:	89 10                	mov    DWORD PTR [eax],edx
c001e7d8:	90                   	nop
c001e7d9:	83 c4 0c             	add    esp,0xc
c001e7dc:	c3                   	ret    
c001e7dd:	90                   	nop

c001e7de <SATAPI::diskRemoved()>:
c001e7de:	c3                   	ret    
c001e7df:	90                   	nop

c001e7e0 <SATAPI::diskInserted()>:
c001e7e0:	83 ec 18             	sub    esp,0x18
c001e7e3:	68 2c 35 02 c0       	push   0xc002352c
c001e7e8:	e8 d4 de fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001e7ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7f1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e7f8:	83 c4 1c             	add    esp,0x1c
c001e7fb:	c3                   	ret    

c001e7fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e7fc:	55                   	push   ebp
c001e7fd:	57                   	push   edi
c001e7fe:	56                   	push   esi
c001e7ff:	53                   	push   ebx
c001e800:	83 ec 38             	sub    esp,0x38
c001e803:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e807:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001e80b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e80f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e813:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e817:	68 44 35 02 c0       	push   0xc0023544
c001e81c:	e8 a0 de fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001e821:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e827:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e82d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e831:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e837:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e83b:	c1 e0 07             	shl    eax,0x7
c001e83e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001e842:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e846:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e850:	5a                   	pop    edx
c001e851:	59                   	pop    ecx
c001e852:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e856:	8d 58 02             	lea    ebx,[eax+0x2]
c001e859:	c1 e3 07             	shl    ebx,0x7
c001e85c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001e860:	53                   	push   ebx
c001e861:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e867:	e8 a6 eb ff ff       	call   c001d412 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e86c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e870:	83 c4 10             	add    esp,0x10
c001e873:	b8 01 00 00 00       	mov    eax,0x1
c001e878:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e87d:	0f 84 ff 01 00 00    	je     c001ea82 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001e883:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e889:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e88b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e891:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e897:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e89b:	c1 e1 05             	shl    ecx,0x5
c001e89e:	01 c8                	add    eax,ecx
c001e8a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e8a2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e8a8:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e8ae:	89 08                	mov    DWORD PTR [eax],ecx
c001e8b0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e8b6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e8bc:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e8c2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e8c5:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e8c8:	50                   	push   eax
c001e8c9:	68 90 00 00 00       	push   0x90
c001e8ce:	6a 00                	push   0x0
c001e8d0:	53                   	push   ebx
c001e8d1:	e8 d2 1b fe ff       	call   c00004a8 <memset>
c001e8d6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e8da:	b9 0c 00 00 00       	mov    ecx,0xc
c001e8df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e8e1:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e8e7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e8eb:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e8f1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e8f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e8f9:	48                   	dec    eax
c001e8fa:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e8ff:	89 c1                	mov    ecx,eax
c001e901:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e907:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e90c:	09 c8                	or     eax,ecx
c001e90e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e914:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e917:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001e91e:	66 25 00 7f          	and    ax,0x7f00
c001e922:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e926:	66 0d 27 80          	or     ax,0x8027
c001e92a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e92e:	66 89 03             	mov    WORD PTR [ebx],ax
c001e931:	89 d0                	mov    eax,edx
c001e933:	c1 ea 18             	shr    edx,0x18
c001e936:	c1 e8 10             	shr    eax,0x10
c001e939:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e93c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e93f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e943:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e946:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e94a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e94d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e951:	83 c4 10             	add    esp,0x10
c001e954:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e958:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e95c:	31 c0                	xor    eax,eax
c001e95e:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e964:	80 e1 88             	and    cl,0x88
c001e967:	74 0a                	je     c001e973 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001e969:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e96e:	74 0a                	je     c001e97a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001e970:	40                   	inc    eax
c001e971:	eb eb                	jmp    c001e95e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001e973:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e978:	75 0a                	jne    c001e984 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e97a:	83 ec 0c             	sub    esp,0xc
c001e97d:	68 5e 35 02 c0       	push   0xc002355e
c001e982:	eb 43                	jmp    c001e9c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001e984:	be 01 00 00 00       	mov    esi,0x1
c001e989:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e98d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e991:	d3 e6                	shl    esi,cl
c001e993:	c1 e7 07             	shl    edi,0x7
c001e996:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e99c:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c001e9a1:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e9a5:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e9ab:	85 c6                	test   esi,eax
c001e9ad:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e9b3:	0f 84 96 00 00 00    	je     c001ea4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c001e9b9:	0f ba e0 1e          	bt     eax,0x1e
c001e9bd:	73 1a                	jae    c001e9d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c001e9bf:	83 ec 0c             	sub    esp,0xc
c001e9c2:	68 73 35 02 c0       	push   0xc0023573
c001e9c7:	e8 f5 dc fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001e9cc:	83 c4 10             	add    esp,0x10
c001e9cf:	b8 01 00 00 00       	mov    eax,0x1
c001e9d4:	e9 a9 00 00 00       	jmp    c001ea82 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001e9d9:	83 fb 0d             	cmp    ebx,0xd
c001e9dc:	77 12                	ja     c001e9f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c001e9de:	83 ec 0c             	sub    esp,0xc
c001e9e1:	68 c8 00 00 00       	push   0xc8
c001e9e6:	e8 45 74 ff ff       	call   c0015e30 <milliTenthSleep(unsigned int)>
c001e9eb:	83 c4 10             	add    esp,0x10
c001e9ee:	eb 2a                	jmp    c001ea1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001e9f0:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c001e9f6:	83 f8 0d             	cmp    eax,0xd
c001e9f9:	77 0a                	ja     c001ea05 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c001e9fb:	83 ec 0c             	sub    esp,0xc
c001e9fe:	68 58 02 00 00       	push   0x258
c001ea03:	eb 28                	jmp    c001ea2d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001ea05:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c001ea0b:	83 f8 0d             	cmp    eax,0xd
c001ea0e:	77 0a                	ja     c001ea1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c001ea10:	83 ec 0c             	sub    esp,0xc
c001ea13:	68 dc 05 00 00       	push   0x5dc
c001ea18:	eb 13                	jmp    c001ea2d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c001ea1a:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c001ea20:	83 f8 0d             	cmp    eax,0xd
c001ea23:	77 10                	ja     c001ea35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c001ea25:	83 ec 0c             	sub    esp,0xc
c001ea28:	68 c4 09 00 00       	push   0x9c4
c001ea2d:	e8 fe 73 ff ff       	call   c0015e30 <milliTenthSleep(unsigned int)>
c001ea32:	83 c4 10             	add    esp,0x10
c001ea35:	43                   	inc    ebx
c001ea36:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c001ea3c:	0f 85 63 ff ff ff    	jne    c001e9a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c001ea42:	83 ec 0c             	sub    esp,0xc
c001ea45:	68 86 35 02 c0       	push   0xc0023586
c001ea4a:	e9 78 ff ff ff       	jmp    c001e9c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001ea4f:	0f ba e0 1e          	bt     eax,0x1e
c001ea53:	73 0d                	jae    c001ea62 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001ea55:	83 ec 0c             	sub    esp,0xc
c001ea58:	68 9a 35 02 c0       	push   0xc002359a
c001ea5d:	e9 65 ff ff ff       	jmp    c001e9c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c001ea62:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ea67:	74 17                	je     c001ea80 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001ea69:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ea6e:	74 10                	je     c001ea80 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c001ea70:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ea76:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ea7a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ea7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ea80:	31 c0                	xor    eax,eax
c001ea82:	83 c4 2c             	add    esp,0x2c
c001ea85:	5b                   	pop    ebx
c001ea86:	5e                   	pop    esi
c001ea87:	5f                   	pop    edi
c001ea88:	5d                   	pop    ebp
c001ea89:	c3                   	ret    

c001ea8a <SATAPI::eject()>:
c001ea8a:	57                   	push   edi
c001ea8b:	b9 03 00 00 00       	mov    ecx,0x3
c001ea90:	83 ec 18             	sub    esp,0x18
c001ea93:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ea97:	fc                   	cld    
c001ea98:	31 c0                	xor    eax,eax
c001ea9a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ea9c:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001eaa1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001eaa6:	50                   	push   eax
c001eaa7:	6a 00                	push   0x0
c001eaa9:	6a 00                	push   0x0
c001eaab:	6a 00                	push   0x0
c001eaad:	6a 00                	push   0x0
c001eaaf:	6a 02                	push   0x2
c001eab1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001eab5:	50                   	push   eax
c001eab6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001eaba:	e8 3d fd ff ff       	call   c001e7fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001eabf:	31 c0                	xor    eax,eax
c001eac1:	83 c4 38             	add    esp,0x38
c001eac4:	5f                   	pop    edi
c001eac5:	c3                   	ret    

c001eac6 <SATAPI::detectMedia()>:
c001eac6:	56                   	push   esi
c001eac7:	53                   	push   ebx
c001eac8:	83 ec 30             	sub    esp,0x30
c001eacb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001eacf:	68 af 35 02 c0       	push   0xc00235af
c001ead4:	e8 e8 db fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001ead9:	83 c4 0c             	add    esp,0xc
c001eadc:	6a 0c                	push   0xc
c001eade:	6a 00                	push   0x0
c001eae0:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001eae4:	56                   	push   esi
c001eae5:	e8 be 19 fe ff       	call   c00004a8 <memset>
c001eaea:	83 c4 0c             	add    esp,0xc
c001eaed:	6a 00                	push   0x0
c001eaef:	6a 00                	push   0x0
c001eaf1:	6a 00                	push   0x0
c001eaf3:	6a 00                	push   0x0
c001eaf5:	6a 00                	push   0x0
c001eaf7:	56                   	push   esi
c001eaf8:	53                   	push   ebx
c001eaf9:	e8 fe fc ff ff       	call   c001e7fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001eafe:	83 c4 20             	add    esp,0x20
c001eb01:	48                   	dec    eax
c001eb02:	74 34                	je     c001eb38 <SATAPI::detectMedia()+0x72>
c001eb04:	50                   	push   eax
c001eb05:	6a 0c                	push   0xc
c001eb07:	6a 00                	push   0x0
c001eb09:	56                   	push   esi
c001eb0a:	e8 99 19 fe ff       	call   c00004a8 <memset>
c001eb0f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001eb14:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001eb19:	83 c4 0c             	add    esp,0xc
c001eb1c:	6a 01                	push   0x1
c001eb1e:	8d 44 24 16          	lea    eax,[esp+0x16]
c001eb22:	50                   	push   eax
c001eb23:	6a 00                	push   0x0
c001eb25:	6a 00                	push   0x0
c001eb27:	6a 12                	push   0x12
c001eb29:	56                   	push   esi
c001eb2a:	53                   	push   ebx
c001eb2b:	e8 cc fc ff ff       	call   c001e7fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001eb30:	83 c4 20             	add    esp,0x20
c001eb33:	48                   	dec    eax
c001eb34:	75 39                	jne    c001eb6f <SATAPI::detectMedia()+0xa9>
c001eb36:	eb 1e                	jmp    c001eb56 <SATAPI::detectMedia()+0x90>
c001eb38:	83 ec 0c             	sub    esp,0xc
c001eb3b:	68 c3 35 02 c0       	push   0xc00235c3
c001eb40:	e8 7c db fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001eb45:	83 c4 10             	add    esp,0x10
c001eb48:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001eb4f:	74 b3                	je     c001eb04 <SATAPI::detectMedia()+0x3e>
c001eb51:	e9 93 00 00 00       	jmp    c001ebe9 <SATAPI::detectMedia()+0x123>
c001eb56:	83 ec 0c             	sub    esp,0xc
c001eb59:	68 cd 35 02 c0       	push   0xc00235cd
c001eb5e:	e8 5e db fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001eb63:	83 c4 10             	add    esp,0x10
c001eb66:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001eb6d:	75 7a                	jne    c001ebe9 <SATAPI::detectMedia()+0x123>
c001eb6f:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001eb73:	83 e0 7f             	and    eax,0x7f
c001eb76:	3c 70                	cmp    al,0x70
c001eb78:	74 25                	je     c001eb9f <SATAPI::detectMedia()+0xd9>
c001eb7a:	83 ec 0c             	sub    esp,0xc
c001eb7d:	68 d7 35 02 c0       	push   0xc00235d7
c001eb82:	e8 3a db fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001eb87:	83 c4 10             	add    esp,0x10
c001eb8a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001eb91:	75 0c                	jne    c001eb9f <SATAPI::detectMedia()+0xd9>
c001eb93:	83 ec 0c             	sub    esp,0xc
c001eb96:	53                   	push   ebx
c001eb97:	e8 44 fc ff ff       	call   c001e7e0 <SATAPI::diskInserted()>
c001eb9c:	83 c4 10             	add    esp,0x10
c001eb9f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eba3:	83 e0 0f             	and    eax,0xf
c001eba6:	3c 02                	cmp    al,0x2
c001eba8:	75 16                	jne    c001ebc0 <SATAPI::detectMedia()+0xfa>
c001ebaa:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ebaf:	75 38                	jne    c001ebe9 <SATAPI::detectMedia()+0x123>
c001ebb1:	83 ec 0c             	sub    esp,0xc
c001ebb4:	68 e0 35 02 c0       	push   0xc00235e0
c001ebb9:	e8 03 db fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001ebbe:	eb 26                	jmp    c001ebe6 <SATAPI::detectMedia()+0x120>
c001ebc0:	84 c0                	test   al,al
c001ebc2:	75 25                	jne    c001ebe9 <SATAPI::detectMedia()+0x123>
c001ebc4:	83 ec 0c             	sub    esp,0xc
c001ebc7:	68 e9 35 02 c0       	push   0xc00235e9
c001ebcc:	e8 f0 da fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001ebd1:	83 c4 10             	add    esp,0x10
c001ebd4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001ebdb:	75 0c                	jne    c001ebe9 <SATAPI::detectMedia()+0x123>
c001ebdd:	83 ec 0c             	sub    esp,0xc
c001ebe0:	53                   	push   ebx
c001ebe1:	e8 fa fb ff ff       	call   c001e7e0 <SATAPI::diskInserted()>
c001ebe6:	83 c4 10             	add    esp,0x10
c001ebe9:	83 c4 24             	add    esp,0x24
c001ebec:	5b                   	pop    ebx
c001ebed:	5e                   	pop    esi
c001ebee:	c3                   	ret    
c001ebef:	90                   	nop

c001ebf0 <SATAPI::open(int, int, void*)>:
c001ebf0:	56                   	push   esi
c001ebf1:	53                   	push   ebx
c001ebf2:	51                   	push   ecx
c001ebf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ebfb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ec05:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ec0b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ec15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ec19:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ec23:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ec29:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ec30:	e8 7d af fe ff       	call   c0009bb2 <Phys::allocatePage()>
c001ec35:	89 c6                	mov    esi,eax
c001ec37:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ec3d:	81 c6 00 10 00 00    	add    esi,0x1000
c001ec43:	e8 6a af fe ff       	call   c0009bb2 <Phys::allocatePage()>
c001ec48:	39 c6                	cmp    esi,eax
c001ec4a:	74 10                	je     c001ec5c <SATAPI::open(int, int, void*)+0x6c>
c001ec4c:	83 ec 0c             	sub    esp,0xc
c001ec4f:	68 f3 35 02 c0       	push   0xc00235f3
c001ec54:	e8 aa 39 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001ec59:	83 c4 10             	add    esp,0x10
c001ec5c:	83 ec 0c             	sub    esp,0xc
c001ec5f:	6a 02                	push   0x2
c001ec61:	e8 ff c6 fe ff       	call   c000b365 <Virt::allocateKernelVirtualPages(int)>
c001ec66:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ec6c:	6a 03                	push   0x3
c001ec6e:	50                   	push   eax
c001ec6f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ec75:	ff 35 94 40 02 c0    	push   DWORD PTR ds:0xc0024094
c001ec7b:	e8 50 cd fe ff       	call   c000b9d0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ec80:	83 c4 14             	add    esp,0x14
c001ec83:	68 74 01 00 00       	push   0x174
c001ec88:	e8 f2 aa fe ff       	call   c000977f <malloc>
c001ec8d:	83 c4 0c             	add    esp,0xc
c001ec90:	89 c6                	mov    esi,eax
c001ec92:	6a 00                	push   0x0
c001ec94:	68 ff ff ff 7f       	push   0x7fffffff
c001ec99:	6a 00                	push   0x0
c001ec9b:	6a 00                	push   0x0
c001ec9d:	53                   	push   ebx
c001ec9e:	68 09 36 02 c0       	push   0xc0023609
c001eca3:	50                   	push   eax
c001eca4:	e8 53 ff fe ff       	call   c000ebfc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001eca9:	83 c4 14             	add    esp,0x14
c001ecac:	56                   	push   esi
c001ecad:	e8 00 00 ff ff       	call   c000ecb2 <LogicalDisk::assignDriveLetter()>
c001ecb2:	5a                   	pop    edx
c001ecb3:	0f be c0             	movsx  eax,al
c001ecb6:	59                   	pop    ecx
c001ecb7:	50                   	push   eax
c001ecb8:	68 27 34 02 c0       	push   0xc0023427
c001ecbd:	e8 ff d9 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001ecc2:	58                   	pop    eax
c001ecc3:	5a                   	pop    edx
c001ecc4:	56                   	push   esi
c001ecc5:	53                   	push   ebx
c001ecc6:	e8 73 ee fe ff       	call   c000db3e <Device::addChild(Device*)>
c001eccb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ecd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ecd4:	e8 05 f3 fe ff       	call   c000dfde <PhysicalDisk::startCache()>
c001ecd9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ece0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ece3:	e8 de fd ff ff       	call   c001eac6 <SATAPI::detectMedia()>
c001ece8:	83 c4 14             	add    esp,0x14
c001eceb:	31 c0                	xor    eax,eax
c001eced:	5b                   	pop    ebx
c001ecee:	5e                   	pop    esi
c001ecef:	c3                   	ret    

c001ecf0 <SATAPI::read(unsigned long long, int, void*)>:
c001ecf0:	55                   	push   ebp
c001ecf1:	57                   	push   edi
c001ecf2:	56                   	push   esi
c001ecf3:	53                   	push   ebx
c001ecf4:	83 ec 48             	sub    esp,0x48
c001ecf7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ecfb:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001ecff:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c001ed03:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001ed07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ed0b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ed0f:	68 17 36 02 c0       	push   0xc0023617
c001ed14:	e8 a8 d9 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001ed19:	83 c4 10             	add    esp,0x10
c001ed1c:	83 fb 04             	cmp    ebx,0x4
c001ed1f:	7e 10                	jle    c001ed31 <SATAPI::read(unsigned long long, int, void*)+0x41>
c001ed21:	83 ec 0c             	sub    esp,0xc
c001ed24:	68 28 36 02 c0       	push   0xc0023628
c001ed29:	e8 d5 38 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001ed2e:	83 c4 10             	add    esp,0x10
c001ed31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001ed35:	31 ed                	xor    ebp,ebp
c001ed37:	b9 03 00 00 00       	mov    ecx,0x3
c001ed3c:	fc                   	cld    
c001ed3d:	89 e8                	mov    eax,ebp
c001ed3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ed41:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c001ed46:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001ed4b:	50                   	push   eax
c001ed4c:	6a 00                	push   0x0
c001ed4e:	6a 00                	push   0x0
c001ed50:	6a 00                	push   0x0
c001ed52:	6a 00                	push   0x0
c001ed54:	6a 02                	push   0x2
c001ed56:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ed5a:	50                   	push   eax
c001ed5b:	56                   	push   esi
c001ed5c:	e8 9b fa ff ff       	call   c001e7fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ed61:	8d 7c 24 44          	lea    edi,[esp+0x44]
c001ed65:	89 e8                	mov    eax,ebp
c001ed67:	b9 03 00 00 00       	mov    ecx,0x3
c001ed6c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ed6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ed72:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c001ed76:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c001ed7b:	86 e0                	xchg   al,ah
c001ed7d:	c1 c0 10             	rol    eax,0x10
c001ed80:	86 e0                	xchg   al,ah
c001ed82:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c001ed86:	83 c4 1c             	add    esp,0x1c
c001ed89:	53                   	push   ebx
c001ed8a:	c1 e3 0b             	shl    ebx,0xb
c001ed8d:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001ed91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ed95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ed99:	53                   	push   ebx
c001ed9a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ed9e:	50                   	push   eax
c001ed9f:	56                   	push   esi
c001eda0:	e8 57 fa ff ff       	call   c001e7fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001eda5:	83 c4 20             	add    esp,0x20
c001eda8:	85 c0                	test   eax,eax
c001edaa:	74 14                	je     c001edc0 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c001edac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001edb0:	83 ec 0c             	sub    esp,0xc
c001edb3:	56                   	push   esi
c001edb4:	e8 0d fd ff ff       	call   c001eac6 <SATAPI::detectMedia()>
c001edb9:	83 c4 10             	add    esp,0x10
c001edbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001edc0:	83 c4 3c             	add    esp,0x3c
c001edc3:	5b                   	pop    ebx
c001edc4:	5e                   	pop    esi
c001edc5:	5f                   	pop    edi
c001edc6:	5d                   	pop    ebp
c001edc7:	c3                   	ret    

c001edc8 <IOAPIC::close(int, int, void*)>:
c001edc8:	b8 00 00 00 00       	mov    eax,0x0
c001edcd:	c3                   	ret    

c001edce <apicGetBase()>:
c001edce:	55                   	push   ebp
c001edcf:	89 e5                	mov    ebp,esp
c001edd1:	83 ec 18             	sub    esp,0x18
c001edd4:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c001edd9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001eddf:	83 e0 08             	and    eax,0x8
c001ede2:	84 c0                	test   al,al
c001ede4:	75 07                	jne    c001eded <apicGetBase()+0x1f>
c001ede6:	b8 00 00 00 00       	mov    eax,0x0
c001edeb:	eb 21                	jmp    c001ee0e <apicGetBase()+0x40>
c001eded:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c001edf2:	83 ec 08             	sub    esp,0x8
c001edf5:	6a 1b                	push   0x1b
c001edf7:	50                   	push   eax
c001edf8:	e8 45 9f fe ff       	call   c0008d42 <Computer::rdmsr(unsigned int)>
c001edfd:	83 c4 10             	add    esp,0x10
c001ee00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ee03:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ee06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee09:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ee0e:	c9                   	leave  
c001ee0f:	c3                   	ret    

c001ee10 <IOAPIC::IOAPIC()>:
c001ee10:	83 ec 0c             	sub    esp,0xc
c001ee13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee17:	83 ec 08             	sub    esp,0x8
c001ee1a:	68 8c 36 02 c0       	push   0xc002368c
c001ee1f:	50                   	push   eax
c001ee20:	e8 1d ef fe ff       	call   c000dd42 <Device::Device(char const*)>
c001ee25:	83 c4 10             	add    esp,0x10
c001ee28:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c001ee2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee31:	89 10                	mov    DWORD PTR [eax],edx
c001ee33:	90                   	nop
c001ee34:	83 c4 0c             	add    esp,0xc
c001ee37:	c3                   	ret    

c001ee38 <apicOpen()>:
c001ee38:	55                   	push   ebp
c001ee39:	89 e5                	mov    ebp,esp
c001ee3b:	53                   	push   ebx
c001ee3c:	83 ec 34             	sub    esp,0x34
c001ee3f:	a0 20 7f 02 c0       	mov    al,ds:0xc0027f20
c001ee44:	83 f0 01             	xor    eax,0x1
c001ee47:	84 c0                	test   al,al
c001ee49:	0f 84 91 00 00 00    	je     c001eee0 <apicOpen()+0xa8>
c001ee4f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ee53:	a0 80 68 02 c0       	mov    al,ds:0xc0026880
c001ee58:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001ee5b:	73 7c                	jae    c001eed9 <apicOpen()+0xa1>
c001ee5d:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ee64:	83 ec 0c             	sub    esp,0xc
c001ee67:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ee6a:	e8 10 a9 fe ff       	call   c000977f <malloc>
c001ee6f:	83 c4 10             	add    esp,0x10
c001ee72:	89 c3                	mov    ebx,eax
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	53                   	push   ebx
c001ee78:	e8 93 ff ff ff       	call   c001ee10 <IOAPIC::IOAPIC()>
c001ee7d:	83 c4 10             	add    esp,0x10
c001ee80:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ee83:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ee87:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ee8a:	89 14 85 00 7f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8100],edx
c001ee91:	a1 e0 7e 02 c0       	mov    eax,ds:0xc0027ee0
c001ee96:	40                   	inc    eax
c001ee97:	a3 e0 7e 02 c0       	mov    ds:0xc0027ee0,eax
c001ee9c:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c001eea1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eea7:	83 ec 08             	sub    esp,0x8
c001eeaa:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eead:	50                   	push   eax
c001eeae:	e8 8b ec fe ff       	call   c000db3e <Device::addChild(Device*)>
c001eeb3:	83 c4 10             	add    esp,0x10
c001eeb6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eeb9:	8b 00                	mov    eax,DWORD PTR [eax]
c001eebb:	83 c0 08             	add    eax,0x8
c001eebe:	8b 00                	mov    eax,DWORD PTR [eax]
c001eec0:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eec4:	6a 00                	push   0x0
c001eec6:	6a 00                	push   0x0
c001eec8:	52                   	push   edx
c001eec9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eecc:	ff d0                	call   eax
c001eece:	83 c4 10             	add    esp,0x10
c001eed1:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001eed4:	e9 7a ff ff ff       	jmp    c001ee53 <apicOpen()+0x1b>
c001eed9:	c6 05 20 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027f20,0x1
c001eee0:	e8 e9 fe ff ff       	call   c001edce <apicGetBase()>
c001eee5:	05 f0 00 00 00       	add    eax,0xf0
c001eeea:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eeed:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eef0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eef2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eef5:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eefc:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ef03:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ef06:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ef09:	89 10                	mov    DWORD PTR [eax],edx
c001ef0b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ef12:	a1 d0 67 02 c0       	mov    eax,ds:0xc00267d0
c001ef17:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ef1a:	7d 70                	jge    c001ef8c <apicOpen()+0x154>
c001ef1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ef1f:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c001ef26:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ef29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ef2c:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c001ef33:	c1 e8 08             	shr    eax,0x8
c001ef36:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ef3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ef3d:	8b 04 85 e0 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9820]
c001ef44:	c1 e8 18             	shr    eax,0x18
c001ef47:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ef4a:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001ef4e:	75 37                	jne    c001ef87 <apicOpen()+0x14f>
c001ef50:	e8 79 fe ff ff       	call   c001edce <apicGetBase()>
c001ef55:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ef59:	75 07                	jne    c001ef62 <apicOpen()+0x12a>
c001ef5b:	ba 60 03 00 00       	mov    edx,0x360
c001ef60:	eb 05                	jmp    c001ef67 <apicOpen()+0x12f>
c001ef62:	ba 50 03 00 00       	mov    edx,0x350
c001ef67:	01 d0                	add    eax,edx
c001ef69:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ef6c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ef6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef71:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ef74:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ef7b:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ef7f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ef82:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ef85:	89 10                	mov    DWORD PTR [eax],edx
c001ef87:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001ef8a:	eb 86                	jmp    c001ef12 <apicOpen()+0xda>
c001ef8c:	90                   	nop
c001ef8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ef90:	c9                   	leave  
c001ef91:	c3                   	ret    

c001ef92 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ef92:	55                   	push   ebp
c001ef93:	89 e5                	mov    ebp,esp
c001ef95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ef9e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001efa1:	72 1d                	jb     c001efc0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001efa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efa6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001efac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efaf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001efb5:	01 d0                	add    eax,edx
c001efb7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001efba:	73 04                	jae    c001efc0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001efbc:	b0 01                	mov    al,0x1
c001efbe:	eb 02                	jmp    c001efc2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001efc0:	b0 00                	mov    al,0x0
c001efc2:	5d                   	pop    ebp
c001efc3:	c3                   	ret    

c001efc4 <IOAPIC::read(int)>:
c001efc4:	55                   	push   ebp
c001efc5:	89 e5                	mov    ebp,esp
c001efc7:	83 ec 10             	sub    esp,0x10
c001efca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efcd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001efd3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001efd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001efd9:	0f b6 d0             	movzx  edx,al
c001efdc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001efdf:	89 10                	mov    DWORD PTR [eax],edx
c001efe1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001efe4:	83 c0 10             	add    eax,0x10
c001efe7:	8b 00                	mov    eax,DWORD PTR [eax]
c001efe9:	c9                   	leave  
c001efea:	c3                   	ret    
c001efeb:	90                   	nop

c001efec <IOAPIC::open(int, int, void*)>:
c001efec:	55                   	push   ebp
c001efed:	89 e5                	mov    ebp,esp
c001efef:	57                   	push   edi
c001eff0:	56                   	push   esi
c001eff1:	53                   	push   ebx
c001eff2:	83 ec 0c             	sub    esp,0xc
c001eff5:	83 ec 0c             	sub    esp,0xc
c001eff8:	68 94 36 02 c0       	push   0xc0023694
c001effd:	e8 bf d6 fe ff       	call   c000c6c1 <Dbg::kprintf(char const*, ...)>
c001f002:	83 c4 10             	add    esp,0x10
c001f005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f008:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001f00b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f014:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f01a:	8b 14 85 c0 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9740]
c001f021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f024:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f02a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f02d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f033:	8b 14 85 40 69 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd96c0]
c001f03a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f03d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f046:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001f04c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f04f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f055:	0f b6 f8             	movzx  edi,al
c001f058:	89 d0                	mov    eax,edx
c001f05a:	ba 00 00 00 00       	mov    edx,0x0
c001f05f:	89 c1                	mov    ecx,eax
c001f061:	80 e5 ff             	and    ch,0xff
c001f064:	89 cb                	mov    ebx,ecx
c001f066:	0f b6 f2             	movzx  esi,dl
c001f069:	89 d8                	mov    eax,ebx
c001f06b:	89 f2                	mov    edx,esi
c001f06d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f070:	8d 5f 08             	lea    ebx,[edi+0x8]
c001f073:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f077:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f07b:	83 e0 00             	and    eax,0x0
c001f07e:	09 d0                	or     eax,edx
c001f080:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f087:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f08d:	8d 50 01             	lea    edx,[eax+0x1]
c001f090:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f093:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001f099:	0f b6 d0             	movzx  edx,al
c001f09c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f09f:	83 c2 08             	add    edx,0x8
c001f0a2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f0a6:	0f b6 c9             	movzx  ecx,cl
c001f0a9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f0af:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f0b3:	83 ec 08             	sub    esp,0x8
c001f0b6:	6a 01                	push   0x1
c001f0b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0bb:	e8 04 ff ff ff       	call   c001efc4 <IOAPIC::read(int)>
c001f0c0:	83 c4 10             	add    esp,0x10
c001f0c3:	c1 f8 10             	sar    eax,0x10
c001f0c6:	0f b6 c0             	movzx  eax,al
c001f0c9:	8d 50 01             	lea    edx,[eax+0x1]
c001f0cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f0cf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f0d5:	b8 00 00 00 00       	mov    eax,0x0
c001f0da:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f0dd:	5b                   	pop    ebx
c001f0de:	5e                   	pop    esi
c001f0df:	5f                   	pop    edi
c001f0e0:	5d                   	pop    ebp
c001f0e1:	c3                   	ret    

c001f0e2 <IOAPIC::write(int, int)>:
c001f0e2:	55                   	push   ebp
c001f0e3:	89 e5                	mov    ebp,esp
c001f0e5:	83 ec 10             	sub    esp,0x10
c001f0e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f0eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f0f1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f0f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f0f7:	0f b6 d0             	movzx  edx,al
c001f0fa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f0fd:	89 10                	mov    DWORD PTR [eax],edx
c001f0ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f102:	8d 50 10             	lea    edx,[eax+0x10]
c001f105:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f108:	89 02                	mov    DWORD PTR [edx],eax
c001f10a:	90                   	nop
c001f10b:	c9                   	leave  
c001f10c:	c3                   	ret    
c001f10d:	90                   	nop

c001f10e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f10e:	55                   	push   ebp
c001f10f:	89 e5                	mov    ebp,esp
c001f111:	53                   	push   ebx
c001f112:	83 ec 2c             	sub    esp,0x2c
c001f115:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f118:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f11b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f11e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f121:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f124:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f127:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f12a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f12d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f130:	88 d8                	mov    al,bl
c001f132:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f135:	88 c8                	mov    al,cl
c001f137:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f13a:	88 d0                	mov    al,dl
c001f13c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f13f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f143:	83 c0 08             	add    eax,0x8
c001f146:	01 c0                	add    eax,eax
c001f148:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f14b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f14f:	83 c0 08             	add    eax,0x8
c001f152:	01 c0                	add    eax,eax
c001f154:	40                   	inc    eax
c001f155:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f158:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f15b:	50                   	push   eax
c001f15c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f15f:	e8 60 fe ff ff       	call   c001efc4 <IOAPIC::read(int)>
c001f164:	83 c4 08             	add    esp,0x8
c001f167:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f16a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f171:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f174:	c1 e0 18             	shl    eax,0x18
c001f177:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f17a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f17d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f180:	52                   	push   edx
c001f181:	50                   	push   eax
c001f182:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f185:	e8 58 ff ff ff       	call   c001f0e2 <IOAPIC::write(int, int)>
c001f18a:	83 c4 0c             	add    esp,0xc
c001f18d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f190:	50                   	push   eax
c001f191:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f194:	e8 2b fe ff ff       	call   c001efc4 <IOAPIC::read(int)>
c001f199:	83 c4 08             	add    esp,0x8
c001f19c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f19f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f1a6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f1ad:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f1b4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001f1b8:	74 09                	je     c001f1c3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c001f1ba:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f1c1:	eb 07                	jmp    c001f1ca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c001f1c3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f1ca:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001f1ce:	74 09                	je     c001f1d9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c001f1d0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f1d7:	eb 07                	jmp    c001f1e0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c001f1d9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f1e0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f1e7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f1eb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f1ee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f1f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f1f4:	52                   	push   edx
c001f1f5:	50                   	push   eax
c001f1f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f1f9:	e8 e4 fe ff ff       	call   c001f0e2 <IOAPIC::write(int, int)>
c001f1fe:	83 c4 0c             	add    esp,0xc
c001f201:	90                   	nop
c001f202:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f205:	c9                   	leave  
c001f206:	c3                   	ret    
c001f207:	90                   	nop

c001f208 <APICTimer::close(int, int, void*)>:
c001f208:	b8 00 00 00 00       	mov    eax,0x0
c001f20d:	c3                   	ret    
c001f20e:	66 90                	xchg   ax,ax

c001f210 <apicTimerHandler(regs*, void*)>:
c001f210:	83 ec 0c             	sub    esp,0xc
c001f213:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f217:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f219:	b8 10 27 00 00       	mov    eax,0x2710
c001f21e:	ba 00 00 00 00       	mov    edx,0x0
c001f223:	f7 f1                	div    ecx
c001f225:	83 ec 0c             	sub    esp,0xc
c001f228:	50                   	push   eax
c001f229:	e8 2a 02 ff ff       	call   c000f458 <timerHandler(unsigned int)>
c001f22e:	83 c4 10             	add    esp,0x10
c001f231:	90                   	nop
c001f232:	83 c4 0c             	add    esp,0xc
c001f235:	c3                   	ret    
c001f236:	66 90                	xchg   ax,ax

c001f238 <APICTimer::open(int, int, void*)>:
c001f238:	83 ec 0c             	sub    esp,0xc
c001f23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f241:	83 c0 24             	add    eax,0x24
c001f244:	8b 00                	mov    eax,DWORD PTR [eax]
c001f246:	83 ec 08             	sub    esp,0x8
c001f249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f251:	ff d0                	call   eax
c001f253:	83 c4 10             	add    esp,0x10
c001f256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f25e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f268:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f26c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f272:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f276:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	51                   	push   ecx
c001f280:	6a 01                	push   0x1
c001f282:	68 10 f2 01 c0       	push   0xc001f210
c001f287:	52                   	push   edx
c001f288:	50                   	push   eax
c001f289:	e8 5c e8 fe ff       	call   c000daea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f28e:	83 c4 20             	add    esp,0x20
c001f291:	89 c2                	mov    edx,eax
c001f293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f297:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f29d:	b8 00 00 00 00       	mov    eax,0x0
c001f2a2:	83 c4 0c             	add    esp,0xc
c001f2a5:	c3                   	ret    
c001f2a6:	66 90                	xchg   ax,ax

c001f2a8 <APICTimer::write(int)>:
c001f2a8:	83 ec 0c             	sub    esp,0xc
c001f2ab:	83 ec 0c             	sub    esp,0xc
c001f2ae:	68 d4 36 02 c0       	push   0xc00236d4
c001f2b3:	e8 4b 33 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001f2b8:	83 c4 10             	add    esp,0x10
c001f2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f2c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f2c9:	90                   	nop
c001f2ca:	83 c4 0c             	add    esp,0xc
c001f2cd:	c3                   	ret    
c001f2ce:	66 90                	xchg   ax,ax

c001f2d0 <APICTimer::APICTimer()>:
c001f2d0:	83 ec 0c             	sub    esp,0xc
c001f2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d7:	83 ec 08             	sub    esp,0x8
c001f2da:	68 e4 36 02 c0       	push   0xc00236e4
c001f2df:	50                   	push   eax
c001f2e0:	e8 a7 00 ff ff       	call   c000f38c <Timer::Timer(char const*)>
c001f2e5:	83 c4 10             	add    esp,0x10
c001f2e8:	ba f8 36 02 c0       	mov    edx,0xc00236f8
c001f2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f1:	89 10                	mov    DWORD PTR [eax],edx
c001f2f3:	90                   	nop
c001f2f4:	83 c4 0c             	add    esp,0xc
c001f2f7:	c3                   	ret    

c001f2f8 <PIT::write(int)>:
c001f2f8:	83 ec 10             	sub    esp,0x10
c001f2fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f2ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f303:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f309:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f30d:	a3 24 7f 02 c0       	mov    ds:0xc0027f24,eax
c001f312:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f317:	99                   	cdq    
c001f318:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f31c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f320:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f327:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f32c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f330:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f335:	ee                   	out    dx,al
c001f336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f33a:	0f b6 c0             	movzx  eax,al
c001f33d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f344:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f348:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f34c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f351:	ee                   	out    dx,al
c001f352:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f356:	c1 f8 08             	sar    eax,0x8
c001f359:	0f b6 c0             	movzx  eax,al
c001f35c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f363:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f367:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f36b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f370:	ee                   	out    dx,al
c001f371:	90                   	nop
c001f372:	83 c4 10             	add    esp,0x10
c001f375:	c3                   	ret    
c001f376:	66 90                	xchg   ax,ax

c001f378 <pitHandler(regs*, void*)>:
c001f378:	83 ec 0c             	sub    esp,0xc
c001f37b:	8b 0d 24 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f24
c001f381:	b8 10 27 00 00       	mov    eax,0x2710
c001f386:	99                   	cdq    
c001f387:	f7 f9                	idiv   ecx
c001f389:	83 ec 0c             	sub    esp,0xc
c001f38c:	50                   	push   eax
c001f38d:	e8 c6 00 ff ff       	call   c000f458 <timerHandler(unsigned int)>
c001f392:	83 c4 10             	add    esp,0x10
c001f395:	90                   	nop
c001f396:	83 c4 0c             	add    esp,0xc
c001f399:	c3                   	ret    
c001f39a:	66 90                	xchg   ax,ax

c001f39c <PIT::open(int, int, void*)>:
c001f39c:	83 ec 0c             	sub    esp,0xc
c001f39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3a5:	83 c0 24             	add    eax,0x24
c001f3a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3aa:	83 ec 08             	sub    esp,0x8
c001f3ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3b5:	ff d0                	call   eax
c001f3b7:	83 c4 10             	add    esp,0x10
c001f3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3be:	83 ec 0c             	sub    esp,0xc
c001f3c1:	6a 00                	push   0x0
c001f3c3:	6a 01                	push   0x1
c001f3c5:	68 78 f3 01 c0       	push   0xc001f378
c001f3ca:	6a 00                	push   0x0
c001f3cc:	50                   	push   eax
c001f3cd:	e8 18 e7 fe ff       	call   c000daea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3d2:	83 c4 20             	add    esp,0x20
c001f3d5:	89 c2                	mov    edx,eax
c001f3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3db:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f3e1:	b8 00 00 00 00       	mov    eax,0x0
c001f3e6:	83 c4 0c             	add    esp,0xc
c001f3e9:	c3                   	ret    
c001f3ea:	66 90                	xchg   ax,ax

c001f3ec <PIT::close(int, int, void*)>:
c001f3ec:	83 ec 0c             	sub    esp,0xc
c001f3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f401:	6a 01                	push   0x1
c001f403:	68 78 f3 01 c0       	push   0xc001f378
c001f408:	6a 00                	push   0x0
c001f40a:	50                   	push   eax
c001f40b:	e8 10 e7 fe ff       	call   c000db20 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f410:	83 c4 10             	add    esp,0x10
c001f413:	b8 00 00 00 00       	mov    eax,0x0
c001f418:	83 c4 0c             	add    esp,0xc
c001f41b:	c3                   	ret    

c001f41c <PIT::PIT()>:
c001f41c:	83 ec 0c             	sub    esp,0xc
c001f41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f423:	83 ec 08             	sub    esp,0x8
c001f426:	68 20 37 02 c0       	push   0xc0023720
c001f42b:	50                   	push   eax
c001f42c:	e8 5b ff fe ff       	call   c000f38c <Timer::Timer(char const*)>
c001f431:	83 c4 10             	add    esp,0x10
c001f434:	ba 48 37 02 c0       	mov    edx,0xc0023748
c001f439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f43d:	89 10                	mov    DWORD PTR [eax],edx
c001f43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f443:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f449:	0f b6 d0             	movzx  edx,al
c001f44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f450:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f45b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f461:	0f b6 d0             	movzx  edx,al
c001f464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f468:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f471:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f477:	8d 50 01             	lea    edx,[eax+0x1]
c001f47a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f47e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f484:	0f b6 d0             	movzx  edx,al
c001f487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f48b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f48f:	83 e1 3f             	and    ecx,0x3f
c001f492:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f496:	90                   	nop
c001f497:	83 c4 0c             	add    esp,0xc
c001f49a:	c3                   	ret    
c001f49b:	66 90                	xchg   ax,ax
c001f49d:	66 90                	xchg   ax,ax
c001f49f:	90                   	nop

c001f4a0 <avxDetect>:
c001f4a0:	b8 01 00 00 00       	mov    eax,0x1
c001f4a5:	0f a2                	cpuid  
c001f4a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f4ad:	74 15                	je     c001f4c4 <avxDetect.noAVX>
c001f4af:	b8 01 00 00 00       	mov    eax,0x1
c001f4b4:	0f a2                	cpuid  
c001f4b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f4bc:	74 06                	je     c001f4c4 <avxDetect.noAVX>
c001f4be:	b8 01 00 00 00       	mov    eax,0x1
c001f4c3:	c3                   	ret    

c001f4c4 <avxDetect.noAVX>:
c001f4c4:	b8 00 00 00 00       	mov    eax,0x0
c001f4c9:	c3                   	ret    

c001f4ca <avxSave>:
c001f4ca:	53                   	push   ebx
c001f4cb:	52                   	push   edx
c001f4cc:	31 c0                	xor    eax,eax
c001f4ce:	48                   	dec    eax
c001f4cf:	89 c2                	mov    edx,eax
c001f4d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f4d5:	0f ae 23             	xsave  [ebx]
c001f4d8:	5a                   	pop    edx
c001f4d9:	5b                   	pop    ebx
c001f4da:	c3                   	ret    

c001f4db <avxLoad>:
c001f4db:	53                   	push   ebx
c001f4dc:	52                   	push   edx
c001f4dd:	31 c0                	xor    eax,eax
c001f4df:	48                   	dec    eax
c001f4e0:	89 c2                	mov    edx,eax
c001f4e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f4e6:	0f ae 2b             	xrstor [ebx]
c001f4e9:	5a                   	pop    edx
c001f4ea:	5b                   	pop    ebx
c001f4eb:	c3                   	ret    

c001f4ec <avxInit>:
c001f4ec:	e8 57 02 00 00       	call   c001f748 <sseInit>
c001f4f1:	50                   	push   eax
c001f4f2:	51                   	push   ecx
c001f4f3:	0f 20 e0             	mov    eax,cr4
c001f4f6:	0d 00 00 04 00       	or     eax,0x40000
c001f4fb:	0f 22 e0             	mov    cr4,eax
c001f4fe:	31 c9                	xor    ecx,ecx
c001f500:	0f 01 d0             	xgetbv 
c001f503:	0d 07 00 00 00       	or     eax,0x7
c001f508:	0f 01 d1             	xsetbv 
c001f50b:	59                   	pop    ecx
c001f50c:	58                   	pop    eax
c001f50d:	c3                   	ret    

c001f50e <avxClose>:
c001f50e:	c3                   	ret    

c001f50f <wouldSheSayYes>:
c001f50f:	c3                   	ret    
c001f510:	49                   	dec    ecx
c001f511:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f515:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f519:	75 20                	jne    c001f53b <isr0+0xb>
c001f51b:	4e                   	dec    esi
c001f51c:	79 61                	jns    c001f57f <isr7+0x3>
c001f51e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f523:	66 90                	xchg   ax,ax
c001f525:	66 90                	xchg   ax,ax
c001f527:	66 90                	xchg   ax,ax
c001f529:	66 90                	xchg   ax,ax
c001f52b:	66 90                	xchg   ax,ax
c001f52d:	66 90                	xchg   ax,ax
c001f52f:	90                   	nop

c001f530 <isr0>:
c001f530:	fa                   	cli    
c001f531:	68 00 00 00 00       	push   0x0
c001f536:	68 00 00 00 00       	push   0x0
c001f53b:	e9 44 01 00 00       	jmp    c001f684 <int_common_stub>

c001f540 <isr1>:
c001f540:	fa                   	cli    
c001f541:	6a 00                	push   0x0
c001f543:	6a 01                	push   0x1
c001f545:	e9 3a 01 00 00       	jmp    c001f684 <int_common_stub>

c001f54a <isr2>:
c001f54a:	fa                   	cli    
c001f54b:	6a 00                	push   0x0
c001f54d:	6a 02                	push   0x2
c001f54f:	e9 30 01 00 00       	jmp    c001f684 <int_common_stub>

c001f554 <isr3>:
c001f554:	fa                   	cli    
c001f555:	6a 00                	push   0x0
c001f557:	6a 03                	push   0x3
c001f559:	e9 26 01 00 00       	jmp    c001f684 <int_common_stub>

c001f55e <isr4>:
c001f55e:	fa                   	cli    
c001f55f:	6a 00                	push   0x0
c001f561:	6a 04                	push   0x4
c001f563:	e9 1c 01 00 00       	jmp    c001f684 <int_common_stub>

c001f568 <isr5>:
c001f568:	fa                   	cli    
c001f569:	6a 00                	push   0x0
c001f56b:	6a 05                	push   0x5
c001f56d:	e9 12 01 00 00       	jmp    c001f684 <int_common_stub>

c001f572 <isr6>:
c001f572:	fa                   	cli    
c001f573:	6a 00                	push   0x0
c001f575:	6a 06                	push   0x6
c001f577:	e9 08 01 00 00       	jmp    c001f684 <int_common_stub>

c001f57c <isr7>:
c001f57c:	fa                   	cli    
c001f57d:	6a 00                	push   0x0
c001f57f:	6a 07                	push   0x7
c001f581:	e9 fe 00 00 00       	jmp    c001f684 <int_common_stub>

c001f586 <isr8>:
c001f586:	fa                   	cli    
c001f587:	6a 08                	push   0x8
c001f589:	e9 f6 00 00 00       	jmp    c001f684 <int_common_stub>

c001f58e <isr9>:
c001f58e:	fa                   	cli    
c001f58f:	6a 00                	push   0x0
c001f591:	6a 09                	push   0x9
c001f593:	e9 ec 00 00 00       	jmp    c001f684 <int_common_stub>

c001f598 <isr10>:
c001f598:	fa                   	cli    
c001f599:	6a 0a                	push   0xa
c001f59b:	e9 e4 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5a0 <isr11>:
c001f5a0:	fa                   	cli    
c001f5a1:	6a 0b                	push   0xb
c001f5a3:	e9 dc 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5a8 <isr12>:
c001f5a8:	fa                   	cli    
c001f5a9:	6a 0c                	push   0xc
c001f5ab:	e9 d4 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5b0 <isr13>:
c001f5b0:	fa                   	cli    
c001f5b1:	6a 0d                	push   0xd
c001f5b3:	e9 cc 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5b8 <isr14>:
c001f5b8:	fa                   	cli    
c001f5b9:	6a 0e                	push   0xe
c001f5bb:	e9 c4 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5c0 <isr15>:
c001f5c0:	fa                   	cli    
c001f5c1:	6a 00                	push   0x0
c001f5c3:	6a 0f                	push   0xf
c001f5c5:	e9 ba 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5ca <isr16>:
c001f5ca:	fa                   	cli    
c001f5cb:	6a 00                	push   0x0
c001f5cd:	6a 10                	push   0x10
c001f5cf:	e9 b0 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5d4 <isr17>:
c001f5d4:	fa                   	cli    
c001f5d5:	6a 00                	push   0x0
c001f5d7:	6a 11                	push   0x11
c001f5d9:	e9 a6 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5de <isr18>:
c001f5de:	fa                   	cli    
c001f5df:	6a 00                	push   0x0
c001f5e1:	6a 12                	push   0x12
c001f5e3:	e9 9c 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5e8 <irq3>:
c001f5e8:	fa                   	cli    
c001f5e9:	6a 00                	push   0x0
c001f5eb:	6a 23                	push   0x23
c001f5ed:	e9 92 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5f2 <irq4>:
c001f5f2:	fa                   	cli    
c001f5f3:	6a 00                	push   0x0
c001f5f5:	6a 24                	push   0x24
c001f5f7:	e9 88 00 00 00       	jmp    c001f684 <int_common_stub>

c001f5fc <irq5>:
c001f5fc:	fa                   	cli    
c001f5fd:	6a 00                	push   0x0
c001f5ff:	6a 25                	push   0x25
c001f601:	e9 7e 00 00 00       	jmp    c001f684 <int_common_stub>

c001f606 <irq6>:
c001f606:	fa                   	cli    
c001f607:	6a 00                	push   0x0
c001f609:	6a 26                	push   0x26
c001f60b:	e9 74 00 00 00       	jmp    c001f684 <int_common_stub>

c001f610 <irq7>:
c001f610:	fa                   	cli    
c001f611:	6a 00                	push   0x0
c001f613:	6a 27                	push   0x27
c001f615:	e9 6a 00 00 00       	jmp    c001f684 <int_common_stub>

c001f61a <irq8>:
c001f61a:	fa                   	cli    
c001f61b:	6a 00                	push   0x0
c001f61d:	6a 28                	push   0x28
c001f61f:	e9 60 00 00 00       	jmp    c001f684 <int_common_stub>

c001f624 <irq9>:
c001f624:	fa                   	cli    
c001f625:	6a 00                	push   0x0
c001f627:	6a 29                	push   0x29
c001f629:	e9 56 00 00 00       	jmp    c001f684 <int_common_stub>

c001f62e <irq10>:
c001f62e:	fa                   	cli    
c001f62f:	6a 00                	push   0x0
c001f631:	6a 2a                	push   0x2a
c001f633:	e9 4c 00 00 00       	jmp    c001f684 <int_common_stub>

c001f638 <irq11>:
c001f638:	fa                   	cli    
c001f639:	6a 00                	push   0x0
c001f63b:	6a 2b                	push   0x2b
c001f63d:	e9 42 00 00 00       	jmp    c001f684 <int_common_stub>

c001f642 <irq12>:
c001f642:	fa                   	cli    
c001f643:	6a 00                	push   0x0
c001f645:	6a 2c                	push   0x2c
c001f647:	e9 38 00 00 00       	jmp    c001f684 <int_common_stub>

c001f64c <irq13>:
c001f64c:	fa                   	cli    
c001f64d:	6a 00                	push   0x0
c001f64f:	6a 2d                	push   0x2d
c001f651:	e9 2e 00 00 00       	jmp    c001f684 <int_common_stub>

c001f656 <irq14>:
c001f656:	fa                   	cli    
c001f657:	6a 00                	push   0x0
c001f659:	6a 2e                	push   0x2e
c001f65b:	e9 24 00 00 00       	jmp    c001f684 <int_common_stub>

c001f660 <irq15>:
c001f660:	fa                   	cli    
c001f661:	6a 00                	push   0x0
c001f663:	6a 2f                	push   0x2f
c001f665:	e9 1a 00 00 00       	jmp    c001f684 <int_common_stub>

c001f66a <irq1>:
c001f66a:	fa                   	cli    
c001f66b:	6a 00                	push   0x0
c001f66d:	6a 21                	push   0x21
c001f66f:	eb 13                	jmp    c001f684 <int_common_stub>

c001f671 <irq2>:
c001f671:	fa                   	cli    
c001f672:	6a 00                	push   0x0
c001f674:	6a 22                	push   0x22
c001f676:	eb 0c                	jmp    c001f684 <int_common_stub>

c001f678 <isr96>:
c001f678:	6a 00                	push   0x0
c001f67a:	6a 60                	push   0x60
c001f67c:	fb                   	sti    
c001f67d:	eb 05                	jmp    c001f684 <int_common_stub>

c001f67f <irq0>:
c001f67f:	fa                   	cli    
c001f680:	6a 00                	push   0x0
c001f682:	6a 20                	push   0x20

c001f684 <int_common_stub>:
c001f684:	60                   	pusha  
c001f685:	1e                   	push   ds
c001f686:	06                   	push   es
c001f687:	0f a0                	push   fs
c001f689:	0f a8                	push   gs
c001f68b:	66 b8 10 00          	mov    ax,0x10
c001f68f:	66 8e d8             	mov    ds,ax
c001f692:	66 8e c0             	mov    es,ax
c001f695:	66 8e e0             	mov    fs,ax
c001f698:	66 8e e8             	mov    gs,ax
c001f69b:	54                   	push   esp
c001f69c:	fc                   	cld    
c001f69d:	e8 b2 e9 fe ff       	call   c000e054 <int_handler>
c001f6a2:	81 c4 04 00 00 00    	add    esp,0x4
c001f6a8:	0f a9                	pop    gs
c001f6aa:	0f a1                	pop    fs
c001f6ac:	07                   	pop    es
c001f6ad:	1f                   	pop    ds
c001f6ae:	61                   	popa   
c001f6af:	81 c4 08 00 00 00    	add    esp,0x8
c001f6b5:	cf                   	iret   

c001f6b6 <irq16>:
c001f6b6:	fa                   	cli    
c001f6b7:	6a 00                	push   0x0
c001f6b9:	6a 30                	push   0x30
c001f6bb:	e9 c4 ff ff ff       	jmp    c001f684 <int_common_stub>

c001f6c0 <irq17>:
c001f6c0:	fa                   	cli    
c001f6c1:	6a 00                	push   0x0
c001f6c3:	6a 31                	push   0x31
c001f6c5:	e9 ba ff ff ff       	jmp    c001f684 <int_common_stub>

c001f6ca <irq18>:
c001f6ca:	fa                   	cli    
c001f6cb:	6a 00                	push   0x0
c001f6cd:	6a 32                	push   0x32
c001f6cf:	e9 b0 ff ff ff       	jmp    c001f684 <int_common_stub>

c001f6d4 <irq19>:
c001f6d4:	fa                   	cli    
c001f6d5:	6a 00                	push   0x0
c001f6d7:	6a 33                	push   0x33
c001f6d9:	e9 a6 ff ff ff       	jmp    c001f684 <int_common_stub>

c001f6de <irq20>:
c001f6de:	fa                   	cli    
c001f6df:	6a 00                	push   0x0
c001f6e1:	6a 34                	push   0x34
c001f6e3:	e9 9c ff ff ff       	jmp    c001f684 <int_common_stub>

c001f6e8 <irq21>:
c001f6e8:	fa                   	cli    
c001f6e9:	6a 00                	push   0x0
c001f6eb:	6a 35                	push   0x35
c001f6ed:	e9 92 ff ff ff       	jmp    c001f684 <int_common_stub>

c001f6f2 <irq22>:
c001f6f2:	fa                   	cli    
c001f6f3:	6a 00                	push   0x0
c001f6f5:	6a 36                	push   0x36
c001f6f7:	e9 88 ff ff ff       	jmp    c001f684 <int_common_stub>

c001f6fc <irq23>:
c001f6fc:	fa                   	cli    
c001f6fd:	6a 00                	push   0x0
c001f6ff:	6a 37                	push   0x37
c001f701:	e9 7e ff ff ff       	jmp    c001f684 <int_common_stub>
c001f706:	66 90                	xchg   ax,ax
c001f708:	66 90                	xchg   ax,ax
c001f70a:	66 90                	xchg   ax,ax
c001f70c:	66 90                	xchg   ax,ax
c001f70e:	66 90                	xchg   ax,ax

c001f710 <i386GetRDRAND>:
c001f710:	b9 64 00 00 00       	mov    ecx,0x64

c001f715 <retry>:
c001f715:	0f c7 f0             	rdrand eax
c001f718:	72 05                	jb     c001f71f <retry.done>
c001f71a:	e2 f9                	loop   c001f715 <retry>

c001f71c <retry.fail>:
c001f71c:	31 c0                	xor    eax,eax
c001f71e:	c3                   	ret    

c001f71f <retry.done>:
c001f71f:	c3                   	ret    

c001f720 <absolutelyNoChanceInHell>:
c001f720:	b8 01 00 00 00       	mov    eax,0x1
c001f725:	0f a2                	cpuid  
c001f727:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f72d:	74 06                	je     c001f735 <sseDetect.noSSE>
c001f72f:	b8 01 00 00 00       	mov    eax,0x1
c001f734:	c3                   	ret    

c001f735 <sseDetect.noSSE>:
c001f735:	31 c0                	xor    eax,eax
c001f737:	c3                   	ret    

c001f738 <sseSave>:
c001f738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f73c:	0f ae 00             	fxsave [eax]
c001f73f:	c3                   	ret    

c001f740 <sseLoad>:
c001f740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f744:	0f ae 08             	fxrstor [eax]
c001f747:	c3                   	ret    

c001f748 <sseInit>:
c001f748:	e8 42 00 00 00       	call   c001f78f <x87Init>
c001f74d:	0f 20 e0             	mov    eax,cr4
c001f750:	66 0d 00 06          	or     ax,0x600
c001f754:	0f 22 e0             	mov    cr4,eax
c001f757:	c3                   	ret    

c001f758 <sseClose>:
c001f758:	c3                   	ret    
c001f759:	66 90                	xchg   ax,ax
c001f75b:	66 90                	xchg   ax,ax
c001f75d:	66 90                	xchg   ax,ax
c001f75f:	90                   	nop

c001f760 <value_37F>:
c001f760:	7f 03                	jg     c001f765 <value_37A+0x1>

c001f762 <value_37E>:
c001f762:	7e 03                	jle    c001f767 <x87Detect+0x1>

c001f764 <value_37A>:
c001f764:	7a 03                	jp     c001f769 <x87Detect+0x3>

c001f766 <x87Detect>:
c001f766:	b8 01 00 00 00       	mov    eax,0x1
c001f76b:	0f a2                	cpuid  
c001f76d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f773:	74 06                	je     c001f77b <x87Detect.nox87>
c001f775:	b8 01 00 00 00       	mov    eax,0x1
c001f77a:	c3                   	ret    

c001f77b <x87Detect.nox87>:
c001f77b:	b8 00 00 00 00       	mov    eax,0x0
c001f780:	c3                   	ret    

c001f781 <x87Save>:
c001f781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f785:	dd 30                	fnsave [eax]
c001f787:	c3                   	ret    

c001f788 <x87Load>:
c001f788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f78c:	dd 20                	frstor [eax]
c001f78e:	c3                   	ret    

c001f78f <x87Init>:
c001f78f:	0f 20 c0             	mov    eax,cr0
c001f792:	66 25 fb ff          	and    ax,0xfffb
c001f796:	66 0d 22 00          	or     ax,0x22
c001f79a:	0f 22 c0             	mov    cr0,eax
c001f79d:	db e3                	fninit 
c001f79f:	0f 06                	clts   
c001f7a1:	d9 2d 64 f7 01 c0    	fldcw  WORD PTR ds:0xc001f764
c001f7a7:	c3                   	ret    

c001f7a8 <x87Close>:
c001f7a8:	c3                   	ret    
c001f7a9:	66 90                	xchg   ax,ax
c001f7ab:	90                   	nop

c001f7ac <__do_global_ctors_aux>:
c001f7ac:	a1 70 07 02 c0       	mov    eax,ds:0xc0020770
c001f7b1:	83 f8 ff             	cmp    eax,0xffffffff
c001f7b4:	74 1a                	je     c001f7d0 <__do_global_ctors_aux+0x24>
c001f7b6:	55                   	push   ebp
c001f7b7:	89 e5                	mov    ebp,esp
c001f7b9:	53                   	push   ebx
c001f7ba:	52                   	push   edx
c001f7bb:	bb 70 07 02 c0       	mov    ebx,0xc0020770
c001f7c0:	ff d0                	call   eax
c001f7c2:	83 eb 04             	sub    ebx,0x4
c001f7c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f7c7:	83 f8 ff             	cmp    eax,0xffffffff
c001f7ca:	75 f4                	jne    c001f7c0 <__do_global_ctors_aux+0x14>
c001f7cc:	58                   	pop    eax
c001f7cd:	5b                   	pop    ebx
c001f7ce:	5d                   	pop    ebp
c001f7cf:	c3                   	ret    
c001f7d0:	c3                   	ret    
c001f7d1:	66 90                	xchg   ax,ax
c001f7d3:	90                   	nop

c001f7d4 <__divdi3>:
c001f7d4:	55                   	push   ebp
c001f7d5:	57                   	push   edi
c001f7d6:	56                   	push   esi
c001f7d7:	53                   	push   ebx
c001f7d8:	83 ec 1c             	sub    esp,0x1c
c001f7db:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f7df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f7e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f7ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7f2:	85 db                	test   ebx,ebx
c001f7f4:	0f 88 8e 00 00 00    	js     c001f888 <__divdi3+0xb4>
c001f7fa:	89 dd                	mov    ebp,ebx
c001f7fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f804:	89 d3                	mov    ebx,edx
c001f806:	85 d2                	test   edx,edx
c001f808:	79 0d                	jns    c001f817 <__divdi3+0x43>
c001f80a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f80e:	f7 d8                	neg    eax
c001f810:	83 d2 00             	adc    edx,0x0
c001f813:	f7 da                	neg    edx
c001f815:	89 d3                	mov    ebx,edx
c001f817:	89 c7                	mov    edi,eax
c001f819:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f81c:	85 db                	test   ebx,ebx
c001f81e:	75 48                	jne    c001f868 <__divdi3+0x94>
c001f820:	39 ef                	cmp    edi,ebp
c001f822:	76 24                	jbe    c001f848 <__divdi3+0x74>
c001f824:	89 ea                	mov    edx,ebp
c001f826:	f7 f7                	div    edi
c001f828:	89 c1                	mov    ecx,eax
c001f82a:	31 f6                	xor    esi,esi
c001f82c:	89 c8                	mov    eax,ecx
c001f82e:	89 f2                	mov    edx,esi
c001f830:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f834:	85 c9                	test   ecx,ecx
c001f836:	74 07                	je     c001f83f <__divdi3+0x6b>
c001f838:	f7 d8                	neg    eax
c001f83a:	83 d2 00             	adc    edx,0x0
c001f83d:	f7 da                	neg    edx
c001f83f:	83 c4 1c             	add    esp,0x1c
c001f842:	5b                   	pop    ebx
c001f843:	5e                   	pop    esi
c001f844:	5f                   	pop    edi
c001f845:	5d                   	pop    ebp
c001f846:	c3                   	ret    
c001f847:	90                   	nop
c001f848:	85 ff                	test   edi,edi
c001f84a:	75 0b                	jne    c001f857 <__divdi3+0x83>
c001f84c:	b8 01 00 00 00       	mov    eax,0x1
c001f851:	31 d2                	xor    edx,edx
c001f853:	f7 f3                	div    ebx
c001f855:	89 c7                	mov    edi,eax
c001f857:	31 d2                	xor    edx,edx
c001f859:	89 e8                	mov    eax,ebp
c001f85b:	f7 f7                	div    edi
c001f85d:	89 c6                	mov    esi,eax
c001f85f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f862:	f7 f7                	div    edi
c001f864:	89 c1                	mov    ecx,eax
c001f866:	eb c4                	jmp    c001f82c <__divdi3+0x58>
c001f868:	39 eb                	cmp    ebx,ebp
c001f86a:	77 3c                	ja     c001f8a8 <__divdi3+0xd4>
c001f86c:	0f bd f3             	bsr    esi,ebx
c001f86f:	83 f6 1f             	xor    esi,0x1f
c001f872:	75 40                	jne    c001f8b4 <__divdi3+0xe0>
c001f874:	39 eb                	cmp    ebx,ebp
c001f876:	72 09                	jb     c001f881 <__divdi3+0xad>
c001f878:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f87b:	0f 87 97 00 00 00    	ja     c001f918 <__divdi3+0x144>
c001f881:	b9 01 00 00 00       	mov    ecx,0x1
c001f886:	eb a4                	jmp    c001f82c <__divdi3+0x58>
c001f888:	f7 d9                	neg    ecx
c001f88a:	83 d3 00             	adc    ebx,0x0
c001f88d:	f7 db                	neg    ebx
c001f88f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f892:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f896:	89 dd                	mov    ebp,ebx
c001f898:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f8a0:	e9 5f ff ff ff       	jmp    c001f804 <__divdi3+0x30>
c001f8a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f8a8:	31 f6                	xor    esi,esi
c001f8aa:	31 c9                	xor    ecx,ecx
c001f8ac:	e9 7b ff ff ff       	jmp    c001f82c <__divdi3+0x58>
c001f8b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8b4:	b8 20 00 00 00       	mov    eax,0x20
c001f8b9:	29 f0                	sub    eax,esi
c001f8bb:	89 f1                	mov    ecx,esi
c001f8bd:	d3 e3                	shl    ebx,cl
c001f8bf:	89 fa                	mov    edx,edi
c001f8c1:	88 c1                	mov    cl,al
c001f8c3:	d3 ea                	shr    edx,cl
c001f8c5:	09 da                	or     edx,ebx
c001f8c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f8cb:	89 f1                	mov    ecx,esi
c001f8cd:	d3 e7                	shl    edi,cl
c001f8cf:	89 eb                	mov    ebx,ebp
c001f8d1:	88 c1                	mov    cl,al
c001f8d3:	d3 eb                	shr    ebx,cl
c001f8d5:	89 f1                	mov    ecx,esi
c001f8d7:	d3 e5                	shl    ebp,cl
c001f8d9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f8dc:	88 c1                	mov    cl,al
c001f8de:	d3 ea                	shr    edx,cl
c001f8e0:	09 d5                	or     ebp,edx
c001f8e2:	89 e8                	mov    eax,ebp
c001f8e4:	89 da                	mov    edx,ebx
c001f8e6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f8ea:	89 d3                	mov    ebx,edx
c001f8ec:	89 c5                	mov    ebp,eax
c001f8ee:	f7 e7                	mul    edi
c001f8f0:	39 d3                	cmp    ebx,edx
c001f8f2:	72 18                	jb     c001f90c <__divdi3+0x138>
c001f8f4:	74 0a                	je     c001f900 <__divdi3+0x12c>
c001f8f6:	89 e9                	mov    ecx,ebp
c001f8f8:	31 f6                	xor    esi,esi
c001f8fa:	e9 2d ff ff ff       	jmp    c001f82c <__divdi3+0x58>
c001f8ff:	90                   	nop
c001f900:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f903:	89 f1                	mov    ecx,esi
c001f905:	d3 e7                	shl    edi,cl
c001f907:	39 c7                	cmp    edi,eax
c001f909:	73 eb                	jae    c001f8f6 <__divdi3+0x122>
c001f90b:	90                   	nop
c001f90c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f90f:	31 f6                	xor    esi,esi
c001f911:	e9 16 ff ff ff       	jmp    c001f82c <__divdi3+0x58>
c001f916:	66 90                	xchg   ax,ax
c001f918:	31 c9                	xor    ecx,ecx
c001f91a:	e9 0d ff ff ff       	jmp    c001f82c <__divdi3+0x58>
c001f91f:	90                   	nop

c001f920 <__moddi3>:
c001f920:	55                   	push   ebp
c001f921:	57                   	push   edi
c001f922:	56                   	push   esi
c001f923:	53                   	push   ebx
c001f924:	83 ec 2c             	sub    esp,0x2c
c001f927:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f92b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f92f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f933:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f937:	85 db                	test   ebx,ebx
c001f939:	0f 88 85 00 00 00    	js     c001f9c4 <__moddi3+0xa4>
c001f93f:	89 de                	mov    esi,ebx
c001f941:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f949:	89 d7                	mov    edi,edx
c001f94b:	85 d2                	test   edx,edx
c001f94d:	79 09                	jns    c001f958 <__moddi3+0x38>
c001f94f:	f7 d8                	neg    eax
c001f951:	83 d2 00             	adc    edx,0x0
c001f954:	f7 da                	neg    edx
c001f956:	89 d7                	mov    edi,edx
c001f958:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f95c:	89 cd                	mov    ebp,ecx
c001f95e:	85 ff                	test   edi,edi
c001f960:	75 52                	jne    c001f9b4 <__moddi3+0x94>
c001f962:	89 c3                	mov    ebx,eax
c001f964:	39 f0                	cmp    eax,esi
c001f966:	76 24                	jbe    c001f98c <__moddi3+0x6c>
c001f968:	89 c8                	mov    eax,ecx
c001f96a:	89 f2                	mov    edx,esi
c001f96c:	f7 f3                	div    ebx
c001f96e:	89 d6                	mov    esi,edx
c001f970:	89 f0                	mov    eax,esi
c001f972:	31 d2                	xor    edx,edx
c001f974:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f978:	85 c9                	test   ecx,ecx
c001f97a:	74 07                	je     c001f983 <__moddi3+0x63>
c001f97c:	f7 d8                	neg    eax
c001f97e:	83 d2 00             	adc    edx,0x0
c001f981:	f7 da                	neg    edx
c001f983:	83 c4 2c             	add    esp,0x2c
c001f986:	5b                   	pop    ebx
c001f987:	5e                   	pop    esi
c001f988:	5f                   	pop    edi
c001f989:	5d                   	pop    ebp
c001f98a:	c3                   	ret    
c001f98b:	90                   	nop
c001f98c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f990:	85 db                	test   ebx,ebx
c001f992:	75 0d                	jne    c001f9a1 <__moddi3+0x81>
c001f994:	b8 01 00 00 00       	mov    eax,0x1
c001f999:	31 d2                	xor    edx,edx
c001f99b:	f7 f7                	div    edi
c001f99d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9a1:	89 f0                	mov    eax,esi
c001f9a3:	31 d2                	xor    edx,edx
c001f9a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f9a9:	f7 f7                	div    edi
c001f9ab:	89 e8                	mov    eax,ebp
c001f9ad:	f7 f7                	div    edi
c001f9af:	89 d6                	mov    esi,edx
c001f9b1:	eb bd                	jmp    c001f970 <__moddi3+0x50>
c001f9b3:	90                   	nop
c001f9b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f9b8:	39 f7                	cmp    edi,esi
c001f9ba:	76 20                	jbe    c001f9dc <__moddi3+0xbc>
c001f9bc:	89 c8                	mov    eax,ecx
c001f9be:	89 f2                	mov    edx,esi
c001f9c0:	eb b2                	jmp    c001f974 <__moddi3+0x54>
c001f9c2:	66 90                	xchg   ax,ax
c001f9c4:	f7 d9                	neg    ecx
c001f9c6:	83 d3 00             	adc    ebx,0x0
c001f9c9:	f7 db                	neg    ebx
c001f9cb:	89 de                	mov    esi,ebx
c001f9cd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f9d5:	e9 6f ff ff ff       	jmp    c001f949 <__moddi3+0x29>
c001f9da:	66 90                	xchg   ax,ax
c001f9dc:	0f bd c7             	bsr    eax,edi
c001f9df:	83 f0 1f             	xor    eax,0x1f
c001f9e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f9e6:	75 24                	jne    c001fa0c <__moddi3+0xec>
c001f9e8:	39 f7                	cmp    edi,esi
c001f9ea:	72 06                	jb     c001f9f2 <__moddi3+0xd2>
c001f9ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f9f0:	77 0c                	ja     c001f9fe <__moddi3+0xde>
c001f9f2:	89 e9                	mov    ecx,ebp
c001f9f4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f9f8:	19 fe                	sbb    esi,edi
c001f9fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f9fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa02:	89 f2                	mov    edx,esi
c001fa04:	e9 6b ff ff ff       	jmp    c001f974 <__moddi3+0x54>
c001fa09:	8d 76 00             	lea    esi,[esi+0x0]
c001fa0c:	b8 20 00 00 00       	mov    eax,0x20
c001fa11:	89 c2                	mov    edx,eax
c001fa13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa17:	29 da                	sub    edx,ebx
c001fa19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fa1d:	88 d9                	mov    cl,bl
c001fa1f:	d3 e7                	shl    edi,cl
c001fa21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa25:	88 d1                	mov    cl,dl
c001fa27:	d3 e8                	shr    eax,cl
c001fa29:	09 c7                	or     edi,eax
c001fa2b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001fa2f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fa33:	89 d8                	mov    eax,ebx
c001fa35:	88 d9                	mov    cl,bl
c001fa37:	d3 e7                	shl    edi,cl
c001fa39:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fa3d:	89 f3                	mov    ebx,esi
c001fa3f:	88 d1                	mov    cl,dl
c001fa41:	d3 eb                	shr    ebx,cl
c001fa43:	89 c7                	mov    edi,eax
c001fa45:	88 c1                	mov    cl,al
c001fa47:	d3 e6                	shl    esi,cl
c001fa49:	89 e8                	mov    eax,ebp
c001fa4b:	88 d1                	mov    cl,dl
c001fa4d:	d3 e8                	shr    eax,cl
c001fa4f:	09 f0                	or     eax,esi
c001fa51:	89 f9                	mov    ecx,edi
c001fa53:	d3 e5                	shl    ebp,cl
c001fa55:	89 da                	mov    edx,ebx
c001fa57:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001fa5b:	89 d3                	mov    ebx,edx
c001fa5d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fa61:	89 c6                	mov    esi,eax
c001fa63:	89 d1                	mov    ecx,edx
c001fa65:	39 d3                	cmp    ebx,edx
c001fa67:	72 27                	jb     c001fa90 <__moddi3+0x170>
c001fa69:	74 21                	je     c001fa8c <__moddi3+0x16c>
c001fa6b:	29 f5                	sub    ebp,esi
c001fa6d:	19 cb                	sbb    ebx,ecx
c001fa6f:	89 de                	mov    esi,ebx
c001fa71:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fa75:	d3 e6                	shl    esi,cl
c001fa77:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa7b:	89 f9                	mov    ecx,edi
c001fa7d:	d3 ed                	shr    ebp,cl
c001fa7f:	09 ee                	or     esi,ebp
c001fa81:	89 f0                	mov    eax,esi
c001fa83:	d3 eb                	shr    ebx,cl
c001fa85:	89 da                	mov    edx,ebx
c001fa87:	e9 e8 fe ff ff       	jmp    c001f974 <__moddi3+0x54>
c001fa8c:	39 c5                	cmp    ebp,eax
c001fa8e:	73 db                	jae    c001fa6b <__moddi3+0x14b>
c001fa90:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa94:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fa98:	89 d1                	mov    ecx,edx
c001fa9a:	89 c6                	mov    esi,eax
c001fa9c:	eb cd                	jmp    c001fa6b <__moddi3+0x14b>
c001fa9e:	66 90                	xchg   ax,ax

c001faa0 <__udivdi3>:
c001faa0:	55                   	push   ebp
c001faa1:	57                   	push   edi
c001faa2:	56                   	push   esi
c001faa3:	53                   	push   ebx
c001faa4:	83 ec 1c             	sub    esp,0x1c
c001faa7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001faab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001faaf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fab3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fab7:	85 d2                	test   edx,edx
c001fab9:	75 41                	jne    c001fafc <__udivdi3+0x5c>
c001fabb:	39 f7                	cmp    edi,esi
c001fabd:	76 15                	jbe    c001fad4 <__udivdi3+0x34>
c001fabf:	89 e8                	mov    eax,ebp
c001fac1:	89 f2                	mov    edx,esi
c001fac3:	f7 f7                	div    edi
c001fac5:	31 db                	xor    ebx,ebx
c001fac7:	89 da                	mov    edx,ebx
c001fac9:	83 c4 1c             	add    esp,0x1c
c001facc:	5b                   	pop    ebx
c001facd:	5e                   	pop    esi
c001face:	5f                   	pop    edi
c001facf:	5d                   	pop    ebp
c001fad0:	c3                   	ret    
c001fad1:	8d 76 00             	lea    esi,[esi+0x0]
c001fad4:	89 f9                	mov    ecx,edi
c001fad6:	85 ff                	test   edi,edi
c001fad8:	75 0b                	jne    c001fae5 <__udivdi3+0x45>
c001fada:	b8 01 00 00 00       	mov    eax,0x1
c001fadf:	31 d2                	xor    edx,edx
c001fae1:	f7 f7                	div    edi
c001fae3:	89 c1                	mov    ecx,eax
c001fae5:	31 d2                	xor    edx,edx
c001fae7:	89 f0                	mov    eax,esi
c001fae9:	f7 f1                	div    ecx
c001faeb:	89 c3                	mov    ebx,eax
c001faed:	89 e8                	mov    eax,ebp
c001faef:	f7 f1                	div    ecx
c001faf1:	89 da                	mov    edx,ebx
c001faf3:	83 c4 1c             	add    esp,0x1c
c001faf6:	5b                   	pop    ebx
c001faf7:	5e                   	pop    esi
c001faf8:	5f                   	pop    edi
c001faf9:	5d                   	pop    ebp
c001fafa:	c3                   	ret    
c001fafb:	90                   	nop
c001fafc:	39 f2                	cmp    edx,esi
c001fafe:	77 1c                	ja     c001fb1c <__udivdi3+0x7c>
c001fb00:	0f bd da             	bsr    ebx,edx
c001fb03:	83 f3 1f             	xor    ebx,0x1f
c001fb06:	75 24                	jne    c001fb2c <__udivdi3+0x8c>
c001fb08:	39 f2                	cmp    edx,esi
c001fb0a:	72 08                	jb     c001fb14 <__udivdi3+0x74>
c001fb0c:	39 ef                	cmp    edi,ebp
c001fb0e:	0f 87 84 00 00 00    	ja     c001fb98 <__udivdi3+0xf8>
c001fb14:	b8 01 00 00 00       	mov    eax,0x1
c001fb19:	eb ac                	jmp    c001fac7 <__udivdi3+0x27>
c001fb1b:	90                   	nop
c001fb1c:	31 db                	xor    ebx,ebx
c001fb1e:	31 c0                	xor    eax,eax
c001fb20:	89 da                	mov    edx,ebx
c001fb22:	83 c4 1c             	add    esp,0x1c
c001fb25:	5b                   	pop    ebx
c001fb26:	5e                   	pop    esi
c001fb27:	5f                   	pop    edi
c001fb28:	5d                   	pop    ebp
c001fb29:	c3                   	ret    
c001fb2a:	66 90                	xchg   ax,ax
c001fb2c:	b8 20 00 00 00       	mov    eax,0x20
c001fb31:	29 d8                	sub    eax,ebx
c001fb33:	88 d9                	mov    cl,bl
c001fb35:	d3 e2                	shl    edx,cl
c001fb37:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fb3b:	89 fa                	mov    edx,edi
c001fb3d:	88 c1                	mov    cl,al
c001fb3f:	d3 ea                	shr    edx,cl
c001fb41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb45:	09 d1                	or     ecx,edx
c001fb47:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fb4b:	88 d9                	mov    cl,bl
c001fb4d:	d3 e7                	shl    edi,cl
c001fb4f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fb53:	89 f7                	mov    edi,esi
c001fb55:	88 c1                	mov    cl,al
c001fb57:	d3 ef                	shr    edi,cl
c001fb59:	88 d9                	mov    cl,bl
c001fb5b:	d3 e6                	shl    esi,cl
c001fb5d:	89 ea                	mov    edx,ebp
c001fb5f:	88 c1                	mov    cl,al
c001fb61:	d3 ea                	shr    edx,cl
c001fb63:	09 d6                	or     esi,edx
c001fb65:	89 f0                	mov    eax,esi
c001fb67:	89 fa                	mov    edx,edi
c001fb69:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fb6d:	89 d7                	mov    edi,edx
c001fb6f:	89 c6                	mov    esi,eax
c001fb71:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fb75:	39 d7                	cmp    edi,edx
c001fb77:	72 13                	jb     c001fb8c <__udivdi3+0xec>
c001fb79:	74 09                	je     c001fb84 <__udivdi3+0xe4>
c001fb7b:	89 f0                	mov    eax,esi
c001fb7d:	31 db                	xor    ebx,ebx
c001fb7f:	e9 43 ff ff ff       	jmp    c001fac7 <__udivdi3+0x27>
c001fb84:	88 d9                	mov    cl,bl
c001fb86:	d3 e5                	shl    ebp,cl
c001fb88:	39 c5                	cmp    ebp,eax
c001fb8a:	73 ef                	jae    c001fb7b <__udivdi3+0xdb>
c001fb8c:	8d 46 ff             	lea    eax,[esi-0x1]
c001fb8f:	31 db                	xor    ebx,ebx
c001fb91:	e9 31 ff ff ff       	jmp    c001fac7 <__udivdi3+0x27>
c001fb96:	66 90                	xchg   ax,ax
c001fb98:	31 c0                	xor    eax,eax
c001fb9a:	e9 28 ff ff ff       	jmp    c001fac7 <__udivdi3+0x27>
c001fb9f:	90                   	nop

c001fba0 <__umoddi3>:
c001fba0:	55                   	push   ebp
c001fba1:	57                   	push   edi
c001fba2:	56                   	push   esi
c001fba3:	53                   	push   ebx
c001fba4:	83 ec 1c             	sub    esp,0x1c
c001fba7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fbab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fbaf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fbb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fbb7:	89 da                	mov    edx,ebx
c001fbb9:	85 c0                	test   eax,eax
c001fbbb:	75 37                	jne    c001fbf4 <__umoddi3+0x54>
c001fbbd:	39 df                	cmp    edi,ebx
c001fbbf:	76 13                	jbe    c001fbd4 <__umoddi3+0x34>
c001fbc1:	89 f0                	mov    eax,esi
c001fbc3:	f7 f7                	div    edi
c001fbc5:	89 d0                	mov    eax,edx
c001fbc7:	31 d2                	xor    edx,edx
c001fbc9:	83 c4 1c             	add    esp,0x1c
c001fbcc:	5b                   	pop    ebx
c001fbcd:	5e                   	pop    esi
c001fbce:	5f                   	pop    edi
c001fbcf:	5d                   	pop    ebp
c001fbd0:	c3                   	ret    
c001fbd1:	8d 76 00             	lea    esi,[esi+0x0]
c001fbd4:	89 fd                	mov    ebp,edi
c001fbd6:	85 ff                	test   edi,edi
c001fbd8:	75 0b                	jne    c001fbe5 <__umoddi3+0x45>
c001fbda:	b8 01 00 00 00       	mov    eax,0x1
c001fbdf:	31 d2                	xor    edx,edx
c001fbe1:	f7 f7                	div    edi
c001fbe3:	89 c5                	mov    ebp,eax
c001fbe5:	89 d8                	mov    eax,ebx
c001fbe7:	31 d2                	xor    edx,edx
c001fbe9:	f7 f5                	div    ebp
c001fbeb:	89 f0                	mov    eax,esi
c001fbed:	f7 f5                	div    ebp
c001fbef:	89 d0                	mov    eax,edx
c001fbf1:	eb d4                	jmp    c001fbc7 <__umoddi3+0x27>
c001fbf3:	90                   	nop
c001fbf4:	89 f1                	mov    ecx,esi
c001fbf6:	39 d8                	cmp    eax,ebx
c001fbf8:	76 0a                	jbe    c001fc04 <__umoddi3+0x64>
c001fbfa:	89 f0                	mov    eax,esi
c001fbfc:	83 c4 1c             	add    esp,0x1c
c001fbff:	5b                   	pop    ebx
c001fc00:	5e                   	pop    esi
c001fc01:	5f                   	pop    edi
c001fc02:	5d                   	pop    ebp
c001fc03:	c3                   	ret    
c001fc04:	0f bd e8             	bsr    ebp,eax
c001fc07:	83 f5 1f             	xor    ebp,0x1f
c001fc0a:	75 1c                	jne    c001fc28 <__umoddi3+0x88>
c001fc0c:	39 d8                	cmp    eax,ebx
c001fc0e:	72 04                	jb     c001fc14 <__umoddi3+0x74>
c001fc10:	39 f7                	cmp    edi,esi
c001fc12:	77 08                	ja     c001fc1c <__umoddi3+0x7c>
c001fc14:	89 da                	mov    edx,ebx
c001fc16:	29 fe                	sub    esi,edi
c001fc18:	19 c2                	sbb    edx,eax
c001fc1a:	89 f1                	mov    ecx,esi
c001fc1c:	89 c8                	mov    eax,ecx
c001fc1e:	83 c4 1c             	add    esp,0x1c
c001fc21:	5b                   	pop    ebx
c001fc22:	5e                   	pop    esi
c001fc23:	5f                   	pop    edi
c001fc24:	5d                   	pop    ebp
c001fc25:	c3                   	ret    
c001fc26:	66 90                	xchg   ax,ax
c001fc28:	ba 20 00 00 00       	mov    edx,0x20
c001fc2d:	29 ea                	sub    edx,ebp
c001fc2f:	89 e9                	mov    ecx,ebp
c001fc31:	d3 e0                	shl    eax,cl
c001fc33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc37:	89 f8                	mov    eax,edi
c001fc39:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fc3d:	88 d1                	mov    cl,dl
c001fc3f:	d3 e8                	shr    eax,cl
c001fc41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc45:	09 c1                	or     ecx,eax
c001fc47:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fc4b:	89 e9                	mov    ecx,ebp
c001fc4d:	d3 e7                	shl    edi,cl
c001fc4f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fc53:	89 d8                	mov    eax,ebx
c001fc55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc59:	88 d1                	mov    cl,dl
c001fc5b:	d3 e8                	shr    eax,cl
c001fc5d:	89 c7                	mov    edi,eax
c001fc5f:	89 e9                	mov    ecx,ebp
c001fc61:	d3 e3                	shl    ebx,cl
c001fc63:	89 f0                	mov    eax,esi
c001fc65:	88 d1                	mov    cl,dl
c001fc67:	d3 e8                	shr    eax,cl
c001fc69:	09 d8                	or     eax,ebx
c001fc6b:	89 e9                	mov    ecx,ebp
c001fc6d:	d3 e6                	shl    esi,cl
c001fc6f:	89 f3                	mov    ebx,esi
c001fc71:	89 fa                	mov    edx,edi
c001fc73:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fc77:	89 d1                	mov    ecx,edx
c001fc79:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fc7d:	89 c6                	mov    esi,eax
c001fc7f:	89 d7                	mov    edi,edx
c001fc81:	39 d1                	cmp    ecx,edx
c001fc83:	72 27                	jb     c001fcac <__umoddi3+0x10c>
c001fc85:	74 21                	je     c001fca8 <__umoddi3+0x108>
c001fc87:	89 ca                	mov    edx,ecx
c001fc89:	29 f3                	sub    ebx,esi
c001fc8b:	19 fa                	sbb    edx,edi
c001fc8d:	89 d0                	mov    eax,edx
c001fc8f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fc93:	d3 e0                	shl    eax,cl
c001fc95:	89 e9                	mov    ecx,ebp
c001fc97:	d3 eb                	shr    ebx,cl
c001fc99:	09 d8                	or     eax,ebx
c001fc9b:	d3 ea                	shr    edx,cl
c001fc9d:	83 c4 1c             	add    esp,0x1c
c001fca0:	5b                   	pop    ebx
c001fca1:	5e                   	pop    esi
c001fca2:	5f                   	pop    edi
c001fca3:	5d                   	pop    ebp
c001fca4:	c3                   	ret    
c001fca5:	8d 76 00             	lea    esi,[esi+0x0]
c001fca8:	39 c3                	cmp    ebx,eax
c001fcaa:	73 db                	jae    c001fc87 <__umoddi3+0xe7>
c001fcac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fcb0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fcb4:	89 d7                	mov    edi,edx
c001fcb6:	89 c6                	mov    esi,eax
c001fcb8:	eb cd                	jmp    c001fc87 <__umoddi3+0xe7>

Disassembly of section .init:

c001fcba <_init>:
c001fcba:	55                   	push   ebp
c001fcbb:	89 e5                	mov    ebp,esp
c001fcbd:	e8 56 04 fe ff       	call   c0000118 <frame_dummy>
c001fcc2:	e8 e5 fa ff ff       	call   c001f7ac <__do_global_ctors_aux>
c001fcc7:	5d                   	pop    ebp
c001fcc8:	c3                   	ret    

Disassembly of section .fini:

c001fcc9 <_fini>:
c001fcc9:	55                   	push   ebp
c001fcca:	89 e5                	mov    ebp,esp
c001fccc:	e8 d7 03 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001fcd1:	5d                   	pop    ebp
c001fcd2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fcd4 <Computer::~Computer()>:
c001fcd4:	83 ec 0c             	sub    esp,0xc
c001fcd7:	ba f0 0f 02 c0       	mov    edx,0xc0020ff0
c001fcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce0:	89 10                	mov    DWORD PTR [eax],edx
c001fce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce6:	83 ec 0c             	sub    esp,0xc
c001fce9:	50                   	push   eax
c001fcea:	e8 51 dd fe ff       	call   c000da40 <Device::~Device()>
c001fcef:	83 c4 10             	add    esp,0x10
c001fcf2:	90                   	nop
c001fcf3:	83 c4 0c             	add    esp,0xc
c001fcf6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fcf8 <Computer::~Computer()>:
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	83 ec 0c             	sub    esp,0xc
c001fcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd02:	e8 cd ff ff ff       	call   c001fcd4 <Computer::~Computer()>
c001fd07:	83 c4 10             	add    esp,0x10
c001fd0a:	83 ec 08             	sub    esp,0x8
c001fd0d:	68 ec 01 00 00       	push   0x1ec
c001fd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd16:	e8 c5 c8 fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c001fd1b:	83 c4 10             	add    esp,0x10
c001fd1e:	83 c4 0c             	add    esp,0xc
c001fd21:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fd22 <idleCommon()>:
c001fd22:	83 ec 0c             	sub    esp,0xc
c001fd25:	fa                   	cli    
c001fd26:	ff 05 88 74 02 c0    	inc    DWORD PTR ds:0xc0027488
c001fd2c:	e8 07 5e ff ff       	call   c0015b38 <schedule()>
c001fd31:	a1 88 74 02 c0       	mov    eax,ds:0xc0027488
c001fd36:	48                   	dec    eax
c001fd37:	a3 88 74 02 c0       	mov    ds:0xc0027488,eax
c001fd3c:	75 01                	jne    c001fd3f <idleCommon()+0x1d>
c001fd3e:	fb                   	sti    
c001fd3f:	83 c4 0c             	add    esp,0xc
c001fd42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fd44 <LinkedList<UnixFile>::~LinkedList()>:
c001fd44:	90                   	nop
c001fd45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fd46 <LinkedList<UnixFile>::LinkedList()>:
c001fd46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd7f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd86:	90                   	nop
c001fd87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fd88 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd90:	75 10                	jne    c001fda2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fd92:	83 ec 0c             	sub    esp,0xc
c001fd95:	68 1c 13 02 c0       	push   0xc002131c
c001fd9a:	e8 64 28 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001fd9f:	83 c4 10             	add    esp,0x10
c001fda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda6:	8b 00                	mov    eax,DWORD PTR [eax]
c001fda8:	85 c0                	test   eax,eax
c001fdaa:	74 34                	je     c001fde0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdb3:	85 c0                	test   eax,eax
c001fdb5:	74 29                	je     c001fde0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fdb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdcd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdde:	eb 65                	jmp    c001fe45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde6:	85 c0                	test   eax,eax
c001fde8:	75 4b                	jne    c001fe35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdf1:	85 c0                	test   eax,eax
c001fdf3:	75 40                	jne    c001fe35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fdf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdfd:	89 10                	mov    DWORD PTR [eax],edx
c001fdff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe11:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe1f:	85 c0                	test   eax,eax
c001fe21:	74 22                	je     c001fe45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fe23:	83 ec 0c             	sub    esp,0xc
c001fe26:	68 3e 13 02 c0       	push   0xc002133e
c001fe2b:	e8 d3 27 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001fe30:	83 c4 10             	add    esp,0x10
c001fe33:	eb 10                	jmp    c001fe45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fe35:	83 ec 0c             	sub    esp,0xc
c001fe38:	68 48 13 02 c0       	push   0xc0021348
c001fe3d:	e8 c1 27 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001fe42:	83 c4 10             	add    esp,0x10
c001fe45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe4c:	8d 50 01             	lea    edx,[eax+0x1]
c001fe4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe56:	90                   	nop
c001fe57:	83 c4 0c             	add    esp,0xc
c001fe5a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fe5c <LinkedList<UnixFile>::getFirstElement()>:
c001fe5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fe64 <LinkedList<UnixFile>::removeFirst()>:
c001fe64:	83 ec 0c             	sub    esp,0xc
c001fe67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe6d:	85 c0                	test   eax,eax
c001fe6f:	75 12                	jne    c001fe83 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fe71:	83 ec 0c             	sub    esp,0xc
c001fe74:	68 54 13 02 c0       	push   0xc0021354
c001fe79:	e8 85 27 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001fe7e:	83 c4 10             	add    esp,0x10
c001fe81:	eb 7e                	jmp    c001ff01 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fe83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe8d:	85 c0                	test   eax,eax
c001fe8f:	74 10                	je     c001fea1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fe91:	83 ec 0c             	sub    esp,0xc
c001fe94:	68 9f 13 02 c0       	push   0xc002139f
c001fe99:	e8 65 27 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001fe9e:	83 c4 10             	add    esp,0x10
c001fea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001feaa:	85 c0                	test   eax,eax
c001feac:	75 33                	jne    c001fee1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001feae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001feca:	83 f8 01             	cmp    eax,0x1
c001fecd:	74 21                	je     c001fef0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fecf:	83 ec 0c             	sub    esp,0xc
c001fed2:	68 78 13 02 c0       	push   0xc0021378
c001fed7:	e8 27 27 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001fedc:	83 c4 10             	add    esp,0x10
c001fedf:	eb 0f                	jmp    c001fef0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feee:	89 10                	mov    DWORD PTR [eax],edx
c001fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fef7:	8d 50 ff             	lea    edx,[eax-0x1]
c001fefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff01:	83 c4 0c             	add    esp,0xc
c001ff04:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ff06 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ff06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff0d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ff0e <DriverlessDevice::~DriverlessDevice()>:
c001ff0e:	ba 9c 1b 02 c0       	mov    edx,0xc0021b9c
c001ff13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff17:	89 10                	mov    DWORD PTR [eax],edx
c001ff19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff1d:	50                   	push   eax
c001ff1e:	e8 1d db fe ff       	call   c000da40 <Device::~Device()>
c001ff23:	83 c4 04             	add    esp,0x4
c001ff26:	90                   	nop
c001ff27:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ff28 <DriverlessDevice::~DriverlessDevice()>:
c001ff28:	83 ec 0c             	sub    esp,0xc
c001ff2b:	83 ec 0c             	sub    esp,0xc
c001ff2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff32:	e8 d7 ff ff ff       	call   c001ff0e <DriverlessDevice::~DriverlessDevice()>
c001ff37:	83 c4 10             	add    esp,0x10
c001ff3a:	83 ec 08             	sub    esp,0x8
c001ff3d:	68 58 01 00 00       	push   0x158
c001ff42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff46:	e8 95 c6 fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c001ff4b:	83 c4 10             	add    esp,0x10
c001ff4e:	83 c4 0c             	add    esp,0xc
c001ff51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ff52 <LinkedList<Device>::addElement(Device*)>:
c001ff52:	83 ec 0c             	sub    esp,0xc
c001ff55:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ff5a:	75 10                	jne    c001ff6c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	68 1c 13 02 c0       	push   0xc002131c
c001ff64:	e8 9a 26 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c001ff69:	83 c4 10             	add    esp,0x10
c001ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff72:	85 c0                	test   eax,eax
c001ff74:	74 3a                	je     c001ffb0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ff76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff7d:	85 c0                	test   eax,eax
c001ff7f:	74 2f                	je     c001ffb0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ff81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff8c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ff92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff9a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffa4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ffae:	eb 68                	jmp    c0020018 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ffb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffb6:	85 c0                	test   eax,eax
c001ffb8:	75 4e                	jne    c0020008 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ffba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffc1:	85 c0                	test   eax,eax
c001ffc3:	75 43                	jne    c0020008 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ffc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffcd:	89 10                	mov    DWORD PTR [eax],edx
c001ffcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ffda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffe1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ffeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fff2:	85 c0                	test   eax,eax
c001fff4:	74 22                	je     c0020018 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fff6:	83 ec 0c             	sub    esp,0xc
c001fff9:	68 3e 13 02 c0       	push   0xc002133e
c001fffe:	e8 00 26 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	eb 10                	jmp    c0020018 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020008:	83 ec 0c             	sub    esp,0xc
c002000b:	68 48 13 02 c0       	push   0xc0021348
c0020010:	e8 ee 25 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0020015:	83 c4 10             	add    esp,0x10
c0020018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002001c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002001f:	8d 50 01             	lea    edx,[eax+0x1]
c0020022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020026:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020029:	90                   	nop
c002002a:	83 c4 0c             	add    esp,0xc
c002002d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002002e <LinkedList<Device>::LinkedList()>:
c002002e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020032:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020047:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002004e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020052:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020063:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020067:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002006e:	90                   	nop
c002006f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0020070 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0020070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020074:	8b 00                	mov    eax,DWORD PTR [eax]
c0020076:	85 c0                	test   eax,eax
c0020078:	75 0e                	jne    c0020088 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002007a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002007e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020081:	85 c0                	test   eax,eax
c0020083:	75 03                	jne    c0020088 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020085:	b0 01                	mov    al,0x1
c0020087:	c3                   	ret    
c0020088:	b0 00                	mov    al,0x0
c002008a:	90                   	nop
c002008b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002008c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002008c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020090:	8b 00                	mov    eax,DWORD PTR [eax]
c0020092:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020094 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020094:	83 ec 0c             	sub    esp,0xc
c0020097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009b:	8b 00                	mov    eax,DWORD PTR [eax]
c002009d:	85 c0                	test   eax,eax
c002009f:	75 17                	jne    c00200b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00200a1:	83 ec 0c             	sub    esp,0xc
c00200a4:	68 54 13 02 c0       	push   0xc0021354
c00200a9:	e8 55 25 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00200ae:	83 c4 10             	add    esp,0x10
c00200b1:	e9 92 00 00 00       	jmp    c0020148 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00200b6:	66 90                	xchg   ax,ax
c00200b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00200bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200c2:	85 c0                	test   eax,eax
c00200c4:	0f 95 c0             	setne  al
c00200c7:	84 c0                	test   al,al
c00200c9:	74 11                	je     c00200dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00200cb:	83 ec 0c             	sub    esp,0xc
c00200ce:	68 9f 13 02 c0       	push   0xc002139f
c00200d3:	e8 2b 25 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00200d8:	83 c4 10             	add    esp,0x10
c00200db:	90                   	nop
c00200dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200e5:	85 c0                	test   eax,eax
c00200e7:	0f 94 c0             	sete   al
c00200ea:	84 c0                	test   al,al
c00200ec:	74 36                	je     c0020124 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c00200ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020107:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002010a:	83 f8 01             	cmp    eax,0x1
c002010d:	74 25                	je     c0020134 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c002010f:	83 ec 0c             	sub    esp,0xc
c0020112:	68 78 13 02 c0       	push   0xc0021378
c0020117:	e8 e7 24 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c002011c:	83 c4 10             	add    esp,0x10
c002011f:	eb 13                	jmp    c0020134 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0020121:	8d 76 00             	lea    esi,[esi+0x0]
c0020124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020128:	8b 00                	mov    eax,DWORD PTR [eax]
c002012a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002012d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020131:	89 10                	mov    DWORD PTR [eax],edx
c0020133:	90                   	nop
c0020134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020138:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002013b:	8d 50 ff             	lea    edx,[eax-0x1]
c002013e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020142:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020145:	8d 76 00             	lea    esi,[esi+0x0]
c0020148:	83 c4 0c             	add    esp,0xc
c002014b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002014c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002014c:	83 ec 0c             	sub    esp,0xc
c002014f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020154:	75 12                	jne    c0020168 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0020156:	83 ec 0c             	sub    esp,0xc
c0020159:	68 1c 13 02 c0       	push   0xc002131c
c002015e:	e8 a0 24 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0020163:	83 c4 10             	add    esp,0x10
c0020166:	66 90                	xchg   ax,ax
c0020168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016c:	8b 00                	mov    eax,DWORD PTR [eax]
c002016e:	85 c0                	test   eax,eax
c0020170:	74 36                	je     c00201a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020176:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020179:	85 c0                	test   eax,eax
c002017b:	74 2b                	je     c00201a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002017d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020181:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020184:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020188:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002018b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020193:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002019d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00201a4:	eb 6a                	jmp    c0020210 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00201a6:	66 90                	xchg   ax,ax
c00201a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00201ae:	85 c0                	test   eax,eax
c00201b0:	75 4e                	jne    c0020200 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00201b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201b9:	85 c0                	test   eax,eax
c00201bb:	75 43                	jne    c0020200 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00201bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00201c5:	89 10                	mov    DWORD PTR [eax],edx
c00201c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00201cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00201d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00201e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00201e7:	85 c0                	test   eax,eax
c00201e9:	74 25                	je     c0020210 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00201eb:	83 ec 0c             	sub    esp,0xc
c00201ee:	68 3e 13 02 c0       	push   0xc002133e
c00201f3:	e8 0b 24 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00201f8:	83 c4 10             	add    esp,0x10
c00201fb:	eb 13                	jmp    c0020210 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00201fd:	8d 76 00             	lea    esi,[esi+0x0]
c0020200:	83 ec 0c             	sub    esp,0xc
c0020203:	68 48 13 02 c0       	push   0xc0021348
c0020208:	e8 f6 23 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c002020d:	83 c4 10             	add    esp,0x10
c0020210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020214:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020217:	8d 50 01             	lea    edx,[eax+0x1]
c002021a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020221:	90                   	nop
c0020222:	83 c4 0c             	add    esp,0xc
c0020225:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020228 <ACPI::~ACPI()>:
c0020228:	83 ec 0c             	sub    esp,0xc
c002022b:	ba 5c 21 02 c0       	mov    edx,0xc002215c
c0020230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020234:	89 10                	mov    DWORD PTR [eax],edx
c0020236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023a:	83 ec 0c             	sub    esp,0xc
c002023d:	50                   	push   eax
c002023e:	e8 fd d7 fe ff       	call   c000da40 <Device::~Device()>
c0020243:	83 c4 10             	add    esp,0x10
c0020246:	90                   	nop
c0020247:	83 c4 0c             	add    esp,0xc
c002024a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002024c <ACPI::~ACPI()>:
c002024c:	83 ec 0c             	sub    esp,0xc
c002024f:	83 ec 0c             	sub    esp,0xc
c0020252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020256:	e8 cd ff ff ff       	call   c0020228 <ACPI::~ACPI()>
c002025b:	83 c4 10             	add    esp,0x10
c002025e:	83 ec 08             	sub    esp,0x8
c0020261:	68 64 12 00 00       	push   0x1264
c0020266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002026a:	e8 71 c3 fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c002026f:	83 c4 10             	add    esp,0x10
c0020272:	83 c4 0c             	add    esp,0xc
c0020275:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020278 <LinkedList<Device>::~LinkedList()>:
c0020278:	90                   	nop
c0020279:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002027c <LinkedList<Device>::isEmpty()>:
c002027c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020280:	8b 00                	mov    eax,DWORD PTR [eax]
c0020282:	85 c0                	test   eax,eax
c0020284:	75 0e                	jne    c0020294 <LinkedList<Device>::isEmpty()+0x18>
c0020286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002028a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002028d:	85 c0                	test   eax,eax
c002028f:	75 03                	jne    c0020294 <LinkedList<Device>::isEmpty()+0x18>
c0020291:	b0 01                	mov    al,0x1
c0020293:	c3                   	ret    
c0020294:	b0 00                	mov    al,0x0
c0020296:	90                   	nop
c0020297:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020298 <LinkedList<Device>::getFirstElement()>:
c0020298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002029c:	8b 00                	mov    eax,DWORD PTR [eax]
c002029e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00202a0 <LinkedList<Device>::removeFirst()>:
c00202a0:	83 ec 0c             	sub    esp,0xc
c00202a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00202a9:	85 c0                	test   eax,eax
c00202ab:	75 17                	jne    c00202c4 <LinkedList<Device>::removeFirst()+0x24>
c00202ad:	83 ec 0c             	sub    esp,0xc
c00202b0:	68 54 13 02 c0       	push   0xc0021354
c00202b5:	e8 49 23 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00202ba:	83 c4 10             	add    esp,0x10
c00202bd:	e9 92 00 00 00       	jmp    c0020354 <LinkedList<Device>::removeFirst()+0xb4>
c00202c2:	66 90                	xchg   ax,ax
c00202c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202cb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00202d1:	85 c0                	test   eax,eax
c00202d3:	74 13                	je     c00202e8 <LinkedList<Device>::removeFirst()+0x48>
c00202d5:	83 ec 0c             	sub    esp,0xc
c00202d8:	68 9f 13 02 c0       	push   0xc002139f
c00202dd:	e8 21 23 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c00202e2:	83 c4 10             	add    esp,0x10
c00202e5:	8d 76 00             	lea    esi,[esi+0x0]
c00202e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00202ee:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00202f4:	85 c0                	test   eax,eax
c00202f6:	75 34                	jne    c002032c <LinkedList<Device>::removeFirst()+0x8c>
c00202f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020306:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002030d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020311:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020314:	83 f8 01             	cmp    eax,0x1
c0020317:	74 27                	je     c0020340 <LinkedList<Device>::removeFirst()+0xa0>
c0020319:	83 ec 0c             	sub    esp,0xc
c002031c:	68 78 13 02 c0       	push   0xc0021378
c0020321:	e8 dd 22 ff ff       	call   c0012603 <Krnl::panic(char const*)>
c0020326:	83 c4 10             	add    esp,0x10
c0020329:	eb 15                	jmp    c0020340 <LinkedList<Device>::removeFirst()+0xa0>
c002032b:	90                   	nop
c002032c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020330:	8b 00                	mov    eax,DWORD PTR [eax]
c0020332:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0020338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033c:	89 10                	mov    DWORD PTR [eax],edx
c002033e:	66 90                	xchg   ax,ax
c0020340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020344:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020347:	8d 50 ff             	lea    edx,[eax-0x1]
c002034a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002034e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020351:	8d 76 00             	lea    esi,[esi+0x0]
c0020354:	83 c4 0c             	add    esp,0xc
c0020357:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0020358 <CPU::~CPU()>:
c0020358:	83 ec 0c             	sub    esp,0xc
c002035b:	ba f8 22 02 c0       	mov    edx,0xc00222f8
c0020360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020364:	89 10                	mov    DWORD PTR [eax],edx
c0020366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002036a:	83 ec 0c             	sub    esp,0xc
c002036d:	50                   	push   eax
c002036e:	e8 cd d6 fe ff       	call   c000da40 <Device::~Device()>
c0020373:	83 c4 10             	add    esp,0x10
c0020376:	90                   	nop
c0020377:	83 c4 0c             	add    esp,0xc
c002037a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002037c <CPU::~CPU()>:
c002037c:	83 ec 0c             	sub    esp,0xc
c002037f:	83 ec 0c             	sub    esp,0xc
c0020382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020386:	e8 cd ff ff ff       	call   c0020358 <CPU::~CPU()>
c002038b:	83 c4 10             	add    esp,0x10
c002038e:	83 ec 08             	sub    esp,0x8
c0020391:	68 94 11 00 00       	push   0x1194
c0020396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002039a:	e8 41 c2 fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c002039f:	83 c4 10             	add    esp,0x10
c00203a2:	83 c4 0c             	add    esp,0xc
c00203a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00203a8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00203a8:	90                   	nop
c00203a9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00203ac <ThreadControlBlock::ThreadControlBlock()>:
c00203ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203b0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00203b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203bb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00203c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203c6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00203cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203d1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00203d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203dc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00203e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203e7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00203eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ef:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00203f3:	90                   	nop
c00203f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00203f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00203f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020406:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002040d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020411:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002041c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020426:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002042d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020431:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020438:	90                   	nop
c0020439:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002043c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002043c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020440:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020443:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0020444 <Vm::_FPUState::_FPUState()>:
c0020444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020448:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002044f:	90                   	nop
c0020450:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020452 <PCI::~PCI()>:
c0020452:	83 ec 0c             	sub    esp,0xc
c0020455:	ba 18 32 02 c0       	mov    edx,0xc0023218
c002045a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045e:	89 10                	mov    DWORD PTR [eax],edx
c0020460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020464:	83 ec 0c             	sub    esp,0xc
c0020467:	50                   	push   eax
c0020468:	e8 63 d0 fe ff       	call   c000d4d0 <Bus::~Bus()>
c002046d:	83 c4 10             	add    esp,0x10
c0020470:	90                   	nop
c0020471:	83 c4 0c             	add    esp,0xc
c0020474:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020476 <PCI::~PCI()>:
c0020476:	83 ec 0c             	sub    esp,0xc
c0020479:	83 ec 0c             	sub    esp,0xc
c002047c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020480:	e8 cd ff ff ff       	call   c0020452 <PCI::~PCI()>
c0020485:	83 c4 10             	add    esp,0x10
c0020488:	83 ec 08             	sub    esp,0x8
c002048b:	68 5c 01 00 00       	push   0x15c
c0020490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020494:	e8 47 c1 fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c0020499:	83 c4 10             	add    esp,0x10
c002049c:	83 c4 0c             	add    esp,0xc
c002049f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00204a0 <IDE::~IDE()>:
c00204a0:	83 ec 0c             	sub    esp,0xc
c00204a3:	ba e8 32 02 c0       	mov    edx,0xc00232e8
c00204a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ac:	89 10                	mov    DWORD PTR [eax],edx
c00204ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b2:	83 ec 0c             	sub    esp,0xc
c00204b5:	50                   	push   eax
c00204b6:	e8 69 da fe ff       	call   c000df24 <HardDiskController::~HardDiskController()>
c00204bb:	83 c4 10             	add    esp,0x10
c00204be:	90                   	nop
c00204bf:	83 c4 0c             	add    esp,0xc
c00204c2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00204c4 <IDE::~IDE()>:
c00204c4:	83 ec 0c             	sub    esp,0xc
c00204c7:	83 ec 0c             	sub    esp,0xc
c00204ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204ce:	e8 cd ff ff ff       	call   c00204a0 <IDE::~IDE()>
c00204d3:	83 c4 10             	add    esp,0x10
c00204d6:	83 ec 08             	sub    esp,0x8
c00204d9:	68 70 02 00 00       	push   0x270
c00204de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e2:	e8 f9 c0 fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c00204e7:	83 c4 10             	add    esp,0x10
c00204ea:	83 c4 0c             	add    esp,0xc
c00204ed:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00204ee <SATABus::~SATABus()>:
c00204ee:	83 ec 0c             	sub    esp,0xc
c00204f1:	ba 4c 33 02 c0       	mov    edx,0xc002334c
c00204f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204fa:	89 10                	mov    DWORD PTR [eax],edx
c00204fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020500:	83 ec 0c             	sub    esp,0xc
c0020503:	50                   	push   eax
c0020504:	e8 1b da fe ff       	call   c000df24 <HardDiskController::~HardDiskController()>
c0020509:	83 c4 10             	add    esp,0x10
c002050c:	90                   	nop
c002050d:	83 c4 0c             	add    esp,0xc
c0020510:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020512 <SATABus::~SATABus()>:
c0020512:	83 ec 0c             	sub    esp,0xc
c0020515:	83 ec 0c             	sub    esp,0xc
c0020518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002051c:	e8 cd ff ff ff       	call   c00204ee <SATABus::~SATABus()>
c0020521:	83 c4 10             	add    esp,0x10
c0020524:	83 ec 08             	sub    esp,0x8
c0020527:	68 64 01 00 00       	push   0x164
c002052c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020530:	e8 ab c0 fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c0020535:	83 c4 10             	add    esp,0x10
c0020538:	83 c4 0c             	add    esp,0xc
c002053b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002053c <ATA::~ATA()>:
c002053c:	83 ec 0c             	sub    esp,0xc
c002053f:	ba c4 33 02 c0       	mov    edx,0xc00233c4
c0020544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020548:	89 10                	mov    DWORD PTR [eax],edx
c002054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002054e:	83 ec 0c             	sub    esp,0xc
c0020551:	50                   	push   eax
c0020552:	e8 af da fe ff       	call   c000e006 <PhysicalDisk::~PhysicalDisk()>
c0020557:	83 c4 10             	add    esp,0x10
c002055a:	90                   	nop
c002055b:	83 c4 0c             	add    esp,0xc
c002055e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020560 <ATA::~ATA()>:
c0020560:	83 ec 0c             	sub    esp,0xc
c0020563:	83 ec 0c             	sub    esp,0xc
c0020566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002056a:	e8 cd ff ff ff       	call   c002053c <ATA::~ATA()>
c002056f:	83 c4 10             	add    esp,0x10
c0020572:	83 ec 08             	sub    esp,0x8
c0020575:	68 7c 01 00 00       	push   0x17c
c002057a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002057e:	e8 5d c0 fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c0020583:	83 c4 10             	add    esp,0x10
c0020586:	83 c4 0c             	add    esp,0xc
c0020589:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002058a <ATAPI::~ATAPI()>:
c002058a:	83 ec 0c             	sub    esp,0xc
c002058d:	ba 3c 34 02 c0       	mov    edx,0xc002343c
c0020592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020596:	89 10                	mov    DWORD PTR [eax],edx
c0020598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059c:	83 ec 0c             	sub    esp,0xc
c002059f:	50                   	push   eax
c00205a0:	e8 61 da fe ff       	call   c000e006 <PhysicalDisk::~PhysicalDisk()>
c00205a5:	83 c4 10             	add    esp,0x10
c00205a8:	90                   	nop
c00205a9:	83 c4 0c             	add    esp,0xc
c00205ac:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00205ae <ATAPI::~ATAPI()>:
c00205ae:	83 ec 0c             	sub    esp,0xc
c00205b1:	83 ec 0c             	sub    esp,0xc
c00205b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205b8:	e8 cd ff ff ff       	call   c002058a <ATAPI::~ATAPI()>
c00205bd:	83 c4 10             	add    esp,0x10
c00205c0:	83 ec 08             	sub    esp,0x8
c00205c3:	68 84 01 00 00       	push   0x184
c00205c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205cc:	e8 0f c0 fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c00205d1:	83 c4 10             	add    esp,0x10
c00205d4:	83 c4 0c             	add    esp,0xc
c00205d7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00205d8 <SATA::~SATA()>:
c00205d8:	83 ec 0c             	sub    esp,0xc
c00205db:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c00205e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e4:	89 10                	mov    DWORD PTR [eax],edx
c00205e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ea:	83 ec 0c             	sub    esp,0xc
c00205ed:	50                   	push   eax
c00205ee:	e8 13 da fe ff       	call   c000e006 <PhysicalDisk::~PhysicalDisk()>
c00205f3:	83 c4 10             	add    esp,0x10
c00205f6:	90                   	nop
c00205f7:	83 c4 0c             	add    esp,0xc
c00205fa:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00205fc <SATA::~SATA()>:
c00205fc:	83 ec 0c             	sub    esp,0xc
c00205ff:	83 ec 0c             	sub    esp,0xc
c0020602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020606:	e8 cd ff ff ff       	call   c00205d8 <SATA::~SATA()>
c002060b:	83 c4 10             	add    esp,0x10
c002060e:	83 ec 08             	sub    esp,0x8
c0020611:	68 7c 01 00 00       	push   0x17c
c0020616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002061a:	e8 c1 bf fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c002061f:	83 c4 10             	add    esp,0x10
c0020622:	83 c4 0c             	add    esp,0xc
c0020625:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020626 <SATAPI::~SATAPI()>:
c0020626:	83 ec 0c             	sub    esp,0xc
c0020629:	ba 5c 36 02 c0       	mov    edx,0xc002365c
c002062e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020632:	89 10                	mov    DWORD PTR [eax],edx
c0020634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020638:	83 ec 0c             	sub    esp,0xc
c002063b:	50                   	push   eax
c002063c:	e8 c5 d9 fe ff       	call   c000e006 <PhysicalDisk::~PhysicalDisk()>
c0020641:	83 c4 10             	add    esp,0x10
c0020644:	90                   	nop
c0020645:	83 c4 0c             	add    esp,0xc
c0020648:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002064a <SATAPI::~SATAPI()>:
c002064a:	83 ec 0c             	sub    esp,0xc
c002064d:	83 ec 0c             	sub    esp,0xc
c0020650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020654:	e8 cd ff ff ff       	call   c0020626 <SATAPI::~SATAPI()>
c0020659:	83 c4 10             	add    esp,0x10
c002065c:	83 ec 08             	sub    esp,0x8
c002065f:	68 84 01 00 00       	push   0x184
c0020664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020668:	e8 73 bf fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c002066d:	83 c4 10             	add    esp,0x10
c0020670:	83 c4 0c             	add    esp,0xc
c0020673:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020674 <IOAPIC::~IOAPIC()>:
c0020674:	83 ec 0c             	sub    esp,0xc
c0020677:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c002067c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020680:	89 10                	mov    DWORD PTR [eax],edx
c0020682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020686:	83 ec 0c             	sub    esp,0xc
c0020689:	50                   	push   eax
c002068a:	e8 b1 d3 fe ff       	call   c000da40 <Device::~Device()>
c002068f:	83 c4 10             	add    esp,0x10
c0020692:	90                   	nop
c0020693:	83 c4 0c             	add    esp,0xc
c0020696:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020698 <IOAPIC::~IOAPIC()>:
c0020698:	83 ec 0c             	sub    esp,0xc
c002069b:	83 ec 0c             	sub    esp,0xc
c002069e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206a2:	e8 cd ff ff ff       	call   c0020674 <IOAPIC::~IOAPIC()>
c00206a7:	83 c4 10             	add    esp,0x10
c00206aa:	83 ec 08             	sub    esp,0x8
c00206ad:	68 68 01 00 00       	push   0x168
c00206b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206b6:	e8 25 bf fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c00206bb:	83 c4 10             	add    esp,0x10
c00206be:	83 c4 0c             	add    esp,0xc
c00206c1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00206c4 <APICTimer::~APICTimer()>:
c00206c4:	83 ec 0c             	sub    esp,0xc
c00206c7:	ba f8 36 02 c0       	mov    edx,0xc00236f8
c00206cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206d0:	89 10                	mov    DWORD PTR [eax],edx
c00206d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206d6:	83 ec 0c             	sub    esp,0xc
c00206d9:	50                   	push   eax
c00206da:	e8 e5 ec fe ff       	call   c000f3c4 <Timer::~Timer()>
c00206df:	83 c4 10             	add    esp,0x10
c00206e2:	90                   	nop
c00206e3:	83 c4 0c             	add    esp,0xc
c00206e6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00206e8 <APICTimer::~APICTimer()>:
c00206e8:	83 ec 0c             	sub    esp,0xc
c00206eb:	83 ec 0c             	sub    esp,0xc
c00206ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206f2:	e8 cd ff ff ff       	call   c00206c4 <APICTimer::~APICTimer()>
c00206f7:	83 c4 10             	add    esp,0x10
c00206fa:	83 ec 08             	sub    esp,0x8
c00206fd:	68 60 01 00 00       	push   0x160
c0020702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020706:	e8 d5 be fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c002070b:	83 c4 10             	add    esp,0x10
c002070e:	83 c4 0c             	add    esp,0xc
c0020711:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020714 <PIT::~PIT()>:
c0020714:	83 ec 0c             	sub    esp,0xc
c0020717:	ba 48 37 02 c0       	mov    edx,0xc0023748
c002071c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020720:	89 10                	mov    DWORD PTR [eax],edx
c0020722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020726:	83 ec 0c             	sub    esp,0xc
c0020729:	50                   	push   eax
c002072a:	e8 95 ec fe ff       	call   c000f3c4 <Timer::~Timer()>
c002072f:	83 c4 10             	add    esp,0x10
c0020732:	90                   	nop
c0020733:	83 c4 0c             	add    esp,0xc
c0020736:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020738 <PIT::~PIT()>:
c0020738:	83 ec 0c             	sub    esp,0xc
c002073b:	83 ec 0c             	sub    esp,0xc
c002073e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020742:	e8 cd ff ff ff       	call   c0020714 <PIT::~PIT()>
c0020747:	83 c4 10             	add    esp,0x10
c002074a:	83 ec 08             	sub    esp,0x8
c002074d:	68 5c 01 00 00       	push   0x15c
c0020752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020756:	e8 85 be fe ff       	call   c000c5e0 <operator delete(void*, unsigned long)>
c002075b:	83 c4 10             	add    esp,0x10
c002075e:	83 c4 0c             	add    esp,0xc
c0020761:	c3                   	ret    
