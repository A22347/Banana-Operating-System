
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ba f9 00 00       	call   c000f9da <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 7d 02 00       	call   c0027de8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 92 89 02 c0       	mov    ebx,0xc0028992
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a0 89 02 c0    	cmp    ebx,0xc00289a0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 d0 02 c0       	mov    eax,0xc002d058
c0000049:	3d 58 d0 02 c0       	cmp    eax,0xc002d058
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 d0 02 c0       	push   0xc002d058
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 d0 02 c0       	mov    eax,0xc002d058
c0000075:	2d 58 d0 02 c0       	sub    eax,0xc002d058
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 d0 02 c0       	push   0xc002d058
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d688,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a8 89 02 c0       	mov    ebx,0xc00289a8
c00000bb:	81 eb a4 89 02 c0    	sub    ebx,0xc00289a4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a4 89 02 c0       	mov    esi,0xc00289a4
c00000ca:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 d0 02 c0       	push   0xc002d058
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d688,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 d6 02 c0       	push   0xc002d690
c000012c:	68 58 d0 02 c0       	push   0xc002d058
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 eb cc 01 00       	call   c001d086 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 1c 23 01 00       	call   c00126cf <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 c9 cc 01 00       	call   c001d086 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 17 d1 01 00       	call   c001d4f3 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 c5 d6 01 00       	call   c001daaa <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 d0 da 02 c0 	lgdtd  ds:0xc002dad0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 fa 3f 01 00       	call   c00145d3 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	57                   	push   edi
c00006a1:	56                   	push   esi
c00006a2:	83 ec 10             	sub    esp,0x10
c00006a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00006a9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00006ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00006b1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00006b5:	fc                   	cld    
c00006b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00006b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006bc:	83 c4 10             	add    esp,0x10
c00006bf:	5e                   	pop    esi
c00006c0:	5f                   	pop    edi
c00006c1:	c3                   	ret    

c00006c2 <memset>:
c00006c2:	53                   	push   ebx
c00006c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cb:	89 c2                	mov    edx,eax
c00006cd:	01 c1                	add    ecx,eax
c00006cf:	39 ca                	cmp    edx,ecx
c00006d1:	74 0a                	je     c00006dd <memset+0x1b>
c00006d3:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d7:	42                   	inc    edx
c00006d8:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006db:	eb f2                	jmp    c00006cf <memset+0xd>
c00006dd:	5b                   	pop    ebx
c00006de:	c3                   	ret    

c00006df <strlen>:
c00006df:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e3:	31 c0                	xor    eax,eax
c00006e5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e9:	74 03                	je     c00006ee <strlen+0xf>
c00006eb:	40                   	inc    eax
c00006ec:	eb f7                	jmp    c00006e5 <strlen+0x6>
c00006ee:	c3                   	ret    

c00006ef <strpbrk>:
c00006ef:	53                   	push   ebx
c00006f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f4:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f6:	84 c9                	test   cl,cl
c00006f8:	74 14                	je     c000070e <strpbrk+0x1f>
c00006fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006fe:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000700:	84 db                	test   bl,bl
c0000702:	74 07                	je     c000070b <strpbrk+0x1c>
c0000704:	38 cb                	cmp    bl,cl
c0000706:	74 08                	je     c0000710 <strpbrk+0x21>
c0000708:	42                   	inc    edx
c0000709:	eb f3                	jmp    c00006fe <strpbrk+0xf>
c000070b:	40                   	inc    eax
c000070c:	eb e6                	jmp    c00006f4 <strpbrk+0x5>
c000070e:	31 c0                	xor    eax,eax
c0000710:	5b                   	pop    ebx
c0000711:	c3                   	ret    

c0000712 <strtok>:
c0000712:	56                   	push   esi
c0000713:	53                   	push   ebx
c0000714:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000718:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071c:	85 db                	test   ebx,ebx
c000071e:	75 0e                	jne    c000072e <strtok+0x1c>
c0000720:	8b 1d a8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a8
c0000726:	85 db                	test   ebx,ebx
c0000728:	75 04                	jne    c000072e <strtok+0x1c>
c000072a:	31 db                	xor    ebx,ebx
c000072c:	eb 2e                	jmp    c000075c <strtok+0x4a>
c000072e:	56                   	push   esi
c000072f:	53                   	push   ebx
c0000730:	e8 ba ff ff ff       	call   c00006ef <strpbrk>
c0000735:	5a                   	pop    edx
c0000736:	a3 a8 d6 02 c0       	mov    ds:0xc002d6a8,eax
c000073b:	59                   	pop    ecx
c000073c:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0000741:	39 d8                	cmp    eax,ebx
c0000743:	75 07                	jne    c000074c <strtok+0x3a>
c0000745:	43                   	inc    ebx
c0000746:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074a:	eb e2                	jmp    c000072e <strtok+0x1c>
c000074c:	85 c0                	test   eax,eax
c000074e:	74 da                	je     c000072a <strtok+0x18>
c0000750:	8d 50 01             	lea    edx,[eax+0x1]
c0000753:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000756:	89 15 a8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a8,edx
c000075c:	89 d8                	mov    eax,ebx
c000075e:	5b                   	pop    ebx
c000075f:	5e                   	pop    esi
c0000760:	c3                   	ret    

c0000761 <strcpy>:
c0000761:	53                   	push   ebx
c0000762:	31 d2                	xor    edx,edx
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076c:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000076f:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000772:	84 c9                	test   cl,cl
c0000774:	74 06                	je     c000077c <strcpy+0x1b>
c0000776:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000779:	42                   	inc    edx
c000077a:	eb ec                	jmp    c0000768 <strcpy+0x7>
c000077c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000077f:	5b                   	pop    ebx
c0000780:	c3                   	ret    

c0000781 <strncpy>:
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000078f:	89 c3                	mov    ebx,eax
c0000791:	85 c9                	test   ecx,ecx
c0000793:	74 1a                	je     c00007af <strncpy+0x2e>
c0000795:	46                   	inc    esi
c0000796:	43                   	inc    ebx
c0000797:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079a:	49                   	dec    ecx
c000079b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000079e:	84 d2                	test   dl,dl
c00007a0:	75 ef                	jne    c0000791 <strncpy+0x10>
c00007a2:	31 d2                	xor    edx,edx
c00007a4:	39 d1                	cmp    ecx,edx
c00007a6:	74 07                	je     c00007af <strncpy+0x2e>
c00007a8:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ac:	42                   	inc    edx
c00007ad:	eb f5                	jmp    c00007a4 <strncpy+0x23>
c00007af:	5b                   	pop    ebx
c00007b0:	5e                   	pop    esi
c00007b1:	c3                   	ret    

c00007b2 <strcmp>:
c00007b2:	31 c9                	xor    ecx,ecx
c00007b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007bc:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c0:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c4:	38 d0                	cmp    al,dl
c00007c6:	75 08                	jne    c00007d0 <strcmp+0x1e>
c00007c8:	41                   	inc    ecx
c00007c9:	84 c0                	test   al,al
c00007cb:	75 e7                	jne    c00007b4 <strcmp+0x2>
c00007cd:	31 c0                	xor    eax,eax
c00007cf:	c3                   	ret    
c00007d0:	29 d0                	sub    eax,edx
c00007d2:	c3                   	ret    

c00007d3 <strchr>:
c00007d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d7:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d9:	84 d2                	test   dl,dl
c00007db:	74 09                	je     c00007e6 <strchr+0x13>
c00007dd:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e1:	74 05                	je     c00007e8 <strchr+0x15>
c00007e3:	40                   	inc    eax
c00007e4:	eb f1                	jmp    c00007d7 <strchr+0x4>
c00007e6:	31 c0                	xor    eax,eax
c00007e8:	c3                   	ret    

c00007e9 <strncmp>:
c00007e9:	56                   	push   esi
c00007ea:	53                   	push   ebx
c00007eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f7:	01 d6                	add    esi,edx
c00007f9:	39 f2                	cmp    edx,esi
c00007fb:	74 12                	je     c000080f <strncmp+0x26>
c00007fd:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000800:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000803:	38 c8                	cmp    al,cl
c0000805:	75 0c                	jne    c0000813 <strncmp+0x2a>
c0000807:	42                   	inc    edx
c0000808:	84 c0                	test   al,al
c000080a:	74 03                	je     c000080f <strncmp+0x26>
c000080c:	43                   	inc    ebx
c000080d:	eb ea                	jmp    c00007f9 <strncmp+0x10>
c000080f:	31 c0                	xor    eax,eax
c0000811:	eb 02                	jmp    c0000815 <strncmp+0x2c>
c0000813:	29 c8                	sub    eax,ecx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    

c0000818 <strcat>:
c0000818:	53                   	push   ebx
c0000819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081d:	89 c1                	mov    ecx,eax
c000081f:	8d 51 01             	lea    edx,[ecx+0x1]
c0000822:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000826:	74 04                	je     c000082c <strcat+0x14>
c0000828:	89 d1                	mov    ecx,edx
c000082a:	eb f3                	jmp    c000081f <strcat+0x7>
c000082c:	31 d2                	xor    edx,edx
c000082e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000832:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000835:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000838:	42                   	inc    edx
c0000839:	84 db                	test   bl,bl
c000083b:	75 f1                	jne    c000082e <strcat+0x16>
c000083d:	5b                   	pop    ebx
c000083e:	c3                   	ret    

c000083f <strncat>:
c000083f:	56                   	push   esi
c0000840:	53                   	push   ebx
c0000841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000845:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000849:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084d:	89 c2                	mov    edx,eax
c000084f:	85 db                	test   ebx,ebx
c0000851:	74 23                	je     c0000876 <strncat+0x37>
c0000853:	8d 72 01             	lea    esi,[edx+0x1]
c0000856:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085a:	74 04                	je     c0000860 <strncat+0x21>
c000085c:	89 f2                	mov    edx,esi
c000085e:	eb f3                	jmp    c0000853 <strncat+0x14>
c0000860:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000863:	41                   	inc    ecx
c0000864:	42                   	inc    edx
c0000865:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000868:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 07                	je     c0000876 <strncat+0x37>
c000086f:	39 f1                	cmp    ecx,esi
c0000871:	75 f0                	jne    c0000863 <strncat+0x24>
c0000873:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000876:	5b                   	pop    ebx
c0000877:	5e                   	pop    esi
c0000878:	c3                   	ret    

c0000879 <strstr>:
c0000879:	57                   	push   edi
c000087a:	56                   	push   esi
c000087b:	53                   	push   ebx
c000087c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000880:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000884:	57                   	push   edi
c0000885:	e8 55 fe ff ff       	call   c00006df <strlen>
c000088a:	59                   	pop    ecx
c000088b:	89 c6                	mov    esi,eax
c000088d:	85 c0                	test   eax,eax
c000088f:	74 1f                	je     c00008b0 <strstr+0x37>
c0000891:	53                   	push   ebx
c0000892:	e8 48 fe ff ff       	call   c00006df <strlen>
c0000897:	5a                   	pop    edx
c0000898:	39 f0                	cmp    eax,esi
c000089a:	72 12                	jb     c00008ae <strstr+0x35>
c000089c:	56                   	push   esi
c000089d:	57                   	push   edi
c000089e:	53                   	push   ebx
c000089f:	e8 99 fd ff ff       	call   c000063d <memcmp>
c00008a4:	83 c4 0c             	add    esp,0xc
c00008a7:	85 c0                	test   eax,eax
c00008a9:	74 05                	je     c00008b0 <strstr+0x37>
c00008ab:	43                   	inc    ebx
c00008ac:	eb e3                	jmp    c0000891 <strstr+0x18>
c00008ae:	31 db                	xor    ebx,ebx
c00008b0:	89 d8                	mov    eax,ebx
c00008b2:	5b                   	pop    ebx
c00008b3:	5e                   	pop    esi
c00008b4:	5f                   	pop    edi
c00008b5:	c3                   	ret    

c00008b6 <toupper>:
c00008b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008ba:	0f b6 d0             	movzx  edx,al
c00008bd:	f6 82 c0 89 02 c0 02 	test   BYTE PTR [edx-0x3ffd7640],0x2
c00008c4:	74 03                	je     c00008c9 <toupper+0x13>
c00008c6:	83 e8 20             	sub    eax,0x20
c00008c9:	c3                   	ret    

c00008ca <tolower>:
c00008ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008ce:	0f b6 d0             	movzx  edx,al
c00008d1:	f6 82 c0 89 02 c0 01 	test   BYTE PTR [edx-0x3ffd7640],0x1
c00008d8:	74 03                	je     c00008dd <tolower+0x13>
c00008da:	83 c0 20             	add    eax,0x20
c00008dd:	c3                   	ret    

c00008de <simple_strtoul>:
c00008de:	55                   	push   ebp
c00008df:	57                   	push   edi
c00008e0:	56                   	push   esi
c00008e1:	53                   	push   ebx
c00008e2:	83 ec 08             	sub    esp,0x8
c00008e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ed:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f0:	f6 82 c0 89 02 c0 08 	test   BYTE PTR [edx-0x3ffd7640],0x8
c00008f7:	74 03                	je     c00008fc <simple_strtoul+0x1e>
c00008f9:	41                   	inc    ecx
c00008fa:	eb f1                	jmp    c00008ed <simple_strtoul+0xf>
c00008fc:	80 fa 09             	cmp    dl,0x9
c00008ff:	74 f8                	je     c00008f9 <simple_strtoul+0x1b>
c0000901:	80 fa 2d             	cmp    dl,0x2d
c0000904:	75 0b                	jne    c0000911 <simple_strtoul+0x33>
c0000906:	41                   	inc    ecx
c0000907:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000090f:	eb 0e                	jmp    c000091f <simple_strtoul+0x41>
c0000911:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000919:	80 fa 2b             	cmp    dl,0x2b
c000091c:	75 01                	jne    c000091f <simple_strtoul+0x41>
c000091e:	41                   	inc    ecx
c000091f:	85 f6                	test   esi,esi
c0000921:	75 22                	jne    c0000945 <simple_strtoul+0x67>
c0000923:	be 0a 00 00 00       	mov    esi,0xa
c0000928:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092b:	75 5a                	jne    c0000987 <simple_strtoul+0xa9>
c000092d:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000931:	50                   	push   eax
c0000932:	e8 93 ff ff ff       	call   c00008ca <tolower>
c0000937:	5a                   	pop    edx
c0000938:	83 f8 78             	cmp    eax,0x78
c000093b:	74 03                	je     c0000940 <simple_strtoul+0x62>
c000093d:	41                   	inc    ecx
c000093e:	eb 16                	jmp    c0000956 <simple_strtoul+0x78>
c0000940:	83 c1 02             	add    ecx,0x2
c0000943:	eb 22                	jmp    c0000967 <simple_strtoul+0x89>
c0000945:	8d 46 fe             	lea    eax,[esi-0x2]
c0000948:	83 f8 22             	cmp    eax,0x22
c000094b:	0f 87 b7 00 00 00    	ja     c0000a08 <simple_strtoul+0x12a>
c0000951:	83 fe 08             	cmp    esi,0x8
c0000954:	75 0c                	jne    c0000962 <simple_strtoul+0x84>
c0000956:	be 08 00 00 00       	mov    esi,0x8
c000095b:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000095e:	75 27                	jne    c0000987 <simple_strtoul+0xa9>
c0000960:	eb 1f                	jmp    c0000981 <simple_strtoul+0xa3>
c0000962:	83 fe 10             	cmp    esi,0x10
c0000965:	75 20                	jne    c0000987 <simple_strtoul+0xa9>
c0000967:	be 10 00 00 00       	mov    esi,0x10
c000096c:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000096f:	75 16                	jne    c0000987 <simple_strtoul+0xa9>
c0000971:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000975:	50                   	push   eax
c0000976:	e8 4f ff ff ff       	call   c00008ca <tolower>
c000097b:	5d                   	pop    ebp
c000097c:	83 f8 78             	cmp    eax,0x78
c000097f:	74 03                	je     c0000984 <simple_strtoul+0xa6>
c0000981:	41                   	inc    ecx
c0000982:	eb 03                	jmp    c0000987 <simple_strtoul+0xa9>
c0000984:	83 c1 02             	add    ecx,0x2
c0000987:	31 ed                	xor    ebp,ebp
c0000989:	31 db                	xor    ebx,ebx
c000098b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000992:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000994:	84 d2                	test   dl,dl
c0000996:	74 27                	je     c00009bf <simple_strtoul+0xe1>
c0000998:	0f b6 fa             	movzx  edi,dl
c000099b:	f6 87 c0 89 02 c0 04 	test   BYTE PTR [edi-0x3ffd7640],0x4
c00009a2:	74 05                	je     c00009a9 <simple_strtoul+0xcb>
c00009a4:	83 ef 30             	sub    edi,0x30
c00009a7:	eb 22                	jmp    c00009cb <simple_strtoul+0xed>
c00009a9:	0f be d2             	movsx  edx,dl
c00009ac:	52                   	push   edx
c00009ad:	e8 04 ff ff ff       	call   c00008b6 <toupper>
c00009b2:	5f                   	pop    edi
c00009b3:	0f b6 d0             	movzx  edx,al
c00009b6:	f6 82 c0 89 02 c0 01 	test   BYTE PTR [edx-0x3ffd7640],0x1
c00009bd:	75 09                	jne    c00009c8 <simple_strtoul+0xea>
c00009bf:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c4:	75 2d                	jne    c00009f3 <simple_strtoul+0x115>
c00009c6:	eb 57                	jmp    c0000a1f <simple_strtoul+0x141>
c00009c8:	8d 78 c9             	lea    edi,[eax-0x37]
c00009cb:	39 f7                	cmp    edi,esi
c00009cd:	73 f0                	jae    c00009bf <simple_strtoul+0xe1>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 f8                	mov    eax,edi
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 d8                	cmp    eax,ebx
c00009d9:	72 0e                	jb     c00009e9 <simple_strtoul+0x10b>
c00009db:	0f af de             	imul   ebx,esi
c00009de:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e5:	01 fb                	add    ebx,edi
c00009e7:	eb 07                	jmp    c00009f0 <simple_strtoul+0x112>
c00009e9:	bd 01 00 00 00       	mov    ebp,0x1
c00009ee:	31 db                	xor    ebx,ebx
c00009f0:	41                   	inc    ecx
c00009f1:	eb 9f                	jmp    c0000992 <simple_strtoul+0xb4>
c00009f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f6:	09 d8                	or     eax,ebx
c00009f8:	75 1f                	jne    c0000a19 <simple_strtoul+0x13b>
c00009fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009fe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a02:	31 db                	xor    ebx,ebx
c0000a04:	89 38                	mov    DWORD PTR [eax],edi
c0000a06:	eb 17                	jmp    c0000a1f <simple_strtoul+0x141>
c0000a08:	31 db                	xor    ebx,ebx
c0000a0a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a0f:	74 14                	je     c0000a25 <simple_strtoul+0x147>
c0000a11:	31 ed                	xor    ebp,ebp
c0000a13:	85 c9                	test   ecx,ecx
c0000a15:	75 e3                	jne    c00009fa <simple_strtoul+0x11c>
c0000a17:	31 db                	xor    ebx,ebx
c0000a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1d:	89 08                	mov    DWORD PTR [eax],ecx
c0000a1f:	4d                   	dec    ebp
c0000a20:	75 03                	jne    c0000a25 <simple_strtoul+0x147>
c0000a22:	83 cb ff             	or     ebx,0xffffffff
c0000a25:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2a:	75 02                	jne    c0000a2e <simple_strtoul+0x150>
c0000a2c:	f7 db                	neg    ebx
c0000a2e:	83 c4 08             	add    esp,0x8
c0000a31:	89 d8                	mov    eax,ebx
c0000a33:	5b                   	pop    ebx
c0000a34:	5e                   	pop    esi
c0000a35:	5f                   	pop    edi
c0000a36:	5d                   	pop    ebp
c0000a37:	c3                   	ret    

c0000a38 <largebin_index>:
c0000a38:	89 c2                	mov    edx,eax
c0000a3a:	c1 ea 08             	shr    edx,0x8
c0000a3d:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a43:	77 10                	ja     c0000a55 <largebin_index+0x1d>
c0000a45:	0f bd d2             	bsr    edx,edx
c0000a48:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4b:	d3 e8                	shr    eax,cl
c0000a4d:	83 e0 03             	and    eax,0x3
c0000a50:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a54:	c3                   	ret    
c0000a55:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5a:	c3                   	ret    

c0000a5b <malloc_init_state>:
c0000a5b:	53                   	push   ebx
c0000a5c:	8d 50 34             	lea    edx,[eax+0x34]
c0000a5f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a65:	89 d1                	mov    ecx,edx
c0000a67:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a6d:	83 c2 08             	add    edx,0x8
c0000a70:	39 da                	cmp    edx,ebx
c0000a72:	75 f3                	jne    c0000a67 <malloc_init_state+0xc>
c0000a74:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a76:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a80:	83 e2 03             	and    edx,0x3
c0000a83:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a8d:	83 ca 48             	or     edx,0x48
c0000a90:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa4:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aab:	89 10                	mov    DWORD PTR [eax],edx
c0000aad:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab0:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000aba:	5b                   	pop    ebx
c0000abb:	c3                   	ret    

c0000abc <malloc_consolidate>:
c0000abc:	8b 10                	mov    edx,DWORD PTR [eax]
c0000abe:	85 d2                	test   edx,edx
c0000ac0:	0f 84 d8 00 00 00    	je     c0000b9e <malloc_consolidate+0xe2>
c0000ac6:	55                   	push   ebp
c0000ac7:	83 e2 fd             	and    edx,0xfffffffd
c0000aca:	57                   	push   edi
c0000acb:	89 c5                	mov    ebp,eax
c0000acd:	56                   	push   esi
c0000ace:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad1:	53                   	push   ebx
c0000ad2:	83 ec 10             	sub    esp,0x10
c0000ad5:	89 10                	mov    DWORD PTR [eax],edx
c0000ad7:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000adb:	c1 ea 03             	shr    edx,0x3
c0000ade:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae9:	85 d2                	test   edx,edx
c0000aeb:	0f 84 98 00 00 00    	je     c0000b89 <malloc_consolidate+0xcd>
c0000af1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afb:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000afe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b02:	89 f9                	mov    ecx,edi
c0000b04:	83 e1 fe             	and    ecx,0xfffffffe
c0000b07:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b0d:	83 e3 fc             	and    ebx,0xfffffffc
c0000b10:	83 e7 01             	and    edi,0x1
c0000b13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b16:	75 14                	jne    c0000b2c <malloc_consolidate+0x70>
c0000b18:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1a:	29 fa                	sub    edx,edi
c0000b1c:	01 f9                	add    ecx,edi
c0000b1e:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b21:	89 fb                	mov    ebx,edi
c0000b23:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b26:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b29:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2c:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b2f:	74 40                	je     c0000b71 <malloc_consolidate+0xb5>
c0000b31:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b34:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b37:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3b:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b3e:	83 e7 01             	and    edi,0x1
c0000b41:	75 0e                	jne    c0000b51 <malloc_consolidate+0x95>
c0000b43:	01 d9                	add    ecx,ebx
c0000b45:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b48:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b4e:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b51:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b54:	89 ce                	mov    esi,ecx
c0000b56:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b59:	83 ce 01             	or     esi,0x1
c0000b5c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b5f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b62:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b65:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b69:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b6f:	eb 0c                	jmp    c0000b7d <malloc_consolidate+0xc1>
c0000b71:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b74:	83 c9 01             	or     ecx,0x1
c0000b77:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b81:	85 d2                	test   edx,edx
c0000b83:	0f 85 6f ff ff ff    	jne    c0000af8 <malloc_consolidate+0x3c>
c0000b89:	83 c5 04             	add    ebp,0x4
c0000b8c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b90:	0f 85 50 ff ff ff    	jne    c0000ae6 <malloc_consolidate+0x2a>
c0000b96:	83 c4 10             	add    esp,0x10
c0000b99:	5b                   	pop    ebx
c0000b9a:	5e                   	pop    esi
c0000b9b:	5f                   	pop    edi
c0000b9c:	5d                   	pop    ebp
c0000b9d:	c3                   	ret    
c0000b9e:	e9 b8 fe ff ff       	jmp    c0000a5b <malloc_init_state>

c0000ba3 <dlfree>:
c0000ba3:	57                   	push   edi
c0000ba4:	56                   	push   esi
c0000ba5:	53                   	push   ebx
c0000ba6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000baa:	85 db                	test   ebx,ebx
c0000bac:	0f 84 e2 00 00 00    	je     c0000c94 <dlfree+0xf1>
c0000bb2:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb5:	8b 0d c0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6c0
c0000bbb:	89 f0                	mov    eax,esi
c0000bbd:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc0:	83 e0 fc             	and    eax,0xfffffffc
c0000bc3:	39 c1                	cmp    ecx,eax
c0000bc5:	72 24                	jb     c0000beb <dlfree+0x48>
c0000bc7:	83 c9 03             	or     ecx,0x3
c0000bca:	c1 e8 03             	shr    eax,0x3
c0000bcd:	89 0d c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,ecx
c0000bd3:	83 e8 02             	sub    eax,0x2
c0000bd6:	8b 0c 85 c4 d6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd293c]
c0000bdd:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bdf:	89 14 85 c4 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd293c],edx
c0000be6:	e9 a9 00 00 00       	jmp    c0000c94 <dlfree+0xf1>
c0000beb:	83 e6 02             	and    esi,0x2
c0000bee:	0f 85 a0 00 00 00    	jne    c0000c94 <dlfree+0xf1>
c0000bf4:	83 c9 01             	or     ecx,0x1
c0000bf7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfa:	89 0d c0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c0,ecx
c0000c00:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c03:	83 e1 fc             	and    ecx,0xfffffffc
c0000c06:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0a:	75 13                	jne    c0000c1f <dlfree+0x7c>
c0000c0c:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c0f:	29 da                	sub    edx,ebx
c0000c11:	01 d8                	add    eax,ebx
c0000c13:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c16:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c19:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1c:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c1f:	39 35 ec d6 02 c0    	cmp    DWORD PTR ds:0xc002d6ec,esi
c0000c25:	74 40                	je     c0000c67 <dlfree+0xc4>
c0000c27:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2b:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c2e:	80 e3 01             	and    bl,0x1
c0000c31:	75 0e                	jne    c0000c41 <dlfree+0x9e>
c0000c33:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c36:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c39:	01 c8                	add    eax,ecx
c0000c3b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c3e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c41:	8b 0d fc d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6fc
c0000c47:	c7 42 0c f4 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d6f4
c0000c4e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c51:	89 15 fc d6 02 c0    	mov    DWORD PTR ds:0xc002d6fc,edx
c0000c57:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5a:	89 c1                	mov    ecx,eax
c0000c5c:	83 c9 01             	or     ecx,0x1
c0000c5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c62:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c65:	eb 10                	jmp    c0000c77 <dlfree+0xd4>
c0000c67:	01 c8                	add    eax,ecx
c0000c69:	89 c1                	mov    ecx,eax
c0000c6b:	83 c9 01             	or     ecx,0x1
c0000c6e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c71:	89 15 ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,edx
c0000c77:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7c:	76 16                	jbe    c0000c94 <dlfree+0xf1>
c0000c7e:	f6 05 c0 d6 02 c0 02 	test   BYTE PTR ds:0xc002d6c0,0x2
c0000c85:	74 0d                	je     c0000c94 <dlfree+0xf1>
c0000c87:	5b                   	pop    ebx
c0000c88:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0000c8d:	5e                   	pop    esi
c0000c8e:	5f                   	pop    edi
c0000c8f:	e9 28 fe ff ff       	jmp    c0000abc <malloc_consolidate>
c0000c94:	5b                   	pop    ebx
c0000c95:	5e                   	pop    esi
c0000c96:	5f                   	pop    edi
c0000c97:	c3                   	ret    

c0000c98 <sYSMALLOc>:
c0000c98:	55                   	push   ebp
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	89 d3                	mov    ebx,edx
c0000c9e:	83 ec 2c             	sub    esp,0x2c
c0000ca1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca5:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cab:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cae:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb5:	74 1f                	je     c0000cd6 <sYSMALLOc+0x3e>
c0000cb7:	89 d8                	mov    eax,ebx
c0000cb9:	e8 fe fd ff ff       	call   c0000abc <malloc_consolidate>
c0000cbe:	83 ec 0c             	sub    esp,0xc
c0000cc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc5:	83 e8 07             	sub    eax,0x7
c0000cc8:	50                   	push   eax
c0000cc9:	e8 30 02 00 00       	call   c0000efe <dlmalloc>
c0000cce:	83 c4 10             	add    esp,0x10
c0000cd1:	e9 20 02 00 00       	jmp    c0000ef6 <sYSMALLOc+0x25e>
c0000cd6:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cd9:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000cdf:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce2:	83 e0 fc             	and    eax,0xfffffffc
c0000ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ce9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ced:	83 c0 10             	add    eax,0x10
c0000cf0:	01 c1                	add    ecx,eax
c0000cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cfd:	74 04                	je     c0000d03 <sYSMALLOc+0x6b>
c0000cff:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d03:	f7 da                	neg    edx
c0000d05:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d0d:	21 d1                	and    ecx,edx
c0000d0f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d13:	7f 07                	jg     c0000d1c <sYSMALLOc+0x84>
c0000d15:	31 c0                	xor    eax,eax
c0000d17:	e9 da 01 00 00       	jmp    c0000ef6 <sYSMALLOc+0x25e>
c0000d1c:	83 ec 0c             	sub    esp,0xc
c0000d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d23:	e8 51 e7 00 00       	call   c000f479 <sbrk>
c0000d28:	83 c4 10             	add    esp,0x10
c0000d2b:	89 c6                	mov    esi,eax
c0000d2d:	83 f8 ff             	cmp    eax,0xffffffff
c0000d30:	74 e3                	je     c0000d15 <sYSMALLOc+0x7d>
c0000d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d36:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3a:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d3d:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d43:	39 f1                	cmp    ecx,esi
c0000d45:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4b:	75 13                	jne    c0000d60 <sYSMALLOc+0xc8>
c0000d4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d51:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d55:	83 c8 01             	or     eax,0x1
c0000d58:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5b:	e9 3e 01 00 00       	jmp    c0000e9e <sYSMALLOc+0x206>
c0000d60:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d66:	88 d0                	mov    al,dl
c0000d68:	83 e0 01             	and    eax,0x1
c0000d6b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d70:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d74:	0f 95 c0             	setne  al
c0000d77:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7b:	39 f1                	cmp    ecx,esi
c0000d7d:	76 12                	jbe    c0000d91 <sYSMALLOc+0xf9>
c0000d7f:	84 c0                	test   al,al
c0000d81:	74 0e                	je     c0000d91 <sYSMALLOc+0xf9>
c0000d83:	83 e2 fe             	and    edx,0xfffffffe
c0000d86:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8c:	e9 83 00 00 00       	jmp    c0000e14 <sYSMALLOc+0x17c>
c0000d91:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d96:	74 7c                	je     c0000e14 <sYSMALLOc+0x17c>
c0000d98:	84 c0                	test   al,al
c0000d9a:	74 0c                	je     c0000da8 <sYSMALLOc+0x110>
c0000d9c:	89 f0                	mov    eax,esi
c0000d9e:	29 c8                	sub    eax,ecx
c0000da0:	01 e8                	add    eax,ebp
c0000da2:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000da8:	89 f2                	mov    edx,esi
c0000daa:	83 e2 07             	and    edx,0x7
c0000dad:	74 0c                	je     c0000dbb <sYSMALLOc+0x123>
c0000daf:	b8 08 00 00 00       	mov    eax,0x8
c0000db4:	29 d0                	sub    eax,edx
c0000db6:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000db9:	eb 04                	jmp    c0000dbf <sYSMALLOc+0x127>
c0000dbb:	89 f5                	mov    ebp,esi
c0000dbd:	31 c0                	xor    eax,eax
c0000dbf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dcb:	01 c1                	add    ecx,eax
c0000dcd:	83 ec 0c             	sub    esp,0xc
c0000dd0:	01 f1                	add    ecx,esi
c0000dd2:	01 ca                	add    edx,ecx
c0000dd4:	29 c8                	sub    eax,ecx
c0000dd6:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000dda:	01 c2                	add    edx,eax
c0000ddc:	52                   	push   edx
c0000ddd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de1:	e8 93 e6 00 00       	call   c000f479 <sbrk>
c0000de6:	83 c4 10             	add    esp,0x10
c0000de9:	83 f8 ff             	cmp    eax,0xffffffff
c0000dec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df0:	75 0f                	jne    c0000e01 <sYSMALLOc+0x169>
c0000df2:	83 ec 0c             	sub    esp,0xc
c0000df5:	6a 00                	push   0x0
c0000df7:	e8 7d e6 00 00       	call   c000f479 <sbrk>
c0000dfc:	83 c4 10             	add    esp,0x10
c0000dff:	eb 30                	jmp    c0000e31 <sYSMALLOc+0x199>
c0000e01:	39 c6                	cmp    esi,eax
c0000e03:	76 33                	jbe    c0000e38 <sYSMALLOc+0x1a0>
c0000e05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e09:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e10:	01 f0                	add    eax,esi
c0000e12:	eb 1d                	jmp    c0000e31 <sYSMALLOc+0x199>
c0000e14:	83 ec 0c             	sub    esp,0xc
c0000e17:	89 f5                	mov    ebp,esi
c0000e19:	6a 00                	push   0x0
c0000e1b:	e8 59 e6 00 00       	call   c000f479 <sbrk>
c0000e20:	89 c2                	mov    edx,eax
c0000e22:	29 f2                	sub    edx,esi
c0000e24:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e28:	83 c4 10             	add    esp,0x10
c0000e2b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e31:	31 d2                	xor    edx,edx
c0000e33:	83 f8 ff             	cmp    eax,0xffffffff
c0000e36:	74 66                	je     c0000e9e <sYSMALLOc+0x206>
c0000e38:	29 e8                	sub    eax,ebp
c0000e3a:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e3d:	01 d0                	add    eax,edx
c0000e3f:	83 c8 01             	or     eax,0x1
c0000e42:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e45:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e50:	74 4c                	je     c0000e9e <sYSMALLOc+0x206>
c0000e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e56:	83 e8 0c             	sub    eax,0xc
c0000e59:	83 e0 f8             	and    eax,0xfffffff8
c0000e5c:	89 c2                	mov    edx,eax
c0000e5e:	83 ca 01             	or     edx,0x1
c0000e61:	83 f8 0f             	cmp    eax,0xf
c0000e64:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e67:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e6f:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e77:	76 25                	jbe    c0000e9e <sYSMALLOc+0x206>
c0000e79:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e7f:	83 ec 0c             	sub    esp,0xc
c0000e82:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8c:	83 c7 08             	add    edi,0x8
c0000e8f:	57                   	push   edi
c0000e90:	e8 0e fd ff ff       	call   c0000ba3 <dlfree>
c0000e95:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9b:	83 c4 10             	add    esp,0x10
c0000e9e:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea4:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000eaa:	73 06                	jae    c0000eb2 <sYSMALLOc+0x21a>
c0000eac:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb2:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eb8:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ebe:	73 06                	jae    c0000ec6 <sYSMALLOc+0x22e>
c0000ec0:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ec9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ecc:	83 e2 fc             	and    edx,0xfffffffc
c0000ecf:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed3:	0f 82 3c fe ff ff    	jb     c0000d15 <sYSMALLOc+0x7d>
c0000ed9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000edd:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee0:	29 fa                	sub    edx,edi
c0000ee2:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee5:	83 ca 01             	or     edx,0x1
c0000ee8:	89 fb                	mov    ebx,edi
c0000eea:	83 c0 08             	add    eax,0x8
c0000eed:	83 cb 01             	or     ebx,0x1
c0000ef0:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef6:	83 c4 2c             	add    esp,0x2c
c0000ef9:	5b                   	pop    ebx
c0000efa:	5e                   	pop    esi
c0000efb:	5f                   	pop    edi
c0000efc:	5d                   	pop    ebp
c0000efd:	c3                   	ret    

c0000efe <dlmalloc>:
c0000efe:	55                   	push   ebp
c0000eff:	57                   	push   edi
c0000f00:	56                   	push   esi
c0000f01:	53                   	push   ebx
c0000f02:	83 ec 1c             	sub    esp,0x1c
c0000f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f09:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0c:	0f 87 70 03 00 00    	ja     c0001282 <dlmalloc+0x384>
c0000f12:	83 c0 0b             	add    eax,0xb
c0000f15:	be 10 00 00 00       	mov    esi,0x10
c0000f1a:	83 f8 0f             	cmp    eax,0xf
c0000f1d:	76 05                	jbe    c0000f24 <dlmalloc+0x26>
c0000f1f:	83 e0 f8             	and    eax,0xfffffff8
c0000f22:	89 c6                	mov    esi,eax
c0000f24:	8b 3d c0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6c0
c0000f2a:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f30:	75 17                	jne    c0000f49 <dlmalloc+0x4b>
c0000f32:	85 ff                	test   edi,edi
c0000f34:	0f 85 05 03 00 00    	jne    c000123f <dlmalloc+0x341>
c0000f3a:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0000f3f:	e8 78 fb ff ff       	call   c0000abc <malloc_consolidate>
c0000f44:	e9 f6 02 00 00       	jmp    c000123f <dlmalloc+0x341>
c0000f49:	39 f7                	cmp    edi,esi
c0000f4b:	72 1f                	jb     c0000f6c <dlmalloc+0x6e>
c0000f4d:	89 f2                	mov    edx,esi
c0000f4f:	c1 ea 03             	shr    edx,0x3
c0000f52:	83 ea 02             	sub    edx,0x2
c0000f55:	8b 04 95 c4 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd293c]
c0000f5c:	85 c0                	test   eax,eax
c0000f5e:	74 0c                	je     c0000f6c <dlmalloc+0x6e>
c0000f60:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f63:	89 0c 95 c4 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd293c],ecx
c0000f6a:	eb 30                	jmp    c0000f9c <dlmalloc+0x9e>
c0000f6c:	89 f0                	mov    eax,esi
c0000f6e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f74:	77 2e                	ja     c0000fa4 <dlmalloc+0xa6>
c0000f76:	c1 e8 03             	shr    eax,0x3
c0000f79:	8d 14 c5 f4 d6 02 c0 	lea    edx,[eax*8-0x3ffd290c]
c0000f80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f84:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f87:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8a:	39 c3                	cmp    ebx,eax
c0000f8c:	74 2e                	je     c0000fbc <dlmalloc+0xbe>
c0000f8e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f91:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f96:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f99:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9c:	83 c0 08             	add    eax,0x8
c0000f9f:	e9 e0 02 00 00       	jmp    c0001284 <dlmalloc+0x386>
c0000fa4:	e8 8f fa ff ff       	call   c0000a38 <largebin_index>
c0000fa9:	83 e7 02             	and    edi,0x2
c0000fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb0:	74 0a                	je     c0000fbc <dlmalloc+0xbe>
c0000fb2:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0000fb7:	e8 00 fb ff ff       	call   c0000abc <malloc_consolidate>
c0000fbc:	8d 46 10             	lea    eax,[esi+0x10]
c0000fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc3:	8b 1d 00 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d700
c0000fc9:	81 fb f4 d6 02 c0    	cmp    ebx,0xc002d6f4
c0000fcf:	0f 84 13 01 00 00    	je     c00010e8 <dlmalloc+0x1ea>
c0000fd5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fdb:	83 e7 fc             	and    edi,0xfffffffc
c0000fde:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe4:	77 4c                	ja     c0001032 <dlmalloc+0x134>
c0000fe6:	3d f4 d6 02 c0       	cmp    eax,0xc002d6f4
c0000feb:	75 45                	jne    c0001032 <dlmalloc+0x134>
c0000fed:	39 1d f0 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6f0,ebx
c0000ff3:	75 3d                	jne    c0001032 <dlmalloc+0x134>
c0000ff5:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff9:	73 37                	jae    c0001032 <dlmalloc+0x134>
c0000ffb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ffe:	89 fa                	mov    edx,edi
c0001000:	a3 fc d6 02 c0       	mov    ds:0xc002d6fc,eax
c0001005:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c000100a:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c000100f:	29 f2                	sub    edx,esi
c0001011:	c7 40 08 f4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6f4
c0001018:	c7 40 0c f4 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d6f4
c000101f:	83 ce 01             	or     esi,0x1
c0001022:	89 d1                	mov    ecx,edx
c0001024:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001027:	83 c9 01             	or     ecx,0x1
c000102a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102d:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001030:	eb 15                	jmp    c0001047 <dlmalloc+0x149>
c0001032:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c0001037:	39 fe                	cmp    esi,edi
c0001039:	c7 40 08 f4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6f4
c0001040:	75 0d                	jne    c000104f <dlmalloc+0x151>
c0001042:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001047:	8d 43 08             	lea    eax,[ebx+0x8]
c000104a:	e9 35 02 00 00       	jmp    c0001284 <dlmalloc+0x386>
c000104f:	89 f8                	mov    eax,edi
c0001051:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001057:	77 19                	ja     c0001072 <dlmalloc+0x174>
c0001059:	c1 e8 03             	shr    eax,0x3
c000105c:	8d 14 00             	lea    edx,[eax+eax*1]
c000105f:	83 c2 0d             	add    edx,0xd
c0001062:	8d 2c 95 b8 d6 02 c0 	lea    ebp,[edx*4-0x3ffd2948]
c0001069:	8b 14 95 c0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2940]
c0001070:	eb 46                	jmp    c00010b8 <dlmalloc+0x1ba>
c0001072:	e8 c1 f9 ff ff       	call   c0000a38 <largebin_index>
c0001077:	8d 14 00             	lea    edx,[eax+eax*1]
c000107a:	83 c2 0d             	add    edx,0xd
c000107d:	8d 0c 95 c0 d6 02 c0 	lea    ecx,[edx*4-0x3ffd2940]
c0001084:	8b 14 95 c0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2940]
c000108b:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000108e:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001092:	89 d5                	mov    ebp,edx
c0001094:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001098:	74 1e                	je     c00010b8 <dlmalloc+0x1ba>
c000109a:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109d:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a0:	77 12                	ja     c00010b4 <dlmalloc+0x1b6>
c00010a2:	83 cf 01             	or     edi,0x1
c00010a5:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a8:	76 05                	jbe    c00010af <dlmalloc+0x1b1>
c00010aa:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010ad:	eb f6                	jmp    c00010a5 <dlmalloc+0x1a7>
c00010af:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b2:	eb 04                	jmp    c00010b8 <dlmalloc+0x1ba>
c00010b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b8:	89 c7                	mov    edi,eax
c00010ba:	88 c1                	mov    cl,al
c00010bc:	c1 ff 05             	sar    edi,0x5
c00010bf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c3:	bf 01 00 00 00       	mov    edi,0x1
c00010c8:	d3 e7                	shl    edi,cl
c00010ca:	89 f8                	mov    eax,edi
c00010cc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d0:	09 04 bd f4 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd260c],eax
c00010d7:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010da:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010dd:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e0:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e3:	e9 db fe ff ff       	jmp    c0000fc3 <dlmalloc+0xc5>
c00010e8:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010ee:	76 78                	jbe    c0001168 <dlmalloc+0x26a>
c00010f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f4:	8d 04 c5 f4 d6 02 c0 	lea    eax,[eax*8-0x3ffd290c]
c00010fb:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010fe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001101:	39 ca                	cmp    edx,ecx
c0001103:	74 63                	je     c0001168 <dlmalloc+0x26a>
c0001105:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001108:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110b:	83 e3 fc             	and    ebx,0xfffffffc
c000110e:	39 de                	cmp    esi,ebx
c0001110:	77 52                	ja     c0001164 <dlmalloc+0x266>
c0001112:	89 df                	mov    edi,ebx
c0001114:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001117:	29 f7                	sub    edi,esi
c0001119:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111c:	01 d3                	add    ebx,edx
c000111e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001121:	83 ff 0f             	cmp    edi,0xf
c0001124:	8d 42 08             	lea    eax,[edx+0x8]
c0001127:	77 09                	ja     c0001132 <dlmalloc+0x234>
c0001129:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112d:	e9 52 01 00 00       	jmp    c0001284 <dlmalloc+0x386>
c0001132:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 0d fc d6 02 c0    	mov    DWORD PTR ds:0xc002d6fc,ecx
c000113e:	89 0d 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,ecx
c0001144:	c7 41 08 f4 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d6f4
c000114b:	c7 41 0c f4 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d6f4
c0001152:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001155:	89 fa                	mov    edx,edi
c0001157:	83 ca 01             	or     edx,0x1
c000115a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115d:	89 3b                	mov    DWORD PTR [ebx],edi
c000115f:	e9 20 01 00 00       	jmp    c0001284 <dlmalloc+0x386>
c0001164:	89 c2                	mov    edx,eax
c0001166:	eb 99                	jmp    c0001101 <dlmalloc+0x203>
c0001168:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116c:	b8 01 00 00 00       	mov    eax,0x1
c0001171:	41                   	inc    ecx
c0001172:	89 cb                	mov    ebx,ecx
c0001174:	8d 14 cd ec d6 02 c0 	lea    edx,[ecx*8-0x3ffd2914]
c000117b:	c1 eb 05             	shr    ebx,0x5
c000117e:	d3 e0                	shl    eax,cl
c0001180:	8b 3c 9d f4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd260c]
c0001187:	39 f8                	cmp    eax,edi
c0001189:	77 04                	ja     c000118f <dlmalloc+0x291>
c000118b:	85 c0                	test   eax,eax
c000118d:	75 26                	jne    c00011b5 <dlmalloc+0x2b7>
c000118f:	43                   	inc    ebx
c0001190:	83 fb 02             	cmp    ebx,0x2
c0001193:	0f 87 a6 00 00 00    	ja     c000123f <dlmalloc+0x341>
c0001199:	8b 3c 9d f4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd260c]
c00011a0:	85 ff                	test   edi,edi
c00011a2:	74 eb                	je     c000118f <dlmalloc+0x291>
c00011a4:	89 d8                	mov    eax,ebx
c00011a6:	c1 e0 06             	shl    eax,0x6
c00011a9:	8d 14 85 ec d6 02 c0 	lea    edx,[eax*4-0x3ffd2914]
c00011b0:	b8 01 00 00 00       	mov    eax,0x1
c00011b5:	85 f8                	test   eax,edi
c00011b7:	75 07                	jne    c00011c0 <dlmalloc+0x2c2>
c00011b9:	83 c2 08             	add    edx,0x8
c00011bc:	01 c0                	add    eax,eax
c00011be:	eb f5                	jmp    c00011b5 <dlmalloc+0x2b7>
c00011c0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c3:	39 ca                	cmp    edx,ecx
c00011c5:	75 14                	jne    c00011db <dlmalloc+0x2dd>
c00011c7:	89 c1                	mov    ecx,eax
c00011c9:	83 c2 08             	add    edx,0x8
c00011cc:	f7 d1                	not    ecx
c00011ce:	01 c0                	add    eax,eax
c00011d0:	21 cf                	and    edi,ecx
c00011d2:	89 3c 9d f4 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd260c],edi
c00011d9:	eb ac                	jmp    c0001187 <dlmalloc+0x289>
c00011db:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011de:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e1:	83 e0 fc             	and    eax,0xfffffffc
c00011e4:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e7:	89 c3                	mov    ebx,eax
c00011e9:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ec:	29 f3                	sub    ebx,esi
c00011ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f1:	83 fb 0f             	cmp    ebx,0xf
c00011f4:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f7:	77 09                	ja     c0001202 <dlmalloc+0x304>
c00011f9:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011fd:	e9 82 00 00 00       	jmp    c0001284 <dlmalloc+0x386>
c0001202:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	89 3d fc d6 02 c0    	mov    DWORD PTR ds:0xc002d6fc,edi
c0001211:	89 3d 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,edi
c0001217:	c7 47 08 f4 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d6f4
c000121e:	c7 47 0c f4 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d6f4
c0001225:	77 06                	ja     c000122d <dlmalloc+0x32f>
c0001227:	89 3d f0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f0,edi
c000122d:	83 ce 01             	or     esi,0x1
c0001230:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001233:	89 d9                	mov    ecx,ebx
c0001235:	83 c9 01             	or     ecx,0x1
c0001238:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123b:	89 1a                	mov    DWORD PTR [edx],ebx
c000123d:	eb 45                	jmp    c0001284 <dlmalloc+0x386>
c000123f:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c0001244:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001247:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124a:	83 e2 fc             	and    edx,0xfffffffc
c000124d:	39 d1                	cmp    ecx,edx
c000124f:	77 1e                	ja     c000126f <dlmalloc+0x371>
c0001251:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001254:	89 f3                	mov    ebx,esi
c0001256:	89 0d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,ecx
c000125c:	83 cb 01             	or     ebx,0x1
c000125f:	29 f2                	sub    edx,esi
c0001261:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001264:	83 ca 01             	or     edx,0x1
c0001267:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126a:	e9 2d fd ff ff       	jmp    c0000f9c <dlmalloc+0x9e>
c000126f:	83 c4 1c             	add    esp,0x1c
c0001272:	89 f0                	mov    eax,esi
c0001274:	5b                   	pop    ebx
c0001275:	ba c0 d6 02 c0       	mov    edx,0xc002d6c0
c000127a:	5e                   	pop    esi
c000127b:	5f                   	pop    edi
c000127c:	5d                   	pop    ebp
c000127d:	e9 16 fa ff ff       	jmp    c0000c98 <sYSMALLOc>
c0001282:	31 c0                	xor    eax,eax
c0001284:	83 c4 1c             	add    esp,0x1c
c0001287:	5b                   	pop    ebx
c0001288:	5e                   	pop    esi
c0001289:	5f                   	pop    edi
c000128a:	5d                   	pop    ebp
c000128b:	c3                   	ret    

c000128c <iALLOc>:
c000128c:	55                   	push   ebp
c000128d:	89 c5                	mov    ebp,eax
c000128f:	57                   	push   edi
c0001290:	56                   	push   esi
c0001291:	53                   	push   ebx
c0001292:	83 ec 2c             	sub    esp,0x2c
c0001295:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001299:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000129d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a1:	83 3d c0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c0,0x0
c00012a8:	75 12                	jne    c00012bc <iALLOc+0x30>
c00012aa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012ae:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00012b3:	e8 04 f8 ff ff       	call   c0000abc <malloc_consolidate>
c00012b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c1:	74 12                	je     c00012d5 <iALLOc+0x49>
c00012c3:	85 ed                	test   ebp,ebp
c00012c5:	0f 84 64 01 00 00    	je     c000142f <iALLOc+0x1a3>
c00012cb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d3:	eb 33                	jmp    c0001308 <iALLOc+0x7c>
c00012d5:	85 ed                	test   ebp,ebp
c00012d7:	75 14                	jne    c00012ed <iALLOc+0x61>
c00012d9:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e1:	83 c4 2c             	add    esp,0x2c
c00012e4:	5b                   	pop    ebx
c00012e5:	5e                   	pop    esi
c00012e6:	5f                   	pop    edi
c00012e7:	5d                   	pop    ebp
c00012e8:	e9 11 fc ff ff       	jmp    c0000efe <dlmalloc>
c00012ed:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f4:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012fc:	83 f8 0f             	cmp    eax,0xf
c00012ff:	76 07                	jbe    c0001308 <iALLOc+0x7c>
c0001301:	83 e0 f8             	and    eax,0xfffffff8
c0001304:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001308:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130d:	75 09                	jne    c0001318 <iALLOc+0x8c>
c000130f:	89 d0                	mov    eax,edx
c0001311:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001314:	31 f6                	xor    esi,esi
c0001316:	eb 3b                	jmp    c0001353 <iALLOc+0xc7>
c0001318:	8b 02                	mov    eax,DWORD PTR [edx]
c000131a:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001322:	83 c0 0b             	add    eax,0xb
c0001325:	83 f8 0f             	cmp    eax,0xf
c0001328:	76 07                	jbe    c0001331 <iALLOc+0xa5>
c000132a:	83 e0 f8             	and    eax,0xfffffff8
c000132d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001331:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001335:	0f af f5             	imul   esi,ebp
c0001338:	eb 25                	jmp    c000135f <iALLOc+0xd3>
c000133a:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133c:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000133f:	bb 10 00 00 00       	mov    ebx,0x10
c0001344:	83 f9 0f             	cmp    ecx,0xf
c0001347:	76 05                	jbe    c000134e <iALLOc+0xc2>
c0001349:	83 e1 f8             	and    ecx,0xfffffff8
c000134c:	89 cb                	mov    ebx,ecx
c000134e:	01 de                	add    esi,ebx
c0001350:	83 c0 04             	add    eax,0x4
c0001353:	39 c7                	cmp    edi,eax
c0001355:	75 e3                	jne    c000133a <iALLOc+0xae>
c0001357:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000135f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001363:	8b 1d 14 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da14
c0001369:	83 ec 0c             	sub    esp,0xc
c000136c:	c7 05 14 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da14,0x0
c0001376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137a:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000137e:	50                   	push   eax
c000137f:	e8 7a fb ff ff       	call   c0000efe <dlmalloc>
c0001384:	83 c4 10             	add    esp,0x10
c0001387:	89 1d 14 da 02 c0    	mov    DWORD PTR ds:0xc002da14,ebx
c000138d:	85 c0                	test   eax,eax
c000138f:	0f 84 92 00 00 00    	je     c0001427 <iALLOc+0x19b>
c0001395:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001398:	8d 78 f8             	lea    edi,[eax-0x8]
c000139b:	83 e3 fc             	and    ebx,0xfffffffc
c000139e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a2:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a7:	74 1e                	je     c00013c7 <iALLOc+0x13b>
c00013a9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013ad:	89 d9                	mov    ecx,ebx
c00013af:	52                   	push   edx
c00013b0:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b4:	83 e9 04             	sub    ecx,0x4
c00013b7:	51                   	push   ecx
c00013b8:	6a 00                	push   0x0
c00013ba:	50                   	push   eax
c00013bb:	e8 02 f3 ff ff       	call   c00006c2 <memset>
c00013c0:	83 c4 10             	add    esp,0x10
c00013c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013cc:	75 14                	jne    c00013e2 <iALLOc+0x156>
c00013ce:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d1:	29 f3                	sub    ebx,esi
c00013d3:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d6:	83 cb 01             	or     ebx,0x1
c00013d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013dd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e0:	89 f3                	mov    ebx,esi
c00013e2:	31 c0                	xor    eax,eax
c00013e4:	4d                   	dec    ebp
c00013e5:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ec:	39 c5                	cmp    ebp,eax
c00013ee:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f1:	74 2c                	je     c000141f <iALLOc+0x193>
c00013f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f7:	85 c9                	test   ecx,ecx
c00013f9:	75 15                	jne    c0001410 <iALLOc+0x184>
c00013fb:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013fe:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001401:	b9 10 00 00 00       	mov    ecx,0x10
c0001406:	83 fe 0f             	cmp    esi,0xf
c0001409:	76 05                	jbe    c0001410 <iALLOc+0x184>
c000140b:	83 e6 f8             	and    esi,0xfffffff8
c000140e:	89 f1                	mov    ecx,esi
c0001410:	89 ce                	mov    esi,ecx
c0001412:	29 cb                	sub    ebx,ecx
c0001414:	83 ce 01             	or     esi,0x1
c0001417:	40                   	inc    eax
c0001418:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141b:	01 cf                	add    edi,ecx
c000141d:	eb c6                	jmp    c00013e5 <iALLOc+0x159>
c000141f:	83 cb 01             	or     ebx,0x1
c0001422:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001425:	eb 08                	jmp    c000142f <iALLOc+0x1a3>
c0001427:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000142f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001433:	83 c4 2c             	add    esp,0x2c
c0001436:	5b                   	pop    ebx
c0001437:	5e                   	pop    esi
c0001438:	5f                   	pop    edi
c0001439:	5d                   	pop    ebp
c000143a:	c3                   	ret    

c000143b <dlrealloc>:
c000143b:	55                   	push   ebp
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 1c             	sub    esp,0x1c
c0001442:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001446:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144a:	85 db                	test   ebx,ebx
c000144c:	75 10                	jne    c000145e <dlrealloc+0x23>
c000144e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001452:	83 c4 1c             	add    esp,0x1c
c0001455:	5b                   	pop    ebx
c0001456:	5e                   	pop    esi
c0001457:	5f                   	pop    edi
c0001458:	5d                   	pop    ebp
c0001459:	e9 a0 fa ff ff       	jmp    c0000efe <dlmalloc>
c000145e:	83 f8 df             	cmp    eax,0xffffffdf
c0001461:	76 07                	jbe    c000146a <dlrealloc+0x2f>
c0001463:	31 db                	xor    ebx,ebx
c0001465:	e9 7c 01 00 00       	jmp    c00015e6 <dlrealloc+0x1ab>
c000146a:	83 c0 0b             	add    eax,0xb
c000146d:	bf 10 00 00 00       	mov    edi,0x10
c0001472:	83 f8 0f             	cmp    eax,0xf
c0001475:	76 05                	jbe    c000147c <dlrealloc+0x41>
c0001477:	83 e0 f8             	and    eax,0xfffffff8
c000147a:	89 c7                	mov    edi,eax
c000147c:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000147f:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001482:	89 c6                	mov    esi,eax
c0001484:	83 e6 fc             	and    esi,0xfffffffc
c0001487:	a8 02                	test   al,0x2
c0001489:	75 d8                	jne    c0001463 <dlrealloc+0x28>
c000148b:	39 f7                	cmp    edi,esi
c000148d:	0f 86 15 01 00 00    	jbe    c00015a8 <dlrealloc+0x16d>
c0001493:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001497:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149a:	39 15 ec d6 02 c0    	cmp    DWORD PTR ds:0xc002d6ec,edx
c00014a0:	75 33                	jne    c00014d5 <dlrealloc+0x9a>
c00014a2:	83 e1 fc             	and    ecx,0xfffffffc
c00014a5:	01 f1                	add    ecx,esi
c00014a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ab:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014ae:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b2:	77 49                	ja     c00014fd <dlrealloc+0xc2>
c00014b4:	01 fd                	add    ebp,edi
c00014b6:	83 e0 01             	and    eax,0x1
c00014b9:	09 f8                	or     eax,edi
c00014bb:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014be:	89 2d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,ebp
c00014c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014c8:	29 f8                	sub    eax,edi
c00014ca:	83 c8 01             	or     eax,0x1
c00014cd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d0:	e9 11 01 00 00       	jmp    c00015e6 <dlrealloc+0x1ab>
c00014d5:	89 c8                	mov    eax,ecx
c00014d7:	83 e0 fe             	and    eax,0xfffffffe
c00014da:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014df:	75 1c                	jne    c00014fd <dlrealloc+0xc2>
c00014e1:	83 e1 fc             	and    ecx,0xfffffffc
c00014e4:	01 f1                	add    ecx,esi
c00014e6:	39 cf                	cmp    edi,ecx
c00014e8:	77 13                	ja     c00014fd <dlrealloc+0xc2>
c00014ea:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ed:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f6:	89 ce                	mov    esi,ecx
c00014f8:	e9 ab 00 00 00       	jmp    c00015a8 <dlrealloc+0x16d>
c00014fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001501:	8d 47 f9             	lea    eax,[edi-0x7]
c0001504:	83 ec 0c             	sub    esp,0xc
c0001507:	50                   	push   eax
c0001508:	e8 f1 f9 ff ff       	call   c0000efe <dlmalloc>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	89 c1                	mov    ecx,eax
c0001512:	85 c0                	test   eax,eax
c0001514:	0f 84 49 ff ff ff    	je     c0001463 <dlrealloc+0x28>
c000151a:	8d 40 f8             	lea    eax,[eax-0x8]
c000151d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001521:	39 c2                	cmp    edx,eax
c0001523:	75 0a                	jne    c000152f <dlrealloc+0xf4>
c0001525:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001528:	83 e0 fc             	and    eax,0xfffffffc
c000152b:	01 c6                	add    esi,eax
c000152d:	eb 79                	jmp    c00015a8 <dlrealloc+0x16d>
c000152f:	83 ee 04             	sub    esi,0x4
c0001532:	83 fe 27             	cmp    esi,0x27
c0001535:	76 16                	jbe    c000154d <dlrealloc+0x112>
c0001537:	50                   	push   eax
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	51                   	push   ecx
c000153b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000153f:	e8 5c f1 ff ff       	call   c00006a0 <memcpy>
c0001544:	83 c4 10             	add    esp,0x10
c0001547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154b:	eb 43                	jmp    c0001590 <dlrealloc+0x155>
c000154d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000154f:	83 fe 13             	cmp    esi,0x13
c0001552:	89 01                	mov    DWORD PTR [ecx],eax
c0001554:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001557:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001560:	76 2e                	jbe    c0001590 <dlrealloc+0x155>
c0001562:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001565:	83 fe 1b             	cmp    esi,0x1b
c0001568:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000156e:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001571:	76 1d                	jbe    c0001590 <dlrealloc+0x155>
c0001573:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001576:	83 fe 23             	cmp    esi,0x23
c0001579:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000157f:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001582:	76 0c                	jbe    c0001590 <dlrealloc+0x155>
c0001584:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001587:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158d:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001590:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001594:	83 ec 0c             	sub    esp,0xc
c0001597:	53                   	push   ebx
c0001598:	e8 06 f6 ff ff       	call   c0000ba3 <dlfree>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a4:	89 cb                	mov    ebx,ecx
c00015a6:	eb 3e                	jmp    c00015e6 <dlrealloc+0x1ab>
c00015a8:	89 f2                	mov    edx,esi
c00015aa:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015ad:	29 fa                	sub    edx,edi
c00015af:	83 e1 01             	and    ecx,0x1
c00015b2:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b6:	83 fa 0f             	cmp    edx,0xf
c00015b9:	77 0b                	ja     c00015c6 <dlrealloc+0x18b>
c00015bb:	09 ce                	or     esi,ecx
c00015bd:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c0:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c4:	eb 20                	jmp    c00015e6 <dlrealloc+0x1ab>
c00015c6:	01 fd                	add    ebp,edi
c00015c8:	83 ec 0c             	sub    esp,0xc
c00015cb:	09 cf                	or     edi,ecx
c00015cd:	83 ca 01             	or     edx,0x1
c00015d0:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d3:	83 c5 08             	add    ebp,0x8
c00015d6:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015dd:	55                   	push   ebp
c00015de:	e8 c0 f5 ff ff       	call   c0000ba3 <dlfree>
c00015e3:	83 c4 10             	add    esp,0x10
c00015e6:	83 c4 1c             	add    esp,0x1c
c00015e9:	89 d8                	mov    eax,ebx
c00015eb:	5b                   	pop    ebx
c00015ec:	5e                   	pop    esi
c00015ed:	5f                   	pop    edi
c00015ee:	5d                   	pop    ebp
c00015ef:	c3                   	ret    

c00015f0 <dlmemalign>:
c00015f0:	55                   	push   ebp
c00015f1:	57                   	push   edi
c00015f2:	56                   	push   esi
c00015f3:	53                   	push   ebx
c00015f4:	83 ec 0c             	sub    esp,0xc
c00015f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015ff:	83 fa 08             	cmp    edx,0x8
c0001602:	77 10                	ja     c0001614 <dlmemalign+0x24>
c0001604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001608:	83 c4 0c             	add    esp,0xc
c000160b:	5b                   	pop    ebx
c000160c:	5e                   	pop    esi
c000160d:	5f                   	pop    edi
c000160e:	5d                   	pop    ebp
c000160f:	e9 ea f8 ff ff       	jmp    c0000efe <dlmalloc>
c0001614:	bf 10 00 00 00       	mov    edi,0x10
c0001619:	83 fa 0f             	cmp    edx,0xf
c000161c:	76 13                	jbe    c0001631 <dlmemalign+0x41>
c000161e:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001621:	85 d1                	test   ecx,edx
c0001623:	75 04                	jne    c0001629 <dlmemalign+0x39>
c0001625:	89 d7                	mov    edi,edx
c0001627:	eb 08                	jmp    c0001631 <dlmemalign+0x41>
c0001629:	39 d7                	cmp    edi,edx
c000162b:	73 04                	jae    c0001631 <dlmemalign+0x41>
c000162d:	01 ff                	add    edi,edi
c000162f:	eb f8                	jmp    c0001629 <dlmemalign+0x39>
c0001631:	83 f8 df             	cmp    eax,0xffffffdf
c0001634:	76 07                	jbe    c000163d <dlmemalign+0x4d>
c0001636:	31 c0                	xor    eax,eax
c0001638:	e9 ce 00 00 00       	jmp    c000170b <dlmemalign+0x11b>
c000163d:	83 c0 0b             	add    eax,0xb
c0001640:	bd 10 00 00 00       	mov    ebp,0x10
c0001645:	83 f8 0f             	cmp    eax,0xf
c0001648:	76 05                	jbe    c000164f <dlmemalign+0x5f>
c000164a:	83 e0 f8             	and    eax,0xfffffff8
c000164d:	89 c5                	mov    ebp,eax
c000164f:	83 ec 0c             	sub    esp,0xc
c0001652:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001656:	50                   	push   eax
c0001657:	e8 a2 f8 ff ff       	call   c0000efe <dlmalloc>
c000165c:	83 c4 10             	add    esp,0x10
c000165f:	89 c1                	mov    ecx,eax
c0001661:	85 c0                	test   eax,eax
c0001663:	74 d1                	je     c0001636 <dlmemalign+0x46>
c0001665:	31 d2                	xor    edx,edx
c0001667:	8d 70 f8             	lea    esi,[eax-0x8]
c000166a:	f7 f7                	div    edi
c000166c:	85 d2                	test   edx,edx
c000166e:	74 62                	je     c00016d2 <dlmemalign+0xe2>
c0001670:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001674:	89 f8                	mov    eax,edi
c0001676:	f7 d8                	neg    eax
c0001678:	21 c3                	and    ebx,eax
c000167a:	83 eb 08             	sub    ebx,0x8
c000167d:	89 d8                	mov    eax,ebx
c000167f:	29 f0                	sub    eax,esi
c0001681:	83 f8 0f             	cmp    eax,0xf
c0001684:	77 02                	ja     c0001688 <dlmemalign+0x98>
c0001686:	01 fb                	add    ebx,edi
c0001688:	89 d8                	mov    eax,ebx
c000168a:	29 f0                	sub    eax,esi
c000168c:	89 c6                	mov    esi,eax
c000168e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001691:	89 c2                	mov    edx,eax
c0001693:	83 e2 fc             	and    edx,0xfffffffc
c0001696:	29 f2                	sub    edx,esi
c0001698:	a8 02                	test   al,0x2
c000169a:	74 10                	je     c00016ac <dlmemalign+0xbc>
c000169c:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000169f:	83 ca 02             	or     edx,0x2
c00016a2:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a5:	89 33                	mov    DWORD PTR [ebx],esi
c00016a7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016aa:	eb 5f                	jmp    c000170b <dlmemalign+0x11b>
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	89 d0                	mov    eax,edx
c00016b1:	83 c8 01             	or     eax,0x1
c00016b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b7:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016bc:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016bf:	83 e0 01             	and    eax,0x1
c00016c2:	09 f0                	or     eax,esi
c00016c4:	89 de                	mov    esi,ebx
c00016c6:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c9:	51                   	push   ecx
c00016ca:	e8 d4 f4 ff ff       	call   c0000ba3 <dlfree>
c00016cf:	83 c4 10             	add    esp,0x10
c00016d2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d5:	a8 02                	test   al,0x2
c00016d7:	75 2f                	jne    c0001708 <dlmemalign+0x118>
c00016d9:	83 e0 fc             	and    eax,0xfffffffc
c00016dc:	8d 55 10             	lea    edx,[ebp+0x10]
c00016df:	39 c2                	cmp    edx,eax
c00016e1:	73 25                	jae    c0001708 <dlmemalign+0x118>
c00016e3:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e6:	83 ec 0c             	sub    esp,0xc
c00016e9:	29 e8                	sub    eax,ebp
c00016eb:	83 c2 08             	add    edx,0x8
c00016ee:	83 c8 01             	or     eax,0x1
c00016f1:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f7:	83 e0 01             	and    eax,0x1
c00016fa:	09 c5                	or     ebp,eax
c00016fc:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016ff:	52                   	push   edx
c0001700:	e8 9e f4 ff ff       	call   c0000ba3 <dlfree>
c0001705:	83 c4 10             	add    esp,0x10
c0001708:	8d 46 08             	lea    eax,[esi+0x8]
c000170b:	83 c4 0c             	add    esp,0xc
c000170e:	5b                   	pop    ebx
c000170f:	5e                   	pop    esi
c0001710:	5f                   	pop    edi
c0001711:	5d                   	pop    ebp
c0001712:	c3                   	ret    

c0001713 <dlcalloc>:
c0001713:	53                   	push   ebx
c0001714:	83 ec 14             	sub    esp,0x14
c0001717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171b:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001720:	50                   	push   eax
c0001721:	e8 d8 f7 ff ff       	call   c0000efe <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c3                	mov    ebx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	74 77                	je     c00017a6 <dlcalloc+0x93>
c000172f:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001732:	89 d0                	mov    eax,edx
c0001734:	83 e0 fc             	and    eax,0xfffffffc
c0001737:	80 e2 02             	and    dl,0x2
c000173a:	75 5a                	jne    c0001796 <dlcalloc+0x83>
c000173c:	83 e8 04             	sub    eax,0x4
c000173f:	83 f8 27             	cmp    eax,0x27
c0001742:	76 03                	jbe    c0001747 <dlcalloc+0x34>
c0001744:	51                   	push   ecx
c0001745:	eb 53                	jmp    c000179a <dlcalloc+0x87>
c0001747:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001754:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175b:	83 f8 13             	cmp    eax,0x13
c000175e:	76 46                	jbe    c00017a6 <dlcalloc+0x93>
c0001760:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001767:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000176e:	83 f8 1b             	cmp    eax,0x1b
c0001771:	76 33                	jbe    c00017a6 <dlcalloc+0x93>
c0001773:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001781:	83 f8 23             	cmp    eax,0x23
c0001784:	76 20                	jbe    c00017a6 <dlcalloc+0x93>
c0001786:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178d:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001794:	eb 10                	jmp    c00017a6 <dlcalloc+0x93>
c0001796:	83 e8 08             	sub    eax,0x8
c0001799:	52                   	push   edx
c000179a:	50                   	push   eax
c000179b:	6a 00                	push   0x0
c000179d:	53                   	push   ebx
c000179e:	e8 1f ef ff ff       	call   c00006c2 <memset>
c00017a3:	83 c4 10             	add    esp,0x10
c00017a6:	89 d8                	mov    eax,ebx
c00017a8:	83 c4 08             	add    esp,0x8
c00017ab:	5b                   	pop    ebx
c00017ac:	c3                   	ret    

c00017ad <dlcfree>:
c00017ad:	e9 f1 f3 ff ff       	jmp    c0000ba3 <dlfree>

c00017b2 <dlindependent_calloc>:
c00017b2:	83 ec 28             	sub    esp,0x28
c00017b5:	b9 03 00 00 00       	mov    ecx,0x3
c00017ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017ce:	e8 b9 fa ff ff       	call   c000128c <iALLOc>
c00017d3:	83 c4 2c             	add    esp,0x2c
c00017d6:	c3                   	ret    

c00017d7 <dlindependent_comalloc>:
c00017d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017df:	31 c9                	xor    ecx,ecx
c00017e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e9:	e9 9e fa ff ff       	jmp    c000128c <iALLOc>

c00017ee <dlvalloc>:
c00017ee:	83 ec 0c             	sub    esp,0xc
c00017f1:	83 3d c0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c0,0x0
c00017f8:	75 0a                	jne    c0001804 <dlvalloc+0x16>
c00017fa:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00017ff:	e8 b8 f2 ff ff       	call   c0000abc <malloc_consolidate>
c0001804:	50                   	push   eax
c0001805:	50                   	push   eax
c0001806:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180a:	ff 35 1c da 02 c0    	push   DWORD PTR ds:0xc002da1c
c0001810:	e8 db fd ff ff       	call   c00015f0 <dlmemalign>
c0001815:	83 c4 1c             	add    esp,0x1c
c0001818:	c3                   	ret    

c0001819 <dlpvalloc>:
c0001819:	83 ec 0c             	sub    esp,0xc
c000181c:	83 3d c0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c0,0x0
c0001823:	75 0a                	jne    c000182f <dlpvalloc+0x16>
c0001825:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c000182a:	e8 8d f2 ff ff       	call   c0000abc <malloc_consolidate>
c000182f:	a1 1c da 02 c0       	mov    eax,ds:0xc002da1c
c0001834:	89 c1                	mov    ecx,eax
c0001836:	52                   	push   edx
c0001837:	f7 d9                	neg    ecx
c0001839:	52                   	push   edx
c000183a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000183e:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001842:	21 ca                	and    edx,ecx
c0001844:	52                   	push   edx
c0001845:	50                   	push   eax
c0001846:	e8 a5 fd ff ff       	call   c00015f0 <dlmemalign>
c000184b:	83 c4 1c             	add    esp,0x1c
c000184e:	c3                   	ret    

c000184f <dlmalloc_trim>:
c000184f:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0001854:	e8 63 f2 ff ff       	call   c0000abc <malloc_consolidate>
c0001859:	31 c0                	xor    eax,eax
c000185b:	c3                   	ret    

c000185c <dlmalloc_usable_size>:
c000185c:	53                   	push   ebx
c000185d:	31 c0                	xor    eax,eax
c000185f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001863:	85 c9                	test   ecx,ecx
c0001865:	74 24                	je     c000188b <dlmalloc_usable_size+0x2f>
c0001867:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186a:	f6 c2 02             	test   dl,0x2
c000186d:	74 08                	je     c0001877 <dlmalloc_usable_size+0x1b>
c000186f:	83 e2 fc             	and    edx,0xfffffffc
c0001872:	8d 42 f8             	lea    eax,[edx-0x8]
c0001875:	eb 14                	jmp    c000188b <dlmalloc_usable_size+0x2f>
c0001877:	89 d3                	mov    ebx,edx
c0001879:	31 c0                	xor    eax,eax
c000187b:	83 e3 fe             	and    ebx,0xfffffffe
c000187e:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001883:	74 06                	je     c000188b <dlmalloc_usable_size+0x2f>
c0001885:	83 e2 fc             	and    edx,0xfffffffc
c0001888:	8d 42 fc             	lea    eax,[edx-0x4]
c000188b:	5b                   	pop    ebx
c000188c:	c3                   	ret    

c000188d <dlmallinfo>:
c000188d:	55                   	push   ebp
c000188e:	57                   	push   edi
c000188f:	56                   	push   esi
c0001890:	53                   	push   ebx
c0001891:	83 ec 08             	sub    esp,0x8
c0001894:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001898:	83 3d ec d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6ec,0x0
c000189f:	75 0a                	jne    c00018ab <dlmallinfo+0x1e>
c00018a1:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00018a6:	e8 11 f2 ff ff       	call   c0000abc <malloc_consolidate>
c00018ab:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c00018b0:	31 ed                	xor    ebp,ebp
c00018b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b5:	31 c9                	xor    ecx,ecx
c00018b7:	83 e0 fc             	and    eax,0xfffffffc
c00018ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018be:	31 c0                	xor    eax,eax
c00018c0:	8b 14 85 c4 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd293c]
c00018c7:	85 d2                	test   edx,edx
c00018c9:	74 0e                	je     c00018d9 <dlmallinfo+0x4c>
c00018cb:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018ce:	45                   	inc    ebp
c00018cf:	83 e6 fc             	and    esi,0xfffffffc
c00018d2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d5:	01 f1                	add    ecx,esi
c00018d7:	eb ee                	jmp    c00018c7 <dlmallinfo+0x3a>
c00018d9:	40                   	inc    eax
c00018da:	83 f8 0a             	cmp    eax,0xa
c00018dd:	75 e1                	jne    c00018c0 <dlmallinfo+0x33>
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ea:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ed:	b8 f4 d6 02 c0       	mov    eax,0xc002d6f4
c00018f2:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f5:	39 f0                	cmp    eax,esi
c00018f7:	74 10                	je     c0001909 <dlmallinfo+0x7c>
c00018f9:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018fc:	ff 04 24             	inc    DWORD PTR [esp]
c00018ff:	83 e7 fc             	and    edi,0xfffffffc
c0001902:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001905:	01 fa                	add    edx,edi
c0001907:	eb ec                	jmp    c00018f5 <dlmallinfo+0x68>
c0001909:	83 c0 08             	add    eax,0x8
c000190c:	3d ec d9 02 c0       	cmp    eax,0xc002d9ec
c0001911:	75 df                	jne    c00018f2 <dlmallinfo+0x65>
c0001913:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001916:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001919:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191c:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c0001921:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001924:	89 03                	mov    DWORD PTR [ebx],eax
c0001926:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001929:	8b 35 10 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da10
c000192f:	29 d0                	sub    eax,edx
c0001931:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001934:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001937:	8b 35 24 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da24
c000193d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001941:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001944:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001947:	8b 35 34 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da34
c000194d:	89 d8                	mov    eax,ebx
c000194f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001952:	83 c4 08             	add    esp,0x8
c0001955:	5b                   	pop    ebx
c0001956:	5e                   	pop    esi
c0001957:	5f                   	pop    edi
c0001958:	5d                   	pop    ebp
c0001959:	c2 04 00             	ret    0x4

c000195c <dlmalloc_stats>:
c000195c:	83 ec 30             	sub    esp,0x30
c000195f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001963:	50                   	push   eax
c0001964:	e8 24 ff ff ff       	call   c000188d <dlmallinfo>
c0001969:	83 c4 30             	add    esp,0x30
c000196c:	c3                   	ret    

c000196d <dlmallopt>:
c000196d:	56                   	push   esi
c000196e:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0001973:	53                   	push   ebx
c0001974:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001978:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197c:	e8 3b f1 ff ff       	call   c0000abc <malloc_consolidate>
c0001981:	8d 46 04             	lea    eax,[esi+0x4]
c0001984:	83 f8 05             	cmp    eax,0x5
c0001987:	77 67                	ja     c00019f0 <dlmallopt+0x83>
c0001989:	ff 24 85 c4 8a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd753c]
c0001990:	83 fb 50             	cmp    ebx,0x50
c0001993:	77 5b                	ja     c00019f0 <dlmallopt+0x83>
c0001995:	ba 08 00 00 00       	mov    edx,0x8
c000199a:	85 db                	test   ebx,ebx
c000199c:	74 12                	je     c00019b0 <dlmallopt+0x43>
c000199e:	83 c3 0b             	add    ebx,0xb
c00019a1:	ba 10 00 00 00       	mov    edx,0x10
c00019a6:	83 fb 0f             	cmp    ebx,0xf
c00019a9:	76 05                	jbe    c00019b0 <dlmallopt+0x43>
c00019ab:	89 da                	mov    edx,ebx
c00019ad:	83 e2 f8             	and    edx,0xfffffff8
c00019b0:	a1 c0 d6 02 c0       	mov    eax,ds:0xc002d6c0
c00019b5:	83 e0 03             	and    eax,0x3
c00019b8:	09 d0                	or     eax,edx
c00019ba:	a3 c0 d6 02 c0       	mov    ds:0xc002d6c0,eax
c00019bf:	eb 31                	jmp    c00019f2 <dlmallopt+0x85>
c00019c1:	89 1d 04 da 02 c0    	mov    DWORD PTR ds:0xc002da04,ebx
c00019c7:	eb 06                	jmp    c00019cf <dlmallopt+0x62>
c00019c9:	89 1d 08 da 02 c0    	mov    DWORD PTR ds:0xc002da08,ebx
c00019cf:	be 01 00 00 00       	mov    esi,0x1
c00019d4:	eb 1c                	jmp    c00019f2 <dlmallopt+0x85>
c00019d6:	89 1d 0c da 02 c0    	mov    DWORD PTR ds:0xc002da0c,ebx
c00019dc:	eb f1                	jmp    c00019cf <dlmallopt+0x62>
c00019de:	31 f6                	xor    esi,esi
c00019e0:	85 db                	test   ebx,ebx
c00019e2:	75 0e                	jne    c00019f2 <dlmallopt+0x85>
c00019e4:	c7 05 14 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da14,0x0
c00019ee:	eb df                	jmp    c00019cf <dlmallopt+0x62>
c00019f0:	31 f6                	xor    esi,esi
c00019f2:	89 f0                	mov    eax,esi
c00019f4:	5b                   	pop    ebx
c00019f5:	5e                   	pop    esi
c00019f6:	c3                   	ret    

c00019f7 <disk_status>:
c00019f7:	31 c0                	xor    eax,eax
c00019f9:	c3                   	ret    

c00019fa <disk_initialize>:
c00019fa:	31 c0                	xor    eax,eax
c00019fc:	c3                   	ret    

c00019fd <disk_read>:
c00019fd:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a02:	0f b6 04 85 a0 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee60]
c0001a0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0e:	e9 8f ea 01 00       	jmp    c00204a2 <fatWrapperReadDisk>

c0001a13 <disk_write>:
c0001a13:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a18:	0f b6 04 85 a0 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee60]
c0001a20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a24:	e9 c0 ea 01 00       	jmp    c00204e9 <fatWrapperWriteDisk>

c0001a29 <disk_ioctl>:
c0001a29:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a32:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a37:	0f b6 04 85 a0 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee60]
c0001a3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a43:	e9 e8 ea 01 00       	jmp    c0020530 <fatWrapperIoctl>

c0001a48 <ld_word>:
c0001a48:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a4f:	c1 e2 08             	shl    edx,0x8
c0001a52:	09 d0                	or     eax,edx
c0001a54:	c3                   	ret    

c0001a55 <ld_dword>:
c0001a55:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a59:	89 d1                	mov    ecx,edx
c0001a5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a5f:	c1 e1 08             	shl    ecx,0x8
c0001a62:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a65:	09 ca                	or     edx,ecx
c0001a67:	c1 e2 08             	shl    edx,0x8
c0001a6a:	09 d0                	or     eax,edx
c0001a6c:	c3                   	ret    

c0001a6d <ld_qword>:
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	31 db                	xor    ebx,ebx
c0001a72:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a75:	89 df                	mov    edi,ebx
c0001a77:	89 ce                	mov    esi,ecx
c0001a79:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a81:	c1 e6 08             	shl    esi,0x8
c0001a84:	09 f2                	or     edx,esi
c0001a86:	89 d6                	mov    esi,edx
c0001a88:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a90:	c1 e6 08             	shl    esi,0x8
c0001a93:	09 f2                	or     edx,esi
c0001a95:	89 d6                	mov    esi,edx
c0001a97:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa2:	c1 e6 08             	shl    esi,0x8
c0001aa5:	89 fb                	mov    ebx,edi
c0001aa7:	09 f2                	or     edx,esi
c0001aa9:	89 d1                	mov    ecx,edx
c0001aab:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aaf:	c1 e1 08             	shl    ecx,0x8
c0001ab2:	89 da                	mov    edx,ebx
c0001ab4:	09 c8                	or     eax,ecx
c0001ab6:	5b                   	pop    ebx
c0001ab7:	5e                   	pop    esi
c0001ab8:	5f                   	pop    edi
c0001ab9:	c3                   	ret    

c0001aba <st_word>:
c0001aba:	66 89 10             	mov    WORD PTR [eax],dx
c0001abd:	c3                   	ret    

c0001abe <st_dword>:
c0001abe:	89 10                	mov    DWORD PTR [eax],edx
c0001ac0:	c3                   	ret    

c0001ac1 <st_qword>:
c0001ac1:	89 10                	mov    DWORD PTR [eax],edx
c0001ac3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac6:	c3                   	ret    

c0001ac7 <mem_cpy>:
c0001ac7:	85 c9                	test   ecx,ecx
c0001ac9:	74 10                	je     c0001adb <mem_cpy+0x14>
c0001acb:	57                   	push   edi
c0001acc:	01 c1                	add    ecx,eax
c0001ace:	56                   	push   esi
c0001acf:	89 c7                	mov    edi,eax
c0001ad1:	89 d6                	mov    esi,edx
c0001ad3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad4:	39 f9                	cmp    ecx,edi
c0001ad6:	75 fb                	jne    c0001ad3 <mem_cpy+0xc>
c0001ad8:	5e                   	pop    esi
c0001ad9:	5f                   	pop    edi
c0001ada:	c3                   	ret    
c0001adb:	c3                   	ret    

c0001adc <mem_set>:
c0001adc:	01 c1                	add    ecx,eax
c0001ade:	40                   	inc    eax
c0001adf:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae2:	39 c8                	cmp    eax,ecx
c0001ae4:	75 f8                	jne    c0001ade <mem_set+0x2>
c0001ae6:	c3                   	ret    

c0001ae7 <mem_cmp>:
c0001ae7:	57                   	push   edi
c0001ae8:	56                   	push   esi
c0001ae9:	89 c6                	mov    esi,eax
c0001aeb:	53                   	push   ebx
c0001aec:	46                   	inc    esi
c0001aed:	42                   	inc    edx
c0001aee:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af2:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af6:	29 fb                	sub    ebx,edi
c0001af8:	89 cf                	mov    edi,ecx
c0001afa:	29 f7                	sub    edi,esi
c0001afc:	01 c7                	add    edi,eax
c0001afe:	74 04                	je     c0001b04 <mem_cmp+0x1d>
c0001b00:	85 db                	test   ebx,ebx
c0001b02:	74 e8                	je     c0001aec <mem_cmp+0x5>
c0001b04:	89 d8                	mov    eax,ebx
c0001b06:	5b                   	pop    ebx
c0001b07:	5e                   	pop    esi
c0001b08:	5f                   	pop    edi
c0001b09:	c3                   	ret    

c0001b0a <chk_chr>:
c0001b0a:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b10:	74 07                	je     c0001b19 <chk_chr+0xf>
c0001b12:	39 d1                	cmp    ecx,edx
c0001b14:	74 03                	je     c0001b19 <chk_chr+0xf>
c0001b16:	40                   	inc    eax
c0001b17:	eb f1                	jmp    c0001b0a <chk_chr>
c0001b19:	89 c8                	mov    eax,ecx
c0001b1b:	c3                   	ret    

c0001b1c <dbc_1st>:
c0001b1c:	31 c0                	xor    eax,eax
c0001b1e:	c3                   	ret    

c0001b1f <dbc_2nd>:
c0001b1f:	31 c0                	xor    eax,eax
c0001b21:	c3                   	ret    

c0001b22 <tchar2uni>:
c0001b22:	57                   	push   edi
c0001b23:	89 c7                	mov    edi,eax
c0001b25:	56                   	push   esi
c0001b26:	53                   	push   ebx
c0001b27:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b29:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b2e:	84 c9                	test   cl,cl
c0001b30:	78 0a                	js     c0001b3c <tchar2uni+0x1a>
c0001b32:	0f b6 d1             	movzx  edx,cl
c0001b35:	89 f3                	mov    ebx,esi
c0001b37:	e9 9f 00 00 00       	jmp    c0001bdb <tchar2uni+0xb9>
c0001b3c:	88 ca                	mov    dl,cl
c0001b3e:	83 e2 e0             	and    edx,0xffffffe0
c0001b41:	80 fa c0             	cmp    dl,0xc0
c0001b44:	75 0c                	jne    c0001b52 <tchar2uni+0x30>
c0001b46:	89 ca                	mov    edx,ecx
c0001b48:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4d:	83 e2 1f             	and    edx,0x1f
c0001b50:	eb 2e                	jmp    c0001b80 <tchar2uni+0x5e>
c0001b52:	88 ca                	mov    dl,cl
c0001b54:	83 e2 f0             	and    edx,0xfffffff0
c0001b57:	80 fa e0             	cmp    dl,0xe0
c0001b5a:	75 0c                	jne    c0001b68 <tchar2uni+0x46>
c0001b5c:	89 ca                	mov    edx,ecx
c0001b5e:	b9 02 00 00 00       	mov    ecx,0x2
c0001b63:	83 e2 0f             	and    edx,0xf
c0001b66:	eb 18                	jmp    c0001b80 <tchar2uni+0x5e>
c0001b68:	88 ca                	mov    dl,cl
c0001b6a:	83 e2 f8             	and    edx,0xfffffff8
c0001b6d:	88 d0                	mov    al,dl
c0001b6f:	83 ca ff             	or     edx,0xffffffff
c0001b72:	3c f0                	cmp    al,0xf0
c0001b74:	75 6c                	jne    c0001be2 <tchar2uni+0xc0>
c0001b76:	89 ca                	mov    edx,ecx
c0001b78:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7d:	83 e2 07             	and    edx,0x7
c0001b80:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b84:	46                   	inc    esi
c0001b85:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b88:	88 c8                	mov    al,cl
c0001b8a:	83 e0 c0             	and    eax,0xffffffc0
c0001b8d:	3c 80                	cmp    al,0x80
c0001b8f:	75 4e                	jne    c0001bdf <tchar2uni+0xbd>
c0001b91:	c1 e2 06             	shl    edx,0x6
c0001b94:	83 e1 3f             	and    ecx,0x3f
c0001b97:	09 ca                	or     edx,ecx
c0001b99:	39 de                	cmp    esi,ebx
c0001b9b:	75 e7                	jne    c0001b84 <tchar2uni+0x62>
c0001b9d:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba0:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba6:	77 37                	ja     c0001bdf <tchar2uni+0xbd>
c0001ba8:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bae:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb4:	76 29                	jbe    c0001bdf <tchar2uni+0xbd>
c0001bb6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbc:	76 1d                	jbe    c0001bdb <tchar2uni+0xb9>
c0001bbe:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc4:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bca:	c1 e1 06             	shl    ecx,0x6
c0001bcd:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd3:	09 ca                	or     edx,ecx
c0001bd5:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bdb:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bdd:	eb 03                	jmp    c0001be2 <tchar2uni+0xc0>
c0001bdf:	83 ca ff             	or     edx,0xffffffff
c0001be2:	5b                   	pop    ebx
c0001be3:	89 d0                	mov    eax,edx
c0001be5:	5e                   	pop    esi
c0001be6:	5f                   	pop    edi
c0001be7:	c3                   	ret    

c0001be8 <put_utf>:
c0001be8:	53                   	push   ebx
c0001be9:	83 f8 7f             	cmp    eax,0x7f
c0001bec:	89 c3                	mov    ebx,eax
c0001bee:	b0 00                	mov    al,0x0
c0001bf0:	77 11                	ja     c0001c03 <put_utf+0x1b>
c0001bf2:	85 c9                	test   ecx,ecx
c0001bf4:	0f 84 e5 00 00 00    	je     c0001cdf <put_utf+0xf7>
c0001bfa:	88 1a                	mov    BYTE PTR [edx],bl
c0001bfc:	b0 01                	mov    al,0x1
c0001bfe:	e9 dc 00 00 00       	jmp    c0001cdf <put_utf+0xf7>
c0001c03:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c09:	77 23                	ja     c0001c2e <put_utf+0x46>
c0001c0b:	83 f9 01             	cmp    ecx,0x1
c0001c0e:	0f 86 cb 00 00 00    	jbe    c0001cdf <put_utf+0xf7>
c0001c14:	89 d8                	mov    eax,ebx
c0001c16:	83 e3 3f             	and    ebx,0x3f
c0001c19:	c1 e8 06             	shr    eax,0x6
c0001c1c:	83 cb 80             	or     ebx,0xffffff80
c0001c1f:	83 c8 c0             	or     eax,0xffffffc0
c0001c22:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c25:	88 02                	mov    BYTE PTR [edx],al
c0001c27:	b0 02                	mov    al,0x2
c0001c29:	e9 b1 00 00 00       	jmp    c0001cdf <put_utf+0xf7>
c0001c2e:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c34:	77 40                	ja     c0001c76 <put_utf+0x8e>
c0001c36:	83 f9 02             	cmp    ecx,0x2
c0001c39:	0f 86 a0 00 00 00    	jbe    c0001cdf <put_utf+0xf7>
c0001c3f:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c45:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4b:	0f 86 8e 00 00 00    	jbe    c0001cdf <put_utf+0xf7>
c0001c51:	89 d8                	mov    eax,ebx
c0001c53:	c1 e8 0c             	shr    eax,0xc
c0001c56:	83 c8 e0             	or     eax,0xffffffe0
c0001c59:	88 02                	mov    BYTE PTR [edx],al
c0001c5b:	89 d8                	mov    eax,ebx
c0001c5d:	83 e3 3f             	and    ebx,0x3f
c0001c60:	c1 e8 06             	shr    eax,0x6
c0001c63:	83 cb 80             	or     ebx,0xffffff80
c0001c66:	83 e0 3f             	and    eax,0x3f
c0001c69:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6c:	83 c8 80             	or     eax,0xffffff80
c0001c6f:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c72:	b0 03                	mov    al,0x3
c0001c74:	eb 69                	jmp    c0001cdf <put_utf+0xf7>
c0001c76:	83 f9 03             	cmp    ecx,0x3
c0001c79:	76 64                	jbe    c0001cdf <put_utf+0xf7>
c0001c7b:	89 d9                	mov    ecx,ebx
c0001c7d:	0f b7 c3             	movzx  eax,bx
c0001c80:	66 31 c9             	xor    cx,cx
c0001c83:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c89:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c8f:	c1 e9 06             	shr    ecx,0x6
c0001c92:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c98:	77 43                	ja     c0001cdd <put_utf+0xf5>
c0001c9a:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca0:	77 3b                	ja     c0001cdd <put_utf+0xf5>
c0001ca2:	09 cb                	or     ebx,ecx
c0001ca4:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001caa:	89 d8                	mov    eax,ebx
c0001cac:	c1 e8 12             	shr    eax,0x12
c0001caf:	83 c8 f0             	or     eax,0xfffffff0
c0001cb2:	88 02                	mov    BYTE PTR [edx],al
c0001cb4:	89 d8                	mov    eax,ebx
c0001cb6:	c1 e8 0c             	shr    eax,0xc
c0001cb9:	83 e0 3f             	and    eax,0x3f
c0001cbc:	83 c8 80             	or     eax,0xffffff80
c0001cbf:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc2:	89 d8                	mov    eax,ebx
c0001cc4:	83 e3 3f             	and    ebx,0x3f
c0001cc7:	c1 e8 06             	shr    eax,0x6
c0001cca:	83 cb 80             	or     ebx,0xffffff80
c0001ccd:	83 e0 3f             	and    eax,0x3f
c0001cd0:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd3:	83 c8 80             	or     eax,0xffffff80
c0001cd6:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd9:	b0 04                	mov    al,0x4
c0001cdb:	eb 02                	jmp    c0001cdf <put_utf+0xf7>
c0001cdd:	31 c0                	xor    eax,eax
c0001cdf:	5b                   	pop    ebx
c0001ce0:	c3                   	ret    

c0001ce1 <clst2sect>:
c0001ce1:	89 c1                	mov    ecx,eax
c0001ce3:	83 ea 02             	sub    edx,0x2
c0001ce6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce9:	83 e8 02             	sub    eax,0x2
c0001cec:	39 d0                	cmp    eax,edx
c0001cee:	76 0d                	jbe    c0001cfd <clst2sect+0x1c>
c0001cf0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf4:	f7 e2                	mul    edx
c0001cf6:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf9:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cfc:	c3                   	ret    
c0001cfd:	31 c0                	xor    eax,eax
c0001cff:	31 d2                	xor    edx,edx
c0001d01:	c3                   	ret    

c0001d02 <clmt_clust>:
c0001d02:	57                   	push   edi
c0001d03:	89 cf                	mov    edi,ecx
c0001d05:	56                   	push   esi
c0001d06:	89 d6                	mov    esi,edx
c0001d08:	53                   	push   ebx
c0001d09:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0d:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d10:	89 f2                	mov    edx,esi
c0001d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d14:	c1 ef 09             	shr    edi,0x9
c0001d17:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1b:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d1e:	89 f9                	mov    ecx,edi
c0001d20:	31 ff                	xor    edi,edi
c0001d22:	57                   	push   edi
c0001d23:	56                   	push   esi
c0001d24:	51                   	push   ecx
c0001d25:	52                   	push   edx
c0001d26:	e8 21 44 02 00       	call   c002614c <__udivdi3>
c0001d2b:	83 c4 10             	add    esp,0x10
c0001d2e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d30:	85 d2                	test   edx,edx
c0001d32:	74 10                	je     c0001d44 <clmt_clust+0x42>
c0001d34:	39 d0                	cmp    eax,edx
c0001d36:	72 07                	jb     c0001d3f <clmt_clust+0x3d>
c0001d38:	29 d0                	sub    eax,edx
c0001d3a:	83 c3 08             	add    ebx,0x8
c0001d3d:	eb ef                	jmp    c0001d2e <clmt_clust+0x2c>
c0001d3f:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d42:	89 c2                	mov    edx,eax
c0001d44:	5b                   	pop    ebx
c0001d45:	89 d0                	mov    eax,edx
c0001d47:	5e                   	pop    esi
c0001d48:	5f                   	pop    edi
c0001d49:	c3                   	ret    

c0001d4a <pick_lfn>:
c0001d4a:	55                   	push   ebp
c0001d4b:	57                   	push   edi
c0001d4c:	56                   	push   esi
c0001d4d:	89 d6                	mov    esi,edx
c0001d4f:	53                   	push   ebx
c0001d50:	89 c3                	mov    ebx,eax
c0001d52:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d55:	e8 ee fc ff ff       	call   c0001a48 <ld_word>
c0001d5a:	66 85 c0             	test   ax,ax
c0001d5d:	74 04                	je     c0001d63 <pick_lfn+0x19>
c0001d5f:	31 c0                	xor    eax,eax
c0001d61:	eb 5c                	jmp    c0001dbf <pick_lfn+0x75>
c0001d63:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d66:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6b:	83 e1 bf             	and    ecx,0xffffffbf
c0001d6e:	31 ff                	xor    edi,edi
c0001d70:	49                   	dec    ecx
c0001d71:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d74:	0f b6 87 e0 8b 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7420]
c0001d7b:	01 f0                	add    eax,esi
c0001d7d:	e8 c6 fc ff ff       	call   c0001a48 <ld_word>
c0001d82:	66 85 ed             	test   bp,bp
c0001d85:	74 11                	je     c0001d98 <pick_lfn+0x4e>
c0001d87:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8d:	77 d0                	ja     c0001d5f <pick_lfn+0x15>
c0001d8f:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d93:	89 c5                	mov    ebp,eax
c0001d95:	41                   	inc    ecx
c0001d96:	eb 04                	jmp    c0001d9c <pick_lfn+0x52>
c0001d98:	66 40                	inc    ax
c0001d9a:	75 c3                	jne    c0001d5f <pick_lfn+0x15>
c0001d9c:	47                   	inc    edi
c0001d9d:	83 ff 0d             	cmp    edi,0xd
c0001da0:	75 d2                	jne    c0001d74 <pick_lfn+0x2a>
c0001da2:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da5:	74 13                	je     c0001dba <pick_lfn+0x70>
c0001da7:	66 85 ed             	test   bp,bp
c0001daa:	74 0e                	je     c0001dba <pick_lfn+0x70>
c0001dac:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db2:	77 ab                	ja     c0001d5f <pick_lfn+0x15>
c0001db4:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dba:	b8 01 00 00 00       	mov    eax,0x1
c0001dbf:	5b                   	pop    ebx
c0001dc0:	5e                   	pop    esi
c0001dc1:	5f                   	pop    edi
c0001dc2:	5d                   	pop    ebp
c0001dc3:	c3                   	ret    

c0001dc4 <put_lfn>:
c0001dc4:	55                   	push   ebp
c0001dc5:	31 ed                	xor    ebp,ebp
c0001dc7:	57                   	push   edi
c0001dc8:	89 d7                	mov    edi,edx
c0001dca:	56                   	push   esi
c0001dcb:	31 f6                	xor    esi,esi
c0001dcd:	53                   	push   ebx
c0001dce:	83 ec 08             	sub    esp,0x8
c0001dd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd4:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ddc:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de2:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de8:	31 d2                	xor    edx,edx
c0001dea:	e8 cb fc ff ff       	call   c0001aba <st_word>
c0001def:	0f b6 d9             	movzx  ebx,cl
c0001df2:	4b                   	dec    ebx
c0001df3:	6b db 0d             	imul   ebx,ebx,0xd
c0001df6:	66 83 fe ff          	cmp    si,0xffff
c0001dfa:	74 08                	je     c0001e04 <put_lfn+0x40>
c0001dfc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dff:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e03:	43                   	inc    ebx
c0001e04:	0f b6 85 e0 8b 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7420]
c0001e0b:	0f b7 d6             	movzx  edx,si
c0001e0e:	01 f8                	add    eax,edi
c0001e10:	e8 a5 fc ff ff       	call   c0001aba <st_word>
c0001e15:	66 85 f6             	test   si,si
c0001e18:	75 03                	jne    c0001e1d <put_lfn+0x59>
c0001e1a:	83 ce ff             	or     esi,0xffffffff
c0001e1d:	45                   	inc    ebp
c0001e1e:	83 fd 0d             	cmp    ebp,0xd
c0001e21:	75 d3                	jne    c0001df6 <put_lfn+0x32>
c0001e23:	66 46                	inc    si
c0001e25:	74 0a                	je     c0001e31 <put_lfn+0x6d>
c0001e27:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e2f:	75 09                	jne    c0001e3a <put_lfn+0x76>
c0001e31:	88 c8                	mov    al,cl
c0001e33:	83 c8 40             	or     eax,0x40
c0001e36:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e3e:	88 07                	mov    BYTE PTR [edi],al
c0001e40:	83 c4 08             	add    esp,0x8
c0001e43:	5b                   	pop    ebx
c0001e44:	5e                   	pop    esi
c0001e45:	5f                   	pop    edi
c0001e46:	5d                   	pop    ebp
c0001e47:	c3                   	ret    

c0001e48 <gen_numname>:
c0001e48:	57                   	push   edi
c0001e49:	89 cf                	mov    edi,ecx
c0001e4b:	56                   	push   esi
c0001e4c:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e51:	53                   	push   ebx
c0001e52:	89 c6                	mov    esi,eax
c0001e54:	83 ec 10             	sub    esp,0x10
c0001e57:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5b:	e8 67 fc ff ff       	call   c0001ac7 <mem_cpy>
c0001e60:	83 fb 05             	cmp    ebx,0x5
c0001e63:	76 2d                	jbe    c0001e92 <gen_numname+0x4a>
c0001e65:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e68:	66 85 c0             	test   ax,ax
c0001e6b:	74 25                	je     c0001e92 <gen_numname+0x4a>
c0001e6d:	83 c7 02             	add    edi,0x2
c0001e70:	ba 10 00 00 00       	mov    edx,0x10
c0001e75:	01 db                	add    ebx,ebx
c0001e77:	89 c1                	mov    ecx,eax
c0001e79:	66 d1 e8             	shr    ax,1
c0001e7c:	83 e1 01             	and    ecx,0x1
c0001e7f:	01 cb                	add    ebx,ecx
c0001e81:	0f ba e3 10          	bt     ebx,0x10
c0001e85:	73 06                	jae    c0001e8d <gen_numname+0x45>
c0001e87:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8d:	4a                   	dec    edx
c0001e8e:	75 e5                	jne    c0001e75 <gen_numname+0x2d>
c0001e90:	eb d3                	jmp    c0001e65 <gen_numname+0x1d>
c0001e92:	b8 07 00 00 00       	mov    eax,0x7
c0001e97:	88 d9                	mov    cl,bl
c0001e99:	83 e1 0f             	and    ecx,0xf
c0001e9c:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e9f:	80 fa 39             	cmp    dl,0x39
c0001ea2:	76 03                	jbe    c0001ea7 <gen_numname+0x5f>
c0001ea4:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea7:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eaa:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eae:	89 da                	mov    edx,ebx
c0001eb0:	c1 ea 04             	shr    edx,0x4
c0001eb3:	83 fb 0f             	cmp    ebx,0xf
c0001eb6:	76 06                	jbe    c0001ebe <gen_numname+0x76>
c0001eb8:	89 c8                	mov    eax,ecx
c0001eba:	89 d3                	mov    ebx,edx
c0001ebc:	eb d9                	jmp    c0001e97 <gen_numname+0x4f>
c0001ebe:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec3:	31 d2                	xor    edx,edx
c0001ec5:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec8:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ecb:	39 ca                	cmp    edx,ecx
c0001ecd:	73 18                	jae    c0001ee7 <gen_numname+0x9f>
c0001ecf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed2:	3c 20                	cmp    al,0x20
c0001ed4:	74 11                	je     c0001ee7 <gen_numname+0x9f>
c0001ed6:	e8 41 fc ff ff       	call   c0001b1c <dbc_1st>
c0001edb:	85 c0                	test   eax,eax
c0001edd:	74 05                	je     c0001ee4 <gen_numname+0x9c>
c0001edf:	39 d3                	cmp    ebx,edx
c0001ee1:	74 04                	je     c0001ee7 <gen_numname+0x9f>
c0001ee3:	42                   	inc    edx
c0001ee4:	42                   	inc    edx
c0001ee5:	eb e1                	jmp    c0001ec8 <gen_numname+0x80>
c0001ee7:	b0 20                	mov    al,0x20
c0001ee9:	83 f9 07             	cmp    ecx,0x7
c0001eec:	77 05                	ja     c0001ef3 <gen_numname+0xab>
c0001eee:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef2:	41                   	inc    ecx
c0001ef3:	42                   	inc    edx
c0001ef4:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef8:	83 fa 07             	cmp    edx,0x7
c0001efb:	76 ea                	jbe    c0001ee7 <gen_numname+0x9f>
c0001efd:	83 c4 10             	add    esp,0x10
c0001f00:	5b                   	pop    ebx
c0001f01:	5e                   	pop    esi
c0001f02:	5f                   	pop    edi
c0001f03:	c3                   	ret    

c0001f04 <sum_sfn>:
c0001f04:	31 c9                	xor    ecx,ecx
c0001f06:	31 d2                	xor    edx,edx
c0001f08:	d0 ca                	ror    dl,1
c0001f0a:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0d:	41                   	inc    ecx
c0001f0e:	83 f9 0b             	cmp    ecx,0xb
c0001f11:	75 f5                	jne    c0001f08 <sum_sfn+0x4>
c0001f13:	88 d0                	mov    al,dl
c0001f15:	c3                   	ret    

c0001f16 <xdir_sum>:
c0001f16:	56                   	push   esi
c0001f17:	31 c9                	xor    ecx,ecx
c0001f19:	53                   	push   ebx
c0001f1a:	31 d2                	xor    edx,edx
c0001f1c:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f20:	43                   	inc    ebx
c0001f21:	c1 e3 05             	shl    ebx,0x5
c0001f24:	83 fa 02             	cmp    edx,0x2
c0001f27:	74 0b                	je     c0001f34 <xdir_sum+0x1e>
c0001f29:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2d:	66 d1 c9             	ror    cx,1
c0001f30:	01 f1                	add    ecx,esi
c0001f32:	eb 05                	jmp    c0001f39 <xdir_sum+0x23>
c0001f34:	ba 03 00 00 00       	mov    edx,0x3
c0001f39:	42                   	inc    edx
c0001f3a:	39 d3                	cmp    ebx,edx
c0001f3c:	77 e6                	ja     c0001f24 <xdir_sum+0xe>
c0001f3e:	89 c8                	mov    eax,ecx
c0001f40:	5b                   	pop    ebx
c0001f41:	5e                   	pop    esi
c0001f42:	c3                   	ret    

c0001f43 <xsum32>:
c0001f43:	d1 ca                	ror    edx,1
c0001f45:	0f b6 c0             	movzx  eax,al
c0001f48:	01 d0                	add    eax,edx
c0001f4a:	c3                   	ret    

c0001f4b <get_xfileinfo>:
c0001f4b:	55                   	push   ebp
c0001f4c:	31 c9                	xor    ecx,ecx
c0001f4e:	57                   	push   edi
c0001f4f:	bd 40 00 00 00       	mov    ebp,0x40
c0001f54:	56                   	push   esi
c0001f55:	31 ff                	xor    edi,edi
c0001f57:	53                   	push   ebx
c0001f58:	89 c6                	mov    esi,eax
c0001f5a:	83 ec 0c             	sub    esp,0xc
c0001f5d:	89 d3                	mov    ebx,edx
c0001f5f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f66:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6d:	76 6d                	jbe    c0001fdc <get_xfileinfo+0x91>
c0001f6f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f75:	76 0b                	jbe    c0001f82 <get_xfileinfo+0x37>
c0001f77:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7b:	bf 01 00 00 00       	mov    edi,0x1
c0001f80:	eb 63                	jmp    c0001fe5 <get_xfileinfo+0x9a>
c0001f82:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f88:	75 03                	jne    c0001f8d <get_xfileinfo+0x42>
c0001f8a:	83 c5 02             	add    ebp,0x2
c0001f8d:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f90:	83 c5 02             	add    ebp,0x2
c0001f93:	e8 b0 fa ff ff       	call   c0001a48 <ld_word>
c0001f98:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9b:	66 85 c9             	test   cx,cx
c0001f9e:	75 0d                	jne    c0001fad <get_xfileinfo+0x62>
c0001fa0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fab:	76 2b                	jbe    c0001fd8 <get_xfileinfo+0x8d>
c0001fad:	c1 e1 10             	shl    ecx,0x10
c0001fb0:	ba ff 00 00 00       	mov    edx,0xff
c0001fb5:	0f b7 c0             	movzx  eax,ax
c0001fb8:	29 fa                	sub    edx,edi
c0001fba:	09 c8                	or     eax,ecx
c0001fbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc0:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc8:	e8 1b fc ff ff       	call   c0001be8 <put_utf>
c0001fcd:	84 c0                	test   al,al
c0001fcf:	74 a6                	je     c0001f77 <get_xfileinfo+0x2c>
c0001fd1:	0f b6 c0             	movzx  eax,al
c0001fd4:	01 c7                	add    edi,eax
c0001fd6:	31 c0                	xor    eax,eax
c0001fd8:	89 c1                	mov    ecx,eax
c0001fda:	eb 8a                	jmp    c0001f66 <get_xfileinfo+0x1b>
c0001fdc:	85 ff                	test   edi,edi
c0001fde:	74 97                	je     c0001f77 <get_xfileinfo+0x2c>
c0001fe0:	66 85 c9             	test   cx,cx
c0001fe3:	75 92                	jne    c0001f77 <get_xfileinfo+0x2c>
c0001fe5:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fea:	31 c0                	xor    eax,eax
c0001fec:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff0:	31 d2                	xor    edx,edx
c0001ff2:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff5:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff8:	80 e1 10             	and    cl,0x10
c0001ffb:	75 08                	jne    c0002005 <get_xfileinfo+0xba>
c0001ffd:	8d 46 38             	lea    eax,[esi+0x38]
c0002000:	e8 68 fa ff ff       	call   c0001a6d <ld_qword>
c0002005:	89 03                	mov    DWORD PTR [ebx],eax
c0002007:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200a:	8d 46 0c             	lea    eax,[esi+0xc]
c000200d:	e8 36 fa ff ff       	call   c0001a48 <ld_word>
c0002012:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002016:	8d 46 0e             	lea    eax,[esi+0xe]
c0002019:	e8 2a fa ff ff       	call   c0001a48 <ld_word>
c000201e:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002022:	83 c4 0c             	add    esp,0xc
c0002025:	5b                   	pop    ebx
c0002026:	5e                   	pop    esi
c0002027:	5f                   	pop    edi
c0002028:	5d                   	pop    ebp
c0002029:	c3                   	ret    

c000202a <get_ldnumber>:
c000202a:	8b 10                	mov    edx,DWORD PTR [eax]
c000202c:	85 d2                	test   edx,edx
c000202e:	74 14                	je     c0002044 <get_ldnumber+0x1a>
c0002030:	56                   	push   esi
c0002031:	53                   	push   ebx
c0002032:	89 d3                	mov    ebx,edx
c0002034:	43                   	inc    ebx
c0002035:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002038:	80 f9 1f             	cmp    cl,0x1f
c000203b:	76 0d                	jbe    c000204a <get_ldnumber+0x20>
c000203d:	80 f9 3a             	cmp    cl,0x3a
c0002040:	75 f2                	jne    c0002034 <get_ldnumber+0xa>
c0002042:	eb 0a                	jmp    c000204e <get_ldnumber+0x24>
c0002044:	83 c9 ff             	or     ecx,0xffffffff
c0002047:	89 c8                	mov    eax,ecx
c0002049:	c3                   	ret    
c000204a:	31 c9                	xor    ecx,ecx
c000204c:	eb 24                	jmp    c0002072 <get_ldnumber+0x48>
c000204e:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002051:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002054:	80 f9 09             	cmp    cl,0x9
c0002057:	77 16                	ja     c000206f <get_ldnumber+0x45>
c0002059:	83 c2 02             	add    edx,0x2
c000205c:	83 c9 ff             	or     ecx,0xffffffff
c000205f:	39 d3                	cmp    ebx,edx
c0002061:	75 0f                	jne    c0002072 <get_ldnumber+0x48>
c0002063:	89 f2                	mov    edx,esi
c0002065:	89 18                	mov    DWORD PTR [eax],ebx
c0002067:	0f be ca             	movsx  ecx,dl
c000206a:	83 e9 30             	sub    ecx,0x30
c000206d:	eb 03                	jmp    c0002072 <get_ldnumber+0x48>
c000206f:	83 c9 ff             	or     ecx,0xffffffff
c0002072:	89 c8                	mov    eax,ecx
c0002074:	5b                   	pop    ebx
c0002075:	5e                   	pop    esi
c0002076:	c3                   	ret    

c0002077 <crc32>:
c0002077:	56                   	push   esi
c0002078:	89 d6                	mov    esi,edx
c000207a:	53                   	push   ebx
c000207b:	b2 01                	mov    dl,0x1
c000207d:	bb 08 00 00 00       	mov    ebx,0x8
c0002082:	89 f1                	mov    ecx,esi
c0002084:	84 d1                	test   cl,dl
c0002086:	0f 95 c1             	setne  cl
c0002089:	0f b6 c9             	movzx  ecx,cl
c000208c:	31 c1                	xor    ecx,eax
c000208e:	89 c8                	mov    eax,ecx
c0002090:	d1 e8                	shr    eax,1
c0002092:	80 e1 01             	and    cl,0x1
c0002095:	74 05                	je     c000209c <crc32+0x25>
c0002097:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209c:	d1 e2                	shl    edx,1
c000209e:	4b                   	dec    ebx
c000209f:	75 e1                	jne    c0002082 <crc32+0xb>
c00020a1:	5b                   	pop    ebx
c00020a2:	5e                   	pop    esi
c00020a3:	c3                   	ret    

c00020a4 <test_gpt_header>:
c00020a4:	55                   	push   ebp
c00020a5:	b9 10 00 00 00       	mov    ecx,0x10
c00020aa:	57                   	push   edi
c00020ab:	ba e0 8a 02 c0       	mov    edx,0xc0028ae0
c00020b0:	56                   	push   esi
c00020b1:	31 ff                	xor    edi,edi
c00020b3:	53                   	push   ebx
c00020b4:	89 c3                	mov    ebx,eax
c00020b6:	e8 2c fa ff ff       	call   c0001ae7 <mem_cmp>
c00020bb:	85 c0                	test   eax,eax
c00020bd:	75 55                	jne    c0002114 <test_gpt_header+0x70>
c00020bf:	89 c7                	mov    edi,eax
c00020c1:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c6:	83 ce ff             	or     esi,0xffffffff
c00020c9:	31 d2                	xor    edx,edx
c00020cb:	83 fd 03             	cmp    ebp,0x3
c00020ce:	76 05                	jbe    c00020d5 <test_gpt_header+0x31>
c00020d0:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d5:	89 f0                	mov    eax,esi
c00020d7:	45                   	inc    ebp
c00020d8:	e8 9a ff ff ff       	call   c0002077 <crc32>
c00020dd:	83 fd 4c             	cmp    ebp,0x4c
c00020e0:	89 c6                	mov    esi,eax
c00020e2:	75 e5                	jne    c00020c9 <test_gpt_header+0x25>
c00020e4:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e7:	f7 d6                	not    esi
c00020e9:	e8 67 f9 ff ff       	call   c0001a55 <ld_dword>
c00020ee:	39 c6                	cmp    esi,eax
c00020f0:	75 22                	jne    c0002114 <test_gpt_header+0x70>
c00020f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f5:	e8 5b f9 ff ff       	call   c0001a55 <ld_dword>
c00020fa:	83 c0 80             	add    eax,0xffffff80
c00020fd:	75 15                	jne    c0002114 <test_gpt_header+0x70>
c00020ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0002102:	e8 4e f9 ff ff       	call   c0001a55 <ld_dword>
c0002107:	3d 80 00 00 00       	cmp    eax,0x80
c000210c:	0f 96 c0             	setbe  al
c000210f:	0f b6 c0             	movzx  eax,al
c0002112:	89 c7                	mov    edi,eax
c0002114:	5b                   	pop    ebx
c0002115:	89 f8                	mov    eax,edi
c0002117:	5e                   	pop    esi
c0002118:	5f                   	pop    edi
c0002119:	5d                   	pop    ebp
c000211a:	c3                   	ret    

c000211b <make_rand>:
c000211b:	56                   	push   esi
c000211c:	85 c0                	test   eax,eax
c000211e:	53                   	push   ebx
c000211f:	75 05                	jne    c0002126 <make_rand+0xb>
c0002121:	b8 01 00 00 00       	mov    eax,0x1
c0002126:	01 d1                	add    ecx,edx
c0002128:	bb 08 00 00 00       	mov    ebx,0x8
c000212d:	89 c6                	mov    esi,eax
c000212f:	d1 e8                	shr    eax,1
c0002131:	83 e6 01             	and    esi,0x1
c0002134:	85 f6                	test   esi,esi
c0002136:	74 05                	je     c000213d <make_rand+0x22>
c0002138:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213d:	4b                   	dec    ebx
c000213e:	75 ed                	jne    c000212d <make_rand+0x12>
c0002140:	42                   	inc    edx
c0002141:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002144:	39 ca                	cmp    edx,ecx
c0002146:	75 e0                	jne    c0002128 <make_rand+0xd>
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	c3                   	ret    

c000214b <validate>:
c000214b:	56                   	push   esi
c000214c:	53                   	push   ebx
c000214d:	89 d6                	mov    esi,edx
c000214f:	51                   	push   ecx
c0002150:	85 c0                	test   eax,eax
c0002152:	75 09                	jne    c000215d <validate+0x12>
c0002154:	b8 09 00 00 00       	mov    eax,0x9
c0002159:	31 c9                	xor    ecx,ecx
c000215b:	eb 2f                	jmp    c000218c <validate+0x41>
c000215d:	89 c3                	mov    ebx,eax
c000215f:	8b 00                	mov    eax,DWORD PTR [eax]
c0002161:	85 c0                	test   eax,eax
c0002163:	74 ef                	je     c0002154 <validate+0x9>
c0002165:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002168:	74 ea                	je     c0002154 <validate+0x9>
c000216a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000216e:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002172:	75 e0                	jne    c0002154 <validate+0x9>
c0002174:	83 ec 0c             	sub    esp,0xc
c0002177:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217b:	50                   	push   eax
c000217c:	e8 76 f8 ff ff       	call   c00019f7 <disk_status>
c0002181:	83 c4 10             	add    esp,0x10
c0002184:	a8 01                	test   al,0x1
c0002186:	75 cc                	jne    c0002154 <validate+0x9>
c0002188:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218a:	31 c0                	xor    eax,eax
c000218c:	89 0e                	mov    DWORD PTR [esi],ecx
c000218e:	5a                   	pop    edx
c000218f:	5b                   	pop    ebx
c0002190:	5e                   	pop    esi
c0002191:	c3                   	ret    

c0002192 <sync_window>:
c0002192:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002196:	0f 84 85 00 00 00    	je     c0002221 <sync_window+0x8f>
c000219c:	55                   	push   ebp
c000219d:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a0:	57                   	push   edi
c00021a1:	56                   	push   esi
c00021a2:	53                   	push   ebx
c00021a3:	89 c3                	mov    ebx,eax
c00021a5:	83 ec 28             	sub    esp,0x28
c00021a8:	6a 01                	push   0x1
c00021aa:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021ad:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b0:	55                   	push   ebp
c00021b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b5:	50                   	push   eax
c00021b6:	e8 58 f8 ff ff       	call   c0001a13 <disk_write>
c00021bb:	83 c4 20             	add    esp,0x20
c00021be:	ba 01 00 00 00       	mov    edx,0x1
c00021c3:	85 c0                	test   eax,eax
c00021c5:	75 50                	jne    c0002217 <sync_window+0x85>
c00021c7:	31 ff                	xor    edi,edi
c00021c9:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021cc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d4:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021d7:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021da:	89 c6                	mov    esi,eax
c00021dc:	89 d7                	mov    edi,edx
c00021de:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e1:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e5:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021e8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ec:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f0:	73 23                	jae    c0002215 <sync_window+0x83>
c00021f2:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f6:	75 1d                	jne    c0002215 <sync_window+0x83>
c00021f8:	83 ec 0c             	sub    esp,0xc
c00021fb:	6a 01                	push   0x1
c00021fd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002201:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002205:	52                   	push   edx
c0002206:	50                   	push   eax
c0002207:	55                   	push   ebp
c0002208:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220c:	50                   	push   eax
c000220d:	e8 01 f8 ff ff       	call   c0001a13 <disk_write>
c0002212:	83 c4 20             	add    esp,0x20
c0002215:	31 d2                	xor    edx,edx
c0002217:	83 c4 1c             	add    esp,0x1c
c000221a:	89 d0                	mov    eax,edx
c000221c:	5b                   	pop    ebx
c000221d:	5e                   	pop    esi
c000221e:	5f                   	pop    edi
c000221f:	5d                   	pop    ebp
c0002220:	c3                   	ret    
c0002221:	31 d2                	xor    edx,edx
c0002223:	89 d0                	mov    eax,edx
c0002225:	c3                   	ret    

c0002226 <move_window>:
c0002226:	56                   	push   esi
c0002227:	53                   	push   ebx
c0002228:	89 c3                	mov    ebx,eax
c000222a:	83 ec 14             	sub    esp,0x14
c000222d:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002230:	75 07                	jne    c0002239 <move_window+0x13>
c0002232:	31 f6                	xor    esi,esi
c0002234:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002237:	74 59                	je     c0002292 <move_window+0x6c>
c0002239:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002241:	89 d8                	mov    eax,ebx
c0002243:	e8 4a ff ff ff       	call   c0002192 <sync_window>
c0002248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224c:	89 c6                	mov    esi,eax
c000224e:	85 c0                	test   eax,eax
c0002250:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002254:	75 3c                	jne    c0002292 <move_window+0x6c>
c0002256:	83 ec 0c             	sub    esp,0xc
c0002259:	8d 43 54             	lea    eax,[ebx+0x54]
c000225c:	6a 01                	push   0x1
c000225e:	51                   	push   ecx
c000225f:	52                   	push   edx
c0002260:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002264:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002268:	50                   	push   eax
c0002269:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226d:	50                   	push   eax
c000226e:	e8 8a f7 ff ff       	call   c00019fd <disk_read>
c0002273:	83 c4 20             	add    esp,0x20
c0002276:	85 c0                	test   eax,eax
c0002278:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002280:	74 0a                	je     c000228c <move_window+0x66>
c0002282:	83 ca ff             	or     edx,0xffffffff
c0002285:	be 01 00 00 00       	mov    esi,0x1
c000228a:	89 d1                	mov    ecx,edx
c000228c:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000228f:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002292:	89 f0                	mov    eax,esi
c0002294:	83 c4 14             	add    esp,0x14
c0002297:	5b                   	pop    ebx
c0002298:	5e                   	pop    esi
c0002299:	c3                   	ret    

c000229a <check_fs>:
c000229a:	53                   	push   ebx
c000229b:	89 c3                	mov    ebx,eax
c000229d:	83 ec 08             	sub    esp,0x8
c00022a0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a4:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ab:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b2:	e8 6f ff ff ff       	call   c0002226 <move_window>
c00022b7:	ba 04 00 00 00       	mov    edx,0x4
c00022bc:	85 c0                	test   eax,eax
c00022be:	0f 85 89 00 00 00    	jne    c000234d <check_fs+0xb3>
c00022c4:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022ca:	e8 79 f7 ff ff       	call   c0001a48 <ld_word>
c00022cf:	ba 03 00 00 00       	mov    edx,0x3
c00022d4:	66 3d 55 aa          	cmp    ax,0xaa55
c00022d8:	75 73                	jne    c000234d <check_fs+0xb3>
c00022da:	ba 00 8c 02 c0       	mov    edx,0xc0028c00
c00022df:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e2:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e7:	e8 fb f7 ff ff       	call   c0001ae7 <mem_cmp>
c00022ec:	ba 01 00 00 00       	mov    edx,0x1
c00022f1:	85 c0                	test   eax,eax
c00022f3:	74 58                	je     c000234d <check_fs+0xb3>
c00022f5:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022f8:	8d 50 18             	lea    edx,[eax+0x18]
c00022fb:	80 fa 01             	cmp    dl,0x1
c00022fe:	76 09                	jbe    c0002309 <check_fs+0x6f>
c0002300:	ba 02 00 00 00       	mov    edx,0x2
c0002305:	3c eb                	cmp    al,0xeb
c0002307:	75 44                	jne    c000234d <check_fs+0xb3>
c0002309:	ba 58 be 02 c0       	mov    edx,0xc002be58
c000230e:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002314:	b9 03 00 00 00       	mov    ecx,0x3
c0002319:	e8 c9 f7 ff ff       	call   c0001ae7 <mem_cmp>
c000231e:	31 d2                	xor    edx,edx
c0002320:	85 c0                	test   eax,eax
c0002322:	74 29                	je     c000234d <check_fs+0xb3>
c0002324:	ba 0c 8c 02 c0       	mov    edx,0xc0028c0c
c0002329:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000232f:	b9 05 00 00 00       	mov    ecx,0x5
c0002334:	e8 ae f7 ff ff       	call   c0001ae7 <mem_cmp>
c0002339:	31 d2                	xor    edx,edx
c000233b:	85 c0                	test   eax,eax
c000233d:	74 0e                	je     c000234d <check_fs+0xb3>
c000233f:	31 d2                	xor    edx,edx
c0002341:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002348:	0f 95 c2             	setne  dl
c000234b:	01 d2                	add    edx,edx
c000234d:	89 d0                	mov    eax,edx
c000234f:	83 c4 08             	add    esp,0x8
c0002352:	5b                   	pop    ebx
c0002353:	c3                   	ret    

c0002354 <find_volume>:
c0002354:	55                   	push   ebp
c0002355:	31 c9                	xor    ecx,ecx
c0002357:	57                   	push   edi
c0002358:	56                   	push   esi
c0002359:	89 d6                	mov    esi,edx
c000235b:	53                   	push   ebx
c000235c:	31 d2                	xor    edx,edx
c000235e:	83 ec 3c             	sub    esp,0x3c
c0002361:	89 c3                	mov    ebx,eax
c0002363:	e8 32 ff ff ff       	call   c000229a <check_fs>
c0002368:	83 f8 02             	cmp    eax,0x2
c000236b:	74 0e                	je     c000237b <find_volume+0x27>
c000236d:	0f 87 5d 01 00 00    	ja     c00024d0 <find_volume+0x17c>
c0002373:	85 f6                	test   esi,esi
c0002375:	0f 84 55 01 00 00    	je     c00024d0 <find_volume+0x17c>
c000237b:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002382:	0f 85 dd 00 00 00    	jne    c0002465 <find_volume+0x111>
c0002388:	31 c9                	xor    ecx,ecx
c000238a:	ba 01 00 00 00       	mov    edx,0x1
c000238f:	89 d8                	mov    eax,ebx
c0002391:	e8 90 fe ff ff       	call   c0002226 <move_window>
c0002396:	85 c0                	test   eax,eax
c0002398:	74 0a                	je     c00023a4 <find_volume+0x50>
c000239a:	b8 04 00 00 00       	mov    eax,0x4
c000239f:	e9 2c 01 00 00       	jmp    c00024d0 <find_volume+0x17c>
c00023a4:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a7:	89 e8                	mov    eax,ebp
c00023a9:	e8 f6 fc ff ff       	call   c00020a4 <test_gpt_header>
c00023ae:	85 c0                	test   eax,eax
c00023b0:	75 0a                	jne    c00023bc <find_volume+0x68>
c00023b2:	b8 03 00 00 00       	mov    eax,0x3
c00023b7:	e9 14 01 00 00       	jmp    c00024d0 <find_volume+0x17c>
c00023bc:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c2:	e8 8e f6 ff ff       	call   c0001a55 <ld_dword>
c00023c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023cb:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d1:	e8 97 f6 ff ff       	call   c0001a6d <ld_qword>
c00023d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f2:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f6:	74 ba                	je     c00023b2 <find_volume+0x5e>
c00023f8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023fc:	31 c9                	xor    ecx,ecx
c00023fe:	c1 e7 07             	shl    edi,0x7
c0002401:	89 d8                	mov    eax,ebx
c0002403:	89 fa                	mov    edx,edi
c0002405:	c1 ea 09             	shr    edx,0x9
c0002408:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240c:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002410:	e8 11 fe ff ff       	call   c0002226 <move_window>
c0002415:	85 c0                	test   eax,eax
c0002417:	75 81                	jne    c000239a <find_volume+0x46>
c0002419:	81 e7 80 01 00 00    	and    edi,0x180
c000241f:	b9 10 00 00 00       	mov    ecx,0x10
c0002424:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002428:	ba f0 8b 02 c0       	mov    edx,0xc0028bf0
c000242d:	e8 b5 f6 ff ff       	call   c0001ae7 <mem_cmp>
c0002432:	85 c0                	test   eax,eax
c0002434:	75 29                	jne    c000245f <find_volume+0x10b>
c0002436:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243a:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000243e:	e8 2a f6 ff ff       	call   c0001a6d <ld_qword>
c0002443:	89 d1                	mov    ecx,edx
c0002445:	89 c2                	mov    edx,eax
c0002447:	89 d8                	mov    eax,ebx
c0002449:	e8 4c fe ff ff       	call   c000229a <check_fs>
c000244e:	85 f6                	test   esi,esi
c0002450:	75 07                	jne    c0002459 <find_volume+0x105>
c0002452:	83 f8 01             	cmp    eax,0x1
c0002455:	77 08                	ja     c000245f <find_volume+0x10b>
c0002457:	eb 77                	jmp    c00024d0 <find_volume+0x17c>
c0002459:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245d:	74 71                	je     c00024d0 <find_volume+0x17c>
c000245f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002463:	eb 89                	jmp    c00023ee <find_volume+0x9a>
c0002465:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002469:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000246f:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002475:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002479:	89 cd                	mov    ebp,ecx
c000247b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000247f:	89 f8                	mov    eax,edi
c0002481:	83 c7 10             	add    edi,0x10
c0002484:	e8 cc f5 ff ff       	call   c0001a55 <ld_dword>
c0002489:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000248d:	89 01                	mov    DWORD PTR [ecx],eax
c000248f:	83 c1 04             	add    ecx,0x4
c0002492:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002496:	75 e3                	jne    c000247b <find_volume+0x127>
c0002498:	31 ff                	xor    edi,edi
c000249a:	85 f6                	test   esi,esi
c000249c:	74 03                	je     c00024a1 <find_volume+0x14d>
c000249e:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a1:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a5:	85 d2                	test   edx,edx
c00024a7:	74 14                	je     c00024bd <find_volume+0x169>
c00024a9:	31 c9                	xor    ecx,ecx
c00024ab:	89 d8                	mov    eax,ebx
c00024ad:	e8 e8 fd ff ff       	call   c000229a <check_fs>
c00024b2:	83 f8 01             	cmp    eax,0x1
c00024b5:	76 19                	jbe    c00024d0 <find_volume+0x17c>
c00024b7:	85 f6                	test   esi,esi
c00024b9:	74 0f                	je     c00024ca <find_volume+0x176>
c00024bb:	eb 13                	jmp    c00024d0 <find_volume+0x17c>
c00024bd:	85 f6                	test   esi,esi
c00024bf:	0f 85 ed fe ff ff    	jne    c00023b2 <find_volume+0x5e>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	47                   	inc    edi
c00024cb:	83 ff 03             	cmp    edi,0x3
c00024ce:	76 d1                	jbe    c00024a1 <find_volume+0x14d>
c00024d0:	83 c4 3c             	add    esp,0x3c
c00024d3:	5b                   	pop    ebx
c00024d4:	5e                   	pop    esi
c00024d5:	5f                   	pop    edi
c00024d6:	5d                   	pop    ebp
c00024d7:	c3                   	ret    

c00024d8 <mount_volume>:
c00024d8:	55                   	push   ebp
c00024d9:	57                   	push   edi
c00024da:	89 cf                	mov    edi,ecx
c00024dc:	56                   	push   esi
c00024dd:	53                   	push   ebx
c00024de:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e3:	83 ec 3c             	sub    esp,0x3c
c00024e6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f0:	e8 35 fb ff ff       	call   c000202a <get_ldnumber>
c00024f5:	85 c0                	test   eax,eax
c00024f7:	0f 88 3a 05 00 00    	js     c0002a37 <mount_volume+0x55f>
c00024fd:	8b 2c 85 60 da 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd25a0]
c0002504:	89 c6                	mov    esi,eax
c0002506:	bb 0c 00 00 00       	mov    ebx,0xc
c000250b:	85 ed                	test   ebp,ebp
c000250d:	0f 84 24 05 00 00    	je     c0002a37 <mount_volume+0x55f>
c0002513:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002517:	83 e7 fe             	and    edi,0xfffffffe
c000251a:	89 2a                	mov    DWORD PTR [edx],ebp
c000251c:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002520:	74 32                	je     c0002554 <mount_volume+0x7c>
c0002522:	83 ec 0c             	sub    esp,0xc
c0002525:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002529:	50                   	push   eax
c000252a:	e8 c8 f4 ff ff       	call   c00019f7 <disk_status>
c000252f:	83 c4 10             	add    esp,0x10
c0002532:	a8 01                	test   al,0x1
c0002534:	75 1e                	jne    c0002554 <mount_volume+0x7c>
c0002536:	31 db                	xor    ebx,ebx
c0002538:	89 f9                	mov    ecx,edi
c000253a:	84 c9                	test   cl,cl
c000253c:	0f 84 f5 04 00 00    	je     c0002a37 <mount_volume+0x55f>
c0002542:	a8 04                	test   al,0x4
c0002544:	0f 84 ed 04 00 00    	je     c0002a37 <mount_volume+0x55f>
c000254a:	bb 0a 00 00 00       	mov    ebx,0xa
c000254f:	e9 e3 04 00 00       	jmp    c0002a37 <mount_volume+0x55f>
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	89 f0                	mov    eax,esi
c0002559:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000255d:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002560:	0f b6 f0             	movzx  esi,al
c0002563:	bb 03 00 00 00       	mov    ebx,0x3
c0002568:	56                   	push   esi
c0002569:	e8 8c f4 ff ff       	call   c00019fa <disk_initialize>
c000256e:	83 c4 10             	add    esp,0x10
c0002571:	a8 01                	test   al,0x1
c0002573:	0f 85 be 04 00 00    	jne    c0002a37 <mount_volume+0x55f>
c0002579:	89 f9                	mov    ecx,edi
c000257b:	84 c9                	test   cl,cl
c000257d:	74 04                	je     c0002583 <mount_volume+0xab>
c000257f:	a8 04                	test   al,0x4
c0002581:	75 c7                	jne    c000254a <mount_volume+0x72>
c0002583:	31 d2                	xor    edx,edx
c0002585:	89 e8                	mov    eax,ebp
c0002587:	e8 c8 fd ff ff       	call   c0002354 <find_volume>
c000258c:	83 f8 04             	cmp    eax,0x4
c000258f:	75 0a                	jne    c000259b <mount_volume+0xc3>
c0002591:	bb 01 00 00 00       	mov    ebx,0x1
c0002596:	e9 9c 04 00 00       	jmp    c0002a37 <mount_volume+0x55f>
c000259b:	83 f8 01             	cmp    eax,0x1
c000259e:	76 0a                	jbe    c00025aa <mount_volume+0xd2>
c00025a0:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a5:	e9 8d 04 00 00       	jmp    c0002a37 <mount_volume+0x55f>
c00025aa:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025ad:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025b8:	75 17                	jne    c00025d1 <mount_volume+0xf9>
c00025ba:	b8 0b 00 00 00       	mov    eax,0xb
c00025bf:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c4:	75 da                	jne    c00025a0 <mount_volume+0xc8>
c00025c6:	40                   	inc    eax
c00025c7:	83 f8 40             	cmp    eax,0x40
c00025ca:	75 f3                	jne    c00025bf <mount_volume+0xe7>
c00025cc:	e9 5a 02 00 00       	jmp    c000282b <mount_volume+0x353>
c00025d1:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d4:	e8 6f f4 ff ff       	call   c0001a48 <ld_word>
c00025d9:	66 3d 00 02          	cmp    ax,0x200
c00025dd:	75 c1                	jne    c00025a0 <mount_volume+0xc8>
c00025df:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e2:	e8 61 f4 ff ff       	call   c0001a48 <ld_word>
c00025e7:	0f b7 c0             	movzx  eax,ax
c00025ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025ee:	85 c0                	test   eax,eax
c00025f0:	75 0c                	jne    c00025fe <mount_volume+0x126>
c00025f2:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f5:	e8 5b f4 ff ff       	call   c0001a55 <ld_dword>
c00025fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002602:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002605:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002608:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260c:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000260f:	48                   	dec    eax
c0002610:	3c 01                	cmp    al,0x1
c0002612:	77 8c                	ja     c00025a0 <mount_volume+0xc8>
c0002614:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002618:	89 c3                	mov    ebx,eax
c000261a:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000261e:	66 85 c0             	test   ax,ax
c0002621:	0f 84 79 ff ff ff    	je     c00025a0 <mount_volume+0xc8>
c0002627:	8d 40 ff             	lea    eax,[eax-0x1]
c000262a:	85 d8                	test   eax,ebx
c000262c:	0f 85 6e ff ff ff    	jne    c00025a0 <mount_volume+0xc8>
c0002632:	8d 45 65             	lea    eax,[ebp+0x65]
c0002635:	e8 0e f4 ff ff       	call   c0001a48 <ld_word>
c000263a:	89 c7                	mov    edi,eax
c000263c:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002640:	a8 0f                	test   al,0xf
c0002642:	0f 85 58 ff ff ff    	jne    c00025a0 <mount_volume+0xc8>
c0002648:	8d 45 67             	lea    eax,[ebp+0x67]
c000264b:	e8 f8 f3 ff ff       	call   c0001a48 <ld_word>
c0002650:	0f b7 f0             	movzx  esi,ax
c0002653:	85 f6                	test   esi,esi
c0002655:	75 0a                	jne    c0002661 <mount_volume+0x189>
c0002657:	8d 45 74             	lea    eax,[ebp+0x74]
c000265a:	e8 f6 f3 ff ff       	call   c0001a55 <ld_dword>
c000265f:	89 c6                	mov    esi,eax
c0002661:	8d 45 62             	lea    eax,[ebp+0x62]
c0002664:	e8 df f3 ff ff       	call   c0001a48 <ld_word>
c0002669:	66 85 c0             	test   ax,ax
c000266c:	0f 84 2e ff ff ff    	je     c00025a0 <mount_volume+0xc8>
c0002672:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002677:	0f b7 c8             	movzx  ecx,ax
c000267a:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000267f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002683:	89 fa                	mov    edx,edi
c0002685:	66 c1 ea 04          	shr    dx,0x4
c0002689:	0f b7 d2             	movzx  edx,dx
c000268c:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002690:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002693:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002697:	39 c6                	cmp    esi,eax
c0002699:	0f 82 01 ff ff ff    	jb     c00025a0 <mount_volume+0xc8>
c000269f:	29 c6                	sub    esi,eax
c00026a1:	31 d2                	xor    edx,edx
c00026a3:	89 f0                	mov    eax,esi
c00026a5:	f7 f3                	div    ebx
c00026a7:	39 de                	cmp    esi,ebx
c00026a9:	0f 82 f1 fe ff ff    	jb     c00025a0 <mount_volume+0xc8>
c00026af:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b4:	0f 87 e6 fe ff ff    	ja     c00025a0 <mount_volume+0xc8>
c00026ba:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026bf:	0f 86 63 03 00 00    	jbe    c0002a28 <mount_volume+0x550>
c00026c5:	bb 03 00 00 00       	mov    ebx,0x3
c00026ca:	8d 70 02             	lea    esi,[eax+0x2]
c00026cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d5:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026d8:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026db:	31 d2                	xor    edx,edx
c00026dd:	89 c8                	mov    eax,ecx
c00026df:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026ee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f2:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f5:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026fc:	31 d2                	xor    edx,edx
c00026fe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002702:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002706:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002709:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270c:	83 fb 03             	cmp    ebx,0x3
c000270f:	75 2b                	jne    c000273c <mount_volume+0x264>
c0002711:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002714:	e8 2f f3 ff ff       	call   c0001a48 <ld_word>
c0002719:	66 09 c7             	or     di,ax
c000271c:	0f 85 7e fe ff ff    	jne    c00025a0 <mount_volume+0xc8>
c0002722:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002728:	c1 e6 02             	shl    esi,0x2
c000272b:	e8 25 f3 ff ff       	call   c0001a55 <ld_dword>
c0002730:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002737:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273a:	eb 30                	jmp    c000276c <mount_volume+0x294>
c000273c:	66 85 ff             	test   di,di
c000273f:	0f 84 5b fe ff ff    	je     c00025a0 <mount_volume+0xc8>
c0002745:	31 d2                	xor    edx,edx
c0002747:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274b:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000274f:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002753:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002756:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002759:	83 fb 02             	cmp    ebx,0x2
c000275c:	75 04                	jne    c0002762 <mount_volume+0x28a>
c000275e:	01 f6                	add    esi,esi
c0002760:	eb 0a                	jmp    c000276c <mount_volume+0x294>
c0002762:	8d 04 76             	lea    eax,[esi+esi*2]
c0002765:	83 e6 01             	and    esi,0x1
c0002768:	d1 e8                	shr    eax,1
c000276a:	01 c6                	add    esi,eax
c000276c:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002772:	c1 ee 09             	shr    esi,0x9
c0002775:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002779:	0f 87 21 fe ff ff    	ja     c00025a0 <mount_volume+0xc8>
c000277f:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002786:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000278d:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002791:	83 fb 03             	cmp    ebx,0x3
c0002794:	75 7a                	jne    c0002810 <mount_volume+0x338>
c0002796:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279c:	e8 a7 f2 ff ff       	call   c0001a48 <ld_word>
c00027a1:	66 48                	dec    ax
c00027a3:	75 6b                	jne    c0002810 <mount_volume+0x338>
c00027a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027ad:	83 c2 01             	add    edx,0x1
c00027b0:	89 e8                	mov    eax,ebp
c00027b2:	83 d1 00             	adc    ecx,0x0
c00027b5:	e8 6c fa ff ff       	call   c0002226 <move_window>
c00027ba:	85 c0                	test   eax,eax
c00027bc:	75 52                	jne    c0002810 <mount_volume+0x338>
c00027be:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c2:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027c8:	e8 7b f2 ff ff       	call   c0001a48 <ld_word>
c00027cd:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d1:	75 3d                	jne    c0002810 <mount_volume+0x338>
c00027d3:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d6:	e8 7a f2 ff ff       	call   c0001a55 <ld_dword>
c00027db:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e0:	75 2e                	jne    c0002810 <mount_volume+0x338>
c00027e2:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027e8:	e8 68 f2 ff ff       	call   c0001a55 <ld_dword>
c00027ed:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f2:	75 1c                	jne    c0002810 <mount_volume+0x338>
c00027f4:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fa:	e8 56 f2 ff ff       	call   c0001a55 <ld_dword>
c00027ff:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002802:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002808:	e8 48 f2 ff ff       	call   c0001a55 <ld_dword>
c000280d:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002810:	66 a1 40 da 02 c0    	mov    ax,ds:0xc002da40
c0002816:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002819:	40                   	inc    eax
c000281a:	31 db                	xor    ebx,ebx
c000281c:	66 a3 40 da 02 c0    	mov    ds:0xc002da40,ax
c0002822:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002826:	e9 0c 02 00 00       	jmp    c0002a37 <mount_volume+0x55f>
c000282b:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002831:	e8 12 f2 ff ff       	call   c0001a48 <ld_word>
c0002836:	66 3d 00 01          	cmp    ax,0x100
c000283a:	0f 85 60 fd ff ff    	jne    c00025a0 <mount_volume+0xc8>
c0002840:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002847:	0f 85 53 fd ff ff    	jne    c00025a0 <mount_volume+0xc8>
c000284d:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002853:	e8 15 f2 ff ff       	call   c0001a6d <ld_qword>
c0002858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002860:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002866:	e8 ea f1 ff ff       	call   c0001a55 <ld_dword>
c000286b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000286e:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002874:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002877:	fe c8                	dec    al
c0002879:	0f 85 21 fd ff ff    	jne    c00025a0 <mount_volume+0xc8>
c000287f:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002886:	bb 01 00 00 00       	mov    ebx,0x1
c000288b:	d3 e3                	shl    ebx,cl
c000288d:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002891:	66 85 db             	test   bx,bx
c0002894:	0f 84 06 fd ff ff    	je     c00025a0 <mount_volume+0xc8>
c000289a:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a0:	e8 b0 f1 ff ff       	call   c0001a55 <ld_dword>
c00028a5:	89 c6                	mov    esi,eax
c00028a7:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028ac:	0f 87 ee fc ff ff    	ja     c00025a0 <mount_volume+0xc8>
c00028b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b6:	8d 40 02             	lea    eax,[eax+0x2]
c00028b9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028bc:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c6:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028cc:	e8 84 f1 ff ff       	call   c0001a55 <ld_dword>
c00028d1:	31 d2                	xor    edx,edx
c00028d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e3:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e6:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028e9:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028ef:	e8 61 f1 ff ff       	call   c0001a55 <ld_dword>
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fe:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002902:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002905:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002908:	0f b7 c3             	movzx  eax,bx
c000290b:	31 d2                	xor    edx,edx
c000290d:	0f af f0             	imul   esi,eax
c0002910:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002914:	89 f0                	mov    eax,esi
c0002916:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000291e:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002922:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002926:	39 c1                	cmp    ecx,eax
c0002928:	89 df                	mov    edi,ebx
c000292a:	19 d7                	sbb    edi,edx
c000292c:	0f 82 6e fc ff ff    	jb     c00025a0 <mount_volume+0xc8>
c0002932:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002938:	31 db                	xor    ebx,ebx
c000293a:	e8 16 f1 ff ff       	call   c0001a55 <ld_dword>
c000293f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002946:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002949:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002951:	85 db                	test   ebx,ebx
c0002953:	75 39                	jne    c000298e <mount_volume+0x4b6>
c0002955:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002959:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000295d:	0f 86 3d fc ff ff    	jbe    c00025a0 <mount_volume+0xc8>
c0002963:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002966:	31 ff                	xor    edi,edi
c0002968:	89 e8                	mov    eax,ebp
c000296a:	e8 72 f3 ff ff       	call   c0001ce1 <clst2sect>
c000296f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002973:	01 c6                	add    esi,eax
c0002975:	89 e8                	mov    eax,ebp
c0002977:	11 d7                	adc    edi,edx
c0002979:	89 f2                	mov    edx,esi
c000297b:	89 f9                	mov    ecx,edi
c000297d:	e8 a4 f8 ff ff       	call   c0002226 <move_window>
c0002982:	85 c0                	test   eax,eax
c0002984:	0f 85 07 fc ff ff    	jne    c0002591 <mount_volume+0xb9>
c000298a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000298e:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002993:	74 0b                	je     c00029a0 <mount_volume+0x4c8>
c0002995:	83 c3 20             	add    ebx,0x20
c0002998:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000299e:	eb b1                	jmp    c0002951 <mount_volume+0x479>
c00029a0:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a3:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a7:	e8 a9 f0 ff ff       	call   c0001a55 <ld_dword>
c00029ac:	89 c3                	mov    ebx,eax
c00029ae:	83 f8 01             	cmp    eax,0x1
c00029b1:	0f 86 e9 fb ff ff    	jbe    c00025a0 <mount_volume+0xc8>
c00029b7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029ba:	0f 86 e0 fb ff ff    	jbe    c00025a0 <mount_volume+0xc8>
c00029c0:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c3:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029c7:	0f af c2             	imul   eax,edx
c00029ca:	31 d2                	xor    edx,edx
c00029cc:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029cf:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d2:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d5:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029d8:	31 c9                	xor    ecx,ecx
c00029da:	89 da                	mov    edx,ebx
c00029dc:	89 e8                	mov    eax,ebp
c00029de:	c1 ea 07             	shr    edx,0x7
c00029e1:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e4:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e7:	e8 3a f8 ff ff       	call   c0002226 <move_window>
c00029ec:	85 c0                	test   eax,eax
c00029ee:	0f 85 9d fb ff ff    	jne    c0002591 <mount_volume+0xb9>
c00029f4:	89 d8                	mov    eax,ebx
c00029f6:	83 e0 7f             	and    eax,0x7f
c00029f9:	8d 04 86             	lea    eax,[esi+eax*4]
c00029fc:	e8 54 f0 ff ff       	call   c0001a55 <ld_dword>
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	74 0a                	je     c0002a10 <mount_volume+0x538>
c0002a06:	43                   	inc    ebx
c0002a07:	39 d8                	cmp    eax,ebx
c0002a09:	74 cd                	je     c00029d8 <mount_volume+0x500>
c0002a0b:	e9 90 fb ff ff       	jmp    c00025a0 <mount_volume+0xc8>
c0002a10:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a17:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a1e:	bb 04 00 00 00       	mov    ebx,0x4
c0002a23:	e9 e8 fd ff ff       	jmp    c0002810 <mount_volume+0x338>
c0002a28:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a2d:	19 db                	sbb    ebx,ebx
c0002a2f:	83 c3 02             	add    ebx,0x2
c0002a32:	e9 93 fc ff ff       	jmp    c00026ca <mount_volume+0x1f2>
c0002a37:	83 c4 3c             	add    esp,0x3c
c0002a3a:	89 d8                	mov    eax,ebx
c0002a3c:	5b                   	pop    ebx
c0002a3d:	5e                   	pop    esi
c0002a3e:	5f                   	pop    edi
c0002a3f:	5d                   	pop    ebp
c0002a40:	c3                   	ret    

c0002a41 <find_bitmap>:
c0002a41:	55                   	push   ebp
c0002a42:	57                   	push   edi
c0002a43:	89 c7                	mov    edi,eax
c0002a45:	56                   	push   esi
c0002a46:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a49:	53                   	push   ebx
c0002a4a:	83 ec 1c             	sub    esp,0x1c
c0002a4d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a54:	83 e8 02             	sub    eax,0x2
c0002a57:	39 f0                	cmp    eax,esi
c0002a59:	77 02                	ja     c0002a5d <find_bitmap+0x1c>
c0002a5b:	31 f6                	xor    esi,esi
c0002a5d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a61:	89 f3                	mov    ebx,esi
c0002a63:	31 ed                	xor    ebp,ebp
c0002a65:	31 c9                	xor    ecx,ecx
c0002a67:	89 da                	mov    edx,ebx
c0002a69:	89 f8                	mov    eax,edi
c0002a6b:	c1 ea 0c             	shr    edx,0xc
c0002a6e:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a71:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a74:	e8 ad f7 ff ff       	call   c0002226 <move_window>
c0002a79:	85 c0                	test   eax,eax
c0002a7b:	75 68                	jne    c0002ae5 <find_bitmap+0xa4>
c0002a7d:	89 da                	mov    edx,ebx
c0002a7f:	89 d9                	mov    ecx,ebx
c0002a81:	c1 ea 03             	shr    edx,0x3
c0002a84:	83 e1 07             	and    ecx,0x7
c0002a87:	b8 01 00 00 00       	mov    eax,0x1
c0002a8c:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a92:	d3 e0                	shl    eax,cl
c0002a94:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a97:	83 e9 02             	sub    ecx,0x2
c0002a9a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a9e:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa2:	43                   	inc    ebx
c0002aa3:	21 c1                	and    ecx,eax
c0002aa5:	d1 e0                	shl    eax,1
c0002aa7:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aab:	77 09                	ja     c0002ab6 <find_bitmap+0x75>
c0002aad:	31 db                	xor    ebx,ebx
c0002aaf:	ba 00 02 00 00       	mov    edx,0x200
c0002ab4:	31 c0                	xor    eax,eax
c0002ab6:	84 c9                	test   cl,cl
c0002ab8:	75 10                	jne    c0002aca <find_bitmap+0x89>
c0002aba:	45                   	inc    ebp
c0002abb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002abf:	75 0f                	jne    c0002ad0 <find_bitmap+0x8f>
c0002ac1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac5:	83 c0 02             	add    eax,0x2
c0002ac8:	eb 22                	jmp    c0002aec <find_bitmap+0xab>
c0002aca:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ace:	31 ed                	xor    ebp,ebp
c0002ad0:	39 de                	cmp    esi,ebx
c0002ad2:	74 16                	je     c0002aea <find_bitmap+0xa9>
c0002ad4:	84 c0                	test   al,al
c0002ad6:	75 c6                	jne    c0002a9e <find_bitmap+0x5d>
c0002ad8:	42                   	inc    edx
c0002ad9:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002adf:	77 84                	ja     c0002a65 <find_bitmap+0x24>
c0002ae1:	b0 01                	mov    al,0x1
c0002ae3:	eb b9                	jmp    c0002a9e <find_bitmap+0x5d>
c0002ae5:	83 c8 ff             	or     eax,0xffffffff
c0002ae8:	eb 02                	jmp    c0002aec <find_bitmap+0xab>
c0002aea:	31 c0                	xor    eax,eax
c0002aec:	83 c4 1c             	add    esp,0x1c
c0002aef:	5b                   	pop    ebx
c0002af0:	5e                   	pop    esi
c0002af1:	5f                   	pop    edi
c0002af2:	5d                   	pop    ebp
c0002af3:	c3                   	ret    

c0002af4 <change_bitmap>:
c0002af4:	55                   	push   ebp
c0002af5:	89 cd                	mov    ebp,ecx
c0002af7:	57                   	push   edi
c0002af8:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afb:	56                   	push   esi
c0002afc:	89 c7                	mov    edi,eax
c0002afe:	53                   	push   ebx
c0002aff:	89 c8                	mov    eax,ecx
c0002b01:	83 ec 1c             	sub    esp,0x1c
c0002b04:	31 d2                	xor    edx,edx
c0002b06:	89 ce                	mov    esi,ecx
c0002b08:	c1 e8 0c             	shr    eax,0xc
c0002b0b:	bb 01 00 00 00       	mov    ebx,0x1
c0002b10:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b13:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b16:	c1 ee 03             	shr    esi,0x3
c0002b19:	83 e1 07             	and    ecx,0x7
c0002b1c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b22:	d3 e3                	shl    ebx,cl
c0002b24:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b28:	89 c1                	mov    ecx,eax
c0002b2a:	89 d3                	mov    ebx,edx
c0002b2c:	83 c1 01             	add    ecx,0x1
c0002b2f:	83 d3 00             	adc    ebx,0x0
c0002b32:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b36:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3a:	89 d1                	mov    ecx,edx
c0002b3c:	89 c2                	mov    edx,eax
c0002b3e:	89 f8                	mov    eax,edi
c0002b40:	e8 e1 f6 ff ff       	call   c0002226 <move_window>
c0002b45:	89 c1                	mov    ecx,eax
c0002b47:	85 c0                	test   eax,eax
c0002b49:	75 48                	jne    c0002b93 <change_bitmap+0x9f>
c0002b4b:	31 d2                	xor    edx,edx
c0002b4d:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b51:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b55:	0f 95 c2             	setne  dl
c0002b58:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5c:	74 3c                	je     c0002b9a <change_bitmap+0xa6>
c0002b5e:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b62:	4d                   	dec    ebp
c0002b63:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b67:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6b:	74 32                	je     c0002b9f <change_bitmap+0xab>
c0002b6d:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b71:	75 d8                	jne    c0002b4b <change_bitmap+0x57>
c0002b73:	8d 46 01             	lea    eax,[esi+0x1]
c0002b76:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7b:	89 c3                	mov    ebx,eax
c0002b7d:	31 f6                	xor    esi,esi
c0002b7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b87:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b8d:	74 99                	je     c0002b28 <change_bitmap+0x34>
c0002b8f:	89 de                	mov    esi,ebx
c0002b91:	eb b8                	jmp    c0002b4b <change_bitmap+0x57>
c0002b93:	b9 01 00 00 00       	mov    ecx,0x1
c0002b98:	eb 05                	jmp    c0002b9f <change_bitmap+0xab>
c0002b9a:	b9 02 00 00 00       	mov    ecx,0x2
c0002b9f:	83 c4 1c             	add    esp,0x1c
c0002ba2:	89 c8                	mov    eax,ecx
c0002ba4:	5b                   	pop    ebx
c0002ba5:	5e                   	pop    esi
c0002ba6:	5f                   	pop    edi
c0002ba7:	5d                   	pop    ebp
c0002ba8:	c3                   	ret    

c0002ba9 <put_fat>:
c0002ba9:	83 fa 01             	cmp    edx,0x1
c0002bac:	0f 86 7b 01 00 00    	jbe    c0002d2d <put_fat+0x184>
c0002bb2:	55                   	push   ebp
c0002bb3:	57                   	push   edi
c0002bb4:	89 cf                	mov    edi,ecx
c0002bb6:	56                   	push   esi
c0002bb7:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbc:	53                   	push   ebx
c0002bbd:	89 c6                	mov    esi,eax
c0002bbf:	83 ec 1c             	sub    esp,0x1c
c0002bc2:	89 d3                	mov    ebx,edx
c0002bc4:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc7:	0f 86 68 01 00 00    	jbe    c0002d35 <put_fat+0x18c>
c0002bcd:	8a 00                	mov    al,BYTE PTR [eax]
c0002bcf:	3c 02                	cmp    al,0x2
c0002bd1:	0f 84 c7 00 00 00    	je     c0002c9e <put_fat+0xf5>
c0002bd7:	77 09                	ja     c0002be2 <put_fat+0x39>
c0002bd9:	fe c8                	dec    al
c0002bdb:	74 17                	je     c0002bf4 <put_fat+0x4b>
c0002bdd:	e9 53 01 00 00       	jmp    c0002d35 <put_fat+0x18c>
c0002be2:	b9 02 00 00 00       	mov    ecx,0x2
c0002be7:	3c 04                	cmp    al,0x4
c0002be9:	0f 86 e1 00 00 00    	jbe    c0002cd0 <put_fat+0x127>
c0002bef:	e9 41 01 00 00       	jmp    c0002d35 <put_fat+0x18c>
c0002bf4:	89 d5                	mov    ebp,edx
c0002bf6:	31 c9                	xor    ecx,ecx
c0002bf8:	d1 ed                	shr    ebp,1
c0002bfa:	89 f0                	mov    eax,esi
c0002bfc:	01 d5                	add    ebp,edx
c0002bfe:	89 ea                	mov    edx,ebp
c0002c00:	c1 ea 09             	shr    edx,0x9
c0002c03:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c06:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c09:	e8 18 f6 ff ff       	call   c0002226 <move_window>
c0002c0e:	89 c1                	mov    ecx,eax
c0002c10:	85 c0                	test   eax,eax
c0002c12:	0f 85 1d 01 00 00    	jne    c0002d35 <put_fat+0x18c>
c0002c18:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c1f:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c22:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	83 e3 01             	and    ebx,0x1
c0002c35:	74 0d                	je     c0002c44 <put_fat+0x9b>
c0002c37:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3a:	89 fa                	mov    edx,edi
c0002c3c:	83 e0 0f             	and    eax,0xf
c0002c3f:	c1 e2 04             	shl    edx,0x4
c0002c42:	09 d0                	or     eax,edx
c0002c44:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4b:	31 c9                	xor    ecx,ecx
c0002c4d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c51:	c1 ea 09             	shr    edx,0x9
c0002c54:	89 f0                	mov    eax,esi
c0002c56:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c59:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5c:	e8 c5 f5 ff ff       	call   c0002226 <move_window>
c0002c61:	89 c1                	mov    ecx,eax
c0002c63:	85 c0                	test   eax,eax
c0002c65:	0f 85 ca 00 00 00    	jne    c0002d35 <put_fat+0x18c>
c0002c6b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c6f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c75:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c79:	85 db                	test   ebx,ebx
c0002c7b:	74 07                	je     c0002c84 <put_fat+0xdb>
c0002c7d:	c1 ef 04             	shr    edi,0x4
c0002c80:	89 fa                	mov    edx,edi
c0002c82:	eb 0e                	jmp    c0002c92 <put_fat+0xe9>
c0002c84:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c87:	c1 ef 08             	shr    edi,0x8
c0002c8a:	83 e2 f0             	and    edx,0xfffffff0
c0002c8d:	83 e7 0f             	and    edi,0xf
c0002c90:	09 fa                	or     edx,edi
c0002c92:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c95:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c99:	e9 97 00 00 00       	jmp    c0002d35 <put_fat+0x18c>
c0002c9e:	31 c9                	xor    ecx,ecx
c0002ca0:	c1 ea 08             	shr    edx,0x8
c0002ca3:	89 f0                	mov    eax,esi
c0002ca5:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca8:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cab:	e8 76 f5 ff ff       	call   c0002226 <move_window>
c0002cb0:	89 c1                	mov    ecx,eax
c0002cb2:	85 c0                	test   eax,eax
c0002cb4:	75 7f                	jne    c0002d35 <put_fat+0x18c>
c0002cb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cba:	01 db                	add    ebx,ebx
c0002cbc:	0f b7 d7             	movzx  edx,di
c0002cbf:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc5:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cc9:	e8 ec ed ff ff       	call   c0001aba <st_word>
c0002cce:	eb 53                	jmp    c0002d23 <put_fat+0x17a>
c0002cd0:	31 c9                	xor    ecx,ecx
c0002cd2:	c1 ea 07             	shr    edx,0x7
c0002cd5:	89 f0                	mov    eax,esi
c0002cd7:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cda:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cdd:	e8 44 f5 ff ff       	call   c0002226 <move_window>
c0002ce2:	89 c1                	mov    ecx,eax
c0002ce4:	85 c0                	test   eax,eax
c0002ce6:	75 4d                	jne    c0002d35 <put_fat+0x18c>
c0002ce8:	c1 e3 02             	shl    ebx,0x2
c0002ceb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf4:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cf8:	74 1c                	je     c0002d16 <put_fat+0x16d>
c0002cfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cfe:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d04:	89 d8                	mov    eax,ebx
c0002d06:	e8 4a ed ff ff       	call   c0001a55 <ld_dword>
c0002d0b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d0f:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d14:	09 c7                	or     edi,eax
c0002d16:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1a:	89 fa                	mov    edx,edi
c0002d1c:	89 d8                	mov    eax,ebx
c0002d1e:	e8 9b ed ff ff       	call   c0001abe <st_dword>
c0002d23:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d27:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2b:	eb 08                	jmp    c0002d35 <put_fat+0x18c>
c0002d2d:	b9 02 00 00 00       	mov    ecx,0x2
c0002d32:	89 c8                	mov    eax,ecx
c0002d34:	c3                   	ret    
c0002d35:	83 c4 1c             	add    esp,0x1c
c0002d38:	89 c8                	mov    eax,ecx
c0002d3a:	5b                   	pop    ebx
c0002d3b:	5e                   	pop    esi
c0002d3c:	5f                   	pop    edi
c0002d3d:	5d                   	pop    ebp
c0002d3e:	c3                   	ret    

c0002d3f <fill_last_frag>:
c0002d3f:	57                   	push   edi
c0002d40:	89 cf                	mov    edi,ecx
c0002d42:	56                   	push   esi
c0002d43:	89 d6                	mov    esi,edx
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4b:	85 c0                	test   eax,eax
c0002d4d:	74 21                	je     c0002d70 <fill_last_frag+0x31>
c0002d4f:	89 f9                	mov    ecx,edi
c0002d51:	83 f8 01             	cmp    eax,0x1
c0002d54:	76 05                	jbe    c0002d5b <fill_last_frag+0x1c>
c0002d56:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d59:	29 c1                	sub    ecx,eax
c0002d5b:	8d 56 01             	lea    edx,[esi+0x1]
c0002d5e:	29 c2                	sub    edx,eax
c0002d60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d62:	e8 42 fe ff ff       	call   c0002ba9 <put_fat>
c0002d67:	85 c0                	test   eax,eax
c0002d69:	75 05                	jne    c0002d70 <fill_last_frag+0x31>
c0002d6b:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d6e:	eb d8                	jmp    c0002d48 <fill_last_frag+0x9>
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	c3                   	ret    

c0002d74 <fill_first_frag>:
c0002d74:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d78:	75 2d                	jne    c0002da7 <fill_first_frag+0x33>
c0002d7a:	57                   	push   edi
c0002d7b:	56                   	push   esi
c0002d7c:	53                   	push   ebx
c0002d7d:	89 c3                	mov    ebx,eax
c0002d7f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d82:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d85:	01 d7                	add    edi,edx
c0002d87:	39 fa                	cmp    edx,edi
c0002d89:	74 14                	je     c0002d9f <fill_first_frag+0x2b>
c0002d8b:	8d 72 01             	lea    esi,[edx+0x1]
c0002d8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d90:	89 f1                	mov    ecx,esi
c0002d92:	e8 12 fe ff ff       	call   c0002ba9 <put_fat>
c0002d97:	89 f2                	mov    edx,esi
c0002d99:	85 c0                	test   eax,eax
c0002d9b:	74 ea                	je     c0002d87 <fill_first_frag+0x13>
c0002d9d:	eb 0b                	jmp    c0002daa <fill_first_frag+0x36>
c0002d9f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da3:	31 c0                	xor    eax,eax
c0002da5:	eb 03                	jmp    c0002daa <fill_first_frag+0x36>
c0002da7:	31 c0                	xor    eax,eax
c0002da9:	c3                   	ret    
c0002daa:	5b                   	pop    ebx
c0002dab:	5e                   	pop    esi
c0002dac:	5f                   	pop    edi
c0002dad:	c3                   	ret    

c0002dae <get_fat>:
c0002dae:	83 fa 01             	cmp    edx,0x1
c0002db1:	0f 86 db 01 00 00    	jbe    c0002f92 <get_fat+0x1e4>
c0002db7:	55                   	push   ebp
c0002db8:	b9 01 00 00 00       	mov    ecx,0x1
c0002dbd:	57                   	push   edi
c0002dbe:	56                   	push   esi
c0002dbf:	53                   	push   ebx
c0002dc0:	83 ec 1c             	sub    esp,0x1c
c0002dc3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc5:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dc8:	0f 86 cc 01 00 00    	jbe    c0002f9a <get_fat+0x1ec>
c0002dce:	89 c3                	mov    ebx,eax
c0002dd0:	89 d6                	mov    esi,edx
c0002dd2:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd4:	3c 02                	cmp    al,0x2
c0002dd6:	0f 84 99 00 00 00    	je     c0002e75 <get_fat+0xc7>
c0002ddc:	77 09                	ja     c0002de7 <get_fat+0x39>
c0002dde:	fe c8                	dec    al
c0002de0:	74 1a                	je     c0002dfc <get_fat+0x4e>
c0002de2:	e9 b3 01 00 00       	jmp    c0002f9a <get_fat+0x1ec>
c0002de7:	3c 03                	cmp    al,0x3
c0002de9:	0f 84 b5 00 00 00    	je     c0002ea4 <get_fat+0xf6>
c0002def:	3c 04                	cmp    al,0x4
c0002df1:	0f 84 e3 00 00 00    	je     c0002eda <get_fat+0x12c>
c0002df7:	e9 9e 01 00 00       	jmp    c0002f9a <get_fat+0x1ec>
c0002dfc:	89 d3                	mov    ebx,edx
c0002dfe:	31 c9                	xor    ecx,ecx
c0002e00:	d1 eb                	shr    ebx,1
c0002e02:	89 f8                	mov    eax,edi
c0002e04:	01 d3                	add    ebx,edx
c0002e06:	89 da                	mov    edx,ebx
c0002e08:	c1 ea 09             	shr    edx,0x9
c0002e0b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e0e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e11:	e8 10 f4 ff ff       	call   c0002226 <move_window>
c0002e16:	85 c0                	test   eax,eax
c0002e18:	74 08                	je     c0002e22 <get_fat+0x74>
c0002e1a:	83 c9 ff             	or     ecx,0xffffffff
c0002e1d:	e9 78 01 00 00       	jmp    c0002f9a <get_fat+0x1ec>
c0002e22:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e25:	31 c9                	xor    ecx,ecx
c0002e27:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e2d:	89 ea                	mov    edx,ebp
c0002e2f:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e33:	c1 ea 09             	shr    edx,0x9
c0002e36:	89 f8                	mov    eax,edi
c0002e38:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3e:	e8 e3 f3 ff ff       	call   c0002226 <move_window>
c0002e43:	85 c0                	test   eax,eax
c0002e45:	75 d3                	jne    c0002e1a <get_fat+0x6c>
c0002e47:	0f b6 c3             	movzx  eax,bl
c0002e4a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e50:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e55:	c1 e3 08             	shl    ebx,0x8
c0002e58:	09 c3                	or     ebx,eax
c0002e5a:	89 d9                	mov    ecx,ebx
c0002e5c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e62:	83 e6 01             	and    esi,0x1
c0002e65:	0f 84 2f 01 00 00    	je     c0002f9a <get_fat+0x1ec>
c0002e6b:	89 d9                	mov    ecx,ebx
c0002e6d:	c1 e9 04             	shr    ecx,0x4
c0002e70:	e9 25 01 00 00       	jmp    c0002f9a <get_fat+0x1ec>
c0002e75:	31 c9                	xor    ecx,ecx
c0002e77:	c1 ea 08             	shr    edx,0x8
c0002e7a:	89 f8                	mov    eax,edi
c0002e7c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e7f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e82:	e8 9f f3 ff ff       	call   c0002226 <move_window>
c0002e87:	85 c0                	test   eax,eax
c0002e89:	75 8f                	jne    c0002e1a <get_fat+0x6c>
c0002e8b:	01 f6                	add    esi,esi
c0002e8d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e93:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e97:	e8 ac eb ff ff       	call   c0001a48 <ld_word>
c0002e9c:	0f b7 c8             	movzx  ecx,ax
c0002e9f:	e9 f6 00 00 00       	jmp    c0002f9a <get_fat+0x1ec>
c0002ea4:	31 c9                	xor    ecx,ecx
c0002ea6:	c1 ea 07             	shr    edx,0x7
c0002ea9:	89 f8                	mov    eax,edi
c0002eab:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eae:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb1:	e8 70 f3 ff ff       	call   c0002226 <move_window>
c0002eb6:	85 c0                	test   eax,eax
c0002eb8:	0f 85 5c ff ff ff    	jne    c0002e1a <get_fat+0x6c>
c0002ebe:	c1 e6 02             	shl    esi,0x2
c0002ec1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ecb:	e8 85 eb ff ff       	call   c0001a55 <ld_dword>
c0002ed0:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed5:	e9 b4 00 00 00       	jmp    c0002f8e <get_fat+0x1e0>
c0002eda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002edd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee0:	89 d1                	mov    ecx,edx
c0002ee2:	09 c1                	or     ecx,eax
c0002ee4:	74 06                	je     c0002eec <get_fat+0x13e>
c0002ee6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eea:	75 0f                	jne    c0002efb <get_fat+0x14d>
c0002eec:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef1:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef5:	0f 85 9f 00 00 00    	jne    c0002f9a <get_fat+0x1ec>
c0002efb:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eff:	89 f5                	mov    ebp,esi
c0002f01:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f06:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f09:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0c:	80 f9 02             	cmp    cl,0x2
c0002f0f:	75 35                	jne    c0002f46 <get_fat+0x198>
c0002f11:	83 c0 ff             	add    eax,0xffffffff
c0002f14:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f19:	83 d2 ff             	adc    edx,0xffffffff
c0002f1c:	31 db                	xor    ebx,ebx
c0002f1e:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f22:	53                   	push   ebx
c0002f23:	c1 ea 09             	shr    edx,0x9
c0002f26:	51                   	push   ecx
c0002f27:	52                   	push   edx
c0002f28:	50                   	push   eax
c0002f29:	e8 1e 32 02 00       	call   c002614c <__udivdi3>
c0002f2e:	83 c4 10             	add    esp,0x10
c0002f31:	b9 01 00 00 00       	mov    ecx,0x1
c0002f36:	39 c5                	cmp    ebp,eax
c0002f38:	77 60                	ja     c0002f9a <get_fat+0x1ec>
c0002f3a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f3f:	74 59                	je     c0002f9a <get_fat+0x1ec>
c0002f41:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f44:	eb 54                	jmp    c0002f9a <get_fat+0x1ec>
c0002f46:	80 f9 03             	cmp    cl,0x3
c0002f49:	75 05                	jne    c0002f50 <get_fat+0x1a2>
c0002f4b:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f4e:	77 f1                	ja     c0002f41 <get_fat+0x193>
c0002f50:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f55:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f59:	75 3f                	jne    c0002f9a <get_fat+0x1ec>
c0002f5b:	31 c9                	xor    ecx,ecx
c0002f5d:	89 f2                	mov    edx,esi
c0002f5f:	89 f8                	mov    eax,edi
c0002f61:	c1 ea 07             	shr    edx,0x7
c0002f64:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f67:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6a:	e8 b7 f2 ff ff       	call   c0002226 <move_window>
c0002f6f:	85 c0                	test   eax,eax
c0002f71:	0f 85 a3 fe ff ff    	jne    c0002e1a <get_fat+0x6c>
c0002f77:	c1 e6 02             	shl    esi,0x2
c0002f7a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f80:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f84:	e8 cc ea ff ff       	call   c0001a55 <ld_dword>
c0002f89:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f8e:	89 c1                	mov    ecx,eax
c0002f90:	eb 08                	jmp    c0002f9a <get_fat+0x1ec>
c0002f92:	b9 01 00 00 00       	mov    ecx,0x1
c0002f97:	89 c8                	mov    eax,ecx
c0002f99:	c3                   	ret    
c0002f9a:	83 c4 1c             	add    esp,0x1c
c0002f9d:	89 c8                	mov    eax,ecx
c0002f9f:	5b                   	pop    ebx
c0002fa0:	5e                   	pop    esi
c0002fa1:	5f                   	pop    edi
c0002fa2:	5d                   	pop    ebp
c0002fa3:	c3                   	ret    

c0002fa4 <dir_sdi>:
c0002fa4:	55                   	push   ebp
c0002fa5:	57                   	push   edi
c0002fa6:	56                   	push   esi
c0002fa7:	53                   	push   ebx
c0002fa8:	89 c3                	mov    ebx,eax
c0002faa:	83 ec 1c             	sub    esp,0x1c
c0002fad:	8b 38                	mov    edi,DWORD PTR [eax]
c0002faf:	31 c0                	xor    eax,eax
c0002fb1:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb4:	0f 94 c0             	sete   al
c0002fb7:	48                   	dec    eax
c0002fb8:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fbd:	05 00 00 00 10       	add    eax,0x10000000
c0002fc2:	39 d0                	cmp    eax,edx
c0002fc4:	77 0a                	ja     c0002fd0 <dir_sdi+0x2c>
c0002fc6:	b8 02 00 00 00       	mov    eax,0x2
c0002fcb:	e9 c4 00 00 00       	jmp    c0003094 <dir_sdi+0xf0>
c0002fd0:	89 d6                	mov    esi,edx
c0002fd2:	f6 c2 1f             	test   dl,0x1f
c0002fd5:	75 ef                	jne    c0002fc6 <dir_sdi+0x22>
c0002fd7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fda:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fdd:	85 c9                	test   ecx,ecx
c0002fdf:	75 2d                	jne    c000300e <dir_sdi+0x6a>
c0002fe1:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe4:	77 1b                	ja     c0003001 <dir_sdi+0x5d>
c0002fe6:	89 f2                	mov    edx,esi
c0002fe8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fec:	c1 ea 05             	shr    edx,0x5
c0002fef:	39 c2                	cmp    edx,eax
c0002ff1:	73 d3                	jae    c0002fc6 <dir_sdi+0x22>
c0002ff3:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff6:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ff9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ffc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fff:	eb 4b                	jmp    c000304c <dir_sdi+0xa8>
c0003001:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003004:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003008:	85 c0                	test   eax,eax
c000300a:	74 da                	je     c0002fe6 <dir_sdi+0x42>
c000300c:	89 c1                	mov    ecx,eax
c000300e:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003012:	c1 e5 09             	shl    ebp,0x9
c0003015:	89 ca                	mov    edx,ecx
c0003017:	39 ee                	cmp    esi,ebp
c0003019:	72 1c                	jb     c0003037 <dir_sdi+0x93>
c000301b:	89 d8                	mov    eax,ebx
c000301d:	e8 8c fd ff ff       	call   c0002dae <get_fat>
c0003022:	89 c1                	mov    ecx,eax
c0003024:	83 f8 ff             	cmp    eax,0xffffffff
c0003027:	74 66                	je     c000308f <dir_sdi+0xeb>
c0003029:	83 f8 01             	cmp    eax,0x1
c000302c:	76 98                	jbe    c0002fc6 <dir_sdi+0x22>
c000302e:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003031:	76 93                	jbe    c0002fc6 <dir_sdi+0x22>
c0003033:	29 ee                	sub    esi,ebp
c0003035:	eb de                	jmp    c0003015 <dir_sdi+0x71>
c0003037:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303b:	89 f8                	mov    eax,edi
c000303d:	e8 9f ec ff ff       	call   c0001ce1 <clst2sect>
c0003042:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003046:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003049:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304c:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000304f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003052:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003055:	89 d1                	mov    ecx,edx
c0003057:	09 c1                	or     ecx,eax
c0003059:	0f 84 67 ff ff ff    	je     c0002fc6 <dir_sdi+0x22>
c000305f:	89 f1                	mov    ecx,esi
c0003061:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003069:	c1 e9 09             	shr    ecx,0x9
c000306c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003070:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003074:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003078:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307b:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003081:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003084:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003088:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308b:	31 c0                	xor    eax,eax
c000308d:	eb 05                	jmp    c0003094 <dir_sdi+0xf0>
c000308f:	b8 01 00 00 00       	mov    eax,0x1
c0003094:	83 c4 1c             	add    esp,0x1c
c0003097:	5b                   	pop    ebx
c0003098:	5e                   	pop    esi
c0003099:	5f                   	pop    edi
c000309a:	5d                   	pop    ebp
c000309b:	c3                   	ret    

c000309c <create_chain>:
c000309c:	55                   	push   ebp
c000309d:	89 c5                	mov    ebp,eax
c000309f:	57                   	push   edi
c00030a0:	56                   	push   esi
c00030a1:	53                   	push   ebx
c00030a2:	83 ec 1c             	sub    esp,0x1c
c00030a5:	85 d2                	test   edx,edx
c00030a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ab:	8b 30                	mov    esi,DWORD PTR [eax]
c00030ad:	75 0e                	jne    c00030bd <create_chain+0x21>
c00030af:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b2:	85 ff                	test   edi,edi
c00030b4:	74 39                	je     c00030ef <create_chain+0x53>
c00030b6:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030b9:	77 39                	ja     c00030f4 <create_chain+0x58>
c00030bb:	eb 32                	jmp    c00030ef <create_chain+0x53>
c00030bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c1:	e8 e8 fc ff ff       	call   c0002dae <get_fat>
c00030c6:	89 c3                	mov    ebx,eax
c00030c8:	83 f8 01             	cmp    eax,0x1
c00030cb:	77 0a                	ja     c00030d7 <create_chain+0x3b>
c00030cd:	bb 01 00 00 00       	mov    ebx,0x1
c00030d2:	e9 ba 01 00 00       	jmp    c0003291 <create_chain+0x1f5>
c00030d7:	83 f8 ff             	cmp    eax,0xffffffff
c00030da:	0f 84 62 01 00 00    	je     c0003242 <create_chain+0x1a6>
c00030e0:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e3:	0f 87 a8 01 00 00    	ja     c0003291 <create_chain+0x1f5>
c00030e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030ed:	eb 05                	jmp    c00030f4 <create_chain+0x58>
c00030ef:	bf 01 00 00 00       	mov    edi,0x1
c00030f4:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030f8:	75 07                	jne    c0003101 <create_chain+0x65>
c00030fa:	31 db                	xor    ebx,ebx
c00030fc:	e9 90 01 00 00       	jmp    c0003291 <create_chain+0x1f5>
c0003101:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003104:	75 74                	jne    c000317a <create_chain+0xde>
c0003106:	b9 01 00 00 00       	mov    ecx,0x1
c000310b:	89 fa                	mov    edx,edi
c000310d:	89 f0                	mov    eax,esi
c000310f:	e8 2d f9 ff ff       	call   c0002a41 <find_bitmap>
c0003114:	89 c3                	mov    ebx,eax
c0003116:	8d 40 ff             	lea    eax,[eax-0x1]
c0003119:	83 f8 fd             	cmp    eax,0xfffffffd
c000311c:	0f 87 6f 01 00 00    	ja     c0003291 <create_chain+0x1f5>
c0003122:	83 ec 0c             	sub    esp,0xc
c0003125:	b9 01 00 00 00       	mov    ecx,0x1
c000312a:	6a 01                	push   0x1
c000312c:	89 da                	mov    edx,ebx
c000312e:	89 f0                	mov    eax,esi
c0003130:	e8 bf f9 ff ff       	call   c0002af4 <change_bitmap>
c0003135:	83 c4 10             	add    esp,0x10
c0003138:	83 f8 02             	cmp    eax,0x2
c000313b:	74 90                	je     c00030cd <create_chain+0x31>
c000313d:	83 f8 01             	cmp    eax,0x1
c0003140:	0f 84 fc 00 00 00    	je     c0003242 <create_chain+0x1a6>
c0003146:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314b:	75 09                	jne    c0003156 <create_chain+0xba>
c000314d:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003151:	e9 0c 01 00 00       	jmp    c0003262 <create_chain+0x1c6>
c0003156:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315a:	0f 85 e7 00 00 00    	jne    c0003247 <create_chain+0x1ab>
c0003160:	8d 57 01             	lea    edx,[edi+0x1]
c0003163:	39 da                	cmp    edx,ebx
c0003165:	0f 84 f7 00 00 00    	je     c0003262 <create_chain+0x1c6>
c000316b:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000316e:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003172:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003175:	e9 cd 00 00 00       	jmp    c0003247 <create_chain+0x1ab>
c000317a:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000317e:	75 41                	jne    c00031c1 <create_chain+0x125>
c0003180:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003183:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003186:	77 05                	ja     c000318d <create_chain+0xf1>
c0003188:	bb 02 00 00 00       	mov    ebx,0x2
c000318d:	89 da                	mov    edx,ebx
c000318f:	89 e8                	mov    eax,ebp
c0003191:	e8 18 fc ff ff       	call   c0002dae <get_fat>
c0003196:	83 f8 01             	cmp    eax,0x1
c0003199:	0f 84 2e ff ff ff    	je     c00030cd <create_chain+0x31>
c000319f:	83 f8 ff             	cmp    eax,0xffffffff
c00031a2:	0f 84 9a 00 00 00    	je     c0003242 <create_chain+0x1a6>
c00031a8:	85 c0                	test   eax,eax
c00031aa:	74 11                	je     c00031bd <create_chain+0x121>
c00031ac:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031af:	83 f8 01             	cmp    eax,0x1
c00031b2:	76 0d                	jbe    c00031c1 <create_chain+0x125>
c00031b4:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b7:	76 08                	jbe    c00031c1 <create_chain+0x125>
c00031b9:	89 c7                	mov    edi,eax
c00031bb:	eb 04                	jmp    c00031c1 <create_chain+0x125>
c00031bd:	85 db                	test   ebx,ebx
c00031bf:	75 38                	jne    c00031f9 <create_chain+0x15d>
c00031c1:	89 fb                	mov    ebx,edi
c00031c3:	43                   	inc    ebx
c00031c4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c7:	77 0e                	ja     c00031d7 <create_chain+0x13b>
c00031c9:	83 ff 01             	cmp    edi,0x1
c00031cc:	0f 86 28 ff ff ff    	jbe    c00030fa <create_chain+0x5e>
c00031d2:	bb 02 00 00 00       	mov    ebx,0x2
c00031d7:	89 da                	mov    edx,ebx
c00031d9:	89 e8                	mov    eax,ebp
c00031db:	e8 ce fb ff ff       	call   c0002dae <get_fat>
c00031e0:	85 c0                	test   eax,eax
c00031e2:	74 15                	je     c00031f9 <create_chain+0x15d>
c00031e4:	83 f8 01             	cmp    eax,0x1
c00031e7:	0f 84 e0 fe ff ff    	je     c00030cd <create_chain+0x31>
c00031ed:	40                   	inc    eax
c00031ee:	74 52                	je     c0003242 <create_chain+0x1a6>
c00031f0:	39 fb                	cmp    ebx,edi
c00031f2:	75 cf                	jne    c00031c3 <create_chain+0x127>
c00031f4:	e9 01 ff ff ff       	jmp    c00030fa <create_chain+0x5e>
c00031f9:	83 c9 ff             	or     ecx,0xffffffff
c00031fc:	89 da                	mov    edx,ebx
c00031fe:	89 f0                	mov    eax,esi
c0003200:	e8 a4 f9 ff ff       	call   c0002ba9 <put_fat>
c0003205:	85 c0                	test   eax,eax
c0003207:	75 32                	jne    c000323b <create_chain+0x19f>
c0003209:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000320e:	74 11                	je     c0003221 <create_chain+0x185>
c0003210:	89 d9                	mov    ecx,ebx
c0003212:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003216:	89 f0                	mov    eax,esi
c0003218:	e8 8c f9 ff ff       	call   c0002ba9 <put_fat>
c000321d:	85 c0                	test   eax,eax
c000321f:	75 1a                	jne    c000323b <create_chain+0x19f>
c0003221:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003224:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003227:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000322d:	39 d0                	cmp    eax,edx
c000322f:	77 04                	ja     c0003235 <create_chain+0x199>
c0003231:	48                   	dec    eax
c0003232:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003235:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003239:	eb 56                	jmp    c0003291 <create_chain+0x1f5>
c000323b:	48                   	dec    eax
c000323c:	0f 85 8b fe ff ff    	jne    c00030cd <create_chain+0x31>
c0003242:	83 cb ff             	or     ebx,0xffffffff
c0003245:	eb 4a                	jmp    c0003291 <create_chain+0x1f5>
c0003247:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000324e:	41                   	inc    ecx
c000324f:	39 d9                	cmp    ecx,ebx
c0003251:	75 19                	jne    c000326c <create_chain+0x1d0>
c0003253:	b9 02 00 00 00       	mov    ecx,0x2
c0003258:	85 d2                	test   edx,edx
c000325a:	74 03                	je     c000325f <create_chain+0x1c3>
c000325c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000325f:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003262:	85 c0                	test   eax,eax
c0003264:	0f 85 63 fe ff ff    	jne    c00030cd <create_chain+0x31>
c000326a:	eb b5                	jmp    c0003221 <create_chain+0x185>
c000326c:	85 d2                	test   edx,edx
c000326e:	75 07                	jne    c0003277 <create_chain+0x1db>
c0003270:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003277:	89 d9                	mov    ecx,ebx
c0003279:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000327d:	89 e8                	mov    eax,ebp
c000327f:	e8 bb fa ff ff       	call   c0002d3f <fill_last_frag>
c0003284:	85 c0                	test   eax,eax
c0003286:	75 b3                	jne    c000323b <create_chain+0x19f>
c0003288:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000328f:	eb 90                	jmp    c0003221 <create_chain+0x185>
c0003291:	83 c4 1c             	add    esp,0x1c
c0003294:	89 d8                	mov    eax,ebx
c0003296:	5b                   	pop    ebx
c0003297:	5e                   	pop    esi
c0003298:	5f                   	pop    edi
c0003299:	5d                   	pop    ebp
c000329a:	c3                   	ret    

c000329b <remove_chain>:
c000329b:	55                   	push   ebp
c000329c:	57                   	push   edi
c000329d:	56                   	push   esi
c000329e:	53                   	push   ebx
c000329f:	83 ec 1c             	sub    esp,0x1c
c00032a2:	83 fa 01             	cmp    edx,0x1
c00032a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032a9:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ab:	77 0a                	ja     c00032b7 <remove_chain+0x1c>
c00032ad:	b8 02 00 00 00       	mov    eax,0x2
c00032b2:	e9 24 01 00 00       	jmp    c00033db <remove_chain+0x140>
c00032b7:	89 d6                	mov    esi,edx
c00032b9:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032bc:	76 ef                	jbe    c00032ad <remove_chain+0x12>
c00032be:	89 c7                	mov    edi,eax
c00032c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c5:	75 06                	jne    c00032cd <remove_chain+0x32>
c00032c7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032cb:	eb 54                	jmp    c0003321 <remove_chain+0x86>
c00032cd:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d0:	75 06                	jne    c00032d8 <remove_chain+0x3d>
c00032d2:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d6:	74 ef                	je     c00032c7 <remove_chain+0x2c>
c00032d8:	83 c9 ff             	or     ecx,0xffffffff
c00032db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032df:	89 d8                	mov    eax,ebx
c00032e1:	e8 c3 f8 ff ff       	call   c0002ba9 <put_fat>
c00032e6:	85 c0                	test   eax,eax
c00032e8:	74 dd                	je     c00032c7 <remove_chain+0x2c>
c00032ea:	e9 ec 00 00 00       	jmp    c00033db <remove_chain+0x140>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	74 b9                	je     c00032ad <remove_chain+0x12>
c00032f4:	83 f8 ff             	cmp    eax,0xffffffff
c00032f7:	74 6d                	je     c0003366 <remove_chain+0xcb>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	75 6f                	jne    c000336d <remove_chain+0xd2>
c00032fe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003301:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003304:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003307:	39 d0                	cmp    eax,edx
c0003309:	73 08                	jae    c0003313 <remove_chain+0x78>
c000330b:	40                   	inc    eax
c000330c:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003310:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003313:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003316:	39 e9                	cmp    ecx,ebp
c0003318:	75 64                	jne    c000337e <remove_chain+0xe3>
c000331a:	89 ee                	mov    esi,ebp
c000331c:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000331f:	76 0f                	jbe    c0003330 <remove_chain+0x95>
c0003321:	89 f2                	mov    edx,esi
c0003323:	89 f8                	mov    eax,edi
c0003325:	e8 84 fa ff ff       	call   c0002dae <get_fat>
c000332a:	89 c5                	mov    ebp,eax
c000332c:	85 c0                	test   eax,eax
c000332e:	75 bf                	jne    c00032ef <remove_chain+0x54>
c0003330:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003333:	0f 85 a0 00 00 00    	jne    c00033d9 <remove_chain+0x13e>
c0003339:	eb 6c                	jmp    c00033a7 <remove_chain+0x10c>
c000333b:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000333e:	84 c0                	test   al,al
c0003340:	75 7d                	jne    c00033bf <remove_chain+0x124>
c0003342:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003345:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003349:	0f 84 86 00 00 00    	je     c00033d5 <remove_chain+0x13a>
c000334f:	89 da                	mov    edx,ebx
c0003351:	89 f8                	mov    eax,edi
c0003353:	e8 56 fa ff ff       	call   c0002dae <get_fat>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	0f 86 4c ff ff ff    	jbe    c00032ad <remove_chain+0x12>
c0003361:	83 f8 ff             	cmp    eax,0xffffffff
c0003364:	75 4e                	jne    c00033b4 <remove_chain+0x119>
c0003366:	b8 01 00 00 00       	mov    eax,0x1
c000336b:	eb 6e                	jmp    c00033db <remove_chain+0x140>
c000336d:	31 c9                	xor    ecx,ecx
c000336f:	89 f2                	mov    edx,esi
c0003371:	89 d8                	mov    eax,ebx
c0003373:	e8 31 f8 ff ff       	call   c0002ba9 <put_fat>
c0003378:	85 c0                	test   eax,eax
c000337a:	74 82                	je     c00032fe <remove_chain+0x63>
c000337c:	eb 5d                	jmp    c00033db <remove_chain+0x140>
c000337e:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003381:	75 1b                	jne    c000339e <remove_chain+0x103>
c0003383:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003387:	89 d8                	mov    eax,ebx
c0003389:	83 ec 0c             	sub    esp,0xc
c000338c:	6a 00                	push   0x0
c000338e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003392:	e8 5d f7 ff ff       	call   c0002af4 <change_bitmap>
c0003397:	83 c4 10             	add    esp,0x10
c000339a:	85 c0                	test   eax,eax
c000339c:	75 3d                	jne    c00033db <remove_chain+0x140>
c000339e:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a2:	e9 73 ff ff ff       	jmp    c000331a <remove_chain+0x7f>
c00033a7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033ac:	75 8d                	jne    c000333b <remove_chain+0xa0>
c00033ae:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b2:	eb 25                	jmp    c00033d9 <remove_chain+0x13e>
c00033b4:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b7:	89 c3                	mov    ebx,eax
c00033b9:	39 c2                	cmp    edx,eax
c00033bb:	74 88                	je     c0003345 <remove_chain+0xaa>
c00033bd:	eb 1a                	jmp    c00033d9 <remove_chain+0x13e>
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 16                	jne    c00033d9 <remove_chain+0x13e>
c00033c3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c6:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033ca:	77 0d                	ja     c00033d9 <remove_chain+0x13e>
c00033cc:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033cf:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d3:	72 04                	jb     c00033d9 <remove_chain+0x13e>
c00033d5:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033d9:	31 c0                	xor    eax,eax
c00033db:	83 c4 1c             	add    esp,0x1c
c00033de:	5b                   	pop    ebx
c00033df:	5e                   	pop    esi
c00033e0:	5f                   	pop    edi
c00033e1:	5d                   	pop    ebp
c00033e2:	c3                   	ret    

c00033e3 <dir_clear>:
c00033e3:	55                   	push   ebp
c00033e4:	57                   	push   edi
c00033e5:	56                   	push   esi
c00033e6:	89 c6                	mov    esi,eax
c00033e8:	53                   	push   ebx
c00033e9:	83 ec 1c             	sub    esp,0x1c
c00033ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f0:	e8 9d ed ff ff       	call   c0002192 <sync_window>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	0f 85 de 00 00 00    	jne    c00034db <dir_clear+0xf8>
c00033fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003401:	89 f0                	mov    eax,esi
c0003403:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003406:	e8 d6 e8 ff ff       	call   c0001ce1 <clst2sect>
c000340b:	b9 00 02 00 00       	mov    ecx,0x200
c0003410:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003414:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003418:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341b:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000341e:	89 e8                	mov    eax,ebp
c0003420:	31 d2                	xor    edx,edx
c0003422:	e8 b5 e6 ff ff       	call   c0001adc <mem_set>
c0003427:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342b:	c1 e3 09             	shl    ebx,0x9
c000342e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003434:	76 1f                	jbe    c0003455 <dir_clear+0x72>
c0003436:	bb 00 80 00 00       	mov    ebx,0x8000
c000343b:	eb 18                	jmp    c0003455 <dir_clear+0x72>
c000343d:	83 ec 0c             	sub    esp,0xc
c0003440:	53                   	push   ebx
c0003441:	e8 35 4e 00 00       	call   c000827b <ff_memalloc>
c0003446:	83 c4 10             	add    esp,0x10
c0003449:	89 c7                	mov    edi,eax
c000344b:	85 c0                	test   eax,eax
c000344d:	0f 85 8f 00 00 00    	jne    c00034e2 <dir_clear+0xff>
c0003453:	d1 eb                	shr    ebx,1
c0003455:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345b:	77 e0                	ja     c000343d <dir_clear+0x5a>
c000345d:	31 db                	xor    ebx,ebx
c000345f:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003463:	39 d8                	cmp    eax,ebx
c0003465:	76 66                	jbe    c00034cd <dir_clear+0xea>
c0003467:	83 ec 0c             	sub    esp,0xc
c000346a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000346e:	6a 01                	push   0x1
c0003470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003478:	55                   	push   ebp
c0003479:	50                   	push   eax
c000347a:	e8 94 e5 ff ff       	call   c0001a13 <disk_write>
c000347f:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003484:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003489:	83 c4 20             	add    esp,0x20
c000348c:	85 c0                	test   eax,eax
c000348e:	75 3d                	jne    c00034cd <dir_clear+0xea>
c0003490:	43                   	inc    ebx
c0003491:	eb cc                	jmp    c000345f <dir_clear+0x7c>
c0003493:	83 ec 0c             	sub    esp,0xc
c0003496:	31 d2                	xor    edx,edx
c0003498:	55                   	push   ebp
c0003499:	89 d8                	mov    eax,ebx
c000349b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000349f:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a3:	52                   	push   edx
c00034a4:	50                   	push   eax
c00034a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034a9:	57                   	push   edi
c00034aa:	50                   	push   eax
c00034ab:	e8 63 e5 ff ff       	call   c0001a13 <disk_write>
c00034b0:	83 c4 20             	add    esp,0x20
c00034b3:	85 c0                	test   eax,eax
c00034b5:	75 0a                	jne    c00034c1 <dir_clear+0xde>
c00034b7:	01 eb                	add    ebx,ebp
c00034b9:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034bd:	39 d8                	cmp    eax,ebx
c00034bf:	77 d2                	ja     c0003493 <dir_clear+0xb0>
c00034c1:	83 ec 0c             	sub    esp,0xc
c00034c4:	57                   	push   edi
c00034c5:	e8 c7 4d 00 00       	call   c0008291 <ff_memfree>
c00034ca:	83 c4 10             	add    esp,0x10
c00034cd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d1:	39 d8                	cmp    eax,ebx
c00034d3:	0f 95 c0             	setne  al
c00034d6:	0f b6 c0             	movzx  eax,al
c00034d9:	eb 19                	jmp    c00034f4 <dir_clear+0x111>
c00034db:	b8 01 00 00 00       	mov    eax,0x1
c00034e0:	eb 12                	jmp    c00034f4 <dir_clear+0x111>
c00034e2:	89 d9                	mov    ecx,ebx
c00034e4:	31 d2                	xor    edx,edx
c00034e6:	c1 eb 09             	shr    ebx,0x9
c00034e9:	e8 ee e5 ff ff       	call   c0001adc <mem_set>
c00034ee:	89 dd                	mov    ebp,ebx
c00034f0:	31 db                	xor    ebx,ebx
c00034f2:	eb c5                	jmp    c00034b9 <dir_clear+0xd6>
c00034f4:	83 c4 1c             	add    esp,0x1c
c00034f7:	5b                   	pop    ebx
c00034f8:	5e                   	pop    esi
c00034f9:	5f                   	pop    edi
c00034fa:	5d                   	pop    ebp
c00034fb:	c3                   	ret    

c00034fc <dir_next>:
c00034fc:	55                   	push   ebp
c00034fd:	57                   	push   edi
c00034fe:	56                   	push   esi
c00034ff:	53                   	push   ebx
c0003500:	89 c3                	mov    ebx,eax
c0003502:	83 ec 1c             	sub    esp,0x1c
c0003505:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000350e:	8d 78 20             	lea    edi,[eax+0x20]
c0003511:	31 c0                	xor    eax,eax
c0003513:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003517:	0f 94 c0             	sete   al
c000351a:	48                   	dec    eax
c000351b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003520:	05 00 00 00 10       	add    eax,0x10000000
c0003525:	39 f8                	cmp    eax,edi
c0003527:	77 0e                	ja     c0003537 <dir_next+0x3b>
c0003529:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003530:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003537:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000353d:	b8 04 00 00 00       	mov    eax,0x4
c0003542:	89 ce                	mov    esi,ecx
c0003544:	09 d6                	or     esi,edx
c0003546:	0f 84 da 00 00 00    	je     c0003626 <dir_next+0x12a>
c000354c:	89 f8                	mov    eax,edi
c000354e:	25 ff 01 00 00       	and    eax,0x1ff
c0003553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003557:	0f 85 b9 00 00 00    	jne    c0003616 <dir_next+0x11a>
c000355d:	83 c2 01             	add    edx,0x1
c0003560:	83 d1 00             	adc    ecx,0x0
c0003563:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003566:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003569:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356c:	85 d2                	test   edx,edx
c000356e:	75 29                	jne    c0003599 <dir_next+0x9d>
c0003570:	89 fa                	mov    edx,edi
c0003572:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003576:	c1 ea 05             	shr    edx,0x5
c0003579:	39 c2                	cmp    edx,eax
c000357b:	0f 82 95 00 00 00    	jb     c0003616 <dir_next+0x11a>
c0003581:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003588:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000358f:	b8 04 00 00 00       	mov    eax,0x4
c0003594:	e9 8d 00 00 00       	jmp    c0003626 <dir_next+0x12a>
c0003599:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000359d:	89 f9                	mov    ecx,edi
c000359f:	48                   	dec    eax
c00035a0:	c1 e9 09             	shr    ecx,0x9
c00035a3:	85 c8                	test   eax,ecx
c00035a5:	75 6f                	jne    c0003616 <dir_next+0x11a>
c00035a7:	89 d8                	mov    eax,ebx
c00035a9:	e8 00 f8 ff ff       	call   c0002dae <get_fat>
c00035ae:	89 c6                	mov    esi,eax
c00035b0:	83 f8 01             	cmp    eax,0x1
c00035b3:	77 07                	ja     c00035bc <dir_next+0xc0>
c00035b5:	b8 02 00 00 00       	mov    eax,0x2
c00035ba:	eb 6a                	jmp    c0003626 <dir_next+0x12a>
c00035bc:	83 f8 ff             	cmp    eax,0xffffffff
c00035bf:	75 07                	jne    c00035c8 <dir_next+0xcc>
c00035c1:	b8 01 00 00 00       	mov    eax,0x1
c00035c6:	eb 5e                	jmp    c0003626 <dir_next+0x12a>
c00035c8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035cb:	77 37                	ja     c0003604 <dir_next+0x108>
c00035cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d2:	74 ad                	je     c0003581 <dir_next+0x85>
c00035d4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d7:	89 d8                	mov    eax,ebx
c00035d9:	e8 be fa ff ff       	call   c000309c <create_chain>
c00035de:	89 c6                	mov    esi,eax
c00035e0:	b8 07 00 00 00       	mov    eax,0x7
c00035e5:	85 f6                	test   esi,esi
c00035e7:	74 3d                	je     c0003626 <dir_next+0x12a>
c00035e9:	83 fe 01             	cmp    esi,0x1
c00035ec:	74 c7                	je     c00035b5 <dir_next+0xb9>
c00035ee:	83 fe ff             	cmp    esi,0xffffffff
c00035f1:	74 ce                	je     c00035c1 <dir_next+0xc5>
c00035f3:	89 f2                	mov    edx,esi
c00035f5:	89 e8                	mov    eax,ebp
c00035f7:	e8 e7 fd ff ff       	call   c00033e3 <dir_clear>
c00035fc:	85 c0                	test   eax,eax
c00035fe:	75 c1                	jne    c00035c1 <dir_next+0xc5>
c0003600:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003604:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003607:	89 f2                	mov    edx,esi
c0003609:	89 e8                	mov    eax,ebp
c000360b:	e8 d1 e6 ff ff       	call   c0001ce1 <clst2sect>
c0003610:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003613:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361a:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000361d:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003621:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003624:	31 c0                	xor    eax,eax
c0003626:	83 c4 1c             	add    esp,0x1c
c0003629:	5b                   	pop    ebx
c000362a:	5e                   	pop    esi
c000362b:	5f                   	pop    edi
c000362c:	5d                   	pop    ebp
c000362d:	c3                   	ret    

c000362e <load_xdir>:
c000362e:	55                   	push   ebp
c000362f:	57                   	push   edi
c0003630:	56                   	push   esi
c0003631:	89 c6                	mov    esi,eax
c0003633:	53                   	push   ebx
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	8b 00                	mov    eax,DWORD PTR [eax]
c0003639:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000363f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003642:	e8 df eb ff ff       	call   c0002226 <move_window>
c0003647:	89 c3                	mov    ebx,eax
c0003649:	85 c0                	test   eax,eax
c000364b:	0f 85 0c 01 00 00    	jne    c000375d <load_xdir+0x12f>
c0003651:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003654:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003657:	0f 85 fb 00 00 00    	jne    c0003758 <load_xdir+0x12a>
c000365d:	89 f8                	mov    eax,edi
c000365f:	b9 20 00 00 00       	mov    ecx,0x20
c0003664:	e8 5e e4 ff ff       	call   c0001ac7 <mem_cpy>
c0003669:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000366d:	40                   	inc    eax
c000366e:	c1 e0 05             	shl    eax,0x5
c0003671:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003675:	83 e8 60             	sub    eax,0x60
c0003678:	3d 00 02 00 00       	cmp    eax,0x200
c000367d:	0f 87 d5 00 00 00    	ja     c0003758 <load_xdir+0x12a>
c0003683:	31 d2                	xor    edx,edx
c0003685:	89 f0                	mov    eax,esi
c0003687:	e8 70 fe ff ff       	call   c00034fc <dir_next>
c000368c:	89 c3                	mov    ebx,eax
c000368e:	83 f8 04             	cmp    eax,0x4
c0003691:	0f 84 c1 00 00 00    	je     c0003758 <load_xdir+0x12a>
c0003697:	85 c0                	test   eax,eax
c0003699:	0f 85 be 00 00 00    	jne    c000375d <load_xdir+0x12f>
c000369f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a7:	e8 7a eb ff ff       	call   c0002226 <move_window>
c00036ac:	89 c3                	mov    ebx,eax
c00036ae:	85 c0                	test   eax,eax
c00036b0:	0f 85 a7 00 00 00    	jne    c000375d <load_xdir+0x12f>
c00036b6:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036b9:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036bc:	0f 85 96 00 00 00    	jne    c0003758 <load_xdir+0x12a>
c00036c2:	8d 47 20             	lea    eax,[edi+0x20]
c00036c5:	b9 20 00 00 00       	mov    ecx,0x20
c00036ca:	e8 f8 e3 ff ff       	call   c0001ac7 <mem_cpy>
c00036cf:	31 d2                	xor    edx,edx
c00036d1:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d5:	b9 0f 00 00 00       	mov    ecx,0xf
c00036da:	83 c0 2c             	add    eax,0x2c
c00036dd:	f7 f1                	div    ecx
c00036df:	c1 e0 05             	shl    eax,0x5
c00036e2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e6:	77 70                	ja     c0003758 <load_xdir+0x12a>
c00036e8:	bd 40 00 00 00       	mov    ebp,0x40
c00036ed:	31 d2                	xor    edx,edx
c00036ef:	89 f0                	mov    eax,esi
c00036f1:	e8 06 fe ff ff       	call   c00034fc <dir_next>
c00036f6:	89 c3                	mov    ebx,eax
c00036f8:	83 f8 04             	cmp    eax,0x4
c00036fb:	74 5b                	je     c0003758 <load_xdir+0x12a>
c00036fd:	85 c0                	test   eax,eax
c00036ff:	75 5c                	jne    c000375d <load_xdir+0x12f>
c0003701:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003704:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003707:	8b 06                	mov    eax,DWORD PTR [esi]
c0003709:	e8 18 eb ff ff       	call   c0002226 <move_window>
c000370e:	89 c3                	mov    ebx,eax
c0003710:	85 c0                	test   eax,eax
c0003712:	75 49                	jne    c000375d <load_xdir+0x12f>
c0003714:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003717:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371a:	75 3c                	jne    c0003758 <load_xdir+0x12a>
c000371c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003722:	77 0d                	ja     c0003731 <load_xdir+0x103>
c0003724:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003727:	b9 20 00 00 00       	mov    ecx,0x20
c000372c:	e8 96 e3 ff ff       	call   c0001ac7 <mem_cpy>
c0003731:	83 c5 20             	add    ebp,0x20
c0003734:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003738:	77 b3                	ja     c00036ed <load_xdir+0xbf>
c000373a:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003740:	77 1b                	ja     c000375d <load_xdir+0x12f>
c0003742:	89 f8                	mov    eax,edi
c0003744:	e8 cd e7 ff ff       	call   c0001f16 <xdir_sum>
c0003749:	89 c1                	mov    ecx,eax
c000374b:	8d 47 02             	lea    eax,[edi+0x2]
c000374e:	e8 f5 e2 ff ff       	call   c0001a48 <ld_word>
c0003753:	66 39 c1             	cmp    cx,ax
c0003756:	74 05                	je     c000375d <load_xdir+0x12f>
c0003758:	bb 02 00 00 00       	mov    ebx,0x2
c000375d:	83 c4 1c             	add    esp,0x1c
c0003760:	89 d8                	mov    eax,ebx
c0003762:	5b                   	pop    ebx
c0003763:	5e                   	pop    esi
c0003764:	5f                   	pop    edi
c0003765:	5d                   	pop    ebp
c0003766:	c3                   	ret    

c0003767 <load_obj_xdir>:
c0003767:	53                   	push   ebx
c0003768:	89 c3                	mov    ebx,eax
c000376a:	83 ec 08             	sub    esp,0x8
c000376d:	8b 02                	mov    eax,DWORD PTR [edx]
c000376f:	89 03                	mov    DWORD PTR [ebx],eax
c0003771:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003774:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003777:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000377d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003780:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003787:	30 c0                	xor    al,al
c0003789:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003790:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003793:	89 d8                	mov    eax,ebx
c0003795:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003798:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379b:	e8 04 f8 ff ff       	call   c0002fa4 <dir_sdi>
c00037a0:	85 c0                	test   eax,eax
c00037a2:	75 0b                	jne    c00037af <load_obj_xdir+0x48>
c00037a4:	89 d8                	mov    eax,ebx
c00037a6:	83 c4 08             	add    esp,0x8
c00037a9:	5b                   	pop    ebx
c00037aa:	e9 7f fe ff ff       	jmp    c000362e <load_xdir>
c00037af:	83 c4 08             	add    esp,0x8
c00037b2:	5b                   	pop    ebx
c00037b3:	c3                   	ret    

c00037b4 <dir_read>:
c00037b4:	55                   	push   ebp
c00037b5:	bd 04 00 00 00       	mov    ebp,0x4
c00037ba:	57                   	push   edi
c00037bb:	56                   	push   esi
c00037bc:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c1:	53                   	push   ebx
c00037c2:	89 c3                	mov    ebx,eax
c00037c4:	83 ec 1c             	sub    esp,0x1c
c00037c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037cb:	8b 38                	mov    edi,DWORD PTR [eax]
c00037cd:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037d8:	89 c8                	mov    eax,ecx
c00037da:	09 d0                	or     eax,edx
c00037dc:	0f 84 25 01 00 00    	je     c0003907 <dir_read+0x153>
c00037e2:	89 f8                	mov    eax,edi
c00037e4:	e8 3d ea ff ff       	call   c0002226 <move_window>
c00037e9:	89 c5                	mov    ebp,eax
c00037eb:	85 c0                	test   eax,eax
c00037ed:	0f 85 23 01 00 00    	jne    c0003916 <dir_read+0x162>
c00037f3:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f6:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037f8:	84 c9                	test   cl,cl
c00037fa:	0f 84 11 01 00 00    	je     c0003911 <dir_read+0x15d>
c0003800:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003803:	75 48                	jne    c000384d <dir_read+0x99>
c0003805:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380a:	74 10                	je     c000381c <dir_read+0x68>
c000380c:	80 f9 83             	cmp    cl,0x83
c000380f:	0f 85 dd 00 00 00    	jne    c00038f2 <dir_read+0x13e>
c0003815:	31 ed                	xor    ebp,ebp
c0003817:	e9 08 01 00 00       	jmp    c0003924 <dir_read+0x170>
c000381c:	80 f9 85             	cmp    cl,0x85
c000381f:	0f 85 cd 00 00 00    	jne    c00038f2 <dir_read+0x13e>
c0003825:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003828:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382b:	89 d8                	mov    eax,ebx
c000382d:	e8 fc fd ff ff       	call   c000362e <load_xdir>
c0003832:	89 c5                	mov    ebp,eax
c0003834:	85 c0                	test   eax,eax
c0003836:	0f 85 da 00 00 00    	jne    c0003916 <dir_read+0x162>
c000383c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000383f:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003842:	83 e0 3f             	and    eax,0x3f
c0003845:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003848:	e9 d7 00 00 00       	jmp    c0003924 <dir_read+0x170>
c000384d:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003850:	83 e0 3f             	and    eax,0x3f
c0003853:	80 f9 2e             	cmp    cl,0x2e
c0003856:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000385d:	0f 84 8a 00 00 00    	je     c00038ed <dir_read+0x139>
c0003863:	80 f9 e5             	cmp    cl,0xe5
c0003866:	0f 84 81 00 00 00    	je     c00038ed <dir_read+0x139>
c000386c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003870:	83 e0 1f             	and    eax,0x1f
c0003873:	83 f8 08             	cmp    eax,0x8
c0003876:	0f 94 c0             	sete   al
c0003879:	0f b6 c0             	movzx  eax,al
c000387c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003880:	75 6b                	jne    c00038ed <dir_read+0x139>
c0003882:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003887:	75 44                	jne    c00038cd <dir_read+0x119>
c0003889:	f6 c1 40             	test   cl,0x40
c000388c:	74 12                	je     c00038a0 <dir_read+0xec>
c000388e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003891:	83 e1 bf             	and    ecx,0xffffffbf
c0003894:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003898:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000389e:	eb 06                	jmp    c00038a6 <dir_read+0xf2>
c00038a0:	89 f0                	mov    eax,esi
c00038a2:	38 c8                	cmp    al,cl
c00038a4:	75 47                	jne    c00038ed <dir_read+0x139>
c00038a6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038aa:	be ff ff ff ff       	mov    esi,0xffffffff
c00038af:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b2:	75 3e                	jne    c00038f2 <dir_read+0x13e>
c00038b4:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038b8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038bb:	e8 8a e4 ff ff       	call   c0001d4a <pick_lfn>
c00038c0:	85 c0                	test   eax,eax
c00038c2:	74 2e                	je     c00038f2 <dir_read+0x13e>
c00038c4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038c8:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038cb:	eb 25                	jmp    c00038f2 <dir_read+0x13e>
c00038cd:	89 f0                	mov    eax,esi
c00038cf:	84 c0                	test   al,al
c00038d1:	75 11                	jne    c00038e4 <dir_read+0x130>
c00038d3:	89 d0                	mov    eax,edx
c00038d5:	e8 2a e6 ff ff       	call   c0001f04 <sum_sfn>
c00038da:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038de:	0f 84 31 ff ff ff    	je     c0003815 <dir_read+0x61>
c00038e4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038eb:	eb 37                	jmp    c0003924 <dir_read+0x170>
c00038ed:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f2:	31 d2                	xor    edx,edx
c00038f4:	89 d8                	mov    eax,ebx
c00038f6:	e8 01 fc ff ff       	call   c00034fc <dir_next>
c00038fb:	89 c5                	mov    ebp,eax
c00038fd:	85 c0                	test   eax,eax
c00038ff:	0f 84 cd fe ff ff    	je     c00037d2 <dir_read+0x1e>
c0003905:	eb 0f                	jmp    c0003916 <dir_read+0x162>
c0003907:	85 ed                	test   ebp,ebp
c0003909:	0f 84 06 ff ff ff    	je     c0003815 <dir_read+0x61>
c000390f:	eb 05                	jmp    c0003916 <dir_read+0x162>
c0003911:	bd 04 00 00 00       	mov    ebp,0x4
c0003916:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000391d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003924:	83 c4 1c             	add    esp,0x1c
c0003927:	89 e8                	mov    eax,ebp
c0003929:	5b                   	pop    ebx
c000392a:	5e                   	pop    esi
c000392b:	5f                   	pop    edi
c000392c:	5d                   	pop    ebp
c000392d:	c3                   	ret    

c000392e <dir_alloc>:
c000392e:	55                   	push   ebp
c000392f:	89 d5                	mov    ebp,edx
c0003931:	57                   	push   edi
c0003932:	31 d2                	xor    edx,edx
c0003934:	56                   	push   esi
c0003935:	53                   	push   ebx
c0003936:	89 c3                	mov    ebx,eax
c0003938:	83 ec 0c             	sub    esp,0xc
c000393b:	8b 38                	mov    edi,DWORD PTR [eax]
c000393d:	e8 62 f6 ff ff       	call   c0002fa4 <dir_sdi>
c0003942:	85 c0                	test   eax,eax
c0003944:	75 4e                	jne    c0003994 <dir_alloc+0x66>
c0003946:	31 f6                	xor    esi,esi
c0003948:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000394e:	89 f8                	mov    eax,edi
c0003950:	e8 d1 e8 ff ff       	call   c0002226 <move_window>
c0003955:	85 c0                	test   eax,eax
c0003957:	75 3b                	jne    c0003994 <dir_alloc+0x66>
c0003959:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000395f:	8a 12                	mov    dl,BYTE PTR [edx]
c0003961:	75 07                	jne    c000396a <dir_alloc+0x3c>
c0003963:	f7 d2                	not    edx
c0003965:	c0 ea 07             	shr    dl,0x7
c0003968:	eb 0d                	jmp    c0003977 <dir_alloc+0x49>
c000396a:	84 d2                	test   dl,dl
c000396c:	0f 94 c1             	sete   cl
c000396f:	80 fa e5             	cmp    dl,0xe5
c0003972:	0f 94 c2             	sete   dl
c0003975:	09 ca                	or     edx,ecx
c0003977:	84 d2                	test   dl,dl
c0003979:	74 07                	je     c0003982 <dir_alloc+0x54>
c000397b:	46                   	inc    esi
c000397c:	39 ee                	cmp    esi,ebp
c000397e:	75 04                	jne    c0003984 <dir_alloc+0x56>
c0003980:	eb 1c                	jmp    c000399e <dir_alloc+0x70>
c0003982:	31 f6                	xor    esi,esi
c0003984:	ba 01 00 00 00       	mov    edx,0x1
c0003989:	89 d8                	mov    eax,ebx
c000398b:	e8 6c fb ff ff       	call   c00034fc <dir_next>
c0003990:	85 c0                	test   eax,eax
c0003992:	74 b4                	je     c0003948 <dir_alloc+0x1a>
c0003994:	83 f8 04             	cmp    eax,0x4
c0003997:	75 05                	jne    c000399e <dir_alloc+0x70>
c0003999:	b8 07 00 00 00       	mov    eax,0x7
c000399e:	83 c4 0c             	add    esp,0xc
c00039a1:	5b                   	pop    ebx
c00039a2:	5e                   	pop    esi
c00039a3:	5f                   	pop    edi
c00039a4:	5d                   	pop    ebp
c00039a5:	c3                   	ret    

c00039a6 <store_xdir>:
c00039a6:	55                   	push   ebp
c00039a7:	57                   	push   edi
c00039a8:	89 c7                	mov    edi,eax
c00039aa:	56                   	push   esi
c00039ab:	53                   	push   ebx
c00039ac:	83 ec 0c             	sub    esp,0xc
c00039af:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b1:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b4:	89 e8                	mov    eax,ebp
c00039b6:	e8 5b e5 ff ff       	call   c0001f16 <xdir_sum>
c00039bb:	0f b7 d0             	movzx  edx,ax
c00039be:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c1:	e8 f4 e0 ff ff       	call   c0001aba <st_word>
c00039c6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039ca:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039cd:	89 f8                	mov    eax,edi
c00039cf:	e8 d0 f5 ff ff       	call   c0002fa4 <dir_sdi>
c00039d4:	89 c6                	mov    esi,eax
c00039d6:	85 f6                	test   esi,esi
c00039d8:	75 3d                	jne    c0003a17 <store_xdir+0x71>
c00039da:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039dd:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e0:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e2:	e8 3f e8 ff ff       	call   c0002226 <move_window>
c00039e7:	89 c6                	mov    esi,eax
c00039e9:	85 c0                	test   eax,eax
c00039eb:	75 2a                	jne    c0003a17 <store_xdir+0x71>
c00039ed:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f0:	b9 20 00 00 00       	mov    ecx,0x20
c00039f5:	89 ea                	mov    edx,ebp
c00039f7:	e8 cb e0 ff ff       	call   c0001ac7 <mem_cpy>
c00039fc:	8b 07                	mov    eax,DWORD PTR [edi]
c00039fe:	85 db                	test   ebx,ebx
c0003a00:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a04:	74 11                	je     c0003a17 <store_xdir+0x71>
c0003a06:	31 d2                	xor    edx,edx
c0003a08:	89 f8                	mov    eax,edi
c0003a0a:	83 c5 20             	add    ebp,0x20
c0003a0d:	e8 ea fa ff ff       	call   c00034fc <dir_next>
c0003a12:	4b                   	dec    ebx
c0003a13:	89 c6                	mov    esi,eax
c0003a15:	eb bf                	jmp    c00039d6 <store_xdir+0x30>
c0003a17:	89 f0                	mov    eax,esi
c0003a19:	83 fe 02             	cmp    esi,0x2
c0003a1c:	76 05                	jbe    c0003a23 <store_xdir+0x7d>
c0003a1e:	b8 02 00 00 00       	mov    eax,0x2
c0003a23:	83 c4 0c             	add    esp,0xc
c0003a26:	5b                   	pop    ebx
c0003a27:	5e                   	pop    esi
c0003a28:	5f                   	pop    edi
c0003a29:	5d                   	pop    ebp
c0003a2a:	c3                   	ret    

c0003a2b <dir_remove>:
c0003a2b:	57                   	push   edi
c0003a2c:	56                   	push   esi
c0003a2d:	53                   	push   ebx
c0003a2e:	89 c3                	mov    ebx,eax
c0003a30:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a33:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a35:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a38:	83 fa ff             	cmp    edx,0xffffffff
c0003a3b:	74 09                	je     c0003a46 <dir_remove+0x1b>
c0003a3d:	e8 62 f5 ff ff       	call   c0002fa4 <dir_sdi>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	75 41                	jne    c0003a87 <dir_remove+0x5c>
c0003a46:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a49:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4c:	89 f0                	mov    eax,esi
c0003a4e:	e8 d3 e7 ff ff       	call   c0002226 <move_window>
c0003a53:	85 c0                	test   eax,eax
c0003a55:	75 26                	jne    c0003a7d <dir_remove+0x52>
c0003a57:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a5d:	75 05                	jne    c0003a64 <dir_remove+0x39>
c0003a5f:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a62:	eb 03                	jmp    c0003a67 <dir_remove+0x3c>
c0003a64:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a67:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6b:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a6e:	73 17                	jae    c0003a87 <dir_remove+0x5c>
c0003a70:	31 d2                	xor    edx,edx
c0003a72:	89 d8                	mov    eax,ebx
c0003a74:	e8 83 fa ff ff       	call   c00034fc <dir_next>
c0003a79:	85 c0                	test   eax,eax
c0003a7b:	74 c9                	je     c0003a46 <dir_remove+0x1b>
c0003a7d:	83 f8 04             	cmp    eax,0x4
c0003a80:	75 05                	jne    c0003a87 <dir_remove+0x5c>
c0003a82:	b8 02 00 00 00       	mov    eax,0x2
c0003a87:	5b                   	pop    ebx
c0003a88:	5e                   	pop    esi
c0003a89:	5f                   	pop    edi
c0003a8a:	c3                   	ret    

c0003a8b <create_name>:
c0003a8b:	55                   	push   ebp
c0003a8c:	89 d5                	mov    ebp,edx
c0003a8e:	57                   	push   edi
c0003a8f:	89 c7                	mov    edi,eax
c0003a91:	56                   	push   esi
c0003a92:	31 f6                	xor    esi,esi
c0003a94:	53                   	push   ebx
c0003a95:	83 ec 3c             	sub    esp,0x3c
c0003a98:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a9e:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aa7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aab:	e8 72 e0 ff ff       	call   c0001b22 <tchar2uni>
c0003ab0:	89 c3                	mov    ebx,eax
c0003ab2:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab5:	75 0a                	jne    c0003ac1 <create_name+0x36>
c0003ab7:	b8 06 00 00 00       	mov    eax,0x6
c0003abc:	e9 9e 02 00 00       	jmp    c0003d5f <create_name+0x2d4>
c0003ac1:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac6:	76 0c                	jbe    c0003ad4 <create_name+0x49>
c0003ac8:	c1 e8 10             	shr    eax,0x10
c0003acb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003acf:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad3:	46                   	inc    esi
c0003ad4:	66 83 fb 1f          	cmp    bx,0x1f
c0003ad8:	76 4f                	jbe    c0003b29 <create_name+0x9e>
c0003ada:	66 83 fb 5c          	cmp    bx,0x5c
c0003ade:	74 35                	je     c0003b15 <create_name+0x8a>
c0003ae0:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae4:	74 2f                	je     c0003b15 <create_name+0x8a>
c0003ae6:	66 83 fb 7f          	cmp    bx,0x7f
c0003aea:	77 11                	ja     c0003afd <create_name+0x72>
c0003aec:	0f b7 d3             	movzx  edx,bx
c0003aef:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c0003af4:	e8 11 e0 ff ff       	call   c0001b0a <chk_chr>
c0003af9:	85 c0                	test   eax,eax
c0003afb:	75 ba                	jne    c0003ab7 <create_name+0x2c>
c0003afd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b03:	77 b2                	ja     c0003ab7 <create_name+0x2c>
c0003b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b09:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b0d:	46                   	inc    esi
c0003b0e:	eb 97                	jmp    c0003aa7 <create_name+0x1c>
c0003b10:	40                   	inc    eax
c0003b11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b19:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1b:	80 fa 2f             	cmp    dl,0x2f
c0003b1e:	74 f0                	je     c0003b10 <create_name+0x85>
c0003b20:	80 fa 5c             	cmp    dl,0x5c
c0003b23:	74 eb                	je     c0003b10 <create_name+0x85>
c0003b25:	31 db                	xor    ebx,ebx
c0003b27:	eb 02                	jmp    c0003b2b <create_name+0xa0>
c0003b29:	b3 04                	mov    bl,0x4
c0003b2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b32:	85 f6                	test   esi,esi
c0003b34:	74 18                	je     c0003b4e <create_name+0xc3>
c0003b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3a:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b3f:	66 83 f8 20          	cmp    ax,0x20
c0003b43:	74 06                	je     c0003b4b <create_name+0xc0>
c0003b45:	66 83 f8 2e          	cmp    ax,0x2e
c0003b49:	75 03                	jne    c0003b4e <create_name+0xc3>
c0003b4b:	4e                   	dec    esi
c0003b4c:	eb e4                	jmp    c0003b32 <create_name+0xa7>
c0003b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b52:	31 ed                	xor    ebp,ebp
c0003b54:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5a:	85 f6                	test   esi,esi
c0003b5c:	0f 84 55 ff ff ff    	je     c0003ab7 <create_name+0x2c>
c0003b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b66:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b69:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b6d:	66 83 f8 20          	cmp    ax,0x20
c0003b71:	75 04                	jne    c0003b77 <create_name+0xec>
c0003b73:	89 d5                	mov    ebp,edx
c0003b75:	eb eb                	jmp    c0003b62 <create_name+0xd7>
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	75 06                	jne    c0003b81 <create_name+0xf6>
c0003b7b:	66 83 f8 2e          	cmp    ax,0x2e
c0003b7f:	75 08                	jne    c0003b89 <create_name+0xfe>
c0003b81:	83 cb 03             	or     ebx,0x3
c0003b84:	eb 03                	jmp    c0003b89 <create_name+0xfe>
c0003b86:	4e                   	dec    esi
c0003b87:	74 0c                	je     c0003b95 <create_name+0x10a>
c0003b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8d:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b93:	75 f1                	jne    c0003b86 <create_name+0xfb>
c0003b95:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9a:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b9d:	ba 20 00 00 00       	mov    edx,0x20
c0003ba2:	e8 35 df ff ff       	call   c0001adc <mem_set>
c0003ba7:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003baf:	31 c9                	xor    ecx,ecx
c0003bb1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb6:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc1:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc5:	66 85 ed             	test   bp,bp
c0003bc8:	0f 84 30 01 00 00    	je     c0003cfe <create_name+0x273>
c0003bce:	66 83 fd 20          	cmp    bp,0x20
c0003bd2:	74 10                	je     c0003be4 <create_name+0x159>
c0003bd4:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd8:	75 13                	jne    c0003bed <create_name+0x162>
c0003bda:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bde:	0f 84 6b 01 00 00    	je     c0003d4f <create_name+0x2c4>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003beb:	eb c9                	jmp    c0003bb6 <create_name+0x12b>
c0003bed:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf1:	73 0b                	jae    c0003bfe <create_name+0x173>
c0003bf3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bf7:	75 47                	jne    c0003c40 <create_name+0x1b5>
c0003bf9:	e9 51 01 00 00       	jmp    c0003d4f <create_name+0x2c4>
c0003bfe:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c03:	75 10                	jne    c0003c15 <create_name+0x18a>
c0003c05:	83 cb 03             	or     ebx,0x3
c0003c08:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c10:	e9 e9 00 00 00       	jmp    c0003cfe <create_name+0x273>
c0003c15:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c19:	74 0d                	je     c0003c28 <create_name+0x19d>
c0003c1b:	83 cb 03             	or     ebx,0x3
c0003c1e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c22:	0f 87 d6 00 00 00    	ja     c0003cfe <create_name+0x273>
c0003c28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c2d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c31:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c39:	b9 08 00 00 00       	mov    ecx,0x8
c0003c3e:	eb a7                	jmp    c0003be7 <create_name+0x15c>
c0003c40:	66 83 fd 7f          	cmp    bp,0x7f
c0003c44:	76 68                	jbe    c0003cae <create_name+0x223>
c0003c46:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4a:	88 da                	mov    dl,bl
c0003c4c:	83 ca 02             	or     edx,0x2
c0003c4f:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c53:	50                   	push   eax
c0003c54:	50                   	push   eax
c0003c55:	68 b5 01 00 00       	push   0x1b5
c0003c5a:	55                   	push   ebp
c0003c5b:	e8 48 46 00 00       	call   c00082a8 <ff_uni2oem>
c0003c60:	83 c4 10             	add    esp,0x10
c0003c63:	89 c5                	mov    ebp,eax
c0003c65:	a8 80                	test   al,0x80
c0003c67:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c6f:	74 0c                	je     c0003c7d <create_name+0x1f2>
c0003c71:	83 e5 7f             	and    ebp,0x7f
c0003c74:	0f b6 ad 60 8b 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd74a0]
c0003c7b:	eb 2a                	jmp    c0003ca7 <create_name+0x21c>
c0003c7d:	66 3d ff 00          	cmp    ax,0xff
c0003c81:	76 24                	jbe    c0003ca7 <create_name+0x21c>
c0003c83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c87:	48                   	dec    eax
c0003c88:	39 c8                	cmp    eax,ecx
c0003c8a:	77 0c                	ja     c0003c98 <create_name+0x20d>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c93:	e9 4f ff ff ff       	jmp    c0003be7 <create_name+0x15c>
c0003c98:	89 e8                	mov    eax,ebp
c0003c9a:	88 d3                	mov    bl,dl
c0003c9c:	66 c1 e8 08          	shr    ax,0x8
c0003ca0:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca4:	41                   	inc    ecx
c0003ca5:	eb 4b                	jmp    c0003cf2 <create_name+0x267>
c0003ca7:	88 d3                	mov    bl,dl
c0003ca9:	66 85 ed             	test   bp,bp
c0003cac:	74 19                	je     c0003cc7 <create_name+0x23c>
c0003cae:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb2:	0f b7 d5             	movzx  edx,bp
c0003cb5:	b8 1b 8c 02 c0       	mov    eax,0xc0028c1b
c0003cba:	e8 4b de ff ff       	call   c0001b0a <chk_chr>
c0003cbf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc3:	85 c0                	test   eax,eax
c0003cc5:	74 0a                	je     c0003cd1 <create_name+0x246>
c0003cc7:	83 cb 03             	or     ebx,0x3
c0003cca:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ccf:	eb 21                	jmp    c0003cf2 <create_name+0x267>
c0003cd1:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd4:	66 83 f8 19          	cmp    ax,0x19
c0003cd8:	77 07                	ja     c0003ce1 <create_name+0x256>
c0003cda:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003cdf:	eb 11                	jmp    c0003cf2 <create_name+0x267>
c0003ce1:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce4:	66 83 f8 19          	cmp    ax,0x19
c0003ce8:	77 08                	ja     c0003cf2 <create_name+0x267>
c0003cea:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cef:	83 ed 20             	sub    ebp,0x20
c0003cf2:	89 e8                	mov    eax,ebp
c0003cf4:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cf8:	41                   	inc    ecx
c0003cf9:	e9 e9 fe ff ff       	jmp    c0003be7 <create_name+0x15c>
c0003cfe:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d02:	75 04                	jne    c0003d08 <create_name+0x27d>
c0003d04:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d08:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d0d:	75 05                	jne    c0003d14 <create_name+0x289>
c0003d0f:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d14:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d18:	83 e0 0c             	and    eax,0xc
c0003d1b:	3c 0c                	cmp    al,0xc
c0003d1d:	74 0b                	je     c0003d2a <create_name+0x29f>
c0003d1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d23:	83 e0 03             	and    eax,0x3
c0003d26:	3c 03                	cmp    al,0x3
c0003d28:	75 05                	jne    c0003d2f <create_name+0x2a4>
c0003d2a:	83 cb 02             	or     ebx,0x2
c0003d2d:	eb 19                	jmp    c0003d48 <create_name+0x2bd>
c0003d2f:	f6 c3 02             	test   bl,0x2
c0003d32:	75 14                	jne    c0003d48 <create_name+0x2bd>
c0003d34:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d39:	74 03                	je     c0003d3e <create_name+0x2b3>
c0003d3b:	83 cb 10             	or     ebx,0x10
c0003d3e:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d43:	74 03                	je     c0003d48 <create_name+0x2bd>
c0003d45:	83 cb 08             	or     ebx,0x8
c0003d48:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4b:	31 c0                	xor    eax,eax
c0003d4d:	eb 10                	jmp    c0003d5f <create_name+0x2d4>
c0003d4f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d54:	0f 85 ce fe ff ff    	jne    c0003c28 <create_name+0x19d>
c0003d5a:	e9 a6 fe ff ff       	jmp    c0003c05 <create_name+0x17a>
c0003d5f:	83 c4 3c             	add    esp,0x3c
c0003d62:	5b                   	pop    ebx
c0003d63:	5e                   	pop    esi
c0003d64:	5f                   	pop    edi
c0003d65:	5d                   	pop    ebp
c0003d66:	c3                   	ret    

c0003d67 <xname_sum>:
c0003d67:	56                   	push   esi
c0003d68:	53                   	push   ebx
c0003d69:	89 c6                	mov    esi,eax
c0003d6b:	51                   	push   ecx
c0003d6c:	31 db                	xor    ebx,ebx
c0003d6e:	83 c6 02             	add    esi,0x2
c0003d71:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d75:	66 85 c0             	test   ax,ax
c0003d78:	74 1f                	je     c0003d99 <xname_sum+0x32>
c0003d7a:	83 ec 0c             	sub    esp,0xc
c0003d7d:	66 d1 cb             	ror    bx,1
c0003d80:	50                   	push   eax
c0003d81:	e8 1e 46 00 00       	call   c00083a4 <ff_wtoupper>
c0003d86:	83 c4 10             	add    esp,0x10
c0003d89:	0f b6 d0             	movzx  edx,al
c0003d8c:	66 c1 e8 08          	shr    ax,0x8
c0003d90:	01 d3                	add    ebx,edx
c0003d92:	66 d1 cb             	ror    bx,1
c0003d95:	01 c3                	add    ebx,eax
c0003d97:	eb d5                	jmp    c0003d6e <xname_sum+0x7>
c0003d99:	89 d8                	mov    eax,ebx
c0003d9b:	5a                   	pop    edx
c0003d9c:	5b                   	pop    ebx
c0003d9d:	5e                   	pop    esi
c0003d9e:	c3                   	ret    

c0003d9f <create_xdir>:
c0003d9f:	55                   	push   ebp
c0003da0:	b9 40 00 00 00       	mov    ecx,0x40
c0003da5:	57                   	push   edi
c0003da6:	bd 01 00 00 00       	mov    ebp,0x1
c0003dab:	56                   	push   esi
c0003dac:	31 ff                	xor    edi,edi
c0003dae:	53                   	push   ebx
c0003daf:	be 40 00 00 00       	mov    esi,0x40
c0003db4:	89 c3                	mov    ebx,eax
c0003db6:	83 ec 1c             	sub    esp,0x1c
c0003db9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dbd:	31 d2                	xor    edx,edx
c0003dbf:	e8 18 dd ff ff       	call   c0001adc <mem_set>
c0003dc4:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dc7:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dcb:	31 c9                	xor    ecx,ecx
c0003dcd:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd0:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd4:	83 c6 02             	add    esi,0x2
c0003dd7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ddb:	66 85 ed             	test   bp,bp
c0003dde:	74 12                	je     c0003df2 <create_xdir+0x53>
c0003de0:	0f b6 c1             	movzx  eax,cl
c0003de3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de7:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003deb:	66 83 fd 01          	cmp    bp,0x1
c0003def:	80 d9 ff             	sbb    cl,0xff
c0003df2:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df5:	0f b7 d5             	movzx  edx,bp
c0003df8:	83 c6 02             	add    esi,0x2
c0003dfb:	e8 ba dc ff ff       	call   c0001aba <st_word>
c0003e00:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e06:	75 d3                	jne    c0003ddb <create_xdir+0x3c>
c0003e08:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e0f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e13:	0f b6 c1             	movzx  eax,cl
c0003e16:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1b:	74 07                	je     c0003e24 <create_xdir+0x85>
c0003e1d:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e22:	eb a9                	jmp    c0003dcd <create_xdir+0x2e>
c0003e24:	8d 47 02             	lea    eax,[edi+0x2]
c0003e27:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2a:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e2d:	89 d0                	mov    eax,edx
c0003e2f:	e8 33 ff ff ff       	call   c0003d67 <xname_sum>
c0003e34:	83 c4 1c             	add    esp,0x1c
c0003e37:	0f b7 d0             	movzx  edx,ax
c0003e3a:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e3d:	5b                   	pop    ebx
c0003e3e:	5e                   	pop    esi
c0003e3f:	5f                   	pop    edi
c0003e40:	5d                   	pop    ebp
c0003e41:	e9 74 dc ff ff       	jmp    c0001aba <st_word>

c0003e46 <cmp_lfn>:
c0003e46:	55                   	push   ebp
c0003e47:	57                   	push   edi
c0003e48:	89 d7                	mov    edi,edx
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 1c             	sub    esp,0x1c
c0003e4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e53:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e56:	e8 ed db ff ff       	call   c0001a48 <ld_word>
c0003e5b:	66 85 c0             	test   ax,ax
c0003e5e:	74 07                	je     c0003e67 <cmp_lfn+0x21>
c0003e60:	31 c0                	xor    eax,eax
c0003e62:	e9 9a 00 00 00       	jmp    c0003f01 <cmp_lfn+0xbb>
c0003e67:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e69:	bd 01 00 00 00       	mov    ebp,0x1
c0003e6e:	83 e3 3f             	and    ebx,0x3f
c0003e71:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e79:	4b                   	dec    ebx
c0003e7a:	6b db 0d             	imul   ebx,ebx,0xd
c0003e7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e81:	0f b6 80 e0 8b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7420]
c0003e88:	01 f8                	add    eax,edi
c0003e8a:	e8 b9 db ff ff       	call   c0001a48 <ld_word>
c0003e8f:	66 85 ed             	test   bp,bp
c0003e92:	89 c6                	mov    esi,eax
c0003e94:	74 3c                	je     c0003ed2 <cmp_lfn+0x8c>
c0003e96:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9c:	77 c2                	ja     c0003e60 <cmp_lfn+0x1a>
c0003e9e:	83 ec 0c             	sub    esp,0xc
c0003ea1:	0f b7 c0             	movzx  eax,ax
c0003ea4:	50                   	push   eax
c0003ea5:	e8 fa 44 00 00       	call   c00083a4 <ff_wtoupper>
c0003eaa:	89 c5                	mov    ebp,eax
c0003eac:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eb7:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebb:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ebe:	e8 e1 44 00 00       	call   c00083a4 <ff_wtoupper>
c0003ec3:	83 c4 10             	add    esp,0x10
c0003ec6:	39 c5                	cmp    ebp,eax
c0003ec8:	75 96                	jne    c0003e60 <cmp_lfn+0x1a>
c0003eca:	89 f5                	mov    ebp,esi
c0003ecc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed0:	eb 04                	jmp    c0003ed6 <cmp_lfn+0x90>
c0003ed2:	66 46                	inc    si
c0003ed4:	75 8a                	jne    c0003e60 <cmp_lfn+0x1a>
c0003ed6:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eda:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003edf:	75 9c                	jne    c0003e7d <cmp_lfn+0x37>
c0003ee1:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee4:	74 16                	je     c0003efc <cmp_lfn+0xb6>
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 11                	je     c0003efc <cmp_lfn+0xb6>
c0003eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eef:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef4:	0f 94 c0             	sete   al
c0003ef7:	0f b6 c0             	movzx  eax,al
c0003efa:	eb 05                	jmp    c0003f01 <cmp_lfn+0xbb>
c0003efc:	b8 01 00 00 00       	mov    eax,0x1
c0003f01:	83 c4 1c             	add    esp,0x1c
c0003f04:	5b                   	pop    ebx
c0003f05:	5e                   	pop    esi
c0003f06:	5f                   	pop    edi
c0003f07:	5d                   	pop    ebp
c0003f08:	c3                   	ret    

c0003f09 <dir_find>:
c0003f09:	55                   	push   ebp
c0003f0a:	31 d2                	xor    edx,edx
c0003f0c:	57                   	push   edi
c0003f0d:	56                   	push   esi
c0003f0e:	53                   	push   ebx
c0003f0f:	89 c3                	mov    ebx,eax
c0003f11:	83 ec 1c             	sub    esp,0x1c
c0003f14:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f16:	e8 89 f0 ff ff       	call   c0002fa4 <dir_sdi>
c0003f1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f1e:	85 c0                	test   eax,eax
c0003f20:	0f 85 9e 01 00 00    	jne    c00040c4 <dir_find+0x1bb>
c0003f26:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f29:	0f 85 8d 00 00 00    	jne    c0003fbc <dir_find+0xb3>
c0003f2f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f32:	e8 30 fe ff ff       	call   c0003d67 <xname_sum>
c0003f37:	89 c7                	mov    edi,eax
c0003f39:	31 d2                	xor    edx,edx
c0003f3b:	89 d8                	mov    eax,ebx
c0003f3d:	e8 72 f8 ff ff       	call   c00037b4 <dir_read>
c0003f42:	85 c0                	test   eax,eax
c0003f44:	0f 85 5e 01 00 00    	jne    c00040a8 <dir_find+0x19f>
c0003f4a:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f4d:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f50:	e8 f3 da ff ff       	call   c0001a48 <ld_word>
c0003f55:	66 39 f8             	cmp    ax,di
c0003f58:	75 df                	jne    c0003f39 <dir_find+0x30>
c0003f5a:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f5d:	31 ed                	xor    ebp,ebp
c0003f5f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f63:	ba 40 00 00 00       	mov    edx,0x40
c0003f68:	89 e9                	mov    ecx,ebp
c0003f6a:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f6e:	0f 84 42 01 00 00    	je     c00040b6 <dir_find+0x1ad>
c0003f74:	f6 c2 1f             	test   dl,0x1f
c0003f77:	75 03                	jne    c0003f7c <dir_find+0x73>
c0003f79:	83 c2 02             	add    edx,0x2
c0003f7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f80:	89 d0                	mov    eax,edx
c0003f82:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f85:	e8 be da ff ff       	call   c0001a48 <ld_word>
c0003f8a:	83 ec 0c             	sub    esp,0xc
c0003f8d:	0f b7 c0             	movzx  eax,ax
c0003f90:	50                   	push   eax
c0003f91:	e8 0e 44 00 00       	call   c00083a4 <ff_wtoupper>
c0003f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f9d:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa1:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa4:	e8 fb 43 00 00       	call   c00083a4 <ff_wtoupper>
c0003fa9:	83 c4 10             	add    esp,0x10
c0003fac:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb0:	75 87                	jne    c0003f39 <dir_find+0x30>
c0003fb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb6:	45                   	inc    ebp
c0003fb7:	83 c2 02             	add    edx,0x2
c0003fba:	eb ac                	jmp    c0003f68 <dir_find+0x5f>
c0003fbc:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc3:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fc8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fcd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd3:	89 f0                	mov    eax,esi
c0003fd5:	e8 4c e2 ff ff       	call   c0002226 <move_window>
c0003fda:	85 c0                	test   eax,eax
c0003fdc:	0f 85 c6 00 00 00    	jne    c00040a8 <dir_find+0x19f>
c0003fe2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe5:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fe8:	84 c9                	test   cl,cl
c0003fea:	0f 84 bd 00 00 00    	je     c00040ad <dir_find+0x1a4>
c0003ff0:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff3:	88 d0                	mov    al,dl
c0003ff5:	83 e0 3f             	and    eax,0x3f
c0003ff8:	80 f9 e5             	cmp    cl,0xe5
c0003ffb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ffe:	0f 84 87 00 00 00    	je     c000408b <dir_find+0x182>
c0004004:	80 e2 08             	and    dl,0x8
c0004007:	74 06                	je     c000400f <dir_find+0x106>
c0004009:	3c 0f                	cmp    al,0xf
c000400b:	75 7e                	jne    c000408b <dir_find+0x182>
c000400d:	eb 04                	jmp    c0004013 <dir_find+0x10a>
c000400f:	3c 0f                	cmp    al,0xf
c0004011:	75 4c                	jne    c000405f <dir_find+0x156>
c0004013:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004017:	75 7e                	jne    c0004097 <dir_find+0x18e>
c0004019:	f6 c1 40             	test   cl,0x40
c000401c:	74 12                	je     c0004030 <dir_find+0x127>
c000401e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004021:	83 e1 bf             	and    ecx,0xffffffbf
c0004024:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004028:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000402e:	eb 06                	jmp    c0004036 <dir_find+0x12d>
c0004030:	89 f8                	mov    eax,edi
c0004032:	38 c8                	cmp    al,cl
c0004034:	75 5c                	jne    c0004092 <dir_find+0x189>
c0004036:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000403f:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004042:	75 53                	jne    c0004097 <dir_find+0x18e>
c0004044:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004048:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404b:	89 ea                	mov    edx,ebp
c000404d:	e8 f4 fd ff ff       	call   c0003e46 <cmp_lfn>
c0004052:	85 c0                	test   eax,eax
c0004054:	74 41                	je     c0004097 <dir_find+0x18e>
c0004056:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405a:	8d 79 ff             	lea    edi,[ecx-0x1]
c000405d:	eb 38                	jmp    c0004097 <dir_find+0x18e>
c000405f:	89 f8                	mov    eax,edi
c0004061:	84 c0                	test   al,al
c0004063:	75 0d                	jne    c0004072 <dir_find+0x169>
c0004065:	89 e8                	mov    eax,ebp
c0004067:	e8 98 de ff ff       	call   c0001f04 <sum_sfn>
c000406c:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004070:	74 52                	je     c00040c4 <dir_find+0x1bb>
c0004072:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004076:	75 13                	jne    c000408b <dir_find+0x182>
c0004078:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407b:	b9 0b 00 00 00       	mov    ecx,0xb
c0004080:	89 e8                	mov    eax,ebp
c0004082:	e8 60 da ff ff       	call   c0001ae7 <mem_cmp>
c0004087:	85 c0                	test   eax,eax
c0004089:	74 39                	je     c00040c4 <dir_find+0x1bb>
c000408b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004092:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004097:	31 d2                	xor    edx,edx
c0004099:	89 d8                	mov    eax,ebx
c000409b:	e8 5c f4 ff ff       	call   c00034fc <dir_next>
c00040a0:	85 c0                	test   eax,eax
c00040a2:	0f 84 25 ff ff ff    	je     c0003fcd <dir_find+0xc4>
c00040a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ab:	eb 17                	jmp    c00040c4 <dir_find+0x1bb>
c00040ad:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b4:	eb 0e                	jmp    c00040c4 <dir_find+0x1bb>
c00040b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b9:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040be:	0f 85 75 fe ff ff    	jne    c0003f39 <dir_find+0x30>
c00040c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040c7:	83 c4 1c             	add    esp,0x1c
c00040ca:	5b                   	pop    ebx
c00040cb:	5e                   	pop    esi
c00040cc:	5f                   	pop    edi
c00040cd:	5d                   	pop    ebp
c00040ce:	c3                   	ret    

c00040cf <dir_register>:
c00040cf:	55                   	push   ebp
c00040d0:	57                   	push   edi
c00040d1:	56                   	push   esi
c00040d2:	be 06 00 00 00       	mov    esi,0x6
c00040d7:	53                   	push   ebx
c00040d8:	83 ec 6c             	sub    esp,0x6c
c00040db:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040df:	0f 85 62 02 00 00    	jne    c0004347 <dir_register+0x278>
c00040e5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040e7:	31 ff                	xor    edi,edi
c00040e9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ec:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f1:	74 03                	je     c00040f6 <dir_register+0x27>
c00040f3:	47                   	inc    edi
c00040f4:	eb f6                	jmp    c00040ec <dir_register+0x1d>
c00040f6:	89 c3                	mov    ebx,eax
c00040f8:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040fc:	0f 85 e1 00 00 00    	jne    c00041e3 <dir_register+0x114>
c0004102:	83 c7 0e             	add    edi,0xe
c0004105:	b9 0f 00 00 00       	mov    ecx,0xf
c000410a:	89 f8                	mov    eax,edi
c000410c:	31 d2                	xor    edx,edx
c000410e:	f7 f1                	div    ecx
c0004110:	8d 50 02             	lea    edx,[eax+0x2]
c0004113:	89 c7                	mov    edi,eax
c0004115:	89 d8                	mov    eax,ebx
c0004117:	e8 12 f8 ff ff       	call   c000392e <dir_alloc>
c000411c:	89 c6                	mov    esi,eax
c000411e:	85 c0                	test   eax,eax
c0004120:	0f 85 21 02 00 00    	jne    c0004347 <dir_register+0x278>
c0004126:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000412f:	c1 e7 05             	shl    edi,0x5
c0004132:	29 f8                	sub    eax,edi
c0004134:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004137:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413a:	a8 04                	test   al,0x4
c000413c:	0f 84 91 00 00 00    	je     c00041d3 <dir_register+0x104>
c0004142:	83 e0 fb             	and    eax,0xfffffffb
c0004145:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004148:	89 d8                	mov    eax,ebx
c000414a:	e8 25 ec ff ff       	call   c0002d74 <fill_first_frag>
c000414f:	85 c0                	test   eax,eax
c0004151:	0f 85 ee 01 00 00    	jne    c0004345 <dir_register+0x276>
c0004157:	83 c9 ff             	or     ecx,0xffffffff
c000415a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 db eb ff ff       	call   c0002d3f <fill_last_frag>
c0004164:	85 c0                	test   eax,eax
c0004166:	0f 85 d9 01 00 00    	jne    c0004345 <dir_register+0x276>
c000416c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004170:	74 61                	je     c00041d3 <dir_register+0x104>
c0004172:	89 da                	mov    edx,ebx
c0004174:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004178:	e8 ea f5 ff ff       	call   c0003767 <load_obj_xdir>
c000417d:	85 c0                	test   eax,eax
c000417f:	0f 85 c0 01 00 00    	jne    c0004345 <dir_register+0x276>
c0004185:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004189:	31 c9                	xor    ecx,ecx
c000418b:	c1 e2 09             	shl    edx,0x9
c000418e:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004191:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004194:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004197:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000419d:	83 c0 38             	add    eax,0x38
c00041a0:	e8 1c d9 ff ff       	call   c0001ac1 <st_qword>
c00041a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ab:	83 c0 28             	add    eax,0x28
c00041ae:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b1:	e8 0b d9 ff ff       	call   c0001ac1 <st_qword>
c00041b6:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041b9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041bc:	83 c8 01             	or     eax,0x1
c00041bf:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c6:	e8 db f7 ff ff       	call   c00039a6 <store_xdir>
c00041cb:	85 c0                	test   eax,eax
c00041cd:	0f 85 72 01 00 00    	jne    c0004345 <dir_register+0x276>
c00041d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041d9:	e8 c1 fb ff ff       	call   c0003d9f <create_xdir>
c00041de:	e9 64 01 00 00       	jmp    c0004347 <dir_register+0x278>
c00041e3:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00041eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041ef:	89 c2                	mov    edx,eax
c00041f1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f5:	e8 cd d8 ff ff       	call   c0001ac7 <mem_cpy>
c00041fa:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041ff:	74 58                	je     c0004259 <dir_register+0x18a>
c0004201:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004205:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000420d:	83 ec 0c             	sub    esp,0xc
c0004210:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004213:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004217:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000421f:	e8 24 dc ff ff       	call   c0001e48 <gen_numname>
c0004224:	89 d8                	mov    eax,ebx
c0004226:	e8 de fc ff ff       	call   c0003f09 <dir_find>
c000422b:	83 c4 10             	add    esp,0x10
c000422e:	89 c6                	mov    esi,eax
c0004230:	85 c0                	test   eax,eax
c0004232:	75 15                	jne    c0004249 <dir_register+0x17a>
c0004234:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004238:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000423d:	75 ce                	jne    c000420d <dir_register+0x13e>
c000423f:	be 07 00 00 00       	mov    esi,0x7
c0004244:	e9 fe 00 00 00       	jmp    c0004347 <dir_register+0x278>
c0004249:	83 f8 04             	cmp    eax,0x4
c000424c:	0f 85 f5 00 00 00    	jne    c0004347 <dir_register+0x278>
c0004252:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004256:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004259:	b9 01 00 00 00       	mov    ecx,0x1
c000425e:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004263:	74 0f                	je     c0004274 <dir_register+0x1a5>
c0004265:	b9 0d 00 00 00       	mov    ecx,0xd
c000426a:	8d 47 0c             	lea    eax,[edi+0xc]
c000426d:	31 d2                	xor    edx,edx
c000426f:	f7 f1                	div    ecx
c0004271:	8d 48 01             	lea    ecx,[eax+0x1]
c0004274:	89 ca                	mov    edx,ecx
c0004276:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427a:	89 d8                	mov    eax,ebx
c000427c:	e8 ad f6 ff ff       	call   c000392e <dir_alloc>
c0004281:	89 c6                	mov    esi,eax
c0004283:	85 c0                	test   eax,eax
c0004285:	0f 85 bc 00 00 00    	jne    c0004347 <dir_register+0x278>
c000428b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000428f:	49                   	dec    ecx
c0004290:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004294:	74 6a                	je     c0004300 <dir_register+0x231>
c0004296:	89 c8                	mov    eax,ecx
c0004298:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429b:	c1 e0 05             	shl    eax,0x5
c000429e:	29 c2                	sub    edx,eax
c00042a0:	89 d8                	mov    eax,ebx
c00042a2:	e8 fd ec ff ff       	call   c0002fa4 <dir_sdi>
c00042a7:	89 c6                	mov    esi,eax
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 96 00 00 00    	jne    c0004347 <dir_register+0x278>
c00042b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b5:	e8 4a dc ff ff       	call   c0001f04 <sum_sfn>
c00042ba:	0f b6 f8             	movzx  edi,al
c00042bd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c3:	89 e8                	mov    eax,ebp
c00042c5:	e8 5c df ff ff       	call   c0002226 <move_window>
c00042ca:	89 c6                	mov    esi,eax
c00042cc:	85 c0                	test   eax,eax
c00042ce:	75 77                	jne    c0004347 <dir_register+0x278>
c00042d0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042d8:	83 ec 0c             	sub    esp,0xc
c00042db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042de:	57                   	push   edi
c00042df:	e8 e0 da ff ff       	call   c0001dc4 <put_lfn>
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ea:	89 d8                	mov    eax,ebx
c00042ec:	e8 0b f2 ff ff       	call   c00034fc <dir_next>
c00042f1:	83 c4 10             	add    esp,0x10
c00042f4:	89 c6                	mov    esi,eax
c00042f6:	85 c0                	test   eax,eax
c00042f8:	75 4d                	jne    c0004347 <dir_register+0x278>
c00042fa:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042fe:	75 bd                	jne    c00042bd <dir_register+0x1ee>
c0004300:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004303:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004306:	89 e8                	mov    eax,ebp
c0004308:	e8 19 df ff ff       	call   c0002226 <move_window>
c000430d:	89 c6                	mov    esi,eax
c000430f:	85 c0                	test   eax,eax
c0004311:	75 34                	jne    c0004347 <dir_register+0x278>
c0004313:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004316:	b9 20 00 00 00       	mov    ecx,0x20
c000431b:	31 d2                	xor    edx,edx
c000431d:	e8 ba d7 ff ff       	call   c0001adc <mem_set>
c0004322:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004325:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004329:	b9 0b 00 00 00       	mov    ecx,0xb
c000432e:	e8 94 d7 ff ff       	call   c0001ac7 <mem_cpy>
c0004333:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004336:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004339:	83 e0 18             	and    eax,0x18
c000433c:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000433f:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004343:	eb 02                	jmp    c0004347 <dir_register+0x278>
c0004345:	89 c6                	mov    esi,eax
c0004347:	83 c4 6c             	add    esp,0x6c
c000434a:	89 f0                	mov    eax,esi
c000434c:	5b                   	pop    ebx
c000434d:	5e                   	pop    esi
c000434e:	5f                   	pop    edi
c000434f:	5d                   	pop    ebp
c0004350:	c3                   	ret    

c0004351 <sync_fs>:
c0004351:	56                   	push   esi
c0004352:	53                   	push   ebx
c0004353:	53                   	push   ebx
c0004354:	89 c3                	mov    ebx,eax
c0004356:	e8 37 de ff ff       	call   c0002192 <sync_window>
c000435b:	85 c0                	test   eax,eax
c000435d:	0f 85 b1 00 00 00    	jne    c0004414 <sync_fs+0xc3>
c0004363:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004366:	0f 85 8e 00 00 00    	jne    c00043fa <sync_fs+0xa9>
c000436c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004370:	0f 85 84 00 00 00    	jne    c00043fa <sync_fs+0xa9>
c0004376:	b9 00 02 00 00       	mov    ecx,0x200
c000437b:	8d 73 54             	lea    esi,[ebx+0x54]
c000437e:	31 d2                	xor    edx,edx
c0004380:	89 f0                	mov    eax,esi
c0004382:	e8 55 d7 ff ff       	call   c0001adc <mem_set>
c0004387:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000438d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004392:	e8 23 d7 ff ff       	call   c0001aba <st_word>
c0004397:	ba 52 52 61 41       	mov    edx,0x41615252
c000439c:	89 f0                	mov    eax,esi
c000439e:	e8 1b d7 ff ff       	call   c0001abe <st_dword>
c00043a3:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043a9:	ba 72 72 41 61       	mov    edx,0x61417272
c00043ae:	e8 0b d7 ff ff       	call   c0001abe <st_dword>
c00043b3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b6:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043bc:	e8 fd d6 ff ff       	call   c0001abe <st_dword>
c00043c1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c4:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043ca:	e8 ef d6 ff ff       	call   c0001abe <st_dword>
c00043cf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d5:	83 c0 01             	add    eax,0x1
c00043d8:	83 d2 00             	adc    edx,0x0
c00043db:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043de:	83 ec 0c             	sub    esp,0xc
c00043e1:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e4:	6a 01                	push   0x1
c00043e6:	52                   	push   edx
c00043e7:	50                   	push   eax
c00043e8:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ec:	56                   	push   esi
c00043ed:	50                   	push   eax
c00043ee:	e8 20 d6 ff ff       	call   c0001a13 <disk_write>
c00043f3:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043f7:	83 c4 20             	add    esp,0x20
c00043fa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043fe:	51                   	push   ecx
c00043ff:	6a 00                	push   0x0
c0004401:	6a 00                	push   0x0
c0004403:	50                   	push   eax
c0004404:	e8 20 d6 ff ff       	call   c0001a29 <disk_ioctl>
c0004409:	83 c4 10             	add    esp,0x10
c000440c:	85 c0                	test   eax,eax
c000440e:	0f 95 c0             	setne  al
c0004411:	0f b6 c0             	movzx  eax,al
c0004414:	5a                   	pop    edx
c0004415:	5b                   	pop    ebx
c0004416:	5e                   	pop    esi
c0004417:	c3                   	ret    

c0004418 <create_partition>:
c0004418:	55                   	push   ebp
c0004419:	0f b6 c0             	movzx  eax,al
c000441c:	57                   	push   edi
c000441d:	56                   	push   esi
c000441e:	53                   	push   ebx
c000441f:	83 ec 60             	sub    esp,0x60
c0004422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004426:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000442e:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004432:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004436:	50                   	push   eax
c0004437:	6a 01                	push   0x1
c0004439:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000443d:	e8 e7 d5 ff ff       	call   c0001a29 <disk_ioctl>
c0004442:	83 c4 10             	add    esp,0x10
c0004445:	85 c0                	test   eax,eax
c0004447:	74 0a                	je     c0004453 <create_partition+0x3b>
c0004449:	b8 01 00 00 00       	mov    eax,0x1
c000444e:	e9 67 05 00 00       	jmp    c00049ba <create_partition+0x5a2>
c0004453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004457:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000445f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004463:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004468:	0f 86 ed 03 00 00    	jbe    c000485b <create_partition+0x443>
c000446e:	83 c0 df             	add    eax,0xffffffdf
c0004471:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004479:	83 d2 ff             	adc    edx,0xffffffff
c000447c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004480:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004484:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004488:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448c:	83 c0 bd             	add    eax,0xffffffbd
c000448f:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004496:	83 d2 ff             	adc    edx,0xffffffff
c0004499:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000449d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044a9:	be 22 00 00 00       	mov    esi,0x22
c00044ae:	31 ff                	xor    edi,edi
c00044b0:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044b8:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044c8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044cc:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d2:	75 0e                	jne    c00044e2 <create_partition+0xca>
c00044d4:	b9 00 02 00 00       	mov    ecx,0x200
c00044d9:	31 d2                	xor    edx,edx
c00044db:	89 d8                	mov    eax,ebx
c00044dd:	e8 fa d5 ff ff       	call   c0001adc <mem_set>
c00044e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ee:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f1:	0f 84 23 01 00 00    	je     c000461a <create_partition+0x202>
c00044f7:	89 f0                	mov    eax,esi
c00044f9:	89 fa                	mov    edx,edi
c00044fb:	05 ff 07 00 00       	add    eax,0x7ff
c0004500:	83 d2 00             	adc    edx,0x0
c0004503:	89 c1                	mov    ecx,eax
c0004505:	89 d7                	mov    edi,edx
c0004507:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000450d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004511:	89 ce                	mov    esi,ecx
c0004513:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004517:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451b:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000451f:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004522:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004526:	89 04 24             	mov    DWORD PTR [esp],eax
c0004529:	b8 64 00 00 00       	mov    eax,0x64
c000452e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004531:	b8 00 00 00 00       	mov    eax,0x0
c0004536:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453a:	72 41                	jb     c000457d <create_partition+0x165>
c000453c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004544:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004548:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000454d:	01 c1                	add    ecx,eax
c000454f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004553:	f7 24 24             	mul    DWORD PTR [esp]
c0004556:	6a 00                	push   0x0
c0004558:	01 ca                	add    edx,ecx
c000455a:	6a 64                	push   0x64
c000455c:	52                   	push   edx
c000455d:	50                   	push   eax
c000455e:	e8 e9 1b 02 00       	call   c002614c <__udivdi3>
c0004563:	83 c4 10             	add    esp,0x10
c0004566:	05 ff 07 00 00       	add    eax,0x7ff
c000456b:	83 d2 00             	adc    edx,0x0
c000456e:	89 c1                	mov    ecx,eax
c0004570:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004574:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000457d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004584:	01 f0                	add    eax,esi
c0004586:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458a:	11 fa                	adc    edx,edi
c000458c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004590:	19 d1                	sbb    ecx,edx
c0004592:	73 2e                	jae    c00045c2 <create_partition+0x1aa>
c0004594:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004598:	89 f8                	mov    eax,edi
c000459a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a1:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045ad:	73 6b                	jae    c000461a <create_partition+0x202>
c00045af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045b7:	29 f0                	sub    eax,esi
c00045b9:	19 fa                	sbb    edx,edi
c00045bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00045be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c6:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045c9:	74 4f                	je     c000461a <create_partition+0x202>
c00045cb:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045ce:	b9 10 00 00 00       	mov    ecx,0x10
c00045d3:	ba f0 8b 02 c0       	mov    edx,0xc0028bf0
c00045d8:	e8 ea d4 ff ff       	call   c0001ac7 <mem_cpy>
c00045dd:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e1:	b9 10 00 00 00       	mov    ecx,0x10
c00045e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ea:	e8 2c db ff ff       	call   c000211b <make_rand>
c00045ef:	89 f2                	mov    edx,esi
c00045f1:	89 f9                	mov    ecx,edi
c00045f3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045f7:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fb:	e8 c1 d4 ff ff       	call   c0001ac1 <st_qword>
c0004600:	03 34 24             	add    esi,DWORD PTR [esp]
c0004603:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004607:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460b:	89 f2                	mov    edx,esi
c000460d:	89 f9                	mov    ecx,edi
c000460f:	83 c2 ff             	add    edx,0xffffffff
c0004612:	83 d1 ff             	adc    ecx,0xffffffff
c0004615:	e8 a7 d4 ff ff       	call   c0001ac1 <st_qword>
c000461a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000461e:	83 e8 80             	sub    eax,0xffffff80
c0004621:	89 c5                	mov    ebp,eax
c0004623:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004627:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000462d:	75 6b                	jne    c000469a <create_partition+0x282>
c000462f:	45                   	inc    ebp
c0004630:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004634:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004639:	e8 39 da ff ff       	call   c0002077 <crc32>
c000463e:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004648:	75 e5                	jne    c000462f <create_partition+0x217>
c000464a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000464e:	31 d2                	xor    edx,edx
c0004650:	83 ec 0c             	sub    esp,0xc
c0004653:	c1 ed 09             	shr    ebp,0x9
c0004656:	6a 01                	push   0x1
c0004658:	8d 45 02             	lea    eax,[ebp+0x2]
c000465b:	52                   	push   edx
c000465c:	50                   	push   eax
c000465d:	53                   	push   ebx
c000465e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004662:	e8 ac d3 ff ff       	call   c0001a13 <disk_write>
c0004667:	83 c4 20             	add    esp,0x20
c000466a:	85 c0                	test   eax,eax
c000466c:	0f 85 d7 fd ff ff    	jne    c0004449 <create_partition+0x31>
c0004672:	83 ec 0c             	sub    esp,0xc
c0004675:	31 d2                	xor    edx,edx
c0004677:	6a 01                	push   0x1
c0004679:	89 e8                	mov    eax,ebp
c000467b:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000467f:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004683:	52                   	push   edx
c0004684:	50                   	push   eax
c0004685:	53                   	push   ebx
c0004686:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468a:	e8 84 d3 ff ff       	call   c0001a13 <disk_write>
c000468f:	83 c4 20             	add    esp,0x20
c0004692:	85 c0                	test   eax,eax
c0004694:	0f 85 af fd ff ff    	jne    c0004449 <create_partition+0x31>
c000469a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000469e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a2:	3d 00 40 00 00       	cmp    eax,0x4000
c00046a7:	74 0d                	je     c00046b6 <create_partition+0x29e>
c00046a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b1:	e9 12 fe ff ff       	jmp    c00044c8 <create_partition+0xb0>
c00046b6:	31 d2                	xor    edx,edx
c00046b8:	b9 00 02 00 00       	mov    ecx,0x200
c00046bd:	89 d8                	mov    eax,ebx
c00046bf:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c2:	e8 15 d4 ff ff       	call   c0001adc <mem_set>
c00046c7:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046ca:	b9 10 00 00 00       	mov    ecx,0x10
c00046cf:	ba e0 8a 02 c0       	mov    edx,0xc0028ae0
c00046d4:	89 d8                	mov    eax,ebx
c00046d6:	e8 ec d3 ff ff       	call   c0001ac7 <mem_cpy>
c00046db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046df:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e2:	f7 d2                	not    edx
c00046e4:	e8 d5 d3 ff ff       	call   c0001abe <st_dword>
c00046e9:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ec:	31 c9                	xor    ecx,ecx
c00046ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f1:	ba 01 00 00 00       	mov    edx,0x1
c00046f6:	e8 c6 d3 ff ff       	call   c0001ac1 <st_qword>
c00046fb:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046ff:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004703:	83 c2 ff             	add    edx,0xffffffff
c0004706:	89 e8                	mov    eax,ebp
c0004708:	83 d1 ff             	adc    ecx,0xffffffff
c000470b:	e8 b1 d3 ff ff       	call   c0001ac1 <st_qword>
c0004710:	31 c9                	xor    ecx,ecx
c0004712:	8d 43 28             	lea    eax,[ebx+0x28]
c0004715:	ba 22 00 00 00       	mov    edx,0x22
c000471a:	e8 a2 d3 ff ff       	call   c0001ac1 <st_qword>
c000471f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004723:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004727:	83 c2 de             	add    edx,0xffffffde
c000472a:	8d 43 30             	lea    eax,[ebx+0x30]
c000472d:	83 d1 ff             	adc    ecx,0xffffffff
c0004730:	31 f6                	xor    esi,esi
c0004732:	e8 8a d3 ff ff       	call   c0001ac1 <st_qword>
c0004737:	8d 43 54             	lea    eax,[ebx+0x54]
c000473a:	ba 80 00 00 00       	mov    edx,0x80
c000473f:	e8 7a d3 ff ff       	call   c0001abe <st_dword>
c0004744:	8d 43 50             	lea    eax,[ebx+0x50]
c0004747:	ba 80 00 00 00       	mov    edx,0x80
c000474c:	e8 6d d3 ff ff       	call   c0001abe <st_dword>
c0004751:	ba 02 00 00 00       	mov    edx,0x2
c0004756:	89 f8                	mov    eax,edi
c0004758:	e8 61 d3 ff ff       	call   c0001abe <st_dword>
c000475d:	8d 53 38             	lea    edx,[ebx+0x38]
c0004760:	b9 10 00 00 00       	mov    ecx,0x10
c0004765:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004769:	e8 ad d9 ff ff       	call   c000211b <make_rand>
c000476e:	83 c8 ff             	or     eax,0xffffffff
c0004771:	46                   	inc    esi
c0004772:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004777:	e8 fb d8 ff ff       	call   c0002077 <crc32>
c000477c:	83 fe 5c             	cmp    esi,0x5c
c000477f:	75 f0                	jne    c0004771 <create_partition+0x359>
c0004781:	f7 d0                	not    eax
c0004783:	8d 73 10             	lea    esi,[ebx+0x10]
c0004786:	89 c2                	mov    edx,eax
c0004788:	89 f0                	mov    eax,esi
c000478a:	e8 2f d3 ff ff       	call   c0001abe <st_dword>
c000478f:	83 ec 0c             	sub    esp,0xc
c0004792:	6a 01                	push   0x1
c0004794:	6a 00                	push   0x0
c0004796:	6a 01                	push   0x1
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 71 d2 ff ff       	call   c0001a13 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 9c fc ff ff    	jne    c0004449 <create_partition+0x31>
c00047ad:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b1:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b5:	83 c2 ff             	add    edx,0xffffffff
c00047b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bb:	83 d1 ff             	adc    ecx,0xffffffff
c00047be:	e8 fe d2 ff ff       	call   c0001ac1 <st_qword>
c00047c3:	ba 01 00 00 00       	mov    edx,0x1
c00047c8:	31 c9                	xor    ecx,ecx
c00047ca:	89 e8                	mov    eax,ebp
c00047cc:	e8 f0 d2 ff ff       	call   c0001ac1 <st_qword>
c00047d1:	89 f8                	mov    eax,edi
c00047d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047db:	31 ff                	xor    edi,edi
c00047dd:	e8 df d2 ff ff       	call   c0001ac1 <st_qword>
c00047e2:	89 f0                	mov    eax,esi
c00047e4:	31 d2                	xor    edx,edx
c00047e6:	e8 d3 d2 ff ff       	call   c0001abe <st_dword>
c00047eb:	83 c8 ff             	or     eax,0xffffffff
c00047ee:	47                   	inc    edi
c00047ef:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f4:	e8 7e d8 ff ff       	call   c0002077 <crc32>
c00047f9:	83 ff 5c             	cmp    edi,0x5c
c00047fc:	75 f0                	jne    c00047ee <create_partition+0x3d6>
c00047fe:	f7 d0                	not    eax
c0004800:	89 c2                	mov    edx,eax
c0004802:	89 f0                	mov    eax,esi
c0004804:	e8 b5 d2 ff ff       	call   c0001abe <st_dword>
c0004809:	83 ec 0c             	sub    esp,0xc
c000480c:	6a 01                	push   0x1
c000480e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004812:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004816:	83 c0 ff             	add    eax,0xffffffff
c0004819:	83 d2 ff             	adc    edx,0xffffffff
c000481c:	52                   	push   edx
c000481d:	50                   	push   eax
c000481e:	53                   	push   ebx
c000481f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004823:	e8 eb d1 ff ff       	call   c0001a13 <disk_write>
c0004828:	83 c4 20             	add    esp,0x20
c000482b:	85 c0                	test   eax,eax
c000482d:	0f 85 16 fc ff ff    	jne    c0004449 <create_partition+0x31>
c0004833:	31 d2                	xor    edx,edx
c0004835:	89 d8                	mov    eax,ebx
c0004837:	b9 00 02 00 00       	mov    ecx,0x200
c000483c:	e8 9b d2 ff ff       	call   c0001adc <mem_set>
c0004841:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004847:	b9 10 00 00 00       	mov    ecx,0x10
c000484c:	ba f0 8a 02 c0       	mov    edx,0xc0028af0
c0004851:	e8 71 d2 ff ff       	call   c0001ac7 <mem_cpy>
c0004856:	e9 21 01 00 00       	jmp    c000497c <create_partition+0x564>
c000485b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000485f:	b9 05 00 00 00       	mov    ecx,0x5
c0004864:	89 04 24             	mov    DWORD PTR [esp],eax
c0004867:	bf 08 00 00 00       	mov    edi,0x8
c000486c:	89 f8                	mov    eax,edi
c000486e:	31 d2                	xor    edx,edx
c0004870:	0f b6 f0             	movzx  esi,al
c0004873:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004876:	f7 f6                	div    esi
c0004878:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000487d:	76 0a                	jbe    c0004889 <create_partition+0x471>
c000487f:	d1 e7                	shl    edi,1
c0004881:	49                   	dec    ecx
c0004882:	75 e8                	jne    c000486c <create_partition+0x454>
c0004884:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004889:	b9 00 02 00 00       	mov    ecx,0x200
c000488e:	31 d2                	xor    edx,edx
c0004890:	89 d8                	mov    eax,ebx
c0004892:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004898:	e8 3f d2 ff ff       	call   c0001adc <mem_set>
c000489d:	b9 64 00 00 00       	mov    ecx,0x64
c00048a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a5:	31 d2                	xor    edx,edx
c00048a7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048af:	f7 f1                	div    ecx
c00048b1:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ba:	89 f8                	mov    eax,edi
c00048bc:	0f b6 c0             	movzx  eax,al
c00048bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c3:	e9 80 00 00 00       	jmp    c0004948 <create_partition+0x530>
c00048c8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048cb:	29 cf                	sub    edi,ecx
c00048cd:	89 ca                	mov    edx,ecx
c00048cf:	89 f0                	mov    eax,esi
c00048d1:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d6:	e8 e3 d1 ff ff       	call   c0001abe <st_dword>
c00048db:	8d 46 04             	lea    eax,[esi+0x4]
c00048de:	89 fa                	mov    edx,edi
c00048e0:	83 c6 10             	add    esi,0x10
c00048e3:	e8 d6 d1 ff ff       	call   c0001abe <st_dword>
c00048e8:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ec:	31 d2                	xor    edx,edx
c00048ee:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f1:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f5:	89 c8                	mov    eax,ecx
c00048f7:	01 f9                	add    ecx,edi
c00048f9:	f7 f5                	div    ebp
c00048fb:	89 d5                	mov    ebp,edx
c00048fd:	31 d2                	xor    edx,edx
c00048ff:	45                   	inc    ebp
c0004900:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004904:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004907:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490a:	89 c2                	mov    edx,eax
c000490c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000490f:	c1 ea 02             	shr    edx,0x2
c0004912:	83 e2 c0             	and    edx,0xffffffc0
c0004915:	09 ea                	or     edx,ebp
c0004917:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491c:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c000491f:	31 d2                	xor    edx,edx
c0004921:	f7 f5                	div    ebp
c0004923:	89 d7                	mov    edi,edx
c0004925:	31 d2                	xor    edx,edx
c0004927:	47                   	inc    edi
c0004928:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492c:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c000492f:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004932:	89 c5                	mov    ebp,eax
c0004934:	c1 ed 02             	shr    ebp,0x2
c0004937:	83 e5 c0             	and    ebp,0xffffffc0
c000493a:	09 ef                	or     edi,ebp
c000493c:	89 fa                	mov    edx,edi
c000493e:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004941:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004946:	74 34                	je     c000497c <create_partition+0x564>
c0004948:	85 c9                	test   ecx,ecx
c000494a:	74 30                	je     c000497c <create_partition+0x564>
c000494c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000494f:	76 2b                	jbe    c000497c <create_partition+0x564>
c0004951:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004955:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004959:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495c:	83 ff 64             	cmp    edi,0x64
c000495f:	76 4b                	jbe    c00049ac <create_partition+0x594>
c0004961:	89 f8                	mov    eax,edi
c0004963:	01 c8                	add    eax,ecx
c0004965:	0f 82 5d ff ff ff    	jb     c00048c8 <create_partition+0x4b0>
c000496b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000496e:	0f 87 54 ff ff ff    	ja     c00048c8 <create_partition+0x4b0>
c0004974:	85 ff                	test   edi,edi
c0004976:	0f 85 51 ff ff ff    	jne    c00048cd <create_partition+0x4b5>
c000497c:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004982:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004987:	e8 2e d1 ff ff       	call   c0001aba <st_word>
c000498c:	83 ec 0c             	sub    esp,0xc
c000498f:	6a 01                	push   0x1
c0004991:	6a 00                	push   0x0
c0004993:	6a 00                	push   0x0
c0004995:	53                   	push   ebx
c0004996:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499a:	e8 74 d0 ff ff       	call   c0001a13 <disk_write>
c000499f:	83 c4 20             	add    esp,0x20
c00049a2:	85 c0                	test   eax,eax
c00049a4:	0f 95 c0             	setne  al
c00049a7:	0f b6 c0             	movzx  eax,al
c00049aa:	eb 0e                	jmp    c00049ba <create_partition+0x5a2>
c00049ac:	74 07                	je     c00049b5 <create_partition+0x59d>
c00049ae:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b3:	eb ac                	jmp    c0004961 <create_partition+0x549>
c00049b5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049b8:	eb a7                	jmp    c0004961 <create_partition+0x549>
c00049ba:	83 c4 5c             	add    esp,0x5c
c00049bd:	5b                   	pop    ebx
c00049be:	5e                   	pop    esi
c00049bf:	5f                   	pop    edi
c00049c0:	5d                   	pop    ebp
c00049c1:	c3                   	ret    

c00049c2 <get_fileinfo>:
c00049c2:	55                   	push   ebp
c00049c3:	57                   	push   edi
c00049c4:	56                   	push   esi
c00049c5:	53                   	push   ebx
c00049c6:	83 ec 1c             	sub    esp,0x1c
c00049c9:	8b 30                	mov    esi,DWORD PTR [eax]
c00049cb:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049cf:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d3:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d6:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049d9:	0f 84 dc 01 00 00    	je     c0004bbb <get_fileinfo+0x1f9>
c00049df:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e2:	75 0f                	jne    c00049f3 <get_fileinfo+0x31>
c00049e4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049e7:	83 c4 1c             	add    esp,0x1c
c00049ea:	5b                   	pop    ebx
c00049eb:	5e                   	pop    esi
c00049ec:	5f                   	pop    edi
c00049ed:	5d                   	pop    ebp
c00049ee:	e9 58 d5 ff ff       	jmp    c0001f4b <get_xfileinfo>
c00049f3:	89 d3                	mov    ebx,edx
c00049f5:	89 c6                	mov    esi,eax
c00049f7:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fb:	74 6a                	je     c0004a67 <get_fileinfo+0xa5>
c00049fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a05:	31 ed                	xor    ebp,ebp
c0004a07:	31 ff                	xor    edi,edi
c0004a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a14:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a18:	66 85 d2             	test   dx,dx
c0004a1b:	74 3e                	je     c0004a5b <get_fileinfo+0x99>
c0004a1d:	66 85 ed             	test   bp,bp
c0004a20:	75 0c                	jne    c0004a2e <get_fileinfo+0x6c>
c0004a22:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a28:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2c:	76 22                	jbe    c0004a50 <get_fileinfo+0x8e>
c0004a2e:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a33:	89 e8                	mov    eax,ebp
c0004a35:	29 f9                	sub    ecx,edi
c0004a37:	c1 e0 10             	shl    eax,0x10
c0004a3a:	09 d0                	or     eax,edx
c0004a3c:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a40:	e8 a3 d1 ff ff       	call   c0001be8 <put_utf>
c0004a45:	84 c0                	test   al,al
c0004a47:	74 10                	je     c0004a59 <get_fileinfo+0x97>
c0004a49:	0f b6 c0             	movzx  eax,al
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	01 c7                	add    edi,eax
c0004a50:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a55:	89 d5                	mov    ebp,edx
c0004a57:	eb b0                	jmp    c0004a09 <get_fileinfo+0x47>
c0004a59:	31 ff                	xor    edi,edi
c0004a5b:	66 85 ed             	test   bp,bp
c0004a5e:	74 02                	je     c0004a62 <get_fileinfo+0xa0>
c0004a60:	31 ff                	xor    edi,edi
c0004a62:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a67:	31 ff                	xor    edi,edi
c0004a69:	31 c9                	xor    ecx,ecx
c0004a6b:	83 f9 0a             	cmp    ecx,0xa
c0004a6e:	0f 87 ad 00 00 00    	ja     c0004b21 <get_fileinfo+0x15f>
c0004a74:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a77:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7a:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a7e:	66 83 fa 20          	cmp    dx,0x20
c0004a82:	0f 84 92 00 00 00    	je     c0004b1a <get_fileinfo+0x158>
c0004a88:	66 83 fa 05          	cmp    dx,0x5
c0004a8c:	75 05                	jne    c0004a93 <get_fileinfo+0xd1>
c0004a8e:	ba e5 00 00 00       	mov    edx,0xe5
c0004a93:	83 ff 0b             	cmp    edi,0xb
c0004a96:	77 0b                	ja     c0004aa3 <get_fileinfo+0xe1>
c0004a98:	83 fd 09             	cmp    ebp,0x9
c0004a9b:	75 06                	jne    c0004aa3 <get_fileinfo+0xe1>
c0004a9d:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa2:	47                   	inc    edi
c0004aa3:	0f b7 c2             	movzx  eax,dx
c0004aa6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aaa:	e8 6d d0 ff ff       	call   c0001b1c <dbc_1st>
c0004aaf:	85 c0                	test   eax,eax
c0004ab1:	74 2f                	je     c0004ae2 <get_fileinfo+0x120>
c0004ab3:	83 fd 08             	cmp    ebp,0x8
c0004ab6:	74 2a                	je     c0004ae2 <get_fileinfo+0x120>
c0004ab8:	83 fd 0b             	cmp    ebp,0xb
c0004abb:	74 25                	je     c0004ae2 <get_fileinfo+0x120>
c0004abd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac0:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ac8:	e8 52 d0 ff ff       	call   c0001b1f <dbc_2nd>
c0004acd:	85 c0                	test   eax,eax
c0004acf:	74 11                	je     c0004ae2 <get_fileinfo+0x120>
c0004ad1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ada:	c1 e2 08             	shl    edx,0x8
c0004add:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae0:	09 c2                	or     edx,eax
c0004ae2:	0f b7 d2             	movzx  edx,dx
c0004ae5:	50                   	push   eax
c0004ae6:	50                   	push   eax
c0004ae7:	68 b5 01 00 00       	push   0x1b5
c0004aec:	52                   	push   edx
c0004aed:	e8 46 38 00 00       	call   c0008338 <ff_oem2uni>
c0004af2:	83 c4 10             	add    esp,0x10
c0004af5:	66 85 c0             	test   ax,ax
c0004af8:	75 04                	jne    c0004afe <get_fileinfo+0x13c>
c0004afa:	31 ff                	xor    edi,edi
c0004afc:	eb 23                	jmp    c0004b21 <get_fileinfo+0x15f>
c0004afe:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b03:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b07:	29 f9                	sub    ecx,edi
c0004b09:	0f b7 c0             	movzx  eax,ax
c0004b0c:	e8 d7 d0 ff ff       	call   c0001be8 <put_utf>
c0004b11:	84 c0                	test   al,al
c0004b13:	74 e5                	je     c0004afa <get_fileinfo+0x138>
c0004b15:	0f b6 c0             	movzx  eax,al
c0004b18:	01 c7                	add    edi,eax
c0004b1a:	89 e9                	mov    ecx,ebp
c0004b1c:	e9 4a ff ff ff       	jmp    c0004a6b <get_fileinfo+0xa9>
c0004b21:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b26:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2a:	75 54                	jne    c0004b80 <get_fileinfo+0x1be>
c0004b2c:	85 ff                	test   edi,edi
c0004b2e:	75 0b                	jne    c0004b3b <get_fileinfo+0x179>
c0004b30:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b34:	ba 01 00 00 00       	mov    edx,0x1
c0004b39:	eb 33                	jmp    c0004b6e <get_fileinfo+0x1ac>
c0004b3b:	b1 08                	mov    cl,0x8
c0004b3d:	31 d2                	xor    edx,edx
c0004b3f:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b45:	84 c0                	test   al,al
c0004b47:	74 25                	je     c0004b6e <get_fileinfo+0x1ac>
c0004b49:	66 83 f8 2e          	cmp    ax,0x2e
c0004b4d:	74 16                	je     c0004b65 <get_fileinfo+0x1a3>
c0004b4f:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b52:	66 83 ff 19          	cmp    di,0x19
c0004b56:	77 0f                	ja     c0004b67 <get_fileinfo+0x1a5>
c0004b58:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5b:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b5e:	74 07                	je     c0004b67 <get_fileinfo+0x1a5>
c0004b60:	83 c0 20             	add    eax,0x20
c0004b63:	eb 02                	jmp    c0004b67 <get_fileinfo+0x1a5>
c0004b65:	b1 10                	mov    cl,0x10
c0004b67:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6b:	42                   	inc    edx
c0004b6c:	eb d1                	jmp    c0004b3f <get_fileinfo+0x17d>
c0004b6e:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b73:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b76:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7a:	75 04                	jne    c0004b80 <get_fileinfo+0x1be>
c0004b7c:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b80:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b83:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b86:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b89:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8c:	83 c0 1c             	add    eax,0x1c
c0004b8f:	e8 c1 ce ff ff       	call   c0001a55 <ld_dword>
c0004b94:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9b:	89 03                	mov    DWORD PTR [ebx],eax
c0004b9d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba0:	83 c0 16             	add    eax,0x16
c0004ba3:	e8 a0 ce ff ff       	call   c0001a48 <ld_word>
c0004ba8:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bac:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004baf:	83 c0 18             	add    eax,0x18
c0004bb2:	e8 91 ce ff ff       	call   c0001a48 <ld_word>
c0004bb7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbb:	83 c4 1c             	add    esp,0x1c
c0004bbe:	5b                   	pop    ebx
c0004bbf:	5e                   	pop    esi
c0004bc0:	5f                   	pop    edi
c0004bc1:	5d                   	pop    ebp
c0004bc2:	c3                   	ret    

c0004bc3 <ld_clust.isra.0>:
c0004bc3:	56                   	push   esi
c0004bc4:	89 c6                	mov    esi,eax
c0004bc6:	53                   	push   ebx
c0004bc7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bca:	89 d3                	mov    ebx,edx
c0004bcc:	e8 77 ce ff ff       	call   c0001a48 <ld_word>
c0004bd1:	0f b7 c8             	movzx  ecx,ax
c0004bd4:	89 f0                	mov    eax,esi
c0004bd6:	3c 03                	cmp    al,0x3
c0004bd8:	75 0d                	jne    c0004be7 <ld_clust.isra.0+0x24>
c0004bda:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bdd:	e8 66 ce ff ff       	call   c0001a48 <ld_word>
c0004be2:	c1 e0 10             	shl    eax,0x10
c0004be5:	09 c1                	or     ecx,eax
c0004be7:	89 c8                	mov    eax,ecx
c0004be9:	5b                   	pop    ebx
c0004bea:	5e                   	pop    esi
c0004beb:	c3                   	ret    

c0004bec <st_clust.isra.1>:
c0004bec:	56                   	push   esi
c0004bed:	89 c6                	mov    esi,eax
c0004bef:	53                   	push   ebx
c0004bf0:	89 d3                	mov    ebx,edx
c0004bf2:	0f b7 d1             	movzx  edx,cx
c0004bf5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bf8:	e8 bd ce ff ff       	call   c0001aba <st_word>
c0004bfd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c00:	75 0f                	jne    c0004c11 <st_clust.isra.1+0x25>
c0004c02:	c1 e9 10             	shr    ecx,0x10
c0004c05:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c08:	89 ca                	mov    edx,ecx
c0004c0a:	5b                   	pop    ebx
c0004c0b:	5e                   	pop    esi
c0004c0c:	e9 a9 ce ff ff       	jmp    c0001aba <st_word>
c0004c11:	5b                   	pop    ebx
c0004c12:	5e                   	pop    esi
c0004c13:	c3                   	ret    

c0004c14 <init_alloc_info.isra.2>:
c0004c14:	56                   	push   esi
c0004c15:	53                   	push   ebx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	89 d3                	mov    ebx,edx
c0004c1a:	51                   	push   ecx
c0004c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c1d:	83 c0 34             	add    eax,0x34
c0004c20:	e8 30 ce ff ff       	call   c0001a55 <ld_dword>
c0004c25:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c28:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2a:	83 c0 38             	add    eax,0x38
c0004c2d:	e8 3b ce ff ff       	call   c0001a6d <ld_qword>
c0004c32:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c35:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c38:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3a:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c3d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c44:	83 e0 02             	and    eax,0x2
c0004c47:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4a:	5b                   	pop    ebx
c0004c4b:	5b                   	pop    ebx
c0004c4c:	5e                   	pop    esi
c0004c4d:	c3                   	ret    

c0004c4e <follow_path>:
c0004c4e:	56                   	push   esi
c0004c4f:	53                   	push   ebx
c0004c50:	89 c3                	mov    ebx,eax
c0004c52:	83 ec 14             	sub    esp,0x14
c0004c55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c59:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c61:	80 fa 5c             	cmp    dl,0x5c
c0004c64:	75 07                	jne    c0004c6d <follow_path+0x1f>
c0004c66:	40                   	inc    eax
c0004c67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6b:	eb ee                	jmp    c0004c5b <follow_path+0xd>
c0004c6d:	80 fa 2f             	cmp    dl,0x2f
c0004c70:	74 f4                	je     c0004c66 <follow_path+0x18>
c0004c72:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c79:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c80:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c83:	77 52                	ja     c0004cd7 <follow_path+0x89>
c0004c85:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c89:	31 d2                	xor    edx,edx
c0004c8b:	89 d8                	mov    eax,ebx
c0004c8d:	e8 12 e3 ff ff       	call   c0002fa4 <dir_sdi>
c0004c92:	eb 7c                	jmp    c0004d10 <follow_path+0xc2>
c0004c94:	89 d8                	mov    eax,ebx
c0004c96:	e8 6e f2 ff ff       	call   c0003f09 <dir_find>
c0004c9b:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c9e:	85 c0                	test   eax,eax
c0004ca0:	75 46                	jne    c0004ce8 <follow_path+0x9a>
c0004ca2:	80 e2 04             	and    dl,0x4
c0004ca5:	75 69                	jne    c0004d10 <follow_path+0xc2>
c0004ca7:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cab:	74 5e                	je     c0004d0b <follow_path+0xbd>
c0004cad:	8a 06                	mov    al,BYTE PTR [esi]
c0004caf:	3c 04                	cmp    al,0x4
c0004cb1:	75 41                	jne    c0004cf4 <follow_path+0xa6>
c0004cb3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb6:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cba:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cbd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc0:	30 c0                	xor    al,al
c0004cc2:	09 d0                	or     eax,edx
c0004cc4:	89 da                	mov    edx,ebx
c0004cc6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cc9:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ccc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ccf:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd2:	e8 3d ff ff ff       	call   c0004c14 <init_alloc_info.isra.2>
c0004cd7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdb:	89 d8                	mov    eax,ebx
c0004cdd:	e8 a9 ed ff ff       	call   c0003a8b <create_name>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 ae                	je     c0004c94 <follow_path+0x46>
c0004ce6:	eb 28                	jmp    c0004d10 <follow_path+0xc2>
c0004ce8:	83 f8 04             	cmp    eax,0x4
c0004ceb:	75 23                	jne    c0004d10 <follow_path+0xc2>
c0004ced:	80 e2 04             	and    dl,0x4
c0004cf0:	74 19                	je     c0004d0b <follow_path+0xbd>
c0004cf2:	eb 1c                	jmp    c0004d10 <follow_path+0xc2>
c0004cf4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cf7:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cfd:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d01:	e8 bd fe ff ff       	call   c0004bc3 <ld_clust.isra.0>
c0004d06:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d09:	eb cc                	jmp    c0004cd7 <follow_path+0x89>
c0004d0b:	b8 05 00 00 00       	mov    eax,0x5
c0004d10:	83 c4 14             	add    esp,0x14
c0004d13:	5b                   	pop    ebx
c0004d14:	5e                   	pop    esi
c0004d15:	c3                   	ret    

c0004d16 <f_mount>:
c0004d16:	53                   	push   ebx
c0004d17:	83 ec 18             	sub    esp,0x18
c0004d1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d1e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2a:	e8 fb d2 ff ff       	call   c000202a <get_ldnumber>
c0004d2f:	89 c2                	mov    edx,eax
c0004d31:	b8 0b 00 00 00       	mov    eax,0xb
c0004d36:	85 d2                	test   edx,edx
c0004d38:	78 39                	js     c0004d73 <f_mount+0x5d>
c0004d3a:	8b 04 95 60 da 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd25a0]
c0004d41:	85 c0                	test   eax,eax
c0004d43:	74 03                	je     c0004d48 <f_mount+0x32>
c0004d45:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4c:	85 c0                	test   eax,eax
c0004d4e:	74 03                	je     c0004d53 <f_mount+0x3d>
c0004d50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d57:	89 04 95 60 da 02 c0 	mov    DWORD PTR [edx*4-0x3ffd25a0],eax
c0004d5e:	31 c0                	xor    eax,eax
c0004d60:	84 db                	test   bl,bl
c0004d62:	74 0f                	je     c0004d73 <f_mount+0x5d>
c0004d64:	31 c9                	xor    ecx,ecx
c0004d66:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d6e:	e8 65 d7 ff ff       	call   c00024d8 <mount_volume>
c0004d73:	83 c4 18             	add    esp,0x18
c0004d76:	5b                   	pop    ebx
c0004d77:	c3                   	ret    

c0004d78 <f_open>:
c0004d78:	55                   	push   ebp
c0004d79:	bd 09 00 00 00       	mov    ebp,0x9
c0004d7e:	57                   	push   edi
c0004d7f:	56                   	push   esi
c0004d80:	53                   	push   ebx
c0004d81:	83 ec 7c             	sub    esp,0x7c
c0004d84:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8b:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d92:	85 db                	test   ebx,ebx
c0004d94:	0f 84 10 04 00 00    	je     c00051aa <f_open+0x432>
c0004d9a:	89 fe                	mov    esi,edi
c0004d9c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da0:	83 e6 3f             	and    esi,0x3f
c0004da3:	89 f0                	mov    eax,esi
c0004da5:	0f b6 c8             	movzx  ecx,al
c0004da8:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004daf:	e8 24 d7 ff ff       	call   c00024d8 <mount_volume>
c0004db4:	89 c5                	mov    ebp,eax
c0004db6:	85 c0                	test   eax,eax
c0004db8:	0f 85 e6 03 00 00    	jne    c00051a4 <f_open+0x42c>
c0004dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc2:	bd 11 00 00 00       	mov    ebp,0x11
c0004dc7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dcb:	83 ec 0c             	sub    esp,0xc
c0004dce:	68 60 04 00 00       	push   0x460
c0004dd3:	e8 a3 34 00 00       	call   c000827b <ff_memalloc>
c0004dd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ddc:	83 c4 10             	add    esp,0x10
c0004ddf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de4:	0f 84 c0 03 00 00    	je     c00051aa <f_open+0x432>
c0004dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df2:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004df8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dfe:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e05:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e09:	e8 40 fe ff ff       	call   c0004c4e <follow_path>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	75 0c                	jne    c0004e20 <f_open+0xa8>
c0004e14:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e19:	79 05                	jns    c0004e20 <f_open+0xa8>
c0004e1b:	bd 06 00 00 00       	mov    ebp,0x6
c0004e20:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e26:	0f 84 84 01 00 00    	je     c0004fb0 <f_open+0x238>
c0004e2c:	85 ed                	test   ebp,ebp
c0004e2e:	74 20                	je     c0004e50 <f_open+0xd8>
c0004e30:	83 fd 04             	cmp    ebp,0x4
c0004e33:	0f 85 58 03 00 00    	jne    c0005191 <f_open+0x419>
c0004e39:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3d:	83 ce 08             	or     esi,0x8
c0004e40:	e8 8a f2 ff ff       	call   c00040cf <dir_register>
c0004e45:	89 c5                	mov    ebp,eax
c0004e47:	85 c0                	test   eax,eax
c0004e49:	74 2f                	je     c0004e7a <f_open+0x102>
c0004e4b:	e9 41 03 00 00       	jmp    c0005191 <f_open+0x419>
c0004e50:	bd 07 00 00 00       	mov    ebp,0x7
c0004e55:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5a:	0f 85 31 03 00 00    	jne    c0005191 <f_open+0x419>
c0004e60:	bd 08 00 00 00       	mov    ebp,0x8
c0004e65:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6b:	0f 85 20 03 00 00    	jne    c0005191 <f_open+0x419>
c0004e71:	83 e7 08             	and    edi,0x8
c0004e74:	0f 84 65 01 00 00    	je     c0004fdf <f_open+0x267>
c0004e7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e7e:	8a 02                	mov    al,BYTE PTR [edx]
c0004e80:	3c 04                	cmp    al,0x4
c0004e82:	0f 85 97 00 00 00    	jne    c0004f1f <f_open+0x1a7>
c0004e88:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8b:	89 13                	mov    DWORD PTR [ebx],edx
c0004e8d:	89 da                	mov    edx,ebx
c0004e8f:	e8 80 fd ff ff       	call   c0004c14 <init_alloc_info.isra.2>
c0004e94:	31 d2                	xor    edx,edx
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e9f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea2:	83 c0 02             	add    eax,0x2
c0004ea5:	e8 32 cc ff ff       	call   c0001adc <mem_set>
c0004eaa:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eaf:	31 d2                	xor    edx,edx
c0004eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb8:	83 c0 26             	add    eax,0x26
c0004ebb:	e8 1c cc ff ff       	call   c0001adc <mem_set>
c0004ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ec7:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ecb:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed3:	83 c0 08             	add    eax,0x8
c0004ed6:	e8 e3 cb ff ff       	call   c0001abe <st_dword>
c0004edb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004edf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee2:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eea:	e8 b7 ea ff ff       	call   c00039a6 <store_xdir>
c0004eef:	89 c5                	mov    ebp,eax
c0004ef1:	85 c0                	test   eax,eax
c0004ef3:	0f 85 98 02 00 00    	jne    c0005191 <f_open+0x419>
c0004ef9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004efc:	85 d2                	test   edx,edx
c0004efe:	0f 84 db 00 00 00    	je     c0004fdf <f_open+0x267>
c0004f04:	31 c9                	xor    ecx,ecx
c0004f06:	89 d8                	mov    eax,ebx
c0004f08:	e8 8e e3 ff ff       	call   c000329b <remove_chain>
c0004f0d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f11:	89 c5                	mov    ebp,eax
c0004f13:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f16:	48                   	dec    eax
c0004f17:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1a:	e9 b8 00 00 00       	jmp    c0004fd7 <f_open+0x25f>
c0004f1f:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f23:	89 ea                	mov    edx,ebp
c0004f25:	e8 99 fc ff ff       	call   c0004bc3 <ld_clust.isra.0>
c0004f2a:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f2f:	89 c7                	mov    edi,eax
c0004f31:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f34:	e8 85 cb ff ff       	call   c0001abe <st_dword>
c0004f39:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f3d:	31 c9                	xor    ecx,ecx
c0004f3f:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4b:	e8 9c fc ff ff       	call   c0004bec <st_clust.isra.1>
c0004f50:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f54:	31 d2                	xor    edx,edx
c0004f56:	83 c0 1c             	add    eax,0x1c
c0004f59:	e8 60 cb ff ff       	call   c0001abe <st_dword>
c0004f5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f62:	85 ff                	test   edi,edi
c0004f64:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f68:	74 75                	je     c0004fdf <f_open+0x267>
c0004f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6e:	31 c9                	xor    ecx,ecx
c0004f70:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f73:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f7e:	89 fa                	mov    edx,edi
c0004f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f84:	e8 12 e3 ff ff       	call   c000329b <remove_chain>
c0004f89:	89 c5                	mov    ebp,eax
c0004f8b:	85 c0                	test   eax,eax
c0004f8d:	0f 85 fe 01 00 00    	jne    c0005191 <f_open+0x419>
c0004f93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f9f:	4f                   	dec    edi
c0004fa0:	e8 81 d2 ff ff       	call   c0002226 <move_window>
c0004fa5:	89 c5                	mov    ebp,eax
c0004fa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fab:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fae:	eb 27                	jmp    c0004fd7 <f_open+0x25f>
c0004fb0:	85 ed                	test   ebp,ebp
c0004fb2:	0f 85 d9 01 00 00    	jne    c0005191 <f_open+0x419>
c0004fb8:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbc:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc1:	a8 10                	test   al,0x10
c0004fc3:	0f 85 c8 01 00 00    	jne    c0005191 <f_open+0x419>
c0004fc9:	83 e7 02             	and    edi,0x2
c0004fcc:	74 11                	je     c0004fdf <f_open+0x267>
c0004fce:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd3:	a8 01                	test   al,0x1
c0004fd5:	eb 02                	jmp    c0004fd9 <f_open+0x261>
c0004fd7:	85 ed                	test   ebp,ebp
c0004fd9:	0f 85 b2 01 00 00    	jne    c0005191 <f_open+0x419>
c0004fdf:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe5:	74 03                	je     c0004fea <f_open+0x272>
c0004fe7:	83 ce 40             	or     esi,0x40
c0004fea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fee:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff1:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff4:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ff7:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffa:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004ffe:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005001:	8a 02                	mov    al,BYTE PTR [edx]
c0005003:	3c 04                	cmp    al,0x4
c0005005:	75 2a                	jne    c0005031 <f_open+0x2b9>
c0005007:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500b:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005010:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005013:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005017:	30 c0                	xor    al,al
c0005019:	09 c8                	or     eax,ecx
c000501b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000501e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005022:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005025:	8d 42 10             	lea    eax,[edx+0x10]
c0005028:	89 da                	mov    edx,ebx
c000502a:	e8 e5 fb ff ff       	call   c0004c14 <init_alloc_info.isra.2>
c000502f:	eb 1c                	jmp    c000504d <f_open+0x2d5>
c0005031:	89 fa                	mov    edx,edi
c0005033:	e8 8b fb ff ff       	call   c0004bc3 <ld_clust.isra.0>
c0005038:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000503e:	e8 12 ca ff ff       	call   c0001a55 <ld_dword>
c0005043:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005051:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005058:	89 03                	mov    DWORD PTR [ebx],eax
c000505a:	31 d2                	xor    edx,edx
c000505c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005060:	b9 00 02 00 00       	mov    ecx,0x200
c0005065:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005069:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000506d:	89 f0                	mov    eax,esi
c000506f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005076:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005079:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005080:	8d 43 50             	lea    eax,[ebx+0x50]
c0005083:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005091:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005095:	e8 42 ca ff ff       	call   c0001adc <mem_set>
c000509a:	83 e6 20             	and    esi,0x20
c000509d:	75 07                	jne    c00050a6 <f_open+0x32e>
c000509f:	31 ed                	xor    ebp,ebp
c00050a1:	e9 eb 00 00 00       	jmp    c0005191 <f_open+0x419>
c00050a6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050a9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050b8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050bc:	74 e1                	je     c000509f <f_open+0x327>
c00050be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050c9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050d7:	31 ff                	xor    edi,edi
c00050d9:	c1 e5 09             	shl    ebp,0x9
c00050dc:	89 ee                	mov    esi,ebp
c00050de:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e2:	89 f8                	mov    eax,edi
c00050e4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050e8:	73 22                	jae    c000510c <f_open+0x394>
c00050ea:	89 d8                	mov    eax,ebx
c00050ec:	e8 bd dc ff ff       	call   c0002dae <get_fat>
c00050f1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f5:	89 c2                	mov    edx,eax
c00050f7:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fb:	83 f8 01             	cmp    eax,0x1
c00050fe:	76 10                	jbe    c0005110 <f_open+0x398>
c0005100:	83 f8 ff             	cmp    eax,0xffffffff
c0005103:	75 d9                	jne    c00050de <f_open+0x366>
c0005105:	bd 01 00 00 00       	mov    ebp,0x1
c000510a:	eb 09                	jmp    c0005115 <f_open+0x39d>
c000510c:	31 ed                	xor    ebp,ebp
c000510e:	eb 05                	jmp    c0005115 <f_open+0x39d>
c0005110:	bd 02 00 00 00       	mov    ebp,0x2
c0005115:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005118:	85 ed                	test   ebp,ebp
c000511a:	75 75                	jne    c0005191 <f_open+0x419>
c000511c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005120:	25 ff 01 00 00       	and    eax,0x1ff
c0005125:	0f 84 74 ff ff ff    	je     c000509f <f_open+0x327>
c000512b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000512f:	bd 02 00 00 00       	mov    ebp,0x2
c0005134:	89 c8                	mov    eax,ecx
c0005136:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513a:	e8 a2 cb ff ff       	call   c0001ce1 <clst2sect>
c000513f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005143:	89 d7                	mov    edi,edx
c0005145:	09 c7                	or     edi,eax
c0005147:	74 48                	je     c0005191 <f_open+0x419>
c0005149:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000514d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005151:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005159:	0f ac fe 09          	shrd   esi,edi,0x9
c000515d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005161:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005165:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005168:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516c:	83 ec 0c             	sub    esp,0xc
c000516f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005172:	6a 01                	push   0x1
c0005174:	52                   	push   edx
c0005175:	50                   	push   eax
c0005176:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000517e:	50                   	push   eax
c000517f:	e8 79 c8 ff ff       	call   c00019fd <disk_read>
c0005184:	83 c4 20             	add    esp,0x20
c0005187:	85 c0                	test   eax,eax
c0005189:	0f 95 c0             	setne  al
c000518c:	0f b6 c0             	movzx  eax,al
c000518f:	89 c5                	mov    ebp,eax
c0005191:	83 ec 0c             	sub    esp,0xc
c0005194:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005198:	e8 f4 30 00 00       	call   c0008291 <ff_memfree>
c000519d:	83 c4 10             	add    esp,0x10
c00051a0:	85 ed                	test   ebp,ebp
c00051a2:	74 06                	je     c00051aa <f_open+0x432>
c00051a4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051aa:	83 c4 7c             	add    esp,0x7c
c00051ad:	89 e8                	mov    eax,ebp
c00051af:	5b                   	pop    ebx
c00051b0:	5e                   	pop    esi
c00051b1:	5f                   	pop    edi
c00051b2:	5d                   	pop    ebp
c00051b3:	c3                   	ret    

c00051b4 <f_read>:
c00051b4:	55                   	push   ebp
c00051b5:	57                   	push   edi
c00051b6:	56                   	push   esi
c00051b7:	53                   	push   ebx
c00051b8:	83 ec 2c             	sub    esp,0x2c
c00051bb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051bf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051c9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051cd:	89 d8                	mov    eax,ebx
c00051cf:	e8 77 cf ff ff       	call   c000214b <validate>
c00051d4:	89 c5                	mov    ebp,eax
c00051d6:	85 c0                	test   eax,eax
c00051d8:	0f 85 4c 02 00 00    	jne    c000542a <f_read+0x276>
c00051de:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e2:	85 ed                	test   ebp,ebp
c00051e4:	0f 85 40 02 00 00    	jne    c000542a <f_read+0x276>
c00051ea:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051ee:	0f 84 31 02 00 00    	je     c0005425 <f_read+0x271>
c00051f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051f7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fa:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051fd:	bf 00 00 00 00       	mov    edi,0x0
c0005202:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005205:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005209:	89 d1                	mov    ecx,edx
c000520b:	19 f9                	sbb    ecx,edi
c000520d:	0f 83 cf 00 00 00    	jae    c00052e2 <f_read+0x12e>
c0005213:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005217:	e9 c6 00 00 00       	jmp    c00052e2 <f_read+0x12e>
c000521c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000521f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005222:	89 d0                	mov    eax,edx
c0005224:	25 ff 01 00 00       	and    eax,0x1ff
c0005229:	0f 85 c9 01 00 00    	jne    c00053f8 <f_read+0x244>
c000522f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005233:	89 d6                	mov    esi,edx
c0005235:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005239:	89 cf                	mov    edi,ecx
c000523b:	48                   	dec    eax
c000523c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005240:	21 f0                	and    eax,esi
c0005242:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005246:	0f 84 a6 00 00 00    	je     c00052f2 <f_read+0x13e>
c000524c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005250:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005253:	89 c8                	mov    eax,ecx
c0005255:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005258:	e8 84 ca ff ff       	call   c0001ce1 <clst2sect>
c000525d:	89 d7                	mov    edi,edx
c000525f:	09 c7                	or     edi,eax
c0005261:	0f 84 b4 00 00 00    	je     c000531b <f_read+0x167>
c0005267:	31 ff                	xor    edi,edi
c0005269:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000526d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005270:	01 c6                	add    esi,eax
c0005272:	11 d7                	adc    edi,edx
c0005274:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527c:	0f 86 fd 00 00 00    	jbe    c000537f <f_read+0x1cb>
c0005282:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005286:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528a:	c1 e8 09             	shr    eax,0x9
c000528d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005290:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005294:	03 14 24             	add    edx,DWORD PTR [esp]
c0005297:	39 c2                	cmp    edx,eax
c0005299:	76 07                	jbe    c00052a2 <f_read+0xee>
c000529b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000529f:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a2:	83 ec 0c             	sub    esp,0xc
c00052a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052a9:	57                   	push   edi
c00052aa:	56                   	push   esi
c00052ab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052af:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b3:	50                   	push   eax
c00052b4:	e8 44 c7 ff ff       	call   c00019fd <disk_read>
c00052b9:	83 c4 20             	add    esp,0x20
c00052bc:	85 c0                	test   eax,eax
c00052be:	75 6e                	jne    c000532e <f_read+0x17a>
c00052c0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c4:	78 7e                	js     c0005344 <f_read+0x190>
c00052c6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052c9:	c1 e6 09             	shl    esi,0x9
c00052cc:	31 ff                	xor    edi,edi
c00052ce:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d6:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052da:	01 30                	add    DWORD PTR [eax],esi
c00052dc:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052df:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052e7:	0f 85 2f ff ff ff    	jne    c000521c <f_read+0x68>
c00052ed:	e9 38 01 00 00       	jmp    c000542a <f_read+0x276>
c00052f2:	89 c8                	mov    eax,ecx
c00052f4:	09 d0                	or     eax,edx
c00052f6:	75 05                	jne    c00052fd <f_read+0x149>
c00052f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fb:	eb 19                	jmp    c0005316 <f_read+0x162>
c00052fd:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005301:	74 09                	je     c000530c <f_read+0x158>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 f8 c9 ff ff       	call   c0001d02 <clmt_clust>
c000530a:	eb 0a                	jmp    c0005316 <f_read+0x162>
c000530c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000530f:	89 d8                	mov    eax,ebx
c0005311:	e8 98 da ff ff       	call   c0002dae <get_fat>
c0005316:	83 f8 01             	cmp    eax,0x1
c0005319:	77 0e                	ja     c0005329 <f_read+0x175>
c000531b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000531f:	bd 02 00 00 00       	mov    ebp,0x2
c0005324:	e9 01 01 00 00       	jmp    c000542a <f_read+0x276>
c0005329:	83 f8 ff             	cmp    eax,0xffffffff
c000532c:	75 0e                	jne    c000533c <f_read+0x188>
c000532e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005332:	bd 01 00 00 00       	mov    ebp,0x1
c0005337:	e9 ee 00 00 00       	jmp    c000542a <f_read+0x276>
c000533c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000533f:	e9 08 ff ff ff       	jmp    c000524c <f_read+0x98>
c0005344:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005347:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534a:	29 f0                	sub    eax,esi
c000534c:	19 fa                	sbb    edx,edi
c000534e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005351:	89 d7                	mov    edi,edx
c0005353:	ba 00 00 00 00       	mov    edx,0x0
c0005358:	89 f9                	mov    ecx,edi
c000535a:	19 d1                	sbb    ecx,edx
c000535c:	0f 83 64 ff ff ff    	jae    c00052c6 <f_read+0x112>
c0005362:	89 c7                	mov    edi,eax
c0005364:	8d 53 50             	lea    edx,[ebx+0x50]
c0005367:	c1 e7 09             	shl    edi,0x9
c000536a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000536e:	b9 00 02 00 00       	mov    ecx,0x200
c0005373:	01 f8                	add    eax,edi
c0005375:	e8 4d c7 ff ff       	call   c0001ac7 <mem_cpy>
c000537a:	e9 47 ff ff ff       	jmp    c00052c6 <f_read+0x112>
c000537f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005382:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005385:	89 04 24             	mov    DWORD PTR [esp],eax
c0005388:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538c:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005390:	75 05                	jne    c0005397 <f_read+0x1e3>
c0005392:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005395:	74 5b                	je     c00053f2 <f_read+0x23e>
c0005397:	8d 43 50             	lea    eax,[ebx+0x50]
c000539a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000539e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a2:	79 2a                	jns    c00053ce <f_read+0x21a>
c00053a4:	83 ec 0c             	sub    esp,0xc
c00053a7:	6a 01                	push   0x1
c00053a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053b9:	50                   	push   eax
c00053ba:	e8 54 c6 ff ff       	call   c0001a13 <disk_write>
c00053bf:	83 c4 20             	add    esp,0x20
c00053c2:	85 c0                	test   eax,eax
c00053c4:	0f 85 64 ff ff ff    	jne    c000532e <f_read+0x17a>
c00053ca:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053ce:	83 ec 0c             	sub    esp,0xc
c00053d1:	6a 01                	push   0x1
c00053d3:	57                   	push   edi
c00053d4:	56                   	push   esi
c00053d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053dd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e1:	50                   	push   eax
c00053e2:	e8 16 c6 ff ff       	call   c00019fd <disk_read>
c00053e7:	83 c4 20             	add    esp,0x20
c00053ea:	85 c0                	test   eax,eax
c00053ec:	0f 85 3c ff ff ff    	jne    c000532e <f_read+0x17a>
c00053f2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f5:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053f8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fb:	ba 00 02 00 00       	mov    edx,0x200
c0005400:	25 ff 01 00 00       	and    eax,0x1ff
c0005405:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005409:	29 c2                	sub    edx,eax
c000540b:	39 d6                	cmp    esi,edx
c000540d:	76 02                	jbe    c0005411 <f_read+0x25d>
c000540f:	89 d6                	mov    esi,edx
c0005411:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005415:	89 f1                	mov    ecx,esi
c0005417:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541b:	e8 a7 c6 ff ff       	call   c0001ac7 <mem_cpy>
c0005420:	e9 a7 fe ff ff       	jmp    c00052cc <f_read+0x118>
c0005425:	bd 07 00 00 00       	mov    ebp,0x7
c000542a:	83 c4 2c             	add    esp,0x2c
c000542d:	89 e8                	mov    eax,ebp
c000542f:	5b                   	pop    ebx
c0005430:	5e                   	pop    esi
c0005431:	5f                   	pop    edi
c0005432:	5d                   	pop    ebp
c0005433:	c3                   	ret    

c0005434 <f_write>:
c0005434:	55                   	push   ebp
c0005435:	57                   	push   edi
c0005436:	56                   	push   esi
c0005437:	53                   	push   ebx
c0005438:	83 ec 2c             	sub    esp,0x2c
c000543b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000543f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005443:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005449:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000544d:	89 d8                	mov    eax,ebx
c000544f:	e8 f7 cc ff ff       	call   c000214b <validate>
c0005454:	89 c5                	mov    ebp,eax
c0005456:	85 c0                	test   eax,eax
c0005458:	0f 85 86 02 00 00    	jne    c00056e4 <f_write+0x2b0>
c000545e:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005462:	85 ed                	test   ebp,ebp
c0005464:	0f 85 7a 02 00 00    	jne    c00056e4 <f_write+0x2b0>
c000546a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000546e:	0f 84 6b 02 00 00    	je     c00056df <f_write+0x2ab>
c0005474:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005478:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547b:	0f 84 43 01 00 00    	je     c00055c4 <f_write+0x190>
c0005481:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005484:	89 c1                	mov    ecx,eax
c0005486:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548a:	0f 83 34 01 00 00    	jae    c00055c4 <f_write+0x190>
c0005490:	f7 d0                	not    eax
c0005492:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005496:	e9 29 01 00 00       	jmp    c00055c4 <f_write+0x190>
c000549b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000549e:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a1:	89 d0                	mov    eax,edx
c00054a3:	25 ff 01 00 00       	and    eax,0x1ff
c00054a8:	0f 85 00 02 00 00    	jne    c00056ae <f_write+0x27a>
c00054ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b2:	89 d6                	mov    esi,edx
c00054b4:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054b8:	89 cf                	mov    edi,ecx
c00054ba:	48                   	dec    eax
c00054bb:	0f ac fe 09          	shrd   esi,edi,0x9
c00054bf:	21 f0                	and    eax,esi
c00054c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c5:	0f 84 06 01 00 00    	je     c00055d1 <f_write+0x19d>
c00054cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054cf:	0f 88 6e 01 00 00    	js     c0005643 <f_write+0x20f>
c00054d5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054d9:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054dc:	89 c8                	mov    eax,ecx
c00054de:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e2:	e8 fa c7 ff ff       	call   c0001ce1 <clst2sect>
c00054e7:	89 d1                	mov    ecx,edx
c00054e9:	09 c1                	or     ecx,eax
c00054eb:	0f 84 1c 01 00 00    	je     c000560d <f_write+0x1d9>
c00054f1:	31 ff                	xor    edi,edi
c00054f3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fb:	01 c6                	add    esi,eax
c00054fd:	11 d7                	adc    edi,edx
c00054ff:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005507:	0f 86 63 01 00 00    	jbe    c0005670 <f_write+0x23c>
c000550d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005511:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005515:	c1 e8 09             	shr    eax,0x9
c0005518:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551c:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005520:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005524:	39 c2                	cmp    edx,eax
c0005526:	76 08                	jbe    c0005530 <f_write+0xfc>
c0005528:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005530:	83 ec 0c             	sub    esp,0xc
c0005533:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005537:	57                   	push   edi
c0005538:	56                   	push   esi
c0005539:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000553d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005541:	50                   	push   eax
c0005542:	e8 cc c4 ff ff       	call   c0001a13 <disk_write>
c0005547:	83 c4 20             	add    esp,0x20
c000554a:	85 c0                	test   eax,eax
c000554c:	0f 85 ce 00 00 00    	jne    c0005620 <f_write+0x1ec>
c0005552:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005555:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005558:	29 f0                	sub    eax,esi
c000555a:	19 fa                	sbb    edx,edi
c000555c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005560:	89 d7                	mov    edi,edx
c0005562:	ba 00 00 00 00       	mov    edx,0x0
c0005567:	89 f9                	mov    ecx,edi
c0005569:	19 d1                	sbb    ecx,edx
c000556b:	73 1c                	jae    c0005589 <f_write+0x155>
c000556d:	89 c7                	mov    edi,eax
c000556f:	b9 00 02 00 00       	mov    ecx,0x200
c0005574:	c1 e7 09             	shl    edi,0x9
c0005577:	8d 43 50             	lea    eax,[ebx+0x50]
c000557a:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000557e:	89 fa                	mov    edx,edi
c0005580:	e8 42 c5 ff ff       	call   c0001ac7 <mem_cpy>
c0005585:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005589:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000558d:	c1 e6 09             	shl    esi,0x9
c0005590:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005594:	31 ff                	xor    edi,edi
c0005596:	01 30                	add    DWORD PTR [eax],esi
c0005598:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a3:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055a9:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055ac:	89 c1                	mov    ecx,eax
c00055ae:	39 f2                	cmp    edx,esi
c00055b0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b3:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b6:	19 f9                	sbb    ecx,edi
c00055b8:	73 04                	jae    c00055be <f_write+0x18a>
c00055ba:	89 f2                	mov    edx,esi
c00055bc:	89 f8                	mov    eax,edi
c00055be:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055c9:	0f 85 cc fe ff ff    	jne    c000549b <f_write+0x67>
c00055cf:	eb 2e                	jmp    c00055ff <f_write+0x1cb>
c00055d1:	89 c8                	mov    eax,ecx
c00055d3:	09 d0                	or     eax,edx
c00055d5:	75 0b                	jne    c00055e2 <f_write+0x1ae>
c00055d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055da:	31 d2                	xor    edx,edx
c00055dc:	85 c0                	test   eax,eax
c00055de:	75 28                	jne    c0005608 <f_write+0x1d4>
c00055e0:	eb 12                	jmp    c00055f4 <f_write+0x1c0>
c00055e2:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e6:	74 09                	je     c00055f1 <f_write+0x1bd>
c00055e8:	89 d8                	mov    eax,ebx
c00055ea:	e8 13 c7 ff ff       	call   c0001d02 <clmt_clust>
c00055ef:	eb 0a                	jmp    c00055fb <f_write+0x1c7>
c00055f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f4:	89 d8                	mov    eax,ebx
c00055f6:	e8 a1 da ff ff       	call   c000309c <create_chain>
c00055fb:	85 c0                	test   eax,eax
c00055fd:	75 09                	jne    c0005608 <f_write+0x1d4>
c00055ff:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005603:	e9 dc 00 00 00       	jmp    c00056e4 <f_write+0x2b0>
c0005608:	83 f8 01             	cmp    eax,0x1
c000560b:	75 0e                	jne    c000561b <f_write+0x1e7>
c000560d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005611:	bd 02 00 00 00       	mov    ebp,0x2
c0005616:	e9 c9 00 00 00       	jmp    c00056e4 <f_write+0x2b0>
c000561b:	83 f8 ff             	cmp    eax,0xffffffff
c000561e:	75 0e                	jne    c000562e <f_write+0x1fa>
c0005620:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005624:	bd 01 00 00 00       	mov    ebp,0x1
c0005629:	e9 b6 00 00 00       	jmp    c00056e4 <f_write+0x2b0>
c000562e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005631:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005635:	0f 85 90 fe ff ff    	jne    c00054cb <f_write+0x97>
c000563b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000563e:	e9 88 fe ff ff       	jmp    c00054cb <f_write+0x97>
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	8d 43 50             	lea    eax,[ebx+0x50]
c0005649:	6a 01                	push   0x1
c000564b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000564e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005651:	50                   	push   eax
c0005652:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005656:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565a:	50                   	push   eax
c000565b:	e8 b3 c3 ff ff       	call   c0001a13 <disk_write>
c0005660:	83 c4 20             	add    esp,0x20
c0005663:	85 c0                	test   eax,eax
c0005665:	75 b9                	jne    c0005620 <f_write+0x1ec>
c0005667:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566b:	e9 65 fe ff ff       	jmp    c00054d5 <f_write+0xa1>
c0005670:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005673:	75 05                	jne    c000567a <f_write+0x246>
c0005675:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005678:	74 2e                	je     c00056a8 <f_write+0x274>
c000567a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000567d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005680:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005683:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005686:	73 20                	jae    c00056a8 <f_write+0x274>
c0005688:	83 ec 0c             	sub    esp,0xc
c000568b:	8d 43 50             	lea    eax,[ebx+0x50]
c000568e:	6a 01                	push   0x1
c0005690:	57                   	push   edi
c0005691:	56                   	push   esi
c0005692:	50                   	push   eax
c0005693:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005697:	50                   	push   eax
c0005698:	e8 60 c3 ff ff       	call   c00019fd <disk_read>
c000569d:	83 c4 20             	add    esp,0x20
c00056a0:	85 c0                	test   eax,eax
c00056a2:	0f 85 78 ff ff ff    	jne    c0005620 <f_write+0x1ec>
c00056a8:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ab:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056ae:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b1:	ba 00 02 00 00       	mov    edx,0x200
c00056b6:	25 ff 01 00 00       	and    eax,0x1ff
c00056bb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056bf:	29 c2                	sub    edx,eax
c00056c1:	39 d6                	cmp    esi,edx
c00056c3:	76 02                	jbe    c00056c7 <f_write+0x293>
c00056c5:	89 d6                	mov    esi,edx
c00056c7:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056cb:	89 f1                	mov    ecx,esi
c00056cd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d1:	e8 f1 c3 ff ff       	call   c0001ac7 <mem_cpy>
c00056d6:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056da:	e9 b1 fe ff ff       	jmp    c0005590 <f_write+0x15c>
c00056df:	bd 07 00 00 00       	mov    ebp,0x7
c00056e4:	83 c4 2c             	add    esp,0x2c
c00056e7:	89 e8                	mov    eax,ebp
c00056e9:	5b                   	pop    ebx
c00056ea:	5e                   	pop    esi
c00056eb:	5f                   	pop    edi
c00056ec:	5d                   	pop    ebp
c00056ed:	c3                   	ret    

c00056ee <f_sync>:
c00056ee:	56                   	push   esi
c00056ef:	53                   	push   ebx
c00056f0:	83 ec 64             	sub    esp,0x64
c00056f3:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056f7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 49 ca ff ff       	call   c000214b <validate>
c0005702:	85 c0                	test   eax,eax
c0005704:	0f 85 ba 01 00 00    	jne    c00058c4 <f_sync+0x1d6>
c000570a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000570d:	f6 c2 40             	test   dl,0x40
c0005710:	0f 84 ae 01 00 00    	je     c00058c4 <f_sync+0x1d6>
c0005716:	84 d2                	test   dl,dl
c0005718:	79 33                	jns    c000574d <f_sync+0x5f>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005720:	6a 01                	push   0x1
c0005722:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005725:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005728:	50                   	push   eax
c0005729:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000572d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005731:	50                   	push   eax
c0005732:	e8 dc c2 ff ff       	call   c0001a13 <disk_write>
c0005737:	83 c4 20             	add    esp,0x20
c000573a:	89 c2                	mov    edx,eax
c000573c:	b8 01 00 00 00       	mov    eax,0x1
c0005741:	85 d2                	test   edx,edx
c0005743:	0f 85 7b 01 00 00    	jne    c00058c4 <f_sync+0x1d6>
c0005749:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000574d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005751:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005754:	0f 85 11 01 00 00    	jne    c000586b <f_sync+0x17d>
c000575a:	89 d8                	mov    eax,ebx
c000575c:	e8 13 d6 ff ff       	call   c0002d74 <fill_first_frag>
c0005761:	85 c0                	test   eax,eax
c0005763:	0f 85 5b 01 00 00    	jne    c00058c4 <f_sync+0x1d6>
c0005769:	83 c9 ff             	or     ecx,0xffffffff
c000576c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000576f:	89 d8                	mov    eax,ebx
c0005771:	e8 c9 d5 ff ff       	call   c0002d3f <fill_last_frag>
c0005776:	85 c0                	test   eax,eax
c0005778:	0f 85 46 01 00 00    	jne    c00058c4 <f_sync+0x1d6>
c000577e:	83 ec 0c             	sub    esp,0xc
c0005781:	68 60 04 00 00       	push   0x460
c0005786:	e8 f0 2a 00 00       	call   c000827b <ff_memalloc>
c000578b:	83 c4 10             	add    esp,0x10
c000578e:	89 c6                	mov    esi,eax
c0005790:	b8 11 00 00 00       	mov    eax,0x11
c0005795:	85 f6                	test   esi,esi
c0005797:	0f 84 27 01 00 00    	je     c00058c4 <f_sync+0x1d6>
c000579d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057a7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057aa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057ad:	89 da                	mov    edx,ebx
c00057af:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b3:	e8 af df ff ff       	call   c0003767 <load_obj_xdir>
c00057b8:	85 c0                	test   eax,eax
c00057ba:	0f 85 95 00 00 00    	jne    c0005855 <f_sync+0x167>
c00057c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057c7:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057cb:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057ce:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d1:	83 ca 01             	or     edx,0x1
c00057d4:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057d7:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057dd:	83 c0 34             	add    eax,0x34
c00057e0:	e8 d9 c2 ff ff       	call   c0001abe <st_dword>
c00057e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ef:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f2:	83 c0 38             	add    eax,0x38
c00057f5:	e8 c7 c2 ff ff       	call   c0001ac1 <st_qword>
c00057fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005804:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005807:	83 c0 28             	add    eax,0x28
c000580a:	e8 b2 c2 ff ff       	call   c0001ac1 <st_qword>
c000580f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005813:	ba 00 00 21 50       	mov    edx,0x50210000
c0005818:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581b:	83 c0 0c             	add    eax,0xc
c000581e:	e8 9b c2 ff ff       	call   c0001abe <st_dword>
c0005823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005827:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582a:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c000582e:	31 d2                	xor    edx,edx
c0005830:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005833:	83 c0 10             	add    eax,0x10
c0005836:	e8 83 c2 ff ff       	call   c0001abe <st_dword>
c000583b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000583f:	e8 62 e1 ff ff       	call   c00039a6 <store_xdir>
c0005844:	85 c0                	test   eax,eax
c0005846:	75 0d                	jne    c0005855 <f_sync+0x167>
c0005848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584c:	e8 00 eb ff ff       	call   c0004351 <sync_fs>
c0005851:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005855:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005859:	83 ec 0c             	sub    esp,0xc
c000585c:	56                   	push   esi
c000585d:	e8 2f 2a 00 00       	call   c0008291 <ff_memfree>
c0005862:	83 c4 10             	add    esp,0x10
c0005865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005869:	eb 59                	jmp    c00058c4 <f_sync+0x1d6>
c000586b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000586e:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005871:	e8 b0 c9 ff ff       	call   c0002226 <move_window>
c0005876:	85 c0                	test   eax,eax
c0005878:	75 4a                	jne    c00058c4 <f_sync+0x1d6>
c000587a:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000587d:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005881:	89 f2                	mov    edx,esi
c0005883:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005886:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005888:	e8 5f f3 ff ff       	call   c0004bec <st_clust.isra.1>
c000588d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005890:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005893:	e8 26 c2 ff ff       	call   c0001abe <st_dword>
c0005898:	8d 46 16             	lea    eax,[esi+0x16]
c000589b:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a0:	e8 19 c2 ff ff       	call   c0001abe <st_dword>
c00058a5:	8d 46 12             	lea    eax,[esi+0x12]
c00058a8:	31 d2                	xor    edx,edx
c00058aa:	e8 0b c2 ff ff       	call   c0001aba <st_word>
c00058af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058bb:	e8 91 ea ff ff       	call   c0004351 <sync_fs>
c00058c0:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c4:	83 c4 64             	add    esp,0x64
c00058c7:	5b                   	pop    ebx
c00058c8:	5e                   	pop    esi
c00058c9:	c3                   	ret    

c00058ca <f_close>:
c00058ca:	53                   	push   ebx
c00058cb:	83 ec 24             	sub    esp,0x24
c00058ce:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d2:	53                   	push   ebx
c00058d3:	e8 16 fe ff ff       	call   c00056ee <f_sync>
c00058d8:	83 c4 10             	add    esp,0x10
c00058db:	85 c0                	test   eax,eax
c00058dd:	75 15                	jne    c00058f4 <f_close+0x2a>
c00058df:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e3:	89 d8                	mov    eax,ebx
c00058e5:	e8 61 c8 ff ff       	call   c000214b <validate>
c00058ea:	85 c0                	test   eax,eax
c00058ec:	75 06                	jne    c00058f4 <f_close+0x2a>
c00058ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f4:	83 c4 18             	add    esp,0x18
c00058f7:	5b                   	pop    ebx
c00058f8:	c3                   	ret    

c00058f9 <f_lseek>:
c00058f9:	55                   	push   ebp
c00058fa:	57                   	push   edi
c00058fb:	56                   	push   esi
c00058fc:	53                   	push   ebx
c00058fd:	83 ec 3c             	sub    esp,0x3c
c0005900:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005904:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005908:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590c:	89 04 24             	mov    DWORD PTR [esp],eax
c000590f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005913:	89 d8                	mov    eax,ebx
c0005915:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005919:	e8 2d c8 ff ff       	call   c000214b <validate>
c000591e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005922:	85 c0                	test   eax,eax
c0005924:	0f 85 7a 04 00 00    	jne    c0005da4 <f_lseek+0x4ab>
c000592a:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c000592e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005932:	85 c0                	test   eax,eax
c0005934:	0f 85 6a 04 00 00    	jne    c0005da4 <f_lseek+0x4ab>
c000593a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000593e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005941:	74 0c                	je     c000594f <f_lseek+0x56>
c0005943:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005946:	85 c0                	test   eax,eax
c0005948:	75 1f                	jne    c0005969 <f_lseek+0x70>
c000594a:	e9 b5 01 00 00       	jmp    c0005b04 <f_lseek+0x20b>
c000594f:	83 c9 ff             	or     ecx,0xffffffff
c0005952:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005955:	89 d8                	mov    eax,ebx
c0005957:	e8 e3 d3 ff ff       	call   c0002d3f <fill_last_frag>
c000595c:	85 c0                	test   eax,eax
c000595e:	74 e3                	je     c0005943 <f_lseek+0x4a>
c0005960:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005964:	e9 3b 04 00 00       	jmp    c0005da4 <f_lseek+0x4ab>
c0005969:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c000596e:	0f 85 ac 00 00 00    	jne    c0005a20 <f_lseek+0x127>
c0005974:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005978:	0f 85 a2 00 00 00    	jne    c0005a20 <f_lseek+0x127>
c000597e:	8d 78 04             	lea    edi,[eax+0x4]
c0005981:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005984:	8b 00                	mov    eax,DWORD PTR [eax]
c0005986:	be 02 00 00 00       	mov    esi,0x2
c000598b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000598f:	85 ed                	test   ebp,ebp
c0005991:	74 73                	je     c0005a06 <f_lseek+0x10d>
c0005993:	89 e9                	mov    ecx,ebp
c0005995:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599c:	ff 04 24             	inc    DWORD PTR [esp]
c000599f:	89 ca                	mov    edx,ecx
c00059a1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a5:	89 d8                	mov    eax,ebx
c00059a7:	e8 02 d4 ff ff       	call   c0002dae <get_fat>
c00059ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b0:	83 f8 01             	cmp    eax,0x1
c00059b3:	77 11                	ja     c00059c6 <f_lseek+0xcd>
c00059b5:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059b9:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c1:	e9 de 03 00 00       	jmp    c0005da4 <f_lseek+0x4ab>
c00059c6:	83 f8 ff             	cmp    eax,0xffffffff
c00059c9:	75 11                	jne    c00059dc <f_lseek+0xe3>
c00059cb:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059cf:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059d7:	e9 c8 03 00 00       	jmp    c0005da4 <f_lseek+0x4ab>
c00059dc:	8d 51 01             	lea    edx,[ecx+0x1]
c00059df:	89 c1                	mov    ecx,eax
c00059e1:	39 c2                	cmp    edx,eax
c00059e3:	74 b7                	je     c000599c <f_lseek+0xa3>
c00059e5:	83 c6 02             	add    esi,0x2
c00059e8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ec:	72 0b                	jb     c00059f9 <f_lseek+0x100>
c00059ee:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f1:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f4:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f6:	83 c7 08             	add    edi,0x8
c00059f9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059fd:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a00:	76 04                	jbe    c0005a06 <f_lseek+0x10d>
c0005a02:	89 c5                	mov    ebp,eax
c0005a04:	eb 8d                	jmp    c0005993 <f_lseek+0x9a>
c0005a06:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a09:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a0d:	89 30                	mov    DWORD PTR [eax],esi
c0005a0f:	0f 87 87 03 00 00    	ja     c0005d9c <f_lseek+0x4a3>
c0005a15:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1b:	e9 84 03 00 00       	jmp    c0005da4 <f_lseek+0x4ab>
c0005a20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a32:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a39:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a3d:	73 0f                	jae    c0005a4e <f_lseek+0x155>
c0005a3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a56:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a59:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a60:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a64:	0f 84 3a 03 00 00    	je     c0005da4 <f_lseek+0x4ab>
c0005a6a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a6e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a72:	83 c6 ff             	add    esi,0xffffffff
c0005a75:	89 d8                	mov    eax,ebx
c0005a77:	83 d7 ff             	adc    edi,0xffffffff
c0005a7a:	89 f2                	mov    edx,esi
c0005a7c:	89 f9                	mov    ecx,edi
c0005a7e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a82:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a85:	e8 78 c2 ff ff       	call   c0001d02 <clmt_clust>
c0005a8a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a8e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a91:	89 c2                	mov    edx,eax
c0005a93:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a97:	89 c8                	mov    eax,ecx
c0005a99:	e8 43 c2 ff ff       	call   c0001ce1 <clst2sect>
c0005a9e:	89 d7                	mov    edi,edx
c0005aa0:	09 c7                	or     edi,eax
c0005aa2:	0f 84 0d ff ff ff    	je     c00059b5 <f_lseek+0xbc>
c0005aa8:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aac:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab2:	0f 84 ec 02 00 00    	je     c0005da4 <f_lseek+0x4ab>
c0005ab8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac3:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ac7:	0f ac fe 09          	shrd   esi,edi,0x9
c0005acb:	4d                   	dec    ebp
c0005acc:	31 ff                	xor    edi,edi
c0005ace:	21 ee                	and    esi,ebp
c0005ad0:	01 c6                	add    esi,eax
c0005ad2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad5:	11 d7                	adc    edi,edx
c0005ad7:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ada:	39 fa                	cmp    edx,edi
c0005adc:	75 08                	jne    c0005ae6 <f_lseek+0x1ed>
c0005ade:	39 f0                	cmp    eax,esi
c0005ae0:	0f 84 be 02 00 00    	je     c0005da4 <f_lseek+0x4ab>
c0005ae6:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ae9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aed:	0f 89 80 02 00 00    	jns    c0005d73 <f_lseek+0x47a>
c0005af3:	83 ec 0c             	sub    esp,0xc
c0005af6:	6a 01                	push   0x1
c0005af8:	52                   	push   edx
c0005af9:	50                   	push   eax
c0005afa:	55                   	push   ebp
c0005afb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aff:	e9 5a 02 00 00       	jmp    c0005d5e <f_lseek+0x465>
c0005b04:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b08:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0b:	74 16                	je     c0005b23 <f_lseek+0x22a>
c0005b0d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b12:	76 0f                	jbe    c0005b23 <f_lseek+0x22a>
c0005b14:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b23:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b29:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2c:	89 c7                	mov    edi,eax
c0005b2e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b32:	73 0d                	jae    c0005b41 <f_lseek+0x248>
c0005b34:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b38:	75 07                	jne    c0005b41 <f_lseek+0x248>
c0005b3a:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b41:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b47:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4b:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b52:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b59:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5c:	75 09                	jne    c0005b67 <f_lseek+0x26e>
c0005b5e:	31 f6                	xor    esi,esi
c0005b60:	31 ff                	xor    edi,edi
c0005b62:	e9 af 01 00 00       	jmp    c0005d16 <f_lseek+0x41d>
c0005b67:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6b:	89 d7                	mov    edi,edx
c0005b6d:	c1 e1 09             	shl    ecx,0x9
c0005b70:	09 c7                	or     edi,eax
c0005b72:	89 cd                	mov    ebp,ecx
c0005b74:	74 6d                	je     c0005be3 <f_lseek+0x2ea>
c0005b76:	83 c0 ff             	add    eax,0xffffffff
c0005b79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b7d:	83 d2 ff             	adc    edx,0xffffffff
c0005b80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b87:	83 c0 ff             	add    eax,0xffffffff
c0005b8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b8e:	83 d2 ff             	adc    edx,0xffffffff
c0005b91:	31 ff                	xor    edi,edi
c0005b93:	57                   	push   edi
c0005b94:	51                   	push   ecx
c0005b95:	52                   	push   edx
c0005b96:	50                   	push   eax
c0005b97:	e8 b0 05 02 00       	call   c002614c <__udivdi3>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ba7:	57                   	push   edi
c0005ba8:	55                   	push   ebp
c0005ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb1:	e8 96 05 02 00       	call   c002614c <__udivdi3>
c0005bb6:	83 c4 10             	add    esp,0x10
c0005bb9:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bbd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc1:	19 d1                	sbb    ecx,edx
c0005bc3:	72 1e                	jb     c0005be3 <f_lseek+0x2ea>
c0005bc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bc9:	89 e9                	mov    ecx,ebp
c0005bcb:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bce:	f7 d9                	neg    ecx
c0005bd0:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd3:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bd7:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bda:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bdd:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be1:	eb 28                	jmp    c0005c0b <f_lseek+0x312>
c0005be3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be6:	85 c0                	test   eax,eax
c0005be8:	75 1e                	jne    c0005c08 <f_lseek+0x30f>
c0005bea:	31 d2                	xor    edx,edx
c0005bec:	89 d8                	mov    eax,ebx
c0005bee:	e8 a9 d4 ff ff       	call   c000309c <create_chain>
c0005bf3:	83 f8 01             	cmp    eax,0x1
c0005bf6:	0f 84 b9 fd ff ff    	je     c00059b5 <f_lseek+0xbc>
c0005bfc:	83 f8 ff             	cmp    eax,0xffffffff
c0005bff:	0f 84 c6 fd ff ff    	je     c00059cb <f_lseek+0xd2>
c0005c05:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c08:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0b:	85 c0                	test   eax,eax
c0005c0d:	0f 84 4b ff ff ff    	je     c0005b5e <f_lseek+0x265>
c0005c13:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c17:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c1f:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c22:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c26:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c29:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c30:	0f 83 9d 00 00 00    	jae    c0005cd3 <f_lseek+0x3da>
c0005c36:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c3e:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c41:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c45:	01 f2                	add    edx,esi
c0005c47:	11 f9                	adc    ecx,edi
c0005c49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c4d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c51:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c54:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c57:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5a:	f6 c1 02             	test   cl,0x2
c0005c5d:	74 35                	je     c0005c94 <f_lseek+0x39b>
c0005c5f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c63:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c66:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c69:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c6d:	73 16                	jae    c0005c85 <f_lseek+0x38c>
c0005c6f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c73:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c77:	88 ca                	mov    dl,cl
c0005c79:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7c:	83 ca 40             	or     edx,0x40
c0005c7f:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c82:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c85:	89 c2                	mov    edx,eax
c0005c87:	89 d8                	mov    eax,ebx
c0005c89:	e8 0e d4 ff ff       	call   c000309c <create_chain>
c0005c8e:	85 c0                	test   eax,eax
c0005c90:	75 0b                	jne    c0005c9d <f_lseek+0x3a4>
c0005c92:	eb 30                	jmp    c0005cc4 <f_lseek+0x3cb>
c0005c94:	89 c2                	mov    edx,eax
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	e8 11 d1 ff ff       	call   c0002dae <get_fat>
c0005c9d:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca0:	0f 84 25 fd ff ff    	je     c00059cb <f_lseek+0xd2>
c0005ca6:	83 f8 01             	cmp    eax,0x1
c0005ca9:	0f 86 06 fd ff ff    	jbe    c00059b5 <f_lseek+0xbc>
c0005caf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb3:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb6:	0f 86 f9 fc ff ff    	jbe    c00059b5 <f_lseek+0xbc>
c0005cbc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cbf:	e9 5b ff ff ff       	jmp    c0005c1f <f_lseek+0x326>
c0005cc4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ccb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd6:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cda:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cdd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce0:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce3:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ce9:	0f 84 6f fe ff ff    	je     c0005b5e <f_lseek+0x265>
c0005cef:	89 c2                	mov    edx,eax
c0005cf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf5:	e8 e7 bf ff ff       	call   c0001ce1 <clst2sect>
c0005cfa:	89 d7                	mov    edi,edx
c0005cfc:	09 c7                	or     edi,eax
c0005cfe:	0f 84 b1 fc ff ff    	je     c00059b5 <f_lseek+0xbc>
c0005d04:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d08:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d0f:	c1 ef 09             	shr    edi,0x9
c0005d12:	01 c6                	add    esi,eax
c0005d14:	11 d7                	adc    edi,edx
c0005d16:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d19:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d1f:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d22:	19 d1                	sbb    ecx,edx
c0005d24:	73 0a                	jae    c0005d30 <f_lseek+0x437>
c0005d26:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d29:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2c:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d30:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d35:	74 6d                	je     c0005da4 <f_lseek+0x4ab>
c0005d37:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d3d:	39 fa                	cmp    edx,edi
c0005d3f:	75 04                	jne    c0005d45 <f_lseek+0x44c>
c0005d41:	39 f0                	cmp    eax,esi
c0005d43:	74 5f                	je     c0005da4 <f_lseek+0x4ab>
c0005d45:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d48:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4c:	79 25                	jns    c0005d73 <f_lseek+0x47a>
c0005d4e:	83 ec 0c             	sub    esp,0xc
c0005d51:	6a 01                	push   0x1
c0005d53:	52                   	push   edx
c0005d54:	50                   	push   eax
c0005d55:	55                   	push   ebp
c0005d56:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d5e:	50                   	push   eax
c0005d5f:	e8 af bc ff ff       	call   c0001a13 <disk_write>
c0005d64:	83 c4 20             	add    esp,0x20
c0005d67:	85 c0                	test   eax,eax
c0005d69:	0f 85 5c fc ff ff    	jne    c00059cb <f_lseek+0xd2>
c0005d6f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d73:	83 ec 0c             	sub    esp,0xc
c0005d76:	6a 01                	push   0x1
c0005d78:	57                   	push   edi
c0005d79:	56                   	push   esi
c0005d7a:	55                   	push   ebp
c0005d7b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d7f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d83:	50                   	push   eax
c0005d84:	e8 74 bc ff ff       	call   c00019fd <disk_read>
c0005d89:	83 c4 20             	add    esp,0x20
c0005d8c:	85 c0                	test   eax,eax
c0005d8e:	0f 85 37 fc ff ff    	jne    c00059cb <f_lseek+0xd2>
c0005d94:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d97:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9a:	eb 08                	jmp    c0005da4 <f_lseek+0x4ab>
c0005d9c:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005da8:	83 c4 3c             	add    esp,0x3c
c0005dab:	5b                   	pop    ebx
c0005dac:	5e                   	pop    esi
c0005dad:	5f                   	pop    edi
c0005dae:	5d                   	pop    ebp
c0005daf:	c3                   	ret    

c0005db0 <f_opendir>:
c0005db0:	56                   	push   esi
c0005db1:	b8 09 00 00 00       	mov    eax,0x9
c0005db6:	53                   	push   ebx
c0005db7:	83 ec 24             	sub    esp,0x24
c0005dba:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dbe:	85 db                	test   ebx,ebx
c0005dc0:	0f 84 e6 00 00 00    	je     c0005eac <f_opendir+0xfc>
c0005dc6:	31 c9                	xor    ecx,ecx
c0005dc8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dcc:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd0:	e8 03 c7 ff ff       	call   c00024d8 <mount_volume>
c0005dd5:	85 c0                	test   eax,eax
c0005dd7:	0f 85 c9 00 00 00    	jne    c0005ea6 <f_opendir+0xf6>
c0005ddd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de1:	83 ec 0c             	sub    esp,0xc
c0005de4:	89 03                	mov    DWORD PTR [ebx],eax
c0005de6:	68 60 04 00 00       	push   0x460
c0005deb:	e8 8b 24 00 00       	call   c000827b <ff_memalloc>
c0005df0:	83 c4 10             	add    esp,0x10
c0005df3:	89 c6                	mov    esi,eax
c0005df5:	b8 11 00 00 00       	mov    eax,0x11
c0005dfa:	85 f6                	test   esi,esi
c0005dfc:	0f 84 aa 00 00 00    	je     c0005eac <f_opendir+0xfc>
c0005e02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e06:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e0f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e12:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e16:	89 d8                	mov    eax,ebx
c0005e18:	e8 31 ee ff ff       	call   c0004c4e <follow_path>
c0005e1d:	85 c0                	test   eax,eax
c0005e1f:	75 61                	jne    c0005e82 <f_opendir+0xd2>
c0005e21:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e25:	78 46                	js     c0005e6d <f_opendir+0xbd>
c0005e27:	b8 05 00 00 00       	mov    eax,0x5
c0005e2c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e30:	74 50                	je     c0005e82 <f_opendir+0xd2>
c0005e32:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e36:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e38:	3c 04                	cmp    al,0x4
c0005e3a:	75 26                	jne    c0005e62 <f_opendir+0xb2>
c0005e3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e3f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e42:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e45:	30 d2                	xor    dl,dl
c0005e47:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4b:	09 c2                	or     edx,eax
c0005e4d:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e50:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e53:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e56:	89 da                	mov    edx,ebx
c0005e58:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5b:	e8 b4 ed ff ff       	call   c0004c14 <init_alloc_info.isra.2>
c0005e60:	eb 0b                	jmp    c0005e6d <f_opendir+0xbd>
c0005e62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e65:	e8 59 ed ff ff       	call   c0004bc3 <ld_clust.isra.0>
c0005e6a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e77:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7b:	89 d8                	mov    eax,ebx
c0005e7d:	e8 22 d1 ff ff       	call   c0002fa4 <dir_sdi>
c0005e82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	56                   	push   esi
c0005e8a:	e8 02 24 00 00       	call   c0008291 <ff_memfree>
c0005e8f:	83 c4 10             	add    esp,0x10
c0005e92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e96:	83 f8 04             	cmp    eax,0x4
c0005e99:	74 06                	je     c0005ea1 <f_opendir+0xf1>
c0005e9b:	85 c0                	test   eax,eax
c0005e9d:	74 0d                	je     c0005eac <f_opendir+0xfc>
c0005e9f:	eb 05                	jmp    c0005ea6 <f_opendir+0xf6>
c0005ea1:	b8 05 00 00 00       	mov    eax,0x5
c0005ea6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eac:	83 c4 24             	add    esp,0x24
c0005eaf:	5b                   	pop    ebx
c0005eb0:	5e                   	pop    esi
c0005eb1:	c3                   	ret    

c0005eb2 <f_closedir>:
c0005eb2:	53                   	push   ebx
c0005eb3:	83 ec 18             	sub    esp,0x18
c0005eb6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005eba:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ebe:	89 d8                	mov    eax,ebx
c0005ec0:	e8 86 c2 ff ff       	call   c000214b <validate>
c0005ec5:	85 c0                	test   eax,eax
c0005ec7:	75 06                	jne    c0005ecf <f_closedir+0x1d>
c0005ec9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ecf:	83 c4 18             	add    esp,0x18
c0005ed2:	5b                   	pop    ebx
c0005ed3:	c3                   	ret    

c0005ed4 <f_readdir>:
c0005ed4:	57                   	push   edi
c0005ed5:	56                   	push   esi
c0005ed6:	53                   	push   ebx
c0005ed7:	83 ec 20             	sub    esp,0x20
c0005eda:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ede:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee6:	89 d8                	mov    eax,ebx
c0005ee8:	e8 5e c2 ff ff       	call   c000214b <validate>
c0005eed:	85 c0                	test   eax,eax
c0005eef:	75 77                	jne    c0005f68 <f_readdir+0x94>
c0005ef1:	85 ff                	test   edi,edi
c0005ef3:	75 0b                	jne    c0005f00 <f_readdir+0x2c>
c0005ef5:	31 d2                	xor    edx,edx
c0005ef7:	89 d8                	mov    eax,ebx
c0005ef9:	e8 a6 d0 ff ff       	call   c0002fa4 <dir_sdi>
c0005efe:	eb 68                	jmp    c0005f68 <f_readdir+0x94>
c0005f00:	83 ec 0c             	sub    esp,0xc
c0005f03:	68 60 04 00 00       	push   0x460
c0005f08:	e8 6e 23 00 00       	call   c000827b <ff_memalloc>
c0005f0d:	83 c4 10             	add    esp,0x10
c0005f10:	89 c6                	mov    esi,eax
c0005f12:	b8 11 00 00 00       	mov    eax,0x11
c0005f17:	85 f6                	test   esi,esi
c0005f19:	74 4d                	je     c0005f68 <f_readdir+0x94>
c0005f1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f1f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f25:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f28:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2b:	31 d2                	xor    edx,edx
c0005f2d:	89 d8                	mov    eax,ebx
c0005f2f:	e8 80 d8 ff ff       	call   c00037b4 <dir_read>
c0005f34:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f39:	75 19                	jne    c0005f54 <f_readdir+0x80>
c0005f3b:	89 fa                	mov    edx,edi
c0005f3d:	89 d8                	mov    eax,ebx
c0005f3f:	e8 7e ea ff ff       	call   c00049c2 <get_fileinfo>
c0005f44:	31 d2                	xor    edx,edx
c0005f46:	89 d8                	mov    eax,ebx
c0005f48:	e8 af d5 ff ff       	call   c00034fc <dir_next>
c0005f4d:	83 f8 04             	cmp    eax,0x4
c0005f50:	75 02                	jne    c0005f54 <f_readdir+0x80>
c0005f52:	31 c0                	xor    eax,eax
c0005f54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f58:	83 ec 0c             	sub    esp,0xc
c0005f5b:	56                   	push   esi
c0005f5c:	e8 30 23 00 00       	call   c0008291 <ff_memfree>
c0005f61:	83 c4 10             	add    esp,0x10
c0005f64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	5b                   	pop    ebx
c0005f6c:	5e                   	pop    esi
c0005f6d:	5f                   	pop    edi
c0005f6e:	c3                   	ret    

c0005f6f <f_stat>:
c0005f6f:	57                   	push   edi
c0005f70:	31 c9                	xor    ecx,ecx
c0005f72:	56                   	push   esi
c0005f73:	53                   	push   ebx
c0005f74:	83 ec 50             	sub    esp,0x50
c0005f77:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7b:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f7f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f83:	e8 50 c5 ff ff       	call   c00024d8 <mount_volume>
c0005f88:	89 c3                	mov    ebx,eax
c0005f8a:	85 c0                	test   eax,eax
c0005f8c:	75 67                	jne    c0005ff5 <f_stat+0x86>
c0005f8e:	83 ec 0c             	sub    esp,0xc
c0005f91:	bb 11 00 00 00       	mov    ebx,0x11
c0005f96:	68 60 04 00 00       	push   0x460
c0005f9b:	e8 db 22 00 00       	call   c000827b <ff_memalloc>
c0005fa0:	83 c4 10             	add    esp,0x10
c0005fa3:	89 c6                	mov    esi,eax
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	74 4c                	je     c0005ff5 <f_stat+0x86>
c0005fa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fad:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fb9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fbd:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc1:	e8 88 ec ff ff       	call   c0004c4e <follow_path>
c0005fc6:	89 c3                	mov    ebx,eax
c0005fc8:	85 c0                	test   eax,eax
c0005fca:	75 1d                	jne    c0005fe9 <f_stat+0x7a>
c0005fcc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd1:	78 11                	js     c0005fe4 <f_stat+0x75>
c0005fd3:	85 ff                	test   edi,edi
c0005fd5:	74 12                	je     c0005fe9 <f_stat+0x7a>
c0005fd7:	89 fa                	mov    edx,edi
c0005fd9:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fdd:	e8 e0 e9 ff ff       	call   c00049c2 <get_fileinfo>
c0005fe2:	eb 05                	jmp    c0005fe9 <f_stat+0x7a>
c0005fe4:	bb 06 00 00 00       	mov    ebx,0x6
c0005fe9:	83 ec 0c             	sub    esp,0xc
c0005fec:	56                   	push   esi
c0005fed:	e8 9f 22 00 00       	call   c0008291 <ff_memfree>
c0005ff2:	83 c4 10             	add    esp,0x10
c0005ff5:	83 c4 50             	add    esp,0x50
c0005ff8:	89 d8                	mov    eax,ebx
c0005ffa:	5b                   	pop    ebx
c0005ffb:	5e                   	pop    esi
c0005ffc:	5f                   	pop    edi
c0005ffd:	c3                   	ret    

c0005ffe <f_getfree>:
c0005ffe:	55                   	push   ebp
c0005fff:	31 c9                	xor    ecx,ecx
c0006001:	57                   	push   edi
c0006002:	56                   	push   esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 5c             	sub    esp,0x5c
c0006007:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000600f:	e8 c4 c4 ff ff       	call   c00024d8 <mount_volume>
c0006014:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006018:	85 c0                	test   eax,eax
c000601a:	0f 85 9d 01 00 00    	jne    c00061bd <f_getfree+0x1bf>
c0006020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006024:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006028:	89 02                	mov    DWORD PTR [edx],eax
c000602a:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000602d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006030:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006033:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006037:	39 f2                	cmp    edx,esi
c0006039:	77 0b                	ja     c0006046 <f_getfree+0x48>
c000603b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000603f:	89 10                	mov    DWORD PTR [eax],edx
c0006041:	e9 77 01 00 00       	jmp    c00061bd <f_getfree+0x1bf>
c0006046:	8a 10                	mov    dl,BYTE PTR [eax]
c0006048:	80 fa 01             	cmp    dl,0x1
c000604b:	75 3a                	jne    c0006087 <f_getfree+0x89>
c000604d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006051:	be 02 00 00 00       	mov    esi,0x2
c0006056:	31 db                	xor    ebx,ebx
c0006058:	89 f2                	mov    edx,esi
c000605a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000605e:	e8 4b cd ff ff       	call   c0002dae <get_fat>
c0006063:	83 f8 ff             	cmp    eax,0xffffffff
c0006066:	0f 84 28 01 00 00    	je     c0006194 <f_getfree+0x196>
c000606c:	83 f8 01             	cmp    eax,0x1
c000606f:	0f 84 29 01 00 00    	je     c000619e <f_getfree+0x1a0>
c0006075:	83 d3 00             	adc    ebx,0x0
c0006078:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607c:	46                   	inc    esi
c000607d:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006080:	77 d6                	ja     c0006058 <f_getfree+0x5a>
c0006082:	e9 25 01 00 00       	jmp    c00061ac <f_getfree+0x1ae>
c0006087:	80 fa 04             	cmp    dl,0x4
c000608a:	0f 85 88 00 00 00    	jne    c0006118 <f_getfree+0x11a>
c0006090:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006093:	31 ed                	xor    ebp,ebp
c0006095:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006098:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a0:	31 db                	xor    ebx,ebx
c00060a2:	85 ed                	test   ebp,ebp
c00060a4:	75 3f                	jne    c00060e5 <f_getfree+0xe7>
c00060a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060ae:	83 c0 01             	add    eax,0x1
c00060b1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b5:	83 d2 00             	adc    edx,0x0
c00060b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060c8:	e8 59 c1 ff ff       	call   c0002226 <move_window>
c00060cd:	85 c0                	test   eax,eax
c00060cf:	0f 85 d3 00 00 00    	jne    c00061a8 <f_getfree+0x1aa>
c00060d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060e9:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ec:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f0:	89 cf                	mov    edi,ecx
c00060f2:	85 f6                	test   esi,esi
c00060f4:	74 12                	je     c0006108 <f_getfree+0x10a>
c00060f6:	88 c1                	mov    cl,al
c00060f8:	83 e1 01             	and    ecx,0x1
c00060fb:	80 f9 01             	cmp    cl,0x1
c00060fe:	83 d3 00             	adc    ebx,0x0
c0006101:	d0 e8                	shr    al,1
c0006103:	4e                   	dec    esi
c0006104:	39 fe                	cmp    esi,edi
c0006106:	75 ea                	jne    c00060f2 <f_getfree+0xf4>
c0006108:	45                   	inc    ebp
c0006109:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000610f:	85 f6                	test   esi,esi
c0006111:	75 8f                	jne    c00060a2 <f_getfree+0xa4>
c0006113:	e9 94 00 00 00       	jmp    c00061ac <f_getfree+0x1ae>
c0006118:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611b:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000611e:	31 f6                	xor    esi,esi
c0006120:	31 db                	xor    ebx,ebx
c0006122:	85 f6                	test   esi,esi
c0006124:	75 1b                	jne    c0006141 <f_getfree+0x143>
c0006126:	89 d7                	mov    edi,edx
c0006128:	89 cd                	mov    ebp,ecx
c000612a:	83 c7 01             	add    edi,0x1
c000612d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006131:	83 d5 00             	adc    ebp,0x0
c0006134:	e8 ed c0 ff ff       	call   c0002226 <move_window>
c0006139:	85 c0                	test   eax,eax
c000613b:	75 6b                	jne    c00061a8 <f_getfree+0x1aa>
c000613d:	89 fa                	mov    edx,edi
c000613f:	89 e9                	mov    ecx,ebp
c0006141:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006145:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006149:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000614d:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006150:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006154:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006158:	75 11                	jne    c000616b <f_getfree+0x16d>
c000615a:	e8 e9 b8 ff ff       	call   c0001a48 <ld_word>
c000615f:	66 83 f8 01          	cmp    ax,0x1
c0006163:	83 d3 00             	adc    ebx,0x0
c0006166:	83 c6 02             	add    esi,0x2
c0006169:	eb 13                	jmp    c000617e <f_getfree+0x180>
c000616b:	e8 e5 b8 ff ff       	call   c0001a55 <ld_dword>
c0006170:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006175:	83 f8 01             	cmp    eax,0x1
c0006178:	83 d3 00             	adc    ebx,0x0
c000617b:	83 c6 04             	add    esi,0x4
c000617e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006184:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006188:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618c:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006190:	75 90                	jne    c0006122 <f_getfree+0x124>
c0006192:	eb 18                	jmp    c00061ac <f_getfree+0x1ae>
c0006194:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619c:	eb 0e                	jmp    c00061ac <f_getfree+0x1ae>
c000619e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a6:	eb 04                	jmp    c00061ac <f_getfree+0x1ae>
c00061a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b0:	89 18                	mov    DWORD PTR [eax],ebx
c00061b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b6:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061b9:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c1:	83 c4 5c             	add    esp,0x5c
c00061c4:	5b                   	pop    ebx
c00061c5:	5e                   	pop    esi
c00061c6:	5f                   	pop    edi
c00061c7:	5d                   	pop    ebp
c00061c8:	c3                   	ret    

c00061c9 <f_truncate>:
c00061c9:	56                   	push   esi
c00061ca:	53                   	push   ebx
c00061cb:	83 ec 14             	sub    esp,0x14
c00061ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d6:	89 d8                	mov    eax,ebx
c00061d8:	e8 6e bf ff ff       	call   c000214b <validate>
c00061dd:	89 c6                	mov    esi,eax
c00061df:	85 c0                	test   eax,eax
c00061e1:	0f 85 d2 00 00 00    	jne    c00062b9 <f_truncate+0xf0>
c00061e7:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061eb:	85 f6                	test   esi,esi
c00061ed:	0f 85 c6 00 00 00    	jne    c00062b9 <f_truncate+0xf0>
c00061f3:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061f7:	0f 84 b7 00 00 00    	je     c00062b4 <f_truncate+0xeb>
c00061fd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006200:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006203:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006206:	89 d1                	mov    ecx,edx
c0006208:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620b:	0f 83 a8 00 00 00    	jae    c00062b9 <f_truncate+0xf0>
c0006211:	09 c2                	or     edx,eax
c0006213:	75 15                	jne    c000622a <f_truncate+0x61>
c0006215:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	89 d8                	mov    eax,ebx
c000621c:	e8 7a d0 ff ff       	call   c000329b <remove_chain>
c0006221:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006228:	eb 35                	jmp    c000625f <f_truncate+0x96>
c000622a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000622d:	89 d8                	mov    eax,ebx
c000622f:	e8 7a cb ff ff       	call   c0002dae <get_fat>
c0006234:	89 c2                	mov    edx,eax
c0006236:	b8 01 00 00 00       	mov    eax,0x1
c000623b:	83 fa ff             	cmp    edx,0xffffffff
c000623e:	74 1f                	je     c000625f <f_truncate+0x96>
c0006240:	b8 02 00 00 00       	mov    eax,0x2
c0006245:	83 fa 01             	cmp    edx,0x1
c0006248:	74 15                	je     c000625f <f_truncate+0x96>
c000624a:	31 c0                	xor    eax,eax
c000624c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006250:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006253:	76 0a                	jbe    c000625f <f_truncate+0x96>
c0006255:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006258:	89 d8                	mov    eax,ebx
c000625a:	e8 3c d0 ff ff       	call   c000329b <remove_chain>
c000625f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006262:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006265:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006268:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000626e:	83 ca 40             	or     edx,0x40
c0006271:	85 c0                	test   eax,eax
c0006273:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006276:	75 35                	jne    c00062ad <f_truncate+0xe4>
c0006278:	84 d2                	test   dl,dl
c000627a:	79 3d                	jns    c00062b9 <f_truncate+0xf0>
c000627c:	83 ec 0c             	sub    esp,0xc
c000627f:	8d 43 50             	lea    eax,[ebx+0x50]
c0006282:	6a 01                	push   0x1
c0006284:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006287:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628a:	50                   	push   eax
c000628b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000628f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006293:	50                   	push   eax
c0006294:	e8 7a b7 ff ff       	call   c0001a13 <disk_write>
c0006299:	83 c4 20             	add    esp,0x20
c000629c:	85 c0                	test   eax,eax
c000629e:	75 08                	jne    c00062a8 <f_truncate+0xdf>
c00062a0:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a4:	31 f6                	xor    esi,esi
c00062a6:	eb 11                	jmp    c00062b9 <f_truncate+0xf0>
c00062a8:	b8 01 00 00 00       	mov    eax,0x1
c00062ad:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b0:	89 c6                	mov    esi,eax
c00062b2:	eb 05                	jmp    c00062b9 <f_truncate+0xf0>
c00062b4:	be 07 00 00 00       	mov    esi,0x7
c00062b9:	89 f0                	mov    eax,esi
c00062bb:	83 c4 14             	add    esp,0x14
c00062be:	5b                   	pop    ebx
c00062bf:	5e                   	pop    esi
c00062c0:	c3                   	ret    

c00062c1 <f_unlink>:
c00062c1:	56                   	push   esi
c00062c2:	b9 02 00 00 00       	mov    ecx,0x2
c00062c7:	53                   	push   ebx
c00062c8:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d2:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062d9:	e8 fa c1 ff ff       	call   c00024d8 <mount_volume>
c00062de:	85 c0                	test   eax,eax
c00062e0:	0f 85 55 01 00 00    	jne    c000643b <f_unlink+0x17a>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	83 ec 0c             	sub    esp,0xc
c00062ed:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f1:	68 60 04 00 00       	push   0x460
c00062f6:	e8 80 1f 00 00       	call   c000827b <ff_memalloc>
c00062fb:	83 c4 10             	add    esp,0x10
c00062fe:	89 c3                	mov    ebx,eax
c0006300:	b8 11 00 00 00       	mov    eax,0x11
c0006305:	85 db                	test   ebx,ebx
c0006307:	0f 84 2e 01 00 00    	je     c000643b <f_unlink+0x17a>
c000630d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006311:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006317:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000631d:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006324:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006328:	e8 21 e9 ff ff       	call   c0004c4e <follow_path>
c000632d:	85 c0                	test   eax,eax
c000632f:	0f 85 f2 00 00 00    	jne    c0006427 <f_unlink+0x166>
c0006335:	b8 06 00 00 00       	mov    eax,0x6
c000633a:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006342:	0f 88 df 00 00 00    	js     c0006427 <f_unlink+0x166>
c0006348:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000634d:	74 0a                	je     c0006359 <f_unlink+0x98>
c000634f:	b8 07 00 00 00       	mov    eax,0x7
c0006354:	e9 ce 00 00 00       	jmp    c0006427 <f_unlink+0x166>
c0006359:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000635d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006361:	8a 02                	mov    al,BYTE PTR [edx]
c0006363:	3c 04                	cmp    al,0x4
c0006365:	75 12                	jne    c0006379 <f_unlink+0xb8>
c0006367:	8d 42 10             	lea    eax,[edx+0x10]
c000636a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000636e:	e8 a1 e8 ff ff       	call   c0004c14 <init_alloc_info.isra.2>
c0006373:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006377:	eb 0e                	jmp    c0006387 <f_unlink+0xc6>
c0006379:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006380:	e8 3e e8 ff ff       	call   c0004bc3 <ld_clust.isra.0>
c0006385:	89 c6                	mov    esi,eax
c0006387:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638c:	75 12                	jne    c00063a0 <f_unlink+0xdf>
c000638e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006392:	e8 94 d6 ff ff       	call   c0003a2b <dir_remove>
c0006397:	85 c0                	test   eax,eax
c0006399:	74 6c                	je     c0006407 <f_unlink+0x146>
c000639b:	e9 87 00 00 00       	jmp    c0006427 <f_unlink+0x166>
c00063a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a4:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ab:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b5:	75 21                	jne    c00063d8 <f_unlink+0x117>
c00063b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063bf:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c6:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063cd:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d1:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063d8:	31 d2                	xor    edx,edx
c00063da:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e1:	e8 be cb ff ff       	call   c0002fa4 <dir_sdi>
c00063e6:	85 c0                	test   eax,eax
c00063e8:	75 3d                	jne    c0006427 <f_unlink+0x166>
c00063ea:	31 d2                	xor    edx,edx
c00063ec:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f3:	e8 bc d3 ff ff       	call   c00037b4 <dir_read>
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 84 4f ff ff ff    	je     c000634f <f_unlink+0x8e>
c0006400:	83 f8 04             	cmp    eax,0x4
c0006403:	75 22                	jne    c0006427 <f_unlink+0x166>
c0006405:	eb 87                	jmp    c000638e <f_unlink+0xcd>
c0006407:	85 f6                	test   esi,esi
c0006409:	75 0b                	jne    c0006416 <f_unlink+0x155>
c000640b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000640f:	e8 3d df ff ff       	call   c0004351 <sync_fs>
c0006414:	eb 11                	jmp    c0006427 <f_unlink+0x166>
c0006416:	31 c9                	xor    ecx,ecx
c0006418:	89 f2                	mov    edx,esi
c000641a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000641e:	e8 78 ce ff ff       	call   c000329b <remove_chain>
c0006423:	85 c0                	test   eax,eax
c0006425:	74 e4                	je     c000640b <f_unlink+0x14a>
c0006427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642b:	83 ec 0c             	sub    esp,0xc
c000642e:	53                   	push   ebx
c000642f:	e8 5d 1e 00 00       	call   c0008291 <ff_memfree>
c0006434:	83 c4 10             	add    esp,0x10
c0006437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643b:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006441:	5b                   	pop    ebx
c0006442:	5e                   	pop    esi
c0006443:	c3                   	ret    

c0006444 <f_mkdir>:
c0006444:	57                   	push   edi
c0006445:	b9 02 00 00 00       	mov    ecx,0x2
c000644a:	56                   	push   esi
c000644b:	53                   	push   ebx
c000644c:	83 c4 80             	add    esp,0xffffff80
c000644f:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006453:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645a:	e8 79 c0 ff ff       	call   c00024d8 <mount_volume>
c000645f:	89 c3                	mov    ebx,eax
c0006461:	85 c0                	test   eax,eax
c0006463:	0f 85 fe 01 00 00    	jne    c0006667 <f_mkdir+0x223>
c0006469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646d:	bb 11 00 00 00       	mov    ebx,0x11
c0006472:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006476:	83 ec 0c             	sub    esp,0xc
c0006479:	68 60 04 00 00       	push   0x460
c000647e:	e8 f8 1d 00 00       	call   c000827b <ff_memalloc>
c0006483:	83 c4 10             	add    esp,0x10
c0006486:	89 c7                	mov    edi,eax
c0006488:	85 c0                	test   eax,eax
c000648a:	0f 84 d7 01 00 00    	je     c0006667 <f_mkdir+0x223>
c0006490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006494:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649a:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000649d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a0:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064a7:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ab:	e8 9e e7 ff ff       	call   c0004c4e <follow_path>
c00064b0:	89 c3                	mov    ebx,eax
c00064b2:	85 c0                	test   eax,eax
c00064b4:	74 3e                	je     c00064f4 <f_mkdir+0xb0>
c00064b6:	83 f8 04             	cmp    eax,0x4
c00064b9:	75 3e                	jne    c00064f9 <f_mkdir+0xb5>
c00064bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064bf:	31 d2                	xor    edx,edx
c00064c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064c9:	e8 ce cb ff ff       	call   c000309c <create_chain>
c00064ce:	89 c6                	mov    esi,eax
c00064d0:	85 c0                	test   eax,eax
c00064d2:	74 0c                	je     c00064e0 <f_mkdir+0x9c>
c00064d4:	bb 02 00 00 00       	mov    ebx,0x2
c00064d9:	83 f8 01             	cmp    eax,0x1
c00064dc:	74 07                	je     c00064e5 <f_mkdir+0xa1>
c00064de:	eb 2a                	jmp    c000650a <f_mkdir+0xc6>
c00064e0:	bb 07 00 00 00       	mov    ebx,0x7
c00064e5:	31 c9                	xor    ecx,ecx
c00064e7:	89 f2                	mov    edx,esi
c00064e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ed:	e8 a9 cd ff ff       	call   c000329b <remove_chain>
c00064f2:	eb 05                	jmp    c00064f9 <f_mkdir+0xb5>
c00064f4:	bb 08 00 00 00       	mov    ebx,0x8
c00064f9:	83 ec 0c             	sub    esp,0xc
c00064fc:	57                   	push   edi
c00064fd:	e8 8f 1d 00 00       	call   c0008291 <ff_memfree>
c0006502:	83 c4 10             	add    esp,0x10
c0006505:	e9 5d 01 00 00       	jmp    c0006667 <f_mkdir+0x223>
c000650a:	bb 01 00 00 00       	mov    ebx,0x1
c000650f:	83 f8 ff             	cmp    eax,0xffffffff
c0006512:	74 d1                	je     c00064e5 <f_mkdir+0xa1>
c0006514:	89 f2                	mov    edx,esi
c0006516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651a:	e8 c4 ce ff ff       	call   c00033e3 <dir_clear>
c000651f:	89 c3                	mov    ebx,eax
c0006521:	85 c0                	test   eax,eax
c0006523:	75 c0                	jne    c00064e5 <f_mkdir+0xa1>
c0006525:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006529:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652c:	74 69                	je     c0006597 <f_mkdir+0x153>
c000652e:	b9 0b 00 00 00       	mov    ecx,0xb
c0006533:	83 c0 54             	add    eax,0x54
c0006536:	ba 20 00 00 00       	mov    edx,0x20
c000653b:	e8 9c b5 ff ff       	call   c0001adc <mem_set>
c0006540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006544:	ba 00 00 21 50       	mov    edx,0x50210000
c0006549:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000654d:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006551:	83 c0 6a             	add    eax,0x6a
c0006554:	e8 65 b5 ff ff       	call   c0001abe <st_dword>
c0006559:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655d:	89 f1                	mov    ecx,esi
c000655f:	8d 50 54             	lea    edx,[eax+0x54]
c0006562:	e8 85 e6 ff ff       	call   c0004bec <st_clust.isra.1>
c0006567:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656b:	b9 20 00 00 00       	mov    ecx,0x20
c0006570:	8d 50 54             	lea    edx,[eax+0x54]
c0006573:	83 c0 74             	add    eax,0x74
c0006576:	e8 4c b5 ff ff       	call   c0001ac7 <mem_cpy>
c000657b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000657f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006583:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006587:	8d 50 74             	lea    edx,[eax+0x74]
c000658a:	e8 5d e6 ff ff       	call   c0004bec <st_clust.isra.1>
c000658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006593:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006597:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659b:	e8 2f db ff ff       	call   c00040cf <dir_register>
c00065a0:	89 c3                	mov    ebx,eax
c00065a2:	85 c0                	test   eax,eax
c00065a4:	0f 85 3b ff ff ff    	jne    c00064e5 <f_mkdir+0xa1>
c00065aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b1:	75 74                	jne    c0006627 <f_mkdir+0x1e3>
c00065b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b6:	ba 00 00 21 50       	mov    edx,0x50210000
c00065bb:	83 c0 0c             	add    eax,0xc
c00065be:	e8 fb b4 ff ff       	call   c0001abe <st_dword>
c00065c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c7:	89 f2                	mov    edx,esi
c00065c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065cc:	83 c0 34             	add    eax,0x34
c00065cf:	e8 ea b4 ff ff       	call   c0001abe <st_dword>
c00065d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d8:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065df:	c1 e2 09             	shl    edx,0x9
c00065e2:	83 c0 38             	add    eax,0x38
c00065e5:	e8 d4 b4 ff ff       	call   c0001abe <st_dword>
c00065ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ee:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f5:	c1 e2 09             	shl    edx,0x9
c00065f8:	83 c0 28             	add    eax,0x28
c00065fb:	e8 be b4 ff ff       	call   c0001abe <st_dword>
c0006600:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006604:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006607:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000660e:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006612:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006616:	e8 8b d3 ff ff       	call   c00039a6 <store_xdir>
c000661b:	89 c3                	mov    ebx,eax
c000661d:	85 c0                	test   eax,eax
c000661f:	0f 85 d4 fe ff ff    	jne    c00064f9 <f_mkdir+0xb5>
c0006625:	eb 30                	jmp    c0006657 <f_mkdir+0x213>
c0006627:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006630:	83 c0 16             	add    eax,0x16
c0006633:	e8 86 b4 ff ff       	call   c0001abe <st_dword>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	89 f1                	mov    ecx,esi
c000663e:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006642:	e8 a5 e5 ff ff       	call   c0004bec <st_clust.isra.1>
c0006647:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000664f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006653:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665b:	e8 f1 dc ff ff       	call   c0004351 <sync_fs>
c0006660:	89 c3                	mov    ebx,eax
c0006662:	e9 92 fe ff ff       	jmp    c00064f9 <f_mkdir+0xb5>
c0006667:	83 ec 80             	sub    esp,0xffffff80
c000666a:	89 d8                	mov    eax,ebx
c000666c:	5b                   	pop    ebx
c000666d:	5e                   	pop    esi
c000666e:	5f                   	pop    edi
c000666f:	c3                   	ret    

c0006670 <f_rename>:
c0006670:	55                   	push   ebp
c0006671:	57                   	push   edi
c0006672:	56                   	push   esi
c0006673:	53                   	push   ebx
c0006674:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667a:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006681:	e8 a4 b9 ff ff       	call   c000202a <get_ldnumber>
c0006686:	b9 02 00 00 00       	mov    ecx,0x2
c000668b:	8d 54 24 14          	lea    edx,[esp+0x14]
c000668f:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006696:	e8 3d be ff ff       	call   c00024d8 <mount_volume>
c000669b:	85 c0                	test   eax,eax
c000669d:	0f 85 b5 02 00 00    	jne    c0006958 <f_rename+0x2e8>
c00066a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066a7:	83 ec 0c             	sub    esp,0xc
c00066aa:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066ae:	68 60 04 00 00       	push   0x460
c00066b3:	e8 c3 1b 00 00       	call   c000827b <ff_memalloc>
c00066b8:	83 c4 10             	add    esp,0x10
c00066bb:	89 c3                	mov    ebx,eax
c00066bd:	b8 11 00 00 00       	mov    eax,0x11
c00066c2:	85 db                	test   ebx,ebx
c00066c4:	0f 84 8e 02 00 00    	je     c0006958 <f_rename+0x2e8>
c00066ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066ce:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066da:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e1:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e5:	e8 64 e5 ff ff       	call   c0004c4e <follow_path>
c00066ea:	85 c0                	test   eax,eax
c00066ec:	0f 85 52 02 00 00    	jne    c0006944 <f_rename+0x2d4>
c00066f2:	b8 06 00 00 00       	mov    eax,0x6
c00066f7:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ff:	0f 85 3f 02 00 00    	jne    c0006944 <f_rename+0x2d4>
c0006705:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006709:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670c:	0f 85 05 01 00 00    	jne    c0006817 <f_rename+0x1a7>
c0006712:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006715:	b9 40 00 00 00       	mov    ecx,0x40
c000671a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000671e:	e8 a4 b3 ff ff       	call   c0001ac7 <mem_cpy>
c0006723:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006728:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006733:	e8 8f b3 ff ff       	call   c0001ac7 <mem_cpy>
c0006738:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000673f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006746:	e8 03 e5 ff ff       	call   c0004c4e <follow_path>
c000674b:	85 c0                	test   eax,eax
c000674d:	75 29                	jne    c0006778 <f_rename+0x108>
c000674f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006753:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675a:	74 0a                	je     c0006766 <f_rename+0xf6>
c000675c:	b8 08 00 00 00       	mov    eax,0x8
c0006761:	e9 de 01 00 00       	jmp    c0006944 <f_rename+0x2d4>
c0006766:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676d:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006774:	75 e6                	jne    c000675c <f_rename+0xec>
c0006776:	eb 09                	jmp    c0006781 <f_rename+0x111>
c0006778:	83 f8 04             	cmp    eax,0x4
c000677b:	0f 85 c3 01 00 00    	jne    c0006944 <f_rename+0x2d4>
c0006781:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006788:	e8 42 d9 ff ff       	call   c00040cf <dir_register>
c000678d:	85 c0                	test   eax,eax
c000678f:	0f 85 af 01 00 00    	jne    c0006944 <f_rename+0x2d4>
c0006795:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006799:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679c:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000679f:	89 c5                	mov    ebp,eax
c00067a1:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067a8:	8d 46 24             	lea    eax,[esi+0x24]
c00067ab:	e8 98 b2 ff ff       	call   c0001a48 <ld_word>
c00067b0:	b9 40 00 00 00       	mov    ecx,0x40
c00067b5:	89 c7                	mov    edi,eax
c00067b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067bb:	89 f0                	mov    eax,esi
c00067bd:	e8 05 b3 ff ff       	call   c0001ac7 <mem_cpy>
c00067c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c6:	89 e9                	mov    ecx,ebp
c00067c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cb:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067ce:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067d9:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067dc:	0f b7 d7             	movzx  edx,di
c00067df:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e2:	83 c0 24             	add    eax,0x24
c00067e5:	e8 d0 b2 ff ff       	call   c0001aba <st_word>
c00067ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f1:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f4:	a8 10                	test   al,0x10
c00067f6:	75 06                	jne    c00067fe <f_rename+0x18e>
c00067f8:	83 c8 20             	or     eax,0x20
c00067fb:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 9c d1 ff ff       	call   c00039a6 <store_xdir>
c000680a:	85 c0                	test   eax,eax
c000680c:	0f 84 1c 01 00 00    	je     c000692e <f_rename+0x2be>
c0006812:	e9 2d 01 00 00       	jmp    c0006944 <f_rename+0x2d4>
c0006817:	b9 20 00 00 00       	mov    ecx,0x20
c000681c:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006823:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006827:	e8 9b b2 ff ff       	call   c0001ac7 <mem_cpy>
c000682c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006831:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006835:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683c:	e8 86 b2 ff ff       	call   c0001ac7 <mem_cpy>
c0006841:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006848:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000684f:	e8 fa e3 ff ff       	call   c0004c4e <follow_path>
c0006854:	85 c0                	test   eax,eax
c0006856:	75 27                	jne    c000687f <f_rename+0x20f>
c0006858:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006863:	0f 85 f3 fe ff ff    	jne    c000675c <f_rename+0xec>
c0006869:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006870:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006877:	0f 85 df fe ff ff    	jne    c000675c <f_rename+0xec>
c000687d:	eb 09                	jmp    c0006888 <f_rename+0x218>
c000687f:	83 f8 04             	cmp    eax,0x4
c0006882:	0f 85 bc 00 00 00    	jne    c0006944 <f_rename+0x2d4>
c0006888:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000688f:	e8 3b d8 ff ff       	call   c00040cf <dir_register>
c0006894:	85 c0                	test   eax,eax
c0006896:	0f 85 a8 00 00 00    	jne    c0006944 <f_rename+0x2d4>
c000689c:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a3:	b9 13 00 00 00       	mov    ecx,0x13
c00068a8:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ab:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068af:	e8 13 b2 ff ff       	call   c0001ac7 <mem_cpy>
c00068b4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068b8:	a8 10                	test   al,0x10
c00068ba:	75 03                	jne    c00068bf <f_rename+0x24f>
c00068bc:	83 c8 20             	or     eax,0x20
c00068bf:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ca:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068ce:	74 5e                	je     c000692e <f_rename+0x2be>
c00068d0:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068d7:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068db:	74 51                	je     c000692e <f_rename+0x2be>
c00068dd:	89 f2                	mov    edx,esi
c00068df:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e3:	8a 07                	mov    al,BYTE PTR [edi]
c00068e5:	e8 d9 e2 ff ff       	call   c0004bc3 <ld_clust.isra.0>
c00068ea:	89 c2                	mov    edx,eax
c00068ec:	89 f8                	mov    eax,edi
c00068ee:	e8 ee b3 ff ff       	call   c0001ce1 <clst2sect>
c00068f3:	89 c6                	mov    esi,eax
c00068f5:	89 d1                	mov    ecx,edx
c00068f7:	b8 02 00 00 00       	mov    eax,0x2
c00068fc:	09 f2                	or     edx,esi
c00068fe:	74 44                	je     c0006944 <f_rename+0x2d4>
c0006900:	89 f2                	mov    edx,esi
c0006902:	89 f8                	mov    eax,edi
c0006904:	e8 1d b9 ff ff       	call   c0002226 <move_window>
c0006909:	85 c0                	test   eax,eax
c000690b:	75 37                	jne    c0006944 <f_rename+0x2d4>
c000690d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006911:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006915:	75 17                	jne    c000692e <f_rename+0x2be>
c0006917:	8d 50 74             	lea    edx,[eax+0x74]
c000691a:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006921:	e8 c6 e2 ff ff       	call   c0004bec <st_clust.isra.1>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000692e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006932:	e8 f4 d0 ff ff       	call   c0003a2b <dir_remove>
c0006937:	85 c0                	test   eax,eax
c0006939:	75 09                	jne    c0006944 <f_rename+0x2d4>
c000693b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000693f:	e8 0d da ff ff       	call   c0004351 <sync_fs>
c0006944:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006948:	83 ec 0c             	sub    esp,0xc
c000694b:	53                   	push   ebx
c000694c:	e8 40 19 00 00       	call   c0008291 <ff_memfree>
c0006951:	83 c4 10             	add    esp,0x10
c0006954:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006958:	81 c4 fc 00 00 00    	add    esp,0xfc
c000695e:	5b                   	pop    ebx
c000695f:	5e                   	pop    esi
c0006960:	5f                   	pop    edi
c0006961:	5d                   	pop    ebp
c0006962:	c3                   	ret    

c0006963 <f_chmod>:
c0006963:	57                   	push   edi
c0006964:	b9 02 00 00 00       	mov    ecx,0x2
c0006969:	56                   	push   esi
c000696a:	53                   	push   ebx
c000696b:	83 ec 60             	sub    esp,0x60
c000696e:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006972:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006976:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000697e:	e8 55 bb ff ff       	call   c00024d8 <mount_volume>
c0006983:	85 c0                	test   eax,eax
c0006985:	0f 85 af 00 00 00    	jne    c0006a3a <f_chmod+0xd7>
c000698b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000698f:	83 ec 0c             	sub    esp,0xc
c0006992:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006996:	68 60 04 00 00       	push   0x460
c000699b:	e8 db 18 00 00       	call   c000827b <ff_memalloc>
c00069a0:	83 c4 10             	add    esp,0x10
c00069a3:	89 c6                	mov    esi,eax
c00069a5:	b8 11 00 00 00       	mov    eax,0x11
c00069aa:	85 f6                	test   esi,esi
c00069ac:	0f 84 88 00 00 00    	je     c0006a3a <f_chmod+0xd7>
c00069b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069bc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069bf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c2:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ca:	e8 7f e2 ff ff       	call   c0004c4e <follow_path>
c00069cf:	85 c0                	test   eax,eax
c00069d1:	75 53                	jne    c0006a26 <f_chmod+0xc3>
c00069d3:	b8 06 00 00 00       	mov    eax,0x6
c00069d8:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069dd:	75 47                	jne    c0006a26 <f_chmod+0xc3>
c00069df:	89 f9                	mov    ecx,edi
c00069e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e5:	83 e1 27             	and    ecx,0x27
c00069e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069eb:	75 1d                	jne    c0006a0a <f_chmod+0xa7>
c00069ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f3:	21 cb                	and    ebx,ecx
c00069f5:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f8:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ff:	e8 a2 cf ff ff       	call   c00039a6 <store_xdir>
c0006a04:	85 c0                	test   eax,eax
c0006a06:	75 1e                	jne    c0006a26 <f_chmod+0xc3>
c0006a08:	eb 13                	jmp    c0006a1d <f_chmod+0xba>
c0006a0a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a0e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a11:	21 cb                	and    ebx,ecx
c0006a13:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a16:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a21:	e8 2b d9 ff ff       	call   c0004351 <sync_fs>
c0006a26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2a:	83 ec 0c             	sub    esp,0xc
c0006a2d:	56                   	push   esi
c0006a2e:	e8 5e 18 00 00       	call   c0008291 <ff_memfree>
c0006a33:	83 c4 10             	add    esp,0x10
c0006a36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3a:	83 c4 60             	add    esp,0x60
c0006a3d:	5b                   	pop    ebx
c0006a3e:	5e                   	pop    esi
c0006a3f:	5f                   	pop    edi
c0006a40:	c3                   	ret    

c0006a41 <f_utime>:
c0006a41:	56                   	push   esi
c0006a42:	b9 02 00 00 00       	mov    ecx,0x2
c0006a47:	53                   	push   ebx
c0006a48:	83 ec 64             	sub    esp,0x64
c0006a4b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a4f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a53:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a57:	e8 7c ba ff ff       	call   c00024d8 <mount_volume>
c0006a5c:	85 c0                	test   eax,eax
c0006a5e:	0f 85 b5 00 00 00    	jne    c0006b19 <f_utime+0xd8>
c0006a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a68:	83 ec 0c             	sub    esp,0xc
c0006a6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a6f:	68 60 04 00 00       	push   0x460
c0006a74:	e8 02 18 00 00       	call   c000827b <ff_memalloc>
c0006a79:	83 c4 10             	add    esp,0x10
c0006a7c:	89 c3                	mov    ebx,eax
c0006a7e:	b8 11 00 00 00       	mov    eax,0x11
c0006a83:	85 db                	test   ebx,ebx
c0006a85:	0f 84 8e 00 00 00    	je     c0006b19 <f_utime+0xd8>
c0006a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8f:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a95:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a98:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa3:	e8 a6 e1 ff ff       	call   c0004c4e <follow_path>
c0006aa8:	85 c0                	test   eax,eax
c0006aaa:	75 59                	jne    c0006b05 <f_utime+0xc4>
c0006aac:	b8 06 00 00 00       	mov    eax,0x6
c0006ab1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab6:	75 4d                	jne    c0006b05 <f_utime+0xc4>
c0006ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abc:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac0:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac4:	c1 e2 10             	shl    edx,0x10
c0006ac7:	09 ca                	or     edx,ecx
c0006ac9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006acc:	75 1a                	jne    c0006ae8 <f_utime+0xa7>
c0006ace:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad1:	83 c0 0c             	add    eax,0xc
c0006ad4:	e8 e5 af ff ff       	call   c0001abe <st_dword>
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 c4 ce ff ff       	call   c00039a6 <store_xdir>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 1f                	jne    c0006b05 <f_utime+0xc4>
c0006ae6:	eb 14                	jmp    c0006afc <f_utime+0xbb>
c0006ae8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aec:	83 c0 16             	add    eax,0x16
c0006aef:	e8 ca af ff ff       	call   c0001abe <st_dword>
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b00:	e8 4c d8 ff ff       	call   c0004351 <sync_fs>
c0006b05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b09:	83 ec 0c             	sub    esp,0xc
c0006b0c:	53                   	push   ebx
c0006b0d:	e8 7f 17 00 00       	call   c0008291 <ff_memfree>
c0006b12:	83 c4 10             	add    esp,0x10
c0006b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b19:	83 c4 64             	add    esp,0x64
c0006b1c:	5b                   	pop    ebx
c0006b1d:	5e                   	pop    esi
c0006b1e:	c3                   	ret    

c0006b1f <f_getlabel>:
c0006b1f:	55                   	push   ebp
c0006b20:	31 c9                	xor    ecx,ecx
c0006b22:	57                   	push   edi
c0006b23:	56                   	push   esi
c0006b24:	53                   	push   ebx
c0006b25:	83 ec 6c             	sub    esp,0x6c
c0006b28:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b33:	e8 a0 b9 ff ff       	call   c00024d8 <mount_volume>
c0006b38:	89 c6                	mov    esi,eax
c0006b3a:	85 c0                	test   eax,eax
c0006b3c:	0f 85 c1 01 00 00    	jne    c0006d03 <f_getlabel+0x1e4>
c0006b42:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4a:	0f 84 5f 01 00 00    	je     c0006caf <f_getlabel+0x190>
c0006b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b54:	31 d2                	xor    edx,edx
c0006b56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b66:	e8 39 c4 ff ff       	call   c0002fa4 <dir_sdi>
c0006b6b:	85 c0                	test   eax,eax
c0006b6d:	0f 85 2d 01 00 00    	jne    c0006ca0 <f_getlabel+0x181>
c0006b73:	ba 01 00 00 00       	mov    edx,0x1
c0006b78:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7c:	e8 33 cc ff ff       	call   c00037b4 <dir_read>
c0006b81:	85 c0                	test   eax,eax
c0006b83:	0f 85 17 01 00 00    	jne    c0006ca0 <f_getlabel+0x181>
c0006b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b90:	74 09                	je     c0006b9b <f_getlabel+0x7c>
c0006b92:	31 db                	xor    ebx,ebx
c0006b94:	31 c9                	xor    ecx,ecx
c0006b96:	e9 c8 00 00 00       	jmp    c0006c63 <f_getlabel+0x144>
c0006b9b:	31 ed                	xor    ebp,ebp
c0006b9d:	31 db                	xor    ebx,ebx
c0006b9f:	31 ff                	xor    edi,edi
c0006ba1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba5:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ba9:	39 fa                	cmp    edx,edi
c0006bab:	76 4b                	jbe    c0006bf8 <f_getlabel+0xd9>
c0006bad:	47                   	inc    edi
c0006bae:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb1:	01 d0                	add    eax,edx
c0006bb3:	e8 90 ae ff ff       	call   c0001a48 <ld_word>
c0006bb8:	66 85 ed             	test   bp,bp
c0006bbb:	75 0d                	jne    c0006bca <f_getlabel+0xab>
c0006bbd:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bc8:	76 28                	jbe    c0006bf2 <f_getlabel+0xd3>
c0006bca:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd1:	89 e9                	mov    ecx,ebp
c0006bd3:	01 da                	add    edx,ebx
c0006bd5:	c1 e1 10             	shl    ecx,0x10
c0006bd8:	0f b7 c0             	movzx  eax,ax
c0006bdb:	09 c8                	or     eax,ecx
c0006bdd:	b9 04 00 00 00       	mov    ecx,0x4
c0006be2:	e8 01 b0 ff ff       	call   c0001be8 <put_utf>
c0006be7:	84 c0                	test   al,al
c0006be9:	74 0b                	je     c0006bf6 <f_getlabel+0xd7>
c0006beb:	0f b6 c0             	movzx  eax,al
c0006bee:	01 c3                	add    ebx,eax
c0006bf0:	31 c0                	xor    eax,eax
c0006bf2:	89 c5                	mov    ebp,eax
c0006bf4:	eb ab                	jmp    c0006ba1 <f_getlabel+0x82>
c0006bf6:	31 db                	xor    ebx,ebx
c0006bf8:	66 85 ed             	test   bp,bp
c0006bfb:	74 02                	je     c0006bff <f_getlabel+0xe0>
c0006bfd:	31 db                	xor    ebx,ebx
c0006bff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c06:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0a:	e9 a0 00 00 00       	jmp    c0006caf <f_getlabel+0x190>
c0006c0f:	83 ff 0b             	cmp    edi,0xb
c0006c12:	74 11                	je     c0006c25 <f_getlabel+0x106>
c0006c14:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c1d:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c20:	c1 e0 08             	shl    eax,0x8
c0006c23:	09 c2                	or     edx,eax
c0006c25:	0f b7 d2             	movzx  edx,dx
c0006c28:	50                   	push   eax
c0006c29:	50                   	push   eax
c0006c2a:	68 b5 01 00 00       	push   0x1b5
c0006c2f:	52                   	push   edx
c0006c30:	e8 03 17 00 00       	call   c0008338 <ff_oem2uni>
c0006c35:	83 c4 10             	add    esp,0x10
c0006c38:	66 85 c0             	test   ax,ax
c0006c3b:	74 46                	je     c0006c83 <f_getlabel+0x164>
c0006c3d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c44:	0f b7 c0             	movzx  eax,ax
c0006c47:	01 da                	add    edx,ebx
c0006c49:	b9 04 00 00 00       	mov    ecx,0x4
c0006c4e:	e8 95 af ff ff       	call   c0001be8 <put_utf>
c0006c53:	84 c0                	test   al,al
c0006c55:	74 2c                	je     c0006c83 <f_getlabel+0x164>
c0006c57:	0f b6 c0             	movzx  eax,al
c0006c5a:	01 c3                	add    ebx,eax
c0006c5c:	83 ff 0b             	cmp    edi,0xb
c0006c5f:	74 24                	je     c0006c85 <f_getlabel+0x166>
c0006c61:	89 f9                	mov    ecx,edi
c0006c63:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c67:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c6f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c78:	e8 9f ae ff ff       	call   c0001b1c <dbc_1st>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	74 a4                	je     c0006c25 <f_getlabel+0x106>
c0006c81:	eb 8c                	jmp    c0006c0f <f_getlabel+0xf0>
c0006c83:	31 db                	xor    ebx,ebx
c0006c85:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c8f:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c96:	74 17                	je     c0006caf <f_getlabel+0x190>
c0006c98:	4b                   	dec    ebx
c0006c99:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9c:	74 ee                	je     c0006c8c <f_getlabel+0x16d>
c0006c9e:	eb 0f                	jmp    c0006caf <f_getlabel+0x190>
c0006ca0:	83 f8 04             	cmp    eax,0x4
c0006ca3:	75 5c                	jne    c0006d01 <f_getlabel+0x1e2>
c0006ca5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cac:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006caf:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cb7:	74 4a                	je     c0006d03 <f_getlabel+0x1e4>
c0006cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cbd:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc0:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc3:	e8 5e b5 ff ff       	call   c0002226 <move_window>
c0006cc8:	89 c6                	mov    esi,eax
c0006cca:	85 c0                	test   eax,eax
c0006ccc:	75 35                	jne    c0006d03 <f_getlabel+0x1e4>
c0006cce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd2:	b8 43 00 00 00       	mov    eax,0x43
c0006cd7:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cd9:	80 f9 03             	cmp    cl,0x3
c0006cdc:	74 0f                	je     c0006ced <f_getlabel+0x1ce>
c0006cde:	31 c0                	xor    eax,eax
c0006ce0:	80 f9 04             	cmp    cl,0x4
c0006ce3:	0f 94 c0             	sete   al
c0006ce6:	48                   	dec    eax
c0006ce7:	83 e0 c3             	and    eax,0xffffffc3
c0006cea:	83 c0 64             	add    eax,0x64
c0006ced:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf1:	e8 5f ad ff ff       	call   c0001a55 <ld_dword>
c0006cf6:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cfd:	89 07                	mov    DWORD PTR [edi],eax
c0006cff:	eb 02                	jmp    c0006d03 <f_getlabel+0x1e4>
c0006d01:	89 c6                	mov    esi,eax
c0006d03:	83 c4 6c             	add    esp,0x6c
c0006d06:	89 f0                	mov    eax,esi
c0006d08:	5b                   	pop    ebx
c0006d09:	5e                   	pop    esi
c0006d0a:	5f                   	pop    edi
c0006d0b:	5d                   	pop    ebp
c0006d0c:	c3                   	ret    

c0006d0d <f_setlabel>:
c0006d0d:	56                   	push   esi
c0006d0e:	b9 02 00 00 00       	mov    ecx,0x2
c0006d13:	53                   	push   ebx
c0006d14:	83 ec 74             	sub    esp,0x74
c0006d17:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d22:	e8 b1 b7 ff ff       	call   c00024d8 <mount_volume>
c0006d27:	89 c6                	mov    esi,eax
c0006d29:	85 c0                	test   eax,eax
c0006d2b:	0f 85 41 02 00 00    	jne    c0006f72 <f_setlabel+0x265>
c0006d31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d35:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d38:	0f 85 8e 00 00 00    	jne    c0006dcc <f_setlabel+0xbf>
c0006d3e:	b9 16 00 00 00       	mov    ecx,0x16
c0006d43:	31 d2                	xor    edx,edx
c0006d45:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d49:	31 db                	xor    ebx,ebx
c0006d4b:	e8 8c ad ff ff       	call   c0001adc <mem_set>
c0006d50:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d57:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5a:	0f 86 0a 01 00 00    	jbe    c0006e6a <f_setlabel+0x15d>
c0006d60:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d67:	e8 b6 ad ff ff       	call   c0001b22 <tchar2uni>
c0006d6c:	89 c6                	mov    esi,eax
c0006d6e:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d73:	76 2a                	jbe    c0006d9f <f_setlabel+0x92>
c0006d75:	83 f8 ff             	cmp    eax,0xffffffff
c0006d78:	74 05                	je     c0006d7f <f_setlabel+0x72>
c0006d7a:	83 fb 09             	cmp    ebx,0x9
c0006d7d:	76 0a                	jbe    c0006d89 <f_setlabel+0x7c>
c0006d7f:	be 06 00 00 00       	mov    esi,0x6
c0006d84:	e9 e9 01 00 00       	jmp    c0006f72 <f_setlabel+0x265>
c0006d89:	89 c2                	mov    edx,eax
c0006d8b:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d8f:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d92:	c1 ea 10             	shr    edx,0x10
c0006d95:	01 c8                	add    eax,ecx
c0006d97:	43                   	inc    ebx
c0006d98:	e8 1d ad ff ff       	call   c0001aba <st_word>
c0006d9d:	eb 04                	jmp    c0006da3 <f_setlabel+0x96>
c0006d9f:	85 c0                	test   eax,eax
c0006da1:	74 dc                	je     c0006d7f <f_setlabel+0x72>
c0006da3:	89 f2                	mov    edx,esi
c0006da5:	b8 37 8b 02 c0       	mov    eax,0xc0028b37
c0006daa:	e8 5b ad ff ff       	call   c0001b0a <chk_chr>
c0006daf:	85 c0                	test   eax,eax
c0006db1:	75 cc                	jne    c0006d7f <f_setlabel+0x72>
c0006db3:	83 fb 0a             	cmp    ebx,0xa
c0006db6:	77 c7                	ja     c0006d7f <f_setlabel+0x72>
c0006db8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbb:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dbf:	0f b7 d6             	movzx  edx,si
c0006dc2:	01 c8                	add    eax,ecx
c0006dc4:	43                   	inc    ebx
c0006dc5:	e8 f0 ac ff ff       	call   c0001aba <st_word>
c0006dca:	eb 84                	jmp    c0006d50 <f_setlabel+0x43>
c0006dcc:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd1:	ba 20 00 00 00       	mov    edx,0x20
c0006dd6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dda:	31 db                	xor    ebx,ebx
c0006ddc:	e8 fb ac ff ff       	call   c0001adc <mem_set>
c0006de1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006de8:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006deb:	76 60                	jbe    c0006e4d <f_setlabel+0x140>
c0006ded:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df4:	e8 29 ad ff ff       	call   c0001b22 <tchar2uni>
c0006df9:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dfe:	0f 87 7b ff ff ff    	ja     c0006d7f <f_setlabel+0x72>
c0006e04:	83 ec 0c             	sub    esp,0xc
c0006e07:	50                   	push   eax
c0006e08:	e8 97 15 00 00       	call   c00083a4 <ff_wtoupper>
c0006e0d:	5a                   	pop    edx
c0006e0e:	59                   	pop    ecx
c0006e0f:	68 b5 01 00 00       	push   0x1b5
c0006e14:	50                   	push   eax
c0006e15:	e8 8e 14 00 00       	call   c00082a8 <ff_uni2oem>
c0006e1a:	83 c4 10             	add    esp,0x10
c0006e1d:	89 c6                	mov    esi,eax
c0006e1f:	66 85 c0             	test   ax,ax
c0006e22:	0f 84 57 ff ff ff    	je     c0006d7f <f_setlabel+0x72>
c0006e28:	0f b7 d0             	movzx  edx,ax
c0006e2b:	b8 30 8b 02 c0       	mov    eax,0xc0028b30
c0006e30:	e8 d5 ac ff ff       	call   c0001b0a <chk_chr>
c0006e35:	85 c0                	test   eax,eax
c0006e37:	0f 85 42 ff ff ff    	jne    c0006d7f <f_setlabel+0x72>
c0006e3d:	66 81 fe ff 00       	cmp    si,0xff
c0006e42:	0f 87 14 01 00 00    	ja     c0006f5c <f_setlabel+0x24f>
c0006e48:	e9 fa 00 00 00       	jmp    c0006f47 <f_setlabel+0x23a>
c0006e4d:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e52:	0f 84 27 ff ff ff    	je     c0006d7f <f_setlabel+0x72>
c0006e58:	85 db                	test   ebx,ebx
c0006e5a:	74 0e                	je     c0006e6a <f_setlabel+0x15d>
c0006e5c:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e5f:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e64:	75 04                	jne    c0006e6a <f_setlabel+0x15d>
c0006e66:	89 c3                	mov    ebx,eax
c0006e68:	eb ee                	jmp    c0006e58 <f_setlabel+0x14b>
c0006e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e6e:	31 d2                	xor    edx,edx
c0006e70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e74:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e80:	e8 1f c1 ff ff       	call   c0002fa4 <dir_sdi>
c0006e85:	89 c6                	mov    esi,eax
c0006e87:	85 c0                	test   eax,eax
c0006e89:	0f 85 e3 00 00 00    	jne    c0006f72 <f_setlabel+0x265>
c0006e8f:	ba 01 00 00 00       	mov    edx,0x1
c0006e94:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e98:	e8 17 c9 ff ff       	call   c00037b4 <dir_read>
c0006e9d:	85 c0                	test   eax,eax
c0006e9f:	75 21                	jne    c0006ec2 <f_setlabel+0x1b5>
c0006ea1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea9:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eac:	74 5d                	je     c0006f0b <f_setlabel+0x1fe>
c0006eae:	85 db                	test   ebx,ebx
c0006eb0:	74 0b                	je     c0006ebd <f_setlabel+0x1b0>
c0006eb2:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eb7:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebb:	eb 70                	jmp    c0006f2d <f_setlabel+0x220>
c0006ebd:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec0:	eb 70                	jmp    c0006f32 <f_setlabel+0x225>
c0006ec2:	83 f8 04             	cmp    eax,0x4
c0006ec5:	75 7c                	jne    c0006f43 <f_setlabel+0x236>
c0006ec7:	85 db                	test   ebx,ebx
c0006ec9:	0f 84 a3 00 00 00    	je     c0006f72 <f_setlabel+0x265>
c0006ecf:	ba 01 00 00 00       	mov    edx,0x1
c0006ed4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ed8:	e8 51 ca ff ff       	call   c000392e <dir_alloc>
c0006edd:	89 c6                	mov    esi,eax
c0006edf:	85 c0                	test   eax,eax
c0006ee1:	0f 85 8b 00 00 00    	jne    c0006f72 <f_setlabel+0x265>
c0006ee7:	31 d2                	xor    edx,edx
c0006ee9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eed:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef2:	e8 e5 ab ff ff       	call   c0001adc <mem_set>
c0006ef7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006efe:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f02:	75 18                	jne    c0006f1c <f_setlabel+0x20f>
c0006f04:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f07:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0b:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f0e:	b9 16 00 00 00       	mov    ecx,0x16
c0006f13:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f17:	83 c0 02             	add    eax,0x2
c0006f1a:	eb 9b                	jmp    c0006eb7 <f_setlabel+0x1aa>
c0006f1c:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f20:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f25:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f29:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2d:	e8 95 ab ff ff       	call   c0001ac7 <mem_cpy>
c0006f32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f36:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f3e:	e8 0e d4 ff ff       	call   c0004351 <sync_fs>
c0006f43:	89 c6                	mov    esi,eax
c0006f45:	eb 2b                	jmp    c0006f72 <f_setlabel+0x265>
c0006f47:	83 fb 0a             	cmp    ebx,0xa
c0006f4a:	0f 87 2f fe ff ff    	ja     c0006d7f <f_setlabel+0x72>
c0006f50:	89 f0                	mov    eax,esi
c0006f52:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f56:	43                   	inc    ebx
c0006f57:	e9 85 fe ff ff       	jmp    c0006de1 <f_setlabel+0xd4>
c0006f5c:	83 fb 09             	cmp    ebx,0x9
c0006f5f:	0f 87 1a fe ff ff    	ja     c0006d7f <f_setlabel+0x72>
c0006f65:	89 f0                	mov    eax,esi
c0006f67:	66 c1 e8 08          	shr    ax,0x8
c0006f6b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f6f:	43                   	inc    ebx
c0006f70:	eb de                	jmp    c0006f50 <f_setlabel+0x243>
c0006f72:	89 f0                	mov    eax,esi
c0006f74:	83 c4 74             	add    esp,0x74
c0006f77:	5b                   	pop    ebx
c0006f78:	5e                   	pop    esi
c0006f79:	c3                   	ret    

c0006f7a <f_forward>:
c0006f7a:	55                   	push   ebp
c0006f7b:	57                   	push   edi
c0006f7c:	56                   	push   esi
c0006f7d:	53                   	push   ebx
c0006f7e:	83 ec 2c             	sub    esp,0x2c
c0006f81:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f85:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f8f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f93:	89 d8                	mov    eax,ebx
c0006f95:	e8 b1 b1 ff ff       	call   c000214b <validate>
c0006f9a:	89 c5                	mov    ebp,eax
c0006f9c:	85 c0                	test   eax,eax
c0006f9e:	0f 85 aa 01 00 00    	jne    c000714e <f_forward+0x1d4>
c0006fa4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fa8:	85 ed                	test   ebp,ebp
c0006faa:	0f 85 9e 01 00 00    	jne    c000714e <f_forward+0x1d4>
c0006fb0:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb4:	0f 84 8f 01 00 00    	je     c0007149 <f_forward+0x1cf>
c0006fba:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fbd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc0:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	bf 00 00 00 00       	mov    edi,0x0
c0006fc8:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fcb:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fcf:	89 d1                	mov    ecx,edx
c0006fd1:	19 f9                	sbb    ecx,edi
c0006fd3:	0f 83 cf 00 00 00    	jae    c00070a8 <f_forward+0x12e>
c0006fd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fdd:	e9 c6 00 00 00       	jmp    c00070a8 <f_forward+0x12e>
c0006fe2:	50                   	push   eax
c0006fe3:	50                   	push   eax
c0006fe4:	6a 00                	push   0x0
c0006fe6:	6a 00                	push   0x0
c0006fe8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fec:	83 c4 10             	add    esp,0x10
c0006fef:	85 c0                	test   eax,eax
c0006ff1:	0f 84 57 01 00 00    	je     c000714e <f_forward+0x1d4>
c0006ff7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006ffe:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007001:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007005:	89 d7                	mov    edi,edx
c0007007:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700a:	89 c6                	mov    esi,eax
c000700c:	0f ac fe 09          	shrd   esi,edi,0x9
c0007010:	21 ce                	and    esi,ecx
c0007012:	89 c1                	mov    ecx,eax
c0007014:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701a:	0f 84 98 00 00 00    	je     c00070b8 <f_forward+0x13e>
c0007020:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007024:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000702d:	e8 af ac ff ff       	call   c0001ce1 <clst2sect>
c0007032:	89 d7                	mov    edi,edx
c0007034:	09 c7                	or     edi,eax
c0007036:	0f 84 9e 00 00 00    	je     c00070da <f_forward+0x160>
c000703c:	31 ff                	xor    edi,edi
c000703e:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007041:	01 c6                	add    esi,eax
c0007043:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007047:	11 d7                	adc    edi,edx
c0007049:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000704f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007053:	39 fa                	cmp    edx,edi
c0007055:	0f 85 a2 00 00 00    	jne    c00070fd <f_forward+0x183>
c000705b:	39 f0                	cmp    eax,esi
c000705d:	0f 85 9a 00 00 00    	jne    c00070fd <f_forward+0x183>
c0007063:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007066:	ba 00 02 00 00       	mov    edx,0x200
c000706b:	25 ff 01 00 00       	and    eax,0x1ff
c0007070:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007074:	29 c2                	sub    edx,eax
c0007076:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007079:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707c:	39 d1                	cmp    ecx,edx
c000707e:	76 02                	jbe    c0007082 <f_forward+0x108>
c0007080:	89 d1                	mov    ecx,edx
c0007082:	8d 73 50             	lea    esi,[ebx+0x50]
c0007085:	52                   	push   edx
c0007086:	01 c6                	add    esi,eax
c0007088:	52                   	push   edx
c0007089:	51                   	push   ecx
c000708a:	56                   	push   esi
c000708b:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000708f:	83 c4 10             	add    esp,0x10
c0007092:	85 c0                	test   eax,eax
c0007094:	74 44                	je     c00070da <f_forward+0x160>
c0007096:	31 ff                	xor    edi,edi
c0007098:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709b:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000709e:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a2:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a6:	01 07                	add    DWORD PTR [edi],eax
c00070a8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070ad:	0f 85 2f ff ff ff    	jne    c0006fe2 <f_forward+0x68>
c00070b3:	e9 96 00 00 00       	jmp    c000714e <f_forward+0x1d4>
c00070b8:	85 f6                	test   esi,esi
c00070ba:	0f 85 60 ff ff ff    	jne    c0007020 <f_forward+0xa6>
c00070c0:	89 d7                	mov    edi,edx
c00070c2:	09 c7                	or     edi,eax
c00070c4:	75 05                	jne    c00070cb <f_forward+0x151>
c00070c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070c9:	eb 0a                	jmp    c00070d5 <f_forward+0x15b>
c00070cb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070ce:	89 d8                	mov    eax,ebx
c00070d0:	e8 d9 bc ff ff       	call   c0002dae <get_fat>
c00070d5:	83 f8 01             	cmp    eax,0x1
c00070d8:	77 0b                	ja     c00070e5 <f_forward+0x16b>
c00070da:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070de:	bd 02 00 00 00       	mov    ebp,0x2
c00070e3:	eb 69                	jmp    c000714e <f_forward+0x1d4>
c00070e5:	83 f8 ff             	cmp    eax,0xffffffff
c00070e8:	75 0b                	jne    c00070f5 <f_forward+0x17b>
c00070ea:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070ee:	bd 01 00 00 00       	mov    ebp,0x1
c00070f3:	eb 59                	jmp    c000714e <f_forward+0x1d4>
c00070f5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070f8:	e9 23 ff ff ff       	jmp    c0007020 <f_forward+0xa6>
c00070fd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007101:	79 20                	jns    c0007123 <f_forward+0x1a9>
c0007103:	83 ec 0c             	sub    esp,0xc
c0007106:	6a 01                	push   0x1
c0007108:	52                   	push   edx
c0007109:	50                   	push   eax
c000710a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000710e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007112:	50                   	push   eax
c0007113:	e8 fb a8 ff ff       	call   c0001a13 <disk_write>
c0007118:	83 c4 20             	add    esp,0x20
c000711b:	85 c0                	test   eax,eax
c000711d:	75 cb                	jne    c00070ea <f_forward+0x170>
c000711f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007123:	83 ec 0c             	sub    esp,0xc
c0007126:	6a 01                	push   0x1
c0007128:	57                   	push   edi
c0007129:	56                   	push   esi
c000712a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000712e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007132:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007136:	50                   	push   eax
c0007137:	e8 c1 a8 ff ff       	call   c00019fd <disk_read>
c000713c:	83 c4 20             	add    esp,0x20
c000713f:	85 c0                	test   eax,eax
c0007141:	0f 84 1c ff ff ff    	je     c0007063 <f_forward+0xe9>
c0007147:	eb a1                	jmp    c00070ea <f_forward+0x170>
c0007149:	bd 07 00 00 00       	mov    ebp,0x7
c000714e:	83 c4 2c             	add    esp,0x2c
c0007151:	89 e8                	mov    eax,ebp
c0007153:	5b                   	pop    ebx
c0007154:	5e                   	pop    esi
c0007155:	5f                   	pop    edi
c0007156:	5d                   	pop    ebp
c0007157:	c3                   	ret    

c0007158 <f_mkfs>:
c0007158:	55                   	push   ebp
c0007159:	57                   	push   edi
c000715a:	56                   	push   esi
c000715b:	53                   	push   ebx
c000715c:	bb 0b 00 00 00       	mov    ebx,0xb
c0007161:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007167:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000716e:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007175:	e8 b0 ae ff ff       	call   c000202a <get_ldnumber>
c000717a:	85 c0                	test   eax,eax
c000717c:	0f 88 ec 10 00 00    	js     c000826e <f_mkfs+0x1116>
c0007182:	8b 14 85 60 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd25a0]
c0007189:	85 d2                	test   edx,edx
c000718b:	74 03                	je     c0007190 <f_mkfs+0x38>
c000718d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007190:	85 f6                	test   esi,esi
c0007192:	75 05                	jne    c0007199 <f_mkfs+0x41>
c0007194:	be 20 8b 02 c0       	mov    esi,0xc0028b20
c0007199:	83 ec 0c             	sub    esp,0xc
c000719c:	0f b6 c0             	movzx  eax,al
c000719f:	bb 03 00 00 00       	mov    ebx,0x3
c00071a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ac:	e8 49 a8 ff ff       	call   c00019fa <disk_initialize>
c00071b1:	83 c4 10             	add    esp,0x10
c00071b4:	a8 01                	test   al,0x1
c00071b6:	0f 85 b2 10 00 00    	jne    c000826e <f_mkfs+0x1116>
c00071bc:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c1:	a8 04                	test   al,0x4
c00071c3:	0f 85 a5 10 00 00    	jne    c000826e <f_mkfs+0x1116>
c00071c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d0:	85 c0                	test   eax,eax
c00071d2:	75 20                	jne    c00071f4 <f_mkfs+0x9c>
c00071d4:	51                   	push   ecx
c00071d5:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071d9:	50                   	push   eax
c00071da:	6a 03                	push   0x3
c00071dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e0:	e8 44 a8 ff ff       	call   c0001a29 <disk_ioctl>
c00071e5:	83 c4 10             	add    esp,0x10
c00071e8:	85 c0                	test   eax,eax
c00071ea:	74 08                	je     c00071f4 <f_mkfs+0x9c>
c00071ec:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071f8:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007200:	77 04                	ja     c0007206 <f_mkfs+0xae>
c0007202:	85 c2                	test   edx,eax
c0007204:	74 08                	je     c000720e <f_mkfs+0xb6>
c0007206:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000720e:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007211:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007215:	48                   	dec    eax
c0007216:	3c 01                	cmp    al,0x1
c0007218:	76 05                	jbe    c000721f <f_mkfs+0xc7>
c000721a:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000721f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007222:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007226:	48                   	dec    eax
c0007227:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722c:	77 07                	ja     c0007235 <f_mkfs+0xdd>
c000722e:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007233:	74 08                	je     c000723d <f_mkfs+0xe5>
c0007235:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000723d:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007240:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007246:	77 07                	ja     c000724f <f_mkfs+0xf7>
c0007248:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724b:	85 d8                	test   eax,ebx
c000724d:	74 02                	je     c0007251 <f_mkfs+0xf9>
c000724f:	31 db                	xor    ebx,ebx
c0007251:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725c:	77 0a                	ja     c0007268 <f_mkfs+0x110>
c000725e:	bb 11 00 00 00       	mov    ebx,0x11
c0007263:	e9 06 10 00 00       	jmp    c000826e <f_mkfs+0x1116>
c0007268:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000726f:	8b 36                	mov    esi,DWORD PTR [esi]
c0007271:	85 ed                	test   ebp,ebp
c0007273:	75 1e                	jne    c0007293 <f_mkfs+0x13b>
c0007275:	83 ec 0c             	sub    esp,0xc
c0007278:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000727f:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007284:	50                   	push   eax
c0007285:	e8 f1 0f 00 00       	call   c000827b <ff_memalloc>
c000728a:	83 c4 10             	add    esp,0x10
c000728d:	89 c5                	mov    ebp,eax
c000728f:	85 c0                	test   eax,eax
c0007291:	74 cb                	je     c000725e <f_mkfs+0x106>
c0007293:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729b:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a3:	52                   	push   edx
c00072a4:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072a8:	50                   	push   eax
c00072a9:	6a 01                	push   0x1
c00072ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072af:	e8 75 a7 ff ff       	call   c0001a29 <disk_ioctl>
c00072b4:	83 c4 10             	add    esp,0x10
c00072b7:	85 c0                	test   eax,eax
c00072b9:	0f 85 4a 0f 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c00072bf:	89 f1                	mov    ecx,esi
c00072c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072c9:	83 e1 0f             	and    ecx,0xf
c00072cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d4:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072d8:	83 e6 08             	and    esi,0x8
c00072db:	75 56                	jne    c0007333 <f_mkfs+0x1db>
c00072dd:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e1:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e5:	83 ff 00             	cmp    edi,0x0
c00072e8:	76 20                	jbe    c000730a <f_mkfs+0x1b2>
c00072ea:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072ef:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072f7:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072fd:	83 d7 ff             	adc    edi,0xffffffff
c0007300:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007304:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007308:	eb 21                	jmp    c000732b <f_mkfs+0x1d3>
c000730a:	ba 3f 00 00 00       	mov    edx,0x3f
c000730f:	39 f2                	cmp    edx,esi
c0007311:	19 f8                	sbb    eax,edi
c0007313:	73 1e                	jae    c0007333 <f_mkfs+0x1db>
c0007315:	83 c6 c1             	add    esi,0xffffffc1
c0007318:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007320:	83 d7 ff             	adc    edi,0xffffffff
c0007323:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007327:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007333:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007337:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733b:	89 04 24             	mov    DWORD PTR [esp],eax
c000733e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007342:	31 c0                	xor    eax,eax
c0007344:	ba 7f 00 00 00       	mov    edx,0x7f
c0007349:	89 c7                	mov    edi,eax
c000734b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000734e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007352:	0f 83 c5 0a 00 00    	jae    c0007e1d <f_mkfs+0xcc5>
c0007358:	89 df                	mov    edi,ebx
c000735a:	c1 ef 09             	shr    edi,0x9
c000735d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007361:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007368:	c1 ef 09             	shr    edi,0x9
c000736b:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007370:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007374:	74 29                	je     c000739f <f_mkfs+0x247>
c0007376:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737c:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007381:	0f 97 c2             	seta   dl
c0007384:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007387:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738b:	0f 92 c0             	setb   al
c000738e:	08 c2                	or     dl,al
c0007390:	75 5b                	jne    c00073ed <f_mkfs+0x295>
c0007392:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007396:	83 e0 07             	and    eax,0x7
c0007399:	3c 04                	cmp    al,0x4
c000739b:	74 50                	je     c00073ed <f_mkfs+0x295>
c000739d:	eb 1b                	jmp    c00073ba <f_mkfs+0x262>
c000739f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a4:	0f 87 73 0a 00 00    	ja     c0007e1d <f_mkfs+0xcc5>
c00073aa:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b0:	76 08                	jbe    c00073ba <f_mkfs+0x262>
c00073b2:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073ba:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073be:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c2:	83 e0 01             	and    eax,0x1
c00073c5:	80 e1 02             	and    cl,0x2
c00073c8:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073cc:	74 0d                	je     c00073db <f_mkfs+0x283>
c00073ce:	84 c0                	test   al,al
c00073d0:	0f 84 53 09 00 00    	je     c0007d29 <f_mkfs+0xbd1>
c00073d6:	e9 12 08 00 00       	jmp    c0007bed <f_mkfs+0xa95>
c00073db:	bb 13 00 00 00       	mov    ebx,0x13
c00073e0:	84 c0                	test   al,al
c00073e2:	0f 85 05 08 00 00    	jne    c0007bed <f_mkfs+0xa95>
c00073e8:	e9 39 0e 00 00       	jmp    c0008226 <f_mkfs+0x10ce>
c00073ed:	31 c0                	xor    eax,eax
c00073ef:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f4:	89 c7                	mov    edi,eax
c00073f6:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073f9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073fd:	0f 83 1a 0a 00 00    	jae    c0007e1d <f_mkfs+0xcc5>
c0007403:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007409:	77 39                	ja     c0007444 <f_mkfs+0x2ec>
c000740b:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007410:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007418:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000741f:	73 08                	jae    c0007429 <f_mkfs+0x2d1>
c0007421:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007429:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000742e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007431:	b8 00 00 00 00       	mov    eax,0x0
c0007436:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743a:	73 08                	jae    c0007444 <f_mkfs+0x2ec>
c000743c:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007448:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744c:	83 c0 20             	add    eax,0x20
c000744f:	83 d2 00             	adc    edx,0x0
c0007452:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007456:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000745e:	31 d2                	xor    edx,edx
c0007460:	31 ff                	xor    edi,edi
c0007462:	52                   	push   edx
c0007463:	89 fb                	mov    ebx,edi
c0007465:	50                   	push   eax
c0007466:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746e:	e8 d9 ec 01 00       	call   c002614c <__udivdi3>
c0007473:	83 c4 10             	add    esp,0x10
c0007476:	c1 e0 02             	shl    eax,0x2
c0007479:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000747d:	05 07 02 00 00       	add    eax,0x207
c0007482:	89 f1                	mov    ecx,esi
c0007484:	c1 e8 09             	shr    eax,0x9
c0007487:	83 c1 ff             	add    ecx,0xffffffff
c000748a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000748e:	83 d3 ff             	adc    ebx,0xffffffff
c0007491:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007495:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007499:	31 d2                	xor    edx,edx
c000749b:	01 c8                	add    eax,ecx
c000749d:	11 da                	adc    edx,ebx
c000749f:	89 c1                	mov    ecx,eax
c00074a1:	f7 de                	neg    esi
c00074a3:	89 d0                	mov    eax,edx
c00074a5:	83 d7 00             	adc    edi,0x0
c00074a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074ac:	f7 df                	neg    edi
c00074ae:	21 f1                	and    ecx,esi
c00074b0:	21 f8                	and    eax,edi
c00074b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c2:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074c9:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074cd:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d1:	89 df                	mov    edi,ebx
c00074d3:	d1 ea                	shr    edx,1
c00074d5:	39 c1                	cmp    ecx,eax
c00074d7:	19 d7                	sbb    edi,edx
c00074d9:	0f 83 3e 09 00 00    	jae    c0007e1d <f_mkfs+0xcc5>
c00074df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e3:	31 d2                	xor    edx,edx
c00074e5:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074ed:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f4:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074f8:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074fc:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007500:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007504:	83 f8 0f             	cmp    eax,0xf
c0007507:	0f 86 10 09 00 00    	jbe    c0007e1d <f_mkfs+0xcc5>
c000750d:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007515:	0f 87 02 09 00 00    	ja     c0007e1d <f_mkfs+0xcc5>
c000751b:	31 d2                	xor    edx,edx
c000751d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007521:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007529:	83 c0 07             	add    eax,0x7
c000752c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007534:	c1 e8 03             	shr    eax,0x3
c0007537:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000753e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007546:	c1 e0 09             	shl    eax,0x9
c0007549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000754d:	48                   	dec    eax
c000754e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007552:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007556:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755a:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000755e:	31 d2                	xor    edx,edx
c0007560:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007564:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000756f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007574:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007578:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007580:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007584:	31 ff                	xor    edi,edi
c0007586:	31 f6                	xor    esi,esi
c0007588:	31 db                	xor    ebx,ebx
c000758a:	85 ff                	test   edi,edi
c000758c:	74 05                	je     c0007593 <f_mkfs+0x43b>
c000758e:	4f                   	dec    edi
c000758f:	74 44                	je     c00075d5 <f_mkfs+0x47d>
c0007591:	eb 4f                	jmp    c00075e2 <f_mkfs+0x48a>
c0007593:	83 ec 0c             	sub    esp,0xc
c0007596:	0f b7 c3             	movzx  eax,bx
c0007599:	50                   	push   eax
c000759a:	e8 05 0e 00 00       	call   c00083a4 <ff_wtoupper>
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	89 c1                	mov    ecx,eax
c00075a4:	8d 53 01             	lea    edx,[ebx+0x1]
c00075a7:	66 39 c3             	cmp    bx,ax
c00075aa:	75 3e                	jne    c00075ea <f_mkfs+0x492>
c00075ac:	be 01 00 00 00       	mov    esi,0x1
c00075b1:	89 df                	mov    edi,ebx
c00075b3:	66 01 f7             	add    di,si
c00075b6:	75 07                	jne    c00075bf <f_mkfs+0x467>
c00075b8:	83 fe 7f             	cmp    esi,0x7f
c00075bb:	77 31                	ja     c00075ee <f_mkfs+0x496>
c00075bd:	eb 16                	jmp    c00075d5 <f_mkfs+0x47d>
c00075bf:	83 ec 0c             	sub    esp,0xc
c00075c2:	0f b7 ff             	movzx  edi,di
c00075c5:	57                   	push   edi
c00075c6:	e8 d9 0d 00 00       	call   c00083a4 <ff_wtoupper>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	39 c7                	cmp    edi,eax
c00075d0:	75 e6                	jne    c00075b8 <f_mkfs+0x460>
c00075d2:	46                   	inc    esi
c00075d3:	eb dc                	jmp    c00075b1 <f_mkfs+0x459>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	89 d9                	mov    ecx,ebx
c00075d9:	4e                   	dec    esi
c00075da:	0f 95 c0             	setne  al
c00075dd:	43                   	inc    ebx
c00075de:	89 c7                	mov    edi,eax
c00075e0:	eb 14                	jmp    c00075f6 <f_mkfs+0x49e>
c00075e2:	89 f1                	mov    ecx,esi
c00075e4:	01 f3                	add    ebx,esi
c00075e6:	31 ff                	xor    edi,edi
c00075e8:	eb 0c                	jmp    c00075f6 <f_mkfs+0x49e>
c00075ea:	89 d3                	mov    ebx,edx
c00075ec:	eb 08                	jmp    c00075f6 <f_mkfs+0x49e>
c00075ee:	bf 02 00 00 00       	mov    edi,0x2
c00075f3:	83 c9 ff             	or     ecx,0xffffffff
c00075f6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075fd:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007601:	0f b6 c1             	movzx  eax,cl
c0007604:	e8 3a a9 ff ff       	call   c0001f43 <xsum32>
c0007609:	66 c1 e9 08          	shr    cx,0x8
c000760d:	89 c2                	mov    edx,eax
c000760f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007612:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007616:	0f b7 c1             	movzx  eax,cx
c0007619:	e8 25 a9 ff ff       	call   c0001f43 <xsum32>
c000761e:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007623:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007627:	66 85 db             	test   bx,bx
c000762a:	74 1f                	je     c000764b <f_mkfs+0x4f3>
c000762c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000762f:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007636:	83 c0 02             	add    eax,0x2
c0007639:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000763f:	39 c2                	cmp    edx,eax
c0007641:	74 08                	je     c000764b <f_mkfs+0x4f3>
c0007643:	89 04 24             	mov    DWORD PTR [esp],eax
c0007646:	e9 3f ff ff ff       	jmp    c000758a <f_mkfs+0x432>
c000764b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000764e:	83 ec 0c             	sub    esp,0xc
c0007651:	05 01 02 00 00       	add    eax,0x201
c0007656:	c1 e8 09             	shr    eax,0x9
c0007659:	50                   	push   eax
c000765a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000765e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007662:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007666:	55                   	push   ebp
c0007667:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766b:	e8 a3 a3 ff ff       	call   c0001a13 <disk_write>
c0007670:	83 c4 20             	add    esp,0x20
c0007673:	85 c0                	test   eax,eax
c0007675:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007678:	0f 85 8b 0b 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c000767e:	89 d0                	mov    eax,edx
c0007680:	31 d2                	xor    edx,edx
c0007682:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007686:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768a:	66 85 db             	test   bx,bx
c000768d:	74 04                	je     c0007693 <f_mkfs+0x53b>
c000768f:	31 c0                	xor    eax,eax
c0007691:	eb b0                	jmp    c0007643 <f_mkfs+0x4eb>
c0007693:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007697:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769b:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000769f:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a5:	31 d2                	xor    edx,edx
c00076a7:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b2:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b6:	c1 eb 09             	shr    ebx,0x9
c00076b9:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c4:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076cc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d0:	8d 70 01             	lea    esi,[eax+0x1]
c00076d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076db:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e2:	31 d2                	xor    edx,edx
c00076e4:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ec:	89 c1                	mov    ecx,eax
c00076ee:	89 e8                	mov    eax,ebp
c00076f0:	e8 e7 a3 ff ff       	call   c0001adc <mem_set>
c00076f5:	31 c0                	xor    eax,eax
c00076f7:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fa:	76 10                	jbe    c000770c <f_mkfs+0x5b4>
c00076fc:	83 fe 07             	cmp    esi,0x7
c00076ff:	76 0b                	jbe    c000770c <f_mkfs+0x5b4>
c0007701:	40                   	inc    eax
c0007702:	83 ee 08             	sub    esi,0x8
c0007705:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770a:	eb eb                	jmp    c00076f7 <f_mkfs+0x59f>
c000770c:	b2 01                	mov    dl,0x1
c000770e:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007712:	85 f6                	test   esi,esi
c0007714:	74 0c                	je     c0007722 <f_mkfs+0x5ca>
c0007716:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007719:	76 07                	jbe    c0007722 <f_mkfs+0x5ca>
c000771b:	08 11                	or     BYTE PTR [ecx],dl
c000771d:	4e                   	dec    esi
c000771e:	d1 e2                	shl    edx,1
c0007720:	eb f0                	jmp    c0007712 <f_mkfs+0x5ba>
c0007722:	89 df                	mov    edi,ebx
c0007724:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007728:	76 04                	jbe    c000772e <f_mkfs+0x5d6>
c000772a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000772e:	83 ec 0c             	sub    esp,0xc
c0007731:	57                   	push   edi
c0007732:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007736:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773a:	55                   	push   ebp
c000773b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000773f:	e8 cf a2 ff ff       	call   c0001a13 <disk_write>
c0007744:	83 c4 20             	add    esp,0x20
c0007747:	85 c0                	test   eax,eax
c0007749:	0f 85 ba 0a 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c000774f:	31 d2                	xor    edx,edx
c0007751:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007755:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007759:	29 fb                	sub    ebx,edi
c000775b:	0f 85 7a ff ff ff    	jne    c00076db <f_mkfs+0x583>
c0007761:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007765:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000776d:	31 f6                	xor    esi,esi
c000776f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007773:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007776:	31 d2                	xor    edx,edx
c0007778:	89 e8                	mov    eax,ebp
c000777a:	e8 5d a3 ff ff       	call   c0001adc <mem_set>
c000777f:	31 c9                	xor    ecx,ecx
c0007781:	85 db                	test   ebx,ebx
c0007783:	75 40                	jne    c00077c5 <f_mkfs+0x66d>
c0007785:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778a:	89 e8                	mov    eax,ebp
c000778c:	bb 02 00 00 00       	mov    ebx,0x2
c0007791:	e8 28 a3 ff ff       	call   c0001abe <st_dword>
c0007796:	8d 45 04             	lea    eax,[ebp+0x4]
c0007799:	83 ca ff             	or     edx,0xffffffff
c000779c:	e8 1d a3 ff ff       	call   c0001abe <st_dword>
c00077a1:	b9 08 00 00 00       	mov    ecx,0x8
c00077a6:	eb 1d                	jmp    c00077c5 <f_mkfs+0x66d>
c00077a8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ab:	76 3b                	jbe    c00077e8 <f_mkfs+0x690>
c00077ad:	43                   	inc    ebx
c00077ae:	83 fe 01             	cmp    esi,0x1
c00077b1:	89 da                	mov    edx,ebx
c00077b3:	77 03                	ja     c00077b8 <f_mkfs+0x660>
c00077b5:	83 ca ff             	or     edx,0xffffffff
c00077b8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077bc:	4e                   	dec    esi
c00077bd:	e8 fc a2 ff ff       	call   c0001abe <st_dword>
c00077c2:	83 c1 04             	add    ecx,0x4
c00077c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077c9:	85 f6                	test   esi,esi
c00077cb:	75 db                	jne    c00077a8 <f_mkfs+0x650>
c00077cd:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d2:	77 14                	ja     c00077e8 <f_mkfs+0x690>
c00077d4:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077d8:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077df:	85 f6                	test   esi,esi
c00077e1:	74 05                	je     c00077e8 <f_mkfs+0x690>
c00077e3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e6:	77 dd                	ja     c00077c5 <f_mkfs+0x66d>
c00077e8:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f0:	39 cf                	cmp    edi,ecx
c00077f2:	76 02                	jbe    c00077f6 <f_mkfs+0x69e>
c00077f4:	89 cf                	mov    edi,ecx
c00077f6:	83 ec 0c             	sub    esp,0xc
c00077f9:	57                   	push   edi
c00077fa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007802:	55                   	push   ebp
c0007803:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007807:	e8 07 a2 ff ff       	call   c0001a13 <disk_write>
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	85 c0                	test   eax,eax
c0007811:	0f 85 f2 09 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c0007817:	31 d2                	xor    edx,edx
c0007819:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000781d:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007821:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007825:	0f 85 48 ff ff ff    	jne    c0007773 <f_mkfs+0x61b>
c000782b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000782e:	31 d2                	xor    edx,edx
c0007830:	89 e8                	mov    eax,ebp
c0007832:	31 ff                	xor    edi,edi
c0007834:	e8 a3 a2 ff ff       	call   c0001adc <mem_set>
c0007839:	8d 45 34             	lea    eax,[ebp+0x34]
c000783c:	ba 02 00 00 00       	mov    edx,0x2
c0007841:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007845:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007849:	e8 70 a2 ff ff       	call   c0001abe <st_dword>
c000784e:	8d 45 38             	lea    eax,[ebp+0x38]
c0007851:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007855:	e8 64 a2 ff ff       	call   c0001abe <st_dword>
c000785a:	8d 45 44             	lea    eax,[ebp+0x44]
c000785d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007861:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007865:	e8 54 a2 ff ff       	call   c0001abe <st_dword>
c000786a:	8d 45 54             	lea    eax,[ebp+0x54]
c000786d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007871:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007875:	83 c2 02             	add    edx,0x2
c0007878:	e8 41 a2 ff ff       	call   c0001abe <st_dword>
c000787d:	8d 45 58             	lea    eax,[ebp+0x58]
c0007880:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007884:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007888:	e8 31 a2 ff ff       	call   c0001abe <st_dword>
c000788d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007891:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007896:	89 c6                	mov    esi,eax
c0007898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a3:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078a7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078aa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078ae:	39 cb                	cmp    ebx,ecx
c00078b0:	76 02                	jbe    c00078b4 <f_mkfs+0x75c>
c00078b2:	89 cb                	mov    ebx,ecx
c00078b4:	83 ec 0c             	sub    esp,0xc
c00078b7:	53                   	push   ebx
c00078b8:	57                   	push   edi
c00078b9:	56                   	push   esi
c00078ba:	55                   	push   ebp
c00078bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078bf:	e8 4f a1 ff ff       	call   c0001a13 <disk_write>
c00078c4:	83 c4 20             	add    esp,0x20
c00078c7:	85 c0                	test   eax,eax
c00078c9:	0f 85 3a 09 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c00078cf:	31 d2                	xor    edx,edx
c00078d1:	b9 00 02 00 00       	mov    ecx,0x200
c00078d6:	89 e8                	mov    eax,ebp
c00078d8:	e8 ff a1 ff ff       	call   c0001adc <mem_set>
c00078dd:	31 d2                	xor    edx,edx
c00078df:	01 de                	add    esi,ebx
c00078e1:	11 d7                	adc    edi,edx
c00078e3:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e6:	75 bf                	jne    c00078a7 <f_mkfs+0x74f>
c00078e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ec:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f0:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078f8:	b9 00 02 00 00       	mov    ecx,0x200
c00078fd:	31 d2                	xor    edx,edx
c00078ff:	89 e8                	mov    eax,ebp
c0007901:	e8 d6 a1 ff ff       	call   c0001adc <mem_set>
c0007906:	b9 0b 00 00 00       	mov    ecx,0xb
c000790b:	ba 00 8c 02 c0       	mov    edx,0xc0028c00
c0007910:	89 e8                	mov    eax,ebp
c0007912:	e8 b0 a1 ff ff       	call   c0001ac7 <mem_cpy>
c0007917:	8d 45 40             	lea    eax,[ebp+0x40]
c000791a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000791e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007922:	e8 9a a1 ff ff       	call   c0001ac1 <st_qword>
c0007927:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792b:	8d 45 48             	lea    eax,[ebp+0x48]
c000792e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007932:	e8 8a a1 ff ff       	call   c0001ac1 <st_qword>
c0007937:	8d 45 50             	lea    eax,[ebp+0x50]
c000793a:	ba 20 00 00 00       	mov    edx,0x20
c000793f:	e8 7a a1 ff ff       	call   c0001abe <st_dword>
c0007944:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007948:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794c:	e8 6d a1 ff ff       	call   c0001abe <st_dword>
c0007951:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007955:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007959:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000795d:	e8 5c a1 ff ff       	call   c0001abe <st_dword>
c0007962:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007965:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007969:	e8 50 a1 ff ff       	call   c0001abe <st_dword>
c000796e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007972:	8d 50 02             	lea    edx,[eax+0x2]
c0007975:	8d 45 60             	lea    eax,[ebp+0x60]
c0007978:	e8 41 a1 ff ff       	call   c0001abe <st_dword>
c000797d:	8d 45 64             	lea    eax,[ebp+0x64]
c0007980:	ba 00 00 21 50       	mov    edx,0x50210000
c0007985:	e8 34 a1 ff ff       	call   c0001abe <st_dword>
c000798a:	8d 45 68             	lea    eax,[ebp+0x68]
c000798d:	ba 00 01 00 00       	mov    edx,0x100
c0007992:	e8 23 a1 ff ff       	call   c0001aba <st_word>
c0007997:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799b:	b8 0a 00 00 00       	mov    eax,0xa
c00079a0:	48                   	dec    eax
c00079a1:	74 05                	je     c00079a8 <f_mkfs+0x850>
c00079a3:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a6:	eb f8                	jmp    c00079a0 <f_mkfs+0x848>
c00079a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079ac:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b4:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079b8:	74 05                	je     c00079bf <f_mkfs+0x867>
c00079ba:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079bd:	eb f5                	jmp    c00079b4 <f_mkfs+0x85c>
c00079bf:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c2:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079c7:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079cd:	31 db                	xor    ebx,ebx
c00079cf:	e8 e6 a0 ff ff       	call   c0001aba <st_word>
c00079d4:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079da:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079df:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e2:	e8 d3 a0 ff ff       	call   c0001aba <st_word>
c00079e7:	31 c9                	xor    ecx,ecx
c00079e9:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ec:	83 f8 01             	cmp    eax,0x1
c00079ef:	76 13                	jbe    c0007a04 <f_mkfs+0x8ac>
c00079f1:	83 f9 70             	cmp    ecx,0x70
c00079f4:	74 0e                	je     c0007a04 <f_mkfs+0x8ac>
c00079f6:	89 da                	mov    edx,ebx
c00079f8:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079fd:	e8 41 a5 ff ff       	call   c0001f43 <xsum32>
c0007a02:	89 c3                	mov    ebx,eax
c0007a04:	41                   	inc    ecx
c0007a05:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0b:	75 dc                	jne    c00079e9 <f_mkfs+0x891>
c0007a0d:	89 f0                	mov    eax,esi
c0007a0f:	89 fa                	mov    edx,edi
c0007a11:	83 c0 01             	add    eax,0x1
c0007a14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a18:	83 d2 00             	adc    edx,0x0
c0007a1b:	83 ec 0c             	sub    esp,0xc
c0007a1e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a22:	6a 01                	push   0x1
c0007a24:	57                   	push   edi
c0007a25:	56                   	push   esi
c0007a26:	55                   	push   ebp
c0007a27:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2b:	e8 e3 9f ff ff       	call   c0001a13 <disk_write>
c0007a30:	83 c4 20             	add    esp,0x20
c0007a33:	85 c0                	test   eax,eax
c0007a35:	0f 85 ce 07 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c0007a3b:	31 d2                	xor    edx,edx
c0007a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0007a42:	89 e8                	mov    eax,ebp
c0007a44:	e8 93 a0 ff ff       	call   c0001adc <mem_set>
c0007a49:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a4e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a51:	e8 64 a0 ff ff       	call   c0001aba <st_word>
c0007a56:	89 f0                	mov    eax,esi
c0007a58:	89 fa                	mov    edx,edi
c0007a5a:	83 c0 09             	add    eax,0x9
c0007a5d:	83 d2 00             	adc    edx,0x0
c0007a60:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a67:	31 c9                	xor    ecx,ecx
c0007a69:	41                   	inc    ecx
c0007a6a:	89 da                	mov    edx,ebx
c0007a6c:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a71:	e8 cd a4 ff ff       	call   c0001f43 <xsum32>
c0007a76:	89 c3                	mov    ebx,eax
c0007a78:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a7e:	75 e9                	jne    c0007a69 <f_mkfs+0x911>
c0007a80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a84:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a88:	83 c0 01             	add    eax,0x1
c0007a8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a8f:	83 d2 00             	adc    edx,0x0
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a99:	6a 01                	push   0x1
c0007a9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa3:	55                   	push   ebp
c0007aa4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aa8:	e8 66 9f ff ff       	call   c0001a13 <disk_write>
c0007aad:	83 c4 20             	add    esp,0x20
c0007ab0:	85 c0                	test   eax,eax
c0007ab2:	0f 85 51 07 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c0007ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abc:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac0:	75 09                	jne    c0007acb <f_mkfs+0x973>
c0007ac2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac5:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ac9:	74 12                	je     c0007add <f_mkfs+0x985>
c0007acb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007acf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ad7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007adb:	eb 8a                	jmp    c0007a67 <f_mkfs+0x90f>
c0007add:	31 d2                	xor    edx,edx
c0007adf:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae4:	89 e8                	mov    eax,ebp
c0007ae6:	e8 f1 9f ff ff       	call   c0001adc <mem_set>
c0007aeb:	83 c6 0b             	add    esi,0xb
c0007aee:	83 d7 00             	adc    edi,0x0
c0007af1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007af9:	31 c9                	xor    ecx,ecx
c0007afb:	41                   	inc    ecx
c0007afc:	89 da                	mov    edx,ebx
c0007afe:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b03:	e8 3b a4 ff ff       	call   c0001f43 <xsum32>
c0007b08:	89 c3                	mov    ebx,eax
c0007b0a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b10:	75 e9                	jne    c0007afb <f_mkfs+0x9a3>
c0007b12:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b15:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b19:	83 c6 01             	add    esi,0x1
c0007b1c:	83 d7 00             	adc    edi,0x0
c0007b1f:	83 ec 0c             	sub    esp,0xc
c0007b22:	6a 01                	push   0x1
c0007b24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2c:	55                   	push   ebp
c0007b2d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b31:	e8 dd 9e ff ff       	call   c0001a13 <disk_write>
c0007b36:	83 c4 20             	add    esp,0x20
c0007b39:	85 c0                	test   eax,eax
c0007b3b:	0f 85 c8 06 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c0007b41:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b45:	75 06                	jne    c0007b4d <f_mkfs+0x9f5>
c0007b47:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4b:	74 09                	je     c0007b56 <f_mkfs+0x9fe>
c0007b4d:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b50:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b54:	eb a3                	jmp    c0007af9 <f_mkfs+0x9a1>
c0007b56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5a:	89 da                	mov    edx,ebx
c0007b5c:	01 e8                	add    eax,ebp
c0007b5e:	e8 5b 9f ff ff       	call   c0001abe <st_dword>
c0007b63:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b68:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b70:	75 e4                	jne    c0007b56 <f_mkfs+0x9fe>
c0007b72:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b75:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b79:	83 c6 02             	add    esi,0x2
c0007b7c:	83 d7 00             	adc    edi,0x0
c0007b7f:	83 ec 0c             	sub    esp,0xc
c0007b82:	6a 01                	push   0x1
c0007b84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8c:	55                   	push   ebp
c0007b8d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b91:	e8 7d 9e ff ff       	call   c0001a13 <disk_write>
c0007b96:	83 c4 20             	add    esp,0x20
c0007b99:	85 c0                	test   eax,eax
c0007b9b:	0f 85 68 06 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c0007ba1:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba6:	74 0d                	je     c0007bb5 <f_mkfs+0xa5d>
c0007ba8:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb0:	e9 43 fd ff ff       	jmp    c00078f8 <f_mkfs+0x7a0>
c0007bb5:	b1 07                	mov    cl,0x7
c0007bb7:	e9 e3 05 00 00       	jmp    c000819f <f_mkfs+0x1047>
c0007bbc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc1:	0f 85 4f 02 00 00    	jne    c0007e16 <f_mkfs+0xcbe>
c0007bc7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bcc:	0f 86 22 02 00 00    	jbe    c0007df4 <f_mkfs+0xc9c>
c0007bd2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd7:	0f 85 81 06 00 00    	jne    c000825e <f_mkfs+0x1106>
c0007bdd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be4:	83 f8 40             	cmp    eax,0x40
c0007be7:	0f 87 51 06 00 00    	ja     c000823e <f_mkfs+0x10e6>
c0007bed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf1:	85 ff                	test   edi,edi
c0007bf3:	75 1c                	jne    c0007c11 <f_mkfs+0xab9>
c0007bf5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bf8:	ba 00 8b 02 c0       	mov    edx,0xc0028b00
c0007bfd:	c1 e9 0c             	shr    ecx,0xc
c0007c00:	bf 01 00 00 00       	mov    edi,0x1
c0007c05:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c08:	66 85 c0             	test   ax,ax
c0007c0b:	0f 85 95 01 00 00    	jne    c0007da6 <f_mkfs+0xc4e>
c0007c11:	31 d2                	xor    edx,edx
c0007c13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c16:	f7 f7                	div    edi
c0007c18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c1d:	0f 86 95 01 00 00    	jbe    c0007db8 <f_mkfs+0xc60>
c0007c23:	83 c0 02             	add    eax,0x2
c0007c26:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2b:	01 c0                	add    eax,eax
c0007c2d:	05 ff 01 00 00       	add    eax,0x1ff
c0007c32:	be 01 00 00 00       	mov    esi,0x1
c0007c37:	c1 e8 09             	shr    eax,0x9
c0007c3a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c42:	c1 e0 05             	shl    eax,0x5
c0007c45:	c1 e8 09             	shr    eax,0x9
c0007c48:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4c:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c51:	31 d2                	xor    edx,edx
c0007c53:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c57:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5b:	89 f0                	mov    eax,esi
c0007c5d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c61:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c69:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c71:	31 d2                	xor    edx,edx
c0007c73:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c78:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7c:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c80:	31 db                	xor    ebx,ebx
c0007c82:	01 c8                	add    eax,ecx
c0007c84:	11 da                	adc    edx,ebx
c0007c86:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8a:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c8e:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c92:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c96:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9a:	f7 da                	neg    edx
c0007c9c:	21 d1                	and    ecx,edx
c0007c9e:	29 d9                	sub    ecx,ebx
c0007ca0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca5:	0f 85 20 01 00 00    	jne    c0007dcb <f_mkfs+0xc73>
c0007cab:	31 db                	xor    ebx,ebx
c0007cad:	01 ce                	add    esi,ecx
c0007caf:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb3:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cb7:	31 d2                	xor    edx,edx
c0007cb9:	89 f8                	mov    eax,edi
c0007cbb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cbf:	c1 e0 04             	shl    eax,0x4
c0007cc2:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc6:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cca:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cce:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd2:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd5:	19 d3                	sbb    ebx,edx
c0007cd7:	0f 82 40 01 00 00    	jb     c0007e1d <f_mkfs+0xcc5>
c0007cdd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce4:	89 c8                	mov    eax,ecx
c0007ce6:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ceb:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cef:	29 f0                	sub    eax,esi
c0007cf1:	29 d0                	sub    eax,edx
c0007cf3:	31 d2                	xor    edx,edx
c0007cf5:	f7 f7                	div    edi
c0007cf7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cfc:	89 c3                	mov    ebx,eax
c0007cfe:	0f 85 b8 fe ff ff    	jne    c0007bbc <f_mkfs+0xa64>
c0007d04:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d09:	0f 87 1d 01 00 00    	ja     c0007e2c <f_mkfs+0xcd4>
c0007d0f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d14:	0f 85 03 01 00 00    	jne    c0007e1d <f_mkfs+0xcc5>
c0007d1a:	83 ff 01             	cmp    edi,0x1
c0007d1d:	0f 86 fa 00 00 00    	jbe    c0007e1d <f_mkfs+0xcc5>
c0007d23:	d1 ef                	shr    edi,1
c0007d25:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d29:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d2d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d30:	85 db                	test   ebx,ebx
c0007d32:	75 2d                	jne    c0007d61 <f_mkfs+0xc09>
c0007d34:	89 cb                	mov    ebx,ecx
c0007d36:	ba 10 8b 02 c0       	mov    edx,0xc0028b10
c0007d3b:	c1 eb 11             	shr    ebx,0x11
c0007d3e:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d49:	66 85 c0             	test   ax,ax
c0007d4c:	74 11                	je     c0007d5f <f_mkfs+0xc07>
c0007d4e:	83 c2 02             	add    edx,0x2
c0007d51:	39 d8                	cmp    eax,ebx
c0007d53:	77 0a                	ja     c0007d5f <f_mkfs+0xc07>
c0007d55:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d59:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d5d:	eb e7                	jmp    c0007d46 <f_mkfs+0xbee>
c0007d5f:	31 db                	xor    ebx,ebx
c0007d61:	31 d2                	xor    edx,edx
c0007d63:	89 c8                	mov    eax,ecx
c0007d65:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d69:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d70:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d75:	c1 ea 09             	shr    edx,0x9
c0007d78:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d7d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d81:	0f 87 96 00 00 00    	ja     c0007e1d <f_mkfs+0xcc5>
c0007d87:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8b:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d93:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d97:	be 20 00 00 00       	mov    esi,0x20
c0007d9c:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da1:	e9 a6 fe ff ff       	jmp    c0007c4c <f_mkfs+0xaf4>
c0007da6:	83 c2 02             	add    edx,0x2
c0007da9:	39 c8                	cmp    eax,ecx
c0007dab:	0f 87 60 fe ff ff    	ja     c0007c11 <f_mkfs+0xab9>
c0007db1:	01 ff                	add    edi,edi
c0007db3:	e9 4d fe ff ff       	jmp    c0007c05 <f_mkfs+0xaad>
c0007db8:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbb:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc0:	40                   	inc    eax
c0007dc1:	d1 e8                	shr    eax,1
c0007dc3:	83 c0 03             	add    eax,0x3
c0007dc6:	e9 62 fe ff ff       	jmp    c0007c2d <f_mkfs+0xad5>
c0007dcb:	31 d2                	xor    edx,edx
c0007dcd:	89 c8                	mov    eax,ecx
c0007dcf:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd3:	85 d2                	test   edx,edx
c0007dd5:	74 0c                	je     c0007de3 <f_mkfs+0xc8b>
c0007dd7:	49                   	dec    ecx
c0007dd8:	46                   	inc    esi
c0007dd9:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007dde:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de3:	89 c8                	mov    eax,ecx
c0007de5:	31 d2                	xor    edx,edx
c0007de7:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007deb:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007def:	e9 c3 fe ff ff       	jmp    c0007cb7 <f_mkfs+0xb5f>
c0007df4:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007df9:	77 31                	ja     c0007e2c <f_mkfs+0xcd4>
c0007dfb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e00:	75 1b                	jne    c0007e1d <f_mkfs+0xcc5>
c0007e02:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e09:	3d 80 00 00 00       	cmp    eax,0x80
c0007e0e:	0f 86 d9 fd ff ff    	jbe    c0007bed <f_mkfs+0xa95>
c0007e14:	eb 07                	jmp    c0007e1d <f_mkfs+0xcc5>
c0007e16:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1b:	76 0a                	jbe    c0007e27 <f_mkfs+0xccf>
c0007e1d:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e22:	e9 ff 03 00 00       	jmp    c0008226 <f_mkfs+0x10ce>
c0007e27:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2c:	31 d2                	xor    edx,edx
c0007e2e:	b9 00 02 00 00       	mov    ecx,0x200
c0007e33:	89 e8                	mov    eax,ebp
c0007e35:	e8 a2 9c ff ff       	call   c0001adc <mem_set>
c0007e3a:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e3f:	ba 22 8c 02 c0       	mov    edx,0xc0028c22
c0007e44:	89 e8                	mov    eax,ebp
c0007e46:	e8 7c 9c ff ff       	call   c0001ac7 <mem_cpy>
c0007e4b:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e4e:	ba 00 02 00 00       	mov    edx,0x200
c0007e53:	e8 62 9c ff ff       	call   c0001aba <st_word>
c0007e58:	89 f8                	mov    eax,edi
c0007e5a:	0f b7 d6             	movzx  edx,si
c0007e5d:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e63:	e8 52 9c ff ff       	call   c0001aba <st_word>
c0007e68:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e71:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e74:	75 08                	jne    c0007e7e <f_mkfs+0xd26>
c0007e76:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e7e:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e85:	e8 30 9c ff ff       	call   c0001aba <st_word>
c0007e8a:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e8f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e93:	39 d0                	cmp    eax,edx
c0007e95:	b8 00 00 00 00       	mov    eax,0x0
c0007e9a:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e9e:	72 0a                	jb     c0007eaa <f_mkfs+0xd52>
c0007ea0:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea3:	e8 12 9c ff ff       	call   c0001aba <st_word>
c0007ea8:	eb 08                	jmp    c0007eb2 <f_mkfs+0xd5a>
c0007eaa:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ead:	e8 0c 9c ff ff       	call   c0001abe <st_dword>
c0007eb2:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb5:	ba 3f 00 00 00       	mov    edx,0x3f
c0007eba:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ebe:	e8 f7 9b ff ff       	call   c0001aba <st_word>
c0007ec3:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec6:	ba ff 00 00 00       	mov    edx,0xff
c0007ecb:	e8 ea 9b ff ff       	call   c0001aba <st_word>
c0007ed0:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ed7:	e8 e2 9b ff ff       	call   c0001abe <st_dword>
c0007edc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee1:	75 57                	jne    c0007f3a <f_mkfs+0xde2>
c0007ee3:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee6:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eeb:	e8 ce 9b ff ff       	call   c0001abe <st_dword>
c0007ef0:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ef7:	e8 c2 9b ff ff       	call   c0001abe <st_dword>
c0007efc:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eff:	ba 02 00 00 00       	mov    edx,0x2
c0007f04:	e8 b5 9b ff ff       	call   c0001abe <st_dword>
c0007f09:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0c:	ba 01 00 00 00       	mov    edx,0x1
c0007f11:	e8 a4 9b ff ff       	call   c0001aba <st_word>
c0007f16:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f19:	ba 06 00 00 00       	mov    edx,0x6
c0007f1e:	e8 97 9b ff ff       	call   c0001aba <st_word>
c0007f23:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f27:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2b:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f2e:	b9 13 00 00 00       	mov    ecx,0x13
c0007f33:	ba 2e 8c 02 c0       	mov    edx,0xc0028c2e
c0007f38:	eb 2f                	jmp    c0007f69 <f_mkfs+0xe11>
c0007f3a:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f3d:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f42:	e8 77 9b ff ff       	call   c0001abe <st_dword>
c0007f47:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4c:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f4f:	e8 66 9b ff ff       	call   c0001aba <st_word>
c0007f54:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f58:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5c:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f5f:	b9 13 00 00 00       	mov    ecx,0x13
c0007f64:	ba 42 8c 02 c0       	mov    edx,0xc0028c42
c0007f69:	e8 59 9b ff ff       	call   c0001ac7 <mem_cpy>
c0007f6e:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f74:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f79:	89 f0                	mov    eax,esi
c0007f7b:	e8 3a 9b ff ff       	call   c0001aba <st_word>
c0007f80:	83 ec 0c             	sub    esp,0xc
c0007f83:	6a 01                	push   0x1
c0007f85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f89:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8d:	55                   	push   ebp
c0007f8e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f92:	e8 7c 9a ff ff       	call   c0001a13 <disk_write>
c0007f97:	83 c4 20             	add    esp,0x20
c0007f9a:	85 c0                	test   eax,eax
c0007f9c:	0f 85 67 02 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c0007fa2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fa7:	0f 85 b7 00 00 00    	jne    c0008064 <f_mkfs+0xf0c>
c0007fad:	83 ec 0c             	sub    esp,0xc
c0007fb0:	6a 01                	push   0x1
c0007fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fba:	83 c0 06             	add    eax,0x6
c0007fbd:	83 d2 00             	adc    edx,0x0
c0007fc0:	52                   	push   edx
c0007fc1:	50                   	push   eax
c0007fc2:	55                   	push   ebp
c0007fc3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fc7:	e8 47 9a ff ff       	call   c0001a13 <disk_write>
c0007fcc:	83 c4 20             	add    esp,0x20
c0007fcf:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd4:	31 d2                	xor    edx,edx
c0007fd6:	89 e8                	mov    eax,ebp
c0007fd8:	e8 ff 9a ff ff       	call   c0001adc <mem_set>
c0007fdd:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe2:	89 e8                	mov    eax,ebp
c0007fe4:	e8 d5 9a ff ff       	call   c0001abe <st_dword>
c0007fe9:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fef:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff4:	e8 c5 9a ff ff       	call   c0001abe <st_dword>
c0007ff9:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ffc:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008002:	e8 b7 9a ff ff       	call   c0001abe <st_dword>
c0008007:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000800d:	ba 02 00 00 00       	mov    edx,0x2
c0008012:	e8 a7 9a ff ff       	call   c0001abe <st_dword>
c0008017:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801c:	89 f0                	mov    eax,esi
c000801e:	e8 97 9a ff ff       	call   c0001aba <st_word>
c0008023:	83 ec 0c             	sub    esp,0xc
c0008026:	6a 01                	push   0x1
c0008028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008030:	83 c0 07             	add    eax,0x7
c0008033:	83 d2 00             	adc    edx,0x0
c0008036:	52                   	push   edx
c0008037:	50                   	push   eax
c0008038:	55                   	push   ebp
c0008039:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000803d:	e8 d1 99 ff ff       	call   c0001a13 <disk_write>
c0008042:	83 c4 14             	add    esp,0x14
c0008045:	6a 01                	push   0x1
c0008047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000804f:	83 c0 01             	add    eax,0x1
c0008052:	83 d2 00             	adc    edx,0x0
c0008055:	52                   	push   edx
c0008056:	50                   	push   eax
c0008057:	55                   	push   ebp
c0008058:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805c:	e8 b2 99 ff ff       	call   c0001a13 <disk_write>
c0008061:	83 c4 20             	add    esp,0x20
c0008064:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806b:	31 d2                	xor    edx,edx
c000806d:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008073:	31 db                	xor    ebx,ebx
c0008075:	89 e8                	mov    eax,ebp
c0008077:	e8 60 9a ff ff       	call   c0001adc <mem_set>
c000807c:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008081:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008088:	0f 94 c3             	sete   bl
c000808b:	4b                   	dec    ebx
c000808c:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008092:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008098:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000809d:	75 21                	jne    c00080c0 <f_mkfs+0xf68>
c000809f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a4:	89 e8                	mov    eax,ebp
c00080a6:	e8 13 9a ff ff       	call   c0001abe <st_dword>
c00080ab:	8d 45 04             	lea    eax,[ebp+0x4]
c00080ae:	83 ca ff             	or     edx,0xffffffff
c00080b1:	e8 08 9a ff ff       	call   c0001abe <st_dword>
c00080b6:	8d 45 08             	lea    eax,[ebp+0x8]
c00080b9:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080be:	eb 04                	jmp    c00080c4 <f_mkfs+0xf6c>
c00080c0:	89 da                	mov    edx,ebx
c00080c2:	89 e8                	mov    eax,ebp
c00080c4:	e8 f5 99 ff ff       	call   c0001abe <st_dword>
c00080c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080d9:	39 ce                	cmp    esi,ecx
c00080db:	76 02                	jbe    c00080df <f_mkfs+0xf87>
c00080dd:	89 ce                	mov    esi,ecx
c00080df:	83 ec 0c             	sub    esp,0xc
c00080e2:	56                   	push   esi
c00080e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080eb:	55                   	push   ebp
c00080ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f0:	e8 1e 99 ff ff       	call   c0001a13 <disk_write>
c00080f5:	83 c4 20             	add    esp,0x20
c00080f8:	85 c0                	test   eax,eax
c00080fa:	0f 85 09 01 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c0008100:	31 d2                	xor    edx,edx
c0008102:	b9 00 02 00 00       	mov    ecx,0x200
c0008107:	89 e8                	mov    eax,ebp
c0008109:	e8 ce 99 ff ff       	call   c0001adc <mem_set>
c000810e:	31 d2                	xor    edx,edx
c0008110:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008114:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008118:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811c:	75 b3                	jne    c00080d1 <f_mkfs+0xf79>
c000811e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008121:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008128:	40                   	inc    eax
c0008129:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000812d:	0f 87 65 ff ff ff    	ja     c0008098 <f_mkfs+0xf40>
c0008133:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008138:	74 04                	je     c000813e <f_mkfs+0xfe6>
c000813a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000813e:	89 fb                	mov    ebx,edi
c0008140:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008144:	76 04                	jbe    c000814a <f_mkfs+0xff2>
c0008146:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814a:	83 ec 0c             	sub    esp,0xc
c000814d:	53                   	push   ebx
c000814e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008152:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008156:	55                   	push   ebp
c0008157:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815b:	e8 b3 98 ff ff       	call   c0001a13 <disk_write>
c0008160:	83 c4 20             	add    esp,0x20
c0008163:	85 c0                	test   eax,eax
c0008165:	0f 85 9e 00 00 00    	jne    c0008209 <f_mkfs+0x10b1>
c000816b:	31 d2                	xor    edx,edx
c000816d:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008171:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008175:	29 df                	sub    edi,ebx
c0008177:	75 c5                	jne    c000813e <f_mkfs+0xfe6>
c0008179:	b1 0c                	mov    cl,0xc
c000817b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008180:	74 1d                	je     c000819f <f_mkfs+0x1047>
c0008182:	b8 ff ff 00 00       	mov    eax,0xffff
c0008187:	b1 06                	mov    cl,0x6
c0008189:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000818d:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008191:	72 0c                	jb     c000819f <f_mkfs+0x1047>
c0008193:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008198:	0f 94 c1             	sete   cl
c000819b:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000819f:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a4:	75 4c                	jne    c00081f2 <f_mkfs+0x109a>
c00081a6:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081aa:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081ae:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081bc:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081c7:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d2:	0f b6 c9             	movzx  ecx,cl
c00081d5:	83 ec 0c             	sub    esp,0xc
c00081d8:	55                   	push   ebp
c00081d9:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e4:	e8 2f c2 ff ff       	call   c0004418 <create_partition>
c00081e9:	83 c4 10             	add    esp,0x10
c00081ec:	89 c3                	mov    ebx,eax
c00081ee:	85 c0                	test   eax,eax
c00081f0:	75 34                	jne    c0008226 <f_mkfs+0x10ce>
c00081f2:	31 db                	xor    ebx,ebx
c00081f4:	50                   	push   eax
c00081f5:	6a 00                	push   0x0
c00081f7:	6a 00                	push   0x0
c00081f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081fd:	e8 27 98 ff ff       	call   c0001a29 <disk_ioctl>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	85 c0                	test   eax,eax
c0008207:	74 1d                	je     c0008226 <f_mkfs+0x10ce>
c0008209:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008211:	75 0c                	jne    c000821f <f_mkfs+0x10c7>
c0008213:	83 ec 0c             	sub    esp,0xc
c0008216:	55                   	push   ebp
c0008217:	e8 75 00 00 00       	call   c0008291 <ff_memfree>
c000821c:	83 c4 10             	add    esp,0x10
c000821f:	bb 01 00 00 00       	mov    ebx,0x1
c0008224:	eb 48                	jmp    c000826e <f_mkfs+0x1116>
c0008226:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000822e:	75 3e                	jne    c000826e <f_mkfs+0x1116>
c0008230:	83 ec 0c             	sub    esp,0xc
c0008233:	55                   	push   ebp
c0008234:	e8 58 00 00 00       	call   c0008291 <ff_memfree>
c0008239:	83 c4 10             	add    esp,0x10
c000823c:	eb 30                	jmp    c000826e <f_mkfs+0x1116>
c000823e:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008243:	0f 85 eb fa ff ff    	jne    c0007d34 <f_mkfs+0xbdc>
c0008249:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000824d:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008253:	0f 86 b8 f9 ff ff    	jbe    c0007c11 <f_mkfs+0xab9>
c0008259:	e9 bf fb ff ff       	jmp    c0007e1d <f_mkfs+0xcc5>
c000825e:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008263:	0f 85 c0 fa ff ff    	jne    c0007d29 <f_mkfs+0xbd1>
c0008269:	e9 af fb ff ff       	jmp    c0007e1d <f_mkfs+0xcc5>
c000826e:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008274:	89 d8                	mov    eax,ebx
c0008276:	5b                   	pop    ebx
c0008277:	5e                   	pop    esi
c0008278:	5f                   	pop    edi
c0008279:	5d                   	pop    ebp
c000827a:	c3                   	ret    

c000827b <ff_memalloc>:
c000827b:	83 ec 0c             	sub    esp,0xc
c000827e:	83 ec 0c             	sub    esp,0xc
c0008281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008285:	e8 98 73 00 00       	call   c000f622 <malloc>
c000828a:	83 c4 10             	add    esp,0x10
c000828d:	83 c4 0c             	add    esp,0xc
c0008290:	c3                   	ret    

c0008291 <ff_memfree>:
c0008291:	83 ec 0c             	sub    esp,0xc
c0008294:	83 ec 0c             	sub    esp,0xc
c0008297:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829b:	e8 92 73 00 00       	call   c000f632 <free>
c00082a0:	83 c4 10             	add    esp,0x10
c00082a3:	90                   	nop
c00082a4:	83 c4 0c             	add    esp,0xc
c00082a7:	c3                   	ret    

c00082a8 <ff_uni2oem>:
c00082a8:	83 ec 14             	sub    esp,0x14
c00082ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082af:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082ba:	c7 44 24 0c 60 8f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028f60
c00082c2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082c7:	77 0b                	ja     c00082d4 <ff_uni2oem+0x2c>
c00082c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082cd:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d2:	eb 5b                	jmp    c000832f <ff_uni2oem+0x87>
c00082d4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082dc:	77 51                	ja     c000832f <ff_uni2oem+0x87>
c00082de:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e4:	75 49                	jne    c000832f <ff_uni2oem+0x87>
c00082e6:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082ed:	eb 0b                	jmp    c00082fa <ff_uni2oem+0x52>
c00082ef:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f4:	40                   	inc    eax
c00082f5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fa:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008300:	77 1b                	ja     c000831d <ff_uni2oem+0x75>
c0008302:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008307:	01 c0                	add    eax,eax
c0008309:	89 c2                	mov    edx,eax
c000830b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000830f:	01 d0                	add    eax,edx
c0008311:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008314:	0f b7 c0             	movzx  eax,ax
c0008317:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831b:	75 d2                	jne    c00082ef <ff_uni2oem+0x47>
c000831d:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008322:	83 e8 80             	sub    eax,0xffffff80
c0008325:	25 ff 00 00 00       	and    eax,0xff
c000832a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000832f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008334:	83 c4 14             	add    esp,0x14
c0008337:	c3                   	ret    

c0008338 <ff_oem2uni>:
c0008338:	83 ec 18             	sub    esp,0x18
c000833b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000833f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008343:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008348:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008353:	c7 44 24 10 60 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028f60
c000835b:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008361:	77 0b                	ja     c000836e <ff_oem2uni+0x36>
c0008363:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008367:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836c:	eb 2d                	jmp    c000839b <ff_oem2uni+0x63>
c000836e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008374:	75 25                	jne    c000839b <ff_oem2uni+0x63>
c0008376:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000837d:	77 1c                	ja     c000839b <ff_oem2uni+0x63>
c000837f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008384:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008389:	01 c0                	add    eax,eax
c000838b:	89 c2                	mov    edx,eax
c000838d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008391:	01 d0                	add    eax,edx
c0008393:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008396:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839b:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a0:	83 c4 18             	add    esp,0x18
c00083a3:	c3                   	ret    

c00083a4 <ff_wtoupper>:
c00083a4:	83 ec 10             	sub    esp,0x10
c00083a7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083af:	0f 87 3e 01 00 00    	ja     c00084f3 <ff_wtoupper+0x14f>
c00083b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083b9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083be:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c5:	77 07                	ja     c00083ce <ff_wtoupper+0x2a>
c00083c7:	b8 60 8d 02 c0       	mov    eax,0xc0028d60
c00083cc:	eb 05                	jmp    c00083d3 <ff_wtoupper+0x2f>
c00083ce:	b8 a0 8c 02 c0       	mov    eax,0xc0028ca0
c00083d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083db:	8d 50 02             	lea    edx,[eax+0x2]
c00083de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ea:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f0:	0f 84 f4 00 00 00    	je     c00084ea <ff_wtoupper+0x146>
c00083f6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fb:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008400:	0f 82 e4 00 00 00    	jb     c00084ea <ff_wtoupper+0x146>
c0008406:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840a:	8d 50 02             	lea    edx,[eax+0x2]
c000840d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008411:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008414:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008419:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000841e:	66 c1 e8 08          	shr    ax,0x8
c0008422:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008427:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000842e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008433:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008438:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000843d:	01 ca                	add    edx,ecx
c000843f:	39 d0                	cmp    eax,edx
c0008441:	0f 8d 86 00 00 00    	jge    c00084cd <ff_wtoupper+0x129>
c0008447:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844c:	83 f8 08             	cmp    eax,0x8
c000844f:	0f 87 94 00 00 00    	ja     c00084e9 <ff_wtoupper+0x145>
c0008455:	8b 04 85 60 8c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd73a0]
c000845c:	ff e0                	jmp    eax
c000845e:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008463:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008468:	29 c2                	sub    edx,eax
c000846a:	89 d0                	mov    eax,edx
c000846c:	01 c0                	add    eax,eax
c000846e:	89 c2                	mov    edx,eax
c0008470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008474:	01 d0                	add    eax,edx
c0008476:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008479:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000847e:	eb 4b                	jmp    c00084cb <ff_wtoupper+0x127>
c0008480:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008485:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008489:	83 e0 01             	and    eax,0x1
c000848c:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008491:	eb 38                	jmp    c00084cb <ff_wtoupper+0x127>
c0008493:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008499:	eb 30                	jmp    c00084cb <ff_wtoupper+0x127>
c000849b:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a1:	eb 28                	jmp    c00084cb <ff_wtoupper+0x127>
c00084a3:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084a9:	eb 20                	jmp    c00084cb <ff_wtoupper+0x127>
c00084ab:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b1:	eb 18                	jmp    c00084cb <ff_wtoupper+0x127>
c00084b3:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084b9:	eb 10                	jmp    c00084cb <ff_wtoupper+0x127>
c00084bb:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c1:	eb 08                	jmp    c00084cb <ff_wtoupper+0x127>
c00084c3:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084ca:	90                   	nop
c00084cb:	eb 1c                	jmp    c00084e9 <ff_wtoupper+0x145>
c00084cd:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d3:	0f 85 fe fe ff ff    	jne    c00083d7 <ff_wtoupper+0x33>
c00084d9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084de:	01 c0                	add    eax,eax
c00084e0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e4:	e9 ee fe ff ff       	jmp    c00083d7 <ff_wtoupper+0x33>
c00084e9:	90                   	nop
c00084ea:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f7:	83 c4 10             	add    esp,0x10
c00084fa:	c3                   	ret    

c00084fb <psrc_set_converter>:
c00084fb:	56                   	push   esi
c00084fc:	89 d6                	mov    esi,edx
c00084fe:	53                   	push   ebx
c00084ff:	89 c3                	mov    ebx,eax
c0008501:	83 ec 0c             	sub    esp,0xc
c0008504:	52                   	push   edx
c0008505:	50                   	push   eax
c0008506:	e8 6f 55 00 00       	call   c000da7a <sinc_set_converter>
c000850b:	83 c4 10             	add    esp,0x10
c000850e:	85 c0                	test   eax,eax
c0008510:	74 25                	je     c0008537 <psrc_set_converter+0x3c>
c0008512:	50                   	push   eax
c0008513:	50                   	push   eax
c0008514:	56                   	push   esi
c0008515:	53                   	push   ebx
c0008516:	e8 17 5d 00 00       	call   c000e232 <zoh_set_converter>
c000851b:	83 c4 10             	add    esp,0x10
c000851e:	85 c0                	test   eax,eax
c0008520:	74 15                	je     c0008537 <psrc_set_converter+0x3c>
c0008522:	51                   	push   ecx
c0008523:	51                   	push   ecx
c0008524:	56                   	push   esi
c0008525:	53                   	push   ebx
c0008526:	e8 0f 11 00 00       	call   c000963a <linear_set_converter>
c000852b:	83 c4 10             	add    esp,0x10
c000852e:	ba 0a 00 00 00       	mov    edx,0xa
c0008533:	85 c0                	test   eax,eax
c0008535:	75 02                	jne    c0008539 <psrc_set_converter+0x3e>
c0008537:	31 d2                	xor    edx,edx
c0008539:	89 d0                	mov    eax,edx
c000853b:	5a                   	pop    edx
c000853c:	5b                   	pop    ebx
c000853d:	5e                   	pop    esi
c000853e:	c3                   	ret    

c000853f <src_delete>:
c000853f:	53                   	push   ebx
c0008540:	83 ec 08             	sub    esp,0x8
c0008543:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008547:	85 db                	test   ebx,ebx
c0008549:	74 29                	je     c0008574 <src_delete+0x35>
c000854b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000854e:	85 c0                	test   eax,eax
c0008550:	74 0c                	je     c000855e <src_delete+0x1f>
c0008552:	83 ec 0c             	sub    esp,0xc
c0008555:	50                   	push   eax
c0008556:	e8 d7 70 00 00       	call   c000f632 <free>
c000855b:	83 c4 10             	add    esp,0x10
c000855e:	50                   	push   eax
c000855f:	6a 3c                	push   0x3c
c0008561:	6a 00                	push   0x0
c0008563:	53                   	push   ebx
c0008564:	e8 59 81 ff ff       	call   c00006c2 <memset>
c0008569:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000856c:	e8 c1 70 00 00       	call   c000f632 <free>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	31 c0                	xor    eax,eax
c0008576:	83 c4 08             	add    esp,0x8
c0008579:	5b                   	pop    ebx
c000857a:	c3                   	ret    

c000857b <src_process>:
c000857b:	55                   	push   ebp
c000857c:	57                   	push   edi
c000857d:	56                   	push   esi
c000857e:	53                   	push   ebx
c000857f:	83 ec 1c             	sub    esp,0x1c
c0008582:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008586:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000858a:	85 ed                	test   ebp,ebp
c000858c:	0f 84 6f 01 00 00    	je     c0008701 <src_process+0x186>
c0008592:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008596:	0f 84 6c 01 00 00    	je     c0008708 <src_process+0x18d>
c000859c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00085a0:	0f 84 62 01 00 00    	je     c0008708 <src_process+0x18d>
c00085a6:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085ad:	0f 85 5c 01 00 00    	jne    c000870f <src_process+0x194>
c00085b3:	85 db                	test   ebx,ebx
c00085b5:	0f 84 5b 01 00 00    	je     c0008716 <src_process+0x19b>
c00085bb:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085bd:	85 f6                	test   esi,esi
c00085bf:	0f 84 58 01 00 00    	je     c000871d <src_process+0x1a2>
c00085c5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085c8:	85 ff                	test   edi,edi
c00085ca:	0f 84 4d 01 00 00    	je     c000871d <src_process+0x1a2>
c00085d0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085d3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085de:	68 00 00 70 3f       	push   0x3f700000
c00085e3:	6a 00                	push   0x0
c00085e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085ed:	e8 2d f6 01 00       	call   c0027c1f <__ltdf2>
c00085f2:	83 c4 10             	add    esp,0x10
c00085f5:	85 c0                	test   eax,eax
c00085f7:	0f 88 27 01 00 00    	js     c0008724 <src_process+0x1a9>
c00085fd:	68 00 00 70 40       	push   0x40700000
c0008602:	6a 00                	push   0x0
c0008604:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008608:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860c:	e8 f0 f5 01 00       	call   c0027c01 <__gtdf2>
c0008611:	83 c4 10             	add    esp,0x10
c0008614:	85 c0                	test   eax,eax
c0008616:	0f 8f 08 01 00 00    	jg     c0008724 <src_process+0x1a9>
c000861c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008620:	79 07                	jns    c0008629 <src_process+0xae>
c0008622:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008629:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000862c:	85 c0                	test   eax,eax
c000862e:	79 50                	jns    c0008680 <src_process+0x105>
c0008630:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008637:	39 fe                	cmp    esi,edi
c0008639:	72 37                	jb     c0008672 <src_process+0xf7>
c000863b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008642:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008649:	68 00 00 70 3f       	push   0x3f700000
c000864e:	6a 00                	push   0x0
c0008650:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008653:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008656:	e8 c4 f5 01 00       	call   c0027c1f <__ltdf2>
c000865b:	83 c4 10             	add    esp,0x10
c000865e:	85 c0                	test   eax,eax
c0008660:	79 37                	jns    c0008699 <src_process+0x11e>
c0008662:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008666:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000866a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000866d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008670:	eb 27                	jmp    c0008699 <src_process+0x11e>
c0008672:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008675:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008679:	8d 04 86             	lea    eax,[esi+eax*4]
c000867c:	39 c7                	cmp    edi,eax
c000867e:	eb 0d                	jmp    c000868d <src_process+0x112>
c0008680:	39 fe                	cmp    esi,edi
c0008682:	72 ee                	jb     c0008672 <src_process+0xf7>
c0008684:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008688:	8d 04 87             	lea    eax,[edi+eax*4]
c000868b:	39 c6                	cmp    esi,eax
c000868d:	73 ac                	jae    c000863b <src_process+0xc0>
c000868f:	b8 10 00 00 00       	mov    eax,0x10
c0008694:	e9 90 00 00 00       	jmp    c0008729 <src_process+0x1ae>
c0008699:	83 ec 10             	sub    esp,0x10
c000869c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000869f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086a2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00086a5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00086a8:	e8 77 ec 01 00       	call   c0027324 <__subdf3>
c00086ad:	83 c4 18             	add    esp,0x18
c00086b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086b8:	52                   	push   edx
c00086b9:	50                   	push   eax
c00086ba:	e8 f1 f6 01 00       	call   c0027db0 <fabs>
c00086bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086c7:	83 c4 10             	add    esp,0x10
c00086ca:	68 af 03 d2 3c       	push   0x3cd203af
c00086cf:	68 16 56 e7 9e       	push   0x9ee75616
c00086d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086dc:	e8 3e f5 01 00       	call   c0027c1f <__ltdf2>
c00086e1:	83 c4 10             	add    esp,0x10
c00086e4:	85 c0                	test   eax,eax
c00086e6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086ea:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086ee:	79 05                	jns    c00086f5 <src_process+0x17a>
c00086f0:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086f3:	eb 03                	jmp    c00086f8 <src_process+0x17d>
c00086f5:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086f8:	83 c4 1c             	add    esp,0x1c
c00086fb:	5b                   	pop    ebx
c00086fc:	5e                   	pop    esi
c00086fd:	5f                   	pop    edi
c00086fe:	5d                   	pop    ebp
c00086ff:	ff e0                	jmp    eax
c0008701:	b8 02 00 00 00       	mov    eax,0x2
c0008706:	eb 21                	jmp    c0008729 <src_process+0x1ae>
c0008708:	b8 07 00 00 00       	mov    eax,0x7
c000870d:	eb 1a                	jmp    c0008729 <src_process+0x1ae>
c000870f:	b8 12 00 00 00       	mov    eax,0x12
c0008714:	eb 13                	jmp    c0008729 <src_process+0x1ae>
c0008716:	b8 03 00 00 00       	mov    eax,0x3
c000871b:	eb 0c                	jmp    c0008729 <src_process+0x1ae>
c000871d:	b8 04 00 00 00       	mov    eax,0x4
c0008722:	eb 05                	jmp    c0008729 <src_process+0x1ae>
c0008724:	b8 06 00 00 00       	mov    eax,0x6
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    

c0008731 <src_callback_read>:
c0008731:	55                   	push   ebp
c0008732:	57                   	push   edi
c0008733:	56                   	push   esi
c0008734:	53                   	push   ebx
c0008735:	83 ec 3c             	sub    esp,0x3c
c0008738:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000873c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008740:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008744:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008748:	85 ed                	test   ebp,ebp
c000874a:	0f 8e 52 01 00 00    	jle    c00088a2 <src_callback_read+0x171>
c0008750:	85 db                	test   ebx,ebx
c0008752:	0f 84 4a 01 00 00    	je     c00088a2 <src_callback_read+0x171>
c0008758:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000875f:	74 0c                	je     c000876d <src_callback_read+0x3c>
c0008761:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008768:	e9 35 01 00 00       	jmp    c00088a2 <src_callback_read+0x171>
c000876d:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008771:	75 0c                	jne    c000877f <src_callback_read+0x4e>
c0008773:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000877a:	e9 23 01 00 00       	jmp    c00088a2 <src_callback_read+0x171>
c000877f:	51                   	push   ecx
c0008780:	6a 24                	push   0x24
c0008782:	6a 00                	push   0x0
c0008784:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008788:	50                   	push   eax
c0008789:	e8 34 7f ff ff       	call   c00006c2 <memset>
c000878e:	83 c4 10             	add    esp,0x10
c0008791:	68 00 00 70 3f       	push   0x3f700000
c0008796:	6a 00                	push   0x0
c0008798:	57                   	push   edi
c0008799:	56                   	push   esi
c000879a:	e8 80 f4 01 00       	call   c0027c1f <__ltdf2>
c000879f:	83 c4 10             	add    esp,0x10
c00087a2:	85 c0                	test   eax,eax
c00087a4:	78 3e                	js     c00087e4 <src_callback_read+0xb3>
c00087a6:	68 00 00 70 40       	push   0x40700000
c00087ab:	6a 00                	push   0x0
c00087ad:	57                   	push   edi
c00087ae:	56                   	push   esi
c00087af:	e8 4d f4 01 00       	call   c0027c01 <__gtdf2>
c00087b4:	83 c4 10             	add    esp,0x10
c00087b7:	85 c0                	test   eax,eax
c00087b9:	7f 29                	jg     c00087e4 <src_callback_read+0xb3>
c00087bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087bf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087c7:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087cb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087ce:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d6:	31 f6                	xor    esi,esi
c00087d8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087df:	e9 97 00 00 00       	jmp    c000887b <src_callback_read+0x14a>
c00087e4:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087eb:	e9 b2 00 00 00       	jmp    c00088a2 <src_callback_read+0x171>
c00087f0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f8:	52                   	push   edx
c00087f9:	52                   	push   edx
c00087fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087fe:	50                   	push   eax
c00087ff:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008802:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008805:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008809:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000880d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008811:	83 c4 10             	add    esp,0x10
c0008814:	85 c0                	test   eax,eax
c0008816:	75 08                	jne    c0008820 <src_callback_read+0xef>
c0008818:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008820:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008827:	50                   	push   eax
c0008828:	50                   	push   eax
c0008829:	8d 44 24 14          	lea    eax,[esp+0x14]
c000882d:	50                   	push   eax
c000882e:	53                   	push   ebx
c000882f:	e8 47 fd ff ff       	call   c000857b <src_process>
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000883e:	85 c0                	test   eax,eax
c0008840:	75 49                	jne    c000888b <src_callback_read+0x15a>
c0008842:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008849:	89 f9                	mov    ecx,edi
c000884b:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c000884f:	0f af ca             	imul   ecx,edx
c0008852:	c1 e1 02             	shl    ecx,0x2
c0008855:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008859:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000885d:	0f af d1             	imul   edx,ecx
c0008860:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008864:	c1 e2 02             	shl    edx,0x2
c0008867:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000886b:	8d 14 31             	lea    edx,[ecx+esi*1]
c000886e:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008873:	74 12                	je     c0008887 <src_callback_read+0x156>
c0008875:	39 d5                	cmp    ebp,edx
c0008877:	7e 14                	jle    c000888d <src_callback_read+0x15c>
c0008879:	89 d6                	mov    esi,edx
c000887b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008880:	75 9e                	jne    c0008820 <src_callback_read+0xef>
c0008882:	e9 69 ff ff ff       	jmp    c00087f0 <src_callback_read+0xbf>
c0008887:	85 c9                	test   ecx,ecx
c0008889:	75 ea                	jne    c0008875 <src_callback_read+0x144>
c000888b:	89 f2                	mov    edx,esi
c000888d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008891:	85 c0                	test   eax,eax
c0008893:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008896:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889d:	74 05                	je     c00088a4 <src_callback_read+0x173>
c000889f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a2:	31 d2                	xor    edx,edx
c00088a4:	83 c4 3c             	add    esp,0x3c
c00088a7:	89 d0                	mov    eax,edx
c00088a9:	5b                   	pop    ebx
c00088aa:	5e                   	pop    esi
c00088ab:	5f                   	pop    edi
c00088ac:	5d                   	pop    ebp
c00088ad:	c3                   	ret    

c00088ae <src_set_ratio>:
c00088ae:	57                   	push   edi
c00088af:	ba 02 00 00 00       	mov    edx,0x2
c00088b4:	56                   	push   esi
c00088b5:	53                   	push   ebx
c00088b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088be:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c2:	85 db                	test   ebx,ebx
c00088c4:	74 4c                	je     c0008912 <src_set_ratio+0x64>
c00088c6:	ba 07 00 00 00       	mov    edx,0x7
c00088cb:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088cf:	74 41                	je     c0008912 <src_set_ratio+0x64>
c00088d1:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d5:	74 3b                	je     c0008912 <src_set_ratio+0x64>
c00088d7:	68 00 00 70 3f       	push   0x3f700000
c00088dc:	6a 00                	push   0x0
c00088de:	57                   	push   edi
c00088df:	56                   	push   esi
c00088e0:	e8 3a f3 01 00       	call   c0027c1f <__ltdf2>
c00088e5:	83 c4 10             	add    esp,0x10
c00088e8:	ba 06 00 00 00       	mov    edx,0x6
c00088ed:	85 c0                	test   eax,eax
c00088ef:	78 21                	js     c0008912 <src_set_ratio+0x64>
c00088f1:	68 00 00 70 40       	push   0x40700000
c00088f6:	6a 00                	push   0x0
c00088f8:	57                   	push   edi
c00088f9:	56                   	push   esi
c00088fa:	e8 02 f3 01 00       	call   c0027c01 <__gtdf2>
c00088ff:	83 c4 10             	add    esp,0x10
c0008902:	ba 06 00 00 00       	mov    edx,0x6
c0008907:	85 c0                	test   eax,eax
c0008909:	7f 07                	jg     c0008912 <src_set_ratio+0x64>
c000890b:	89 33                	mov    DWORD PTR [ebx],esi
c000890d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008910:	31 d2                	xor    edx,edx
c0008912:	5b                   	pop    ebx
c0008913:	89 d0                	mov    eax,edx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	c3                   	ret    

c0008918 <src_get_channels>:
c0008918:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000891c:	b8 02 00 00 00       	mov    eax,0x2
c0008921:	85 d2                	test   edx,edx
c0008923:	74 14                	je     c0008939 <src_get_channels+0x21>
c0008925:	b8 07 00 00 00       	mov    eax,0x7
c000892a:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c000892e:	74 09                	je     c0008939 <src_get_channels+0x21>
c0008930:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008934:	74 03                	je     c0008939 <src_get_channels+0x21>
c0008936:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008939:	c3                   	ret    

c000893a <src_reset>:
c000893a:	53                   	push   ebx
c000893b:	b8 02 00 00 00       	mov    eax,0x2
c0008940:	83 ec 08             	sub    esp,0x8
c0008943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008947:	85 db                	test   ebx,ebx
c0008949:	74 36                	je     c0008981 <src_reset+0x47>
c000894b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000894e:	85 c0                	test   eax,eax
c0008950:	74 09                	je     c000895b <src_reset+0x21>
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	53                   	push   ebx
c0008956:	ff d0                	call   eax
c0008958:	83 c4 10             	add    esp,0x10
c000895b:	31 c0                	xor    eax,eax
c000895d:	31 d2                	xor    edx,edx
c000895f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008962:	89 03                	mov    DWORD PTR [ebx],eax
c0008964:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008967:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000896a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008971:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008978:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000897f:	31 c0                	xor    eax,eax
c0008981:	83 c4 08             	add    esp,0x8
c0008984:	5b                   	pop    ebx
c0008985:	c3                   	ret    

c0008986 <src_new>:
c0008986:	57                   	push   edi
c0008987:	56                   	push   esi
c0008988:	53                   	push   ebx
c0008989:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000898d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008991:	85 f6                	test   esi,esi
c0008993:	74 73                	je     c0008a08 <src_new+0x82>
c0008995:	85 ff                	test   edi,edi
c0008997:	7f 08                	jg     c00089a1 <src_new+0x1b>
c0008999:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c000899f:	eb 1e                	jmp    c00089bf <src_new+0x39>
c00089a1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a7:	50                   	push   eax
c00089a8:	50                   	push   eax
c00089a9:	6a 3c                	push   0x3c
c00089ab:	6a 01                	push   0x1
c00089ad:	e8 a0 6c 00 00       	call   c000f652 <calloc>
c00089b2:	83 c4 10             	add    esp,0x10
c00089b5:	89 c3                	mov    ebx,eax
c00089b7:	85 c0                	test   eax,eax
c00089b9:	75 10                	jne    c00089cb <src_new+0x45>
c00089bb:	85 f6                	test   esi,esi
c00089bd:	75 04                	jne    c00089c3 <src_new+0x3d>
c00089bf:	31 db                	xor    ebx,ebx
c00089c1:	eb 4b                	jmp    c0008a0e <src_new+0x88>
c00089c3:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089c9:	eb 43                	jmp    c0008a0e <src_new+0x88>
c00089cb:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089ce:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089d9:	e8 1d fb ff ff       	call   c00084fb <psrc_set_converter>
c00089de:	85 c0                	test   eax,eax
c00089e0:	74 18                	je     c00089fa <src_new+0x74>
c00089e2:	85 f6                	test   esi,esi
c00089e4:	74 06                	je     c00089ec <src_new+0x66>
c00089e6:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089ec:	83 ec 0c             	sub    esp,0xc
c00089ef:	53                   	push   ebx
c00089f0:	31 db                	xor    ebx,ebx
c00089f2:	e8 3b 6c 00 00       	call   c000f632 <free>
c00089f7:	83 c4 10             	add    esp,0x10
c00089fa:	83 ec 0c             	sub    esp,0xc
c00089fd:	53                   	push   ebx
c00089fe:	e8 37 ff ff ff       	call   c000893a <src_reset>
c0008a03:	83 c4 10             	add    esp,0x10
c0008a06:	eb 06                	jmp    c0008a0e <src_new+0x88>
c0008a08:	85 ff                	test   edi,edi
c0008a0a:	7f 9b                	jg     c00089a7 <src_new+0x21>
c0008a0c:	eb b1                	jmp    c00089bf <src_new+0x39>
c0008a0e:	89 d8                	mov    eax,ebx
c0008a10:	5b                   	pop    ebx
c0008a11:	5e                   	pop    esi
c0008a12:	5f                   	pop    edi
c0008a13:	c3                   	ret    

c0008a14 <src_callback_new>:
c0008a14:	56                   	push   esi
c0008a15:	53                   	push   ebx
c0008a16:	53                   	push   ebx
c0008a17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a1f:	85 f6                	test   esi,esi
c0008a21:	75 0e                	jne    c0008a31 <src_callback_new+0x1d>
c0008a23:	31 db                	xor    ebx,ebx
c0008a25:	85 c0                	test   eax,eax
c0008a27:	74 47                	je     c0008a70 <src_callback_new+0x5c>
c0008a29:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a2f:	eb 3f                	jmp    c0008a70 <src_callback_new+0x5c>
c0008a31:	85 c0                	test   eax,eax
c0008a33:	74 06                	je     c0008a3b <src_callback_new+0x27>
c0008a35:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3b:	51                   	push   ecx
c0008a3c:	50                   	push   eax
c0008a3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a45:	e8 3c ff ff ff       	call   c0008986 <src_new>
c0008a4a:	83 c4 10             	add    esp,0x10
c0008a4d:	89 c3                	mov    ebx,eax
c0008a4f:	85 c0                	test   eax,eax
c0008a51:	74 1d                	je     c0008a70 <src_callback_new+0x5c>
c0008a53:	83 ec 0c             	sub    esp,0xc
c0008a56:	50                   	push   eax
c0008a57:	e8 de fe ff ff       	call   c000893a <src_reset>
c0008a5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a60:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a67:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a6a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a6d:	83 c4 10             	add    esp,0x10
c0008a70:	89 d8                	mov    eax,ebx
c0008a72:	5a                   	pop    edx
c0008a73:	5b                   	pop    ebx
c0008a74:	5e                   	pop    esi
c0008a75:	c3                   	ret    

c0008a76 <src_get_name>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 d0 4f 00 00       	call   c000da54 <sinc_get_name>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_name+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 80 57 00 00       	call   c000e214 <zoh_get_name>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_name+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 74 0b 00 00       	jmp    c000961c <linear_get_name>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_description>:
c0008aad:	53                   	push   ebx
c0008aae:	83 ec 14             	sub    esp,0x14
c0008ab1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ab5:	53                   	push   ebx
c0008ab6:	e8 ac 4f 00 00       	call   c000da67 <sinc_get_description>
c0008abb:	83 c4 10             	add    esp,0x10
c0008abe:	85 c0                	test   eax,eax
c0008ac0:	75 1d                	jne    c0008adf <src_get_description+0x32>
c0008ac2:	83 ec 0c             	sub    esp,0xc
c0008ac5:	53                   	push   ebx
c0008ac6:	e8 58 57 00 00       	call   c000e223 <zoh_get_description>
c0008acb:	83 c4 10             	add    esp,0x10
c0008ace:	85 c0                	test   eax,eax
c0008ad0:	75 0d                	jne    c0008adf <src_get_description+0x32>
c0008ad2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad6:	83 c4 08             	add    esp,0x8
c0008ad9:	5b                   	pop    ebx
c0008ada:	e9 4c 0b 00 00       	jmp    c000962b <linear_get_description>
c0008adf:	83 c4 08             	add    esp,0x8
c0008ae2:	5b                   	pop    ebx
c0008ae3:	c3                   	ret    

c0008ae4 <src_get_version>:
c0008ae4:	b8 60 90 02 c0       	mov    eax,0xc0029060
c0008ae9:	c3                   	ret    

c0008aea <src_is_valid_ratio>:
c0008aea:	83 ec 1c             	sub    esp,0x1c
c0008aed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008af1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008af5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008af9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008afd:	68 00 00 70 3f       	push   0x3f700000
c0008b02:	6a 00                	push   0x0
c0008b04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0c:	e8 0e f1 01 00       	call   c0027c1f <__ltdf2>
c0008b11:	83 c4 10             	add    esp,0x10
c0008b14:	31 d2                	xor    edx,edx
c0008b16:	85 c0                	test   eax,eax
c0008b18:	78 1e                	js     c0008b38 <src_is_valid_ratio+0x4e>
c0008b1a:	68 00 00 70 40       	push   0x40700000
c0008b1f:	6a 00                	push   0x0
c0008b21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b29:	e8 d3 f0 01 00       	call   c0027c01 <__gtdf2>
c0008b2e:	31 d2                	xor    edx,edx
c0008b30:	83 c4 10             	add    esp,0x10
c0008b33:	85 c0                	test   eax,eax
c0008b35:	0f 9e c2             	setle  dl
c0008b38:	89 d0                	mov    eax,edx
c0008b3a:	83 c4 1c             	add    esp,0x1c
c0008b3d:	c3                   	ret    

c0008b3e <src_error>:
c0008b3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b42:	31 c0                	xor    eax,eax
c0008b44:	85 d2                	test   edx,edx
c0008b46:	74 03                	je     c0008b4b <src_error+0xd>
c0008b48:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b4b:	c3                   	ret    

c0008b4c <src_strerror>:
c0008b4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b50:	31 c0                	xor    eax,eax
c0008b52:	83 fa 17             	cmp    edx,0x17
c0008b55:	77 07                	ja     c0008b5e <src_strerror+0x12>
c0008b57:	8b 04 95 c0 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6b40]
c0008b5e:	c3                   	ret    

c0008b5f <src_simple>:
c0008b5f:	56                   	push   esi
c0008b60:	53                   	push   ebx
c0008b61:	83 ec 18             	sub    esp,0x18
c0008b64:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b68:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b6c:	50                   	push   eax
c0008b6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b75:	e8 0c fe ff ff       	call   c0008986 <src_new>
c0008b7a:	83 c4 10             	add    esp,0x10
c0008b7d:	85 c0                	test   eax,eax
c0008b7f:	75 06                	jne    c0008b87 <src_simple+0x28>
c0008b81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b85:	eb 25                	jmp    c0008bac <src_simple+0x4d>
c0008b87:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b8e:	89 c3                	mov    ebx,eax
c0008b90:	50                   	push   eax
c0008b91:	50                   	push   eax
c0008b92:	56                   	push   esi
c0008b93:	53                   	push   ebx
c0008b94:	e8 e2 f9 ff ff       	call   c000857b <src_process>
c0008b99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ba0:	e8 9a f9 ff ff       	call   c000853f <src_delete>
c0008ba5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ba9:	83 c4 10             	add    esp,0x10
c0008bac:	83 c4 14             	add    esp,0x14
c0008baf:	5b                   	pop    ebx
c0008bb0:	5e                   	pop    esi
c0008bb1:	c3                   	ret    

c0008bb2 <src_short_to_float_array>:
c0008bb2:	53                   	push   ebx
c0008bb3:	83 ec 18             	sub    esp,0x18
c0008bb6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bba:	85 db                	test   ebx,ebx
c0008bbc:	74 54                	je     c0008c12 <src_short_to_float_array+0x60>
c0008bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc2:	4b                   	dec    ebx
c0008bc3:	83 ec 0c             	sub    esp,0xc
c0008bc6:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bca:	50                   	push   eax
c0008bcb:	e8 e3 ed 01 00       	call   c00279b3 <__floatsidf>
c0008bd0:	83 c4 10             	add    esp,0x10
c0008bd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bd7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bdb:	68 00 00 00 3f       	push   0x3f000000
c0008be0:	6a 00                	push   0x0
c0008be2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bea:	e8 61 e7 01 00       	call   c0027350 <__muldf3>
c0008bef:	59                   	pop    ecx
c0008bf0:	59                   	pop    ecx
c0008bf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bf5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c01:	e8 1d f0 01 00       	call   c0027c23 <__truncdfsf2>
c0008c06:	83 c4 10             	add    esp,0x10
c0008c09:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c0d:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c10:	eb a8                	jmp    c0008bba <src_short_to_float_array+0x8>
c0008c12:	83 c4 18             	add    esp,0x18
c0008c15:	5b                   	pop    ebx
c0008c16:	c3                   	ret    

c0008c17 <src_float_to_short_array>:
c0008c17:	56                   	push   esi
c0008c18:	53                   	push   ebx
c0008c19:	83 ec 14             	sub    esp,0x14
c0008c1c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c20:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c24:	85 db                	test   ebx,ebx
c0008c26:	0f 84 a4 00 00 00    	je     c0008cd0 <src_float_to_short_array+0xb9>
c0008c2c:	83 ec 0c             	sub    esp,0xc
c0008c2f:	4b                   	dec    ebx
c0008c30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c34:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c37:	e8 0b f1 01 00       	call   c0027d47 <__extendsfdf2>
c0008c3c:	83 c4 10             	add    esp,0x10
c0008c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c47:	68 00 00 e0 41       	push   0x41e00000
c0008c4c:	6a 00                	push   0x0
c0008c4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c56:	e8 f5 e6 01 00       	call   c0027350 <__muldf3>
c0008c5b:	83 c4 10             	add    esp,0x10
c0008c5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c66:	68 ff ff df 41       	push   0x41dfffff
c0008c6b:	68 00 00 c0 ff       	push   0xffc00000
c0008c70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c78:	e8 a0 ef 01 00       	call   c0027c1d <__gedf2>
c0008c7d:	83 c4 10             	add    esp,0x10
c0008c80:	85 c0                	test   eax,eax
c0008c82:	78 08                	js     c0008c8c <src_float_to_short_array+0x75>
c0008c84:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c8a:	eb 98                	jmp    c0008c24 <src_float_to_short_array+0xd>
c0008c8c:	68 00 00 e0 c1       	push   0xc1e00000
c0008c91:	6a 00                	push   0x0
c0008c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c9b:	e8 81 ef 01 00       	call   c0027c21 <__ledf2>
c0008ca0:	83 c4 10             	add    esp,0x10
c0008ca3:	85 c0                	test   eax,eax
c0008ca5:	7f 0b                	jg     c0008cb2 <src_float_to_short_array+0x9b>
c0008ca7:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008cad:	e9 72 ff ff ff       	jmp    c0008c24 <src_float_to_short_array+0xd>
c0008cb2:	50                   	push   eax
c0008cb3:	50                   	push   eax
c0008cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cbc:	e8 0f f1 01 00       	call   c0027dd0 <lrint>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	c1 f8 10             	sar    eax,0x10
c0008cc7:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ccb:	e9 54 ff ff ff       	jmp    c0008c24 <src_float_to_short_array+0xd>
c0008cd0:	83 c4 14             	add    esp,0x14
c0008cd3:	5b                   	pop    ebx
c0008cd4:	5e                   	pop    esi
c0008cd5:	c3                   	ret    

c0008cd6 <src_int_to_float_array>:
c0008cd6:	53                   	push   ebx
c0008cd7:	83 ec 18             	sub    esp,0x18
c0008cda:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cde:	85 db                	test   ebx,ebx
c0008ce0:	74 52                	je     c0008d34 <src_int_to_float_array+0x5e>
c0008ce2:	83 ec 0c             	sub    esp,0xc
c0008ce5:	4b                   	dec    ebx
c0008ce6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cea:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ced:	e8 c1 ec 01 00       	call   c00279b3 <__floatsidf>
c0008cf2:	83 c4 10             	add    esp,0x10
c0008cf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cf9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cfd:	68 00 00 00 3e       	push   0x3e000000
c0008d02:	6a 00                	push   0x0
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0c:	e8 3f e6 01 00       	call   c0027350 <__muldf3>
c0008d11:	59                   	pop    ecx
c0008d12:	59                   	pop    ecx
c0008d13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d17:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d23:	e8 fb ee 01 00       	call   c0027c23 <__truncdfsf2>
c0008d28:	83 c4 10             	add    esp,0x10
c0008d2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d2f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d32:	eb aa                	jmp    c0008cde <src_int_to_float_array+0x8>
c0008d34:	83 c4 18             	add    esp,0x18
c0008d37:	5b                   	pop    ebx
c0008d38:	c3                   	ret    

c0008d39 <src_float_to_int_array>:
c0008d39:	56                   	push   esi
c0008d3a:	53                   	push   ebx
c0008d3b:	83 ec 14             	sub    esp,0x14
c0008d3e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d42:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d46:	85 db                	test   ebx,ebx
c0008d48:	0f 84 a2 00 00 00    	je     c0008df0 <src_float_to_int_array+0xb7>
c0008d4e:	83 ec 0c             	sub    esp,0xc
c0008d51:	4b                   	dec    ebx
c0008d52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d56:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d59:	e8 e9 ef 01 00       	call   c0027d47 <__extendsfdf2>
c0008d5e:	83 c4 10             	add    esp,0x10
c0008d61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d69:	68 00 00 e0 41       	push   0x41e00000
c0008d6e:	6a 00                	push   0x0
c0008d70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d78:	e8 d3 e5 01 00       	call   c0027350 <__muldf3>
c0008d7d:	83 c4 10             	add    esp,0x10
c0008d80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d84:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d88:	68 ff ff df 41       	push   0x41dfffff
c0008d8d:	68 00 00 c0 ff       	push   0xffc00000
c0008d92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9a:	e8 7e ee 01 00       	call   c0027c1d <__gedf2>
c0008d9f:	83 c4 10             	add    esp,0x10
c0008da2:	85 c0                	test   eax,eax
c0008da4:	78 09                	js     c0008daf <src_float_to_int_array+0x76>
c0008da6:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008dad:	eb 97                	jmp    c0008d46 <src_float_to_int_array+0xd>
c0008daf:	68 00 00 e0 c1       	push   0xc1e00000
c0008db4:	6a 00                	push   0x0
c0008db6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dbe:	e8 5e ee 01 00       	call   c0027c21 <__ledf2>
c0008dc3:	83 c4 10             	add    esp,0x10
c0008dc6:	85 c0                	test   eax,eax
c0008dc8:	7f 0c                	jg     c0008dd6 <src_float_to_int_array+0x9d>
c0008dca:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008dd1:	e9 70 ff ff ff       	jmp    c0008d46 <src_float_to_int_array+0xd>
c0008dd6:	50                   	push   eax
c0008dd7:	50                   	push   eax
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 eb ef 01 00       	call   c0027dd0 <lrint>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008deb:	e9 56 ff ff ff       	jmp    c0008d46 <src_float_to_int_array+0xd>
c0008df0:	83 c4 14             	add    esp,0x14
c0008df3:	5b                   	pop    ebx
c0008df4:	5e                   	pop    esi
c0008df5:	c3                   	ret    

c0008df6 <linear_vari_process>:
c0008df6:	55                   	push   ebp
c0008df7:	31 d2                	xor    edx,edx
c0008df9:	57                   	push   edi
c0008dfa:	56                   	push   esi
c0008dfb:	53                   	push   ebx
c0008dfc:	83 ec 3c             	sub    esp,0x3c
c0008dff:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e03:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e07:	0f 8e d3 07 00 00    	jle    c00095e0 <linear_vari_process+0x7ea>
c0008e0d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e11:	ba 05 00 00 00       	mov    edx,0x5
c0008e16:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e19:	85 db                	test   ebx,ebx
c0008e1b:	0f 84 bf 07 00 00    	je     c00095e0 <linear_vari_process+0x7ea>
c0008e21:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e24:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e28:	74 19                	je     c0008e43 <linear_vari_process+0x4d>
c0008e2a:	31 d2                	xor    edx,edx
c0008e2c:	39 c2                	cmp    edx,eax
c0008e2e:	7d 0c                	jge    c0008e3c <linear_vari_process+0x46>
c0008e30:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e32:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e35:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e39:	42                   	inc    edx
c0008e3a:	eb f0                	jmp    c0008e2c <linear_vari_process+0x36>
c0008e3c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e43:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e46:	0f af d0             	imul   edx,eax
c0008e49:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e4c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e57:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e5a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e65:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e68:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e72:	68 00 00 70 3f       	push   0x3f700000
c0008e77:	6a 00                	push   0x0
c0008e79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e81:	e8 99 ed 01 00       	call   c0027c1f <__ltdf2>
c0008e86:	83 c4 10             	add    esp,0x10
c0008e89:	ba 16 00 00 00       	mov    edx,0x16
c0008e8e:	85 c0                	test   eax,eax
c0008e90:	0f 88 4a 07 00 00    	js     c00095e0 <linear_vari_process+0x7ea>
c0008e96:	68 00 00 70 40       	push   0x40700000
c0008e9b:	6a 00                	push   0x0
c0008e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea5:	e8 57 ed 01 00       	call   c0027c01 <__gtdf2>
c0008eaa:	83 c4 10             	add    esp,0x10
c0008ead:	ba 16 00 00 00       	mov    edx,0x16
c0008eb2:	85 c0                	test   eax,eax
c0008eb4:	0f 8f 26 07 00 00    	jg     c00095e0 <linear_vari_process+0x7ea>
c0008eba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ebe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008ec1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ec4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ec8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ecc:	68 00 00 f0 3f       	push   0x3ff00000
c0008ed1:	6a 00                	push   0x0
c0008ed3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edb:	e8 3f ed 01 00       	call   c0027c1f <__ltdf2>
c0008ee0:	83 c4 10             	add    esp,0x10
c0008ee3:	85 c0                	test   eax,eax
c0008ee5:	0f 89 89 02 00 00    	jns    c0009174 <linear_vari_process+0x37e>
c0008eeb:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eee:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008ef1:	0f 8d 7d 02 00 00    	jge    c0009174 <linear_vari_process+0x37e>
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008efd:	e8 b1 ea 01 00       	call   c00279b3 <__floatsidf>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f08:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f0c:	68 00 00 f0 3f       	push   0x3ff00000
c0008f11:	6a 00                	push   0x0
c0008f13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1b:	e8 b3 dd 01 00       	call   c0026cd3 <__adddf3>
c0008f20:	83 c4 10             	add    esp,0x10
c0008f23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f27:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f2b:	52                   	push   edx
c0008f2c:	50                   	push   eax
c0008f2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f35:	e8 16 e4 01 00       	call   c0027350 <__muldf3>
c0008f3a:	5d                   	pop    ebp
c0008f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f3f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f43:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f46:	e8 68 ea 01 00       	call   c00279b3 <__floatsidf>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f56:	52                   	push   edx
c0008f57:	50                   	push   eax
c0008f58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f60:	e8 6e dd 01 00       	call   c0026cd3 <__adddf3>
c0008f65:	59                   	pop    ecx
c0008f66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f6a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f6e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f71:	e8 3d ea 01 00       	call   c00279b3 <__floatsidf>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f81:	52                   	push   edx
c0008f82:	50                   	push   eax
c0008f83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f87:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f8b:	e8 8d ec 01 00       	call   c0027c1d <__gedf2>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	85 c0                	test   eax,eax
c0008f95:	0f 89 d9 01 00 00    	jns    c0009174 <linear_vari_process+0x37e>
c0008f9b:	85 ff                	test   edi,edi
c0008f9d:	0f 8e f4 00 00 00    	jle    c0009097 <linear_vari_process+0x2a1>
c0008fa3:	83 ec 10             	sub    esp,0x10
c0008fa6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fa9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fac:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fb0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fb3:	ff 30                	push   DWORD PTR [eax]
c0008fb5:	e8 6a e3 01 00       	call   c0027324 <__subdf3>
c0008fba:	83 c4 18             	add    esp,0x18
c0008fbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc5:	52                   	push   edx
c0008fc6:	50                   	push   eax
c0008fc7:	e8 e4 ed 01 00       	call   c0027db0 <fabs>
c0008fcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fdc:	68 23 42 92 0c       	push   0xc924223
c0008fe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe9:	e8 13 ec 01 00       	call   c0027c01 <__gtdf2>
c0008fee:	83 c4 10             	add    esp,0x10
c0008ff1:	85 c0                	test   eax,eax
c0008ff3:	0f 8e 9e 00 00 00    	jle    c0009097 <linear_vari_process+0x2a1>
c0008ff9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ffd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009000:	8b 00                	mov    eax,DWORD PTR [eax]
c0009002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009006:	89 04 24             	mov    DWORD PTR [esp],eax
c0009009:	52                   	push   edx
c000900a:	50                   	push   eax
c000900b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000900e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009011:	e8 0e e3 01 00       	call   c0027324 <__subdf3>
c0009016:	59                   	pop    ecx
c0009017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000901b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000901f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009022:	e8 8c e9 01 00       	call   c00279b3 <__floatsidf>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000902e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009032:	52                   	push   edx
c0009033:	50                   	push   eax
c0009034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903c:	e8 0f e3 01 00       	call   c0027350 <__muldf3>
c0009041:	5f                   	pop    edi
c0009042:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009046:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000904a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000904d:	e8 61 e9 01 00       	call   c00279b3 <__floatsidf>
c0009052:	83 c4 10             	add    esp,0x10
c0009055:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009059:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000905d:	52                   	push   edx
c000905e:	50                   	push   eax
c000905f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009063:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009067:	e8 c8 e5 01 00       	call   c0027634 <__divdf3>
c000906c:	83 c4 10             	add    esp,0x10
c000906f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009073:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009077:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000907b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000907f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009087:	e8 47 dc 01 00       	call   c0026cd3 <__adddf3>
c000908c:	83 c4 10             	add    esp,0x10
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009097:	31 ff                	xor    edi,edi
c0009099:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000909c:	0f 8e 9d 00 00 00    	jle    c000913f <linear_vari_process+0x349>
c00090a2:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090a5:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090ac:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00090b5:	52                   	push   edx
c00090b6:	52                   	push   edx
c00090b7:	55                   	push   ebp
c00090b8:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090bb:	47                   	inc    edi
c00090bc:	e8 a7 d5 01 00       	call   c0026668 <__subsf3>
c00090c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00090c4:	e8 7e ec 01 00       	call   c0027d47 <__extendsfdf2>
c00090c9:	83 c4 10             	add    esp,0x10
c00090cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e4:	e8 67 e2 01 00       	call   c0027350 <__muldf3>
c00090e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090f4:	e8 4e ec 01 00       	call   c0027d47 <__extendsfdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009100:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009104:	52                   	push   edx
c0009105:	50                   	push   eax
c0009106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000910a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000910e:	e8 c0 db 01 00       	call   c0026cd3 <__adddf3>
c0009113:	59                   	pop    ecx
c0009114:	5d                   	pop    ebp
c0009115:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009119:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000911d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009121:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009125:	e8 f9 ea 01 00       	call   c0027c23 <__truncdfsf2>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009130:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009134:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009137:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000913a:	e9 5a ff ff ff       	jmp    c0009099 <linear_vari_process+0x2a3>
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	68 00 00 f0 3f       	push   0x3ff00000
c000914c:	6a 00                	push   0x0
c000914e:	e8 e1 e4 01 00       	call   c0027634 <__divdf3>
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 04 24             	mov    DWORD PTR [esp],eax
c0009159:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000915d:	52                   	push   edx
c000915e:	50                   	push   eax
c000915f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009163:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009167:	e8 67 db 01 00       	call   c0026cd3 <__adddf3>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	e9 50 fd ff ff       	jmp    c0008ec4 <linear_vari_process+0xce>
c0009174:	50                   	push   eax
c0009175:	50                   	push   eax
c0009176:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917e:	e8 4d ec 01 00       	call   c0027dd0 <lrint>
c0009183:	83 ec 0c             	sub    esp,0xc
c0009186:	50                   	push   eax
c0009187:	e8 27 e8 01 00       	call   c00279b3 <__floatsidf>
c000918c:	83 c4 10             	add    esp,0x10
c000918f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009193:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009197:	52                   	push   edx
c0009198:	50                   	push   eax
c0009199:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000919d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a1:	e8 7e e1 01 00       	call   c0027324 <__subdf3>
c00091a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091aa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091ae:	83 c4 20             	add    esp,0x20
c00091b1:	6a 00                	push   0x0
c00091b3:	6a 00                	push   0x0
c00091b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bd:	e8 5d ea 01 00       	call   c0027c1f <__ltdf2>
c00091c2:	83 c4 10             	add    esp,0x10
c00091c5:	85 c0                	test   eax,eax
c00091c7:	79 1e                	jns    c00091e7 <linear_vari_process+0x3f1>
c00091c9:	68 00 00 f0 3f       	push   0x3ff00000
c00091ce:	6a 00                	push   0x0
c00091d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d8:	e8 f6 da 01 00       	call   c0026cd3 <__adddf3>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091ea:	83 ec 10             	sub    esp,0x10
c00091ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091fd:	e8 22 e1 01 00       	call   c0027324 <__subdf3>
c0009202:	83 c4 18             	add    esp,0x18
c0009205:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009209:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000920d:	52                   	push   edx
c000920e:	50                   	push   eax
c000920f:	e8 bc eb 01 00       	call   c0027dd0 <lrint>
c0009214:	83 c4 10             	add    esp,0x10
c0009217:	0f af f8             	imul   edi,eax
c000921a:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000921d:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009220:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009223:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009226:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009229:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000922d:	0f 8d 13 03 00 00    	jge    c0009546 <linear_vari_process+0x750>
c0009233:	83 ec 0c             	sub    esp,0xc
c0009236:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009239:	e8 75 e7 01 00       	call   c00279b3 <__floatsidf>
c000923e:	83 c4 10             	add    esp,0x10
c0009241:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009245:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009249:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000924d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009259:	e8 f2 e0 01 00       	call   c0027350 <__muldf3>
c000925e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009261:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009265:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009269:	e8 45 e7 01 00       	call   c00279b3 <__floatsidf>
c000926e:	83 c4 10             	add    esp,0x10
c0009271:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009275:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009279:	52                   	push   edx
c000927a:	50                   	push   eax
c000927b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000927f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009283:	e8 4b da 01 00       	call   c0026cd3 <__adddf3>
c0009288:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000928b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000928f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009293:	e8 1b e7 01 00       	call   c00279b3 <__floatsidf>
c0009298:	83 c4 10             	add    esp,0x10
c000929b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000929f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a3:	52                   	push   edx
c00092a4:	50                   	push   eax
c00092a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ad:	e8 6d e9 01 00       	call   c0027c1f <__ltdf2>
c00092b2:	83 c4 10             	add    esp,0x10
c00092b5:	85 c0                	test   eax,eax
c00092b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092bb:	0f 89 85 02 00 00    	jns    c0009546 <linear_vari_process+0x750>
c00092c1:	85 c9                	test   ecx,ecx
c00092c3:	0f 8e f5 00 00 00    	jle    c00093be <linear_vari_process+0x5c8>
c00092c9:	83 ec 10             	sub    esp,0x10
c00092cc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092cf:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092d2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092d6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092d9:	ff 30                	push   DWORD PTR [eax]
c00092db:	e8 44 e0 01 00       	call   c0027324 <__subdf3>
c00092e0:	83 c4 18             	add    esp,0x18
c00092e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092eb:	52                   	push   edx
c00092ec:	50                   	push   eax
c00092ed:	e8 be ea 01 00       	call   c0027db0 <fabs>
c00092f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092fa:	83 c4 10             	add    esp,0x10
c00092fd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009302:	68 23 42 92 0c       	push   0xc924223
c0009307:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000930b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000930f:	e8 ed e8 01 00       	call   c0027c01 <__gtdf2>
c0009314:	83 c4 10             	add    esp,0x10
c0009317:	85 c0                	test   eax,eax
c0009319:	0f 8e 9f 00 00 00    	jle    c00093be <linear_vari_process+0x5c8>
c000931f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009323:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009326:	8b 00                	mov    eax,DWORD PTR [eax]
c0009328:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000932c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009330:	52                   	push   edx
c0009331:	50                   	push   eax
c0009332:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009335:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009338:	e8 e7 df 01 00       	call   c0027324 <__subdf3>
c000933d:	5f                   	pop    edi
c000933e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009342:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009346:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009349:	e8 65 e6 01 00       	call   c00279b3 <__floatsidf>
c000934e:	83 c4 10             	add    esp,0x10
c0009351:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009355:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009359:	52                   	push   edx
c000935a:	50                   	push   eax
c000935b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000935f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009363:	e8 e8 df 01 00       	call   c0027350 <__muldf3>
c0009368:	5d                   	pop    ebp
c0009369:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000936d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009371:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009374:	e8 3a e6 01 00       	call   c00279b3 <__floatsidf>
c0009379:	83 c4 10             	add    esp,0x10
c000937c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009380:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009384:	52                   	push   edx
c0009385:	50                   	push   eax
c0009386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938e:	e8 a1 e2 01 00       	call   c0027634 <__divdf3>
c0009393:	83 c4 10             	add    esp,0x10
c0009396:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000939a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000939e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ae:	e8 20 d9 01 00       	call   c0026cd3 <__adddf3>
c00093b3:	83 c4 10             	add    esp,0x10
c00093b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093be:	31 ff                	xor    edi,edi
c00093c0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093c3:	39 f8                	cmp    eax,edi
c00093c5:	0f 8e ac 00 00 00    	jle    c0009477 <linear_vari_process+0x681>
c00093cb:	8b 16                	mov    edx,DWORD PTR [esi]
c00093cd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093d0:	29 c1                	sub    ecx,eax
c00093d2:	89 c8                	mov    eax,ecx
c00093d4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093d7:	01 f8                	add    eax,edi
c00093d9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093dd:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093ea:	51                   	push   ecx
c00093eb:	01 f8                	add    eax,edi
c00093ed:	51                   	push   ecx
c00093ee:	47                   	inc    edi
c00093ef:	55                   	push   ebp
c00093f0:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093f3:	e8 70 d2 01 00       	call   c0026668 <__subsf3>
c00093f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fb:	e8 47 e9 01 00       	call   c0027d47 <__extendsfdf2>
c0009400:	83 c4 10             	add    esp,0x10
c0009403:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009407:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000940b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000940f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009413:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009417:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941b:	e8 30 df 01 00       	call   c0027350 <__muldf3>
c0009420:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009423:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009427:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000942b:	e8 17 e9 01 00       	call   c0027d47 <__extendsfdf2>
c0009430:	83 c4 10             	add    esp,0x10
c0009433:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009437:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000943b:	52                   	push   edx
c000943c:	50                   	push   eax
c000943d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009441:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009445:	e8 89 d8 01 00       	call   c0026cd3 <__adddf3>
c000944a:	5d                   	pop    ebp
c000944b:	59                   	pop    ecx
c000944c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009450:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009454:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009458:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945c:	e8 c2 e7 01 00       	call   c0027c23 <__truncdfsf2>
c0009461:	83 c4 10             	add    esp,0x10
c0009464:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009468:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000946c:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000946f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009472:	e9 49 ff ff ff       	jmp    c00093c0 <linear_vari_process+0x5ca>
c0009477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947f:	68 00 00 f0 3f       	push   0x3ff00000
c0009484:	6a 00                	push   0x0
c0009486:	e8 a9 e1 01 00       	call   c0027634 <__divdf3>
c000948b:	83 c4 10             	add    esp,0x10
c000948e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009492:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009496:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000949a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000949e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a6:	e8 28 d8 01 00       	call   c0026cd3 <__adddf3>
c00094ab:	59                   	pop    ecx
c00094ac:	5f                   	pop    edi
c00094ad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bd:	e8 0e e9 01 00       	call   c0027dd0 <lrint>
c00094c2:	83 ec 0c             	sub    esp,0xc
c00094c5:	50                   	push   eax
c00094c6:	e8 e8 e4 01 00       	call   c00279b3 <__floatsidf>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094d6:	52                   	push   edx
c00094d7:	50                   	push   eax
c00094d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094e0:	e8 3f de 01 00       	call   c0027324 <__subdf3>
c00094e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094e9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094ed:	83 c4 20             	add    esp,0x20
c00094f0:	6a 00                	push   0x0
c00094f2:	6a 00                	push   0x0
c00094f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fc:	e8 1e e7 01 00       	call   c0027c1f <__ltdf2>
c0009501:	83 c4 10             	add    esp,0x10
c0009504:	85 c0                	test   eax,eax
c0009506:	79 1e                	jns    c0009526 <linear_vari_process+0x730>
c0009508:	68 00 00 f0 3f       	push   0x3ff00000
c000950d:	6a 00                	push   0x0
c000950f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009513:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009517:	e8 b7 d7 01 00       	call   c0026cd3 <__adddf3>
c000951c:	83 c4 10             	add    esp,0x10
c000951f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009522:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009526:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009534:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009538:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953c:	e8 e3 dd 01 00       	call   c0027324 <__subdf3>
c0009541:	e9 bc fc ff ff       	jmp    c0009202 <linear_vari_process+0x40c>
c0009546:	39 fd                	cmp    ebp,edi
c0009548:	7d 38                	jge    c0009582 <linear_vari_process+0x78c>
c000954a:	83 ec 0c             	sub    esp,0xc
c000954d:	89 f8                	mov    eax,edi
c000954f:	29 e8                	sub    eax,ebp
c0009551:	99                   	cdq    
c0009552:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009555:	50                   	push   eax
c0009556:	e8 58 e4 01 00       	call   c00279b3 <__floatsidf>
c000955b:	83 c4 10             	add    esp,0x10
c000955e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009562:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009566:	52                   	push   edx
c0009567:	50                   	push   eax
c0009568:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000956c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009570:	e8 5e d7 01 00       	call   c0026cd3 <__adddf3>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000957b:	89 04 24             	mov    DWORD PTR [esp],eax
c000957e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009582:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009586:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009589:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000958d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009590:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009593:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009596:	85 c0                	test   eax,eax
c0009598:	7f 29                	jg     c00095c3 <linear_vari_process+0x7cd>
c000959a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000959e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00095a6:	89 01                	mov    DWORD PTR [ecx],eax
c00095a8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095ae:	99                   	cdq    
c00095af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095b2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095b5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095b8:	99                   	cdq    
c00095b9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095bc:	31 d2                	xor    edx,edx
c00095be:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095c1:	eb 1d                	jmp    c00095e0 <linear_vari_process+0x7ea>
c00095c3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095c6:	31 d2                	xor    edx,edx
c00095c8:	29 c8                	sub    eax,ecx
c00095ca:	c1 e0 02             	shl    eax,0x2
c00095cd:	39 d1                	cmp    ecx,edx
c00095cf:	7e c9                	jle    c000959a <linear_vari_process+0x7a4>
c00095d1:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095d3:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095d6:	83 c0 04             	add    eax,0x4
c00095d9:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095dd:	42                   	inc    edx
c00095de:	eb ed                	jmp    c00095cd <linear_vari_process+0x7d7>
c00095e0:	83 c4 3c             	add    esp,0x3c
c00095e3:	89 d0                	mov    eax,edx
c00095e5:	5b                   	pop    ebx
c00095e6:	5e                   	pop    esi
c00095e7:	5f                   	pop    edi
c00095e8:	5d                   	pop    ebp
c00095e9:	c3                   	ret    

c00095ea <linear_reset>:
c00095ea:	83 ec 0c             	sub    esp,0xc
c00095ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095f1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095f4:	85 c0                	test   eax,eax
c00095f6:	74 20                	je     c0009618 <linear_reset+0x2e>
c00095f8:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095fb:	83 c0 1c             	add    eax,0x1c
c00095fe:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009601:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009608:	c1 e2 02             	shl    edx,0x2
c000960b:	51                   	push   ecx
c000960c:	52                   	push   edx
c000960d:	6a 00                	push   0x0
c000960f:	50                   	push   eax
c0009610:	e8 ad 70 ff ff       	call   c00006c2 <memset>
c0009615:	83 c4 10             	add    esp,0x10
c0009618:	83 c4 0c             	add    esp,0xc
c000961b:	c3                   	ret    

c000961c <linear_get_name>:
c000961c:	31 c0                	xor    eax,eax
c000961e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009623:	75 05                	jne    c000962a <linear_get_name+0xe>
c0009625:	b8 20 95 02 c0       	mov    eax,0xc0029520
c000962a:	c3                   	ret    

c000962b <linear_get_description>:
c000962b:	31 c0                	xor    eax,eax
c000962d:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009632:	75 05                	jne    c0009639 <linear_get_description+0xe>
c0009634:	b8 34 95 02 c0       	mov    eax,0xc0029534
c0009639:	c3                   	ret    

c000963a <linear_set_converter>:
c000963a:	53                   	push   ebx
c000963b:	b8 0a 00 00 00       	mov    eax,0xa
c0009640:	83 ec 08             	sub    esp,0x8
c0009643:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009647:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000964c:	75 6e                	jne    c00096bc <linear_set_converter+0x82>
c000964e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009651:	85 c0                	test   eax,eax
c0009653:	74 13                	je     c0009668 <linear_set_converter+0x2e>
c0009655:	83 ec 0c             	sub    esp,0xc
c0009658:	50                   	push   eax
c0009659:	e8 d4 5f 00 00       	call   c000f632 <free>
c000965e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009665:	83 c4 10             	add    esp,0x10
c0009668:	50                   	push   eax
c0009669:	50                   	push   eax
c000966a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000966d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009674:	50                   	push   eax
c0009675:	6a 01                	push   0x1
c0009677:	e8 d6 5f 00 00       	call   c000f652 <calloc>
c000967c:	83 c4 10             	add    esp,0x10
c000967f:	89 c2                	mov    edx,eax
c0009681:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009684:	85 d2                	test   edx,edx
c0009686:	b8 01 00 00 00       	mov    eax,0x1
c000968b:	74 2f                	je     c00096bc <linear_set_converter+0x82>
c000968d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009690:	83 ec 0c             	sub    esp,0xc
c0009693:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009696:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000969c:	c7 43 24 f6 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008df6
c00096a3:	c7 43 20 f6 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008df6
c00096aa:	c7 43 28 ea 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095ea
c00096b1:	53                   	push   ebx
c00096b2:	e8 33 ff ff ff       	call   c00095ea <linear_reset>
c00096b7:	83 c4 10             	add    esp,0x10
c00096ba:	31 c0                	xor    eax,eax
c00096bc:	83 c4 08             	add    esp,0x8
c00096bf:	5b                   	pop    ebx
c00096c0:	c3                   	ret    

c00096c1 <int_to_fp>:
c00096c1:	c1 e0 0c             	shl    eax,0xc
c00096c4:	c3                   	ret    

c00096c5 <fp_to_int>:
c00096c5:	c1 f8 0c             	sar    eax,0xc
c00096c8:	c3                   	ret    

c00096c9 <fp_fraction_part>:
c00096c9:	25 ff 0f 00 00       	and    eax,0xfff
c00096ce:	c3                   	ret    

c00096cf <fp_to_double>:
c00096cf:	83 ec 1c             	sub    esp,0x1c
c00096d2:	e8 f2 ff ff ff       	call   c00096c9 <fp_fraction_part>
c00096d7:	83 ec 0c             	sub    esp,0xc
c00096da:	50                   	push   eax
c00096db:	e8 d3 e2 01 00       	call   c00279b3 <__floatsidf>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096eb:	68 00 00 30 3f       	push   0x3f300000
c00096f0:	6a 00                	push   0x0
c00096f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fa:	e8 51 dc 01 00       	call   c0027350 <__muldf3>
c00096ff:	83 c4 2c             	add    esp,0x2c
c0009702:	c3                   	ret    

c0009703 <calc_output_single>:
c0009703:	55                   	push   ebp
c0009704:	57                   	push   edi
c0009705:	56                   	push   esi
c0009706:	89 c6                	mov    esi,eax
c0009708:	53                   	push   ebx
c0009709:	89 d3                	mov    ebx,edx
c000970b:	83 ec 4c             	sub    esp,0x4c
c000970e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009712:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009715:	e8 a7 ff ff ff       	call   c00096c1 <int_to_fp>
c000971a:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000971d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009721:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009725:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009729:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000972c:	99                   	cdq    
c000972d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009735:	f7 fb                	idiv   ebx
c0009737:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000973f:	89 da                	mov    edx,ebx
c0009741:	0f af d0             	imul   edx,eax
c0009744:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009748:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000974c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009750:	29 c2                	sub    edx,eax
c0009752:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009759:	83 c5 04             	add    ebp,0x4
c000975c:	e8 6e ff ff ff       	call   c00096cf <fp_to_double>
c0009761:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009765:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000976d:	e8 53 ff ff ff       	call   c00096c5 <fp_to_int>
c0009772:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009775:	52                   	push   edx
c0009776:	52                   	push   edx
c0009777:	51                   	push   ecx
c0009778:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000977c:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009780:	e8 e3 ce 01 00       	call   c0026668 <__subsf3>
c0009785:	89 04 24             	mov    DWORD PTR [esp],eax
c0009788:	e8 ba e5 01 00       	call   c0027d47 <__extendsfdf2>
c000978d:	83 c4 10             	add    esp,0x10
c0009790:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009794:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009798:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000979c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097a0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097a8:	e8 a3 db 01 00       	call   c0027350 <__muldf3>
c00097ad:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097b5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097b8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097bc:	e8 86 e5 01 00       	call   c0027d47 <__extendsfdf2>
c00097c1:	83 c4 10             	add    esp,0x10
c00097c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097cc:	52                   	push   edx
c00097cd:	50                   	push   eax
c00097ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d6:	e8 f8 d4 01 00       	call   c0026cd3 <__adddf3>
c00097db:	59                   	pop    ecx
c00097dc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097e0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097e4:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097ea:	e8 58 e5 01 00       	call   c0027d47 <__extendsfdf2>
c00097ef:	83 c4 10             	add    esp,0x10
c00097f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fa:	52                   	push   edx
c00097fb:	50                   	push   eax
c00097fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009800:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009804:	e8 47 db 01 00       	call   c0027350 <__muldf3>
c0009809:	83 c4 10             	add    esp,0x10
c000980c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009810:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009814:	52                   	push   edx
c0009815:	50                   	push   eax
c0009816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000981a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000981e:	e8 b0 d4 01 00       	call   c0026cd3 <__adddf3>
c0009823:	83 c4 10             	add    esp,0x10
c0009826:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000982a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000982e:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009832:	0f 89 1d ff ff ff    	jns    c0009755 <calc_output_single+0x52>
c0009838:	89 d9                	mov    ecx,ebx
c000983a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000983e:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009842:	89 dd                	mov    ebp,ebx
c0009844:	29 c8                	sub    eax,ecx
c0009846:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000984e:	99                   	cdq    
c000984f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009857:	f7 fb                	idiv   ebx
c0009859:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000985d:	0f af e8             	imul   ebp,eax
c0009860:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009864:	01 cd                	add    ebp,ecx
c0009866:	8d 34 86             	lea    esi,[esi+eax*4]
c0009869:	89 e8                	mov    eax,ebp
c000986b:	83 ee 04             	sub    esi,0x4
c000986e:	e8 5c fe ff ff       	call   c00096cf <fp_to_double>
c0009873:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009877:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000987b:	89 e8                	mov    eax,ebp
c000987d:	29 dd                	sub    ebp,ebx
c000987f:	e8 41 fe ff ff       	call   c00096c5 <fp_to_int>
c0009884:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009887:	52                   	push   edx
c0009888:	52                   	push   edx
c0009889:	51                   	push   ecx
c000988a:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c000988e:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009892:	e8 d1 cd 01 00       	call   c0026668 <__subsf3>
c0009897:	89 04 24             	mov    DWORD PTR [esp],eax
c000989a:	e8 a8 e4 01 00       	call   c0027d47 <__extendsfdf2>
c000989f:	83 c4 10             	add    esp,0x10
c00098a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098ba:	e8 91 da 01 00       	call   c0027350 <__muldf3>
c00098bf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098c7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098ce:	e8 74 e4 01 00       	call   c0027d47 <__extendsfdf2>
c00098d3:	83 c4 10             	add    esp,0x10
c00098d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098da:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098de:	52                   	push   edx
c00098df:	50                   	push   eax
c00098e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098e8:	e8 e6 d3 01 00       	call   c0026cd3 <__adddf3>
c00098ed:	59                   	pop    ecx
c00098ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098f2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098f6:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098fc:	e8 46 e4 01 00       	call   c0027d47 <__extendsfdf2>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009908:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990c:	52                   	push   edx
c000990d:	50                   	push   eax
c000990e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009916:	e8 35 da 01 00       	call   c0027350 <__muldf3>
c000991b:	83 c4 10             	add    esp,0x10
c000991e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009922:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009926:	52                   	push   edx
c0009927:	50                   	push   eax
c0009928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000992c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009930:	e8 9e d3 01 00       	call   c0026cd3 <__adddf3>
c0009935:	83 c4 10             	add    esp,0x10
c0009938:	85 ed                	test   ebp,ebp
c000993a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000993e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009942:	0f 8f 21 ff ff ff    	jg     c0009869 <calc_output_single+0x166>
c0009948:	52                   	push   edx
c0009949:	50                   	push   eax
c000994a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000994e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009952:	e8 7c d3 01 00       	call   c0026cd3 <__adddf3>
c0009957:	83 c4 5c             	add    esp,0x5c
c000995a:	5b                   	pop    ebx
c000995b:	5e                   	pop    esi
c000995c:	5f                   	pop    edi
c000995d:	5d                   	pop    ebp
c000995e:	c3                   	ret    

c000995f <calc_output_stereo>:
c000995f:	55                   	push   ebp
c0009960:	89 cd                	mov    ebp,ecx
c0009962:	57                   	push   edi
c0009963:	56                   	push   esi
c0009964:	53                   	push   ebx
c0009965:	89 c3                	mov    ebx,eax
c0009967:	83 ec 6c             	sub    esp,0x6c
c000996a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000996e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009975:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000997c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009980:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009984:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009987:	e8 35 fd ff ff       	call   c00096c1 <int_to_fp>
c000998c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009994:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009998:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099a0:	29 c8                	sub    eax,ecx
c00099a2:	99                   	cdq    
c00099a3:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099ab:	0f af d0             	imul   edx,eax
c00099ae:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099b1:	31 d2                	xor    edx,edx
c00099b3:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099bb:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099be:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099c2:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099c5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099c9:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099cd:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099d0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099d5:	29 c1                	sub    ecx,eax
c00099d7:	31 c0                	xor    eax,eax
c00099d9:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e4:	83 c7 08             	add    edi,0x8
c00099e7:	e8 e3 fc ff ff       	call   c00096cf <fp_to_double>
c00099ec:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099f0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099f8:	e8 c8 fc ff ff       	call   c00096c5 <fp_to_int>
c00099fd:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a00:	52                   	push   edx
c0009a01:	52                   	push   edx
c0009a02:	51                   	push   ecx
c0009a03:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a07:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a0b:	e8 58 cc 01 00       	call   c0026668 <__subsf3>
c0009a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a13:	e8 2f e3 01 00       	call   c0027d47 <__extendsfdf2>
c0009a18:	83 c4 10             	add    esp,0x10
c0009a1b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a2b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a2f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a33:	e8 18 d9 01 00       	call   c0027350 <__muldf3>
c0009a38:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a3c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a40:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a43:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a47:	e8 fb e2 01 00       	call   c0027d47 <__extendsfdf2>
c0009a4c:	83 c4 10             	add    esp,0x10
c0009a4f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a53:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a57:	52                   	push   edx
c0009a58:	50                   	push   eax
c0009a59:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a5d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a61:	e8 6d d2 01 00       	call   c0026cd3 <__adddf3>
c0009a66:	59                   	pop    ecx
c0009a67:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a6b:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a6f:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a75:	e8 cd e2 01 00       	call   c0027d47 <__extendsfdf2>
c0009a7a:	83 c4 10             	add    esp,0x10
c0009a7d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a81:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a95:	e8 b6 d8 01 00       	call   c0027350 <__muldf3>
c0009a9a:	83 c4 10             	add    esp,0x10
c0009a9d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aa1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aa5:	52                   	push   edx
c0009aa6:	50                   	push   eax
c0009aa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aaf:	e8 1f d2 01 00       	call   c0026cd3 <__adddf3>
c0009ab4:	59                   	pop    ecx
c0009ab5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ab9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009abd:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ac3:	e8 7f e2 01 00       	call   c0027d47 <__extendsfdf2>
c0009ac8:	83 c4 10             	add    esp,0x10
c0009acb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009acf:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009adb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009adf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae3:	e8 68 d8 01 00       	call   c0027350 <__muldf3>
c0009ae8:	83 c4 10             	add    esp,0x10
c0009aeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009aef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009af3:	52                   	push   edx
c0009af4:	50                   	push   eax
c0009af5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009afd:	e8 d1 d1 01 00       	call   c0026cd3 <__adddf3>
c0009b02:	83 c4 10             	add    esp,0x10
c0009b05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b11:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b15:	0f 89 c5 fe ff ff    	jns    c00099e0 <calc_output_stereo+0x81>
c0009b1b:	29 e9                	sub    ecx,ebp
c0009b1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b21:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b25:	29 c8                	sub    eax,ecx
c0009b27:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b2f:	99                   	cdq    
c0009b30:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b34:	31 d2                	xor    edx,edx
c0009b36:	0f af f8             	imul   edi,eax
c0009b39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3d:	40                   	inc    eax
c0009b3e:	01 cf                	add    edi,ecx
c0009b40:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b45:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b49:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b51:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b54:	31 c0                	xor    eax,eax
c0009b56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5a:	89 f8                	mov    eax,edi
c0009b5c:	83 eb 08             	sub    ebx,0x8
c0009b5f:	e8 6b fb ff ff       	call   c00096cf <fp_to_double>
c0009b64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b6c:	89 f8                	mov    eax,edi
c0009b6e:	e8 52 fb ff ff       	call   c00096c5 <fp_to_int>
c0009b73:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b76:	52                   	push   edx
c0009b77:	52                   	push   edx
c0009b78:	55                   	push   ebp
c0009b79:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b7d:	e8 e6 ca 01 00       	call   c0026668 <__subsf3>
c0009b82:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b85:	e8 bd e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009b8a:	83 c4 10             	add    esp,0x10
c0009b8d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b91:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba5:	e8 a6 d7 01 00       	call   c0027350 <__muldf3>
c0009baa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009bad:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bb1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bb5:	e8 8d e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009bba:	83 c4 10             	add    esp,0x10
c0009bbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc5:	52                   	push   edx
c0009bc6:	50                   	push   eax
c0009bc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bcf:	e8 ff d0 01 00       	call   c0026cd3 <__adddf3>
c0009bd4:	59                   	pop    ecx
c0009bd5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bd9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bdd:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009be3:	e8 5f e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009be8:	83 c4 10             	add    esp,0x10
c0009beb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bef:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bfb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c03:	e8 48 d7 01 00       	call   c0027350 <__muldf3>
c0009c08:	83 c4 10             	add    esp,0x10
c0009c0b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c0f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c13:	52                   	push   edx
c0009c14:	50                   	push   eax
c0009c15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1d:	e8 b1 d0 01 00       	call   c0026cd3 <__adddf3>
c0009c22:	5d                   	pop    ebp
c0009c23:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c27:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c2b:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c31:	e8 11 e1 01 00       	call   c0027d47 <__extendsfdf2>
c0009c36:	83 c4 10             	add    esp,0x10
c0009c39:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c3d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c51:	e8 fa d6 01 00       	call   c0027350 <__muldf3>
c0009c56:	83 c4 10             	add    esp,0x10
c0009c59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c61:	52                   	push   edx
c0009c62:	50                   	push   eax
c0009c63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c6b:	e8 63 d0 01 00       	call   c0026cd3 <__adddf3>
c0009c70:	83 c4 10             	add    esp,0x10
c0009c73:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c7f:	85 ff                	test   edi,edi
c0009c81:	0f 8f d3 fe ff ff    	jg     c0009b5a <calc_output_stereo+0x1fb>
c0009c87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c97:	e8 37 d0 01 00       	call   c0026cd3 <__adddf3>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ca3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ca7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009caf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb7:	e8 94 d6 01 00       	call   c0027350 <__muldf3>
c0009cbc:	59                   	pop    ecx
c0009cbd:	5b                   	pop    ebx
c0009cbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cce:	e8 50 df 01 00       	call   c0027c23 <__truncdfsf2>
c0009cd3:	83 c4 10             	add    esp,0x10
c0009cd6:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cdd:	89 03                	mov    DWORD PTR [ebx],eax
c0009cdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ceb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cef:	e8 df cf 01 00       	call   c0026cd3 <__adddf3>
c0009cf4:	83 c4 10             	add    esp,0x10
c0009cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0f:	e8 3c d6 01 00       	call   c0027350 <__muldf3>
c0009d14:	5e                   	pop    esi
c0009d15:	5f                   	pop    edi
c0009d16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d26:	e8 f8 de 01 00       	call   c0027c23 <__truncdfsf2>
c0009d2b:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d32:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d35:	83 c4 7c             	add    esp,0x7c
c0009d38:	5b                   	pop    ebx
c0009d39:	5e                   	pop    esi
c0009d3a:	5f                   	pop    edi
c0009d3b:	5d                   	pop    ebp
c0009d3c:	c3                   	ret    

c0009d3d <calc_output_quad>:
c0009d3d:	55                   	push   ebp
c0009d3e:	57                   	push   edi
c0009d3f:	56                   	push   esi
c0009d40:	89 c6                	mov    esi,eax
c0009d42:	53                   	push   ebx
c0009d43:	83 ec 7c             	sub    esp,0x7c
c0009d46:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d4a:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d4e:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d55:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d64:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d67:	e8 55 f9 ff ff       	call   c00096c1 <int_to_fp>
c0009d6c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d6f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d72:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d76:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d7a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d7e:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d82:	99                   	cdq    
c0009d83:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d87:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d8b:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d8e:	31 d2                	xor    edx,edx
c0009d90:	0f af d8             	imul   ebx,eax
c0009d93:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d9b:	0f af c7             	imul   eax,edi
c0009d9e:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009da2:	29 c1                	sub    ecx,eax
c0009da4:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dac:	31 c0                	xor    eax,eax
c0009dae:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009db1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009db5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009db9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dc5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dc9:	89 d8                	mov    eax,ebx
c0009dcb:	83 c7 10             	add    edi,0x10
c0009dce:	e8 fc f8 ff ff       	call   c00096cf <fp_to_double>
c0009dd3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ddb:	89 d8                	mov    eax,ebx
c0009ddd:	e8 e3 f8 ff ff       	call   c00096c5 <fp_to_int>
c0009de2:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009de6:	52                   	push   edx
c0009de7:	52                   	push   edx
c0009de8:	51                   	push   ecx
c0009de9:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009ded:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009df1:	e8 72 c8 01 00       	call   c0026668 <__subsf3>
c0009df6:	89 04 24             	mov    DWORD PTR [esp],eax
c0009df9:	e8 49 df 01 00       	call   c0027d47 <__extendsfdf2>
c0009dfe:	83 c4 10             	add    esp,0x10
c0009e01:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e05:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e11:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e15:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e19:	e8 32 d5 01 00       	call   c0027350 <__muldf3>
c0009e1e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e26:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e2d:	e8 15 df 01 00       	call   c0027d47 <__extendsfdf2>
c0009e32:	83 c4 10             	add    esp,0x10
c0009e35:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e39:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3d:	52                   	push   edx
c0009e3e:	50                   	push   eax
c0009e3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e47:	e8 87 ce 01 00       	call   c0026cd3 <__adddf3>
c0009e4c:	59                   	pop    ecx
c0009e4d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e51:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e55:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e5b:	e8 e7 de 01 00       	call   c0027d47 <__extendsfdf2>
c0009e60:	83 c4 10             	add    esp,0x10
c0009e63:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e67:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e73:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e77:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7b:	e8 d0 d4 01 00       	call   c0027350 <__muldf3>
c0009e80:	83 c4 10             	add    esp,0x10
c0009e83:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e87:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e8b:	52                   	push   edx
c0009e8c:	50                   	push   eax
c0009e8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e95:	e8 39 ce 01 00       	call   c0026cd3 <__adddf3>
c0009e9a:	59                   	pop    ecx
c0009e9b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e9f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ea3:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009ea9:	e8 99 de 01 00       	call   c0027d47 <__extendsfdf2>
c0009eae:	83 c4 10             	add    esp,0x10
c0009eb1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009eb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ebd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec9:	e8 82 d4 01 00       	call   c0027350 <__muldf3>
c0009ece:	83 c4 10             	add    esp,0x10
c0009ed1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ed5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed9:	52                   	push   edx
c0009eda:	50                   	push   eax
c0009edb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009edf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee3:	e8 eb cd 01 00       	call   c0026cd3 <__adddf3>
c0009ee8:	59                   	pop    ecx
c0009ee9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eed:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009ef1:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ef7:	e8 4b de 01 00       	call   c0027d47 <__extendsfdf2>
c0009efc:	83 c4 10             	add    esp,0x10
c0009eff:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f03:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f13:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f17:	e8 34 d4 01 00       	call   c0027350 <__muldf3>
c0009f1c:	83 c4 10             	add    esp,0x10
c0009f1f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f23:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f27:	52                   	push   edx
c0009f28:	50                   	push   eax
c0009f29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f31:	e8 9d cd 01 00       	call   c0026cd3 <__adddf3>
c0009f36:	59                   	pop    ecx
c0009f37:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f3b:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f3f:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f45:	e8 fd dd 01 00       	call   c0027d47 <__extendsfdf2>
c0009f4a:	83 c4 10             	add    esp,0x10
c0009f4d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f51:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f61:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f65:	e8 e6 d3 01 00       	call   c0027350 <__muldf3>
c0009f6a:	83 c4 10             	add    esp,0x10
c0009f6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f75:	52                   	push   edx
c0009f76:	50                   	push   eax
c0009f77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f7f:	e8 4f cd 01 00       	call   c0026cd3 <__adddf3>
c0009f84:	83 c4 10             	add    esp,0x10
c0009f87:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f8b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f8f:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f93:	0f 89 30 fe ff ff    	jns    c0009dc9 <calc_output_quad+0x8c>
c0009f99:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fa5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fa9:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fb1:	29 c8                	sub    eax,ecx
c0009fb3:	99                   	cdq    
c0009fb4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fb8:	31 d2                	xor    edx,edx
c0009fba:	0f af d8             	imul   ebx,eax
c0009fbd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fc1:	40                   	inc    eax
c0009fc2:	01 cb                	add    ebx,ecx
c0009fc4:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fc9:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fcd:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fd5:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fd8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fe0:	31 c0                	xor    eax,eax
c0009fe2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fe6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fee:	89 d8                	mov    eax,ebx
c0009ff0:	83 ee 10             	sub    esi,0x10
c0009ff3:	e8 d7 f6 ff ff       	call   c00096cf <fp_to_double>
c0009ff8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ffc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a000:	89 d8                	mov    eax,ebx
c000a002:	e8 be f6 ff ff       	call   c00096c5 <fp_to_int>
c000a007:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a00b:	52                   	push   edx
c000a00c:	52                   	push   edx
c000a00d:	57                   	push   edi
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 51 c6 01 00       	call   c0026668 <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 28 dd 01 00       	call   c0027d47 <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 11 d3 01 00       	call   c0027350 <__muldf3>
c000a03f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a042:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a046:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04a:	e8 f8 dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a04f:	83 c4 10             	add    esp,0x10
c000a052:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a056:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05a:	52                   	push   edx
c000a05b:	50                   	push   eax
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	e8 6a cc 01 00       	call   c0026cd3 <__adddf3>
c000a069:	59                   	pop    ecx
c000a06a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a072:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a078:	e8 ca dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a07d:	83 c4 10             	add    esp,0x10
c000a080:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a084:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	e8 b3 d2 01 00       	call   c0027350 <__muldf3>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a8:	52                   	push   edx
c000a0a9:	50                   	push   eax
c000a0aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b2:	e8 1c cc 01 00       	call   c0026cd3 <__adddf3>
c000a0b7:	5f                   	pop    edi
c000a0b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0bc:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0c0:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0c6:	e8 7c dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a0cb:	83 c4 10             	add    esp,0x10
c000a0ce:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	e8 65 d2 01 00       	call   c0027350 <__muldf3>
c000a0eb:	83 c4 10             	add    esp,0x10
c000a0ee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f6:	52                   	push   edx
c000a0f7:	50                   	push   eax
c000a0f8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0fc:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a100:	e8 ce cb 01 00       	call   c0026cd3 <__adddf3>
c000a105:	59                   	pop    ecx
c000a106:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a10a:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a10e:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a114:	e8 2e dc 01 00       	call   c0027d47 <__extendsfdf2>
c000a119:	83 c4 10             	add    esp,0x10
c000a11c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a120:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	e8 17 d2 01 00       	call   c0027350 <__muldf3>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a140:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a144:	52                   	push   edx
c000a145:	50                   	push   eax
c000a146:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a14a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a14e:	e8 80 cb 01 00       	call   c0026cd3 <__adddf3>
c000a153:	5f                   	pop    edi
c000a154:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a158:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a15c:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a162:	e8 e0 db 01 00       	call   c0027d47 <__extendsfdf2>
c000a167:	83 c4 10             	add    esp,0x10
c000a16a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	e8 c9 d1 01 00       	call   c0027350 <__muldf3>
c000a187:	83 c4 10             	add    esp,0x10
c000a18a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a192:	52                   	push   edx
c000a193:	50                   	push   eax
c000a194:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a198:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19c:	e8 32 cb 01 00       	call   c0026cd3 <__adddf3>
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1a8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1ac:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1b0:	85 db                	test   ebx,ebx
c000a1b2:	0f 8f 36 fe ff ff    	jg     c0009fee <calc_output_quad+0x2b1>
c000a1b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c8:	e8 06 cb 01 00       	call   c0026cd3 <__adddf3>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e8:	e8 63 d1 01 00       	call   c0027350 <__muldf3>
c000a1ed:	59                   	pop    ecx
c000a1ee:	5b                   	pop    ebx
c000a1ef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ff:	e8 1f da 01 00       	call   c0027c23 <__truncdfsf2>
c000a204:	83 c4 10             	add    esp,0x10
c000a207:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a20e:	89 06                	mov    DWORD PTR [esi],eax
c000a210:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a214:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a218:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a21c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a220:	e8 ae ca 01 00       	call   c0026cd3 <__adddf3>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a230:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a240:	e8 0b d1 01 00       	call   c0027350 <__muldf3>
c000a245:	5e                   	pop    esi
c000a246:	5f                   	pop    edi
c000a247:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a24b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a24f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a257:	e8 c7 d9 01 00       	call   c0027c23 <__truncdfsf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a266:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a269:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a26d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a271:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a275:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a279:	e8 55 ca 01 00       	call   c0026cd3 <__adddf3>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a289:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a299:	e8 b2 d0 01 00       	call   c0027350 <__muldf3>
c000a29e:	5d                   	pop    ebp
c000a29f:	59                   	pop    ecx
c000a2a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b0:	e8 6e d9 01 00       	call   c0027c23 <__truncdfsf2>
c000a2b5:	83 c4 10             	add    esp,0x10
c000a2b8:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2bf:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d2:	e8 fc c9 01 00       	call   c0026cd3 <__adddf3>
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f2:	e8 59 d0 01 00       	call   c0027350 <__muldf3>
c000a2f7:	5b                   	pop    ebx
c000a2f8:	5e                   	pop    esi
c000a2f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2fd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a301:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a309:	e8 15 d9 01 00       	call   c0027c23 <__truncdfsf2>
c000a30e:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a315:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a318:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a31e:	5b                   	pop    ebx
c000a31f:	5e                   	pop    esi
c000a320:	5f                   	pop    edi
c000a321:	5d                   	pop    ebp
c000a322:	c3                   	ret    

c000a323 <calc_output_hex>:
c000a323:	55                   	push   ebp
c000a324:	89 cd                	mov    ebp,ecx
c000a326:	57                   	push   edi
c000a327:	56                   	push   esi
c000a328:	53                   	push   ebx
c000a329:	89 c3                	mov    ebx,eax
c000a32b:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a331:	89 14 24             	mov    DWORD PTR [esp],edx
c000a334:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a33b:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a346:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a34a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a34d:	e8 6f f3 ff ff       	call   c00096c1 <int_to_fp>
c000a352:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a355:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a359:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a35c:	29 c8                	sub    eax,ecx
c000a35e:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a362:	99                   	cdq    
c000a363:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a36b:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a36e:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a376:	0f af f8             	imul   edi,eax
c000a379:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a37c:	01 cf                	add    edi,ecx
c000a37e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a382:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a385:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a389:	0f af c2             	imul   eax,edx
c000a38c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a390:	29 c1                	sub    ecx,eax
c000a392:	31 d2                	xor    edx,edx
c000a394:	31 c0                	xor    eax,eax
c000a396:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a399:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a39d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3a5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3ad:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3c1:	89 f8                	mov    eax,edi
c000a3c3:	e8 07 f3 ff ff       	call   c00096cf <fp_to_double>
c000a3c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d0:	89 f8                	mov    eax,edi
c000a3d2:	e8 ee f2 ff ff       	call   c00096c5 <fp_to_int>
c000a3d7:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3db:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3de:	52                   	push   edx
c000a3df:	52                   	push   edx
c000a3e0:	51                   	push   ecx
c000a3e1:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3e5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3ec:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3f0:	e8 73 c2 01 00       	call   c0026668 <__subsf3>
c000a3f5:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3f8:	e8 4a d9 01 00       	call   c0027d47 <__extendsfdf2>
c000a3fd:	83 c4 10             	add    esp,0x10
c000a400:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a404:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a408:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a410:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a414:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a418:	e8 33 cf 01 00       	call   c0027350 <__muldf3>
c000a41d:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a421:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a425:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a428:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a42c:	e8 16 d9 01 00       	call   c0027d47 <__extendsfdf2>
c000a431:	83 c4 10             	add    esp,0x10
c000a434:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a438:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43c:	52                   	push   edx
c000a43d:	50                   	push   eax
c000a43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a446:	e8 88 c8 01 00       	call   c0026cd3 <__adddf3>
c000a44b:	59                   	pop    ecx
c000a44c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a450:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a454:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a45a:	e8 e8 d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a45f:	83 c4 10             	add    esp,0x10
c000a462:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a466:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a472:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a476:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47a:	e8 d1 ce 01 00       	call   c0027350 <__muldf3>
c000a47f:	83 c4 10             	add    esp,0x10
c000a482:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a486:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a48a:	52                   	push   edx
c000a48b:	50                   	push   eax
c000a48c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a490:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a494:	e8 3a c8 01 00       	call   c0026cd3 <__adddf3>
c000a499:	59                   	pop    ecx
c000a49a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a49e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4a2:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4a8:	e8 9a d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a4ad:	83 c4 10             	add    esp,0x10
c000a4b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c8:	e8 83 ce 01 00       	call   c0027350 <__muldf3>
c000a4cd:	83 c4 10             	add    esp,0x10
c000a4d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4d4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4d8:	52                   	push   edx
c000a4d9:	50                   	push   eax
c000a4da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e2:	e8 ec c7 01 00       	call   c0026cd3 <__adddf3>
c000a4e7:	59                   	pop    ecx
c000a4e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4ec:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4f0:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4f6:	e8 4c d8 01 00       	call   c0027d47 <__extendsfdf2>
c000a4fb:	83 c4 10             	add    esp,0x10
c000a4fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a502:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a512:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a516:	e8 35 ce 01 00       	call   c0027350 <__muldf3>
c000a51b:	83 c4 10             	add    esp,0x10
c000a51e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a522:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a526:	52                   	push   edx
c000a527:	50                   	push   eax
c000a528:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a52c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a530:	e8 9e c7 01 00       	call   c0026cd3 <__adddf3>
c000a535:	59                   	pop    ecx
c000a536:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a53a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a53e:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a544:	e8 fe d7 01 00       	call   c0027d47 <__extendsfdf2>
c000a549:	83 c4 10             	add    esp,0x10
c000a54c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a550:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a554:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a560:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a564:	e8 e7 cd 01 00       	call   c0027350 <__muldf3>
c000a569:	83 c4 10             	add    esp,0x10
c000a56c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a570:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a574:	52                   	push   edx
c000a575:	50                   	push   eax
c000a576:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a57a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a57e:	e8 50 c7 01 00       	call   c0026cd3 <__adddf3>
c000a583:	59                   	pop    ecx
c000a584:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a588:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a58c:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a592:	e8 b0 d7 01 00       	call   c0027d47 <__extendsfdf2>
c000a597:	83 c4 10             	add    esp,0x10
c000a59a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a59e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5aa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b2:	e8 99 cd 01 00       	call   c0027350 <__muldf3>
c000a5b7:	83 c4 10             	add    esp,0x10
c000a5ba:	83 c6 18             	add    esi,0x18
c000a5bd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5c5:	52                   	push   edx
c000a5c6:	50                   	push   eax
c000a5c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5cf:	e8 ff c6 01 00       	call   c0026cd3 <__adddf3>
c000a5d4:	59                   	pop    ecx
c000a5d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5dd:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5e3:	e8 5f d7 01 00       	call   c0027d47 <__extendsfdf2>
c000a5e8:	83 c4 10             	add    esp,0x10
c000a5eb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5ef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a603:	e8 48 cd 01 00       	call   c0027350 <__muldf3>
c000a608:	83 c4 10             	add    esp,0x10
c000a60b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a613:	52                   	push   edx
c000a614:	50                   	push   eax
c000a615:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a619:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61d:	e8 b1 c6 01 00       	call   c0026cd3 <__adddf3>
c000a622:	83 c4 10             	add    esp,0x10
c000a625:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a629:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a62d:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a630:	0f 89 8b fd ff ff    	jns    c000a3c1 <calc_output_hex+0x9e>
c000a636:	31 f6                	xor    esi,esi
c000a638:	31 ff                	xor    edi,edi
c000a63a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a63e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a641:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a645:	29 e9                	sub    ecx,ebp
c000a647:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a64b:	29 c8                	sub    eax,ecx
c000a64d:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a650:	99                   	cdq    
c000a651:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a655:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a658:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a65c:	0f af e8             	imul   ebp,eax
c000a65f:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a663:	40                   	inc    eax
c000a664:	01 cd                	add    ebp,ecx
c000a666:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a66b:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a66f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a673:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a677:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a67a:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a67e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a682:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a686:	89 e8                	mov    eax,ebp
c000a688:	e8 42 f0 ff ff       	call   c00096cf <fp_to_double>
c000a68d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a691:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a695:	89 e8                	mov    eax,ebp
c000a697:	e8 29 f0 ff ff       	call   c00096c5 <fp_to_int>
c000a69c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6a0:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6a3:	52                   	push   edx
c000a6a4:	52                   	push   edx
c000a6a5:	51                   	push   ecx
c000a6a6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6ad:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6b4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6b8:	e8 ab bf 01 00       	call   c0026668 <__subsf3>
c000a6bd:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6c0:	e8 82 d6 01 00       	call   c0027d47 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6dc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6e0:	e8 6b cc 01 00       	call   c0027350 <__muldf3>
c000a6e5:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6f0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6f3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6f7:	e8 4b d6 01 00       	call   c0027d47 <__extendsfdf2>
c000a6fc:	83 c4 10             	add    esp,0x10
c000a6ff:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a703:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a707:	52                   	push   edx
c000a708:	50                   	push   eax
c000a709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a711:	e8 bd c5 01 00       	call   c0026cd3 <__adddf3>
c000a716:	59                   	pop    ecx
c000a717:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a71b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a71f:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a725:	e8 1d d6 01 00       	call   c0027d47 <__extendsfdf2>
c000a72a:	83 c4 10             	add    esp,0x10
c000a72d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a731:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a741:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a745:	e8 06 cc 01 00       	call   c0027350 <__muldf3>
c000a74a:	83 c4 10             	add    esp,0x10
c000a74d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a751:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a755:	52                   	push   edx
c000a756:	50                   	push   eax
c000a757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a75b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a75f:	e8 6f c5 01 00       	call   c0026cd3 <__adddf3>
c000a764:	59                   	pop    ecx
c000a765:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a769:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a76d:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a773:	e8 cf d5 01 00       	call   c0027d47 <__extendsfdf2>
c000a778:	83 c4 10             	add    esp,0x10
c000a77b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a77f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a783:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a78f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a793:	e8 b8 cb 01 00       	call   c0027350 <__muldf3>
c000a798:	83 c4 10             	add    esp,0x10
c000a79b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a79f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7a3:	52                   	push   edx
c000a7a4:	50                   	push   eax
c000a7a5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7a9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7ad:	e8 21 c5 01 00       	call   c0026cd3 <__adddf3>
c000a7b2:	59                   	pop    ecx
c000a7b3:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7b7:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7bb:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7c1:	e8 81 d5 01 00       	call   c0027d47 <__extendsfdf2>
c000a7c6:	83 c4 10             	add    esp,0x10
c000a7c9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7cd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7dd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e1:	e8 6a cb 01 00       	call   c0027350 <__muldf3>
c000a7e6:	83 c4 10             	add    esp,0x10
c000a7e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f1:	52                   	push   edx
c000a7f2:	50                   	push   eax
c000a7f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fb:	e8 d3 c4 01 00       	call   c0026cd3 <__adddf3>
c000a800:	59                   	pop    ecx
c000a801:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a805:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a809:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a80f:	e8 33 d5 01 00       	call   c0027d47 <__extendsfdf2>
c000a814:	83 c4 10             	add    esp,0x10
c000a817:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a81f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a827:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82f:	e8 1c cb 01 00       	call   c0027350 <__muldf3>
c000a834:	83 c4 10             	add    esp,0x10
c000a837:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a83b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a83f:	52                   	push   edx
c000a840:	50                   	push   eax
c000a841:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a845:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a849:	e8 85 c4 01 00       	call   c0026cd3 <__adddf3>
c000a84e:	59                   	pop    ecx
c000a84f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a853:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a857:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a85d:	e8 e5 d4 01 00       	call   c0027d47 <__extendsfdf2>
c000a862:	83 c4 10             	add    esp,0x10
c000a865:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a869:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a86d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a875:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a879:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87d:	e8 ce ca 01 00       	call   c0027350 <__muldf3>
c000a882:	83 c4 10             	add    esp,0x10
c000a885:	83 eb 18             	sub    ebx,0x18
c000a888:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a88c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a890:	52                   	push   edx
c000a891:	50                   	push   eax
c000a892:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a896:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a89a:	e8 34 c4 01 00       	call   c0026cd3 <__adddf3>
c000a89f:	59                   	pop    ecx
c000a8a0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8a4:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8a8:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8ae:	e8 94 d4 01 00       	call   c0027d47 <__extendsfdf2>
c000a8b3:	83 c4 10             	add    esp,0x10
c000a8b6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ba:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8ca:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8ce:	e8 7d ca 01 00       	call   c0027350 <__muldf3>
c000a8d3:	83 c4 10             	add    esp,0x10
c000a8d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8de:	52                   	push   edx
c000a8df:	50                   	push   eax
c000a8e0:	57                   	push   edi
c000a8e1:	56                   	push   esi
c000a8e2:	e8 ec c3 01 00       	call   c0026cd3 <__adddf3>
c000a8e7:	83 c4 10             	add    esp,0x10
c000a8ea:	89 c6                	mov    esi,eax
c000a8ec:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8ef:	89 d7                	mov    edi,edx
c000a8f1:	85 ed                	test   ebp,ebp
c000a8f3:	0f 8f 8d fd ff ff    	jg     c000a686 <calc_output_hex+0x363>
c000a8f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a901:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a905:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a909:	e8 c5 c3 01 00       	call   c0026cd3 <__adddf3>
c000a90e:	83 c4 10             	add    esp,0x10
c000a911:	89 04 24             	mov    DWORD PTR [esp],eax
c000a914:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a920:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a928:	e8 23 ca 01 00       	call   c0027350 <__muldf3>
c000a92d:	59                   	pop    ecx
c000a92e:	5b                   	pop    ebx
c000a92f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a933:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a937:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93f:	e8 df d2 01 00       	call   c0027c23 <__truncdfsf2>
c000a944:	83 c4 10             	add    esp,0x10
c000a947:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a94e:	89 03                	mov    DWORD PTR [ebx],eax
c000a950:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a954:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a958:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a95c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a960:	e8 6e c3 01 00       	call   c0026cd3 <__adddf3>
c000a965:	83 c4 10             	add    esp,0x10
c000a968:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a973:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a977:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97f:	e8 cc c9 01 00       	call   c0027350 <__muldf3>
c000a984:	5d                   	pop    ebp
c000a985:	59                   	pop    ecx
c000a986:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a98a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a98e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a992:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a996:	e8 88 d2 01 00       	call   c0027c23 <__truncdfsf2>
c000a99b:	83 c4 10             	add    esp,0x10
c000a99e:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9a8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9ac:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9b4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9b8:	e8 16 c3 01 00       	call   c0026cd3 <__adddf3>
c000a9bd:	83 c4 10             	add    esp,0x10
c000a9c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d7:	e8 74 c9 01 00       	call   c0027350 <__muldf3>
c000a9dc:	5b                   	pop    ebx
c000a9dd:	5d                   	pop    ebp
c000a9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ee:	e8 30 d2 01 00       	call   c0027c23 <__truncdfsf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9fd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa10:	e8 be c2 01 00       	call   c0026cd3 <__adddf3>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2f:	e8 1c c9 01 00       	call   c0027350 <__muldf3>
c000aa34:	59                   	pop    ecx
c000aa35:	5b                   	pop    ebx
c000aa36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa46:	e8 d8 d1 01 00       	call   c0027c23 <__truncdfsf2>
c000aa4b:	83 c4 10             	add    esp,0x10
c000aa4e:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa55:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa68:	e8 66 c2 01 00       	call   c0026cd3 <__adddf3>
c000aa6d:	83 c4 10             	add    esp,0x10
c000aa70:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa77:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa87:	e8 c4 c8 01 00       	call   c0027350 <__muldf3>
c000aa8c:	5d                   	pop    ebp
c000aa8d:	59                   	pop    ecx
c000aa8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	e8 80 d1 01 00       	call   c0027c23 <__truncdfsf2>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aab0:	57                   	push   edi
c000aab1:	56                   	push   esi
c000aab2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaba:	e8 14 c2 01 00       	call   c0026cd3 <__adddf3>
c000aabf:	83 c4 10             	add    esp,0x10
c000aac2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aac9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad9:	e8 72 c8 01 00       	call   c0027350 <__muldf3>
c000aade:	5b                   	pop    ebx
c000aadf:	5e                   	pop    esi
c000aae0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aae8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf0:	e8 2e d1 01 00       	call   c0027c23 <__truncdfsf2>
c000aaf5:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aafc:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaff:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab05:	5b                   	pop    ebx
c000ab06:	5e                   	pop    esi
c000ab07:	5f                   	pop    edi
c000ab08:	5d                   	pop    ebp
c000ab09:	c3                   	ret    

c000ab0a <sinc_reset>:
c000ab0a:	56                   	push   esi
c000ab0b:	53                   	push   ebx
c000ab0c:	51                   	push   ecx
c000ab0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab11:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab14:	85 db                	test   ebx,ebx
c000ab16:	74 59                	je     c000ab71 <sinc_reset+0x67>
c000ab18:	31 d2                	xor    edx,edx
c000ab1a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab21:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab24:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab27:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab2e:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab35:	31 c0                	xor    eax,eax
c000ab37:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab3d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab40:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab43:	52                   	push   edx
c000ab44:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab47:	c1 e0 02             	shl    eax,0x2
c000ab4a:	50                   	push   eax
c000ab4b:	6a 00                	push   0x0
c000ab4d:	56                   	push   esi
c000ab4e:	e8 6f 5b ff ff       	call   c00006c2 <memset>
c000ab53:	83 c4 0c             	add    esp,0xc
c000ab56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab59:	c1 e0 02             	shl    eax,0x2
c000ab5c:	50                   	push   eax
c000ab5d:	68 aa 00 00 00       	push   0xaa
c000ab62:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab65:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab68:	50                   	push   eax
c000ab69:	e8 54 5b ff ff       	call   c00006c2 <memset>
c000ab6e:	83 c4 10             	add    esp,0x10
c000ab71:	58                   	pop    eax
c000ab72:	5b                   	pop    ebx
c000ab73:	5e                   	pop    esi
c000ab74:	c3                   	ret    

c000ab75 <calc_output_multi>:
c000ab75:	55                   	push   ebp
c000ab76:	57                   	push   edi
c000ab77:	56                   	push   esi
c000ab78:	89 c6                	mov    esi,eax
c000ab7a:	53                   	push   ebx
c000ab7b:	83 ec 4c             	sub    esp,0x4c
c000ab7e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab82:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab86:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab8a:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab8e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab9a:	8d 46 44             	lea    eax,[esi+0x44]
c000ab9d:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba0:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000aba6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abaa:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abad:	e8 0f eb ff ff       	call   c00096c1 <int_to_fp>
c000abb2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abb5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abb9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abbd:	99                   	cdq    
c000abbe:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abc2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abc6:	0f af d0             	imul   edx,eax
c000abc9:	0f af c3             	imul   eax,ebx
c000abcc:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abd0:	29 c1                	sub    ecx,eax
c000abd2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abd6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abda:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abe1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abe5:	57                   	push   edi
c000abe6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abea:	6a 00                	push   0x0
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 cd 5a ff ff       	call   c00006c2 <memset>
c000abf5:	83 c4 10             	add    esp,0x10
c000abf8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abfc:	89 df                	mov    edi,ebx
c000abfe:	e8 cc ea ff ff       	call   c00096cf <fp_to_double>
c000ac03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac07:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac0f:	e8 b1 ea ff ff       	call   c00096c5 <fp_to_int>
c000ac14:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac17:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac1a:	51                   	push   ecx
c000ac1b:	51                   	push   ecx
c000ac1c:	55                   	push   ebp
c000ac1d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac21:	e8 42 ba 01 00       	call   c0026668 <__subsf3>
c000ac26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac29:	e8 19 d1 01 00       	call   c0027d47 <__extendsfdf2>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac35:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac41:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac45:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac49:	e8 02 c7 01 00       	call   c0027350 <__muldf3>
c000ac4e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac51:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac55:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac59:	e8 e9 d0 01 00       	call   c0027d47 <__extendsfdf2>
c000ac5e:	83 c4 10             	add    esp,0x10
c000ac61:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac65:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac69:	52                   	push   edx
c000ac6a:	50                   	push   eax
c000ac6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac73:	e8 5b c0 01 00       	call   c0026cd3 <__adddf3>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac7f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac83:	89 f8                	mov    eax,edi
c000ac85:	b9 08 00 00 00       	mov    ecx,0x8
c000ac8a:	99                   	cdq    
c000ac8b:	f7 f9                	idiv   ecx
c000ac8d:	4a                   	dec    edx
c000ac8e:	83 fa 06             	cmp    edx,0x6
c000ac91:	77 07                	ja     c000ac9a <calc_output_multi+0x125>
c000ac93:	ff 24 95 64 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6a9c]
c000ac9a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac9d:	4f                   	dec    edi
c000ac9e:	83 ec 0c             	sub    esp,0xc
c000aca1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aca4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aca8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acaf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acb3:	e8 8f d0 01 00       	call   c0027d47 <__extendsfdf2>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acbf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000accb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000accf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd3:	e8 78 c6 01 00       	call   c0027350 <__muldf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acdf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ace3:	52                   	push   edx
c000ace4:	50                   	push   eax
c000ace5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ace8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aceb:	e8 e3 bf 01 00       	call   c0026cd3 <__adddf3>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acf6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acf9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acfc:	4f                   	dec    edi
c000acfd:	83 ec 0c             	sub    esp,0xc
c000ad00:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad07:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad0e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad12:	e8 30 d0 01 00       	call   c0027d47 <__extendsfdf2>
c000ad17:	83 c4 10             	add    esp,0x10
c000ad1a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad1e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad2a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad2e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad32:	e8 19 c6 01 00       	call   c0027350 <__muldf3>
c000ad37:	83 c4 10             	add    esp,0x10
c000ad3a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad3e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad42:	52                   	push   edx
c000ad43:	50                   	push   eax
c000ad44:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad47:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad4a:	e8 84 bf 01 00       	call   c0026cd3 <__adddf3>
c000ad4f:	83 c4 10             	add    esp,0x10
c000ad52:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad55:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad5b:	4f                   	dec    edi
c000ad5c:	83 ec 0c             	sub    esp,0xc
c000ad5f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad66:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad6d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad71:	e8 d1 cf 01 00       	call   c0027d47 <__extendsfdf2>
c000ad76:	83 c4 10             	add    esp,0x10
c000ad79:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad7d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad89:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad91:	e8 ba c5 01 00       	call   c0027350 <__muldf3>
c000ad96:	83 c4 10             	add    esp,0x10
c000ad99:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad9d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada1:	52                   	push   edx
c000ada2:	50                   	push   eax
c000ada3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ada6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ada9:	e8 25 bf 01 00       	call   c0026cd3 <__adddf3>
c000adae:	83 c4 10             	add    esp,0x10
c000adb1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adb4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adba:	4f                   	dec    edi
c000adbb:	83 ec 0c             	sub    esp,0xc
c000adbe:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adc5:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adcc:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000add0:	e8 72 cf 01 00       	call   c0027d47 <__extendsfdf2>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000addc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adf0:	e8 5b c5 01 00       	call   c0027350 <__muldf3>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adfc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae00:	52                   	push   edx
c000ae01:	50                   	push   eax
c000ae02:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae05:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae08:	e8 c6 be 01 00       	call   c0026cd3 <__adddf3>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae13:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae16:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae19:	4f                   	dec    edi
c000ae1a:	83 ec 0c             	sub    esp,0xc
c000ae1d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae24:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae2b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae2f:	e8 13 cf 01 00       	call   c0027d47 <__extendsfdf2>
c000ae34:	83 c4 10             	add    esp,0x10
c000ae37:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae3b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4f:	e8 fc c4 01 00       	call   c0027350 <__muldf3>
c000ae54:	83 c4 10             	add    esp,0x10
c000ae57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5f:	52                   	push   edx
c000ae60:	50                   	push   eax
c000ae61:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae64:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae67:	e8 67 be 01 00       	call   c0026cd3 <__adddf3>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae72:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae75:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae78:	4f                   	dec    edi
c000ae79:	83 ec 0c             	sub    esp,0xc
c000ae7c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae83:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae8e:	e8 b4 ce 01 00       	call   c0027d47 <__extendsfdf2>
c000ae93:	83 c4 10             	add    esp,0x10
c000ae96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	e8 9d c4 01 00       	call   c0027350 <__muldf3>
c000aeb3:	83 c4 10             	add    esp,0x10
c000aeb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aebe:	52                   	push   edx
c000aebf:	50                   	push   eax
c000aec0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aec6:	e8 08 be 01 00       	call   c0026cd3 <__adddf3>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed7:	4f                   	dec    edi
c000aed8:	83 ec 0c             	sub    esp,0xc
c000aedb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aede:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aee9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeed:	e8 55 ce 01 00       	call   c0027d47 <__extendsfdf2>
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	e8 3e c4 01 00       	call   c0027350 <__muldf3>
c000af12:	83 c4 10             	add    esp,0x10
c000af15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1d:	52                   	push   edx
c000af1e:	50                   	push   eax
c000af1f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af22:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af25:	e8 a9 bd 01 00       	call   c0026cd3 <__adddf3>
c000af2a:	83 c4 10             	add    esp,0x10
c000af2d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af30:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af36:	4f                   	dec    edi
c000af37:	83 ec 0c             	sub    esp,0xc
c000af3a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af41:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af48:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4c:	e8 f6 cd 01 00       	call   c0027d47 <__extendsfdf2>
c000af51:	83 c4 10             	add    esp,0x10
c000af54:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af58:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	e8 df c3 01 00       	call   c0027350 <__muldf3>
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7c:	52                   	push   edx
c000af7d:	50                   	push   eax
c000af7e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af81:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af84:	e8 4a bd 01 00       	call   c0026cd3 <__adddf3>
c000af89:	83 c4 10             	add    esp,0x10
c000af8c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af8f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af92:	85 ff                	test   edi,edi
c000af94:	0f 8f e9 fc ff ff    	jg     c000ac83 <calc_output_multi+0x10e>
c000af9a:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af9e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afa2:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afa6:	0f 89 4c fc ff ff    	jns    c000abf8 <calc_output_multi+0x83>
c000afac:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afb4:	29 c8                	sub    eax,ecx
c000afb6:	99                   	cdq    
c000afb7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afbf:	0f af d0             	imul   edx,eax
c000afc2:	40                   	inc    eax
c000afc3:	01 d1                	add    ecx,edx
c000afc5:	0f af c3             	imul   eax,ebx
c000afc8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afcc:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afcf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afd8:	6a 00                	push   0x0
c000afda:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afde:	e8 df 56 ff ff       	call   c00006c2 <memset>
c000afe3:	83 c4 10             	add    esp,0x10
c000afe6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afea:	e8 e0 e6 ff ff       	call   c00096cf <fp_to_double>
c000afef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aff3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000affb:	e8 c5 e6 ff ff       	call   c00096c5 <fp_to_int>
c000b000:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b003:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b006:	57                   	push   edi
c000b007:	57                   	push   edi
c000b008:	89 df                	mov    edi,ebx
c000b00a:	55                   	push   ebp
c000b00b:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b00f:	e8 54 b6 01 00       	call   c0026668 <__subsf3>
c000b014:	89 04 24             	mov    DWORD PTR [esp],eax
c000b017:	e8 2b cd 01 00       	call   c0027d47 <__extendsfdf2>
c000b01c:	83 c4 10             	add    esp,0x10
c000b01f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b023:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b037:	e8 14 c3 01 00       	call   c0027350 <__muldf3>
c000b03c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b03f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b043:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b047:	e8 fb cc 01 00       	call   c0027d47 <__extendsfdf2>
c000b04c:	83 c4 10             	add    esp,0x10
c000b04f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b053:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b057:	52                   	push   edx
c000b058:	50                   	push   eax
c000b059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b061:	e8 6d bc 01 00       	call   c0026cd3 <__adddf3>
c000b066:	83 c4 10             	add    esp,0x10
c000b069:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b06d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b071:	89 f8                	mov    eax,edi
c000b073:	b9 08 00 00 00       	mov    ecx,0x8
c000b078:	99                   	cdq    
c000b079:	f7 f9                	idiv   ecx
c000b07b:	4a                   	dec    edx
c000b07c:	83 fa 06             	cmp    edx,0x6
c000b07f:	77 07                	ja     c000b088 <calc_output_multi+0x513>
c000b081:	ff 24 95 80 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6a80]
c000b088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08c:	4f                   	dec    edi
c000b08d:	83 ec 0c             	sub    esp,0xc
c000b090:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b093:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b097:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b09e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a2:	e8 a0 cc 01 00       	call   c0027d47 <__extendsfdf2>
c000b0a7:	83 c4 10             	add    esp,0x10
c000b0aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c2:	e8 89 c2 01 00       	call   c0027350 <__muldf3>
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0d2:	52                   	push   edx
c000b0d3:	50                   	push   eax
c000b0d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0da:	e8 f4 bb 01 00       	call   c0026cd3 <__adddf3>
c000b0df:	83 c4 10             	add    esp,0x10
c000b0e2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0e5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ec:	4f                   	dec    edi
c000b0ed:	83 ec 0c             	sub    esp,0xc
c000b0f0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0f7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0fe:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b102:	e8 40 cc 01 00       	call   c0027d47 <__extendsfdf2>
c000b107:	83 c4 10             	add    esp,0x10
c000b10a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b10e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b11e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b122:	e8 29 c2 01 00       	call   c0027350 <__muldf3>
c000b127:	83 c4 10             	add    esp,0x10
c000b12a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b12e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b132:	52                   	push   edx
c000b133:	50                   	push   eax
c000b134:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b137:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13a:	e8 94 bb 01 00       	call   c0026cd3 <__adddf3>
c000b13f:	83 c4 10             	add    esp,0x10
c000b142:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b145:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b14c:	4f                   	dec    edi
c000b14d:	83 ec 0c             	sub    esp,0xc
c000b150:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b153:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b157:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b15e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b162:	e8 e0 cb 01 00       	call   c0027d47 <__extendsfdf2>
c000b167:	83 c4 10             	add    esp,0x10
c000b16a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b16e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b172:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b176:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b17e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b182:	e8 c9 c1 01 00       	call   c0027350 <__muldf3>
c000b187:	83 c4 10             	add    esp,0x10
c000b18a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b18e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b192:	52                   	push   edx
c000b193:	50                   	push   eax
c000b194:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b197:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19a:	e8 34 bb 01 00       	call   c0026cd3 <__adddf3>
c000b19f:	83 c4 10             	add    esp,0x10
c000b1a2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1ac:	4f                   	dec    edi
c000b1ad:	83 ec 0c             	sub    esp,0xc
c000b1b0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1b7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1be:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1c2:	e8 80 cb 01 00       	call   c0027d47 <__extendsfdf2>
c000b1c7:	83 c4 10             	add    esp,0x10
c000b1ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e2:	e8 69 c1 01 00       	call   c0027350 <__muldf3>
c000b1e7:	83 c4 10             	add    esp,0x10
c000b1ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1f2:	52                   	push   edx
c000b1f3:	50                   	push   eax
c000b1f4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1f7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1fa:	e8 d4 ba 01 00       	call   c0026cd3 <__adddf3>
c000b1ff:	83 c4 10             	add    esp,0x10
c000b202:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b205:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b20c:	4f                   	dec    edi
c000b20d:	83 ec 0c             	sub    esp,0xc
c000b210:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b213:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b217:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b21e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b222:	e8 20 cb 01 00       	call   c0027d47 <__extendsfdf2>
c000b227:	83 c4 10             	add    esp,0x10
c000b22a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b22e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b23a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b23e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b242:	e8 09 c1 01 00       	call   c0027350 <__muldf3>
c000b247:	83 c4 10             	add    esp,0x10
c000b24a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b24e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b252:	52                   	push   edx
c000b253:	50                   	push   eax
c000b254:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b257:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b25a:	e8 74 ba 01 00       	call   c0026cd3 <__adddf3>
c000b25f:	83 c4 10             	add    esp,0x10
c000b262:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b265:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26c:	4f                   	dec    edi
c000b26d:	83 ec 0c             	sub    esp,0xc
c000b270:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b277:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b282:	e8 c0 ca 01 00       	call   c0027d47 <__extendsfdf2>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b29a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a2:	e8 a9 c0 01 00       	call   c0027350 <__muldf3>
c000b2a7:	83 c4 10             	add    esp,0x10
c000b2aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b2:	52                   	push   edx
c000b2b3:	50                   	push   eax
c000b2b4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2ba:	e8 14 ba 01 00       	call   c0026cd3 <__adddf3>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cc:	4f                   	dec    edi
c000b2cd:	83 ec 0c             	sub    esp,0xc
c000b2d0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2de:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e2:	e8 60 ca 01 00       	call   c0027d47 <__extendsfdf2>
c000b2e7:	83 c4 10             	add    esp,0x10
c000b2ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b302:	e8 49 c0 01 00       	call   c0027350 <__muldf3>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b312:	52                   	push   edx
c000b313:	50                   	push   eax
c000b314:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b317:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b31a:	e8 b4 b9 01 00       	call   c0026cd3 <__adddf3>
c000b31f:	83 c4 10             	add    esp,0x10
c000b322:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b325:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32c:	4f                   	dec    edi
c000b32d:	83 ec 0c             	sub    esp,0xc
c000b330:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b333:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b337:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b342:	e8 00 ca 01 00       	call   c0027d47 <__extendsfdf2>
c000b347:	83 c4 10             	add    esp,0x10
c000b34a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b352:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b356:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b362:	e8 e9 bf 01 00       	call   c0027350 <__muldf3>
c000b367:	83 c4 10             	add    esp,0x10
c000b36a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b372:	52                   	push   edx
c000b373:	50                   	push   eax
c000b374:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b377:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b37a:	e8 54 b9 01 00       	call   c0026cd3 <__adddf3>
c000b37f:	83 c4 10             	add    esp,0x10
c000b382:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b385:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b388:	85 ff                	test   edi,edi
c000b38a:	0f 8f e1 fc ff ff    	jg     c000b071 <calc_output_multi+0x4fc>
c000b390:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b394:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b398:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b39c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3a1:	0f 8f 3f fc ff ff    	jg     c000afe6 <calc_output_multi+0x471>
c000b3a7:	be 08 00 00 00       	mov    esi,0x8
c000b3ac:	89 d8                	mov    eax,ebx
c000b3ae:	99                   	cdq    
c000b3af:	f7 fe                	idiv   esi
c000b3b1:	4a                   	dec    edx
c000b3b2:	83 fa 06             	cmp    edx,0x6
c000b3b5:	77 07                	ja     c000b3be <calc_output_multi+0x849>
c000b3b7:	ff 24 95 9c 95 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6a64]
c000b3be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c2:	4b                   	dec    ebx
c000b3c3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3c7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3ce:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3d2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3d5:	e8 f9 b8 01 00       	call   c0026cd3 <__adddf3>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f5:	e8 56 bf 01 00       	call   c0027350 <__muldf3>
c000b3fa:	5d                   	pop    ebp
c000b3fb:	59                   	pop    ecx
c000b3fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b400:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b404:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b408:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40c:	e8 12 c8 01 00       	call   c0027c23 <__truncdfsf2>
c000b411:	83 c4 10             	add    esp,0x10
c000b414:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b418:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b41b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b41f:	4b                   	dec    ebx
c000b420:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b424:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b427:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b42b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b42f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b432:	e8 9c b8 01 00       	call   c0026cd3 <__adddf3>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b43e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b452:	e8 f9 be 01 00       	call   c0027350 <__muldf3>
c000b457:	59                   	pop    ecx
c000b458:	5f                   	pop    edi
c000b459:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b45d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b461:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b465:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b469:	e8 b5 c7 01 00       	call   c0027c23 <__truncdfsf2>
c000b46e:	83 c4 10             	add    esp,0x10
c000b471:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b475:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47c:	4b                   	dec    ebx
c000b47d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b481:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b488:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b48c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b48f:	e8 3f b8 01 00       	call   c0026cd3 <__adddf3>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b49b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b49f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	e8 9c be 01 00       	call   c0027350 <__muldf3>
c000b4b4:	5f                   	pop    edi
c000b4b5:	5d                   	pop    ebp
c000b4b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c6:	e8 58 c7 01 00       	call   c0027c23 <__truncdfsf2>
c000b4cb:	83 c4 10             	add    esp,0x10
c000b4ce:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4d2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d9:	4b                   	dec    ebx
c000b4da:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4de:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4e5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ec:	e8 e2 b7 01 00       	call   c0026cd3 <__adddf3>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b504:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50c:	e8 3f be 01 00       	call   c0027350 <__muldf3>
c000b511:	5d                   	pop    ebp
c000b512:	59                   	pop    ecx
c000b513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b517:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b51b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b523:	e8 fb c6 01 00       	call   c0027c23 <__truncdfsf2>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b52f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b536:	4b                   	dec    ebx
c000b537:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b53e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b542:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b546:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b549:	e8 85 b7 01 00       	call   c0026cd3 <__adddf3>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b555:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b565:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b569:	e8 e2 bd 01 00       	call   c0027350 <__muldf3>
c000b56e:	59                   	pop    ecx
c000b56f:	5f                   	pop    edi
c000b570:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b574:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b580:	e8 9e c6 01 00       	call   c0027c23 <__truncdfsf2>
c000b585:	83 c4 10             	add    esp,0x10
c000b588:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b58c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b58f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b593:	4b                   	dec    ebx
c000b594:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b598:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b59f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a6:	e8 28 b7 01 00       	call   c0026cd3 <__adddf3>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c6:	e8 85 bd 01 00       	call   c0027350 <__muldf3>
c000b5cb:	5f                   	pop    edi
c000b5cc:	5d                   	pop    ebp
c000b5cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5dd:	e8 41 c6 01 00       	call   c0027c23 <__truncdfsf2>
c000b5e2:	83 c4 10             	add    esp,0x10
c000b5e5:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5e9:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f0:	4b                   	dec    ebx
c000b5f1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5fc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b600:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b603:	e8 cb b6 01 00       	call   c0026cd3 <__adddf3>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b60f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b61b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b623:	e8 28 bd 01 00       	call   c0027350 <__muldf3>
c000b628:	5d                   	pop    ebp
c000b629:	59                   	pop    ecx
c000b62a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b62e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b632:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b636:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63a:	e8 e4 c5 01 00       	call   c0027c23 <__truncdfsf2>
c000b63f:	83 c4 10             	add    esp,0x10
c000b642:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b646:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64d:	4b                   	dec    ebx
c000b64e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b652:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b659:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b65d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b660:	e8 6e b6 01 00       	call   c0026cd3 <__adddf3>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b678:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b680:	e8 cb bc 01 00       	call   c0027350 <__muldf3>
c000b685:	59                   	pop    ecx
c000b686:	5f                   	pop    edi
c000b687:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b68b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b697:	e8 87 c5 01 00       	call   c0027c23 <__truncdfsf2>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	85 db                	test   ebx,ebx
c000b6a1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6a5:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6a8:	0f 8f fe fc ff ff    	jg     c000b3ac <calc_output_multi+0x837>
c000b6ae:	83 c4 4c             	add    esp,0x4c
c000b6b1:	5b                   	pop    ebx
c000b6b2:	5e                   	pop    esi
c000b6b3:	5f                   	pop    edi
c000b6b4:	5d                   	pop    ebp
c000b6b5:	c3                   	ret    

c000b6b6 <double_to_fp>:
c000b6b6:	83 ec 0c             	sub    esp,0xc
c000b6b9:	68 00 00 b0 40       	push   0x40b00000
c000b6be:	6a 00                	push   0x0
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	e8 83 bc 01 00       	call   c0027350 <__muldf3>
c000b6cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6d5:	83 c4 1c             	add    esp,0x1c
c000b6d8:	e9 f3 c6 01 00       	jmp    c0027dd0 <lrint>

c000b6dd <prepare_data>:
c000b6dd:	55                   	push   ebp
c000b6de:	57                   	push   edi
c000b6df:	56                   	push   esi
c000b6e0:	53                   	push   ebx
c000b6e1:	83 ec 1c             	sub    esp,0x1c
c000b6e4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6e8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6ec:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6f0:	0f 89 57 01 00 00    	jns    c000b84d <prepare_data+0x170>
c000b6f6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6f9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fc:	85 d2                	test   edx,edx
c000b6fe:	75 0d                	jne    c000b70d <prepare_data+0x30>
c000b700:	8d 14 36             	lea    edx,[esi+esi*1]
c000b703:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b706:	29 d0                	sub    eax,edx
c000b708:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70b:	eb 44                	jmp    c000b751 <prepare_data+0x74>
c000b70d:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b710:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b713:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b716:	39 c1                	cmp    ecx,eax
c000b718:	7d 04                	jge    c000b71e <prepare_data+0x41>
c000b71a:	29 d0                	sub    eax,edx
c000b71c:	eb 2d                	jmp    c000b74b <prepare_data+0x6e>
c000b71e:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b724:	29 d7                	sub    edi,edx
c000b726:	01 f7                	add    edi,esi
c000b728:	51                   	push   ecx
c000b729:	29 f2                	sub    edx,esi
c000b72b:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b732:	8d 14 90             	lea    edx,[eax+edx*4]
c000b735:	51                   	push   ecx
c000b736:	52                   	push   edx
c000b737:	50                   	push   eax
c000b738:	e8 2b 4f ff ff       	call   c0000668 <memmove>
c000b73d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b740:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b743:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b746:	29 f0                	sub    eax,esi
c000b748:	83 c4 10             	add    esp,0x10
c000b74b:	29 f0                	sub    eax,esi
c000b74d:	79 02                	jns    c000b751 <prepare_data+0x74>
c000b74f:	31 c0                	xor    eax,eax
c000b751:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b754:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b757:	29 ef                	sub    edi,ebp
c000b759:	39 c7                	cmp    edi,eax
c000b75b:	7e 02                	jle    c000b75f <prepare_data+0x82>
c000b75d:	89 c7                	mov    edi,eax
c000b75f:	89 f8                	mov    eax,edi
c000b761:	99                   	cdq    
c000b762:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b765:	b8 15 00 00 00       	mov    eax,0x15
c000b76a:	29 d7                	sub    edi,edx
c000b76c:	0f 88 dd 00 00 00    	js     c000b84f <prepare_data+0x172>
c000b772:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b775:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b778:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b77b:	0f 8f ce 00 00 00    	jg     c000b84f <prepare_data+0x172>
c000b781:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b787:	50                   	push   eax
c000b788:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b78f:	50                   	push   eax
c000b790:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b794:	8b 00                	mov    eax,DWORD PTR [eax]
c000b796:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b799:	50                   	push   eax
c000b79a:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b79d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a1:	50                   	push   eax
c000b7a2:	e8 f9 4e ff ff       	call   c00006a0 <memcpy>
c000b7a7:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7aa:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7ad:	01 fd                	add    ebp,edi
c000b7af:	01 f9                	add    ecx,edi
c000b7b1:	83 c4 10             	add    esp,0x10
c000b7b4:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7b7:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7ba:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7c1:	0f 85 86 00 00 00    	jne    c000b84d <prepare_data+0x170>
c000b7c7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7ca:	89 e8                	mov    eax,ebp
c000b7cc:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7cf:	29 c8                	sub    eax,ecx
c000b7d1:	39 f8                	cmp    eax,edi
c000b7d3:	7d 78                	jge    c000b84d <prepare_data+0x170>
c000b7d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7d9:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7dd:	74 6e                	je     c000b84d <prepare_data+0x170>
c000b7df:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7e2:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7e6:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7e9:	29 ef                	sub    edi,ebp
c000b7eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7ef:	7c 29                	jl     c000b81a <prepare_data+0x13d>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	29 f1                	sub    ecx,esi
c000b7f6:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7fd:	55                   	push   ebp
c000b7fe:	50                   	push   eax
c000b7ff:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b802:	50                   	push   eax
c000b803:	52                   	push   edx
c000b804:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b808:	e8 5b 4e ff ff       	call   c0000668 <memmove>
c000b80d:	83 c4 10             	add    esp,0x10
c000b810:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b813:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b816:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b81a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b81d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b820:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b823:	83 c6 05             	add    esi,0x5
c000b826:	78 07                	js     c000b82f <prepare_data+0x152>
c000b828:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b82b:	39 cf                	cmp    edi,ecx
c000b82d:	7e 04                	jle    c000b833 <prepare_data+0x156>
c000b82f:	89 ce                	mov    esi,ecx
c000b831:	29 c6                	sub    esi,eax
c000b833:	8d 04 82             	lea    eax,[edx+eax*4]
c000b836:	51                   	push   ecx
c000b837:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b83e:	51                   	push   ecx
c000b83f:	6a 00                	push   0x0
c000b841:	50                   	push   eax
c000b842:	e8 7b 4e ff ff       	call   c00006c2 <memset>
c000b847:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b84a:	83 c4 10             	add    esp,0x10
c000b84d:	31 c0                	xor    eax,eax
c000b84f:	83 c4 1c             	add    esp,0x1c
c000b852:	5b                   	pop    ebx
c000b853:	5e                   	pop    esi
c000b854:	5f                   	pop    edi
c000b855:	5d                   	pop    ebp
c000b856:	c3                   	ret    

c000b857 <sinc_multichan_vari_process>:
c000b857:	55                   	push   ebp
c000b858:	ba 05 00 00 00       	mov    edx,0x5
c000b85d:	57                   	push   edi
c000b85e:	56                   	push   esi
c000b85f:	53                   	push   ebx
c000b860:	83 ec 4c             	sub    esp,0x4c
c000b863:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b867:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b86b:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b86e:	85 db                	test   ebx,ebx
c000b870:	0f 84 9b 06 00 00    	je     c000bf11 <sinc_multichan_vari_process+0x6ba>
c000b876:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b879:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b87c:	0f af c5             	imul   eax,ebp
c000b87f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b882:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b885:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b88c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b893:	0f af c5             	imul   eax,ebp
c000b896:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b899:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b89c:	8b 06                	mov    eax,DWORD PTR [esi]
c000b89e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a6:	68 00 00 70 3f       	push   0x3f700000
c000b8ab:	6a 00                	push   0x0
c000b8ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b5:	e8 65 c3 01 00       	call   c0027c1f <__ltdf2>
c000b8ba:	83 c4 10             	add    esp,0x10
c000b8bd:	ba 16 00 00 00       	mov    edx,0x16
c000b8c2:	85 c0                	test   eax,eax
c000b8c4:	0f 88 47 06 00 00    	js     c000bf11 <sinc_multichan_vari_process+0x6ba>
c000b8ca:	68 00 00 70 40       	push   0x40700000
c000b8cf:	6a 00                	push   0x0
c000b8d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d9:	e8 23 c3 01 00       	call   c0027c01 <__gtdf2>
c000b8de:	83 c4 10             	add    esp,0x10
c000b8e1:	ba 16 00 00 00       	mov    edx,0x16
c000b8e6:	85 c0                	test   eax,eax
c000b8e8:	0f 8f 23 06 00 00    	jg     c000bf11 <sinc_multichan_vari_process+0x6ba>
c000b8ee:	83 ec 0c             	sub    esp,0xc
c000b8f1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8f4:	e8 ba c0 01 00       	call   c00279b3 <__floatsidf>
c000b8f9:	83 c4 10             	add    esp,0x10
c000b8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b904:	68 00 00 00 40       	push   0x40000000
c000b909:	6a 00                	push   0x0
c000b90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b913:	e8 bb b3 01 00       	call   c0026cd3 <__adddf3>
c000b918:	59                   	pop    ecx
c000b919:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b91d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b921:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b924:	e8 8a c0 01 00       	call   c00279b3 <__floatsidf>
c000b929:	83 c4 10             	add    esp,0x10
c000b92c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b930:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b934:	52                   	push   edx
c000b935:	50                   	push   eax
c000b936:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b93a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b93e:	e8 f1 bc 01 00       	call   c0027634 <__divdf3>
c000b943:	83 c4 10             	add    esp,0x10
c000b946:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b94a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b94e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b951:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b958:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b960:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b964:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b968:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96c:	e8 90 c2 01 00       	call   c0027c01 <__gtdf2>
c000b971:	83 c4 10             	add    esp,0x10
c000b974:	85 c0                	test   eax,eax
c000b976:	7e 2d                	jle    c000b9a5 <sinc_multichan_vari_process+0x14e>
c000b978:	68 00 00 f0 3f       	push   0x3ff00000
c000b97d:	6a 00                	push   0x0
c000b97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b987:	e8 93 c2 01 00       	call   c0027c1f <__ltdf2>
c000b98c:	83 c4 10             	add    esp,0x10
c000b98f:	85 c0                	test   eax,eax
c000b991:	79 4d                	jns    c000b9e0 <sinc_multichan_vari_process+0x189>
c000b993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b997:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b99b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b99f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9a3:	eb 1b                	jmp    c000b9c0 <sinc_multichan_vari_process+0x169>
c000b9a5:	68 00 00 f0 3f       	push   0x3ff00000
c000b9aa:	6a 00                	push   0x0
c000b9ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b4:	e8 66 c2 01 00       	call   c0027c1f <__ltdf2>
c000b9b9:	83 c4 10             	add    esp,0x10
c000b9bc:	85 c0                	test   eax,eax
c000b9be:	79 20                	jns    c000b9e0 <sinc_multichan_vari_process+0x189>
c000b9c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d0:	e8 5f bc 01 00       	call   c0027634 <__divdf3>
c000b9d5:	83 c4 10             	add    esp,0x10
c000b9d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e0:	50                   	push   eax
c000b9e1:	50                   	push   eax
c000b9e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ea:	e8 e1 c3 01 00       	call   c0027dd0 <lrint>
c000b9ef:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9f2:	40                   	inc    eax
c000b9f3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f7:	0f af c5             	imul   eax,ebp
c000b9fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba01:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba05:	58                   	pop    eax
c000ba06:	5a                   	pop    edx
c000ba07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba0f:	e8 bc c3 01 00       	call   c0027dd0 <lrint>
c000ba14:	83 ec 0c             	sub    esp,0xc
c000ba17:	50                   	push   eax
c000ba18:	e8 96 bf 01 00       	call   c00279b3 <__floatsidf>
c000ba1d:	83 c4 10             	add    esp,0x10
c000ba20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba24:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba28:	52                   	push   edx
c000ba29:	50                   	push   eax
c000ba2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba32:	e8 ed b8 01 00       	call   c0027324 <__subdf3>
c000ba37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba3f:	83 c4 20             	add    esp,0x20
c000ba42:	6a 00                	push   0x0
c000ba44:	6a 00                	push   0x0
c000ba46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4e:	e8 cc c1 01 00       	call   c0027c1f <__ltdf2>
c000ba53:	83 c4 10             	add    esp,0x10
c000ba56:	85 c0                	test   eax,eax
c000ba58:	79 1f                	jns    c000ba79 <sinc_multichan_vari_process+0x222>
c000ba5a:	68 00 00 f0 3f       	push   0x3ff00000
c000ba5f:	6a 00                	push   0x0
c000ba61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba69:	e8 65 b2 01 00       	call   c0026cd3 <__adddf3>
c000ba6e:	83 c4 10             	add    esp,0x10
c000ba71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba79:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7c:	83 ec 10             	sub    esp,0x10
c000ba7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba83:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba96:	e8 89 b8 01 00       	call   c0027324 <__subdf3>
c000ba9b:	83 c4 18             	add    esp,0x18
c000ba9e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baa2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa6:	52                   	push   edx
c000baa7:	50                   	push   eax
c000baa8:	e8 23 c3 01 00       	call   c0027dd0 <lrint>
c000baad:	0f af e8             	imul   ebp,eax
c000bab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab4:	01 e8                	add    eax,ebp
c000bab6:	99                   	cdq    
c000bab7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000baba:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000babd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac5:	68 00 00 f0 3f       	push   0x3ff00000
c000baca:	6a 00                	push   0x0
c000bacc:	e8 63 bb 01 00       	call   c0027634 <__divdf3>
c000bad1:	83 c4 10             	add    esp,0x10
c000bad4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bad8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000badc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bae1:	68 23 42 92 0c       	push   0xc924223
c000bae6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baee:	e8 e0 b1 01 00       	call   c0026cd3 <__adddf3>
c000baf3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bafb:	83 c4 20             	add    esp,0x20
c000bafe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb06:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb11:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb14:	7d 50                	jge    c000bb66 <sinc_multichan_vari_process+0x30f>
c000bb16:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb1c:	01 c8                	add    eax,ecx
c000bb1e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb21:	99                   	cdq    
c000bb22:	f7 f9                	idiv   ecx
c000bb24:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb28:	7d 0c                	jge    c000bb36 <sinc_multichan_vari_process+0x2df>
c000bb2a:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb2d:	85 ed                	test   ebp,ebp
c000bb2f:	79 6b                	jns    c000bb9c <sinc_multichan_vari_process+0x345>
c000bb31:	e9 e6 00 00 00       	jmp    c000bc1c <sinc_multichan_vari_process+0x3c5>
c000bb36:	50                   	push   eax
c000bb37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb3b:	57                   	push   edi
c000bb3c:	53                   	push   ebx
c000bb3d:	e8 9b fb ff ff       	call   c000b6dd <prepare_data>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 c2                	mov    edx,eax
c000bb47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb4a:	85 c0                	test   eax,eax
c000bb4c:	0f 85 bf 03 00 00    	jne    c000bf11 <sinc_multichan_vari_process+0x6ba>
c000bb52:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb55:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb58:	01 c8                	add    eax,ecx
c000bb5a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb5d:	99                   	cdq    
c000bb5e:	f7 f9                	idiv   ecx
c000bb60:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb64:	7c c4                	jl     c000bb2a <sinc_multichan_vari_process+0x2d3>
c000bb66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb6e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb71:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7c:	89 06                	mov    DWORD PTR [esi],eax
c000bb7e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb84:	99                   	cdq    
c000bb85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb8e:	99                   	cdq    
c000bb8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb92:	31 d2                	xor    edx,edx
c000bb94:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb97:	e9 75 03 00 00       	jmp    c000bf11 <sinc_multichan_vari_process+0x6ba>
c000bb9c:	83 ec 0c             	sub    esp,0xc
c000bb9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bba2:	e8 0c be 01 00       	call   c00279b3 <__floatsidf>
c000bba7:	83 c4 10             	add    esp,0x10
c000bbaa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc2:	e8 0c b1 01 00       	call   c0026cd3 <__adddf3>
c000bbc7:	83 c4 10             	add    esp,0x10
c000bbca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe2:	e8 ec b0 01 00       	call   c0026cd3 <__adddf3>
c000bbe7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbf2:	e8 bc bd 01 00       	call   c00279b3 <__floatsidf>
c000bbf7:	83 c4 10             	add    esp,0x10
c000bbfa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbfe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc02:	52                   	push   edx
c000bc03:	50                   	push   eax
c000bc04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0c:	e8 0c c0 01 00       	call   c0027c1d <__gedf2>
c000bc11:	83 c4 10             	add    esp,0x10
c000bc14:	85 c0                	test   eax,eax
c000bc16:	0f 89 4a ff ff ff    	jns    c000bb66 <sinc_multichan_vari_process+0x30f>
c000bc1c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc20:	0f 8e ed 00 00 00    	jle    c000bd13 <sinc_multichan_vari_process+0x4bc>
c000bc26:	83 ec 10             	sub    esp,0x10
c000bc29:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc2c:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc2f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc32:	ff 36                	push   DWORD PTR [esi]
c000bc34:	e8 eb b6 01 00       	call   c0027324 <__subdf3>
c000bc39:	83 c4 18             	add    esp,0x18
c000bc3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc44:	52                   	push   edx
c000bc45:	50                   	push   eax
c000bc46:	e8 65 c1 01 00       	call   c0027db0 <fabs>
c000bc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc53:	83 c4 10             	add    esp,0x10
c000bc56:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc5b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc68:	e8 94 bf 01 00       	call   c0027c01 <__gtdf2>
c000bc6d:	83 c4 10             	add    esp,0x10
c000bc70:	85 c0                	test   eax,eax
c000bc72:	0f 8e 9b 00 00 00    	jle    c000bd13 <sinc_multichan_vari_process+0x4bc>
c000bc78:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc7a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc81:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc8a:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc8d:	e8 92 b6 01 00       	call   c0027324 <__subdf3>
c000bc92:	59                   	pop    ecx
c000bc93:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc97:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc9b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc9e:	e8 10 bd 01 00       	call   c00279b3 <__floatsidf>
c000bca3:	83 c4 10             	add    esp,0x10
c000bca6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcae:	52                   	push   edx
c000bcaf:	50                   	push   eax
c000bcb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb8:	e8 93 b6 01 00       	call   c0027350 <__muldf3>
c000bcbd:	5d                   	pop    ebp
c000bcbe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcc2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcc6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bcc9:	e8 e5 bc 01 00       	call   c00279b3 <__floatsidf>
c000bcce:	83 c4 10             	add    esp,0x10
c000bcd1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd9:	52                   	push   edx
c000bcda:	50                   	push   eax
c000bcdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce3:	e8 4c b9 01 00       	call   c0027634 <__divdf3>
c000bce8:	83 c4 10             	add    esp,0x10
c000bceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd03:	e8 cb af 01 00       	call   c0026cd3 <__adddf3>
c000bd08:	83 c4 10             	add    esp,0x10
c000bd0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd0f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd13:	83 ec 0c             	sub    esp,0xc
c000bd16:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd19:	e8 95 bc 01 00       	call   c00279b3 <__floatsidf>
c000bd1e:	83 c4 10             	add    esp,0x10
c000bd21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd39:	e8 e1 be 01 00       	call   c0027c1f <__ltdf2>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	85 c0                	test   eax,eax
c000bd43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd47:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd4b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd4f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd53:	78 10                	js     c000bd65 <sinc_multichan_vari_process+0x50e>
c000bd55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd61:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd75:	e8 d6 b5 01 00       	call   c0027350 <__muldf3>
c000bd7a:	59                   	pop    ecx
c000bd7b:	5d                   	pop    ebp
c000bd7c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8c:	e8 25 f9 ff ff       	call   c000b6b6 <double_to_fp>
c000bd91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd95:	89 c5                	mov    ebp,eax
c000bd97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda3:	e8 a8 b5 01 00       	call   c0027350 <__muldf3>
c000bda8:	83 c4 18             	add    esp,0x18
c000bdab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdaf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdb3:	52                   	push   edx
c000bdb4:	50                   	push   eax
c000bdb5:	e8 fc f8 ff ff       	call   c000b6b6 <double_to_fp>
c000bdba:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdbd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdc1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdc4:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc7:	50                   	push   eax
c000bdc8:	50                   	push   eax
c000bdc9:	50                   	push   eax
c000bdca:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdcd:	e8 e1 bb 01 00       	call   c00279b3 <__floatsidf>
c000bdd2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bdda:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdde:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdea:	e8 45 b8 01 00       	call   c0027634 <__divdf3>
c000bdef:	83 c4 1c             	add    esp,0x1c
c000bdf2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdf6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdfa:	52                   	push   edx
c000bdfb:	89 ea                	mov    edx,ebp
c000bdfd:	50                   	push   eax
c000bdfe:	89 d8                	mov    eax,ebx
c000be00:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be03:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be07:	e8 69 ed ff ff       	call   c000ab75 <calc_output_multi>
c000be0c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be0f:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be1a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be1e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be22:	e8 0d b8 01 00       	call   c0027634 <__divdf3>
c000be27:	83 c4 10             	add    esp,0x10
c000be2a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be2e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be3a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be42:	e8 8c ae 01 00       	call   c0026cd3 <__adddf3>
c000be47:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be4b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be4f:	83 c4 28             	add    esp,0x28
c000be52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5a:	e8 71 bf 01 00       	call   c0027dd0 <lrint>
c000be5f:	83 ec 0c             	sub    esp,0xc
c000be62:	50                   	push   eax
c000be63:	e8 4b bb 01 00       	call   c00279b3 <__floatsidf>
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be73:	52                   	push   edx
c000be74:	50                   	push   eax
c000be75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be79:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7d:	e8 a2 b4 01 00       	call   c0027324 <__subdf3>
c000be82:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be86:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8a:	83 c4 20             	add    esp,0x20
c000be8d:	6a 00                	push   0x0
c000be8f:	6a 00                	push   0x0
c000be91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be99:	e8 81 bd 01 00       	call   c0027c1f <__ltdf2>
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	85 c0                	test   eax,eax
c000bea3:	79 20                	jns    c000bec5 <sinc_multichan_vari_process+0x66e>
c000bea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bead:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb5:	e8 19 ae 01 00       	call   c0026cd3 <__adddf3>
c000beba:	83 c4 10             	add    esp,0x10
c000bebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bec1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bec5:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bec8:	83 ec 10             	sub    esp,0x10
c000becb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000becf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bede:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee2:	e8 3d b4 01 00       	call   c0027324 <__subdf3>
c000bee7:	83 c4 18             	add    esp,0x18
c000beea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	e8 d7 be 01 00       	call   c0027dd0 <lrint>
c000bef9:	0f af e8             	imul   ebp,eax
c000befc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf00:	83 c4 10             	add    esp,0x10
c000bf03:	01 e8                	add    eax,ebp
c000bf05:	99                   	cdq    
c000bf06:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf09:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf0c:	e9 fd fb ff ff       	jmp    c000bb0e <sinc_multichan_vari_process+0x2b7>
c000bf11:	83 c4 4c             	add    esp,0x4c
c000bf14:	89 d0                	mov    eax,edx
c000bf16:	5b                   	pop    ebx
c000bf17:	5e                   	pop    esi
c000bf18:	5f                   	pop    edi
c000bf19:	5d                   	pop    ebp
c000bf1a:	c3                   	ret    

c000bf1b <sinc_hex_vari_process>:
c000bf1b:	55                   	push   ebp
c000bf1c:	ba 05 00 00 00       	mov    edx,0x5
c000bf21:	57                   	push   edi
c000bf22:	56                   	push   esi
c000bf23:	53                   	push   ebx
c000bf24:	83 ec 4c             	sub    esp,0x4c
c000bf27:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf2b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf2f:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf32:	85 db                	test   ebx,ebx
c000bf34:	0f 84 9c 06 00 00    	je     c000c5d6 <sinc_hex_vari_process+0x6bb>
c000bf3a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf3d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf40:	0f af c7             	imul   eax,edi
c000bf43:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf46:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf49:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf50:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf57:	0f af c7             	imul   eax,edi
c000bf5a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf5d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf60:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf63:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf6b:	68 00 00 70 3f       	push   0x3f700000
c000bf70:	6a 00                	push   0x0
c000bf72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf7a:	e8 a0 bc 01 00       	call   c0027c1f <__ltdf2>
c000bf7f:	83 c4 10             	add    esp,0x10
c000bf82:	ba 16 00 00 00       	mov    edx,0x16
c000bf87:	85 c0                	test   eax,eax
c000bf89:	0f 88 47 06 00 00    	js     c000c5d6 <sinc_hex_vari_process+0x6bb>
c000bf8f:	68 00 00 70 40       	push   0x40700000
c000bf94:	6a 00                	push   0x0
c000bf96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf9e:	e8 5e bc 01 00       	call   c0027c01 <__gtdf2>
c000bfa3:	83 c4 10             	add    esp,0x10
c000bfa6:	ba 16 00 00 00       	mov    edx,0x16
c000bfab:	85 c0                	test   eax,eax
c000bfad:	0f 8f 23 06 00 00    	jg     c000c5d6 <sinc_hex_vari_process+0x6bb>
c000bfb3:	83 ec 0c             	sub    esp,0xc
c000bfb6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfb9:	e8 f5 b9 01 00       	call   c00279b3 <__floatsidf>
c000bfbe:	83 c4 10             	add    esp,0x10
c000bfc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfc9:	68 00 00 00 40       	push   0x40000000
c000bfce:	6a 00                	push   0x0
c000bfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfd8:	e8 f6 ac 01 00       	call   c0026cd3 <__adddf3>
c000bfdd:	59                   	pop    ecx
c000bfde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfe2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfe6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe9:	e8 c5 b9 01 00       	call   c00279b3 <__floatsidf>
c000bfee:	83 c4 10             	add    esp,0x10
c000bff1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bff5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bff9:	52                   	push   edx
c000bffa:	50                   	push   eax
c000bffb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c003:	e8 2c b6 01 00       	call   c0027634 <__divdf3>
c000c008:	83 c4 10             	add    esp,0x10
c000c00b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c00f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c013:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c016:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c019:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c025:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c031:	e8 cb bb 01 00       	call   c0027c01 <__gtdf2>
c000c036:	83 c4 10             	add    esp,0x10
c000c039:	85 c0                	test   eax,eax
c000c03b:	7e 2d                	jle    c000c06a <sinc_hex_vari_process+0x14f>
c000c03d:	68 00 00 f0 3f       	push   0x3ff00000
c000c042:	6a 00                	push   0x0
c000c044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04c:	e8 ce bb 01 00       	call   c0027c1f <__ltdf2>
c000c051:	83 c4 10             	add    esp,0x10
c000c054:	85 c0                	test   eax,eax
c000c056:	79 4d                	jns    c000c0a5 <sinc_hex_vari_process+0x18a>
c000c058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c064:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c068:	eb 1b                	jmp    c000c085 <sinc_hex_vari_process+0x16a>
c000c06a:	68 00 00 f0 3f       	push   0x3ff00000
c000c06f:	6a 00                	push   0x0
c000c071:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c075:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c079:	e8 a1 bb 01 00       	call   c0027c1f <__ltdf2>
c000c07e:	83 c4 10             	add    esp,0x10
c000c081:	85 c0                	test   eax,eax
c000c083:	79 20                	jns    c000c0a5 <sinc_hex_vari_process+0x18a>
c000c085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c089:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c091:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c095:	e8 9a b5 01 00       	call   c0027634 <__divdf3>
c000c09a:	83 c4 10             	add    esp,0x10
c000c09d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a5:	50                   	push   eax
c000c0a6:	50                   	push   eax
c000c0a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0af:	e8 1c bd 01 00       	call   c0027dd0 <lrint>
c000c0b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0b7:	40                   	inc    eax
c000c0b8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0bc:	0f af c7             	imul   eax,edi
c000c0bf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0c6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ca:	58                   	pop    eax
c000c0cb:	5a                   	pop    edx
c000c0cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d4:	e8 f7 bc 01 00       	call   c0027dd0 <lrint>
c000c0d9:	83 ec 0c             	sub    esp,0xc
c000c0dc:	50                   	push   eax
c000c0dd:	e8 d1 b8 01 00       	call   c00279b3 <__floatsidf>
c000c0e2:	83 c4 10             	add    esp,0x10
c000c0e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0ed:	52                   	push   edx
c000c0ee:	50                   	push   eax
c000c0ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f7:	e8 28 b2 01 00       	call   c0027324 <__subdf3>
c000c0fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c100:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c104:	83 c4 20             	add    esp,0x20
c000c107:	6a 00                	push   0x0
c000c109:	6a 00                	push   0x0
c000c10b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c10f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c113:	e8 07 bb 01 00       	call   c0027c1f <__ltdf2>
c000c118:	83 c4 10             	add    esp,0x10
c000c11b:	85 c0                	test   eax,eax
c000c11d:	79 1f                	jns    c000c13e <sinc_hex_vari_process+0x223>
c000c11f:	68 00 00 f0 3f       	push   0x3ff00000
c000c124:	6a 00                	push   0x0
c000c126:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c12a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c12e:	e8 a0 ab 01 00       	call   c0026cd3 <__adddf3>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c13a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c13e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c141:	83 ec 10             	sub    esp,0x10
c000c144:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c148:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c14b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c153:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c157:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c15b:	e8 c4 b1 01 00       	call   c0027324 <__subdf3>
c000c160:	83 c4 18             	add    esp,0x18
c000c163:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c167:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c16b:	52                   	push   edx
c000c16c:	50                   	push   eax
c000c16d:	e8 5e bc 01 00       	call   c0027dd0 <lrint>
c000c172:	0f af f8             	imul   edi,eax
c000c175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c179:	01 f8                	add    eax,edi
c000c17b:	99                   	cdq    
c000c17c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c17f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c182:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c186:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c18a:	68 00 00 f0 3f       	push   0x3ff00000
c000c18f:	6a 00                	push   0x0
c000c191:	e8 9e b4 01 00       	call   c0027634 <__divdf3>
c000c196:	83 c4 10             	add    esp,0x10
c000c199:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c19d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1a1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c1a6:	68 23 42 92 0c       	push   0xc924223
c000c1ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b3:	e8 1b ab 01 00       	call   c0026cd3 <__adddf3>
c000c1b8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1bc:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1c0:	83 c4 20             	add    esp,0x20
c000c1c3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1cb:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1d3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1d6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1d9:	7d 50                	jge    c000c22b <sinc_hex_vari_process+0x310>
c000c1db:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1de:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e1:	01 c8                	add    eax,ecx
c000c1e3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1e6:	99                   	cdq    
c000c1e7:	f7 f9                	idiv   ecx
c000c1e9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1ed:	7d 0c                	jge    c000c1fb <sinc_hex_vari_process+0x2e0>
c000c1ef:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1f2:	85 ff                	test   edi,edi
c000c1f4:	79 6c                	jns    c000c262 <sinc_hex_vari_process+0x347>
c000c1f6:	e9 e7 00 00 00       	jmp    c000c2e2 <sinc_hex_vari_process+0x3c7>
c000c1fb:	50                   	push   eax
c000c1fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c200:	56                   	push   esi
c000c201:	53                   	push   ebx
c000c202:	e8 d6 f4 ff ff       	call   c000b6dd <prepare_data>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 c2                	mov    edx,eax
c000c20c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c20f:	85 c0                	test   eax,eax
c000c211:	0f 85 bf 03 00 00    	jne    c000c5d6 <sinc_hex_vari_process+0x6bb>
c000c217:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c21a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c21d:	01 c8                	add    eax,ecx
c000c21f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c222:	99                   	cdq    
c000c223:	f7 f9                	idiv   ecx
c000c225:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c229:	7c c4                	jl     c000c1ef <sinc_hex_vari_process+0x2d4>
c000c22b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c22f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c233:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c236:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c241:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c244:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c247:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c24a:	99                   	cdq    
c000c24b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c24e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c251:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c254:	99                   	cdq    
c000c255:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c258:	31 d2                	xor    edx,edx
c000c25a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c25d:	e9 74 03 00 00       	jmp    c000c5d6 <sinc_hex_vari_process+0x6bb>
c000c262:	83 ec 0c             	sub    esp,0xc
c000c265:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c268:	e8 46 b7 01 00       	call   c00279b3 <__floatsidf>
c000c26d:	83 c4 10             	add    esp,0x10
c000c270:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c274:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c278:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c27c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c280:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c284:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c288:	e8 46 aa 01 00       	call   c0026cd3 <__adddf3>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c294:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c298:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c29c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a8:	e8 26 aa 01 00       	call   c0026cd3 <__adddf3>
c000c2ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2b0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2b4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2b8:	e8 f6 b6 01 00       	call   c00279b3 <__floatsidf>
c000c2bd:	83 c4 10             	add    esp,0x10
c000c2c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c8:	52                   	push   edx
c000c2c9:	50                   	push   eax
c000c2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d2:	e8 46 b9 01 00       	call   c0027c1d <__gedf2>
c000c2d7:	83 c4 10             	add    esp,0x10
c000c2da:	85 c0                	test   eax,eax
c000c2dc:	0f 89 49 ff ff ff    	jns    c000c22b <sinc_hex_vari_process+0x310>
c000c2e2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2e6:	0f 8e ef 00 00 00    	jle    c000c3db <sinc_hex_vari_process+0x4c0>
c000c2ec:	83 ec 10             	sub    esp,0x10
c000c2ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2f2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2fb:	e8 24 b0 01 00       	call   c0027324 <__subdf3>
c000c300:	83 c4 18             	add    esp,0x18
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c30b:	52                   	push   edx
c000c30c:	50                   	push   eax
c000c30d:	e8 9e ba 01 00       	call   c0027db0 <fabs>
c000c312:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c316:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c31a:	83 c4 10             	add    esp,0x10
c000c31d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c322:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c32b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c32f:	e8 cd b8 01 00       	call   c0027c01 <__gtdf2>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	85 c0                	test   eax,eax
c000c339:	0f 8e 9c 00 00 00    	jle    c000c3db <sinc_hex_vari_process+0x4c0>
c000c33f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c342:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c345:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c349:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c34d:	52                   	push   edx
c000c34e:	50                   	push   eax
c000c34f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c352:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c355:	e8 ca af 01 00       	call   c0027324 <__subdf3>
c000c35a:	59                   	pop    ecx
c000c35b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c35f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c363:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c366:	e8 48 b6 01 00       	call   c00279b3 <__floatsidf>
c000c36b:	83 c4 10             	add    esp,0x10
c000c36e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c372:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c376:	52                   	push   edx
c000c377:	50                   	push   eax
c000c378:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c37c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c380:	e8 cb af 01 00       	call   c0027350 <__muldf3>
c000c385:	5f                   	pop    edi
c000c386:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c38a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c38e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c391:	e8 1d b6 01 00       	call   c00279b3 <__floatsidf>
c000c396:	83 c4 10             	add    esp,0x10
c000c399:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c39d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3a1:	52                   	push   edx
c000c3a2:	50                   	push   eax
c000c3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3ab:	e8 84 b2 01 00       	call   c0027634 <__divdf3>
c000c3b0:	83 c4 10             	add    esp,0x10
c000c3b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3cb:	e8 03 a9 01 00       	call   c0026cd3 <__adddf3>
c000c3d0:	83 c4 10             	add    esp,0x10
c000c3d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3db:	83 ec 0c             	sub    esp,0xc
c000c3de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3e1:	e8 cd b5 01 00       	call   c00279b3 <__floatsidf>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c401:	e8 19 b8 01 00       	call   c0027c1f <__ltdf2>
c000c406:	83 c4 10             	add    esp,0x10
c000c409:	85 c0                	test   eax,eax
c000c40b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c40f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c413:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c417:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c41b:	78 10                	js     c000c42d <sinc_hex_vari_process+0x512>
c000c41d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c421:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c425:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c42d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c431:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c435:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c439:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43d:	e8 0e af 01 00       	call   c0027350 <__muldf3>
c000c442:	59                   	pop    ecx
c000c443:	5f                   	pop    edi
c000c444:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c448:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c450:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c454:	e8 5d f2 ff ff       	call   c000b6b6 <double_to_fp>
c000c459:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45d:	89 c7                	mov    edi,eax
c000c45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c463:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c467:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c46b:	e8 e0 ae 01 00       	call   c0027350 <__muldf3>
c000c470:	83 c4 18             	add    esp,0x18
c000c473:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c477:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c47b:	52                   	push   edx
c000c47c:	50                   	push   eax
c000c47d:	e8 34 f2 ff ff       	call   c000b6b6 <double_to_fp>
c000c482:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c485:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c489:	83 c4 0c             	add    esp,0xc
c000c48c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c48f:	8d 04 90             	lea    eax,[eax+edx*4]
c000c492:	50                   	push   eax
c000c493:	50                   	push   eax
c000c494:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c497:	e8 17 b5 01 00       	call   c00279b3 <__floatsidf>
c000c49c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4a0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c4a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b4:	e8 7b b1 01 00       	call   c0027634 <__divdf3>
c000c4b9:	83 c4 18             	add    esp,0x18
c000c4bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c4:	52                   	push   edx
c000c4c5:	89 fa                	mov    edx,edi
c000c4c7:	50                   	push   eax
c000c4c8:	89 d8                	mov    eax,ebx
c000c4ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4ce:	e8 50 de ff ff       	call   c000a323 <calc_output_hex>
c000c4d3:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e7:	e8 48 b1 01 00       	call   c0027634 <__divdf3>
c000c4ec:	83 c4 10             	add    esp,0x10
c000c4ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	e8 c7 a7 01 00       	call   c0026cd3 <__adddf3>
c000c50c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c510:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c514:	83 c4 18             	add    esp,0x18
c000c517:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c51f:	e8 ac b8 01 00       	call   c0027dd0 <lrint>
c000c524:	83 ec 0c             	sub    esp,0xc
c000c527:	50                   	push   eax
c000c528:	e8 86 b4 01 00       	call   c00279b3 <__floatsidf>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c538:	52                   	push   edx
c000c539:	50                   	push   eax
c000c53a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c53e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c542:	e8 dd ad 01 00       	call   c0027324 <__subdf3>
c000c547:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c54b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c54f:	83 c4 20             	add    esp,0x20
c000c552:	6a 00                	push   0x0
c000c554:	6a 00                	push   0x0
c000c556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c55e:	e8 bc b6 01 00       	call   c0027c1f <__ltdf2>
c000c563:	83 c4 10             	add    esp,0x10
c000c566:	85 c0                	test   eax,eax
c000c568:	79 20                	jns    c000c58a <sinc_hex_vari_process+0x66f>
c000c56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c572:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c576:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c57a:	e8 54 a7 01 00       	call   c0026cd3 <__adddf3>
c000c57f:	83 c4 10             	add    esp,0x10
c000c582:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c586:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c58a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c58d:	83 ec 10             	sub    esp,0x10
c000c590:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c594:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a7:	e8 78 ad 01 00       	call   c0027324 <__subdf3>
c000c5ac:	83 c4 18             	add    esp,0x18
c000c5af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b7:	52                   	push   edx
c000c5b8:	50                   	push   eax
c000c5b9:	e8 12 b8 01 00       	call   c0027dd0 <lrint>
c000c5be:	0f af f8             	imul   edi,eax
c000c5c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	01 f8                	add    eax,edi
c000c5ca:	99                   	cdq    
c000c5cb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5d1:	e9 fd fb ff ff       	jmp    c000c1d3 <sinc_hex_vari_process+0x2b8>
c000c5d6:	83 c4 4c             	add    esp,0x4c
c000c5d9:	89 d0                	mov    eax,edx
c000c5db:	5b                   	pop    ebx
c000c5dc:	5e                   	pop    esi
c000c5dd:	5f                   	pop    edi
c000c5de:	5d                   	pop    ebp
c000c5df:	c3                   	ret    

c000c5e0 <sinc_quad_vari_process>:
c000c5e0:	55                   	push   ebp
c000c5e1:	ba 05 00 00 00       	mov    edx,0x5
c000c5e6:	57                   	push   edi
c000c5e7:	56                   	push   esi
c000c5e8:	53                   	push   ebx
c000c5e9:	83 ec 4c             	sub    esp,0x4c
c000c5ec:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5f0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5f4:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5f7:	85 db                	test   ebx,ebx
c000c5f9:	0f 84 9c 06 00 00    	je     c000cc9b <sinc_quad_vari_process+0x6bb>
c000c5ff:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c602:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c605:	0f af c7             	imul   eax,edi
c000c608:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c60b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c60e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c615:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c61c:	0f af c7             	imul   eax,edi
c000c61f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c622:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c625:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c628:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c62c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c630:	68 00 00 70 3f       	push   0x3f700000
c000c635:	6a 00                	push   0x0
c000c637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63f:	e8 db b5 01 00       	call   c0027c1f <__ltdf2>
c000c644:	83 c4 10             	add    esp,0x10
c000c647:	ba 16 00 00 00       	mov    edx,0x16
c000c64c:	85 c0                	test   eax,eax
c000c64e:	0f 88 47 06 00 00    	js     c000cc9b <sinc_quad_vari_process+0x6bb>
c000c654:	68 00 00 70 40       	push   0x40700000
c000c659:	6a 00                	push   0x0
c000c65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c663:	e8 99 b5 01 00       	call   c0027c01 <__gtdf2>
c000c668:	83 c4 10             	add    esp,0x10
c000c66b:	ba 16 00 00 00       	mov    edx,0x16
c000c670:	85 c0                	test   eax,eax
c000c672:	0f 8f 23 06 00 00    	jg     c000cc9b <sinc_quad_vari_process+0x6bb>
c000c678:	83 ec 0c             	sub    esp,0xc
c000c67b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c67e:	e8 30 b3 01 00       	call   c00279b3 <__floatsidf>
c000c683:	83 c4 10             	add    esp,0x10
c000c686:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c68a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c68e:	68 00 00 00 40       	push   0x40000000
c000c693:	6a 00                	push   0x0
c000c695:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69d:	e8 31 a6 01 00       	call   c0026cd3 <__adddf3>
c000c6a2:	59                   	pop    ecx
c000c6a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6a7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6ab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6ae:	e8 00 b3 01 00       	call   c00279b3 <__floatsidf>
c000c6b3:	83 c4 10             	add    esp,0x10
c000c6b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6be:	52                   	push   edx
c000c6bf:	50                   	push   eax
c000c6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c8:	e8 67 af 01 00       	call   c0027634 <__divdf3>
c000c6cd:	83 c4 10             	add    esp,0x10
c000c6d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6db:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f6:	e8 06 b5 01 00       	call   c0027c01 <__gtdf2>
c000c6fb:	83 c4 10             	add    esp,0x10
c000c6fe:	85 c0                	test   eax,eax
c000c700:	7e 2d                	jle    c000c72f <sinc_quad_vari_process+0x14f>
c000c702:	68 00 00 f0 3f       	push   0x3ff00000
c000c707:	6a 00                	push   0x0
c000c709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c711:	e8 09 b5 01 00       	call   c0027c1f <__ltdf2>
c000c716:	83 c4 10             	add    esp,0x10
c000c719:	85 c0                	test   eax,eax
c000c71b:	79 4d                	jns    c000c76a <sinc_quad_vari_process+0x18a>
c000c71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c721:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c729:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c72d:	eb 1b                	jmp    c000c74a <sinc_quad_vari_process+0x16a>
c000c72f:	68 00 00 f0 3f       	push   0x3ff00000
c000c734:	6a 00                	push   0x0
c000c736:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73e:	e8 dc b4 01 00       	call   c0027c1f <__ltdf2>
c000c743:	83 c4 10             	add    esp,0x10
c000c746:	85 c0                	test   eax,eax
c000c748:	79 20                	jns    c000c76a <sinc_quad_vari_process+0x18a>
c000c74a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c74e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c752:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c756:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75a:	e8 d5 ae 01 00       	call   c0027634 <__divdf3>
c000c75f:	83 c4 10             	add    esp,0x10
c000c762:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c766:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76a:	50                   	push   eax
c000c76b:	50                   	push   eax
c000c76c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c770:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c774:	e8 57 b6 01 00       	call   c0027dd0 <lrint>
c000c779:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c77c:	40                   	inc    eax
c000c77d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c781:	0f af c7             	imul   eax,edi
c000c784:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78f:	58                   	pop    eax
c000c790:	5a                   	pop    edx
c000c791:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c795:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c799:	e8 32 b6 01 00       	call   c0027dd0 <lrint>
c000c79e:	83 ec 0c             	sub    esp,0xc
c000c7a1:	50                   	push   eax
c000c7a2:	e8 0c b2 01 00       	call   c00279b3 <__floatsidf>
c000c7a7:	83 c4 10             	add    esp,0x10
c000c7aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b2:	52                   	push   edx
c000c7b3:	50                   	push   eax
c000c7b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7bc:	e8 63 ab 01 00       	call   c0027324 <__subdf3>
c000c7c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7c9:	83 c4 20             	add    esp,0x20
c000c7cc:	6a 00                	push   0x0
c000c7ce:	6a 00                	push   0x0
c000c7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d8:	e8 42 b4 01 00       	call   c0027c1f <__ltdf2>
c000c7dd:	83 c4 10             	add    esp,0x10
c000c7e0:	85 c0                	test   eax,eax
c000c7e2:	79 1f                	jns    c000c803 <sinc_quad_vari_process+0x223>
c000c7e4:	68 00 00 f0 3f       	push   0x3ff00000
c000c7e9:	6a 00                	push   0x0
c000c7eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f3:	e8 db a4 01 00       	call   c0026cd3 <__adddf3>
c000c7f8:	83 c4 10             	add    esp,0x10
c000c7fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c803:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c806:	83 ec 10             	sub    esp,0x10
c000c809:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c80d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c818:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c81c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c820:	e8 ff aa 01 00       	call   c0027324 <__subdf3>
c000c825:	83 c4 18             	add    esp,0x18
c000c828:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c82c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c830:	52                   	push   edx
c000c831:	50                   	push   eax
c000c832:	e8 99 b5 01 00       	call   c0027dd0 <lrint>
c000c837:	0f af f8             	imul   edi,eax
c000c83a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c83e:	01 f8                	add    eax,edi
c000c840:	99                   	cdq    
c000c841:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c844:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c847:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84f:	68 00 00 f0 3f       	push   0x3ff00000
c000c854:	6a 00                	push   0x0
c000c856:	e8 d9 ad 01 00       	call   c0027634 <__divdf3>
c000c85b:	83 c4 10             	add    esp,0x10
c000c85e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c862:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c866:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c86b:	68 23 42 92 0c       	push   0xc924223
c000c870:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c874:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c878:	e8 56 a4 01 00       	call   c0026cd3 <__adddf3>
c000c87d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c881:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c885:	83 c4 20             	add    esp,0x20
c000c888:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c890:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c898:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c89b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c89e:	7d 50                	jge    c000c8f0 <sinc_quad_vari_process+0x310>
c000c8a0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8a6:	01 c8                	add    eax,ecx
c000c8a8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8ab:	99                   	cdq    
c000c8ac:	f7 f9                	idiv   ecx
c000c8ae:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b2:	7d 0c                	jge    c000c8c0 <sinc_quad_vari_process+0x2e0>
c000c8b4:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8b7:	85 ff                	test   edi,edi
c000c8b9:	79 6c                	jns    c000c927 <sinc_quad_vari_process+0x347>
c000c8bb:	e9 e7 00 00 00       	jmp    c000c9a7 <sinc_quad_vari_process+0x3c7>
c000c8c0:	50                   	push   eax
c000c8c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c5:	56                   	push   esi
c000c8c6:	53                   	push   ebx
c000c8c7:	e8 11 ee ff ff       	call   c000b6dd <prepare_data>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 c2                	mov    edx,eax
c000c8d1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8d4:	85 c0                	test   eax,eax
c000c8d6:	0f 85 bf 03 00 00    	jne    c000cc9b <sinc_quad_vari_process+0x6bb>
c000c8dc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8df:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8e2:	01 c8                	add    eax,ecx
c000c8e4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8e7:	99                   	cdq    
c000c8e8:	f7 f9                	idiv   ecx
c000c8ea:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8ee:	7c c4                	jl     c000c8b4 <sinc_quad_vari_process+0x2d4>
c000c8f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8f8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8fb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c902:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c906:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c909:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c90c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c90f:	99                   	cdq    
c000c910:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c913:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c916:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c919:	99                   	cdq    
c000c91a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c91d:	31 d2                	xor    edx,edx
c000c91f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c922:	e9 74 03 00 00       	jmp    c000cc9b <sinc_quad_vari_process+0x6bb>
c000c927:	83 ec 0c             	sub    esp,0xc
c000c92a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c92d:	e8 81 b0 01 00       	call   c00279b3 <__floatsidf>
c000c932:	83 c4 10             	add    esp,0x10
c000c935:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c939:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c93d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c941:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c945:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c949:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94d:	e8 81 a3 01 00       	call   c0026cd3 <__adddf3>
c000c952:	83 c4 10             	add    esp,0x10
c000c955:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c959:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c961:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c965:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c969:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96d:	e8 61 a3 01 00       	call   c0026cd3 <__adddf3>
c000c972:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c975:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c979:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c97d:	e8 31 b0 01 00       	call   c00279b3 <__floatsidf>
c000c982:	83 c4 10             	add    esp,0x10
c000c985:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c989:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98d:	52                   	push   edx
c000c98e:	50                   	push   eax
c000c98f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c993:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c997:	e8 81 b2 01 00       	call   c0027c1d <__gedf2>
c000c99c:	83 c4 10             	add    esp,0x10
c000c99f:	85 c0                	test   eax,eax
c000c9a1:	0f 89 49 ff ff ff    	jns    c000c8f0 <sinc_quad_vari_process+0x310>
c000c9a7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9ab:	0f 8e ef 00 00 00    	jle    c000caa0 <sinc_quad_vari_process+0x4c0>
c000c9b1:	83 ec 10             	sub    esp,0x10
c000c9b4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9b7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9ba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9bd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9c0:	e8 5f a9 01 00       	call   c0027324 <__subdf3>
c000c9c5:	83 c4 18             	add    esp,0x18
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9d0:	52                   	push   edx
c000c9d1:	50                   	push   eax
c000c9d2:	e8 d9 b3 01 00       	call   c0027db0 <fabs>
c000c9d7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9df:	83 c4 10             	add    esp,0x10
c000c9e2:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9e7:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f4:	e8 08 b2 01 00       	call   c0027c01 <__gtdf2>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	85 c0                	test   eax,eax
c000c9fe:	0f 8e 9c 00 00 00    	jle    c000caa0 <sinc_quad_vari_process+0x4c0>
c000ca04:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca12:	52                   	push   edx
c000ca13:	50                   	push   eax
c000ca14:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca17:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca1a:	e8 05 a9 01 00       	call   c0027324 <__subdf3>
c000ca1f:	59                   	pop    ecx
c000ca20:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca24:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca28:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca2b:	e8 83 af 01 00       	call   c00279b3 <__floatsidf>
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca37:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca3b:	52                   	push   edx
c000ca3c:	50                   	push   eax
c000ca3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca45:	e8 06 a9 01 00       	call   c0027350 <__muldf3>
c000ca4a:	5f                   	pop    edi
c000ca4b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca4f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca53:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca56:	e8 58 af 01 00       	call   c00279b3 <__floatsidf>
c000ca5b:	83 c4 10             	add    esp,0x10
c000ca5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca66:	52                   	push   edx
c000ca67:	50                   	push   eax
c000ca68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca70:	e8 bf ab 01 00       	call   c0027634 <__divdf3>
c000ca75:	83 c4 10             	add    esp,0x10
c000ca78:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca7c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca90:	e8 3e a2 01 00       	call   c0026cd3 <__adddf3>
c000ca95:	83 c4 10             	add    esp,0x10
c000ca98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000caa0:	83 ec 0c             	sub    esp,0xc
c000caa3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caa6:	e8 08 af 01 00       	call   c00279b3 <__floatsidf>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cab2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac6:	e8 54 b1 01 00       	call   c0027c1f <__ltdf2>
c000cacb:	83 c4 10             	add    esp,0x10
c000cace:	85 c0                	test   eax,eax
c000cad0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cad4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cad8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cadc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cae0:	78 10                	js     c000caf2 <sinc_quad_vari_process+0x512>
c000cae2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cae6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caf2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cafa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cafe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb02:	e8 49 a8 01 00       	call   c0027350 <__muldf3>
c000cb07:	59                   	pop    ecx
c000cb08:	5f                   	pop    edi
c000cb09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb19:	e8 98 eb ff ff       	call   c000b6b6 <double_to_fp>
c000cb1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb22:	89 c7                	mov    edi,eax
c000cb24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb30:	e8 1b a8 01 00       	call   c0027350 <__muldf3>
c000cb35:	83 c4 18             	add    esp,0x18
c000cb38:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb3c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb40:	52                   	push   edx
c000cb41:	50                   	push   eax
c000cb42:	e8 6f eb ff ff       	call   c000b6b6 <double_to_fp>
c000cb47:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb4e:	83 c4 0c             	add    esp,0xc
c000cb51:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb54:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb57:	50                   	push   eax
c000cb58:	50                   	push   eax
c000cb59:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5c:	e8 52 ae 01 00       	call   c00279b3 <__floatsidf>
c000cb61:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb65:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb79:	e8 b6 aa 01 00       	call   c0027634 <__divdf3>
c000cb7e:	83 c4 18             	add    esp,0x18
c000cb81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb85:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb89:	52                   	push   edx
c000cb8a:	89 fa                	mov    edx,edi
c000cb8c:	50                   	push   eax
c000cb8d:	89 d8                	mov    eax,ebx
c000cb8f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb93:	e8 a5 d1 ff ff       	call   c0009d3d <calc_output_quad>
c000cb98:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cba8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbac:	e8 83 aa 01 00       	call   c0027634 <__divdf3>
c000cbb1:	83 c4 10             	add    esp,0x10
c000cbb4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbb8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	e8 02 a1 01 00       	call   c0026cd3 <__adddf3>
c000cbd1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbd5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbd9:	83 c4 18             	add    esp,0x18
c000cbdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe4:	e8 e7 b1 01 00       	call   c0027dd0 <lrint>
c000cbe9:	83 ec 0c             	sub    esp,0xc
c000cbec:	50                   	push   eax
c000cbed:	e8 c1 ad 01 00       	call   c00279b3 <__floatsidf>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbf9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbfd:	52                   	push   edx
c000cbfe:	50                   	push   eax
c000cbff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc07:	e8 18 a7 01 00       	call   c0027324 <__subdf3>
c000cc0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc10:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc14:	83 c4 20             	add    esp,0x20
c000cc17:	6a 00                	push   0x0
c000cc19:	6a 00                	push   0x0
c000cc1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc23:	e8 f7 af 01 00       	call   c0027c1f <__ltdf2>
c000cc28:	83 c4 10             	add    esp,0x10
c000cc2b:	85 c0                	test   eax,eax
c000cc2d:	79 20                	jns    c000cc4f <sinc_quad_vari_process+0x66f>
c000cc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3f:	e8 8f a0 01 00       	call   c0026cd3 <__adddf3>
c000cc44:	83 c4 10             	add    esp,0x10
c000cc47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc4f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc52:	83 ec 10             	sub    esp,0x10
c000cc55:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc59:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6c:	e8 b3 a6 01 00       	call   c0027324 <__subdf3>
c000cc71:	83 c4 18             	add    esp,0x18
c000cc74:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc78:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7c:	52                   	push   edx
c000cc7d:	50                   	push   eax
c000cc7e:	e8 4d b1 01 00       	call   c0027dd0 <lrint>
c000cc83:	0f af f8             	imul   edi,eax
c000cc86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	01 f8                	add    eax,edi
c000cc8f:	99                   	cdq    
c000cc90:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc93:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc96:	e9 fd fb ff ff       	jmp    c000c898 <sinc_quad_vari_process+0x2b8>
c000cc9b:	83 c4 4c             	add    esp,0x4c
c000cc9e:	89 d0                	mov    eax,edx
c000cca0:	5b                   	pop    ebx
c000cca1:	5e                   	pop    esi
c000cca2:	5f                   	pop    edi
c000cca3:	5d                   	pop    ebp
c000cca4:	c3                   	ret    

c000cca5 <sinc_stereo_vari_process>:
c000cca5:	55                   	push   ebp
c000cca6:	ba 05 00 00 00       	mov    edx,0x5
c000ccab:	57                   	push   edi
c000ccac:	56                   	push   esi
c000ccad:	53                   	push   ebx
c000ccae:	83 ec 4c             	sub    esp,0x4c
c000ccb1:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccb5:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ccb9:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccbc:	85 db                	test   ebx,ebx
c000ccbe:	0f 84 9c 06 00 00    	je     c000d360 <sinc_stereo_vari_process+0x6bb>
c000ccc4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccc7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ccca:	0f af c7             	imul   eax,edi
c000cccd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ccd0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccd3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccda:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cce1:	0f af c7             	imul   eax,edi
c000cce4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cce7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cced:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccf1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf5:	68 00 00 70 3f       	push   0x3f700000
c000ccfa:	6a 00                	push   0x0
c000ccfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd04:	e8 16 af 01 00       	call   c0027c1f <__ltdf2>
c000cd09:	83 c4 10             	add    esp,0x10
c000cd0c:	ba 16 00 00 00       	mov    edx,0x16
c000cd11:	85 c0                	test   eax,eax
c000cd13:	0f 88 47 06 00 00    	js     c000d360 <sinc_stereo_vari_process+0x6bb>
c000cd19:	68 00 00 70 40       	push   0x40700000
c000cd1e:	6a 00                	push   0x0
c000cd20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd28:	e8 d4 ae 01 00       	call   c0027c01 <__gtdf2>
c000cd2d:	83 c4 10             	add    esp,0x10
c000cd30:	ba 16 00 00 00       	mov    edx,0x16
c000cd35:	85 c0                	test   eax,eax
c000cd37:	0f 8f 23 06 00 00    	jg     c000d360 <sinc_stereo_vari_process+0x6bb>
c000cd3d:	83 ec 0c             	sub    esp,0xc
c000cd40:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd43:	e8 6b ac 01 00       	call   c00279b3 <__floatsidf>
c000cd48:	83 c4 10             	add    esp,0x10
c000cd4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd53:	68 00 00 00 40       	push   0x40000000
c000cd58:	6a 00                	push   0x0
c000cd5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd62:	e8 6c 9f 01 00       	call   c0026cd3 <__adddf3>
c000cd67:	59                   	pop    ecx
c000cd68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd6c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd70:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd73:	e8 3b ac 01 00       	call   c00279b3 <__floatsidf>
c000cd78:	83 c4 10             	add    esp,0x10
c000cd7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd83:	52                   	push   edx
c000cd84:	50                   	push   eax
c000cd85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8d:	e8 a2 a8 01 00       	call   c0027634 <__divdf3>
c000cd92:	83 c4 10             	add    esp,0x10
c000cd95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd9d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cda0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cda3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbb:	e8 41 ae 01 00       	call   c0027c01 <__gtdf2>
c000cdc0:	83 c4 10             	add    esp,0x10
c000cdc3:	85 c0                	test   eax,eax
c000cdc5:	7e 2d                	jle    c000cdf4 <sinc_stereo_vari_process+0x14f>
c000cdc7:	68 00 00 f0 3f       	push   0x3ff00000
c000cdcc:	6a 00                	push   0x0
c000cdce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd6:	e8 44 ae 01 00       	call   c0027c1f <__ltdf2>
c000cddb:	83 c4 10             	add    esp,0x10
c000cdde:	85 c0                	test   eax,eax
c000cde0:	79 4d                	jns    c000ce2f <sinc_stereo_vari_process+0x18a>
c000cde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdf2:	eb 1b                	jmp    c000ce0f <sinc_stereo_vari_process+0x16a>
c000cdf4:	68 00 00 f0 3f       	push   0x3ff00000
c000cdf9:	6a 00                	push   0x0
c000cdfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce03:	e8 17 ae 01 00       	call   c0027c1f <__ltdf2>
c000ce08:	83 c4 10             	add    esp,0x10
c000ce0b:	85 c0                	test   eax,eax
c000ce0d:	79 20                	jns    c000ce2f <sinc_stereo_vari_process+0x18a>
c000ce0f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce1f:	e8 10 a8 01 00       	call   c0027634 <__divdf3>
c000ce24:	83 c4 10             	add    esp,0x10
c000ce27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce2f:	50                   	push   eax
c000ce30:	50                   	push   eax
c000ce31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce39:	e8 92 af 01 00       	call   c0027dd0 <lrint>
c000ce3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce41:	40                   	inc    eax
c000ce42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce46:	0f af c7             	imul   eax,edi
c000ce49:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce54:	58                   	pop    eax
c000ce55:	5a                   	pop    edx
c000ce56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce5e:	e8 6d af 01 00       	call   c0027dd0 <lrint>
c000ce63:	83 ec 0c             	sub    esp,0xc
c000ce66:	50                   	push   eax
c000ce67:	e8 47 ab 01 00       	call   c00279b3 <__floatsidf>
c000ce6c:	83 c4 10             	add    esp,0x10
c000ce6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce77:	52                   	push   edx
c000ce78:	50                   	push   eax
c000ce79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce81:	e8 9e a4 01 00       	call   c0027324 <__subdf3>
c000ce86:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce8e:	83 c4 20             	add    esp,0x20
c000ce91:	6a 00                	push   0x0
c000ce93:	6a 00                	push   0x0
c000ce95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9d:	e8 7d ad 01 00       	call   c0027c1f <__ltdf2>
c000cea2:	83 c4 10             	add    esp,0x10
c000cea5:	85 c0                	test   eax,eax
c000cea7:	79 1f                	jns    c000cec8 <sinc_stereo_vari_process+0x223>
c000cea9:	68 00 00 f0 3f       	push   0x3ff00000
c000ceae:	6a 00                	push   0x0
c000ceb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb8:	e8 16 9e 01 00       	call   c0026cd3 <__adddf3>
c000cebd:	83 c4 10             	add    esp,0x10
c000cec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cec8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cecb:	83 ec 10             	sub    esp,0x10
c000cece:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ced2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ced5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee5:	e8 3a a4 01 00       	call   c0027324 <__subdf3>
c000ceea:	83 c4 18             	add    esp,0x18
c000ceed:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cef1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cef5:	52                   	push   edx
c000cef6:	50                   	push   eax
c000cef7:	e8 d4 ae 01 00       	call   c0027dd0 <lrint>
c000cefc:	0f af f8             	imul   edi,eax
c000ceff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf03:	01 f8                	add    eax,edi
c000cf05:	99                   	cdq    
c000cf06:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cf09:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf14:	68 00 00 f0 3f       	push   0x3ff00000
c000cf19:	6a 00                	push   0x0
c000cf1b:	e8 14 a7 01 00       	call   c0027634 <__divdf3>
c000cf20:	83 c4 10             	add    esp,0x10
c000cf23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf2b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf30:	68 23 42 92 0c       	push   0xc924223
c000cf35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3d:	e8 91 9d 01 00       	call   c0026cd3 <__adddf3>
c000cf42:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf46:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf4a:	83 c4 20             	add    esp,0x20
c000cf4d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf55:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf5d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf60:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf63:	7d 50                	jge    c000cfb5 <sinc_stereo_vari_process+0x310>
c000cf65:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf68:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf6b:	01 c8                	add    eax,ecx
c000cf6d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf70:	99                   	cdq    
c000cf71:	f7 f9                	idiv   ecx
c000cf73:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf77:	7d 0c                	jge    c000cf85 <sinc_stereo_vari_process+0x2e0>
c000cf79:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf7c:	85 ff                	test   edi,edi
c000cf7e:	79 6c                	jns    c000cfec <sinc_stereo_vari_process+0x347>
c000cf80:	e9 e7 00 00 00       	jmp    c000d06c <sinc_stereo_vari_process+0x3c7>
c000cf85:	50                   	push   eax
c000cf86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8a:	56                   	push   esi
c000cf8b:	53                   	push   ebx
c000cf8c:	e8 4c e7 ff ff       	call   c000b6dd <prepare_data>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 c2                	mov    edx,eax
c000cf96:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf99:	85 c0                	test   eax,eax
c000cf9b:	0f 85 bf 03 00 00    	jne    c000d360 <sinc_stereo_vari_process+0x6bb>
c000cfa1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cfa4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cfa7:	01 c8                	add    eax,ecx
c000cfa9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfac:	99                   	cdq    
c000cfad:	f7 f9                	idiv   ecx
c000cfaf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfb3:	7c c4                	jl     c000cf79 <sinc_stereo_vari_process+0x2d4>
c000cfb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfbd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfc0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfcb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfd1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfd4:	99                   	cdq    
c000cfd5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfd8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfdb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfde:	99                   	cdq    
c000cfdf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfe2:	31 d2                	xor    edx,edx
c000cfe4:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfe7:	e9 74 03 00 00       	jmp    c000d360 <sinc_stereo_vari_process+0x6bb>
c000cfec:	83 ec 0c             	sub    esp,0xc
c000cfef:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cff2:	e8 bc a9 01 00       	call   c00279b3 <__floatsidf>
c000cff7:	83 c4 10             	add    esp,0x10
c000cffa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cffe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d002:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d006:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d00e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d012:	e8 bc 9c 01 00       	call   c0026cd3 <__adddf3>
c000d017:	83 c4 10             	add    esp,0x10
c000d01a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d01e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d022:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d026:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d02a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d02e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d032:	e8 9c 9c 01 00       	call   c0026cd3 <__adddf3>
c000d037:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d03a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d03e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d042:	e8 6c a9 01 00       	call   c00279b3 <__floatsidf>
c000d047:	83 c4 10             	add    esp,0x10
c000d04a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d052:	52                   	push   edx
c000d053:	50                   	push   eax
c000d054:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d058:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05c:	e8 bc ab 01 00       	call   c0027c1d <__gedf2>
c000d061:	83 c4 10             	add    esp,0x10
c000d064:	85 c0                	test   eax,eax
c000d066:	0f 89 49 ff ff ff    	jns    c000cfb5 <sinc_stereo_vari_process+0x310>
c000d06c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d070:	0f 8e ef 00 00 00    	jle    c000d165 <sinc_stereo_vari_process+0x4c0>
c000d076:	83 ec 10             	sub    esp,0x10
c000d079:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d07c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d07f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d082:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d085:	e8 9a a2 01 00       	call   c0027324 <__subdf3>
c000d08a:	83 c4 18             	add    esp,0x18
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d095:	52                   	push   edx
c000d096:	50                   	push   eax
c000d097:	e8 14 ad 01 00       	call   c0027db0 <fabs>
c000d09c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a4:	83 c4 10             	add    esp,0x10
c000d0a7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0ac:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0b9:	e8 43 ab 01 00       	call   c0027c01 <__gtdf2>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	85 c0                	test   eax,eax
c000d0c3:	0f 8e 9c 00 00 00    	jle    c000d165 <sinc_stereo_vari_process+0x4c0>
c000d0c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0cc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d7:	52                   	push   edx
c000d0d8:	50                   	push   eax
c000d0d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0df:	e8 40 a2 01 00       	call   c0027324 <__subdf3>
c000d0e4:	59                   	pop    ecx
c000d0e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0e9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0ed:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0f0:	e8 be a8 01 00       	call   c00279b3 <__floatsidf>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0fc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d100:	52                   	push   edx
c000d101:	50                   	push   eax
c000d102:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d106:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10a:	e8 41 a2 01 00       	call   c0027350 <__muldf3>
c000d10f:	5f                   	pop    edi
c000d110:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d114:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d118:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d11b:	e8 93 a8 01 00       	call   c00279b3 <__floatsidf>
c000d120:	83 c4 10             	add    esp,0x10
c000d123:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d127:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d12b:	52                   	push   edx
c000d12c:	50                   	push   eax
c000d12d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d135:	e8 fa a4 01 00       	call   c0027634 <__divdf3>
c000d13a:	83 c4 10             	add    esp,0x10
c000d13d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d141:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d149:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d151:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d155:	e8 79 9b 01 00       	call   c0026cd3 <__adddf3>
c000d15a:	83 c4 10             	add    esp,0x10
c000d15d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d161:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d165:	83 ec 0c             	sub    esp,0xc
c000d168:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d16b:	e8 43 a8 01 00       	call   c00279b3 <__floatsidf>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d177:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d17b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d17f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d187:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18b:	e8 8f aa 01 00       	call   c0027c1f <__ltdf2>
c000d190:	83 c4 10             	add    esp,0x10
c000d193:	85 c0                	test   eax,eax
c000d195:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d199:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d19d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d1a1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d1a5:	78 10                	js     c000d1b7 <sinc_stereo_vari_process+0x512>
c000d1a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1b3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c7:	e8 84 a1 01 00       	call   c0027350 <__muldf3>
c000d1cc:	59                   	pop    ecx
c000d1cd:	5f                   	pop    edi
c000d1ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1de:	e8 d3 e4 ff ff       	call   c000b6b6 <double_to_fp>
c000d1e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e7:	89 c7                	mov    edi,eax
c000d1e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f5:	e8 56 a1 01 00       	call   c0027350 <__muldf3>
c000d1fa:	83 c4 18             	add    esp,0x18
c000d1fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d201:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d205:	52                   	push   edx
c000d206:	50                   	push   eax
c000d207:	e8 aa e4 ff ff       	call   c000b6b6 <double_to_fp>
c000d20c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d20f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d213:	83 c4 0c             	add    esp,0xc
c000d216:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d219:	8d 04 90             	lea    eax,[eax+edx*4]
c000d21c:	50                   	push   eax
c000d21d:	50                   	push   eax
c000d21e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d221:	e8 8d a7 01 00       	call   c00279b3 <__floatsidf>
c000d226:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d22a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d22e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d232:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d236:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d23e:	e8 f1 a3 01 00       	call   c0027634 <__divdf3>
c000d243:	83 c4 18             	add    esp,0x18
c000d246:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d24e:	52                   	push   edx
c000d24f:	89 fa                	mov    edx,edi
c000d251:	50                   	push   eax
c000d252:	89 d8                	mov    eax,ebx
c000d254:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d258:	e8 02 c7 ff ff       	call   c000995f <calc_output_stereo>
c000d25d:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d261:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d265:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d269:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d26d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d271:	e8 be a3 01 00       	call   c0027634 <__divdf3>
c000d276:	83 c4 10             	add    esp,0x10
c000d279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	e8 3d 9a 01 00       	call   c0026cd3 <__adddf3>
c000d296:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d29a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d29e:	83 c4 18             	add    esp,0x18
c000d2a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2a9:	e8 22 ab 01 00       	call   c0027dd0 <lrint>
c000d2ae:	83 ec 0c             	sub    esp,0xc
c000d2b1:	50                   	push   eax
c000d2b2:	e8 fc a6 01 00       	call   c00279b3 <__floatsidf>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2c2:	52                   	push   edx
c000d2c3:	50                   	push   eax
c000d2c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2cc:	e8 53 a0 01 00       	call   c0027324 <__subdf3>
c000d2d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2d9:	83 c4 20             	add    esp,0x20
c000d2dc:	6a 00                	push   0x0
c000d2de:	6a 00                	push   0x0
c000d2e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2e8:	e8 32 a9 01 00       	call   c0027c1f <__ltdf2>
c000d2ed:	83 c4 10             	add    esp,0x10
c000d2f0:	85 c0                	test   eax,eax
c000d2f2:	79 20                	jns    c000d314 <sinc_stereo_vari_process+0x66f>
c000d2f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d300:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d304:	e8 ca 99 01 00       	call   c0026cd3 <__adddf3>
c000d309:	83 c4 10             	add    esp,0x10
c000d30c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d310:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d314:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d317:	83 ec 10             	sub    esp,0x10
c000d31a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d31e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d329:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d32d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d331:	e8 ee 9f 01 00       	call   c0027324 <__subdf3>
c000d336:	83 c4 18             	add    esp,0x18
c000d339:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d341:	52                   	push   edx
c000d342:	50                   	push   eax
c000d343:	e8 88 aa 01 00       	call   c0027dd0 <lrint>
c000d348:	0f af f8             	imul   edi,eax
c000d34b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	01 f8                	add    eax,edi
c000d354:	99                   	cdq    
c000d355:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d358:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d35b:	e9 fd fb ff ff       	jmp    c000cf5d <sinc_stereo_vari_process+0x2b8>
c000d360:	83 c4 4c             	add    esp,0x4c
c000d363:	89 d0                	mov    eax,edx
c000d365:	5b                   	pop    ebx
c000d366:	5e                   	pop    esi
c000d367:	5f                   	pop    edi
c000d368:	5d                   	pop    ebp
c000d369:	c3                   	ret    

c000d36a <sinc_mono_vari_process>:
c000d36a:	55                   	push   ebp
c000d36b:	ba 05 00 00 00       	mov    edx,0x5
c000d370:	57                   	push   edi
c000d371:	56                   	push   esi
c000d372:	53                   	push   ebx
c000d373:	83 ec 4c             	sub    esp,0x4c
c000d376:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d37a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d37e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d381:	85 db                	test   ebx,ebx
c000d383:	0f 84 c1 06 00 00    	je     c000da4a <sinc_mono_vari_process+0x6e0>
c000d389:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d38c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d38f:	0f af c7             	imul   eax,edi
c000d392:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d395:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d398:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d39f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d3a6:	0f af c7             	imul   eax,edi
c000d3a9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3ac:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3b0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3bd:	68 00 00 70 3f       	push   0x3f700000
c000d3c2:	6a 00                	push   0x0
c000d3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3cc:	e8 4e a8 01 00       	call   c0027c1f <__ltdf2>
c000d3d1:	83 c4 10             	add    esp,0x10
c000d3d4:	ba 16 00 00 00       	mov    edx,0x16
c000d3d9:	85 c0                	test   eax,eax
c000d3db:	0f 88 69 06 00 00    	js     c000da4a <sinc_mono_vari_process+0x6e0>
c000d3e1:	68 00 00 70 40       	push   0x40700000
c000d3e6:	6a 00                	push   0x0
c000d3e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f0:	e8 0c a8 01 00       	call   c0027c01 <__gtdf2>
c000d3f5:	83 c4 10             	add    esp,0x10
c000d3f8:	ba 16 00 00 00       	mov    edx,0x16
c000d3fd:	85 c0                	test   eax,eax
c000d3ff:	0f 8f 45 06 00 00    	jg     c000da4a <sinc_mono_vari_process+0x6e0>
c000d405:	83 ec 0c             	sub    esp,0xc
c000d408:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d40b:	e8 a3 a5 01 00       	call   c00279b3 <__floatsidf>
c000d410:	83 c4 10             	add    esp,0x10
c000d413:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d417:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d41b:	68 00 00 00 40       	push   0x40000000
c000d420:	6a 00                	push   0x0
c000d422:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d426:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d42a:	e8 a4 98 01 00       	call   c0026cd3 <__adddf3>
c000d42f:	59                   	pop    ecx
c000d430:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d434:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d438:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43b:	e8 73 a5 01 00       	call   c00279b3 <__floatsidf>
c000d440:	83 c4 10             	add    esp,0x10
c000d443:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d447:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d44b:	52                   	push   edx
c000d44c:	50                   	push   eax
c000d44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d455:	e8 da a1 01 00       	call   c0027634 <__divdf3>
c000d45a:	83 c4 10             	add    esp,0x10
c000d45d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d465:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d468:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d46f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d483:	e8 79 a7 01 00       	call   c0027c01 <__gtdf2>
c000d488:	83 c4 10             	add    esp,0x10
c000d48b:	85 c0                	test   eax,eax
c000d48d:	7e 2d                	jle    c000d4bc <sinc_mono_vari_process+0x152>
c000d48f:	68 00 00 f0 3f       	push   0x3ff00000
c000d494:	6a 00                	push   0x0
c000d496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	e8 7c a7 01 00       	call   c0027c1f <__ltdf2>
c000d4a3:	83 c4 10             	add    esp,0x10
c000d4a6:	85 c0                	test   eax,eax
c000d4a8:	79 4d                	jns    c000d4f7 <sinc_mono_vari_process+0x18d>
c000d4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4ba:	eb 1b                	jmp    c000d4d7 <sinc_mono_vari_process+0x16d>
c000d4bc:	68 00 00 f0 3f       	push   0x3ff00000
c000d4c1:	6a 00                	push   0x0
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4cb:	e8 4f a7 01 00       	call   c0027c1f <__ltdf2>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	85 c0                	test   eax,eax
c000d4d5:	79 20                	jns    c000d4f7 <sinc_mono_vari_process+0x18d>
c000d4d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e7:	e8 48 a1 01 00       	call   c0027634 <__divdf3>
c000d4ec:	83 c4 10             	add    esp,0x10
c000d4ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4f7:	50                   	push   eax
c000d4f8:	50                   	push   eax
c000d4f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d501:	e8 ca a8 01 00       	call   c0027dd0 <lrint>
c000d506:	40                   	inc    eax
c000d507:	0f af c7             	imul   eax,edi
c000d50a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d50e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d512:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d515:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	58                   	pop    eax
c000d521:	5a                   	pop    edx
c000d522:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d526:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d52a:	e8 a1 a8 01 00       	call   c0027dd0 <lrint>
c000d52f:	83 ec 0c             	sub    esp,0xc
c000d532:	50                   	push   eax
c000d533:	e8 7b a4 01 00       	call   c00279b3 <__floatsidf>
c000d538:	83 c4 10             	add    esp,0x10
c000d53b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d53f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d543:	52                   	push   edx
c000d544:	50                   	push   eax
c000d545:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d549:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54d:	e8 d2 9d 01 00       	call   c0027324 <__subdf3>
c000d552:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d556:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55a:	83 c4 20             	add    esp,0x20
c000d55d:	6a 00                	push   0x0
c000d55f:	6a 00                	push   0x0
c000d561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d565:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d569:	e8 b1 a6 01 00       	call   c0027c1f <__ltdf2>
c000d56e:	83 c4 10             	add    esp,0x10
c000d571:	85 c0                	test   eax,eax
c000d573:	79 1f                	jns    c000d594 <sinc_mono_vari_process+0x22a>
c000d575:	68 00 00 f0 3f       	push   0x3ff00000
c000d57a:	6a 00                	push   0x0
c000d57c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d580:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d584:	e8 4a 97 01 00       	call   c0026cd3 <__adddf3>
c000d589:	83 c4 10             	add    esp,0x10
c000d58c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d590:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d594:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d597:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d59a:	83 ec 10             	sub    esp,0x10
c000d59d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ad:	e8 72 9d 01 00       	call   c0027324 <__subdf3>
c000d5b2:	83 c4 18             	add    esp,0x18
c000d5b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5bd:	52                   	push   edx
c000d5be:	50                   	push   eax
c000d5bf:	e8 0c a8 01 00       	call   c0027dd0 <lrint>
c000d5c4:	0f af f8             	imul   edi,eax
c000d5c7:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5ca:	31 ff                	xor    edi,edi
c000d5cc:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5d1:	99                   	cdq    
c000d5d2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5d5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5e0:	55                   	push   ebp
c000d5e1:	57                   	push   edi
c000d5e2:	e8 4d a0 01 00       	call   c0027634 <__divdf3>
c000d5e7:	83 c4 10             	add    esp,0x10
c000d5ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5f2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5f7:	68 23 42 92 0c       	push   0xc924223
c000d5fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d600:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d604:	e8 ca 96 01 00       	call   c0026cd3 <__adddf3>
c000d609:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d60d:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d611:	83 c4 20             	add    esp,0x20
c000d614:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d618:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d61c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d61f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d622:	7d 54                	jge    c000d678 <sinc_mono_vari_process+0x30e>
c000d624:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d627:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d62a:	01 c8                	add    eax,ecx
c000d62c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d62f:	99                   	cdq    
c000d630:	f7 f9                	idiv   ecx
c000d632:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d636:	7d 0c                	jge    c000d644 <sinc_mono_vari_process+0x2da>
c000d638:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d63b:	85 ff                	test   edi,edi
c000d63d:	79 73                	jns    c000d6b2 <sinc_mono_vari_process+0x348>
c000d63f:	e9 ee 00 00 00       	jmp    c000d732 <sinc_mono_vari_process+0x3c8>
c000d644:	50                   	push   eax
c000d645:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d649:	56                   	push   esi
c000d64a:	53                   	push   ebx
c000d64b:	e8 8d e0 ff ff       	call   c000b6dd <prepare_data>
c000d650:	89 c2                	mov    edx,eax
c000d652:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d656:	83 c4 10             	add    esp,0x10
c000d659:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d65c:	85 d2                	test   edx,edx
c000d65e:	0f 85 e6 03 00 00    	jne    c000da4a <sinc_mono_vari_process+0x6e0>
c000d664:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d667:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d66a:	01 c8                	add    eax,ecx
c000d66c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d66f:	99                   	cdq    
c000d670:	f7 f9                	idiv   ecx
c000d672:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d676:	7c c0                	jl     c000d638 <sinc_mono_vari_process+0x2ce>
c000d678:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d67c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d680:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d684:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d687:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d692:	89 01                	mov    DWORD PTR [ecx],eax
c000d694:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d697:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d69a:	99                   	cdq    
c000d69b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d69e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d6a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d6a4:	99                   	cdq    
c000d6a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6a8:	31 d2                	xor    edx,edx
c000d6aa:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6ad:	e9 98 03 00 00       	jmp    c000da4a <sinc_mono_vari_process+0x6e0>
c000d6b2:	83 ec 0c             	sub    esp,0xc
c000d6b5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6b8:	e8 f6 a2 01 00       	call   c00279b3 <__floatsidf>
c000d6bd:	83 c4 10             	add    esp,0x10
c000d6c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d8:	e8 f6 95 01 00       	call   c0026cd3 <__adddf3>
c000d6dd:	83 c4 10             	add    esp,0x10
c000d6e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f8:	e8 d6 95 01 00       	call   c0026cd3 <__adddf3>
c000d6fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d700:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d704:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d708:	e8 a6 a2 01 00       	call   c00279b3 <__floatsidf>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d718:	52                   	push   edx
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d71e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d722:	e8 da a4 01 00       	call   c0027c01 <__gtdf2>
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	85 c0                	test   eax,eax
c000d72c:	0f 8f 46 ff ff ff    	jg     c000d678 <sinc_mono_vari_process+0x30e>
c000d732:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d736:	0f 8e f5 00 00 00    	jle    c000d831 <sinc_mono_vari_process+0x4c7>
c000d73c:	83 ec 10             	sub    esp,0x10
c000d73f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d742:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d745:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d749:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d74c:	ff 30                	push   DWORD PTR [eax]
c000d74e:	e8 d1 9b 01 00       	call   c0027324 <__subdf3>
c000d753:	83 c4 18             	add    esp,0x18
c000d756:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d75a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d75e:	52                   	push   edx
c000d75f:	50                   	push   eax
c000d760:	e8 4b a6 01 00       	call   c0027db0 <fabs>
c000d765:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d769:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d76d:	83 c4 10             	add    esp,0x10
c000d770:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d775:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d77a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d77e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d782:	e8 7a a4 01 00       	call   c0027c01 <__gtdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	0f 8e 9f 00 00 00    	jle    c000d831 <sinc_mono_vari_process+0x4c7>
c000d792:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d796:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d799:	8b 00                	mov    eax,DWORD PTR [eax]
c000d79b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d79f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7a3:	52                   	push   edx
c000d7a4:	50                   	push   eax
c000d7a5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d7a8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7ab:	e8 74 9b 01 00       	call   c0027324 <__subdf3>
c000d7b0:	5f                   	pop    edi
c000d7b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7b5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7bc:	e8 f2 a1 01 00       	call   c00279b3 <__floatsidf>
c000d7c1:	83 c4 10             	add    esp,0x10
c000d7c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7cc:	52                   	push   edx
c000d7cd:	50                   	push   eax
c000d7ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d6:	e8 75 9b 01 00       	call   c0027350 <__muldf3>
c000d7db:	5d                   	pop    ebp
c000d7dc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7e0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7e4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7e7:	e8 c7 a1 01 00       	call   c00279b3 <__floatsidf>
c000d7ec:	83 c4 10             	add    esp,0x10
c000d7ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7f7:	52                   	push   edx
c000d7f8:	50                   	push   eax
c000d7f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d801:	e8 2e 9e 01 00       	call   c0027634 <__divdf3>
c000d806:	83 c4 10             	add    esp,0x10
c000d809:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	e8 ad 94 01 00       	call   c0026cd3 <__adddf3>
c000d826:	83 c4 10             	add    esp,0x10
c000d829:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d82d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d831:	83 ec 0c             	sub    esp,0xc
c000d834:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d837:	e8 77 a1 01 00       	call   c00279b3 <__floatsidf>
c000d83c:	83 c4 10             	add    esp,0x10
c000d83f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d843:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d847:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d857:	e8 c3 a3 01 00       	call   c0027c1f <__ltdf2>
c000d85c:	83 c4 10             	add    esp,0x10
c000d85f:	85 c0                	test   eax,eax
c000d861:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d865:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d869:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d86d:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d871:	78 10                	js     c000d883 <sinc_mono_vari_process+0x519>
c000d873:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d877:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d87b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d87f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d883:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d887:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d88b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d88f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d893:	e8 b8 9a 01 00       	call   c0027350 <__muldf3>
c000d898:	59                   	pop    ecx
c000d899:	5f                   	pop    edi
c000d89a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d89e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8aa:	e8 07 de ff ff       	call   c000b6b6 <double_to_fp>
c000d8af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b3:	89 c7                	mov    edi,eax
c000d8b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8c1:	e8 8a 9a 01 00       	call   c0027350 <__muldf3>
c000d8c6:	83 c4 18             	add    esp,0x18
c000d8c9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d1:	52                   	push   edx
c000d8d2:	50                   	push   eax
c000d8d3:	e8 de dd ff ff       	call   c000b6b6 <double_to_fp>
c000d8d8:	83 ec 0c             	sub    esp,0xc
c000d8db:	89 c5                	mov    ebp,eax
c000d8dd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8e0:	e8 ce a0 01 00       	call   c00279b3 <__floatsidf>
c000d8e5:	83 c4 10             	add    esp,0x10
c000d8e8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8ec:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f0:	52                   	push   edx
c000d8f1:	50                   	push   eax
c000d8f2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fa:	e8 35 9d 01 00       	call   c0027634 <__divdf3>
c000d8ff:	83 c4 10             	add    esp,0x10
c000d902:	89 e9                	mov    ecx,ebp
c000d904:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d908:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d90c:	89 d8                	mov    eax,ebx
c000d90e:	89 fa                	mov    edx,edi
c000d910:	e8 ee bd ff ff       	call   c0009703 <calc_output_single>
c000d915:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d918:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d91b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d923:	52                   	push   edx
c000d924:	50                   	push   eax
c000d925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d929:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92d:	e8 1e 9a 01 00       	call   c0027350 <__muldf3>
c000d932:	59                   	pop    ecx
c000d933:	59                   	pop    ecx
c000d934:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d938:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d93c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d940:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d944:	e8 da a2 01 00       	call   c0027c23 <__truncdfsf2>
c000d949:	83 c4 10             	add    esp,0x10
c000d94c:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d94f:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d952:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d956:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d95a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d962:	e8 cd 9c 01 00       	call   c0027634 <__divdf3>
c000d967:	83 c4 10             	add    esp,0x10
c000d96a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d96e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d97a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	e8 4c 93 01 00       	call   c0026cd3 <__adddf3>
c000d987:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d98b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d98f:	83 c4 18             	add    esp,0x18
c000d992:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d996:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99a:	e8 31 a4 01 00       	call   c0027dd0 <lrint>
c000d99f:	83 ec 0c             	sub    esp,0xc
c000d9a2:	50                   	push   eax
c000d9a3:	e8 0b a0 01 00       	call   c00279b3 <__floatsidf>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9b3:	52                   	push   edx
c000d9b4:	50                   	push   eax
c000d9b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9b9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bd:	e8 62 99 01 00       	call   c0027324 <__subdf3>
c000d9c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9ca:	83 c4 20             	add    esp,0x20
c000d9cd:	6a 00                	push   0x0
c000d9cf:	6a 00                	push   0x0
c000d9d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9d9:	e8 41 a2 01 00       	call   c0027c1f <__ltdf2>
c000d9de:	83 c4 10             	add    esp,0x10
c000d9e1:	85 c0                	test   eax,eax
c000d9e3:	79 20                	jns    c000da05 <sinc_mono_vari_process+0x69b>
c000d9e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f5:	e8 d9 92 01 00       	call   c0026cd3 <__adddf3>
c000d9fa:	83 c4 10             	add    esp,0x10
c000d9fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da05:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000da08:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da0b:	83 ec 10             	sub    esp,0x10
c000da0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da1a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da1e:	e8 01 99 01 00       	call   c0027324 <__subdf3>
c000da23:	83 c4 18             	add    esp,0x18
c000da26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da2e:	52                   	push   edx
c000da2f:	50                   	push   eax
c000da30:	e8 9b a3 01 00       	call   c0027dd0 <lrint>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	0f af f8             	imul   edi,eax
c000da3b:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da3e:	99                   	cdq    
c000da3f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da45:	e9 d2 fb ff ff       	jmp    c000d61c <sinc_mono_vari_process+0x2b2>
c000da4a:	83 c4 4c             	add    esp,0x4c
c000da4d:	89 d0                	mov    eax,edx
c000da4f:	5b                   	pop    ebx
c000da50:	5e                   	pop    esi
c000da51:	5f                   	pop    edi
c000da52:	5d                   	pop    ebp
c000da53:	c3                   	ret    

c000da54 <sinc_get_name>:
c000da54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da58:	31 c0                	xor    eax,eax
c000da5a:	83 fa 02             	cmp    edx,0x2
c000da5d:	77 07                	ja     c000da66 <sinc_get_name+0x12>
c000da5f:	8b 04 95 c4 95 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a3c]
c000da66:	c3                   	ret    

c000da67 <sinc_get_description>:
c000da67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da6b:	31 c0                	xor    eax,eax
c000da6d:	83 fa 02             	cmp    edx,0x2
c000da70:	77 07                	ja     c000da79 <sinc_get_description+0x12>
c000da72:	8b 04 95 b8 95 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6a48]
c000da79:	c3                   	ret    

c000da7a <sinc_set_converter>:
c000da7a:	53                   	push   ebx
c000da7b:	81 ec 58 08 00 00    	sub    esp,0x858
c000da81:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da8b:	85 c0                	test   eax,eax
c000da8d:	74 13                	je     c000daa2 <sinc_set_converter+0x28>
c000da8f:	83 ec 0c             	sub    esp,0xc
c000da92:	50                   	push   eax
c000da93:	e8 9a 1b 00 00       	call   c000f632 <free>
c000da98:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da9f:	83 c4 10             	add    esp,0x10
c000daa2:	50                   	push   eax
c000daa3:	68 44 08 00 00       	push   0x844
c000daa8:	6a 00                	push   0x0
c000daaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000daae:	50                   	push   eax
c000daaf:	e8 0e 2c ff ff       	call   c00006c2 <memset>
c000dab4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dab7:	83 c4 10             	add    esp,0x10
c000daba:	b8 0b 00 00 00       	mov    eax,0xb
c000dabf:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dac5:	7f 6e                	jg     c000db35 <sinc_set_converter+0xbb>
c000dac7:	83 fa 01             	cmp    edx,0x1
c000daca:	75 10                	jne    c000dadc <sinc_set_converter+0x62>
c000dacc:	c7 43 24 6a d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d36a
c000dad3:	c7 43 20 6a d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d36a
c000dada:	eb 4d                	jmp    c000db29 <sinc_set_converter+0xaf>
c000dadc:	83 fa 02             	cmp    edx,0x2
c000dadf:	75 10                	jne    c000daf1 <sinc_set_converter+0x77>
c000dae1:	c7 43 24 a5 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cca5
c000dae8:	c7 43 20 a5 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cca5
c000daef:	eb 38                	jmp    c000db29 <sinc_set_converter+0xaf>
c000daf1:	83 fa 04             	cmp    edx,0x4
c000daf4:	75 10                	jne    c000db06 <sinc_set_converter+0x8c>
c000daf6:	c7 43 24 e0 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5e0
c000dafd:	c7 43 20 e0 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5e0
c000db04:	eb 23                	jmp    c000db29 <sinc_set_converter+0xaf>
c000db06:	83 fa 06             	cmp    edx,0x6
c000db09:	75 10                	jne    c000db1b <sinc_set_converter+0xa1>
c000db0b:	c7 43 24 1b bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf1b
c000db12:	c7 43 20 1b bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf1b
c000db19:	eb 0e                	jmp    c000db29 <sinc_set_converter+0xaf>
c000db1b:	c7 43 24 57 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b857
c000db22:	c7 43 20 57 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b857
c000db29:	c7 43 28 0a ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab0a
c000db30:	b8 0a 00 00 00       	mov    eax,0xa
c000db35:	81 c4 58 08 00 00    	add    esp,0x858
c000db3b:	5b                   	pop    ebx
c000db3c:	c3                   	ret    

c000db3d <zoh_vari_process>:
c000db3d:	55                   	push   ebp
c000db3e:	31 d2                	xor    edx,edx
c000db40:	57                   	push   edi
c000db41:	56                   	push   esi
c000db42:	53                   	push   ebx
c000db43:	83 ec 3c             	sub    esp,0x3c
c000db46:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db4a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db4e:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db52:	0f 8e 80 06 00 00    	jle    c000e1d8 <zoh_vari_process+0x69b>
c000db58:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db5b:	ba 05 00 00 00       	mov    edx,0x5
c000db60:	85 db                	test   ebx,ebx
c000db62:	0f 84 70 06 00 00    	je     c000e1d8 <zoh_vari_process+0x69b>
c000db68:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db6b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db6f:	74 19                	je     c000db8a <zoh_vari_process+0x4d>
c000db71:	31 d2                	xor    edx,edx
c000db73:	39 c2                	cmp    edx,eax
c000db75:	7d 0c                	jge    c000db83 <zoh_vari_process+0x46>
c000db77:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db79:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db7c:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db80:	42                   	inc    edx
c000db81:	eb f0                	jmp    c000db73 <zoh_vari_process+0x36>
c000db83:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db8a:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db8d:	0f af d0             	imul   edx,eax
c000db90:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db93:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db97:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db9e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dba1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dba8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dbab:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb5:	68 00 00 70 3f       	push   0x3f700000
c000dbba:	6a 00                	push   0x0
c000dbbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc4:	e8 56 a0 01 00       	call   c0027c1f <__ltdf2>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	ba 16 00 00 00       	mov    edx,0x16
c000dbd1:	85 c0                	test   eax,eax
c000dbd3:	0f 88 ff 05 00 00    	js     c000e1d8 <zoh_vari_process+0x69b>
c000dbd9:	68 00 00 70 40       	push   0x40700000
c000dbde:	6a 00                	push   0x0
c000dbe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe8:	e8 14 a0 01 00       	call   c0027c01 <__gtdf2>
c000dbed:	83 c4 10             	add    esp,0x10
c000dbf0:	ba 16 00 00 00       	mov    edx,0x16
c000dbf5:	85 c0                	test   eax,eax
c000dbf7:	0f 8f db 05 00 00    	jg     c000e1d8 <zoh_vari_process+0x69b>
c000dbfd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc00:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dc03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc07:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc0b:	68 00 00 f0 3f       	push   0x3ff00000
c000dc10:	6a 00                	push   0x0
c000dc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1a:	e8 00 a0 01 00       	call   c0027c1f <__ltdf2>
c000dc1f:	83 c4 10             	add    esp,0x10
c000dc22:	85 c0                	test   eax,eax
c000dc24:	0f 89 da 01 00 00    	jns    c000de04 <zoh_vari_process+0x2c7>
c000dc2a:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc2d:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc30:	0f 8d ce 01 00 00    	jge    c000de04 <zoh_vari_process+0x2c7>
c000dc36:	83 ec 0c             	sub    esp,0xc
c000dc39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc3c:	e8 72 9d 01 00       	call   c00279b3 <__floatsidf>
c000dc41:	83 c4 10             	add    esp,0x10
c000dc44:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc5b:	e8 f0 96 01 00       	call   c0027350 <__muldf3>
c000dc60:	59                   	pop    ecx
c000dc61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc65:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc69:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc6c:	e8 42 9d 01 00       	call   c00279b3 <__floatsidf>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc7c:	52                   	push   edx
c000dc7d:	50                   	push   eax
c000dc7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc86:	e8 48 90 01 00       	call   c0026cd3 <__adddf3>
c000dc8b:	59                   	pop    ecx
c000dc8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc90:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc94:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc97:	e8 17 9d 01 00       	call   c00279b3 <__floatsidf>
c000dc9c:	83 c4 10             	add    esp,0x10
c000dc9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dca3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dca7:	52                   	push   edx
c000dca8:	50                   	push   eax
c000dca9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb1:	e8 67 9f 01 00       	call   c0027c1d <__gedf2>
c000dcb6:	83 c4 10             	add    esp,0x10
c000dcb9:	85 c0                	test   eax,eax
c000dcbb:	0f 89 43 01 00 00    	jns    c000de04 <zoh_vari_process+0x2c7>
c000dcc1:	85 ed                	test   ebp,ebp
c000dcc3:	0f 8e ec 00 00 00    	jle    c000ddb5 <zoh_vari_process+0x278>
c000dcc9:	83 ec 10             	sub    esp,0x10
c000dccc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dccf:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcd2:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dcd5:	ff 37                	push   DWORD PTR [edi]
c000dcd7:	e8 48 96 01 00       	call   c0027324 <__subdf3>
c000dcdc:	83 c4 18             	add    esp,0x18
c000dcdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dce3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dce7:	52                   	push   edx
c000dce8:	50                   	push   eax
c000dce9:	e8 c2 a0 01 00       	call   c0027db0 <fabs>
c000dcee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcf6:	83 c4 10             	add    esp,0x10
c000dcf9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcfe:	68 23 42 92 0c       	push   0xc924223
c000dd03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd0b:	e8 f1 9e 01 00       	call   c0027c01 <__gtdf2>
c000dd10:	83 c4 10             	add    esp,0x10
c000dd13:	85 c0                	test   eax,eax
c000dd15:	0f 8e 9a 00 00 00    	jle    c000ddb5 <zoh_vari_process+0x278>
c000dd1b:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd1d:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd20:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd23:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd27:	52                   	push   edx
c000dd28:	50                   	push   eax
c000dd29:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd2c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd2f:	e8 f0 95 01 00       	call   c0027324 <__subdf3>
c000dd34:	59                   	pop    ecx
c000dd35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd39:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd3d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd40:	e8 6e 9c 01 00       	call   c00279b3 <__floatsidf>
c000dd45:	83 c4 10             	add    esp,0x10
c000dd48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd4c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd50:	52                   	push   edx
c000dd51:	50                   	push   eax
c000dd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5a:	e8 f1 95 01 00       	call   c0027350 <__muldf3>
c000dd5f:	5d                   	pop    ebp
c000dd60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd64:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd68:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd6b:	e8 43 9c 01 00       	call   c00279b3 <__floatsidf>
c000dd70:	83 c4 10             	add    esp,0x10
c000dd73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd77:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd7b:	52                   	push   edx
c000dd7c:	50                   	push   eax
c000dd7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd85:	e8 aa 98 01 00       	call   c0027634 <__divdf3>
c000dd8a:	83 c4 10             	add    esp,0x10
c000dd8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd95:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd99:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda5:	e8 29 8f 01 00       	call   c0026cd3 <__adddf3>
c000ddaa:	83 c4 10             	add    esp,0x10
c000ddad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddb5:	31 c0                	xor    eax,eax
c000ddb7:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddba:	7e 13                	jle    c000ddcf <zoh_vari_process+0x292>
c000ddbc:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddc0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddc3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddc6:	40                   	inc    eax
c000ddc7:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddca:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ddcd:	eb e8                	jmp    c000ddb7 <zoh_vari_process+0x27a>
c000ddcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd7:	68 00 00 f0 3f       	push   0x3ff00000
c000dddc:	6a 00                	push   0x0
c000ddde:	e8 51 98 01 00       	call   c0027634 <__divdf3>
c000dde3:	83 c4 10             	add    esp,0x10
c000dde6:	89 04 24             	mov    DWORD PTR [esp],eax
c000dde9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dded:	52                   	push   edx
c000ddee:	50                   	push   eax
c000ddef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf7:	e8 d7 8e 01 00       	call   c0026cd3 <__adddf3>
c000ddfc:	83 c4 10             	add    esp,0x10
c000ddff:	e9 ff fd ff ff       	jmp    c000dc03 <zoh_vari_process+0xc6>
c000de04:	55                   	push   ebp
c000de05:	55                   	push   ebp
c000de06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0e:	e8 bd 9f 01 00       	call   c0027dd0 <lrint>
c000de13:	83 ec 0c             	sub    esp,0xc
c000de16:	50                   	push   eax
c000de17:	e8 97 9b 01 00       	call   c00279b3 <__floatsidf>
c000de1c:	83 c4 10             	add    esp,0x10
c000de1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de27:	52                   	push   edx
c000de28:	50                   	push   eax
c000de29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de31:	e8 ee 94 01 00       	call   c0027324 <__subdf3>
c000de36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de3a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de3e:	83 c4 20             	add    esp,0x20
c000de41:	6a 00                	push   0x0
c000de43:	6a 00                	push   0x0
c000de45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de49:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4d:	e8 cd 9d 01 00       	call   c0027c1f <__ltdf2>
c000de52:	83 c4 10             	add    esp,0x10
c000de55:	85 c0                	test   eax,eax
c000de57:	79 1e                	jns    c000de77 <zoh_vari_process+0x33a>
c000de59:	68 00 00 f0 3f       	push   0x3ff00000
c000de5e:	6a 00                	push   0x0
c000de60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de68:	e8 66 8e 01 00       	call   c0026cd3 <__adddf3>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	89 04 24             	mov    DWORD PTR [esp],eax
c000de73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de77:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de7a:	83 ec 10             	sub    esp,0x10
c000de7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8d:	e8 92 94 01 00       	call   c0027324 <__subdf3>
c000de92:	83 c4 18             	add    esp,0x18
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	e8 2c 9f 01 00       	call   c0027dd0 <lrint>
c000dea4:	83 c4 10             	add    esp,0x10
c000dea7:	0f af e8             	imul   ebp,eax
c000deaa:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dead:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000deb0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000deb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000deb7:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000deba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000debe:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dec1:	0f 8d 7a 02 00 00    	jge    c000e141 <zoh_vari_process+0x604>
c000dec7:	83 ec 0c             	sub    esp,0xc
c000deca:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000decd:	e8 e1 9a 01 00       	call   c00279b3 <__floatsidf>
c000ded2:	83 c4 10             	add    esp,0x10
c000ded5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ded9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dedd:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee1:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deed:	e8 5e 94 01 00       	call   c0027350 <__muldf3>
c000def2:	59                   	pop    ecx
c000def3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000def7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000defb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deff:	e8 af 9a 01 00       	call   c00279b3 <__floatsidf>
c000df04:	83 c4 10             	add    esp,0x10
c000df07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df0b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df0f:	52                   	push   edx
c000df10:	50                   	push   eax
c000df11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df19:	e8 b5 8d 01 00       	call   c0026cd3 <__adddf3>
c000df1e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df29:	e8 85 9a 01 00       	call   c00279b3 <__floatsidf>
c000df2e:	83 c4 10             	add    esp,0x10
c000df31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df35:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df39:	52                   	push   edx
c000df3a:	50                   	push   eax
c000df3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df43:	e8 d9 9c 01 00       	call   c0027c21 <__ledf2>
c000df48:	83 c4 10             	add    esp,0x10
c000df4b:	85 c0                	test   eax,eax
c000df4d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df51:	0f 8f ea 01 00 00    	jg     c000e141 <zoh_vari_process+0x604>
c000df57:	85 c9                	test   ecx,ecx
c000df59:	0f 8e ed 00 00 00    	jle    c000e04c <zoh_vari_process+0x50f>
c000df5f:	83 ec 10             	sub    esp,0x10
c000df62:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df65:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df68:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df6b:	ff 37                	push   DWORD PTR [edi]
c000df6d:	e8 b2 93 01 00       	call   c0027324 <__subdf3>
c000df72:	83 c4 18             	add    esp,0x18
c000df75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df7d:	52                   	push   edx
c000df7e:	50                   	push   eax
c000df7f:	e8 2c 9e 01 00       	call   c0027db0 <fabs>
c000df84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df88:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df8c:	83 c4 10             	add    esp,0x10
c000df8f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df94:	68 23 42 92 0c       	push   0xc924223
c000df99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa1:	e8 5b 9c 01 00       	call   c0027c01 <__gtdf2>
c000dfa6:	83 c4 10             	add    esp,0x10
c000dfa9:	85 c0                	test   eax,eax
c000dfab:	0f 8e 9b 00 00 00    	jle    c000e04c <zoh_vari_process+0x50f>
c000dfb1:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfb3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfbe:	52                   	push   edx
c000dfbf:	50                   	push   eax
c000dfc0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfc3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfc6:	e8 59 93 01 00       	call   c0027324 <__subdf3>
c000dfcb:	5d                   	pop    ebp
c000dfcc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfd0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfd4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfd7:	e8 d7 99 01 00       	call   c00279b3 <__floatsidf>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfe3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfe7:	52                   	push   edx
c000dfe8:	50                   	push   eax
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff1:	e8 5a 93 01 00       	call   c0027350 <__muldf3>
c000dff6:	59                   	pop    ecx
c000dff7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dffb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfff:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e002:	e8 ac 99 01 00       	call   c00279b3 <__floatsidf>
c000e007:	83 c4 10             	add    esp,0x10
c000e00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e00e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e012:	52                   	push   edx
c000e013:	50                   	push   eax
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01c:	e8 13 96 01 00       	call   c0027634 <__divdf3>
c000e021:	83 c4 10             	add    esp,0x10
c000e024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e028:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03c:	e8 92 8c 01 00       	call   c0026cd3 <__adddf3>
c000e041:	83 c4 10             	add    esp,0x10
c000e044:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e048:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e04c:	31 d2                	xor    edx,edx
c000e04e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e051:	39 d0                	cmp    eax,edx
c000e053:	7e 1d                	jle    c000e072 <zoh_vari_process+0x535>
c000e055:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e058:	29 c1                	sub    ecx,eax
c000e05a:	89 c8                	mov    eax,ecx
c000e05c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e05e:	01 d0                	add    eax,edx
c000e060:	42                   	inc    edx
c000e061:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e064:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e067:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e06a:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e06d:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e070:	eb dc                	jmp    c000e04e <zoh_vari_process+0x511>
c000e072:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e076:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	e8 ae 95 01 00       	call   c0027634 <__divdf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e08d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e091:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e095:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a1:	e8 2d 8c 01 00       	call   c0026cd3 <__adddf3>
c000e0a6:	5d                   	pop    ebp
c000e0a7:	59                   	pop    ecx
c000e0a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b8:	e8 13 9d 01 00       	call   c0027dd0 <lrint>
c000e0bd:	83 ec 0c             	sub    esp,0xc
c000e0c0:	50                   	push   eax
c000e0c1:	e8 ed 98 01 00       	call   c00279b3 <__floatsidf>
c000e0c6:	83 c4 10             	add    esp,0x10
c000e0c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0d1:	52                   	push   edx
c000e0d2:	50                   	push   eax
c000e0d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0db:	e8 44 92 01 00       	call   c0027324 <__subdf3>
c000e0e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0e4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0e8:	83 c4 20             	add    esp,0x20
c000e0eb:	6a 00                	push   0x0
c000e0ed:	6a 00                	push   0x0
c000e0ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f7:	e8 23 9b 01 00       	call   c0027c1f <__ltdf2>
c000e0fc:	83 c4 10             	add    esp,0x10
c000e0ff:	85 c0                	test   eax,eax
c000e101:	79 1e                	jns    c000e121 <zoh_vari_process+0x5e4>
c000e103:	68 00 00 f0 3f       	push   0x3ff00000
c000e108:	6a 00                	push   0x0
c000e10a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e10e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e112:	e8 bc 8b 01 00       	call   c0026cd3 <__adddf3>
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e11d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e121:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e124:	83 ec 10             	sub    esp,0x10
c000e127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e12b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e12f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e137:	e8 e8 91 01 00       	call   c0027324 <__subdf3>
c000e13c:	e9 51 fd ff ff       	jmp    c000de92 <zoh_vari_process+0x355>
c000e141:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e145:	7d 3a                	jge    c000e181 <zoh_vari_process+0x644>
c000e147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14b:	83 ec 0c             	sub    esp,0xc
c000e14e:	29 e8                	sub    eax,ebp
c000e150:	99                   	cdq    
c000e151:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e154:	50                   	push   eax
c000e155:	e8 59 98 01 00       	call   c00279b3 <__floatsidf>
c000e15a:	83 c4 10             	add    esp,0x10
c000e15d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e161:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e165:	52                   	push   edx
c000e166:	50                   	push   eax
c000e167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e16b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e16f:	e8 5f 8b 01 00       	call   c0026cd3 <__adddf3>
c000e174:	83 c4 10             	add    esp,0x10
c000e177:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e17a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e17d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e181:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e184:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e188:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e18b:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e18e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e191:	85 c0                	test   eax,eax
c000e193:	7f 25                	jg     c000e1ba <zoh_vari_process+0x67d>
c000e195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e199:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e19d:	89 07                	mov    DWORD PTR [edi],eax
c000e19f:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e1a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e1a5:	99                   	cdq    
c000e1a6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1a9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1ac:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1af:	99                   	cdq    
c000e1b0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1b3:	31 d2                	xor    edx,edx
c000e1b5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1b8:	eb 1e                	jmp    c000e1d8 <zoh_vari_process+0x69b>
c000e1ba:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1bd:	31 d2                	xor    edx,edx
c000e1bf:	29 c8                	sub    eax,ecx
c000e1c1:	c1 e0 02             	shl    eax,0x2
c000e1c4:	39 d1                	cmp    ecx,edx
c000e1c6:	7e cd                	jle    c000e195 <zoh_vari_process+0x658>
c000e1c8:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1ca:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1ce:	83 c0 04             	add    eax,0x4
c000e1d1:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1d5:	42                   	inc    edx
c000e1d6:	eb ec                	jmp    c000e1c4 <zoh_vari_process+0x687>
c000e1d8:	83 c4 3c             	add    esp,0x3c
c000e1db:	89 d0                	mov    eax,edx
c000e1dd:	5b                   	pop    ebx
c000e1de:	5e                   	pop    esi
c000e1df:	5f                   	pop    edi
c000e1e0:	5d                   	pop    ebp
c000e1e1:	c3                   	ret    

c000e1e2 <zoh_reset>:
c000e1e2:	83 ec 0c             	sub    esp,0xc
c000e1e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1e9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1ec:	85 c0                	test   eax,eax
c000e1ee:	74 20                	je     c000e210 <zoh_reset+0x2e>
c000e1f0:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1f3:	83 c0 1c             	add    eax,0x1c
c000e1f6:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1f9:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e200:	c1 e2 02             	shl    edx,0x2
c000e203:	51                   	push   ecx
c000e204:	52                   	push   edx
c000e205:	6a 00                	push   0x0
c000e207:	50                   	push   eax
c000e208:	e8 b5 24 ff ff       	call   c00006c2 <memset>
c000e20d:	83 c4 10             	add    esp,0x10
c000e210:	83 c4 0c             	add    esp,0xc
c000e213:	c3                   	ret    

c000e214 <zoh_get_name>:
c000e214:	31 c0                	xor    eax,eax
c000e216:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e21b:	75 05                	jne    c000e222 <zoh_get_name+0xe>
c000e21d:	b8 de 96 02 c0       	mov    eax,0xc00296de
c000e222:	c3                   	ret    

c000e223 <zoh_get_description>:
c000e223:	31 c0                	xor    eax,eax
c000e225:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e22a:	75 05                	jne    c000e231 <zoh_get_description+0xe>
c000e22c:	b8 ef 96 02 c0       	mov    eax,0xc00296ef
c000e231:	c3                   	ret    

c000e232 <zoh_set_converter>:
c000e232:	53                   	push   ebx
c000e233:	b8 0a 00 00 00       	mov    eax,0xa
c000e238:	83 ec 08             	sub    esp,0x8
c000e23b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e23f:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e244:	75 6e                	jne    c000e2b4 <zoh_set_converter+0x82>
c000e246:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e249:	85 c0                	test   eax,eax
c000e24b:	74 13                	je     c000e260 <zoh_set_converter+0x2e>
c000e24d:	83 ec 0c             	sub    esp,0xc
c000e250:	50                   	push   eax
c000e251:	e8 dc 13 00 00       	call   c000f632 <free>
c000e256:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e25d:	83 c4 10             	add    esp,0x10
c000e260:	50                   	push   eax
c000e261:	50                   	push   eax
c000e262:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e265:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e26c:	50                   	push   eax
c000e26d:	6a 01                	push   0x1
c000e26f:	e8 de 13 00 00       	call   c000f652 <calloc>
c000e274:	83 c4 10             	add    esp,0x10
c000e277:	89 c2                	mov    edx,eax
c000e279:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e27c:	85 d2                	test   edx,edx
c000e27e:	b8 01 00 00 00       	mov    eax,0x1
c000e283:	74 2f                	je     c000e2b4 <zoh_set_converter+0x82>
c000e285:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e288:	83 ec 0c             	sub    esp,0xc
c000e28b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e28e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e294:	c7 43 24 3d db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db3d
c000e29b:	c7 43 20 3d db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db3d
c000e2a2:	c7 43 28 e2 e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1e2
c000e2a9:	53                   	push   ebx
c000e2aa:	e8 33 ff ff ff       	call   c000e1e2 <zoh_reset>
c000e2af:	83 c4 10             	add    esp,0x10
c000e2b2:	31 c0                	xor    eax,eax
c000e2b4:	83 c4 08             	add    esp,0x8
c000e2b7:	5b                   	pop    ebx
c000e2b8:	c3                   	ret    

c000e2b9 <CPU::current()>:
c000e2b9:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000e2be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2c4:	90                   	nop
c000e2c5:	c3                   	ret    

c000e2c6 <operator new(unsigned long)>:
c000e2c6:	83 ec 0c             	sub    esp,0xc
c000e2c9:	83 ec 0c             	sub    esp,0xc
c000e2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d0:	e8 4d 13 00 00       	call   c000f622 <malloc>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	83 c4 0c             	add    esp,0xc
c000e2db:	c3                   	ret    

c000e2dc <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	83 ec 08             	sub    esp,0x8
c000e2e2:	68 26 97 02 c0       	push   0xc0029726
c000e2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2eb:	e8 c2 24 ff ff       	call   c00007b2 <strcmp>
c000e2f0:	83 c4 10             	add    esp,0x10
c000e2f3:	85 c0                	test   eax,eax
c000e2f5:	0f 94 c0             	sete   al
c000e2f8:	84 c0                	test   al,al
c000e2fa:	74 0a                	je     c000e306 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2fc:	b8 c8 da 02 c0       	mov    eax,0xc002dac8
c000e301:	e9 e3 00 00 00       	jmp    c000e3e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e306:	83 ec 08             	sub    esp,0x8
c000e309:	68 2f 97 02 c0       	push   0xc002972f
c000e30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e312:	e8 9b 24 ff ff       	call   c00007b2 <strcmp>
c000e317:	83 c4 10             	add    esp,0x10
c000e31a:	85 c0                	test   eax,eax
c000e31c:	0f 94 c0             	sete   al
c000e31f:	84 c0                	test   al,al
c000e321:	74 0a                	je     c000e32d <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e323:	b8 4c 61 02 c0       	mov    eax,0xc002614c
c000e328:	e9 bc 00 00 00       	jmp    c000e3e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e32d:	83 ec 08             	sub    esp,0x8
c000e330:	68 39 97 02 c0       	push   0xc0029739
c000e335:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e339:	e8 74 24 ff ff       	call   c00007b2 <strcmp>
c000e33e:	83 c4 10             	add    esp,0x10
c000e341:	85 c0                	test   eax,eax
c000e343:	0f 94 c0             	sete   al
c000e346:	84 c0                	test   al,al
c000e348:	74 0a                	je     c000e354 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e34a:	b8 80 5e 02 c0       	mov    eax,0xc0025e80
c000e34f:	e9 95 00 00 00       	jmp    c000e3e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e354:	83 ec 08             	sub    esp,0x8
c000e357:	68 42 97 02 c0       	push   0xc0029742
c000e35c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e360:	e8 4d 24 ff ff       	call   c00007b2 <strcmp>
c000e365:	83 c4 10             	add    esp,0x10
c000e368:	85 c0                	test   eax,eax
c000e36a:	0f 94 c0             	sete   al
c000e36d:	84 c0                	test   al,al
c000e36f:	74 07                	je     c000e378 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e371:	b8 4c 62 02 c0       	mov    eax,0xc002624c
c000e376:	eb 71                	jmp    c000e3e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e378:	83 ec 08             	sub    esp,0x8
c000e37b:	68 4c 97 02 c0       	push   0xc002974c
c000e380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e384:	e8 29 24 ff ff       	call   c00007b2 <strcmp>
c000e389:	83 c4 10             	add    esp,0x10
c000e38c:	85 c0                	test   eax,eax
c000e38e:	0f 94 c0             	sete   al
c000e391:	84 c0                	test   al,al
c000e393:	74 07                	je     c000e39c <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e395:	b8 cc 5f 02 c0       	mov    eax,0xc0025fcc
c000e39a:	eb 4d                	jmp    c000e3e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e39c:	83 ec 08             	sub    esp,0x8
c000e39f:	68 55 97 02 c0       	push   0xc0029755
c000e3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a8:	e8 05 24 ff ff       	call   c00007b2 <strcmp>
c000e3ad:	83 c4 10             	add    esp,0x10
c000e3b0:	85 c0                	test   eax,eax
c000e3b2:	0f 94 c0             	sete   al
c000e3b5:	84 c0                	test   al,al
c000e3b7:	74 07                	je     c000e3c0 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3b9:	b8 cc da 02 c0       	mov    eax,0xc002dacc
c000e3be:	eb 29                	jmp    c000e3e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3c0:	83 ec 08             	sub    esp,0x8
c000e3c3:	68 62 97 02 c0       	push   0xc0029762
c000e3c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3cc:	e8 e1 23 ff ff       	call   c00007b2 <strcmp>
c000e3d1:	83 c4 10             	add    esp,0x10
c000e3d4:	85 c0                	test   eax,eax
c000e3d6:	0f 94 c0             	sete   al
c000e3d9:	84 c0                	test   al,al
c000e3db:	74 07                	je     c000e3e4 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3dd:	b8 cd da 02 c0       	mov    eax,0xc002dacd
c000e3e2:	eb 05                	jmp    c000e3e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3e4:	b8 00 00 00 00       	mov    eax,0x0
c000e3e9:	83 c4 0c             	add    esp,0xc
c000e3ec:	c3                   	ret    
c000e3ed:	90                   	nop

c000e3ee <Computer::close(int, int, void*)>:
c000e3ee:	57                   	push   edi
c000e3ef:	56                   	push   esi
c000e3f0:	53                   	push   ebx
c000e3f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3fd:	83 ec 0c             	sub    esp,0xc
c000e400:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e406:	e8 83 5a 00 00       	call   c0013e8e <Device::closeAll()>
c000e40b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e411:	83 c4 10             	add    esp,0x10
c000e414:	8b 10                	mov    edx,DWORD PTR [eax]
c000e416:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e41a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e422:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e42a:	5b                   	pop    ebx
c000e42b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e42e:	5e                   	pop    esi
c000e42f:	5f                   	pop    edi
c000e430:	ff e0                	jmp    eax

c000e432 <Krnl::firstTask()>:
c000e432:	53                   	push   ebx
c000e433:	83 ec 14             	sub    esp,0x14
c000e436:	fb                   	sti    
c000e437:	68 3f 07 00 00       	push   0x73f
c000e43c:	e8 e1 11 00 00       	call   c000f622 <malloc>
c000e441:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e448:	89 c3                	mov    ebx,eax
c000e44a:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c000e450:	68 6f 97 02 c0       	push   0xc002976f
c000e455:	6a 01                	push   0x1
c000e457:	50                   	push   eax
c000e458:	e8 97 ee 00 00       	call   c001d2f4 <Process::Process(bool, char const*, Process*, char**)>
c000e45d:	83 c4 20             	add    esp,0x20
c000e460:	68 ff 00 00 00       	push   0xff
c000e465:	6a 00                	push   0x0
c000e467:	68 b7 ef 00 c0       	push   0xc000efb7
c000e46c:	53                   	push   ebx
c000e46d:	e8 80 f1 00 00       	call   c001d5f2 <Process::createThread(void (*)(void*), void*, int)>
c000e472:	6a 7a                	push   0x7a
c000e474:	6a 00                	push   0x0
c000e476:	68 50 de 01 c0       	push   0xc001de50
c000e47b:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c000e481:	e8 6c f1 00 00       	call   c001d5f2 <Process::createThread(void (*)(void*), void*, int)>
c000e486:	83 c4 20             	add    esp,0x20
c000e489:	a3 e8 0f 03 c0       	mov    ds:0xc0030fe8,eax
c000e48e:	c6 05 cd da 02 c0 01 	mov    BYTE PTR ds:0xc002dacd,0x1
c000e495:	e8 37 fd 00 00       	call   c001e1d1 <Vm::initialise8086()>
c000e49a:	e8 d7 47 00 00       	call   c0012c76 <Fs::initVFS()>
c000e49f:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000e4a4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ac:	6a 00                	push   0x0
c000e4ae:	6a 00                	push   0x0
c000e4b0:	6a 00                	push   0x0
c000e4b2:	50                   	push   eax
c000e4b3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4b6:	e8 27 d8 00 00       	call   c001bce2 <Sys::loadSyscalls()>
c000e4bb:	e8 6c b8 00 00       	call   c0019d2c <Krnl::loadSystemEnv()>
c000e4c0:	83 c4 0c             	add    esp,0xc
c000e4c3:	6a 3a                	push   0x3a
c000e4c5:	68 7c 97 02 c0       	push   0xc002977c
c000e4ca:	68 85 97 02 c0       	push   0xc0029785
c000e4cf:	e8 7e c5 00 00       	call   c001aa52 <Reg::readIntWithDefault(char*, char*, int)>
c000e4d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d7:	e8 82 52 00 00       	call   c001375e <User::loadClockSettings(int)>
c000e4dc:	58                   	pop    eax
c000e4dd:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000e4e2:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4e8:	e8 75 59 00 00       	call   c0013e62 <Device::loadDriversForAll()>
c000e4ed:	5a                   	pop    edx
c000e4ee:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c000e4f4:	59                   	pop    ecx
c000e4f5:	6a 01                	push   0x1
c000e4f7:	68 8d 97 02 c0       	push   0xc002978d
c000e4fc:	e8 4c e9 00 00       	call   c001ce4d <Thr::loadDLL(char const*, bool)>
c000e501:	5a                   	pop    edx
c000e502:	59                   	pop    ecx
c000e503:	53                   	push   ebx
c000e504:	50                   	push   eax
c000e505:	e8 52 eb 00 00       	call   c001d05c <Thr::executeDLL(unsigned long, void*)>
c000e50a:	83 c4 10             	add    esp,0x10
c000e50d:	83 ec 0c             	sub    esp,0xc
c000e510:	6a 02                	push   0x2
c000e512:	e8 3f f4 00 00       	call   c001d956 <blockTask(TaskState)>
c000e517:	83 c4 10             	add    esp,0x10
c000e51a:	eb f1                	jmp    c000e50d <Krnl::firstTask()+0xdb>

c000e51c <Computer::Computer()>:
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e523:	83 ec 08             	sub    esp,0x8
c000e526:	68 a9 97 02 c0       	push   0xc00297a9
c000e52b:	50                   	push   eax
c000e52c:	e8 d7 59 00 00       	call   c0013f08 <Device::Device(char const*)>
c000e531:	83 c4 10             	add    esp,0x10
c000e534:	ba 48 99 02 c0       	mov    edx,0xc0029948
c000e539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53d:	89 10                	mov    DWORD PTR [eax],edx
c000e53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e543:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e54d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e551:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e55f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e565:	83 ca 04             	or     edx,0x4
c000e568:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e572:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e578:	0f b6 d0             	movzx  edx,al
c000e57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e57f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e590:	0f b6 d0             	movzx  edx,al
c000e593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e597:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5a6:	8d 50 01             	lea    edx,[eax+0x1]
c000e5a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5ad:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5b3:	0f b6 d0             	movzx  edx,al
c000e5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ba:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5be:	83 e1 3f             	and    ecx,0x3f
c000e5c1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5cf:	0f b6 d0             	movzx  edx,al
c000e5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d6:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5e7:	0f b6 d0             	movzx  edx,al
c000e5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ee:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5fd:	8d 50 01             	lea    edx,[eax+0x1]
c000e600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e604:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e60a:	0f b6 d0             	movzx  edx,al
c000e60d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e611:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e615:	83 e1 3f             	and    ecx,0x3f
c000e618:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e620:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e626:	0f b6 d0             	movzx  edx,al
c000e629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62d:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e638:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e63e:	0f b6 d0             	movzx  edx,al
c000e641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e645:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e64e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e654:	8d 50 01             	lea    edx,[eax+0x1]
c000e657:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e65b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e661:	0f b6 d0             	movzx  edx,al
c000e664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e668:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e66c:	83 e1 3f             	and    ecx,0x3f
c000e66f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e673:	90                   	nop
c000e674:	83 c4 0c             	add    esp,0xc
c000e677:	c3                   	ret    

c000e678 <Computer::setBootMessage(char const*)>:
c000e678:	c3                   	ret    
c000e679:	90                   	nop

c000e67a <Computer::detectFeatures()>:
c000e67a:	55                   	push   ebp
c000e67b:	57                   	push   edi
c000e67c:	56                   	push   esi
c000e67d:	53                   	push   ebx
c000e67e:	83 ec 1c             	sub    esp,0x1c
c000e681:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e685:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e68f:	e8 50 1c ff ff       	call   c00002e4 <detectCPUID>
c000e694:	85 c0                	test   eax,eax
c000e696:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e69c:	0f 95 c2             	setne  dl
c000e69f:	83 e0 fd             	and    eax,0xfffffffd
c000e6a2:	d1 e2                	shl    edx,1
c000e6a4:	09 d0                	or     eax,edx
c000e6a6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6ac:	a8 02                	test   al,0x2
c000e6ae:	75 46                	jne    c000e6f6 <Computer::detectFeatures()+0x7c>
c000e6b0:	f6 05 e1 da 02 c0 04 	test   BYTE PTR ds:0xc002dae1,0x4
c000e6b7:	74 07                	je     c000e6c0 <Computer::detectFeatures()+0x46>
c000e6b9:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6c0:	e8 51 77 01 00       	call   c0025e16 <x87Detect>
c000e6c5:	83 e0 01             	and    eax,0x1
c000e6c8:	c1 e0 04             	shl    eax,0x4
c000e6cb:	88 c2                	mov    dl,al
c000e6cd:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6d3:	83 e0 ef             	and    eax,0xffffffef
c000e6d6:	09 d0                	or     eax,edx
c000e6d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6de:	a8 10                	test   al,0x10
c000e6e0:	0f 85 2a 01 00 00    	jne    c000e810 <Computer::detectFeatures()+0x196>
c000e6e6:	84 c0                	test   al,al
c000e6e8:	0f 88 45 01 00 00    	js     c000e833 <Computer::detectFeatures()+0x1b9>
c000e6ee:	83 c4 1c             	add    esp,0x1c
c000e6f1:	5b                   	pop    ebx
c000e6f2:	5e                   	pop    esi
c000e6f3:	5f                   	pop    edi
c000e6f4:	5d                   	pop    ebp
c000e6f5:	c3                   	ret    
c000e6f6:	83 ec 0c             	sub    esp,0xc
c000e6f9:	6a 20                	push   0x20
c000e6fb:	e8 ee 9f 00 00       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c000e700:	83 e0 01             	and    eax,0x1
c000e703:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e70a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e710:	83 e0 f7             	and    eax,0xfffffff7
c000e713:	09 d0                	or     eax,edx
c000e715:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e722:	e8 c7 9f 00 00       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c000e727:	83 e0 01             	and    eax,0x1
c000e72a:	88 c2                	mov    dl,al
c000e72c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e732:	83 e0 fe             	and    eax,0xfffffffe
c000e735:	09 d0                	or     eax,edx
c000e737:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e73d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e744:	e8 a5 9f 00 00       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c000e749:	c1 e0 07             	shl    eax,0x7
c000e74c:	88 c2                	mov    dl,al
c000e74e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e754:	83 e0 7f             	and    eax,0x7f
c000e757:	09 d0                	or     eax,edx
c000e759:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e75f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e766:	e8 83 9f 00 00       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	83 e0 01             	and    eax,0x1
c000e771:	c1 e0 05             	shl    eax,0x5
c000e774:	88 c2                	mov    dl,al
c000e776:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e77c:	83 e0 df             	and    eax,0xffffffdf
c000e77f:	09 d0                	or     eax,edx
c000e781:	f7 05 e0 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dae0,0x401
c000e78b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e791:	0f 84 c2 00 00 00    	je     c000e859 <Computer::detectFeatures()+0x1df>
c000e797:	83 e0 fe             	and    eax,0xfffffffe
c000e79a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7a0:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7a6:	88 c2                	mov    dl,al
c000e7a8:	83 e2 09             	and    edx,0x9
c000e7ab:	fe ca                	dec    dl
c000e7ad:	75 09                	jne    c000e7b8 <Computer::detectFeatures()+0x13e>
c000e7af:	83 e0 fe             	and    eax,0xfffffffe
c000e7b2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7bf:	50                   	push   eax
c000e7c0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7c4:	55                   	push   ebp
c000e7c5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7c9:	57                   	push   edi
c000e7ca:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7ce:	56                   	push   esi
c000e7cf:	68 00 00 00 80       	push   0x80000000
c000e7d4:	e8 91 9e 00 00       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7d9:	83 c4 20             	add    esp,0x20
c000e7dc:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7e7:	0f 86 c3 fe ff ff    	jbe    c000e6b0 <Computer::detectFeatures()+0x36>
c000e7ed:	83 ec 0c             	sub    esp,0xc
c000e7f0:	50                   	push   eax
c000e7f1:	55                   	push   ebp
c000e7f2:	57                   	push   edi
c000e7f3:	56                   	push   esi
c000e7f4:	68 01 00 00 80       	push   0x80000001
c000e7f9:	e8 6c 9e 00 00       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7fe:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e808:	83 c4 20             	add    esp,0x20
c000e80b:	e9 a0 fe ff ff       	jmp    c000e6b0 <Computer::detectFeatures()+0x36>
c000e810:	e8 bb 75 01 00       	call   c0025dd0 <absolutelyNoChanceInHell>
c000e815:	88 c2                	mov    dl,al
c000e817:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e81d:	c1 e2 07             	shl    edx,0x7
c000e820:	83 e0 7f             	and    eax,0x7f
c000e823:	09 d0                	or     eax,edx
c000e825:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e82b:	84 c0                	test   al,al
c000e82d:	0f 89 bb fe ff ff    	jns    c000e6ee <Computer::detectFeatures()+0x74>
c000e833:	e8 78 75 01 00       	call   c0025db0 <avxDetect>
c000e838:	83 e0 01             	and    eax,0x1
c000e83b:	c1 e0 05             	shl    eax,0x5
c000e83e:	88 c2                	mov    dl,al
c000e840:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e846:	83 e0 df             	and    eax,0xffffffdf
c000e849:	09 d0                	or     eax,edx
c000e84b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e851:	83 c4 1c             	add    esp,0x1c
c000e854:	5b                   	pop    ebx
c000e855:	5e                   	pop    esi
c000e856:	5f                   	pop    edi
c000e857:	5d                   	pop    ebp
c000e858:	c3                   	ret    
c000e859:	83 ec 0c             	sub    esp,0xc
c000e85c:	68 00 02 00 00       	push   0x200
c000e861:	e8 88 9e 00 00       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c000e866:	83 c4 10             	add    esp,0x10
c000e869:	83 e0 01             	and    eax,0x1
c000e86c:	88 c2                	mov    dl,al
c000e86e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e874:	83 e0 fe             	and    eax,0xfffffffe
c000e877:	09 d0                	or     eax,edx
c000e879:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e87f:	e9 1c ff ff ff       	jmp    c000e7a0 <Computer::detectFeatures()+0x126>

c000e884 <Computer::displayFeatures()>:
c000e884:	53                   	push   ebx
c000e885:	83 ec 14             	sub    esp,0x14
c000e888:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e88c:	68 b9 97 02 c0       	push   0xc00297b9
c000e891:	e8 5b 40 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e896:	83 c4 10             	add    esp,0x10
c000e899:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e8a0:	0f 85 73 02 00 00    	jne    c000eb19 <Computer::displayFeatures()+0x295>
c000e8a6:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e8ab:	83 ec 08             	sub    esp,0x8
c000e8ae:	50                   	push   eax
c000e8af:	68 cc 97 02 c0       	push   0xc00297cc
c000e8b4:	e8 38 40 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e8b9:	83 c4 10             	add    esp,0x10
c000e8bc:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8c3:	0f 85 8c 02 00 00    	jne    c000eb55 <Computer::displayFeatures()+0x2d1>
c000e8c9:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e8ce:	83 ec 08             	sub    esp,0x8
c000e8d1:	50                   	push   eax
c000e8d2:	68 dd 97 02 c0       	push   0xc00297dd
c000e8d7:	e8 15 40 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e8dc:	83 c4 10             	add    esp,0x10
c000e8df:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8e6:	0f 85 5f 02 00 00    	jne    c000eb4b <Computer::displayFeatures()+0x2c7>
c000e8ec:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e8f1:	83 ec 08             	sub    esp,0x8
c000e8f4:	50                   	push   eax
c000e8f5:	68 ee 97 02 c0       	push   0xc00297ee
c000e8fa:	e8 f2 3f 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e8ff:	83 c4 10             	add    esp,0x10
c000e902:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e909:	0f 85 32 02 00 00    	jne    c000eb41 <Computer::displayFeatures()+0x2bd>
c000e90f:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e914:	83 ec 08             	sub    esp,0x8
c000e917:	50                   	push   eax
c000e918:	68 ff 97 02 c0       	push   0xc00297ff
c000e91d:	e8 cf 3f 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e922:	83 c4 10             	add    esp,0x10
c000e925:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e92c:	0f 85 05 02 00 00    	jne    c000eb37 <Computer::displayFeatures()+0x2b3>
c000e932:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e937:	83 ec 08             	sub    esp,0x8
c000e93a:	50                   	push   eax
c000e93b:	68 10 98 02 c0       	push   0xc0029810
c000e940:	e8 ac 3f 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e945:	83 c4 10             	add    esp,0x10
c000e948:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e94f:	0f 85 d8 01 00 00    	jne    c000eb2d <Computer::displayFeatures()+0x2a9>
c000e955:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e95a:	83 ec 08             	sub    esp,0x8
c000e95d:	50                   	push   eax
c000e95e:	68 21 98 02 c0       	push   0xc0029821
c000e963:	e8 89 3f 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e968:	83 c4 10             	add    esp,0x10
c000e96b:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e972:	0f 85 ab 01 00 00    	jne    c000eb23 <Computer::displayFeatures()+0x29f>
c000e978:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e97d:	83 ec 08             	sub    esp,0x8
c000e980:	50                   	push   eax
c000e981:	68 32 98 02 c0       	push   0xc0029832
c000e986:	e8 66 3f 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e98b:	83 c4 10             	add    esp,0x10
c000e98e:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e995:	0f 88 1b 02 00 00    	js     c000ebb6 <Computer::displayFeatures()+0x332>
c000e99b:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e9a0:	83 ec 08             	sub    esp,0x8
c000e9a3:	50                   	push   eax
c000e9a4:	68 43 98 02 c0       	push   0xc0029843
c000e9a9:	e8 43 3f 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e9ae:	83 c4 10             	add    esp,0x10
c000e9b1:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9b8:	0f 85 a1 01 00 00    	jne    c000eb5f <Computer::displayFeatures()+0x2db>
c000e9be:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e9c3:	83 ec 08             	sub    esp,0x8
c000e9c6:	50                   	push   eax
c000e9c7:	68 54 98 02 c0       	push   0xc0029854
c000e9cc:	e8 20 3f 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e9d1:	83 c4 10             	add    esp,0x10
c000e9d4:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9db:	0f 85 cb 01 00 00    	jne    c000ebac <Computer::displayFeatures()+0x328>
c000e9e1:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000e9e6:	83 ec 08             	sub    esp,0x8
c000e9e9:	50                   	push   eax
c000e9ea:	68 65 98 02 c0       	push   0xc0029865
c000e9ef:	e8 fd 3e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000e9f4:	83 c4 10             	add    esp,0x10
c000e9f7:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e9fe:	0f 85 9e 01 00 00    	jne    c000eba2 <Computer::displayFeatures()+0x31e>
c000ea04:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea09:	83 ec 08             	sub    esp,0x8
c000ea0c:	50                   	push   eax
c000ea0d:	68 76 98 02 c0       	push   0xc0029876
c000ea12:	e8 da 3e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000ea17:	83 c4 10             	add    esp,0x10
c000ea1a:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea21:	0f 85 71 01 00 00    	jne    c000eb98 <Computer::displayFeatures()+0x314>
c000ea27:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea2c:	83 ec 08             	sub    esp,0x8
c000ea2f:	50                   	push   eax
c000ea30:	68 87 98 02 c0       	push   0xc0029887
c000ea35:	e8 b7 3e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000ea3a:	83 c4 10             	add    esp,0x10
c000ea3d:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea44:	0f 85 44 01 00 00    	jne    c000eb8e <Computer::displayFeatures()+0x30a>
c000ea4a:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea4f:	83 ec 08             	sub    esp,0x8
c000ea52:	50                   	push   eax
c000ea53:	68 98 98 02 c0       	push   0xc0029898
c000ea58:	e8 94 3e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000ea5d:	83 c4 10             	add    esp,0x10
c000ea60:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea67:	0f 85 17 01 00 00    	jne    c000eb84 <Computer::displayFeatures()+0x300>
c000ea6d:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea72:	83 ec 08             	sub    esp,0x8
c000ea75:	50                   	push   eax
c000ea76:	68 a9 98 02 c0       	push   0xc00298a9
c000ea7b:	e8 71 3e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000ea80:	83 c4 10             	add    esp,0x10
c000ea83:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea8a:	0f 85 ea 00 00 00    	jne    c000eb7a <Computer::displayFeatures()+0x2f6>
c000ea90:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000ea95:	83 ec 08             	sub    esp,0x8
c000ea98:	50                   	push   eax
c000ea99:	68 ba 98 02 c0       	push   0xc00298ba
c000ea9e:	e8 4e 3e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eaad:	0f 88 0d 01 00 00    	js     c000ebc0 <Computer::displayFeatures()+0x33c>
c000eab3:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000eab8:	83 ec 08             	sub    esp,0x8
c000eabb:	50                   	push   eax
c000eabc:	68 cb 98 02 c0       	push   0xc00298cb
c000eac1:	e8 2b 3e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000eac6:	83 c4 10             	add    esp,0x10
c000eac9:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ead0:	0f 85 9a 00 00 00    	jne    c000eb70 <Computer::displayFeatures()+0x2ec>
c000ead6:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000eadb:	83 ec 08             	sub    esp,0x8
c000eade:	50                   	push   eax
c000eadf:	68 dc 98 02 c0       	push   0xc00298dc
c000eae4:	e8 08 3e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000eae9:	83 c4 10             	add    esp,0x10
c000eaec:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eaf3:	75 74                	jne    c000eb69 <Computer::displayFeatures()+0x2e5>
c000eaf5:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c000eafa:	83 ec 08             	sub    esp,0x8
c000eafd:	50                   	push   eax
c000eafe:	68 ed 98 02 c0       	push   0xc00298ed
c000eb03:	e8 e9 3d 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000eb08:	c7 44 24 20 3b b2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b23b
c000eb10:	83 c4 18             	add    esp,0x18
c000eb13:	5b                   	pop    ebx
c000eb14:	e9 d8 3d 00 00       	jmp    c00128f1 <Dbg::kprintf(char const*, ...)>
c000eb19:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb1e:	e9 88 fd ff ff       	jmp    c000e8ab <Computer::displayFeatures()+0x27>
c000eb23:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb28:	e9 50 fe ff ff       	jmp    c000e97d <Computer::displayFeatures()+0xf9>
c000eb2d:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb32:	e9 23 fe ff ff       	jmp    c000e95a <Computer::displayFeatures()+0xd6>
c000eb37:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb3c:	e9 f6 fd ff ff       	jmp    c000e937 <Computer::displayFeatures()+0xb3>
c000eb41:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb46:	e9 c9 fd ff ff       	jmp    c000e914 <Computer::displayFeatures()+0x90>
c000eb4b:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb50:	e9 9c fd ff ff       	jmp    c000e8f1 <Computer::displayFeatures()+0x6d>
c000eb55:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb5a:	e9 6f fd ff ff       	jmp    c000e8ce <Computer::displayFeatures()+0x4a>
c000eb5f:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb64:	e9 5a fe ff ff       	jmp    c000e9c3 <Computer::displayFeatures()+0x13f>
c000eb69:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb6e:	eb 8a                	jmp    c000eafa <Computer::displayFeatures()+0x276>
c000eb70:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb75:	e9 61 ff ff ff       	jmp    c000eadb <Computer::displayFeatures()+0x257>
c000eb7a:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb7f:	e9 11 ff ff ff       	jmp    c000ea95 <Computer::displayFeatures()+0x211>
c000eb84:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb89:	e9 e4 fe ff ff       	jmp    c000ea72 <Computer::displayFeatures()+0x1ee>
c000eb8e:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb93:	e9 b7 fe ff ff       	jmp    c000ea4f <Computer::displayFeatures()+0x1cb>
c000eb98:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eb9d:	e9 8a fe ff ff       	jmp    c000ea2c <Computer::displayFeatures()+0x1a8>
c000eba2:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000eba7:	e9 5d fe ff ff       	jmp    c000ea09 <Computer::displayFeatures()+0x185>
c000ebac:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000ebb1:	e9 30 fe ff ff       	jmp    c000e9e6 <Computer::displayFeatures()+0x162>
c000ebb6:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000ebbb:	e9 e0 fd ff ff       	jmp    c000e9a0 <Computer::displayFeatures()+0x11c>
c000ebc0:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c000ebc5:	e9 ee fe ff ff       	jmp    c000eab8 <Computer::displayFeatures()+0x234>

c000ebca <Computer::rdmsr(unsigned int)>:
c000ebca:	83 ec 0c             	sub    esp,0xc
c000ebcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebd8:	74 0a                	je     c000ebe4 <Computer::rdmsr(unsigned int)+0x1a>
c000ebda:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebde:	0f 32                	rdmsr  
c000ebe0:	83 c4 0c             	add    esp,0xc
c000ebe3:	c3                   	ret    
c000ebe4:	83 ec 0c             	sub    esp,0xc
c000ebe7:	68 fe 98 02 c0       	push   0xc00298fe
c000ebec:	e8 74 b2 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c000ebf1:	83 c4 10             	add    esp,0x10
c000ebf4:	eb e4                	jmp    c000ebda <Computer::rdmsr(unsigned int)+0x10>

c000ebf6 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebf6:	57                   	push   edi
c000ebf7:	56                   	push   esi
c000ebf8:	52                   	push   edx
c000ebf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebfd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec01:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec05:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec0c:	74 0e                	je     c000ec1c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec12:	89 f0                	mov    eax,esi
c000ec14:	89 fa                	mov    edx,edi
c000ec16:	0f 30                	wrmsr  
c000ec18:	58                   	pop    eax
c000ec19:	5e                   	pop    esi
c000ec1a:	5f                   	pop    edi
c000ec1b:	c3                   	ret    
c000ec1c:	83 ec 0c             	sub    esp,0xc
c000ec1f:	68 04 99 02 c0       	push   0xc0029904
c000ec24:	e8 3c b2 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c000ec29:	83 c4 10             	add    esp,0x10
c000ec2c:	eb e0                	jmp    c000ec0e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec2e <Computer::nmiEnabled()>:
c000ec2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec32:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec38:	c3                   	ret    
c000ec39:	90                   	nop

c000ec3a <Computer::readCMOS(unsigned char)>:
c000ec3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec3e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec45:	19 c0                	sbb    eax,eax
c000ec47:	83 e0 80             	and    eax,0xffffff80
c000ec4a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec4e:	e6 70                	out    0x70,al
c000ec50:	e4 71                	in     al,0x71
c000ec52:	c3                   	ret    
c000ec53:	90                   	nop

c000ec54 <Computer::enableNMI(bool)>:
c000ec54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec5c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec62:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec6a:	eb ce                	jmp    c000ec3a <Computer::readCMOS(unsigned char)>

c000ec6c <Computer::open(int, int, void*)>:
c000ec6c:	56                   	push   esi
c000ec6d:	53                   	push   ebx
c000ec6e:	83 ec 10             	sub    esp,0x10
c000ec71:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec75:	f6 05 e0 da 02 c0 04 	test   BYTE PTR ds:0xc002dae0,0x4
c000ec7c:	68 68 12 00 00       	push   0x1268
c000ec81:	0f 94 05 04 ca 02 c0 	sete   BYTE PTR ds:0xc002ca04
c000ec88:	e8 95 09 00 00       	call   c000f622 <malloc>
c000ec8d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec90:	89 c6                	mov    esi,eax
c000ec92:	e8 27 8f 00 00       	call   c0017bbe <ACPI::ACPI()>
c000ec97:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec9d:	58                   	pop    eax
c000ec9e:	5a                   	pop    edx
c000ec9f:	56                   	push   esi
c000eca0:	53                   	push   ebx
c000eca1:	e8 72 50 00 00       	call   c0013d18 <Device::addChild(Device*)>
c000eca6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eca9:	e8 cc f9 ff ff       	call   c000e67a <Computer::detectFeatures()>
c000ecae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecb1:	e8 ce fb ff ff       	call   c000e884 <Computer::displayFeatures()>
c000ecb6:	59                   	pop    ecx
c000ecb7:	5e                   	pop    esi
c000ecb8:	6a 01                	push   0x1
c000ecba:	53                   	push   ebx
c000ecbb:	e8 94 ff ff ff       	call   c000ec54 <Computer::enableNMI(bool)>
c000ecc0:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecc7:	e8 56 09 00 00       	call   c000f622 <malloc>
c000eccc:	89 04 24             	mov    DWORD PTR [esp],eax
c000eccf:	89 c6                	mov    esi,eax
c000ecd1:	e8 d0 9a 00 00       	call   c00187a6 <CPU::CPU()>
c000ecd6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ecdc:	58                   	pop    eax
c000ecdd:	5a                   	pop    edx
c000ecde:	56                   	push   esi
c000ecdf:	53                   	push   ebx
c000ece0:	e8 33 50 00 00       	call   c0013d18 <Device::addChild(Device*)>
c000ece5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eceb:	8b 10                	mov    edx,DWORD PTR [eax]
c000eced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ecf1:	6a 00                	push   0x0
c000ecf3:	6a 00                	push   0x0
c000ecf5:	50                   	push   eax
c000ecf6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecf9:	83 c4 20             	add    esp,0x20
c000ecfc:	e8 9d 55 00 00       	call   c001429e <setupFPU()>
c000ed01:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ed07:	85 c0                	test   eax,eax
c000ed09:	74 1f                	je     c000ed2a <Computer::open(int, int, void*)+0xbe>
c000ed0b:	83 ec 08             	sub    esp,0x8
c000ed0e:	50                   	push   eax
c000ed0f:	53                   	push   ebx
c000ed10:	e8 03 50 00 00       	call   c0013d18 <Device::addChild(Device*)>
c000ed15:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed1b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed1d:	6a 00                	push   0x0
c000ed1f:	6a 00                	push   0x0
c000ed21:	6a 00                	push   0x0
c000ed23:	50                   	push   eax
c000ed24:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed27:	83 c4 20             	add    esp,0x20
c000ed2a:	83 ec 0c             	sub    esp,0xc
c000ed2d:	68 32 e4 00 c0       	push   0xc000e432
c000ed32:	e8 bb e9 00 00       	call   c001d6f2 <setupMultitasking(void (*)())>
c000ed37:	83 c4 14             	add    esp,0x14
c000ed3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed3f:	5b                   	pop    ebx
c000ed40:	5e                   	pop    esi
c000ed41:	c3                   	ret    

c000ed42 <Computer::disableNMI()>:
c000ed42:	6a 00                	push   0x0
c000ed44:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed48:	e8 07 ff ff ff       	call   c000ec54 <Computer::enableNMI(bool)>
c000ed4d:	58                   	pop    eax
c000ed4e:	5a                   	pop    edx
c000ed4f:	c3                   	ret    

c000ed50 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed54:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed5b:	19 c0                	sbb    eax,eax
c000ed5d:	83 e0 80             	and    eax,0xffffff80
c000ed60:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed64:	e6 70                	out    0x70,al
c000ed66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed6a:	e6 71                	out    0x71,al
c000ed6c:	c3                   	ret    
c000ed6d:	90                   	nop

c000ed6e <Computer::handleNMI()>:
c000ed6e:	56                   	push   esi
c000ed6f:	53                   	push   ebx
c000ed70:	83 ec 10             	sub    esp,0x10
c000ed73:	e4 92                	in     al,0x92
c000ed75:	89 c6                	mov    esi,eax
c000ed77:	e4 61                	in     al,0x61
c000ed79:	68 0a 99 02 c0       	push   0xc002990a
c000ed7e:	88 c3                	mov    bl,al
c000ed80:	e8 6c 3b 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000ed85:	83 c4 10             	add    esp,0x10
c000ed88:	83 e6 10             	and    esi,0x10
c000ed8b:	75 0d                	jne    c000ed9a <Computer::handleNMI()+0x2c>
c000ed8d:	f6 c3 40             	test   bl,0x40
c000ed90:	75 1d                	jne    c000edaf <Computer::handleNMI()+0x41>
c000ed92:	84 db                	test   bl,bl
c000ed94:	78 2d                	js     c000edc3 <Computer::handleNMI()+0x55>
c000ed96:	58                   	pop    eax
c000ed97:	5b                   	pop    ebx
c000ed98:	5e                   	pop    esi
c000ed99:	c3                   	ret    
c000ed9a:	83 ec 0c             	sub    esp,0xc
c000ed9d:	68 1b 99 02 c0       	push   0xc002991b
c000eda2:	e8 be b0 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c000eda7:	83 c4 10             	add    esp,0x10
c000edaa:	f6 c3 40             	test   bl,0x40
c000edad:	74 e3                	je     c000ed92 <Computer::handleNMI()+0x24>
c000edaf:	83 ec 0c             	sub    esp,0xc
c000edb2:	68 28 99 02 c0       	push   0xc0029928
c000edb7:	e8 a9 b0 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c000edbc:	83 c4 10             	add    esp,0x10
c000edbf:	84 db                	test   bl,bl
c000edc1:	79 d3                	jns    c000ed96 <Computer::handleNMI()+0x28>
c000edc3:	c7 44 24 10 32 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029932
c000edcb:	5a                   	pop    edx
c000edcc:	5b                   	pop    ebx
c000edcd:	5e                   	pop    esi
c000edce:	e9 92 b0 00 00       	jmp    c0019e65 <Krnl::panic(char const*)>
c000edd3:	90                   	nop

c000edd4 <Computer::setDiskActivityLight(int, bool)>:
c000edd4:	56                   	push   esi
c000edd5:	53                   	push   ebx
c000edd6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000edda:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eddf:	77 1b                	ja     c000edfc <Computer::setDiskActivityLight(int, bool)+0x28>
c000ede1:	e4 92                	in     al,0x92
c000ede3:	bb 40 00 00 00       	mov    ebx,0x40
c000ede8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000edec:	89 da                	mov    edx,ebx
c000edee:	d3 e2                	shl    edx,cl
c000edf0:	89 f1                	mov    ecx,esi
c000edf2:	f7 d2                	not    edx
c000edf4:	d3 e3                	shl    ebx,cl
c000edf6:	21 d0                	and    eax,edx
c000edf8:	09 d8                	or     eax,ebx
c000edfa:	e6 92                	out    0x92,al
c000edfc:	5b                   	pop    ebx
c000edfd:	5e                   	pop    esi
c000edfe:	c3                   	ret    
c000edff:	90                   	nop

c000ee00 <GDTEntry::setBase(unsigned int)>:
c000ee00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee08:	89 c1                	mov    ecx,eax
c000ee0a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee0e:	c1 e9 10             	shr    ecx,0x10
c000ee11:	c1 e8 18             	shr    eax,0x18
c000ee14:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee17:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee1a:	c3                   	ret    
c000ee1b:	90                   	nop

c000ee1c <GDTEntry::setLimit(unsigned int)>:
c000ee1c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee24:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee27:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee2a:	83 e2 f0             	and    edx,0xfffffff0
c000ee2d:	c1 e8 10             	shr    eax,0x10
c000ee30:	83 e0 0f             	and    eax,0xf
c000ee33:	09 d0                	or     eax,edx
c000ee35:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee38:	c3                   	ret    
c000ee39:	90                   	nop

c000ee3a <GDT::GDT()>:
c000ee3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee3e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee4e:	90                   	nop
c000ee4f:	c3                   	ret    

c000ee50 <GDT::addEntry(GDTEntry)>:
c000ee50:	53                   	push   ebx
c000ee51:	83 ec 0c             	sub    esp,0xc
c000ee54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee58:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee5a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee61:	52                   	push   edx
c000ee62:	50                   	push   eax
c000ee63:	68 6c 99 02 c0       	push   0xc002996c
c000ee68:	e8 84 3a 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000ee6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee73:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee77:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee7b:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee7f:	8d 50 01             	lea    edx,[eax+0x1]
c000ee82:	c1 e0 03             	shl    eax,0x3
c000ee85:	89 13                	mov    DWORD PTR [ebx],edx
c000ee87:	83 c4 18             	add    esp,0x18
c000ee8a:	5b                   	pop    ebx
c000ee8b:	c3                   	ret    

c000ee8c <GDT::getNumberOfEntries()>:
c000ee8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee90:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee92:	c3                   	ret    
c000ee93:	90                   	nop

c000ee94 <GDT::flush()>:
c000ee94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee98:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee9a:	83 c0 04             	add    eax,0x4
c000ee9d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000eea4:	a3 d2 da 02 c0       	mov    ds:0xc002dad2,eax
c000eea9:	66 89 15 d0 da 02 c0 	mov    WORD PTR ds:0xc002dad0,dx
c000eeb0:	e9 93 15 ff ff       	jmp    c0000448 <loadGDT>
c000eeb5:	90                   	nop

c000eeb6 <GDT::setup()>:
c000eeb6:	55                   	push   ebp
c000eeb7:	57                   	push   edi
c000eeb8:	56                   	push   esi
c000eeb9:	53                   	push   ebx
c000eeba:	83 ec 3c             	sub    esp,0x3c
c000eebd:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eec1:	6a 00                	push   0x0
c000eec3:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eec7:	53                   	push   ebx
c000eec8:	e8 33 ff ff ff       	call   c000ee00 <GDTEntry::setBase(unsigned int)>
c000eecd:	6a 00                	push   0x0
c000eecf:	53                   	push   ebx
c000eed0:	e8 47 ff ff ff       	call   c000ee1c <GDTEntry::setLimit(unsigned int)>
c000eed5:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eedd:	6a 00                	push   0x0
c000eedf:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eee3:	53                   	push   ebx
c000eee4:	e8 17 ff ff ff       	call   c000ee00 <GDTEntry::setBase(unsigned int)>
c000eee9:	68 ff ff ff 00       	push   0xffffff
c000eeee:	53                   	push   ebx
c000eeef:	e8 28 ff ff ff       	call   c000ee1c <GDTEntry::setLimit(unsigned int)>
c000eef4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eef8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eefd:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ef02:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef06:	83 c4 20             	add    esp,0x20
c000ef09:	6a 00                	push   0x0
c000ef0b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef0f:	53                   	push   ebx
c000ef10:	e8 eb fe ff ff       	call   c000ee00 <GDTEntry::setBase(unsigned int)>
c000ef15:	68 ff ff ff 00       	push   0xffffff
c000ef1a:	53                   	push   ebx
c000ef1b:	e8 fc fe ff ff       	call   c000ee1c <GDTEntry::setLimit(unsigned int)>
c000ef20:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef24:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef28:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef2c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef30:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef34:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef39:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef3e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef42:	89 d8                	mov    eax,ebx
c000ef44:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef48:	80 cc 60             	or     ah,0x60
c000ef4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef4f:	83 c4 0c             	add    esp,0xc
c000ef52:	89 f8                	mov    eax,edi
c000ef54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef58:	80 cc 60             	or     ah,0x60
c000ef5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef5f:	89 c7                	mov    edi,eax
c000ef61:	55                   	push   ebp
c000ef62:	e8 e9 fe ff ff       	call   c000ee50 <GDT::addEntry(GDTEntry)>
c000ef67:	83 c4 0c             	add    esp,0xc
c000ef6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef72:	55                   	push   ebp
c000ef73:	e8 d8 fe ff ff       	call   c000ee50 <GDT::addEntry(GDTEntry)>
c000ef78:	83 c4 0c             	add    esp,0xc
c000ef7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef7f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef83:	55                   	push   ebp
c000ef84:	e8 c7 fe ff ff       	call   c000ee50 <GDT::addEntry(GDTEntry)>
c000ef89:	83 c4 0c             	add    esp,0xc
c000ef8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef94:	53                   	push   ebx
c000ef95:	51                   	push   ecx
c000ef96:	55                   	push   ebp
c000ef97:	e8 b4 fe ff ff       	call   c000ee50 <GDT::addEntry(GDTEntry)>
c000ef9c:	83 c4 0c             	add    esp,0xc
c000ef9f:	57                   	push   edi
c000efa0:	56                   	push   esi
c000efa1:	55                   	push   ebp
c000efa2:	e8 a9 fe ff ff       	call   c000ee50 <GDT::addEntry(GDTEntry)>
c000efa7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efaa:	e8 e5 fe ff ff       	call   c000ee94 <GDT::flush()>
c000efaf:	83 c4 4c             	add    esp,0x4c
c000efb2:	5b                   	pop    ebx
c000efb3:	5e                   	pop    esi
c000efb4:	5f                   	pop    edi
c000efb5:	5d                   	pop    ebp
c000efb6:	c3                   	ret    

c000efb7 <idleFunction(void*)>:
c000efb7:	53                   	push   ebx
c000efb8:	83 ec 08             	sub    esp,0x8
c000efbb:	e8 02 e5 00 00       	call   c001d4c2 <unlockScheduler()>
c000efc0:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000efc5:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000efcb:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000efd2:	74 3c                	je     c000f010 <idleFunction(void*)+0x59>
c000efd4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efdb:	74 33                	je     c000f010 <idleFunction(void*)+0x59>
c000efdd:	31 db                	xor    ebx,ebx
c000efdf:	52                   	push   edx
c000efe0:	52                   	push   edx
c000efe1:	68 e1 00 00 00       	push   0xe1
c000efe6:	50                   	push   eax
c000efe7:	e8 de fb ff ff       	call   c000ebca <Computer::rdmsr(unsigned int)>
c000efec:	53                   	push   ebx
c000efed:	83 e0 02             	and    eax,0x2
c000eff0:	50                   	push   eax
c000eff1:	68 e1 00 00 00       	push   0xe1
c000eff6:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c000effc:	e8 f5 fb ff ff       	call   c000ebf6 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f001:	83 c4 20             	add    esp,0x20
c000f004:	e8 76 12 ff ff       	call   c000027f <doTPAUSE>
c000f009:	e8 42 8e 01 00       	call   c0027e50 <idleCommon()>
c000f00e:	eb f4                	jmp    c000f004 <idleFunction(void*)+0x4d>
c000f010:	fb                   	sti    
c000f011:	f4                   	hlt    
c000f012:	e8 39 8e 01 00       	call   c0027e50 <idleCommon()>
c000f017:	eb f7                	jmp    c000f010 <idleFunction(void*)+0x59>
c000f019:	90                   	nop

c000f01a <IDTEntry::IDTEntry(bool)>:
c000f01a:	83 ec 04             	sub    esp,0x4
c000f01d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f021:	88 04 24             	mov    BYTE PTR [esp],al
c000f024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f028:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f02e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f032:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f03d:	83 e2 f0             	and    edx,0xfffffff0
c000f040:	83 ca 0e             	or     edx,0xe
c000f043:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f04d:	83 e2 ef             	and    edx,0xffffffef
c000f050:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f053:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f057:	74 04                	je     c000f05d <IDTEntry::IDTEntry(bool)+0x43>
c000f059:	b2 03                	mov    dl,0x3
c000f05b:	eb 02                	jmp    c000f05f <IDTEntry::IDTEntry(bool)+0x45>
c000f05d:	b2 00                	mov    dl,0x0
c000f05f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f063:	83 e2 03             	and    edx,0x3
c000f066:	88 d1                	mov    cl,dl
c000f068:	c1 e1 05             	shl    ecx,0x5
c000f06b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f06e:	83 e2 9f             	and    edx,0xffffff9f
c000f071:	09 ca                	or     edx,ecx
c000f073:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f076:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f07a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f07d:	83 ca 80             	or     edx,0xffffff80
c000f080:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f083:	90                   	nop
c000f084:	83 c4 04             	add    esp,0x4
c000f087:	c3                   	ret    

c000f088 <IDTEntry::setOffset(unsigned int)>:
c000f088:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f090:	66 89 02             	mov    WORD PTR [edx],ax
c000f093:	c1 e8 10             	shr    eax,0x10
c000f096:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f09a:	c3                   	ret    
c000f09b:	90                   	nop

c000f09c <IDT::IDT()>:
c000f09c:	90                   	nop
c000f09d:	c3                   	ret    

c000f09e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f09e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a2:	83 c0 30             	add    eax,0x30
c000f0a5:	c3                   	ret    

c000f0a6 <IDT::addEntry(IDTEntry, int)>:
c000f0a6:	53                   	push   ebx
c000f0a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0b7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0ba:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0be:	5b                   	pop    ebx
c000f0bf:	c3                   	ret    

c000f0c0 <IDT::addEntry(int, void (*)(), bool)>:
c000f0c0:	53                   	push   ebx
c000f0c1:	83 ec 10             	sub    esp,0x10
c000f0c4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f0c9:	50                   	push   eax
c000f0ca:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f0ce:	53                   	push   ebx
c000f0cf:	e8 46 ff ff ff       	call   c000f01a <IDTEntry::IDTEntry(bool)>
c000f0d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0d8:	53                   	push   ebx
c000f0d9:	e8 aa ff ff ff       	call   c000f088 <IDTEntry::setOffset(unsigned int)>
c000f0de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0ee:	e8 b3 ff ff ff       	call   c000f0a6 <IDT::addEntry(IDTEntry, int)>
c000f0f3:	83 c4 30             	add    esp,0x30
c000f0f6:	5b                   	pop    ebx
c000f0f7:	c3                   	ret    

c000f0f8 <IDT::flush()>:
c000f0f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0fc:	66 c7 05 d8 da 02 c0 ff 07 	mov    WORD PTR ds:0xc002dad8,0x7ff
c000f105:	a3 da da 02 c0       	mov    ds:0xc002dada,eax
c000f10a:	0f 01 1d d8 da 02 c0 	lidtd  ds:0xc002dad8
c000f111:	c3                   	ret    

c000f112 <IDT::setup()>:
c000f112:	57                   	push   edi
c000f113:	56                   	push   esi
c000f114:	53                   	push   ebx
c000f115:	83 ec 10             	sub    esp,0x10
c000f118:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f11c:	6a 00                	push   0x0
c000f11e:	68 68 04 00 c0       	push   0xc0000468
c000f123:	6a 00                	push   0x0
c000f125:	53                   	push   ebx
c000f126:	e8 95 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f12b:	6a 00                	push   0x0
c000f12d:	68 78 04 00 c0       	push   0xc0000478
c000f132:	6a 01                	push   0x1
c000f134:	53                   	push   ebx
c000f135:	e8 86 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f13a:	83 c4 20             	add    esp,0x20
c000f13d:	6a 00                	push   0x0
c000f13f:	68 82 04 00 c0       	push   0xc0000482
c000f144:	6a 02                	push   0x2
c000f146:	53                   	push   ebx
c000f147:	e8 74 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f14c:	6a 00                	push   0x0
c000f14e:	68 8c 04 00 c0       	push   0xc000048c
c000f153:	6a 03                	push   0x3
c000f155:	53                   	push   ebx
c000f156:	e8 65 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f15b:	83 c4 20             	add    esp,0x20
c000f15e:	6a 00                	push   0x0
c000f160:	68 96 04 00 c0       	push   0xc0000496
c000f165:	6a 04                	push   0x4
c000f167:	53                   	push   ebx
c000f168:	e8 53 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f16d:	6a 00                	push   0x0
c000f16f:	68 a0 04 00 c0       	push   0xc00004a0
c000f174:	6a 05                	push   0x5
c000f176:	53                   	push   ebx
c000f177:	e8 44 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f17c:	83 c4 20             	add    esp,0x20
c000f17f:	6a 00                	push   0x0
c000f181:	68 aa 04 00 c0       	push   0xc00004aa
c000f186:	6a 06                	push   0x6
c000f188:	53                   	push   ebx
c000f189:	e8 32 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f18e:	6a 00                	push   0x0
c000f190:	68 b4 04 00 c0       	push   0xc00004b4
c000f195:	6a 07                	push   0x7
c000f197:	53                   	push   ebx
c000f198:	e8 23 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f19d:	83 c4 20             	add    esp,0x20
c000f1a0:	6a 00                	push   0x0
c000f1a2:	68 be 04 00 c0       	push   0xc00004be
c000f1a7:	6a 08                	push   0x8
c000f1a9:	53                   	push   ebx
c000f1aa:	e8 11 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f1af:	6a 00                	push   0x0
c000f1b1:	68 c6 04 00 c0       	push   0xc00004c6
c000f1b6:	6a 09                	push   0x9
c000f1b8:	53                   	push   ebx
c000f1b9:	e8 02 ff ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f1be:	83 c4 20             	add    esp,0x20
c000f1c1:	6a 00                	push   0x0
c000f1c3:	68 d0 04 00 c0       	push   0xc00004d0
c000f1c8:	6a 0a                	push   0xa
c000f1ca:	53                   	push   ebx
c000f1cb:	e8 f0 fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f1d0:	6a 00                	push   0x0
c000f1d2:	68 d8 04 00 c0       	push   0xc00004d8
c000f1d7:	6a 0b                	push   0xb
c000f1d9:	53                   	push   ebx
c000f1da:	e8 e1 fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f1df:	83 c4 20             	add    esp,0x20
c000f1e2:	6a 00                	push   0x0
c000f1e4:	68 e0 04 00 c0       	push   0xc00004e0
c000f1e9:	6a 0c                	push   0xc
c000f1eb:	53                   	push   ebx
c000f1ec:	e8 cf fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f1f1:	6a 00                	push   0x0
c000f1f3:	68 e8 04 00 c0       	push   0xc00004e8
c000f1f8:	6a 0d                	push   0xd
c000f1fa:	53                   	push   ebx
c000f1fb:	e8 c0 fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f200:	83 c4 20             	add    esp,0x20
c000f203:	6a 00                	push   0x0
c000f205:	68 f0 04 00 c0       	push   0xc00004f0
c000f20a:	6a 0e                	push   0xe
c000f20c:	53                   	push   ebx
c000f20d:	e8 ae fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f212:	6a 00                	push   0x0
c000f214:	68 f8 04 00 c0       	push   0xc00004f8
c000f219:	6a 0f                	push   0xf
c000f21b:	53                   	push   ebx
c000f21c:	e8 9f fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f221:	83 c4 20             	add    esp,0x20
c000f224:	6a 00                	push   0x0
c000f226:	68 02 05 00 c0       	push   0xc0000502
c000f22b:	6a 10                	push   0x10
c000f22d:	53                   	push   ebx
c000f22e:	e8 8d fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f233:	6a 00                	push   0x0
c000f235:	68 0c 05 00 c0       	push   0xc000050c
c000f23a:	6a 11                	push   0x11
c000f23c:	53                   	push   ebx
c000f23d:	e8 7e fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f242:	83 c4 20             	add    esp,0x20
c000f245:	6a 00                	push   0x0
c000f247:	68 16 05 00 c0       	push   0xc0000516
c000f24c:	6a 12                	push   0x12
c000f24e:	53                   	push   ebx
c000f24f:	e8 6c fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f254:	6a 01                	push   0x1
c000f256:	68 b0 05 00 c0       	push   0xc00005b0
c000f25b:	6a 60                	push   0x60
c000f25d:	53                   	push   ebx
c000f25e:	e8 5d fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f263:	83 c4 20             	add    esp,0x20
c000f266:	6a 00                	push   0x0
c000f268:	68 b7 05 00 c0       	push   0xc00005b7
c000f26d:	6a 20                	push   0x20
c000f26f:	53                   	push   ebx
c000f270:	e8 4b fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f275:	6a 00                	push   0x0
c000f277:	68 a2 05 00 c0       	push   0xc00005a2
c000f27c:	6a 21                	push   0x21
c000f27e:	53                   	push   ebx
c000f27f:	e8 3c fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f284:	83 c4 20             	add    esp,0x20
c000f287:	6a 00                	push   0x0
c000f289:	68 a9 05 00 c0       	push   0xc00005a9
c000f28e:	6a 22                	push   0x22
c000f290:	53                   	push   ebx
c000f291:	e8 2a fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f296:	6a 00                	push   0x0
c000f298:	68 20 05 00 c0       	push   0xc0000520
c000f29d:	6a 23                	push   0x23
c000f29f:	53                   	push   ebx
c000f2a0:	e8 1b fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f2a5:	83 c4 20             	add    esp,0x20
c000f2a8:	6a 00                	push   0x0
c000f2aa:	68 2a 05 00 c0       	push   0xc000052a
c000f2af:	6a 24                	push   0x24
c000f2b1:	53                   	push   ebx
c000f2b2:	e8 09 fe ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f2b7:	6a 00                	push   0x0
c000f2b9:	68 34 05 00 c0       	push   0xc0000534
c000f2be:	6a 25                	push   0x25
c000f2c0:	53                   	push   ebx
c000f2c1:	e8 fa fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f2c6:	83 c4 20             	add    esp,0x20
c000f2c9:	6a 00                	push   0x0
c000f2cb:	68 3e 05 00 c0       	push   0xc000053e
c000f2d0:	6a 26                	push   0x26
c000f2d2:	53                   	push   ebx
c000f2d3:	e8 e8 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f2d8:	6a 00                	push   0x0
c000f2da:	68 48 05 00 c0       	push   0xc0000548
c000f2df:	6a 27                	push   0x27
c000f2e1:	53                   	push   ebx
c000f2e2:	e8 d9 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f2e7:	83 c4 20             	add    esp,0x20
c000f2ea:	6a 00                	push   0x0
c000f2ec:	68 52 05 00 c0       	push   0xc0000552
c000f2f1:	6a 28                	push   0x28
c000f2f3:	53                   	push   ebx
c000f2f4:	e8 c7 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f2f9:	6a 00                	push   0x0
c000f2fb:	68 5c 05 00 c0       	push   0xc000055c
c000f300:	6a 29                	push   0x29
c000f302:	53                   	push   ebx
c000f303:	e8 b8 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f308:	83 c4 20             	add    esp,0x20
c000f30b:	6a 00                	push   0x0
c000f30d:	68 66 05 00 c0       	push   0xc0000566
c000f312:	6a 2a                	push   0x2a
c000f314:	53                   	push   ebx
c000f315:	e8 a6 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f31a:	6a 00                	push   0x0
c000f31c:	68 70 05 00 c0       	push   0xc0000570
c000f321:	6a 2b                	push   0x2b
c000f323:	53                   	push   ebx
c000f324:	e8 97 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f329:	83 c4 20             	add    esp,0x20
c000f32c:	6a 00                	push   0x0
c000f32e:	68 7a 05 00 c0       	push   0xc000057a
c000f333:	6a 2c                	push   0x2c
c000f335:	53                   	push   ebx
c000f336:	e8 85 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f33b:	6a 00                	push   0x0
c000f33d:	68 84 05 00 c0       	push   0xc0000584
c000f342:	6a 2d                	push   0x2d
c000f344:	53                   	push   ebx
c000f345:	e8 76 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f34a:	83 c4 20             	add    esp,0x20
c000f34d:	6a 00                	push   0x0
c000f34f:	68 8e 05 00 c0       	push   0xc000058e
c000f354:	6a 2e                	push   0x2e
c000f356:	53                   	push   ebx
c000f357:	e8 64 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f35c:	6a 00                	push   0x0
c000f35e:	68 98 05 00 c0       	push   0xc0000598
c000f363:	6a 2f                	push   0x2f
c000f365:	53                   	push   ebx
c000f366:	e8 55 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f36b:	83 c4 20             	add    esp,0x20
c000f36e:	6a 00                	push   0x0
c000f370:	68 ed 05 00 c0       	push   0xc00005ed
c000f375:	6a 30                	push   0x30
c000f377:	53                   	push   ebx
c000f378:	e8 43 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f37d:	6a 00                	push   0x0
c000f37f:	68 f7 05 00 c0       	push   0xc00005f7
c000f384:	6a 31                	push   0x31
c000f386:	53                   	push   ebx
c000f387:	e8 34 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f38c:	83 c4 20             	add    esp,0x20
c000f38f:	6a 00                	push   0x0
c000f391:	68 01 06 00 c0       	push   0xc0000601
c000f396:	6a 32                	push   0x32
c000f398:	53                   	push   ebx
c000f399:	e8 22 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f39e:	6a 00                	push   0x0
c000f3a0:	68 0b 06 00 c0       	push   0xc000060b
c000f3a5:	6a 33                	push   0x33
c000f3a7:	53                   	push   ebx
c000f3a8:	e8 13 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3ad:	83 c4 20             	add    esp,0x20
c000f3b0:	6a 00                	push   0x0
c000f3b2:	68 15 06 00 c0       	push   0xc0000615
c000f3b7:	6a 34                	push   0x34
c000f3b9:	53                   	push   ebx
c000f3ba:	e8 01 fd ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3bf:	6a 00                	push   0x0
c000f3c1:	68 1f 06 00 c0       	push   0xc000061f
c000f3c6:	6a 35                	push   0x35
c000f3c8:	53                   	push   ebx
c000f3c9:	e8 f2 fc ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3ce:	83 c4 20             	add    esp,0x20
c000f3d1:	6a 00                	push   0x0
c000f3d3:	68 29 06 00 c0       	push   0xc0000629
c000f3d8:	6a 36                	push   0x36
c000f3da:	53                   	push   ebx
c000f3db:	e8 e0 fc ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3e0:	6a 00                	push   0x0
c000f3e2:	68 33 06 00 c0       	push   0xc0000633
c000f3e7:	6a 37                	push   0x37
c000f3e9:	53                   	push   ebx
c000f3ea:	e8 d1 fc ff ff       	call   c000f0c0 <IDT::addEntry(int, void (*)(), bool)>
c000f3ef:	83 c4 20             	add    esp,0x20
c000f3f2:	e8 9a 26 00 00       	call   c0011a91 <Virt::getAKernelVAS()>
c000f3f7:	52                   	push   edx
c000f3f8:	6a 03                	push   0x3
c000f3fa:	6a 02                	push   0x2
c000f3fc:	50                   	push   eax
c000f3fd:	e8 ca 2c 00 00       	call   c00120cc <VAS::allocatePages(int, int)>
c000f402:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f409:	89 c6                	mov    esi,eax
c000f40b:	e8 12 02 00 00       	call   c000f622 <malloc>
c000f410:	81 c6 00 20 00 00    	add    esi,0x2000
c000f416:	89 04 24             	mov    DWORD PTR [esp],eax
c000f419:	89 c7                	mov    edi,eax
c000f41b:	e8 12 1e 00 00       	call   c0011232 <TSS::TSS()>
c000f420:	83 c4 0c             	add    esp,0xc
c000f423:	68 be 04 00 c0       	push   0xc00004be
c000f428:	56                   	push   esi
c000f429:	57                   	push   edi
c000f42a:	e8 43 1e 00 00       	call   c0011272 <TSS::setup(unsigned long, unsigned long)>
c000f42f:	59                   	pop    ecx
c000f430:	89 c6                	mov    esi,eax
c000f432:	5f                   	pop    edi
c000f433:	6a 00                	push   0x0
c000f435:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f439:	50                   	push   eax
c000f43a:	e8 db fb ff ff       	call   c000f01a <IDTEntry::IDTEntry(bool)>
c000f43f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f443:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f448:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f44f:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f455:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f459:	80 ce 05             	or     dh,0x5
c000f45c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f45f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f463:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f467:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f46a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f46d:	e8 86 fc ff ff       	call   c000f0f8 <IDT::flush()>
c000f472:	83 c4 20             	add    esp,0x20
c000f475:	5b                   	pop    ebx
c000f476:	5e                   	pop    esi
c000f477:	5f                   	pop    edi
c000f478:	c3                   	ret    

c000f479 <sbrk>:
c000f479:	55                   	push   ebp
c000f47a:	57                   	push   edi
c000f47b:	56                   	push   esi
c000f47c:	53                   	push   ebx
c000f47d:	83 ec 1c             	sub    esp,0x1c
c000f480:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f484:	85 c0                	test   eax,eax
c000f486:	74 3e                	je     c000f4c6 <sbrk+0x4d>
c000f488:	78 43                	js     c000f4cd <sbrk+0x54>
c000f48a:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c000f490:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f496:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f49c:	83 e2 01             	and    edx,0x1
c000f49f:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f4a3:	8b 0d f0 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c9f0
c000f4a9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4ad:	05 ff 0f 00 00       	add    eax,0xfff
c000f4b2:	89 c2                	mov    edx,eax
c000f4b4:	78 2f                	js     c000f4e5 <sbrk+0x6c>
c000f4b6:	c1 fa 0c             	sar    edx,0xc
c000f4b9:	89 d7                	mov    edi,edx
c000f4bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4bf:	be 00 00 00 00       	mov    esi,0x0
c000f4c4:	eb 36                	jmp    c000f4fc <sbrk+0x83>
c000f4c6:	a1 f0 c9 02 c0       	mov    eax,ds:0xc002c9f0
c000f4cb:	eb 74                	jmp    c000f541 <sbrk+0xc8>
c000f4cd:	83 ec 08             	sub    esp,0x8
c000f4d0:	50                   	push   eax
c000f4d1:	68 88 99 02 c0       	push   0xc0029988
c000f4d6:	e8 16 34 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000f4db:	83 c4 10             	add    esp,0x10
c000f4de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e3:	eb 5c                	jmp    c000f541 <sbrk+0xc8>
c000f4e5:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4eb:	eb c9                	jmp    c000f4b6 <sbrk+0x3d>
c000f4ed:	81 05 f0 c9 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c9f0,0x1000
c000f4f7:	46                   	inc    esi
c000f4f8:	39 f7                	cmp    edi,esi
c000f4fa:	74 34                	je     c000f530 <sbrk+0xb7>
c000f4fc:	e8 90 25 00 00       	call   c0011a91 <Virt::getAKernelVAS()>
c000f501:	89 c3                	mov    ebx,eax
c000f503:	8b 2d f0 c9 02 c0    	mov    ebp,DWORD PTR ds:0xc002c9f0
c000f509:	e8 b1 07 00 00       	call   c000fcbf <Phys::allocatePage()>
c000f50e:	68 01 04 00 00       	push   0x401
c000f513:	55                   	push   ebp
c000f514:	50                   	push   eax
c000f515:	53                   	push   ebx
c000f516:	e8 b1 2a 00 00       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c000f51b:	83 c4 10             	add    esp,0x10
c000f51e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f523:	74 c8                	je     c000f4ed <sbrk+0x74>
c000f525:	8b 1d f0 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9f0
c000f52b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f52e:	eb bd                	jmp    c000f4ed <sbrk+0x74>
c000f530:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f535:	75 12                	jne    c000f549 <sbrk+0xd0>
c000f537:	0f 20 d8             	mov    eax,cr3
c000f53a:	0f 22 d8             	mov    cr3,eax
c000f53d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f541:	83 c4 1c             	add    esp,0x1c
c000f544:	5b                   	pop    ebx
c000f545:	5e                   	pop    esi
c000f546:	5f                   	pop    edi
c000f547:	5d                   	pop    ebp
c000f548:	c3                   	ret    
c000f549:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f54d:	89 cb                	mov    ebx,ecx
c000f54f:	c1 eb 0a             	shr    ebx,0xa
c000f552:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f558:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f55e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f562:	c1 e0 0c             	shl    eax,0xc
c000f565:	01 c8                	add    eax,ecx
c000f567:	c1 e8 0a             	shr    eax,0xa
c000f56a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f56f:	2d 00 00 40 00       	sub    eax,0x400000
c000f574:	39 c3                	cmp    ebx,eax
c000f576:	77 c5                	ja     c000f53d <sbrk+0xc4>
c000f578:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f57b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f581:	39 d8                	cmp    eax,ebx
c000f583:	73 f3                	jae    c000f578 <sbrk+0xff>
c000f585:	eb b6                	jmp    c000f53d <sbrk+0xc4>

c000f587 <mmap>:
c000f587:	83 ec 18             	sub    esp,0x18
c000f58a:	68 b8 99 02 c0       	push   0xc00299b8
c000f58f:	e8 d1 a8 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c000f594:	b8 00 00 00 00       	mov    eax,0x0
c000f599:	83 c4 1c             	add    esp,0x1c
c000f59c:	c3                   	ret    

c000f59d <munmap>:
c000f59d:	83 ec 18             	sub    esp,0x18
c000f5a0:	68 bd 99 02 c0       	push   0xc00299bd
c000f5a5:	e8 bb a8 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c000f5aa:	b8 00 00 00 00       	mov    eax,0x0
c000f5af:	83 c4 1c             	add    esp,0x1c
c000f5b2:	c3                   	ret    

c000f5b3 <liballoc_lock()>:
c000f5b3:	83 ec 0c             	sub    esp,0xc
c000f5b6:	e8 05 df 00 00       	call   c001d4c0 <lockScheduler()>
c000f5bb:	b8 00 00 00 00       	mov    eax,0x0
c000f5c0:	83 c4 0c             	add    esp,0xc
c000f5c3:	c3                   	ret    

c000f5c4 <liballoc_unlock()>:
c000f5c4:	83 ec 0c             	sub    esp,0xc
c000f5c7:	e8 f6 de 00 00       	call   c001d4c2 <unlockScheduler()>
c000f5cc:	b8 00 00 00 00       	mov    eax,0x0
c000f5d1:	83 c4 0c             	add    esp,0xc
c000f5d4:	c3                   	ret    

c000f5d5 <liballoc_alloc(int)>:
c000f5d5:	83 ec 0c             	sub    esp,0xc
c000f5d8:	e8 b4 24 00 00       	call   c0011a91 <Virt::getAKernelVAS()>
c000f5dd:	83 ec 04             	sub    esp,0x4
c000f5e0:	6a 01                	push   0x1
c000f5e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5e6:	50                   	push   eax
c000f5e7:	e8 e0 2a 00 00       	call   c00120cc <VAS::allocatePages(int, int)>
c000f5ec:	83 c4 1c             	add    esp,0x1c
c000f5ef:	c3                   	ret    

c000f5f0 <liballoc_free(void*, int)>:
c000f5f0:	83 ec 0c             	sub    esp,0xc
c000f5f3:	e8 99 24 00 00       	call   c0011a91 <Virt::getAKernelVAS()>
c000f5f8:	83 ec 08             	sub    esp,0x8
c000f5fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5ff:	50                   	push   eax
c000f600:	e8 83 27 00 00       	call   c0011d88 <VAS::freeAllocatedPages(unsigned long)>
c000f605:	b8 00 00 00 00       	mov    eax,0x0
c000f60a:	83 c4 1c             	add    esp,0x1c
c000f60d:	c3                   	ret    

c000f60e <realloc>:
c000f60e:	83 ec 14             	sub    esp,0x14
c000f611:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f619:	e8 1d 1e ff ff       	call   c000143b <dlrealloc>
c000f61e:	83 c4 1c             	add    esp,0x1c
c000f621:	c3                   	ret    

c000f622 <malloc>:
c000f622:	83 ec 18             	sub    esp,0x18
c000f625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f629:	e8 d0 18 ff ff       	call   c0000efe <dlmalloc>
c000f62e:	83 c4 1c             	add    esp,0x1c
c000f631:	c3                   	ret    

c000f632 <free>:
c000f632:	83 ec 18             	sub    esp,0x18
c000f635:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f639:	e8 65 15 ff ff       	call   c0000ba3 <dlfree>
c000f63e:	83 c4 1c             	add    esp,0x1c
c000f641:	c3                   	ret    

c000f642 <rfree>:
c000f642:	83 ec 18             	sub    esp,0x18
c000f645:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f649:	e8 55 15 ff ff       	call   c0000ba3 <dlfree>
c000f64e:	83 c4 1c             	add    esp,0x1c
c000f651:	c3                   	ret    

c000f652 <calloc>:
c000f652:	56                   	push   esi
c000f653:	53                   	push   ebx
c000f654:	83 ec 10             	sub    esp,0x10
c000f657:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f65b:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f660:	53                   	push   ebx
c000f661:	e8 bc ff ff ff       	call   c000f622 <malloc>
c000f666:	89 c6                	mov    esi,eax
c000f668:	83 c4 0c             	add    esp,0xc
c000f66b:	53                   	push   ebx
c000f66c:	6a 00                	push   0x0
c000f66e:	50                   	push   eax
c000f66f:	e8 4e 10 ff ff       	call   c00006c2 <memset>
c000f674:	89 f0                	mov    eax,esi
c000f676:	83 c4 14             	add    esp,0x14
c000f679:	5b                   	pop    ebx
c000f67a:	5e                   	pop    esi
c000f67b:	c3                   	ret    

c000f67c <hwTextMode_loadInData(VgaText*)>:
c000f67c:	55                   	push   ebp
c000f67d:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c000f682:	57                   	push   edi
c000f683:	56                   	push   esi
c000f684:	53                   	push   ebx
c000f685:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f689:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f68f:	85 d2                	test   edx,edx
c000f691:	7e 2f                	jle    c000f6c2 <hwTextMode_loadInData(VgaText*)+0x46>
c000f693:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f699:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f69c:	31 f6                	xor    esi,esi
c000f69e:	29 fd                	sub    ebp,edi
c000f6a0:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f6a3:	31 c0                	xor    eax,eax
c000f6a5:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f6a9:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6ad:	40                   	inc    eax
c000f6ae:	83 f8 50             	cmp    eax,0x50
c000f6b1:	75 f2                	jne    c000f6a5 <hwTextMode_loadInData(VgaText*)+0x29>
c000f6b3:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6b9:	46                   	inc    esi
c000f6ba:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6c0:	7f de                	jg     c000f6a0 <hwTextMode_loadInData(VgaText*)+0x24>
c000f6c2:	5b                   	pop    ebx
c000f6c3:	5e                   	pop    esi
c000f6c4:	5f                   	pop    edi
c000f6c5:	5d                   	pop    ebp
c000f6c6:	c3                   	ret    

c000f6c7 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6c7:	55                   	push   ebp
c000f6c8:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f6cf:	57                   	push   edi
c000f6d0:	56                   	push   esi
c000f6d1:	53                   	push   ebx
c000f6d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f6d6:	75 50                	jne    c000f728 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6d8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6de:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6e4:	8b 15 00 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca00
c000f6ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f6ee:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f6f4:	eb 0e                	jmp    c000f704 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f6f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f702:	89 da                	mov    edx,ebx
c000f704:	83 e5 0f             	and    ebp,0xf
c000f707:	c1 e0 04             	shl    eax,0x4
c000f70a:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f70d:	0f b6 c0             	movzx  eax,al
c000f710:	41                   	inc    ecx
c000f711:	09 e8                	or     eax,ebp
c000f713:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f717:	c1 e0 08             	shl    eax,0x8
c000f71a:	09 e8                	or     eax,ebp
c000f71c:	39 fb                	cmp    ebx,edi
c000f71e:	66 89 02             	mov    WORD PTR [edx],ax
c000f721:	75 d3                	jne    c000f6f6 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f723:	5b                   	pop    ebx
c000f724:	5e                   	pop    esi
c000f725:	5f                   	pop    edi
c000f726:	5d                   	pop    ebp
c000f727:	c3                   	ret    
c000f728:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f732:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f73c:	31 c0                	xor    eax,eax
c000f73e:	bd 02 00 00 00       	mov    ebp,0x2
c000f743:	eb 9f                	jmp    c000f6e4 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f745 <hwTextMode_showCursor(VgaText*, bool)>:
c000f745:	56                   	push   esi
c000f746:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f74d:	53                   	push   ebx
c000f74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f752:	75 39                	jne    c000f78d <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f754:	84 c0                	test   al,al
c000f756:	74 38                	je     c000f790 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f758:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f75d:	b0 0a                	mov    al,0xa
c000f75f:	89 da                	mov    edx,ebx
c000f761:	ee                   	out    dx,al
c000f762:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f767:	89 ca                	mov    edx,ecx
c000f769:	ec                   	in     al,dx
c000f76a:	b2 0f                	mov    dl,0xf
c000f76c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f770:	83 e0 c0             	and    eax,0xffffffc0
c000f773:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f779:	09 d0                	or     eax,edx
c000f77b:	89 ca                	mov    edx,ecx
c000f77d:	ee                   	out    dx,al
c000f77e:	b0 0b                	mov    al,0xb
c000f780:	89 da                	mov    edx,ebx
c000f782:	ee                   	out    dx,al
c000f783:	89 ca                	mov    edx,ecx
c000f785:	ec                   	in     al,dx
c000f786:	83 e0 e0             	and    eax,0xffffffe0
c000f789:	83 c8 0f             	or     eax,0xf
c000f78c:	ee                   	out    dx,al
c000f78d:	5b                   	pop    ebx
c000f78e:	5e                   	pop    esi
c000f78f:	c3                   	ret    
c000f790:	b0 0a                	mov    al,0xa
c000f792:	ba d4 03 00 00       	mov    edx,0x3d4
c000f797:	ee                   	out    dx,al
c000f798:	b0 20                	mov    al,0x20
c000f79a:	ba d5 03 00 00       	mov    edx,0x3d5
c000f79f:	ee                   	out    dx,al
c000f7a0:	5b                   	pop    ebx
c000f7a1:	5e                   	pop    esi
c000f7a2:	c3                   	ret    

c000f7a3 <hwTextMode_update(VgaText*)>:
c000f7a3:	c3                   	ret    

c000f7a4 <hwTextMode_updateCursor(VgaText*)>:
c000f7a4:	56                   	push   esi
c000f7a5:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f7ac:	53                   	push   ebx
c000f7ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b1:	75 3f                	jne    c000f7f2 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7b3:	be d4 03 00 00       	mov    esi,0x3d4
c000f7b8:	b9 19 00 00 00       	mov    ecx,0x19
c000f7bd:	89 f2                	mov    edx,esi
c000f7bf:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7c5:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f7cb:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f7ce:	c1 e1 04             	shl    ecx,0x4
c000f7d1:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f7d7:	b0 0f                	mov    al,0xf
c000f7d9:	ee                   	out    dx,al
c000f7da:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7df:	88 c8                	mov    al,cl
c000f7e1:	89 da                	mov    edx,ebx
c000f7e3:	ee                   	out    dx,al
c000f7e4:	b0 0e                	mov    al,0xe
c000f7e6:	89 f2                	mov    edx,esi
c000f7e8:	ee                   	out    dx,al
c000f7e9:	89 c8                	mov    eax,ecx
c000f7eb:	89 da                	mov    edx,ebx
c000f7ed:	66 c1 e8 08          	shr    ax,0x8
c000f7f1:	ee                   	out    dx,al
c000f7f2:	5b                   	pop    ebx
c000f7f3:	5e                   	pop    esi
c000f7f4:	c3                   	ret    

c000f7f5 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f7f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7f9:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f800:	75 38                	jne    c000f83a <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f802:	ba da 03 00 00       	mov    edx,0x3da
c000f807:	84 c0                	test   al,al
c000f809:	75 18                	jne    c000f823 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f80b:	ec                   	in     al,dx
c000f80c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f811:	b0 30                	mov    al,0x30
c000f813:	89 ca                	mov    edx,ecx
c000f815:	ee                   	out    dx,al
c000f816:	ba c1 03 00 00       	mov    edx,0x3c1
c000f81b:	ec                   	in     al,dx
c000f81c:	83 c8 08             	or     eax,0x8
c000f81f:	89 ca                	mov    edx,ecx
c000f821:	ee                   	out    dx,al
c000f822:	c3                   	ret    
c000f823:	ec                   	in     al,dx
c000f824:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f829:	b0 30                	mov    al,0x30
c000f82b:	89 ca                	mov    edx,ecx
c000f82d:	ee                   	out    dx,al
c000f82e:	ba c1 03 00 00       	mov    edx,0x3c1
c000f833:	ec                   	in     al,dx
c000f834:	83 e0 f7             	and    eax,0xfffffff7
c000f837:	89 ca                	mov    edx,ecx
c000f839:	ee                   	out    dx,al
c000f83a:	c3                   	ret    

c000f83b <hwTextMode_scrollScreen(VgaText*)>:
c000f83b:	55                   	push   ebp
c000f83c:	57                   	push   edi
c000f83d:	56                   	push   esi
c000f83e:	53                   	push   ebx
c000f83f:	83 ec 1c             	sub    esp,0x1c
c000f842:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f846:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f84d:	74 14                	je     c000f863 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f84f:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f859:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f863:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c000f868:	bd 02 00 00 00       	mov    ebp,0x2
c000f86d:	05 a0 00 00 00       	add    eax,0xa0
c000f872:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f876:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f87a:	31 c0                	xor    eax,eax
c000f87c:	eb 0b                	jmp    c000f889 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f87e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f884:	74 57                	je     c000f8dd <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f886:	43                   	inc    ebx
c000f887:	89 f0                	mov    eax,esi
c000f889:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f88f:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f895:	88 13                	mov    BYTE PTR [ebx],dl
c000f897:	8d 70 01             	lea    esi,[eax+0x1]
c000f89a:	83 fd 18             	cmp    ebp,0x18
c000f89d:	75 df                	jne    c000f87e <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f89f:	a8 01                	test   al,0x1
c000f8a1:	75 13                	jne    c000f8b6 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f8a3:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f8a6:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8ac:	75 d8                	jne    c000f886 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8ae:	83 c4 1c             	add    esp,0x1c
c000f8b1:	5b                   	pop    ebx
c000f8b2:	5e                   	pop    esi
c000f8b3:	5f                   	pop    edi
c000f8b4:	5d                   	pop    ebp
c000f8b5:	c3                   	ret    
c000f8b6:	83 ec 08             	sub    esp,0x8
c000f8b9:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8c0:	50                   	push   eax
c000f8c1:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8c5:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f8cc:	50                   	push   eax
c000f8cd:	e8 32 0c 00 00       	call   c0010504 <VgaText::combineColours(unsigned char, unsigned char)>
c000f8d2:	83 c4 10             	add    esp,0x10
c000f8d5:	88 07                	mov    BYTE PTR [edi],al
c000f8d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8db:	eb c9                	jmp    c000f8a6 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8dd:	45                   	inc    ebp
c000f8de:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8e6:	eb 8e                	jmp    c000f876 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8e8 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8e8:	57                   	push   edi
c000f8e9:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f8f0:	56                   	push   esi
c000f8f1:	53                   	push   ebx
c000f8f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8f6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f8fa:	75 65                	jne    c000f961 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f8fc:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f901:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f906:	83 ec 08             	sub    esp,0x8
c000f909:	52                   	push   edx
c000f90a:	50                   	push   eax
c000f90b:	e8 f4 0b 00 00       	call   c0010504 <VgaText::combineColours(unsigned char, unsigned char)>
c000f910:	5a                   	pop    edx
c000f911:	0f b6 c0             	movzx  eax,al
c000f914:	59                   	pop    ecx
c000f915:	50                   	push   eax
c000f916:	0f be c3             	movsx  eax,bl
c000f919:	50                   	push   eax
c000f91a:	e8 8b 0c 00 00       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c000f91f:	83 c4 10             	add    esp,0x10
c000f922:	8b 35 00 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca00
c000f928:	80 3d 60 db 02 c0 00 	cmp    BYTE PTR ds:0xc002db60,0x0
c000f92f:	74 07                	je     c000f938 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f931:	66 0f be c3          	movsx  ax,bl
c000f935:	80 cc 02             	or     ah,0x2
c000f938:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f93c:	ba 19 00 00 00       	mov    edx,0x19
c000f941:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f947:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f94a:	8d 14 92             	lea    edx,[edx+edx*4]
c000f94d:	c1 e1 04             	shl    ecx,0x4
c000f950:	c1 e2 04             	shl    edx,0x4
c000f953:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f957:	01 ca                	add    edx,ecx
c000f959:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f95d:	5b                   	pop    ebx
c000f95e:	5e                   	pop    esi
c000f95f:	5f                   	pop    edi
c000f960:	c3                   	ret    
c000f961:	b8 02 00 00 00       	mov    eax,0x2
c000f966:	31 d2                	xor    edx,edx
c000f968:	eb 9c                	jmp    c000f906 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f96a <setupTextMode()>:
c000f96a:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f96f:	83 e0 30             	and    eax,0x30
c000f972:	66 83 f8 30          	cmp    ax,0x30
c000f976:	75 11                	jne    c000f989 <setupTextMode()+0x1f>
c000f978:	81 2d 00 ca 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002ca00,0x8000
c000f982:	c6 05 60 db 02 c0 01 	mov    BYTE PTR ds:0xc002db60,0x1
c000f989:	c7 05 98 db 02 c0 f5 f7 00 c0 	mov    DWORD PTR ds:0xc002db98,0xc000f7f5
c000f993:	c7 05 84 db 02 c0 7c f6 00 c0 	mov    DWORD PTR ds:0xc002db84,0xc000f67c
c000f99d:	c7 05 80 db 02 c0 c7 f6 00 c0 	mov    DWORD PTR ds:0xc002db80,0xc000f6c7
c000f9a7:	c7 05 8c db 02 c0 3b f8 00 c0 	mov    DWORD PTR ds:0xc002db8c,0xc000f83b
c000f9b1:	c7 05 94 db 02 c0 45 f7 00 c0 	mov    DWORD PTR ds:0xc002db94,0xc000f745
c000f9bb:	c7 05 88 db 02 c0 a3 f7 00 c0 	mov    DWORD PTR ds:0xc002db88,0xc000f7a3
c000f9c5:	c7 05 90 db 02 c0 a4 f7 00 c0 	mov    DWORD PTR ds:0xc002db90,0xc000f7a4
c000f9cf:	c7 05 9c db 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002db9c,0xc000f8e8
c000f9d9:	c3                   	ret    

c000f9da <kernel_main>:
c000f9da:	57                   	push   edi
c000f9db:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9e0:	56                   	push   esi
c000f9e1:	31 f6                	xor    esi,esi
c000f9e3:	53                   	push   ebx
c000f9e4:	83 ec 10             	sub    esp,0x10
c000f9e7:	e8 72 09 00 00       	call   c001035e <installVgaTextImplementation()>
c000f9ec:	e8 79 ff ff ff       	call   c000f96a <setupTextMode()>
c000f9f1:	89 f0                	mov    eax,esi
c000f9f3:	89 fa                	mov    edx,edi
c000f9f5:	ee                   	out    dx,al
c000f9f6:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9fb:	b0 80                	mov    al,0x80
c000f9fd:	89 da                	mov    edx,ebx
c000f9ff:	ee                   	out    dx,al
c000fa00:	b1 03                	mov    cl,0x3
c000fa02:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa07:	88 c8                	mov    al,cl
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 f0                	mov    eax,esi
c000fa0c:	89 fa                	mov    edx,edi
c000fa0e:	ee                   	out    dx,al
c000fa0f:	88 c8                	mov    al,cl
c000fa11:	89 da                	mov    edx,ebx
c000fa13:	ee                   	out    dx,al
c000fa14:	b0 c7                	mov    al,0xc7
c000fa16:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa1b:	ee                   	out    dx,al
c000fa1c:	b0 0b                	mov    al,0xb
c000fa1e:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa23:	ee                   	out    dx,al
c000fa24:	83 ec 0c             	sub    esp,0xc
c000fa27:	68 c4 99 02 c0       	push   0xc00299c4
c000fa2c:	e8 c0 2e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000fa31:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa36:	05 ff 0f 00 00       	add    eax,0xfff
c000fa3b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa40:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa43:	e8 d1 03 00 00       	call   c000fe19 <Phys::physicalMemorySetup(unsigned int)>
c000fa48:	e8 c5 1f 00 00       	call   c0011a12 <Virt::virtualMemorySetup()>
c000fa4d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa53:	83 c4 10             	add    esp,0x10
c000fa56:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa5c:	75 0e                	jne    c000fa6c <kernel_main+0x92>
c000fa5e:	89 d8                	mov    eax,ebx
c000fa60:	25 48 03 00 00       	and    eax,0x348
c000fa65:	3d 00 03 00 00       	cmp    eax,0x300
c000fa6a:	74 10                	je     c000fa7c <kernel_main+0xa2>
c000fa6c:	83 ec 0c             	sub    esp,0xc
c000fa6f:	68 3c b2 02 c0       	push   0xc002b23c
c000fa74:	e8 ec a3 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c000fa79:	83 c4 10             	add    esp,0x10
c000fa7c:	83 ec 0c             	sub    esp,0xc
c000fa7f:	89 1d e0 da 02 c0    	mov    DWORD PTR ds:0xc002dae0,ebx
c000fa85:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa89:	53                   	push   ebx
c000fa8a:	e8 37 21 00 00       	call   c0011bc6 <VAS::VAS()>
c000fa8f:	89 1d 44 dc 02 c0    	mov    DWORD PTR ds:0xc002dc44,ebx
c000fa95:	e8 86 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa9a:	c7 04 24 db 99 02 c0 	mov    DWORD PTR [esp],0xc00299db
c000faa1:	e8 4b 2e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000faa6:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000faad:	e8 70 fb ff ff       	call   c000f622 <malloc>
c000fab2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fab5:	89 c6                	mov    esi,eax
c000fab7:	e8 60 ea ff ff       	call   c000e51c <Computer::Computer()>
c000fabc:	58                   	pop    eax
c000fabd:	89 35 c8 da 02 c0    	mov    DWORD PTR ds:0xc002dac8,esi
c000fac3:	5a                   	pop    edx
c000fac4:	56                   	push   esi
c000fac5:	68 f8 99 02 c0       	push   0xc00299f8
c000faca:	e8 22 2e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000facf:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c000fad4:	8b 10                	mov    edx,DWORD PTR [eax]
c000fad6:	6a 00                	push   0x0
c000fad8:	6a 00                	push   0x0
c000fada:	6a 00                	push   0x0
c000fadc:	50                   	push   eax
c000fadd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fae0:	83 c4 14             	add    esp,0x14
c000fae3:	53                   	push   ebx
c000fae4:	e8 77 23 00 00       	call   c0011e60 <VAS::~VAS()>
c000fae9:	c7 04 24 0b 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a0b
c000faf0:	e8 70 a3 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c000faf5:	83 c4 20             	add    esp,0x20
c000faf8:	5b                   	pop    ebx
c000faf9:	5e                   	pop    esi
c000fafa:	5f                   	pop    edi
c000fafb:	c3                   	ret    

c000fafc <Phys::allocateDMA(unsigned long)>:
c000fafc:	55                   	push   ebp
c000fafd:	31 d2                	xor    edx,edx
c000faff:	57                   	push   edi
c000fb00:	31 ed                	xor    ebp,ebp
c000fb02:	56                   	push   esi
c000fb03:	31 c9                	xor    ecx,ecx
c000fb05:	53                   	push   ebx
c000fb06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb0a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb10:	31 c0                	xor    eax,eax
c000fb12:	c1 ee 0c             	shr    esi,0xc
c000fb15:	eb 17                	jmp    c000fb2e <Phys::allocateDMA(unsigned long)+0x32>
c000fb17:	85 c9                	test   ecx,ecx
c000fb19:	75 04                	jne    c000fb1f <Phys::allocateDMA(unsigned long)+0x23>
c000fb1b:	89 d5                	mov    ebp,edx
c000fb1d:	89 d0                	mov    eax,edx
c000fb1f:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb22:	39 de                	cmp    esi,ebx
c000fb24:	74 20                	je     c000fb46 <Phys::allocateDMA(unsigned long)+0x4a>
c000fb26:	42                   	inc    edx
c000fb27:	89 d9                	mov    ecx,ebx
c000fb29:	83 fa 2f             	cmp    edx,0x2f
c000fb2c:	7f 11                	jg     c000fb3f <Phys::allocateDMA(unsigned long)+0x43>
c000fb2e:	80 ba 20 db 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd24e0],0x0
c000fb35:	74 e0                	je     c000fb17 <Phys::allocateDMA(unsigned long)+0x1b>
c000fb37:	31 c9                	xor    ecx,ecx
c000fb39:	42                   	inc    edx
c000fb3a:	83 fa 2f             	cmp    edx,0x2f
c000fb3d:	7e ef                	jle    c000fb2e <Phys::allocateDMA(unsigned long)+0x32>
c000fb3f:	5b                   	pop    ebx
c000fb40:	31 c0                	xor    eax,eax
c000fb42:	5e                   	pop    esi
c000fb43:	5f                   	pop    edi
c000fb44:	5d                   	pop    ebp
c000fb45:	c3                   	ret    
c000fb46:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb49:	89 d7                	mov    edi,edx
c000fb4b:	4f                   	dec    edi
c000fb4c:	79 03                	jns    c000fb51 <Phys::allocateDMA(unsigned long)+0x55>
c000fb4e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb51:	c1 ff 04             	sar    edi,0x4
c000fb54:	89 c2                	mov    edx,eax
c000fb56:	c1 fa 04             	sar    edx,0x4
c000fb59:	39 fa                	cmp    edx,edi
c000fb5b:	75 2f                	jne    c000fb8c <Phys::allocateDMA(unsigned long)+0x90>
c000fb5d:	85 db                	test   ebx,ebx
c000fb5f:	74 1a                	je     c000fb7b <Phys::allocateDMA(unsigned long)+0x7f>
c000fb61:	be 20 db 02 c0       	mov    esi,0xc002db20
c000fb66:	8d 90 20 db 02 c0    	lea    edx,[eax-0x3ffd24e0]
c000fb6c:	f7 d6                	not    esi
c000fb6e:	29 c6                	sub    esi,eax
c000fb70:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb73:	42                   	inc    edx
c000fb74:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb77:	39 d9                	cmp    ecx,ebx
c000fb79:	7f f5                	jg     c000fb70 <Phys::allocateDMA(unsigned long)+0x74>
c000fb7b:	85 ff                	test   edi,edi
c000fb7d:	74 13                	je     c000fb92 <Phys::allocateDMA(unsigned long)+0x96>
c000fb7f:	5b                   	pop    ebx
c000fb80:	05 50 20 0c 00       	add    eax,0xc2050
c000fb85:	5e                   	pop    esi
c000fb86:	c1 e0 0c             	shl    eax,0xc
c000fb89:	5f                   	pop    edi
c000fb8a:	5d                   	pop    ebp
c000fb8b:	c3                   	ret    
c000fb8c:	89 ea                	mov    edx,ebp
c000fb8e:	31 c9                	xor    ecx,ecx
c000fb90:	eb a7                	jmp    c000fb39 <Phys::allocateDMA(unsigned long)+0x3d>
c000fb92:	5b                   	pop    ebx
c000fb93:	c1 e0 0c             	shl    eax,0xc
c000fb96:	5e                   	pop    esi
c000fb97:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb9c:	5f                   	pop    edi
c000fb9d:	5d                   	pop    ebp
c000fb9e:	c3                   	ret    

c000fb9f <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fba3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fba7:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fbad:	c1 e9 0c             	shr    ecx,0xc
c000fbb0:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fbb5:	76 25                	jbe    c000fbdc <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fbb7:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fbbc:	c1 e8 0c             	shr    eax,0xc
c000fbbf:	8d 50 10             	lea    edx,[eax+0x10]
c000fbc2:	85 c9                	test   ecx,ecx
c000fbc4:	74 15                	je     c000fbdb <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbc6:	8d 82 20 db 02 c0    	lea    eax,[edx-0x3ffd24e0]
c000fbcc:	8d 94 11 20 db 02 c0 	lea    edx,[ecx+edx*1-0x3ffd24e0]
c000fbd3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbd6:	40                   	inc    eax
c000fbd7:	39 d0                	cmp    eax,edx
c000fbd9:	75 f8                	jne    c000fbd3 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbdb:	c3                   	ret    
c000fbdc:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbe2:	c1 ea 0c             	shr    edx,0xc
c000fbe5:	eb db                	jmp    c000fbc2 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbe7 <Phys::setPageState(unsigned long, bool)>:
c000fbe7:	56                   	push   esi
c000fbe8:	ba 01 00 00 00       	mov    edx,0x1
c000fbed:	53                   	push   ebx
c000fbee:	8b 35 f4 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9f4
c000fbf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbf8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbfc:	89 c8                	mov    eax,ecx
c000fbfe:	83 e1 07             	and    ecx,0x7
c000fc01:	c1 e8 03             	shr    eax,0x3
c000fc04:	d3 e3                	shl    ebx,cl
c000fc06:	01 c6                	add    esi,eax
c000fc08:	d3 e2                	shl    edx,cl
c000fc0a:	f7 d2                	not    edx
c000fc0c:	20 16                	and    BYTE PTR [esi],dl
c000fc0e:	03 05 f4 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9f4
c000fc14:	08 18                	or     BYTE PTR [eax],bl
c000fc16:	5b                   	pop    ebx
c000fc17:	5e                   	pop    esi
c000fc18:	c3                   	ret    

c000fc19 <Phys::getPageState(unsigned long)>:
c000fc19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc1d:	8b 15 f4 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9f4
c000fc23:	89 c8                	mov    eax,ecx
c000fc25:	83 e1 07             	and    ecx,0x7
c000fc28:	c1 e8 03             	shr    eax,0x3
c000fc2b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc2f:	d3 f8                	sar    eax,cl
c000fc31:	83 e0 01             	and    eax,0x1
c000fc34:	c3                   	ret    

c000fc35 <Phys::freePage(unsigned long)>:
c000fc35:	53                   	push   ebx
c000fc36:	83 ec 08             	sub    esp,0x8
c000fc39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc3d:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc43:	76 57                	jbe    c000fc9c <Phys::freePage(unsigned long)+0x67>
c000fc45:	c1 eb 0c             	shr    ebx,0xc
c000fc48:	53                   	push   ebx
c000fc49:	e8 cb ff ff ff       	call   c000fc19 <Phys::getPageState(unsigned long)>
c000fc4e:	5a                   	pop    edx
c000fc4f:	84 c0                	test   al,al
c000fc51:	74 5b                	je     c000fcae <Phys::freePage(unsigned long)+0x79>
c000fc53:	a1 0c db 02 c0       	mov    eax,ds:0xc002db0c
c000fc58:	48                   	dec    eax
c000fc59:	a3 0c db 02 c0       	mov    ds:0xc002db0c,eax
c000fc5e:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc61:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc64:	c1 e0 02             	shl    eax,0x2
c000fc67:	99                   	cdq    
c000fc68:	f7 3d 10 db 02 c0    	idiv   DWORD PTR ds:0xc002db10
c000fc6e:	39 05 08 db 02 c0    	cmp    DWORD PTR ds:0xc002db08,eax
c000fc74:	75 13                	jne    c000fc89 <Phys::freePage(unsigned long)+0x54>
c000fc76:	83 ec 08             	sub    esp,0x8
c000fc79:	6a 00                	push   0x0
c000fc7b:	53                   	push   ebx
c000fc7c:	e8 66 ff ff ff       	call   c000fbe7 <Phys::setPageState(unsigned long, bool)>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	83 c4 08             	add    esp,0x8
c000fc87:	5b                   	pop    ebx
c000fc88:	c3                   	ret    
c000fc89:	83 ec 0c             	sub    esp,0xc
c000fc8c:	a3 08 db 02 c0       	mov    ds:0xc002db08,eax
c000fc91:	50                   	push   eax
c000fc92:	e8 5b 0a 00 00       	call   c00106f2 <VgaText::updateRAMUsageDisplay(int)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	eb da                	jmp    c000fc76 <Phys::freePage(unsigned long)+0x41>
c000fc9c:	68 00 10 00 00       	push   0x1000
c000fca1:	53                   	push   ebx
c000fca2:	e8 f8 fe ff ff       	call   c000fb9f <Phys::freeDMA(unsigned long, unsigned long)>
c000fca7:	59                   	pop    ecx
c000fca8:	5b                   	pop    ebx
c000fca9:	83 c4 08             	add    esp,0x8
c000fcac:	5b                   	pop    ebx
c000fcad:	c3                   	ret    
c000fcae:	c7 44 24 10 26 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029a26
c000fcb6:	83 c4 08             	add    esp,0x8
c000fcb9:	5b                   	pop    ebx
c000fcba:	e9 a6 a1 00 00       	jmp    c0019e65 <Krnl::panic(char const*)>

c000fcbf <Phys::allocatePage()>:
c000fcbf:	56                   	push   esi
c000fcc0:	53                   	push   ebx
c000fcc1:	51                   	push   ecx
c000fcc2:	8b 35 00 db 02 c0    	mov    esi,DWORD PTR ds:0xc002db00
c000fcc8:	89 f3                	mov    ebx,esi
c000fcca:	eb 0a                	jmp    c000fcd6 <Phys::allocatePage()+0x17>
c000fccc:	89 1d 00 db 02 c0    	mov    DWORD PTR ds:0xc002db00,ebx
c000fcd2:	39 de                	cmp    esi,ebx
c000fcd4:	74 24                	je     c000fcfa <Phys::allocatePage()+0x3b>
c000fcd6:	53                   	push   ebx
c000fcd7:	e8 3d ff ff ff       	call   c000fc19 <Phys::getPageState(unsigned long)>
c000fcdc:	5a                   	pop    edx
c000fcdd:	84 c0                	test   al,al
c000fcdf:	74 5a                	je     c000fd3b <Phys::allocatePage()+0x7c>
c000fce1:	43                   	inc    ebx
c000fce2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fce8:	75 e2                	jne    c000fccc <Phys::allocatePage()+0xd>
c000fcea:	31 db                	xor    ebx,ebx
c000fcec:	c7 05 00 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db00,0x0
c000fcf6:	39 de                	cmp    esi,ebx
c000fcf8:	75 dc                	jne    c000fcd6 <Phys::allocatePage()+0x17>
c000fcfa:	83 ec 0c             	sub    esp,0xc
c000fcfd:	68 3c 9a 02 c0       	push   0xc0029a3c
c000fd02:	e8 ea 2b 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000fd07:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fd0e:	e8 e9 fd ff ff       	call   c000fafc <Phys::allocateDMA(unsigned long)>
c000fd13:	83 c4 10             	add    esp,0x10
c000fd16:	85 c0                	test   eax,eax
c000fd18:	75 56                	jne    c000fd70 <Phys::allocatePage()+0xb1>
c000fd1a:	83 ec 0c             	sub    esp,0xc
c000fd1d:	68 4d 9a 02 c0       	push   0xc0029a4d
c000fd22:	e8 3e a1 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c000fd27:	83 c4 10             	add    esp,0x10
c000fd2a:	8b 1d 00 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db00
c000fd30:	53                   	push   ebx
c000fd31:	e8 e3 fe ff ff       	call   c000fc19 <Phys::getPageState(unsigned long)>
c000fd36:	5a                   	pop    edx
c000fd37:	84 c0                	test   al,al
c000fd39:	75 a6                	jne    c000fce1 <Phys::allocatePage()+0x22>
c000fd3b:	6a 01                	push   0x1
c000fd3d:	53                   	push   ebx
c000fd3e:	e8 a4 fe ff ff       	call   c000fbe7 <Phys::setPageState(unsigned long, bool)>
c000fd43:	a1 0c db 02 c0       	mov    eax,ds:0xc002db0c
c000fd48:	59                   	pop    ecx
c000fd49:	40                   	inc    eax
c000fd4a:	5b                   	pop    ebx
c000fd4b:	a3 0c db 02 c0       	mov    ds:0xc002db0c,eax
c000fd50:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd53:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd56:	c1 e0 02             	shl    eax,0x2
c000fd59:	99                   	cdq    
c000fd5a:	f7 3d 10 db 02 c0    	idiv   DWORD PTR ds:0xc002db10
c000fd60:	39 05 08 db 02 c0    	cmp    DWORD PTR ds:0xc002db08,eax
c000fd66:	75 0c                	jne    c000fd74 <Phys::allocatePage()+0xb5>
c000fd68:	a1 00 db 02 c0       	mov    eax,ds:0xc002db00
c000fd6d:	c1 e0 0c             	shl    eax,0xc
c000fd70:	5a                   	pop    edx
c000fd71:	5b                   	pop    ebx
c000fd72:	5e                   	pop    esi
c000fd73:	c3                   	ret    
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	a3 08 db 02 c0       	mov    ds:0xc002db08,eax
c000fd7c:	50                   	push   eax
c000fd7d:	e8 70 09 00 00       	call   c00106f2 <VgaText::updateRAMUsageDisplay(int)>
c000fd82:	83 c4 10             	add    esp,0x10
c000fd85:	eb e1                	jmp    c000fd68 <Phys::allocatePage()+0xa9>

c000fd87 <Phys::allocateContiguousPages(int)>:
c000fd87:	57                   	push   edi
c000fd88:	56                   	push   esi
c000fd89:	53                   	push   ebx
c000fd8a:	31 db                	xor    ebx,ebx
c000fd8c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd90:	e8 2b d7 00 00       	call   c001d4c0 <lockScheduler()>
c000fd95:	85 db                	test   ebx,ebx
c000fd97:	75 11                	jne    c000fdaa <Phys::allocateContiguousPages(int)+0x23>
c000fd99:	e8 21 ff ff ff       	call   c000fcbf <Phys::allocatePage()>
c000fd9e:	83 ff 01             	cmp    edi,0x1
c000fda1:	89 c6                	mov    esi,eax
c000fda3:	74 21                	je     c000fdc6 <Phys::allocateContiguousPages(int)+0x3f>
c000fda5:	bb 01 00 00 00       	mov    ebx,0x1
c000fdaa:	e8 10 ff ff ff       	call   c000fcbf <Phys::allocatePage()>
c000fdaf:	89 da                	mov    edx,ebx
c000fdb1:	c1 e2 0c             	shl    edx,0xc
c000fdb4:	01 f2                	add    edx,esi
c000fdb6:	39 c2                	cmp    edx,eax
c000fdb8:	74 17                	je     c000fdd1 <Phys::allocateContiguousPages(int)+0x4a>
c000fdba:	bb 01 00 00 00       	mov    ebx,0x1
c000fdbf:	89 c6                	mov    esi,eax
c000fdc1:	83 ff 01             	cmp    edi,0x1
c000fdc4:	75 e4                	jne    c000fdaa <Phys::allocateContiguousPages(int)+0x23>
c000fdc6:	e8 f7 d6 00 00       	call   c001d4c2 <unlockScheduler()>
c000fdcb:	89 f0                	mov    eax,esi
c000fdcd:	5b                   	pop    ebx
c000fdce:	5e                   	pop    esi
c000fdcf:	5f                   	pop    edi
c000fdd0:	c3                   	ret    
c000fdd1:	43                   	inc    ebx
c000fdd2:	39 fb                	cmp    ebx,edi
c000fdd4:	75 bf                	jne    c000fd95 <Phys::allocateContiguousPages(int)+0xe>
c000fdd6:	e8 e7 d6 00 00       	call   c001d4c2 <unlockScheduler()>
c000fddb:	89 f0                	mov    eax,esi
c000fddd:	5b                   	pop    ebx
c000fdde:	5e                   	pop    esi
c000fddf:	5f                   	pop    edi
c000fde0:	c3                   	ret    

c000fde1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fde1:	56                   	push   esi
c000fde2:	53                   	push   ebx
c000fde3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fde7:	39 1d 04 db 02 c0    	cmp    DWORD PTR ds:0xc002db04,ebx
c000fded:	73 06                	jae    c000fdf5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdef:	89 1d 04 db 02 c0    	mov    DWORD PTR ds:0xc002db04,ebx
c000fdf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdf9:	c1 eb 0c             	shr    ebx,0xc
c000fdfc:	c1 e8 0c             	shr    eax,0xc
c000fdff:	39 d8                	cmp    eax,ebx
c000fe01:	73 13                	jae    c000fe16 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fe03:	6a 00                	push   0x0
c000fe05:	8d 70 01             	lea    esi,[eax+0x1]
c000fe08:	50                   	push   eax
c000fe09:	e8 d9 fd ff ff       	call   c000fbe7 <Phys::setPageState(unsigned long, bool)>
c000fe0e:	5a                   	pop    edx
c000fe0f:	89 f0                	mov    eax,esi
c000fe11:	59                   	pop    ecx
c000fe12:	39 f3                	cmp    ebx,esi
c000fe14:	75 ed                	jne    c000fe03 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe16:	5b                   	pop    ebx
c000fe17:	5e                   	pop    esi
c000fe18:	c3                   	ret    

c000fe19 <Phys::physicalMemorySetup(unsigned int)>:
c000fe19:	55                   	push   ebp
c000fe1a:	57                   	push   edi
c000fe1b:	56                   	push   esi
c000fe1c:	53                   	push   ebx
c000fe1d:	31 db                	xor    ebx,ebx
c000fe1f:	83 ec 40             	sub    esp,0x40
c000fe22:	6a 30                	push   0x30
c000fe24:	6a 00                	push   0x0
c000fe26:	68 20 db 02 c0       	push   0xc002db20
c000fe2b:	e8 92 08 ff ff       	call   c00006c2 <memset>
c000fe30:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe34:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe39:	05 00 10 00 00       	add    eax,0x1000
c000fe3e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe42:	83 c4 10             	add    esp,0x10
c000fe45:	83 ec 08             	sub    esp,0x8
c000fe48:	6a 01                	push   0x1
c000fe4a:	53                   	push   ebx
c000fe4b:	43                   	inc    ebx
c000fe4c:	e8 96 fd ff ff       	call   c000fbe7 <Phys::setPageState(unsigned long, bool)>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe5a:	75 e9                	jne    c000fe45 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe5c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe63:	66 85 c0             	test   ax,ax
c000fe66:	0f 84 8e 01 00 00    	je     c000fffa <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe7c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe81:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe85:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe8d:	eb 15                	jmp    c000fea4 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe8f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe93:	83 c3 18             	add    ebx,0x18
c000fe96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe9a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe9e:	0f 84 66 01 00 00    	je     c001000a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fea4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fea7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000feaa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fead:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feb1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feb5:	8b 33                	mov    esi,DWORD PTR [ebx]
c000feb7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000feba:	01 f0                	add    eax,esi
c000febc:	55                   	push   ebp
c000febd:	11 fa                	adc    edx,edi
c000febf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fec3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fec7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fecb:	56                   	push   esi
c000fecc:	68 88 9a 02 c0       	push   0xc0029a88
c000fed1:	e8 1b 2a 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000fed6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feda:	83 c4 10             	add    esp,0x10
c000fedd:	09 f8                	or     eax,edi
c000fedf:	0f 85 25 01 00 00    	jne    c001000a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fee5:	4d                   	dec    ebp
c000fee6:	75 a7                	jne    c000fe8f <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fee8:	ba 00 00 08 00       	mov    edx,0x80000
c000feed:	89 c1                	mov    ecx,eax
c000feef:	39 f2                	cmp    edx,esi
c000fef1:	19 f9                	sbb    ecx,edi
c000fef3:	0f 82 a7 00 00 00    	jb     c000ffa0 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fef9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fefd:	89 c1                	mov    ecx,eax
c000feff:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000ff03:	0f 83 97 00 00 00    	jae    c000ffa0 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000ff09:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff12:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff16:	39 fa                	cmp    edx,edi
c000ff18:	19 e8                	sbb    eax,ebp
c000ff1a:	0f 82 14 01 00 00    	jb     c0010034 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff20:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff24:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff28:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff2e:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff33:	83 d5 ff             	adc    ebp,0xffffffff
c000ff36:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff3a:	31 c0                	xor    eax,eax
c000ff3c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff40:	39 fa                	cmp    edx,edi
c000ff42:	89 c1                	mov    ecx,eax
c000ff44:	19 e9                	sbb    ecx,ebp
c000ff46:	0f 83 43 ff ff ff    	jae    c000fe8f <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff4c:	be 00 00 08 00       	mov    esi,0x80000
c000ff51:	50                   	push   eax
c000ff52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff56:	57                   	push   edi
c000ff57:	56                   	push   esi
c000ff58:	68 ac 9a 02 c0       	push   0xc0029aac
c000ff5d:	e8 8f 29 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000ff62:	5a                   	pop    edx
c000ff63:	59                   	pop    ecx
c000ff64:	57                   	push   edi
c000ff65:	56                   	push   esi
c000ff66:	e8 76 fe ff ff       	call   c000fde1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff6b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff73:	83 c4 0c             	add    esp,0xc
c000ff76:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff7a:	03 05 10 db 02 c0    	add    eax,DWORD PTR ds:0xc002db10
c000ff80:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff87:	a3 10 db 02 c0       	mov    ds:0xc002db10,eax
c000ff8c:	52                   	push   edx
c000ff8d:	50                   	push   eax
c000ff8e:	68 69 9a 02 c0       	push   0xc0029a69
c000ff93:	e8 59 29 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c000ff98:	83 c4 10             	add    esp,0x10
c000ff9b:	e9 ef fe ff ff       	jmp    c000fe8f <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffa0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ffa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffa8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffac:	39 ea                	cmp    edx,ebp
c000ffae:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ffb2:	0f 82 d7 fe ff ff    	jb     c000fe8f <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffb8:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ffbd:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ffc1:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ffc5:	0f 83 c4 fe ff ff    	jae    c000fe8f <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffcb:	39 ee                	cmp    esi,ebp
c000ffcd:	89 f8                	mov    eax,edi
c000ffcf:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffd3:	0f 83 78 ff ff ff    	jae    c000ff51 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffe1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffe5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffe9:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fff1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fff5:	e9 57 ff ff ff       	jmp    c000ff51 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	68 5b 9a 02 c0       	push   0xc0029a5b
c0010002:	e8 5e 9e 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	bb 40 01 00 00       	mov    ebx,0x140
c001000f:	83 ec 08             	sub    esp,0x8
c0010012:	6a 00                	push   0x0
c0010014:	53                   	push   ebx
c0010015:	43                   	inc    ebx
c0010016:	e8 cc fb ff ff       	call   c000fbe7 <Phys::setPageState(unsigned long, bool)>
c001001b:	ff 05 10 db 02 c0    	inc    DWORD PTR ds:0xc002db10
c0010021:	83 c4 10             	add    esp,0x10
c0010024:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001002a:	75 e3                	jne    c001000f <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001002c:	83 c4 3c             	add    esp,0x3c
c001002f:	5b                   	pop    ebx
c0010030:	5e                   	pop    esi
c0010031:	5f                   	pop    edi
c0010032:	5d                   	pop    ebp
c0010033:	c3                   	ret    
c0010034:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001003c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010044:	e9 d7 fe ff ff       	jmp    c000ff20 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010049:	90                   	nop

c001004a <Pipe::isAtty()>:
c001004a:	31 c0                	xor    eax,eax
c001004c:	c3                   	ret    
c001004d:	90                   	nop

c001004e <Pipe::~Pipe()>:
c001004e:	83 ec 0c             	sub    esp,0xc
c0010051:	ba 18 9b 02 c0       	mov    edx,0xc0029b18
c0010056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005a:	89 10                	mov    DWORD PTR [eax],edx
c001005c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010060:	83 ec 0c             	sub    esp,0xc
c0010063:	50                   	push   eax
c0010064:	e8 37 16 00 00       	call   c00116a0 <UnixFile::~UnixFile()>
c0010069:	83 c4 10             	add    esp,0x10
c001006c:	90                   	nop
c001006d:	83 c4 0c             	add    esp,0xc
c0010070:	c3                   	ret    
c0010071:	90                   	nop

c0010072 <Pipe::~Pipe()>:
c0010072:	83 ec 0c             	sub    esp,0xc
c0010075:	83 ec 0c             	sub    esp,0xc
c0010078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001007c:	e8 cd ff ff ff       	call   c001004e <Pipe::~Pipe()>
c0010081:	83 c4 10             	add    esp,0x10
c0010084:	83 ec 08             	sub    esp,0x8
c0010087:	6a 20                	push   0x20
c0010089:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001008d:	e8 7f 27 00 00       	call   c0012811 <operator delete(void*, unsigned long)>
c0010092:	83 c4 10             	add    esp,0x10
c0010095:	83 c4 0c             	add    esp,0xc
c0010098:	c3                   	ret    
c0010099:	90                   	nop

c001009a <Pipe::read(unsigned long long, void*, int*)>:
c001009a:	55                   	push   ebp
c001009b:	57                   	push   edi
c001009c:	56                   	push   esi
c001009d:	53                   	push   ebx
c001009e:	83 ec 1c             	sub    esp,0x1c
c00100a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00100a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00100a9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00100ad:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00100b0:	89 c8                	mov    eax,ecx
c00100b2:	99                   	cdq    
c00100b3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00100b7:	74 19                	je     c00100d2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100b9:	39 f9                	cmp    ecx,edi
c00100bb:	89 d1                	mov    ecx,edx
c00100bd:	19 f1                	sbb    ecx,esi
c00100bf:	73 11                	jae    c00100d2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100c1:	e8 fa d3 00 00       	call   c001d4c0 <lockScheduler()>
c00100c6:	e8 31 d7 00 00       	call   c001d7fc <schedule()>
c00100cb:	e8 f2 d3 00 00       	call   c001d4c2 <unlockScheduler()>
c00100d0:	eb db                	jmp    c00100ad <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100d2:	39 f8                	cmp    eax,edi
c00100d4:	89 d1                	mov    ecx,edx
c00100d6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00100de:	19 f1                	sbb    ecx,esi
c00100e0:	73 08                	jae    c00100ea <Pipe::read(unsigned long long, void*, int*)+0x50>
c00100e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100ed:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100f0:	29 c6                	sub    esi,eax
c00100f2:	89 f1                	mov    ecx,esi
c00100f4:	c1 f9 1f             	sar    ecx,0x1f
c00100f7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00100fb:	89 ca                	mov    edx,ecx
c00100fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010101:	19 d1                	sbb    ecx,edx
c0010103:	73 04                	jae    c0010109 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010105:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010109:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001010d:	89 fd                	mov    ebp,edi
c001010f:	29 f5                	sub    ebp,esi
c0010111:	85 f6                	test   esi,esi
c0010113:	74 12                	je     c0010127 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010115:	52                   	push   edx
c0010116:	56                   	push   esi
c0010117:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001011a:	50                   	push   eax
c001011b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001011f:	e8 7c 05 ff ff       	call   c00006a0 <memcpy>
c0010124:	83 c4 10             	add    esp,0x10
c0010127:	85 ed                	test   ebp,ebp
c0010129:	74 12                	je     c001013d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001012b:	50                   	push   eax
c001012c:	55                   	push   ebp
c001012d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010130:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010134:	56                   	push   esi
c0010135:	e8 66 05 ff ff       	call   c00006a0 <memcpy>
c001013a:	83 c4 10             	add    esp,0x10
c001013d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010140:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010143:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010146:	99                   	cdq    
c0010147:	89 f7                	mov    edi,esi
c0010149:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001014d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010151:	c1 ff 1f             	sar    edi,0x1f
c0010154:	57                   	push   edi
c0010155:	56                   	push   esi
c0010156:	52                   	push   edx
c0010157:	50                   	push   eax
c0010158:	e8 ef 60 01 00       	call   c002624c <__umoddi3>
c001015d:	83 c4 10             	add    esp,0x10
c0010160:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010163:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010168:	75 10                	jne    c001017a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001016a:	83 ec 0c             	sub    esp,0xc
c001016d:	68 d5 9a 02 c0       	push   0xc0029ad5
c0010172:	e8 ee 9c 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0010177:	83 c4 10             	add    esp,0x10
c001017a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001017e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010182:	89 10                	mov    DWORD PTR [eax],edx
c0010184:	83 c4 1c             	add    esp,0x1c
c0010187:	31 c0                	xor    eax,eax
c0010189:	5b                   	pop    ebx
c001018a:	5e                   	pop    esi
c001018b:	5f                   	pop    edi
c001018c:	5d                   	pop    ebp
c001018d:	c3                   	ret    

c001018e <Pipe::write(unsigned long long, void*, int*)>:
c001018e:	55                   	push   ebp
c001018f:	57                   	push   edi
c0010190:	56                   	push   esi
c0010191:	53                   	push   ebx
c0010192:	83 ec 1c             	sub    esp,0x1c
c0010195:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010199:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001019d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00101a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00101a4:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00101a7:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00101aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101ae:	89 de                	mov    esi,ebx
c00101b0:	89 df                	mov    edi,ebx
c00101b2:	c1 ff 1f             	sar    edi,0x1f
c00101b5:	01 c6                	add    esi,eax
c00101b7:	89 c8                	mov    eax,ecx
c00101b9:	11 d7                	adc    edi,edx
c00101bb:	99                   	cdq    
c00101bc:	39 f1                	cmp    ecx,esi
c00101be:	89 d0                	mov    eax,edx
c00101c0:	19 f8                	sbb    eax,edi
c00101c2:	b8 01 00 00 00       	mov    eax,0x1
c00101c7:	0f 82 80 00 00 00    	jb     c001024d <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00101cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101d0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00101d3:	01 d8                	add    eax,ebx
c00101d5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00101d9:	99                   	cdq    
c00101da:	f7 f9                	idiv   ecx
c00101dc:	29 d1                	sub    ecx,edx
c00101de:	89 d7                	mov    edi,edx
c00101e0:	89 c8                	mov    eax,ecx
c00101e2:	99                   	cdq    
c00101e3:	39 ce                	cmp    esi,ecx
c00101e5:	19 d3                	sbb    ebx,edx
c00101e7:	bb 00 00 00 00       	mov    ebx,0x0
c00101ec:	72 04                	jb     c00101f2 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00101ee:	89 f3                	mov    ebx,esi
c00101f0:	29 cb                	sub    ebx,ecx
c00101f2:	89 f1                	mov    ecx,esi
c00101f4:	29 d9                	sub    ecx,ebx
c00101f6:	74 1a                	je     c0010212 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00101f8:	52                   	push   edx
c00101f9:	51                   	push   ecx
c00101fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010202:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010205:	57                   	push   edi
c0010206:	e8 95 04 ff ff       	call   c00006a0 <memcpy>
c001020b:	83 c4 10             	add    esp,0x10
c001020e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010212:	85 db                	test   ebx,ebx
c0010214:	74 12                	je     c0010228 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010216:	50                   	push   eax
c0010217:	53                   	push   ebx
c0010218:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001021c:	51                   	push   ecx
c001021d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010220:	e8 7b 04 ff ff       	call   c00006a0 <memcpy>
c0010225:	83 c4 10             	add    esp,0x10
c0010228:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001022b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010230:	75 10                	jne    c0010242 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010232:	83 ec 0c             	sub    esp,0xc
c0010235:	68 f1 9a 02 c0       	push   0xc0029af1
c001023a:	e8 26 9c 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c001023f:	83 c4 10             	add    esp,0x10
c0010242:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010246:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010249:	89 38                	mov    DWORD PTR [eax],edi
c001024b:	31 c0                	xor    eax,eax
c001024d:	83 c4 1c             	add    esp,0x1c
c0010250:	5b                   	pop    ebx
c0010251:	5e                   	pop    esi
c0010252:	5f                   	pop    edi
c0010253:	5d                   	pop    ebp
c0010254:	c3                   	ret    
c0010255:	90                   	nop

c0010256 <Pipe::Pipe(int)>:
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025d:	83 ec 08             	sub    esp,0x8
c0010260:	6a 00                	push   0x0
c0010262:	50                   	push   eax
c0010263:	e8 56 12 00 00       	call   c00114be <UnixFile::UnixFile(int)>
c0010268:	83 c4 10             	add    esp,0x10
c001026b:	ba 18 9b 02 c0       	mov    edx,0xc0029b18
c0010270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010274:	89 10                	mov    DWORD PTR [eax],edx
c0010276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001027e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010285:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001028c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010290:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010297:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001029b:	83 ec 0c             	sub    esp,0xc
c001029e:	50                   	push   eax
c001029f:	e8 7e f3 ff ff       	call   c000f622 <malloc>
c00102a4:	83 c4 10             	add    esp,0x10
c00102a7:	89 c2                	mov    edx,eax
c00102a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00102b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00102b8:	90                   	nop
c00102b9:	83 c4 0c             	add    esp,0xc
c00102bc:	c3                   	ret    
c00102bd:	90                   	nop

c00102be <VgaText::isAtty()>:
c00102be:	b0 01                	mov    al,0x1
c00102c0:	c3                   	ret    
c00102c1:	90                   	nop

c00102c2 <VgaText::~VgaText()>:
c00102c2:	83 ec 0c             	sub    esp,0xc
c00102c5:	ba d4 9b 02 c0       	mov    edx,0xc0029bd4
c00102ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ce:	89 10                	mov    DWORD PTR [eax],edx
c00102d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d4:	83 ec 0c             	sub    esp,0xc
c00102d7:	50                   	push   eax
c00102d8:	e8 c3 13 00 00       	call   c00116a0 <UnixFile::~UnixFile()>
c00102dd:	83 c4 10             	add    esp,0x10
c00102e0:	90                   	nop
c00102e1:	83 c4 0c             	add    esp,0xc
c00102e4:	c3                   	ret    
c00102e5:	90                   	nop

c00102e6 <VgaText::~VgaText()>:
c00102e6:	83 ec 0c             	sub    esp,0xc
c00102e9:	83 ec 0c             	sub    esp,0xc
c00102ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f0:	e8 cd ff ff ff       	call   c00102c2 <VgaText::~VgaText()>
c00102f5:	83 c4 10             	add    esp,0x10
c00102f8:	83 ec 08             	sub    esp,0x8
c00102fb:	68 60 12 00 00       	push   0x1260
c0010300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010304:	e8 08 25 00 00       	call   c0012811 <operator delete(void*, unsigned long)>
c0010309:	83 c4 10             	add    esp,0x10
c001030c:	83 c4 0c             	add    esp,0xc
c001030f:	c3                   	ret    

c0010310 <VgaText::read(unsigned long long, void*, int*)>:
c0010310:	83 ec 10             	sub    esp,0x10
c0010313:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010317:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001031b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031f:	e8 1d 59 00 00       	call   c0015c41 <readKeyboard(VgaText*, char*, unsigned long)>
c0010324:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010328:	89 02                	mov    DWORD PTR [edx],eax
c001032a:	31 c0                	xor    eax,eax
c001032c:	83 c4 1c             	add    esp,0x1c
c001032f:	c3                   	ret    

c0010330 <setTerminalScrollLock(bool)>:
c0010330:	c3                   	ret    

c0010331 <addToTerminalCycle(VgaText*)>:
c0010331:	8b 15 a0 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dba0
c0010337:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033b:	85 d2                	test   edx,edx
c001033d:	75 0c                	jne    c001034b <addToTerminalCycle(VgaText*)+0x1a>
c001033f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010345:	a3 a0 db 02 c0       	mov    ds:0xc002dba0,eax
c001034a:	c3                   	ret    
c001034b:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010351:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010357:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001035d:	c3                   	ret    

c001035e <installVgaTextImplementation()>:
c001035e:	83 ec 10             	sub    esp,0x10
c0010361:	6a 20                	push   0x20
c0010363:	6a 00                	push   0x0
c0010365:	68 80 db 02 c0       	push   0xc002db80
c001036a:	e8 53 03 ff ff       	call   c00006c2 <memset>
c001036f:	83 c4 1c             	add    esp,0x1c
c0010372:	c3                   	ret    

c0010373 <scrollTerminalScrollLock(int)>:
c0010373:	c3                   	ret    

c0010374 <VgaText::load()>:
c0010374:	53                   	push   ebx
c0010375:	31 c0                	xor    eax,eax
c0010377:	83 ec 58             	sub    esp,0x58
c001037a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001037e:	89 e2                	mov    edx,esp
c0010380:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010384:	40                   	inc    eax
c0010385:	83 f8 50             	cmp    eax,0x50
c0010388:	75 f6                	jne    c0010380 <VgaText::load()+0xc>
c001038a:	31 c0                	xor    eax,eax
c001038c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010393:	84 c9                	test   cl,cl
c0010395:	74 06                	je     c001039d <VgaText::load()+0x29>
c0010397:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001039a:	40                   	inc    eax
c001039b:	eb ef                	jmp    c001038c <VgaText::load()+0x18>
c001039d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00103a3:	85 c0                	test   eax,eax
c00103a5:	74 09                	je     c00103b0 <VgaText::load()+0x3c>
c00103a7:	51                   	push   ecx
c00103a8:	51                   	push   ecx
c00103a9:	52                   	push   edx
c00103aa:	53                   	push   ebx
c00103ab:	ff d0                	call   eax
c00103ad:	83 c4 10             	add    esp,0x10
c00103b0:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00103b6:	85 c0                	test   eax,eax
c00103b8:	74 09                	je     c00103c3 <VgaText::load()+0x4f>
c00103ba:	83 ec 0c             	sub    esp,0xc
c00103bd:	53                   	push   ebx
c00103be:	ff d0                	call   eax
c00103c0:	83 c4 10             	add    esp,0x10
c00103c3:	83 c4 58             	add    esp,0x58
c00103c6:	5b                   	pop    ebx
c00103c7:	c3                   	ret    

c00103c8 <VgaText::updateCursor()>:
c00103c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103cc:	39 05 a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,eax
c00103d2:	75 0c                	jne    c00103e0 <VgaText::updateCursor()+0x18>
c00103d4:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00103da:	85 c0                	test   eax,eax
c00103dc:	74 02                	je     c00103e0 <VgaText::updateCursor()+0x18>
c00103de:	ff e0                	jmp    eax
c00103e0:	c3                   	ret    
c00103e1:	90                   	nop

c00103e2 <VgaText::showCursor(bool)>:
c00103e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ea:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00103f0:	c3                   	ret    
c00103f1:	90                   	nop

c00103f2 <VgaText::disableBlink(bool)>:
c00103f2:	56                   	push   esi
c00103f3:	53                   	push   ebx
c00103f4:	51                   	push   ecx
c00103f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103fd:	39 1d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebx
c0010403:	75 18                	jne    c001041d <VgaText::disableBlink(bool)+0x2b>
c0010405:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001040b:	85 c0                	test   eax,eax
c001040d:	74 0e                	je     c001041d <VgaText::disableBlink(bool)+0x2b>
c001040f:	89 f1                	mov    ecx,esi
c0010411:	52                   	push   edx
c0010412:	52                   	push   edx
c0010413:	0f b6 d1             	movzx  edx,cl
c0010416:	52                   	push   edx
c0010417:	53                   	push   ebx
c0010418:	ff d0                	call   eax
c001041a:	83 c4 10             	add    esp,0x10
c001041d:	89 f0                	mov    eax,esi
c001041f:	83 f0 01             	xor    eax,0x1
c0010422:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010428:	58                   	pop    eax
c0010429:	5b                   	pop    ebx
c001042a:	5e                   	pop    esi
c001042b:	c3                   	ret    

c001042c <VgaText::doANSI_SGR(int)>:
c001042c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010434:	85 d2                	test   edx,edx
c0010436:	75 14                	jne    c001044c <VgaText::doANSI_SGR(int)+0x20>
c0010438:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001043e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010444:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001044a:	eb 65                	jmp    c00104b1 <VgaText::doANSI_SGR(int)+0x85>
c001044c:	83 fa 07             	cmp    edx,0x7
c001044f:	75 14                	jne    c0010465 <VgaText::doANSI_SGR(int)+0x39>
c0010451:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010457:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001045d:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010463:	eb 4c                	jmp    c00104b1 <VgaText::doANSI_SGR(int)+0x85>
c0010465:	83 fa 1b             	cmp    edx,0x1b
c0010468:	74 ce                	je     c0010438 <VgaText::doANSI_SGR(int)+0xc>
c001046a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001046d:	83 f9 07             	cmp    ecx,0x7
c0010470:	77 09                	ja     c001047b <VgaText::doANSI_SGR(int)+0x4f>
c0010472:	8b 14 8d 20 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd35e0]
c0010479:	eb 20                	jmp    c001049b <VgaText::doANSI_SGR(int)+0x6f>
c001047b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001047e:	83 f9 07             	cmp    ecx,0x7
c0010481:	77 09                	ja     c001048c <VgaText::doANSI_SGR(int)+0x60>
c0010483:	8b 14 8d 20 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd35e0]
c001048a:	eb 25                	jmp    c00104b1 <VgaText::doANSI_SGR(int)+0x85>
c001048c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001048f:	83 f9 07             	cmp    ecx,0x7
c0010492:	77 0e                	ja     c00104a2 <VgaText::doANSI_SGR(int)+0x76>
c0010494:	8b 14 95 d8 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3728]
c001049b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104a1:	c3                   	ret    
c00104a2:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00104a5:	83 f9 07             	cmp    ecx,0x7
c00104a8:	77 0d                	ja     c00104b7 <VgaText::doANSI_SGR(int)+0x8b>
c00104aa:	8b 14 95 b0 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3750]
c00104b1:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104b7:	c3                   	ret    

c00104b8 <VgaText::setDefaultBgColour(VgaColour)>:
c00104b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104c0:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104c6:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104cc:	c3                   	ret    
c00104cd:	90                   	nop

c00104ce <VgaText::setDefaultFgColour(VgaColour)>:
c00104ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104d6:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00104dc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104e2:	c3                   	ret    
c00104e3:	90                   	nop

c00104e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104e4:	53                   	push   ebx
c00104e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104f1:	51                   	push   ecx
c00104f2:	e8 c1 ff ff ff       	call   c00104b8 <VgaText::setDefaultBgColour(VgaColour)>
c00104f7:	58                   	pop    eax
c00104f8:	5a                   	pop    edx
c00104f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010501:	5b                   	pop    ebx
c0010502:	eb ca                	jmp    c00104ce <VgaText::setDefaultFgColour(VgaColour)>

c0010504 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010504:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010508:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001050d:	83 e0 0f             	and    eax,0xf
c0010510:	c1 e2 04             	shl    edx,0x4
c0010513:	09 d0                	or     eax,edx
c0010515:	c3                   	ret    

c0010516 <VgaText::scrollScreen()>:
c0010516:	57                   	push   edi
c0010517:	56                   	push   esi
c0010518:	be 01 00 00 00       	mov    esi,0x1
c001051d:	53                   	push   ebx
c001051e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010522:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010528:	31 ff                	xor    edi,edi
c001052a:	01 d9                	add    ecx,ebx
c001052c:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001052f:	83 fe 17             	cmp    esi,0x17
c0010532:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010538:	75 28                	jne    c0010562 <VgaText::scrollScreen()+0x4c>
c001053a:	f7 c7 01 00 00 00    	test   edi,0x1
c0010540:	74 1c                	je     c001055e <VgaText::scrollScreen()+0x48>
c0010542:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010549:	50                   	push   eax
c001054a:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010551:	50                   	push   eax
c0010552:	e8 ad ff ff ff       	call   c0010504 <VgaText::combineColours(unsigned char, unsigned char)>
c0010557:	5a                   	pop    edx
c0010558:	5a                   	pop    edx
c0010559:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001055c:	eb 04                	jmp    c0010562 <VgaText::scrollScreen()+0x4c>
c001055e:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010562:	47                   	inc    edi
c0010563:	41                   	inc    ecx
c0010564:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001056a:	75 c0                	jne    c001052c <VgaText::scrollScreen()+0x16>
c001056c:	46                   	inc    esi
c001056d:	83 fe 18             	cmp    esi,0x18
c0010570:	75 b0                	jne    c0010522 <VgaText::scrollScreen()+0xc>
c0010572:	39 1d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebx
c0010578:	75 24                	jne    c001059e <VgaText::scrollScreen()+0x88>
c001057a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010581:	74 08                	je     c001058b <VgaText::scrollScreen()+0x75>
c0010583:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010589:	eb 13                	jmp    c001059e <VgaText::scrollScreen()+0x88>
c001058b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010591:	85 c0                	test   eax,eax
c0010593:	74 09                	je     c001059e <VgaText::scrollScreen()+0x88>
c0010595:	83 ec 0c             	sub    esp,0xc
c0010598:	53                   	push   ebx
c0010599:	ff d0                	call   eax
c001059b:	83 c4 10             	add    esp,0x10
c001059e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105a2:	5b                   	pop    ebx
c00105a3:	5e                   	pop    esi
c00105a4:	5f                   	pop    edi
c00105a5:	e9 1e fe ff ff       	jmp    c00103c8 <VgaText::updateCursor()>

c00105aa <VgaText::combineCharAndColour(char, unsigned char)>:
c00105aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00105af:	c1 e0 08             	shl    eax,0x8
c00105b2:	89 c2                	mov    edx,eax
c00105b4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00105b9:	09 d0                	or     eax,edx
c00105bb:	c3                   	ret    

c00105bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105bc:	53                   	push   ebx
c00105bd:	83 ec 08             	sub    esp,0x8
c00105c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105c4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105c9:	50                   	push   eax
c00105ca:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105cf:	50                   	push   eax
c00105d0:	e8 2f ff ff ff       	call   c0010504 <VgaText::combineColours(unsigned char, unsigned char)>
c00105d5:	5a                   	pop    edx
c00105d6:	0f b6 c0             	movzx  eax,al
c00105d9:	5b                   	pop    ebx
c00105da:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105df:	50                   	push   eax
c00105e0:	53                   	push   ebx
c00105e1:	e8 c4 ff ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c00105e6:	5a                   	pop    edx
c00105e7:	5a                   	pop    edx
c00105e8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105ee:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105f2:	0f b7 d2             	movzx  edx,dx
c00105f5:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00105fa:	39 0d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ecx
c0010600:	75 14                	jne    c0010616 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010602:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010608:	85 c0                	test   eax,eax
c001060a:	74 0a                	je     c0010616 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001060c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010610:	83 c4 08             	add    esp,0x8
c0010613:	5b                   	pop    ebx
c0010614:	ff e0                	jmp    eax
c0010616:	83 c4 08             	add    esp,0x8
c0010619:	5b                   	pop    ebx
c001061a:	c3                   	ret    
c001061b:	90                   	nop

c001061c <VgaText::getCursorX()>:
c001061c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010620:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010626:	c3                   	ret    
c0010627:	90                   	nop

c0010628 <VgaText::getCursorY()>:
c0010628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001062c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010632:	c3                   	ret    
c0010633:	90                   	nop

c0010634 <VgaText::setCursor(int, int)>:
c0010634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010638:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001063c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010646:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001064c:	e9 77 fd ff ff       	jmp    c00103c8 <VgaText::updateCursor()>
c0010651:	90                   	nop

c0010652 <VgaText::setCursorX(int)>:
c0010652:	83 ec 10             	sub    esp,0x10
c0010655:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010659:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001065f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010663:	50                   	push   eax
c0010664:	e8 cb ff ff ff       	call   c0010634 <VgaText::setCursor(int, int)>
c0010669:	83 c4 1c             	add    esp,0x1c
c001066c:	c3                   	ret    
c001066d:	90                   	nop

c001066e <VgaText::setCursorY(int)>:
c001066e:	83 ec 10             	sub    esp,0x10
c0010671:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010675:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010679:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001067f:	50                   	push   eax
c0010680:	e8 af ff ff ff       	call   c0010634 <VgaText::setCursor(int, int)>
c0010685:	83 c4 1c             	add    esp,0x1c
c0010688:	c3                   	ret    
c0010689:	90                   	nop

c001068a <VgaText::incrementCursor(bool)>:
c001068a:	56                   	push   esi
c001068b:	53                   	push   ebx
c001068c:	51                   	push   ecx
c001068d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010691:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010695:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001069b:	40                   	inc    eax
c001069c:	83 f8 50             	cmp    eax,0x50
c001069f:	74 08                	je     c00106a9 <VgaText::incrementCursor(bool)+0x1f>
c00106a1:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00106a7:	eb 33                	jmp    c00106dc <VgaText::incrementCursor(bool)+0x52>
c00106a9:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00106af:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00106b9:	8d 50 01             	lea    edx,[eax+0x1]
c00106bc:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106c2:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00106c8:	75 12                	jne    c00106dc <VgaText::incrementCursor(bool)+0x52>
c00106ca:	83 ec 0c             	sub    esp,0xc
c00106cd:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00106d3:	53                   	push   ebx
c00106d4:	e8 3d fe ff ff       	call   c0010516 <VgaText::scrollScreen()>
c00106d9:	83 c4 10             	add    esp,0x10
c00106dc:	89 f0                	mov    eax,esi
c00106de:	84 c0                	test   al,al
c00106e0:	74 0c                	je     c00106ee <VgaText::incrementCursor(bool)+0x64>
c00106e2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106e6:	5a                   	pop    edx
c00106e7:	5b                   	pop    ebx
c00106e8:	5e                   	pop    esi
c00106e9:	e9 da fc ff ff       	jmp    c00103c8 <VgaText::updateCursor()>
c00106ee:	58                   	pop    eax
c00106ef:	5b                   	pop    ebx
c00106f0:	5e                   	pop    esi
c00106f1:	c3                   	ret    

c00106f2 <VgaText::updateRAMUsageDisplay(int)>:
c00106f2:	56                   	push   esi
c00106f3:	8b 35 00 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca00
c00106f9:	53                   	push   ebx
c00106fa:	bb 0a 00 00 00       	mov    ebx,0xa
c00106ff:	6a 0f                	push   0xf
c0010701:	6a 00                	push   0x0
c0010703:	e8 fc fd ff ff       	call   c0010504 <VgaText::combineColours(unsigned char, unsigned char)>
c0010708:	5a                   	pop    edx
c0010709:	59                   	pop    ecx
c001070a:	0f b6 c8             	movzx  ecx,al
c001070d:	51                   	push   ecx
c001070e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010712:	99                   	cdq    
c0010713:	f7 fb                	idiv   ebx
c0010715:	89 d3                	mov    ebx,edx
c0010717:	83 c0 30             	add    eax,0x30
c001071a:	83 c3 30             	add    ebx,0x30
c001071d:	0f be c0             	movsx  eax,al
c0010720:	0f b6 db             	movzx  ebx,bl
c0010723:	50                   	push   eax
c0010724:	e8 81 fe ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010729:	5a                   	pop    edx
c001072a:	5a                   	pop    edx
c001072b:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010732:	51                   	push   ecx
c0010733:	53                   	push   ebx
c0010734:	e8 71 fe ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010739:	5b                   	pop    ebx
c001073a:	5a                   	pop    edx
c001073b:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010742:	51                   	push   ecx
c0010743:	6a 25                	push   0x25
c0010745:	e8 60 fe ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c001074a:	59                   	pop    ecx
c001074b:	5b                   	pop    ebx
c001074c:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010753:	5b                   	pop    ebx
c0010754:	5e                   	pop    esi
c0010755:	c3                   	ret    

c0010756 <VgaText::updateDiskUsage()>:
c0010756:	55                   	push   ebp
c0010757:	bd 10 27 00 00       	mov    ebp,0x2710
c001075c:	57                   	push   edi
c001075d:	8b 3d 00 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca00
c0010763:	56                   	push   esi
c0010764:	53                   	push   ebx
c0010765:	6a 0f                	push   0xf
c0010767:	6a 00                	push   0x0
c0010769:	e8 96 fd ff ff       	call   c0010504 <VgaText::combineColours(unsigned char, unsigned char)>
c001076e:	5a                   	pop    edx
c001076f:	0f b6 d8             	movzx  ebx,al
c0010772:	59                   	pop    ecx
c0010773:	8b 35 28 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031e28
c0010779:	53                   	push   ebx
c001077a:	b9 0a 00 00 00       	mov    ecx,0xa
c001077f:	89 f0                	mov    eax,esi
c0010781:	99                   	cdq    
c0010782:	f7 fd                	idiv   ebp
c0010784:	99                   	cdq    
c0010785:	f7 f9                	idiv   ecx
c0010787:	8d 42 30             	lea    eax,[edx+0x30]
c001078a:	0f b6 c0             	movzx  eax,al
c001078d:	50                   	push   eax
c001078e:	e8 17 fe ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010793:	5d                   	pop    ebp
c0010794:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010799:	5a                   	pop    edx
c001079a:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001079e:	53                   	push   ebx
c001079f:	89 f0                	mov    eax,esi
c00107a1:	99                   	cdq    
c00107a2:	f7 fd                	idiv   ebp
c00107a4:	99                   	cdq    
c00107a5:	f7 f9                	idiv   ecx
c00107a7:	8d 42 30             	lea    eax,[edx+0x30]
c00107aa:	0f b6 c0             	movzx  eax,al
c00107ad:	50                   	push   eax
c00107ae:	e8 f7 fd ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c00107b3:	5d                   	pop    ebp
c00107b4:	bd 64 00 00 00       	mov    ebp,0x64
c00107b9:	5a                   	pop    edx
c00107ba:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107c1:	53                   	push   ebx
c00107c2:	89 f0                	mov    eax,esi
c00107c4:	99                   	cdq    
c00107c5:	f7 fd                	idiv   ebp
c00107c7:	99                   	cdq    
c00107c8:	f7 f9                	idiv   ecx
c00107ca:	8d 42 30             	lea    eax,[edx+0x30]
c00107cd:	0f b6 c0             	movzx  eax,al
c00107d0:	50                   	push   eax
c00107d1:	e8 d4 fd ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c00107d6:	5d                   	pop    ebp
c00107d7:	5a                   	pop    edx
c00107d8:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00107df:	53                   	push   ebx
c00107e0:	89 f0                	mov    eax,esi
c00107e2:	99                   	cdq    
c00107e3:	f7 f9                	idiv   ecx
c00107e5:	89 d6                	mov    esi,edx
c00107e7:	99                   	cdq    
c00107e8:	f7 f9                	idiv   ecx
c00107ea:	8d 42 30             	lea    eax,[edx+0x30]
c00107ed:	0f b6 c0             	movzx  eax,al
c00107f0:	50                   	push   eax
c00107f1:	e8 b4 fd ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c00107f6:	5d                   	pop    ebp
c00107f7:	5a                   	pop    edx
c00107f8:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00107ff:	53                   	push   ebx
c0010800:	8d 46 30             	lea    eax,[esi+0x30]
c0010803:	0f b6 f0             	movzx  esi,al
c0010806:	56                   	push   esi
c0010807:	e8 9e fd ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c001080c:	5e                   	pop    esi
c001080d:	8b 35 24 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031e24
c0010813:	5d                   	pop    ebp
c0010814:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c001081b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010820:	53                   	push   ebx
c0010821:	89 f0                	mov    eax,esi
c0010823:	99                   	cdq    
c0010824:	f7 fd                	idiv   ebp
c0010826:	99                   	cdq    
c0010827:	f7 f9                	idiv   ecx
c0010829:	8d 42 30             	lea    eax,[edx+0x30]
c001082c:	0f b6 c0             	movzx  eax,al
c001082f:	50                   	push   eax
c0010830:	e8 75 fd ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010835:	5a                   	pop    edx
c0010836:	5d                   	pop    ebp
c0010837:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c001083e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010843:	53                   	push   ebx
c0010844:	89 f0                	mov    eax,esi
c0010846:	99                   	cdq    
c0010847:	f7 fd                	idiv   ebp
c0010849:	99                   	cdq    
c001084a:	f7 f9                	idiv   ecx
c001084c:	8d 42 30             	lea    eax,[edx+0x30]
c001084f:	0f b6 c0             	movzx  eax,al
c0010852:	50                   	push   eax
c0010853:	e8 52 fd ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010858:	5a                   	pop    edx
c0010859:	5d                   	pop    ebp
c001085a:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010861:	bd 64 00 00 00       	mov    ebp,0x64
c0010866:	53                   	push   ebx
c0010867:	89 f0                	mov    eax,esi
c0010869:	99                   	cdq    
c001086a:	f7 fd                	idiv   ebp
c001086c:	99                   	cdq    
c001086d:	f7 f9                	idiv   ecx
c001086f:	83 c2 30             	add    edx,0x30
c0010872:	0f b6 d2             	movzx  edx,dl
c0010875:	52                   	push   edx
c0010876:	e8 2f fd ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c001087b:	5a                   	pop    edx
c001087c:	5d                   	pop    ebp
c001087d:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010884:	53                   	push   ebx
c0010885:	89 f0                	mov    eax,esi
c0010887:	99                   	cdq    
c0010888:	f7 f9                	idiv   ecx
c001088a:	89 d6                	mov    esi,edx
c001088c:	99                   	cdq    
c001088d:	f7 f9                	idiv   ecx
c001088f:	8d 42 30             	lea    eax,[edx+0x30]
c0010892:	0f b6 c0             	movzx  eax,al
c0010895:	50                   	push   eax
c0010896:	e8 0f fd ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c001089b:	5a                   	pop    edx
c001089c:	59                   	pop    ecx
c001089d:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c00108a4:	53                   	push   ebx
c00108a5:	8d 46 30             	lea    eax,[esi+0x30]
c00108a8:	0f b6 f0             	movzx  esi,al
c00108ab:	56                   	push   esi
c00108ac:	e8 f9 fc ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c00108b1:	5b                   	pop    ebx
c00108b2:	5e                   	pop    esi
c00108b3:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00108ba:	5b                   	pop    ebx
c00108bb:	5e                   	pop    esi
c00108bc:	5f                   	pop    edi
c00108bd:	5d                   	pop    ebp
c00108be:	c3                   	ret    
c00108bf:	90                   	nop

c00108c0 <VgaText::updateTitle()>:
c00108c0:	53                   	push   ebx
c00108c1:	31 c0                	xor    eax,eax
c00108c3:	83 ec 58             	sub    esp,0x58
c00108c6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00108ca:	89 e1                	mov    ecx,esp
c00108cc:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00108d0:	40                   	inc    eax
c00108d1:	83 f8 50             	cmp    eax,0x50
c00108d4:	75 f6                	jne    c00108cc <VgaText::updateTitle()+0xc>
c00108d6:	31 c0                	xor    eax,eax
c00108d8:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00108df:	84 db                	test   bl,bl
c00108e1:	74 06                	je     c00108e9 <VgaText::updateTitle()+0x29>
c00108e3:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00108e6:	40                   	inc    eax
c00108e7:	eb ef                	jmp    c00108d8 <VgaText::updateTitle()+0x18>
c00108e9:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00108ef:	85 c0                	test   eax,eax
c00108f1:	74 09                	je     c00108fc <VgaText::updateTitle()+0x3c>
c00108f3:	53                   	push   ebx
c00108f4:	53                   	push   ebx
c00108f5:	51                   	push   ecx
c00108f6:	52                   	push   edx
c00108f7:	ff d0                	call   eax
c00108f9:	83 c4 10             	add    esp,0x10
c00108fc:	e8 55 fe ff ff       	call   c0010756 <VgaText::updateDiskUsage()>
c0010901:	83 c4 58             	add    esp,0x58
c0010904:	5b                   	pop    ebx
c0010905:	c3                   	ret    

c0010906 <VgaText::setTitleTextColour(VgaColour)>:
c0010906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001090e:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010914:	eb aa                	jmp    c00108c0 <VgaText::updateTitle()>

c0010916 <VgaText::setTitleColour(VgaColour)>:
c0010916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001091e:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010924:	eb 9a                	jmp    c00108c0 <VgaText::updateTitle()>

c0010926 <VgaText::setTitle(char*)>:
c0010926:	53                   	push   ebx
c0010927:	83 ec 10             	sub    esp,0x10
c001092a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001092e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010932:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010938:	50                   	push   eax
c0010939:	e8 23 fe fe ff       	call   c0000761 <strcpy>
c001093e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010942:	83 c4 18             	add    esp,0x18
c0010945:	5b                   	pop    ebx
c0010946:	e9 75 ff ff ff       	jmp    c00108c0 <VgaText::updateTitle()>
c001094b:	90                   	nop

c001094c <VgaText::decrementCursor(bool)>:
c001094c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010954:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001095a:	85 c0                	test   eax,eax
c001095c:	74 07                	je     c0010965 <VgaText::decrementCursor(bool)+0x19>
c001095e:	48                   	dec    eax
c001095f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010965:	84 c9                	test   cl,cl
c0010967:	74 09                	je     c0010972 <VgaText::decrementCursor(bool)+0x26>
c0010969:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001096d:	e9 56 fa ff ff       	jmp    c00103c8 <VgaText::updateCursor()>
c0010972:	c3                   	ret    
c0010973:	90                   	nop

c0010974 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010974:	53                   	push   ebx
c0010975:	83 ec 08             	sub    esp,0x8
c0010978:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001097c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010984:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010988:	3c 07                	cmp    al,0x7
c001098a:	75 2a                	jne    c00109b6 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001098c:	a1 4c dc 02 c0       	mov    eax,ds:0xc002dc4c
c0010991:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010999:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00109a1:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00109a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109ad:	83 c4 08             	add    esp,0x8
c00109b0:	5b                   	pop    ebx
c00109b1:	e9 3a 2d 00 00       	jmp    c00136f0 <Buzzer::beep(int, int, bool)>
c00109b6:	3c 0d                	cmp    al,0xd
c00109b8:	75 0c                	jne    c00109c6 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00109ba:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109c4:	eb 3b                	jmp    c0010a01 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109c6:	3c 0a                	cmp    al,0xa
c00109c8:	75 40                	jne    c0010a0a <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00109ca:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109d0:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109da:	8d 50 01             	lea    edx,[eax+0x1]
c00109dd:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109e3:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109e9:	75 12                	jne    c00109fd <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00109eb:	83 ec 0c             	sub    esp,0xc
c00109ee:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109f4:	53                   	push   ebx
c00109f5:	e8 1c fb ff ff       	call   c0010516 <VgaText::scrollScreen()>
c00109fa:	83 c4 10             	add    esp,0x10
c00109fd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010a01:	83 c4 08             	add    esp,0x8
c0010a04:	5b                   	pop    ebx
c0010a05:	e9 be f9 ff ff       	jmp    c00103c8 <VgaText::updateCursor()>
c0010a0a:	3c 08                	cmp    al,0x8
c0010a0c:	75 31                	jne    c0010a3f <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010a0e:	50                   	push   eax
c0010a0f:	50                   	push   eax
c0010a10:	6a 01                	push   0x1
c0010a12:	53                   	push   ebx
c0010a13:	e8 34 ff ff ff       	call   c001094c <VgaText::decrementCursor(bool)>
c0010a18:	5a                   	pop    edx
c0010a19:	59                   	pop    ecx
c0010a1a:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a20:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a26:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a2c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a32:	6a 20                	push   0x20
c0010a34:	53                   	push   ebx
c0010a35:	e8 82 fb ff ff       	call   c00105bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a3a:	83 c4 28             	add    esp,0x28
c0010a3d:	5b                   	pop    ebx
c0010a3e:	c3                   	ret    
c0010a3f:	83 ec 08             	sub    esp,0x8
c0010a42:	0f be c0             	movsx  eax,al
c0010a45:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a4b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a51:	51                   	push   ecx
c0010a52:	52                   	push   edx
c0010a53:	50                   	push   eax
c0010a54:	53                   	push   ebx
c0010a55:	e8 62 fb ff ff       	call   c00105bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a5a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a5e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a66:	83 c4 28             	add    esp,0x28
c0010a69:	5b                   	pop    ebx
c0010a6a:	e9 1b fc ff ff       	jmp    c001068a <VgaText::incrementCursor(bool)>
c0010a6f:	90                   	nop

c0010a70 <VgaText::isShowingCursor()>:
c0010a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a74:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a7a:	c3                   	ret    
c0010a7b:	90                   	nop

c0010a7c <VgaText::isBlinkDisabled()>:
c0010a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a80:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a86:	83 f0 01             	xor    eax,0x1
c0010a89:	c3                   	ret    

c0010a8a <VgaText::setCursorHeight(int)>:
c0010a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a92:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a98:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010a9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010aa3:	e9 3a f9 ff ff       	jmp    c00103e2 <VgaText::showCursor(bool)>

c0010aa8 <VgaText::getCursorHeight()>:
c0010aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aac:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010ab2:	c3                   	ret    

c0010ab3 <setActiveTerminal(VgaText*)>:
c0010ab3:	53                   	push   ebx
c0010ab4:	83 ec 08             	sub    esp,0x8
c0010ab7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010abb:	85 db                	test   ebx,ebx
c0010abd:	75 11                	jne    c0010ad0 <setActiveTerminal(VgaText*)+0x1d>
c0010abf:	c7 44 24 10 2c 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029b2c
c0010ac7:	83 c4 08             	add    esp,0x8
c0010aca:	5b                   	pop    ebx
c0010acb:	e9 95 93 00 00       	jmp    c0019e65 <Krnl::panic(char const*)>
c0010ad0:	50                   	push   eax
c0010ad1:	50                   	push   eax
c0010ad2:	53                   	push   ebx
c0010ad3:	68 3a 9b 02 c0       	push   0xc0029b3a
c0010ad8:	e8 14 1e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0010add:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c0010ae2:	83 c4 10             	add    esp,0x10
c0010ae5:	85 c0                	test   eax,eax
c0010ae7:	74 0c                	je     c0010af5 <setActiveTerminal(VgaText*)+0x42>
c0010ae9:	83 ec 0c             	sub    esp,0xc
c0010aec:	50                   	push   eax
c0010aed:	e8 d6 f8 ff ff       	call   c00103c8 <VgaText::updateCursor()>
c0010af2:	83 c4 10             	add    esp,0x10
c0010af5:	89 1d a4 db 02 c0    	mov    DWORD PTR ds:0xc002dba4,ebx
c0010afb:	51                   	push   ecx
c0010afc:	51                   	push   ecx
c0010afd:	53                   	push   ebx
c0010afe:	68 52 9b 02 c0       	push   0xc0029b52
c0010b03:	e8 e9 1d 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0010b08:	83 c4 0c             	add    esp,0xc
c0010b0b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010b11:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010b17:	53                   	push   ebx
c0010b18:	e8 17 fb ff ff       	call   c0010634 <VgaText::setCursor(int, int)>
c0010b1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b20:	e8 57 ff ff ff       	call   c0010a7c <VgaText::isBlinkDisabled()>
c0010b25:	5a                   	pop    edx
c0010b26:	0f b6 c0             	movzx  eax,al
c0010b29:	59                   	pop    ecx
c0010b2a:	50                   	push   eax
c0010b2b:	53                   	push   ebx
c0010b2c:	e8 c1 f8 ff ff       	call   c00103f2 <VgaText::disableBlink(bool)>
c0010b31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b34:	e8 6f ff ff ff       	call   c0010aa8 <VgaText::getCursorHeight()>
c0010b39:	5a                   	pop    edx
c0010b3a:	59                   	pop    ecx
c0010b3b:	50                   	push   eax
c0010b3c:	53                   	push   ebx
c0010b3d:	e8 48 ff ff ff       	call   c0010a8a <VgaText::setCursorHeight(int)>
c0010b42:	83 c4 10             	add    esp,0x10
c0010b45:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b4c:	75 0a                	jne    c0010b58 <setActiveTerminal(VgaText*)+0xa5>
c0010b4e:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b58:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b5c:	83 c4 08             	add    esp,0x8
c0010b5f:	5b                   	pop    ebx
c0010b60:	e9 0f f8 ff ff       	jmp    c0010374 <VgaText::load()>

c0010b65 <doTerminalCycle()>:
c0010b65:	83 ec 18             	sub    esp,0x18
c0010b68:	a1 a0 db 02 c0       	mov    eax,ds:0xc002dba0
c0010b6d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b73:	50                   	push   eax
c0010b74:	a3 a0 db 02 c0       	mov    ds:0xc002dba0,eax
c0010b79:	e8 35 ff ff ff       	call   c0010ab3 <setActiveTerminal(VgaText*)>
c0010b7e:	83 c4 1c             	add    esp,0x1c
c0010b81:	c3                   	ret    

c0010b82 <VgaText::doUpdate()>:
c0010b82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b86:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b8c:	85 c0                	test   eax,eax
c0010b8e:	74 02                	je     c0010b92 <VgaText::doUpdate()+0x10>
c0010b90:	ff e0                	jmp    eax
c0010b92:	c3                   	ret    
c0010b93:	90                   	nop

c0010b94 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b94:	55                   	push   ebp
c0010b95:	57                   	push   edi
c0010b96:	56                   	push   esi
c0010b97:	53                   	push   ebx
c0010b98:	83 ec 1c             	sub    esp,0x1c
c0010b9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b9f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010ba4:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010bab:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010bae:	50                   	push   eax
c0010baf:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010bb4:	50                   	push   eax
c0010bb5:	e8 4a f9 ff ff       	call   c0010504 <VgaText::combineColours(unsigned char, unsigned char)>
c0010bba:	59                   	pop    ecx
c0010bbb:	0f b6 c0             	movzx  eax,al
c0010bbe:	5b                   	pop    ebx
c0010bbf:	31 c9                	xor    ecx,ecx
c0010bc1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bc9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010bcd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bd7:	0f b7 db             	movzx  ebx,bx
c0010bda:	01 db                	add    ebx,ebx
c0010bdc:	01 fb                	add    ebx,edi
c0010bde:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010be1:	84 c0                	test   al,al
c0010be3:	0f 84 38 01 00 00    	je     c0010d21 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010be9:	3c 0d                	cmp    al,0xd
c0010beb:	75 0f                	jne    c0010bfc <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010bed:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bf7:	e9 1f 01 00 00       	jmp    c0010d1b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010bfc:	3c 0a                	cmp    al,0xa
c0010bfe:	75 5b                	jne    c0010c5b <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010c00:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010c06:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010c10:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c13:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010c19:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c1f:	75 12                	jne    c0010c33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c21:	83 ec 0c             	sub    esp,0xc
c0010c24:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c2a:	55                   	push   ebp
c0010c2b:	e8 e6 f8 ff ff       	call   c0010516 <VgaText::scrollScreen()>
c0010c30:	83 c4 10             	add    esp,0x10
c0010c33:	83 ec 0c             	sub    esp,0xc
c0010c36:	55                   	push   ebp
c0010c37:	e8 8c f7 ff ff       	call   c00103c8 <VgaText::updateCursor()>
c0010c3c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c4d:	31 c9                	xor    ecx,ecx
c0010c4f:	0f b7 db             	movzx  ebx,bx
c0010c52:	01 db                	add    ebx,ebx
c0010c54:	01 fb                	add    ebx,edi
c0010c56:	e9 c0 00 00 00       	jmp    c0010d1b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c5b:	3c 08                	cmp    al,0x8
c0010c5d:	75 4e                	jne    c0010cad <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c5f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c63:	53                   	push   ebx
c0010c64:	53                   	push   ebx
c0010c65:	6a 01                	push   0x1
c0010c67:	55                   	push   ebp
c0010c68:	e8 df fc ff ff       	call   c001094c <VgaText::decrementCursor(bool)>
c0010c6d:	58                   	pop    eax
c0010c6e:	5a                   	pop    edx
c0010c6f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c75:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c7b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c81:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c87:	6a 20                	push   0x20
c0010c89:	55                   	push   ebp
c0010c8a:	e8 2d f9 ff ff       	call   c00105bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c8f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c97:	83 c4 20             	add    esp,0x20
c0010c9a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ca0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ca4:	0f b7 db             	movzx  ebx,bx
c0010ca7:	01 db                	add    ebx,ebx
c0010ca9:	01 fb                	add    ebx,edi
c0010cab:	eb 6e                	jmp    c0010d1b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010cad:	51                   	push   ecx
c0010cae:	51                   	push   ecx
c0010caf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010cb3:	50                   	push   eax
c0010cb4:	e8 f1 f8 ff ff       	call   c00105aa <VgaText::combineCharAndColour(char, unsigned char)>
c0010cb9:	83 c4 10             	add    esp,0x10
c0010cbc:	66 89 03             	mov    WORD PTR [ebx],ax
c0010cbf:	39 2d a4 db 02 c0    	cmp    DWORD PTR ds:0xc002dba4,ebp
c0010cc5:	75 2a                	jne    c0010cf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cc7:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010ccd:	85 c0                	test   eax,eax
c0010ccf:	74 20                	je     c0010cf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cd1:	52                   	push   edx
c0010cd2:	52                   	push   edx
c0010cd3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010cd9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010cdf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ce3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ce7:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010cea:	51                   	push   ecx
c0010ceb:	55                   	push   ebp
c0010cec:	ff d0                	call   eax
c0010cee:	83 c4 20             	add    esp,0x20
c0010cf1:	83 c3 02             	add    ebx,0x2
c0010cf4:	50                   	push   eax
c0010cf5:	50                   	push   eax
c0010cf6:	6a 00                	push   0x0
c0010cf8:	55                   	push   ebp
c0010cf9:	e8 8c f9 ff ff       	call   c001068a <VgaText::incrementCursor(bool)>
c0010cfe:	83 c4 10             	add    esp,0x10
c0010d01:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010d08:	75 0f                	jne    c0010d19 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010d0a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010d12:	0f b7 db             	movzx  ebx,bx
c0010d15:	01 db                	add    ebx,ebx
c0010d17:	01 fb                	add    ebx,edi
c0010d19:	b1 01                	mov    cl,0x1
c0010d1b:	46                   	inc    esi
c0010d1c:	e9 bd fe ff ff       	jmp    c0010bde <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d21:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d25:	83 ec 0c             	sub    esp,0xc
c0010d28:	55                   	push   ebp
c0010d29:	e8 9a f6 ff ff       	call   c00103c8 <VgaText::updateCursor()>
c0010d2e:	83 c4 10             	add    esp,0x10
c0010d31:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d35:	84 c9                	test   cl,cl
c0010d37:	74 0c                	je     c0010d45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d39:	83 ec 0c             	sub    esp,0xc
c0010d3c:	55                   	push   ebp
c0010d3d:	e8 40 fe ff ff       	call   c0010b82 <VgaText::doUpdate()>
c0010d42:	83 c4 10             	add    esp,0x10
c0010d45:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d4c:	83 c4 1c             	add    esp,0x1c
c0010d4f:	5b                   	pop    ebx
c0010d50:	5e                   	pop    esi
c0010d51:	5f                   	pop    edi
c0010d52:	5d                   	pop    ebp
c0010d53:	c3                   	ret    

c0010d54 <VgaText::clearScreen()>:
c0010d54:	57                   	push   edi
c0010d55:	56                   	push   esi
c0010d56:	31 f6                	xor    esi,esi
c0010d58:	53                   	push   ebx
c0010d59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d5d:	52                   	push   edx
c0010d5e:	6a 00                	push   0x0
c0010d60:	6a 00                	push   0x0
c0010d62:	53                   	push   ebx
c0010d63:	e8 cc f8 ff ff       	call   c0010634 <VgaText::setCursor(int, int)>
c0010d68:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d6f:	83 c4 10             	add    esp,0x10
c0010d72:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d78:	7e 26                	jle    c0010da0 <VgaText::clearScreen()+0x4c>
c0010d7a:	31 ff                	xor    edi,edi
c0010d7c:	50                   	push   eax
c0010d7d:	50                   	push   eax
c0010d7e:	56                   	push   esi
c0010d7f:	57                   	push   edi
c0010d80:	47                   	inc    edi
c0010d81:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d87:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d8d:	6a 20                	push   0x20
c0010d8f:	53                   	push   ebx
c0010d90:	e8 27 f8 ff ff       	call   c00105bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d95:	83 c4 20             	add    esp,0x20
c0010d98:	83 ff 50             	cmp    edi,0x50
c0010d9b:	75 df                	jne    c0010d7c <VgaText::clearScreen()+0x28>
c0010d9d:	46                   	inc    esi
c0010d9e:	eb d2                	jmp    c0010d72 <VgaText::clearScreen()+0x1e>
c0010da0:	83 ec 0c             	sub    esp,0xc
c0010da3:	53                   	push   ebx
c0010da4:	e8 d9 fd ff ff       	call   c0010b82 <VgaText::doUpdate()>
c0010da9:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010db0:	83 c4 10             	add    esp,0x10
c0010db3:	5b                   	pop    ebx
c0010db4:	5e                   	pop    esi
c0010db5:	5f                   	pop    edi
c0010db6:	c3                   	ret    
c0010db7:	90                   	nop

c0010db8 <VgaText::putchar(char)>:
c0010db8:	56                   	push   esi
c0010db9:	53                   	push   ebx
c0010dba:	83 ec 14             	sub    esp,0x14
c0010dbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010dc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010dc5:	3c 5b                	cmp    al,0x5b
c0010dc7:	75 21                	jne    c0010dea <VgaText::putchar(char)+0x32>
c0010dc9:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010dd0:	74 28                	je     c0010dfa <VgaText::putchar(char)+0x42>
c0010dd2:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ddb:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010de5:	e9 e2 00 00 00       	jmp    c0010ecc <VgaText::putchar(char)+0x114>
c0010dea:	3c 1b                	cmp    al,0x1b
c0010dec:	75 0c                	jne    c0010dfa <VgaText::putchar(char)+0x42>
c0010dee:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010df5:	e9 d2 00 00 00       	jmp    c0010ecc <VgaText::putchar(char)+0x114>
c0010dfa:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010e00:	84 c9                	test   cl,cl
c0010e02:	0f 84 ab 00 00 00    	je     c0010eb3 <VgaText::putchar(char)+0xfb>
c0010e08:	8d 50 c0             	lea    edx,[eax-0x40]
c0010e0b:	80 fa 3e             	cmp    dl,0x3e
c0010e0e:	0f 87 82 00 00 00    	ja     c0010e96 <VgaText::putchar(char)+0xde>
c0010e14:	3c 6d                	cmp    al,0x6d
c0010e16:	75 4d                	jne    c0010e65 <VgaText::putchar(char)+0xad>
c0010e18:	31 f6                	xor    esi,esi
c0010e1a:	31 d2                	xor    edx,edx
c0010e1c:	31 c0                	xor    eax,eax
c0010e1e:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e24:	7e 30                	jle    c0010e56 <VgaText::putchar(char)+0x9e>
c0010e26:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e2e:	80 fa 3b             	cmp    dl,0x3b
c0010e31:	75 17                	jne    c0010e4a <VgaText::putchar(char)+0x92>
c0010e33:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e37:	50                   	push   eax
c0010e38:	53                   	push   ebx
c0010e39:	e8 ee f5 ff ff       	call   c001042c <VgaText::doANSI_SGR(int)>
c0010e3e:	59                   	pop    ecx
c0010e3f:	31 d2                	xor    edx,edx
c0010e41:	58                   	pop    eax
c0010e42:	31 c0                	xor    eax,eax
c0010e44:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e48:	eb 09                	jmp    c0010e53 <VgaText::putchar(char)+0x9b>
c0010e4a:	6b c0 0a             	imul   eax,eax,0xa
c0010e4d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e51:	88 ca                	mov    dl,cl
c0010e53:	46                   	inc    esi
c0010e54:	eb c8                	jmp    c0010e1e <VgaText::putchar(char)+0x66>
c0010e56:	84 d2                	test   dl,dl
c0010e58:	74 31                	je     c0010e8b <VgaText::putchar(char)+0xd3>
c0010e5a:	50                   	push   eax
c0010e5b:	53                   	push   ebx
c0010e5c:	e8 cb f5 ff ff       	call   c001042c <VgaText::doANSI_SGR(int)>
c0010e61:	58                   	pop    eax
c0010e62:	5a                   	pop    edx
c0010e63:	eb 26                	jmp    c0010e8b <VgaText::putchar(char)+0xd3>
c0010e65:	3c 4a                	cmp    al,0x4a
c0010e67:	75 22                	jne    c0010e8b <VgaText::putchar(char)+0xd3>
c0010e69:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e70:	75 19                	jne    c0010e8b <VgaText::putchar(char)+0xd3>
c0010e72:	83 ec 0c             	sub    esp,0xc
c0010e75:	53                   	push   ebx
c0010e76:	e8 d9 fe ff ff       	call   c0010d54 <VgaText::clearScreen()>
c0010e7b:	83 c4 0c             	add    esp,0xc
c0010e7e:	6a 00                	push   0x0
c0010e80:	6a 00                	push   0x0
c0010e82:	53                   	push   ebx
c0010e83:	e8 ac f7 ff ff       	call   c0010634 <VgaText::setCursor(int, int)>
c0010e88:	83 c4 10             	add    esp,0x10
c0010e8b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e94:	eb 36                	jmp    c0010ecc <VgaText::putchar(char)+0x114>
c0010e96:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e9c:	83 fa 0e             	cmp    edx,0xe
c0010e9f:	7f 2b                	jg     c0010ecc <VgaText::putchar(char)+0x114>
c0010ea1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010ea4:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010eaa:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010eb1:	eb 19                	jmp    c0010ecc <VgaText::putchar(char)+0x114>
c0010eb3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010eb9:	0f be c0             	movsx  eax,al
c0010ebc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ec2:	50                   	push   eax
c0010ec3:	53                   	push   ebx
c0010ec4:	e8 ab fa ff ff       	call   c0010974 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ec9:	83 c4 10             	add    esp,0x10
c0010ecc:	83 c4 14             	add    esp,0x14
c0010ecf:	5b                   	pop    ebx
c0010ed0:	5e                   	pop    esi
c0010ed1:	c3                   	ret    

c0010ed2 <VgaText::puts(char const*)>:
c0010ed2:	53                   	push   ebx
c0010ed3:	83 ec 08             	sub    esp,0x8
c0010ed6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010eda:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010edd:	84 c0                	test   al,al
c0010edf:	74 12                	je     c0010ef3 <VgaText::puts(char const*)+0x21>
c0010ee1:	43                   	inc    ebx
c0010ee2:	51                   	push   ecx
c0010ee3:	51                   	push   ecx
c0010ee4:	50                   	push   eax
c0010ee5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee9:	e8 ca fe ff ff       	call   c0010db8 <VgaText::putchar(char)>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	eb e7                	jmp    c0010eda <VgaText::puts(char const*)+0x8>
c0010ef3:	83 c4 08             	add    esp,0x8
c0010ef6:	5b                   	pop    ebx
c0010ef7:	c3                   	ret    

c0010ef8 <VgaText::putx(unsigned int)>:
c0010ef8:	57                   	push   edi
c0010ef9:	b9 11 00 00 00       	mov    ecx,0x11
c0010efe:	56                   	push   esi
c0010eff:	be 6e 9b 02 c0       	mov    esi,0xc0029b6e
c0010f04:	53                   	push   ebx
c0010f05:	83 ec 20             	sub    esp,0x20
c0010f08:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f0c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010f10:	fc                   	cld    
c0010f11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f13:	be 08 00 00 00       	mov    esi,0x8
c0010f18:	50                   	push   eax
c0010f19:	50                   	push   eax
c0010f1a:	89 d8                	mov    eax,ebx
c0010f1c:	c1 e3 04             	shl    ebx,0x4
c0010f1f:	c1 e8 1c             	shr    eax,0x1c
c0010f22:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f27:	50                   	push   eax
c0010f28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f2c:	e8 87 fe ff ff       	call   c0010db8 <VgaText::putchar(char)>
c0010f31:	83 c4 10             	add    esp,0x10
c0010f34:	4e                   	dec    esi
c0010f35:	75 e1                	jne    c0010f18 <VgaText::putx(unsigned int)+0x20>
c0010f37:	83 c4 20             	add    esp,0x20
c0010f3a:	5b                   	pop    ebx
c0010f3b:	5e                   	pop    esi
c0010f3c:	5f                   	pop    edi
c0010f3d:	c3                   	ret    

c0010f3e <VgaText::VgaText(char const*)>:
c0010f3e:	57                   	push   edi
c0010f3f:	56                   	push   esi
c0010f40:	53                   	push   ebx
c0010f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f45:	83 ec 08             	sub    esp,0x8
c0010f48:	6a 00                	push   0x0
c0010f4a:	50                   	push   eax
c0010f4b:	e8 6e 05 00 00       	call   c00114be <UnixFile::UnixFile(int)>
c0010f50:	83 c4 10             	add    esp,0x10
c0010f53:	ba d4 9b 02 c0       	mov    edx,0xc0029bd4
c0010f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5c:	89 10                	mov    DWORD PTR [eax],edx
c0010f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f62:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f70:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f89:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f94:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa2:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb0:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fbb:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc6:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010fcc:	bb 80 db 02 c0       	mov    ebx,0xc002db80
c0010fd1:	b8 08 00 00 00       	mov    eax,0x8
c0010fd6:	fc                   	cld    
c0010fd7:	89 d7                	mov    edi,edx
c0010fd9:	89 de                	mov    esi,ebx
c0010fdb:	89 c1                	mov    ecx,eax
c0010fdd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe3:	05 1e 10 00 00       	add    eax,0x101e
c0010fe8:	83 ec 08             	sub    esp,0x8
c0010feb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fef:	50                   	push   eax
c0010ff0:	e8 6c f7 fe ff       	call   c0000761 <strcpy>
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ffc:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100a:	83 c0 0c             	add    eax,0xc
c001100d:	83 ec 04             	sub    esp,0x4
c0011010:	68 00 0f 00 00       	push   0xf00
c0011015:	6a 00                	push   0x0
c0011017:	50                   	push   eax
c0011018:	e8 a5 f6 fe ff       	call   c00006c2 <memset>
c001101d:	83 c4 10             	add    esp,0x10
c0011020:	83 ec 04             	sub    esp,0x4
c0011023:	6a 00                	push   0x0
c0011025:	6a 07                	push   0x7
c0011027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102b:	e8 b4 f4 ff ff       	call   c00104e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011030:	83 c4 10             	add    esp,0x10
c0011033:	83 ec 08             	sub    esp,0x8
c0011036:	6a 02                	push   0x2
c0011038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103c:	e8 49 fa ff ff       	call   c0010a8a <VgaText::setCursorHeight(int)>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	83 ec 04             	sub    esp,0x4
c0011047:	6a 00                	push   0x0
c0011049:	6a 00                	push   0x0
c001104b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104f:	e8 e0 f5 ff ff       	call   c0010634 <VgaText::setCursor(int, int)>
c0011054:	83 c4 10             	add    esp,0x10
c0011057:	83 ec 08             	sub    esp,0x8
c001105a:	6a 01                	push   0x1
c001105c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011060:	e8 7d f3 ff ff       	call   c00103e2 <VgaText::showCursor(bool)>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	83 ec 08             	sub    esp,0x8
c001106b:	6a 01                	push   0x1
c001106d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011071:	e8 7c f3 ff ff       	call   c00103f2 <VgaText::disableBlink(bool)>
c0011076:	83 c4 10             	add    esp,0x10
c0011079:	83 ec 0c             	sub    esp,0xc
c001107c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011080:	e8 cf fc ff ff       	call   c0010d54 <VgaText::clearScreen()>
c0011085:	83 c4 10             	add    esp,0x10
c0011088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011097:	05 9e 10 00 00       	add    eax,0x109e
c001109c:	83 ec 04             	sub    esp,0x4
c001109f:	68 96 00 00 00       	push   0x96
c00110a4:	6a 00                	push   0x0
c00110a6:	50                   	push   eax
c00110a7:	e8 16 f6 fe ff       	call   c00006c2 <memset>
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b3:	05 34 11 00 00       	add    eax,0x1134
c00110b8:	83 ec 04             	sub    esp,0x4
c00110bb:	68 2c 01 00 00       	push   0x12c
c00110c0:	6a 00                	push   0x0
c00110c2:	50                   	push   eax
c00110c3:	e8 fa f5 fe ff       	call   c00006c2 <memset>
c00110c8:	83 c4 10             	add    esp,0x10
c00110cb:	90                   	nop
c00110cc:	5b                   	pop    ebx
c00110cd:	5e                   	pop    esi
c00110ce:	5f                   	pop    edi
c00110cf:	c3                   	ret    

c00110d0 <VgaText::receiveKey(unsigned char)>:
c00110d0:	55                   	push   ebp
c00110d1:	57                   	push   edi
c00110d2:	56                   	push   esi
c00110d3:	53                   	push   ebx
c00110d4:	83 ec 1c             	sub    esp,0x1c
c00110d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110df:	84 db                	test   bl,bl
c00110e1:	0f 84 c9 00 00 00    	je     c00111b0 <VgaText::receiveKey(unsigned char)+0xe0>
c00110e7:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00110ed:	80 fb 08             	cmp    bl,0x8
c00110f0:	75 2c                	jne    c001111e <VgaText::receiveKey(unsigned char)+0x4e>
c00110f2:	83 ec 0c             	sub    esp,0xc
c00110f5:	57                   	push   edi
c00110f6:	e8 e4 f5 fe ff       	call   c00006df <strlen>
c00110fb:	83 c4 10             	add    esp,0x10
c00110fe:	85 c0                	test   eax,eax
c0011100:	74 41                	je     c0011143 <VgaText::receiveKey(unsigned char)+0x73>
c0011102:	50                   	push   eax
c0011103:	50                   	push   eax
c0011104:	6a 08                	push   0x8
c0011106:	56                   	push   esi
c0011107:	e8 ac fc ff ff       	call   c0010db8 <VgaText::putchar(char)>
c001110c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001110f:	e8 cb f5 fe ff       	call   c00006df <strlen>
c0011114:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001111c:	eb 22                	jmp    c0011140 <VgaText::receiveKey(unsigned char)+0x70>
c001111e:	0f be c3             	movsx  eax,bl
c0011121:	52                   	push   edx
c0011122:	52                   	push   edx
c0011123:	50                   	push   eax
c0011124:	56                   	push   esi
c0011125:	e8 8e fc ff ff       	call   c0010db8 <VgaText::putchar(char)>
c001112a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001112e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011133:	59                   	pop    ecx
c0011134:	5d                   	pop    ebp
c0011135:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011139:	50                   	push   eax
c001113a:	57                   	push   edi
c001113b:	e8 d8 f6 fe ff       	call   c0000818 <strcat>
c0011140:	83 c4 10             	add    esp,0x10
c0011143:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001114a:	75 05                	jne    c0011151 <VgaText::receiveKey(unsigned char)+0x81>
c001114c:	80 fb 0a             	cmp    bl,0xa
c001114f:	75 53                	jne    c00111a4 <VgaText::receiveKey(unsigned char)+0xd4>
c0011151:	83 ec 0c             	sub    esp,0xc
c0011154:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001115a:	53                   	push   ebx
c001115b:	e8 7f f5 fe ff       	call   c00006df <strlen>
c0011160:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011163:	89 c5                	mov    ebp,eax
c0011165:	e8 75 f5 fe ff       	call   c00006df <strlen>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011171:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011176:	76 10                	jbe    c0011188 <VgaText::receiveKey(unsigned char)+0xb8>
c0011178:	83 ec 0c             	sub    esp,0xc
c001117b:	68 7f 9b 02 c0       	push   0xc0029b7f
c0011180:	e8 e0 8c 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0011185:	83 c4 10             	add    esp,0x10
c0011188:	50                   	push   eax
c0011189:	50                   	push   eax
c001118a:	57                   	push   edi
c001118b:	53                   	push   ebx
c001118c:	e8 87 f6 fe ff       	call   c0000818 <strcat>
c0011191:	83 c4 0c             	add    esp,0xc
c0011194:	68 96 00 00 00       	push   0x96
c0011199:	6a 00                	push   0x0
c001119b:	57                   	push   edi
c001119c:	e8 21 f5 fe ff       	call   c00006c2 <memset>
c00111a1:	83 c4 10             	add    esp,0x10
c00111a4:	83 ec 0c             	sub    esp,0xc
c00111a7:	56                   	push   esi
c00111a8:	e8 d5 f9 ff ff       	call   c0010b82 <VgaText::doUpdate()>
c00111ad:	83 c4 10             	add    esp,0x10
c00111b0:	83 c4 1c             	add    esp,0x1c
c00111b3:	5b                   	pop    ebx
c00111b4:	5e                   	pop    esi
c00111b5:	5f                   	pop    edi
c00111b6:	5d                   	pop    ebp
c00111b7:	c3                   	ret    

c00111b8 <VgaText::write(unsigned long long, void*, int*)>:
c00111b8:	55                   	push   ebp
c00111b9:	57                   	push   edi
c00111ba:	56                   	push   esi
c00111bb:	53                   	push   ebx
c00111bc:	83 ec 0c             	sub    esp,0xc
c00111bf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111c3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111c7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111cb:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00111d2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00111d5:	39 eb                	cmp    ebx,ebp
c00111d7:	74 13                	je     c00111ec <VgaText::write(unsigned long long, void*, int*)+0x34>
c00111d9:	43                   	inc    ebx
c00111da:	50                   	push   eax
c00111db:	50                   	push   eax
c00111dc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00111e0:	50                   	push   eax
c00111e1:	56                   	push   esi
c00111e2:	e8 d1 fb ff ff       	call   c0010db8 <VgaText::putchar(char)>
c00111e7:	83 c4 10             	add    esp,0x10
c00111ea:	eb e9                	jmp    c00111d5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00111ec:	83 ec 0c             	sub    esp,0xc
c00111ef:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00111f6:	56                   	push   esi
c00111f7:	e8 86 f9 ff ff       	call   c0010b82 <VgaText::doUpdate()>
c00111fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011200:	89 38                	mov    DWORD PTR [eax],edi
c0011202:	83 c4 1c             	add    esp,0x1c
c0011205:	31 c0                	xor    eax,eax
c0011207:	5b                   	pop    ebx
c0011208:	5e                   	pop    esi
c0011209:	5f                   	pop    edi
c001120a:	5d                   	pop    ebp
c001120b:	c3                   	ret    

c001120c <newTerminal(char*)>:
c001120c:	83 ec 28             	sub    esp,0x28
c001120f:	68 60 12 00 00       	push   0x1260
c0011214:	e8 09 e4 ff ff       	call   c000f622 <malloc>
c0011219:	5a                   	pop    edx
c001121a:	59                   	pop    ecx
c001121b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001121f:	50                   	push   eax
c0011220:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011224:	e8 15 fd ff ff       	call   c0010f3e <VgaText::VgaText(char const*)>
c0011229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001122d:	83 c4 2c             	add    esp,0x2c
c0011230:	c3                   	ret    
c0011231:	90                   	nop

c0011232 <TSS::TSS()>:
c0011232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011236:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001123d:	90                   	nop
c001123e:	c3                   	ret    
c001123f:	90                   	nop

c0011240 <TSS::setESP(unsigned long)>:
c0011240:	55                   	push   ebp
c0011241:	89 e5                	mov    ebp,esp
c0011243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011246:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011249:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001124c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001124f:	90                   	nop
c0011250:	5d                   	pop    ebp
c0011251:	c3                   	ret    

c0011252 <TSS::flush()>:
c0011252:	55                   	push   ebp
c0011253:	89 e5                	mov    ebp,esp
c0011255:	83 ec 10             	sub    esp,0x10
c0011258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001125b:	8b 00                	mov    eax,DWORD PTR [eax]
c001125d:	83 c8 03             	or     eax,0x3
c0011260:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011264:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011268:	66 89 d0             	mov    ax,dx
c001126b:	0f 00 d8             	ltr    ax
c001126e:	90                   	nop
c001126f:	c9                   	leave  
c0011270:	c3                   	ret    
c0011271:	90                   	nop

c0011272 <TSS::setup(unsigned long, unsigned long)>:
c0011272:	55                   	push   ebp
c0011273:	89 e5                	mov    ebp,esp
c0011275:	83 ec 18             	sub    esp,0x18
c0011278:	83 ec 0c             	sub    esp,0xc
c001127b:	6a 68                	push   0x68
c001127d:	e8 a0 e3 ff ff       	call   c000f622 <malloc>
c0011282:	83 c4 10             	add    esp,0x10
c0011285:	89 c2                	mov    edx,eax
c0011287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001128a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001128d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011290:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011293:	83 ec 04             	sub    esp,0x4
c0011296:	6a 68                	push   0x68
c0011298:	6a 00                	push   0x0
c001129a:	50                   	push   eax
c001129b:	e8 22 f4 fe ff       	call   c00006c2 <memset>
c00112a0:	83 c4 10             	add    esp,0x10
c00112a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112a9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00112af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112b5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00112bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112cd:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00112d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112d9:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00112df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e5:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00112eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f1:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00112f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112fd:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011306:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011309:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001130f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011312:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011315:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011318:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001131b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001131e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011321:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011324:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001132a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001132d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011337:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001133a:	0f 20 da             	mov    edx,cr3
c001133d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011340:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011343:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011349:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001134c:	83 ec 08             	sub    esp,0x8
c001134f:	50                   	push   eax
c0011350:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011353:	50                   	push   eax
c0011354:	e8 a7 da ff ff       	call   c000ee00 <GDTEntry::setBase(unsigned int)>
c0011359:	83 c4 10             	add    esp,0x10
c001135c:	83 ec 08             	sub    esp,0x8
c001135f:	6a 68                	push   0x68
c0011361:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011364:	50                   	push   eax
c0011365:	e8 b2 da ff ff       	call   c000ee1c <GDTEntry::setLimit(unsigned int)>
c001136a:	83 c4 10             	add    esp,0x10
c001136d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011371:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011374:	83 e0 0f             	and    eax,0xf
c0011377:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001137a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001137d:	83 c8 40             	or     eax,0x40
c0011380:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011383:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0011388:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001138e:	05 78 01 00 00       	add    eax,0x178
c0011393:	83 ec 04             	sub    esp,0x4
c0011396:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011399:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001139c:	50                   	push   eax
c001139d:	e8 ae da ff ff       	call   c000ee50 <GDT::addEntry(GDTEntry)>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	89 c2                	mov    edx,eax
c00113a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113aa:	89 10                	mov    DWORD PTR [eax],edx
c00113ac:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00113b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113b7:	05 78 01 00 00       	add    eax,0x178
c00113bc:	83 ec 0c             	sub    esp,0xc
c00113bf:	50                   	push   eax
c00113c0:	e8 cf da ff ff       	call   c000ee94 <GDT::flush()>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00113cd:	83 ec 08             	sub    esp,0x8
c00113d0:	50                   	push   eax
c00113d1:	68 e8 9b 02 c0       	push   0xc0029be8
c00113d6:	e8 16 15 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00113e3:	c9                   	leave  
c00113e4:	c3                   	ret    
c00113e5:	90                   	nop

c00113e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00113e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113f6:	75 08                	jne    c0011400 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00113f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00113fe:	eb 38                	jmp    c0011438 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011400:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011405:	75 17                	jne    c001141e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011407:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001140c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001140f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011415:	8b 10                	mov    edx,DWORD PTR [eax]
c0011417:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001141b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001141e:	89 c1                	mov    ecx,eax
c0011420:	83 e1 fd             	and    ecx,0xfffffffd
c0011423:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011429:	74 cd                	je     c00113f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001142b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011430:	83 e0 ef             	and    eax,0xffffffef
c0011433:	83 f8 08             	cmp    eax,0x8
c0011436:	76 c0                	jbe    c00113f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011438:	31 c0                	xor    eax,eax
c001143a:	c3                   	ret    
c001143b:	90                   	nop

c001143c <ReservedFilename::isAtty()>:
c001143c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011440:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011443:	31 c0                	xor    eax,eax
c0011445:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001144b:	74 09                	je     c0011456 <ReservedFilename::isAtty()+0x1a>
c001144d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011453:	0f 94 c0             	sete   al
c0011456:	c3                   	ret    
c0011457:	90                   	nop

c0011458 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001145c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011463:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011467:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001146c:	75 08                	jne    c0011476 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001146e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011474:	eb 3d                	jmp    c00114b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011476:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001147b:	75 17                	jne    c0011494 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001147d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011482:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011485:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001148b:	8b 10                	mov    edx,DWORD PTR [eax]
c001148d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011491:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011494:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011499:	75 04                	jne    c001149f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001149b:	89 0a                	mov    DWORD PTR [edx],ecx
c001149d:	eb 14                	jmp    c00114b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001149f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00114a4:	74 c8                	je     c001146e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00114ab:	83 e0 ef             	and    eax,0xffffffef
c00114ae:	83 f8 08             	cmp    eax,0x8
c00114b1:	76 bb                	jbe    c001146e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114b3:	31 c0                	xor    eax,eax
c00114b5:	c3                   	ret    

c00114b6 <UnixFile::getFileDescriptor()>:
c00114b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bd:	c3                   	ret    

c00114be <UnixFile::UnixFile(int)>:
c00114be:	53                   	push   ebx
c00114bf:	83 ec 28             	sub    esp,0x28
c00114c2:	ba d4 9c 02 c0       	mov    edx,0xc0029cd4
c00114c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114cb:	89 10                	mov    DWORD PTR [eax],edx
c00114cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00114d5:	0f 8f 8c 01 00 00    	jg     c0011667 <UnixFile::UnixFile(int)+0x1a9>
c00114db:	a1 60 ca 02 c0       	mov    eax,ds:0xc002ca60
c00114e0:	8d 50 01             	lea    edx,[eax+0x1]
c00114e3:	89 15 60 ca 02 c0    	mov    DWORD PTR ds:0xc002ca60,edx
c00114e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114f0:	83 ec 08             	sub    esp,0x8
c00114f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00114f7:	68 38 dc 02 c0       	push   0xc002dc38
c00114fc:	e8 bf 69 01 00       	call   c0027ec0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011501:	83 c4 10             	add    esp,0x10
c0011504:	a0 34 dc 02 c0       	mov    al,ds:0xc002dc34
c0011509:	83 f0 01             	xor    eax,0x1
c001150c:	84 c0                	test   al,al
c001150e:	0f 84 54 01 00 00    	je     c0011668 <UnixFile::UnixFile(int)+0x1aa>
c0011514:	c6 05 34 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc34,0x1
c001151b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011523:	83 ec 0c             	sub    esp,0xc
c0011526:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001152a:	e8 f3 e0 ff ff       	call   c000f622 <malloc>
c001152f:	83 c4 10             	add    esp,0x10
c0011532:	89 c3                	mov    ebx,eax
c0011534:	83 ec 08             	sub    esp,0x8
c0011537:	68 03 ff ff 0f       	push   0xfffff03
c001153c:	53                   	push   ebx
c001153d:	e8 2c 01 00 00       	call   c001166e <ReservedFilename::ReservedFilename(int)>
c0011542:	83 c4 10             	add    esp,0x10
c0011545:	89 1d 2c dc 02 c0    	mov    DWORD PTR ds:0xc002dc2c,ebx
c001154b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011553:	83 ec 0c             	sub    esp,0xc
c0011556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001155a:	e8 c3 e0 ff ff       	call   c000f622 <malloc>
c001155f:	83 c4 10             	add    esp,0x10
c0011562:	89 c3                	mov    ebx,eax
c0011564:	83 ec 08             	sub    esp,0x8
c0011567:	68 01 ff ff 0f       	push   0xfffff01
c001156c:	53                   	push   ebx
c001156d:	e8 fc 00 00 00       	call   c001166e <ReservedFilename::ReservedFilename(int)>
c0011572:	83 c4 10             	add    esp,0x10
c0011575:	89 1d 30 dc 02 c0    	mov    DWORD PTR ds:0xc002dc30,ebx
c001157b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011583:	83 ec 0c             	sub    esp,0xc
c0011586:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001158a:	e8 93 e0 ff ff       	call   c000f622 <malloc>
c001158f:	83 c4 10             	add    esp,0x10
c0011592:	89 c3                	mov    ebx,eax
c0011594:	83 ec 08             	sub    esp,0x8
c0011597:	68 00 ff ff 0f       	push   0xfffff00
c001159c:	53                   	push   ebx
c001159d:	e8 cc 00 00 00       	call   c001166e <ReservedFilename::ReservedFilename(int)>
c00115a2:	83 c4 10             	add    esp,0x10
c00115a5:	89 1d 24 dc 02 c0    	mov    DWORD PTR ds:0xc002dc24,ebx
c00115ab:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00115b3:	83 ec 0c             	sub    esp,0xc
c00115b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115ba:	e8 63 e0 ff ff       	call   c000f622 <malloc>
c00115bf:	83 c4 10             	add    esp,0x10
c00115c2:	89 c3                	mov    ebx,eax
c00115c4:	83 ec 08             	sub    esp,0x8
c00115c7:	68 02 ff ff 0f       	push   0xfffff02
c00115cc:	53                   	push   ebx
c00115cd:	e8 9c 00 00 00       	call   c001166e <ReservedFilename::ReservedFilename(int)>
c00115d2:	83 c4 10             	add    esp,0x10
c00115d5:	89 1d 28 dc 02 c0    	mov    DWORD PTR ds:0xc002dc28,ebx
c00115db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00115e3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00115e8:	7f 7e                	jg     c0011668 <UnixFile::UnixFile(int)+0x1aa>
c00115ea:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00115f2:	83 ec 0c             	sub    esp,0xc
c00115f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115f9:	e8 24 e0 ff ff       	call   c000f622 <malloc>
c00115fe:	83 c4 10             	add    esp,0x10
c0011601:	89 c3                	mov    ebx,eax
c0011603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011607:	05 10 ff ff 0f       	add    eax,0xfffff10
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	50                   	push   eax
c0011610:	53                   	push   ebx
c0011611:	e8 58 00 00 00       	call   c001166e <ReservedFilename::ReservedFilename(int)>
c0011616:	83 c4 10             	add    esp,0x10
c0011619:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001161d:	89 1c 85 00 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2400],ebx
c0011624:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001162c:	83 ec 0c             	sub    esp,0xc
c001162f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011633:	e8 ea df ff ff       	call   c000f622 <malloc>
c0011638:	83 c4 10             	add    esp,0x10
c001163b:	89 c3                	mov    ebx,eax
c001163d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011641:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011646:	83 ec 08             	sub    esp,0x8
c0011649:	50                   	push   eax
c001164a:	53                   	push   ebx
c001164b:	e8 1e 00 00 00       	call   c001166e <ReservedFilename::ReservedFilename(int)>
c0011650:	83 c4 10             	add    esp,0x10
c0011653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011657:	89 1c 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],ebx
c001165e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011662:	e9 7c ff ff ff       	jmp    c00115e3 <UnixFile::UnixFile(int)+0x125>
c0011667:	90                   	nop
c0011668:	83 c4 28             	add    esp,0x28
c001166b:	5b                   	pop    ebx
c001166c:	c3                   	ret    
c001166d:	90                   	nop

c001166e <ReservedFilename::ReservedFilename(int)>:
c001166e:	83 ec 0c             	sub    esp,0xc
c0011671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011675:	83 ec 08             	sub    esp,0x8
c0011678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001167c:	50                   	push   eax
c001167d:	e8 3c fe ff ff       	call   c00114be <UnixFile::UnixFile(int)>
c0011682:	83 c4 10             	add    esp,0x10
c0011685:	ba f0 9c 02 c0       	mov    edx,0xc0029cf0
c001168a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168e:	89 10                	mov    DWORD PTR [eax],edx
c0011690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011694:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011698:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001169b:	90                   	nop
c001169c:	83 c4 0c             	add    esp,0xc
c001169f:	c3                   	ret    

c00116a0 <UnixFile::~UnixFile()>:
c00116a0:	83 ec 1c             	sub    esp,0x1c
c00116a3:	ba d4 9c 02 c0       	mov    edx,0xc0029cd4
c00116a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116ac:	89 10                	mov    DWORD PTR [eax],edx
c00116ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116b5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00116ba:	7f 73                	jg     c001172f <UnixFile::~UnixFile()+0x8f>
c00116bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116c4:	83 ec 0c             	sub    esp,0xc
c00116c7:	68 38 dc 02 c0       	push   0xc002dc38
c00116cc:	e8 c3 68 01 00       	call   c0027f94 <LinkedList<UnixFile>::getFirstElement()>
c00116d1:	83 c4 10             	add    esp,0x10
c00116d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116d8:	83 ec 0c             	sub    esp,0xc
c00116db:	68 38 dc 02 c0       	push   0xc002dc38
c00116e0:	e8 b7 68 01 00       	call   c0027f9c <LinkedList<UnixFile>::removeFirst()>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116ec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00116f0:	74 40                	je     c0011732 <UnixFile::~UnixFile()+0x92>
c00116f2:	83 ec 08             	sub    esp,0x8
c00116f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116f9:	68 38 dc 02 c0       	push   0xc002dc38
c00116fe:	e8 bd 67 01 00       	call   c0027ec0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011703:	83 c4 10             	add    esp,0x10
c0011706:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001170a:	8d 50 01             	lea    edx,[eax+0x1]
c001170d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011711:	3d 88 13 00 00       	cmp    eax,0x1388
c0011716:	0f 94 c0             	sete   al
c0011719:	84 c0                	test   al,al
c001171b:	74 a7                	je     c00116c4 <UnixFile::~UnixFile()+0x24>
c001171d:	83 ec 0c             	sub    esp,0xc
c0011720:	68 ac 9c 02 c0       	push   0xc0029cac
c0011725:	e8 3b 87 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c001172a:	83 c4 10             	add    esp,0x10
c001172d:	eb 95                	jmp    c00116c4 <UnixFile::~UnixFile()+0x24>
c001172f:	90                   	nop
c0011730:	eb 01                	jmp    c0011733 <UnixFile::~UnixFile()+0x93>
c0011732:	90                   	nop
c0011733:	90                   	nop
c0011734:	83 c4 1c             	add    esp,0x1c
c0011737:	c3                   	ret    

c0011738 <UnixFile::~UnixFile()>:
c0011738:	83 ec 0c             	sub    esp,0xc
c001173b:	83 ec 0c             	sub    esp,0xc
c001173e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011742:	e8 59 ff ff ff       	call   c00116a0 <UnixFile::~UnixFile()>
c0011747:	83 c4 10             	add    esp,0x10
c001174a:	83 ec 08             	sub    esp,0x8
c001174d:	6a 0c                	push   0xc
c001174f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011753:	e8 b9 10 00 00       	call   c0012811 <operator delete(void*, unsigned long)>
c0011758:	83 c4 10             	add    esp,0x10
c001175b:	83 c4 0c             	add    esp,0xc
c001175e:	c3                   	ret    
c001175f:	90                   	nop

c0011760 <ReservedFilename::~ReservedFilename()>:
c0011760:	83 ec 0c             	sub    esp,0xc
c0011763:	ba f0 9c 02 c0       	mov    edx,0xc0029cf0
c0011768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001176c:	89 10                	mov    DWORD PTR [eax],edx
c001176e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011772:	83 ec 0c             	sub    esp,0xc
c0011775:	50                   	push   eax
c0011776:	e8 25 ff ff ff       	call   c00116a0 <UnixFile::~UnixFile()>
c001177b:	83 c4 10             	add    esp,0x10
c001177e:	90                   	nop
c001177f:	83 c4 0c             	add    esp,0xc
c0011782:	c3                   	ret    
c0011783:	90                   	nop

c0011784 <ReservedFilename::~ReservedFilename()>:
c0011784:	83 ec 0c             	sub    esp,0xc
c0011787:	83 ec 0c             	sub    esp,0xc
c001178a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001178e:	e8 cd ff ff ff       	call   c0011760 <ReservedFilename::~ReservedFilename()>
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	83 ec 08             	sub    esp,0x8
c0011799:	6a 0c                	push   0xc
c001179b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001179f:	e8 6d 10 00 00       	call   c0012811 <operator delete(void*, unsigned long)>
c00117a4:	83 c4 10             	add    esp,0x10
c00117a7:	83 c4 0c             	add    esp,0xc
c00117aa:	c3                   	ret    

c00117ab <getFromFileDescriptor(int)>:
c00117ab:	53                   	push   ebx
c00117ac:	83 ec 08             	sub    esp,0x8
c00117af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00117b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117bf:	7f 2c                	jg     c00117ed <getFromFileDescriptor(int)+0x42>
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	68 38 dc 02 c0       	push   0xc002dc38
c00117c9:	e8 c6 67 01 00       	call   c0027f94 <LinkedList<UnixFile>::getFirstElement()>
c00117ce:	83 c4 10             	add    esp,0x10
c00117d1:	85 c0                	test   eax,eax
c00117d3:	75 04                	jne    c00117d9 <getFromFileDescriptor(int)+0x2e>
c00117d5:	31 c0                	xor    eax,eax
c00117d7:	eb 6e                	jmp    c0011847 <getFromFileDescriptor(int)+0x9c>
c00117d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00117dc:	74 69                	je     c0011847 <getFromFileDescriptor(int)+0x9c>
c00117de:	52                   	push   edx
c00117df:	52                   	push   edx
c00117e0:	50                   	push   eax
c00117e1:	68 38 dc 02 c0       	push   0xc002dc38
c00117e6:	e8 53 68 01 00       	call   c002803e <LinkedList<UnixFile>::getNext(UnixFile*)>
c00117eb:	eb e1                	jmp    c00117ce <getFromFileDescriptor(int)+0x23>
c00117ed:	a1 2c dc 02 c0       	mov    eax,ds:0xc002dc2c
c00117f2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00117f8:	74 4d                	je     c0011847 <getFromFileDescriptor(int)+0x9c>
c00117fa:	a1 30 dc 02 c0       	mov    eax,ds:0xc002dc30
c00117ff:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011805:	74 40                	je     c0011847 <getFromFileDescriptor(int)+0x9c>
c0011807:	a1 28 dc 02 c0       	mov    eax,ds:0xc002dc28
c001180c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011812:	74 33                	je     c0011847 <getFromFileDescriptor(int)+0x9c>
c0011814:	a1 24 dc 02 c0       	mov    eax,ds:0xc002dc24
c0011819:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001181f:	74 26                	je     c0011847 <getFromFileDescriptor(int)+0x9c>
c0011821:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011827:	83 f8 08             	cmp    eax,0x8
c001182a:	77 09                	ja     c0011835 <getFromFileDescriptor(int)+0x8a>
c001182c:	8b 04 85 00 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2400]
c0011833:	eb 12                	jmp    c0011847 <getFromFileDescriptor(int)+0x9c>
c0011835:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001183b:	83 fb 08             	cmp    ebx,0x8
c001183e:	77 95                	ja     c00117d5 <getFromFileDescriptor(int)+0x2a>
c0011840:	8b 04 9d c0 db 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2440]
c0011847:	83 c4 08             	add    esp,0x8
c001184a:	5b                   	pop    ebx
c001184b:	c3                   	ret    

c001184c <__static_initialization_and_destruction_0(int, int)>:
c001184c:	83 ec 0c             	sub    esp,0xc
c001184f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011854:	75 34                	jne    c001188a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011856:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001185e:	75 2a                	jne    c001188a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011860:	83 ec 0c             	sub    esp,0xc
c0011863:	68 38 dc 02 c0       	push   0xc002dc38
c0011868:	e8 fb 65 01 00       	call   c0027e68 <LinkedList<UnixFile>::LinkedList()>
c001186d:	83 c4 10             	add    esp,0x10
c0011870:	83 ec 04             	sub    esp,0x4
c0011873:	68 ec c9 02 c0       	push   0xc002c9ec
c0011878:	68 38 dc 02 c0       	push   0xc002dc38
c001187d:	68 66 7e 02 c0       	push   0xc0027e66
c0011882:	e8 04 0f 00 00       	call   c001278b <__cxa_atexit>
c0011887:	83 c4 10             	add    esp,0x10
c001188a:	90                   	nop
c001188b:	83 c4 0c             	add    esp,0xc
c001188e:	c3                   	ret    

c001188f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001188f:	83 ec 0c             	sub    esp,0xc
c0011892:	83 ec 08             	sub    esp,0x8
c0011895:	68 ff ff 00 00       	push   0xffff
c001189a:	6a 01                	push   0x1
c001189c:	e8 ab ff ff ff       	call   c001184c <__static_initialization_and_destruction_0(int, int)>
c00118a1:	83 c4 10             	add    esp,0x10
c00118a4:	83 c4 0c             	add    esp,0xc
c00118a7:	c3                   	ret    

c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00118a8:	53                   	push   ebx
c00118a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00118b1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00118b7:	89 c8                	mov    eax,ecx
c00118b9:	d1 e8                	shr    eax,1
c00118bb:	03 05 68 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca68
c00118c1:	83 e1 01             	and    ecx,0x1
c00118c4:	8a 10                	mov    dl,BYTE PTR [eax]
c00118c6:	75 09                	jne    c00118d1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00118c8:	83 e2 f0             	and    edx,0xfffffff0
c00118cb:	09 da                	or     edx,ebx
c00118cd:	88 10                	mov    BYTE PTR [eax],dl
c00118cf:	5b                   	pop    ebx
c00118d0:	c3                   	ret    
c00118d1:	c1 e3 04             	shl    ebx,0x4
c00118d4:	83 e2 0f             	and    edx,0xf
c00118d7:	09 da                	or     edx,ebx
c00118d9:	88 10                	mov    BYTE PTR [eax],dl
c00118db:	5b                   	pop    ebx
c00118dc:	c3                   	ret    

c00118dd <Virt::getPageState(unsigned long)>:
c00118dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e1:	8b 0d 68 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca68
c00118e7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00118ed:	89 d0                	mov    eax,edx
c00118ef:	d1 e8                	shr    eax,1
c00118f1:	83 e2 01             	and    edx,0x1
c00118f4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00118f7:	75 04                	jne    c00118fd <Virt::getPageState(unsigned long)+0x20>
c00118f9:	83 e0 0f             	and    eax,0xf
c00118fc:	c3                   	ret    
c00118fd:	c0 e8 04             	shr    al,0x4
c0011900:	c3                   	ret    

c0011901 <Virt::allocateKernelVirtualPages(int)>:
c0011901:	55                   	push   ebp
c0011902:	31 ed                	xor    ebp,ebp
c0011904:	57                   	push   edi
c0011905:	56                   	push   esi
c0011906:	53                   	push   ebx
c0011907:	31 db                	xor    ebx,ebx
c0011909:	83 ec 1c             	sub    esp,0x1c
c001190c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011910:	8b 3d 64 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca64
c0011916:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001191b:	57                   	push   edi
c001191c:	e8 bc ff ff ff       	call   c00118dd <Virt::getPageState(unsigned long)>
c0011921:	5a                   	pop    edx
c0011922:	84 c0                	test   al,al
c0011924:	75 3a                	jne    c0011960 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011926:	85 db                	test   ebx,ebx
c0011928:	75 02                	jne    c001192c <Virt::allocateKernelVirtualPages(int)+0x2b>
c001192a:	89 fd                	mov    ebp,edi
c001192c:	43                   	inc    ebx
c001192d:	39 f3                	cmp    ebx,esi
c001192f:	74 5a                	je     c001198b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011931:	47                   	inc    edi
c0011932:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011938:	76 31                	jbe    c001196b <Virt::allocateKernelVirtualPages(int)+0x6a>
c001193a:	c7 05 64 ca 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002ca64,0xc8000
c0011944:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011949:	75 28                	jne    c0011973 <Virt::allocateKernelVirtualPages(int)+0x72>
c001194b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011950:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011955:	57                   	push   edi
c0011956:	e8 82 ff ff ff       	call   c00118dd <Virt::getPageState(unsigned long)>
c001195b:	5a                   	pop    edx
c001195c:	84 c0                	test   al,al
c001195e:	74 c6                	je     c0011926 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011960:	31 db                	xor    ebx,ebx
c0011962:	47                   	inc    edi
c0011963:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011969:	77 cf                	ja     c001193a <Virt::allocateKernelVirtualPages(int)+0x39>
c001196b:	89 3d 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,edi
c0011971:	eb a8                	jmp    c001191b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011973:	83 ec 0c             	sub    esp,0xc
c0011976:	68 04 9d 02 c0       	push   0xc0029d04
c001197b:	e8 e5 84 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0011980:	8b 3d 64 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca64
c0011986:	83 c4 10             	add    esp,0x10
c0011989:	eb 90                	jmp    c001191b <Virt::allocateKernelVirtualPages(int)+0x1a>
c001198b:	89 2d 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,ebp
c0011991:	4b                   	dec    ebx
c0011992:	74 5f                	je     c00119f3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011994:	85 f6                	test   esi,esi
c0011996:	74 3d                	je     c00119d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011998:	89 e8                	mov    eax,ebp
c001199a:	31 db                	xor    ebx,ebx
c001199c:	8d 7e ff             	lea    edi,[esi-0x1]
c001199f:	eb 14                	jmp    c00119b5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00119a1:	6a 01                	push   0x1
c00119a3:	43                   	inc    ebx
c00119a4:	50                   	push   eax
c00119a5:	e8 fe fe ff ff       	call   c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119aa:	58                   	pop    eax
c00119ab:	39 f3                	cmp    ebx,esi
c00119ad:	5a                   	pop    edx
c00119ae:	74 25                	je     c00119d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00119b0:	a1 64 ca 02 c0       	mov    eax,ds:0xc002ca64
c00119b5:	8d 50 01             	lea    edx,[eax+0x1]
c00119b8:	85 db                	test   ebx,ebx
c00119ba:	89 15 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,edx
c00119c0:	74 20                	je     c00119e2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119c2:	39 df                	cmp    edi,ebx
c00119c4:	75 db                	jne    c00119a1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119c6:	6a 03                	push   0x3
c00119c8:	43                   	inc    ebx
c00119c9:	50                   	push   eax
c00119ca:	e8 d9 fe ff ff       	call   c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119cf:	59                   	pop    ecx
c00119d0:	39 f3                	cmp    ebx,esi
c00119d2:	58                   	pop    eax
c00119d3:	75 db                	jne    c00119b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119d5:	83 c4 1c             	add    esp,0x1c
c00119d8:	89 e8                	mov    eax,ebp
c00119da:	5b                   	pop    ebx
c00119db:	c1 e0 0c             	shl    eax,0xc
c00119de:	5e                   	pop    esi
c00119df:	5f                   	pop    edi
c00119e0:	5d                   	pop    ebp
c00119e1:	c3                   	ret    
c00119e2:	6a 02                	push   0x2
c00119e4:	bb 01 00 00 00       	mov    ebx,0x1
c00119e9:	50                   	push   eax
c00119ea:	e8 b9 fe ff ff       	call   c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119ef:	58                   	pop    eax
c00119f0:	5a                   	pop    edx
c00119f1:	eb bd                	jmp    c00119b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119f3:	6a 04                	push   0x4
c00119f5:	8d 45 01             	lea    eax,[ebp+0x1]
c00119f8:	55                   	push   ebp
c00119f9:	a3 64 ca 02 c0       	mov    ds:0xc002ca64,eax
c00119fe:	e8 a5 fe ff ff       	call   c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a03:	59                   	pop    ecx
c0011a04:	89 e8                	mov    eax,ebp
c0011a06:	5b                   	pop    ebx
c0011a07:	c1 e0 0c             	shl    eax,0xc
c0011a0a:	83 c4 1c             	add    esp,0x1c
c0011a0d:	5b                   	pop    ebx
c0011a0e:	5e                   	pop    esi
c0011a0f:	5f                   	pop    edi
c0011a10:	5d                   	pop    ebp
c0011a11:	c3                   	ret    

c0011a12 <Virt::virtualMemorySetup()>:
c0011a12:	53                   	push   ebx
c0011a13:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a18:	83 ec 08             	sub    esp,0x8
c0011a1b:	6a 0f                	push   0xf
c0011a1d:	53                   	push   ebx
c0011a1e:	43                   	inc    ebx
c0011a1f:	e8 84 fe ff ff       	call   c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a24:	59                   	pop    ecx
c0011a25:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a2b:	58                   	pop    eax
c0011a2c:	75 ed                	jne    c0011a1b <Virt::virtualMemorySetup()+0x9>
c0011a2e:	83 ec 08             	sub    esp,0x8
c0011a31:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a36:	68 00 00 00 c8       	push   0xc8000000
c0011a3b:	68 8b 9e 02 c0       	push   0xc0029e8b
c0011a40:	e8 ac 0e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0011a45:	58                   	pop    eax
c0011a46:	5a                   	pop    edx
c0011a47:	68 00 f0 ff ef       	push   0xeffff000
c0011a4c:	68 9f 9e 02 c0       	push   0xc0029e9f
c0011a51:	e8 9b 0e 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	83 ec 08             	sub    esp,0x8
c0011a5c:	6a 00                	push   0x0
c0011a5e:	53                   	push   ebx
c0011a5f:	43                   	inc    ebx
c0011a60:	e8 43 fe ff ff       	call   c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a65:	83 c4 10             	add    esp,0x10
c0011a68:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a6e:	75 e9                	jne    c0011a59 <Virt::virtualMemorySetup()+0x47>
c0011a70:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a75:	83 ec 08             	sub    esp,0x8
c0011a78:	6a 0f                	push   0xf
c0011a7a:	53                   	push   ebx
c0011a7b:	43                   	inc    ebx
c0011a7c:	e8 27 fe ff ff       	call   c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a81:	83 c4 10             	add    esp,0x10
c0011a84:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a8a:	75 e9                	jne    c0011a75 <Virt::virtualMemorySetup()+0x63>
c0011a8c:	83 c4 08             	add    esp,0x8
c0011a8f:	5b                   	pop    ebx
c0011a90:	c3                   	ret    

c0011a91 <Virt::getAKernelVAS()>:
c0011a91:	a1 44 dc 02 c0       	mov    eax,ds:0xc002dc44
c0011a96:	c3                   	ret    

c0011a97 <Virt::setupPageSwapping(int)>:
c0011a97:	57                   	push   edi
c0011a98:	56                   	push   esi
c0011a99:	53                   	push   ebx
c0011a9a:	83 ec 1c             	sub    esp,0x1c
c0011a9d:	68 14 01 00 00       	push   0x114
c0011aa2:	e8 7b db ff ff       	call   c000f622 <malloc>
c0011aa7:	83 c4 0c             	add    esp,0xc
c0011aaa:	89 c6                	mov    esi,eax
c0011aac:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c0011ab2:	68 b3 9e 02 c0       	push   0xc0029eb3
c0011ab7:	50                   	push   eax
c0011ab8:	e8 8d 13 00 00       	call   c0012e4a <File::File(char const*, Process*)>
c0011abd:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ac0:	e8 61 15 00 00       	call   c0013026 <File::unlink()>
c0011ac5:	58                   	pop    eax
c0011ac6:	5a                   	pop    edx
c0011ac7:	6a 12                	push   0x12
c0011ac9:	56                   	push   esi
c0011aca:	e8 df 13 00 00       	call   c0012eae <File::open(FileOpenMode)>
c0011acf:	83 c4 10             	add    esp,0x10
c0011ad2:	85 c0                	test   eax,eax
c0011ad4:	0f 85 ca 00 00 00    	jne    c0011ba4 <Virt::setupPageSwapping(int)+0x10d>
c0011ada:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ade:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ae6:	c1 e3 08             	shl    ebx,0x8
c0011ae9:	83 ec 0c             	sub    esp,0xc
c0011aec:	68 00 00 01 00       	push   0x10000
c0011af1:	e8 2c db ff ff       	call   c000f622 <malloc>
c0011af6:	83 c4 0c             	add    esp,0xc
c0011af9:	89 c7                	mov    edi,eax
c0011afb:	68 00 00 01 00       	push   0x10000
c0011b00:	6a 00                	push   0x0
c0011b02:	50                   	push   eax
c0011b03:	e8 ba eb fe ff       	call   c00006c2 <memset>
c0011b08:	83 c4 10             	add    esp,0x10
c0011b0b:	85 db                	test   ebx,ebx
c0011b0d:	79 03                	jns    c0011b12 <Virt::setupPageSwapping(int)+0x7b>
c0011b0f:	83 c3 0f             	add    ebx,0xf
c0011b12:	c1 fb 04             	sar    ebx,0x4
c0011b15:	4b                   	dec    ebx
c0011b16:	83 fb ff             	cmp    ebx,0xffffffff
c0011b19:	74 4b                	je     c0011b66 <Virt::setupPageSwapping(int)+0xcf>
c0011b1b:	83 ec 0c             	sub    esp,0xc
c0011b1e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b20:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b24:	52                   	push   edx
c0011b25:	57                   	push   edi
c0011b26:	6a 00                	push   0x0
c0011b28:	68 00 00 01 00       	push   0x10000
c0011b2d:	56                   	push   esi
c0011b2e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b31:	83 c4 20             	add    esp,0x20
c0011b34:	85 c0                	test   eax,eax
c0011b36:	75 59                	jne    c0011b91 <Virt::setupPageSwapping(int)+0xfa>
c0011b38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b3c:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b41:	74 d2                	je     c0011b15 <Virt::setupPageSwapping(int)+0x7e>
c0011b43:	83 ec 08             	sub    esp,0x8
c0011b46:	4b                   	dec    ebx
c0011b47:	50                   	push   eax
c0011b48:	68 06 9f 02 c0       	push   0xc0029f06
c0011b4d:	e8 9f 0d 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0011b52:	c7 04 24 0f 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f0f
c0011b59:	e8 07 83 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0011b5e:	83 c4 10             	add    esp,0x10
c0011b61:	83 fb ff             	cmp    ebx,0xffffffff
c0011b64:	75 b5                	jne    c0011b1b <Virt::setupPageSwapping(int)+0x84>
c0011b66:	83 ec 0c             	sub    esp,0xc
c0011b69:	56                   	push   esi
c0011b6a:	e8 9d 13 00 00       	call   c0012f0c <File::close()>
c0011b6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b72:	e8 cb da ff ff       	call   c000f642 <rfree>
c0011b77:	83 c4 10             	add    esp,0x10
c0011b7a:	85 f6                	test   esi,esi
c0011b7c:	74 0c                	je     c0011b8a <Virt::setupPageSwapping(int)+0xf3>
c0011b7e:	83 ec 0c             	sub    esp,0xc
c0011b81:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b83:	56                   	push   esi
c0011b84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b87:	83 c4 10             	add    esp,0x10
c0011b8a:	83 c4 10             	add    esp,0x10
c0011b8d:	5b                   	pop    ebx
c0011b8e:	5e                   	pop    esi
c0011b8f:	5f                   	pop    edi
c0011b90:	c3                   	ret    
c0011b91:	83 ec 08             	sub    esp,0x8
c0011b94:	50                   	push   eax
c0011b95:	68 ee 9e 02 c0       	push   0xc0029eee
c0011b9a:	e8 52 0d 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0011b9f:	83 c4 10             	add    esp,0x10
c0011ba2:	eb 94                	jmp    c0011b38 <Virt::setupPageSwapping(int)+0xa1>
c0011ba4:	83 ec 08             	sub    esp,0x8
c0011ba7:	50                   	push   eax
c0011ba8:	68 ca 9e 02 c0       	push   0xc0029eca
c0011bad:	e8 3f 0d 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0011bb2:	c7 04 24 d3 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ed3
c0011bb9:	e8 a7 82 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0011bbe:	83 c4 10             	add    esp,0x10
c0011bc1:	e9 14 ff ff ff       	jmp    c0011ada <Virt::setupPageSwapping(int)+0x43>

c0011bc6 <VAS::VAS()>:
c0011bc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd5:	a3 44 dc 02 c0       	mov    ds:0xc002dc44,eax
c0011bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bde:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bed:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011bf4:	90                   	nop
c0011bf5:	c3                   	ret    

c0011bf6 <VAS::VAS(VAS*)>:
c0011bf6:	83 ec 0c             	sub    esp,0xc
c0011bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bfd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c04:	83 ec 0c             	sub    esp,0xc
c0011c07:	68 24 9d 02 c0       	push   0xc0029d24
c0011c0c:	e8 54 82 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0011c11:	83 c4 10             	add    esp,0x10
c0011c14:	90                   	nop
c0011c15:	83 c4 0c             	add    esp,0xc
c0011c18:	c3                   	ret    
c0011c19:	90                   	nop

c0011c1a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011c1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c1e:	89 c2                	mov    edx,eax
c0011c20:	c1 e8 0a             	shr    eax,0xa
c0011c23:	c1 ea 16             	shr    edx,0x16
c0011c26:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c2b:	19 c9                	sbb    ecx,ecx
c0011c2d:	c1 e2 0c             	shl    edx,0xc
c0011c30:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c36:	25 fc 0f 00 00       	and    eax,0xffc
c0011c3b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c42:	01 d0                	add    eax,edx
c0011c44:	c3                   	ret    
c0011c45:	90                   	nop

c0011c46 <VAS::getPageTableEntry(unsigned long)>:
c0011c46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c4a:	89 ca                	mov    edx,ecx
c0011c4c:	c1 e9 0a             	shr    ecx,0xa
c0011c4f:	c1 ea 16             	shr    edx,0x16
c0011c52:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c58:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c5e:	c1 e0 0c             	shl    eax,0xc
c0011c61:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c64:	c3                   	ret    

c0011c65 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c65:	57                   	push   edi
c0011c66:	56                   	push   esi
c0011c67:	be 01 00 00 00       	mov    esi,0x1
c0011c6c:	53                   	push   ebx
c0011c6d:	83 ec 10             	sub    esp,0x10
c0011c70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c74:	c1 eb 0c             	shr    ebx,0xc
c0011c77:	eb 3f                	jmp    c0011cb8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c79:	e8 13 fe ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c0011c7e:	83 ec 08             	sub    esp,0x8
c0011c81:	57                   	push   edi
c0011c82:	50                   	push   eax
c0011c83:	e8 be ff ff ff       	call   c0011c46 <VAS::getPageTableEntry(unsigned long)>
c0011c88:	83 c4 10             	add    esp,0x10
c0011c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c91:	f6 c4 04             	test   ah,0x4
c0011c94:	75 5f                	jne    c0011cf5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c96:	80 fa 04             	cmp    dl,0x4
c0011c99:	74 78                	je     c0011d13 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c9b:	80 fa 02             	cmp    dl,0x2
c0011c9e:	0f 84 88 00 00 00    	je     c0011d2c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ca4:	80 fa 03             	cmp    dl,0x3
c0011ca7:	0f 84 ad 00 00 00    	je     c0011d5a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011cad:	fe ca                	dec    dl
c0011caf:	0f 84 92 00 00 00    	je     c0011d47 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011cb5:	43                   	inc    ebx
c0011cb6:	31 f6                	xor    esi,esi
c0011cb8:	53                   	push   ebx
c0011cb9:	e8 1f fc ff ff       	call   c00118dd <Virt::getPageState(unsigned long)>
c0011cbe:	5f                   	pop    edi
c0011cbf:	89 df                	mov    edi,ebx
c0011cc1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011cc5:	c1 e7 0c             	shl    edi,0xc
c0011cc8:	84 c0                	test   al,al
c0011cca:	75 ad                	jne    c0011c79 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011ccc:	83 ec 0c             	sub    esp,0xc
c0011ccf:	68 15 9f 02 c0       	push   0xc0029f15
c0011cd4:	e8 8c 81 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0011cd9:	e8 b3 fd ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c0011cde:	5a                   	pop    edx
c0011cdf:	59                   	pop    ecx
c0011ce0:	57                   	push   edi
c0011ce1:	50                   	push   eax
c0011ce2:	e8 5f ff ff ff       	call   c0011c46 <VAS::getPageTableEntry(unsigned long)>
c0011ce7:	83 c4 10             	add    esp,0x10
c0011cea:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cec:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cf0:	f6 c4 04             	test   ah,0x4
c0011cf3:	74 c0                	je     c0011cb5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cf5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011cf9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cfe:	83 ec 0c             	sub    esp,0xc
c0011d01:	50                   	push   eax
c0011d02:	e8 2e df ff ff       	call   c000fc35 <Phys::freePage(unsigned long)>
c0011d07:	83 c4 10             	add    esp,0x10
c0011d0a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011d0e:	80 fa 04             	cmp    dl,0x4
c0011d11:	75 88                	jne    c0011c9b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011d13:	89 f0                	mov    eax,esi
c0011d15:	84 c0                	test   al,al
c0011d17:	75 47                	jne    c0011d60 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011d19:	c7 44 24 20 48 9d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029d48
c0011d21:	83 c4 10             	add    esp,0x10
c0011d24:	5b                   	pop    ebx
c0011d25:	5e                   	pop    esi
c0011d26:	5f                   	pop    edi
c0011d27:	e9 39 81 00 00       	jmp    c0019e65 <Krnl::panic(char const*)>
c0011d2c:	89 f0                	mov    eax,esi
c0011d2e:	84 c0                	test   al,al
c0011d30:	75 15                	jne    c0011d47 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d32:	83 ec 0c             	sub    esp,0xc
c0011d35:	68 31 9f 02 c0       	push   0xc0029f31
c0011d3a:	e8 26 81 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	e9 6e ff ff ff       	jmp    c0011cb5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d47:	83 ec 08             	sub    esp,0x8
c0011d4a:	6a 00                	push   0x0
c0011d4c:	53                   	push   ebx
c0011d4d:	e8 56 fb ff ff       	call   c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	e9 5b ff ff ff       	jmp    c0011cb5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d5a:	89 f0                	mov    eax,esi
c0011d5c:	84 c0                	test   al,al
c0011d5e:	75 15                	jne    c0011d75 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d60:	83 ec 08             	sub    esp,0x8
c0011d63:	6a 00                	push   0x0
c0011d65:	53                   	push   ebx
c0011d66:	e8 3d fb ff ff       	call   c00118a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d6b:	83 c4 10             	add    esp,0x10
c0011d6e:	83 c4 10             	add    esp,0x10
c0011d71:	5b                   	pop    ebx
c0011d72:	5e                   	pop    esi
c0011d73:	5f                   	pop    edi
c0011d74:	c3                   	ret    
c0011d75:	c7 44 24 20 4d 9f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029f4d
c0011d7d:	83 c4 10             	add    esp,0x10
c0011d80:	5b                   	pop    ebx
c0011d81:	5e                   	pop    esi
c0011d82:	5f                   	pop    edi
c0011d83:	e9 dd 80 00 00       	jmp    c0019e65 <Krnl::panic(char const*)>

c0011d88 <VAS::freeAllocatedPages(unsigned long)>:
c0011d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d90:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d94:	74 09                	je     c0011d9f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d96:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d9a:	e9 c6 fe ff ff       	jmp    c0011c65 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d9f:	c7 44 24 04 6c 9d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029d6c
c0011da7:	e9 45 0b 00 00       	jmp    c00128f1 <Dbg::kprintf(char const*, ...)>

c0011dac <VAS::virtualToPhysical(unsigned long)>:
c0011dac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011db0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011db4:	e8 8d fe ff ff       	call   c0011c46 <VAS::getPageTableEntry(unsigned long)>
c0011db9:	5a                   	pop    edx
c0011dba:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbc:	59                   	pop    ecx
c0011dbd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dc2:	c3                   	ret    
c0011dc3:	90                   	nop

c0011dc4 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011dc4:	55                   	push   ebp
c0011dc5:	57                   	push   edi
c0011dc6:	56                   	push   esi
c0011dc7:	53                   	push   ebx
c0011dc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011dcc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011dd0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011dd4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011dd8:	85 db                	test   ebx,ebx
c0011dda:	7e 22                	jle    c0011dfe <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011ddc:	c1 e3 0c             	shl    ebx,0xc
c0011ddf:	01 f3                	add    ebx,esi
c0011de1:	56                   	push   esi
c0011de2:	81 c6 00 10 00 00    	add    esi,0x1000
c0011de8:	55                   	push   ebp
c0011de9:	e8 58 fe ff ff       	call   c0011c46 <VAS::getPageTableEntry(unsigned long)>
c0011dee:	5a                   	pop    edx
c0011def:	59                   	pop    ecx
c0011df0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011df2:	21 f9                	and    ecx,edi
c0011df4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011df8:	39 f3                	cmp    ebx,esi
c0011dfa:	89 08                	mov    DWORD PTR [eax],ecx
c0011dfc:	75 e3                	jne    c0011de1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011dfe:	5b                   	pop    ebx
c0011dff:	5e                   	pop    esi
c0011e00:	5f                   	pop    edi
c0011e01:	5d                   	pop    ebp
c0011e02:	c3                   	ret    
c0011e03:	90                   	nop

c0011e04 <VAS::setToWriteCombining(unsigned long, int)>:
c0011e04:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0011e09:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e0f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011e16:	75 01                	jne    c0011e19 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011e18:	c3                   	ret    
c0011e19:	68 80 00 00 00       	push   0x80
c0011e1e:	6a ff                	push   0xffffffff
c0011e20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e2c:	e8 93 ff ff ff       	call   c0011dc4 <VAS::reflagRange(unsigned long, int, int, int)>
c0011e31:	83 c4 14             	add    esp,0x14
c0011e34:	c3                   	ret    
c0011e35:	90                   	nop

c0011e36 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e36:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e3f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e46:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e49:	19 c0                	sbb    eax,eax
c0011e4b:	83 ca 03             	or     edx,0x3
c0011e4e:	83 e0 fc             	and    eax,0xfffffffc
c0011e51:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e58:	0f 20 d8             	mov    eax,cr3
c0011e5b:	0f 22 d8             	mov    cr3,eax
c0011e5e:	c3                   	ret    
c0011e5f:	90                   	nop

c0011e60 <VAS::~VAS()>:
c0011e60:	83 ec 2c             	sub    esp,0x2c
c0011e63:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e6b:	e8 50 b6 00 00       	call   c001d4c0 <lockScheduler()>
c0011e70:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e7a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e80:	83 ec 04             	sub    esp,0x4
c0011e83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e87:	6a 01                	push   0x1
c0011e89:	50                   	push   eax
c0011e8a:	e8 a7 ff ff ff       	call   c0011e36 <VAS::mapOtherVASIn(bool, VAS*)>
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e9a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011ea2:	0f 8f d7 00 00 00    	jg     c0011f7f <VAS::~VAS()+0x11f>
c0011ea8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011eaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eb3:	c1 e2 02             	shl    edx,0x2
c0011eb6:	01 d0                	add    eax,edx
c0011eb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec2:	83 e0 01             	and    eax,0x1
c0011ec5:	0f 84 ab 00 00 00    	je     c0011f76 <VAS::~VAS()+0x116>
c0011ecb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ed3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011edb:	7f 75                	jg     c0011f52 <VAS::~VAS()+0xf2>
c0011edd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee1:	c1 e0 0a             	shl    eax,0xa
c0011ee4:	89 c2                	mov    edx,eax
c0011ee6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011eea:	01 d0                	add    eax,edx
c0011eec:	c1 e0 0c             	shl    eax,0xc
c0011eef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ef3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011ef8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011efa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011efd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011f03:	83 ec 04             	sub    esp,0x4
c0011f06:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f0a:	6a 01                	push   0x1
c0011f0c:	50                   	push   eax
c0011f0d:	e8 08 fd ff ff       	call   c0011c1a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011f12:	83 c4 10             	add    esp,0x10
c0011f15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f27:	25 01 04 00 00       	and    eax,0x401
c0011f2c:	3d 01 04 00 00       	cmp    eax,0x401
c0011f31:	75 19                	jne    c0011f4c <VAS::~VAS()+0xec>
c0011f33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f37:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f3c:	83 ec 0c             	sub    esp,0xc
c0011f3f:	50                   	push   eax
c0011f40:	e8 f0 dc ff ff       	call   c000fc35 <Phys::freePage(unsigned long)>
c0011f45:	83 c4 10             	add    esp,0x10
c0011f48:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f4c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f50:	eb 81                	jmp    c0011ed3 <VAS::~VAS()+0x73>
c0011f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f56:	25 00 04 00 00       	and    eax,0x400
c0011f5b:	74 19                	je     c0011f76 <VAS::~VAS()+0x116>
c0011f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f66:	83 ec 0c             	sub    esp,0xc
c0011f69:	50                   	push   eax
c0011f6a:	e8 c6 dc ff ff       	call   c000fc35 <Phys::freePage(unsigned long)>
c0011f6f:	83 c4 10             	add    esp,0x10
c0011f72:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f76:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f7a:	e9 1b ff ff ff       	jmp    c0011e9a <VAS::~VAS()+0x3a>
c0011f7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f86:	83 ec 0c             	sub    esp,0xc
c0011f89:	50                   	push   eax
c0011f8a:	e8 d6 fc ff ff       	call   c0011c65 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f99:	83 ec 0c             	sub    esp,0xc
c0011f9c:	50                   	push   eax
c0011f9d:	e8 93 dc ff ff       	call   c000fc35 <Phys::freePage(unsigned long)>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fad:	c1 e0 02             	shl    eax,0x2
c0011fb0:	83 ec 08             	sub    esp,0x8
c0011fb3:	50                   	push   eax
c0011fb4:	68 90 9d 02 c0       	push   0xc0029d90
c0011fb9:	e8 33 09 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	e8 fc b4 00 00       	call   c001d4c2 <unlockScheduler()>
c0011fc6:	90                   	nop
c0011fc7:	83 c4 2c             	add    esp,0x2c
c0011fca:	c3                   	ret    
c0011fcb:	90                   	nop

c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011fcc:	55                   	push   ebp
c0011fcd:	57                   	push   edi
c0011fce:	56                   	push   esi
c0011fcf:	53                   	push   ebx
c0011fd0:	83 ec 1c             	sub    esp,0x1c
c0011fd3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011fd7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fdb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011fe1:	77 08                	ja     c0011feb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011fe3:	0f 20 d8             	mov    eax,cr3
c0011fe6:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011fe9:	75 47                	jne    c0012032 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011feb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fef:	09 d8                	or     eax,ebx
c0011ff1:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ff6:	75 57                	jne    c001204f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011ff8:	89 de                	mov    esi,ebx
c0011ffa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ffd:	c1 ee 16             	shr    esi,0x16
c0012000:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012007:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001200b:	74 54                	je     c0012061 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001200d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012011:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012017:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001201b:	c1 e6 0c             	shl    esi,0xc
c001201e:	c1 eb 0a             	shr    ebx,0xa
c0012021:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012027:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001202a:	83 c4 1c             	add    esp,0x1c
c001202d:	5b                   	pop    ebx
c001202e:	5e                   	pop    esi
c001202f:	5f                   	pop    edi
c0012030:	5d                   	pop    ebp
c0012031:	c3                   	ret    
c0012032:	83 ec 0c             	sub    esp,0xc
c0012035:	68 b0 9d 02 c0       	push   0xc0029db0
c001203a:	e8 b2 08 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001203f:	83 c4 10             	add    esp,0x10
c0012042:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012046:	09 d8                	or     eax,ebx
c0012048:	a9 ff 0f 00 00       	test   eax,0xfff
c001204d:	74 a9                	je     c0011ff8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001204f:	83 ec 0c             	sub    esp,0xc
c0012052:	68 18 9e 02 c0       	push   0xc0029e18
c0012057:	e8 09 7e 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c001205c:	83 c4 10             	add    esp,0x10
c001205f:	eb 97                	jmp    c0011ff8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012061:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012065:	e8 55 dc ff ff       	call   c000fcbf <Phys::allocatePage()>
c001206a:	89 c5                	mov    ebp,eax
c001206c:	e8 20 fa ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c0012071:	83 ec 0c             	sub    esp,0xc
c0012074:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012078:	6a 01                	push   0x1
c001207a:	e8 82 f8 ff ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c001207f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012086:	6a 01                	push   0x1
c0012088:	50                   	push   eax
c0012089:	55                   	push   ebp
c001208a:	81 cd 07 04 00 00    	or     ebp,0x407
c0012090:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012094:	51                   	push   ecx
c0012095:	e8 26 02 00 00       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001209a:	83 c4 1c             	add    esp,0x1c
c001209d:	68 00 10 00 00       	push   0x1000
c00120a2:	6a 00                	push   0x0
c00120a4:	50                   	push   eax
c00120a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120a9:	e8 14 e6 fe ff       	call   c00006c2 <memset>
c00120ae:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120b2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120b5:	e8 ab fb ff ff       	call   c0011c65 <Virt::freeKernelVirtualPages(unsigned long)>
c00120ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120be:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120c7:	e9 41 ff ff ff       	jmp    c001200d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00120cc <VAS::allocatePages(int, int)>:
c00120cc:	55                   	push   ebp
c00120cd:	57                   	push   edi
c00120ce:	56                   	push   esi
c00120cf:	53                   	push   ebx
c00120d0:	83 ec 1c             	sub    esp,0x1c
c00120d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120d7:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00120dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120e8:	83 e0 01             	and    eax,0x1
c00120eb:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00120ef:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120f3:	0f 85 cc 00 00 00    	jne    c00121c5 <VAS::allocatePages(int, int)+0xf9>
c00120f9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012100:	85 c0                	test   eax,eax
c0012102:	0f 84 a1 00 00 00    	je     c00121a9 <VAS::allocatePages(int, int)+0xdd>
c0012108:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001210c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012110:	c1 e6 0c             	shl    esi,0xc
c0012113:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012117:	85 c0                	test   eax,eax
c0012119:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001211c:	7e 33                	jle    c0012151 <VAS::allocatePages(int, int)+0x85>
c001211e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012122:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012126:	81 cd 00 04 00 00    	or     ebp,0x400
c001212c:	e8 8e db ff ff       	call   c000fcbf <Phys::allocatePage()>
c0012131:	55                   	push   ebp
c0012132:	53                   	push   ebx
c0012133:	50                   	push   eax
c0012134:	57                   	push   edi
c0012135:	e8 92 fe ff ff       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c001213a:	83 c4 10             	add    esp,0x10
c001213d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012142:	74 03                	je     c0012147 <VAS::allocatePages(int, int)+0x7b>
c0012144:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012147:	81 c3 00 10 00 00    	add    ebx,0x1000
c001214d:	39 de                	cmp    esi,ebx
c001214f:	75 db                	jne    c001212c <VAS::allocatePages(int, int)+0x60>
c0012151:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012156:	75 12                	jne    c001216a <VAS::allocatePages(int, int)+0x9e>
c0012158:	0f 20 d8             	mov    eax,cr3
c001215b:	0f 22 d8             	mov    cr3,eax
c001215e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012162:	83 c4 1c             	add    esp,0x1c
c0012165:	5b                   	pop    ebx
c0012166:	5e                   	pop    esi
c0012167:	5f                   	pop    edi
c0012168:	5d                   	pop    ebp
c0012169:	c3                   	ret    
c001216a:	c1 ee 0a             	shr    esi,0xa
c001216d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012171:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012177:	c1 eb 0a             	shr    ebx,0xa
c001217a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012180:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012186:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001218c:	39 c3                	cmp    ebx,eax
c001218e:	77 ce                	ja     c001215e <VAS::allocatePages(int, int)+0x92>
c0012190:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012193:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012199:	39 d8                	cmp    eax,ebx
c001219b:	73 f3                	jae    c0012190 <VAS::allocatePages(int, int)+0xc4>
c001219d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a1:	83 c4 1c             	add    esp,0x1c
c00121a4:	5b                   	pop    ebx
c00121a5:	5e                   	pop    esi
c00121a6:	5f                   	pop    edi
c00121a7:	5d                   	pop    ebp
c00121a8:	c3                   	ret    
c00121a9:	83 ec 0c             	sub    esp,0xc
c00121ac:	68 3c 9e 02 c0       	push   0xc0029e3c
c00121b1:	e8 af 7c 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c00121b6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121bd:	83 c4 10             	add    esp,0x10
c00121c0:	e9 43 ff ff ff       	jmp    c0012108 <VAS::allocatePages(int, int)+0x3c>
c00121c5:	83 ec 0c             	sub    esp,0xc
c00121c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121cc:	e8 30 f7 ff ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c00121d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121d5:	83 c4 10             	add    esp,0x10
c00121d8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00121dd:	0f 87 9b 00 00 00    	ja     c001227e <VAS::allocatePages(int, int)+0x1b2>
c00121e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121e7:	85 d2                	test   edx,edx
c00121e9:	7e 3c                	jle    c0012227 <VAS::allocatePages(int, int)+0x15b>
c00121eb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121ef:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121f7:	c1 e5 0c             	shl    ebp,0xc
c00121fa:	81 ce 00 04 00 00    	or     esi,0x400
c0012200:	01 dd                	add    ebp,ebx
c0012202:	e8 b8 da ff ff       	call   c000fcbf <Phys::allocatePage()>
c0012207:	56                   	push   esi
c0012208:	53                   	push   ebx
c0012209:	50                   	push   eax
c001220a:	57                   	push   edi
c001220b:	e8 bc fd ff ff       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012210:	83 c4 10             	add    esp,0x10
c0012213:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012218:	74 03                	je     c001221d <VAS::allocatePages(int, int)+0x151>
c001221a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001221d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012223:	39 dd                	cmp    ebp,ebx
c0012225:	75 db                	jne    c0012202 <VAS::allocatePages(int, int)+0x136>
c0012227:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001222c:	0f 84 26 ff ff ff    	je     c0012158 <VAS::allocatePages(int, int)+0x8c>
c0012232:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012236:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001223a:	89 d3                	mov    ebx,edx
c001223c:	c1 e0 0c             	shl    eax,0xc
c001223f:	c1 eb 0a             	shr    ebx,0xa
c0012242:	01 d0                	add    eax,edx
c0012244:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001224a:	c1 e8 0a             	shr    eax,0xa
c001224d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012253:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012258:	2d 00 00 40 00       	sub    eax,0x400000
c001225d:	39 c3                	cmp    ebx,eax
c001225f:	0f 87 f9 fe ff ff    	ja     c001215e <VAS::allocatePages(int, int)+0x92>
c0012265:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012268:	81 c3 00 10 00 00    	add    ebx,0x1000
c001226e:	39 d8                	cmp    eax,ebx
c0012270:	73 f3                	jae    c0012265 <VAS::allocatePages(int, int)+0x199>
c0012272:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012276:	83 c4 1c             	add    esp,0x1c
c0012279:	5b                   	pop    ebx
c001227a:	5e                   	pop    esi
c001227b:	5f                   	pop    edi
c001227c:	5d                   	pop    ebp
c001227d:	c3                   	ret    
c001227e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012283:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012289:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012290:	0f 84 4d ff ff ff    	je     c00121e3 <VAS::allocatePages(int, int)+0x117>
c0012296:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001229e:	e9 40 ff ff ff       	jmp    c00121e3 <VAS::allocatePages(int, int)+0x117>
c00122a3:	90                   	nop

c00122a4 <VAS::setCPUSpecific(unsigned long)>:
c00122a4:	83 ec 0c             	sub    esp,0xc
c00122a7:	6a 05                	push   0x5
c00122a9:	68 00 00 40 c2       	push   0xc2400000
c00122ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122b6:	e8 11 fd ff ff       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c00122bb:	83 c4 1c             	add    esp,0x1c
c00122be:	c3                   	ret    
c00122bf:	90                   	nop

c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122c0:	55                   	push   ebp
c00122c1:	57                   	push   edi
c00122c2:	56                   	push   esi
c00122c3:	53                   	push   ebx
c00122c4:	83 ec 1c             	sub    esp,0x1c
c00122c7:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00122cc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122d6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122da:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00122e0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122e4:	83 e0 01             	and    eax,0x1
c00122e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00122eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122ef:	85 c0                	test   eax,eax
c00122f1:	7e 39                	jle    c001232c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00122f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f7:	89 f3                	mov    ebx,esi
c00122f9:	c1 e0 0c             	shl    eax,0xc
c00122fc:	01 f0                	add    eax,esi
c00122fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012302:	55                   	push   ebp
c0012303:	53                   	push   ebx
c0012304:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012308:	29 f0                	sub    eax,esi
c001230a:	01 d8                	add    eax,ebx
c001230c:	50                   	push   eax
c001230d:	57                   	push   edi
c001230e:	e8 b9 fc ff ff       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012313:	83 c4 10             	add    esp,0x10
c0012316:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001231b:	74 03                	je     c0012320 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001231d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012320:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012326:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001232a:	75 d6                	jne    c0012302 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001232c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012331:	75 10                	jne    c0012343 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012333:	0f 20 d8             	mov    eax,cr3
c0012336:	0f 22 d8             	mov    cr3,eax
c0012339:	83 c4 1c             	add    esp,0x1c
c001233c:	89 f0                	mov    eax,esi
c001233e:	5b                   	pop    ebx
c001233f:	5e                   	pop    esi
c0012340:	5f                   	pop    edi
c0012341:	5d                   	pop    ebp
c0012342:	c3                   	ret    
c0012343:	89 f3                	mov    ebx,esi
c0012345:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012349:	c1 eb 0a             	shr    ebx,0xa
c001234c:	c1 e0 0c             	shl    eax,0xc
c001234f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012355:	01 f0                	add    eax,esi
c0012357:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001235d:	c1 e8 0a             	shr    eax,0xa
c0012360:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012365:	2d 00 00 40 00       	sub    eax,0x400000
c001236a:	39 c3                	cmp    ebx,eax
c001236c:	77 cb                	ja     c0012339 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001236e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012371:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012377:	39 d8                	cmp    eax,ebx
c0012379:	73 f3                	jae    c001236e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001237b:	83 c4 1c             	add    esp,0x1c
c001237e:	89 f0                	mov    eax,esi
c0012380:	5b                   	pop    ebx
c0012381:	5e                   	pop    esi
c0012382:	5f                   	pop    edi
c0012383:	5d                   	pop    ebp
c0012384:	c3                   	ret    
c0012385:	90                   	nop

c0012386 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012386:	55                   	push   ebp
c0012387:	57                   	push   edi
c0012388:	56                   	push   esi
c0012389:	53                   	push   ebx
c001238a:	83 ec 1c             	sub    esp,0x1c
c001238d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012391:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012395:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012399:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001239d:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a2:	75 4a                	jne    c00123ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00123a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00123a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123ab:	c1 eb 16             	shr    ebx,0x16
c00123ae:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00123b5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00123b9:	74 4d                	je     c0012408 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00123bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123bf:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123c3:	c1 e8 0a             	shr    eax,0xa
c00123c6:	80 fa 01             	cmp    dl,0x1
c00123c9:	19 d2                	sbb    edx,edx
c00123cb:	c1 e3 0c             	shl    ebx,0xc
c00123ce:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00123d2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00123d8:	25 fc 0f 00 00       	and    eax,0xffc
c00123dd:	01 d8                	add    eax,ebx
c00123df:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00123e6:	83 c4 1c             	add    esp,0x1c
c00123e9:	5b                   	pop    ebx
c00123ea:	5e                   	pop    esi
c00123eb:	5f                   	pop    edi
c00123ec:	5d                   	pop    ebp
c00123ed:	c3                   	ret    
c00123ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00123f2:	83 ec 0c             	sub    esp,0xc
c00123f5:	68 68 9e 02 c0       	push   0xc0029e68
c00123fa:	e8 66 7a 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c00123ff:	83 c4 10             	add    esp,0x10
c0012402:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012406:	eb 9c                	jmp    c00123a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012408:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240c:	e8 ae d8 ff ff       	call   c000fcbf <Phys::allocatePage()>
c0012411:	89 c5                	mov    ebp,eax
c0012413:	e8 79 f6 ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c0012418:	83 ec 0c             	sub    esp,0xc
c001241b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001241f:	6a 01                	push   0x1
c0012421:	e8 db f4 ff ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c0012426:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001242d:	6a 01                	push   0x1
c001242f:	50                   	push   eax
c0012430:	55                   	push   ebp
c0012431:	81 cd 07 04 00 00    	or     ebp,0x407
c0012437:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001243b:	51                   	push   ecx
c001243c:	e8 7f fe ff ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012441:	83 c4 1c             	add    esp,0x1c
c0012444:	68 00 10 00 00       	push   0x1000
c0012449:	6a 00                	push   0x0
c001244b:	50                   	push   eax
c001244c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012450:	e8 6d e2 fe ff       	call   c00006c2 <memset>
c0012455:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012459:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001245c:	e8 04 f8 ff ff       	call   c0011c65 <Virt::freeKernelVirtualPages(unsigned long)>
c0012461:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012464:	83 c4 10             	add    esp,0x10
c0012467:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001246a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001246e:	e9 48 ff ff ff       	jmp    c00123bb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012473:	90                   	nop

c0012474 <VAS::VAS(bool)>:
c0012474:	53                   	push   ebx
c0012475:	83 ec 28             	sub    esp,0x28
c0012478:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001247c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012480:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012484:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001248b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001248f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012493:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012496:	e8 24 d8 ff ff       	call   c000fcbf <Phys::allocatePage()>
c001249b:	89 c2                	mov    edx,eax
c001249d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124a1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00124a4:	e8 e8 f5 ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c00124a9:	89 c3                	mov    ebx,eax
c00124ab:	83 ec 0c             	sub    esp,0xc
c00124ae:	6a 01                	push   0x1
c00124b0:	e8 4c f4 ff ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c00124b5:	83 c4 10             	add    esp,0x10
c00124b8:	89 c2                	mov    edx,eax
c00124ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124be:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124c1:	83 ec 0c             	sub    esp,0xc
c00124c4:	6a 03                	push   0x3
c00124c6:	6a 01                	push   0x1
c00124c8:	52                   	push   edx
c00124c9:	50                   	push   eax
c00124ca:	53                   	push   ebx
c00124cb:	e8 f0 fd ff ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124d0:	83 c4 20             	add    esp,0x20
c00124d3:	89 c2                	mov    edx,eax
c00124d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124dc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124e4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00124ec:	7f 1c                	jg     c001250a <VAS::VAS(bool)+0x96>
c00124ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124f9:	c1 e2 02             	shl    edx,0x2
c00124fc:	01 d0                	add    eax,edx
c00124fe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012504:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012508:	eb da                	jmp    c00124e4 <VAS::VAS(bool)+0x70>
c001250a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012512:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001251a:	7f 7a                	jg     c0012596 <VAS::VAS(bool)+0x122>
c001251c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012520:	2d 00 02 00 00       	sub    eax,0x200
c0012525:	c1 e0 0c             	shl    eax,0xc
c0012528:	83 c8 03             	or     eax,0x3
c001252b:	89 c2                	mov    edx,eax
c001252d:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012532:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012538:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001253e:	83 e0 10             	and    eax,0x10
c0012541:	84 c0                	test   al,al
c0012543:	74 07                	je     c001254c <VAS::VAS(bool)+0xd8>
c0012545:	b8 00 01 00 00       	mov    eax,0x100
c001254a:	eb 05                	jmp    c0012551 <VAS::VAS(bool)+0xdd>
c001254c:	b8 00 00 00 00       	mov    eax,0x0
c0012551:	09 d0                	or     eax,edx
c0012553:	89 c1                	mov    ecx,eax
c0012555:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012559:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001255c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012560:	c1 e2 02             	shl    edx,0x2
c0012563:	01 d0                	add    eax,edx
c0012565:	89 ca                	mov    edx,ecx
c0012567:	89 10                	mov    DWORD PTR [eax],edx
c0012569:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001256d:	2d 40 03 00 00       	sub    eax,0x340
c0012572:	83 f8 7f             	cmp    eax,0x7f
c0012575:	77 16                	ja     c001258d <VAS::VAS(bool)+0x119>
c0012577:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001257b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001257e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012582:	c1 e2 02             	shl    edx,0x2
c0012585:	01 d0                	add    eax,edx
c0012587:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001258d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012591:	e9 7c ff ff ff       	jmp    c0012512 <VAS::VAS(bool)+0x9e>
c0012596:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001259b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125a1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125a7:	83 e0 10             	and    eax,0x10
c00125aa:	84 c0                	test   al,al
c00125ac:	74 07                	je     c00125b5 <VAS::VAS(bool)+0x141>
c00125ae:	b8 03 41 00 00       	mov    eax,0x4103
c00125b3:	eb 05                	jmp    c00125ba <VAS::VAS(bool)+0x146>
c00125b5:	b8 03 40 00 00       	mov    eax,0x4003
c00125ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125be:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125c1:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125c7:	89 02                	mov    DWORD PTR [edx],eax
c00125c9:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00125ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00125da:	83 ec 08             	sub    esp,0x8
c00125dd:	50                   	push   eax
c00125de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125e2:	e8 bd fc ff ff       	call   c00122a4 <VAS::setCPUSpecific(unsigned long)>
c00125e7:	83 c4 10             	add    esp,0x10
c00125ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ee:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125f1:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00125f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125fc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012602:	83 e0 10             	and    eax,0x10
c0012605:	84 c0                	test   al,al
c0012607:	74 07                	je     c0012610 <VAS::VAS(bool)+0x19c>
c0012609:	b8 00 01 00 00       	mov    eax,0x100
c001260e:	eb 05                	jmp    c0012615 <VAS::VAS(bool)+0x1a1>
c0012610:	b8 00 00 00 00       	mov    eax,0x0
c0012615:	09 c2                	or     edx,eax
c0012617:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001261b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001261e:	05 fc 0f 00 00       	add    eax,0xffc
c0012623:	83 ca 03             	or     edx,0x3
c0012626:	89 10                	mov    DWORD PTR [eax],edx
c0012628:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001262d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012633:	83 ec 0c             	sub    esp,0xc
c0012636:	50                   	push   eax
c0012637:	e8 c8 19 00 00       	call   c0014004 <Device::getName()>
c001263c:	83 c4 10             	add    esp,0x10
c001263f:	83 ec 08             	sub    esp,0x8
c0012642:	68 67 9f 02 c0       	push   0xc0029f67
c0012647:	50                   	push   eax
c0012648:	e8 65 e1 fe ff       	call   c00007b2 <strcmp>
c001264d:	83 c4 10             	add    esp,0x10
c0012650:	85 c0                	test   eax,eax
c0012652:	0f 94 c0             	sete   al
c0012655:	84 c0                	test   al,al
c0012657:	74 70                	je     c00126c9 <VAS::VAS(bool)+0x255>
c0012659:	e8 45 ae 00 00       	call   c001d4a3 <disableIRQs()>
c001265e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012663:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012669:	05 7c 09 00 00       	add    eax,0x97c
c001266e:	83 ec 0c             	sub    esp,0xc
c0012671:	50                   	push   eax
c0012672:	e8 27 ca ff ff       	call   c000f09e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012677:	83 c4 10             	add    esp,0x10
c001267a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001267f:	89 c3                	mov    ebx,eax
c0012681:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0012686:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001268c:	05 7c 09 00 00       	add    eax,0x97c
c0012691:	83 ec 0c             	sub    esp,0xc
c0012694:	50                   	push   eax
c0012695:	e8 04 ca ff ff       	call   c000f09e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001269a:	83 c4 10             	add    esp,0x10
c001269d:	83 ec 08             	sub    esp,0x8
c00126a0:	50                   	push   eax
c00126a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126a5:	e8 9c f5 ff ff       	call   c0011c46 <VAS::getPageTableEntry(unsigned long)>
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00126af:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126b4:	6a 11                	push   0x11
c00126b6:	53                   	push   ebx
c00126b7:	50                   	push   eax
c00126b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126bc:	e8 0b f9 ff ff       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c1:	83 c4 10             	add    esp,0x10
c00126c4:	e8 e8 ad 00 00       	call   c001d4b1 <enableIRQs()>
c00126c9:	90                   	nop
c00126ca:	83 c4 28             	add    esp,0x28
c00126cd:	5b                   	pop    ebx
c00126ce:	c3                   	ret    

c00126cf <mapVASFirstTime>:
c00126cf:	55                   	push   ebp
c00126d0:	57                   	push   edi
c00126d1:	56                   	push   esi
c00126d2:	53                   	push   ebx
c00126d3:	83 ec 0c             	sub    esp,0xc
c00126d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126de:	4a                   	dec    edx
c00126df:	0f 84 8e 00 00 00    	je     c0012773 <mapVASFirstTime+0xa4>
c00126e5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126e8:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126f0:	c1 e5 15             	shl    ebp,0x15
c00126f3:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126f8:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126fe:	29 eb                	sub    ebx,ebp
c0012700:	29 ee                	sub    esi,ebp
c0012702:	e8 b8 d5 ff ff       	call   c000fcbf <Phys::allocatePage()>
c0012707:	83 ec 0c             	sub    esp,0xc
c001270a:	68 03 04 00 00       	push   0x403
c001270f:	6a 01                	push   0x1
c0012711:	53                   	push   ebx
c0012712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012718:	50                   	push   eax
c0012719:	57                   	push   edi
c001271a:	e8 a1 fb ff ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001271f:	83 c4 20             	add    esp,0x20
c0012722:	39 f3                	cmp    ebx,esi
c0012724:	75 dc                	jne    c0012702 <mapVASFirstTime+0x33>
c0012726:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001272b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012730:	29 ee                	sub    esi,ebp
c0012732:	29 e8                	sub    eax,ebp
c0012734:	89 c5                	mov    ebp,eax
c0012736:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001273a:	19 db                	sbb    ebx,ebx
c001273c:	e8 7e d5 ff ff       	call   c000fcbf <Phys::allocatePage()>
c0012741:	83 e3 04             	and    ebx,0x4
c0012744:	83 ec 0c             	sub    esp,0xc
c0012747:	81 c3 03 04 00 00    	add    ebx,0x403
c001274d:	53                   	push   ebx
c001274e:	6a 01                	push   0x1
c0012750:	56                   	push   esi
c0012751:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012757:	50                   	push   eax
c0012758:	57                   	push   edi
c0012759:	e8 62 fb ff ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001275e:	83 c4 20             	add    esp,0x20
c0012761:	39 f5                	cmp    ebp,esi
c0012763:	75 d1                	jne    c0012736 <mapVASFirstTime+0x67>
c0012765:	0f 20 d8             	mov    eax,cr3
c0012768:	0f 22 d8             	mov    cr3,eax
c001276b:	83 c4 0c             	add    esp,0xc
c001276e:	5b                   	pop    ebx
c001276f:	5e                   	pop    esi
c0012770:	5f                   	pop    edi
c0012771:	5d                   	pop    ebp
c0012772:	c3                   	ret    
c0012773:	83 ec 0c             	sub    esp,0xc
c0012776:	68 75 9f 02 c0       	push   0xc0029f75
c001277b:	e8 71 01 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0012780:	83 c4 10             	add    esp,0x10
c0012783:	83 c4 0c             	add    esp,0xc
c0012786:	5b                   	pop    ebx
c0012787:	5e                   	pop    esi
c0012788:	5f                   	pop    edi
c0012789:	5d                   	pop    ebp
c001278a:	c3                   	ret    

c001278b <__cxa_atexit>:
c001278b:	31 c0                	xor    eax,eax
c001278d:	c3                   	ret    

c001278e <__cxa_finalize>:
c001278e:	c3                   	ret    

c001278f <__stack_chk_fail>:
c001278f:	55                   	push   ebp
c0012790:	89 e5                	mov    ebp,esp
c0012792:	83 ec 14             	sub    esp,0x14
c0012795:	68 8e 9f 02 c0       	push   0xc0029f8e
c001279a:	e8 52 01 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001279f:	58                   	pop    eax
c00127a0:	5a                   	pop    edx
c00127a1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00127a4:	68 de 9f 02 c0       	push   0xc0029fde
c00127a9:	e8 43 01 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00127ae:	59                   	pop    ecx
c00127af:	58                   	pop    eax
c00127b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127b3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127b6:	68 de 9f 02 c0       	push   0xc0029fde
c00127bb:	e8 31 01 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00127c0:	5a                   	pop    edx
c00127c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127c4:	59                   	pop    ecx
c00127c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127ca:	68 de 9f 02 c0       	push   0xc0029fde
c00127cf:	e8 1d 01 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00127d4:	5a                   	pop    edx
c00127d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127d8:	59                   	pop    ecx
c00127d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00127db:	8b 00                	mov    eax,DWORD PTR [eax]
c00127dd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127e0:	68 de 9f 02 c0       	push   0xc0029fde
c00127e5:	e8 07 01 00 00       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00127ea:	c7 04 24 e6 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fe6
c00127f1:	e8 6f 76 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c00127f6:	83 c4 10             	add    esp,0x10
c00127f9:	c9                   	leave  
c00127fa:	c3                   	ret    

c00127fb <__cxa_pure_virtual>:
c00127fb:	83 ec 18             	sub    esp,0x18
c00127fe:	68 fe 9f 02 c0       	push   0xc0029ffe
c0012803:	e8 5d 76 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0012808:	83 c4 1c             	add    esp,0x1c
c001280b:	c3                   	ret    

c001280c <operator new[](unsigned long)>:
c001280c:	e9 11 ce ff ff       	jmp    c000f622 <malloc>

c0012811 <operator delete(void*, unsigned long)>:
c0012811:	e9 2c ce ff ff       	jmp    c000f642 <rfree>

c0012816 <operator delete[](void*)>:
c0012816:	e9 27 ce ff ff       	jmp    c000f642 <rfree>

c001281b <operator delete[](void*, unsigned long)>:
c001281b:	e9 22 ce ff ff       	jmp    c000f642 <rfree>

c0012820 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012820:	57                   	push   edi
c0012821:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012826:	56                   	push   esi
c0012827:	be 14 a0 02 c0       	mov    esi,0xc002a014
c001282c:	53                   	push   ebx
c001282d:	83 ec 40             	sub    esp,0x40
c0012830:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012834:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012838:	fc                   	cld    
c0012839:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001283b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001283f:	83 f9 3e             	cmp    ecx,0x3e
c0012842:	7e 05                	jle    c0012849 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012844:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012849:	89 df                	mov    edi,ebx
c001284b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001284f:	eb 02                	jmp    c0012853 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012851:	89 c7                	mov    edi,eax
c0012853:	31 d2                	xor    edx,edx
c0012855:	46                   	inc    esi
c0012856:	89 f8                	mov    eax,edi
c0012858:	f7 f1                	div    ecx
c001285a:	39 cf                	cmp    edi,ecx
c001285c:	73 f3                	jae    c0012851 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c001285e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012861:	eb 02                	jmp    c0012865 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012863:	89 c3                	mov    ebx,eax
c0012865:	31 d2                	xor    edx,edx
c0012867:	4e                   	dec    esi
c0012868:	89 d8                	mov    eax,ebx
c001286a:	f7 f1                	div    ecx
c001286c:	39 cb                	cmp    ebx,ecx
c001286e:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012872:	88 16                	mov    BYTE PTR [esi],dl
c0012874:	73 ed                	jae    c0012863 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012876:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001287a:	83 c4 40             	add    esp,0x40
c001287d:	5b                   	pop    ebx
c001287e:	5e                   	pop    esi
c001287f:	5f                   	pop    edi
c0012880:	c3                   	ret    

c0012881 <Dbg::logc(char)>:
c0012881:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012885:	ba fd 03 00 00       	mov    edx,0x3fd
c001288a:	ec                   	in     al,dx
c001288b:	a8 20                	test   al,0x20
c001288d:	74 fb                	je     c001288a <Dbg::logc(char)+0x9>
c001288f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012894:	88 c8                	mov    al,cl
c0012896:	ee                   	out    dx,al
c0012897:	c3                   	ret    

c0012898 <Dbg::logs(char*)>:
c0012898:	53                   	push   ebx
c0012899:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001289d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128a0:	84 c0                	test   al,al
c00128a2:	74 0f                	je     c00128b3 <Dbg::logs(char*)+0x1b>
c00128a4:	50                   	push   eax
c00128a5:	43                   	inc    ebx
c00128a6:	e8 d6 ff ff ff       	call   c0012881 <Dbg::logc(char)>
c00128ab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128ae:	5a                   	pop    edx
c00128af:	84 c0                	test   al,al
c00128b1:	75 f1                	jne    c00128a4 <Dbg::logs(char*)+0xc>
c00128b3:	5b                   	pop    ebx
c00128b4:	c3                   	ret    

c00128b5 <Dbg::logWriteInt(unsigned int)>:
c00128b5:	83 ec 10             	sub    esp,0x10
c00128b8:	6a 0a                	push   0xa
c00128ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128be:	50                   	push   eax
c00128bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c3:	e8 58 ff ff ff       	call   c0012820 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128c8:	50                   	push   eax
c00128c9:	e8 ca ff ff ff       	call   c0012898 <Dbg::logs(char*)>
c00128ce:	83 c4 20             	add    esp,0x20
c00128d1:	c3                   	ret    

c00128d2 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128d2:	83 ec 10             	sub    esp,0x10
c00128d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128dd:	50                   	push   eax
c00128de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e2:	e8 39 ff ff ff       	call   c0012820 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128e7:	50                   	push   eax
c00128e8:	e8 ab ff ff ff       	call   c0012898 <Dbg::logs(char*)>
c00128ed:	83 c4 20             	add    esp,0x20
c00128f0:	c3                   	ret    

c00128f1 <Dbg::kprintf(char const*, ...)>:
c00128f1:	55                   	push   ebp
c00128f2:	57                   	push   edi
c00128f3:	56                   	push   esi
c00128f4:	53                   	push   ebx
c00128f5:	83 ec 0c             	sub    esp,0xc
c00128f8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128fc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012900:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012904:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012907:	84 c0                	test   al,al
c0012909:	74 4a                	je     c0012955 <Dbg::kprintf(char const*, ...)+0x64>
c001290b:	31 db                	xor    ebx,ebx
c001290d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012910:	3c 25                	cmp    al,0x25
c0012912:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012915:	0f 85 e4 00 00 00    	jne    c00129ff <Dbg::kprintf(char const*, ...)+0x10e>
c001291b:	83 c3 02             	add    ebx,0x2
c001291e:	8a 07                	mov    al,BYTE PTR [edi]
c0012920:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012923:	83 e8 25             	sub    eax,0x25
c0012926:	3c 53                	cmp    al,0x53
c0012928:	0f 87 ba 00 00 00    	ja     c00129e8 <Dbg::kprintf(char const*, ...)+0xf7>
c001292e:	0f b6 c0             	movzx  eax,al
c0012931:	ff 24 85 54 a0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5fac]
c0012938:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001293c:	89 c8                	mov    eax,ecx
c001293e:	83 c1 04             	add    ecx,0x4
c0012941:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012945:	ff 30                	push   DWORD PTR [eax]
c0012947:	e8 4c ff ff ff       	call   c0012898 <Dbg::logs(char*)>
c001294c:	58                   	pop    eax
c001294d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012951:	84 c0                	test   al,al
c0012953:	75 b8                	jne    c001290d <Dbg::kprintf(char const*, ...)+0x1c>
c0012955:	83 c4 0c             	add    esp,0xc
c0012958:	5b                   	pop    ebx
c0012959:	5e                   	pop    esi
c001295a:	5f                   	pop    edi
c001295b:	5d                   	pop    ebp
c001295c:	c3                   	ret    
c001295d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012961:	89 d0                	mov    eax,edx
c0012963:	83 c2 04             	add    edx,0x4
c0012966:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001296a:	ff 30                	push   DWORD PTR [eax]
c001296c:	e8 44 ff ff ff       	call   c00128b5 <Dbg::logWriteInt(unsigned int)>
c0012971:	58                   	pop    eax
c0012972:	eb d9                	jmp    c001294d <Dbg::kprintf(char const*, ...)+0x5c>
c0012974:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012978:	89 d0                	mov    eax,edx
c001297a:	83 c2 04             	add    edx,0x4
c001297d:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012980:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012984:	50                   	push   eax
c0012985:	e8 f7 fe ff ff       	call   c0012881 <Dbg::logc(char)>
c001298a:	58                   	pop    eax
c001298b:	eb c0                	jmp    c001294d <Dbg::kprintf(char const*, ...)+0x5c>
c001298d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012991:	89 c8                	mov    eax,ecx
c0012993:	83 c1 04             	add    ecx,0x4
c0012996:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001299a:	ff 30                	push   DWORD PTR [eax]
c001299c:	e8 14 ff ff ff       	call   c00128b5 <Dbg::logWriteInt(unsigned int)>
c00129a1:	5f                   	pop    edi
c00129a2:	eb a9                	jmp    c001294d <Dbg::kprintf(char const*, ...)+0x5c>
c00129a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129a8:	89 c8                	mov    eax,ecx
c00129aa:	83 c1 04             	add    ecx,0x4
c00129ad:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129b1:	6a 10                	push   0x10
c00129b3:	ff 30                	push   DWORD PTR [eax]
c00129b5:	e8 18 ff ff ff       	call   c00128d2 <Dbg::logWriteIntBase(unsigned int, int)>
c00129ba:	59                   	pop    ecx
c00129bb:	5f                   	pop    edi
c00129bc:	eb 8f                	jmp    c001294d <Dbg::kprintf(char const*, ...)+0x5c>
c00129be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129c2:	89 d0                	mov    eax,edx
c00129c4:	83 c2 08             	add    edx,0x8
c00129c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129cb:	6a 10                	push   0x10
c00129cd:	ff 30                	push   DWORD PTR [eax]
c00129cf:	e8 fe fe ff ff       	call   c00128d2 <Dbg::logWriteIntBase(unsigned int, int)>
c00129d4:	58                   	pop    eax
c00129d5:	5a                   	pop    edx
c00129d6:	e9 72 ff ff ff       	jmp    c001294d <Dbg::kprintf(char const*, ...)+0x5c>
c00129db:	6a 25                	push   0x25
c00129dd:	e8 9f fe ff ff       	call   c0012881 <Dbg::logc(char)>
c00129e2:	58                   	pop    eax
c00129e3:	e9 65 ff ff ff       	jmp    c001294d <Dbg::kprintf(char const*, ...)+0x5c>
c00129e8:	6a 25                	push   0x25
c00129ea:	e8 92 fe ff ff       	call   c0012881 <Dbg::logc(char)>
c00129ef:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129f2:	50                   	push   eax
c00129f3:	e8 89 fe ff ff       	call   c0012881 <Dbg::logc(char)>
c00129f8:	5a                   	pop    edx
c00129f9:	59                   	pop    ecx
c00129fa:	e9 4e ff ff ff       	jmp    c001294d <Dbg::kprintf(char const*, ...)+0x5c>
c00129ff:	50                   	push   eax
c0012a00:	89 eb                	mov    ebx,ebp
c0012a02:	e8 7a fe ff ff       	call   c0012881 <Dbg::logc(char)>
c0012a07:	89 fd                	mov    ebp,edi
c0012a09:	58                   	pop    eax
c0012a0a:	e9 3e ff ff ff       	jmp    c001294d <Dbg::kprintf(char const*, ...)+0x5c>
c0012a0f:	90                   	nop

c0012a10 <File::read(unsigned long long, void*, int*)>:
c0012a10:	53                   	push   ebx
c0012a11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a19:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a20:	3c 19                	cmp    al,0x19
c0012a22:	77 35                	ja     c0012a59 <File::read(unsigned long long, void*, int*)+0x49>
c0012a24:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0012a2b:	85 c0                	test   eax,eax
c0012a2d:	74 2a                	je     c0012a59 <File::read(unsigned long long, void*, int*)+0x49>
c0012a2f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a35:	85 c0                	test   eax,eax
c0012a37:	74 20                	je     c0012a59 <File::read(unsigned long long, void*, int*)+0x49>
c0012a39:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a3d:	74 21                	je     c0012a60 <File::read(unsigned long long, void*, int*)+0x50>
c0012a3f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a41:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a45:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a53:	5b                   	pop    ebx
c0012a54:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a57:	ff e0                	jmp    eax
c0012a59:	b8 0b 00 00 00       	mov    eax,0xb
c0012a5e:	eb 05                	jmp    c0012a65 <File::read(unsigned long long, void*, int*)+0x55>
c0012a60:	b8 05 00 00 00       	mov    eax,0x5
c0012a65:	5b                   	pop    ebx
c0012a66:	c3                   	ret    
c0012a67:	90                   	nop

c0012a68 <File::write(unsigned long long, void*, int*)>:
c0012a68:	53                   	push   ebx
c0012a69:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a6d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a71:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a78:	3c 19                	cmp    al,0x19
c0012a7a:	77 35                	ja     c0012ab1 <File::write(unsigned long long, void*, int*)+0x49>
c0012a7c:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0012a83:	85 c0                	test   eax,eax
c0012a85:	74 2a                	je     c0012ab1 <File::write(unsigned long long, void*, int*)+0x49>
c0012a87:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a8d:	85 c0                	test   eax,eax
c0012a8f:	74 20                	je     c0012ab1 <File::write(unsigned long long, void*, int*)+0x49>
c0012a91:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a95:	74 21                	je     c0012ab8 <File::write(unsigned long long, void*, int*)+0x50>
c0012a97:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a99:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a9d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012aa3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012aa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012aab:	5b                   	pop    ebx
c0012aac:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012aaf:	ff e0                	jmp    eax
c0012ab1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ab6:	eb 05                	jmp    c0012abd <File::write(unsigned long long, void*, int*)+0x55>
c0012ab8:	b8 05 00 00 00       	mov    eax,0x5
c0012abd:	5b                   	pop    ebx
c0012abe:	c3                   	ret    
c0012abf:	90                   	nop

c0012ac0 <Directory::read(unsigned long long, void*, int*)>:
c0012ac0:	53                   	push   ebx
c0012ac1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ac5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ac9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ad0:	3c 19                	cmp    al,0x19
c0012ad2:	77 35                	ja     c0012b09 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ad4:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0012adb:	85 c0                	test   eax,eax
c0012add:	74 2a                	je     c0012b09 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012adf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ae5:	85 c0                	test   eax,eax
c0012ae7:	74 20                	je     c0012b09 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ae9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012aed:	74 21                	je     c0012b10 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012aef:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012af1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012af5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012aff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b03:	5b                   	pop    ebx
c0012b04:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b07:	ff e0                	jmp    eax
c0012b09:	b8 0b 00 00 00       	mov    eax,0xb
c0012b0e:	eb 05                	jmp    c0012b15 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b10:	b8 05 00 00 00       	mov    eax,0x5
c0012b15:	5b                   	pop    ebx
c0012b16:	c3                   	ret    
c0012b17:	90                   	nop

c0012b18 <Directory::write(unsigned long long, void*, int*)>:
c0012b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b1c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b23:	b8 0b 00 00 00       	mov    eax,0xb
c0012b28:	80 fa 19             	cmp    dl,0x19
c0012b2b:	77 18                	ja     c0012b45 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b2d:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012b34:	85 d2                	test   edx,edx
c0012b36:	74 0d                	je     c0012b45 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b38:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b3f:	19 c0                	sbb    eax,eax
c0012b41:	83 e0 0a             	and    eax,0xa
c0012b44:	40                   	inc    eax
c0012b45:	c3                   	ret    

c0012b46 <File::isAtty()>:
c0012b46:	31 c0                	xor    eax,eax
c0012b48:	c3                   	ret    
c0012b49:	90                   	nop

c0012b4a <Directory::isAtty()>:
c0012b4a:	31 c0                	xor    eax,eax
c0012b4c:	c3                   	ret    
c0012b4d:	90                   	nop

c0012b4e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b4e:	b8 0a 00 00 00       	mov    eax,0xa
c0012b53:	c3                   	ret    

c0012b54 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b54:	b8 0a 00 00 00       	mov    eax,0xa
c0012b59:	c3                   	ret    

c0012b5a <File::~File()>:
c0012b5a:	83 ec 0c             	sub    esp,0xc
c0012b5d:	ba 10 a2 02 c0       	mov    edx,0xc002a210
c0012b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b66:	89 10                	mov    DWORD PTR [eax],edx
c0012b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b6c:	83 ec 0c             	sub    esp,0xc
c0012b6f:	50                   	push   eax
c0012b70:	e8 2b eb ff ff       	call   c00116a0 <UnixFile::~UnixFile()>
c0012b75:	83 c4 10             	add    esp,0x10
c0012b78:	90                   	nop
c0012b79:	83 c4 0c             	add    esp,0xc
c0012b7c:	c3                   	ret    
c0012b7d:	90                   	nop

c0012b7e <File::~File()>:
c0012b7e:	83 ec 0c             	sub    esp,0xc
c0012b81:	83 ec 0c             	sub    esp,0xc
c0012b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b88:	e8 cd ff ff ff       	call   c0012b5a <File::~File()>
c0012b8d:	83 c4 10             	add    esp,0x10
c0012b90:	83 ec 08             	sub    esp,0x8
c0012b93:	68 14 01 00 00       	push   0x114
c0012b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b9c:	e8 70 fc ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	83 c4 0c             	add    esp,0xc
c0012ba7:	c3                   	ret    

c0012ba8 <Directory::~Directory()>:
c0012ba8:	83 ec 0c             	sub    esp,0xc
c0012bab:	ba 2c a2 02 c0       	mov    edx,0xc002a22c
c0012bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb4:	89 10                	mov    DWORD PTR [eax],edx
c0012bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bba:	83 ec 0c             	sub    esp,0xc
c0012bbd:	50                   	push   eax
c0012bbe:	e8 dd ea ff ff       	call   c00116a0 <UnixFile::~UnixFile()>
c0012bc3:	83 c4 10             	add    esp,0x10
c0012bc6:	90                   	nop
c0012bc7:	83 c4 0c             	add    esp,0xc
c0012bca:	c3                   	ret    
c0012bcb:	90                   	nop

c0012bcc <Directory::~Directory()>:
c0012bcc:	83 ec 0c             	sub    esp,0xc
c0012bcf:	83 ec 0c             	sub    esp,0xc
c0012bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd6:	e8 cd ff ff ff       	call   c0012ba8 <Directory::~Directory()>
c0012bdb:	83 c4 10             	add    esp,0x10
c0012bde:	83 ec 08             	sub    esp,0x8
c0012be1:	68 14 01 00 00       	push   0x114
c0012be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bea:	e8 22 fc ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	83 c4 0c             	add    esp,0xc
c0012bf5:	c3                   	ret    

c0012bf6 <Filesystem::Filesystem()>:
c0012bf6:	ba ac a1 02 c0       	mov    edx,0xc002a1ac
c0012bfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bff:	89 10                	mov    DWORD PTR [eax],edx
c0012c01:	8b 15 48 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc48
c0012c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c12:	a3 48 dc 02 c0       	mov    ds:0xc002dc48,eax
c0012c17:	90                   	nop
c0012c18:	c3                   	ret    
c0012c19:	90                   	nop

c0012c1a <Filesystem::~Filesystem()>:
c0012c1a:	ba ac a1 02 c0       	mov    edx,0xc002a1ac
c0012c1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c23:	89 10                	mov    DWORD PTR [eax],edx
c0012c25:	90                   	nop
c0012c26:	c3                   	ret    
c0012c27:	90                   	nop

c0012c28 <Filesystem::~Filesystem()>:
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c2f:	e8 e6 ff ff ff       	call   c0012c1a <Filesystem::~Filesystem()>
c0012c34:	83 c4 04             	add    esp,0x4
c0012c37:	83 ec 08             	sub    esp,0x8
c0012c3a:	6a 08                	push   0x8
c0012c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c40:	e8 cc fb ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0012c45:	83 c4 10             	add    esp,0x10
c0012c48:	83 c4 0c             	add    esp,0xc
c0012c4b:	c3                   	ret    

c0012c4c <Fs::getcwd(Process*, char*, int)>:
c0012c4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c50:	31 c0                	xor    eax,eax
c0012c52:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c55:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c59:	7d 15                	jge    c0012c70 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c5b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c5f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c66:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c69:	84 c9                	test   cl,cl
c0012c6b:	74 06                	je     c0012c73 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c6d:	40                   	inc    eax
c0012c6e:	eb e2                	jmp    c0012c52 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c70:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c73:	31 c0                	xor    eax,eax
c0012c75:	c3                   	ret    

c0012c76 <Fs::initVFS()>:
c0012c76:	83 ec 18             	sub    esp,0x18
c0012c79:	6a 08                	push   0x8
c0012c7b:	e8 a2 c9 ff ff       	call   c000f622 <malloc>
c0012c80:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c83:	e8 ac d9 00 00       	call   c0020634 <FAT::FAT()>
c0012c88:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c8f:	e8 8e c9 ff ff       	call   c000f622 <malloc>
c0012c94:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c97:	e8 f0 eb 00 00       	call   c002188c <ISO9660::ISO9660()>
c0012c9c:	83 c4 1c             	add    esp,0x1c
c0012c9f:	c3                   	ret    

c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ca0:	55                   	push   ebp
c0012ca1:	57                   	push   edi
c0012ca2:	56                   	push   esi
c0012ca3:	53                   	push   ebx
c0012ca4:	81 ec 10 04 00 00    	sub    esp,0x410
c0012caa:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012cb1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cb8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012cbf:	68 00 04 00 00       	push   0x400
c0012cc4:	6a 00                	push   0x0
c0012cc6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cca:	56                   	push   esi
c0012ccb:	e8 f2 d9 fe ff       	call   c00006c2 <memset>
c0012cd0:	83 c4 10             	add    esp,0x10
c0012cd3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cd7:	75 0b                	jne    c0012ce4 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cd9:	50                   	push   eax
c0012cda:	50                   	push   eax
c0012cdb:	57                   	push   edi
c0012cdc:	56                   	push   esi
c0012cdd:	e8 7f da fe ff       	call   c0000761 <strcpy>
c0012ce2:	eb 41                	jmp    c0012d25 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012ce4:	8a 07                	mov    al,BYTE PTR [edi]
c0012ce6:	3c 5c                	cmp    al,0x5c
c0012ce8:	74 04                	je     c0012cee <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cea:	3c 2f                	cmp    al,0x2f
c0012cec:	75 18                	jne    c0012d06 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cee:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cf1:	3c 60                	cmp    al,0x60
c0012cf3:	7e 03                	jle    c0012cf8 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cf5:	83 e8 20             	sub    eax,0x20
c0012cf8:	88 04 24             	mov    BYTE PTR [esp],al
c0012cfb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d02:	50                   	push   eax
c0012d03:	50                   	push   eax
c0012d04:	eb 18                	jmp    c0012d1e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d06:	50                   	push   eax
c0012d07:	50                   	push   eax
c0012d08:	55                   	push   ebp
c0012d09:	56                   	push   esi
c0012d0a:	e8 52 da fe ff       	call   c0000761 <strcpy>
c0012d0f:	5a                   	pop    edx
c0012d10:	59                   	pop    ecx
c0012d11:	68 2f b8 02 c0       	push   0xc002b82f
c0012d16:	56                   	push   esi
c0012d17:	e8 fc da fe ff       	call   c0000818 <strcat>
c0012d1c:	5d                   	pop    ebp
c0012d1d:	58                   	pop    eax
c0012d1e:	57                   	push   edi
c0012d1f:	56                   	push   esi
c0012d20:	e8 f3 da fe ff       	call   c0000818 <strcat>
c0012d25:	83 c4 10             	add    esp,0x10
c0012d28:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d2b:	3c 60                	cmp    al,0x60
c0012d2d:	7e 03                	jle    c0012d32 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d2f:	83 e8 20             	sub    eax,0x20
c0012d32:	88 04 24             	mov    BYTE PTR [esp],al
c0012d35:	88 03                	mov    BYTE PTR [ebx],al
c0012d37:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d3e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d44:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d48:	bf 03 00 00 00       	mov    edi,0x3
c0012d4d:	b8 03 00 00 00       	mov    eax,0x3
c0012d52:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d55:	84 d2                	test   dl,dl
c0012d57:	0f 84 91 00 00 00    	je     c0012dee <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d5d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d60:	80 fa 5c             	cmp    dl,0x5c
c0012d63:	74 05                	je     c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d65:	80 fa 2f             	cmp    dl,0x2f
c0012d68:	75 12                	jne    c0012d7c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d6a:	89 c5                	mov    ebp,eax
c0012d6c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d71:	74 09                	je     c0012d7c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d73:	40                   	inc    eax
c0012d74:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d78:	89 cf                	mov    edi,ecx
c0012d7a:	eb d6                	jmp    c0012d52 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d7c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d81:	75 5b                	jne    c0012dde <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d83:	80 fa 2e             	cmp    dl,0x2e
c0012d86:	75 56                	jne    c0012dde <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d88:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d8c:	74 19                	je     c0012da7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d8e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d93:	74 53                	je     c0012de8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d95:	89 f9                	mov    ecx,edi
c0012d97:	41                   	inc    ecx
c0012d98:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d9b:	80 fa 2f             	cmp    dl,0x2f
c0012d9e:	74 f7                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da0:	80 fa 5c             	cmp    dl,0x5c
c0012da3:	74 f2                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012da5:	eb d1                	jmp    c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012da7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012dac:	74 3a                	je     c0012de8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012dae:	83 f8 03             	cmp    eax,0x3
c0012db1:	74 c5                	je     c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012db3:	41                   	inc    ecx
c0012db4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012db7:	80 fa 2f             	cmp    dl,0x2f
c0012dba:	74 f7                	je     c0012db3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dbc:	80 fa 5c             	cmp    dl,0x5c
c0012dbf:	74 f2                	je     c0012db3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dc1:	48                   	dec    eax
c0012dc2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dc6:	75 06                	jne    c0012dce <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dc8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dcc:	eb f3                	jmp    c0012dc1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dd2:	74 07                	je     c0012ddb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012dd4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dd8:	48                   	dec    eax
c0012dd9:	eb f3                	jmp    c0012dce <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ddb:	40                   	inc    eax
c0012ddc:	eb 9a                	jmp    c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dde:	80 fa 2f             	cmp    dl,0x2f
c0012de1:	74 95                	je     c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de3:	80 fa 5c             	cmp    dl,0x5c
c0012de6:	74 90                	je     c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012de8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012deb:	40                   	inc    eax
c0012dec:	eb 8a                	jmp    c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dee:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012df2:	83 ec 0c             	sub    esp,0xc
c0012df5:	53                   	push   ebx
c0012df6:	e8 e4 d8 fe ff       	call   c00006df <strlen>
c0012dfb:	83 c4 10             	add    esp,0x10
c0012dfe:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012e03:	75 26                	jne    c0012e2b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012e05:	83 ec 0c             	sub    esp,0xc
c0012e08:	53                   	push   ebx
c0012e09:	e8 d1 d8 fe ff       	call   c00006df <strlen>
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e16:	74 26                	je     c0012e3e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e18:	83 ec 0c             	sub    esp,0xc
c0012e1b:	53                   	push   ebx
c0012e1c:	e8 be d8 fe ff       	call   c00006df <strlen>
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e29:	eb c7                	jmp    c0012df2 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e2b:	83 ec 0c             	sub    esp,0xc
c0012e2e:	53                   	push   ebx
c0012e2f:	e8 ab d8 fe ff       	call   c00006df <strlen>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e3c:	74 c7                	je     c0012e05 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e3e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e44:	5b                   	pop    ebx
c0012e45:	5e                   	pop    esi
c0012e46:	5f                   	pop    edi
c0012e47:	5d                   	pop    ebp
c0012e48:	c3                   	ret    
c0012e49:	90                   	nop

c0012e4a <File::File(char const*, Process*)>:
c0012e4a:	83 ec 0c             	sub    esp,0xc
c0012e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e51:	83 ec 08             	sub    esp,0x8
c0012e54:	6a 00                	push   0x0
c0012e56:	50                   	push   eax
c0012e57:	e8 62 e6 ff ff       	call   c00114be <UnixFile::UnixFile(int)>
c0012e5c:	83 c4 10             	add    esp,0x10
c0012e5f:	ba 10 a2 02 c0       	mov    edx,0xc002a210
c0012e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e68:	89 10                	mov    DWORD PTR [eax],edx
c0012e6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e6e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e78:	83 c0 0d             	add    eax,0xd
c0012e7b:	83 ec 04             	sub    esp,0x4
c0012e7e:	52                   	push   edx
c0012e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e83:	50                   	push   eax
c0012e84:	e8 17 fe ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e89:	83 c4 10             	add    esp,0x10
c0012e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e90:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e93:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ea8:	90                   	nop
c0012ea9:	83 c4 0c             	add    esp,0xc
c0012eac:	c3                   	ret    
c0012ead:	90                   	nop

c0012eae <File::open(FileOpenMode)>:
c0012eae:	53                   	push   ebx
c0012eaf:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb4:	83 ec 08             	sub    esp,0x8
c0012eb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ebb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ec2:	80 fa 19             	cmp    dl,0x19
c0012ec5:	77 40                	ja     c0012f07 <File::open(FileOpenMode)+0x59>
c0012ec7:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012ece:	85 d2                	test   edx,edx
c0012ed0:	74 35                	je     c0012f07 <File::open(FileOpenMode)+0x59>
c0012ed2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ed8:	85 d2                	test   edx,edx
c0012eda:	74 2b                	je     c0012f07 <File::open(FileOpenMode)+0x59>
c0012edc:	b8 06 00 00 00       	mov    eax,0x6
c0012ee1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ee5:	75 20                	jne    c0012f07 <File::open(FileOpenMode)+0x59>
c0012ee7:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ee9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012eef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ef3:	51                   	push   ecx
c0012ef4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ef7:	51                   	push   ecx
c0012ef8:	52                   	push   edx
c0012ef9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012efc:	83 c4 10             	add    esp,0x10
c0012eff:	85 c0                	test   eax,eax
c0012f01:	75 04                	jne    c0012f07 <File::open(FileOpenMode)+0x59>
c0012f03:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f07:	83 c4 08             	add    esp,0x8
c0012f0a:	5b                   	pop    ebx
c0012f0b:	c3                   	ret    

c0012f0c <File::close()>:
c0012f0c:	53                   	push   ebx
c0012f0d:	b8 0b 00 00 00       	mov    eax,0xb
c0012f12:	83 ec 08             	sub    esp,0x8
c0012f15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f19:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f20:	80 fa 19             	cmp    dl,0x19
c0012f23:	77 41                	ja     c0012f66 <File::close()+0x5a>
c0012f25:	8b 1c 95 e0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f20]
c0012f2c:	85 db                	test   ebx,ebx
c0012f2e:	74 36                	je     c0012f66 <File::close()+0x5a>
c0012f30:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f37:	74 2d                	je     c0012f66 <File::close()+0x5a>
c0012f39:	b8 05 00 00 00       	mov    eax,0x5
c0012f3e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f42:	74 22                	je     c0012f66 <File::close()+0x5a>
c0012f44:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f48:	8b 04 95 e0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f20]
c0012f4f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f55:	53                   	push   ebx
c0012f56:	53                   	push   ebx
c0012f57:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f59:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f5f:	50                   	push   eax
c0012f60:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f63:	83 c4 10             	add    esp,0x10
c0012f66:	83 c4 08             	add    esp,0x8
c0012f69:	5b                   	pop    ebx
c0012f6a:	c3                   	ret    
c0012f6b:	90                   	nop

c0012f6c <File::seek(unsigned long long)>:
c0012f6c:	56                   	push   esi
c0012f6d:	53                   	push   ebx
c0012f6e:	b8 0b 00 00 00       	mov    eax,0xb
c0012f73:	51                   	push   ecx
c0012f74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f7c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f87:	80 fa 19             	cmp    dl,0x19
c0012f8a:	77 31                	ja     c0012fbd <File::seek(unsigned long long)+0x51>
c0012f8c:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012f93:	85 d2                	test   edx,edx
c0012f95:	74 26                	je     c0012fbd <File::seek(unsigned long long)+0x51>
c0012f97:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f9d:	85 d2                	test   edx,edx
c0012f9f:	74 1c                	je     c0012fbd <File::seek(unsigned long long)+0x51>
c0012fa1:	b8 05 00 00 00       	mov    eax,0x5
c0012fa6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012faa:	74 11                	je     c0012fbd <File::seek(unsigned long long)+0x51>
c0012fac:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fae:	53                   	push   ebx
c0012faf:	51                   	push   ecx
c0012fb0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fb6:	52                   	push   edx
c0012fb7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fba:	83 c4 10             	add    esp,0x10
c0012fbd:	5a                   	pop    edx
c0012fbe:	5b                   	pop    ebx
c0012fbf:	5e                   	pop    esi
c0012fc0:	c3                   	ret    
c0012fc1:	90                   	nop

c0012fc2 <File::tell(unsigned long long*)>:
c0012fc2:	83 ec 0c             	sub    esp,0xc
c0012fc5:	b8 0b 00 00 00       	mov    eax,0xb
c0012fca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fce:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fd5:	80 fa 19             	cmp    dl,0x19
c0012fd8:	77 34                	ja     c001300e <File::tell(unsigned long long*)+0x4c>
c0012fda:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c0012fe1:	85 d2                	test   edx,edx
c0012fe3:	74 29                	je     c001300e <File::tell(unsigned long long*)+0x4c>
c0012fe5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012feb:	85 d2                	test   edx,edx
c0012fed:	74 1f                	je     c001300e <File::tell(unsigned long long*)+0x4c>
c0012fef:	b8 05 00 00 00       	mov    eax,0x5
c0012ff4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ff8:	74 14                	je     c001300e <File::tell(unsigned long long*)+0x4c>
c0012ffa:	50                   	push   eax
c0012ffb:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ffd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013001:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013007:	52                   	push   edx
c0013008:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001300b:	83 c4 10             	add    esp,0x10
c001300e:	83 c4 0c             	add    esp,0xc
c0013011:	c3                   	ret    

c0013012 <File::rewind()>:
c0013012:	83 ec 10             	sub    esp,0x10
c0013015:	6a 00                	push   0x0
c0013017:	6a 00                	push   0x0
c0013019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001301d:	e8 4a ff ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c0013022:	83 c4 1c             	add    esp,0x1c
c0013025:	c3                   	ret    

c0013026 <File::unlink()>:
c0013026:	83 ec 0c             	sub    esp,0xc
c0013029:	b8 0b 00 00 00       	mov    eax,0xb
c001302e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013032:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013039:	80 f9 19             	cmp    cl,0x19
c001303c:	77 2f                	ja     c001306d <File::unlink()+0x47>
c001303e:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013045:	85 c9                	test   ecx,ecx
c0013047:	74 24                	je     c001306d <File::unlink()+0x47>
c0013049:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001304f:	85 c9                	test   ecx,ecx
c0013051:	74 1a                	je     c001306d <File::unlink()+0x47>
c0013053:	b8 06 00 00 00       	mov    eax,0x6
c0013058:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001305c:	75 0f                	jne    c001306d <File::unlink()+0x47>
c001305e:	83 c2 0d             	add    edx,0xd
c0013061:	50                   	push   eax
c0013062:	50                   	push   eax
c0013063:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013065:	52                   	push   edx
c0013066:	51                   	push   ecx
c0013067:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001306a:	83 c4 10             	add    esp,0x10
c001306d:	83 c4 0c             	add    esp,0xc
c0013070:	c3                   	ret    
c0013071:	90                   	nop

c0013072 <File::rename(char const*)>:
c0013072:	83 ec 0c             	sub    esp,0xc
c0013075:	b8 0b 00 00 00       	mov    eax,0xb
c001307a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001307e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013085:	80 f9 19             	cmp    cl,0x19
c0013088:	77 32                	ja     c00130bc <File::rename(char const*)+0x4a>
c001308a:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013091:	85 c9                	test   ecx,ecx
c0013093:	74 27                	je     c00130bc <File::rename(char const*)+0x4a>
c0013095:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001309b:	85 c9                	test   ecx,ecx
c001309d:	74 1d                	je     c00130bc <File::rename(char const*)+0x4a>
c001309f:	b8 06 00 00 00       	mov    eax,0x6
c00130a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130a8:	75 12                	jne    c00130bc <File::rename(char const*)+0x4a>
c00130aa:	83 c2 0d             	add    edx,0xd
c00130ad:	50                   	push   eax
c00130ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130b4:	52                   	push   edx
c00130b5:	51                   	push   ecx
c00130b6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	83 c4 0c             	add    esp,0xc
c00130bf:	c3                   	ret    

c00130c0 <File::chfatattr(unsigned char, unsigned char)>:
c00130c0:	57                   	push   edi
c00130c1:	b8 0b 00 00 00       	mov    eax,0xb
c00130c6:	56                   	push   esi
c00130c7:	53                   	push   ebx
c00130c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130db:	80 f9 19             	cmp    cl,0x19
c00130de:	77 37                	ja     c0013117 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e0:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c00130e7:	85 c9                	test   ecx,ecx
c00130e9:	74 2c                	je     c0013117 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130f1:	85 c9                	test   ecx,ecx
c00130f3:	74 22                	je     c0013117 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130f5:	b8 06 00 00 00       	mov    eax,0x6
c00130fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130fe:	75 17                	jne    c0013117 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013100:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013102:	89 f0                	mov    eax,esi
c0013104:	83 c2 0d             	add    edx,0xd
c0013107:	0f b6 f0             	movzx  esi,al
c001310a:	0f b6 db             	movzx  ebx,bl
c001310d:	56                   	push   esi
c001310e:	53                   	push   ebx
c001310f:	52                   	push   edx
c0013110:	51                   	push   ecx
c0013111:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013114:	83 c4 10             	add    esp,0x10
c0013117:	5b                   	pop    ebx
c0013118:	5e                   	pop    esi
c0013119:	5f                   	pop    edi
c001311a:	c3                   	ret    
c001311b:	90                   	nop

c001311c <File::exists()>:
c001311c:	83 ec 0c             	sub    esp,0xc
c001311f:	31 c0                	xor    eax,eax
c0013121:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013125:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001312c:	80 f9 19             	cmp    cl,0x19
c001312f:	77 24                	ja     c0013155 <File::exists()+0x39>
c0013131:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013138:	85 c9                	test   ecx,ecx
c001313a:	74 19                	je     c0013155 <File::exists()+0x39>
c001313c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013142:	85 c9                	test   ecx,ecx
c0013144:	74 0f                	je     c0013155 <File::exists()+0x39>
c0013146:	83 c2 0d             	add    edx,0xd
c0013149:	50                   	push   eax
c001314a:	50                   	push   eax
c001314b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001314d:	52                   	push   edx
c001314e:	51                   	push   ecx
c001314f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	83 c4 0c             	add    esp,0xc
c0013158:	c3                   	ret    
c0013159:	90                   	nop

c001315a <File::stat(unsigned long long*, bool*)>:
c001315a:	56                   	push   esi
c001315b:	53                   	push   ebx
c001315c:	50                   	push   eax
c001315d:	b8 0b 00 00 00       	mov    eax,0xb
c0013162:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013166:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001316a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013171:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013175:	80 f9 19             	cmp    cl,0x19
c0013178:	77 3d                	ja     c00131b7 <File::stat(unsigned long long*, bool*)+0x5d>
c001317a:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013181:	85 c9                	test   ecx,ecx
c0013183:	74 32                	je     c00131b7 <File::stat(unsigned long long*, bool*)+0x5d>
c0013185:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001318b:	85 c9                	test   ecx,ecx
c001318d:	74 28                	je     c00131b7 <File::stat(unsigned long long*, bool*)+0x5d>
c001318f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013191:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013195:	74 13                	je     c00131aa <File::stat(unsigned long long*, bool*)+0x50>
c0013197:	83 ec 04             	sub    esp,0x4
c001319a:	56                   	push   esi
c001319b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00131a1:	51                   	push   ecx
c00131a2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00131a5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00131a8:	eb 0a                	jmp    c00131b4 <File::stat(unsigned long long*, bool*)+0x5a>
c00131aa:	53                   	push   ebx
c00131ab:	83 c2 0d             	add    edx,0xd
c00131ae:	56                   	push   esi
c00131af:	52                   	push   edx
c00131b0:	51                   	push   ecx
c00131b1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131b4:	83 c4 10             	add    esp,0x10
c00131b7:	5a                   	pop    edx
c00131b8:	5b                   	pop    ebx
c00131b9:	5e                   	pop    esi
c00131ba:	c3                   	ret    

c00131bb <Fs::setcwd(Process*, char*)>:
c00131bb:	55                   	push   ebp
c00131bc:	57                   	push   edi
c00131bd:	56                   	push   esi
c00131be:	53                   	push   ebx
c00131bf:	81 ec 20 02 00 00    	sub    esp,0x220
c00131c5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131cc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131d2:	57                   	push   edi
c00131d3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131da:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131de:	56                   	push   esi
c00131df:	e8 bc fa ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131e4:	89 34 24             	mov    DWORD PTR [esp],esi
c00131e7:	e8 f3 d4 fe ff       	call   c00006df <strlen>
c00131ec:	83 c4 10             	add    esp,0x10
c00131ef:	83 f8 02             	cmp    eax,0x2
c00131f2:	77 17                	ja     c001320b <Fs::setcwd(Process*, char*)+0x50>
c00131f4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131f9:	83 e8 41             	sub    eax,0x41
c00131fc:	83 f8 19             	cmp    eax,0x19
c00131ff:	76 24                	jbe    c0013225 <Fs::setcwd(Process*, char*)+0x6a>
c0013201:	b8 03 00 00 00       	mov    eax,0x3
c0013206:	e9 e0 00 00 00       	jmp    c00132eb <Fs::setcwd(Process*, char*)+0x130>
c001320b:	83 ec 0c             	sub    esp,0xc
c001320e:	56                   	push   esi
c001320f:	e8 cb d4 fe ff       	call   c00006df <strlen>
c0013214:	83 c4 10             	add    esp,0x10
c0013217:	83 f8 03             	cmp    eax,0x3
c001321a:	75 34                	jne    c0013250 <Fs::setcwd(Process*, char*)+0x95>
c001321c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013221:	75 2d                	jne    c0013250 <Fs::setcwd(Process*, char*)+0x95>
c0013223:	eb cf                	jmp    c00131f4 <Fs::setcwd(Process*, char*)+0x39>
c0013225:	8b 14 85 e0 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f20]
c001322c:	b8 05 00 00 00       	mov    eax,0x5
c0013231:	85 d2                	test   edx,edx
c0013233:	0f 84 b2 00 00 00    	je     c00132eb <Fs::setcwd(Process*, char*)+0x130>
c0013239:	b8 06 00 00 00       	mov    eax,0x6
c001323e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013245:	0f 85 92 00 00 00    	jne    c00132dd <Fs::setcwd(Process*, char*)+0x122>
c001324b:	e9 9b 00 00 00       	jmp    c00132eb <Fs::setcwd(Process*, char*)+0x130>
c0013250:	83 ec 0c             	sub    esp,0xc
c0013253:	68 14 01 00 00       	push   0x114
c0013258:	e8 c5 c3 ff ff       	call   c000f622 <malloc>
c001325d:	83 c4 0c             	add    esp,0xc
c0013260:	89 c3                	mov    ebx,eax
c0013262:	55                   	push   ebp
c0013263:	56                   	push   esi
c0013264:	50                   	push   eax
c0013265:	e8 e0 fb ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001326a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001326f:	83 c4 0c             	add    esp,0xc
c0013272:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013276:	50                   	push   eax
c0013277:	8d 44 24 10          	lea    eax,[esp+0x10]
c001327b:	50                   	push   eax
c001327c:	53                   	push   ebx
c001327d:	e8 d8 fe ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	83 f8 02             	cmp    eax,0x2
c0013288:	74 04                	je     c001328e <Fs::setcwd(Process*, char*)+0xd3>
c001328a:	85 c0                	test   eax,eax
c001328c:	74 1c                	je     c00132aa <Fs::setcwd(Process*, char*)+0xef>
c001328e:	b8 01 00 00 00       	mov    eax,0x1
c0013293:	85 db                	test   ebx,ebx
c0013295:	74 54                	je     c00132eb <Fs::setcwd(Process*, char*)+0x130>
c0013297:	83 ec 0c             	sub    esp,0xc
c001329a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001329c:	53                   	push   ebx
c001329d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	b8 01 00 00 00       	mov    eax,0x1
c00132a8:	eb 41                	jmp    c00132eb <Fs::setcwd(Process*, char*)+0x130>
c00132aa:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132af:	75 1c                	jne    c00132cd <Fs::setcwd(Process*, char*)+0x112>
c00132b1:	b8 02 00 00 00       	mov    eax,0x2
c00132b6:	85 db                	test   ebx,ebx
c00132b8:	74 31                	je     c00132eb <Fs::setcwd(Process*, char*)+0x130>
c00132ba:	83 ec 0c             	sub    esp,0xc
c00132bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132bf:	53                   	push   ebx
c00132c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132c3:	83 c4 10             	add    esp,0x10
c00132c6:	b8 02 00 00 00       	mov    eax,0x2
c00132cb:	eb 1e                	jmp    c00132eb <Fs::setcwd(Process*, char*)+0x130>
c00132cd:	85 db                	test   ebx,ebx
c00132cf:	74 0c                	je     c00132dd <Fs::setcwd(Process*, char*)+0x122>
c00132d1:	83 ec 0c             	sub    esp,0xc
c00132d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132d6:	53                   	push   ebx
c00132d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132da:	83 c4 10             	add    esp,0x10
c00132dd:	50                   	push   eax
c00132de:	50                   	push   eax
c00132df:	56                   	push   esi
c00132e0:	57                   	push   edi
c00132e1:	e8 7b d4 fe ff       	call   c0000761 <strcpy>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	31 c0                	xor    eax,eax
c00132eb:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132f1:	5b                   	pop    ebx
c00132f2:	5e                   	pop    esi
c00132f3:	5f                   	pop    edi
c00132f4:	5d                   	pop    ebp
c00132f5:	c3                   	ret    

c00132f6 <Directory::Directory(char const*, Process*)>:
c00132f6:	83 ec 0c             	sub    esp,0xc
c00132f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fd:	83 ec 08             	sub    esp,0x8
c0013300:	6a 00                	push   0x0
c0013302:	50                   	push   eax
c0013303:	e8 b6 e1 ff ff       	call   c00114be <UnixFile::UnixFile(int)>
c0013308:	83 c4 10             	add    esp,0x10
c001330b:	ba 2c a2 02 c0       	mov    edx,0xc002a22c
c0013310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013314:	89 10                	mov    DWORD PTR [eax],edx
c0013316:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001331a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013324:	83 c0 0d             	add    eax,0xd
c0013327:	83 ec 04             	sub    esp,0x4
c001332a:	52                   	push   edx
c001332b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001332f:	50                   	push   eax
c0013330:	e8 6b f9 ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013335:	83 c4 10             	add    esp,0x10
c0013338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001333f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013346:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001334c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013350:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013354:	90                   	nop
c0013355:	83 c4 0c             	add    esp,0xc
c0013358:	c3                   	ret    
c0013359:	90                   	nop

c001335a <Directory::open()>:
c001335a:	53                   	push   ebx
c001335b:	b8 0b 00 00 00       	mov    eax,0xb
c0013360:	83 ec 08             	sub    esp,0x8
c0013363:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013367:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001336e:	80 fa 19             	cmp    dl,0x19
c0013371:	77 3d                	ja     c00133b0 <Directory::open()+0x56>
c0013373:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c001337a:	85 d2                	test   edx,edx
c001337c:	74 32                	je     c00133b0 <Directory::open()+0x56>
c001337e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013384:	85 d2                	test   edx,edx
c0013386:	74 28                	je     c00133b0 <Directory::open()+0x56>
c0013388:	b8 06 00 00 00       	mov    eax,0x6
c001338d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013391:	75 1d                	jne    c00133b0 <Directory::open()+0x56>
c0013393:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013399:	50                   	push   eax
c001339a:	8b 02                	mov    eax,DWORD PTR [edx]
c001339c:	51                   	push   ecx
c001339d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133a0:	51                   	push   ecx
c00133a1:	52                   	push   edx
c00133a2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	85 c0                	test   eax,eax
c00133aa:	75 04                	jne    c00133b0 <Directory::open()+0x56>
c00133ac:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133b0:	83 c4 08             	add    esp,0x8
c00133b3:	5b                   	pop    ebx
c00133b4:	c3                   	ret    
c00133b5:	90                   	nop

c00133b6 <Directory::close()>:
c00133b6:	53                   	push   ebx
c00133b7:	b8 0b 00 00 00       	mov    eax,0xb
c00133bc:	83 ec 08             	sub    esp,0x8
c00133bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133c3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133ca:	80 fa 19             	cmp    dl,0x19
c00133cd:	77 41                	ja     c0013410 <Directory::close()+0x5a>
c00133cf:	8b 1c 95 e0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f20]
c00133d6:	85 db                	test   ebx,ebx
c00133d8:	74 36                	je     c0013410 <Directory::close()+0x5a>
c00133da:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133e1:	74 2d                	je     c0013410 <Directory::close()+0x5a>
c00133e3:	b8 05 00 00 00       	mov    eax,0x5
c00133e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133ec:	74 22                	je     c0013410 <Directory::close()+0x5a>
c00133ee:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133f2:	8b 04 95 e0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f20]
c00133f9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133ff:	53                   	push   ebx
c0013400:	53                   	push   ebx
c0013401:	8b 10                	mov    edx,DWORD PTR [eax]
c0013403:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013409:	50                   	push   eax
c001340a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001340d:	83 c4 10             	add    esp,0x10
c0013410:	83 c4 08             	add    esp,0x8
c0013413:	5b                   	pop    ebx
c0013414:	c3                   	ret    
c0013415:	90                   	nop

c0013416 <Directory::unlink()>:
c0013416:	83 ec 0c             	sub    esp,0xc
c0013419:	b8 0b 00 00 00       	mov    eax,0xb
c001341e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013422:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013429:	80 f9 19             	cmp    cl,0x19
c001342c:	77 2f                	ja     c001345d <Directory::unlink()+0x47>
c001342e:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013435:	85 c9                	test   ecx,ecx
c0013437:	74 24                	je     c001345d <Directory::unlink()+0x47>
c0013439:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001343f:	85 c9                	test   ecx,ecx
c0013441:	74 1a                	je     c001345d <Directory::unlink()+0x47>
c0013443:	b8 06 00 00 00       	mov    eax,0x6
c0013448:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001344c:	75 0f                	jne    c001345d <Directory::unlink()+0x47>
c001344e:	83 c2 0d             	add    edx,0xd
c0013451:	50                   	push   eax
c0013452:	50                   	push   eax
c0013453:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013455:	52                   	push   edx
c0013456:	51                   	push   ecx
c0013457:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001345a:	83 c4 10             	add    esp,0x10
c001345d:	83 c4 0c             	add    esp,0xc
c0013460:	c3                   	ret    
c0013461:	90                   	nop

c0013462 <Directory::rename(char const*)>:
c0013462:	83 ec 0c             	sub    esp,0xc
c0013465:	b8 0b 00 00 00       	mov    eax,0xb
c001346a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001346e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013475:	80 f9 19             	cmp    cl,0x19
c0013478:	77 32                	ja     c00134ac <Directory::rename(char const*)+0x4a>
c001347a:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013481:	85 c9                	test   ecx,ecx
c0013483:	74 27                	je     c00134ac <Directory::rename(char const*)+0x4a>
c0013485:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001348b:	85 c9                	test   ecx,ecx
c001348d:	74 1d                	je     c00134ac <Directory::rename(char const*)+0x4a>
c001348f:	b8 06 00 00 00       	mov    eax,0x6
c0013494:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013498:	75 12                	jne    c00134ac <Directory::rename(char const*)+0x4a>
c001349a:	83 c2 0d             	add    edx,0xd
c001349d:	50                   	push   eax
c001349e:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134a4:	52                   	push   edx
c00134a5:	51                   	push   ecx
c00134a6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00134a9:	83 c4 10             	add    esp,0x10
c00134ac:	83 c4 0c             	add    esp,0xc
c00134af:	c3                   	ret    

c00134b0 <Directory::exists()>:
c00134b0:	83 ec 0c             	sub    esp,0xc
c00134b3:	31 c0                	xor    eax,eax
c00134b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134b9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134c0:	80 f9 19             	cmp    cl,0x19
c00134c3:	77 24                	ja     c00134e9 <Directory::exists()+0x39>
c00134c5:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c00134cc:	85 c9                	test   ecx,ecx
c00134ce:	74 19                	je     c00134e9 <Directory::exists()+0x39>
c00134d0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134d6:	85 c9                	test   ecx,ecx
c00134d8:	74 0f                	je     c00134e9 <Directory::exists()+0x39>
c00134da:	83 c2 0d             	add    edx,0xd
c00134dd:	50                   	push   eax
c00134de:	50                   	push   eax
c00134df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134e1:	52                   	push   edx
c00134e2:	51                   	push   ecx
c00134e3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134e6:	83 c4 10             	add    esp,0x10
c00134e9:	83 c4 0c             	add    esp,0xc
c00134ec:	c3                   	ret    
c00134ed:	90                   	nop

c00134ee <Directory::read(dirent*)>:
c00134ee:	83 ec 1c             	sub    esp,0x1c
c00134f1:	b8 0b 00 00 00       	mov    eax,0xb
c00134f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134fa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013501:	80 fa 19             	cmp    dl,0x19
c0013504:	77 30                	ja     c0013536 <Directory::read(dirent*)+0x48>
c0013506:	8b 14 95 e0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f20]
c001350d:	85 d2                	test   edx,edx
c001350f:	74 25                	je     c0013536 <Directory::read(dirent*)+0x48>
c0013511:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013518:	74 1c                	je     c0013536 <Directory::read(dirent*)+0x48>
c001351a:	83 ec 0c             	sub    esp,0xc
c001351d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001351f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013523:	52                   	push   edx
c0013524:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013528:	6a 00                	push   0x0
c001352a:	68 10 01 00 00       	push   0x110
c001352f:	51                   	push   ecx
c0013530:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013533:	83 c4 20             	add    esp,0x20
c0013536:	83 c4 1c             	add    esp,0x1c
c0013539:	c3                   	ret    

c001353a <Directory::create()>:
c001353a:	83 ec 0c             	sub    esp,0xc
c001353d:	b8 0b 00 00 00       	mov    eax,0xb
c0013542:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013546:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001354d:	80 f9 19             	cmp    cl,0x19
c0013550:	77 2f                	ja     c0013581 <Directory::create()+0x47>
c0013552:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c0013559:	85 c9                	test   ecx,ecx
c001355b:	74 24                	je     c0013581 <Directory::create()+0x47>
c001355d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013563:	85 c9                	test   ecx,ecx
c0013565:	74 1a                	je     c0013581 <Directory::create()+0x47>
c0013567:	b8 06 00 00 00       	mov    eax,0x6
c001356c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013570:	75 0f                	jne    c0013581 <Directory::create()+0x47>
c0013572:	83 c2 0d             	add    edx,0xd
c0013575:	50                   	push   eax
c0013576:	50                   	push   eax
c0013577:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013579:	52                   	push   edx
c001357a:	51                   	push   ecx
c001357b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	83 c4 0c             	add    esp,0xc
c0013584:	c3                   	ret    
c0013585:	90                   	nop

c0013586 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013586:	b8 0a 00 00 00       	mov    eax,0xa
c001358b:	c3                   	ret    

c001358c <Bus::Bus(char const*)>:
c001358c:	83 ec 0c             	sub    esp,0xc
c001358f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013593:	83 ec 08             	sub    esp,0x8
c0013596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001359a:	50                   	push   eax
c001359b:	e8 68 09 00 00       	call   c0013f08 <Device::Device(char const*)>
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c00135a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ac:	89 10                	mov    DWORD PTR [eax],edx
c00135ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135bc:	90                   	nop
c00135bd:	83 c4 0c             	add    esp,0xc
c00135c0:	c3                   	ret    
c00135c1:	90                   	nop

c00135c2 <Bus::~Bus()>:
c00135c2:	83 ec 0c             	sub    esp,0xc
c00135c5:	ba 48 a2 02 c0       	mov    edx,0xc002a248
c00135ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ce:	89 10                	mov    DWORD PTR [eax],edx
c00135d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d4:	83 ec 0c             	sub    esp,0xc
c00135d7:	50                   	push   eax
c00135d8:	e8 0d 06 00 00       	call   c0013bea <Device::~Device()>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	90                   	nop
c00135e1:	83 c4 0c             	add    esp,0xc
c00135e4:	c3                   	ret    
c00135e5:	90                   	nop

c00135e6 <Bus::~Bus()>:
c00135e6:	83 ec 0c             	sub    esp,0xc
c00135e9:	83 ec 0c             	sub    esp,0xc
c00135ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f0:	e8 cd ff ff ff       	call   c00135c2 <Bus::~Bus()>
c00135f5:	83 c4 10             	add    esp,0x10
c00135f8:	83 ec 08             	sub    esp,0x8
c00135fb:	68 58 01 00 00       	push   0x158
c0013600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013604:	e8 08 f2 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0013609:	83 c4 10             	add    esp,0x10
c001360c:	83 c4 0c             	add    esp,0xc
c001360f:	c3                   	ret    

c0013610 <Buzzer::Buzzer(char const*)>:
c0013610:	83 ec 0c             	sub    esp,0xc
c0013613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013617:	83 ec 08             	sub    esp,0x8
c001361a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001361e:	50                   	push   eax
c001361f:	e8 e4 08 00 00       	call   c0013f08 <Device::Device(char const*)>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	ba 74 a2 02 c0       	mov    edx,0xc002a274
c001362c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013630:	89 10                	mov    DWORD PTR [eax],edx
c0013632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013636:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013644:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001364e:	90                   	nop
c001364f:	83 c4 0c             	add    esp,0xc
c0013652:	c3                   	ret    
c0013653:	90                   	nop

c0013654 <Buzzer::~Buzzer()>:
c0013654:	83 ec 0c             	sub    esp,0xc
c0013657:	ba 74 a2 02 c0       	mov    edx,0xc002a274
c001365c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013660:	89 10                	mov    DWORD PTR [eax],edx
c0013662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013666:	83 ec 0c             	sub    esp,0xc
c0013669:	50                   	push   eax
c001366a:	e8 7b 05 00 00       	call   c0013bea <Device::~Device()>
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	90                   	nop
c0013673:	83 c4 0c             	add    esp,0xc
c0013676:	c3                   	ret    
c0013677:	90                   	nop

c0013678 <Buzzer::~Buzzer()>:
c0013678:	83 ec 0c             	sub    esp,0xc
c001367b:	83 ec 0c             	sub    esp,0xc
c001367e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013682:	e8 cd ff ff ff       	call   c0013654 <Buzzer::~Buzzer()>
c0013687:	83 c4 10             	add    esp,0x10
c001368a:	83 ec 08             	sub    esp,0x8
c001368d:	68 5c 01 00 00       	push   0x15c
c0013692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013696:	e8 76 f1 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c001369b:	83 c4 10             	add    esp,0x10
c001369e:	83 c4 0c             	add    esp,0xc
c00136a1:	c3                   	ret    

c00136a2 <Buzzer::stop()>:
c00136a2:	83 ec 14             	sub    esp,0x14
c00136a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00136ab:	6a 00                	push   0x0
c00136ad:	50                   	push   eax
c00136ae:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136b1:	83 c4 1c             	add    esp,0x1c
c00136b4:	c3                   	ret    

c00136b5 <beepThread(void*)>:
c00136b5:	53                   	push   ebx
c00136b6:	83 ec 08             	sub    esp,0x8
c00136b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136bd:	e8 00 9e 00 00       	call   c001d4c2 <unlockScheduler()>
c00136c2:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136c7:	52                   	push   edx
c00136c8:	52                   	push   edx
c00136c9:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136cf:	52                   	push   edx
c00136d0:	50                   	push   eax
c00136d1:	e8 3a a3 00 00       	call   c001da10 <nanoSleep(unsigned long long)>
c00136d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136d9:	e8 c4 ff ff ff       	call   c00136a2 <Buzzer::stop()>
c00136de:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136e6:	83 c4 18             	add    esp,0x18
c00136e9:	5b                   	pop    ebx
c00136ea:	e9 67 a2 00 00       	jmp    c001d956 <blockTask(TaskState)>
c00136ef:	90                   	nop

c00136f0 <Buzzer::beep(int, int, bool)>:
c00136f0:	57                   	push   edi
c00136f1:	56                   	push   esi
c00136f2:	53                   	push   ebx
c00136f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136ff:	52                   	push   edx
c0013700:	52                   	push   edx
c0013701:	8b 06                	mov    eax,DWORD PTR [esi]
c0013703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013707:	56                   	push   esi
c0013708:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001370b:	83 c4 10             	add    esp,0x10
c001370e:	89 f8                	mov    eax,edi
c0013710:	84 c0                	test   al,al
c0013712:	74 1f                	je     c0013733 <Buzzer::beep(int, int, bool)+0x43>
c0013714:	50                   	push   eax
c0013715:	50                   	push   eax
c0013716:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001371c:	99                   	cdq    
c001371d:	52                   	push   edx
c001371e:	50                   	push   eax
c001371f:	e8 ec a2 00 00       	call   c001da10 <nanoSleep(unsigned long long)>
c0013724:	83 c4 10             	add    esp,0x10
c0013727:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001372b:	5b                   	pop    ebx
c001372c:	5e                   	pop    esi
c001372d:	5f                   	pop    edi
c001372e:	e9 6f ff ff ff       	jmp    c00136a2 <Buzzer::stop()>
c0013733:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013739:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001373e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013746:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001374a:	c7 44 24 14 b5 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136b5
c0013752:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013756:	5b                   	pop    ebx
c0013757:	5e                   	pop    esi
c0013758:	5f                   	pop    edi
c0013759:	e9 94 9e 00 00       	jmp    c001d5f2 <Process::createThread(void (*)(void*), void*, int)>

c001375e <User::loadClockSettings(int)>:
c001375e:	53                   	push   ebx
c001375f:	83 ec 14             	sub    esp,0x14
c0013762:	68 14 01 00 00       	push   0x114
c0013767:	e8 b6 be ff ff       	call   c000f622 <malloc>
c001376c:	83 c4 0c             	add    esp,0xc
c001376f:	89 c3                	mov    ebx,eax
c0013771:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c0013777:	68 9c a2 02 c0       	push   0xc002a29c
c001377c:	50                   	push   eax
c001377d:	e8 c8 f6 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c0013782:	58                   	pop    eax
c0013783:	5a                   	pop    edx
c0013784:	6a 01                	push   0x1
c0013786:	53                   	push   ebx
c0013787:	e8 22 f7 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001378c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001378f:	e8 78 f7 ff ff       	call   c0012f0c <File::close()>
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	85 db                	test   ebx,ebx
c0013799:	74 0f                	je     c00137aa <User::loadClockSettings(int)+0x4c>
c001379b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001379d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00137a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137a4:	83 c4 08             	add    esp,0x8
c00137a7:	5b                   	pop    ebx
c00137a8:	ff e0                	jmp    eax
c00137aa:	83 c4 08             	add    esp,0x8
c00137ad:	5b                   	pop    ebx
c00137ae:	c3                   	ret    
c00137af:	90                   	nop

c00137b0 <Clock::Clock(char const*)>:
c00137b0:	83 ec 0c             	sub    esp,0xc
c00137b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b7:	83 ec 08             	sub    esp,0x8
c00137ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137be:	50                   	push   eax
c00137bf:	e8 44 07 00 00       	call   c0013f08 <Device::Device(char const*)>
c00137c4:	83 c4 10             	add    esp,0x10
c00137c7:	ba c4 a2 02 c0       	mov    edx,0xc002a2c4
c00137cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d0:	89 10                	mov    DWORD PTR [eax],edx
c00137d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137e0:	90                   	nop
c00137e1:	83 c4 0c             	add    esp,0xc
c00137e4:	c3                   	ret    
c00137e5:	90                   	nop

c00137e6 <Clock::~Clock()>:
c00137e6:	83 ec 0c             	sub    esp,0xc
c00137e9:	ba c4 a2 02 c0       	mov    edx,0xc002a2c4
c00137ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f2:	89 10                	mov    DWORD PTR [eax],edx
c00137f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f8:	83 ec 0c             	sub    esp,0xc
c00137fb:	50                   	push   eax
c00137fc:	e8 e9 03 00 00       	call   c0013bea <Device::~Device()>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	90                   	nop
c0013805:	83 c4 0c             	add    esp,0xc
c0013808:	c3                   	ret    
c0013809:	90                   	nop

c001380a <Clock::~Clock()>:
c001380a:	83 ec 0c             	sub    esp,0xc
c001380d:	83 ec 0c             	sub    esp,0xc
c0013810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013814:	e8 cd ff ff ff       	call   c00137e6 <Clock::~Clock()>
c0013819:	83 c4 10             	add    esp,0x10
c001381c:	83 ec 08             	sub    esp,0x8
c001381f:	68 58 01 00 00       	push   0x158
c0013824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013828:	e8 e4 ef ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c001382d:	83 c4 10             	add    esp,0x10
c0013830:	83 c4 0c             	add    esp,0xc
c0013833:	c3                   	ret    

c0013834 <Clock::timeInSecondsLocal()>:
c0013834:	53                   	push   ebx
c0013835:	83 ec 14             	sub    esp,0x14
c0013838:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001383c:	8b 10                	mov    edx,DWORD PTR [eax]
c001383e:	50                   	push   eax
c001383f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013842:	0f b6 0d 50 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc50
c0013849:	03 0d 54 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc54
c001384f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013855:	89 cb                	mov    ebx,ecx
c0013857:	c1 fb 1f             	sar    ebx,0x1f
c001385a:	01 c8                	add    eax,ecx
c001385c:	11 da                	adc    edx,ebx
c001385e:	83 c4 10             	add    esp,0x10
c0013861:	31 c9                	xor    ecx,ecx
c0013863:	80 3d 51 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc51,0x0
c001386a:	74 05                	je     c0013871 <Clock::timeInSecondsLocal()+0x3d>
c001386c:	b9 08 07 00 00       	mov    ecx,0x708
c0013871:	31 db                	xor    ebx,ebx
c0013873:	01 c8                	add    eax,ecx
c0013875:	11 da                	adc    edx,ebx
c0013877:	83 c4 08             	add    esp,0x8
c001387a:	5b                   	pop    ebx
c001387b:	c3                   	ret    

c001387c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001387c:	57                   	push   edi
c001387d:	56                   	push   esi
c001387e:	53                   	push   ebx
c001387f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013887:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013889:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001388d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013890:	0f b6 05 50 dc 02 c0 	movzx  eax,BYTE PTR ds:0xc002dc50
c0013897:	03 05 54 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dc54
c001389d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00138a3:	99                   	cdq    
c00138a4:	29 c6                	sub    esi,eax
c00138a6:	19 d7                	sbb    edi,edx
c00138a8:	89 f0                	mov    eax,esi
c00138aa:	89 fa                	mov    edx,edi
c00138ac:	31 f6                	xor    esi,esi
c00138ae:	80 3d 51 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc51,0x0
c00138b5:	74 05                	je     c00138bc <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138b7:	be 08 07 00 00       	mov    esi,0x708
c00138bc:	31 ff                	xor    edi,edi
c00138be:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138c2:	29 f0                	sub    eax,esi
c00138c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138c8:	19 fa                	sbb    edx,edi
c00138ca:	89 d8                	mov    eax,ebx
c00138cc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138d0:	5b                   	pop    ebx
c00138d1:	5e                   	pop    esi
c00138d2:	5f                   	pop    edi
c00138d3:	ff e0                	jmp    eax

c00138d5 <datetimeToSeconds(datetime_t)>:
c00138d5:	55                   	push   ebp
c00138d6:	57                   	push   edi
c00138d7:	56                   	push   esi
c00138d8:	53                   	push   ebx
c00138d9:	83 ec 14             	sub    esp,0x14
c00138dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138e0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138e4:	89 d3                	mov    ebx,edx
c00138e6:	0f b6 c6             	movzx  eax,dh
c00138e9:	c1 eb 10             	shr    ebx,0x10
c00138ec:	48                   	dec    eax
c00138ed:	66 81 eb 6c 07       	sub    bx,0x76c
c00138f2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138f6:	0f b6 f5             	movzx  esi,ch
c00138f9:	89 cf                	mov    edi,ecx
c00138fb:	6b f6 3c             	imul   esi,esi,0x3c
c00138fe:	c1 ef 10             	shr    edi,0x10
c0013901:	0f b6 c9             	movzx  ecx,cl
c0013904:	89 f8                	mov    eax,edi
c0013906:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001390c:	0f b6 f8             	movzx  edi,al
c001390f:	0f b6 d2             	movzx  edx,dl
c0013912:	01 fe                	add    esi,edi
c0013914:	01 f1                	add    ecx,esi
c0013916:	0f b7 f3             	movzx  esi,bx
c0013919:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001391d:	c1 f9 1f             	sar    ecx,0x1f
c0013920:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013925:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013929:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001392e:	8b 0c 8d 00 a3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5d00]
c0013935:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013939:	76 29                	jbe    c0013964 <datetimeToSeconds(datetime_t)+0x8f>
c001393b:	f6 c3 03             	test   bl,0x3
c001393e:	75 24                	jne    c0013964 <datetimeToSeconds(datetime_t)+0x8f>
c0013940:	31 d2                	xor    edx,edx
c0013942:	bf 64 00 00 00       	mov    edi,0x64
c0013947:	89 d8                	mov    eax,ebx
c0013949:	66 f7 f7             	div    di
c001394c:	66 85 d2             	test   dx,dx
c001394f:	75 12                	jne    c0013963 <datetimeToSeconds(datetime_t)+0x8e>
c0013951:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013957:	bf 90 01 00 00       	mov    edi,0x190
c001395c:	99                   	cdq    
c001395d:	f7 ff                	idiv   edi
c001395f:	85 d2                	test   edx,edx
c0013961:	75 01                	jne    c0013964 <datetimeToSeconds(datetime_t)+0x8f>
c0013963:	41                   	inc    ecx
c0013964:	66 83 fb 46          	cmp    bx,0x46
c0013968:	76 45                	jbe    c00139af <datetimeToSeconds(datetime_t)+0xda>
c001396a:	bb 46 00 00 00       	mov    ebx,0x46
c001396f:	bf 64 00 00 00       	mov    edi,0x64
c0013974:	bd 90 01 00 00       	mov    ebp,0x190
c0013979:	b8 6d 01 00 00       	mov    eax,0x16d
c001397e:	f6 c3 03             	test   bl,0x3
c0013981:	75 23                	jne    c00139a6 <datetimeToSeconds(datetime_t)+0xd1>
c0013983:	89 d8                	mov    eax,ebx
c0013985:	99                   	cdq    
c0013986:	f7 ff                	idiv   edi
c0013988:	b8 6e 01 00 00       	mov    eax,0x16e
c001398d:	85 d2                	test   edx,edx
c001398f:	75 15                	jne    c00139a6 <datetimeToSeconds(datetime_t)+0xd1>
c0013991:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013997:	99                   	cdq    
c0013998:	f7 fd                	idiv   ebp
c001399a:	83 fa 01             	cmp    edx,0x1
c001399d:	19 c0                	sbb    eax,eax
c001399f:	f7 d0                	not    eax
c00139a1:	05 6e 01 00 00       	add    eax,0x16e
c00139a6:	01 c1                	add    ecx,eax
c00139a8:	43                   	inc    ebx
c00139a9:	39 f3                	cmp    ebx,esi
c00139ab:	7c cc                	jl     c0013979 <datetimeToSeconds(datetime_t)+0xa4>
c00139ad:	eb 35                	jmp    c00139e4 <datetimeToSeconds(datetime_t)+0x10f>
c00139af:	74 33                	je     c00139e4 <datetimeToSeconds(datetime_t)+0x10f>
c00139b1:	b8 45 00 00 00       	mov    eax,0x45
c00139b6:	89 c2                	mov    edx,eax
c00139b8:	83 e2 03             	and    edx,0x3
c00139bb:	39 f0                	cmp    eax,esi
c00139bd:	7e 0f                	jle    c00139ce <datetimeToSeconds(datetime_t)+0xf9>
c00139bf:	83 fa 01             	cmp    edx,0x1
c00139c2:	19 d2                	sbb    edx,edx
c00139c4:	48                   	dec    eax
c00139c5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139cc:	eb e8                	jmp    c00139b6 <datetimeToSeconds(datetime_t)+0xe1>
c00139ce:	b8 6d 01 00 00       	mov    eax,0x16d
c00139d3:	85 d2                	test   edx,edx
c00139d5:	75 0b                	jne    c00139e2 <datetimeToSeconds(datetime_t)+0x10d>
c00139d7:	66 83 fb 01          	cmp    bx,0x1
c00139db:	19 c0                	sbb    eax,eax
c00139dd:	05 6e 01 00 00       	add    eax,0x16e
c00139e2:	29 c1                	sub    ecx,eax
c00139e4:	b8 80 51 01 00       	mov    eax,0x15180
c00139e9:	f7 e9                	imul   ecx
c00139eb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139ef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139f3:	83 c4 14             	add    esp,0x14
c00139f6:	5b                   	pop    ebx
c00139f7:	5e                   	pop    esi
c00139f8:	5f                   	pop    edi
c00139f9:	5d                   	pop    ebp
c00139fa:	c3                   	ret    
c00139fb:	90                   	nop

c00139fc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139fc:	57                   	push   edi
c00139fd:	56                   	push   esi
c00139fe:	53                   	push   ebx
c00139ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a03:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a05:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a10:	e8 c0 fe ff ff       	call   c00138d5 <datetimeToSeconds(datetime_t)>
c0013a15:	59                   	pop    ecx
c0013a16:	0f b6 0d 50 dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc50
c0013a1d:	5b                   	pop    ebx
c0013a1e:	03 0d 54 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc54
c0013a24:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a2a:	89 cb                	mov    ebx,ecx
c0013a2c:	c1 fb 1f             	sar    ebx,0x1f
c0013a2f:	29 c8                	sub    eax,ecx
c0013a31:	19 da                	sbb    edx,ebx
c0013a33:	31 c9                	xor    ecx,ecx
c0013a35:	80 3d 51 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc51,0x0
c0013a3c:	74 05                	je     c0013a43 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a3e:	b9 08 07 00 00       	mov    ecx,0x708
c0013a43:	31 db                	xor    ebx,ebx
c0013a45:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a49:	29 c8                	sub    eax,ecx
c0013a4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a4f:	19 da                	sbb    edx,ebx
c0013a51:	89 f8                	mov    eax,edi
c0013a53:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a57:	5b                   	pop    ebx
c0013a58:	5e                   	pop    esi
c0013a59:	5f                   	pop    edi
c0013a5a:	ff e0                	jmp    eax

c0013a5c <secondsToDatetime(unsigned long long)>:
c0013a5c:	55                   	push   ebp
c0013a5d:	57                   	push   edi
c0013a5e:	56                   	push   esi
c0013a5f:	53                   	push   ebx
c0013a60:	83 ec 1c             	sub    esp,0x1c
c0013a63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a67:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a6b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a6f:	6a 00                	push   0x0
c0013a71:	68 80 51 01 00       	push   0x15180
c0013a76:	55                   	push   ebp
c0013a77:	57                   	push   edi
c0013a78:	e8 cf 26 01 00       	call   c002614c <__udivdi3>
c0013a7d:	83 c4 10             	add    esp,0x10
c0013a80:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a8a:	6a 00                	push   0x0
c0013a8c:	68 80 51 01 00       	push   0x15180
c0013a91:	55                   	push   ebp
c0013a92:	57                   	push   edi
c0013a93:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a98:	e8 af 27 01 00       	call   c002624c <__umoddi3>
c0013a9d:	83 c4 10             	add    esp,0x10
c0013aa0:	99                   	cdq    
c0013aa1:	f7 ff                	idiv   edi
c0013aa3:	bf 3c 00 00 00       	mov    edi,0x3c
c0013aa8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013aab:	89 d0                	mov    eax,edx
c0013aad:	99                   	cdq    
c0013aae:	f7 ff                	idiv   edi
c0013ab0:	85 db                	test   ebx,ebx
c0013ab2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013ab5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013ab8:	79 11                	jns    c0013acb <secondsToDatetime(unsigned long long)+0x6f>
c0013aba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013abe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ac4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ac9:	eb 07                	jmp    c0013ad2 <secondsToDatetime(unsigned long long)+0x76>
c0013acb:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ad0:	89 d8                	mov    eax,ebx
c0013ad2:	bf b4 05 00 00       	mov    edi,0x5b4
c0013ad7:	99                   	cdq    
c0013ad8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013add:	f7 f9                	idiv   ecx
c0013adf:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ae4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ae8:	31 d2                	xor    edx,edx
c0013aea:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013af2:	01 c3                	add    ebx,eax
c0013af4:	89 d8                	mov    eax,ebx
c0013af6:	f7 f1                	div    ecx
c0013af8:	31 d2                	xor    edx,edx
c0013afa:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013afd:	89 d8                	mov    eax,ebx
c0013aff:	f7 f7                	div    edi
c0013b01:	31 d2                	xor    edx,edx
c0013b03:	29 c1                	sub    ecx,eax
c0013b05:	89 d8                	mov    eax,ebx
c0013b07:	f7 f5                	div    ebp
c0013b09:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b0e:	29 c1                	sub    ecx,eax
c0013b10:	31 d2                	xor    edx,edx
c0013b12:	89 c8                	mov    eax,ecx
c0013b14:	f7 f5                	div    ebp
c0013b16:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b1f:	31 d2                	xor    edx,edx
c0013b21:	89 c8                	mov    eax,ecx
c0013b23:	f7 f5                	div    ebp
c0013b25:	31 d2                	xor    edx,edx
c0013b27:	01 c3                	add    ebx,eax
c0013b29:	89 c8                	mov    eax,ecx
c0013b2b:	f7 f7                	div    edi
c0013b2d:	bf 99 00 00 00       	mov    edi,0x99
c0013b32:	29 c3                	sub    ebx,eax
c0013b34:	31 d2                	xor    edx,edx
c0013b36:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b3e:	29 c3                	sub    ebx,eax
c0013b40:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b43:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b46:	bb 05 00 00 00       	mov    ebx,0x5
c0013b4b:	83 c1 02             	add    ecx,0x2
c0013b4e:	89 c8                	mov    eax,ecx
c0013b50:	f7 f7                	div    edi
c0013b52:	31 d2                	xor    edx,edx
c0013b54:	89 c7                	mov    edi,eax
c0013b56:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b5c:	83 c0 02             	add    eax,0x2
c0013b5f:	f7 f3                	div    ebx
c0013b61:	89 eb                	mov    ebx,ebp
c0013b63:	29 c3                	sub    ebx,eax
c0013b65:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b6b:	88 1e                	mov    BYTE PTR [esi],bl
c0013b6d:	19 c0                	sbb    eax,eax
c0013b6f:	31 d2                	xor    edx,edx
c0013b71:	83 e0 0c             	and    eax,0xc
c0013b74:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b78:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b80:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b84:	83 f9 01             	cmp    ecx,0x1
c0013b87:	0f 96 c2             	setbe  dl
c0013b8a:	41                   	inc    ecx
c0013b8b:	01 d0                	add    eax,edx
c0013b8d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b90:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b94:	83 c4 1c             	add    esp,0x1c
c0013b97:	89 f0                	mov    eax,esi
c0013b99:	5b                   	pop    ebx
c0013b9a:	5e                   	pop    esi
c0013b9b:	5f                   	pop    edi
c0013b9c:	5d                   	pop    ebp
c0013b9d:	c2 04 00             	ret    0x4

c0013ba0 <Clock::timeInDatetimeLocal()>:
c0013ba0:	53                   	push   ebx
c0013ba1:	83 ec 14             	sub    esp,0x14
c0013ba4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ba8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013bac:	e8 83 fc ff ff       	call   c0013834 <Clock::timeInSecondsLocal()>
c0013bb1:	83 c4 0c             	add    esp,0xc
c0013bb4:	52                   	push   edx
c0013bb5:	50                   	push   eax
c0013bb6:	53                   	push   ebx
c0013bb7:	e8 a0 fe ff ff       	call   c0013a5c <secondsToDatetime(unsigned long long)>
c0013bbc:	89 d8                	mov    eax,ebx
c0013bbe:	83 c4 14             	add    esp,0x14
c0013bc1:	5b                   	pop    ebx
c0013bc2:	c2 04 00             	ret    0x4
c0013bc5:	90                   	nop

c0013bc6 <Device::hibernate()>:
c0013bc6:	c3                   	ret    
c0013bc7:	90                   	nop

c0013bc8 <Device::wake()>:
c0013bc8:	c3                   	ret    
c0013bc9:	90                   	nop

c0013bca <Device::detect()>:
c0013bca:	c3                   	ret    
c0013bcb:	90                   	nop

c0013bcc <Device::disableLegacy()>:
c0013bcc:	c3                   	ret    
c0013bcd:	90                   	nop

c0013bce <Device::powerSaving(PowerSavingLevel)>:
c0013bce:	c3                   	ret    
c0013bcf:	90                   	nop

c0013bd0 <DriverlessDevice::close(int, int, void*)>:
c0013bd0:	31 c0                	xor    eax,eax
c0013bd2:	c3                   	ret    
c0013bd3:	90                   	nop

c0013bd4 <DriverlessDevice::detect()>:
c0013bd4:	c3                   	ret    
c0013bd5:	90                   	nop

c0013bd6 <DriverlessDevice::open(int, int, void*)>:
c0013bd6:	83 ec 18             	sub    esp,0x18
c0013bd9:	68 30 a3 02 c0       	push   0xc002a330
c0013bde:	e8 82 62 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0013be3:	83 c8 ff             	or     eax,0xffffffff
c0013be6:	83 c4 1c             	add    esp,0x1c
c0013be9:	c3                   	ret    

c0013bea <Device::~Device()>:
c0013bea:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c0013bef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bf3:	89 10                	mov    DWORD PTR [eax],edx
c0013bf5:	90                   	nop
c0013bf6:	c3                   	ret    
c0013bf7:	90                   	nop

c0013bf8 <Device::~Device()>:
c0013bf8:	83 ec 0c             	sub    esp,0xc
c0013bfb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013bff:	e8 e6 ff ff ff       	call   c0013bea <Device::~Device()>
c0013c04:	83 c4 04             	add    esp,0x4
c0013c07:	83 ec 08             	sub    esp,0x8
c0013c0a:	68 58 01 00 00       	push   0x158
c0013c0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c13:	e8 f9 eb ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0013c18:	83 c4 10             	add    esp,0x10
c0013c1b:	83 c4 0c             	add    esp,0xc
c0013c1e:	c3                   	ret    
c0013c1f:	90                   	nop

c0013c20 <Device::findAndLoadDriver()>:
c0013c20:	c3                   	ret    
c0013c21:	90                   	nop

c0013c22 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c22:	57                   	push   edi
c0013c23:	b9 09 00 00 00       	mov    ecx,0x9
c0013c28:	56                   	push   esi
c0013c29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c2d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c31:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c3b:	81 c7 18 01 00 00    	add    edi,0x118
c0013c41:	fc                   	cld    
c0013c42:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c44:	5e                   	pop    esi
c0013c45:	5f                   	pop    edi
c0013c46:	c3                   	ret    
c0013c47:	90                   	nop

c0013c48 <Device::preOpenACPI(void*, char*, char*)>:
c0013c48:	56                   	push   esi
c0013c49:	53                   	push   ebx
c0013c4a:	83 ec 08             	sub    esp,0x8
c0013c4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c51:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c55:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c63:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c69:	6a 1e                	push   0x1e
c0013c6b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c71:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c75:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c7b:	50                   	push   eax
c0013c7c:	e8 1f ca fe ff       	call   c00006a0 <memcpy>
c0013c81:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c85:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c89:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c91:	83 c4 14             	add    esp,0x14
c0013c94:	5b                   	pop    ebx
c0013c95:	5e                   	pop    esi
c0013c96:	e9 05 ca fe ff       	jmp    c00006a0 <memcpy>
c0013c9b:	90                   	nop

c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ca0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ca5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cac:	75 0b                	jne    c0013cb9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013cae:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cb0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cb7:	eb 1e                	jmp    c0013cd7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013cb9:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0013cbe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cc4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cca:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ccc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cd4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cd7:	ff e0                	jmp    eax
c0013cd9:	90                   	nop

c0013cda <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cde:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ce3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cea:	75 0b                	jne    c0013cf7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cf2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cf5:	eb 1e                	jmp    c0013d15 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013cf7:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0013cfc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d02:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d08:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d12:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d15:	ff e0                	jmp    eax
c0013d17:	90                   	nop

c0013d18 <Device::addChild(Device*)>:
c0013d18:	53                   	push   ebx
c0013d19:	83 ec 08             	sub    esp,0x8
c0013d1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d24:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d2a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d32:	85 d2                	test   edx,edx
c0013d34:	74 04                	je     c0013d3a <Device::addChild(Device*)+0x22>
c0013d36:	89 d3                	mov    ebx,edx
c0013d38:	eb f6                	jmp    c0013d30 <Device::addChild(Device*)+0x18>
c0013d3a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d3d:	83 ec 0c             	sub    esp,0xc
c0013d40:	6a 08                	push   0x8
c0013d42:	e8 db b8 ff ff       	call   c000f622 <malloc>
c0013d47:	89 03                	mov    DWORD PTR [ebx],eax
c0013d49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d56:	83 c4 18             	add    esp,0x18
c0013d59:	5b                   	pop    ebx
c0013d5a:	c3                   	ret    
c0013d5b:	90                   	nop

c0013d5c <Device::removeAllChildren()>:
c0013d5c:	56                   	push   esi
c0013d5d:	53                   	push   ebx
c0013d5e:	52                   	push   edx
c0013d5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d63:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d6c:	74 17                	je     c0013d85 <Device::removeAllChildren()+0x29>
c0013d6e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d71:	85 c0                	test   eax,eax
c0013d73:	74 0c                	je     c0013d81 <Device::removeAllChildren()+0x25>
c0013d75:	83 ec 0c             	sub    esp,0xc
c0013d78:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d7a:	50                   	push   eax
c0013d7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d83:	eb e4                	jmp    c0013d69 <Device::removeAllChildren()+0xd>
c0013d85:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d91:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d9e:	58                   	pop    eax
c0013d9f:	5b                   	pop    ebx
c0013da0:	5e                   	pop    esi
c0013da1:	c3                   	ret    

c0013da2 <Device::hibernateAll()>:
c0013da2:	53                   	push   ebx
c0013da3:	83 ec 14             	sub    esp,0x14
c0013da6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013daa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dac:	53                   	push   ebx
c0013dad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013db0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db6:	83 c4 10             	add    esp,0x10
c0013db9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dbc:	74 0f                	je     c0013dcd <Device::hibernateAll()+0x2b>
c0013dbe:	83 ec 0c             	sub    esp,0xc
c0013dc1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc4:	e8 d9 ff ff ff       	call   c0013da2 <Device::hibernateAll()>
c0013dc9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dcb:	eb e9                	jmp    c0013db6 <Device::hibernateAll()+0x14>
c0013dcd:	83 c4 08             	add    esp,0x8
c0013dd0:	5b                   	pop    ebx
c0013dd1:	c3                   	ret    

c0013dd2 <Device::wakeAll()>:
c0013dd2:	53                   	push   ebx
c0013dd3:	83 ec 14             	sub    esp,0x14
c0013dd6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ddc:	53                   	push   ebx
c0013ddd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013de0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de6:	83 c4 10             	add    esp,0x10
c0013de9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dec:	74 0f                	je     c0013dfd <Device::wakeAll()+0x2b>
c0013dee:	83 ec 0c             	sub    esp,0xc
c0013df1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013df4:	e8 d9 ff ff ff       	call   c0013dd2 <Device::wakeAll()>
c0013df9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dfb:	eb e9                	jmp    c0013de6 <Device::wakeAll()+0x14>
c0013dfd:	83 c4 08             	add    esp,0x8
c0013e00:	5b                   	pop    ebx
c0013e01:	c3                   	ret    

c0013e02 <Device::detectAll()>:
c0013e02:	53                   	push   ebx
c0013e03:	83 ec 14             	sub    esp,0x14
c0013e06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e0c:	53                   	push   ebx
c0013e0d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e1c:	74 0f                	je     c0013e2d <Device::detectAll()+0x2b>
c0013e1e:	83 ec 0c             	sub    esp,0xc
c0013e21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e24:	e8 d9 ff ff ff       	call   c0013e02 <Device::detectAll()>
c0013e29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e2b:	eb e9                	jmp    c0013e16 <Device::detectAll()+0x14>
c0013e2d:	83 c4 08             	add    esp,0x8
c0013e30:	5b                   	pop    ebx
c0013e31:	c3                   	ret    

c0013e32 <Device::disableLegacyAll()>:
c0013e32:	53                   	push   ebx
c0013e33:	83 ec 14             	sub    esp,0x14
c0013e36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e3c:	53                   	push   ebx
c0013e3d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e40:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e4c:	74 0f                	je     c0013e5d <Device::disableLegacyAll()+0x2b>
c0013e4e:	83 ec 0c             	sub    esp,0xc
c0013e51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e54:	e8 d9 ff ff ff       	call   c0013e32 <Device::disableLegacyAll()>
c0013e59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e5b:	eb e9                	jmp    c0013e46 <Device::disableLegacyAll()+0x14>
c0013e5d:	83 c4 08             	add    esp,0x8
c0013e60:	5b                   	pop    ebx
c0013e61:	c3                   	ret    

c0013e62 <Device::loadDriversForAll()>:
c0013e62:	53                   	push   ebx
c0013e63:	83 ec 08             	sub    esp,0x8
c0013e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6a:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e70:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e72:	85 db                	test   ebx,ebx
c0013e74:	74 12                	je     c0013e88 <Device::loadDriversForAll()+0x26>
c0013e76:	83 ec 0c             	sub    esp,0xc
c0013e79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e7c:	e8 e1 ff ff ff       	call   c0013e62 <Device::loadDriversForAll()>
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	89 d8                	mov    eax,ebx
c0013e86:	eb e8                	jmp    c0013e70 <Device::loadDriversForAll()+0xe>
c0013e88:	83 c4 08             	add    esp,0x8
c0013e8b:	5b                   	pop    ebx
c0013e8c:	c3                   	ret    
c0013e8d:	90                   	nop

c0013e8e <Device::closeAll()>:
c0013e8e:	53                   	push   ebx
c0013e8f:	83 ec 08             	sub    esp,0x8
c0013e92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e98:	6a 00                	push   0x0
c0013e9a:	6a 00                	push   0x0
c0013e9c:	6a 00                	push   0x0
c0013e9e:	53                   	push   ebx
c0013e9f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ea2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ea8:	83 c4 10             	add    esp,0x10
c0013eab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eae:	74 0f                	je     c0013ebf <Device::closeAll()+0x31>
c0013eb0:	83 ec 0c             	sub    esp,0xc
c0013eb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eb6:	e8 d3 ff ff ff       	call   c0013e8e <Device::closeAll()>
c0013ebb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ebd:	eb e9                	jmp    c0013ea8 <Device::closeAll()+0x1a>
c0013ebf:	83 c4 08             	add    esp,0x8
c0013ec2:	5b                   	pop    ebx
c0013ec3:	c3                   	ret    

c0013ec4 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ec4:	56                   	push   esi
c0013ec5:	53                   	push   ebx
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ecd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ed1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed3:	56                   	push   esi
c0013ed4:	53                   	push   ebx
c0013ed5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ed8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ede:	83 c4 10             	add    esp,0x10
c0013ee1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ee4:	74 0f                	je     c0013ef5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013ee6:	52                   	push   edx
c0013ee7:	52                   	push   edx
c0013ee8:	56                   	push   esi
c0013ee9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eec:	e8 d3 ff ff ff       	call   c0013ec4 <Device::powerSavingAll(PowerSavingLevel)>
c0013ef1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ef3:	eb e9                	jmp    c0013ede <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ef5:	58                   	pop    eax
c0013ef6:	5b                   	pop    ebx
c0013ef7:	5e                   	pop    esi
c0013ef8:	c3                   	ret    
c0013ef9:	90                   	nop

c0013efa <Device::setName(char const*)>:
c0013efa:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f02:	e9 5a c8 fe ff       	jmp    c0000761 <strcpy>
c0013f07:	90                   	nop

c0013f08 <Device::Device(char const*)>:
c0013f08:	83 ec 1c             	sub    esp,0x1c
c0013f0b:	ba 58 a3 02 c0       	mov    edx,0xc002a358
c0013f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f14:	89 10                	mov    DWORD PTR [eax],edx
c0013f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f28:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f36:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f44:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f4e:	83 ec 08             	sub    esp,0x8
c0013f51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f59:	e8 9c ff ff ff       	call   c0013efa <Device::setName(char const*)>
c0013f5e:	83 c4 10             	add    esp,0x10
c0013f61:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f69:	83 ec 0c             	sub    esp,0xc
c0013f6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f70:	e8 ad b6 ff ff       	call   c000f622 <malloc>
c0013f75:	83 c4 10             	add    esp,0x10
c0013f78:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f7e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f89:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f93:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fa9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbf:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fca:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013ffe:	90                   	nop
c0013fff:	83 c4 1c             	add    esp,0x1c
c0014002:	c3                   	ret    
c0014003:	90                   	nop

c0014004 <Device::getName()>:
c0014004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014008:	05 d0 00 00 00       	add    eax,0xd0
c001400d:	c3                   	ret    

c001400e <DriverlessDevice::DriverlessDevice(char const*)>:
c001400e:	83 ec 0c             	sub    esp,0xc
c0014011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014015:	83 ec 08             	sub    esp,0x8
c0014018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001401c:	50                   	push   eax
c001401d:	e8 e6 fe ff ff       	call   c0013f08 <Device::Device(char const*)>
c0014022:	83 c4 10             	add    esp,0x10
c0014025:	ba 84 a3 02 c0       	mov    edx,0xc002a384
c001402a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001402e:	89 10                	mov    DWORD PTR [eax],edx
c0014030:	90                   	nop
c0014031:	83 c4 0c             	add    esp,0xc
c0014034:	c3                   	ret    
c0014035:	90                   	nop

c0014036 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014036:	57                   	push   edi
c0014037:	56                   	push   esi
c0014038:	53                   	push   ebx
c0014039:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001403d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014041:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014045:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001404b:	75 0c                	jne    c0014059 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001404d:	52                   	push   edx
c001404e:	52                   	push   edx
c001404f:	53                   	push   ebx
c0014050:	56                   	push   esi
c0014051:	e8 34 40 01 00       	call   c002808a <LinkedList<Device>::addElement(Device*)>
c0014056:	83 c4 10             	add    esp,0x10
c0014059:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001405f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014062:	74 12                	je     c0014076 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014064:	50                   	push   eax
c0014065:	57                   	push   edi
c0014066:	56                   	push   esi
c0014067:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001406a:	e8 c7 ff ff ff       	call   c0014036 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001406f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014071:	83 c4 10             	add    esp,0x10
c0014074:	eb e9                	jmp    c001405f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014076:	5b                   	pop    ebx
c0014077:	5e                   	pop    esi
c0014078:	5f                   	pop    edi
c0014079:	c3                   	ret    

c001407a <getDevicesOfType(DeviceType)>:
c001407a:	53                   	push   ebx
c001407b:	83 ec 14             	sub    esp,0x14
c001407e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014082:	53                   	push   ebx
c0014083:	e8 de 40 01 00       	call   c0028166 <LinkedList<Device>::LinkedList()>
c0014088:	83 c4 0c             	add    esp,0xc
c001408b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001408f:	53                   	push   ebx
c0014090:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c0014096:	e8 9b ff ff ff       	call   c0014036 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001409b:	89 d8                	mov    eax,ebx
c001409d:	83 c4 18             	add    esp,0x18
c00140a0:	5b                   	pop    ebx
c00140a1:	c2 04 00             	ret    0x4

c00140a4 <HardDiskController::HardDiskController(char const*)>:
c00140a4:	83 ec 0c             	sub    esp,0xc
c00140a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ab:	83 ec 08             	sub    esp,0x8
c00140ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b2:	50                   	push   eax
c00140b3:	e8 50 fe ff ff       	call   c0013f08 <Device::Device(char const*)>
c00140b8:	83 c4 10             	add    esp,0x10
c00140bb:	ba b0 a3 02 c0       	mov    edx,0xc002a3b0
c00140c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c4:	89 10                	mov    DWORD PTR [eax],edx
c00140c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ca:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140d4:	90                   	nop
c00140d5:	83 c4 0c             	add    esp,0xc
c00140d8:	c3                   	ret    
c00140d9:	90                   	nop

c00140da <HardDiskController::~HardDiskController()>:
c00140da:	83 ec 0c             	sub    esp,0xc
c00140dd:	ba b0 a3 02 c0       	mov    edx,0xc002a3b0
c00140e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e6:	89 10                	mov    DWORD PTR [eax],edx
c00140e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	50                   	push   eax
c00140f0:	e8 f5 fa ff ff       	call   c0013bea <Device::~Device()>
c00140f5:	83 c4 10             	add    esp,0x10
c00140f8:	90                   	nop
c00140f9:	83 c4 0c             	add    esp,0xc
c00140fc:	c3                   	ret    
c00140fd:	90                   	nop

c00140fe <HardDiskController::~HardDiskController()>:
c00140fe:	83 ec 0c             	sub    esp,0xc
c0014101:	83 ec 0c             	sub    esp,0xc
c0014104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014108:	e8 cd ff ff ff       	call   c00140da <HardDiskController::~HardDiskController()>
c001410d:	83 c4 10             	add    esp,0x10
c0014110:	83 ec 08             	sub    esp,0x8
c0014113:	68 58 01 00 00       	push   0x158
c0014118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001411c:	e8 f0 e6 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0014121:	83 c4 10             	add    esp,0x10
c0014124:	83 c4 0c             	add    esp,0xc
c0014127:	c3                   	ret    

c0014128 <PhysicalDisk::eject()>:
c0014128:	83 ec 18             	sub    esp,0x18
c001412b:	68 d4 a3 02 c0       	push   0xc002a3d4
c0014130:	e8 bc e7 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014135:	83 c8 ff             	or     eax,0xffffffff
c0014138:	83 c4 1c             	add    esp,0x1c
c001413b:	c3                   	ret    

c001413c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001413c:	83 ec 0c             	sub    esp,0xc
c001413f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014143:	83 ec 08             	sub    esp,0x8
c0014146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001414a:	50                   	push   eax
c001414b:	e8 b8 fd ff ff       	call   c0013f08 <Device::Device(char const*)>
c0014150:	83 c4 10             	add    esp,0x10
c0014153:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c0014158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415c:	89 10                	mov    DWORD PTR [eax],edx
c001415e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014162:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014178:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014186:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001418a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014194:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001419e:	90                   	nop
c001419f:	83 c4 0c             	add    esp,0xc
c00141a2:	c3                   	ret    
c00141a3:	90                   	nop

c00141a4 <PhysicalDisk::startCache()>:
c00141a4:	56                   	push   esi
c00141a5:	53                   	push   ebx
c00141a6:	83 ec 10             	sub    esp,0x10
c00141a9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141ad:	6a 44                	push   0x44
c00141af:	e8 6e b4 ff ff       	call   c000f622 <malloc>
c00141b4:	89 c6                	mov    esi,eax
c00141b6:	58                   	pop    eax
c00141b7:	5a                   	pop    edx
c00141b8:	53                   	push   ebx
c00141b9:	56                   	push   esi
c00141ba:	e8 d5 26 00 00       	call   c0016894 <VCache::VCache(PhysicalDisk*)>
c00141bf:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141c5:	83 c4 14             	add    esp,0x14
c00141c8:	5b                   	pop    ebx
c00141c9:	5e                   	pop    esi
c00141ca:	c3                   	ret    
c00141cb:	90                   	nop

c00141cc <PhysicalDisk::~PhysicalDisk()>:
c00141cc:	83 ec 0c             	sub    esp,0xc
c00141cf:	ba 04 a4 02 c0       	mov    edx,0xc002a404
c00141d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141d8:	89 10                	mov    DWORD PTR [eax],edx
c00141da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141de:	83 ec 0c             	sub    esp,0xc
c00141e1:	50                   	push   eax
c00141e2:	e8 03 fa ff ff       	call   c0013bea <Device::~Device()>
c00141e7:	83 c4 10             	add    esp,0x10
c00141ea:	90                   	nop
c00141eb:	83 c4 0c             	add    esp,0xc
c00141ee:	c3                   	ret    
c00141ef:	90                   	nop

c00141f0 <PhysicalDisk::~PhysicalDisk()>:
c00141f0:	83 ec 0c             	sub    esp,0xc
c00141f3:	83 ec 0c             	sub    esp,0xc
c00141f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141fa:	e8 cd ff ff ff       	call   c00141cc <PhysicalDisk::~PhysicalDisk()>
c00141ff:	83 c4 10             	add    esp,0x10
c0014202:	83 ec 08             	sub    esp,0x8
c0014205:	68 6c 01 00 00       	push   0x16c
c001420a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001420e:	e8 fe e5 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0014213:	83 c4 10             	add    esp,0x10
c0014216:	83 c4 0c             	add    esp,0xc
c0014219:	c3                   	ret    

c001421a <FPU::FPU(char const*)>:
c001421a:	83 ec 0c             	sub    esp,0xc
c001421d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014221:	83 ec 08             	sub    esp,0x8
c0014224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014228:	50                   	push   eax
c0014229:	e8 da fc ff ff       	call   c0013f08 <Device::Device(char const*)>
c001422e:	83 c4 10             	add    esp,0x10
c0014231:	ba 48 a4 02 c0       	mov    edx,0xc002a448
c0014236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001423a:	89 10                	mov    DWORD PTR [eax],edx
c001423c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014240:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001424a:	90                   	nop
c001424b:	83 c4 0c             	add    esp,0xc
c001424e:	c3                   	ret    
c001424f:	90                   	nop

c0014250 <FPU::~FPU()>:
c0014250:	83 ec 0c             	sub    esp,0xc
c0014253:	ba 48 a4 02 c0       	mov    edx,0xc002a448
c0014258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001425c:	89 10                	mov    DWORD PTR [eax],edx
c001425e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014262:	83 ec 0c             	sub    esp,0xc
c0014265:	50                   	push   eax
c0014266:	e8 7f f9 ff ff       	call   c0013bea <Device::~Device()>
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	90                   	nop
c001426f:	83 c4 0c             	add    esp,0xc
c0014272:	c3                   	ret    
c0014273:	90                   	nop

c0014274 <FPU::~FPU()>:
c0014274:	83 ec 0c             	sub    esp,0xc
c0014277:	83 ec 0c             	sub    esp,0xc
c001427a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001427e:	e8 cd ff ff ff       	call   c0014250 <FPU::~FPU()>
c0014283:	83 c4 10             	add    esp,0x10
c0014286:	83 ec 08             	sub    esp,0x8
c0014289:	68 58 01 00 00       	push   0x158
c001428e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014292:	e8 7a e5 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0014297:	83 c4 10             	add    esp,0x10
c001429a:	83 c4 0c             	add    esp,0xc
c001429d:	c3                   	ret    

c001429e <setupFPU()>:
c001429e:	53                   	push   ebx
c001429f:	83 ec 08             	sub    esp,0x8
c00142a2:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c00142a8:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142af:	74 19                	je     c00142ca <setupFPU()+0x2c>
c00142b1:	83 ec 0c             	sub    esp,0xc
c00142b4:	68 58 01 00 00       	push   0x158
c00142b9:	e8 64 b3 ff ff       	call   c000f622 <malloc>
c00142be:	89 c3                	mov    ebx,eax
c00142c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00142c3:	e8 12 0a 01 00       	call   c0024cda <AVX::AVX()>
c00142c8:	eb 5b                	jmp    c0014325 <setupFPU()+0x87>
c00142ca:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142d0:	84 c0                	test   al,al
c00142d2:	79 19                	jns    c00142ed <setupFPU()+0x4f>
c00142d4:	83 ec 0c             	sub    esp,0xc
c00142d7:	68 58 01 00 00       	push   0x158
c00142dc:	e8 41 b3 ff ff       	call   c000f622 <malloc>
c00142e1:	89 c3                	mov    ebx,eax
c00142e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00142e6:	e8 15 0b 01 00       	call   c0024e00 <SSE::SSE()>
c00142eb:	eb 38                	jmp    c0014325 <setupFPU()+0x87>
c00142ed:	a8 20                	test   al,0x20
c00142ef:	74 19                	je     c001430a <setupFPU()+0x6c>
c00142f1:	83 ec 0c             	sub    esp,0xc
c00142f4:	68 58 01 00 00       	push   0x158
c00142f9:	e8 24 b3 ff ff       	call   c000f622 <malloc>
c00142fe:	89 c3                	mov    ebx,eax
c0014300:	89 04 24             	mov    DWORD PTR [esp],eax
c0014303:	e8 62 0a 01 00       	call   c0024d6a <MMX::MMX()>
c0014308:	eb 1b                	jmp    c0014325 <setupFPU()+0x87>
c001430a:	a8 10                	test   al,0x10
c001430c:	74 1c                	je     c001432a <setupFPU()+0x8c>
c001430e:	83 ec 0c             	sub    esp,0xc
c0014311:	68 58 01 00 00       	push   0x158
c0014316:	e8 07 b3 ff ff       	call   c000f622 <malloc>
c001431b:	89 c3                	mov    ebx,eax
c001431d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014320:	e8 69 0b 01 00       	call   c0024e8e <x87::x87()>
c0014325:	83 c4 10             	add    esp,0x10
c0014328:	eb 24                	jmp    c001434e <setupFPU()+0xb0>
c001432a:	83 e0 ef             	and    eax,0xffffffef
c001432d:	83 ec 0c             	sub    esp,0xc
c0014330:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014336:	68 34 a4 02 c0       	push   0xc002a434
c001433b:	e8 b1 e5 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014340:	0f 20 c0             	mov    eax,cr0
c0014343:	83 c8 04             	or     eax,0x4
c0014346:	0f 22 c0             	mov    cr0,eax
c0014349:	31 db                	xor    ebx,ebx
c001434b:	83 c4 10             	add    esp,0x10
c001434e:	89 d8                	mov    eax,ebx
c0014350:	83 c4 08             	add    esp,0x8
c0014353:	5b                   	pop    ebx
c0014354:	c3                   	ret    
c0014355:	90                   	nop

c0014356 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014356:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001435a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001435e:	c1 e0 04             	shl    eax,0x4
c0014361:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014365:	8d 50 10             	lea    edx,[eax+0x10]
c0014368:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001436e:	74 08                	je     c0014378 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014370:	83 c0 04             	add    eax,0x4
c0014373:	39 d0                	cmp    eax,edx
c0014375:	75 f1                	jne    c0014368 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014377:	c3                   	ret    
c0014378:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014382:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001438c:	eb e2                	jmp    c0014370 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001438e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001438e:	57                   	push   edi
c001438f:	31 c0                	xor    eax,eax
c0014391:	56                   	push   esi
c0014392:	53                   	push   ebx
c0014393:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014397:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001439b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001439f:	89 da                	mov    edx,ebx
c00143a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143a5:	c1 e2 04             	shl    edx,0x4
c00143a8:	01 ca                	add    edx,ecx
c00143aa:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143b2:	74 16                	je     c00143ca <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143b4:	40                   	inc    eax
c00143b5:	83 f8 04             	cmp    eax,0x4
c00143b8:	75 f0                	jne    c00143aa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143ba:	c7 44 24 10 78 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a478
c00143c2:	5b                   	pop    ebx
c00143c3:	5e                   	pop    esi
c00143c4:	5f                   	pop    edi
c00143c5:	e9 9b 5a 00 00       	jmp    c0019e65 <Krnl::panic(char const*)>
c00143ca:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143cd:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143d0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143d6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143dc:	5b                   	pop    ebx
c00143dd:	5e                   	pop    esi
c00143de:	5f                   	pop    edi
c00143df:	c3                   	ret    

c00143e0 <doubleFault(regs*, void*)>:
c00143e0:	55                   	push   ebp
c00143e1:	89 e5                	mov    ebp,esp
c00143e3:	83 ec 08             	sub    esp,0x8
c00143e6:	83 ec 0c             	sub    esp,0xc
c00143e9:	68 b3 a4 02 c0       	push   0xc002a4b3
c00143ee:	e8 72 5a 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c00143f3:	83 c4 10             	add    esp,0x10
c00143f6:	90                   	nop
c00143f7:	c9                   	leave  
c00143f8:	c3                   	ret    
c00143f9:	90                   	nop

c00143fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143fa:	56                   	push   esi
c00143fb:	53                   	push   ebx
c00143fc:	50                   	push   eax
c00143fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014401:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014405:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001440a:	75 35                	jne    c0014441 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001440c:	8d 43 20             	lea    eax,[ebx+0x20]
c001440f:	31 d2                	xor    edx,edx
c0014411:	89 c1                	mov    ecx,eax
c0014413:	c1 e1 04             	shl    ecx,0x4
c0014416:	01 f1                	add    ecx,esi
c0014418:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014420:	74 3e                	je     c0014460 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014422:	42                   	inc    edx
c0014423:	83 fa 04             	cmp    edx,0x4
c0014426:	75 f0                	jne    c0014418 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014428:	83 ec 0c             	sub    esp,0xc
c001442b:	68 f8 a4 02 c0       	push   0xc002a4f8
c0014430:	e8 30 5a 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0014435:	83 c4 10             	add    esp,0x10
c0014438:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001443d:	5a                   	pop    edx
c001443e:	5b                   	pop    ebx
c001443f:	5e                   	pop    esi
c0014440:	c3                   	ret    
c0014441:	83 ec 0c             	sub    esp,0xc
c0014444:	56                   	push   esi
c0014445:	e8 ba fb ff ff       	call   c0014004 <Device::getName()>
c001444a:	83 c4 10             	add    esp,0x10
c001444d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014450:	75 ba                	jne    c001440c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014452:	83 fb 0f             	cmp    ebx,0xf
c0014455:	7f 29                	jg     c0014480 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014457:	0f b6 9b 20 cd 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd32e0]
c001445e:	eb ac                	jmp    c001440c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014460:	8d 04 82             	lea    eax,[edx+eax*4]
c0014463:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014467:	8d 04 86             	lea    eax,[esi+eax*4]
c001446a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014470:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014474:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001447a:	89 d8                	mov    eax,ebx
c001447c:	5a                   	pop    edx
c001447d:	5b                   	pop    ebx
c001447e:	5e                   	pop    esi
c001447f:	c3                   	ret    
c0014480:	83 ec 0c             	sub    esp,0xc
c0014483:	68 c0 a4 02 c0       	push   0xc002a4c0
c0014488:	e8 d8 59 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c001448d:	83 c4 10             	add    esp,0x10
c0014490:	e9 77 ff ff ff       	jmp    c001440c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014495:	90                   	nop

c0014496 <InterruptController::clearAllHandlers(int, bool)>:
c0014496:	56                   	push   esi
c0014497:	53                   	push   ebx
c0014498:	52                   	push   edx
c0014499:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001449d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144a1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144a6:	75 61                	jne    c0014509 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144a8:	8d 46 20             	lea    eax,[esi+0x20]
c00144ab:	c1 e6 04             	shl    esi,0x4
c00144ae:	c1 e0 04             	shl    eax,0x4
c00144b1:	01 de                	add    esi,ebx
c00144b3:	01 d8                	add    eax,ebx
c00144b5:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144bf:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144c9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144d3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144dd:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144e7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144f1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144fb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014505:	58                   	pop    eax
c0014506:	5b                   	pop    ebx
c0014507:	5e                   	pop    esi
c0014508:	c3                   	ret    
c0014509:	83 ec 0c             	sub    esp,0xc
c001450c:	53                   	push   ebx
c001450d:	e8 f2 fa ff ff       	call   c0014004 <Device::getName()>
c0014512:	83 c4 10             	add    esp,0x10
c0014515:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014518:	75 8e                	jne    c00144a8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001451a:	83 fe 0f             	cmp    esi,0xf
c001451d:	7f 09                	jg     c0014528 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001451f:	0f b6 b6 20 cd 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd32e0]
c0014526:	eb 80                	jmp    c00144a8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014528:	83 ec 0c             	sub    esp,0xc
c001452b:	68 34 a5 02 c0       	push   0xc002a534
c0014530:	e8 30 59 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0014535:	83 c4 10             	add    esp,0x10
c0014538:	e9 6b ff ff ff       	jmp    c00144a8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001453d:	90                   	nop

c001453e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001453e:	56                   	push   esi
c001453f:	53                   	push   ebx
c0014540:	52                   	push   edx
c0014541:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014545:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014549:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001454e:	75 3a                	jne    c001458a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014550:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014554:	8d 50 20             	lea    edx,[eax+0x20]
c0014557:	c1 e2 04             	shl    edx,0x4
c001455a:	8d 04 16             	lea    eax,[esi+edx*1]
c001455d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014561:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014567:	74 0b                	je     c0014574 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014569:	83 c0 04             	add    eax,0x4
c001456c:	39 d0                	cmp    eax,edx
c001456e:	75 f1                	jne    c0014561 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014570:	58                   	pop    eax
c0014571:	5b                   	pop    ebx
c0014572:	5e                   	pop    esi
c0014573:	c3                   	ret    
c0014574:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001457e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014588:	eb df                	jmp    c0014569 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001458a:	83 ec 0c             	sub    esp,0xc
c001458d:	56                   	push   esi
c001458e:	e8 71 fa ff ff       	call   c0014004 <Device::getName()>
c0014593:	83 c4 10             	add    esp,0x10
c0014596:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014599:	75 b5                	jne    c0014550 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001459b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145a0:	7f 11                	jg     c00145b3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145a6:	0f b6 80 20 cd 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd32e0]
c00145ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145b1:	eb 9d                	jmp    c0014550 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145b3:	83 ec 0c             	sub    esp,0xc
c00145b6:	68 34 a5 02 c0       	push   0xc002a534
c00145bb:	e8 a5 58 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c00145c0:	83 c4 10             	add    esp,0x10
c00145c3:	eb 8b                	jmp    c0014550 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145c5 <nmiHandler(regs*, void*)>:
c00145c5:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00145ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145ce:	e9 9b a7 ff ff       	jmp    c000ed6e <Computer::handleNMI()>

c00145d3 <int_handler>:
c00145d3:	55                   	push   ebp
c00145d4:	57                   	push   edi
c00145d5:	56                   	push   esi
c00145d6:	53                   	push   ebx
c00145d7:	83 ec 0c             	sub    esp,0xc
c00145da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145de:	80 3d 20 06 03 c0 00 	cmp    BYTE PTR ds:0xc0030620,0x0
c00145e5:	74 0b                	je     c00145f2 <int_handler+0x1f>
c00145e7:	fa                   	cli    
c00145e8:	f4                   	hlt    
c00145e9:	80 3d 20 06 03 c0 00 	cmp    BYTE PTR ds:0xc0030620,0x0
c00145f0:	75 f5                	jne    c00145e7 <int_handler+0x14>
c00145f2:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00145f7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014600:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014606:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014609:	83 f8 17             	cmp    eax,0x17
c001460c:	77 13                	ja     c0014621 <int_handler+0x4e>
c001460e:	83 ec 08             	sub    esp,0x8
c0014611:	8b 17                	mov    edx,DWORD PTR [edi]
c0014613:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014616:	0f b6 c0             	movzx  eax,al
c0014619:	50                   	push   eax
c001461a:	57                   	push   edi
c001461b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001461e:	83 c4 10             	add    esp,0x10
c0014621:	83 c3 15             	add    ebx,0x15
c0014624:	c1 e3 04             	shl    ebx,0x4
c0014627:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001462b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014632:	31 db                	xor    ebx,ebx
c0014634:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014638:	85 c0                	test   eax,eax
c001463a:	74 13                	je     c001464f <int_handler+0x7c>
c001463c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001463f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014643:	74 1c                	je     c0014661 <int_handler+0x8e>
c0014645:	83 ec 08             	sub    esp,0x8
c0014648:	52                   	push   edx
c0014649:	56                   	push   esi
c001464a:	ff d0                	call   eax
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	43                   	inc    ebx
c0014650:	83 fb 04             	cmp    ebx,0x4
c0014653:	75 df                	jne    c0014634 <int_handler+0x61>
c0014655:	83 c4 0c             	add    esp,0xc
c0014658:	31 c0                	xor    eax,eax
c001465a:	5b                   	pop    ebx
c001465b:	31 d2                	xor    edx,edx
c001465d:	5e                   	pop    esi
c001465e:	5f                   	pop    edi
c001465f:	5d                   	pop    ebp
c0014660:	c3                   	ret    
c0014661:	83 ec 08             	sub    esp,0x8
c0014664:	52                   	push   edx
c0014665:	56                   	push   esi
c0014666:	ff d0                	call   eax
c0014668:	83 c4 10             	add    esp,0x10
c001466b:	83 c4 0c             	add    esp,0xc
c001466e:	5b                   	pop    ebx
c001466f:	5e                   	pop    esi
c0014670:	5f                   	pop    edi
c0014671:	5d                   	pop    ebp
c0014672:	c3                   	ret    
c0014673:	90                   	nop

c0014674 <InterruptController::InterruptController(char const*)>:
c0014674:	83 ec 1c             	sub    esp,0x1c
c0014677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467b:	83 ec 08             	sub    esp,0x8
c001467e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014682:	50                   	push   eax
c0014683:	e8 80 f8 ff ff       	call   c0013f08 <Device::Device(char const*)>
c0014688:	83 c4 10             	add    esp,0x10
c001468b:	ba d0 a7 02 c0       	mov    edx,0xc002a7d0
c0014690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014694:	89 10                	mov    DWORD PTR [eax],edx
c0014696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146ac:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146b4:	7f 5e                	jg     c0014714 <InterruptController::InterruptController(char const*)+0xa0>
c00146b6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146be:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146c3:	7f 49                	jg     c001470e <InterruptController::InterruptController(char const*)+0x9a>
c00146c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146cd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146d8:	01 ca                	add    edx,ecx
c00146da:	83 c2 54             	add    edx,0x54
c00146dd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146ed:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146f8:	01 ca                	add    edx,ecx
c00146fa:	81 c2 54 04 00 00    	add    edx,0x454
c0014700:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014708:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001470c:	eb b0                	jmp    c00146be <InterruptController::InterruptController(char const*)+0x4a>
c001470e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014712:	eb 98                	jmp    c00146ac <InterruptController::InterruptController(char const*)+0x38>
c0014714:	90                   	nop
c0014715:	83 c4 1c             	add    esp,0x1c
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <InterruptController::~InterruptController()>:
c001471a:	83 ec 0c             	sub    esp,0xc
c001471d:	ba d0 a7 02 c0       	mov    edx,0xc002a7d0
c0014722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014726:	89 10                	mov    DWORD PTR [eax],edx
c0014728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472c:	83 ec 0c             	sub    esp,0xc
c001472f:	50                   	push   eax
c0014730:	e8 b5 f4 ff ff       	call   c0013bea <Device::~Device()>
c0014735:	83 c4 10             	add    esp,0x10
c0014738:	90                   	nop
c0014739:	83 c4 0c             	add    esp,0xc
c001473c:	c3                   	ret    
c001473d:	90                   	nop

c001473e <InterruptController::~InterruptController()>:
c001473e:	83 ec 0c             	sub    esp,0xc
c0014741:	83 ec 0c             	sub    esp,0xc
c0014744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014748:	e8 cd ff ff ff       	call   c001471a <InterruptController::~InterruptController()>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	83 ec 08             	sub    esp,0x8
c0014753:	68 58 21 00 00       	push   0x2158
c0014758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475c:	e8 b0 e0 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0014761:	83 c4 10             	add    esp,0x10
c0014764:	83 c4 0c             	add    esp,0xc
c0014767:	c3                   	ret    

c0014768 <displayDebugInfo(regs*)>:
c0014768:	55                   	push   ebp
c0014769:	57                   	push   edi
c001476a:	56                   	push   esi
c001476b:	53                   	push   ebx
c001476c:	83 ec 24             	sub    esp,0x24
c001476f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014773:	0f 20 c2             	mov    edx,cr0
c0014776:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001477a:	0f 20 d7             	mov    edi,cr2
c001477d:	0f 20 de             	mov    esi,cr3
c0014780:	0f 20 e5             	mov    ebp,cr4
c0014783:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014786:	68 6e a5 02 c0       	push   0xc002a56e
c001478b:	e8 61 e1 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014790:	59                   	pop    ecx
c0014791:	58                   	pop    eax
c0014792:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014795:	68 79 a5 02 c0       	push   0xc002a579
c001479a:	e8 52 e1 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001479f:	58                   	pop    eax
c00147a0:	5a                   	pop    edx
c00147a1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147a4:	68 84 a5 02 c0       	push   0xc002a584
c00147a9:	e8 43 e1 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00147ae:	59                   	pop    ecx
c00147af:	58                   	pop    eax
c00147b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147b3:	68 8f a5 02 c0       	push   0xc002a58f
c00147b8:	e8 34 e1 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00147bd:	58                   	pop    eax
c00147be:	5a                   	pop    edx
c00147bf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147c2:	68 9a a5 02 c0       	push   0xc002a59a
c00147c7:	e8 25 e1 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00147cc:	59                   	pop    ecx
c00147cd:	58                   	pop    eax
c00147ce:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147d1:	68 a5 a5 02 c0       	push   0xc002a5a5
c00147d6:	e8 16 e1 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00147db:	58                   	pop    eax
c00147dc:	5a                   	pop    edx
c00147dd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147e0:	68 b0 a5 02 c0       	push   0xc002a5b0
c00147e5:	e8 07 e1 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00147ea:	59                   	pop    ecx
c00147eb:	58                   	pop    eax
c00147ec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147ef:	68 bb a5 02 c0       	push   0xc002a5bb
c00147f4:	e8 f8 e0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00147f9:	58                   	pop    eax
c00147fa:	5a                   	pop    edx
c00147fb:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147fe:	68 c6 a5 02 c0       	push   0xc002a5c6
c0014803:	e8 e9 e0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014808:	59                   	pop    ecx
c0014809:	58                   	pop    eax
c001480a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001480d:	68 d5 a5 02 c0       	push   0xc002a5d5
c0014812:	e8 da e0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014817:	58                   	pop    eax
c0014818:	5a                   	pop    edx
c0014819:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001481c:	68 e0 a5 02 c0       	push   0xc002a5e0
c0014821:	e8 cb e0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014826:	59                   	pop    ecx
c0014827:	58                   	pop    eax
c0014828:	57                   	push   edi
c0014829:	68 eb a5 02 c0       	push   0xc002a5eb
c001482e:	e8 be e0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014833:	58                   	pop    eax
c0014834:	5a                   	pop    edx
c0014835:	56                   	push   esi
c0014836:	68 f6 a5 02 c0       	push   0xc002a5f6
c001483b:	e8 b1 e0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014840:	59                   	pop    ecx
c0014841:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014846:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484c:	e8 62 c2 ff ff       	call   c0010ab3 <setActiveTerminal(VgaText*)>
c0014851:	58                   	pop    eax
c0014852:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014855:	5a                   	pop    edx
c0014856:	c1 e0 05             	shl    eax,0x5
c0014859:	05 80 ca 02 c0       	add    eax,0xc002ca80
c001485e:	50                   	push   eax
c001485f:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014864:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486a:	e8 63 c6 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001486f:	59                   	pop    ecx
c0014870:	58                   	pop    eax
c0014871:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014876:	68 01 a6 02 c0       	push   0xc002a601
c001487b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014881:	e8 4c c6 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014886:	58                   	pop    eax
c0014887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001488c:	5a                   	pop    edx
c001488d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014890:	83 c0 0c             	add    eax,0xc
c0014893:	50                   	push   eax
c0014894:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014899:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489f:	e8 2e c6 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c00148a4:	59                   	pop    ecx
c00148a5:	58                   	pop    eax
c00148a6:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00148ab:	68 0a a6 02 c0       	push   0xc002a60a
c00148b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b6:	e8 17 c6 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c00148bb:	58                   	pop    eax
c00148bc:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00148c1:	5a                   	pop    edx
c00148c2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cb:	e8 28 c6 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c00148d0:	59                   	pop    ecx
c00148d1:	58                   	pop    eax
c00148d2:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00148d7:	68 12 a6 02 c0       	push   0xc002a612
c00148dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e2:	e8 eb c5 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c00148e7:	58                   	pop    eax
c00148e8:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00148ed:	5a                   	pop    edx
c00148ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f7:	e8 fc c5 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c00148fc:	59                   	pop    ecx
c00148fd:	58                   	pop    eax
c00148fe:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014903:	68 1a a6 02 c0       	push   0xc002a61a
c0014908:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001490e:	e8 bf c5 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014913:	58                   	pop    eax
c0014914:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014919:	5a                   	pop    edx
c001491a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001491d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014923:	e8 d0 c5 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014928:	59                   	pop    ecx
c0014929:	58                   	pop    eax
c001492a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001492f:	68 22 a6 02 c0       	push   0xc002a622
c0014934:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493a:	e8 93 c5 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001493f:	58                   	pop    eax
c0014940:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014945:	5a                   	pop    edx
c0014946:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014949:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494f:	e8 a4 c5 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014954:	59                   	pop    ecx
c0014955:	58                   	pop    eax
c0014956:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001495b:	68 2a a6 02 c0       	push   0xc002a62a
c0014960:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014966:	e8 67 c5 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001496b:	58                   	pop    eax
c001496c:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014971:	5a                   	pop    edx
c0014972:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014975:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497b:	e8 78 c5 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014980:	59                   	pop    ecx
c0014981:	58                   	pop    eax
c0014982:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014987:	68 32 a6 02 c0       	push   0xc002a632
c001498c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014992:	e8 3b c5 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014997:	58                   	pop    eax
c0014998:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001499d:	5a                   	pop    edx
c001499e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a7:	e8 4c c5 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c00149ac:	59                   	pop    ecx
c00149ad:	58                   	pop    eax
c00149ae:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00149b3:	68 3a a6 02 c0       	push   0xc002a63a
c00149b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149be:	e8 0f c5 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c00149c3:	58                   	pop    eax
c00149c4:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00149c9:	5a                   	pop    edx
c00149ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149ce:	52                   	push   edx
c00149cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d5:	e8 1e c5 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c00149da:	59                   	pop    ecx
c00149db:	58                   	pop    eax
c00149dc:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00149e1:	68 43 a6 02 c0       	push   0xc002a643
c00149e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ec:	e8 e1 c4 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c00149f1:	58                   	pop    eax
c00149f2:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00149f7:	5a                   	pop    edx
c00149f8:	57                   	push   edi
c00149f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ff:	e8 f4 c4 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014a04:	59                   	pop    ecx
c0014a05:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a0a:	5f                   	pop    edi
c0014a0b:	68 4b a6 02 c0       	push   0xc002a64b
c0014a10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a16:	e8 b7 c4 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014a1b:	58                   	pop    eax
c0014a1c:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a21:	5a                   	pop    edx
c0014a22:	56                   	push   esi
c0014a23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a29:	e8 ca c4 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014a2e:	59                   	pop    ecx
c0014a2f:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a34:	5e                   	pop    esi
c0014a35:	68 53 a6 02 c0       	push   0xc002a653
c0014a3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a40:	e8 8d c4 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014a45:	5f                   	pop    edi
c0014a46:	58                   	pop    eax
c0014a47:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a4c:	55                   	push   ebp
c0014a4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a53:	e8 a0 c4 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014a58:	58                   	pop    eax
c0014a59:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a5e:	5a                   	pop    edx
c0014a5f:	68 5b a6 02 c0       	push   0xc002a65b
c0014a64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6a:	e8 63 c4 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014a6f:	0f 21 c0             	mov    eax,db0
c0014a72:	59                   	pop    ecx
c0014a73:	5e                   	pop    esi
c0014a74:	50                   	push   eax
c0014a75:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a80:	e8 73 c4 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014a85:	5f                   	pop    edi
c0014a86:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014a8b:	5d                   	pop    ebp
c0014a8c:	68 64 a6 02 c0       	push   0xc002a664
c0014a91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a97:	e8 36 c4 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014a9c:	0f 21 c8             	mov    eax,db1
c0014a9f:	5a                   	pop    edx
c0014aa0:	59                   	pop    ecx
c0014aa1:	50                   	push   eax
c0014aa2:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014aa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aad:	e8 46 c4 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014ab2:	5e                   	pop    esi
c0014ab3:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014ab8:	5f                   	pop    edi
c0014ab9:	68 6c a6 02 c0       	push   0xc002a66c
c0014abe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac4:	e8 09 c4 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014ac9:	0f 21 d0             	mov    eax,db2
c0014acc:	5d                   	pop    ebp
c0014acd:	5a                   	pop    edx
c0014ace:	50                   	push   eax
c0014acf:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014ad4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ada:	e8 19 c4 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014adf:	59                   	pop    ecx
c0014ae0:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014ae5:	5e                   	pop    esi
c0014ae6:	68 74 a6 02 c0       	push   0xc002a674
c0014aeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af1:	e8 dc c3 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014af6:	0f 21 d8             	mov    eax,db3
c0014af9:	5f                   	pop    edi
c0014afa:	5d                   	pop    ebp
c0014afb:	50                   	push   eax
c0014afc:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b07:	e8 ec c3 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014b0c:	58                   	pop    eax
c0014b0d:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b12:	5a                   	pop    edx
c0014b13:	68 7c a6 02 c0       	push   0xc002a67c
c0014b18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1e:	e8 af c3 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014b23:	0f 21 f0             	mov    eax,db6
c0014b26:	59                   	pop    ecx
c0014b27:	5e                   	pop    esi
c0014b28:	50                   	push   eax
c0014b29:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b34:	e8 bf c3 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014b39:	5f                   	pop    edi
c0014b3a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b3f:	5d                   	pop    ebp
c0014b40:	68 84 a6 02 c0       	push   0xc002a684
c0014b45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4b:	e8 82 c3 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014b50:	0f 21 f8             	mov    eax,db7
c0014b53:	5a                   	pop    edx
c0014b54:	59                   	pop    ecx
c0014b55:	50                   	push   eax
c0014b56:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b61:	e8 92 c3 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014b66:	5e                   	pop    esi
c0014b67:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b6a:	e8 8d 82 00 00       	call   c001cdfc <Thr::getDriverNameFromAddress(unsigned long)>
c0014b6f:	83 c4 10             	add    esp,0x10
c0014b72:	85 c0                	test   eax,eax
c0014b74:	74 7d                	je     c0014bf3 <displayDebugInfo(regs*)+0x48b>
c0014b76:	89 c6                	mov    esi,eax
c0014b78:	50                   	push   eax
c0014b79:	50                   	push   eax
c0014b7a:	56                   	push   esi
c0014b7b:	68 8c a6 02 c0       	push   0xc002a68c
c0014b80:	e8 6c dd ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014b85:	5a                   	pop    edx
c0014b86:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014b8b:	59                   	pop    ecx
c0014b8c:	68 9a a6 02 c0       	push   0xc002a69a
c0014b91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b97:	e8 36 c3 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014b9c:	5f                   	pop    edi
c0014b9d:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014ba2:	5d                   	pop    ebp
c0014ba3:	56                   	push   esi
c0014ba4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014baa:	e8 23 c3 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014baf:	58                   	pop    eax
c0014bb0:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014bb5:	5a                   	pop    edx
c0014bb6:	68 a6 a6 02 c0       	push   0xc002a6a6
c0014bbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc1:	e8 0c c3 ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0014bc6:	59                   	pop    ecx
c0014bc7:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0014bcc:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014bd2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014bd5:	e8 59 82 00 00       	call   c001ce33 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014bda:	5b                   	pop    ebx
c0014bdb:	5d                   	pop    ebp
c0014bdc:	50                   	push   eax
c0014bdd:	57                   	push   edi
c0014bde:	e8 15 c3 ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c0014be3:	58                   	pop    eax
c0014be4:	5a                   	pop    edx
c0014be5:	56                   	push   esi
c0014be6:	68 b2 a6 02 c0       	push   0xc002a6b2
c0014beb:	e8 01 dd ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014bf0:	83 c4 10             	add    esp,0x10
c0014bf3:	fa                   	cli    
c0014bf4:	f4                   	hlt    
c0014bf5:	eb fe                	jmp    c0014bf5 <displayDebugInfo(regs*)+0x48d>

c0014bf7 <x87EmulHandler(regs*, void*)>:
c0014bf7:	53                   	push   ebx
c0014bf8:	83 ec 14             	sub    esp,0x14
c0014bfb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014bff:	53                   	push   ebx
c0014c00:	e8 4f a5 00 00       	call   c001f154 <Vm::x87Handler(regs*)>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	84 c0                	test   al,al
c0014c0a:	74 05                	je     c0014c11 <x87EmulHandler(regs*, void*)+0x1a>
c0014c0c:	83 c4 08             	add    esp,0x8
c0014c0f:	5b                   	pop    ebx
c0014c10:	c3                   	ret    
c0014c11:	83 ec 0c             	sub    esp,0xc
c0014c14:	68 c2 a6 02 c0       	push   0xc002a6c2
c0014c19:	e8 d3 dc ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014c1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c21:	e8 42 fb ff ff       	call   c0014768 <displayDebugInfo(regs*)>

c0014c26 <gpFault(regs*, void*)>:
c0014c26:	53                   	push   ebx
c0014c27:	83 ec 14             	sub    esp,0x14
c0014c2a:	c7 05 70 dc 02 c0 d1 e4 01 c0 	mov    DWORD PTR ds:0xc002dc70,0xc001e4d1
c0014c34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c38:	53                   	push   ebx
c0014c39:	e8 93 98 00 00       	call   c001e4d1 <Vm::faultHandler(regs*)>
c0014c3e:	83 c4 10             	add    esp,0x10
c0014c41:	84 c0                	test   al,al
c0014c43:	74 05                	je     c0014c4a <gpFault(regs*, void*)+0x24>
c0014c45:	83 c4 08             	add    esp,0x8
c0014c48:	5b                   	pop    ebx
c0014c49:	c3                   	ret    
c0014c4a:	83 ec 0c             	sub    esp,0xc
c0014c4d:	68 d8 a6 02 c0       	push   0xc002a6d8
c0014c52:	e8 9a dc ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014c57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c5a:	e8 09 fb ff ff       	call   c0014768 <displayDebugInfo(regs*)>

c0014c5f <pgFault(regs*, void*)>:
c0014c5f:	83 ec 18             	sub    esp,0x18
c0014c62:	68 f3 a6 02 c0       	push   0xc002a6f3
c0014c67:	e8 85 dc ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014c6c:	58                   	pop    eax
c0014c6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c71:	e8 f2 fa ff ff       	call   c0014768 <displayDebugInfo(regs*)>

c0014c76 <otherISRHandler(regs*, void*)>:
c0014c76:	53                   	push   ebx
c0014c77:	83 ec 0c             	sub    esp,0xc
c0014c7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c7e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c81:	50                   	push   eax
c0014c82:	50                   	push   eax
c0014c83:	68 00 a7 02 c0       	push   0xc002a700
c0014c88:	e8 64 dc ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014c8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c90:	e8 d3 fa ff ff       	call   c0014768 <displayDebugInfo(regs*)>

c0014c95 <opcodeFault(regs*, void*)>:
c0014c95:	55                   	push   ebp
c0014c96:	89 e5                	mov    ebp,esp
c0014c98:	56                   	push   esi
c0014c99:	53                   	push   ebx
c0014c9a:	83 ec 40             	sub    esp,0x40
c0014c9d:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0014ca2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ca8:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014cae:	84 c0                	test   al,al
c0014cb0:	74 24                	je     c0014cd6 <opcodeFault(regs*, void*)+0x41>
c0014cb2:	83 ec 0c             	sub    esp,0xc
c0014cb5:	68 20 a7 02 c0       	push   0xc002a720
c0014cba:	e8 32 dc ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014cbf:	83 c4 10             	add    esp,0x10
c0014cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc8:	8d 50 19             	lea    edx,[eax+0x19]
c0014ccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd1:	e9 be 05 00 00       	jmp    c0015294 <opcodeFault(regs*, void*)+0x5ff>
c0014cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cdc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014cdf:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014ce3:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ce7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ced:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014cf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf3:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf5:	3c f0                	cmp    al,0xf0
c0014cf7:	75 17                	jne    c0014d10 <opcodeFault(regs*, void*)+0x7b>
c0014cf9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d02:	8d 50 01             	lea    edx,[eax+0x1]
c0014d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d08:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d0b:	e9 da 00 00 00       	jmp    c0014dea <opcodeFault(regs*, void*)+0x155>
c0014d10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d13:	8a 00                	mov    al,BYTE PTR [eax]
c0014d15:	3c f2                	cmp    al,0xf2
c0014d17:	74 09                	je     c0014d22 <opcodeFault(regs*, void*)+0x8d>
c0014d19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d1e:	3c f3                	cmp    al,0xf3
c0014d20:	75 1b                	jne    c0014d3d <opcodeFault(regs*, void*)+0xa8>
c0014d22:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d26:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d2f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d35:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d38:	e9 ad 00 00 00       	jmp    c0014dea <opcodeFault(regs*, void*)+0x155>
c0014d3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d40:	8a 00                	mov    al,BYTE PTR [eax]
c0014d42:	3c 66                	cmp    al,0x66
c0014d44:	75 1f                	jne    c0014d65 <opcodeFault(regs*, void*)+0xd0>
c0014d46:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d4a:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d4e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d54:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d57:	8d 50 01             	lea    edx,[eax+0x1]
c0014d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d60:	e9 85 00 00 00       	jmp    c0014dea <opcodeFault(regs*, void*)+0x155>
c0014d65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d68:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6a:	3c 67                	cmp    al,0x67
c0014d6c:	75 18                	jne    c0014d86 <opcodeFault(regs*, void*)+0xf1>
c0014d6e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d84:	eb 64                	jmp    c0014dea <opcodeFault(regs*, void*)+0x155>
c0014d86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d89:	8a 00                	mov    al,BYTE PTR [eax]
c0014d8b:	3c 2e                	cmp    al,0x2e
c0014d8d:	74 09                	je     c0014d98 <opcodeFault(regs*, void*)+0x103>
c0014d8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d92:	8a 00                	mov    al,BYTE PTR [eax]
c0014d94:	3c 3e                	cmp    al,0x3e
c0014d96:	75 18                	jne    c0014db0 <opcodeFault(regs*, void*)+0x11b>
c0014d98:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d9c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da5:	8d 50 01             	lea    edx,[eax+0x1]
c0014da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dae:	eb 3a                	jmp    c0014dea <opcodeFault(regs*, void*)+0x155>
c0014db0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db3:	8a 00                	mov    al,BYTE PTR [eax]
c0014db5:	3c 36                	cmp    al,0x36
c0014db7:	74 1b                	je     c0014dd4 <opcodeFault(regs*, void*)+0x13f>
c0014db9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbc:	8a 00                	mov    al,BYTE PTR [eax]
c0014dbe:	3c 26                	cmp    al,0x26
c0014dc0:	74 12                	je     c0014dd4 <opcodeFault(regs*, void*)+0x13f>
c0014dc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc5:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc7:	3c 64                	cmp    al,0x64
c0014dc9:	74 09                	je     c0014dd4 <opcodeFault(regs*, void*)+0x13f>
c0014dcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dce:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd0:	3c 65                	cmp    al,0x65
c0014dd2:	75 16                	jne    c0014dea <opcodeFault(regs*, void*)+0x155>
c0014dd4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dd8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dde:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014de1:	8d 50 01             	lea    edx,[eax+0x1]
c0014de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ded:	8a 00                	mov    al,BYTE PTR [eax]
c0014def:	3c 0f                	cmp    al,0xf
c0014df1:	0f 85 ad 00 00 00    	jne    c0014ea4 <opcodeFault(regs*, void*)+0x20f>
c0014df7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfa:	40                   	inc    eax
c0014dfb:	8a 00                	mov    al,BYTE PTR [eax]
c0014dfd:	3c c2                	cmp    al,0xc2
c0014dff:	74 0e                	je     c0014e0f <opcodeFault(regs*, void*)+0x17a>
c0014e01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e04:	40                   	inc    eax
c0014e05:	8a 00                	mov    al,BYTE PTR [eax]
c0014e07:	3c c3                	cmp    al,0xc3
c0014e09:	0f 85 95 00 00 00    	jne    c0014ea4 <opcodeFault(regs*, void*)+0x20f>
c0014e0f:	83 ec 0c             	sub    esp,0xc
c0014e12:	68 43 a7 02 c0       	push   0xc002a743
c0014e17:	e8 d5 da ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0014e1c:	83 c4 10             	add    esp,0x10
c0014e1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e25:	8d 50 01             	lea    edx,[eax+0x1]
c0014e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e2e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e34:	8a 00                	mov    al,BYTE PTR [eax]
c0014e36:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3c:	88 10                	mov    BYTE PTR [eax],dl
c0014e3e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e41:	50                   	push   eax
c0014e42:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e45:	50                   	push   eax
c0014e46:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e49:	50                   	push   eax
c0014e4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e4d:	e8 44 48 00 00       	call   c0019696 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e5e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e61:	01 d0                	add    eax,edx
c0014e63:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e6c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e6f:	48                   	dec    eax
c0014e70:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e76:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e79:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7f:	83 ec 04             	sub    esp,0x4
c0014e82:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e85:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e88:	50                   	push   eax
c0014e89:	e8 26 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e8e:	83 c4 10             	add    esp,0x10
c0014e91:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e94:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e97:	01 c2                	add    edx,eax
c0014e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e9f:	e9 f0 03 00 00       	jmp    c0015294 <opcodeFault(regs*, void*)+0x5ff>
c0014ea4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea9:	3c 0f                	cmp    al,0xf
c0014eab:	0f 85 8b 01 00 00    	jne    c001503c <opcodeFault(regs*, void*)+0x3a7>
c0014eb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb4:	40                   	inc    eax
c0014eb5:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb7:	3c c7                	cmp    al,0xc7
c0014eb9:	0f 86 7d 01 00 00    	jbe    c001503c <opcodeFault(regs*, void*)+0x3a7>
c0014ebf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec2:	40                   	inc    eax
c0014ec3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec5:	3c cf                	cmp    al,0xcf
c0014ec7:	0f 87 6f 01 00 00    	ja     c001503c <opcodeFault(regs*, void*)+0x3a7>
c0014ecd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed0:	40                   	inc    eax
c0014ed1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed3:	83 c0 38             	add    eax,0x38
c0014ed6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014ed9:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014edd:	75 0b                	jne    c0014eea <opcodeFault(regs*, void*)+0x255>
c0014edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ee5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ee8:	eb 75                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x2ca>
c0014eea:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014eee:	75 0b                	jne    c0014efb <opcodeFault(regs*, void*)+0x266>
c0014ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ef6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ef9:	eb 64                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x2ca>
c0014efb:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014eff:	75 0b                	jne    c0014f0c <opcodeFault(regs*, void*)+0x277>
c0014f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f04:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f07:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f0a:	eb 53                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x2ca>
c0014f0c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f10:	75 0b                	jne    c0014f1d <opcodeFault(regs*, void*)+0x288>
c0014f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f15:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f18:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f1b:	eb 42                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x2ca>
c0014f1d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f21:	75 0b                	jne    c0014f2e <opcodeFault(regs*, void*)+0x299>
c0014f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f26:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f2c:	eb 31                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x2ca>
c0014f2e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f32:	75 0b                	jne    c0014f3f <opcodeFault(regs*, void*)+0x2aa>
c0014f34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f37:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f3a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f3d:	eb 20                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x2ca>
c0014f3f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f43:	75 0b                	jne    c0014f50 <opcodeFault(regs*, void*)+0x2bb>
c0014f45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f4e:	eb 0f                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x2ca>
c0014f50:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f54:	75 09                	jne    c0014f5f <opcodeFault(regs*, void*)+0x2ca>
c0014f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f59:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f5c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f5f:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f63:	74 10                	je     c0014f75 <opcodeFault(regs*, void*)+0x2e0>
c0014f65:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f6c:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f73:	eb 2d                	jmp    c0014fa2 <opcodeFault(regs*, void*)+0x30d>
c0014f75:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f78:	c1 e0 18             	shl    eax,0x18
c0014f7b:	89 c2                	mov    edx,eax
c0014f7d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f80:	c1 e0 08             	shl    eax,0x8
c0014f83:	25 00 00 ff 00       	and    eax,0xff0000
c0014f88:	09 c2                	or     edx,eax
c0014f8a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f8d:	c1 e8 08             	shr    eax,0x8
c0014f90:	25 00 ff 00 00       	and    eax,0xff00
c0014f95:	09 c2                	or     edx,eax
c0014f97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f9a:	c1 e8 18             	shr    eax,0x18
c0014f9d:	09 d0                	or     eax,edx
c0014f9f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fa2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014fa6:	75 0b                	jne    c0014fb3 <opcodeFault(regs*, void*)+0x31e>
c0014fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fae:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fb1:	eb 75                	jmp    c0015028 <opcodeFault(regs*, void*)+0x393>
c0014fb3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014fb7:	75 0b                	jne    c0014fc4 <opcodeFault(regs*, void*)+0x32f>
c0014fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fbf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014fc2:	eb 64                	jmp    c0015028 <opcodeFault(regs*, void*)+0x393>
c0014fc4:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014fc8:	75 0b                	jne    c0014fd5 <opcodeFault(regs*, void*)+0x340>
c0014fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fd0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fd3:	eb 53                	jmp    c0015028 <opcodeFault(regs*, void*)+0x393>
c0014fd5:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014fd9:	75 0b                	jne    c0014fe6 <opcodeFault(regs*, void*)+0x351>
c0014fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fde:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fe1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014fe4:	eb 42                	jmp    c0015028 <opcodeFault(regs*, void*)+0x393>
c0014fe6:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014fea:	75 0b                	jne    c0014ff7 <opcodeFault(regs*, void*)+0x362>
c0014fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fef:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ff2:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014ff5:	eb 31                	jmp    c0015028 <opcodeFault(regs*, void*)+0x393>
c0014ff7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ffb:	75 0b                	jne    c0015008 <opcodeFault(regs*, void*)+0x373>
c0014ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015000:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015003:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015006:	eb 20                	jmp    c0015028 <opcodeFault(regs*, void*)+0x393>
c0015008:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001500c:	75 0b                	jne    c0015019 <opcodeFault(regs*, void*)+0x384>
c001500e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015011:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015014:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015017:	eb 0f                	jmp    c0015028 <opcodeFault(regs*, void*)+0x393>
c0015019:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001501d:	75 09                	jne    c0015028 <opcodeFault(regs*, void*)+0x393>
c001501f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015022:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015025:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001502e:	8d 50 02             	lea    edx,[eax+0x2]
c0015031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015034:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015037:	e9 58 02 00 00       	jmp    c0015294 <opcodeFault(regs*, void*)+0x5ff>
c001503c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001503f:	8a 00                	mov    al,BYTE PTR [eax]
c0015041:	3c 0f                	cmp    al,0xf
c0015043:	0f 85 76 01 00 00    	jne    c00151bf <opcodeFault(regs*, void*)+0x52a>
c0015049:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001504c:	40                   	inc    eax
c001504d:	8a 00                	mov    al,BYTE PTR [eax]
c001504f:	3c c7                	cmp    al,0xc7
c0015051:	0f 85 68 01 00 00    	jne    c00151bf <opcodeFault(regs*, void*)+0x52a>
c0015057:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001505a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015060:	8d 50 01             	lea    edx,[eax+0x1]
c0015063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015066:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015069:	8d 45 ba             	lea    eax,[ebp-0x46]
c001506c:	50                   	push   eax
c001506d:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015070:	50                   	push   eax
c0015071:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015074:	50                   	push   eax
c0015075:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015078:	e8 19 46 00 00       	call   c0019696 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001507d:	83 c4 10             	add    esp,0x10
c0015080:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015083:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015086:	83 f0 01             	xor    eax,0x1
c0015089:	84 c0                	test   al,al
c001508b:	0f 84 2e 01 00 00    	je     c00151bf <opcodeFault(regs*, void*)+0x52a>
c0015091:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015094:	3c 01                	cmp    al,0x1
c0015096:	0f 85 23 01 00 00    	jne    c00151bf <opcodeFault(regs*, void*)+0x52a>
c001509c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001509f:	83 f0 01             	xor    eax,0x1
c00150a2:	84 c0                	test   al,al
c00150a4:	0f 84 15 01 00 00    	je     c00151bf <opcodeFault(regs*, void*)+0x52a>
c00150aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ad:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150b0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150b3:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00150ba:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150bd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150c0:	89 c2                	mov    edx,eax
c00150c2:	b8 00 00 00 00       	mov    eax,0x0
c00150c7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150ca:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150d3:	ba 00 00 00 00       	mov    edx,0x0
c00150d8:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00150db:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00150de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150e4:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150e7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00150ee:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150f1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150f4:	89 c2                	mov    edx,eax
c00150f6:	b8 00 00 00 00       	mov    eax,0x0
c00150fb:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150fe:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015104:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015107:	ba 00 00 00 00       	mov    edx,0x0
c001510c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001510f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015112:	e8 a9 83 00 00       	call   c001d4c0 <lockScheduler()>
c0015117:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001511a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001511d:	8b 00                	mov    eax,DWORD PTR [eax]
c001511f:	89 c1                	mov    ecx,eax
c0015121:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015124:	89 cb                	mov    ebx,ecx
c0015126:	89 d0                	mov    eax,edx
c0015128:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001512b:	89 c6                	mov    esi,eax
c001512d:	89 f0                	mov    eax,esi
c001512f:	09 d8                	or     eax,ebx
c0015131:	85 c0                	test   eax,eax
c0015133:	75 21                	jne    c0015156 <opcodeFault(regs*, void*)+0x4c1>
c0015135:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015138:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001513b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001513e:	89 01                	mov    DWORD PTR [ecx],eax
c0015140:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015146:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015149:	83 c8 40             	or     eax,0x40
c001514c:	89 c2                	mov    edx,eax
c001514e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015151:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015154:	eb 3e                	jmp    c0015194 <opcodeFault(regs*, void*)+0x4ff>
c0015156:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015159:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001515c:	8b 00                	mov    eax,DWORD PTR [eax]
c001515e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015161:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015164:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001516d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015170:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015173:	89 d0                	mov    eax,edx
c0015175:	31 d2                	xor    edx,edx
c0015177:	89 c3                	mov    ebx,eax
c0015179:	89 d6                	mov    esi,edx
c001517b:	89 da                	mov    edx,ebx
c001517d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015180:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015186:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015189:	83 e0 bf             	and    eax,0xffffffbf
c001518c:	89 c2                	mov    edx,eax
c001518e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015191:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015194:	e8 29 83 00 00       	call   c001d4c2 <unlockScheduler()>
c0015199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001519f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00151a2:	01 c2                	add    edx,eax
c00151a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151aa:	83 ec 0c             	sub    esp,0xc
c00151ad:	68 52 a7 02 c0       	push   0xc002a752
c00151b2:	e8 3a d7 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00151b7:	83 c4 10             	add    esp,0x10
c00151ba:	e9 d5 00 00 00       	jmp    c0015294 <opcodeFault(regs*, void*)+0x5ff>
c00151bf:	83 ec 0c             	sub    esp,0xc
c00151c2:	68 65 a7 02 c0       	push   0xc002a765
c00151c7:	e8 25 d7 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00151cc:	83 c4 10             	add    esp,0x10
c00151cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151db:	c1 e0 04             	shl    eax,0x4
c00151de:	01 d0                	add    eax,edx
c00151e0:	83 c0 03             	add    eax,0x3
c00151e3:	8a 00                	mov    al,BYTE PTR [eax]
c00151e5:	0f b6 d8             	movzx  ebx,al
c00151e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151eb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151f4:	c1 e0 04             	shl    eax,0x4
c00151f7:	01 d0                	add    eax,edx
c00151f9:	83 c0 02             	add    eax,0x2
c00151fc:	8a 00                	mov    al,BYTE PTR [eax]
c00151fe:	0f b6 c8             	movzx  ecx,al
c0015201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015204:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001520d:	c1 e0 04             	shl    eax,0x4
c0015210:	01 d0                	add    eax,edx
c0015212:	40                   	inc    eax
c0015213:	8a 00                	mov    al,BYTE PTR [eax]
c0015215:	0f b6 d0             	movzx  edx,al
c0015218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001521e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015221:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015224:	c1 e0 04             	shl    eax,0x4
c0015227:	01 f0                	add    eax,esi
c0015229:	8a 00                	mov    al,BYTE PTR [eax]
c001522b:	0f b6 c0             	movzx  eax,al
c001522e:	83 ec 0c             	sub    esp,0xc
c0015231:	53                   	push   ebx
c0015232:	51                   	push   ecx
c0015233:	52                   	push   edx
c0015234:	50                   	push   eax
c0015235:	68 78 a7 02 c0       	push   0xc002a778
c001523a:	e8 b2 d6 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001523f:	83 c4 20             	add    esp,0x20
c0015242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015245:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015248:	83 c0 03             	add    eax,0x3
c001524b:	8a 00                	mov    al,BYTE PTR [eax]
c001524d:	0f b6 d8             	movzx  ebx,al
c0015250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015253:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015256:	83 c0 02             	add    eax,0x2
c0015259:	8a 00                	mov    al,BYTE PTR [eax]
c001525b:	0f b6 c8             	movzx  ecx,al
c001525e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015261:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015264:	40                   	inc    eax
c0015265:	8a 00                	mov    al,BYTE PTR [eax]
c0015267:	0f b6 d0             	movzx  edx,al
c001526a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015270:	8a 00                	mov    al,BYTE PTR [eax]
c0015272:	0f b6 c0             	movzx  eax,al
c0015275:	83 ec 0c             	sub    esp,0xc
c0015278:	53                   	push   ebx
c0015279:	51                   	push   ecx
c001527a:	52                   	push   edx
c001527b:	50                   	push   eax
c001527c:	68 a0 a7 02 c0       	push   0xc002a7a0
c0015281:	e8 6b d6 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0015286:	83 c4 20             	add    esp,0x20
c0015289:	83 ec 0c             	sub    esp,0xc
c001528c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001528f:	e8 d4 f4 ff ff       	call   c0014768 <displayDebugInfo(regs*)>
c0015294:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015297:	5b                   	pop    ebx
c0015298:	5e                   	pop    esi
c0015299:	5d                   	pop    ebp
c001529a:	c3                   	ret    

c001529b <displayProgramFault(char const*)>:
c001529b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152a3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00152a9:	85 c0                	test   eax,eax
c00152ab:	74 15                	je     c00152c2 <displayProgramFault(char const*)+0x27>
c00152ad:	83 ec 0c             	sub    esp,0xc
c00152b0:	6a 04                	push   0x4
c00152b2:	6a 0f                	push   0xf
c00152b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152b8:	50                   	push   eax
c00152b9:	e8 d6 b8 ff ff       	call   c0010b94 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152be:	83 c4 1c             	add    esp,0x1c
c00152c1:	c3                   	ret    
c00152c2:	c3                   	ret    

c00152c3 <setupInterruptController()>:
c00152c3:	55                   	push   ebp
c00152c4:	89 e5                	mov    ebp,esp
c00152c6:	53                   	push   ebx
c00152c7:	83 ec 24             	sub    esp,0x24
c00152ca:	b8 00 00 00 00       	mov    eax,0x0
c00152cf:	85 c0                	test   eax,eax
c00152d1:	0f 95 c0             	setne  al
c00152d4:	84 c0                	test   al,al
c00152d6:	74 5b                	je     c0015333 <setupInterruptController()+0x70>
c00152d8:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00152df:	83 ec 0c             	sub    esp,0xc
c00152e2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00152e5:	e8 38 a3 ff ff       	call   c000f622 <malloc>
c00152ea:	83 c4 10             	add    esp,0x10
c00152ed:	89 c3                	mov    ebx,eax
c00152ef:	83 ec 0c             	sub    esp,0xc
c00152f2:	53                   	push   ebx
c00152f3:	e8 d4 fd 00 00       	call   c00250cc <APIC::APIC()>
c00152f8:	83 c4 10             	add    esp,0x10
c00152fb:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00152fe:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015301:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015304:	8b 00                	mov    eax,DWORD PTR [eax]
c0015306:	83 c0 08             	add    eax,0x8
c0015309:	8b 00                	mov    eax,DWORD PTR [eax]
c001530b:	6a 00                	push   0x0
c001530d:	6a 00                	push   0x0
c001530f:	6a 00                	push   0x0
c0015311:	52                   	push   edx
c0015312:	ff d0                	call   eax
c0015314:	83 c4 10             	add    esp,0x10
c0015317:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001531c:	83 ec 08             	sub    esp,0x8
c001531f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015322:	50                   	push   eax
c0015323:	e8 f0 e9 ff ff       	call   c0013d18 <Device::addChild(Device*)>
c0015328:	83 c4 10             	add    esp,0x10
c001532b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001532e:	e9 52 03 00 00       	jmp    c0015685 <setupInterruptController()+0x3c2>
c0015333:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0015338:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001533e:	83 e0 01             	and    eax,0x1
c0015341:	84 c0                	test   al,al
c0015343:	0f 95 c0             	setne  al
c0015346:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015349:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015350:	83 ec 0c             	sub    esp,0xc
c0015353:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015356:	e8 c7 a2 ff ff       	call   c000f622 <malloc>
c001535b:	83 c4 10             	add    esp,0x10
c001535e:	89 c3                	mov    ebx,eax
c0015360:	83 ec 0c             	sub    esp,0xc
c0015363:	53                   	push   ebx
c0015364:	e8 bb 02 01 00       	call   c0025624 <PIC::PIC()>
c0015369:	83 c4 10             	add    esp,0x10
c001536c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001536f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015372:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015375:	8b 00                	mov    eax,DWORD PTR [eax]
c0015377:	83 c0 08             	add    eax,0x8
c001537a:	8b 00                	mov    eax,DWORD PTR [eax]
c001537c:	6a 00                	push   0x0
c001537e:	6a 00                	push   0x0
c0015380:	6a 00                	push   0x0
c0015382:	52                   	push   edx
c0015383:	ff d0                	call   eax
c0015385:	83 c4 10             	add    esp,0x10
c0015388:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001538c:	74 73                	je     c0015401 <setupInterruptController()+0x13e>
c001538e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015391:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015394:	8b 00                	mov    eax,DWORD PTR [eax]
c0015396:	83 c0 0c             	add    eax,0xc
c0015399:	8b 00                	mov    eax,DWORD PTR [eax]
c001539b:	6a 00                	push   0x0
c001539d:	6a 00                	push   0x0
c001539f:	6a 00                	push   0x0
c00153a1:	52                   	push   edx
c00153a2:	ff d0                	call   eax
c00153a4:	83 c4 10             	add    esp,0x10
c00153a7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153ab:	74 15                	je     c00153c2 <setupInterruptController()+0xff>
c00153ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b2:	83 c0 04             	add    eax,0x4
c00153b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b7:	83 ec 0c             	sub    esp,0xc
c00153ba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153bd:	ff d0                	call   eax
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00153c9:	83 ec 0c             	sub    esp,0xc
c00153cc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00153cf:	e8 4e a2 ff ff       	call   c000f622 <malloc>
c00153d4:	83 c4 10             	add    esp,0x10
c00153d7:	89 c3                	mov    ebx,eax
c00153d9:	83 ec 0c             	sub    esp,0xc
c00153dc:	53                   	push   ebx
c00153dd:	e8 ea fc 00 00       	call   c00250cc <APIC::APIC()>
c00153e2:	83 c4 10             	add    esp,0x10
c00153e5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153e8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f0:	83 c0 08             	add    eax,0x8
c00153f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f5:	6a 00                	push   0x0
c00153f7:	6a 00                	push   0x0
c00153f9:	6a 00                	push   0x0
c00153fb:	52                   	push   edx
c00153fc:	ff d0                	call   eax
c00153fe:	83 c4 10             	add    esp,0x10
c0015401:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0015406:	83 ec 08             	sub    esp,0x8
c0015409:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540c:	50                   	push   eax
c001540d:	e8 06 e9 ff ff       	call   c0013d18 <Device::addChild(Device*)>
c0015412:	83 c4 10             	add    esp,0x10
c0015415:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015418:	8b 00                	mov    eax,DWORD PTR [eax]
c001541a:	83 c0 24             	add    eax,0x24
c001541d:	8b 00                	mov    eax,DWORD PTR [eax]
c001541f:	6a 00                	push   0x0
c0015421:	68 76 4c 01 c0       	push   0xc0014c76
c0015426:	6a 00                	push   0x0
c0015428:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001542b:	ff d0                	call   eax
c001542d:	83 c4 10             	add    esp,0x10
c0015430:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015433:	8b 00                	mov    eax,DWORD PTR [eax]
c0015435:	83 c0 24             	add    eax,0x24
c0015438:	8b 00                	mov    eax,DWORD PTR [eax]
c001543a:	6a 00                	push   0x0
c001543c:	68 76 4c 01 c0       	push   0xc0014c76
c0015441:	6a 01                	push   0x1
c0015443:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015446:	ff d0                	call   eax
c0015448:	83 c4 10             	add    esp,0x10
c001544b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015450:	83 c0 24             	add    eax,0x24
c0015453:	8b 00                	mov    eax,DWORD PTR [eax]
c0015455:	6a 00                	push   0x0
c0015457:	68 c5 45 01 c0       	push   0xc00145c5
c001545c:	6a 02                	push   0x2
c001545e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015461:	ff d0                	call   eax
c0015463:	83 c4 10             	add    esp,0x10
c0015466:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015469:	8b 00                	mov    eax,DWORD PTR [eax]
c001546b:	83 c0 24             	add    eax,0x24
c001546e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015470:	6a 00                	push   0x0
c0015472:	68 76 4c 01 c0       	push   0xc0014c76
c0015477:	6a 03                	push   0x3
c0015479:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001547c:	ff d0                	call   eax
c001547e:	83 c4 10             	add    esp,0x10
c0015481:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015484:	8b 00                	mov    eax,DWORD PTR [eax]
c0015486:	83 c0 24             	add    eax,0x24
c0015489:	8b 00                	mov    eax,DWORD PTR [eax]
c001548b:	6a 00                	push   0x0
c001548d:	68 76 4c 01 c0       	push   0xc0014c76
c0015492:	6a 04                	push   0x4
c0015494:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015497:	ff d0                	call   eax
c0015499:	83 c4 10             	add    esp,0x10
c001549c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549f:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a1:	83 c0 24             	add    eax,0x24
c00154a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a6:	6a 00                	push   0x0
c00154a8:	68 76 4c 01 c0       	push   0xc0014c76
c00154ad:	6a 05                	push   0x5
c00154af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b2:	ff d0                	call   eax
c00154b4:	83 c4 10             	add    esp,0x10
c00154b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bc:	83 c0 24             	add    eax,0x24
c00154bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c1:	6a 00                	push   0x0
c00154c3:	68 95 4c 01 c0       	push   0xc0014c95
c00154c8:	6a 06                	push   0x6
c00154ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154cd:	ff d0                	call   eax
c00154cf:	83 c4 10             	add    esp,0x10
c00154d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d7:	83 c0 24             	add    eax,0x24
c00154da:	8b 00                	mov    eax,DWORD PTR [eax]
c00154dc:	6a 00                	push   0x0
c00154de:	68 f7 4b 01 c0       	push   0xc0014bf7
c00154e3:	6a 07                	push   0x7
c00154e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e8:	ff d0                	call   eax
c00154ea:	83 c4 10             	add    esp,0x10
c00154ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f2:	83 c0 24             	add    eax,0x24
c00154f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f7:	6a 00                	push   0x0
c00154f9:	68 e0 43 01 c0       	push   0xc00143e0
c00154fe:	6a 08                	push   0x8
c0015500:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015503:	ff d0                	call   eax
c0015505:	83 c4 10             	add    esp,0x10
c0015508:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550b:	8b 00                	mov    eax,DWORD PTR [eax]
c001550d:	83 c0 24             	add    eax,0x24
c0015510:	8b 00                	mov    eax,DWORD PTR [eax]
c0015512:	6a 00                	push   0x0
c0015514:	68 76 4c 01 c0       	push   0xc0014c76
c0015519:	6a 09                	push   0x9
c001551b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001551e:	ff d0                	call   eax
c0015520:	83 c4 10             	add    esp,0x10
c0015523:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015526:	8b 00                	mov    eax,DWORD PTR [eax]
c0015528:	83 c0 24             	add    eax,0x24
c001552b:	8b 00                	mov    eax,DWORD PTR [eax]
c001552d:	6a 00                	push   0x0
c001552f:	68 76 4c 01 c0       	push   0xc0014c76
c0015534:	6a 0a                	push   0xa
c0015536:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015539:	ff d0                	call   eax
c001553b:	83 c4 10             	add    esp,0x10
c001553e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015541:	8b 00                	mov    eax,DWORD PTR [eax]
c0015543:	83 c0 24             	add    eax,0x24
c0015546:	8b 00                	mov    eax,DWORD PTR [eax]
c0015548:	6a 00                	push   0x0
c001554a:	68 76 4c 01 c0       	push   0xc0014c76
c001554f:	6a 0b                	push   0xb
c0015551:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015554:	ff d0                	call   eax
c0015556:	83 c4 10             	add    esp,0x10
c0015559:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555c:	8b 00                	mov    eax,DWORD PTR [eax]
c001555e:	83 c0 24             	add    eax,0x24
c0015561:	8b 00                	mov    eax,DWORD PTR [eax]
c0015563:	6a 00                	push   0x0
c0015565:	68 76 4c 01 c0       	push   0xc0014c76
c001556a:	6a 0c                	push   0xc
c001556c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556f:	ff d0                	call   eax
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015577:	8b 00                	mov    eax,DWORD PTR [eax]
c0015579:	83 c0 24             	add    eax,0x24
c001557c:	8b 00                	mov    eax,DWORD PTR [eax]
c001557e:	6a 00                	push   0x0
c0015580:	68 26 4c 01 c0       	push   0xc0014c26
c0015585:	6a 0d                	push   0xd
c0015587:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001558a:	ff d0                	call   eax
c001558c:	83 c4 10             	add    esp,0x10
c001558f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015592:	8b 00                	mov    eax,DWORD PTR [eax]
c0015594:	83 c0 24             	add    eax,0x24
c0015597:	8b 00                	mov    eax,DWORD PTR [eax]
c0015599:	6a 00                	push   0x0
c001559b:	68 5f 4c 01 c0       	push   0xc0014c5f
c00155a0:	6a 0e                	push   0xe
c00155a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a5:	ff d0                	call   eax
c00155a7:	83 c4 10             	add    esp,0x10
c00155aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00155af:	83 c0 24             	add    eax,0x24
c00155b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b4:	6a 00                	push   0x0
c00155b6:	68 76 4c 01 c0       	push   0xc0014c76
c00155bb:	6a 0f                	push   0xf
c00155bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c0:	ff d0                	call   eax
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ca:	83 c0 24             	add    eax,0x24
c00155cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cf:	6a 00                	push   0x0
c00155d1:	68 76 4c 01 c0       	push   0xc0014c76
c00155d6:	6a 10                	push   0x10
c00155d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155db:	ff d0                	call   eax
c00155dd:	83 c4 10             	add    esp,0x10
c00155e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e5:	83 c0 24             	add    eax,0x24
c00155e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ea:	6a 00                	push   0x0
c00155ec:	68 76 4c 01 c0       	push   0xc0014c76
c00155f1:	6a 11                	push   0x11
c00155f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f6:	ff d0                	call   eax
c00155f8:	83 c4 10             	add    esp,0x10
c00155fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015600:	83 c0 24             	add    eax,0x24
c0015603:	8b 00                	mov    eax,DWORD PTR [eax]
c0015605:	6a 00                	push   0x0
c0015607:	68 76 4c 01 c0       	push   0xc0014c76
c001560c:	6a 12                	push   0x12
c001560e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015611:	ff d0                	call   eax
c0015613:	83 c4 10             	add    esp,0x10
c0015616:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015619:	8b 00                	mov    eax,DWORD PTR [eax]
c001561b:	83 c0 24             	add    eax,0x24
c001561e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015620:	6a 00                	push   0x0
c0015622:	68 76 4c 01 c0       	push   0xc0014c76
c0015627:	6a 13                	push   0x13
c0015629:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562c:	ff d0                	call   eax
c001562e:	83 c4 10             	add    esp,0x10
c0015631:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015634:	8b 00                	mov    eax,DWORD PTR [eax]
c0015636:	83 c0 24             	add    eax,0x24
c0015639:	8b 00                	mov    eax,DWORD PTR [eax]
c001563b:	6a 00                	push   0x0
c001563d:	68 76 4c 01 c0       	push   0xc0014c76
c0015642:	6a 14                	push   0x14
c0015644:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015647:	ff d0                	call   eax
c0015649:	83 c4 10             	add    esp,0x10
c001564c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001564f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015651:	83 c0 24             	add    eax,0x24
c0015654:	8b 00                	mov    eax,DWORD PTR [eax]
c0015656:	6a 00                	push   0x0
c0015658:	68 76 4c 01 c0       	push   0xc0014c76
c001565d:	6a 1e                	push   0x1e
c001565f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015662:	ff d0                	call   eax
c0015664:	83 c4 10             	add    esp,0x10
c0015667:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566a:	8b 00                	mov    eax,DWORD PTR [eax]
c001566c:	83 c0 24             	add    eax,0x24
c001566f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015671:	6a 00                	push   0x0
c0015673:	68 b9 be 01 c0       	push   0xc001beb9
c0015678:	6a 60                	push   0x60
c001567a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001567d:	ff d0                	call   eax
c001567f:	83 c4 10             	add    esp,0x10
c0015682:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015688:	c9                   	leave  
c0015689:	c3                   	ret    

c001568a <InterruptController::convertLegacyIRQNumber(int)>:
c001568a:	55                   	push   ebp
c001568b:	89 e5                	mov    ebp,esp
c001568d:	83 ec 08             	sub    esp,0x8
c0015690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015693:	83 ec 0c             	sub    esp,0xc
c0015696:	50                   	push   eax
c0015697:	e8 68 e9 ff ff       	call   c0014004 <Device::getName()>
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	8a 00                	mov    al,BYTE PTR [eax]
c00156a1:	3c 41                	cmp    al,0x41
c00156a3:	0f 94 c0             	sete   al
c00156a6:	84 c0                	test   al,al
c00156a8:	74 28                	je     c00156d2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156aa:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00156ae:	7f 12                	jg     c00156c2 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00156b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156b3:	05 20 cd 02 c0       	add    eax,0xc002cd20
c00156b8:	8a 00                	mov    al,BYTE PTR [eax]
c00156ba:	0f b6 c0             	movzx  eax,al
c00156bd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00156c0:	eb 10                	jmp    c00156d2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156c2:	83 ec 0c             	sub    esp,0xc
c00156c5:	68 c0 a4 02 c0       	push   0xc002a4c0
c00156ca:	e8 96 47 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c00156cf:	83 c4 10             	add    esp,0x10
c00156d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00156d5:	c9                   	leave  
c00156d6:	c3                   	ret    
c00156d7:	90                   	nop

c00156d8 <startGUI(void*)>:
c00156d8:	55                   	push   ebp
c00156d9:	89 e5                	mov    ebp,esp
c00156db:	53                   	push   ebx
c00156dc:	83 ec 04             	sub    esp,0x4
c00156df:	e8 de 7d 00 00       	call   c001d4c2 <unlockScheduler()>
c00156e4:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c00156ea:	83 ec 08             	sub    esp,0x8
c00156ed:	6a 01                	push   0x1
c00156ef:	68 10 a8 02 c0       	push   0xc002a810
c00156f4:	e8 54 77 00 00       	call   c001ce4d <Thr::loadDLL(char const*, bool)>
c00156f9:	83 c4 10             	add    esp,0x10
c00156fc:	83 ec 08             	sub    esp,0x8
c00156ff:	53                   	push   ebx
c0015700:	50                   	push   eax
c0015701:	e8 56 79 00 00       	call   c001d05c <Thr::executeDLL(unsigned long, void*)>
c0015706:	83 c4 10             	add    esp,0x10
c0015709:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c001570f:	83 ec 08             	sub    esp,0x8
c0015712:	6a 01                	push   0x1
c0015714:	68 2a a8 02 c0       	push   0xc002a82a
c0015719:	e8 2f 77 00 00       	call   c001ce4d <Thr::loadDLL(char const*, bool)>
c001571e:	83 c4 10             	add    esp,0x10
c0015721:	83 ec 08             	sub    esp,0x8
c0015724:	53                   	push   ebx
c0015725:	50                   	push   eax
c0015726:	e8 31 79 00 00       	call   c001d05c <Thr::executeDLL(unsigned long, void*)>
c001572b:	83 c4 10             	add    esp,0x10
c001572e:	90                   	nop
c001572f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015732:	c9                   	leave  
c0015733:	c3                   	ret    

c0015734 <startGUIVESA(void*)>:
c0015734:	55                   	push   ebp
c0015735:	89 e5                	mov    ebp,esp
c0015737:	53                   	push   ebx
c0015738:	83 ec 04             	sub    esp,0x4
c001573b:	e8 82 7d 00 00       	call   c001d4c2 <unlockScheduler()>
c0015740:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c0015746:	83 ec 08             	sub    esp,0x8
c0015749:	6a 01                	push   0x1
c001574b:	68 44 a8 02 c0       	push   0xc002a844
c0015750:	e8 f8 76 00 00       	call   c001ce4d <Thr::loadDLL(char const*, bool)>
c0015755:	83 c4 10             	add    esp,0x10
c0015758:	83 ec 08             	sub    esp,0x8
c001575b:	53                   	push   ebx
c001575c:	50                   	push   eax
c001575d:	e8 fa 78 00 00       	call   c001d05c <Thr::executeDLL(unsigned long, void*)>
c0015762:	83 c4 10             	add    esp,0x10
c0015765:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c001576b:	83 ec 08             	sub    esp,0x8
c001576e:	6a 01                	push   0x1
c0015770:	68 2a a8 02 c0       	push   0xc002a82a
c0015775:	e8 d3 76 00 00       	call   c001ce4d <Thr::loadDLL(char const*, bool)>
c001577a:	83 c4 10             	add    esp,0x10
c001577d:	83 ec 08             	sub    esp,0x8
c0015780:	53                   	push   ebx
c0015781:	50                   	push   eax
c0015782:	e8 d5 78 00 00       	call   c001d05c <Thr::executeDLL(unsigned long, void*)>
c0015787:	83 c4 10             	add    esp,0x10
c001578a:	90                   	nop
c001578b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001578e:	c9                   	leave  
c001578f:	c3                   	ret    

c0015790 <sendKeyToTerminal(unsigned char)>:
c0015790:	55                   	push   ebp
c0015791:	89 e5                	mov    ebp,esp
c0015793:	83 ec 28             	sub    esp,0x28
c0015796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015799:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001579c:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c00157a1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00157a5:	83 ec 08             	sub    esp,0x8
c00157a8:	52                   	push   edx
c00157a9:	50                   	push   eax
c00157aa:	e8 21 b9 ff ff       	call   c00110d0 <VgaText::receiveKey(unsigned char)>
c00157af:	83 c4 10             	add    esp,0x10
c00157b2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00157b6:	75 41                	jne    c00157f9 <sendKeyToTerminal(unsigned char)+0x69>
c00157b8:	e8 2a 7d 00 00       	call   c001d4e7 <lockStuff()>
c00157bd:	a1 80 dc 02 c0       	mov    eax,ds:0xc002dc80
c00157c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157c5:	c7 05 80 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc80,0x0
c00157cf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00157d3:	74 1f                	je     c00157f4 <sendKeyToTerminal(unsigned char)+0x64>
c00157d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00157db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00157e4:	83 ec 0c             	sub    esp,0xc
c00157e7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157ea:	e8 e9 82 00 00       	call   c001dad8 <unblockTask(ThreadControlBlock*)>
c00157ef:	83 c4 10             	add    esp,0x10
c00157f2:	eb db                	jmp    c00157cf <sendKeyToTerminal(unsigned char)+0x3f>
c00157f4:	e8 88 80 00 00       	call   c001d881 <unlockStuff()>
c00157f9:	90                   	nop
c00157fa:	c9                   	leave  
c00157fb:	c3                   	ret    

c00157fc <sendKeyboardToken(KeyboardToken)>:
c00157fc:	55                   	push   ebp
c00157fd:	89 e5                	mov    ebp,esp
c00157ff:	83 ec 18             	sub    esp,0x18
c0015802:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015808:	0f b7 c0             	movzx  eax,ax
c001580b:	83 f2 01             	xor    edx,0x1
c001580e:	88 90 a0 dc 02 c0    	mov    BYTE PTR [eax-0x3ffd2360],dl
c0015814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015817:	66 3d 03 02          	cmp    ax,0x203
c001581b:	75 07                	jne    c0015824 <sendKeyboardToken(KeyboardToken)+0x28>
c001581d:	a0 a0 dd 02 c0       	mov    al,ds:0xc002dda0
c0015822:	84 c0                	test   al,al
c0015824:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015828:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001582b:	a0 a8 e0 02 c0       	mov    al,ds:0xc002e0a8
c0015830:	38 c2                	cmp    dl,al
c0015832:	74 1c                	je     c0015850 <sendKeyboardToken(KeyboardToken)+0x54>
c0015834:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015837:	a2 a8 e0 02 c0       	mov    ds:0xc002e0a8,al
c001583c:	a0 a8 e0 02 c0       	mov    al,ds:0xc002e0a8
c0015841:	0f b6 c0             	movzx  eax,al
c0015844:	83 ec 0c             	sub    esp,0xc
c0015847:	50                   	push   eax
c0015848:	e8 e3 aa ff ff       	call   c0010330 <setTerminalScrollLock(bool)>
c001584d:	83 c4 10             	add    esp,0x10
c0015850:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015853:	84 c0                	test   al,al
c0015855:	0f 84 ae 00 00 00    	je     c0015909 <sendKeyboardToken(KeyboardToken)+0x10d>
c001585b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585e:	66 3d 10 03          	cmp    ax,0x310
c0015862:	75 06                	jne    c001586a <sendKeyboardToken(KeyboardToken)+0x6e>
c0015864:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001586a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586d:	66 3d 11 03          	cmp    ax,0x311
c0015871:	75 06                	jne    c0015879 <sendKeyboardToken(KeyboardToken)+0x7d>
c0015873:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587c:	66 3d 12 03          	cmp    ax,0x312
c0015880:	75 06                	jne    c0015888 <sendKeyboardToken(KeyboardToken)+0x8c>
c0015882:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588b:	66 3d 13 03          	cmp    ax,0x313
c001588f:	75 06                	jne    c0015897 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015891:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589a:	66 3d 14 03          	cmp    ax,0x314
c001589e:	75 06                	jne    c00158a6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00158a0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00158a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a9:	66 3d 15 03          	cmp    ax,0x315
c00158ad:	75 06                	jne    c00158b5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00158af:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b8:	66 3d 16 03          	cmp    ax,0x316
c00158bc:	75 06                	jne    c00158c4 <sendKeyboardToken(KeyboardToken)+0xc8>
c00158be:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00158c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c7:	66 3d 17 03          	cmp    ax,0x317
c00158cb:	75 06                	jne    c00158d3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00158cd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00158d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d6:	66 3d 18 03          	cmp    ax,0x318
c00158da:	75 06                	jne    c00158e2 <sendKeyboardToken(KeyboardToken)+0xe6>
c00158dc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00158e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e5:	66 3d 19 03          	cmp    ax,0x319
c00158e9:	75 06                	jne    c00158f1 <sendKeyboardToken(KeyboardToken)+0xf5>
c00158eb:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00158f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f4:	66 3d 1a 03          	cmp    ax,0x31a
c00158f8:	0f 85 c9 00 00 00    	jne    c00159c7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158fe:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015904:	e9 be 00 00 00       	jmp    c00159c7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590c:	66 3d 10 03          	cmp    ax,0x310
c0015910:	75 0a                	jne    c001591c <sendKeyboardToken(KeyboardToken)+0x120>
c0015912:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015918:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001591c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591f:	66 3d 11 03          	cmp    ax,0x311
c0015923:	75 0a                	jne    c001592f <sendKeyboardToken(KeyboardToken)+0x133>
c0015925:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001592b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001592f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015932:	66 3d 12 03          	cmp    ax,0x312
c0015936:	75 0a                	jne    c0015942 <sendKeyboardToken(KeyboardToken)+0x146>
c0015938:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001593e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015945:	66 3d 13 03          	cmp    ax,0x313
c0015949:	75 0a                	jne    c0015955 <sendKeyboardToken(KeyboardToken)+0x159>
c001594b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015951:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015958:	66 3d 14 03          	cmp    ax,0x314
c001595c:	75 0a                	jne    c0015968 <sendKeyboardToken(KeyboardToken)+0x16c>
c001595e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015964:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596b:	66 3d 15 03          	cmp    ax,0x315
c001596f:	75 0a                	jne    c001597b <sendKeyboardToken(KeyboardToken)+0x17f>
c0015971:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015977:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001597b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597e:	66 3d 16 03          	cmp    ax,0x316
c0015982:	75 0a                	jne    c001598e <sendKeyboardToken(KeyboardToken)+0x192>
c0015984:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001598a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001598e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015991:	66 3d 17 03          	cmp    ax,0x317
c0015995:	75 0a                	jne    c00159a1 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015997:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001599d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a4:	66 3d 18 03          	cmp    ax,0x318
c00159a8:	75 0a                	jne    c00159b4 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00159aa:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00159b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b7:	66 3d 19 03          	cmp    ax,0x319
c00159bb:	75 0a                	jne    c00159c7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00159bd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00159c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ca:	66 3d 00 02          	cmp    ax,0x200
c00159ce:	75 2c                	jne    c00159fc <sendKeyboardToken(KeyboardToken)+0x200>
c00159d0:	a0 a0 e0 02 c0       	mov    al,ds:0xc002e0a0
c00159d5:	83 f0 01             	xor    eax,0x1
c00159d8:	84 c0                	test   al,al
c00159da:	74 20                	je     c00159fc <sendKeyboardToken(KeyboardToken)+0x200>
c00159dc:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c00159e1:	6a 01                	push   0x1
c00159e3:	6a 00                	push   0x0
c00159e5:	68 d8 56 01 c0       	push   0xc00156d8
c00159ea:	50                   	push   eax
c00159eb:	e8 02 7c 00 00       	call   c001d5f2 <Process::createThread(void (*)(void*), void*, int)>
c00159f0:	83 c4 10             	add    esp,0x10
c00159f3:	c6 05 a0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0a0,0x1
c00159fa:	eb 33                	jmp    c0015a2f <sendKeyboardToken(KeyboardToken)+0x233>
c00159fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ff:	66 3d 01 02          	cmp    ax,0x201
c0015a03:	75 2a                	jne    c0015a2f <sendKeyboardToken(KeyboardToken)+0x233>
c0015a05:	a0 a0 e0 02 c0       	mov    al,ds:0xc002e0a0
c0015a0a:	83 f0 01             	xor    eax,0x1
c0015a0d:	84 c0                	test   al,al
c0015a0f:	74 1e                	je     c0015a2f <sendKeyboardToken(KeyboardToken)+0x233>
c0015a11:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0015a16:	6a 01                	push   0x1
c0015a18:	6a 00                	push   0x0
c0015a1a:	68 34 57 01 c0       	push   0xc0015734
c0015a1f:	50                   	push   eax
c0015a20:	e8 cd 7b 00 00       	call   c001d5f2 <Process::createThread(void (*)(void*), void*, int)>
c0015a25:	83 c4 10             	add    esp,0x10
c0015a28:	c6 05 a0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0a0,0x1
c0015a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a32:	66 3d 1d 03          	cmp    ax,0x31d
c0015a36:	75 06                	jne    c0015a3e <sendKeyboardToken(KeyboardToken)+0x242>
c0015a38:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a41:	66 3d 1c 03          	cmp    ax,0x31c
c0015a45:	75 06                	jne    c0015a4d <sendKeyboardToken(KeyboardToken)+0x251>
c0015a47:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a50:	66 3d 1b 03          	cmp    ax,0x31b
c0015a54:	75 06                	jne    c0015a5c <sendKeyboardToken(KeyboardToken)+0x260>
c0015a56:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5f:	66 3d 1e 03          	cmp    ax,0x31e
c0015a63:	75 06                	jne    c0015a6b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a65:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6e:	66 3d 1f 03          	cmp    ax,0x31f
c0015a72:	75 06                	jne    c0015a7a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a74:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7d:	66 3d 1a 03          	cmp    ax,0x31a
c0015a81:	75 06                	jne    c0015a89 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a83:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a89:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a8d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a90:	83 f0 01             	xor    eax,0x1
c0015a93:	84 c0                	test   al,al
c0015a95:	74 77                	je     c0015b0e <sendKeyboardToken(KeyboardToken)+0x312>
c0015a97:	a0 a1 dd 02 c0       	mov    al,ds:0xc002dda1
c0015a9c:	84 c0                	test   al,al
c0015a9e:	74 41                	je     c0015ae1 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015aa0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015aa4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015aa8:	74 2b                	je     c0015ad5 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015aaa:	8b 15 a4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0a4
c0015ab0:	89 d0                	mov    eax,edx
c0015ab2:	c1 e0 02             	shl    eax,0x2
c0015ab5:	01 d0                	add    eax,edx
c0015ab7:	01 c0                	add    eax,eax
c0015ab9:	a3 a4 e0 02 c0       	mov    ds:0xc002e0a4,eax
c0015abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac1:	0f b7 c0             	movzx  eax,ax
c0015ac4:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ac7:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015acc:	01 d0                	add    eax,edx
c0015ace:	a3 a4 e0 02 c0       	mov    ds:0xc002e0a4,eax
c0015ad3:	eb 6d                	jmp    c0015b42 <sendKeyboardToken(KeyboardToken)+0x346>
c0015ad5:	c7 05 a4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a4,0x0
c0015adf:	eb 61                	jmp    c0015b42 <sendKeyboardToken(KeyboardToken)+0x346>
c0015ae1:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015ae6:	85 c0                	test   eax,eax
c0015ae8:	74 18                	je     c0015b02 <sendKeyboardToken(KeyboardToken)+0x306>
c0015aea:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015aef:	0f b6 c0             	movzx  eax,al
c0015af2:	83 ec 0c             	sub    esp,0xc
c0015af5:	50                   	push   eax
c0015af6:	e8 95 fc ff ff       	call   c0015790 <sendKeyToTerminal(unsigned char)>
c0015afb:	83 c4 10             	add    esp,0x10
c0015afe:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b02:	c7 05 a4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a4,0x0
c0015b0c:	eb 34                	jmp    c0015b42 <sendKeyboardToken(KeyboardToken)+0x346>
c0015b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b11:	66 3d 01 01          	cmp    ax,0x101
c0015b15:	75 2b                	jne    c0015b42 <sendKeyboardToken(KeyboardToken)+0x346>
c0015b17:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015b1c:	85 c0                	test   eax,eax
c0015b1e:	74 18                	je     c0015b38 <sendKeyboardToken(KeyboardToken)+0x33c>
c0015b20:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0015b25:	0f b6 c0             	movzx  eax,al
c0015b28:	83 ec 0c             	sub    esp,0xc
c0015b2b:	50                   	push   eax
c0015b2c:	e8 5f fc ff ff       	call   c0015790 <sendKeyToTerminal(unsigned char)>
c0015b31:	83 c4 10             	add    esp,0x10
c0015b34:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b38:	c7 05 a4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0a4,0x0
c0015b42:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b45:	83 f0 01             	xor    eax,0x1
c0015b48:	84 c0                	test   al,al
c0015b4a:	74 4c                	je     c0015b98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b4c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b4f:	83 f0 01             	xor    eax,0x1
c0015b52:	84 c0                	test   al,al
c0015b54:	74 42                	je     c0015b98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b56:	a0 a0 dd 02 c0       	mov    al,ds:0xc002dda0
c0015b5b:	83 f0 01             	xor    eax,0x1
c0015b5e:	84 c0                	test   al,al
c0015b60:	74 36                	je     c0015b98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b65:	66 83 f8 1f          	cmp    ax,0x1f
c0015b69:	76 09                	jbe    c0015b74 <sendKeyboardToken(KeyboardToken)+0x378>
c0015b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6e:	66 83 f8 7e          	cmp    ax,0x7e
c0015b72:	76 12                	jbe    c0015b86 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b77:	66 83 f8 0a          	cmp    ax,0xa
c0015b7b:	74 09                	je     c0015b86 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b80:	66 83 f8 08          	cmp    ax,0x8
c0015b84:	75 12                	jne    c0015b98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b89:	0f b6 c0             	movzx  eax,al
c0015b8c:	83 ec 0c             	sub    esp,0xc
c0015b8f:	50                   	push   eax
c0015b90:	e8 fb fb ff ff       	call   c0015790 <sendKeyToTerminal(unsigned char)>
c0015b95:	83 c4 10             	add    esp,0x10
c0015b98:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b9b:	83 f0 01             	xor    eax,0x1
c0015b9e:	84 c0                	test   al,al
c0015ba0:	74 4f                	je     c0015bf1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ba2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ba5:	83 f0 01             	xor    eax,0x1
c0015ba8:	84 c0                	test   al,al
c0015baa:	74 45                	je     c0015bf1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bac:	a0 a0 dd 02 c0       	mov    al,ds:0xc002dda0
c0015bb1:	84 c0                	test   al,al
c0015bb3:	74 3c                	je     c0015bf1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb8:	66 83 f8 3f          	cmp    ax,0x3f
c0015bbc:	76 33                	jbe    c0015bf1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc1:	66 83 f8 7f          	cmp    ax,0x7f
c0015bc5:	77 2a                	ja     c0015bf1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bca:	88 c2                	mov    dl,al
c0015bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bcf:	66 83 f8 5f          	cmp    ax,0x5f
c0015bd3:	76 04                	jbe    c0015bd9 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015bd5:	b0 20                	mov    al,0x20
c0015bd7:	eb 02                	jmp    c0015bdb <sendKeyboardToken(KeyboardToken)+0x3df>
c0015bd9:	b0 00                	mov    al,0x0
c0015bdb:	29 c2                	sub    edx,eax
c0015bdd:	88 d0                	mov    al,dl
c0015bdf:	83 e8 40             	sub    eax,0x40
c0015be2:	0f b6 c0             	movzx  eax,al
c0015be5:	83 ec 0c             	sub    esp,0xc
c0015be8:	50                   	push   eax
c0015be9:	e8 a2 fb ff ff       	call   c0015790 <sendKeyToTerminal(unsigned char)>
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf4:	66 3d 00 03          	cmp    ax,0x300
c0015bf8:	75 0f                	jne    c0015c09 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015bfa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bfd:	83 f0 01             	xor    eax,0x1
c0015c00:	84 c0                	test   al,al
c0015c02:	74 05                	je     c0015c09 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015c04:	e8 5c af ff ff       	call   c0010b65 <doTerminalCycle()>
c0015c09:	90                   	nop
c0015c0a:	c9                   	leave  
c0015c0b:	c3                   	ret    

c0015c0c <clearInternalKeybuffer(VgaText*)>:
c0015c0c:	55                   	push   ebp
c0015c0d:	89 e5                	mov    ebp,esp
c0015c0f:	83 ec 08             	sub    esp,0x8
c0015c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c15:	05 34 11 00 00       	add    eax,0x1134
c0015c1a:	83 ec 0c             	sub    esp,0xc
c0015c1d:	50                   	push   eax
c0015c1e:	e8 bc aa fe ff       	call   c00006df <strlen>
c0015c23:	83 c4 10             	add    esp,0x10
c0015c26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c29:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c2f:	83 ec 04             	sub    esp,0x4
c0015c32:	50                   	push   eax
c0015c33:	6a 00                	push   0x0
c0015c35:	52                   	push   edx
c0015c36:	e8 87 aa fe ff       	call   c00006c2 <memset>
c0015c3b:	83 c4 10             	add    esp,0x10
c0015c3e:	90                   	nop
c0015c3f:	c9                   	leave  
c0015c40:	c3                   	ret    

c0015c41 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c41:	55                   	push   ebp
c0015c42:	89 e5                	mov    ebp,esp
c0015c44:	83 ec 18             	sub    esp,0x18
c0015c47:	fb                   	sti    
c0015c48:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c4f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c53:	0f 84 8a 00 00 00    	je     c0015ce3 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c5c:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c62:	84 c0                	test   al,al
c0015c64:	75 11                	jne    c0015c77 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015c66:	e8 55 78 00 00       	call   c001d4c0 <lockScheduler()>
c0015c6b:	e8 8c 7b 00 00       	call   c001d7fc <schedule()>
c0015c70:	e8 4d 78 00 00       	call   c001d4c2 <unlockScheduler()>
c0015c75:	eb e2                	jmp    c0015c59 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015c77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015c7a:	8d 50 01             	lea    edx,[eax+0x1]
c0015c7d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c83:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015c89:	88 10                	mov    BYTE PTR [eax],dl
c0015c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015c94:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9a:	05 34 11 00 00       	add    eax,0x1134
c0015c9f:	83 ec 0c             	sub    esp,0xc
c0015ca2:	50                   	push   eax
c0015ca3:	e8 37 aa fe ff       	call   c00006df <strlen>
c0015ca8:	83 c4 10             	add    esp,0x10
c0015cab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cae:	81 c2 34 11 00 00    	add    edx,0x1134
c0015cb4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015cb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cba:	81 c2 34 11 00 00    	add    edx,0x1134
c0015cc0:	83 ec 04             	sub    esp,0x4
c0015cc3:	50                   	push   eax
c0015cc4:	51                   	push   ecx
c0015cc5:	52                   	push   edx
c0015cc6:	e8 9d a9 fe ff       	call   c0000668 <memmove>
c0015ccb:	83 c4 10             	add    esp,0x10
c0015cce:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015cd1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015cd4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015cd8:	0f 85 71 ff ff ff    	jne    c0015c4f <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015cde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce1:	eb 03                	jmp    c0015ce6 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015ce3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce6:	c9                   	leave  
c0015ce7:	c3                   	ret    

c0015ce8 <Keyboard::Keyboard(char const*)>:
c0015ce8:	83 ec 0c             	sub    esp,0xc
c0015ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cef:	83 ec 08             	sub    esp,0x8
c0015cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf6:	50                   	push   eax
c0015cf7:	e8 0c e2 ff ff       	call   c0013f08 <Device::Device(char const*)>
c0015cfc:	83 c4 10             	add    esp,0x10
c0015cff:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0015d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d08:	89 10                	mov    DWORD PTR [eax],edx
c0015d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d0e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d18:	c6 05 84 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc84,0x1
c0015d1f:	90                   	nop
c0015d20:	83 c4 0c             	add    esp,0xc
c0015d23:	c3                   	ret    

c0015d24 <Keyboard::~Keyboard()>:
c0015d24:	83 ec 0c             	sub    esp,0xc
c0015d27:	ba 68 a8 02 c0       	mov    edx,0xc002a868
c0015d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d30:	89 10                	mov    DWORD PTR [eax],edx
c0015d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d36:	83 ec 0c             	sub    esp,0xc
c0015d39:	50                   	push   eax
c0015d3a:	e8 ab de ff ff       	call   c0013bea <Device::~Device()>
c0015d3f:	83 c4 10             	add    esp,0x10
c0015d42:	90                   	nop
c0015d43:	83 c4 0c             	add    esp,0xc
c0015d46:	c3                   	ret    
c0015d47:	90                   	nop

c0015d48 <Keyboard::~Keyboard()>:
c0015d48:	83 ec 0c             	sub    esp,0xc
c0015d4b:	83 ec 0c             	sub    esp,0xc
c0015d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d52:	e8 cd ff ff ff       	call   c0015d24 <Keyboard::~Keyboard()>
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	83 ec 08             	sub    esp,0x8
c0015d5d:	68 5c 01 00 00       	push   0x15c
c0015d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d66:	e8 a6 ca ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0015d6b:	83 c4 10             	add    esp,0x10
c0015d6e:	83 c4 0c             	add    esp,0xc
c0015d71:	c3                   	ret    

c0015d72 <LogicalDisk::close(int, int, void*)>:
c0015d72:	83 c8 ff             	or     eax,0xffffffff
c0015d75:	c3                   	ret    

c0015d76 <LogicalDisk::~LogicalDisk()>:
c0015d76:	83 ec 0c             	sub    esp,0xc
c0015d79:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c0015d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d82:	89 10                	mov    DWORD PTR [eax],edx
c0015d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d88:	83 ec 0c             	sub    esp,0xc
c0015d8b:	50                   	push   eax
c0015d8c:	e8 59 de ff ff       	call   c0013bea <Device::~Device()>
c0015d91:	83 c4 10             	add    esp,0x10
c0015d94:	90                   	nop
c0015d95:	83 c4 0c             	add    esp,0xc
c0015d98:	c3                   	ret    
c0015d99:	90                   	nop

c0015d9a <LogicalDisk::~LogicalDisk()>:
c0015d9a:	83 ec 0c             	sub    esp,0xc
c0015d9d:	83 ec 0c             	sub    esp,0xc
c0015da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015da4:	e8 cd ff ff ff       	call   c0015d76 <LogicalDisk::~LogicalDisk()>
c0015da9:	83 c4 10             	add    esp,0x10
c0015dac:	83 ec 08             	sub    esp,0x8
c0015daf:	68 74 01 00 00       	push   0x174
c0015db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015db8:	e8 54 ca ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	83 c4 0c             	add    esp,0xc
c0015dc3:	c3                   	ret    

c0015dc4 <LogicalDisk::open(int, int, void*)>:
c0015dc4:	83 ec 18             	sub    esp,0x18
c0015dc7:	68 94 a8 02 c0       	push   0xc002a894
c0015dcc:	e8 94 40 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0015dd1:	83 c8 ff             	or     eax,0xffffffff
c0015dd4:	83 c4 1c             	add    esp,0x1c
c0015dd7:	c3                   	ret    

c0015dd8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015dd8:	53                   	push   ebx
c0015dd9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015ddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015de5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015deb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015df1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015df7:	77 10                	ja     c0015e09 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015df9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015dff:	89 d3                	mov    ebx,edx
c0015e01:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015e07:	72 05                	jb     c0015e0e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015e09:	83 c8 ff             	or     eax,0xffffffff
c0015e0c:	89 c2                	mov    edx,eax
c0015e0e:	5b                   	pop    ebx
c0015e0f:	c3                   	ret    

c0015e10 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e10:	56                   	push   esi
c0015e11:	83 c8 ff             	or     eax,0xffffffff
c0015e14:	53                   	push   ebx
c0015e15:	89 c2                	mov    edx,eax
c0015e17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e1b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e23:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e29:	77 27                	ja     c0015e52 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e2b:	89 d8                	mov    eax,ebx
c0015e2d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015e33:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015e39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e3e:	89 c2                	mov    edx,eax
c0015e40:	73 10                	jae    c0015e52 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e42:	89 c8                	mov    eax,ecx
c0015e44:	89 da                	mov    edx,ebx
c0015e46:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e4c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e52:	5b                   	pop    ebx
c0015e53:	5e                   	pop    esi
c0015e54:	c3                   	ret    
c0015e55:	90                   	nop

c0015e56 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e56:	83 ec 1c             	sub    esp,0x1c
c0015e59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015e70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e7c:	83 ec 08             	sub    esp,0x8
c0015e7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e83:	50                   	push   eax
c0015e84:	e8 7f e0 ff ff       	call   c0013f08 <Device::Device(char const*)>
c0015e89:	83 c4 10             	add    esp,0x10
c0015e8c:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c0015e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e95:	89 10                	mov    DWORD PTR [eax],edx
c0015e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e9b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ea6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eb1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015ebb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ebf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ec3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ec7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015ecd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ed3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015eda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ede:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015ee4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ef2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015efc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f06:	90                   	nop
c0015f07:	83 c4 1c             	add    esp,0x1c
c0015f0a:	c3                   	ret    
c0015f0b:	90                   	nop

c0015f0c <LogicalDisk::assignDriveLetter()>:
c0015f0c:	55                   	push   ebp
c0015f0d:	57                   	push   edi
c0015f0e:	56                   	push   esi
c0015f0f:	53                   	push   ebx
c0015f10:	83 ec 14             	sub    esp,0x14
c0015f13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f17:	8b 3d c0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0c0
c0015f1d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f23:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f27:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015f2d:	8b 3d c4 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0c4
c0015f33:	3c 01                	cmp    al,0x1
c0015f35:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015f39:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015f3d:	19 c0                	sbb    eax,eax
c0015f3f:	83 e0 02             	and    eax,0x2
c0015f42:	83 c0 41             	add    eax,0x41
c0015f45:	0f be e8             	movsx  ebp,al
c0015f48:	3c 43                	cmp    al,0x43
c0015f4a:	75 10                	jne    c0015f5c <LogicalDisk::assignDriveLetter()+0x50>
c0015f4c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f53:	75 5d                	jne    c0015fb2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f55:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f5a:	75 56                	jne    c0015fb2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f5c:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f5f:	ba 01 00 00 00       	mov    edx,0x1
c0015f64:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f68:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f6c:	d3 e2                	shl    edx,cl
c0015f6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f72:	89 d7                	mov    edi,edx
c0015f74:	89 d6                	mov    esi,edx
c0015f76:	c1 ff 1f             	sar    edi,0x1f
c0015f79:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f7d:	21 f9                	and    ecx,edi
c0015f7f:	09 d1                	or     ecx,edx
c0015f81:	75 2f                	jne    c0015fb2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f83:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f8b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f91:	09 f2                	or     edx,esi
c0015f93:	89 15 c0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c0,edx
c0015f99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f9d:	09 fa                	or     edx,edi
c0015f9f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015fa3:	89 15 c4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0c4,edx
c0015fa9:	89 1c bd e0 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1f20],ebx
c0015fb0:	eb 08                	jmp    c0015fba <LogicalDisk::assignDriveLetter()+0xae>
c0015fb2:	45                   	inc    ebp
c0015fb3:	40                   	inc    eax
c0015fb4:	3c 5b                	cmp    al,0x5b
c0015fb6:	75 90                	jne    c0015f48 <LogicalDisk::assignDriveLetter()+0x3c>
c0015fb8:	31 c0                	xor    eax,eax
c0015fba:	83 c4 14             	add    esp,0x14
c0015fbd:	5b                   	pop    ebx
c0015fbe:	5e                   	pop    esi
c0015fbf:	5f                   	pop    edi
c0015fc0:	5d                   	pop    ebp
c0015fc1:	c3                   	ret    

c0015fc2 <LogicalDisk::mount()>:
c0015fc2:	56                   	push   esi
c0015fc3:	53                   	push   ebx
c0015fc4:	51                   	push   ecx
c0015fc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fc9:	8b 1d 48 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc48
c0015fcf:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015fd9:	85 db                	test   ebx,ebx
c0015fdb:	74 50                	je     c001602d <LogicalDisk::mount()+0x6b>
c0015fdd:	e8 c9 74 00 00       	call   c001d4ab <getIRQNestingLevel()>
c0015fe2:	52                   	push   edx
c0015fe3:	52                   	push   edx
c0015fe4:	50                   	push   eax
c0015fe5:	68 b8 a8 02 c0       	push   0xc002a8b8
c0015fea:	e8 02 c9 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0015fef:	83 c4 0c             	add    esp,0xc
c0015ff2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015ff9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015ffb:	83 e8 41             	sub    eax,0x41
c0015ffe:	50                   	push   eax
c0015fff:	56                   	push   esi
c0016000:	53                   	push   ebx
c0016001:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016004:	83 c4 10             	add    esp,0x10
c0016007:	84 c0                	test   al,al
c0016009:	74 08                	je     c0016013 <LogicalDisk::mount()+0x51>
c001600b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016011:	eb 1c                	jmp    c001602f <LogicalDisk::mount()+0x6d>
c0016013:	e8 93 74 00 00       	call   c001d4ab <getIRQNestingLevel()>
c0016018:	51                   	push   ecx
c0016019:	51                   	push   ecx
c001601a:	50                   	push   eax
c001601b:	68 d3 a8 02 c0       	push   0xc002a8d3
c0016020:	e8 cc c8 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0016025:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016028:	83 c4 10             	add    esp,0x10
c001602b:	eb ac                	jmp    c0015fd9 <LogicalDisk::mount()+0x17>
c001602d:	31 c0                	xor    eax,eax
c001602f:	5a                   	pop    edx
c0016030:	5b                   	pop    ebx
c0016031:	5e                   	pop    esi
c0016032:	c3                   	ret    
c0016033:	90                   	nop

c0016034 <LogicalDisk::unmount()>:
c0016034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016038:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016042:	c3                   	ret    
c0016043:	90                   	nop

c0016044 <LogicalDisk::eject()>:
c0016044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016048:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001604e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016050:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016054:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016057:	90                   	nop

c0016058 <LogicalDisk::unassignDriveLetter()>:
c0016058:	57                   	push   edi
c0016059:	56                   	push   esi
c001605a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001605e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016065:	84 c9                	test   cl,cl
c0016067:	75 0f                	jne    c0016078 <LogicalDisk::unassignDriveLetter()+0x20>
c0016069:	c7 44 24 0c ee a8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a8ee
c0016071:	5e                   	pop    esi
c0016072:	5f                   	pop    edi
c0016073:	e9 ed 3d 00 00       	jmp    c0019e65 <Krnl::panic(char const*)>
c0016078:	83 e9 41             	sub    ecx,0x41
c001607b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016082:	b8 01 00 00 00       	mov    eax,0x1
c0016087:	c7 04 8d e0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1f20],0x0
c0016092:	d3 e0                	shl    eax,cl
c0016094:	89 c7                	mov    edi,eax
c0016096:	f7 d0                	not    eax
c0016098:	c1 ff 1f             	sar    edi,0x1f
c001609b:	21 05 c0 e0 02 c0    	and    DWORD PTR ds:0xc002e0c0,eax
c00160a1:	89 fe                	mov    esi,edi
c00160a3:	f7 d6                	not    esi
c00160a5:	21 35 c4 e0 02 c0    	and    DWORD PTR ds:0xc002e0c4,esi
c00160ab:	5e                   	pop    esi
c00160ac:	5f                   	pop    edi
c00160ad:	c3                   	ret    

c00160ae <LogicalDisk::read(unsigned long long, int, void*)>:
c00160ae:	57                   	push   edi
c00160af:	56                   	push   esi
c00160b0:	53                   	push   ebx
c00160b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160b9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160c1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160c7:	77 41                	ja     c001610a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00160c9:	99                   	cdq    
c00160ca:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160d0:	01 c8                	add    eax,ecx
c00160d2:	11 da                	adc    edx,ebx
c00160d4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160da:	19 d7                	sbb    edi,edx
c00160dc:	72 33                	jb     c0016111 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00160de:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160e4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160ee:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160f2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160f8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016102:	5b                   	pop    ebx
c0016103:	5e                   	pop    esi
c0016104:	5f                   	pop    edi
c0016105:	e9 c2 0a 00 00       	jmp    c0016bcc <VCache::read(unsigned long long, int, void*)>
c001610a:	b8 05 00 00 00       	mov    eax,0x5
c001610f:	eb 05                	jmp    c0016116 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016111:	b8 07 00 00 00       	mov    eax,0x7
c0016116:	5b                   	pop    ebx
c0016117:	5e                   	pop    esi
c0016118:	5f                   	pop    edi
c0016119:	c3                   	ret    

c001611a <LogicalDisk::write(unsigned long long, int, void*)>:
c001611a:	57                   	push   edi
c001611b:	56                   	push   esi
c001611c:	53                   	push   ebx
c001611d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016121:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016125:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016129:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001612d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016133:	77 41                	ja     c0016176 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016135:	99                   	cdq    
c0016136:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001613c:	01 c8                	add    eax,ecx
c001613e:	11 da                	adc    edx,ebx
c0016140:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016146:	19 d7                	sbb    edi,edx
c0016148:	72 33                	jb     c001617d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001614a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016150:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016156:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001615a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001615e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016164:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001616a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001616e:	5b                   	pop    ebx
c001616f:	5e                   	pop    esi
c0016170:	5f                   	pop    edi
c0016171:	e9 60 09 00 00       	jmp    c0016ad6 <VCache::write(unsigned long long, int, void*)>
c0016176:	b8 05 00 00 00       	mov    eax,0x5
c001617b:	eb 05                	jmp    c0016182 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001617d:	b8 07 00 00 00       	mov    eax,0x7
c0016182:	5b                   	pop    ebx
c0016183:	5e                   	pop    esi
c0016184:	5f                   	pop    edi
c0016185:	c3                   	ret    

c0016186 <Mouse::Mouse(char const*)>:
c0016186:	83 ec 0c             	sub    esp,0xc
c0016189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001618d:	83 ec 08             	sub    esp,0x8
c0016190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016194:	50                   	push   eax
c0016195:	e8 6e dd ff ff       	call   c0013f08 <Device::Device(char const*)>
c001619a:	83 c4 10             	add    esp,0x10
c001619d:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c00161a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161a6:	89 10                	mov    DWORD PTR [eax],edx
c00161a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ac:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00161b6:	90                   	nop
c00161b7:	83 c4 0c             	add    esp,0xc
c00161ba:	c3                   	ret    
c00161bb:	90                   	nop

c00161bc <Mouse::~Mouse()>:
c00161bc:	83 ec 0c             	sub    esp,0xc
c00161bf:	ba 44 a9 02 c0       	mov    edx,0xc002a944
c00161c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c8:	89 10                	mov    DWORD PTR [eax],edx
c00161ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ce:	83 ec 0c             	sub    esp,0xc
c00161d1:	50                   	push   eax
c00161d2:	e8 13 da ff ff       	call   c0013bea <Device::~Device()>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	90                   	nop
c00161db:	83 c4 0c             	add    esp,0xc
c00161de:	c3                   	ret    
c00161df:	90                   	nop

c00161e0 <Mouse::~Mouse()>:
c00161e0:	83 ec 0c             	sub    esp,0xc
c00161e3:	83 ec 0c             	sub    esp,0xc
c00161e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ea:	e8 cd ff ff ff       	call   c00161bc <Mouse::~Mouse()>
c00161ef:	83 c4 10             	add    esp,0x10
c00161f2:	83 ec 08             	sub    esp,0x8
c00161f5:	68 58 01 00 00       	push   0x158
c00161fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161fe:	e8 0e c6 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0016203:	83 c4 10             	add    esp,0x10
c0016206:	83 c4 0c             	add    esp,0xc
c0016209:	c3                   	ret    

c001620a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001620a:	55                   	push   ebp
c001620b:	57                   	push   edi
c001620c:	56                   	push   esi
c001620d:	53                   	push   ebx
c001620e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016214:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001621b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016222:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016229:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016230:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016234:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016238:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001623f:	e8 c0 dd ff ff       	call   c0014004 <Device::getName()>
c0016244:	5a                   	pop    edx
c0016245:	59                   	pop    ecx
c0016246:	50                   	push   eax
c0016247:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001624b:	55                   	push   ebp
c001624c:	e8 10 a5 fe ff       	call   c0000761 <strcpy>
c0016251:	5b                   	pop    ebx
c0016252:	58                   	pop    eax
c0016253:	68 68 a9 02 c0       	push   0xc002a968
c0016258:	55                   	push   ebp
c0016259:	e8 ba a5 fe ff       	call   c0000818 <strcat>
c001625e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016265:	e8 b8 93 ff ff       	call   c000f622 <malloc>
c001626a:	83 c4 0c             	add    esp,0xc
c001626d:	89 c3                	mov    ebx,eax
c001626f:	57                   	push   edi
c0016270:	56                   	push   esi
c0016271:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016275:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016279:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016280:	55                   	push   ebp
c0016281:	50                   	push   eax
c0016282:	e8 cf fb ff ff       	call   c0015e56 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016287:	83 c4 14             	add    esp,0x14
c001628a:	53                   	push   ebx
c001628b:	e8 7c fc ff ff       	call   c0015f0c <LogicalDisk::assignDriveLetter()>
c0016290:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016293:	89 c6                	mov    esi,eax
c0016295:	e8 28 fd ff ff       	call   c0015fc2 <LogicalDisk::mount()>
c001629a:	58                   	pop    eax
c001629b:	5a                   	pop    edx
c001629c:	53                   	push   ebx
c001629d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00162a4:	e8 6f da ff ff       	call   c0013d18 <Device::addChild(Device*)>
c00162a9:	59                   	pop    ecx
c00162aa:	89 f0                	mov    eax,esi
c00162ac:	5b                   	pop    ebx
c00162ad:	0f be f0             	movsx  esi,al
c00162b0:	56                   	push   esi
c00162b1:	68 73 a9 02 c0       	push   0xc002a973
c00162b6:	e8 36 c6 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00162bb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162c1:	5b                   	pop    ebx
c00162c2:	5e                   	pop    esi
c00162c3:	5f                   	pop    edi
c00162c4:	5d                   	pop    ebp
c00162c5:	c3                   	ret    

c00162c6 <createPartitionsForDisk(PhysicalDisk*)>:
c00162c6:	55                   	push   ebp
c00162c7:	57                   	push   edi
c00162c8:	56                   	push   esi
c00162c9:	53                   	push   ebx
c00162ca:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00162d0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00162d7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00162dd:	3d 00 02 00 00       	cmp    eax,0x200
c00162e2:	74 27                	je     c001630b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00162e4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00162ea:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00162f0:	83 ec 10             	sub    esp,0x10
c00162f3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00162f7:	99                   	cdq    
c00162f8:	c1 e6 0a             	shl    esi,0xa
c00162fb:	52                   	push   edx
c00162fc:	89 fd                	mov    ebp,edi
c00162fe:	50                   	push   eax
c00162ff:	55                   	push   ebp
c0016300:	56                   	push   esi
c0016301:	e8 46 fe 00 00       	call   c002614c <__udivdi3>
c0016306:	e9 b1 00 00 00       	jmp    c00163bc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001630b:	83 ec 0c             	sub    esp,0xc
c001630e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016310:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016314:	56                   	push   esi
c0016315:	6a 01                	push   0x1
c0016317:	6a 00                	push   0x0
c0016319:	6a 00                	push   0x0
c001631b:	53                   	push   ebx
c001631c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001631f:	83 c4 20             	add    esp,0x20
c0016322:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001632a:	75 0a                	jne    c0016336 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001632c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016334:	74 2c                	je     c0016362 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016336:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001633c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016342:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016348:	83 ec 10             	sub    esp,0x10
c001634b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001634f:	89 f7                	mov    edi,esi
c0016351:	c1 e0 0a             	shl    eax,0xa
c0016354:	c1 ff 1f             	sar    edi,0x1f
c0016357:	57                   	push   edi
c0016358:	56                   	push   esi
c0016359:	52                   	push   edx
c001635a:	50                   	push   eax
c001635b:	e8 ec fd 00 00       	call   c002614c <__udivdi3>
c0016360:	eb 5a                	jmp    c00163bc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016362:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016369:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016370:	83 e1 7f             	and    ecx,0x7f
c0016373:	83 e0 7f             	and    eax,0x7f
c0016376:	01 c1                	add    ecx,eax
c0016378:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001637f:	83 e0 7f             	and    eax,0x7f
c0016382:	01 c1                	add    ecx,eax
c0016384:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001638b:	83 e0 7f             	and    eax,0x7f
c001638e:	00 c1                	add    cl,al
c0016390:	74 41                	je     c00163d3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016392:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016398:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001639e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163a4:	83 ec 10             	sub    esp,0x10
c00163a7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163ab:	89 f7                	mov    edi,esi
c00163ad:	c1 e0 0a             	shl    eax,0xa
c00163b0:	c1 ff 1f             	sar    edi,0x1f
c00163b3:	57                   	push   edi
c00163b4:	56                   	push   esi
c00163b5:	52                   	push   edx
c00163b6:	50                   	push   eax
c00163b7:	e8 90 fd 00 00       	call   c002614c <__udivdi3>
c00163bc:	83 c4 14             	add    esp,0x14
c00163bf:	52                   	push   edx
c00163c0:	50                   	push   eax
c00163c1:	6a 00                	push   0x0
c00163c3:	6a 00                	push   0x0
c00163c5:	53                   	push   ebx
c00163c6:	e8 3f fe ff ff       	call   c001620a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163cb:	83 c4 20             	add    esp,0x20
c00163ce:	e9 79 01 00 00       	jmp    c001654c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00163d3:	89 f0                	mov    eax,esi
c00163d5:	31 f6                	xor    esi,esi
c00163d7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00163de:	75 02                	jne    c00163e2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00163e0:	89 f1                	mov    ecx,esi
c00163e2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00163e9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00163f0:	c1 e2 08             	shl    edx,0x8
c00163f3:	c1 e7 10             	shl    edi,0x10
c00163f6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00163fe:	09 fa                	or     edx,edi
c0016400:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016408:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001640f:	83 c0 10             	add    eax,0x10
c0016412:	09 fa                	or     edx,edi
c0016414:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001641b:	c1 e7 18             	shl    edi,0x18
c001641e:	09 fa                	or     edx,edi
c0016420:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016427:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001642b:	c1 e7 10             	shl    edi,0x10
c001642e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016435:	c1 e2 08             	shl    edx,0x8
c0016438:	09 fa                	or     edx,edi
c001643a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016441:	09 fa                	or     edx,edi
c0016443:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001644a:	c1 e7 18             	shl    edi,0x18
c001644d:	09 fa                	or     edx,edi
c001644f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016453:	46                   	inc    esi
c0016454:	83 fe 04             	cmp    esi,0x4
c0016457:	0f 85 7a ff ff ff    	jne    c00163d7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001645d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016461:	83 f0 01             	xor    eax,0x1
c0016464:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016468:	75 57                	jne    c00164c1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001646a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001646e:	83 f0 01             	xor    eax,0x1
c0016471:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016475:	75 4a                	jne    c00164c1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016477:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001647b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016483:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001648b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016491:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016497:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001649d:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164a1:	89 f7                	mov    edi,esi
c00164a3:	c1 e0 0a             	shl    eax,0xa
c00164a6:	c1 ff 1f             	sar    edi,0x1f
c00164a9:	57                   	push   edi
c00164aa:	56                   	push   esi
c00164ab:	52                   	push   edx
c00164ac:	50                   	push   eax
c00164ad:	e8 9a fc 00 00       	call   c002614c <__udivdi3>
c00164b2:	83 c4 10             	add    esp,0x10
c00164b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164bd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00164c1:	84 c9                	test   cl,cl
c00164c3:	74 53                	je     c0016518 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00164c5:	0f b6 c9             	movzx  ecx,cl
c00164c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164d0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00164d4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00164d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00164e0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00164e4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00164e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00164f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164f8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00164fc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016500:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016504:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016508:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001650c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016510:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016514:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016518:	31 ed                	xor    ebp,ebp
c001651a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001651e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016522:	89 f8                	mov    eax,edi
c0016524:	09 f0                	or     eax,esi
c0016526:	74 1e                	je     c0016546 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016528:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001652c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016530:	89 d1                	mov    ecx,edx
c0016532:	09 c1                	or     ecx,eax
c0016534:	74 10                	je     c0016546 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016536:	83 ec 0c             	sub    esp,0xc
c0016539:	57                   	push   edi
c001653a:	56                   	push   esi
c001653b:	52                   	push   edx
c001653c:	50                   	push   eax
c001653d:	53                   	push   ebx
c001653e:	e8 c7 fc ff ff       	call   c001620a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016543:	83 c4 20             	add    esp,0x20
c0016546:	45                   	inc    ebp
c0016547:	83 fd 04             	cmp    ebp,0x4
c001654a:	75 ce                	jne    c001651a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001654c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016552:	5b                   	pop    ebx
c0016553:	5e                   	pop    esi
c0016554:	5f                   	pop    edi
c0016555:	5d                   	pop    ebp
c0016556:	c3                   	ret    
c0016557:	90                   	nop

c0016558 <Serial::Serial(char const*)>:
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001655f:	83 ec 08             	sub    esp,0x8
c0016562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016566:	50                   	push   eax
c0016567:	e8 9c d9 ff ff       	call   c0013f08 <Device::Device(char const*)>
c001656c:	83 c4 10             	add    esp,0x10
c001656f:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c0016574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016578:	89 10                	mov    DWORD PTR [eax],edx
c001657a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001657e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016588:	90                   	nop
c0016589:	83 c4 0c             	add    esp,0xc
c001658c:	c3                   	ret    
c001658d:	90                   	nop

c001658e <Serial::~Serial()>:
c001658e:	83 ec 0c             	sub    esp,0xc
c0016591:	ba a0 a9 02 c0       	mov    edx,0xc002a9a0
c0016596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659a:	89 10                	mov    DWORD PTR [eax],edx
c001659c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a0:	83 ec 0c             	sub    esp,0xc
c00165a3:	50                   	push   eax
c00165a4:	e8 41 d6 ff ff       	call   c0013bea <Device::~Device()>
c00165a9:	83 c4 10             	add    esp,0x10
c00165ac:	90                   	nop
c00165ad:	83 c4 0c             	add    esp,0xc
c00165b0:	c3                   	ret    
c00165b1:	90                   	nop

c00165b2 <Serial::~Serial()>:
c00165b2:	83 ec 0c             	sub    esp,0xc
c00165b5:	83 ec 0c             	sub    esp,0xc
c00165b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165bc:	e8 cd ff ff ff       	call   c001658e <Serial::~Serial()>
c00165c1:	83 c4 10             	add    esp,0x10
c00165c4:	83 ec 08             	sub    esp,0x8
c00165c7:	68 58 01 00 00       	push   0x158
c00165cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165d0:	e8 3c c2 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	83 c4 0c             	add    esp,0xc
c00165db:	c3                   	ret    

c00165dc <Timer::Timer(char const*)>:
c00165dc:	83 ec 0c             	sub    esp,0xc
c00165df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165e3:	83 ec 08             	sub    esp,0x8
c00165e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ea:	50                   	push   eax
c00165eb:	e8 18 d9 ff ff       	call   c0013f08 <Device::Device(char const*)>
c00165f0:	83 c4 10             	add    esp,0x10
c00165f3:	ba e4 a9 02 c0       	mov    edx,0xc002a9e4
c00165f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165fc:	89 10                	mov    DWORD PTR [eax],edx
c00165fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016602:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001660c:	90                   	nop
c001660d:	83 c4 0c             	add    esp,0xc
c0016610:	c3                   	ret    
c0016611:	90                   	nop

c0016612 <Timer::~Timer()>:
c0016612:	83 ec 0c             	sub    esp,0xc
c0016615:	ba e4 a9 02 c0       	mov    edx,0xc002a9e4
c001661a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001661e:	89 10                	mov    DWORD PTR [eax],edx
c0016620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016624:	83 ec 0c             	sub    esp,0xc
c0016627:	50                   	push   eax
c0016628:	e8 bd d5 ff ff       	call   c0013bea <Device::~Device()>
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	90                   	nop
c0016631:	83 c4 0c             	add    esp,0xc
c0016634:	c3                   	ret    
c0016635:	90                   	nop

c0016636 <Timer::~Timer()>:
c0016636:	83 ec 0c             	sub    esp,0xc
c0016639:	83 ec 0c             	sub    esp,0xc
c001663c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016640:	e8 cd ff ff ff       	call   c0016612 <Timer::~Timer()>
c0016645:	83 c4 10             	add    esp,0x10
c0016648:	83 ec 08             	sub    esp,0x8
c001664b:	68 5c 01 00 00       	push   0x15c
c0016650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016654:	e8 b8 c1 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0016659:	83 c4 10             	add    esp,0x10
c001665c:	83 c4 0c             	add    esp,0xc
c001665f:	c3                   	ret    

c0016660 <Timer::read()>:
c0016660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016664:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001666a:	c3                   	ret    

c001666b <timerHandler(unsigned long long)>:
c001666b:	55                   	push   ebp
c001666c:	57                   	push   edi
c001666d:	56                   	push   esi
c001666e:	53                   	push   ebx
c001666f:	83 ec 0c             	sub    esp,0xc
c0016672:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016676:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001667a:	01 35 50 e1 02 c0    	add    DWORD PTR ds:0xc002e150,esi
c0016680:	11 3d 54 e1 02 c0    	adc    DWORD PTR ds:0xc002e154,edi
c0016686:	80 3d cd da 02 c0 00 	cmp    BYTE PTR ds:0xc002dacd,0x0
c001668d:	0f 84 07 01 00 00    	je     c001679a <timerHandler(unsigned long long)+0x12f>
c0016693:	e8 4f 6e 00 00       	call   c001d4e7 <lockStuff()>
c0016698:	83 ec 0c             	sub    esp,0xc
c001669b:	68 1c 10 03 c0       	push   0xc003101c
c00166a0:	e8 19 1b 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166a5:	c7 04 24 1c 10 03 c0 	mov    DWORD PTR [esp],0xc003101c
c00166ac:	89 c3                	mov    ebx,eax
c00166ae:	e8 13 1b 01 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166b3:	83 c4 10             	add    esp,0x10
c00166b6:	84 c0                	test   al,al
c00166b8:	74 60                	je     c001671a <timerHandler(unsigned long long)+0xaf>
c00166ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166c0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00166c3:	85 c0                	test   eax,eax
c00166c5:	0f 85 91 00 00 00    	jne    c001675c <timerHandler(unsigned long long)+0xf1>
c00166cb:	e9 be 00 00 00       	jmp    c001678e <timerHandler(unsigned long long)+0x123>
c00166d0:	83 ec 0c             	sub    esp,0xc
c00166d3:	55                   	push   ebp
c00166d4:	e8 ff 73 00 00       	call   c001dad8 <unblockTask(ThreadControlBlock*)>
c00166d9:	83 c4 10             	add    esp,0x10
c00166dc:	39 eb                	cmp    ebx,ebp
c00166de:	75 12                	jne    c00166f2 <timerHandler(unsigned long long)+0x87>
c00166e0:	83 ec 0c             	sub    esp,0xc
c00166e3:	68 1c 10 03 c0       	push   0xc003101c
c00166e8:	e8 d1 1a 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166ed:	89 c3                	mov    ebx,eax
c00166ef:	83 c4 10             	add    esp,0x10
c00166f2:	83 ec 0c             	sub    esp,0xc
c00166f5:	68 1c 10 03 c0       	push   0xc003101c
c00166fa:	e8 c7 1a 01 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166ff:	83 c4 10             	add    esp,0x10
c0016702:	84 c0                	test   al,al
c0016704:	75 b4                	jne    c00166ba <timerHandler(unsigned long long)+0x4f>
c0016706:	83 ec 0c             	sub    esp,0xc
c0016709:	68 1c 10 03 c0       	push   0xc003101c
c001670e:	e8 ab 1a 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016713:	83 c4 10             	add    esp,0x10
c0016716:	39 d8                	cmp    eax,ebx
c0016718:	74 a0                	je     c00166ba <timerHandler(unsigned long long)+0x4f>
c001671a:	83 ec 0c             	sub    esp,0xc
c001671d:	68 1c 10 03 c0       	push   0xc003101c
c0016722:	e8 97 1a 01 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016727:	c7 04 24 1c 10 03 c0 	mov    DWORD PTR [esp],0xc003101c
c001672e:	89 c5                	mov    ebp,eax
c0016730:	e8 ad 1a 01 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016735:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016738:	83 c4 10             	add    esp,0x10
c001673b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001673e:	39 15 50 e1 02 c0    	cmp    DWORD PTR ds:0xc002e150,edx
c0016744:	a1 54 e1 02 c0       	mov    eax,ds:0xc002e154
c0016749:	19 c8                	sbb    eax,ecx
c001674b:	73 83                	jae    c00166d0 <timerHandler(unsigned long long)+0x65>
c001674d:	50                   	push   eax
c001674e:	50                   	push   eax
c001674f:	55                   	push   ebp
c0016750:	68 1c 10 03 c0       	push   0xc003101c
c0016755:	e8 36 1b 01 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001675a:	eb 93                	jmp    c00166ef <timerHandler(unsigned long long)+0x84>
c001675c:	80 3d cc da 02 c0 00 	cmp    BYTE PTR ds:0xc002dacc,0x0
c0016763:	74 29                	je     c001678e <timerHandler(unsigned long long)+0x123>
c0016765:	39 c6                	cmp    esi,eax
c0016767:	bb 00 00 00 00       	mov    ebx,0x0
c001676c:	19 df                	sbb    edi,ebx
c001676e:	72 19                	jb     c0016789 <timerHandler(unsigned long long)+0x11e>
c0016770:	e8 4b 6d 00 00       	call   c001d4c0 <lockScheduler()>
c0016775:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001677a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001677d:	e8 7a 70 00 00       	call   c001d7fc <schedule()>
c0016782:	e8 3b 6d 00 00       	call   c001d4c2 <unlockScheduler()>
c0016787:	eb 05                	jmp    c001678e <timerHandler(unsigned long long)+0x123>
c0016789:	29 f0                	sub    eax,esi
c001678b:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001678e:	83 c4 0c             	add    esp,0xc
c0016791:	5b                   	pop    ebx
c0016792:	5e                   	pop    esi
c0016793:	5f                   	pop    edi
c0016794:	5d                   	pop    ebp
c0016795:	e9 e7 70 00 00       	jmp    c001d881 <unlockStuff()>
c001679a:	83 c4 0c             	add    esp,0xc
c001679d:	5b                   	pop    ebx
c001679e:	5e                   	pop    esi
c001679f:	5f                   	pop    edi
c00167a0:	5d                   	pop    ebp
c00167a1:	c3                   	ret    

c00167a2 <setupTimer(int)>:
c00167a2:	57                   	push   edi
c00167a3:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00167a8:	56                   	push   esi
c00167a9:	53                   	push   ebx
c00167aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167bd:	e8 42 d8 ff ff       	call   c0014004 <Device::getName()>
c00167c2:	83 c4 10             	add    esp,0x10
c00167c5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00167c8:	0f 85 8d 00 00 00    	jne    c001685b <setupTimer(int)+0xb9>
c00167ce:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00167d3:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00167da:	74 7f                	je     c001685b <setupTimer(int)+0xb9>
c00167dc:	83 ec 0c             	sub    esp,0xc
c00167df:	68 5c 01 00 00       	push   0x15c
c00167e4:	e8 39 8e ff ff       	call   c000f622 <malloc>
c00167e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ec:	89 c3                	mov    ebx,eax
c00167ee:	e8 3b f5 00 00       	call   c0025d2e <PIT::PIT()>
c00167f3:	59                   	pop    ecx
c00167f4:	5f                   	pop    edi
c00167f5:	53                   	push   ebx
c00167f6:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c00167fc:	e8 17 d5 ff ff       	call   c0013d18 <Device::addChild(Device*)>
c0016801:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016803:	6a 00                	push   0x0
c0016805:	6a 00                	push   0x0
c0016807:	56                   	push   esi
c0016808:	53                   	push   ebx
c0016809:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001680c:	83 c4 14             	add    esp,0x14
c001680f:	68 60 01 00 00       	push   0x160
c0016814:	e8 09 8e ff ff       	call   c000f622 <malloc>
c0016819:	89 04 24             	mov    DWORD PTR [esp],eax
c001681c:	89 c7                	mov    edi,eax
c001681e:	e8 bb f3 00 00       	call   c0025bde <APICTimer::APICTimer()>
c0016823:	6a 00                	push   0x0
c0016825:	6a 00                	push   0x0
c0016827:	56                   	push   esi
c0016828:	57                   	push   edi
c0016829:	e8 b2 f2 00 00       	call   c0025ae0 <APICTimer::open(int, int, void*)>
c001682e:	83 c4 20             	add    esp,0x20
c0016831:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016833:	6a 00                	push   0x0
c0016835:	6a 00                	push   0x0
c0016837:	6a 00                	push   0x0
c0016839:	53                   	push   ebx
c001683a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001683d:	58                   	pop    eax
c001683e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0016843:	5a                   	pop    edx
c0016844:	57                   	push   edi
c0016845:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001684b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016851:	e8 c2 d4 ff ff       	call   c0013d18 <Device::addChild(Device*)>
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	eb 33                	jmp    c001688e <setupTimer(int)+0xec>
c001685b:	83 ec 0c             	sub    esp,0xc
c001685e:	68 5c 01 00 00       	push   0x15c
c0016863:	e8 ba 8d ff ff       	call   c000f622 <malloc>
c0016868:	89 04 24             	mov    DWORD PTR [esp],eax
c001686b:	89 c3                	mov    ebx,eax
c001686d:	e8 bc f4 00 00       	call   c0025d2e <PIT::PIT()>
c0016872:	58                   	pop    eax
c0016873:	5a                   	pop    edx
c0016874:	53                   	push   ebx
c0016875:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c001687b:	e8 98 d4 ff ff       	call   c0013d18 <Device::addChild(Device*)>
c0016880:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016882:	6a 00                	push   0x0
c0016884:	6a 00                	push   0x0
c0016886:	56                   	push   esi
c0016887:	53                   	push   ebx
c0016888:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001688b:	83 c4 20             	add    esp,0x20
c001688e:	89 d8                	mov    eax,ebx
c0016890:	5b                   	pop    ebx
c0016891:	5e                   	pop    esi
c0016892:	5f                   	pop    edi
c0016893:	c3                   	ret    

c0016894 <VCache::VCache(PhysicalDisk*)>:
c0016894:	53                   	push   ebx
c0016895:	83 ec 18             	sub    esp,0x18
c0016898:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c001689d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a1:	89 10                	mov    DWORD PTR [eax],edx
c00168a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00168ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00168b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168bd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00168c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00168cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00168d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00168dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00168e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00168fb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016906:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001690a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016916:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001691a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016925:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001692d:	83 ec 0c             	sub    esp,0xc
c0016930:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016934:	e8 e9 8c ff ff       	call   c000f622 <malloc>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	89 c3                	mov    ebx,eax
c001693e:	83 ec 0c             	sub    esp,0xc
c0016941:	53                   	push   ebx
c0016942:	e8 99 6c 00 00       	call   c001d5e0 <Mutex::Mutex()>
c0016947:	83 c4 10             	add    esp,0x10
c001694a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016955:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016959:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001695c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016960:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016967:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001696b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016975:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016978:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001697c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016982:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016988:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001698c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001698f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016996:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001699a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001699e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169a4:	05 00 01 00 00       	add    eax,0x100
c00169a9:	c1 e0 04             	shl    eax,0x4
c00169ac:	83 ec 0c             	sub    esp,0xc
c00169af:	50                   	push   eax
c00169b0:	e8 6d 8c ff ff       	call   c000f622 <malloc>
c00169b5:	83 c4 10             	add    esp,0x10
c00169b8:	89 c2                	mov    edx,eax
c00169ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169be:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00169c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00169cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00169d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169de:	c1 e0 06             	shl    eax,0x6
c00169e1:	83 ec 0c             	sub    esp,0xc
c00169e4:	50                   	push   eax
c00169e5:	e8 38 8c ff ff       	call   c000f622 <malloc>
c00169ea:	83 c4 10             	add    esp,0x10
c00169ed:	89 c2                	mov    edx,eax
c00169ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00169f6:	90                   	nop
c00169f7:	83 c4 18             	add    esp,0x18
c00169fa:	5b                   	pop    ebx
c00169fb:	c3                   	ret    

c00169fc <VCache::invalidateReadBuffer()>:
c00169fc:	53                   	push   ebx
c00169fd:	83 ec 14             	sub    esp,0x14
c0016a00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a04:	68 0c aa 02 c0       	push   0xc002aa0c
c0016a09:	e8 e3 be ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0016a0e:	66 c7 43 3c 00 00    	mov    WORD PTR [ebx+0x3c],0x0
c0016a14:	c6 43 3e 00          	mov    BYTE PTR [ebx+0x3e],0x0
c0016a18:	83 c4 18             	add    esp,0x18
c0016a1b:	5b                   	pop    ebx
c0016a1c:	c3                   	ret    
c0016a1d:	90                   	nop

c0016a1e <VCache::writeWriteBuffer()>:
c0016a1e:	53                   	push   ebx
c0016a1f:	83 ec 14             	sub    esp,0x14
c0016a22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a26:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a29:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a2b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a2e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a31:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016a34:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016a37:	50                   	push   eax
c0016a38:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a3b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016a42:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016a49:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016a4d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016a54:	83 c4 28             	add    esp,0x28
c0016a57:	5b                   	pop    ebx
c0016a58:	c3                   	ret    
c0016a59:	90                   	nop

c0016a5a <VCache::~VCache()>:
c0016a5a:	83 ec 0c             	sub    esp,0xc
c0016a5d:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c0016a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a66:	89 10                	mov    DWORD PTR [eax],edx
c0016a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a6c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016a6f:	84 c0                	test   al,al
c0016a71:	74 0f                	je     c0016a82 <VCache::~VCache()+0x28>
c0016a73:	83 ec 0c             	sub    esp,0xc
c0016a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a7a:	e8 9f ff ff ff       	call   c0016a1e <VCache::writeWriteBuffer()>
c0016a7f:	83 c4 10             	add    esp,0x10
c0016a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a86:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016a89:	83 ec 0c             	sub    esp,0xc
c0016a8c:	50                   	push   eax
c0016a8d:	e8 a0 8b ff ff       	call   c000f632 <free>
c0016a92:	83 c4 10             	add    esp,0x10
c0016a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a9c:	83 ec 0c             	sub    esp,0xc
c0016a9f:	50                   	push   eax
c0016aa0:	e8 8d 8b ff ff       	call   c000f632 <free>
c0016aa5:	83 c4 10             	add    esp,0x10
c0016aa8:	90                   	nop
c0016aa9:	83 c4 0c             	add    esp,0xc
c0016aac:	c3                   	ret    
c0016aad:	90                   	nop

c0016aae <VCache::~VCache()>:
c0016aae:	83 ec 0c             	sub    esp,0xc
c0016ab1:	83 ec 0c             	sub    esp,0xc
c0016ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ab8:	e8 9d ff ff ff       	call   c0016a5a <VCache::~VCache()>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	83 ec 08             	sub    esp,0x8
c0016ac3:	6a 44                	push   0x44
c0016ac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ac9:	e8 43 bd ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0016ace:	83 c4 10             	add    esp,0x10
c0016ad1:	83 c4 0c             	add    esp,0xc
c0016ad4:	c3                   	ret    
c0016ad5:	90                   	nop

c0016ad6 <VCache::write(unsigned long long, int, void*)>:
c0016ad6:	55                   	push   ebp
c0016ad7:	57                   	push   edi
c0016ad8:	56                   	push   esi
c0016ad9:	53                   	push   ebx
c0016ada:	83 ec 28             	sub    esp,0x28
c0016add:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ae1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ae5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ae9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016aed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016af0:	e8 4d 6f 00 00       	call   c001da42 <Semaphore::acquire()>
c0016af5:	83 c4 10             	add    esp,0x10
c0016af8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016afc:	74 0c                	je     c0016b0a <VCache::write(unsigned long long, int, void*)+0x34>
c0016afe:	83 ec 0c             	sub    esp,0xc
c0016b01:	53                   	push   ebx
c0016b02:	e8 f5 fe ff ff       	call   c00169fc <VCache::invalidateReadBuffer()>
c0016b07:	83 c4 10             	add    esp,0x10
c0016b0a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b0e:	74 66                	je     c0016b76 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016b10:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b13:	99                   	cdq    
c0016b14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b18:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016b1b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016b1e:	89 c1                	mov    ecx,eax
c0016b20:	89 d0                	mov    eax,edx
c0016b22:	31 f1                	xor    ecx,esi
c0016b24:	31 f8                	xor    eax,edi
c0016b26:	89 ca                	mov    edx,ecx
c0016b28:	09 c2                	or     edx,eax
c0016b2a:	75 3e                	jne    c0016b6a <VCache::write(unsigned long long, int, void*)+0x94>
c0016b2c:	83 fd 01             	cmp    ebp,0x1
c0016b2f:	75 39                	jne    c0016b6a <VCache::write(unsigned long long, int, void*)+0x94>
c0016b31:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b3a:	51                   	push   ecx
c0016b3b:	50                   	push   eax
c0016b3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b40:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016b44:	0f af c8             	imul   ecx,eax
c0016b47:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016b4a:	51                   	push   ecx
c0016b4b:	e8 50 9b fe ff       	call   c00006a0 <memcpy>
c0016b50:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b53:	83 c4 10             	add    esp,0x10
c0016b56:	40                   	inc    eax
c0016b57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016b5a:	83 f8 40             	cmp    eax,0x40
c0016b5d:	75 57                	jne    c0016bb6 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016b5f:	83 ec 0c             	sub    esp,0xc
c0016b62:	53                   	push   ebx
c0016b63:	e8 b6 fe ff ff       	call   c0016a1e <VCache::writeWriteBuffer()>
c0016b68:	eb 34                	jmp    c0016b9e <VCache::write(unsigned long long, int, void*)+0xc8>
c0016b6a:	83 ec 0c             	sub    esp,0xc
c0016b6d:	53                   	push   ebx
c0016b6e:	e8 ab fe ff ff       	call   c0016a1e <VCache::writeWriteBuffer()>
c0016b73:	83 c4 10             	add    esp,0x10
c0016b76:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b79:	83 fd 3f             	cmp    ebp,0x3f
c0016b7c:	7f 25                	jg     c0016ba3 <VCache::write(unsigned long long, int, void*)+0xcd>
c0016b7e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b81:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b84:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016b87:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b8b:	52                   	push   edx
c0016b8c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016b92:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b96:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016b99:	e8 02 9b fe ff       	call   c00006a0 <memcpy>
c0016b9e:	83 c4 10             	add    esp,0x10
c0016ba1:	eb 13                	jmp    c0016bb6 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016ba3:	83 ec 0c             	sub    esp,0xc
c0016ba6:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ba8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016bac:	55                   	push   ebp
c0016bad:	57                   	push   edi
c0016bae:	56                   	push   esi
c0016baf:	50                   	push   eax
c0016bb0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016bb3:	83 c4 20             	add    esp,0x20
c0016bb6:	83 ec 0c             	sub    esp,0xc
c0016bb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bbc:	e8 2f 74 00 00       	call   c001dff0 <Semaphore::release()>
c0016bc1:	83 c4 2c             	add    esp,0x2c
c0016bc4:	31 c0                	xor    eax,eax
c0016bc6:	5b                   	pop    ebx
c0016bc7:	5e                   	pop    esi
c0016bc8:	5f                   	pop    edi
c0016bc9:	5d                   	pop    ebp
c0016bca:	c3                   	ret    
c0016bcb:	90                   	nop

c0016bcc <VCache::read(unsigned long long, int, void*)>:
c0016bcc:	55                   	push   ebp
c0016bcd:	57                   	push   edi
c0016bce:	56                   	push   esi
c0016bcf:	53                   	push   ebx
c0016bd0:	83 ec 28             	sub    esp,0x28
c0016bd3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016bd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016bdb:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016bdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016be3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016be7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016beb:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016bef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bf2:	e8 4b 6e 00 00       	call   c001da42 <Semaphore::acquire()>
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016bfe:	74 0c                	je     c0016c0c <VCache::read(unsigned long long, int, void*)+0x40>
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	53                   	push   ebx
c0016c04:	e8 15 fe ff ff       	call   c0016a1e <VCache::writeWriteBuffer()>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	57                   	push   edi
c0016c0d:	57                   	push   edi
c0016c0e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0016c12:	68 31 aa 02 c0       	push   0xc002aa31
c0016c17:	e8 d5 bc ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0016c1c:	83 c4 10             	add    esp,0x10
c0016c1f:	83 fe 01             	cmp    esi,0x1
c0016c22:	0f 85 df 00 00 00    	jne    c0016d07 <VCache::read(unsigned long long, int, void*)+0x13b>
c0016c28:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c2b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016c32:	0f 85 cf 00 00 00    	jne    c0016d07 <VCache::read(unsigned long long, int, void*)+0x13b>
c0016c38:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c3c:	74 1b                	je     c0016c59 <VCache::read(unsigned long long, int, void*)+0x8d>
c0016c3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c41:	f7 d9                	neg    ecx
c0016c43:	89 c8                	mov    eax,ecx
c0016c45:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016c48:	99                   	cdq    
c0016c49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c4d:	21 d0                	and    eax,edx
c0016c4f:	3b 43 34             	cmp    eax,DWORD PTR [ebx+0x34]
c0016c52:	75 05                	jne    c0016c59 <VCache::read(unsigned long long, int, void*)+0x8d>
c0016c54:	3b 4b 30             	cmp    ecx,DWORD PTR [ebx+0x30]
c0016c57:	74 42                	je     c0016c9b <VCache::read(unsigned long long, int, void*)+0xcf>
c0016c59:	83 ec 0c             	sub    esp,0xc
c0016c5c:	68 4a aa 02 c0       	push   0xc002aa4a
c0016c61:	e8 8b bc ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0016c66:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016c6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c6d:	f7 d9                	neg    ecx
c0016c6f:	89 c8                	mov    eax,ecx
c0016c71:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0016c75:	99                   	cdq    
c0016c76:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0016c79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c7d:	89 ce                	mov    esi,ecx
c0016c7f:	21 d0                	and    eax,edx
c0016c81:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0016c84:	89 c7                	mov    edi,eax
c0016c86:	59                   	pop    ecx
c0016c87:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c8c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016c8f:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0016c92:	57                   	push   edi
c0016c93:	56                   	push   esi
c0016c94:	50                   	push   eax
c0016c95:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c98:	83 c4 20             	add    esp,0x20
c0016c9b:	52                   	push   edx
c0016c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ca4:	2b 43 30             	sub    eax,DWORD PTR [ebx+0x30]
c0016ca7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0016caa:	1b 53 34             	sbb    edx,DWORD PTR [ebx+0x34]
c0016cad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016cb5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016cbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cbf:	89 c8                	mov    eax,ecx
c0016cc1:	0f af f1             	imul   esi,ecx
c0016cc4:	99                   	cdq    
c0016cc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cc9:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
c0016cce:	01 d6                	add    esi,edx
c0016cd0:	f7 e1                	mul    ecx
c0016cd2:	01 f2                	add    edx,esi
c0016cd4:	52                   	push   edx
c0016cd5:	50                   	push   eax
c0016cd6:	68 5a aa 02 c0       	push   0xc002aa5a
c0016cdb:	e8 11 bc ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0016ce0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ce3:	83 c4 0c             	add    esp,0xc
c0016ce6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016cec:	52                   	push   edx
c0016ced:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016cf0:	48                   	dec    eax
c0016cf1:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016cf5:	0f af c2             	imul   eax,edx
c0016cf8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016cfb:	50                   	push   eax
c0016cfc:	55                   	push   ebp
c0016cfd:	e8 9e 99 fe ff       	call   c00006a0 <memcpy>
c0016d02:	83 c4 10             	add    esp,0x10
c0016d05:	eb 2d                	jmp    c0016d34 <VCache::read(unsigned long long, int, void*)+0x168>
c0016d07:	50                   	push   eax
c0016d08:	50                   	push   eax
c0016d09:	56                   	push   esi
c0016d0a:	68 76 aa 02 c0       	push   0xc002aa76
c0016d0f:	e8 dd bb ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0016d14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d17:	e8 e0 fc ff ff       	call   c00169fc <VCache::invalidateReadBuffer()>
c0016d1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d21:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d24:	56                   	push   esi
c0016d25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d2d:	50                   	push   eax
c0016d2e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016d31:	83 c4 20             	add    esp,0x20
c0016d34:	83 ec 0c             	sub    esp,0xc
c0016d37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d3a:	e8 b1 72 00 00       	call   c001dff0 <Semaphore::release()>
c0016d3f:	83 c4 2c             	add    esp,0x2c
c0016d42:	31 c0                	xor    eax,eax
c0016d44:	5b                   	pop    ebx
c0016d45:	5e                   	pop    esi
c0016d46:	5f                   	pop    edi
c0016d47:	5d                   	pop    ebp
c0016d48:	c3                   	ret    
c0016d49:	90                   	nop

c0016d4a <Video::putrect(int, int, int, int, unsigned int)>:
c0016d4a:	55                   	push   ebp
c0016d4b:	57                   	push   edi
c0016d4c:	56                   	push   esi
c0016d4d:	53                   	push   ebx
c0016d4e:	83 ec 1c             	sub    esp,0x1c
c0016d51:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d55:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d59:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016d5d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016d61:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d69:	01 df                	add    edi,ebx
c0016d6b:	39 fb                	cmp    ebx,edi
c0016d6d:	7d 1f                	jge    c0016d8e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016d6f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d73:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016d77:	7d 12                	jge    c0016d8b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016d79:	8b 16                	mov    edx,DWORD PTR [esi]
c0016d7b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016d7f:	53                   	push   ebx
c0016d80:	55                   	push   ebp
c0016d81:	45                   	inc    ebp
c0016d82:	56                   	push   esi
c0016d83:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016d86:	83 c4 10             	add    esp,0x10
c0016d89:	eb e8                	jmp    c0016d73 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016d8b:	43                   	inc    ebx
c0016d8c:	eb dd                	jmp    c0016d6b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016d8e:	83 c4 1c             	add    esp,0x1c
c0016d91:	5b                   	pop    ebx
c0016d92:	5e                   	pop    esi
c0016d93:	5f                   	pop    edi
c0016d94:	5d                   	pop    ebp
c0016d95:	c3                   	ret    

c0016d96 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016d96:	55                   	push   ebp
c0016d97:	57                   	push   edi
c0016d98:	31 ff                	xor    edi,edi
c0016d9a:	56                   	push   esi
c0016d9b:	53                   	push   ebx
c0016d9c:	83 ec 1c             	sub    esp,0x1c
c0016d9f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016da3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016da7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016dae:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016db3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016db7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016dbb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016dbf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016dc2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016dc6:	01 f9                	add    ecx,edi
c0016dc8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016dcc:	7d 2f                	jge    c0016dfd <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016dce:	31 f6                	xor    esi,esi
c0016dd0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016dd4:	01 f2                	add    edx,esi
c0016dd6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016dda:	7d 1a                	jge    c0016df6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ddc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ddf:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016de2:	46                   	inc    esi
c0016de3:	51                   	push   ecx
c0016de4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016de8:	52                   	push   edx
c0016de9:	55                   	push   ebp
c0016dea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016df4:	eb da                	jmp    c0016dd0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016df6:	47                   	inc    edi
c0016df7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016dfb:	eb c5                	jmp    c0016dc2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016dfd:	83 c4 1c             	add    esp,0x1c
c0016e00:	5b                   	pop    ebx
c0016e01:	5e                   	pop    esi
c0016e02:	5f                   	pop    edi
c0016e03:	5d                   	pop    ebp
c0016e04:	c3                   	ret    
c0016e05:	90                   	nop

c0016e06 <Video::blit(unsigned int*, int, int, int, int)>:
c0016e06:	55                   	push   ebp
c0016e07:	57                   	push   edi
c0016e08:	56                   	push   esi
c0016e09:	53                   	push   ebx
c0016e0a:	83 ec 1c             	sub    esp,0x1c
c0016e0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e15:	85 c0                	test   eax,eax
c0016e17:	79 02                	jns    c0016e1b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016e19:	31 c0                	xor    eax,eax
c0016e1b:	c1 e0 02             	shl    eax,0x2
c0016e1e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e26:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e2a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016e2e:	39 d8                	cmp    eax,ebx
c0016e30:	7e 49                	jle    c0016e7b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e32:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e38:	7c 41                	jl     c0016e7b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016e3a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016e3e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e42:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e46:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016e4a:	39 f9                	cmp    ecx,edi
c0016e4c:	7e 22                	jle    c0016e70 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016e4e:	83 c5 04             	add    ebp,0x4
c0016e51:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e57:	7c 14                	jl     c0016e6d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016e59:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e5b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016e5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e62:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e66:	56                   	push   esi
c0016e67:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016e6a:	83 c4 10             	add    esp,0x10
c0016e6d:	47                   	inc    edi
c0016e6e:	eb d2                	jmp    c0016e42 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016e70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e74:	43                   	inc    ebx
c0016e75:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016e79:	eb ab                	jmp    c0016e26 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016e7b:	83 c4 1c             	add    esp,0x1c
c0016e7e:	5b                   	pop    ebx
c0016e7f:	5e                   	pop    esi
c0016e80:	5f                   	pop    edi
c0016e81:	5d                   	pop    ebp
c0016e82:	c3                   	ret    
c0016e83:	90                   	nop

c0016e84 <Video::clearScreen(unsigned int)>:
c0016e84:	57                   	push   edi
c0016e85:	56                   	push   esi
c0016e86:	53                   	push   ebx
c0016e87:	31 db                	xor    ebx,ebx
c0016e89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e8d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e93:	7e 1f                	jle    c0016eb4 <Video::clearScreen(unsigned int)+0x30>
c0016e95:	31 ff                	xor    edi,edi
c0016e97:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e9d:	7e 12                	jle    c0016eb1 <Video::clearScreen(unsigned int)+0x2d>
c0016e9f:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ea1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ea5:	53                   	push   ebx
c0016ea6:	57                   	push   edi
c0016ea7:	47                   	inc    edi
c0016ea8:	56                   	push   esi
c0016ea9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016eac:	83 c4 10             	add    esp,0x10
c0016eaf:	eb e6                	jmp    c0016e97 <Video::clearScreen(unsigned int)+0x13>
c0016eb1:	43                   	inc    ebx
c0016eb2:	eb d9                	jmp    c0016e8d <Video::clearScreen(unsigned int)+0x9>
c0016eb4:	5b                   	pop    ebx
c0016eb5:	5e                   	pop    esi
c0016eb6:	5f                   	pop    edi
c0016eb7:	c3                   	ret    

c0016eb8 <Video::putpixel(int, int, unsigned int)>:
c0016eb8:	c7 44 24 04 98 aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa98
c0016ec0:	e9 a0 2f 00 00       	jmp    c0019e65 <Krnl::panic(char const*)>
c0016ec5:	90                   	nop

c0016ec6 <Video::Video(char const*)>:
c0016ec6:	83 ec 0c             	sub    esp,0xc
c0016ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ecd:	83 ec 08             	sub    esp,0x8
c0016ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ed4:	50                   	push   eax
c0016ed5:	e8 2e d0 ff ff       	call   c0013f08 <Device::Device(char const*)>
c0016eda:	83 c4 10             	add    esp,0x10
c0016edd:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c0016ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ee6:	89 10                	mov    DWORD PTR [eax],edx
c0016ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eec:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016ef6:	90                   	nop
c0016ef7:	83 c4 0c             	add    esp,0xc
c0016efa:	c3                   	ret    
c0016efb:	90                   	nop

c0016efc <Video::~Video()>:
c0016efc:	83 ec 0c             	sub    esp,0xc
c0016eff:	ba 1c ab 02 c0       	mov    edx,0xc002ab1c
c0016f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f08:	89 10                	mov    DWORD PTR [eax],edx
c0016f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f0e:	83 ec 0c             	sub    esp,0xc
c0016f11:	50                   	push   eax
c0016f12:	e8 d3 cc ff ff       	call   c0013bea <Device::~Device()>
c0016f17:	83 c4 10             	add    esp,0x10
c0016f1a:	90                   	nop
c0016f1b:	83 c4 0c             	add    esp,0xc
c0016f1e:	c3                   	ret    
c0016f1f:	90                   	nop

c0016f20 <Video::~Video()>:
c0016f20:	83 ec 0c             	sub    esp,0xc
c0016f23:	83 ec 0c             	sub    esp,0xc
c0016f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f2a:	e8 cd ff ff ff       	call   c0016efc <Video::~Video()>
c0016f2f:	83 c4 10             	add    esp,0x10
c0016f32:	83 ec 08             	sub    esp,0x8
c0016f35:	68 64 01 00 00       	push   0x164
c0016f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f3e:	e8 ce b8 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0016f43:	83 c4 10             	add    esp,0x10
c0016f46:	83 c4 0c             	add    esp,0xc
c0016f49:	c3                   	ret    

c0016f4a <Video::isMonochrome()>:
c0016f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f4e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016f54:	c3                   	ret    
c0016f55:	90                   	nop

c0016f56 <Video::getWidth()>:
c0016f56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016f60:	c3                   	ret    
c0016f61:	90                   	nop

c0016f62 <Video::getHeight()>:
c0016f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f66:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f6c:	c3                   	ret    
c0016f6d:	90                   	nop

c0016f6e <Video::drawCursor(int, int, unsigned char*, int)>:
c0016f6e:	55                   	push   ebp
c0016f6f:	57                   	push   edi
c0016f70:	56                   	push   esi
c0016f71:	53                   	push   ebx
c0016f72:	83 ec 2c             	sub    esp,0x2c
c0016f75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f79:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f7d:	83 f8 01             	cmp    eax,0x1
c0016f80:	19 c9                	sbb    ecx,ecx
c0016f82:	31 db                	xor    ebx,ebx
c0016f84:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016f88:	89 cd                	mov    ebp,ecx
c0016f8a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016f92:	f7 d5                	not    ebp
c0016f94:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016f9a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016f9e:	01 d8                	add    eax,ebx
c0016fa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fa4:	56                   	push   esi
c0016fa5:	e8 b8 ff ff ff       	call   c0016f62 <Video::getHeight()>
c0016faa:	59                   	pop    ecx
c0016fab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016faf:	7e 70                	jle    c0017021 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016fb1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016fb5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fb9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016fbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fc0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016fc4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016fcb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fcf:	89 f8                	mov    eax,edi
c0016fd1:	83 c0 20             	add    eax,0x20
c0016fd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fd8:	56                   	push   esi
c0016fd9:	e8 78 ff ff ff       	call   c0016f56 <Video::getWidth()>
c0016fde:	5a                   	pop    edx
c0016fdf:	39 c7                	cmp    edi,eax
c0016fe1:	7d 34                	jge    c0017017 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016fe3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016fe8:	74 05                	je     c0016fef <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016fea:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fec:	55                   	push   ebp
c0016fed:	eb 0d                	jmp    c0016ffc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016fef:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016ff4:	74 12                	je     c0017008 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ff6:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ff8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ffc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017000:	57                   	push   edi
c0017001:	56                   	push   esi
c0017002:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017005:	83 c4 10             	add    esp,0x10
c0017008:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001700c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017010:	47                   	inc    edi
c0017011:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017015:	75 c1                	jne    c0016fd8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017017:	43                   	inc    ebx
c0017018:	83 fb 20             	cmp    ebx,0x20
c001701b:	0f 85 79 ff ff ff    	jne    c0016f9a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017021:	83 c4 2c             	add    esp,0x2c
c0017024:	5b                   	pop    ebx
c0017025:	5e                   	pop    esi
c0017026:	5f                   	pop    edi
c0017027:	5d                   	pop    ebp
c0017028:	c3                   	ret    
c0017029:	90                   	nop

c001702a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001702a:	55                   	push   ebp
c001702b:	57                   	push   edi
c001702c:	56                   	push   esi
c001702d:	53                   	push   ebx
c001702e:	83 ec 28             	sub    esp,0x28
c0017031:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017035:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017039:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001703d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017041:	c1 e7 08             	shl    edi,0x8
c0017044:	01 c7                	add    edi,eax
c0017046:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001704a:	c1 e0 08             	shl    eax,0x8
c001704d:	01 d0                	add    eax,edx
c001704f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017053:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017057:	0f af c7             	imul   eax,edi
c001705a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017061:	50                   	push   eax
c0017062:	e8 bb 85 ff ff       	call   c000f622 <malloc>
c0017067:	83 c4 10             	add    esp,0x10
c001706a:	89 c5                	mov    ebp,eax
c001706c:	85 c0                	test   eax,eax
c001706e:	75 15                	jne    c0017085 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017070:	83 ec 0c             	sub    esp,0xc
c0017073:	68 b9 aa 02 c0       	push   0xc002aab9
c0017078:	e8 74 b8 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001707d:	83 c4 10             	add    esp,0x10
c0017080:	e9 1c 01 00 00       	jmp    c00171a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017085:	be 12 00 00 00       	mov    esi,0x12
c001708a:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001708e:	74 11                	je     c00170a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017090:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017094:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017098:	c1 fe 03             	sar    esi,0x3
c001709b:	0f af f0             	imul   esi,eax
c001709e:	83 c6 12             	add    esi,0x12
c00170a1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00170a5:	74 04                	je     c00170ab <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00170a7:	85 ff                	test   edi,edi
c00170a9:	75 12                	jne    c00170bd <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00170ab:	83 ec 0c             	sub    esp,0xc
c00170ae:	68 d0 aa 02 c0       	push   0xc002aad0
c00170b3:	e8 39 b8 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00170b8:	e9 ce 00 00 00       	jmp    c001718b <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00170bd:	52                   	push   edx
c00170be:	52                   	push   edx
c00170bf:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00170c3:	50                   	push   eax
c00170c4:	68 e5 aa 02 c0       	push   0xc002aae5
c00170c9:	e8 23 b8 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00170ce:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00170d2:	83 c4 10             	add    esp,0x10
c00170d5:	80 fa 02             	cmp    dl,0x2
c00170d8:	0f 85 98 00 00 00    	jne    c0017176 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00170de:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00170e3:	75 10                	jne    c00170f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00170e5:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00170e9:	75 0a                	jne    c00170f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00170eb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00170ee:	83 e8 18             	sub    eax,0x18
c00170f1:	a8 f7                	test   al,0xf7
c00170f3:	74 0a                	je     c00170ff <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00170f5:	83 ec 0c             	sub    esp,0xc
c00170f8:	68 f2 aa 02 c0       	push   0xc002aaf2
c00170fd:	eb 7f                	jmp    c001717e <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00170ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017107:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001710f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017113:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001711b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001711f:	75 0c                	jne    c001712d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017121:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017126:	c1 e0 18             	shl    eax,0x18
c0017129:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001712d:	41                   	inc    ecx
c001712e:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017133:	c1 e2 10             	shl    edx,0x10
c0017136:	89 d0                	mov    eax,edx
c0017138:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001713d:	c1 e2 08             	shl    edx,0x8
c0017140:	09 c2                	or     edx,eax
c0017142:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017146:	09 c2                	or     edx,eax
c0017148:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001714c:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017150:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017154:	c1 f8 03             	sar    eax,0x3
c0017157:	01 c6                	add    esi,eax
c0017159:	89 c8                	mov    eax,ecx
c001715b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001715f:	39 c7                	cmp    edi,eax
c0017161:	7f b0                	jg     c0017113 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017163:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017167:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001716b:	39 14 24             	cmp    DWORD PTR [esp],edx
c001716e:	7e 22                	jle    c0017192 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017170:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017174:	eb 99                	jmp    c001710f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017176:	50                   	push   eax
c0017177:	50                   	push   eax
c0017178:	52                   	push   edx
c0017179:	68 00 ab 02 c0       	push   0xc002ab00
c001717e:	e8 6e b7 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017183:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017186:	e8 a7 84 ff ff       	call   c000f632 <free>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	31 ed                	xor    ebp,ebp
c0017190:	eb 0f                	jmp    c00171a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017192:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017196:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017199:	89 38                	mov    DWORD PTR [eax],edi
c001719b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001719f:	89 08                	mov    DWORD PTR [eax],ecx
c00171a1:	83 c4 1c             	add    esp,0x1c
c00171a4:	89 e8                	mov    eax,ebp
c00171a6:	5b                   	pop    ebx
c00171a7:	5e                   	pop    esi
c00171a8:	5f                   	pop    edi
c00171a9:	5d                   	pop    ebp
c00171aa:	c3                   	ret    
c00171ab:	90                   	nop

c00171ac <Video::putTGA(int, int, unsigned char*, int)>:
c00171ac:	55                   	push   ebp
c00171ad:	57                   	push   edi
c00171ae:	56                   	push   esi
c00171af:	53                   	push   ebx
c00171b0:	83 ec 28             	sub    esp,0x28
c00171b3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00171b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171bb:	50                   	push   eax
c00171bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171c0:	50                   	push   eax
c00171c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00171c9:	56                   	push   esi
c00171ca:	e8 5b fe ff ff       	call   c001702a <Video::tgaParse(unsigned char*, int, int*, int*)>
c00171cf:	83 c4 20             	add    esp,0x20
c00171d2:	85 c0                	test   eax,eax
c00171d4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171d8:	74 35                	je     c001720f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00171da:	89 c7                	mov    edi,eax
c00171dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00171e4:	39 d8                	cmp    eax,ebx
c00171e6:	7e 27                	jle    c001720f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00171e8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00171ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171f0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00171f4:	39 e8                	cmp    eax,ebp
c00171f6:	7e 14                	jle    c001720c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00171f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00171fa:	83 c7 04             	add    edi,0x4
c00171fd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017200:	53                   	push   ebx
c0017201:	55                   	push   ebp
c0017202:	45                   	inc    ebp
c0017203:	56                   	push   esi
c0017204:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017207:	83 c4 10             	add    esp,0x10
c001720a:	eb e0                	jmp    c00171ec <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001720c:	43                   	inc    ebx
c001720d:	eb cd                	jmp    c00171dc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001720f:	83 c4 1c             	add    esp,0x1c
c0017212:	5b                   	pop    ebx
c0017213:	5e                   	pop    esi
c0017214:	5f                   	pop    edi
c0017215:	5d                   	pop    ebp
c0017216:	c3                   	ret    
c0017217:	90                   	nop

c0017218 <ACPI::close(int, int, void*)>:
c0017218:	83 ec 1c             	sub    esp,0x1c
c001721b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017223:	74 0a                	je     c001722f <ACPI::close(int, int, void*)+0x17>
c0017225:	b8 00 00 00 00       	mov    eax,0x0
c001722a:	e9 9a 00 00 00       	jmp    c00172c9 <ACPI::close(int, int, void*)+0xb1>
c001722f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017234:	75 37                	jne    c001726d <ACPI::close(int, int, void*)+0x55>
c0017236:	83 ec 0c             	sub    esp,0xc
c0017239:	68 5c ab 02 c0       	push   0xc002ab5c
c001723e:	e8 ae b6 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	a1 88 01 03 c0       	mov    eax,ds:0xc0030188
c001724b:	85 c0                	test   eax,eax
c001724d:	74 07                	je     c0017256 <ACPI::close(int, int, void*)+0x3e>
c001724f:	a1 88 01 03 c0       	mov    eax,ds:0xc0030188
c0017254:	ff d0                	call   eax
c0017256:	83 ec 0c             	sub    esp,0xc
c0017259:	68 80 ac 02 c0       	push   0xc002ac80
c001725e:	e8 02 2c 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0017263:	83 c4 10             	add    esp,0x10
c0017266:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001726b:	eb 5c                	jmp    c00172c9 <ACPI::close(int, int, void*)+0xb1>
c001726d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017272:	75 50                	jne    c00172c4 <ACPI::close(int, int, void*)+0xac>
c0017274:	a1 84 01 03 c0       	mov    eax,ds:0xc0030184
c0017279:	85 c0                	test   eax,eax
c001727b:	74 07                	je     c0017284 <ACPI::close(int, int, void*)+0x6c>
c001727d:	a1 84 01 03 c0       	mov    eax,ds:0xc0030184
c0017282:	ff d0                	call   eax
c0017284:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017289:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001728e:	83 e0 02             	and    eax,0x2
c0017291:	74 1c                	je     c00172af <ACPI::close(int, int, void*)+0x97>
c0017293:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001729a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001729e:	89 c2                	mov    edx,eax
c00172a0:	ec                   	in     al,dx
c00172a1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00172a5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00172a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00172ad:	eb da                	jmp    c0017289 <ACPI::close(int, int, void*)+0x71>
c00172af:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00172b6:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00172bb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00172bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00172c3:	ee                   	out    dx,al
c00172c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00172c9:	83 c4 1c             	add    esp,0x1c
c00172cc:	c3                   	ret    

c00172cd <findRSDP()>:
c00172cd:	83 ec 1c             	sub    esp,0x1c
c00172d0:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00172d5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172db:	83 e0 04             	and    eax,0x4
c00172de:	84 c0                	test   al,al
c00172e0:	75 07                	jne    c00172e9 <findRSDP()+0x1c>
c00172e2:	b8 00 00 00 00       	mov    eax,0x0
c00172e7:	eb 6a                	jmp    c0017353 <findRSDP()+0x86>
c00172e9:	a1 10 db 02 c0       	mov    eax,ds:0xc002db10
c00172ee:	3d ff 07 00 00       	cmp    eax,0x7ff
c00172f3:	7f 1b                	jg     c0017310 <findRSDP()+0x43>
c00172f5:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00172fa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017300:	83 e2 fb             	and    edx,0xfffffffb
c0017303:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017309:	b8 00 00 00 00       	mov    eax,0x0
c001730e:	eb 43                	jmp    c0017353 <findRSDP()+0x86>
c0017310:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017318:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017320:	77 2c                	ja     c001734e <findRSDP()+0x81>
c0017322:	83 ec 04             	sub    esp,0x4
c0017325:	6a 08                	push   0x8
c0017327:	68 69 ab 02 c0       	push   0xc002ab69
c001732c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017330:	e8 08 93 fe ff       	call   c000063d <memcmp>
c0017335:	83 c4 10             	add    esp,0x10
c0017338:	85 c0                	test   eax,eax
c001733a:	0f 94 c0             	sete   al
c001733d:	84 c0                	test   al,al
c001733f:	74 06                	je     c0017347 <findRSDP()+0x7a>
c0017341:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017345:	eb 0c                	jmp    c0017353 <findRSDP()+0x86>
c0017347:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001734c:	eb ca                	jmp    c0017318 <findRSDP()+0x4b>
c001734e:	b8 00 00 00 00       	mov    eax,0x0
c0017353:	83 c4 1c             	add    esp,0x1c
c0017356:	c3                   	ret    

c0017357 <loadACPITables(unsigned char*)>:
c0017357:	56                   	push   esi
c0017358:	53                   	push   ebx
c0017359:	83 ec 44             	sub    esp,0x44
c001735c:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017361:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017367:	83 e0 04             	and    eax,0x4
c001736a:	84 c0                	test   al,al
c001736c:	0f 84 05 02 00 00    	je     c0017577 <loadACPITables(unsigned char*)+0x220>
c0017372:	a0 a0 03 03 c0       	mov    al,ds:0xc00303a0
c0017377:	84 c0                	test   al,al
c0017379:	74 75                	je     c00173f0 <loadACPITables(unsigned char*)+0x99>
c001737b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001737f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017387:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001738a:	83 e8 24             	sub    eax,0x24
c001738d:	c1 e8 03             	shr    eax,0x3
c0017390:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017394:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001739c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173a0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00173a4:	0f 8d b2 00 00 00    	jge    c001745c <loadACPITables(unsigned char*)+0x105>
c00173aa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173ae:	83 c0 24             	add    eax,0x24
c00173b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173c1:	c1 e0 03             	shl    eax,0x3
c00173c4:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00173c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00173cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00173cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00173d1:	89 c1                	mov    ecx,eax
c00173d3:	a1 8c 01 03 c0       	mov    eax,ds:0xc003018c
c00173d8:	8d 50 01             	lea    edx,[eax+0x1]
c00173db:	89 15 8c 01 03 c0    	mov    DWORD PTR ds:0xc003018c,edx
c00173e1:	89 ca                	mov    edx,ecx
c00173e3:	89 14 c5 a4 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe5c],edx
c00173ea:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00173ee:	eb ac                	jmp    c001739c <loadACPITables(unsigned char*)+0x45>
c00173f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173ff:	83 e8 24             	sub    eax,0x24
c0017402:	c1 e8 02             	shr    eax,0x2
c0017405:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017409:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017411:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017415:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017419:	7d 41                	jge    c001745c <loadACPITables(unsigned char*)+0x105>
c001741b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001741f:	83 c0 24             	add    eax,0x24
c0017422:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017426:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001742a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001742e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017432:	c1 e0 02             	shl    eax,0x2
c0017435:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001743d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001743f:	a1 8c 01 03 c0       	mov    eax,ds:0xc003018c
c0017444:	8d 50 01             	lea    edx,[eax+0x1]
c0017447:	89 15 8c 01 03 c0    	mov    DWORD PTR ds:0xc003018c,edx
c001744d:	89 ca                	mov    edx,ecx
c001744f:	89 14 c5 a4 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe5c],edx
c0017456:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001745a:	eb b5                	jmp    c0017411 <loadACPITables(unsigned char*)+0xba>
c001745c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017464:	a1 8c 01 03 c0       	mov    eax,ds:0xc003018c
c0017469:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001746d:	0f 8d 05 01 00 00    	jge    c0017578 <loadACPITables(unsigned char*)+0x221>
c0017473:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017477:	8b 04 c5 a4 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe5c]
c001747e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017486:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001748a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001748e:	25 ff 0f 00 00       	and    eax,0xfff
c0017493:	89 c6                	mov    esi,eax
c0017495:	e8 f7 a5 ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c001749a:	89 c3                	mov    ebx,eax
c001749c:	83 ec 0c             	sub    esp,0xc
c001749f:	6a 01                	push   0x1
c00174a1:	e8 5b a4 ff ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c00174a6:	83 c4 10             	add    esp,0x10
c00174a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00174ad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174b3:	83 ec 0c             	sub    esp,0xc
c00174b6:	6a 01                	push   0x1
c00174b8:	6a 01                	push   0x1
c00174ba:	50                   	push   eax
c00174bb:	52                   	push   edx
c00174bc:	53                   	push   ebx
c00174bd:	e8 fe ad ff ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174c2:	83 c4 20             	add    esp,0x20
c00174c5:	09 f0                	or     eax,esi
c00174c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00174cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174cf:	c1 e0 03             	shl    eax,0x3
c00174d2:	05 a0 01 03 c0       	add    eax,0xc00301a0
c00174d7:	83 ec 04             	sub    esp,0x4
c00174da:	6a 04                	push   0x4
c00174dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174e0:	50                   	push   eax
c00174e1:	e8 ba 91 fe ff       	call   c00006a0 <memcpy>
c00174e6:	83 c4 10             	add    esp,0x10
c00174e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00174f8:	05 00 10 00 00       	add    eax,0x1000
c00174fd:	c1 e8 0c             	shr    eax,0xc
c0017500:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017508:	89 04 24             	mov    DWORD PTR [esp],eax
c001750b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001750f:	25 ff 0f 00 00       	and    eax,0xfff
c0017514:	89 c6                	mov    esi,eax
c0017516:	e8 76 a5 ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c001751b:	89 c3                	mov    ebx,eax
c001751d:	83 ec 0c             	sub    esp,0xc
c0017520:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017524:	e8 d8 a3 ff ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c0017529:	83 c4 10             	add    esp,0x10
c001752c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017530:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017536:	83 ec 0c             	sub    esp,0xc
c0017539:	6a 01                	push   0x1
c001753b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001753f:	50                   	push   eax
c0017540:	52                   	push   edx
c0017541:	53                   	push   ebx
c0017542:	e8 79 ad ff ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017547:	83 c4 20             	add    esp,0x20
c001754a:	09 f0                	or     eax,esi
c001754c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017550:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017553:	83 ec 0c             	sub    esp,0xc
c0017556:	50                   	push   eax
c0017557:	e8 09 a7 ff ff       	call   c0011c65 <Virt::freeKernelVirtualPages(unsigned long)>
c001755c:	83 c4 10             	add    esp,0x10
c001755f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017563:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017567:	89 14 c5 a4 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe5c],edx
c001756e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017572:	e9 ed fe ff ff       	jmp    c0017464 <loadACPITables(unsigned char*)+0x10d>
c0017577:	90                   	nop
c0017578:	83 c4 44             	add    esp,0x44
c001757b:	5b                   	pop    ebx
c001757c:	5e                   	pop    esi
c001757d:	c3                   	ret    

c001757e <findRSDT(unsigned char*)>:
c001757e:	56                   	push   esi
c001757f:	53                   	push   ebx
c0017580:	83 ec 44             	sub    esp,0x44
c0017583:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017588:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001758e:	83 e0 04             	and    eax,0x4
c0017591:	84 c0                	test   al,al
c0017593:	75 0a                	jne    c001759f <findRSDT(unsigned char*)+0x21>
c0017595:	b8 00 00 00 00       	mov    eax,0x0
c001759a:	e9 f7 00 00 00       	jmp    c0017696 <findRSDT(unsigned char*)+0x118>
c001759f:	83 ec 04             	sub    esp,0x4
c00175a2:	6a 24                	push   0x24
c00175a4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00175a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175ac:	50                   	push   eax
c00175ad:	e8 ee 90 fe ff       	call   c00006a0 <memcpy>
c00175b2:	83 c4 10             	add    esp,0x10
c00175b5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00175b9:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00175bd:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00175c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00175c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00175d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175dd:	25 ff 0f 00 00       	and    eax,0xfff
c00175e2:	89 c6                	mov    esi,eax
c00175e4:	e8 a8 a4 ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c00175e9:	89 c3                	mov    ebx,eax
c00175eb:	83 ec 0c             	sub    esp,0xc
c00175ee:	6a 02                	push   0x2
c00175f0:	e8 0c a3 ff ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c00175f5:	83 c4 10             	add    esp,0x10
c00175f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00175fc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017602:	83 ec 0c             	sub    esp,0xc
c0017605:	6a 01                	push   0x1
c0017607:	6a 02                	push   0x2
c0017609:	50                   	push   eax
c001760a:	52                   	push   edx
c001760b:	53                   	push   ebx
c001760c:	e8 af ac ff ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017611:	83 c4 20             	add    esp,0x20
c0017614:	09 f0                	or     eax,esi
c0017616:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001761a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001761e:	25 ff 0f 00 00       	and    eax,0xfff
c0017623:	89 c6                	mov    esi,eax
c0017625:	e8 67 a4 ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c001762a:	89 c3                	mov    ebx,eax
c001762c:	83 ec 0c             	sub    esp,0xc
c001762f:	6a 02                	push   0x2
c0017631:	e8 cb a2 ff ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c0017636:	83 c4 10             	add    esp,0x10
c0017639:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001763d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017643:	83 ec 0c             	sub    esp,0xc
c0017646:	6a 01                	push   0x1
c0017648:	6a 02                	push   0x2
c001764a:	50                   	push   eax
c001764b:	52                   	push   edx
c001764c:	53                   	push   ebx
c001764d:	e8 6e ac ff ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017652:	83 c4 20             	add    esp,0x20
c0017655:	09 f0                	or     eax,esi
c0017657:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001765b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017660:	75 11                	jne    c0017673 <findRSDT(unsigned char*)+0xf5>
c0017662:	c6 05 a0 03 03 c0 00 	mov    BYTE PTR ds:0xc00303a0,0x0
c0017669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001766d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017671:	eb 1f                	jmp    c0017692 <findRSDT(unsigned char*)+0x114>
c0017673:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017678:	75 11                	jne    c001768b <findRSDT(unsigned char*)+0x10d>
c001767a:	c6 05 a0 03 03 c0 01 	mov    BYTE PTR ds:0xc00303a0,0x1
c0017681:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017685:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017689:	eb 07                	jmp    c0017692 <findRSDT(unsigned char*)+0x114>
c001768b:	b8 00 00 00 00       	mov    eax,0x0
c0017690:	eb 04                	jmp    c0017696 <findRSDT(unsigned char*)+0x118>
c0017692:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017696:	83 c4 44             	add    esp,0x44
c0017699:	5b                   	pop    ebx
c001769a:	5e                   	pop    esi
c001769b:	c3                   	ret    

c001769c <findDataTable(unsigned char*, char*)>:
c001769c:	83 ec 1c             	sub    esp,0x1c
c001769f:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00176a4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00176aa:	83 e0 04             	and    eax,0x4
c00176ad:	84 c0                	test   al,al
c00176af:	75 07                	jne    c00176b8 <findDataTable(unsigned char*, char*)+0x1c>
c00176b1:	b8 00 00 00 00       	mov    eax,0x0
c00176b6:	eb 7c                	jmp    c0017734 <findDataTable(unsigned char*, char*)+0x98>
c00176b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176c0:	a1 8c 01 03 c0       	mov    eax,ds:0xc003018c
c00176c5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00176c9:	7d 3a                	jge    c0017705 <findDataTable(unsigned char*, char*)+0x69>
c00176cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176cf:	c1 e0 03             	shl    eax,0x3
c00176d2:	05 a0 01 03 c0       	add    eax,0xc00301a0
c00176d7:	83 ec 04             	sub    esp,0x4
c00176da:	6a 04                	push   0x4
c00176dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176e0:	50                   	push   eax
c00176e1:	e8 57 8f fe ff       	call   c000063d <memcmp>
c00176e6:	83 c4 10             	add    esp,0x10
c00176e9:	85 c0                	test   eax,eax
c00176eb:	0f 94 c0             	sete   al
c00176ee:	84 c0                	test   al,al
c00176f0:	74 0d                	je     c00176ff <findDataTable(unsigned char*, char*)+0x63>
c00176f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176f6:	8b 04 c5 a4 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe5c]
c00176fd:	eb 35                	jmp    c0017734 <findDataTable(unsigned char*, char*)+0x98>
c00176ff:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017703:	eb bb                	jmp    c00176c0 <findDataTable(unsigned char*, char*)+0x24>
c0017705:	a0 a0 03 03 c0       	mov    al,ds:0xc00303a0
c001770a:	84 c0                	test   al,al
c001770c:	74 07                	je     c0017715 <findDataTable(unsigned char*, char*)+0x79>
c001770e:	b8 58 00 00 00       	mov    eax,0x58
c0017713:	eb 05                	jmp    c001771a <findDataTable(unsigned char*, char*)+0x7e>
c0017715:	b8 52 00 00 00       	mov    eax,0x52
c001771a:	83 ec 04             	sub    esp,0x4
c001771d:	50                   	push   eax
c001771e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017722:	68 a4 ac 02 c0       	push   0xc002aca4
c0017727:	e8 c5 b1 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001772c:	83 c4 10             	add    esp,0x10
c001772f:	b8 00 00 00 00       	mov    eax,0x0
c0017734:	83 c4 1c             	add    esp,0x1c
c0017737:	c3                   	ret    

c0017738 <scanMADT()>:
c0017738:	53                   	push   ebx
c0017739:	83 ec 38             	sub    esp,0x38
c001773c:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017741:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017747:	83 e0 04             	and    eax,0x4
c001774a:	84 c0                	test   al,al
c001774c:	0f 84 63 04 00 00    	je     c0017bb5 <scanMADT()+0x47d>
c0017752:	e8 76 fb ff ff       	call   c00172cd <findRSDP()>
c0017757:	a3 ac 03 03 c0       	mov    ds:0xc00303ac,eax
c001775c:	a1 ac 03 03 c0       	mov    eax,ds:0xc00303ac
c0017761:	85 c0                	test   eax,eax
c0017763:	75 19                	jne    c001777e <scanMADT()+0x46>
c0017765:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001776a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017770:	83 e2 fb             	and    edx,0xfffffffb
c0017773:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017779:	e9 3b 04 00 00       	jmp    c0017bb9 <scanMADT()+0x481>
c001777e:	a1 ac 03 03 c0       	mov    eax,ds:0xc00303ac
c0017783:	83 ec 0c             	sub    esp,0xc
c0017786:	50                   	push   eax
c0017787:	e8 f2 fd ff ff       	call   c001757e <findRSDT(unsigned char*)>
c001778c:	83 c4 10             	add    esp,0x10
c001778f:	a3 a8 03 03 c0       	mov    ds:0xc00303a8,eax
c0017794:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c0017799:	85 c0                	test   eax,eax
c001779b:	75 19                	jne    c00177b6 <scanMADT()+0x7e>
c001779d:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00177a2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177a8:	83 e2 fb             	and    edx,0xfffffffb
c00177ab:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177b1:	e9 03 04 00 00       	jmp    c0017bb9 <scanMADT()+0x481>
c00177b6:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c00177bb:	83 ec 0c             	sub    esp,0xc
c00177be:	50                   	push   eax
c00177bf:	e8 93 fb ff ff       	call   c0017357 <loadACPITables(unsigned char*)>
c00177c4:	83 c4 10             	add    esp,0x10
c00177c7:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c00177cc:	83 ec 08             	sub    esp,0x8
c00177cf:	68 72 ab 02 c0       	push   0xc002ab72
c00177d4:	50                   	push   eax
c00177d5:	e8 c2 fe ff ff       	call   c001769c <findDataTable(unsigned char*, char*)>
c00177da:	83 c4 10             	add    esp,0x10
c00177dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177e1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00177e6:	75 19                	jne    c0017801 <scanMADT()+0xc9>
c00177e8:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00177ed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177f3:	83 e2 fe             	and    edx,0xfffffffe
c00177f6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177fc:	e9 b8 03 00 00       	jmp    c0017bb9 <scanMADT()+0x481>
c0017801:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017809:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001780d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017810:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017814:	0f 87 9f 03 00 00    	ja     c0017bb9 <scanMADT()+0x481>
c001781a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017822:	0f 87 91 03 00 00    	ja     c0017bb9 <scanMADT()+0x481>
c0017828:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001782c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017834:	8d 50 01             	lea    edx,[eax+0x1]
c0017837:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001783b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001783f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017843:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017847:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001784b:	8d 50 01             	lea    edx,[eax+0x1]
c001784e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017852:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017856:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001785a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001785e:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017863:	0f 86 4f 03 00 00    	jbe    c0017bb8 <scanMADT()+0x480>
c0017869:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001786e:	75 57                	jne    c00178c7 <scanMADT()+0x18f>
c0017870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017874:	8d 50 01             	lea    edx,[eax+0x1]
c0017877:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001787b:	8a 15 a0 05 03 c0    	mov    dl,BYTE PTR ds:0xc00305a0
c0017881:	0f b6 d2             	movzx  edx,dl
c0017884:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017888:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001788c:	88 82 e0 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfa20],al
c0017892:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017896:	8d 50 01             	lea    edx,[eax+0x1]
c0017899:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001789d:	8a 15 a0 05 03 c0    	mov    dl,BYTE PTR ds:0xc00305a0
c00178a3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00178a6:	88 0d a0 05 03 c0    	mov    BYTE PTR ds:0xc00305a0,cl
c00178ac:	0f b6 d2             	movzx  edx,dl
c00178af:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178b3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178b7:	88 82 c0 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfa40],al
c00178bd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178c2:	e9 da 02 00 00       	jmp    c0017ba1 <scanMADT()+0x469>
c00178c7:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00178cc:	0f 85 14 01 00 00    	jne    c00179e6 <scanMADT()+0x2ae>
c00178d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178d6:	8d 50 01             	lea    edx,[eax+0x1]
c00178d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178dd:	8a 15 60 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030460
c00178e3:	0f b6 d2             	movzx  edx,dl
c00178e6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178ea:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178ee:	88 82 80 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb80],al
c00178f4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00178f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017900:	01 d0                	add    eax,edx
c0017902:	83 c0 2c             	add    eax,0x2c
c0017905:	8a 00                	mov    al,BYTE PTR [eax]
c0017907:	0f b6 d0             	movzx  edx,al
c001790a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001790e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017911:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017915:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017919:	0f b6 c0             	movzx  eax,al
c001791c:	c1 e0 08             	shl    eax,0x8
c001791f:	89 d1                	mov    ecx,edx
c0017921:	09 c1                	or     ecx,eax
c0017923:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017927:	8d 50 02             	lea    edx,[eax+0x2]
c001792a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001792e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017932:	0f b6 c0             	movzx  eax,al
c0017935:	c1 e0 10             	shl    eax,0x10
c0017938:	09 c1                	or     ecx,eax
c001793a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001793e:	8d 50 03             	lea    edx,[eax+0x3]
c0017941:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017945:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017949:	0f b6 c0             	movzx  eax,al
c001794c:	c1 e0 18             	shl    eax,0x18
c001794f:	09 c1                	or     ecx,eax
c0017951:	89 ca                	mov    edx,ecx
c0017953:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c0017958:	0f b6 c0             	movzx  eax,al
c001795b:	89 14 85 a0 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb60],edx
c0017962:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017967:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001796b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001796f:	01 d0                	add    eax,edx
c0017971:	83 c0 2c             	add    eax,0x2c
c0017974:	8a 00                	mov    al,BYTE PTR [eax]
c0017976:	0f b6 d0             	movzx  edx,al
c0017979:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001797d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017980:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017984:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017988:	0f b6 c0             	movzx  eax,al
c001798b:	c1 e0 08             	shl    eax,0x8
c001798e:	89 d1                	mov    ecx,edx
c0017990:	09 c1                	or     ecx,eax
c0017992:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017996:	8d 50 02             	lea    edx,[eax+0x2]
c0017999:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001799d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179a1:	0f b6 c0             	movzx  eax,al
c00179a4:	c1 e0 10             	shl    eax,0x10
c00179a7:	09 c1                	or     ecx,eax
c00179a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ad:	8d 50 03             	lea    edx,[eax+0x3]
c00179b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179b4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179b8:	0f b6 c0             	movzx  eax,al
c00179bb:	c1 e0 18             	shl    eax,0x18
c00179be:	09 c1                	or     ecx,eax
c00179c0:	89 ca                	mov    edx,ecx
c00179c2:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c00179c7:	0f b6 c0             	movzx  eax,al
c00179ca:	89 14 85 20 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfae0],edx
c00179d1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00179d6:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c00179db:	40                   	inc    eax
c00179dc:	a2 60 04 03 c0       	mov    ds:0xc0030460,al
c00179e1:	e9 bb 01 00 00       	jmp    c0017ba1 <scanMADT()+0x469>
c00179e6:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00179eb:	0f 85 e9 00 00 00    	jne    c0017ada <scanMADT()+0x3a2>
c00179f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f5:	8d 50 01             	lea    edx,[eax+0x1]
c00179f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a00:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a04:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017a08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a0c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a0f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a17:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a1b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017a1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a27:	01 d0                	add    eax,edx
c0017a29:	83 c0 2c             	add    eax,0x2c
c0017a2c:	8a 00                	mov    al,BYTE PTR [eax]
c0017a2e:	0f b6 d0             	movzx  edx,al
c0017a31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a35:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a3c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a40:	0f b6 c0             	movzx  eax,al
c0017a43:	c1 e0 08             	shl    eax,0x8
c0017a46:	89 d1                	mov    ecx,edx
c0017a48:	09 c1                	or     ecx,eax
c0017a4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a4e:	8d 50 02             	lea    edx,[eax+0x2]
c0017a51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a59:	0f b6 c0             	movzx  eax,al
c0017a5c:	c1 e0 10             	shl    eax,0x10
c0017a5f:	09 c1                	or     ecx,eax
c0017a61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a65:	8d 50 03             	lea    edx,[eax+0x3]
c0017a68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a6c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a70:	0f b6 c0             	movzx  eax,al
c0017a73:	c1 e0 18             	shl    eax,0x18
c0017a76:	09 c8                	or     eax,ecx
c0017a78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a7c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a89:	01 d0                	add    eax,edx
c0017a8b:	83 c0 2c             	add    eax,0x2c
c0017a8e:	8a 00                	mov    al,BYTE PTR [eax]
c0017a90:	0f b6 c0             	movzx  eax,al
c0017a93:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017a97:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a9e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017aa2:	0f b6 d2             	movzx  edx,dl
c0017aa5:	c1 e2 08             	shl    edx,0x8
c0017aa8:	09 d0                	or     eax,edx
c0017aaa:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017aaf:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017ab4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017ab9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017abd:	88 90 20 cd 02 c0    	mov    BYTE PTR [eax-0x3ffd32e0],dl
c0017ac3:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017ac8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017acd:	66 89 84 12 40 04 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfbc0],ax
c0017ad5:	e9 c7 00 00 00       	jmp    c0017ba1 <scanMADT()+0x469>
c0017ada:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017adf:	0f 85 b0 00 00 00    	jne    c0017b95 <scanMADT()+0x45d>
c0017ae5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae9:	8d 50 01             	lea    edx,[eax+0x1]
c0017aec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017af0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017af4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017af8:	0f b6 c0             	movzx  eax,al
c0017afb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017aff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b07:	01 d0                	add    eax,edx
c0017b09:	83 c0 2c             	add    eax,0x2c
c0017b0c:	8a 00                	mov    al,BYTE PTR [eax]
c0017b0e:	0f b6 d0             	movzx  edx,al
c0017b11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b15:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b1c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b20:	0f b6 c0             	movzx  eax,al
c0017b23:	c1 e0 08             	shl    eax,0x8
c0017b26:	09 d0                	or     eax,edx
c0017b28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b2c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017b31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b35:	8d 50 01             	lea    edx,[eax+0x1]
c0017b38:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b40:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b44:	0f b6 c0             	movzx  eax,al
c0017b47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b4f:	c1 e0 08             	shl    eax,0x8
c0017b52:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017b56:	89 c1                	mov    ecx,eax
c0017b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b5c:	c1 e0 18             	shl    eax,0x18
c0017b5f:	89 c3                	mov    ebx,eax
c0017b61:	a1 b0 03 03 c0       	mov    eax,ds:0xc00303b0
c0017b66:	8d 50 01             	lea    edx,[eax+0x1]
c0017b69:	89 15 b0 03 03 c0    	mov    DWORD PTR ds:0xc00303b0,edx
c0017b6f:	09 d9                	or     ecx,ebx
c0017b71:	89 ca                	mov    edx,ecx
c0017b73:	89 14 85 c0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc40],edx
c0017b7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017b7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b86:	68 d4 ac 02 c0       	push   0xc002acd4
c0017b8b:	e8 61 ad ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017b90:	83 c4 10             	add    esp,0x10
c0017b93:	eb 0c                	jmp    c0017ba1 <scanMADT()+0x469>
c0017b95:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017b9a:	75 05                	jne    c0017ba1 <scanMADT()+0x469>
c0017b9c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017ba1:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017ba6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017baa:	01 d0                	add    eax,edx
c0017bac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017bb0:	e9 54 fc ff ff       	jmp    c0017809 <scanMADT()+0xd1>
c0017bb5:	90                   	nop
c0017bb6:	eb 01                	jmp    c0017bb9 <scanMADT()+0x481>
c0017bb8:	90                   	nop
c0017bb9:	83 c4 38             	add    esp,0x38
c0017bbc:	5b                   	pop    ebx
c0017bbd:	c3                   	ret    

c0017bbe <ACPI::ACPI()>:
c0017bbe:	83 ec 0c             	sub    esp,0xc
c0017bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bc5:	83 ec 08             	sub    esp,0x8
c0017bc8:	68 77 ab 02 c0       	push   0xc002ab77
c0017bcd:	50                   	push   eax
c0017bce:	e8 35 c3 ff ff       	call   c0013f08 <Device::Device(char const*)>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c0017bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bdf:	89 10                	mov    DWORD PTR [eax],edx
c0017be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017be5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf0:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bfe:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c0c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c17:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017c1e:	e8 15 fb ff ff       	call   c0017738 <scanMADT()>
c0017c23:	90                   	nop
c0017c24:	83 c4 0c             	add    esp,0xc
c0017c27:	c3                   	ret    

c0017c28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017c28:	83 ec 2c             	sub    esp,0x2c
c0017c2b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017c2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c33:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017c37:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c3b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017c40:	88 d0                	mov    al,dl
c0017c42:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c46:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c4b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c57:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c5d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017c61:	0f 8d 97 00 00 00    	jge    c0017cfe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017c67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c6f:	83 c2 2a             	add    edx,0x2a
c0017c72:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017c76:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017c7b:	75 78                	jne    c0017cf5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c85:	83 c2 2a             	add    edx,0x2a
c0017c88:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017c8c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017c90:	75 63                	jne    c0017cf5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c92:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c97:	74 3a                	je     c0017cd3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017c99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ca1:	83 c2 2a             	add    edx,0x2a
c0017ca4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017ca8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017caf:	39 c2                	cmp    edx,eax
c0017cb1:	74 10                	je     c0017cc3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017cb3:	83 ec 0c             	sub    esp,0xc
c0017cb6:	68 10 ad 02 c0       	push   0xc002ad10
c0017cbb:	e8 a5 21 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0017cc0:	83 c4 10             	add    esp,0x10
c0017cc3:	83 ec 0c             	sub    esp,0xc
c0017cc6:	68 7c ab 02 c0       	push   0xc002ab7c
c0017ccb:	e8 95 21 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0017cd0:	83 c4 10             	add    esp,0x10
c0017cd3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017cd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cdb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cdf:	83 c2 2a             	add    edx,0x2a
c0017ce2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017ce6:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ce8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ceb:	89 01                	mov    DWORD PTR [ecx],eax
c0017ced:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017cf0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cf5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017cf9:	e9 55 ff ff ff       	jmp    c0017c53 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017cfe:	90                   	nop
c0017cff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d03:	83 c4 2c             	add    esp,0x2c
c0017d06:	c2 04 00             	ret    0x4
c0017d09:	90                   	nop

c0017d0a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017d0a:	83 ec 1c             	sub    esp,0x1c
c0017d0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d11:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017d15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d19:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017d1e:	88 c8                	mov    al,cl
c0017d20:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017d24:	88 d0                	mov    al,dl
c0017d26:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017d2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d2e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d38:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d3b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017d3f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017d43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d47:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d51:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017d54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d58:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d61:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d67:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017d6b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d72:	83 c2 2a             	add    edx,0x2a
c0017d75:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d7d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d87:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d8e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d96:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d9c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017da9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dad:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017db3:	3d 00 02 00 00       	cmp    eax,0x200
c0017db8:	75 10                	jne    c0017dca <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017dba:	83 ec 0c             	sub    esp,0xc
c0017dbd:	68 8b ab 02 c0       	push   0xc002ab8b
c0017dc2:	e8 9e 20 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0017dc7:	83 c4 10             	add    esp,0x10
c0017dca:	90                   	nop
c0017dcb:	83 c4 1c             	add    esp,0x1c
c0017dce:	c3                   	ret    
c0017dcf:	90                   	nop

c0017dd0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017dd0:	b8 00 00 00 00       	mov    eax,0x0
c0017dd5:	c3                   	ret    

c0017dd6 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017dd6:	83 ec 1c             	sub    esp,0x1c
c0017dd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ddd:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017de0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017de4:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017de9:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017dee:	83 ec 08             	sub    esp,0x8
c0017df1:	52                   	push   edx
c0017df2:	50                   	push   eax
c0017df3:	e8 42 6e ff ff       	call   c000ec3a <Computer::readCMOS(unsigned char)>
c0017df8:	83 c4 10             	add    esp,0x10
c0017dfb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017dff:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017e04:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e09:	83 ec 04             	sub    esp,0x4
c0017e0c:	6a 01                	push   0x1
c0017e0e:	52                   	push   edx
c0017e0f:	50                   	push   eax
c0017e10:	e8 3b 6f ff ff       	call   c000ed50 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e15:	83 c4 10             	add    esp,0x10
c0017e18:	90                   	nop
c0017e19:	83 c4 1c             	add    esp,0x1c
c0017e1c:	c3                   	ret    
c0017e1d:	90                   	nop

c0017e1e <ACPI::open(int, int, void*)>:
c0017e1e:	53                   	push   ebx
c0017e1f:	83 ec 28             	sub    esp,0x28
c0017e22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e26:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017e2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e31:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017e38:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0017e3d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e43:	83 e0 04             	and    eax,0x4
c0017e46:	84 c0                	test   al,al
c0017e48:	74 47                	je     c0017e91 <ACPI::open(int, int, void*)+0x73>
c0017e4a:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c0017e4f:	83 ec 08             	sub    esp,0x8
c0017e52:	68 a8 ab 02 c0       	push   0xc002aba8
c0017e57:	50                   	push   eax
c0017e58:	e8 3f f8 ff ff       	call   c001769c <findDataTable(unsigned char*, char*)>
c0017e5d:	83 c4 10             	add    esp,0x10
c0017e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e64:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017e69:	74 26                	je     c0017e91 <ACPI::open(int, int, void*)+0x73>
c0017e6b:	83 ec 0c             	sub    esp,0xc
c0017e6e:	68 ad ab 02 c0       	push   0xc002abad
c0017e73:	e8 79 aa ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e7f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017e86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e8a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017e91:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017e99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e9d:	8a 00                	mov    al,BYTE PTR [eax]
c0017e9f:	3c 01                	cmp    al,0x1
c0017ea1:	75 28                	jne    c0017ecb <ACPI::open(int, int, void*)+0xad>
c0017ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ea7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017eae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017eb2:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	68 be ab 02 c0       	push   0xc002abbe
c0017ec1:	e8 2b aa ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017ec6:	83 c4 10             	add    esp,0x10
c0017ec9:	eb 25                	jmp    c0017ef0 <ACPI::open(int, int, void*)+0xd2>
c0017ecb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ecf:	8a 00                	mov    al,BYTE PTR [eax]
c0017ed1:	3c 02                	cmp    al,0x2
c0017ed3:	75 1b                	jne    c0017ef0 <ACPI::open(int, int, void*)+0xd2>
c0017ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ed9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017ee0:	83 ec 0c             	sub    esp,0xc
c0017ee3:	68 c6 ab 02 c0       	push   0xc002abc6
c0017ee8:	e8 04 aa ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017eed:	83 c4 10             	add    esp,0x10
c0017ef0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ef4:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017efa:	83 f0 01             	xor    eax,0x1
c0017efd:	84 c0                	test   al,al
c0017eff:	74 6a                	je     c0017f6b <ACPI::open(int, int, void*)+0x14d>
c0017f01:	83 ec 0c             	sub    esp,0xc
c0017f04:	68 ce ab 02 c0       	push   0xc002abce
c0017f09:	e8 e3 a9 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017f0e:	83 c4 10             	add    esp,0x10
c0017f11:	e8 3a 82 fe ff       	call   c0000150 <manualPCIProbe>
c0017f16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f1a:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017f1f:	75 28                	jne    c0017f49 <ACPI::open(int, int, void*)+0x12b>
c0017f21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f25:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017f2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f30:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017f37:	83 ec 0c             	sub    esp,0xc
c0017f3a:	68 dc ab 02 c0       	push   0xc002abdc
c0017f3f:	e8 ad a9 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017f44:	83 c4 10             	add    esp,0x10
c0017f47:	eb 22                	jmp    c0017f6b <ACPI::open(int, int, void*)+0x14d>
c0017f49:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017f4e:	75 1b                	jne    c0017f6b <ACPI::open(int, int, void*)+0x14d>
c0017f50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f54:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017f5b:	83 ec 0c             	sub    esp,0xc
c0017f5e:	68 e6 ab 02 c0       	push   0xc002abe6
c0017f63:	e8 89 a9 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017f68:	83 c4 10             	add    esp,0x10
c0017f6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f6f:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017f75:	84 c0                	test   al,al
c0017f77:	74 13                	je     c0017f8c <ACPI::open(int, int, void*)+0x16e>
c0017f79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f7d:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0017f83:	83 f0 01             	xor    eax,0x1
c0017f86:	0f b6 c0             	movzx  eax,al
c0017f89:	40                   	inc    eax
c0017f8a:	eb 05                	jmp    c0017f91 <ACPI::open(int, int, void*)+0x173>
c0017f8c:	b8 00 00 00 00       	mov    eax,0x0
c0017f91:	83 ec 08             	sub    esp,0x8
c0017f94:	50                   	push   eax
c0017f95:	68 f0 ab 02 c0       	push   0xc002abf0
c0017f9a:	e8 52 a9 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0017f9f:	83 c4 10             	add    esp,0x10
c0017fa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fa6:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017fac:	84 c0                	test   al,al
c0017fae:	74 67                	je     c0018017 <ACPI::open(int, int, void*)+0x1f9>
c0017fb0:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017fb8:	83 ec 0c             	sub    esp,0xc
c0017fbb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017fbf:	e8 5e 76 ff ff       	call   c000f622 <malloc>
c0017fc4:	83 c4 10             	add    esp,0x10
c0017fc7:	89 c3                	mov    ebx,eax
c0017fc9:	83 ec 0c             	sub    esp,0xc
c0017fcc:	53                   	push   ebx
c0017fcd:	e8 f2 9f 00 00       	call   c0021fc4 <PCI::PCI()>
c0017fd2:	83 c4 10             	add    esp,0x10
c0017fd5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017fd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fdd:	83 ec 08             	sub    esp,0x8
c0017fe0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017fe4:	50                   	push   eax
c0017fe5:	e8 2e bd ff ff       	call   c0013d18 <Device::addChild(Device*)>
c0017fea:	83 c4 10             	add    esp,0x10
c0017fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ff3:	83 c0 08             	add    eax,0x8
c0017ff6:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ff8:	6a 00                	push   0x0
c0017ffa:	6a 00                	push   0x0
c0017ffc:	6a 00                	push   0x0
c0017ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018002:	ff d0                	call   eax
c0018004:	83 c4 10             	add    esp,0x10
c0018007:	83 ec 0c             	sub    esp,0xc
c001800a:	68 f9 ab 02 c0       	push   0xc002abf9
c001800f:	e8 dd a8 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018014:	83 c4 10             	add    esp,0x10
c0018017:	83 ec 0c             	sub    esp,0xc
c001801a:	68 04 ac 02 c0       	push   0xc002ac04
c001801f:	e8 cc 43 00 00       	call   c001c3f0 <Thr::loadKernelSymbolTable(char const*)>
c0018024:	83 c4 10             	add    esp,0x10
c0018027:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001802c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018032:	83 e0 04             	and    eax,0x4
c0018035:	84 c0                	test   al,al
c0018037:	0f 84 d2 00 00 00    	je     c001810f <ACPI::open(int, int, void*)+0x2f1>
c001803d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018044:	83 ec 0c             	sub    esp,0xc
c0018047:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001804b:	e8 d2 75 ff ff       	call   c000f622 <malloc>
c0018050:	83 c4 10             	add    esp,0x10
c0018053:	89 c3                	mov    ebx,eax
c0018055:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001805a:	83 ec 04             	sub    esp,0x4
c001805d:	50                   	push   eax
c001805e:	68 22 ac 02 c0       	push   0xc002ac22
c0018063:	53                   	push   ebx
c0018064:	e8 e1 ad ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c0018069:	83 c4 10             	add    esp,0x10
c001806c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018070:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018075:	74 17                	je     c001808e <ACPI::open(int, int, void*)+0x270>
c0018077:	83 ec 0c             	sub    esp,0xc
c001807a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001807e:	e8 99 b0 ff ff       	call   c001311c <File::exists()>
c0018083:	83 c4 10             	add    esp,0x10
c0018086:	84 c0                	test   al,al
c0018088:	74 04                	je     c001808e <ACPI::open(int, int, void*)+0x270>
c001808a:	b0 01                	mov    al,0x1
c001808c:	eb 02                	jmp    c0018090 <ACPI::open(int, int, void*)+0x272>
c001808e:	b0 00                	mov    al,0x0
c0018090:	84 c0                	test   al,al
c0018092:	74 22                	je     c00180b6 <ACPI::open(int, int, void*)+0x298>
c0018094:	83 ec 08             	sub    esp,0x8
c0018097:	6a 01                	push   0x1
c0018099:	68 22 ac 02 c0       	push   0xc002ac22
c001809e:	e8 aa 4d 00 00       	call   c001ce4d <Thr::loadDLL(char const*, bool)>
c00180a3:	83 c4 10             	add    esp,0x10
c00180a6:	83 ec 08             	sub    esp,0x8
c00180a9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00180ad:	50                   	push   eax
c00180ae:	e8 a9 4f 00 00       	call   c001d05c <Thr::executeDLL(unsigned long, void*)>
c00180b3:	83 c4 10             	add    esp,0x10
c00180b6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180bb:	74 1e                	je     c00180db <ACPI::open(int, int, void*)+0x2bd>
c00180bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00180c2:	74 17                	je     c00180db <ACPI::open(int, int, void*)+0x2bd>
c00180c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00180ca:	83 c0 08             	add    eax,0x8
c00180cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00180cf:	83 ec 0c             	sub    esp,0xc
c00180d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180d6:	ff d0                	call   eax
c00180d8:	83 c4 10             	add    esp,0x10
c00180db:	a1 a8 03 03 c0       	mov    eax,ds:0xc00303a8
c00180e0:	83 ec 08             	sub    esp,0x8
c00180e3:	68 3f ac 02 c0       	push   0xc002ac3f
c00180e8:	50                   	push   eax
c00180e9:	e8 ae f5 ff ff       	call   c001769c <findDataTable(unsigned char*, char*)>
c00180ee:	83 c4 10             	add    esp,0x10
c00180f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180f5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00180fa:	74 13                	je     c001810f <ACPI::open(int, int, void*)+0x2f1>
c00180fc:	83 ec 08             	sub    esp,0x8
c00180ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018103:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018107:	e8 ca fc ff ff       	call   c0017dd6 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001810c:	83 c4 10             	add    esp,0x10
c001810f:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c0018115:	83 ec 08             	sub    esp,0x8
c0018118:	6a 01                	push   0x1
c001811a:	68 44 ac 02 c0       	push   0xc002ac44
c001811f:	e8 29 4d 00 00       	call   c001ce4d <Thr::loadDLL(char const*, bool)>
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	83 ec 08             	sub    esp,0x8
c001812a:	53                   	push   ebx
c001812b:	50                   	push   eax
c001812c:	e8 2b 4f 00 00       	call   c001d05c <Thr::executeDLL(unsigned long, void*)>
c0018131:	83 c4 10             	add    esp,0x10
c0018134:	8b 1d c8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dac8
c001813a:	83 ec 08             	sub    esp,0x8
c001813d:	6a 01                	push   0x1
c001813f:	68 61 ac 02 c0       	push   0xc002ac61
c0018144:	e8 04 4d 00 00       	call   c001ce4d <Thr::loadDLL(char const*, bool)>
c0018149:	83 c4 10             	add    esp,0x10
c001814c:	83 ec 08             	sub    esp,0x8
c001814f:	53                   	push   ebx
c0018150:	50                   	push   eax
c0018151:	e8 06 4f 00 00       	call   c001d05c <Thr::executeDLL(unsigned long, void*)>
c0018156:	83 c4 10             	add    esp,0x10
c0018159:	b8 00 00 00 00       	mov    eax,0x0
c001815e:	83 c4 28             	add    esp,0x28
c0018161:	5b                   	pop    ebx
c0018162:	c3                   	ret    
c0018163:	90                   	nop

c0018164 <ACPI::sleep()>:
c0018164:	83 ec 0c             	sub    esp,0xc
c0018167:	a1 80 01 03 c0       	mov    eax,ds:0xc0030180
c001816c:	85 c0                	test   eax,eax
c001816e:	74 07                	je     c0018177 <ACPI::sleep()+0x13>
c0018170:	a1 80 01 03 c0       	mov    eax,ds:0xc0030180
c0018175:	ff d0                	call   eax
c0018177:	90                   	nop
c0018178:	83 c4 0c             	add    esp,0xc
c001817b:	c3                   	ret    

c001817c <CPU::close(int, int, void*)>:
c001817c:	31 c0                	xor    eax,eax
c001817e:	c3                   	ret    
c001817f:	90                   	nop

c0018180 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018180:	55                   	push   ebp
c0018181:	57                   	push   edi
c0018182:	56                   	push   esi
c0018183:	53                   	push   ebx
c0018184:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018188:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001818c:	89 ce                	mov    esi,ecx
c001818e:	89 d5                	mov    ebp,edx
c0018190:	80 f9 04             	cmp    cl,0x4
c0018193:	75 28                	jne    c00181bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018195:	8d 42 f9             	lea    eax,[edx-0x7]
c0018198:	3c 03                	cmp    al,0x3
c001819a:	0f 86 63 01 00 00    	jbe    c0018303 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181a0:	80 fa 03             	cmp    dl,0x3
c00181a3:	0f 84 5a 01 00 00    	je     c0018303 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181a9:	8d 7a f2             	lea    edi,[edx-0xe]
c00181ac:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c00181b1:	89 fb                	mov    ebx,edi
c00181b3:	80 fb 01             	cmp    bl,0x1
c00181b6:	77 4e                	ja     c0018206 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00181b8:	e9 52 01 00 00       	jmp    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181bd:	80 f9 05             	cmp    cl,0x5
c00181c0:	75 4d                	jne    c001820f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00181c2:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c00181c7:	80 fa 03             	cmp    dl,0x3
c00181ca:	0f 86 3f 01 00 00    	jbe    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181d0:	8d 7a fa             	lea    edi,[edx-0x6]
c00181d3:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c00181d8:	89 fb                	mov    ebx,edi
c00181da:	80 fb 01             	cmp    bl,0x1
c00181dd:	0f 86 2c 01 00 00    	jbe    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181e3:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c00181e8:	80 fa 08             	cmp    dl,0x8
c00181eb:	0f 84 1e 01 00 00    	je     c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181f1:	89 d7                	mov    edi,edx
c00181f3:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c00181f8:	83 e7 fb             	and    edi,0xfffffffb
c00181fb:	89 fb                	mov    ebx,edi
c00181fd:	80 fb 09             	cmp    bl,0x9
c0018200:	0f 84 09 01 00 00    	je     c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018206:	31 c0                	xor    eax,eax
c0018208:	89 eb                	mov    ebx,ebp
c001820a:	0f b6 fb             	movzx  edi,bl
c001820d:	eb 30                	jmp    c001823f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001820f:	31 c0                	xor    eax,eax
c0018211:	80 f9 06             	cmp    cl,0x6
c0018214:	75 f2                	jne    c0018208 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018216:	80 fa 0a             	cmp    dl,0xa
c0018219:	77 ed                	ja     c0018208 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001821b:	bf de 05 00 00       	mov    edi,0x5de
c0018220:	0f a3 d7             	bt     edi,edx
c0018223:	73 e3                	jae    c0018208 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018225:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c001822a:	e9 e0 00 00 00       	jmp    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001822f:	39 c7                	cmp    edi,eax
c0018231:	0f 84 d3 00 00 00    	je     c001830a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018237:	40                   	inc    eax
c0018238:	3d d0 00 00 00       	cmp    eax,0xd0
c001823d:	74 09                	je     c0018248 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001823f:	89 f3                	mov    ebx,esi
c0018241:	80 fb 0f             	cmp    bl,0xf
c0018244:	75 f1                	jne    c0018237 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018246:	eb e7                	jmp    c001822f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018248:	80 f9 10             	cmp    cl,0x10
c001824b:	75 14                	jne    c0018261 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001824d:	8d 42 fc             	lea    eax,[edx-0x4]
c0018250:	83 e0 fb             	and    eax,0xfffffffb
c0018253:	3c 02                	cmp    al,0x2
c0018255:	76 34                	jbe    c001828b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018257:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c001825c:	80 fa 02             	cmp    dl,0x2
c001825f:	eb 24                	jmp    c0018285 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018261:	80 f9 11             	cmp    cl,0x11
c0018264:	75 13                	jne    c0018279 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018266:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c001826b:	80 fa 03             	cmp    dl,0x3
c001826e:	0f 85 9b 00 00 00    	jne    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018274:	e9 91 00 00 00       	jmp    c001830a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018279:	80 f9 12             	cmp    cl,0x12
c001827c:	75 14                	jne    c0018292 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001827e:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018283:	fe ca                	dec    dl
c0018285:	0f 85 84 00 00 00    	jne    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001828b:	b8 60 cf 02 c0       	mov    eax,0xc002cf60
c0018290:	eb 7d                	jmp    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018292:	80 f9 14             	cmp    cl,0x14
c0018295:	75 12                	jne    c00182a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018297:	4a                   	dec    edx
c0018298:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c001829d:	80 fa 01             	cmp    dl,0x1
c00182a0:	77 6d                	ja     c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182a2:	b8 70 cf 02 c0       	mov    eax,0xc002cf70
c00182a7:	eb 66                	jmp    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182a9:	80 f9 15             	cmp    cl,0x15
c00182ac:	75 31                	jne    c00182df <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00182ae:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c00182b3:	80 fa 01             	cmp    dl,0x1
c00182b6:	74 57                	je     c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182b8:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c00182bd:	80 fa 13             	cmp    dl,0x13
c00182c0:	76 0c                	jbe    c00182ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00182c2:	80 fa 30             	cmp    dl,0x30
c00182c5:	75 48                	jne    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182c7:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c00182cc:	eb 41                	jmp    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ce:	b9 04 00 09 00       	mov    ecx,0x90004
c00182d3:	0f a3 d1             	bt     ecx,edx
c00182d6:	73 37                	jae    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d8:	b8 90 cf 02 c0       	mov    eax,0xc002cf90
c00182dd:	eb 30                	jmp    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182df:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c00182e4:	80 f9 16             	cmp    cl,0x16
c00182e7:	75 26                	jne    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182e9:	b8 b0 cf 02 c0       	mov    eax,0xc002cfb0
c00182ee:	84 d2                	test   dl,dl
c00182f0:	74 1d                	je     c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f2:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c00182f7:	80 fa 30             	cmp    dl,0x30
c00182fa:	75 13                	jne    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182fc:	b8 c0 cf 02 c0       	mov    eax,0xc002cfc0
c0018301:	eb 0c                	jmp    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018303:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c0018308:	eb 05                	jmp    c001830f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001830a:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c001830f:	5b                   	pop    ebx
c0018310:	5e                   	pop    esi
c0018311:	5f                   	pop    edi
c0018312:	5d                   	pop    ebp
c0018313:	c3                   	ret    

c0018314 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018314:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018318:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001831c:	80 f9 04             	cmp    cl,0x4
c001831f:	75 6b                	jne    c001838c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018321:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018326:	80 fa 01             	cmp    dl,0x1
c0018329:	0f 86 92 02 00 00    	jbe    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001832f:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c0018334:	80 fa 02             	cmp    dl,0x2
c0018337:	0f 84 84 02 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001833d:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c0018342:	80 fa 03             	cmp    dl,0x3
c0018345:	0f 84 76 02 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001834b:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018350:	80 fa 04             	cmp    dl,0x4
c0018353:	0f 84 68 02 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018359:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c001835e:	80 fa 05             	cmp    dl,0x5
c0018361:	0f 84 5a 02 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018367:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c001836c:	80 fa 07             	cmp    dl,0x7
c001836f:	0f 84 4c 02 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018375:	83 ea 08             	sub    edx,0x8
c0018378:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c001837d:	80 fa 01             	cmp    dl,0x1
c0018380:	0f 87 3b 02 00 00    	ja     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018386:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c001838b:	c3                   	ret    
c001838c:	80 f9 05             	cmp    cl,0x5
c001838f:	75 45                	jne    c00183d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018391:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018394:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018399:	80 f9 02             	cmp    cl,0x2
c001839c:	0f 86 1f 02 00 00    	jbe    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a2:	80 fa 04             	cmp    dl,0x4
c00183a5:	0f 84 f3 01 00 00    	je     c001859e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00183ab:	80 fa 07             	cmp    dl,0x7
c00183ae:	0f 84 0d 02 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183b4:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00183b9:	80 fa 08             	cmp    dl,0x8
c00183bc:	0f 84 ff 01 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183c2:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c00183c7:	80 fa 09             	cmp    dl,0x9
c00183ca:	0f 85 f1 01 00 00    	jne    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183d0:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00183d5:	c3                   	ret    
c00183d6:	80 f9 06             	cmp    cl,0x6
c00183d9:	0f 85 85 01 00 00    	jne    c0018564 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00183df:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00183e4:	80 fa 01             	cmp    dl,0x1
c00183e7:	0f 84 d4 01 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ed:	8d 42 fb             	lea    eax,[edx-0x5]
c00183f0:	3c 01                	cmp    al,0x1
c00183f2:	0f 86 ac 01 00 00    	jbe    c00185a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00183f8:	80 fa 03             	cmp    dl,0x3
c00183fb:	0f 84 a3 01 00 00    	je     c00185a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018401:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018404:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c0018409:	80 f9 01             	cmp    cl,0x1
c001840c:	0f 86 af 01 00 00    	jbe    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018412:	80 fa 09             	cmp    dl,0x9
c0018415:	0f 84 8f 01 00 00    	je     c00185aa <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001841b:	8d 4a f6             	lea    ecx,[edx-0xa]
c001841e:	80 f9 01             	cmp    cl,0x1
c0018421:	0f 86 9a 01 00 00    	jbe    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018427:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c001842c:	80 fa 0d             	cmp    dl,0xd
c001842f:	0f 84 8c 01 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018435:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c001843a:	80 fa 0e             	cmp    dl,0xe
c001843d:	0f 84 7e 01 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018443:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018448:	80 fa 0f             	cmp    dl,0xf
c001844b:	0f 84 70 01 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018451:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018456:	80 fa 15             	cmp    dl,0x15
c0018459:	0f 84 62 01 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018462:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018467:	80 f9 01             	cmp    cl,0x1
c001846a:	0f 86 51 01 00 00    	jbe    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018470:	80 fa 1a             	cmp    dl,0x1a
c0018473:	0f 84 37 01 00 00    	je     c00185b0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018479:	80 fa 1c             	cmp    dl,0x1c
c001847c:	0f 84 34 01 00 00    	je     c00185b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018482:	80 fa 1d             	cmp    dl,0x1d
c0018485:	0f 84 36 01 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848b:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0018490:	80 fa 25             	cmp    dl,0x25
c0018493:	0f 84 28 01 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018499:	8d 4a da             	lea    ecx,[edx-0x26]
c001849c:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00184a1:	80 f9 01             	cmp    cl,0x1
c00184a4:	0f 86 17 01 00 00    	jbe    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184aa:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00184af:	80 fa 2a             	cmp    dl,0x2a
c00184b2:	0f 84 09 01 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b8:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c00184bd:	80 fa 2c             	cmp    dl,0x2c
c00184c0:	0f 84 fb 00 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c6:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c00184cb:	80 fa 2d             	cmp    dl,0x2d
c00184ce:	0f 84 ed 00 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d4:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00184d9:	80 fa 2e             	cmp    dl,0x2e
c00184dc:	0f 84 df 00 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e2:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c00184e7:	80 fa 2f             	cmp    dl,0x2f
c00184ea:	0f 84 d1 00 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f0:	8d 4a cb             	lea    ecx,[edx-0x35]
c00184f3:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00184f8:	80 f9 01             	cmp    cl,0x1
c00184fb:	0f 86 c0 00 00 00    	jbe    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018501:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018506:	80 fa 37             	cmp    dl,0x37
c0018509:	0f 84 b2 00 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850f:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c0018514:	80 fa 3a             	cmp    dl,0x3a
c0018517:	0f 84 a4 00 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001851d:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c0018522:	80 fa 3c             	cmp    dl,0x3c
c0018525:	0f 84 96 00 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001852b:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c0018530:	80 fa 3d             	cmp    dl,0x3d
c0018533:	0f 84 88 00 00 00    	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018539:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c001853e:	80 fa 3e             	cmp    dl,0x3e
c0018541:	74 7e                	je     c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018543:	8d 42 bb             	lea    eax,[edx-0x45]
c0018546:	3c 01                	cmp    al,0x1
c0018548:	76 72                	jbe    c00185bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001854a:	80 fa 3f             	cmp    dl,0x3f
c001854d:	74 6d                	je     c00185bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001854f:	80 fa 4a             	cmp    dl,0x4a
c0018552:	74 0a                	je     c001855e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018554:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018559:	80 fa 4d             	cmp    dl,0x4d
c001855c:	75 63                	jne    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855e:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018563:	c3                   	ret    
c0018564:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018569:	80 f9 0b             	cmp    cl,0xb
c001856c:	75 0a                	jne    c0018578 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001856e:	fe ca                	dec    dl
c0018570:	75 4f                	jne    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018572:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c0018577:	c3                   	ret    
c0018578:	80 f9 0f             	cmp    cl,0xf
c001857b:	75 44                	jne    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001857d:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018582:	80 fa 02             	cmp    dl,0x2
c0018585:	76 3a                	jbe    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018587:	8d 42 fd             	lea    eax,[edx-0x3]
c001858a:	3c 01                	cmp    al,0x1
c001858c:	76 0a                	jbe    c0018598 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001858e:	b8 5e b0 02 c0       	mov    eax,0xc002b05e
c0018593:	80 fa 06             	cmp    dl,0x6
c0018596:	75 29                	jne    c00185c1 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018598:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c001859d:	c3                   	ret    
c001859e:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00185a3:	c3                   	ret    
c00185a4:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00185a9:	c3                   	ret    
c00185aa:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00185af:	c3                   	ret    
c00185b0:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00185b5:	c3                   	ret    
c00185b6:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00185bb:	c3                   	ret    
c00185bc:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c00185c1:	c3                   	ret    

c00185c2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00185c2:	60                   	pusha  
c00185c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00185cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00185cf:	9c                   	pushf  
c00185d0:	fa                   	cli    
c00185d1:	0f 09                	wbinvd 
c00185d3:	0f 30                	wrmsr  
c00185d5:	9d                   	popf   
c00185d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185da:	89 02                	mov    DWORD PTR [edx],eax
c00185dc:	61                   	popa   
c00185dd:	c3                   	ret    

c00185de <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00185de:	60                   	pusha  
c00185df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185e3:	9c                   	pushf  
c00185e4:	fa                   	cli    
c00185e5:	0f 09                	wbinvd 
c00185e7:	31 c0                	xor    eax,eax
c00185e9:	31 d2                	xor    edx,edx
c00185eb:	0f 32                	rdmsr  
c00185ed:	9d                   	popf   
c00185ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185f2:	89 02                	mov    DWORD PTR [edx],eax
c00185f4:	61                   	popa   
c00185f5:	c3                   	ret    

c00185f6 <CPU::AMD_K6_writeback(int, int, int)>:
c00185f6:	56                   	push   esi
c00185f7:	53                   	push   ebx
c00185f8:	83 ec 10             	sub    esp,0x10
c00185fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185ff:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018604:	75 5d                	jne    c0018663 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018606:	83 f8 08             	cmp    eax,0x8
c0018609:	75 09                	jne    c0018614 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001860b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018610:	7e 13                	jle    c0018625 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018612:	eb 30                	jmp    c0018644 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018614:	83 f8 06             	cmp    eax,0x6
c0018617:	7c 4a                	jl     c0018663 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018619:	83 f8 07             	cmp    eax,0x7
c001861c:	7e 07                	jle    c0018625 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001861e:	83 f8 09             	cmp    eax,0x9
c0018621:	74 21                	je     c0018644 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018623:	eb 3e                	jmp    c0018663 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018625:	89 e6                	mov    esi,esp
c0018627:	8b 1d 04 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db04
c001862d:	56                   	push   esi
c001862e:	c1 eb 15             	shr    ebx,0x15
c0018631:	68 82 00 00 c0       	push   0xc0000082
c0018636:	83 e3 7e             	and    ebx,0x7e
c0018639:	e8 a0 ff ff ff       	call   c00185de <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001863e:	56                   	push   esi
c001863f:	6a 00                	push   0x0
c0018641:	53                   	push   ebx
c0018642:	eb 12                	jmp    c0018656 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018644:	89 e3                	mov    ebx,esp
c0018646:	53                   	push   ebx
c0018647:	68 82 00 00 c0       	push   0xc0000082
c001864c:	e8 8d ff ff ff       	call   c00185de <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018651:	53                   	push   ebx
c0018652:	6a 00                	push   0x0
c0018654:	6a 00                	push   0x0
c0018656:	68 82 00 00 c0       	push   0xc0000082
c001865b:	e8 62 ff ff ff       	call   c00185c2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018660:	83 c4 18             	add    esp,0x18
c0018663:	83 c4 10             	add    esp,0x10
c0018666:	5b                   	pop    ebx
c0018667:	5e                   	pop    esi
c0018668:	c3                   	ret    
c0018669:	90                   	nop

c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001866a:	55                   	push   ebp
c001866b:	57                   	push   edi
c001866c:	56                   	push   esi
c001866d:	53                   	push   ebx
c001866e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018672:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018676:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001867a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001867e:	39 05 e0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe0,eax
c0018684:	75 23                	jne    c00186a9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018686:	a1 0c 06 03 c0       	mov    eax,ds:0xc003060c
c001868b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001868f:	89 06                	mov    DWORD PTR [esi],eax
c0018691:	a1 08 06 03 c0       	mov    eax,ds:0xc0030608
c0018696:	89 07                	mov    DWORD PTR [edi],eax
c0018698:	a1 04 06 03 c0       	mov    eax,ds:0xc0030604
c001869d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00186a0:	a1 00 06 03 c0       	mov    eax,ds:0xc0030600
c00186a5:	89 02                	mov    DWORD PTR [edx],eax
c00186a7:	eb 3f                	jmp    c00186e8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00186a9:	31 c9                	xor    ecx,ecx
c00186ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186af:	0f a2                	cpuid  
c00186b1:	89 06                	mov    DWORD PTR [esi],eax
c00186b3:	89 1f                	mov    DWORD PTR [edi],ebx
c00186b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186b9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00186bc:	89 10                	mov    DWORD PTR [eax],edx
c00186be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186c2:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c00186c7:	8b 06                	mov    eax,DWORD PTR [esi]
c00186c9:	a3 0c 06 03 c0       	mov    ds:0xc003060c,eax
c00186ce:	8b 07                	mov    eax,DWORD PTR [edi]
c00186d0:	a3 08 06 03 c0       	mov    ds:0xc0030608,eax
c00186d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00186d8:	a3 04 06 03 c0       	mov    ds:0xc0030604,eax
c00186dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00186e3:	a3 00 06 03 c0       	mov    ds:0xc0030600,eax
c00186e8:	5b                   	pop    ebx
c00186e9:	5e                   	pop    esi
c00186ea:	5f                   	pop    edi
c00186eb:	5d                   	pop    ebp
c00186ec:	c3                   	ret    
c00186ed:	90                   	nop

c00186ee <CPU::cpuidCheckEDX(unsigned int)>:
c00186ee:	83 ec 10             	sub    esp,0x10
c00186f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f5:	50                   	push   eax
c00186f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186fa:	50                   	push   eax
c00186fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186ff:	50                   	push   eax
c0018700:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018704:	50                   	push   eax
c0018705:	6a 01                	push   0x1
c0018707:	e8 5e ff ff ff       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001870c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018710:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018714:	0f 95 c0             	setne  al
c0018717:	83 c4 24             	add    esp,0x24
c001871a:	c3                   	ret    
c001871b:	90                   	nop

c001871c <CPU::cpuidCheckECX(unsigned int)>:
c001871c:	83 ec 10             	sub    esp,0x10
c001871f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018723:	50                   	push   eax
c0018724:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018728:	50                   	push   eax
c0018729:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001872d:	50                   	push   eax
c001872e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018732:	50                   	push   eax
c0018733:	6a 01                	push   0x1
c0018735:	e8 30 ff ff ff       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001873a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001873e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018742:	0f 95 c0             	setne  al
c0018745:	83 c4 24             	add    esp,0x24
c0018748:	c3                   	ret    
c0018749:	90                   	nop

c001874a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001874a:	83 ec 10             	sub    esp,0x10
c001874d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018751:	50                   	push   eax
c0018752:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018756:	50                   	push   eax
c0018757:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001875b:	50                   	push   eax
c001875c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018760:	50                   	push   eax
c0018761:	6a 07                	push   0x7
c0018763:	e8 02 ff ff ff       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018768:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001876c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018770:	0f 95 c0             	setne  al
c0018773:	83 c4 24             	add    esp,0x24
c0018776:	c3                   	ret    
c0018777:	90                   	nop

c0018778 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018778:	83 ec 10             	sub    esp,0x10
c001877b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001877f:	50                   	push   eax
c0018780:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018784:	50                   	push   eax
c0018785:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018789:	50                   	push   eax
c001878a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001878e:	50                   	push   eax
c001878f:	6a 07                	push   0x7
c0018791:	e8 d4 fe ff ff       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018796:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001879a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001879e:	0f 95 c0             	setne  al
c00187a1:	83 c4 24             	add    esp,0x24
c00187a4:	c3                   	ret    
c00187a5:	90                   	nop

c00187a6 <CPU::CPU()>:
c00187a6:	83 ec 0c             	sub    esp,0xc
c00187a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ad:	83 ec 08             	sub    esp,0x8
c00187b0:	68 5e b0 02 c0       	push   0xc002b05e
c00187b5:	50                   	push   eax
c00187b6:	e8 4d b7 ff ff       	call   c0013f08 <Device::Device(char const*)>
c00187bb:	83 c4 10             	add    esp,0x10
c00187be:	ba 38 b1 02 c0       	mov    edx,0xc002b138
c00187c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c7:	89 10                	mov    DWORD PTR [eax],edx
c00187c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187cd:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00187d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187db:	05 78 01 00 00       	add    eax,0x178
c00187e0:	83 ec 0c             	sub    esp,0xc
c00187e3:	50                   	push   eax
c00187e4:	e8 51 66 ff ff       	call   c000ee3a <GDT::GDT()>
c00187e9:	83 c4 10             	add    esp,0x10
c00187ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187f0:	05 7c 09 00 00       	add    eax,0x97c
c00187f5:	83 ec 0c             	sub    esp,0xc
c00187f8:	50                   	push   eax
c00187f9:	e8 9e 68 ff ff       	call   c000f09c <IDT::IDT()>
c00187fe:	83 c4 10             	add    esp,0x10
c0018801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018805:	05 7c 11 00 00       	add    eax,0x117c
c001880a:	83 ec 0c             	sub    esp,0xc
c001880d:	50                   	push   eax
c001880e:	e8 1f 8a ff ff       	call   c0011232 <TSS::TSS()>
c0018813:	83 c4 10             	add    esp,0x10
c0018816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001881a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018825:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001882f:	90                   	nop
c0018830:	83 c4 0c             	add    esp,0xc
c0018833:	c3                   	ret    

c0018834 <CPU::displayFeatures()>:
c0018834:	53                   	push   ebx
c0018835:	83 ec 10             	sub    esp,0x10
c0018838:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001883c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018842:	68 6c ad 02 c0       	push   0xc002ad6c
c0018847:	e8 a5 a0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001884c:	59                   	pop    ecx
c001884d:	58                   	pop    eax
c001884e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018854:	50                   	push   eax
c0018855:	68 7d ad 02 c0       	push   0xc002ad7d
c001885a:	e8 92 a0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001885f:	58                   	pop    eax
c0018860:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018866:	5a                   	pop    edx
c0018867:	c1 e8 0e             	shr    eax,0xe
c001886a:	0f b6 c0             	movzx  eax,al
c001886d:	50                   	push   eax
c001886e:	68 8e ad 02 c0       	push   0xc002ad8e
c0018873:	e8 79 a0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018878:	59                   	pop    ecx
c0018879:	58                   	pop    eax
c001887a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018880:	66 c1 e8 06          	shr    ax,0x6
c0018884:	0f b6 c0             	movzx  eax,al
c0018887:	50                   	push   eax
c0018888:	68 9f ad 02 c0       	push   0xc002ad9f
c001888d:	e8 5f a0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018892:	c7 04 24 3b b2 02 c0 	mov    DWORD PTR [esp],0xc002b23b
c0018899:	e8 53 a0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001889e:	83 c4 10             	add    esp,0x10
c00188a1:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00188a6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00188ad:	74 05                	je     c00188b4 <CPU::displayFeatures()+0x80>
c00188af:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00188b4:	52                   	push   edx
c00188b5:	52                   	push   edx
c00188b6:	50                   	push   eax
c00188b7:	68 b0 ad 02 c0       	push   0xc002adb0
c00188bc:	e8 30 a0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00188c1:	83 c4 10             	add    esp,0x10
c00188c4:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00188c9:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00188d0:	78 05                	js     c00188d7 <CPU::displayFeatures()+0xa3>
c00188d2:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00188d7:	51                   	push   ecx
c00188d8:	51                   	push   ecx
c00188d9:	50                   	push   eax
c00188da:	68 c7 ad 02 c0       	push   0xc002adc7
c00188df:	e8 0d a0 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00188e4:	83 c4 10             	add    esp,0x10
c00188e7:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00188ec:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00188f3:	75 05                	jne    c00188fa <CPU::displayFeatures()+0xc6>
c00188f5:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00188fa:	52                   	push   edx
c00188fb:	52                   	push   edx
c00188fc:	50                   	push   eax
c00188fd:	68 de ad 02 c0       	push   0xc002adde
c0018902:	e8 ea 9f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018907:	83 c4 10             	add    esp,0x10
c001890a:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c001890f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018916:	75 05                	jne    c001891d <CPU::displayFeatures()+0xe9>
c0018918:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c001891d:	51                   	push   ecx
c001891e:	51                   	push   ecx
c001891f:	50                   	push   eax
c0018920:	68 f5 ad 02 c0       	push   0xc002adf5
c0018925:	e8 c7 9f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001892a:	83 c4 10             	add    esp,0x10
c001892d:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018932:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018939:	75 05                	jne    c0018940 <CPU::displayFeatures()+0x10c>
c001893b:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018940:	52                   	push   edx
c0018941:	52                   	push   edx
c0018942:	50                   	push   eax
c0018943:	68 0c ae 02 c0       	push   0xc002ae0c
c0018948:	e8 a4 9f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001894d:	83 c4 10             	add    esp,0x10
c0018950:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018955:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001895c:	75 05                	jne    c0018963 <CPU::displayFeatures()+0x12f>
c001895e:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018963:	51                   	push   ecx
c0018964:	51                   	push   ecx
c0018965:	50                   	push   eax
c0018966:	68 23 ae 02 c0       	push   0xc002ae23
c001896b:	e8 81 9f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018970:	83 c4 10             	add    esp,0x10
c0018973:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018978:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001897f:	75 05                	jne    c0018986 <CPU::displayFeatures()+0x152>
c0018981:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018986:	52                   	push   edx
c0018987:	52                   	push   edx
c0018988:	50                   	push   eax
c0018989:	68 3a ae 02 c0       	push   0xc002ae3a
c001898e:	e8 5e 9f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018993:	83 c4 10             	add    esp,0x10
c0018996:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c001899b:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00189a2:	75 05                	jne    c00189a9 <CPU::displayFeatures()+0x175>
c00189a4:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00189a9:	51                   	push   ecx
c00189aa:	51                   	push   ecx
c00189ab:	50                   	push   eax
c00189ac:	68 51 ae 02 c0       	push   0xc002ae51
c00189b1:	e8 3b 9f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00189b6:	83 c4 10             	add    esp,0x10
c00189b9:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00189be:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00189c5:	75 05                	jne    c00189cc <CPU::displayFeatures()+0x198>
c00189c7:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00189cc:	52                   	push   edx
c00189cd:	52                   	push   edx
c00189ce:	50                   	push   eax
c00189cf:	68 68 ae 02 c0       	push   0xc002ae68
c00189d4:	e8 18 9f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00189d9:	83 c4 10             	add    esp,0x10
c00189dc:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c00189e1:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00189e8:	75 05                	jne    c00189ef <CPU::displayFeatures()+0x1bb>
c00189ea:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c00189ef:	51                   	push   ecx
c00189f0:	51                   	push   ecx
c00189f1:	50                   	push   eax
c00189f2:	68 7f ae 02 c0       	push   0xc002ae7f
c00189f7:	e8 f5 9e ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00189fc:	83 c4 10             	add    esp,0x10
c00189ff:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a04:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018a0b:	75 05                	jne    c0018a12 <CPU::displayFeatures()+0x1de>
c0018a0d:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a12:	52                   	push   edx
c0018a13:	52                   	push   edx
c0018a14:	50                   	push   eax
c0018a15:	68 96 ae 02 c0       	push   0xc002ae96
c0018a1a:	e8 d2 9e ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018a1f:	83 c4 10             	add    esp,0x10
c0018a22:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a27:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018a2e:	75 05                	jne    c0018a35 <CPU::displayFeatures()+0x201>
c0018a30:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a35:	51                   	push   ecx
c0018a36:	51                   	push   ecx
c0018a37:	50                   	push   eax
c0018a38:	68 ad ae 02 c0       	push   0xc002aead
c0018a3d:	e8 af 9e ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018a42:	83 c4 10             	add    esp,0x10
c0018a45:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a4a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018a51:	75 05                	jne    c0018a58 <CPU::displayFeatures()+0x224>
c0018a53:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a58:	52                   	push   edx
c0018a59:	52                   	push   edx
c0018a5a:	50                   	push   eax
c0018a5b:	68 c4 ae 02 c0       	push   0xc002aec4
c0018a60:	e8 8c 9e ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018a65:	83 c4 10             	add    esp,0x10
c0018a68:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a6d:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018a74:	78 05                	js     c0018a7b <CPU::displayFeatures()+0x247>
c0018a76:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a7b:	51                   	push   ecx
c0018a7c:	51                   	push   ecx
c0018a7d:	50                   	push   eax
c0018a7e:	68 db ae 02 c0       	push   0xc002aedb
c0018a83:	e8 69 9e ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018a88:	83 c4 10             	add    esp,0x10
c0018a8b:	b8 b2 97 02 c0       	mov    eax,0xc00297b2
c0018a90:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018a97:	75 05                	jne    c0018a9e <CPU::displayFeatures()+0x26a>
c0018a99:	b8 b6 97 02 c0       	mov    eax,0xc00297b6
c0018a9e:	52                   	push   edx
c0018a9f:	52                   	push   edx
c0018aa0:	50                   	push   eax
c0018aa1:	68 f2 ae 02 c0       	push   0xc002aef2
c0018aa6:	e8 46 9e ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0018aab:	83 c4 18             	add    esp,0x18
c0018aae:	5b                   	pop    ebx
c0018aaf:	c3                   	ret    

c0018ab0 <CPU::detectFeatures()>:
c0018ab0:	55                   	push   ebp
c0018ab1:	57                   	push   edi
c0018ab2:	56                   	push   esi
c0018ab3:	53                   	push   ebx
c0018ab4:	83 ec 50             	sub    esp,0x50
c0018ab7:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018abb:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018ac5:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018acc:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018ad2:	6a 0d                	push   0xd
c0018ad4:	6a 00                	push   0x0
c0018ad6:	57                   	push   edi
c0018ad7:	e8 e6 7b fe ff       	call   c00006c2 <memset>
c0018adc:	83 c4 10             	add    esp,0x10
c0018adf:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0018ae4:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018aeb:	0f 84 20 09 00 00    	je     c0019411 <CPU::detectFeatures()+0x961>
c0018af1:	83 ec 0c             	sub    esp,0xc
c0018af4:	6a 10                	push   0x10
c0018af6:	e8 f3 fb ff ff       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c0018afb:	83 e0 01             	and    eax,0x1
c0018afe:	8d 14 00             	lea    edx,[eax+eax*1]
c0018b01:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b07:	83 e0 fd             	and    eax,0xfffffffd
c0018b0a:	09 d0                	or     eax,edx
c0018b0c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b12:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018b19:	e8 d0 fb ff ff       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c0018b1e:	83 e0 01             	and    eax,0x1
c0018b21:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018b28:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b2e:	83 e0 fb             	and    eax,0xfffffffb
c0018b31:	09 d0                	or     eax,edx
c0018b33:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018b40:	e8 a9 fb ff ff       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c0018b45:	83 e0 01             	and    eax,0x1
c0018b48:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018b4f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b55:	83 e0 f7             	and    eax,0xfffffff7
c0018b58:	09 d0                	or     eax,edx
c0018b5a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b60:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018b67:	e8 82 fb ff ff       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c0018b6c:	83 e0 01             	and    eax,0x1
c0018b6f:	c1 e0 04             	shl    eax,0x4
c0018b72:	88 c2                	mov    dl,al
c0018b74:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b7a:	83 e0 ef             	and    eax,0xffffffef
c0018b7d:	09 d0                	or     eax,edx
c0018b7f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b85:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018b8c:	e8 5d fb ff ff       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c0018b91:	83 e0 01             	and    eax,0x1
c0018b94:	c1 e0 05             	shl    eax,0x5
c0018b97:	88 c2                	mov    dl,al
c0018b99:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b9f:	83 e0 df             	and    eax,0xffffffdf
c0018ba2:	09 d0                	or     eax,edx
c0018ba4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018baa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018bb1:	e8 38 fb ff ff       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c0018bb6:	83 e0 01             	and    eax,0x1
c0018bb9:	8d 14 00             	lea    edx,[eax+eax*1]
c0018bbc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018bc2:	83 e0 fd             	and    eax,0xfffffffd
c0018bc5:	09 d0                	or     eax,edx
c0018bc7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018bcd:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018bd4:	e8 15 fb ff ff       	call   c00186ee <CPU::cpuidCheckEDX(unsigned int)>
c0018bd9:	83 e0 01             	and    eax,0x1
c0018bdc:	c1 e0 06             	shl    eax,0x6
c0018bdf:	88 c2                	mov    dl,al
c0018be1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018be7:	83 e0 bf             	and    eax,0xffffffbf
c0018bea:	09 d0                	or     eax,edx
c0018bec:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018bf2:	58                   	pop    eax
c0018bf3:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018bf7:	56                   	push   esi
c0018bf8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018bfc:	55                   	push   ebp
c0018bfd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c01:	50                   	push   eax
c0018c02:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018c06:	52                   	push   edx
c0018c07:	6a 00                	push   0x0
c0018c09:	e8 5c fa ff ff       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c0e:	83 c4 1c             	add    esp,0x1c
c0018c11:	6a 04                	push   0x4
c0018c13:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018c17:	50                   	push   eax
c0018c18:	57                   	push   edi
c0018c19:	e8 82 7a fe ff       	call   c00006a0 <memcpy>
c0018c1e:	83 c4 0c             	add    esp,0xc
c0018c21:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018c27:	6a 04                	push   0x4
c0018c29:	56                   	push   esi
c0018c2a:	50                   	push   eax
c0018c2b:	e8 70 7a fe ff       	call   c00006a0 <memcpy>
c0018c30:	83 c4 0c             	add    esp,0xc
c0018c33:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018c39:	6a 04                	push   0x4
c0018c3b:	55                   	push   ebp
c0018c3c:	50                   	push   eax
c0018c3d:	e8 5e 7a fe ff       	call   c00006a0 <memcpy>
c0018c42:	58                   	pop    eax
c0018c43:	5a                   	pop    edx
c0018c44:	68 09 af 02 c0       	push   0xc002af09
c0018c49:	57                   	push   edi
c0018c4a:	e8 63 7b fe ff       	call   c00007b2 <strcmp>
c0018c4f:	83 c4 10             	add    esp,0x10
c0018c52:	85 c0                	test   eax,eax
c0018c54:	75 0f                	jne    c0018c65 <CPU::detectFeatures()+0x1b5>
c0018c56:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018c60:	e9 22 02 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018c65:	50                   	push   eax
c0018c66:	50                   	push   eax
c0018c67:	68 16 af 02 c0       	push   0xc002af16
c0018c6c:	57                   	push   edi
c0018c6d:	e8 40 7b fe ff       	call   c00007b2 <strcmp>
c0018c72:	83 c4 10             	add    esp,0x10
c0018c75:	85 c0                	test   eax,eax
c0018c77:	74 dd                	je     c0018c56 <CPU::detectFeatures()+0x1a6>
c0018c79:	51                   	push   ecx
c0018c7a:	51                   	push   ecx
c0018c7b:	68 23 af 02 c0       	push   0xc002af23
c0018c80:	57                   	push   edi
c0018c81:	e8 2c 7b fe ff       	call   c00007b2 <strcmp>
c0018c86:	83 c4 10             	add    esp,0x10
c0018c89:	85 c0                	test   eax,eax
c0018c8b:	74 2a                	je     c0018cb7 <CPU::detectFeatures()+0x207>
c0018c8d:	52                   	push   edx
c0018c8e:	52                   	push   edx
c0018c8f:	68 30 af 02 c0       	push   0xc002af30
c0018c94:	57                   	push   edi
c0018c95:	e8 18 7b fe ff       	call   c00007b2 <strcmp>
c0018c9a:	83 c4 10             	add    esp,0x10
c0018c9d:	85 c0                	test   eax,eax
c0018c9f:	74 16                	je     c0018cb7 <CPU::detectFeatures()+0x207>
c0018ca1:	50                   	push   eax
c0018ca2:	50                   	push   eax
c0018ca3:	68 3d af 02 c0       	push   0xc002af3d
c0018ca8:	57                   	push   edi
c0018ca9:	e8 04 7b fe ff       	call   c00007b2 <strcmp>
c0018cae:	83 c4 10             	add    esp,0x10
c0018cb1:	85 c0                	test   eax,eax
c0018cb3:	74 48                	je     c0018cfd <CPU::detectFeatures()+0x24d>
c0018cb5:	eb 0f                	jmp    c0018cc6 <CPU::detectFeatures()+0x216>
c0018cb7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018cc1:	e9 c1 01 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018cc6:	50                   	push   eax
c0018cc7:	50                   	push   eax
c0018cc8:	68 4a af 02 c0       	push   0xc002af4a
c0018ccd:	57                   	push   edi
c0018cce:	e8 df 7a fe ff       	call   c00007b2 <strcmp>
c0018cd3:	83 c4 10             	add    esp,0x10
c0018cd6:	85 c0                	test   eax,eax
c0018cd8:	74 23                	je     c0018cfd <CPU::detectFeatures()+0x24d>
c0018cda:	50                   	push   eax
c0018cdb:	50                   	push   eax
c0018cdc:	68 57 af 02 c0       	push   0xc002af57
c0018ce1:	57                   	push   edi
c0018ce2:	e8 cb 7a fe ff       	call   c00007b2 <strcmp>
c0018ce7:	83 c4 10             	add    esp,0x10
c0018cea:	85 c0                	test   eax,eax
c0018cec:	75 1e                	jne    c0018d0c <CPU::detectFeatures()+0x25c>
c0018cee:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018cf8:	e9 8a 01 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018cfd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018d07:	e9 7b 01 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018d0c:	50                   	push   eax
c0018d0d:	50                   	push   eax
c0018d0e:	68 64 af 02 c0       	push   0xc002af64
c0018d13:	57                   	push   edi
c0018d14:	e8 99 7a fe ff       	call   c00007b2 <strcmp>
c0018d19:	83 c4 10             	add    esp,0x10
c0018d1c:	85 c0                	test   eax,eax
c0018d1e:	75 0f                	jne    c0018d2f <CPU::detectFeatures()+0x27f>
c0018d20:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018d2a:	e9 58 01 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018d2f:	50                   	push   eax
c0018d30:	50                   	push   eax
c0018d31:	68 23 af 02 c0       	push   0xc002af23
c0018d36:	57                   	push   edi
c0018d37:	e8 76 7a fe ff       	call   c00007b2 <strcmp>
c0018d3c:	83 c4 10             	add    esp,0x10
c0018d3f:	85 c0                	test   eax,eax
c0018d41:	75 0f                	jne    c0018d52 <CPU::detectFeatures()+0x2a2>
c0018d43:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018d4d:	e9 35 01 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018d52:	50                   	push   eax
c0018d53:	50                   	push   eax
c0018d54:	68 71 af 02 c0       	push   0xc002af71
c0018d59:	57                   	push   edi
c0018d5a:	e8 53 7a fe ff       	call   c00007b2 <strcmp>
c0018d5f:	83 c4 10             	add    esp,0x10
c0018d62:	85 c0                	test   eax,eax
c0018d64:	75 0f                	jne    c0018d75 <CPU::detectFeatures()+0x2c5>
c0018d66:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018d70:	e9 12 01 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018d75:	51                   	push   ecx
c0018d76:	51                   	push   ecx
c0018d77:	68 7e af 02 c0       	push   0xc002af7e
c0018d7c:	57                   	push   edi
c0018d7d:	e8 30 7a fe ff       	call   c00007b2 <strcmp>
c0018d82:	83 c4 10             	add    esp,0x10
c0018d85:	85 c0                	test   eax,eax
c0018d87:	75 0f                	jne    c0018d98 <CPU::detectFeatures()+0x2e8>
c0018d89:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018d93:	e9 ef 00 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018d98:	52                   	push   edx
c0018d99:	52                   	push   edx
c0018d9a:	68 8b af 02 c0       	push   0xc002af8b
c0018d9f:	57                   	push   edi
c0018da0:	e8 0d 7a fe ff       	call   c00007b2 <strcmp>
c0018da5:	83 c4 10             	add    esp,0x10
c0018da8:	85 c0                	test   eax,eax
c0018daa:	75 0f                	jne    c0018dbb <CPU::detectFeatures()+0x30b>
c0018dac:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018db6:	e9 cc 00 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018dbb:	50                   	push   eax
c0018dbc:	50                   	push   eax
c0018dbd:	68 98 af 02 c0       	push   0xc002af98
c0018dc2:	57                   	push   edi
c0018dc3:	e8 ea 79 fe ff       	call   c00007b2 <strcmp>
c0018dc8:	83 c4 10             	add    esp,0x10
c0018dcb:	85 c0                	test   eax,eax
c0018dcd:	75 0f                	jne    c0018dde <CPU::detectFeatures()+0x32e>
c0018dcf:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018dd9:	e9 a9 00 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018dde:	50                   	push   eax
c0018ddf:	50                   	push   eax
c0018de0:	68 a5 af 02 c0       	push   0xc002afa5
c0018de5:	57                   	push   edi
c0018de6:	e8 c7 79 fe ff       	call   c00007b2 <strcmp>
c0018deb:	83 c4 10             	add    esp,0x10
c0018dee:	85 c0                	test   eax,eax
c0018df0:	75 0f                	jne    c0018e01 <CPU::detectFeatures()+0x351>
c0018df2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018dfc:	e9 86 00 00 00       	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018e01:	50                   	push   eax
c0018e02:	50                   	push   eax
c0018e03:	68 b2 af 02 c0       	push   0xc002afb2
c0018e08:	57                   	push   edi
c0018e09:	e8 a4 79 fe ff       	call   c00007b2 <strcmp>
c0018e0e:	83 c4 10             	add    esp,0x10
c0018e11:	85 c0                	test   eax,eax
c0018e13:	75 0c                	jne    c0018e21 <CPU::detectFeatures()+0x371>
c0018e15:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018e1f:	eb 66                	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018e21:	50                   	push   eax
c0018e22:	50                   	push   eax
c0018e23:	68 bf af 02 c0       	push   0xc002afbf
c0018e28:	57                   	push   edi
c0018e29:	e8 84 79 fe ff       	call   c00007b2 <strcmp>
c0018e2e:	83 c4 10             	add    esp,0x10
c0018e31:	85 c0                	test   eax,eax
c0018e33:	75 0c                	jne    c0018e41 <CPU::detectFeatures()+0x391>
c0018e35:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018e3f:	eb 46                	jmp    c0018e87 <CPU::detectFeatures()+0x3d7>
c0018e41:	50                   	push   eax
c0018e42:	50                   	push   eax
c0018e43:	68 cc af 02 c0       	push   0xc002afcc
c0018e48:	57                   	push   edi
c0018e49:	e8 64 79 fe ff       	call   c00007b2 <strcmp>
c0018e4e:	83 c4 10             	add    esp,0x10
c0018e51:	85 c0                	test   eax,eax
c0018e53:	74 e0                	je     c0018e35 <CPU::detectFeatures()+0x385>
c0018e55:	50                   	push   eax
c0018e56:	50                   	push   eax
c0018e57:	68 d9 af 02 c0       	push   0xc002afd9
c0018e5c:	57                   	push   edi
c0018e5d:	e8 50 79 fe ff       	call   c00007b2 <strcmp>
c0018e62:	83 c4 10             	add    esp,0x10
c0018e65:	85 c0                	test   eax,eax
c0018e67:	74 cc                	je     c0018e35 <CPU::detectFeatures()+0x385>
c0018e69:	51                   	push   ecx
c0018e6a:	51                   	push   ecx
c0018e6b:	68 e6 af 02 c0       	push   0xc002afe6
c0018e70:	57                   	push   edi
c0018e71:	e8 3c 79 fe ff       	call   c00007b2 <strcmp>
c0018e76:	83 c4 10             	add    esp,0x10
c0018e79:	85 c0                	test   eax,eax
c0018e7b:	74 b8                	je     c0018e35 <CPU::detectFeatures()+0x385>
c0018e7d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018e87:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018e8c:	0f 86 be 00 00 00    	jbe    c0018f50 <CPU::detectFeatures()+0x4a0>
c0018e92:	83 ec 0c             	sub    esp,0xc
c0018e95:	68 80 00 00 00       	push   0x80
c0018e9a:	e8 ab f8 ff ff       	call   c001874a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e9f:	83 e0 01             	and    eax,0x1
c0018ea2:	c1 e0 06             	shl    eax,0x6
c0018ea5:	88 c2                	mov    dl,al
c0018ea7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ead:	83 e0 bf             	and    eax,0xffffffbf
c0018eb0:	09 d0                	or     eax,edx
c0018eb2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eb8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018ebf:	e8 86 f8 ff ff       	call   c001874a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ec4:	83 e0 01             	and    eax,0x1
c0018ec7:	c1 e0 04             	shl    eax,0x4
c0018eca:	88 c2                	mov    dl,al
c0018ecc:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ed2:	83 e0 ef             	and    eax,0xffffffef
c0018ed5:	09 d0                	or     eax,edx
c0018ed7:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018edd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018ee4:	e8 61 f8 ff ff       	call   c001874a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ee9:	c1 e0 07             	shl    eax,0x7
c0018eec:	88 c2                	mov    dl,al
c0018eee:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ef4:	83 e0 7f             	and    eax,0x7f
c0018ef7:	09 d0                	or     eax,edx
c0018ef9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018eff:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f06:	e8 6d f8 ff ff       	call   c0018778 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f0b:	83 e0 01             	and    eax,0x1
c0018f0e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f15:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f1b:	83 e0 f7             	and    eax,0xfffffff7
c0018f1e:	09 d0                	or     eax,edx
c0018f20:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f26:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018f2d:	e8 46 f8 ff ff       	call   c0018778 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018f32:	83 c4 10             	add    esp,0x10
c0018f35:	83 e0 01             	and    eax,0x1
c0018f38:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f3f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f45:	83 e0 fb             	and    eax,0xfffffffb
c0018f48:	09 d0                	or     eax,edx
c0018f4a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f50:	83 ec 0c             	sub    esp,0xc
c0018f53:	56                   	push   esi
c0018f54:	55                   	push   ebp
c0018f55:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f59:	57                   	push   edi
c0018f5a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f5e:	50                   	push   eax
c0018f5f:	6a 01                	push   0x1
c0018f61:	e8 04 f7 ff ff       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f66:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018f6a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f70:	88 ca                	mov    dl,cl
c0018f72:	83 e0 f0             	and    eax,0xfffffff0
c0018f75:	83 e2 0f             	and    edx,0xf
c0018f78:	09 d0                	or     eax,edx
c0018f7a:	88 ca                	mov    dl,cl
c0018f7c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018f82:	c0 ea 04             	shr    dl,0x4
c0018f85:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018f89:	0f b6 c2             	movzx  eax,dl
c0018f8c:	83 c4 20             	add    esp,0x20
c0018f8f:	c1 e0 06             	shl    eax,0x6
c0018f92:	89 c5                	mov    ebp,eax
c0018f94:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f9a:	66 25 3f c0          	and    ax,0xc03f
c0018f9e:	09 e8                	or     eax,ebp
c0018fa0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fa7:	89 c8                	mov    eax,ecx
c0018fa9:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018faf:	c1 e8 08             	shr    eax,0x8
c0018fb2:	83 e2 3f             	and    edx,0x3f
c0018fb5:	83 e0 0f             	and    eax,0xf
c0018fb8:	89 c5                	mov    ebp,eax
c0018fba:	c1 e5 06             	shl    ebp,0x6
c0018fbd:	09 d5                	or     ebp,edx
c0018fbf:	89 ea                	mov    edx,ebp
c0018fc1:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018fc7:	88 c2                	mov    dl,al
c0018fc9:	c0 ea 02             	shr    dl,0x2
c0018fcc:	89 d5                	mov    ebp,edx
c0018fce:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018fd4:	83 e2 c0             	and    edx,0xffffffc0
c0018fd7:	09 d5                	or     ebp,edx
c0018fd9:	89 ea                	mov    edx,ebp
c0018fdb:	89 cd                	mov    ebp,ecx
c0018fdd:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018fe3:	c1 ed 0c             	shr    ebp,0xc
c0018fe6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018fec:	83 e5 03             	and    ebp,0x3
c0018fef:	83 e2 cf             	and    edx,0xffffffcf
c0018ff2:	c1 e5 04             	shl    ebp,0x4
c0018ff5:	09 d5                	or     ebp,edx
c0018ff7:	3c 06                	cmp    al,0x6
c0018ff9:	89 ea                	mov    edx,ebp
c0018ffb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019001:	74 04                	je     c0019007 <CPU::detectFeatures()+0x557>
c0019003:	3c 0f                	cmp    al,0xf
c0019005:	75 5c                	jne    c0019063 <CPU::detectFeatures()+0x5b3>
c0019007:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001900b:	89 cd                	mov    ebp,ecx
c001900d:	c1 ed 10             	shr    ebp,0x10
c0019010:	c1 e5 04             	shl    ebp,0x4
c0019013:	09 ea                	or     edx,ebp
c0019015:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001901b:	0f b6 d2             	movzx  edx,dl
c001901e:	66 81 e5 3f c0       	and    bp,0xc03f
c0019023:	c1 e2 06             	shl    edx,0x6
c0019026:	09 ea                	or     edx,ebp
c0019028:	3c 0f                	cmp    al,0xf
c001902a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019031:	75 30                	jne    c0019063 <CPU::detectFeatures()+0x5b3>
c0019033:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019039:	c1 e9 14             	shr    ecx,0x14
c001903c:	83 e0 3f             	and    eax,0x3f
c001903f:	83 c1 0f             	add    ecx,0xf
c0019042:	88 ca                	mov    dl,cl
c0019044:	c0 e9 02             	shr    cl,0x2
c0019047:	c1 e2 06             	shl    edx,0x6
c001904a:	09 d0                	or     eax,edx
c001904c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019052:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019058:	83 e0 c0             	and    eax,0xffffffc0
c001905b:	09 c1                	or     ecx,eax
c001905d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019063:	83 ec 0c             	sub    esp,0xc
c0019066:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001906d:	56                   	push   esi
c001906e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019072:	50                   	push   eax
c0019073:	57                   	push   edi
c0019074:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019078:	55                   	push   ebp
c0019079:	68 00 00 00 80       	push   0x80000000
c001907e:	e8 e7 f5 ff ff       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019083:	83 c4 20             	add    esp,0x20
c0019086:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001908e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019092:	76 1e                	jbe    c00190b2 <CPU::detectFeatures()+0x602>
c0019094:	83 ec 0c             	sub    esp,0xc
c0019097:	56                   	push   esi
c0019098:	50                   	push   eax
c0019099:	57                   	push   edi
c001909a:	55                   	push   ebp
c001909b:	68 01 00 00 80       	push   0x80000001
c00190a0:	e8 c5 f5 ff ff       	call   c001866a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190a5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00190af:	83 c4 20             	add    esp,0x20
c00190b2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00190b8:	83 f8 01             	cmp    eax,0x1
c00190bb:	75 6f                	jne    c001912c <CPU::detectFeatures()+0x67c>
c00190bd:	51                   	push   ecx
c00190be:	51                   	push   ecx
c00190bf:	68 f2 af 02 c0       	push   0xc002aff2
c00190c4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00190c8:	56                   	push   esi
c00190c9:	e8 93 76 fe ff       	call   c0000761 <strcpy>
c00190ce:	5f                   	pop    edi
c00190cf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190d5:	5d                   	pop    ebp
c00190d6:	66 c1 e8 06          	shr    ax,0x6
c00190da:	0f b6 c0             	movzx  eax,al
c00190dd:	50                   	push   eax
c00190de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190e4:	c1 e8 0e             	shr    eax,0xe
c00190e7:	0f b6 c0             	movzx  eax,al
c00190ea:	50                   	push   eax
c00190eb:	e8 24 f2 ff ff       	call   c0018314 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00190f0:	5a                   	pop    edx
c00190f1:	59                   	pop    ecx
c00190f2:	50                   	push   eax
c00190f3:	56                   	push   esi
c00190f4:	e8 1f 77 fe ff       	call   c0000818 <strcat>
c00190f9:	5f                   	pop    edi
c00190fa:	5d                   	pop    ebp
c00190fb:	56                   	push   esi
c00190fc:	53                   	push   ebx
c00190fd:	e8 f8 ad ff ff       	call   c0013efa <Device::setName(char const*)>
c0019102:	58                   	pop    eax
c0019103:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019109:	5a                   	pop    edx
c001910a:	68 f9 af 02 c0       	push   0xc002aff9
c001910f:	50                   	push   eax
c0019110:	e8 9d 76 fe ff       	call   c00007b2 <strcmp>
c0019115:	83 c4 10             	add    esp,0x10
c0019118:	85 c0                	test   eax,eax
c001911a:	0f 85 71 03 00 00    	jne    c0019491 <CPU::detectFeatures()+0x9e1>
c0019120:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019127:	e9 65 03 00 00       	jmp    c0019491 <CPU::detectFeatures()+0x9e1>
c001912c:	83 f8 02             	cmp    eax,0x2
c001912f:	0f 85 b5 00 00 00    	jne    c00191ea <CPU::detectFeatures()+0x73a>
c0019135:	57                   	push   edi
c0019136:	57                   	push   edi
c0019137:	68 0b b0 02 c0       	push   0xc002b00b
c001913c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019140:	56                   	push   esi
c0019141:	e8 1b 76 fe ff       	call   c0000761 <strcpy>
c0019146:	5d                   	pop    ebp
c0019147:	58                   	pop    eax
c0019148:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001914e:	66 c1 e8 06          	shr    ax,0x6
c0019152:	0f b6 c0             	movzx  eax,al
c0019155:	50                   	push   eax
c0019156:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001915c:	c1 e8 0e             	shr    eax,0xe
c001915f:	0f b6 c0             	movzx  eax,al
c0019162:	50                   	push   eax
c0019163:	e8 18 f0 ff ff       	call   c0018180 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019168:	5a                   	pop    edx
c0019169:	59                   	pop    ecx
c001916a:	50                   	push   eax
c001916b:	56                   	push   esi
c001916c:	e8 a7 76 fe ff       	call   c0000818 <strcat>
c0019171:	5f                   	pop    edi
c0019172:	5d                   	pop    ebp
c0019173:	56                   	push   esi
c0019174:	53                   	push   ebx
c0019175:	e8 80 ad ff ff       	call   c0013efa <Device::setName(char const*)>
c001917a:	58                   	pop    eax
c001917b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019181:	5a                   	pop    edx
c0019182:	68 10 b0 02 c0       	push   0xc002b010
c0019187:	50                   	push   eax
c0019188:	e8 25 76 fe ff       	call   c00007b2 <strcmp>
c001918d:	83 c4 10             	add    esp,0x10
c0019190:	85 c0                	test   eax,eax
c0019192:	75 20                	jne    c00191b4 <CPU::detectFeatures()+0x704>
c0019194:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c001919a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00191a0:	a8 01                	test   al,0x1
c00191a2:	74 10                	je     c00191b4 <CPU::detectFeatures()+0x704>
c00191a4:	83 e0 fe             	and    eax,0xfffffffe
c00191a7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00191ad:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00191b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191ba:	c1 e8 0e             	shr    eax,0xe
c00191bd:	3c 05                	cmp    al,0x5
c00191bf:	0f 85 cc 02 00 00    	jne    c0019491 <CPU::detectFeatures()+0x9e1>
c00191c5:	56                   	push   esi
c00191c6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00191cc:	83 e0 0f             	and    eax,0xf
c00191cf:	50                   	push   eax
c00191d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191d6:	66 c1 e8 06          	shr    ax,0x6
c00191da:	0f b6 c0             	movzx  eax,al
c00191dd:	50                   	push   eax
c00191de:	6a 05                	push   0x5
c00191e0:	e8 11 f4 ff ff       	call   c00185f6 <CPU::AMD_K6_writeback(int, int, int)>
c00191e5:	e9 1f 02 00 00       	jmp    c0019409 <CPU::detectFeatures()+0x959>
c00191ea:	8d 50 fd             	lea    edx,[eax-0x3]
c00191ed:	83 fa 01             	cmp    edx,0x1
c00191f0:	76 09                	jbe    c00191fb <CPU::detectFeatures()+0x74b>
c00191f2:	83 f8 06             	cmp    eax,0x6
c00191f5:	0f 85 91 01 00 00    	jne    c001938c <CPU::detectFeatures()+0x8dc>
c00191fb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019201:	c1 ea 0e             	shr    edx,0xe
c0019204:	80 fa 05             	cmp    dl,0x5
c0019207:	75 7b                	jne    c0019284 <CPU::detectFeatures()+0x7d4>
c0019209:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001920f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019214:	66 81 fa 00 01       	cmp    dx,0x100
c0019219:	75 0c                	jne    c0019227 <CPU::detectFeatures()+0x777>
c001921b:	51                   	push   ecx
c001921c:	51                   	push   ecx
c001921d:	68 17 b0 02 c0       	push   0xc002b017
c0019222:	e9 dc 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c0019227:	66 81 fa 00 02       	cmp    dx,0x200
c001922c:	75 0c                	jne    c001923a <CPU::detectFeatures()+0x78a>
c001922e:	52                   	push   edx
c001922f:	52                   	push   edx
c0019230:	68 2a b0 02 c0       	push   0xc002b02a
c0019235:	e9 c9 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c001923a:	66 81 fa 40 02       	cmp    dx,0x240
c001923f:	75 0c                	jne    c001924d <CPU::detectFeatures()+0x79d>
c0019241:	50                   	push   eax
c0019242:	50                   	push   eax
c0019243:	68 3c b0 02 c0       	push   0xc002b03c
c0019248:	e9 b6 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c001924d:	83 f8 06             	cmp    eax,0x6
c0019250:	75 0c                	jne    c001925e <CPU::detectFeatures()+0x7ae>
c0019252:	50                   	push   eax
c0019253:	50                   	push   eax
c0019254:	68 4e b0 02 c0       	push   0xc002b04e
c0019259:	e9 a5 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c001925e:	83 f8 04             	cmp    eax,0x4
c0019261:	75 0c                	jne    c001926f <CPU::detectFeatures()+0x7bf>
c0019263:	50                   	push   eax
c0019264:	50                   	push   eax
c0019265:	68 5a b0 02 c0       	push   0xc002b05a
c001926a:	e9 94 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c001926f:	83 f8 03             	cmp    eax,0x3
c0019272:	0f 85 19 02 00 00    	jne    c0019491 <CPU::detectFeatures()+0x9e1>
c0019278:	50                   	push   eax
c0019279:	50                   	push   eax
c001927a:	68 62 b0 02 c0       	push   0xc002b062
c001927f:	e9 7f 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c0019284:	80 fa 06             	cmp    dl,0x6
c0019287:	0f 85 db 00 00 00    	jne    c0019368 <CPU::detectFeatures()+0x8b8>
c001928d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019293:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019298:	66 81 fa 80 01       	cmp    dx,0x180
c001929d:	75 0c                	jne    c00192ab <CPU::detectFeatures()+0x7fb>
c001929f:	50                   	push   eax
c00192a0:	50                   	push   eax
c00192a1:	68 6d b0 02 c0       	push   0xc002b06d
c00192a6:	e9 58 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00192ab:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00192b1:	66 f7 c1 80 ff       	test   cx,0xff80
c00192b6:	75 0c                	jne    c00192c4 <CPU::detectFeatures()+0x814>
c00192b8:	50                   	push   eax
c00192b9:	50                   	push   eax
c00192ba:	68 7d b0 02 c0       	push   0xc002b07d
c00192bf:	e9 3f 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00192c4:	66 81 fa 40 02       	cmp    dx,0x240
c00192c9:	75 0c                	jne    c00192d7 <CPU::detectFeatures()+0x827>
c00192cb:	55                   	push   ebp
c00192cc:	55                   	push   ebp
c00192cd:	68 84 b0 02 c0       	push   0xc002b084
c00192d2:	e9 2c 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00192d7:	66 81 fa 80 02       	cmp    dx,0x280
c00192dc:	75 0c                	jne    c00192ea <CPU::detectFeatures()+0x83a>
c00192de:	57                   	push   edi
c00192df:	57                   	push   edi
c00192e0:	68 8d b0 02 c0       	push   0xc002b08d
c00192e5:	e9 19 01 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00192ea:	66 81 fa 40 03       	cmp    dx,0x340
c00192ef:	74 ed                	je     c00192de <CPU::detectFeatures()+0x82e>
c00192f1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00192f6:	75 0c                	jne    c0019304 <CPU::detectFeatures()+0x854>
c00192f8:	56                   	push   esi
c00192f9:	56                   	push   esi
c00192fa:	68 94 b0 02 c0       	push   0xc002b094
c00192ff:	e9 ff 00 00 00       	jmp    c0019403 <CPU::detectFeatures()+0x953>
c0019304:	83 f8 06             	cmp    eax,0x6
c0019307:	0f 84 45 ff ff ff    	je     c0019252 <CPU::detectFeatures()+0x7a2>
c001930d:	83 f8 04             	cmp    eax,0x4
c0019310:	0f 84 4d ff ff ff    	je     c0019263 <CPU::detectFeatures()+0x7b3>
c0019316:	83 f8 03             	cmp    eax,0x3
c0019319:	0f 85 72 01 00 00    	jne    c0019491 <CPU::detectFeatures()+0x9e1>
c001931f:	51                   	push   ecx
c0019320:	51                   	push   ecx
c0019321:	68 9d b0 02 c0       	push   0xc002b09d
c0019326:	53                   	push   ebx
c0019327:	e8 ce ab ff ff       	call   c0013efa <Device::setName(char const*)>
c001932c:	b1 c1                	mov    cl,0xc1
c001932e:	88 c8                	mov    al,cl
c0019330:	e6 22                	out    0x22,al
c0019332:	e4 23                	in     al,0x23
c0019334:	88 c2                	mov    dl,al
c0019336:	88 c8                	mov    al,cl
c0019338:	e6 22                	out    0x22,al
c001933a:	88 d0                	mov    al,dl
c001933c:	83 c8 10             	or     eax,0x10
c001933f:	e6 23                	out    0x23,al
c0019341:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019348:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001934b:	89 d0                	mov    eax,edx
c001934d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019353:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019357:	40                   	inc    eax
c0019358:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001935e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019363:	e9 a1 00 00 00       	jmp    c0019409 <CPU::detectFeatures()+0x959>
c0019368:	83 f8 06             	cmp    eax,0x6
c001936b:	0f 84 e1 fe ff ff    	je     c0019252 <CPU::detectFeatures()+0x7a2>
c0019371:	83 f8 04             	cmp    eax,0x4
c0019374:	0f 84 e9 fe ff ff    	je     c0019263 <CPU::detectFeatures()+0x7b3>
c001937a:	83 f8 03             	cmp    eax,0x3
c001937d:	0f 85 0e 01 00 00    	jne    c0019491 <CPU::detectFeatures()+0x9e1>
c0019383:	52                   	push   edx
c0019384:	52                   	push   edx
c0019385:	68 a8 b0 02 c0       	push   0xc002b0a8
c001938a:	eb 77                	jmp    c0019403 <CPU::detectFeatures()+0x953>
c001938c:	83 f8 07             	cmp    eax,0x7
c001938f:	75 09                	jne    c001939a <CPU::detectFeatures()+0x8ea>
c0019391:	50                   	push   eax
c0019392:	50                   	push   eax
c0019393:	68 b2 b0 02 c0       	push   0xc002b0b2
c0019398:	eb 69                	jmp    c0019403 <CPU::detectFeatures()+0x953>
c001939a:	83 f8 0a             	cmp    eax,0xa
c001939d:	75 09                	jne    c00193a8 <CPU::detectFeatures()+0x8f8>
c001939f:	50                   	push   eax
c00193a0:	50                   	push   eax
c00193a1:	68 bd b0 02 c0       	push   0xc002b0bd
c00193a6:	eb 5b                	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00193a8:	83 f8 0b             	cmp    eax,0xb
c00193ab:	75 09                	jne    c00193b6 <CPU::detectFeatures()+0x906>
c00193ad:	50                   	push   eax
c00193ae:	50                   	push   eax
c00193af:	68 c5 b0 02 c0       	push   0xc002b0c5
c00193b4:	eb 4d                	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00193b6:	83 f8 08             	cmp    eax,0x8
c00193b9:	75 09                	jne    c00193c4 <CPU::detectFeatures()+0x914>
c00193bb:	50                   	push   eax
c00193bc:	50                   	push   eax
c00193bd:	68 ce b0 02 c0       	push   0xc002b0ce
c00193c2:	eb 3f                	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00193c4:	83 f8 09             	cmp    eax,0x9
c00193c7:	75 09                	jne    c00193d2 <CPU::detectFeatures()+0x922>
c00193c9:	50                   	push   eax
c00193ca:	50                   	push   eax
c00193cb:	68 d6 b0 02 c0       	push   0xc002b0d6
c00193d0:	eb 31                	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00193d2:	83 f8 05             	cmp    eax,0x5
c00193d5:	75 09                	jne    c00193e0 <CPU::detectFeatures()+0x930>
c00193d7:	50                   	push   eax
c00193d8:	50                   	push   eax
c00193d9:	68 de b0 02 c0       	push   0xc002b0de
c00193de:	eb 23                	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00193e0:	83 f8 0c             	cmp    eax,0xc
c00193e3:	75 09                	jne    c00193ee <CPU::detectFeatures()+0x93e>
c00193e5:	55                   	push   ebp
c00193e6:	55                   	push   ebp
c00193e7:	68 ec b0 02 c0       	push   0xc002b0ec
c00193ec:	eb 15                	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00193ee:	83 f8 0d             	cmp    eax,0xd
c00193f1:	75 09                	jne    c00193fc <CPU::detectFeatures()+0x94c>
c00193f3:	57                   	push   edi
c00193f4:	57                   	push   edi
c00193f5:	68 f7 b0 02 c0       	push   0xc002b0f7
c00193fa:	eb 07                	jmp    c0019403 <CPU::detectFeatures()+0x953>
c00193fc:	56                   	push   esi
c00193fd:	56                   	push   esi
c00193fe:	68 0b b1 02 c0       	push   0xc002b10b
c0019403:	53                   	push   ebx
c0019404:	e8 f1 aa ff ff       	call   c0013efa <Device::setName(char const*)>
c0019409:	83 c4 10             	add    esp,0x10
c001940c:	e9 80 00 00 00       	jmp    c0019491 <CPU::detectFeatures()+0x9e1>
c0019411:	51                   	push   ecx
c0019412:	51                   	push   ecx
c0019413:	68 57 af 02 c0       	push   0xc002af57
c0019418:	57                   	push   edi
c0019419:	e8 43 73 fe ff       	call   c0000761 <strcpy>
c001941e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019428:	e8 81 6e fe ff       	call   c00002ae <is486>
c001942d:	83 c4 10             	add    esp,0x10
c0019430:	85 c0                	test   eax,eax
c0019432:	74 2b                	je     c001945f <CPU::detectFeatures()+0x9af>
c0019434:	52                   	push   edx
c0019435:	52                   	push   edx
c0019436:	68 17 b1 02 c0       	push   0xc002b117
c001943b:	53                   	push   ebx
c001943c:	e8 b9 aa ff ff       	call   c0013efa <Device::setName(char const*)>
c0019441:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019448:	0f 20 c0             	mov    eax,cr0
c001944b:	83 e0 14             	and    eax,0x14
c001944e:	83 c4 10             	add    esp,0x10
c0019451:	83 f8 04             	cmp    eax,0x4
c0019454:	75 1f                	jne    c0019475 <CPU::detectFeatures()+0x9c5>
c0019456:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001945d:	eb 32                	jmp    c0019491 <CPU::detectFeatures()+0x9e1>
c001945f:	50                   	push   eax
c0019460:	50                   	push   eax
c0019461:	68 22 b1 02 c0       	push   0xc002b122
c0019466:	53                   	push   ebx
c0019467:	e8 8e aa ff ff       	call   c0013efa <Device::setName(char const*)>
c001946c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019473:	eb d3                	jmp    c0019448 <CPU::detectFeatures()+0x998>
c0019475:	e8 0f 6e fe ff       	call   c0000289 <hasLegacyFPU>
c001947a:	83 e0 01             	and    eax,0x1
c001947d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019480:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019486:	83 e0 fd             	and    eax,0xfffffffd
c0019489:	09 d0                	or     eax,edx
c001948b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019491:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019498:	83 c4 4c             	add    esp,0x4c
c001949b:	5b                   	pop    ebx
c001949c:	5e                   	pop    esi
c001949d:	5f                   	pop    edi
c001949e:	5d                   	pop    ebp
c001949f:	c3                   	ret    

c00194a0 <CPU::setupSMEP()>:
c00194a0:	0f 20 e0             	mov    eax,cr4
c00194a3:	0d 00 00 10 00       	or     eax,0x100000
c00194a8:	0f 22 e0             	mov    cr4,eax
c00194ab:	c3                   	ret    

c00194ac <CPU::setupUMIP()>:
c00194ac:	0f 20 e0             	mov    eax,cr4
c00194af:	80 cc 08             	or     ah,0x8
c00194b2:	0f 22 e0             	mov    cr4,eax
c00194b5:	c3                   	ret    

c00194b6 <CPU::setupTSC()>:
c00194b6:	0f 20 e0             	mov    eax,cr4
c00194b9:	83 c8 04             	or     eax,0x4
c00194bc:	0f 22 e0             	mov    cr4,eax
c00194bf:	c3                   	ret    

c00194c0 <CPU::setupLargePages()>:
c00194c0:	0f 20 e0             	mov    eax,cr4
c00194c3:	83 c8 10             	or     eax,0x10
c00194c6:	0f 22 e0             	mov    cr4,eax
c00194c9:	c3                   	ret    

c00194ca <CPU::setupPAT()>:
c00194ca:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00194cf:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00194d6:	74 2c                	je     c0019504 <CPU::setupPAT()+0x3a>
c00194d8:	53                   	push   ebx
c00194d9:	83 ec 10             	sub    esp,0x10
c00194dc:	68 77 02 00 00       	push   0x277
c00194e1:	50                   	push   eax
c00194e2:	e8 e3 56 ff ff       	call   c000ebca <Computer::rdmsr(unsigned int)>
c00194e7:	83 e2 f8             	and    edx,0xfffffff8
c00194ea:	83 ca 01             	or     edx,0x1
c00194ed:	52                   	push   edx
c00194ee:	50                   	push   eax
c00194ef:	68 77 02 00 00       	push   0x277
c00194f4:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c00194fa:	e8 f7 56 ff ff       	call   c000ebf6 <Computer::wrmsr(unsigned int, unsigned long long)>
c00194ff:	83 c4 28             	add    esp,0x28
c0019502:	5b                   	pop    ebx
c0019503:	c3                   	ret    
c0019504:	c3                   	ret    
c0019505:	90                   	nop

c0019506 <CPU::setupMTRR()>:
c0019506:	c3                   	ret    
c0019507:	90                   	nop

c0019508 <CPU::setupGlobalPages()>:
c0019508:	0f 20 e0             	mov    eax,cr4
c001950b:	0c 80                	or     al,0x80
c001950d:	0f 22 e0             	mov    cr4,eax
c0019510:	c3                   	ret    
c0019511:	90                   	nop

c0019512 <CPU::allowUsermodeDataAccess()>:
c0019512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019516:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001951d:	74 03                	je     c0019522 <CPU::allowUsermodeDataAccess()+0x10>
c001951f:	0f 01 cb             	stac   
c0019522:	c3                   	ret    
c0019523:	90                   	nop

c0019524 <CPU::prohibitUsermodeDataAccess()>:
c0019524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019528:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001952f:	74 03                	je     c0019534 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019531:	0f 01 ca             	clac   
c0019534:	c3                   	ret    
c0019535:	90                   	nop

c0019536 <CPU::setupSMAP()>:
c0019536:	0f 20 e0             	mov    eax,cr4
c0019539:	0d 00 00 20 00       	or     eax,0x200000
c001953e:	0f 22 e0             	mov    cr4,eax
c0019541:	eb e1                	jmp    c0019524 <CPU::prohibitUsermodeDataAccess()>
c0019543:	90                   	nop

c0019544 <CPU::setupFeatures()>:
c0019544:	83 ec 0c             	sub    esp,0xc
c0019547:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001954b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019552:	74 07                	je     c001955b <CPU::setupFeatures()+0x17>
c0019554:	52                   	push   edx
c0019555:	e8 46 ff ff ff       	call   c00194a0 <CPU::setupSMEP()>
c001955a:	58                   	pop    eax
c001955b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019562:	74 07                	je     c001956b <CPU::setupFeatures()+0x27>
c0019564:	52                   	push   edx
c0019565:	e8 cc ff ff ff       	call   c0019536 <CPU::setupSMAP()>
c001956a:	58                   	pop    eax
c001956b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019572:	74 07                	je     c001957b <CPU::setupFeatures()+0x37>
c0019574:	52                   	push   edx
c0019575:	e8 32 ff ff ff       	call   c00194ac <CPU::setupUMIP()>
c001957a:	58                   	pop    eax
c001957b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019582:	74 07                	je     c001958b <CPU::setupFeatures()+0x47>
c0019584:	52                   	push   edx
c0019585:	e8 2c ff ff ff       	call   c00194b6 <CPU::setupTSC()>
c001958a:	58                   	pop    eax
c001958b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019592:	74 07                	je     c001959b <CPU::setupFeatures()+0x57>
c0019594:	52                   	push   edx
c0019595:	e8 26 ff ff ff       	call   c00194c0 <CPU::setupLargePages()>
c001959a:	59                   	pop    ecx
c001959b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00195a2:	74 07                	je     c00195ab <CPU::setupFeatures()+0x67>
c00195a4:	52                   	push   edx
c00195a5:	e8 5e ff ff ff       	call   c0019508 <CPU::setupGlobalPages()>
c00195aa:	58                   	pop    eax
c00195ab:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00195b2:	74 0c                	je     c00195c0 <CPU::setupFeatures()+0x7c>
c00195b4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00195b8:	83 c4 0c             	add    esp,0xc
c00195bb:	e9 0a ff ff ff       	jmp    c00194ca <CPU::setupPAT()>
c00195c0:	83 c4 0c             	add    esp,0xc
c00195c3:	c3                   	ret    

c00195c4 <CPU::open(int, int, void*)>:
c00195c4:	57                   	push   edi
c00195c5:	56                   	push   esi
c00195c6:	53                   	push   ebx
c00195c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00195cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00195cf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00195d5:	83 ec 0c             	sub    esp,0xc
c00195d8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00195de:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00195e4:	50                   	push   eax
c00195e5:	e8 cc 58 ff ff       	call   c000eeb6 <GDT::setup()>
c00195ea:	83 c4 0c             	add    esp,0xc
c00195ed:	6a 00                	push   0x0
c00195ef:	68 ef be ad de       	push   0xdeadbeef
c00195f4:	57                   	push   edi
c00195f5:	e8 78 7c ff ff       	call   c0011272 <TSS::setup(unsigned long, unsigned long)>
c00195fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00195fd:	e8 50 7c ff ff       	call   c0011252 <TSS::flush()>
c0019602:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019608:	89 04 24             	mov    DWORD PTR [esp],eax
c001960b:	e8 02 5b ff ff       	call   c000f112 <IDT::setup()>
c0019610:	b8 00 04 00 00       	mov    eax,0x400
c0019615:	0f 23 f8             	mov    db7,eax
c0019618:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019622:	e8 98 66 ff ff       	call   c000fcbf <Phys::allocatePage()>
c0019627:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001962d:	89 30                	mov    DWORD PTR [eax],esi
c001962f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019635:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019638:	58                   	pop    eax
c0019639:	5a                   	pop    edx
c001963a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019640:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019644:	e8 5b 8c ff ff       	call   c00122a4 <VAS::setCPUSpecific(unsigned long)>
c0019649:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001964c:	e8 5f f4 ff ff       	call   c0018ab0 <CPU::detectFeatures()>
c0019651:	e8 6d bc ff ff       	call   c00152c3 <setupInterruptController()>
c0019656:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001965c:	a1 e0 da 02 c0       	mov    eax,ds:0xc002dae0
c0019661:	83 e0 10             	and    eax,0x10
c0019664:	83 f8 01             	cmp    eax,0x1
c0019667:	19 c0                	sbb    eax,eax
c0019669:	83 e0 46             	and    eax,0x46
c001966c:	83 c0 1e             	add    eax,0x1e
c001966f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019672:	e8 2b d1 ff ff       	call   c00167a2 <setupTimer(int)>
c0019677:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001967d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019680:	e8 bf fe ff ff       	call   c0019544 <CPU::setupFeatures()>
c0019685:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019688:	e8 a7 f1 ff ff       	call   c0018834 <CPU::displayFeatures()>
c001968d:	83 c4 10             	add    esp,0x10
c0019690:	31 c0                	xor    eax,eax
c0019692:	5b                   	pop    ebx
c0019693:	5e                   	pop    esi
c0019694:	5f                   	pop    edi
c0019695:	c3                   	ret    

c0019696 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019696:	57                   	push   edi
c0019697:	56                   	push   esi
c0019698:	53                   	push   ebx
c0019699:	51                   	push   ecx
c001969a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001969e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00196a1:	0f 02 c0             	lar    eax,ax
c00196a4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00196a7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00196ab:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00196ae:	88 ca                	mov    dl,cl
c00196b0:	c0 ea 06             	shr    dl,0x6
c00196b3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00196b7:	89 ca                	mov    edx,ecx
c00196b9:	66 c1 ea 03          	shr    dx,0x3
c00196bd:	83 e2 07             	and    edx,0x7
c00196c0:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00196c5:	88 17                	mov    BYTE PTR [edi],dl
c00196c7:	0f 84 a6 01 00 00    	je     c0019873 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00196cd:	83 e1 07             	and    ecx,0x7
c00196d0:	80 f9 04             	cmp    cl,0x4
c00196d3:	0f 84 98 00 00 00    	je     c0019771 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00196d9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196de:	0f 95 c0             	setne  al
c00196e1:	80 f9 05             	cmp    cl,0x5
c00196e4:	0f 95 c2             	setne  dl
c00196e7:	08 c2                	or     dl,al
c00196e9:	74 79                	je     c0019764 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00196eb:	84 c9                	test   cl,cl
c00196ed:	75 05                	jne    c00196f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00196ef:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00196f2:	eb 3c                	jmp    c0019730 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196f4:	80 f9 01             	cmp    cl,0x1
c00196f7:	75 05                	jne    c00196fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00196f9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00196fc:	eb 32                	jmp    c0019730 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196fe:	80 f9 02             	cmp    cl,0x2
c0019701:	75 05                	jne    c0019708 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019703:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019706:	eb 28                	jmp    c0019730 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019708:	31 c0                	xor    eax,eax
c001970a:	80 f9 03             	cmp    cl,0x3
c001970d:	75 05                	jne    c0019714 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001970f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019712:	eb 1c                	jmp    c0019730 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019714:	80 f9 05             	cmp    cl,0x5
c0019717:	75 05                	jne    c001971e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019719:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001971c:	eb 12                	jmp    c0019730 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001971e:	80 f9 06             	cmp    cl,0x6
c0019721:	75 05                	jne    c0019728 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019723:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019726:	eb 08                	jmp    c0019730 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019728:	80 f9 07             	cmp    cl,0x7
c001972b:	75 03                	jne    c0019730 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001972d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019730:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019735:	75 10                	jne    c0019747 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019737:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001973b:	b9 03 00 00 00       	mov    ecx,0x3
c0019740:	01 d0                	add    eax,edx
c0019742:	e9 37 01 00 00       	jmp    c001987e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019747:	b9 02 00 00 00       	mov    ecx,0x2
c001974c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019751:	0f 85 27 01 00 00    	jne    c001987e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019757:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001975a:	b9 06 00 00 00       	mov    ecx,0x6
c001975f:	e9 1a 01 00 00       	jmp    c001987e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019764:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019767:	b9 06 00 00 00       	mov    ecx,0x6
c001976c:	e9 0f 01 00 00       	jmp    c0019880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019771:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019774:	88 ca                	mov    dl,cl
c0019776:	c0 ea 06             	shr    dl,0x6
c0019779:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001977d:	89 ca                	mov    edx,ecx
c001977f:	66 c1 ea 03          	shr    dx,0x3
c0019783:	83 e2 07             	and    edx,0x7
c0019786:	80 e1 07             	and    cl,0x7
c0019789:	75 05                	jne    c0019790 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001978b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001978e:	eb 4c                	jmp    c00197dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019790:	80 f9 01             	cmp    cl,0x1
c0019793:	75 05                	jne    c001979a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019795:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019798:	eb 42                	jmp    c00197dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001979a:	80 f9 02             	cmp    cl,0x2
c001979d:	75 05                	jne    c00197a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001979f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00197a2:	eb 38                	jmp    c00197dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197a4:	80 f9 03             	cmp    cl,0x3
c00197a7:	75 05                	jne    c00197ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00197a9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00197ac:	eb 2e                	jmp    c00197dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197ae:	80 f9 04             	cmp    cl,0x4
c00197b1:	75 12                	jne    c00197c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00197b3:	f6 c4 60             	test   ah,0x60
c00197b6:	75 08                	jne    c00197c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00197b8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00197bb:	8d 78 14             	lea    edi,[eax+0x14]
c00197be:	eb 1c                	jmp    c00197dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197c0:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00197c3:	eb 17                	jmp    c00197dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197c5:	80 f9 05             	cmp    cl,0x5
c00197c8:	75 05                	jne    c00197cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00197ca:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00197cd:	eb 0d                	jmp    c00197dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197cf:	80 f9 06             	cmp    cl,0x6
c00197d2:	75 05                	jne    c00197d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00197d4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00197d7:	eb 03                	jmp    c00197dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00197d9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00197dc:	84 d2                	test   dl,dl
c00197de:	75 05                	jne    c00197e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00197e0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00197e3:	eb 3c                	jmp    c0019821 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197e5:	80 fa 01             	cmp    dl,0x1
c00197e8:	75 05                	jne    c00197ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00197ea:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00197ed:	eb 32                	jmp    c0019821 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197ef:	80 fa 02             	cmp    dl,0x2
c00197f2:	75 05                	jne    c00197f9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00197f4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00197f7:	eb 28                	jmp    c0019821 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197f9:	80 fa 03             	cmp    dl,0x3
c00197fc:	75 05                	jne    c0019803 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00197fe:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019801:	eb 1e                	jmp    c0019821 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019803:	31 c0                	xor    eax,eax
c0019805:	80 fa 04             	cmp    dl,0x4
c0019808:	74 17                	je     c0019821 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001980a:	80 fa 05             	cmp    dl,0x5
c001980d:	75 05                	jne    c0019814 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001980f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019812:	eb 0d                	jmp    c0019821 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019814:	80 fa 06             	cmp    dl,0x6
c0019817:	75 05                	jne    c001981e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019819:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001981c:	eb 03                	jmp    c0019821 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001981e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019821:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019826:	0f 94 c2             	sete   dl
c0019829:	80 f9 05             	cmp    cl,0x5
c001982c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019830:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019835:	d3 e0                	shl    eax,cl
c0019837:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001983b:	74 0a                	je     c0019847 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001983d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019840:	b9 07 00 00 00       	mov    ecx,0x7
c0019845:	eb 37                	jmp    c001987e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019847:	01 f8                	add    eax,edi
c0019849:	b9 03 00 00 00       	mov    ecx,0x3
c001984e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019853:	74 2b                	je     c0019880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019855:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001985a:	75 0d                	jne    c0019869 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001985c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019860:	01 c8                	add    eax,ecx
c0019862:	b9 04 00 00 00       	mov    ecx,0x4
c0019867:	eb 17                	jmp    c0019880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019869:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001986c:	b9 07 00 00 00       	mov    ecx,0x7
c0019871:	eb 0d                	jmp    c0019880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019873:	b9 02 00 00 00       	mov    ecx,0x2
c0019878:	b2 01                	mov    dl,0x1
c001987a:	31 c0                	xor    eax,eax
c001987c:	eb 02                	jmp    c0019880 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001987e:	31 d2                	xor    edx,edx
c0019880:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019884:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019886:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001988a:	88 11                	mov    BYTE PTR [ecx],dl
c001988c:	5a                   	pop    edx
c001988d:	5b                   	pop    ebx
c001988e:	5e                   	pop    esi
c001988f:	5f                   	pop    edi
c0019890:	c3                   	ret    
c0019891:	90                   	nop

c0019892 <EnvVarContainer::getEnv(char const*)>:
c0019892:	57                   	push   edi
c0019893:	56                   	push   esi
c0019894:	53                   	push   ebx
c0019895:	31 db                	xor    ebx,ebx
c0019897:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001989b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001989d:	7e 2b                	jle    c00198ca <EnvVarContainer::getEnv(char const*)+0x38>
c001989f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198a6:	50                   	push   eax
c00198a7:	50                   	push   eax
c00198a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198ab:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198b2:	e8 fb 6e fe ff       	call   c00007b2 <strcmp>
c00198b7:	83 c4 10             	add    esp,0x10
c00198ba:	85 c0                	test   eax,eax
c00198bc:	75 09                	jne    c00198c7 <EnvVarContainer::getEnv(char const*)+0x35>
c00198be:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198c1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198c5:	eb 05                	jmp    c00198cc <EnvVarContainer::getEnv(char const*)+0x3a>
c00198c7:	43                   	inc    ebx
c00198c8:	eb d1                	jmp    c001989b <EnvVarContainer::getEnv(char const*)+0x9>
c00198ca:	31 c0                	xor    eax,eax
c00198cc:	5b                   	pop    ebx
c00198cd:	5e                   	pop    esi
c00198ce:	5f                   	pop    edi
c00198cf:	c3                   	ret    

c00198d0 <EnvVarContainer::setEnv(char const*, char const*)>:
c00198d0:	57                   	push   edi
c00198d1:	56                   	push   esi
c00198d2:	53                   	push   ebx
c00198d3:	83 ec 1c             	sub    esp,0x1c
c00198d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00198da:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00198de:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00198e2:	57                   	push   edi
c00198e3:	e8 f7 6d fe ff       	call   c00006df <strlen>
c00198e8:	40                   	inc    eax
c00198e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00198ec:	e8 31 5d ff ff       	call   c000f622 <malloc>
c00198f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00198f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00198f8:	e8 e2 6d fe ff       	call   c00006df <strlen>
c00198fd:	40                   	inc    eax
c00198fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0019901:	e8 1c 5d ff ff       	call   c000f622 <malloc>
c0019906:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019909:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001990d:	e8 cd 6d fe ff       	call   c00006df <strlen>
c0019912:	83 c4 0c             	add    esp,0xc
c0019915:	40                   	inc    eax
c0019916:	50                   	push   eax
c0019917:	6a 00                	push   0x0
c0019919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001991d:	e8 a0 6d fe ff       	call   c00006c2 <memset>
c0019922:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019925:	e8 b5 6d fe ff       	call   c00006df <strlen>
c001992a:	83 c4 0c             	add    esp,0xc
c001992d:	40                   	inc    eax
c001992e:	50                   	push   eax
c001992f:	57                   	push   edi
c0019930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019934:	e8 67 6d fe ff       	call   c00006a0 <memcpy>
c0019939:	89 34 24             	mov    DWORD PTR [esp],esi
c001993c:	e8 9e 6d fe ff       	call   c00006df <strlen>
c0019941:	83 c4 0c             	add    esp,0xc
c0019944:	40                   	inc    eax
c0019945:	50                   	push   eax
c0019946:	6a 00                	push   0x0
c0019948:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001994c:	e8 71 6d fe ff       	call   c00006c2 <memset>
c0019951:	89 34 24             	mov    DWORD PTR [esp],esi
c0019954:	e8 86 6d fe ff       	call   c00006df <strlen>
c0019959:	83 c4 0c             	add    esp,0xc
c001995c:	40                   	inc    eax
c001995d:	50                   	push   eax
c001995e:	56                   	push   esi
c001995f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019963:	e8 38 6d fe ff       	call   c00006a0 <memcpy>
c0019968:	8b 03                	mov    eax,DWORD PTR [ebx]
c001996a:	40                   	inc    eax
c001996b:	89 03                	mov    DWORD PTR [ebx],eax
c001996d:	c1 e0 03             	shl    eax,0x3
c0019970:	5a                   	pop    edx
c0019971:	59                   	pop    ecx
c0019972:	50                   	push   eax
c0019973:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019976:	e8 93 5c ff ff       	call   c000f60e <realloc>
c001997b:	83 c4 0c             	add    esp,0xc
c001997e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019981:	6a 08                	push   0x8
c0019983:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019987:	52                   	push   edx
c0019988:	8b 13                	mov    edx,DWORD PTR [ebx]
c001998a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001998e:	50                   	push   eax
c001998f:	e8 0c 6d fe ff       	call   c00006a0 <memcpy>
c0019994:	83 c4 20             	add    esp,0x20
c0019997:	5b                   	pop    ebx
c0019998:	5e                   	pop    esi
c0019999:	5f                   	pop    edi
c001999a:	c3                   	ret    
c001999b:	90                   	nop

c001999c <EnvVarContainer::deleteEnv(char const*)>:
c001999c:	c3                   	ret    
c001999d:	90                   	nop

c001999e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001999e:	55                   	push   ebp
c001999f:	57                   	push   edi
c00199a0:	56                   	push   esi
c00199a1:	53                   	push   ebx
c00199a2:	81 ec 38 01 00 00    	sub    esp,0x138
c00199a8:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00199af:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00199b6:	68 14 01 00 00       	push   0x114
c00199bb:	e8 62 5c ff ff       	call   c000f622 <malloc>
c00199c0:	83 c4 0c             	add    esp,0xc
c00199c3:	89 c7                	mov    edi,eax
c00199c5:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00199c8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199cf:	50                   	push   eax
c00199d0:	e8 75 94 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c00199d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00199d8:	e8 3f 97 ff ff       	call   c001311c <File::exists()>
c00199dd:	83 c4 10             	add    esp,0x10
c00199e0:	84 c0                	test   al,al
c00199e2:	75 31                	jne    c0019a15 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00199e4:	51                   	push   ecx
c00199e5:	51                   	push   ecx
c00199e6:	6a 12                	push   0x12
c00199e8:	57                   	push   edi
c00199e9:	e8 c0 94 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c00199ee:	8b 07                	mov    eax,DWORD PTR [edi]
c00199f0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00199f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00199f6:	e8 e4 6c fe ff       	call   c00006df <strlen>
c00199fb:	5a                   	pop    edx
c00199fc:	31 d2                	xor    edx,edx
c00199fe:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a02:	51                   	push   ecx
c0019a03:	55                   	push   ebp
c0019a04:	52                   	push   edx
c0019a05:	50                   	push   eax
c0019a06:	57                   	push   edi
c0019a07:	ff d3                	call   ebx
c0019a09:	83 c4 14             	add    esp,0x14
c0019a0c:	57                   	push   edi
c0019a0d:	e8 fa 94 ff ff       	call   c0012f0c <File::close()>
c0019a12:	83 c4 10             	add    esp,0x10
c0019a15:	31 db                	xor    ebx,ebx
c0019a17:	50                   	push   eax
c0019a18:	31 ed                	xor    ebp,ebp
c0019a1a:	68 00 01 00 00       	push   0x100
c0019a1f:	6a 00                	push   0x0
c0019a21:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a25:	50                   	push   eax
c0019a26:	e8 97 6c fe ff       	call   c00006c2 <memset>
c0019a2b:	58                   	pop    eax
c0019a2c:	5a                   	pop    edx
c0019a2d:	6a 01                	push   0x1
c0019a2f:	57                   	push   edi
c0019a30:	e8 79 94 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	83 ec 0c             	sub    esp,0xc
c0019a3b:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a3d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a41:	51                   	push   ecx
c0019a42:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a46:	52                   	push   edx
c0019a47:	6a 00                	push   0x0
c0019a49:	6a 01                	push   0x1
c0019a4b:	57                   	push   edi
c0019a4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a4f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a53:	83 c4 20             	add    esp,0x20
c0019a56:	3c 0d                	cmp    al,0xd
c0019a58:	0f 84 12 01 00 00    	je     c0019b70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019a5e:	85 db                	test   ebx,ebx
c0019a60:	0f 84 fd 00 00 00    	je     c0019b63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019a66:	3c 0a                	cmp    al,0xa
c0019a68:	74 13                	je     c0019a7d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019a6a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a6f:	74 0c                	je     c0019a7d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019a71:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019a77:	0f 8e e6 00 00 00    	jle    c0019b63 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019a7d:	83 ec 0c             	sub    esp,0xc
c0019a80:	8d 53 01             	lea    edx,[ebx+0x1]
c0019a83:	29 dd                	sub    ebp,ebx
c0019a85:	52                   	push   edx
c0019a86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019a8a:	e8 93 5b ff ff       	call   c000f622 <malloc>
c0019a8f:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019a92:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019a96:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019a99:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019a9d:	e8 80 5b ff ff       	call   c000f622 <malloc>
c0019aa2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019aa6:	83 c4 0c             	add    esp,0xc
c0019aa9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019aad:	52                   	push   edx
c0019aae:	6a 00                	push   0x0
c0019ab0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ab4:	e8 09 6c fe ff       	call   c00006c2 <memset>
c0019ab9:	83 c4 0c             	add    esp,0xc
c0019abc:	53                   	push   ebx
c0019abd:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019ac1:	55                   	push   ebp
c0019ac2:	01 eb                	add    ebx,ebp
c0019ac4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ac8:	e8 d3 6b fe ff       	call   c00006a0 <memcpy>
c0019acd:	83 c4 0c             	add    esp,0xc
c0019ad0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ad4:	51                   	push   ecx
c0019ad5:	6a 00                	push   0x0
c0019ad7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019adb:	e8 e2 6b fe ff       	call   c00006c2 <memset>
c0019ae0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ae3:	e8 f7 6b fe ff       	call   c00006df <strlen>
c0019ae8:	83 c4 0c             	add    esp,0xc
c0019aeb:	50                   	push   eax
c0019aec:	53                   	push   ebx
c0019aed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019af1:	e8 aa 6b fe ff       	call   c00006a0 <memcpy>
c0019af6:	5b                   	pop    ebx
c0019af7:	58                   	pop    eax
c0019af8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019afc:	68 5c b1 02 c0       	push   0xc002b15c
c0019b01:	e8 eb 8d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0019b06:	8b 06                	mov    eax,DWORD PTR [esi]
c0019b08:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019b0b:	40                   	inc    eax
c0019b0c:	83 c4 10             	add    esp,0x10
c0019b0f:	89 06                	mov    DWORD PTR [esi],eax
c0019b11:	85 d2                	test   edx,edx
c0019b13:	75 0c                	jne    c0019b21 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019b15:	83 ec 0c             	sub    esp,0xc
c0019b18:	6a 08                	push   0x8
c0019b1a:	e8 03 5b ff ff       	call   c000f622 <malloc>
c0019b1f:	eb 0c                	jmp    c0019b2d <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019b21:	c1 e0 03             	shl    eax,0x3
c0019b24:	51                   	push   ecx
c0019b25:	51                   	push   ecx
c0019b26:	50                   	push   eax
c0019b27:	52                   	push   edx
c0019b28:	e8 e1 5a ff ff       	call   c000f60e <realloc>
c0019b2d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019b30:	83 c4 10             	add    esp,0x10
c0019b33:	31 db                	xor    ebx,ebx
c0019b35:	52                   	push   edx
c0019b36:	6a 08                	push   0x8
c0019b38:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b3c:	50                   	push   eax
c0019b3d:	8b 16                	mov    edx,DWORD PTR [esi]
c0019b3f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019b42:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019b46:	50                   	push   eax
c0019b47:	e8 54 6b fe ff       	call   c00006a0 <memcpy>
c0019b4c:	83 c4 0c             	add    esp,0xc
c0019b4f:	68 00 01 00 00       	push   0x100
c0019b54:	6a 00                	push   0x0
c0019b56:	55                   	push   ebp
c0019b57:	31 ed                	xor    ebp,ebp
c0019b59:	e8 64 6b fe ff       	call   c00006c2 <memset>
c0019b5e:	83 c4 10             	add    esp,0x10
c0019b61:	eb 0d                	jmp    c0019b70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019b63:	3c 3d                	cmp    al,0x3d
c0019b65:	74 07                	je     c0019b6e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019b67:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019b6b:	45                   	inc    ebp
c0019b6c:	eb 02                	jmp    c0019b70 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019b6e:	89 eb                	mov    ebx,ebp
c0019b70:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b75:	0f 85 bd fe ff ff    	jne    c0019a38 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019b7b:	50                   	push   eax
c0019b7c:	50                   	push   eax
c0019b7d:	ff 36                	push   DWORD PTR [esi]
c0019b7f:	68 6a b1 02 c0       	push   0xc002b16a
c0019b84:	e8 68 8d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0019b89:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019b8f:	5b                   	pop    ebx
c0019b90:	5e                   	pop    esi
c0019b91:	5f                   	pop    edi
c0019b92:	5d                   	pop    ebp
c0019b93:	c3                   	ret    

c0019b94 <EnvVarContainer::__loadSystem()>:
c0019b94:	83 ec 10             	sub    esp,0x10
c0019b97:	68 00 d0 02 c0       	push   0xc002d000
c0019b9c:	68 95 b1 02 c0       	push   0xc002b195
c0019ba1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ba5:	e8 f4 fd ff ff       	call   c001999e <EnvVarContainer::loadFrom(char const*, char const*)>
c0019baa:	83 c4 1c             	add    esp,0x1c
c0019bad:	c3                   	ret    

c0019bae <EnvVarContainer::__loadUser()>:
c0019bae:	c3                   	ret    
c0019baf:	90                   	nop

c0019bb0 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bd0:	90                   	nop
c0019bd1:	c3                   	ret    

c0019bd2 <EnvVarContainer::~EnvVarContainer()>:
c0019bd2:	83 ec 0c             	sub    esp,0xc
c0019bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bdc:	85 c0                	test   eax,eax
c0019bde:	74 1d                	je     c0019bfd <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0019be6:	85 c0                	test   eax,eax
c0019be8:	74 13                	je     c0019bfd <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bf1:	83 ec 0c             	sub    esp,0xc
c0019bf4:	50                   	push   eax
c0019bf5:	e8 38 5a ff ff       	call   c000f632 <free>
c0019bfa:	83 c4 10             	add    esp,0x10
c0019bfd:	90                   	nop
c0019bfe:	83 c4 0c             	add    esp,0xc
c0019c01:	c3                   	ret    

c0019c02 <Krnl::getEnv(Process*, char const*)>:
c0019c02:	53                   	push   ebx
c0019c03:	83 ec 08             	sub    esp,0x8
c0019c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c0a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c0e:	39 05 34 10 03 c0    	cmp    DWORD PTR ds:0xc0031034,eax
c0019c14:	74 04                	je     c0019c1a <Krnl::getEnv(Process*, char const*)+0x18>
c0019c16:	85 c0                	test   eax,eax
c0019c18:	75 0b                	jne    c0019c25 <Krnl::getEnv(Process*, char const*)+0x23>
c0019c1a:	a1 10 06 03 c0       	mov    eax,ds:0xc0030610
c0019c1f:	85 c0                	test   eax,eax
c0019c21:	75 19                	jne    c0019c3c <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c23:	eb 27                	jmp    c0019c4c <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c25:	52                   	push   edx
c0019c26:	52                   	push   edx
c0019c27:	53                   	push   ebx
c0019c28:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c2e:	e8 5f fc ff ff       	call   c0019892 <EnvVarContainer::getEnv(char const*)>
c0019c33:	83 c4 10             	add    esp,0x10
c0019c36:	85 c0                	test   eax,eax
c0019c38:	75 28                	jne    c0019c62 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c3a:	eb de                	jmp    c0019c1a <Krnl::getEnv(Process*, char const*)+0x18>
c0019c3c:	52                   	push   edx
c0019c3d:	52                   	push   edx
c0019c3e:	53                   	push   ebx
c0019c3f:	50                   	push   eax
c0019c40:	e8 4d fc ff ff       	call   c0019892 <EnvVarContainer::getEnv(char const*)>
c0019c45:	83 c4 10             	add    esp,0x10
c0019c48:	85 c0                	test   eax,eax
c0019c4a:	75 16                	jne    c0019c62 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c4c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c50:	a1 14 06 03 c0       	mov    eax,ds:0xc0030614
c0019c55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c59:	83 c4 08             	add    esp,0x8
c0019c5c:	5b                   	pop    ebx
c0019c5d:	e9 30 fc ff ff       	jmp    c0019892 <EnvVarContainer::getEnv(char const*)>
c0019c62:	83 c4 08             	add    esp,0x8
c0019c65:	5b                   	pop    ebx
c0019c66:	c3                   	ret    

c0019c67 <Krnl::setEnvSystem(char const*, char const*)>:
c0019c67:	83 ec 10             	sub    esp,0x10
c0019c6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c72:	ff 35 14 06 03 c0    	push   DWORD PTR ds:0xc0030614
c0019c78:	e8 53 fc ff ff       	call   c00198d0 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c7d:	83 c4 1c             	add    esp,0x1c
c0019c80:	c3                   	ret    

c0019c81 <Krnl::setEnvUser(char const*, char const*)>:
c0019c81:	a1 10 06 03 c0       	mov    eax,ds:0xc0030610
c0019c86:	85 c0                	test   eax,eax
c0019c88:	74 15                	je     c0019c9f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c8a:	83 ec 10             	sub    esp,0x10
c0019c8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c95:	50                   	push   eax
c0019c96:	e8 35 fc ff ff       	call   c00198d0 <EnvVarContainer::setEnv(char const*, char const*)>
c0019c9b:	83 c4 1c             	add    esp,0x1c
c0019c9e:	c3                   	ret    
c0019c9f:	c3                   	ret    

c0019ca0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019caa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cae:	e9 1d fc ff ff       	jmp    c00198d0 <EnvVarContainer::setEnv(char const*, char const*)>

c0019cb3 <Krnl::deleteEnvSystem(char const*)>:
c0019cb3:	c3                   	ret    

c0019cb4 <Krnl::deleteEnvUser(char const*)>:
c0019cb4:	c3                   	ret    

c0019cb5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019cb5:	c3                   	ret    

c0019cb6 <Krnl::newProcessEnv(Process*)>:
c0019cb6:	83 ec 28             	sub    esp,0x28
c0019cb9:	6a 0c                	push   0xc
c0019cbb:	e8 62 59 ff ff       	call   c000f622 <malloc>
c0019cc0:	5a                   	pop    edx
c0019cc1:	59                   	pop    ecx
c0019cc2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cc6:	50                   	push   eax
c0019cc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ccb:	e8 e0 fe ff ff       	call   c0019bb0 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cd4:	83 c4 2c             	add    esp,0x2c
c0019cd7:	c3                   	ret    

c0019cd8 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019cd8:	56                   	push   esi
c0019cd9:	53                   	push   ebx
c0019cda:	83 ec 10             	sub    esp,0x10
c0019cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ce1:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019ce7:	6a 0c                	push   0xc
c0019ce9:	e8 34 59 ff ff       	call   c000f622 <malloc>
c0019cee:	89 c3                	mov    ebx,eax
c0019cf0:	58                   	pop    eax
c0019cf1:	5a                   	pop    edx
c0019cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cf6:	53                   	push   ebx
c0019cf7:	e8 b4 fe ff ff       	call   c0019bb0 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cfc:	8b 06                	mov    eax,DWORD PTR [esi]
c0019cfe:	89 03                	mov    DWORD PTR [ebx],eax
c0019d00:	c1 e0 03             	shl    eax,0x3
c0019d03:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d06:	e8 17 59 ff ff       	call   c000f622 <malloc>
c0019d0b:	83 c4 0c             	add    esp,0xc
c0019d0e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d11:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019d13:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019d1a:	52                   	push   edx
c0019d1b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019d1e:	50                   	push   eax
c0019d1f:	e8 7c 69 fe ff       	call   c00006a0 <memcpy>
c0019d24:	89 d8                	mov    eax,ebx
c0019d26:	83 c4 14             	add    esp,0x14
c0019d29:	5b                   	pop    ebx
c0019d2a:	5e                   	pop    esi
c0019d2b:	c3                   	ret    

c0019d2c <Krnl::loadSystemEnv()>:
c0019d2c:	53                   	push   ebx
c0019d2d:	83 ec 14             	sub    esp,0x14
c0019d30:	6a 0c                	push   0xc
c0019d32:	e8 eb 58 ff ff       	call   c000f622 <malloc>
c0019d37:	89 c3                	mov    ebx,eax
c0019d39:	58                   	pop    eax
c0019d3a:	5a                   	pop    edx
c0019d3b:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c0019d41:	53                   	push   ebx
c0019d42:	e8 69 fe ff ff       	call   c0019bb0 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d4a:	89 1d 14 06 03 c0    	mov    DWORD PTR ds:0xc0030614,ebx
c0019d50:	e8 3f fe ff ff       	call   c0019b94 <EnvVarContainer::__loadSystem()>
c0019d55:	83 c4 18             	add    esp,0x18
c0019d58:	5b                   	pop    ebx
c0019d59:	c3                   	ret    

c0019d5a <Krnl::loadUserEnv()>:
c0019d5a:	53                   	push   ebx
c0019d5b:	83 ec 14             	sub    esp,0x14
c0019d5e:	6a 0c                	push   0xc
c0019d60:	e8 bd 58 ff ff       	call   c000f622 <malloc>
c0019d65:	89 c3                	mov    ebx,eax
c0019d67:	58                   	pop    eax
c0019d68:	5a                   	pop    edx
c0019d69:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c0019d6f:	53                   	push   ebx
c0019d70:	e8 3b fe ff ff       	call   c0019bb0 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d75:	89 1d 10 06 03 c0    	mov    DWORD PTR ds:0xc0030610,ebx
c0019d7b:	83 c4 18             	add    esp,0x18
c0019d7e:	5b                   	pop    ebx
c0019d7f:	c3                   	ret    

c0019d80 <Krnl::flushEnv()>:
c0019d80:	c3                   	ret    

c0019d81 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d85:	8b 15 10 06 03 c0    	mov    edx,DWORD PTR ds:0xc0030610
c0019d8b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d91:	a1 14 06 03 c0       	mov    eax,ds:0xc0030614
c0019d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d98:	03 01                	add    eax,DWORD PTR [ecx]
c0019d9a:	85 d2                	test   edx,edx
c0019d9c:	74 02                	je     c0019da0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019d9e:	03 02                	add    eax,DWORD PTR [edx]
c0019da0:	c3                   	ret    

c0019da1 <Krnl::getProcessEnvPair(Process*, int)>:
c0019da1:	57                   	push   edi
c0019da2:	8b 0d 10 06 03 c0    	mov    ecx,DWORD PTR ds:0xc0030610
c0019da8:	56                   	push   esi
c0019da9:	85 c9                	test   ecx,ecx
c0019dab:	53                   	push   ebx
c0019dac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019db0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019db4:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019dba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019dbe:	8b 02                	mov    eax,DWORD PTR [edx]
c0019dc0:	75 47                	jne    c0019e09 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019dc2:	39 c3                	cmp    ebx,eax
c0019dc4:	7c 47                	jl     c0019e0d <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019dc6:	8b 15 14 06 03 c0    	mov    edx,DWORD PTR ds:0xc0030614
c0019dcc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dce:	01 c1                	add    ecx,eax
c0019dd0:	39 d9                	cmp    ecx,ebx
c0019dd2:	7e 6c                	jle    c0019e40 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019dd4:	51                   	push   ecx
c0019dd5:	89 d9                	mov    ecx,ebx
c0019dd7:	29 c1                	sub    ecx,eax
c0019dd9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019ddc:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019de0:	53                   	push   ebx
c0019de1:	68 b7 b1 02 c0       	push   0xc002b1b7
c0019de6:	e8 06 8b ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0019deb:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019df1:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019df3:	a1 14 06 03 c0       	mov    eax,ds:0xc0030614
c0019df8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019dfb:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019dff:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019e02:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019e05:	89 06                	mov    DWORD PTR [esi],eax
c0019e07:	eb 51                	jmp    c0019e5a <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019e09:	39 c3                	cmp    ebx,eax
c0019e0b:	7d 05                	jge    c0019e12 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019e0d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019e10:	eb 20                	jmp    c0019e32 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019e12:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019e14:	8d 14 07             	lea    edx,[edi+eax*1]
c0019e17:	39 da                	cmp    edx,ebx
c0019e19:	7e 04                	jle    c0019e1f <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019e1b:	29 c3                	sub    ebx,eax
c0019e1d:	eb 10                	jmp    c0019e2f <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019e1f:	8b 0d 14 06 03 c0    	mov    ecx,DWORD PTR ds:0xc0030614
c0019e25:	03 11                	add    edx,DWORD PTR [ecx]
c0019e27:	39 da                	cmp    edx,ebx
c0019e29:	7e 15                	jle    c0019e40 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019e2b:	29 c3                	sub    ebx,eax
c0019e2d:	29 fb                	sub    ebx,edi
c0019e2f:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019e32:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019e36:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019e39:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019e3c:	89 06                	mov    DWORD PTR [esi],eax
c0019e3e:	eb 1d                	jmp    c0019e5d <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019e40:	83 ec 0c             	sub    esp,0xc
c0019e43:	68 cb b1 02 c0       	push   0xc002b1cb
c0019e48:	e8 18 00 00 00       	call   c0019e65 <Krnl::panic(char const*)>
c0019e4d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019e53:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019e5a:	83 c4 10             	add    esp,0x10
c0019e5d:	89 f0                	mov    eax,esi
c0019e5f:	5b                   	pop    ebx
c0019e60:	5e                   	pop    esi
c0019e61:	5f                   	pop    edi
c0019e62:	c2 04 00             	ret    0x4

c0019e65 <Krnl::panic(char const*)>:
c0019e65:	55                   	push   ebp
c0019e66:	89 e5                	mov    ebp,esp
c0019e68:	53                   	push   ebx
c0019e69:	83 ec 0c             	sub    esp,0xc
c0019e6c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e6f:	fa                   	cli    
c0019e70:	c6 05 20 06 03 c0 01 	mov    BYTE PTR ds:0xc0030620,0x1
c0019e77:	53                   	push   ebx
c0019e78:	c6 05 04 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca04,0x0
c0019e7f:	68 e5 b1 02 c0       	push   0xc002b1e5
c0019e84:	e8 68 8a ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0019e89:	58                   	pop    eax
c0019e8a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019e8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e95:	e8 19 6c ff ff       	call   c0010ab3 <setActiveTerminal(VgaText*)>
c0019e9a:	83 c4 0c             	add    esp,0xc
c0019e9d:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019ea2:	6a 01                	push   0x1
c0019ea4:	6a 0f                	push   0xf
c0019ea6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eac:	e8 33 66 ff ff       	call   c00104e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019eb1:	58                   	pop    eax
c0019eb2:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019eb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ebd:	e8 92 6e ff ff       	call   c0010d54 <VgaText::clearScreen()>
c0019ec2:	58                   	pop    eax
c0019ec3:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019ec8:	5a                   	pop    edx
c0019ec9:	68 fe b1 02 c0       	push   0xc002b1fe
c0019ece:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ed4:	e8 f9 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019ed9:	59                   	pop    ecx
c0019eda:	58                   	pop    eax
c0019edb:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019ee0:	68 a4 b2 02 c0       	push   0xc002b2a4
c0019ee5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eeb:	e8 e2 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019ef0:	58                   	pop    eax
c0019ef1:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019ef6:	5a                   	pop    edx
c0019ef7:	68 1a b2 02 c0       	push   0xc002b21a
c0019efc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f02:	e8 cb 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019f07:	59                   	pop    ecx
c0019f08:	58                   	pop    eax
c0019f09:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019f0e:	53                   	push   ebx
c0019f0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f15:	e8 b8 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019f1a:	58                   	pop    eax
c0019f1b:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019f20:	5a                   	pop    edx
c0019f21:	68 3a b2 02 c0       	push   0xc002b23a
c0019f26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f2c:	e8 a1 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019f31:	a1 1c 06 03 c0       	mov    eax,ds:0xc003061c
c0019f36:	83 c4 10             	add    esp,0x10
c0019f39:	85 c0                	test   eax,eax
c0019f3b:	74 02                	je     c0019f3f <Krnl::panic(char const*)+0xda>
c0019f3d:	ff d0                	call   eax
c0019f3f:	83 ec 0c             	sub    esp,0xc
c0019f42:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f45:	e8 b2 2e 00 00       	call   c001cdfc <Thr::getDriverNameFromAddress(unsigned long)>
c0019f4a:	83 c4 10             	add    esp,0x10
c0019f4d:	89 c3                	mov    ebx,eax
c0019f4f:	85 c0                	test   eax,eax
c0019f51:	0f 84 50 02 00 00    	je     c001a1a7 <Krnl::panic(char const*)+0x342>
c0019f57:	83 ec 08             	sub    esp,0x8
c0019f5a:	8b 15 34 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031034
c0019f60:	68 e0 b2 02 c0       	push   0xc002b2e0
c0019f65:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019f6b:	e8 62 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019f70:	58                   	pop    eax
c0019f71:	5a                   	pop    edx
c0019f72:	8b 15 34 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031034
c0019f78:	68 1a b2 02 c0       	push   0xc002b21a
c0019f7d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c0019f83:	e8 4a 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019f88:	59                   	pop    ecx
c0019f89:	58                   	pop    eax
c0019f8a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019f8f:	53                   	push   ebx
c0019f90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f96:	e8 37 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019f9b:	83 c4 10             	add    esp,0x10
c0019f9e:	83 ec 08             	sub    esp,0x8
c0019fa1:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019fa6:	68 39 b2 02 c0       	push   0xc002b239
c0019fab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb1:	e8 1c 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019fb6:	58                   	pop    eax
c0019fb7:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019fbc:	5a                   	pop    edx
c0019fbd:	68 38 b3 02 c0       	push   0xc002b338
c0019fc2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fc8:	e8 05 6f ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019fcd:	59                   	pop    ecx
c0019fce:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019fd3:	5b                   	pop    ebx
c0019fd4:	68 78 b3 02 c0       	push   0xc002b378
c0019fd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fdf:	e8 ee 6e ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019fe4:	58                   	pop    eax
c0019fe5:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c0019fea:	5a                   	pop    edx
c0019feb:	68 25 b2 02 c0       	push   0xc002b225
c0019ff0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ff6:	e8 d7 6e ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c0019ffb:	59                   	pop    ecx
c0019ffc:	5b                   	pop    ebx
c0019ffd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a000:	68 3d b2 02 c0       	push   0xc002b23d
c001a005:	e8 e7 88 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001a00a:	58                   	pop    eax
c001a00b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a00e:	5a                   	pop    edx
c001a00f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a012:	68 46 b2 02 c0       	push   0xc002b246
c001a017:	e8 d5 88 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001a01c:	59                   	pop    ecx
c001a01d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a020:	5b                   	pop    ebx
c001a021:	8b 00                	mov    eax,DWORD PTR [eax]
c001a023:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a026:	68 4f b2 02 c0       	push   0xc002b24f
c001a02b:	e8 c1 88 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001a030:	58                   	pop    eax
c001a031:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a036:	5a                   	pop    edx
c001a037:	68 bc b3 02 c0       	push   0xc002b3bc
c001a03c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a042:	e8 8b 6e ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a047:	59                   	pop    ecx
c001a048:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a04d:	5b                   	pop    ebx
c001a04e:	68 58 b2 02 c0       	push   0xc002b258
c001a053:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a059:	e8 74 6e ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a05e:	0f 20 c0             	mov    eax,cr0
c001a061:	5a                   	pop    edx
c001a062:	59                   	pop    ecx
c001a063:	50                   	push   eax
c001a064:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a069:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a06f:	e8 84 6e ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c001a074:	5b                   	pop    ebx
c001a075:	58                   	pop    eax
c001a076:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a07b:	68 62 b2 02 c0       	push   0xc002b262
c001a080:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a086:	e8 47 6e ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a08b:	0f 20 d0             	mov    eax,cr2
c001a08e:	5a                   	pop    edx
c001a08f:	59                   	pop    ecx
c001a090:	50                   	push   eax
c001a091:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a096:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09c:	e8 57 6e ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c001a0a1:	5b                   	pop    ebx
c001a0a2:	58                   	pop    eax
c001a0a3:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a0a8:	68 6c b2 02 c0       	push   0xc002b26c
c001a0ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b3:	e8 1a 6e ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a0b8:	0f 20 d8             	mov    eax,cr3
c001a0bb:	5a                   	pop    edx
c001a0bc:	59                   	pop    ecx
c001a0bd:	50                   	push   eax
c001a0be:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a0c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0c9:	e8 2a 6e ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c001a0ce:	5b                   	pop    ebx
c001a0cf:	58                   	pop    eax
c001a0d0:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a0d5:	68 7f b2 02 c0       	push   0xc002b27f
c001a0da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e0:	e8 ed 6d ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a0e5:	0f 20 e0             	mov    eax,cr4
c001a0e8:	5a                   	pop    edx
c001a0e9:	59                   	pop    ecx
c001a0ea:	50                   	push   eax
c001a0eb:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a0f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f6:	e8 fd 6d ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c001a0fb:	5b                   	pop    ebx
c001a0fc:	58                   	pop    eax
c001a0fd:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a102:	68 89 b2 02 c0       	push   0xc002b289
c001a107:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a10d:	e8 c0 6d ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a112:	5a                   	pop    edx
c001a113:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a118:	59                   	pop    ecx
c001a119:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a11f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a122:	50                   	push   eax
c001a123:	e8 d0 6d ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c001a128:	5b                   	pop    ebx
c001a129:	58                   	pop    eax
c001a12a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a12f:	68 a0 b2 02 c0       	push   0xc002b2a0
c001a134:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a13a:	e8 93 6d ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a13f:	5a                   	pop    edx
c001a140:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a145:	59                   	pop    ecx
c001a146:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a14c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a14f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a152:	50                   	push   eax
c001a153:	e8 a0 6d ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c001a158:	5b                   	pop    ebx
c001a159:	58                   	pop    eax
c001a15a:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a15f:	68 a0 b2 02 c0       	push   0xc002b2a0
c001a164:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a16a:	e8 63 6d ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a16f:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a174:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a177:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a17d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a17f:	59                   	pop    ecx
c001a180:	5b                   	pop    ebx
c001a181:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a184:	50                   	push   eax
c001a185:	e8 6e 6d ff ff       	call   c0010ef8 <VgaText::putx(unsigned int)>
c001a18a:	83 c4 10             	add    esp,0x10
c001a18d:	b2 fe                	mov    dl,0xfe
c001a18f:	e4 60                	in     al,0x60
c001a191:	3c 1c                	cmp    al,0x1c
c001a193:	74 04                	je     c001a199 <Krnl::panic(char const*)+0x334>
c001a195:	3c 5a                	cmp    al,0x5a
c001a197:	75 f6                	jne    c001a18f <Krnl::panic(char const*)+0x32a>
c001a199:	e4 64                	in     al,0x64
c001a19b:	a8 02                	test   al,0x2
c001a19d:	75 fa                	jne    c001a199 <Krnl::panic(char const*)+0x334>
c001a19f:	88 d0                	mov    al,dl
c001a1a1:	e6 64                	out    0x64,al
c001a1a3:	fa                   	cli    
c001a1a4:	f4                   	hlt    
c001a1a5:	eb e8                	jmp    c001a18f <Krnl::panic(char const*)+0x32a>
c001a1a7:	50                   	push   eax
c001a1a8:	50                   	push   eax
c001a1a9:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a1ae:	68 0c b3 02 c0       	push   0xc002b30c
c001a1b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1b9:	e8 14 6d ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a1be:	58                   	pop    eax
c001a1bf:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a1c4:	5a                   	pop    edx
c001a1c5:	68 1a b2 02 c0       	push   0xc002b21a
c001a1ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1d0:	e8 fd 6c ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a1d5:	59                   	pop    ecx
c001a1d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1db:	5b                   	pop    ebx
c001a1dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a1df:	83 c0 0c             	add    eax,0xc
c001a1e2:	50                   	push   eax
c001a1e3:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001a1e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1ee:	e8 df 6c ff ff       	call   c0010ed2 <VgaText::puts(char const*)>
c001a1f3:	83 c4 10             	add    esp,0x10
c001a1f6:	e9 a3 fd ff ff       	jmp    c0019f9e <Krnl::panic(char const*)+0x139>

c001a1fb <Net::switchEndian16(unsigned short)>:
c001a1fb:	83 ec 04             	sub    esp,0x4
c001a1fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a202:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a206:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a20a:	c1 f8 08             	sar    eax,0x8
c001a20d:	89 c2                	mov    edx,eax
c001a20f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a213:	c1 e0 08             	shl    eax,0x8
c001a216:	09 d0                	or     eax,edx
c001a218:	83 c4 04             	add    esp,0x4
c001a21b:	c3                   	ret    

c001a21c <Net::switchEndian32(unsigned int)>:
c001a21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a220:	c1 e8 18             	shr    eax,0x18
c001a223:	89 c2                	mov    edx,eax
c001a225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a229:	c1 e0 08             	shl    eax,0x8
c001a22c:	25 00 00 ff 00       	and    eax,0xff0000
c001a231:	09 c2                	or     edx,eax
c001a233:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a237:	c1 e8 08             	shr    eax,0x8
c001a23a:	25 00 ff 00 00       	and    eax,0xff00
c001a23f:	09 c2                	or     edx,eax
c001a241:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a245:	c1 e0 18             	shl    eax,0x18
c001a248:	09 d0                	or     eax,edx
c001a24a:	c3                   	ret    

c001a24b <Net::crc32Calc(unsigned char*, int)>:
c001a24b:	83 ec 10             	sub    esp,0x10
c001a24e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a253:	75 07                	jne    c001a25c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a255:	b8 00 00 00 00       	mov    eax,0x0
c001a25a:	eb 7c                	jmp    c001a2d8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a25c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a261:	7f 07                	jg     c001a26a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a263:	b8 00 00 00 00       	mov    eax,0x0
c001a268:	eb 6e                	jmp    c001a2d8 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a26a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a272:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a27a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a27e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a282:	7d 4e                	jge    c001a2d2 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a284:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a288:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a28c:	01 d0                	add    eax,edx
c001a28e:	8a 00                	mov    al,BYTE PTR [eax]
c001a290:	0f b6 c0             	movzx  eax,al
c001a293:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a297:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a29f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a2a4:	7f 26                	jg     c001a2cc <Net::crc32Calc(unsigned char*, int)+0x81>
c001a2a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2aa:	83 e0 01             	and    eax,0x1
c001a2ad:	74 0d                	je     c001a2bc <Net::crc32Calc(unsigned char*, int)+0x71>
c001a2af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b3:	d1 e8                	shr    eax,1
c001a2b5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a2ba:	eb 06                	jmp    c001a2c2 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c0:	d1 e8                	shr    eax,1
c001a2c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a2ca:	eb d3                	jmp    c001a29f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a2cc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a2d0:	eb a8                	jmp    c001a27a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a2d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d6:	f7 d0                	not    eax
c001a2d8:	83 c4 10             	add    esp,0x10
c001a2db:	c3                   	ret    

c001a2dc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a2dc:	83 ec 1c             	sub    esp,0x1c
c001a2df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a2e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a2ef:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a2f4:	7f 14                	jg     c001a30a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a2f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2fa:	8d 50 01             	lea    edx,[eax+0x1]
c001a2fd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a301:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a304:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a308:	eb e5                	jmp    c001a2ef <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a30a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a30e:	8d 50 01             	lea    edx,[eax+0x1]
c001a311:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a315:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a318:	83 ec 04             	sub    esp,0x4
c001a31b:	6a 06                	push   0x6
c001a31d:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a321:	50                   	push   eax
c001a322:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a326:	e8 75 63 fe ff       	call   c00006a0 <memcpy>
c001a32b:	83 c4 10             	add    esp,0x10
c001a32e:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a333:	83 ec 04             	sub    esp,0x4
c001a336:	6a 06                	push   0x6
c001a338:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a33c:	50                   	push   eax
c001a33d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a341:	e8 5a 63 fe ff       	call   c00006a0 <memcpy>
c001a346:	83 c4 10             	add    esp,0x10
c001a349:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a34e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a352:	0f b7 c0             	movzx  eax,ax
c001a355:	c1 f8 08             	sar    eax,0x8
c001a358:	89 c1                	mov    ecx,eax
c001a35a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a35e:	8d 50 01             	lea    edx,[eax+0x1]
c001a361:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a365:	88 ca                	mov    dl,cl
c001a367:	88 10                	mov    BYTE PTR [eax],dl
c001a369:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a36d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a371:	8d 48 01             	lea    ecx,[eax+0x1]
c001a374:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a378:	88 10                	mov    BYTE PTR [eax],dl
c001a37a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a37e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a382:	83 ec 04             	sub    esp,0x4
c001a385:	52                   	push   edx
c001a386:	50                   	push   eax
c001a387:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a38b:	e8 10 63 fe ff       	call   c00006a0 <memcpy>
c001a390:	83 c4 10             	add    esp,0x10
c001a393:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a397:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a39b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a39f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a3a3:	83 ec 08             	sub    esp,0x8
c001a3a6:	50                   	push   eax
c001a3a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3ab:	e8 9b fe ff ff       	call   c001a24b <Net::crc32Calc(unsigned char*, int)>
c001a3b0:	83 c4 10             	add    esp,0x10
c001a3b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3bb:	c1 e8 18             	shr    eax,0x18
c001a3be:	89 c1                	mov    ecx,eax
c001a3c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3c4:	8d 50 01             	lea    edx,[eax+0x1]
c001a3c7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3cb:	88 ca                	mov    dl,cl
c001a3cd:	88 10                	mov    BYTE PTR [eax],dl
c001a3cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3d3:	c1 e8 10             	shr    eax,0x10
c001a3d6:	89 c1                	mov    ecx,eax
c001a3d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3dc:	8d 50 01             	lea    edx,[eax+0x1]
c001a3df:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3e3:	88 ca                	mov    dl,cl
c001a3e5:	88 10                	mov    BYTE PTR [eax],dl
c001a3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3eb:	c1 e8 08             	shr    eax,0x8
c001a3ee:	89 c1                	mov    ecx,eax
c001a3f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3f4:	8d 50 01             	lea    edx,[eax+0x1]
c001a3f7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a3fb:	88 ca                	mov    dl,cl
c001a3fd:	88 10                	mov    BYTE PTR [eax],dl
c001a3ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a403:	8d 50 01             	lea    edx,[eax+0x1]
c001a406:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a40a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a40e:	88 10                	mov    BYTE PTR [eax],dl
c001a410:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a414:	83 c4 1c             	add    esp,0x1c
c001a417:	c3                   	ret    

c001a418 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a418:	83 ec 2c             	sub    esp,0x2c
c001a41b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a41f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a423:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a428:	83 ec 04             	sub    esp,0x4
c001a42b:	6a 06                	push   0x6
c001a42d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a431:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a435:	83 c0 0e             	add    eax,0xe
c001a438:	50                   	push   eax
c001a439:	e8 62 62 fe ff       	call   c00006a0 <memcpy>
c001a43e:	83 c4 10             	add    esp,0x10
c001a441:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a446:	83 ec 04             	sub    esp,0x4
c001a449:	6a 06                	push   0x6
c001a44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a44f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a453:	83 c0 08             	add    eax,0x8
c001a456:	50                   	push   eax
c001a457:	e8 44 62 fe ff       	call   c00006a0 <memcpy>
c001a45c:	83 c4 10             	add    esp,0x10
c001a45f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a464:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a468:	8d 50 01             	lea    edx,[eax+0x1]
c001a46b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a46f:	8a 00                	mov    al,BYTE PTR [eax]
c001a471:	0f b6 c0             	movzx  eax,al
c001a474:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a479:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a47d:	8d 50 01             	lea    edx,[eax+0x1]
c001a480:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a484:	8a 00                	mov    al,BYTE PTR [eax]
c001a486:	0f b6 c0             	movzx  eax,al
c001a489:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a48e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a493:	c1 e0 08             	shl    eax,0x8
c001a496:	89 c2                	mov    edx,eax
c001a498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a49c:	09 d0                	or     eax,edx
c001a49e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a4a2:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a4a6:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a4ab:	75 3a                	jne    c001a4e7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a4ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4b1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4b4:	66 3d dc 05          	cmp    ax,0x5dc
c001a4b8:	77 10                	ja     c001a4ca <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a4ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4be:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4c1:	0f b7 c0             	movzx  eax,ax
c001a4c4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a4c8:	eb 1d                	jmp    c001a4e7 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a4ca:	83 ec 0c             	sub    esp,0xc
c001a4cd:	68 e4 b3 02 c0       	push   0xc002b3e4
c001a4d2:	e8 1a 84 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001a4d7:	83 c4 10             	add    esp,0x10
c001a4da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4de:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a4e2:	e9 c0 00 00 00       	jmp    c001a5a7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a4e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a4eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4ef:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4f1:	83 ec 04             	sub    esp,0x4
c001a4f4:	52                   	push   edx
c001a4f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4f9:	50                   	push   eax
c001a4fa:	e8 a1 61 fe ff       	call   c00006a0 <memcpy>
c001a4ff:	83 c4 10             	add    esp,0x10
c001a502:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a506:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a50a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a50e:	8d 50 01             	lea    edx,[eax+0x1]
c001a511:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a515:	8a 00                	mov    al,BYTE PTR [eax]
c001a517:	0f b6 c0             	movzx  eax,al
c001a51a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a51e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a522:	8d 50 01             	lea    edx,[eax+0x1]
c001a525:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a529:	8a 00                	mov    al,BYTE PTR [eax]
c001a52b:	0f b6 c0             	movzx  eax,al
c001a52e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a532:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a536:	8d 50 01             	lea    edx,[eax+0x1]
c001a539:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a53d:	8a 00                	mov    al,BYTE PTR [eax]
c001a53f:	0f b6 c0             	movzx  eax,al
c001a542:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a546:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a54a:	8d 50 01             	lea    edx,[eax+0x1]
c001a54d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a551:	8a 00                	mov    al,BYTE PTR [eax]
c001a553:	0f b6 c0             	movzx  eax,al
c001a556:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a55a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a55e:	c1 e0 18             	shl    eax,0x18
c001a561:	89 c2                	mov    edx,eax
c001a563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a567:	c1 e0 10             	shl    eax,0x10
c001a56a:	09 c2                	or     edx,eax
c001a56c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a570:	c1 e0 08             	shl    eax,0x8
c001a573:	09 d0                	or     eax,edx
c001a575:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a579:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a57d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a581:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a585:	83 e8 04             	sub    eax,0x4
c001a588:	83 ec 08             	sub    esp,0x8
c001a58b:	50                   	push   eax
c001a58c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a590:	e8 b6 fc ff ff       	call   c001a24b <Net::crc32Calc(unsigned char*, int)>
c001a595:	83 c4 10             	add    esp,0x10
c001a598:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a59c:	0f 94 c2             	sete   dl
c001a59f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5a3:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a5a6:	90                   	nop
c001a5a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5ab:	83 c4 2c             	add    esp,0x2c
c001a5ae:	c2 04 00             	ret    0x4

c001a5b1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a5b1:	55                   	push   ebp
c001a5b2:	57                   	push   edi
c001a5b3:	56                   	push   esi
c001a5b4:	53                   	push   ebx
c001a5b5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a5bb:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a5c2:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a5c4:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a5c7:	80 fb 40             	cmp    bl,0x40
c001a5ca:	75 1b                	jne    c001a5e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a5cc:	8a 16                	mov    dl,BYTE PTR [esi]
c001a5ce:	84 d2                	test   dl,dl
c001a5d0:	0f 84 f1 00 00 00    	je     c001a6c7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5d6:	8d 46 01             	lea    eax,[esi+0x1]
c001a5d9:	80 fa 3a             	cmp    dl,0x3a
c001a5dc:	74 04                	je     c001a5e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a5de:	89 c6                	mov    esi,eax
c001a5e0:	eb ea                	jmp    c001a5cc <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a5e2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a5e5:	89 c6                	mov    esi,eax
c001a5e7:	50                   	push   eax
c001a5e8:	6a 40                	push   0x40
c001a5ea:	6a 00                	push   0x0
c001a5ec:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a5f0:	50                   	push   eax
c001a5f1:	e8 cc 60 fe ff       	call   c00006c2 <memset>
c001a5f6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a5fd:	31 c0                	xor    eax,eax
c001a5ff:	83 c4 10             	add    esp,0x10
c001a602:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a604:	84 c9                	test   cl,cl
c001a606:	0f 84 bb 00 00 00    	je     c001a6c7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a60c:	3d c7 00 00 00       	cmp    eax,0xc7
c001a611:	0f 8f b0 00 00 00    	jg     c001a6c7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a617:	80 f9 0a             	cmp    cl,0xa
c001a61a:	0f 85 98 00 00 00    	jne    c001a6b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a620:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a625:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a629:	a8 df                	test   al,0xdf
c001a62b:	0f 94 c1             	sete   cl
c001a62e:	3c 23                	cmp    al,0x23
c001a630:	0f 94 c2             	sete   dl
c001a633:	08 d1                	or     cl,dl
c001a635:	75 4a                	jne    c001a681 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a637:	8d 50 f7             	lea    edx,[eax-0x9]
c001a63a:	80 fa 01             	cmp    dl,0x1
c001a63d:	76 42                	jbe    c001a681 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a63f:	3c 5b                	cmp    al,0x5b
c001a641:	75 42                	jne    c001a685 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a643:	80 fb 40             	cmp    bl,0x40
c001a646:	75 39                	jne    c001a681 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a648:	83 ec 0c             	sub    esp,0xc
c001a64b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a64f:	52                   	push   edx
c001a650:	e8 8a 60 fe ff       	call   c00006df <strlen>
c001a655:	83 c4 10             	add    esp,0x10
c001a658:	83 f8 3f             	cmp    eax,0x3f
c001a65b:	77 6a                	ja     c001a6c7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a65d:	50                   	push   eax
c001a65e:	50                   	push   eax
c001a65f:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a663:	52                   	push   edx
c001a664:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a668:	52                   	push   edx
c001a669:	e8 f3 60 fe ff       	call   c0000761 <strcpy>
c001a66e:	58                   	pop    eax
c001a66f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a673:	52                   	push   edx
c001a674:	e8 66 60 fe ff       	call   c00006df <strlen>
c001a679:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a67e:	83 c4 10             	add    esp,0x10
c001a681:	31 d2                	xor    edx,edx
c001a683:	eb 3a                	jmp    c001a6bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a685:	80 fb 40             	cmp    bl,0x40
c001a688:	74 06                	je     c001a690 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a68a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a68e:	eb 20                	jmp    c001a6b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a690:	50                   	push   eax
c001a691:	50                   	push   eax
c001a692:	55                   	push   ebp
c001a693:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a697:	50                   	push   eax
c001a698:	e8 15 61 fe ff       	call   c00007b2 <strcmp>
c001a69d:	83 c4 10             	add    esp,0x10
c001a6a0:	85 c0                	test   eax,eax
c001a6a2:	75 dd                	jne    c001a681 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6a4:	eb e4                	jmp    c001a68a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a6a6:	8d 50 01             	lea    edx,[eax+0x1]
c001a6a9:	80 f9 3d             	cmp    cl,0x3d
c001a6ac:	74 1d                	je     c001a6cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a6ae:	89 d0                	mov    eax,edx
c001a6b0:	8a 08                	mov    cl,BYTE PTR [eax]
c001a6b2:	84 c9                	test   cl,cl
c001a6b4:	75 f0                	jne    c001a6a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a6b6:	eb 0f                	jmp    c001a6c7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6b8:	8d 50 01             	lea    edx,[eax+0x1]
c001a6bb:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a6bf:	47                   	inc    edi
c001a6c0:	89 d0                	mov    eax,edx
c001a6c2:	e9 3b ff ff ff       	jmp    c001a602 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a6c7:	31 c0                	xor    eax,eax
c001a6c9:	eb 33                	jmp    c001a6fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a6cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a6d2:	50                   	push   eax
c001a6d3:	50                   	push   eax
c001a6d4:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a6d8:	50                   	push   eax
c001a6d9:	56                   	push   esi
c001a6da:	e8 d3 60 fe ff       	call   c00007b2 <strcmp>
c001a6df:	83 c4 10             	add    esp,0x10
c001a6e2:	85 c0                	test   eax,eax
c001a6e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6e8:	75 97                	jne    c001a681 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6ea:	51                   	push   ecx
c001a6eb:	51                   	push   ecx
c001a6ec:	52                   	push   edx
c001a6ed:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a6f4:	e8 68 60 fe ff       	call   c0000761 <strcpy>
c001a6f9:	83 c4 10             	add    esp,0x10
c001a6fc:	b0 01                	mov    al,0x1
c001a6fe:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a704:	5b                   	pop    ebx
c001a705:	5e                   	pop    esi
c001a706:	5f                   	pop    edi
c001a707:	5d                   	pop    ebp
c001a708:	c3                   	ret    

c001a709 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a709:	57                   	push   edi
c001a70a:	56                   	push   esi
c001a70b:	53                   	push   ebx
c001a70c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a712:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a719:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a720:	53                   	push   ebx
c001a721:	e8 b9 5f fe ff       	call   c00006df <strlen>
c001a726:	89 34 24             	mov    DWORD PTR [esp],esi
c001a729:	89 c7                	mov    edi,eax
c001a72b:	e8 af 5f fe ff       	call   c00006df <strlen>
c001a730:	83 c4 10             	add    esp,0x10
c001a733:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a737:	3d ff 00 00 00       	cmp    eax,0xff
c001a73c:	0f 87 d3 00 00 00    	ja     c001a815 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a742:	57                   	push   edi
c001a743:	57                   	push   edi
c001a744:	56                   	push   esi
c001a745:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a749:	56                   	push   esi
c001a74a:	e8 12 60 fe ff       	call   c0000761 <strcpy>
c001a74f:	58                   	pop    eax
c001a750:	5a                   	pop    edx
c001a751:	68 2f b8 02 c0       	push   0xc002b82f
c001a756:	56                   	push   esi
c001a757:	e8 bc 60 fe ff       	call   c0000818 <strcat>
c001a75c:	59                   	pop    ecx
c001a75d:	5f                   	pop    edi
c001a75e:	53                   	push   ebx
c001a75f:	56                   	push   esi
c001a760:	e8 b3 60 fe ff       	call   c0000818 <strcat>
c001a765:	58                   	pop    eax
c001a766:	5a                   	pop    edx
c001a767:	68 30 b4 02 c0       	push   0xc002b430
c001a76c:	56                   	push   esi
c001a76d:	e8 a6 60 fe ff       	call   c0000818 <strcat>
c001a772:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a779:	e8 a4 4e ff ff       	call   c000f622 <malloc>
c001a77e:	83 c4 0c             	add    esp,0xc
c001a781:	89 c3                	mov    ebx,eax
c001a783:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c001a789:	56                   	push   esi
c001a78a:	50                   	push   eax
c001a78b:	e8 ba 86 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001a790:	83 c4 10             	add    esp,0x10
c001a793:	85 db                	test   ebx,ebx
c001a795:	74 7e                	je     c001a815 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a797:	51                   	push   ecx
c001a798:	51                   	push   ecx
c001a799:	6a 01                	push   0x1
c001a79b:	53                   	push   ebx
c001a79c:	e8 0d 87 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001a7a1:	83 c4 10             	add    esp,0x10
c001a7a4:	85 c0                	test   eax,eax
c001a7a6:	74 08                	je     c001a7b0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a7a8:	83 ec 0c             	sub    esp,0xc
c001a7ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7ad:	53                   	push   ebx
c001a7ae:	eb 5f                	jmp    c001a80f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a7b0:	52                   	push   edx
c001a7b1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a7b5:	50                   	push   eax
c001a7b6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7ba:	50                   	push   eax
c001a7bb:	53                   	push   ebx
c001a7bc:	e8 99 89 ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001a7c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7c5:	83 c4 10             	add    esp,0x10
c001a7c8:	89 c1                	mov    ecx,eax
c001a7ca:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a7ce:	74 31                	je     c001a801 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7d0:	83 ec 0c             	sub    esp,0xc
c001a7d3:	50                   	push   eax
c001a7d4:	e8 49 4e ff ff       	call   c000f622 <malloc>
c001a7d9:	89 c6                	mov    esi,eax
c001a7db:	58                   	pop    eax
c001a7dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7de:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a7e2:	52                   	push   edx
c001a7e3:	56                   	push   esi
c001a7e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7ec:	53                   	push   ebx
c001a7ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a7f0:	83 c4 20             	add    esp,0x20
c001a7f3:	85 c0                	test   eax,eax
c001a7f5:	75 0a                	jne    c001a801 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7fb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a7ff:	74 18                	je     c001a819 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a801:	83 ec 0c             	sub    esp,0xc
c001a804:	53                   	push   ebx
c001a805:	e8 02 87 ff ff       	call   c0012f0c <File::close()>
c001a80a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a80c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a80f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a812:	83 c4 10             	add    esp,0x10
c001a815:	31 c0                	xor    eax,eax
c001a817:	eb 3b                	jmp    c001a854 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a819:	83 ec 0c             	sub    esp,0xc
c001a81c:	53                   	push   ebx
c001a81d:	e8 ea 86 ff ff       	call   c0012f0c <File::close()>
c001a822:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a827:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a82a:	83 c4 0c             	add    esp,0xc
c001a82d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a834:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a83b:	56                   	push   esi
c001a83c:	e8 70 fd ff ff       	call   c001a5b1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a841:	89 34 24             	mov    DWORD PTR [esp],esi
c001a844:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a848:	e8 e5 4d ff ff       	call   c000f632 <free>
c001a84d:	83 c4 10             	add    esp,0x10
c001a850:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a854:	81 c4 20 01 00 00    	add    esp,0x120
c001a85a:	5b                   	pop    ebx
c001a85b:	5e                   	pop    esi
c001a85c:	5f                   	pop    edi
c001a85d:	c3                   	ret    

c001a85e <Reg::getLine(char*, char*, char*)>:
c001a85e:	57                   	push   edi
c001a85f:	56                   	push   esi
c001a860:	53                   	push   ebx
c001a861:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a865:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a869:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a86d:	57                   	push   edi
c001a86e:	56                   	push   esi
c001a86f:	53                   	push   ebx
c001a870:	68 35 b4 02 c0       	push   0xc002b435
c001a875:	e8 8f fe ff ff       	call   c001a709 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a87a:	83 c4 10             	add    esp,0x10
c001a87d:	84 c0                	test   al,al
c001a87f:	75 10                	jne    c001a891 <Reg::getLine(char*, char*, char*)+0x33>
c001a881:	57                   	push   edi
c001a882:	56                   	push   esi
c001a883:	53                   	push   ebx
c001a884:	68 5a b4 02 c0       	push   0xc002b45a
c001a889:	e8 7b fe ff ff       	call   c001a709 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a88e:	83 c4 10             	add    esp,0x10
c001a891:	5b                   	pop    ebx
c001a892:	5e                   	pop    esi
c001a893:	5f                   	pop    edi
c001a894:	c3                   	ret    

c001a895 <Reg::readInt(char*, char*, int*)>:
c001a895:	55                   	push   ebp
c001a896:	57                   	push   edi
c001a897:	56                   	push   esi
c001a898:	53                   	push   ebx
c001a899:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a89f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a8a3:	57                   	push   edi
c001a8a4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8ab:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8b2:	e8 a7 ff ff ff       	call   c001a85e <Reg::getLine(char*, char*, char*)>
c001a8b7:	83 c4 10             	add    esp,0x10
c001a8ba:	84 c0                	test   al,al
c001a8bc:	0f 84 b3 00 00 00    	je     c001a975 <Reg::readInt(char*, char*, int*)+0xe0>
c001a8c2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a8c6:	80 fa 2b             	cmp    dl,0x2b
c001a8c9:	74 0c                	je     c001a8d7 <Reg::readInt(char*, char*, int*)+0x42>
c001a8cb:	80 fa 2d             	cmp    dl,0x2d
c001a8ce:	75 0e                	jne    c001a8de <Reg::readInt(char*, char*, int*)+0x49>
c001a8d0:	ba 01 00 00 00       	mov    edx,0x1
c001a8d5:	eb 0b                	jmp    c001a8e2 <Reg::readInt(char*, char*, int*)+0x4d>
c001a8d7:	ba 01 00 00 00       	mov    edx,0x1
c001a8dc:	eb 02                	jmp    c001a8e0 <Reg::readInt(char*, char*, int*)+0x4b>
c001a8de:	31 d2                	xor    edx,edx
c001a8e0:	31 c0                	xor    eax,eax
c001a8e2:	be 0a 00 00 00       	mov    esi,0xa
c001a8e7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a8ec:	75 20                	jne    c001a90e <Reg::readInt(char*, char*, int*)+0x79>
c001a8ee:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a8f2:	80 f9 78             	cmp    cl,0x78
c001a8f5:	75 0a                	jne    c001a901 <Reg::readInt(char*, char*, int*)+0x6c>
c001a8f7:	83 c2 02             	add    edx,0x2
c001a8fa:	be 10 00 00 00       	mov    esi,0x10
c001a8ff:	eb 0d                	jmp    c001a90e <Reg::readInt(char*, char*, int*)+0x79>
c001a901:	80 f9 62             	cmp    cl,0x62
c001a904:	75 08                	jne    c001a90e <Reg::readInt(char*, char*, int*)+0x79>
c001a906:	83 c2 02             	add    edx,0x2
c001a909:	be 02 00 00 00       	mov    esi,0x2
c001a90e:	01 d7                	add    edi,edx
c001a910:	31 d2                	xor    edx,edx
c001a912:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a914:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a918:	80 fb 0d             	cmp    bl,0xd
c001a91b:	0f 94 c3             	sete   bl
c001a91e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a923:	0f 94 c1             	sete   cl
c001a926:	08 cb                	or     bl,cl
c001a928:	75 3a                	jne    c001a964 <Reg::readInt(char*, char*, int*)+0xcf>
c001a92a:	0f af d6             	imul   edx,esi
c001a92d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a932:	83 fe 10             	cmp    esi,0x10
c001a935:	75 26                	jne    c001a95d <Reg::readInt(char*, char*, int*)+0xc8>
c001a937:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a93b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a93e:	89 e9                	mov    ecx,ebp
c001a940:	80 f9 05             	cmp    cl,0x5
c001a943:	77 06                	ja     c001a94b <Reg::readInt(char*, char*, int*)+0xb6>
c001a945:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a949:	eb 16                	jmp    c001a961 <Reg::readInt(char*, char*, int*)+0xcc>
c001a94b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a94f:	83 e9 61             	sub    ecx,0x61
c001a952:	80 f9 05             	cmp    cl,0x5
c001a955:	77 06                	ja     c001a95d <Reg::readInt(char*, char*, int*)+0xc8>
c001a957:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a95b:	eb 04                	jmp    c001a961 <Reg::readInt(char*, char*, int*)+0xcc>
c001a95d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a961:	47                   	inc    edi
c001a962:	eb ae                	jmp    c001a912 <Reg::readInt(char*, char*, int*)+0x7d>
c001a964:	84 c0                	test   al,al
c001a966:	74 02                	je     c001a96a <Reg::readInt(char*, char*, int*)+0xd5>
c001a968:	f7 da                	neg    edx
c001a96a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a971:	89 10                	mov    DWORD PTR [eax],edx
c001a973:	88 d8                	mov    al,bl
c001a975:	81 c4 ec 00 00 00    	add    esp,0xec
c001a97b:	5b                   	pop    ebx
c001a97c:	5e                   	pop    esi
c001a97d:	5f                   	pop    edi
c001a97e:	5d                   	pop    ebp
c001a97f:	c3                   	ret    

c001a980 <Reg::readString(char*, char*, char*, int)>:
c001a980:	57                   	push   edi
c001a981:	56                   	push   esi
c001a982:	53                   	push   ebx
c001a983:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a989:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a990:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a994:	57                   	push   edi
c001a995:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a99c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a9a3:	e8 b6 fe ff ff       	call   c001a85e <Reg::getLine(char*, char*, char*)>
c001a9a8:	83 c4 10             	add    esp,0x10
c001a9ab:	89 c6                	mov    esi,eax
c001a9ad:	84 c0                	test   al,al
c001a9af:	74 44                	je     c001a9f5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a9b1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a9b8:	31 c0                	xor    eax,eax
c001a9ba:	4a                   	dec    edx
c001a9bb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a9be:	84 c9                	test   cl,cl
c001a9c0:	74 0f                	je     c001a9d1 <Reg::readString(char*, char*, char*, int)+0x51>
c001a9c2:	39 c2                	cmp    edx,eax
c001a9c4:	7e 0b                	jle    c001a9d1 <Reg::readString(char*, char*, char*, int)+0x51>
c001a9c6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a9c9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a9ce:	40                   	inc    eax
c001a9cf:	eb ea                	jmp    c001a9bb <Reg::readString(char*, char*, char*, int)+0x3b>
c001a9d1:	83 ec 0c             	sub    esp,0xc
c001a9d4:	53                   	push   ebx
c001a9d5:	e8 05 5d fe ff       	call   c00006df <strlen>
c001a9da:	83 c4 10             	add    esp,0x10
c001a9dd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a9e2:	75 11                	jne    c001a9f5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a9e4:	83 ec 0c             	sub    esp,0xc
c001a9e7:	53                   	push   ebx
c001a9e8:	e8 f2 5c fe ff       	call   c00006df <strlen>
c001a9ed:	83 c4 10             	add    esp,0x10
c001a9f0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a9f5:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a9fb:	89 f0                	mov    eax,esi
c001a9fd:	5b                   	pop    ebx
c001a9fe:	5e                   	pop    esi
c001a9ff:	5f                   	pop    edi
c001aa00:	c3                   	ret    

c001aa01 <Reg::readBool(char*, char*, bool*)>:
c001aa01:	83 ec 20             	sub    esp,0x20
c001aa04:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa08:	50                   	push   eax
c001aa09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa11:	e8 7f fe ff ff       	call   c001a895 <Reg::readInt(char*, char*, int*)>
c001aa16:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aa1b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aa1f:	0f 95 02             	setne  BYTE PTR [edx]
c001aa22:	83 c4 2c             	add    esp,0x2c
c001aa25:	c3                   	ret    

c001aa26 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aa26:	53                   	push   ebx
c001aa27:	83 ec 1c             	sub    esp,0x1c
c001aa2a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aa2e:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aa32:	50                   	push   eax
c001aa33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa3b:	e8 c1 ff ff ff       	call   c001aa01 <Reg::readBool(char*, char*, bool*)>
c001aa40:	83 c4 10             	add    esp,0x10
c001aa43:	84 c0                	test   al,al
c001aa45:	74 04                	je     c001aa4b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aa47:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aa4b:	88 d8                	mov    al,bl
c001aa4d:	83 c4 18             	add    esp,0x18
c001aa50:	5b                   	pop    ebx
c001aa51:	c3                   	ret    

c001aa52 <Reg::readIntWithDefault(char*, char*, int)>:
c001aa52:	53                   	push   ebx
c001aa53:	83 ec 1c             	sub    esp,0x1c
c001aa56:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa5a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa5e:	50                   	push   eax
c001aa5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa67:	e8 29 fe ff ff       	call   c001a895 <Reg::readInt(char*, char*, int*)>
c001aa6c:	83 c4 10             	add    esp,0x10
c001aa6f:	84 c0                	test   al,al
c001aa71:	74 04                	je     c001aa77 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aa73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aa77:	89 d8                	mov    eax,ebx
c001aa79:	83 c4 18             	add    esp,0x18
c001aa7c:	5b                   	pop    ebx
c001aa7d:	c3                   	ret    

c001aa7e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001aa7e:	57                   	push   edi
c001aa7f:	56                   	push   esi
c001aa80:	53                   	push   ebx
c001aa81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa89:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa8d:	56                   	push   esi
c001aa8e:	53                   	push   ebx
c001aa8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa97:	e8 e4 fe ff ff       	call   c001a980 <Reg::readString(char*, char*, char*, int)>
c001aa9c:	83 c4 10             	add    esp,0x10
c001aa9f:	84 c0                	test   al,al
c001aaa1:	75 1b                	jne    c001aabe <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001aaa3:	50                   	push   eax
c001aaa4:	56                   	push   esi
c001aaa5:	4e                   	dec    esi
c001aaa6:	6a 00                	push   0x0
c001aaa8:	53                   	push   ebx
c001aaa9:	e8 14 5c fe ff       	call   c00006c2 <memset>
c001aaae:	83 c4 0c             	add    esp,0xc
c001aab1:	56                   	push   esi
c001aab2:	57                   	push   edi
c001aab3:	53                   	push   ebx
c001aab4:	89 fb                	mov    ebx,edi
c001aab6:	e8 e5 5b fe ff       	call   c00006a0 <memcpy>
c001aabb:	83 c4 10             	add    esp,0x10
c001aabe:	89 d8                	mov    eax,ebx
c001aac0:	5b                   	pop    ebx
c001aac1:	5e                   	pop    esi
c001aac2:	5f                   	pop    edi
c001aac3:	c3                   	ret    

c001aac4 <Sys::eject(regs*)>:
c001aac4:	83 ec 0c             	sub    esp,0xc
c001aac7:	83 ca ff             	or     edx,0xffffffff
c001aaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aace:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aad1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aad6:	83 e9 41             	sub    ecx,0x41
c001aad9:	83 f9 19             	cmp    ecx,0x19
c001aadc:	77 18                	ja     c001aaf6 <Sys::eject(regs*)+0x32>
c001aade:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c001aae5:	85 c9                	test   ecx,ecx
c001aae7:	74 0d                	je     c001aaf6 <Sys::eject(regs*)+0x32>
c001aae9:	83 ec 0c             	sub    esp,0xc
c001aaec:	51                   	push   ecx
c001aaed:	e8 52 b5 ff ff       	call   c0016044 <LogicalDisk::eject()>
c001aaf2:	83 c4 10             	add    esp,0x10
c001aaf5:	99                   	cdq    
c001aaf6:	83 c4 0c             	add    esp,0xc
c001aaf9:	c3                   	ret    

c001aafa <Sys::exit(regs*)>:
c001aafa:	83 ec 18             	sub    esp,0x18
c001aafd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab01:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab04:	e8 fa 33 00 00       	call   c001df03 <terminateTask(int)>
c001ab09:	83 c8 ff             	or     eax,0xffffffff
c001ab0c:	83 c4 1c             	add    esp,0x1c
c001ab0f:	89 c2                	mov    edx,eax
c001ab11:	c3                   	ret    

c001ab12 <Sys::getCwd(regs*)>:
c001ab12:	83 ec 10             	sub    esp,0x10
c001ab15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab19:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ab1c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab24:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab27:	e8 20 81 ff ff       	call   c0012c4c <Fs::getcwd(Process*, char*, int)>
c001ab2c:	83 c4 1c             	add    esp,0x1c
c001ab2f:	99                   	cdq    
c001ab30:	c3                   	ret    

c001ab31 <Sys::getPID(regs*)>:
c001ab31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab39:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab3b:	99                   	cdq    
c001ab3c:	c3                   	ret    

c001ab3d <Sys::loadDLL(regs*)>:
c001ab3d:	56                   	push   esi
c001ab3e:	53                   	push   ebx
c001ab3f:	31 d2                	xor    edx,edx
c001ab41:	51                   	push   ecx
c001ab42:	b8 01 00 00 00       	mov    eax,0x1
c001ab47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab4b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ab4f:	0f 84 8c 00 00 00    	je     c001abe1 <Sys::loadDLL(regs*)+0xa4>
c001ab55:	83 ec 0c             	sub    esp,0xc
c001ab58:	68 14 01 00 00       	push   0x114
c001ab5d:	e8 c0 4a ff ff       	call   c000f622 <malloc>
c001ab62:	83 c4 0c             	add    esp,0xc
c001ab65:	89 c3                	mov    ebx,eax
c001ab67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab6c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ab72:	53                   	push   ebx
c001ab73:	e8 d2 82 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001ab78:	83 c4 10             	add    esp,0x10
c001ab7b:	31 d2                	xor    edx,edx
c001ab7d:	b8 02 00 00 00       	mov    eax,0x2
c001ab82:	85 db                	test   ebx,ebx
c001ab84:	74 5b                	je     c001abe1 <Sys::loadDLL(regs*)+0xa4>
c001ab86:	83 ec 0c             	sub    esp,0xc
c001ab89:	53                   	push   ebx
c001ab8a:	e8 8d 85 ff ff       	call   c001311c <File::exists()>
c001ab8f:	83 c4 10             	add    esp,0x10
c001ab92:	84 c0                	test   al,al
c001ab94:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab96:	75 11                	jne    c001aba9 <Sys::loadDLL(regs*)+0x6c>
c001ab98:	83 ec 0c             	sub    esp,0xc
c001ab9b:	53                   	push   ebx
c001ab9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab9f:	83 c4 10             	add    esp,0x10
c001aba2:	b8 03 00 00 00       	mov    eax,0x3
c001aba7:	eb 36                	jmp    c001abdf <Sys::loadDLL(regs*)+0xa2>
c001aba9:	83 ec 0c             	sub    esp,0xc
c001abac:	53                   	push   ebx
c001abad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abb0:	58                   	pop    eax
c001abb1:	5a                   	pop    edx
c001abb2:	6a 00                	push   0x0
c001abb4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001abb7:	e8 91 22 00 00       	call   c001ce4d <Thr::loadDLL(char const*, bool)>
c001abbc:	83 c4 10             	add    esp,0x10
c001abbf:	89 c1                	mov    ecx,eax
c001abc1:	31 d2                	xor    edx,edx
c001abc3:	b8 04 00 00 00       	mov    eax,0x4
c001abc8:	85 c9                	test   ecx,ecx
c001abca:	74 15                	je     c001abe1 <Sys::loadDLL(regs*)+0xa4>
c001abcc:	53                   	push   ebx
c001abcd:	53                   	push   ebx
c001abce:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c001abd4:	51                   	push   ecx
c001abd5:	e8 82 24 00 00       	call   c001d05c <Thr::executeDLL(unsigned long, void*)>
c001abda:	83 c4 10             	add    esp,0x10
c001abdd:	31 c0                	xor    eax,eax
c001abdf:	31 d2                	xor    edx,edx
c001abe1:	59                   	pop    ecx
c001abe2:	5b                   	pop    ebx
c001abe3:	5e                   	pop    esi
c001abe4:	c3                   	ret    

c001abe5 <Sys::read(regs*)>:
c001abe5:	57                   	push   edi
c001abe6:	56                   	push   esi
c001abe7:	53                   	push   ebx
c001abe8:	83 ec 10             	sub    esp,0x10
c001abeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001abf2:	83 f8 02             	cmp    eax,0x2
c001abf5:	77 10                	ja     c001ac07 <Sys::read(regs*)+0x22>
c001abf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abfc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abff:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ac05:	eb 0e                	jmp    c001ac15 <Sys::read(regs*)+0x30>
c001ac07:	83 ec 0c             	sub    esp,0xc
c001ac0a:	50                   	push   eax
c001ac0b:	e8 9b 6b ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001ac10:	83 c4 10             	add    esp,0x10
c001ac13:	89 c1                	mov    ecx,eax
c001ac15:	83 c8 ff             	or     eax,0xffffffff
c001ac18:	85 c9                	test   ecx,ecx
c001ac1a:	89 c2                	mov    edx,eax
c001ac1c:	74 28                	je     c001ac46 <Sys::read(regs*)+0x61>
c001ac1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac26:	31 ff                	xor    edi,edi
c001ac28:	83 ec 0c             	sub    esp,0xc
c001ac2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac2d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac31:	52                   	push   edx
c001ac32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac35:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ac38:	57                   	push   edi
c001ac39:	56                   	push   esi
c001ac3a:	51                   	push   ecx
c001ac3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ac42:	83 c4 20             	add    esp,0x20
c001ac45:	99                   	cdq    
c001ac46:	83 c4 10             	add    esp,0x10
c001ac49:	5b                   	pop    ebx
c001ac4a:	5e                   	pop    esi
c001ac4b:	5f                   	pop    edi
c001ac4c:	c3                   	ret    

c001ac4d <Sys::sbrk(regs*)>:
c001ac4d:	56                   	push   esi
c001ac4e:	53                   	push   ebx
c001ac4f:	50                   	push   eax
c001ac50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac59:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac5c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ac5f:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ac65:	85 db                	test   ebx,ebx
c001ac67:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ac6a:	74 02                	je     c001ac6e <Sys::sbrk(regs*)+0x21>
c001ac6c:	79 06                	jns    c001ac74 <Sys::sbrk(regs*)+0x27>
c001ac6e:	89 f0                	mov    eax,esi
c001ac70:	31 d2                	xor    edx,edx
c001ac72:	eb 2a                	jmp    c001ac9e <Sys::sbrk(regs*)+0x51>
c001ac74:	83 c8 ff             	or     eax,0xffffffff
c001ac77:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ac7d:	89 c2                	mov    edx,eax
c001ac7f:	77 1d                	ja     c001ac9e <Sys::sbrk(regs*)+0x51>
c001ac81:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ac87:	50                   	push   eax
c001ac88:	c1 ea 0c             	shr    edx,0xc
c001ac8b:	68 07 04 00 00       	push   0x407
c001ac90:	52                   	push   edx
c001ac91:	51                   	push   ecx
c001ac92:	e8 35 74 ff ff       	call   c00120cc <VAS::allocatePages(int, int)>
c001ac97:	89 f0                	mov    eax,esi
c001ac99:	31 d2                	xor    edx,edx
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	59                   	pop    ecx
c001ac9f:	5b                   	pop    ebx
c001aca0:	5e                   	pop    esi
c001aca1:	c3                   	ret    

c001aca2 <Sys::setCwd(regs*)>:
c001aca2:	83 ec 14             	sub    esp,0x14
c001aca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aca9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acb1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acb4:	e8 02 85 ff ff       	call   c00131bb <Fs::setcwd(Process*, char*)>
c001acb9:	83 c4 1c             	add    esp,0x1c
c001acbc:	99                   	cdq    
c001acbd:	c3                   	ret    

c001acbe <Sys::setTime(regs*)>:
c001acbe:	55                   	push   ebp
c001acbf:	31 d2                	xor    edx,edx
c001acc1:	57                   	push   edi
c001acc2:	bf 18 00 00 00       	mov    edi,0x18
c001acc7:	56                   	push   esi
c001acc8:	53                   	push   ebx
c001acc9:	bb 3c 00 00 00       	mov    ebx,0x3c
c001acce:	83 ec 30             	sub    esp,0x30
c001acd1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001acd5:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001acd8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001acdb:	f7 f3                	div    ebx
c001acdd:	89 d6                	mov    esi,edx
c001acdf:	31 d2                	xor    edx,edx
c001ace1:	f7 f3                	div    ebx
c001ace3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001acea:	bb 10 0e 00 00       	mov    ebx,0xe10
c001acef:	31 d2                	xor    edx,edx
c001acf1:	f7 f3                	div    ebx
c001acf3:	31 d2                	xor    edx,edx
c001acf5:	bb 0c 00 00 00       	mov    ebx,0xc
c001acfa:	f7 f7                	div    edi
c001acfc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001acff:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ad03:	0f b7 cd             	movzx  ecx,bp
c001ad06:	56                   	push   esi
c001ad07:	89 c7                	mov    edi,eax
c001ad09:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ad0d:	c1 e6 10             	shl    esi,0x10
c001ad10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad14:	83 e7 1f             	and    edi,0x1f
c001ad17:	51                   	push   ecx
c001ad18:	47                   	inc    edi
c001ad19:	c1 e8 05             	shr    eax,0x5
c001ad1c:	31 d2                	xor    edx,edx
c001ad1e:	f7 f3                	div    ebx
c001ad20:	31 db                	xor    ebx,ebx
c001ad22:	52                   	push   edx
c001ad23:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ad27:	57                   	push   edi
c001ad28:	68 75 b4 02 c0       	push   0xc002b475
c001ad2d:	e8 bf 7b ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ad32:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad36:	89 f8                	mov    eax,edi
c001ad38:	31 c9                	xor    ecx,ecx
c001ad3a:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ad3e:	88 c1                	mov    cl,al
c001ad40:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ad46:	88 d5                	mov    ch,dl
c001ad48:	c1 e0 10             	shl    eax,0x10
c001ad4b:	0f b7 d1             	movzx  edx,cx
c001ad4e:	09 c2                	or     edx,eax
c001ad50:	89 d8                	mov    eax,ebx
c001ad52:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ad57:	09 f0                	or     eax,esi
c001ad59:	89 c3                	mov    ebx,eax
c001ad5b:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ad5f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ad63:	83 c4 18             	add    esp,0x18
c001ad66:	53                   	push   ebx
c001ad67:	52                   	push   edx
c001ad68:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ad6c:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ad70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ad74:	e8 5c 8b ff ff       	call   c00138d5 <datetimeToSeconds(datetime_t)>
c001ad79:	83 c4 0c             	add    esp,0xc
c001ad7c:	52                   	push   edx
c001ad7d:	50                   	push   eax
c001ad7e:	56                   	push   esi
c001ad7f:	e8 d8 8c ff ff       	call   c0013a5c <secondsToDatetime(unsigned long long)>
c001ad84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad8c:	51                   	push   ecx
c001ad8d:	89 d6                	mov    esi,edx
c001ad8f:	51                   	push   ecx
c001ad90:	c1 ee 10             	shr    esi,0x10
c001ad93:	89 f3                	mov    ebx,esi
c001ad95:	0f b6 f3             	movzx  esi,bl
c001ad98:	56                   	push   esi
c001ad99:	0f b6 f6             	movzx  esi,dh
c001ad9c:	0f b6 d2             	movzx  edx,dl
c001ad9f:	56                   	push   esi
c001ada0:	52                   	push   edx
c001ada1:	89 c2                	mov    edx,eax
c001ada3:	c1 ea 10             	shr    edx,0x10
c001ada6:	52                   	push   edx
c001ada7:	0f b6 d4             	movzx  edx,ah
c001adaa:	0f b6 c0             	movzx  eax,al
c001adad:	52                   	push   edx
c001adae:	50                   	push   eax
c001adaf:	68 91 b4 02 c0       	push   0xc002b491
c001adb4:	e8 38 7b ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001adb9:	83 c4 2c             	add    esp,0x2c
c001adbc:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001adc1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001adc5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001adc9:	53                   	push   ebx
c001adca:	51                   	push   ecx
c001adcb:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001add1:	e8 26 8c ff ff       	call   c00139fc <Clock::setTimeInDatetimeLocal(datetime_t)>
c001add6:	83 f0 01             	xor    eax,0x1
c001add9:	31 d2                	xor    edx,edx
c001addb:	0f b6 c0             	movzx  eax,al
c001adde:	83 c4 3c             	add    esp,0x3c
c001ade1:	5b                   	pop    ebx
c001ade2:	5e                   	pop    esi
c001ade3:	5f                   	pop    edi
c001ade4:	5d                   	pop    ebp
c001ade5:	c3                   	ret    

c001ade6 <Sys::timezone(regs*)>:
c001ade6:	53                   	push   ebx
c001ade7:	83 ec 08             	sub    esp,0x8
c001adea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adee:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001adf2:	75 17                	jne    c001ae0b <Sys::timezone(regs*)+0x25>
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	68 ad b4 02 c0       	push   0xc002b4ad
c001adfc:	e8 f0 7a ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ae01:	83 c8 ff             	or     eax,0xffffffff
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	89 c2                	mov    edx,eax
c001ae09:	eb 20                	jmp    c001ae2b <Sys::timezone(regs*)+0x45>
c001ae0b:	83 ec 0c             	sub    esp,0xc
c001ae0e:	68 e5 b4 02 c0       	push   0xc002b4e5
c001ae13:	e8 d9 7a ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ae18:	58                   	pop    eax
c001ae19:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ae1c:	e8 3d 89 ff ff       	call   c001375e <User::loadClockSettings(int)>
c001ae21:	83 c4 10             	add    esp,0x10
c001ae24:	b8 01 00 00 00       	mov    eax,0x1
c001ae29:	31 d2                	xor    edx,edx
c001ae2b:	83 c4 08             	add    esp,0x8
c001ae2e:	5b                   	pop    ebx
c001ae2f:	c3                   	ret    

c001ae30 <Sys::write(regs*)>:
c001ae30:	57                   	push   edi
c001ae31:	56                   	push   esi
c001ae32:	53                   	push   ebx
c001ae33:	83 ec 10             	sub    esp,0x10
c001ae36:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae3d:	83 f8 02             	cmp    eax,0x2
c001ae40:	77 10                	ja     c001ae52 <Sys::write(regs*)+0x22>
c001ae42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae4a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae50:	eb 0e                	jmp    c001ae60 <Sys::write(regs*)+0x30>
c001ae52:	83 ec 0c             	sub    esp,0xc
c001ae55:	50                   	push   eax
c001ae56:	e8 50 69 ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001ae5b:	83 c4 10             	add    esp,0x10
c001ae5e:	89 c1                	mov    ecx,eax
c001ae60:	83 c8 ff             	or     eax,0xffffffff
c001ae63:	85 c9                	test   ecx,ecx
c001ae65:	89 c2                	mov    edx,eax
c001ae67:	74 28                	je     c001ae91 <Sys::write(regs*)+0x61>
c001ae69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae71:	31 ff                	xor    edi,edi
c001ae73:	83 ec 0c             	sub    esp,0xc
c001ae76:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae78:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae7c:	52                   	push   edx
c001ae7d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae80:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae83:	57                   	push   edi
c001ae84:	56                   	push   esi
c001ae85:	51                   	push   ecx
c001ae86:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ae89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae8d:	83 c4 20             	add    esp,0x20
c001ae90:	99                   	cdq    
c001ae91:	83 c4 10             	add    esp,0x10
c001ae94:	5b                   	pop    ebx
c001ae95:	5e                   	pop    esi
c001ae96:	5f                   	pop    edi
c001ae97:	c3                   	ret    

c001ae98 <Sys::yield(regs*)>:
c001ae98:	57                   	push   edi
c001ae99:	56                   	push   esi
c001ae9a:	53                   	push   ebx
c001ae9b:	e8 20 26 00 00       	call   c001d4c0 <lockScheduler()>
c001aea0:	e8 57 29 00 00       	call   c001d7fc <schedule()>
c001aea5:	e8 18 26 00 00       	call   c001d4c2 <unlockScheduler()>
c001aeaa:	8b 35 50 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e150
c001aeb0:	8b 3d 54 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e154
c001aeb6:	89 f0                	mov    eax,esi
c001aeb8:	89 fb                	mov    ebx,edi
c001aeba:	89 f1                	mov    ecx,esi
c001aebc:	c1 e0 07             	shl    eax,0x7
c001aebf:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001aec3:	25 80 30 0f 00       	and    eax,0xf3080
c001aec8:	c1 eb 17             	shr    ebx,0x17
c001aecb:	31 c8                	xor    eax,ecx
c001aecd:	89 da                	mov    edx,ebx
c001aecf:	5b                   	pop    ebx
c001aed0:	5e                   	pop    esi
c001aed1:	5f                   	pop    edi
c001aed2:	c3                   	ret    

c001aed3 <sysCallSeekDir(regs*)>:
c001aed3:	31 c0                	xor    eax,eax
c001aed5:	31 d2                	xor    edx,edx
c001aed7:	c3                   	ret    

c001aed8 <sysCallTellDir(regs*)>:
c001aed8:	31 c0                	xor    eax,eax
c001aeda:	31 d2                	xor    edx,edx
c001aedc:	c3                   	ret    

c001aedd <sysCallVerify(regs*)>:
c001aedd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aee1:	31 d2                	xor    edx,edx
c001aee3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aee6:	c3                   	ret    

c001aee7 <sysCallGetArgc(regs*)>:
c001aee7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aeec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aeef:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001aef5:	99                   	cdq    
c001aef6:	c3                   	ret    

c001aef7 <sysFormatDisk(regs*)>:
c001aef7:	56                   	push   esi
c001aef8:	53                   	push   ebx
c001aef9:	53                   	push   ebx
c001aefa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aefe:	8b 1d 48 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc48
c001af04:	eb 25                	jmp    c001af2b <sysFormatDisk(regs*)+0x34>
c001af06:	83 ec 0c             	sub    esp,0xc
c001af09:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af0c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af0e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001af11:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af14:	50                   	push   eax
c001af15:	ff 34 85 e0 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1f20]
c001af1c:	53                   	push   ebx
c001af1d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001af20:	83 c4 20             	add    esp,0x20
c001af23:	83 f8 08             	cmp    eax,0x8
c001af26:	75 12                	jne    c001af3a <sysFormatDisk(regs*)+0x43>
c001af28:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001af2b:	85 db                	test   ebx,ebx
c001af2d:	75 d7                	jne    c001af06 <sysFormatDisk(regs*)+0xf>
c001af2f:	59                   	pop    ecx
c001af30:	b8 03 00 00 00       	mov    eax,0x3
c001af35:	31 d2                	xor    edx,edx
c001af37:	5b                   	pop    ebx
c001af38:	5e                   	pop    esi
c001af39:	c3                   	ret    
c001af3a:	85 c0                	test   eax,eax
c001af3c:	74 1b                	je     c001af59 <sysFormatDisk(regs*)+0x62>
c001af3e:	83 f8 09             	cmp    eax,0x9
c001af41:	74 0b                	je     c001af4e <sysFormatDisk(regs*)+0x57>
c001af43:	59                   	pop    ecx
c001af44:	b8 02 00 00 00       	mov    eax,0x2
c001af49:	31 d2                	xor    edx,edx
c001af4b:	5b                   	pop    ebx
c001af4c:	5e                   	pop    esi
c001af4d:	c3                   	ret    
c001af4e:	59                   	pop    ecx
c001af4f:	b8 01 00 00 00       	mov    eax,0x1
c001af54:	31 d2                	xor    edx,edx
c001af56:	5b                   	pop    ebx
c001af57:	5e                   	pop    esi
c001af58:	c3                   	ret    
c001af59:	59                   	pop    ecx
c001af5a:	31 c0                	xor    eax,eax
c001af5c:	31 d2                	xor    edx,edx
c001af5e:	5b                   	pop    ebx
c001af5f:	5e                   	pop    esi
c001af60:	c3                   	ret    

c001af61 <sysSetDiskVolumeLabel(regs*)>:
c001af61:	56                   	push   esi
c001af62:	53                   	push   ebx
c001af63:	53                   	push   ebx
c001af64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af68:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001af6b:	83 f8 19             	cmp    eax,0x19
c001af6e:	77 29                	ja     c001af99 <sysSetDiskVolumeLabel(regs*)+0x38>
c001af70:	8b 0c 85 e0 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f20]
c001af77:	85 c9                	test   ecx,ecx
c001af79:	74 1e                	je     c001af99 <sysSetDiskVolumeLabel(regs*)+0x38>
c001af7b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001af7e:	85 d2                	test   edx,edx
c001af80:	74 17                	je     c001af99 <sysSetDiskVolumeLabel(regs*)+0x38>
c001af82:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001af88:	8b 33                	mov    esi,DWORD PTR [ebx]
c001af8a:	52                   	push   edx
c001af8b:	50                   	push   eax
c001af8c:	51                   	push   ecx
c001af8d:	53                   	push   ebx
c001af8e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001af91:	83 c4 10             	add    esp,0x10
c001af94:	99                   	cdq    
c001af95:	59                   	pop    ecx
c001af96:	5b                   	pop    ebx
c001af97:	5e                   	pop    esi
c001af98:	c3                   	ret    
c001af99:	59                   	pop    ecx
c001af9a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001af9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afa4:	5b                   	pop    ebx
c001afa5:	5e                   	pop    esi
c001afa6:	c3                   	ret    

c001afa7 <sysGetDiskVolumeLabel(regs*)>:
c001afa7:	57                   	push   edi
c001afa8:	56                   	push   esi
c001afa9:	53                   	push   ebx
c001afaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001afb1:	83 fa 19             	cmp    edx,0x19
c001afb4:	77 34                	ja     c001afea <sysGetDiskVolumeLabel(regs*)+0x43>
c001afb6:	8b 0c 95 e0 e0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1f20]
c001afbd:	85 c9                	test   ecx,ecx
c001afbf:	74 29                	je     c001afea <sysGetDiskVolumeLabel(regs*)+0x43>
c001afc1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001afc4:	85 db                	test   ebx,ebx
c001afc6:	74 22                	je     c001afea <sysGetDiskVolumeLabel(regs*)+0x43>
c001afc8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001afcb:	85 c0                	test   eax,eax
c001afcd:	74 1b                	je     c001afea <sysGetDiskVolumeLabel(regs*)+0x43>
c001afcf:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001afd5:	83 ec 0c             	sub    esp,0xc
c001afd8:	8b 3e                	mov    edi,DWORD PTR [esi]
c001afda:	50                   	push   eax
c001afdb:	53                   	push   ebx
c001afdc:	52                   	push   edx
c001afdd:	51                   	push   ecx
c001afde:	56                   	push   esi
c001afdf:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001afe2:	83 c4 20             	add    esp,0x20
c001afe5:	99                   	cdq    
c001afe6:	5b                   	pop    ebx
c001afe7:	5e                   	pop    esi
c001afe8:	5f                   	pop    edi
c001afe9:	c3                   	ret    
c001afea:	5b                   	pop    ebx
c001afeb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aff0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aff5:	5e                   	pop    esi
c001aff6:	5f                   	pop    edi
c001aff7:	c3                   	ret    

c001aff8 <sysShutdown(regs*)>:
c001aff8:	83 ec 0c             	sub    esp,0xc
c001affb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b002:	85 c0                	test   eax,eax
c001b004:	74 18                	je     c001b01e <sysShutdown(regs*)+0x26>
c001b006:	83 f8 01             	cmp    eax,0x1
c001b009:	74 38                	je     c001b043 <sysShutdown(regs*)+0x4b>
c001b00b:	83 f8 02             	cmp    eax,0x2
c001b00e:	74 24                	je     c001b034 <sysShutdown(regs*)+0x3c>
c001b010:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b015:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b01a:	83 c4 0c             	add    esp,0xc
c001b01d:	c3                   	ret    
c001b01e:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001b023:	8b 10                	mov    edx,DWORD PTR [eax]
c001b025:	6a 00                	push   0x0
c001b027:	6a 00                	push   0x0
c001b029:	6a 00                	push   0x0
c001b02b:	50                   	push   eax
c001b02c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b02f:	83 c4 10             	add    esp,0x10
c001b032:	eb dc                	jmp    c001b010 <sysShutdown(regs*)+0x18>
c001b034:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001b039:	8b 10                	mov    edx,DWORD PTR [eax]
c001b03b:	6a 00                	push   0x0
c001b03d:	6a 00                	push   0x0
c001b03f:	6a 01                	push   0x1
c001b041:	eb e8                	jmp    c001b02b <sysShutdown(regs*)+0x33>
c001b043:	a1 80 01 03 c0       	mov    eax,ds:0xc0030180
c001b048:	85 c0                	test   eax,eax
c001b04a:	74 02                	je     c001b04e <sysShutdown(regs*)+0x56>
c001b04c:	ff d0                	call   eax
c001b04e:	31 c0                	xor    eax,eax
c001b050:	31 d2                	xor    edx,edx
c001b052:	83 c4 0c             	add    esp,0xc
c001b055:	c3                   	ret    

c001b056 <sysCallRealpath(regs*)>:
c001b056:	83 ec 0c             	sub    esp,0xc
c001b059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b05d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b060:	85 d2                	test   edx,edx
c001b062:	74 07                	je     c001b06b <sysCallRealpath(regs*)+0x15>
c001b064:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b067:	85 c0                	test   eax,eax
c001b069:	75 0b                	jne    c001b076 <sysCallRealpath(regs*)+0x20>
c001b06b:	b8 01 00 00 00       	mov    eax,0x1
c001b070:	31 d2                	xor    edx,edx
c001b072:	83 c4 0c             	add    esp,0xc
c001b075:	c3                   	ret    
c001b076:	51                   	push   ecx
c001b077:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b07d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b080:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b086:	51                   	push   ecx
c001b087:	52                   	push   edx
c001b088:	50                   	push   eax
c001b089:	e8 12 7c ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b08e:	83 c4 10             	add    esp,0x10
c001b091:	31 c0                	xor    eax,eax
c001b093:	31 d2                	xor    edx,edx
c001b095:	83 c4 0c             	add    esp,0xc
c001b098:	c3                   	ret    

c001b099 <sysCallReadDir(regs*)>:
c001b099:	53                   	push   ebx
c001b09a:	83 ec 18             	sub    esp,0x18
c001b09d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0a1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b0a4:	83 f8 02             	cmp    eax,0x2
c001b0a7:	76 53                	jbe    c001b0fc <sysCallReadDir(regs*)+0x63>
c001b0a9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b0ac:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b0b2:	77 4f                	ja     c001b103 <sysCallReadDir(regs*)+0x6a>
c001b0b4:	83 ec 0c             	sub    esp,0xc
c001b0b7:	50                   	push   eax
c001b0b8:	e8 ee 66 ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001b0bd:	83 c4 10             	add    esp,0x10
c001b0c0:	85 c0                	test   eax,eax
c001b0c2:	74 50                	je     c001b114 <sysCallReadDir(regs*)+0x7b>
c001b0c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0cc:	83 ec 0c             	sub    esp,0xc
c001b0cf:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0d1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b0d5:	51                   	push   ecx
c001b0d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b0d9:	6a 00                	push   0x0
c001b0db:	68 10 01 00 00       	push   0x110
c001b0e0:	50                   	push   eax
c001b0e1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b0e4:	83 c4 20             	add    esp,0x20
c001b0e7:	85 c0                	test   eax,eax
c001b0e9:	74 38                	je     c001b123 <sysCallReadDir(regs*)+0x8a>
c001b0eb:	83 f8 07             	cmp    eax,0x7
c001b0ee:	74 0c                	je     c001b0fc <sysCallReadDir(regs*)+0x63>
c001b0f0:	b8 02 00 00 00       	mov    eax,0x2
c001b0f5:	31 d2                	xor    edx,edx
c001b0f7:	83 c4 18             	add    esp,0x18
c001b0fa:	5b                   	pop    ebx
c001b0fb:	c3                   	ret    
c001b0fc:	b8 01 00 00 00       	mov    eax,0x1
c001b101:	eb f2                	jmp    c001b0f5 <sysCallReadDir(regs*)+0x5c>
c001b103:	83 ec 08             	sub    esp,0x8
c001b106:	52                   	push   edx
c001b107:	68 24 b5 02 c0       	push   0xc002b524
c001b10c:	e8 e0 77 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001b111:	83 c4 10             	add    esp,0x10
c001b114:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b119:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b11e:	83 c4 18             	add    esp,0x18
c001b121:	5b                   	pop    ebx
c001b122:	c3                   	ret    
c001b123:	31 c0                	xor    eax,eax
c001b125:	eb ce                	jmp    c001b0f5 <sysCallReadDir(regs*)+0x5c>

c001b127 <sysCallIsATTY(regs*)>:
c001b127:	83 ec 0c             	sub    esp,0xc
c001b12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b131:	83 f8 02             	cmp    eax,0x2
c001b134:	76 07                	jbe    c001b13d <sysCallIsATTY(regs*)+0x16>
c001b136:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b13b:	75 26                	jne    c001b163 <sysCallIsATTY(regs*)+0x3c>
c001b13d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b142:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b145:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b14b:	85 c0                	test   eax,eax
c001b14d:	74 24                	je     c001b173 <sysCallIsATTY(regs*)+0x4c>
c001b14f:	83 ec 0c             	sub    esp,0xc
c001b152:	8b 10                	mov    edx,DWORD PTR [eax]
c001b154:	50                   	push   eax
c001b155:	ff 12                	call   DWORD PTR [edx]
c001b157:	31 d2                	xor    edx,edx
c001b159:	0f b6 c0             	movzx  eax,al
c001b15c:	83 c4 10             	add    esp,0x10
c001b15f:	83 c4 0c             	add    esp,0xc
c001b162:	c3                   	ret    
c001b163:	83 ec 0c             	sub    esp,0xc
c001b166:	50                   	push   eax
c001b167:	e8 3f 66 ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001b16c:	83 c4 10             	add    esp,0x10
c001b16f:	85 c0                	test   eax,eax
c001b171:	75 dc                	jne    c001b14f <sysCallIsATTY(regs*)+0x28>
c001b173:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b178:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b17d:	83 c4 0c             	add    esp,0xc
c001b180:	c3                   	ret    

c001b181 <sysCallSeek(regs*)>:
c001b181:	53                   	push   ebx
c001b182:	83 ec 08             	sub    esp,0x8
c001b185:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b189:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b18c:	83 f8 02             	cmp    eax,0x2
c001b18f:	76 4a                	jbe    c001b1db <sysCallSeek(regs*)+0x5a>
c001b191:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b196:	77 32                	ja     c001b1ca <sysCallSeek(regs*)+0x49>
c001b198:	83 ec 0c             	sub    esp,0xc
c001b19b:	50                   	push   eax
c001b19c:	e8 0a 66 ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001b1a1:	83 c4 0c             	add    esp,0xc
c001b1a4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b1a7:	31 db                	xor    ebx,ebx
c001b1a9:	53                   	push   ebx
c001b1aa:	51                   	push   ecx
c001b1ab:	50                   	push   eax
c001b1ac:	e8 bb 7d ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001b1b1:	83 c4 10             	add    esp,0x10
c001b1b4:	85 c0                	test   eax,eax
c001b1b6:	0f 95 c0             	setne  al
c001b1b9:	31 d2                	xor    edx,edx
c001b1bb:	0f b6 c0             	movzx  eax,al
c001b1be:	f7 d8                	neg    eax
c001b1c0:	83 d2 00             	adc    edx,0x0
c001b1c3:	83 c4 08             	add    esp,0x8
c001b1c6:	f7 da                	neg    edx
c001b1c8:	5b                   	pop    ebx
c001b1c9:	c3                   	ret    
c001b1ca:	83 ec 08             	sub    esp,0x8
c001b1cd:	50                   	push   eax
c001b1ce:	68 93 b5 02 c0       	push   0xc002b593
c001b1d3:	e8 19 77 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001b1d8:	83 c4 10             	add    esp,0x10
c001b1db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1e5:	83 c4 08             	add    esp,0x8
c001b1e8:	5b                   	pop    ebx
c001b1e9:	c3                   	ret    

c001b1ea <sysCallTell(regs*)>:
c001b1ea:	53                   	push   ebx
c001b1eb:	83 ec 08             	sub    esp,0x8
c001b1ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1f5:	83 f8 02             	cmp    eax,0x2
c001b1f8:	76 5e                	jbe    c001b258 <sysCallTell(regs*)+0x6e>
c001b1fa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b1ff:	77 2d                	ja     c001b22e <sysCallTell(regs*)+0x44>
c001b201:	83 ec 0c             	sub    esp,0xc
c001b204:	50                   	push   eax
c001b205:	e8 a1 65 ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001b20a:	5a                   	pop    edx
c001b20b:	59                   	pop    ecx
c001b20c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b20f:	50                   	push   eax
c001b210:	e8 ad 7d ff ff       	call   c0012fc2 <File::tell(unsigned long long*)>
c001b215:	83 c4 10             	add    esp,0x10
c001b218:	85 c0                	test   eax,eax
c001b21a:	0f 95 c0             	setne  al
c001b21d:	31 d2                	xor    edx,edx
c001b21f:	0f b6 c0             	movzx  eax,al
c001b222:	f7 d8                	neg    eax
c001b224:	83 d2 00             	adc    edx,0x0
c001b227:	83 c4 08             	add    esp,0x8
c001b22a:	f7 da                	neg    edx
c001b22c:	5b                   	pop    ebx
c001b22d:	c3                   	ret    
c001b22e:	83 ec 08             	sub    esp,0x8
c001b231:	50                   	push   eax
c001b232:	68 ad b5 02 c0       	push   0xc002b5ad
c001b237:	e8 b5 76 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001b23c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b23f:	83 c4 10             	add    esp,0x10
c001b242:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b248:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b24f:	31 d2                	xor    edx,edx
c001b251:	31 c0                	xor    eax,eax
c001b253:	83 c4 08             	add    esp,0x8
c001b256:	5b                   	pop    ebx
c001b257:	c3                   	ret    
c001b258:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b25d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b262:	83 c4 08             	add    esp,0x8
c001b265:	5b                   	pop    ebx
c001b266:	c3                   	ret    

c001b267 <sysCallSize(regs*)>:
c001b267:	53                   	push   ebx
c001b268:	83 ec 18             	sub    esp,0x18
c001b26b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b26f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b272:	83 f8 02             	cmp    eax,0x2
c001b275:	76 64                	jbe    c001b2db <sysCallSize(regs*)+0x74>
c001b277:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b27c:	77 33                	ja     c001b2b1 <sysCallSize(regs*)+0x4a>
c001b27e:	83 ec 0c             	sub    esp,0xc
c001b281:	50                   	push   eax
c001b282:	e8 24 65 ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001b287:	83 c4 0c             	add    esp,0xc
c001b28a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b28e:	52                   	push   edx
c001b28f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b292:	50                   	push   eax
c001b293:	e8 c2 7e ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001b298:	83 c4 10             	add    esp,0x10
c001b29b:	85 c0                	test   eax,eax
c001b29d:	0f 95 c0             	setne  al
c001b2a0:	31 d2                	xor    edx,edx
c001b2a2:	0f b6 c0             	movzx  eax,al
c001b2a5:	f7 d8                	neg    eax
c001b2a7:	83 d2 00             	adc    edx,0x0
c001b2aa:	83 c4 18             	add    esp,0x18
c001b2ad:	f7 da                	neg    edx
c001b2af:	5b                   	pop    ebx
c001b2b0:	c3                   	ret    
c001b2b1:	83 ec 08             	sub    esp,0x8
c001b2b4:	50                   	push   eax
c001b2b5:	68 c7 b5 02 c0       	push   0xc002b5c7
c001b2ba:	e8 32 76 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001b2bf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2c2:	83 c4 10             	add    esp,0x10
c001b2c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2d2:	31 d2                	xor    edx,edx
c001b2d4:	31 c0                	xor    eax,eax
c001b2d6:	83 c4 18             	add    esp,0x18
c001b2d9:	5b                   	pop    ebx
c001b2da:	c3                   	ret    
c001b2db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2e5:	83 c4 18             	add    esp,0x18
c001b2e8:	5b                   	pop    ebx
c001b2e9:	c3                   	ret    

c001b2ea <sysCallSizeFromFilename(regs*)>:
c001b2ea:	57                   	push   edi
c001b2eb:	56                   	push   esi
c001b2ec:	53                   	push   ebx
c001b2ed:	83 ec 20             	sub    esp,0x20
c001b2f0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2f4:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b2f7:	83 fb 02             	cmp    ebx,0x2
c001b2fa:	0f 86 99 00 00 00    	jbe    c001b399 <sysCallSizeFromFilename(regs*)+0xaf>
c001b300:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b306:	77 65                	ja     c001b36d <sysCallSizeFromFilename(regs*)+0x83>
c001b308:	83 ec 0c             	sub    esp,0xc
c001b30b:	68 14 01 00 00       	push   0x114
c001b310:	e8 0d 43 ff ff       	call   c000f622 <malloc>
c001b315:	83 c4 0c             	add    esp,0xc
c001b318:	89 c6                	mov    esi,eax
c001b31a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b31f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b322:	53                   	push   ebx
c001b323:	56                   	push   esi
c001b324:	e8 21 7b ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001b329:	83 c4 0c             	add    esp,0xc
c001b32c:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b330:	50                   	push   eax
c001b331:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b334:	56                   	push   esi
c001b335:	e8 20 7e ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001b33a:	83 c4 10             	add    esp,0x10
c001b33d:	85 f6                	test   esi,esi
c001b33f:	74 14                	je     c001b355 <sysCallSizeFromFilename(regs*)+0x6b>
c001b341:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b345:	8b 16                	mov    edx,DWORD PTR [esi]
c001b347:	83 ec 0c             	sub    esp,0xc
c001b34a:	56                   	push   esi
c001b34b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b34e:	83 c4 10             	add    esp,0x10
c001b351:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b355:	85 c0                	test   eax,eax
c001b357:	0f 95 c0             	setne  al
c001b35a:	31 d2                	xor    edx,edx
c001b35c:	0f b6 c0             	movzx  eax,al
c001b35f:	f7 d8                	neg    eax
c001b361:	83 d2 00             	adc    edx,0x0
c001b364:	83 c4 20             	add    esp,0x20
c001b367:	f7 da                	neg    edx
c001b369:	5b                   	pop    ebx
c001b36a:	5e                   	pop    esi
c001b36b:	5f                   	pop    edi
c001b36c:	c3                   	ret    
c001b36d:	83 ec 08             	sub    esp,0x8
c001b370:	53                   	push   ebx
c001b371:	68 c7 b5 02 c0       	push   0xc002b5c7
c001b376:	e8 76 75 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001b37b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b37e:	83 c4 10             	add    esp,0x10
c001b381:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b387:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b38e:	31 d2                	xor    edx,edx
c001b390:	83 c4 20             	add    esp,0x20
c001b393:	31 c0                	xor    eax,eax
c001b395:	5b                   	pop    ebx
c001b396:	5e                   	pop    esi
c001b397:	5f                   	pop    edi
c001b398:	c3                   	ret    
c001b399:	83 c4 20             	add    esp,0x20
c001b39c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3a1:	5b                   	pop    ebx
c001b3a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3a7:	5e                   	pop    esi
c001b3a8:	5f                   	pop    edi
c001b3a9:	c3                   	ret    

c001b3aa <sysCallClose(regs*)>:
c001b3aa:	53                   	push   ebx
c001b3ab:	83 ec 08             	sub    esp,0x8
c001b3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3b5:	83 f8 02             	cmp    eax,0x2
c001b3b8:	76 50                	jbe    c001b40a <sysCallClose(regs*)+0x60>
c001b3ba:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b3bf:	74 58                	je     c001b419 <sysCallClose(regs*)+0x6f>
c001b3c1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3c6:	74 60                	je     c001b428 <sysCallClose(regs*)+0x7e>
c001b3c8:	77 2f                	ja     c001b3f9 <sysCallClose(regs*)+0x4f>
c001b3ca:	83 ec 0c             	sub    esp,0xc
c001b3cd:	50                   	push   eax
c001b3ce:	e8 d8 63 ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001b3d3:	89 c3                	mov    ebx,eax
c001b3d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3d8:	e8 2f 7b ff ff       	call   c0012f0c <File::close()>
c001b3dd:	83 c4 10             	add    esp,0x10
c001b3e0:	85 db                	test   ebx,ebx
c001b3e2:	74 0c                	je     c001b3f0 <sysCallClose(regs*)+0x46>
c001b3e4:	83 ec 0c             	sub    esp,0xc
c001b3e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3e9:	53                   	push   ebx
c001b3ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ed:	83 c4 10             	add    esp,0x10
c001b3f0:	31 c0                	xor    eax,eax
c001b3f2:	31 d2                	xor    edx,edx
c001b3f4:	83 c4 08             	add    esp,0x8
c001b3f7:	5b                   	pop    ebx
c001b3f8:	c3                   	ret    
c001b3f9:	83 ec 08             	sub    esp,0x8
c001b3fc:	50                   	push   eax
c001b3fd:	68 48 b5 02 c0       	push   0xc002b548
c001b402:	e8 ea 74 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001b407:	83 c4 10             	add    esp,0x10
c001b40a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b40f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b414:	83 c4 08             	add    esp,0x8
c001b417:	5b                   	pop    ebx
c001b418:	c3                   	ret    
c001b419:	83 ec 0c             	sub    esp,0xc
c001b41c:	68 e2 b5 02 c0       	push   0xc002b5e2
c001b421:	e8 cb 74 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001b426:	eb c5                	jmp    c001b3ed <sysCallClose(regs*)+0x43>
c001b428:	83 ec 0c             	sub    esp,0xc
c001b42b:	68 f0 b5 02 c0       	push   0xc002b5f0
c001b430:	eb ef                	jmp    c001b421 <sysCallClose(regs*)+0x77>

c001b432 <sysCallOpenDir(regs*)>:
c001b432:	56                   	push   esi
c001b433:	53                   	push   ebx
c001b434:	53                   	push   ebx
c001b435:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b439:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b43c:	85 f6                	test   esi,esi
c001b43e:	74 59                	je     c001b499 <sysCallOpenDir(regs*)+0x67>
c001b440:	83 ec 0c             	sub    esp,0xc
c001b443:	68 14 01 00 00       	push   0x114
c001b448:	e8 d5 41 ff ff       	call   c000f622 <malloc>
c001b44d:	83 c4 0c             	add    esp,0xc
c001b450:	89 c6                	mov    esi,eax
c001b452:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b457:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b45a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b45d:	56                   	push   esi
c001b45e:	e8 93 7e ff ff       	call   c00132f6 <Directory::Directory(char const*, Process*)>
c001b463:	83 c4 10             	add    esp,0x10
c001b466:	85 f6                	test   esi,esi
c001b468:	74 2f                	je     c001b499 <sysCallOpenDir(regs*)+0x67>
c001b46a:	83 ec 0c             	sub    esp,0xc
c001b46d:	56                   	push   esi
c001b46e:	e8 e7 7e ff ff       	call   c001335a <Directory::open()>
c001b473:	83 c4 10             	add    esp,0x10
c001b476:	85 c0                	test   eax,eax
c001b478:	75 1f                	jne    c001b499 <sysCallOpenDir(regs*)+0x67>
c001b47a:	83 ec 0c             	sub    esp,0xc
c001b47d:	56                   	push   esi
c001b47e:	e8 33 60 ff ff       	call   c00114b6 <UnixFile::getFileDescriptor()>
c001b483:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b486:	83 c4 10             	add    esp,0x10
c001b489:	89 02                	mov    DWORD PTR [edx],eax
c001b48b:	c1 f8 1f             	sar    eax,0x1f
c001b48e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b491:	31 c0                	xor    eax,eax
c001b493:	59                   	pop    ecx
c001b494:	31 d2                	xor    edx,edx
c001b496:	5b                   	pop    ebx
c001b497:	5e                   	pop    esi
c001b498:	c3                   	ret    
c001b499:	59                   	pop    ecx
c001b49a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b49f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4a4:	5b                   	pop    ebx
c001b4a5:	5e                   	pop    esi
c001b4a6:	c3                   	ret    

c001b4a7 <sysCallCloseDir(regs*)>:
c001b4a7:	53                   	push   ebx
c001b4a8:	83 ec 08             	sub    esp,0x8
c001b4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4b2:	83 f8 02             	cmp    eax,0x2
c001b4b5:	76 47                	jbe    c001b4fe <sysCallCloseDir(regs*)+0x57>
c001b4b7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4bc:	77 2f                	ja     c001b4ed <sysCallCloseDir(regs*)+0x46>
c001b4be:	83 ec 0c             	sub    esp,0xc
c001b4c1:	50                   	push   eax
c001b4c2:	e8 e4 62 ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001b4c7:	89 c3                	mov    ebx,eax
c001b4c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4cc:	e8 e5 7e ff ff       	call   c00133b6 <Directory::close()>
c001b4d1:	83 c4 10             	add    esp,0x10
c001b4d4:	85 db                	test   ebx,ebx
c001b4d6:	74 0c                	je     c001b4e4 <sysCallCloseDir(regs*)+0x3d>
c001b4d8:	83 ec 0c             	sub    esp,0xc
c001b4db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4dd:	53                   	push   ebx
c001b4de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4e1:	83 c4 10             	add    esp,0x10
c001b4e4:	31 c0                	xor    eax,eax
c001b4e6:	31 d2                	xor    edx,edx
c001b4e8:	83 c4 08             	add    esp,0x8
c001b4eb:	5b                   	pop    ebx
c001b4ec:	c3                   	ret    
c001b4ed:	83 ec 08             	sub    esp,0x8
c001b4f0:	50                   	push   eax
c001b4f1:	68 70 b5 02 c0       	push   0xc002b570
c001b4f6:	e8 f6 73 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001b4fb:	83 c4 10             	add    esp,0x10
c001b4fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b503:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b508:	83 c4 08             	add    esp,0x8
c001b50b:	5b                   	pop    ebx
c001b50c:	c3                   	ret    

c001b50d <sysCallMakeDir(regs*)>:
c001b50d:	56                   	push   esi
c001b50e:	53                   	push   ebx
c001b50f:	83 ec 10             	sub    esp,0x10
c001b512:	68 14 01 00 00       	push   0x114
c001b517:	e8 06 41 ff ff       	call   c000f622 <malloc>
c001b51c:	83 c4 0c             	add    esp,0xc
c001b51f:	89 c3                	mov    ebx,eax
c001b521:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b526:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b529:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b52d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b530:	53                   	push   ebx
c001b531:	e8 c0 7d ff ff       	call   c00132f6 <Directory::Directory(char const*, Process*)>
c001b536:	83 c4 10             	add    esp,0x10
c001b539:	85 db                	test   ebx,ebx
c001b53b:	74 32                	je     c001b56f <sysCallMakeDir(regs*)+0x62>
c001b53d:	83 ec 0c             	sub    esp,0xc
c001b540:	53                   	push   ebx
c001b541:	e8 f4 7f ff ff       	call   c001353a <Directory::create()>
c001b546:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b549:	89 c6                	mov    esi,eax
c001b54b:	e8 66 7e ff ff       	call   c00133b6 <Directory::close()>
c001b550:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b552:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b555:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b558:	83 c4 10             	add    esp,0x10
c001b55b:	31 c0                	xor    eax,eax
c001b55d:	59                   	pop    ecx
c001b55e:	85 f6                	test   esi,esi
c001b560:	5b                   	pop    ebx
c001b561:	0f 95 c0             	setne  al
c001b564:	5e                   	pop    esi
c001b565:	31 d2                	xor    edx,edx
c001b567:	f7 d8                	neg    eax
c001b569:	83 d2 00             	adc    edx,0x0
c001b56c:	f7 da                	neg    edx
c001b56e:	c3                   	ret    
c001b56f:	59                   	pop    ecx
c001b570:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b575:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b57a:	5b                   	pop    ebx
c001b57b:	5e                   	pop    esi
c001b57c:	c3                   	ret    

c001b57d <sysCallWait(regs*)>:
c001b57d:	83 ec 10             	sub    esp,0x10
c001b580:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b584:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b587:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b58a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b58d:	e8 e5 23 00 00       	call   c001d977 <waitTask(int, int*, int)>
c001b592:	83 c4 1c             	add    esp,0x1c
c001b595:	99                   	cdq    
c001b596:	c3                   	ret    

c001b597 <sysCallNotImpl(regs*)>:
c001b597:	83 ec 18             	sub    esp,0x18
c001b59a:	68 fe b5 02 c0       	push   0xc002b5fe
c001b59f:	e8 c1 e8 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001b5a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5ae:	83 c4 1c             	add    esp,0x1c
c001b5b1:	c3                   	ret    

c001b5b2 <sysPanic(regs*)>:
c001b5b2:	83 ec 18             	sub    esp,0x18
c001b5b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b5b9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5bc:	e8 a4 e8 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001b5c1:	c7 04 24 18 b6 02 c0 	mov    DWORD PTR [esp],0xc002b618
c001b5c8:	e8 98 e8 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001b5cd:	b8 01 00 00 00       	mov    eax,0x1
c001b5d2:	31 d2                	xor    edx,edx
c001b5d4:	83 c4 1c             	add    esp,0x1c
c001b5d7:	c3                   	ret    

c001b5d8 <sysCallRmdir(regs*)>:
c001b5d8:	56                   	push   esi
c001b5d9:	53                   	push   ebx
c001b5da:	83 ec 20             	sub    esp,0x20
c001b5dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5e1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b5e4:	68 14 01 00 00       	push   0x114
c001b5e9:	e8 34 40 ff ff       	call   c000f622 <malloc>
c001b5ee:	83 c4 0c             	add    esp,0xc
c001b5f1:	89 c3                	mov    ebx,eax
c001b5f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5fb:	56                   	push   esi
c001b5fc:	53                   	push   ebx
c001b5fd:	e8 48 78 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001b602:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b605:	e8 1c 7a ff ff       	call   c0013026 <File::unlink()>
c001b60a:	83 c4 10             	add    esp,0x10
c001b60d:	85 db                	test   ebx,ebx
c001b60f:	74 14                	je     c001b625 <sysCallRmdir(regs*)+0x4d>
c001b611:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b615:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b617:	83 ec 0c             	sub    esp,0xc
c001b61a:	53                   	push   ebx
c001b61b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b61e:	83 c4 10             	add    esp,0x10
c001b621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b625:	85 c0                	test   eax,eax
c001b627:	0f 95 c0             	setne  al
c001b62a:	31 d2                	xor    edx,edx
c001b62c:	0f b6 c0             	movzx  eax,al
c001b62f:	f7 d8                	neg    eax
c001b631:	83 d2 00             	adc    edx,0x0
c001b634:	83 c4 14             	add    esp,0x14
c001b637:	f7 da                	neg    edx
c001b639:	5b                   	pop    ebx
c001b63a:	5e                   	pop    esi
c001b63b:	c3                   	ret    

c001b63c <sysCallUnlink(regs*)>:
c001b63c:	56                   	push   esi
c001b63d:	53                   	push   ebx
c001b63e:	83 ec 20             	sub    esp,0x20
c001b641:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b645:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b648:	68 14 01 00 00       	push   0x114
c001b64d:	e8 d0 3f ff ff       	call   c000f622 <malloc>
c001b652:	83 c4 0c             	add    esp,0xc
c001b655:	89 c3                	mov    ebx,eax
c001b657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b65c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b65f:	56                   	push   esi
c001b660:	53                   	push   ebx
c001b661:	e8 e4 77 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001b666:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b669:	e8 b8 79 ff ff       	call   c0013026 <File::unlink()>
c001b66e:	83 c4 10             	add    esp,0x10
c001b671:	85 db                	test   ebx,ebx
c001b673:	74 14                	je     c001b689 <sysCallUnlink(regs*)+0x4d>
c001b675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b679:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b67b:	83 ec 0c             	sub    esp,0xc
c001b67e:	53                   	push   ebx
c001b67f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b682:	83 c4 10             	add    esp,0x10
c001b685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b689:	85 c0                	test   eax,eax
c001b68b:	0f 95 c0             	setne  al
c001b68e:	31 d2                	xor    edx,edx
c001b690:	0f b6 c0             	movzx  eax,al
c001b693:	f7 d8                	neg    eax
c001b695:	83 d2 00             	adc    edx,0x0
c001b698:	83 c4 14             	add    esp,0x14
c001b69b:	f7 da                	neg    edx
c001b69d:	5b                   	pop    ebx
c001b69e:	5e                   	pop    esi
c001b69f:	c3                   	ret    

c001b6a0 <sysCallGetArgv(regs*)>:
c001b6a0:	83 ec 0c             	sub    esp,0xc
c001b6a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6a7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6aa:	85 c0                	test   eax,eax
c001b6ac:	78 2b                	js     c001b6d9 <sysCallGetArgv(regs*)+0x39>
c001b6ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6b4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b6b7:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b6bd:	7d 1a                	jge    c001b6d9 <sysCallGetArgv(regs*)+0x39>
c001b6bf:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b6c6:	85 c0                	test   eax,eax
c001b6c8:	74 17                	je     c001b6e1 <sysCallGetArgv(regs*)+0x41>
c001b6ca:	83 ec 08             	sub    esp,0x8
c001b6cd:	50                   	push   eax
c001b6ce:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b6d1:	e8 8b 50 fe ff       	call   c0000761 <strcpy>
c001b6d6:	83 c4 10             	add    esp,0x10
c001b6d9:	31 c0                	xor    eax,eax
c001b6db:	31 d2                	xor    edx,edx
c001b6dd:	83 c4 0c             	add    esp,0xc
c001b6e0:	c3                   	ret    
c001b6e1:	b8 01 00 00 00       	mov    eax,0x1
c001b6e6:	31 d2                	xor    edx,edx
c001b6e8:	83 c4 0c             	add    esp,0xc
c001b6eb:	c3                   	ret    

c001b6ec <sysCallTTYName(regs*)>:
c001b6ec:	56                   	push   esi
c001b6ed:	53                   	push   ebx
c001b6ee:	53                   	push   ebx
c001b6ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6f3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b6f6:	85 c0                	test   eax,eax
c001b6f8:	74 5f                	je     c001b759 <sysCallTTYName(regs*)+0x6d>
c001b6fa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b6fd:	83 f8 02             	cmp    eax,0x2
c001b700:	77 3e                	ja     c001b740 <sysCallTTYName(regs*)+0x54>
c001b702:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b707:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b70a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b710:	85 db                	test   ebx,ebx
c001b712:	74 45                	je     c001b759 <sysCallTTYName(regs*)+0x6d>
c001b714:	83 ec 0c             	sub    esp,0xc
c001b717:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b719:	53                   	push   ebx
c001b71a:	ff 10                	call   DWORD PTR [eax]
c001b71c:	83 c4 10             	add    esp,0x10
c001b71f:	84 c0                	test   al,al
c001b721:	74 41                	je     c001b764 <sysCallTTYName(regs*)+0x78>
c001b723:	83 ec 08             	sub    esp,0x8
c001b726:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b72c:	53                   	push   ebx
c001b72d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b730:	e8 2c 50 fe ff       	call   c0000761 <strcpy>
c001b735:	83 c4 10             	add    esp,0x10
c001b738:	31 c0                	xor    eax,eax
c001b73a:	59                   	pop    ecx
c001b73b:	31 d2                	xor    edx,edx
c001b73d:	5b                   	pop    ebx
c001b73e:	5e                   	pop    esi
c001b73f:	c3                   	ret    
c001b740:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b745:	74 bb                	je     c001b702 <sysCallTTYName(regs*)+0x16>
c001b747:	83 ec 0c             	sub    esp,0xc
c001b74a:	50                   	push   eax
c001b74b:	e8 5b 60 ff ff       	call   c00117ab <getFromFileDescriptor(int)>
c001b750:	83 c4 10             	add    esp,0x10
c001b753:	89 c3                	mov    ebx,eax
c001b755:	85 db                	test   ebx,ebx
c001b757:	75 bb                	jne    c001b714 <sysCallTTYName(regs*)+0x28>
c001b759:	59                   	pop    ecx
c001b75a:	b8 01 00 00 00       	mov    eax,0x1
c001b75f:	31 d2                	xor    edx,edx
c001b761:	5b                   	pop    ebx
c001b762:	5e                   	pop    esi
c001b763:	c3                   	ret    
c001b764:	59                   	pop    ecx
c001b765:	b8 02 00 00 00       	mov    eax,0x2
c001b76a:	31 d2                	xor    edx,edx
c001b76c:	5b                   	pop    ebx
c001b76d:	5e                   	pop    esi
c001b76e:	c3                   	ret    

c001b76f <sysCallUSleep(regs*)>:
c001b76f:	83 ec 14             	sub    esp,0x14
c001b772:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b777:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b77b:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b782:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b785:	01 ca                	add    edx,ecx
c001b787:	52                   	push   edx
c001b788:	50                   	push   eax
c001b789:	e8 82 22 00 00       	call   c001da10 <nanoSleep(unsigned long long)>
c001b78e:	31 c0                	xor    eax,eax
c001b790:	31 d2                	xor    edx,edx
c001b792:	83 c4 1c             	add    esp,0x1c
c001b795:	c3                   	ret    

c001b796 <sysCallSpawn(regs*)>:
c001b796:	56                   	push   esi
c001b797:	53                   	push   ebx
c001b798:	53                   	push   ebx
c001b799:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b79d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b7a0:	85 f6                	test   esi,esi
c001b7a2:	75 08                	jne    c001b7ac <sysCallSpawn(regs*)+0x16>
c001b7a4:	59                   	pop    ecx
c001b7a5:	31 c0                	xor    eax,eax
c001b7a7:	31 d2                	xor    edx,edx
c001b7a9:	5b                   	pop    ebx
c001b7aa:	5e                   	pop    esi
c001b7ab:	c3                   	ret    
c001b7ac:	83 ec 0c             	sub    esp,0xc
c001b7af:	68 3f 07 00 00       	push   0x73f
c001b7b4:	e8 69 3e ff ff       	call   c000f622 <malloc>
c001b7b9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b7bc:	89 c6                	mov    esi,eax
c001b7be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7c9:	56                   	push   esi
c001b7ca:	e8 41 19 00 00       	call   c001d110 <Process::Process(char const*, Process*, char**)>
c001b7cf:	83 c4 20             	add    esp,0x20
c001b7d2:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b7d9:	75 c9                	jne    c001b7a4 <sysCallSpawn(regs*)+0xe>
c001b7db:	83 ec 0c             	sub    esp,0xc
c001b7de:	56                   	push   esi
c001b7df:	e8 f2 1e 00 00       	call   c001d6d6 <Process::createUserThread()>
c001b7e4:	8b 06                	mov    eax,DWORD PTR [esi]
c001b7e6:	83 c4 10             	add    esp,0x10
c001b7e9:	99                   	cdq    
c001b7ea:	59                   	pop    ecx
c001b7eb:	5b                   	pop    ebx
c001b7ec:	5e                   	pop    esi
c001b7ed:	c3                   	ret    

c001b7ee <sysCallGetEnv(regs*)>:
c001b7ee:	57                   	push   edi
c001b7ef:	56                   	push   esi
c001b7f0:	53                   	push   ebx
c001b7f1:	83 ec 1c             	sub    esp,0x1c
c001b7f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b7f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7fd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b800:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b803:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b806:	e8 76 e5 ff ff       	call   c0019d81 <Krnl::getProcessTotalEnvCount(Process*)>
c001b80b:	83 c4 10             	add    esp,0x10
c001b80e:	39 c7                	cmp    edi,eax
c001b810:	7c 14                	jl     c001b826 <sysCallGetEnv(regs*)+0x38>
c001b812:	85 f6                	test   esi,esi
c001b814:	75 0b                	jne    c001b821 <sysCallGetEnv(regs*)+0x33>
c001b816:	83 c4 10             	add    esp,0x10
c001b819:	31 c0                	xor    eax,eax
c001b81b:	5b                   	pop    ebx
c001b81c:	31 d2                	xor    edx,edx
c001b81e:	5e                   	pop    esi
c001b81f:	5f                   	pop    edi
c001b820:	c3                   	ret    
c001b821:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b824:	eb f0                	jmp    c001b816 <sysCallGetEnv(regs*)+0x28>
c001b826:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b82a:	52                   	push   edx
c001b82b:	57                   	push   edi
c001b82c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b832:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b835:	50                   	push   eax
c001b836:	e8 66 e5 ff ff       	call   c0019da1 <Krnl::getProcessEnvPair(Process*, int)>
c001b83b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b83e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b842:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b846:	83 c4 0c             	add    esp,0xc
c001b849:	85 c9                	test   ecx,ecx
c001b84b:	75 23                	jne    c001b870 <sysCallGetEnv(regs*)+0x82>
c001b84d:	83 ec 0c             	sub    esp,0xc
c001b850:	50                   	push   eax
c001b851:	e8 89 4e fe ff       	call   c00006df <strlen>
c001b856:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b859:	89 c3                	mov    ebx,eax
c001b85b:	e8 7f 4e fe ff       	call   c00006df <strlen>
c001b860:	83 c4 10             	add    esp,0x10
c001b863:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b867:	83 c4 10             	add    esp,0x10
c001b86a:	31 d2                	xor    edx,edx
c001b86c:	5b                   	pop    ebx
c001b86d:	5e                   	pop    esi
c001b86e:	5f                   	pop    edi
c001b86f:	c3                   	ret    
c001b870:	83 ec 08             	sub    esp,0x8
c001b873:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b876:	50                   	push   eax
c001b877:	56                   	push   esi
c001b878:	e8 e4 4e fe ff       	call   c0000761 <strcpy>
c001b87d:	58                   	pop    eax
c001b87e:	5a                   	pop    edx
c001b87f:	68 27 b6 02 c0       	push   0xc002b627
c001b884:	56                   	push   esi
c001b885:	e8 8e 4f fe ff       	call   c0000818 <strcat>
c001b88a:	59                   	pop    ecx
c001b88b:	5b                   	pop    ebx
c001b88c:	57                   	push   edi
c001b88d:	56                   	push   esi
c001b88e:	e8 85 4f fe ff       	call   c0000818 <strcat>
c001b893:	83 c4 10             	add    esp,0x10
c001b896:	e9 7b ff ff ff       	jmp    c001b816 <sysCallGetEnv(regs*)+0x28>

c001b89b <sysAppSettings(regs*)>:
c001b89b:	53                   	push   ebx
c001b89c:	83 ec 08             	sub    esp,0x8
c001b89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b8a6:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b8ac:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b8b1:	66 3d c0 09          	cmp    ax,0x9c0
c001b8b5:	75 2f                	jne    c001b8e6 <sysAppSettings(regs*)+0x4b>
c001b8b7:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b8bd:	83 e0 1f             	and    eax,0x1f
c001b8c0:	3c 01                	cmp    al,0x1
c001b8c2:	74 2e                	je     c001b8f2 <sysAppSettings(regs*)+0x57>
c001b8c4:	3c 07                	cmp    al,0x7
c001b8c6:	0f 84 bd 00 00 00    	je     c001b989 <sysAppSettings(regs*)+0xee>
c001b8cc:	84 c0                	test   al,al
c001b8ce:	0f 84 dc 00 00 00    	je     c001b9b0 <sysAppSettings(regs*)+0x115>
c001b8d4:	3c 08                	cmp    al,0x8
c001b8d6:	74 6d                	je     c001b945 <sysAppSettings(regs*)+0xaa>
c001b8d8:	0f b6 c0             	movzx  eax,al
c001b8db:	83 c4 08             	add    esp,0x8
c001b8de:	05 e8 03 00 00       	add    eax,0x3e8
c001b8e3:	5b                   	pop    ebx
c001b8e4:	99                   	cdq    
c001b8e5:	c3                   	ret    
c001b8e6:	b8 01 00 00 00       	mov    eax,0x1
c001b8eb:	31 d2                	xor    edx,edx
c001b8ed:	83 c4 08             	add    esp,0x8
c001b8f0:	5b                   	pop    ebx
c001b8f1:	c3                   	ret    
c001b8f2:	51                   	push   ecx
c001b8f3:	68 00 01 00 00       	push   0x100
c001b8f8:	6a 00                	push   0x0
c001b8fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b902:	83 c0 0c             	add    eax,0xc
c001b905:	50                   	push   eax
c001b906:	e8 b7 4d fe ff       	call   c00006c2 <memset>
c001b90b:	83 c4 0c             	add    esp,0xc
c001b90e:	68 ff 00 00 00       	push   0xff
c001b913:	53                   	push   ebx
c001b914:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b919:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b91c:	83 c0 0c             	add    eax,0xc
c001b91f:	50                   	push   eax
c001b920:	e8 7b 4d fe ff       	call   c00006a0 <memcpy>
c001b925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b92a:	5b                   	pop    ebx
c001b92b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b92e:	5a                   	pop    edx
c001b92f:	8d 50 0c             	lea    edx,[eax+0xc]
c001b932:	52                   	push   edx
c001b933:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b939:	e8 e8 4f ff ff       	call   c0010926 <VgaText::setTitle(char*)>
c001b93e:	83 c4 10             	add    esp,0x10
c001b941:	31 c0                	xor    eax,eax
c001b943:	eb a6                	jmp    c001b8eb <sysAppSettings(regs*)+0x50>
c001b945:	83 ec 08             	sub    esp,0x8
c001b948:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b94e:	83 e0 0f             	and    eax,0xf
c001b951:	50                   	push   eax
c001b952:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b957:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b95a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b960:	e8 b1 4f ff ff       	call   c0010916 <VgaText::setTitleColour(VgaColour)>
c001b965:	58                   	pop    eax
c001b966:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b96c:	5a                   	pop    edx
c001b96d:	c1 e8 04             	shr    eax,0x4
c001b970:	83 e0 0f             	and    eax,0xf
c001b973:	50                   	push   eax
c001b974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b979:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b97c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b982:	e8 7f 4f ff ff       	call   c0010906 <VgaText::setTitleTextColour(VgaColour)>
c001b987:	eb b5                	jmp    c001b93e <sysAppSettings(regs*)+0xa3>
c001b989:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b991:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b997:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b99d:	c0 e8 06             	shr    al,0x6
c001b9a0:	83 e0 01             	and    eax,0x1
c001b9a3:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b9a9:	31 c0                	xor    eax,eax
c001b9ab:	e9 3b ff ff ff       	jmp    c001b8eb <sysAppSettings(regs*)+0x50>
c001b9b0:	b8 02 00 00 00       	mov    eax,0x2
c001b9b5:	e9 31 ff ff ff       	jmp    c001b8eb <sysAppSettings(regs*)+0x50>

c001b9ba <sysSetFatAttrib(regs*)>:
c001b9ba:	57                   	push   edi
c001b9bb:	56                   	push   esi
c001b9bc:	53                   	push   ebx
c001b9bd:	83 ec 1c             	sub    esp,0x1c
c001b9c0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b9c4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b9c7:	68 14 01 00 00       	push   0x114
c001b9cc:	e8 51 3c ff ff       	call   c000f622 <malloc>
c001b9d1:	83 c4 0c             	add    esp,0xc
c001b9d4:	89 c3                	mov    ebx,eax
c001b9d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9db:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9de:	57                   	push   edi
c001b9df:	53                   	push   ebx
c001b9e0:	e8 65 74 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001b9e5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b9e8:	83 c4 0c             	add    esp,0xc
c001b9eb:	0f b6 d4             	movzx  edx,ah
c001b9ee:	0f b6 c0             	movzx  eax,al
c001b9f1:	52                   	push   edx
c001b9f2:	50                   	push   eax
c001b9f3:	53                   	push   ebx
c001b9f4:	e8 c7 76 ff ff       	call   c00130c0 <File::chfatattr(unsigned char, unsigned char)>
c001b9f9:	83 c4 10             	add    esp,0x10
c001b9fc:	85 db                	test   ebx,ebx
c001b9fe:	74 14                	je     c001ba14 <sysSetFatAttrib(regs*)+0x5a>
c001ba00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba04:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba06:	83 ec 0c             	sub    esp,0xc
c001ba09:	53                   	push   ebx
c001ba0a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba0d:	83 c4 10             	add    esp,0x10
c001ba10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba14:	85 c0                	test   eax,eax
c001ba16:	0f 95 c0             	setne  al
c001ba19:	31 d2                	xor    edx,edx
c001ba1b:	0f b6 c0             	movzx  eax,al
c001ba1e:	f7 d8                	neg    eax
c001ba20:	83 d2 00             	adc    edx,0x0
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	f7 da                	neg    edx
c001ba28:	5b                   	pop    ebx
c001ba29:	5e                   	pop    esi
c001ba2a:	5f                   	pop    edi
c001ba2b:	c3                   	ret    

c001ba2c <sysPipe(regs*)>:
c001ba2c:	57                   	push   edi
c001ba2d:	56                   	push   esi
c001ba2e:	53                   	push   ebx
c001ba2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba33:	83 ec 0c             	sub    esp,0xc
c001ba36:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001ba39:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001ba3c:	6a 20                	push   0x20
c001ba3e:	e8 df 3b ff ff       	call   c000f622 <malloc>
c001ba43:	89 c3                	mov    ebx,eax
c001ba45:	58                   	pop    eax
c001ba46:	5a                   	pop    edx
c001ba47:	68 00 50 00 00       	push   0x5000
c001ba4c:	53                   	push   ebx
c001ba4d:	e8 04 48 ff ff       	call   c0010256 <Pipe::Pipe(int)>
c001ba52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba55:	e8 5c 5a ff ff       	call   c00114b6 <UnixFile::getFileDescriptor()>
c001ba5a:	89 07                	mov    DWORD PTR [edi],eax
c001ba5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba5f:	e8 52 5a ff ff       	call   c00114b6 <UnixFile::getFileDescriptor()>
c001ba64:	83 c4 10             	add    esp,0x10
c001ba67:	89 06                	mov    DWORD PTR [esi],eax
c001ba69:	31 d2                	xor    edx,edx
c001ba6b:	5b                   	pop    ebx
c001ba6c:	31 c0                	xor    eax,eax
c001ba6e:	5e                   	pop    esi
c001ba6f:	5f                   	pop    edi
c001ba70:	c3                   	ret    

c001ba71 <sysGetUnixTime(regs*)>:
c001ba71:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001ba76:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba80:	e9 af 7d ff ff       	jmp    c0013834 <Clock::timeInSecondsLocal()>

c001ba85 <string_ends_with(char const*, char const*)>:
c001ba85:	57                   	push   edi
c001ba86:	56                   	push   esi
c001ba87:	53                   	push   ebx
c001ba88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba8c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba90:	83 ec 0c             	sub    esp,0xc
c001ba93:	53                   	push   ebx
c001ba94:	e8 46 4c fe ff       	call   c00006df <strlen>
c001ba99:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba9c:	89 c6                	mov    esi,eax
c001ba9e:	e8 3c 4c fe ff       	call   c00006df <strlen>
c001baa3:	83 c4 10             	add    esp,0x10
c001baa6:	39 c6                	cmp    esi,eax
c001baa8:	7d 06                	jge    c001bab0 <string_ends_with(char const*, char const*)+0x2b>
c001baaa:	5b                   	pop    ebx
c001baab:	31 c0                	xor    eax,eax
c001baad:	5e                   	pop    esi
c001baae:	5f                   	pop    edi
c001baaf:	c3                   	ret    
c001bab0:	83 ec 08             	sub    esp,0x8
c001bab3:	29 c6                	sub    esi,eax
c001bab5:	57                   	push   edi
c001bab6:	01 f3                	add    ebx,esi
c001bab8:	53                   	push   ebx
c001bab9:	e8 f4 4c fe ff       	call   c00007b2 <strcmp>
c001babe:	83 c4 10             	add    esp,0x10
c001bac1:	85 c0                	test   eax,eax
c001bac3:	5b                   	pop    ebx
c001bac4:	0f 94 c0             	sete   al
c001bac7:	5e                   	pop    esi
c001bac8:	0f b6 c0             	movzx  eax,al
c001bacb:	5f                   	pop    edi
c001bacc:	c3                   	ret    

c001bacd <sysCallOpen(regs*)>:
c001bacd:	56                   	push   esi
c001bace:	53                   	push   ebx
c001bacf:	81 ec 04 01 00 00    	sub    esp,0x104
c001bad5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001badc:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001badf:	85 c9                	test   ecx,ecx
c001bae1:	0f 84 b3 00 00 00    	je     c001bb9a <sysCallOpen(regs*)+0xcd>
c001bae7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001baea:	85 c0                	test   eax,eax
c001baec:	0f 84 a8 00 00 00    	je     c001bb9a <sysCallOpen(regs*)+0xcd>
c001baf2:	52                   	push   edx
c001baf3:	68 29 b6 02 c0       	push   0xc002b629
c001baf8:	50                   	push   eax
c001baf9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bafd:	56                   	push   esi
c001bafe:	e8 9d 71 ff ff       	call   c0012ca0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bb03:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb06:	e8 d4 4b fe ff       	call   c00006df <strlen>
c001bb0b:	83 c4 10             	add    esp,0x10
c001bb0e:	48                   	dec    eax
c001bb0f:	74 1d                	je     c001bb2e <sysCallOpen(regs*)+0x61>
c001bb11:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bb14:	eb 0f                	jmp    c001bb25 <sysCallOpen(regs*)+0x58>
c001bb16:	80 fa 3a             	cmp    dl,0x3a
c001bb19:	74 0f                	je     c001bb2a <sysCallOpen(regs*)+0x5d>
c001bb1b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bb1f:	48                   	dec    eax
c001bb20:	74 0c                	je     c001bb2e <sysCallOpen(regs*)+0x61>
c001bb22:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bb25:	80 fa 2e             	cmp    dl,0x2e
c001bb28:	75 ec                	jne    c001bb16 <sysCallOpen(regs*)+0x49>
c001bb2a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bb2e:	83 ec 08             	sub    esp,0x8
c001bb31:	68 2d b6 02 c0       	push   0xc002b62d
c001bb36:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb39:	e8 47 ff ff ff       	call   c001ba85 <string_ends_with(char const*, char const*)>
c001bb3e:	83 c4 10             	add    esp,0x10
c001bb41:	85 c0                	test   eax,eax
c001bb43:	75 17                	jne    c001bb5c <sysCallOpen(regs*)+0x8f>
c001bb45:	83 ec 08             	sub    esp,0x8
c001bb48:	68 4e b6 02 c0       	push   0xc002b64e
c001bb4d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb50:	e8 30 ff ff ff       	call   c001ba85 <string_ends_with(char const*, char const*)>
c001bb55:	83 c4 10             	add    esp,0x10
c001bb58:	85 c0                	test   eax,eax
c001bb5a:	74 51                	je     c001bbad <sysCallOpen(regs*)+0xe0>
c001bb5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb5f:	83 ec 08             	sub    esp,0x8
c001bb62:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bb68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb72:	ff 30                	push   DWORD PTR [eax]
c001bb74:	68 32 b6 02 c0       	push   0xc002b632
c001bb79:	e8 73 6d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001bb7e:	c7 04 24 41 b6 02 c0 	mov    DWORD PTR [esp],0xc002b641
c001bb85:	e8 67 6d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001bb8a:	83 c4 10             	add    esp,0x10
c001bb8d:	81 c4 04 01 00 00    	add    esp,0x104
c001bb93:	31 c0                	xor    eax,eax
c001bb95:	31 d2                	xor    edx,edx
c001bb97:	5b                   	pop    ebx
c001bb98:	5e                   	pop    esi
c001bb99:	c3                   	ret    
c001bb9a:	81 c4 04 01 00 00    	add    esp,0x104
c001bba0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bba5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbaa:	5b                   	pop    ebx
c001bbab:	5e                   	pop    esi
c001bbac:	c3                   	ret    
c001bbad:	83 ec 08             	sub    esp,0x8
c001bbb0:	68 2e b6 02 c0       	push   0xc002b62e
c001bbb5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbb8:	e8 f5 4b fe ff       	call   c00007b2 <strcmp>
c001bbbd:	83 c4 10             	add    esp,0x10
c001bbc0:	85 c0                	test   eax,eax
c001bbc2:	74 98                	je     c001bb5c <sysCallOpen(regs*)+0x8f>
c001bbc4:	83 ec 08             	sub    esp,0x8
c001bbc7:	68 2d b6 02 c0       	push   0xc002b62d
c001bbcc:	56                   	push   esi
c001bbcd:	e8 b3 fe ff ff       	call   c001ba85 <string_ends_with(char const*, char const*)>
c001bbd2:	83 c4 10             	add    esp,0x10
c001bbd5:	85 c0                	test   eax,eax
c001bbd7:	75 83                	jne    c001bb5c <sysCallOpen(regs*)+0x8f>
c001bbd9:	83 ec 08             	sub    esp,0x8
c001bbdc:	68 53 b6 02 c0       	push   0xc002b653
c001bbe1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbe4:	e8 9c fe ff ff       	call   c001ba85 <string_ends_with(char const*, char const*)>
c001bbe9:	83 c4 10             	add    esp,0x10
c001bbec:	85 c0                	test   eax,eax
c001bbee:	0f 85 d9 00 00 00    	jne    c001bccd <sysCallOpen(regs*)+0x200>
c001bbf4:	83 ec 08             	sub    esp,0x8
c001bbf7:	68 58 b6 02 c0       	push   0xc002b658
c001bbfc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbff:	e8 81 fe ff ff       	call   c001ba85 <string_ends_with(char const*, char const*)>
c001bc04:	83 c4 10             	add    esp,0x10
c001bc07:	85 c0                	test   eax,eax
c001bc09:	0f 85 be 00 00 00    	jne    c001bccd <sysCallOpen(regs*)+0x200>
c001bc0f:	83 ec 08             	sub    esp,0x8
c001bc12:	68 54 b6 02 c0       	push   0xc002b654
c001bc17:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc1a:	e8 93 4b fe ff       	call   c00007b2 <strcmp>
c001bc1f:	83 c4 10             	add    esp,0x10
c001bc22:	85 c0                	test   eax,eax
c001bc24:	0f 84 a3 00 00 00    	je     c001bccd <sysCallOpen(regs*)+0x200>
c001bc2a:	83 ec 08             	sub    esp,0x8
c001bc2d:	68 53 b6 02 c0       	push   0xc002b653
c001bc32:	56                   	push   esi
c001bc33:	e8 4d fe ff ff       	call   c001ba85 <string_ends_with(char const*, char const*)>
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	85 c0                	test   eax,eax
c001bc3d:	0f 85 8a 00 00 00    	jne    c001bccd <sysCallOpen(regs*)+0x200>
c001bc43:	83 ec 0c             	sub    esp,0xc
c001bc46:	68 14 01 00 00       	push   0x114
c001bc4b:	e8 d2 39 ff ff       	call   c000f622 <malloc>
c001bc50:	83 c4 0c             	add    esp,0xc
c001bc53:	89 c6                	mov    esi,eax
c001bc55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc5a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc60:	56                   	push   esi
c001bc61:	e8 e4 71 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001bc66:	83 c4 10             	add    esp,0x10
c001bc69:	85 f6                	test   esi,esi
c001bc6b:	0f 84 29 ff ff ff    	je     c001bb9a <sysCallOpen(regs*)+0xcd>
c001bc71:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bc74:	0f b6 c2             	movzx  eax,dl
c001bc77:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bc7a:	89 d0                	mov    eax,edx
c001bc7c:	83 e0 01             	and    eax,0x1
c001bc7f:	f6 c2 02             	test   dl,0x2
c001bc82:	74 03                	je     c001bc87 <sysCallOpen(regs*)+0x1ba>
c001bc84:	83 c8 02             	or     eax,0x2
c001bc87:	f6 c2 04             	test   dl,0x4
c001bc8a:	74 03                	je     c001bc8f <sysCallOpen(regs*)+0x1c2>
c001bc8c:	83 c8 04             	or     eax,0x4
c001bc8f:	f6 c2 08             	test   dl,0x8
c001bc92:	74 03                	je     c001bc97 <sysCallOpen(regs*)+0x1ca>
c001bc94:	83 c8 0a             	or     eax,0xa
c001bc97:	83 e2 10             	and    edx,0x10
c001bc9a:	74 03                	je     c001bc9f <sysCallOpen(regs*)+0x1d2>
c001bc9c:	83 c8 12             	or     eax,0x12
c001bc9f:	83 ec 08             	sub    esp,0x8
c001bca2:	50                   	push   eax
c001bca3:	56                   	push   esi
c001bca4:	e8 05 72 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001bca9:	83 c4 10             	add    esp,0x10
c001bcac:	85 c0                	test   eax,eax
c001bcae:	0f 85 e6 fe ff ff    	jne    c001bb9a <sysCallOpen(regs*)+0xcd>
c001bcb4:	83 ec 0c             	sub    esp,0xc
c001bcb7:	56                   	push   esi
c001bcb8:	e8 f9 57 ff ff       	call   c00114b6 <UnixFile::getFileDescriptor()>
c001bcbd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcc0:	89 02                	mov    DWORD PTR [edx],eax
c001bcc2:	c1 f8 1f             	sar    eax,0x1f
c001bcc5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcc8:	e9 bd fe ff ff       	jmp    c001bb8a <sysCallOpen(regs*)+0xbd>
c001bccd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcd0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bcd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcdd:	e9 ab fe ff ff       	jmp    c001bb8d <sysCallOpen(regs*)+0xc0>

c001bce2 <Sys::loadSyscalls()>:
c001bce2:	c7 05 40 06 03 c0 98 ae 01 c0 	mov    DWORD PTR ds:0xc0030640,0xc001ae98
c001bcec:	c7 05 44 06 03 c0 fa aa 01 c0 	mov    DWORD PTR ds:0xc0030644,0xc001aafa
c001bcf6:	c7 05 48 06 03 c0 4d ac 01 c0 	mov    DWORD PTR ds:0xc0030648,0xc001ac4d
c001bd00:	c7 05 4c 06 03 c0 30 ae 01 c0 	mov    DWORD PTR ds:0xc003064c,0xc001ae30
c001bd0a:	c7 05 50 06 03 c0 e5 ab 01 c0 	mov    DWORD PTR ds:0xc0030650,0xc001abe5
c001bd14:	c7 05 54 06 03 c0 31 ab 01 c0 	mov    DWORD PTR ds:0xc0030654,0xc001ab31
c001bd1e:	c7 05 58 06 03 c0 12 ab 01 c0 	mov    DWORD PTR ds:0xc0030658,0xc001ab12
c001bd28:	c7 05 5c 06 03 c0 a2 ac 01 c0 	mov    DWORD PTR ds:0xc003065c,0xc001aca2
c001bd32:	c7 05 64 06 03 c0 aa b3 01 c0 	mov    DWORD PTR ds:0xc0030664,0xc001b3aa
c001bd3c:	c7 05 60 06 03 c0 cd ba 01 c0 	mov    DWORD PTR ds:0xc0030660,0xc001bacd
c001bd46:	c7 05 68 06 03 c0 32 b4 01 c0 	mov    DWORD PTR ds:0xc0030668,0xc001b432
c001bd50:	c7 05 6c 06 03 c0 99 b0 01 c0 	mov    DWORD PTR ds:0xc003066c,0xc001b099
c001bd5a:	c7 05 70 06 03 c0 d3 ae 01 c0 	mov    DWORD PTR ds:0xc0030670,0xc001aed3
c001bd64:	c7 05 74 06 03 c0 d8 ae 01 c0 	mov    DWORD PTR ds:0xc0030674,0xc001aed8
c001bd6e:	c7 05 78 06 03 c0 0d b5 01 c0 	mov    DWORD PTR ds:0xc0030678,0xc001b50d
c001bd78:	c7 05 7c 06 03 c0 a7 b4 01 c0 	mov    DWORD PTR ds:0xc003067c,0xc001b4a7
c001bd82:	c7 05 80 06 03 c0 81 b1 01 c0 	mov    DWORD PTR ds:0xc0030680,0xc001b181
c001bd8c:	c7 05 84 06 03 c0 ea b1 01 c0 	mov    DWORD PTR ds:0xc0030684,0xc001b1ea
c001bd96:	c7 05 88 06 03 c0 67 b2 01 c0 	mov    DWORD PTR ds:0xc0030688,0xc001b267
c001bda0:	c7 05 8c 06 03 c0 dd ae 01 c0 	mov    DWORD PTR ds:0xc003068c,0xc001aedd
c001bdaa:	c7 05 90 06 03 c0 7d b5 01 c0 	mov    DWORD PTR ds:0xc0030690,0xc001b57d
c001bdb4:	c7 05 94 06 03 c0 97 b5 01 c0 	mov    DWORD PTR ds:0xc0030694,0xc001b597
c001bdbe:	c7 05 98 06 03 c0 97 b5 01 c0 	mov    DWORD PTR ds:0xc0030698,0xc001b597
c001bdc8:	c7 05 9c 06 03 c0 d8 b5 01 c0 	mov    DWORD PTR ds:0xc003069c,0xc001b5d8
c001bdd2:	c7 05 a0 06 03 c0 3c b6 01 c0 	mov    DWORD PTR ds:0xc00306a0,0xc001b63c
c001bddc:	c7 05 a4 06 03 c0 e7 ae 01 c0 	mov    DWORD PTR ds:0xc00306a4,0xc001aee7
c001bde6:	c7 05 a8 06 03 c0 a0 b6 01 c0 	mov    DWORD PTR ds:0xc00306a8,0xc001b6a0
c001bdf0:	c7 05 ac 06 03 c0 56 b0 01 c0 	mov    DWORD PTR ds:0xc00306ac,0xc001b056
c001bdfa:	c7 05 b0 06 03 c0 ec b6 01 c0 	mov    DWORD PTR ds:0xc00306b0,0xc001b6ec
c001be04:	c7 05 b4 06 03 c0 27 b1 01 c0 	mov    DWORD PTR ds:0xc00306b4,0xc001b127
c001be0e:	c7 05 b8 06 03 c0 6f b7 01 c0 	mov    DWORD PTR ds:0xc00306b8,0xc001b76f
c001be18:	c7 05 bc 06 03 c0 ea b2 01 c0 	mov    DWORD PTR ds:0xc00306bc,0xc001b2ea
c001be22:	c7 05 c0 06 03 c0 96 b7 01 c0 	mov    DWORD PTR ds:0xc00306c0,0xc001b796
c001be2c:	c7 05 c4 06 03 c0 ee b7 01 c0 	mov    DWORD PTR ds:0xc00306c4,0xc001b7ee
c001be36:	c7 05 c8 06 03 c0 9b b8 01 c0 	mov    DWORD PTR ds:0xc00306c8,0xc001b89b
c001be40:	c7 05 cc 06 03 c0 f7 ae 01 c0 	mov    DWORD PTR ds:0xc00306cc,0xc001aef7
c001be4a:	c7 05 d0 06 03 c0 61 af 01 c0 	mov    DWORD PTR ds:0xc00306d0,0xc001af61
c001be54:	c7 05 d4 06 03 c0 a7 af 01 c0 	mov    DWORD PTR ds:0xc00306d4,0xc001afa7
c001be5e:	c7 05 d8 06 03 c0 ba b9 01 c0 	mov    DWORD PTR ds:0xc00306d8,0xc001b9ba
c001be68:	c7 05 dc 06 03 c0 b2 b5 01 c0 	mov    DWORD PTR ds:0xc00306dc,0xc001b5b2
c001be72:	c7 05 e0 06 03 c0 f8 af 01 c0 	mov    DWORD PTR ds:0xc00306e0,0xc001aff8
c001be7c:	c7 05 e4 06 03 c0 2c ba 01 c0 	mov    DWORD PTR ds:0xc00306e4,0xc001ba2c
c001be86:	c7 05 e8 06 03 c0 71 ba 01 c0 	mov    DWORD PTR ds:0xc00306e8,0xc001ba71
c001be90:	c7 05 ec 06 03 c0 3d ab 01 c0 	mov    DWORD PTR ds:0xc00306ec,0xc001ab3d
c001be9a:	c7 05 f0 06 03 c0 be ac 01 c0 	mov    DWORD PTR ds:0xc00306f0,0xc001acbe
c001bea4:	c7 05 f4 06 03 c0 e6 ad 01 c0 	mov    DWORD PTR ds:0xc00306f4,0xc001ade6
c001beae:	c7 05 f8 06 03 c0 c4 aa 01 c0 	mov    DWORD PTR ds:0xc00306f8,0xc001aac4
c001beb8:	c3                   	ret    

c001beb9 <Sys::systemCall(regs*, void*)>:
c001beb9:	53                   	push   ebx
c001beba:	83 ec 08             	sub    esp,0x8
c001bebd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bec1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bec4:	83 f8 7f             	cmp    eax,0x7f
c001bec7:	77 16                	ja     c001bedf <Sys::systemCall(regs*, void*)+0x26>
c001bec9:	8b 14 85 40 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf9c0]
c001bed0:	85 d2                	test   edx,edx
c001bed2:	74 0b                	je     c001bedf <Sys::systemCall(regs*, void*)+0x26>
c001bed4:	83 ec 0c             	sub    esp,0xc
c001bed7:	53                   	push   ebx
c001bed8:	ff d2                	call   edx
c001beda:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bedd:	eb 0d                	jmp    c001beec <Sys::systemCall(regs*, void*)+0x33>
c001bedf:	52                   	push   edx
c001bee0:	52                   	push   edx
c001bee1:	50                   	push   eax
c001bee2:	68 5d b6 02 c0       	push   0xc002b65d
c001bee7:	e8 05 6a ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001beec:	83 c4 10             	add    esp,0x10
c001beef:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bef4:	31 d2                	xor    edx,edx
c001bef6:	83 c4 08             	add    esp,0x8
c001bef9:	5b                   	pop    ebx
c001befa:	c3                   	ret    

c001befb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001befb:	55                   	push   ebp
c001befc:	89 e5                	mov    ebp,esp
c001befe:	57                   	push   edi
c001beff:	56                   	push   esi
c001bf00:	53                   	push   ebx
c001bf01:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bf07:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bf0a:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bf0d:	85 c0                	test   eax,eax
c001bf0f:	0f 95 c1             	setne  cl
c001bf12:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001bf16:	0f 94 c2             	sete   dl
c001bf19:	84 d1                	test   cl,dl
c001bf1b:	74 26                	je     c001bf43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bf1d:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bf24:	74 1d                	je     c001bf43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bf26:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001bf29:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bf2f:	89 d6                	mov    esi,edx
c001bf31:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001bf37:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001bf3d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bf40:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001bf43:	83 ec 0c             	sub    esp,0xc
c001bf46:	05 ff 0f 00 00       	add    eax,0xfff
c001bf4b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bf4e:	6a 01                	push   0x1
c001bf50:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bf56:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bf5c:	e8 a0 59 ff ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c001bf61:	83 c4 10             	add    esp,0x10
c001bf64:	89 c6                	mov    esi,eax
c001bf66:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bf6c:	0f 86 21 01 00 00    	jbe    c001c093 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bf72:	c1 eb 0c             	shr    ebx,0xc
c001bf75:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bf7f:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bf85:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bf88:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bf8b:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bf91:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bf94:	29 d8                	sub    eax,ebx
c001bf96:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bf9c:	0f 83 f4 00 00 00    	jae    c001c096 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bfa2:	83 ec 0c             	sub    esp,0xc
c001bfa5:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bfab:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bfae:	3d 00 10 00 00       	cmp    eax,0x1000
c001bfb3:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bfb5:	52                   	push   edx
c001bfb6:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bfbc:	52                   	push   edx
c001bfbd:	76 05                	jbe    c001bfc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bfbf:	b8 00 10 00 00       	mov    eax,0x1000
c001bfc4:	31 d2                	xor    edx,edx
c001bfc6:	52                   	push   edx
c001bfc7:	50                   	push   eax
c001bfc8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bfcb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfce:	83 c4 20             	add    esp,0x20
c001bfd1:	85 c0                	test   eax,eax
c001bfd3:	74 1f                	je     c001bff4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001bfd5:	51                   	push   ecx
c001bfd6:	51                   	push   ecx
c001bfd7:	50                   	push   eax
c001bfd8:	68 71 b6 02 c0       	push   0xc002b671
c001bfdd:	e8 0f 69 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001bfe2:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfe5:	e8 7b 5c ff ff       	call   c0011c65 <Virt::freeKernelVirtualPages(unsigned long)>
c001bfea:	83 c4 10             	add    esp,0x10
c001bfed:	31 c0                	xor    eax,eax
c001bfef:	e9 7c 01 00 00       	jmp    c001c170 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bff4:	e8 c7 14 00 00       	call   c001d4c0 <lockScheduler()>
c001bff9:	e8 c1 3c ff ff       	call   c000fcbf <Phys::allocatePage()>
c001bffe:	6a 07                	push   0x7
c001c000:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001c006:	56                   	push   esi
c001c007:	50                   	push   eax
c001c008:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c00e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c011:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c017:	e8 b0 5f ff ff       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c01c:	83 c4 0c             	add    esp,0xc
c001c01f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c025:	6a 00                	push   0x0
c001c027:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c02d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c030:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c036:	e8 fb 5d ff ff       	call   c0011e36 <VAS::mapOtherVASIn(bool, VAS*)>
c001c03b:	58                   	pop    eax
c001c03c:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c042:	5a                   	pop    edx
c001c043:	68 07 04 00 00       	push   0x407
c001c048:	53                   	push   ebx
c001c049:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c04f:	50                   	push   eax
c001c050:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c056:	6a 00                	push   0x0
c001c058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c05d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c060:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c066:	e8 1b 63 ff ff       	call   c0012386 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c06b:	83 c4 1c             	add    esp,0x1c
c001c06e:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001c074:	68 00 10 00 00       	push   0x1000
c001c079:	50                   	push   eax
c001c07a:	56                   	push   esi
c001c07b:	e8 20 46 fe ff       	call   c00006a0 <memcpy>
c001c080:	e8 3d 14 00 00       	call   c001d4c2 <unlockScheduler()>
c001c085:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001c08b:	83 c4 10             	add    esp,0x10
c001c08e:	e9 f5 fe ff ff       	jmp    c001bf88 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001c093:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c096:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001c0a0:	0f 86 bc 00 00 00    	jbe    c001c162 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001c0a6:	e8 15 14 00 00       	call   c001d4c0 <lockScheduler()>
c001c0ab:	51                   	push   ecx
c001c0ac:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c0b2:	6a 00                	push   0x0
c001c0b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0bc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0c2:	e8 6f 5d ff ff       	call   c0011e36 <VAS::mapOtherVASIn(bool, VAS*)>
c001c0c7:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001c0cd:	83 c4 10             	add    esp,0x10
c001c0d0:	c1 e8 0c             	shr    eax,0xc
c001c0d3:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001c0dd:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001c0e3:	e8 d7 3b ff ff       	call   c000fcbf <Phys::allocatePage()>
c001c0e8:	6a 07                	push   0x7
c001c0ea:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001c0f0:	56                   	push   esi
c001c0f1:	50                   	push   eax
c001c0f2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c0f8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c0fb:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001c101:	e8 c6 5e ff ff       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c001c106:	58                   	pop    eax
c001c107:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001c10d:	5a                   	pop    edx
c001c10e:	68 07 04 00 00       	push   0x407
c001c113:	53                   	push   ebx
c001c114:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c11a:	50                   	push   eax
c001c11b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c121:	6a 00                	push   0x0
c001c123:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c128:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c12b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c131:	e8 50 62 ff ff       	call   c0012386 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c136:	83 c4 1c             	add    esp,0x1c
c001c139:	68 00 10 00 00       	push   0x1000
c001c13e:	6a 00                	push   0x0
c001c140:	56                   	push   esi
c001c141:	e8 7c 45 fe ff       	call   c00006c2 <memset>
c001c146:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001c14c:	83 c4 10             	add    esp,0x10
c001c14f:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001c155:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001c15b:	77 86                	ja     c001c0e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001c15d:	e8 60 13 00 00       	call   c001d4c2 <unlockScheduler()>
c001c162:	83 ec 0c             	sub    esp,0xc
c001c165:	56                   	push   esi
c001c166:	e8 fa 5a ff ff       	call   c0011c65 <Virt::freeKernelVirtualPages(unsigned long)>
c001c16b:	83 c4 10             	add    esp,0x10
c001c16e:	b0 01                	mov    al,0x1
c001c170:	8d 65 f4             	lea    esp,[ebp-0xc]
c001c173:	5b                   	pop    ebx
c001c174:	5e                   	pop    esi
c001c175:	5f                   	pop    edi
c001c176:	5d                   	pop    ebp
c001c177:	c3                   	ret    

c001c178 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c178:	55                   	push   ebp
c001c179:	57                   	push   edi
c001c17a:	56                   	push   esi
c001c17b:	53                   	push   ebx
c001c17c:	83 ec 48             	sub    esp,0x48
c001c17f:	68 14 01 00 00       	push   0x114
c001c184:	e8 99 34 ff ff       	call   c000f622 <malloc>
c001c189:	83 c4 0c             	add    esp,0xc
c001c18c:	89 c6                	mov    esi,eax
c001c18e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c192:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c196:	50                   	push   eax
c001c197:	e8 ae 6c ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001c19c:	58                   	pop    eax
c001c19d:	5a                   	pop    edx
c001c19e:	6a 01                	push   0x1
c001c1a0:	56                   	push   esi
c001c1a1:	e8 08 6d ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001c1a6:	83 c4 10             	add    esp,0x10
c001c1a9:	85 c0                	test   eax,eax
c001c1ab:	0f 85 47 01 00 00    	jne    c001c2f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1b1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c1b9:	83 ec 0c             	sub    esp,0xc
c001c1bc:	6a 34                	push   0x34
c001c1be:	e8 5f 34 ff ff       	call   c000f622 <malloc>
c001c1c3:	89 c3                	mov    ebx,eax
c001c1c5:	58                   	pop    eax
c001c1c6:	8b 06                	mov    eax,DWORD PTR [esi]
c001c1c8:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c1cc:	57                   	push   edi
c001c1cd:	53                   	push   ebx
c001c1ce:	6a 00                	push   0x0
c001c1d0:	6a 34                	push   0x34
c001c1d2:	56                   	push   esi
c001c1d3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1d6:	83 c4 20             	add    esp,0x20
c001c1d9:	85 c0                	test   eax,eax
c001c1db:	0f 85 17 01 00 00    	jne    c001c2f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1e1:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c1e7:	0f 85 0b 01 00 00    	jne    c001c2f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1f0:	85 c0                	test   eax,eax
c001c1f2:	0f 84 00 01 00 00    	je     c001c2f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1f8:	31 d2                	xor    edx,edx
c001c1fa:	55                   	push   ebp
c001c1fb:	52                   	push   edx
c001c1fc:	50                   	push   eax
c001c1fd:	56                   	push   esi
c001c1fe:	e8 69 6d ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c203:	83 c4 10             	add    esp,0x10
c001c206:	85 c0                	test   eax,eax
c001c208:	0f 85 ea 00 00 00    	jne    c001c2f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c20e:	83 ec 0c             	sub    esp,0xc
c001c211:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c214:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c218:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c21c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c220:	0f af c2             	imul   eax,edx
c001c223:	50                   	push   eax
c001c224:	e8 f9 33 ff ff       	call   c000f622 <malloc>
c001c229:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c22b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c22f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c232:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c236:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c23a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c23e:	0f af c2             	imul   eax,edx
c001c241:	99                   	cdq    
c001c242:	52                   	push   edx
c001c243:	50                   	push   eax
c001c244:	56                   	push   esi
c001c245:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c248:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c24b:	83 c4 20             	add    esp,0x20
c001c24e:	85 c0                	test   eax,eax
c001c250:	0f 84 a2 00 00 00    	je     c001c2f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c256:	31 d2                	xor    edx,edx
c001c258:	51                   	push   ecx
c001c259:	52                   	push   edx
c001c25a:	50                   	push   eax
c001c25b:	56                   	push   esi
c001c25c:	e8 0b 6d ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c261:	83 c4 10             	add    esp,0x10
c001c264:	85 c0                	test   eax,eax
c001c266:	0f 85 8c 00 00 00    	jne    c001c2f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c26c:	83 ec 0c             	sub    esp,0xc
c001c26f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c273:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c277:	31 ed                	xor    ebp,ebp
c001c279:	0f af c2             	imul   eax,edx
c001c27c:	50                   	push   eax
c001c27d:	e8 a0 33 ff ff       	call   c000f622 <malloc>
c001c282:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c284:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c288:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c28b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c28f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c293:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c297:	0f af c2             	imul   eax,edx
c001c29a:	99                   	cdq    
c001c29b:	52                   	push   edx
c001c29c:	50                   	push   eax
c001c29d:	56                   	push   esi
c001c29e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2a1:	83 c4 20             	add    esp,0x20
c001c2a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c2ac:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c2b0:	0f 86 80 00 00 00    	jbe    c001c336 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c2b6:	0f b7 fd             	movzx  edi,bp
c001c2b9:	c1 e7 05             	shl    edi,0x5
c001c2bc:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c2c0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c2c3:	75 6b                	jne    c001c330 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c2c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c2c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2cc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c2cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2d3:	52                   	push   edx
c001c2d4:	31 d2                	xor    edx,edx
c001c2d6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c2d9:	52                   	push   edx
c001c2da:	50                   	push   eax
c001c2db:	56                   	push   esi
c001c2dc:	e8 8b 6c ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c2e1:	83 c4 10             	add    esp,0x10
c001c2e4:	85 c0                	test   eax,eax
c001c2e6:	74 17                	je     c001c2ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c2e8:	83 ec 0c             	sub    esp,0xc
c001c2eb:	68 9c b6 02 c0       	push   0xc002b69c
c001c2f0:	e8 fc 65 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001c2f5:	83 c4 10             	add    esp,0x10
c001c2f8:	31 c0                	xor    eax,eax
c001c2fa:	e9 87 00 00 00       	jmp    c001c386 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c2ff:	83 ec 0c             	sub    esp,0xc
c001c302:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c305:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c308:	50                   	push   eax
c001c309:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c30d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c311:	56                   	push   esi
c001c312:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c316:	e8 e0 fb ff ff       	call   c001befb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c31b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c31f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c323:	83 c4 20             	add    esp,0x20
c001c326:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c32a:	73 04                	jae    c001c330 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c32c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c330:	45                   	inc    ebp
c001c331:	e9 76 ff ff ff       	jmp    c001c2ac <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c336:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c33a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c33e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c342:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c348:	83 ec 0c             	sub    esp,0xc
c001c34b:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c351:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c356:	05 00 10 00 00       	add    eax,0x1000
c001c35b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c362:	e8 cb 32 ff ff       	call   c000f632 <free>
c001c367:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c36a:	e8 c3 32 ff ff       	call   c000f632 <free>
c001c36f:	58                   	pop    eax
c001c370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c374:	e8 b9 32 ff ff       	call   c000f632 <free>
c001c379:	89 34 24             	mov    DWORD PTR [esp],esi
c001c37c:	e8 8b 6b ff ff       	call   c0012f0c <File::close()>
c001c381:	83 c4 10             	add    esp,0x10
c001c384:	b0 01                	mov    al,0x1
c001c386:	83 c4 3c             	add    esp,0x3c
c001c389:	5b                   	pop    ebx
c001c38a:	5e                   	pop    esi
c001c38b:	5f                   	pop    edi
c001c38c:	5d                   	pop    ebp
c001c38d:	c3                   	ret    

c001c38e <Thr::runtimeReferenceHelper()>:
c001c38e:	83 ec 18             	sub    esp,0x18
c001c391:	68 a4 b6 02 c0       	push   0xc002b6a4
c001c396:	e8 56 65 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001c39b:	fa                   	cli    
c001c39c:	83 c4 10             	add    esp,0x10
c001c39f:	eb fe                	jmp    c001c39f <Thr::runtimeReferenceHelper()+0x11>

c001c3a1 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c3a1:	57                   	push   edi
c001c3a2:	56                   	push   esi
c001c3a3:	53                   	push   ebx
c001c3a4:	31 db                	xor    ebx,ebx
c001c3a6:	39 1d e0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fe0,ebx
c001c3ac:	7e 3c                	jle    c001c3ea <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c3ae:	8b 34 9d 60 0f 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf0a0]
c001c3b5:	31 ff                	xor    edi,edi
c001c3b7:	39 3c 9d 60 0e 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf1a0],edi
c001c3be:	7e 27                	jle    c001c3e7 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c3c0:	50                   	push   eax
c001c3c1:	50                   	push   eax
c001c3c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3c6:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3c8:	03 04 9d e0 0e 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf120]
c001c3cf:	50                   	push   eax
c001c3d0:	e8 dd 43 fe ff       	call   c00007b2 <strcmp>
c001c3d5:	83 c4 10             	add    esp,0x10
c001c3d8:	85 c0                	test   eax,eax
c001c3da:	75 05                	jne    c001c3e1 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c3dc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c3df:	eb 0b                	jmp    c001c3ec <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c3e1:	83 c6 10             	add    esi,0x10
c001c3e4:	47                   	inc    edi
c001c3e5:	eb d0                	jmp    c001c3b7 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c3e7:	43                   	inc    ebx
c001c3e8:	eb bc                	jmp    c001c3a6 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c3ea:	31 c0                	xor    eax,eax
c001c3ec:	5b                   	pop    ebx
c001c3ed:	5e                   	pop    esi
c001c3ee:	5f                   	pop    edi
c001c3ef:	c3                   	ret    

c001c3f0 <Thr::loadKernelSymbolTable(char const*)>:
c001c3f0:	55                   	push   ebp
c001c3f1:	57                   	push   edi
c001c3f2:	56                   	push   esi
c001c3f3:	53                   	push   ebx
c001c3f4:	83 ec 68             	sub    esp,0x68
c001c3f7:	8b 35 34 10 03 c0    	mov    esi,DWORD PTR ds:0xc0031034
c001c3fd:	68 14 01 00 00       	push   0x114
c001c402:	e8 1b 32 ff ff       	call   c000f622 <malloc>
c001c407:	83 c4 0c             	add    esp,0xc
c001c40a:	89 c3                	mov    ebx,eax
c001c40c:	56                   	push   esi
c001c40d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c411:	50                   	push   eax
c001c412:	e8 33 6a ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001c417:	5e                   	pop    esi
c001c418:	5f                   	pop    edi
c001c419:	6a 01                	push   0x1
c001c41b:	53                   	push   ebx
c001c41c:	e8 8d 6a ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	85 c0                	test   eax,eax
c001c426:	74 0a                	je     c001c432 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c428:	83 ec 0c             	sub    esp,0xc
c001c42b:	68 c6 b6 02 c0       	push   0xc002b6c6
c001c430:	eb 34                	jmp    c001c466 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c432:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c43a:	83 ec 0c             	sub    esp,0xc
c001c43d:	6a 34                	push   0x34
c001c43f:	e8 de 31 ff ff       	call   c000f622 <malloc>
c001c444:	59                   	pop    ecx
c001c445:	89 c7                	mov    edi,eax
c001c447:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c44b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c44d:	56                   	push   esi
c001c44e:	57                   	push   edi
c001c44f:	6a 00                	push   0x0
c001c451:	6a 34                	push   0x34
c001c453:	53                   	push   ebx
c001c454:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c457:	83 c4 20             	add    esp,0x20
c001c45a:	85 c0                	test   eax,eax
c001c45c:	74 17                	je     c001c475 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c45e:	83 ec 0c             	sub    esp,0xc
c001c461:	68 dd b6 02 c0       	push   0xc002b6dd
c001c466:	e8 fa d9 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001c46b:	83 c4 10             	add    esp,0x10
c001c46e:	31 c0                	xor    eax,eax
c001c470:	e9 31 02 00 00       	jmp    c001c6a6 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c475:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c47b:	75 e1                	jne    c001c45e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c47d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c480:	85 c0                	test   eax,eax
c001c482:	74 da                	je     c001c45e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c484:	52                   	push   edx
c001c485:	31 d2                	xor    edx,edx
c001c487:	52                   	push   edx
c001c488:	50                   	push   eax
c001c489:	53                   	push   ebx
c001c48a:	e8 dd 6a ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c48f:	83 c4 10             	add    esp,0x10
c001c492:	85 c0                	test   eax,eax
c001c494:	75 c8                	jne    c001c45e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c496:	83 ec 0c             	sub    esp,0xc
c001c499:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c49d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4a1:	31 ed                	xor    ebp,ebp
c001c4a3:	0f af c2             	imul   eax,edx
c001c4a6:	50                   	push   eax
c001c4a7:	e8 76 31 ff ff       	call   c000f622 <malloc>
c001c4ac:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c4ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4b2:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4b9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4bd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4c1:	0f af c2             	imul   eax,edx
c001c4c4:	99                   	cdq    
c001c4c5:	52                   	push   edx
c001c4c6:	50                   	push   eax
c001c4c7:	53                   	push   ebx
c001c4c8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4cb:	83 c4 20             	add    esp,0x20
c001c4ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c4d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c4de:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c4ee:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c4f2:	0f 86 aa 00 00 00    	jbe    c001c5a2 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c4f8:	0f b7 f5             	movzx  esi,bp
c001c4fb:	6b f6 28             	imul   esi,esi,0x28
c001c4fe:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c502:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c505:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c509:	50                   	push   eax
c001c50a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c50e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c512:	8b 16                	mov    edx,DWORD PTR [esi]
c001c514:	6b c0 28             	imul   eax,eax,0x28
c001c517:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c51b:	89 d0                	mov    eax,edx
c001c51d:	31 d2                	xor    edx,edx
c001c51f:	52                   	push   edx
c001c520:	50                   	push   eax
c001c521:	53                   	push   ebx
c001c522:	e8 45 6a ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c527:	83 c4 0c             	add    esp,0xc
c001c52a:	6a 20                	push   0x20
c001c52c:	6a 00                	push   0x0
c001c52e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c532:	52                   	push   edx
c001c533:	e8 8a 41 fe ff       	call   c00006c2 <memset>
c001c538:	58                   	pop    eax
c001c539:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c53b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c53f:	51                   	push   ecx
c001c540:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c544:	52                   	push   edx
c001c545:	6a 00                	push   0x0
c001c547:	6a 1f                	push   0x1f
c001c549:	53                   	push   ebx
c001c54a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c54d:	83 c4 18             	add    esp,0x18
c001c550:	68 f4 b6 02 c0       	push   0xc002b6f4
c001c555:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c559:	52                   	push   edx
c001c55a:	e8 53 42 fe ff       	call   c00007b2 <strcmp>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	85 c0                	test   eax,eax
c001c564:	75 0f                	jne    c001c575 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c566:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c569:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c56d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c571:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c575:	50                   	push   eax
c001c576:	50                   	push   eax
c001c577:	68 fc b6 02 c0       	push   0xc002b6fc
c001c57c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c580:	50                   	push   eax
c001c581:	e8 2c 42 fe ff       	call   c00007b2 <strcmp>
c001c586:	83 c4 10             	add    esp,0x10
c001c589:	85 c0                	test   eax,eax
c001c58b:	75 0f                	jne    c001c59c <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c58d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c590:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c594:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c59c:	45                   	inc    ebp
c001c59d:	e9 4c ff ff ff       	jmp    c001c4ee <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c5a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c5a7:	75 10                	jne    c001c5b9 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c5a9:	83 ec 0c             	sub    esp,0xc
c001c5ac:	68 04 b7 02 c0       	push   0xc002b704
c001c5b1:	e8 af d8 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001c5b6:	83 c4 10             	add    esp,0x10
c001c5b9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c5be:	75 10                	jne    c001c5d0 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c5c0:	83 ec 0c             	sub    esp,0xc
c001c5c3:	68 04 b7 02 c0       	push   0xc002b704
c001c5c8:	e8 98 d8 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001c5cd:	83 c4 10             	add    esp,0x10
c001c5d0:	31 d2                	xor    edx,edx
c001c5d2:	50                   	push   eax
c001c5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d7:	52                   	push   edx
c001c5d8:	50                   	push   eax
c001c5d9:	53                   	push   ebx
c001c5da:	e8 8d 69 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c5df:	5a                   	pop    edx
c001c5e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c5e4:	e8 39 30 ff ff       	call   c000f622 <malloc>
c001c5e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5f1:	31 c9                	xor    ecx,ecx
c001c5f3:	5e                   	pop    esi
c001c5f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5f6:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c5fa:	55                   	push   ebp
c001c5fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5ff:	51                   	push   ecx
c001c600:	52                   	push   edx
c001c601:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c605:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c609:	53                   	push   ebx
c001c60a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c60d:	83 c4 14             	add    esp,0x14
c001c610:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c614:	e8 09 30 ff ff       	call   c000f622 <malloc>
c001c619:	89 c6                	mov    esi,eax
c001c61b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c61d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c620:	56                   	push   esi
c001c621:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c625:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c629:	51                   	push   ecx
c001c62a:	52                   	push   edx
c001c62b:	53                   	push   ebx
c001c62c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c62f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c633:	8b 15 e0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fe0
c001c639:	83 c4 1c             	add    esp,0x1c
c001c63c:	c1 e8 04             	shr    eax,0x4
c001c63f:	89 04 95 60 0e 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf1a0],eax
c001c646:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c64a:	31 d2                	xor    edx,edx
c001c64c:	52                   	push   edx
c001c64d:	50                   	push   eax
c001c64e:	53                   	push   ebx
c001c64f:	e8 18 69 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c654:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c656:	31 d2                	xor    edx,edx
c001c658:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c65b:	56                   	push   esi
c001c65c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c660:	52                   	push   edx
c001c661:	50                   	push   eax
c001c662:	53                   	push   ebx
c001c663:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c666:	83 c4 14             	add    esp,0x14
c001c669:	53                   	push   ebx
c001c66a:	e8 9d 68 ff ff       	call   c0012f0c <File::close()>
c001c66f:	5d                   	pop    ebp
c001c670:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c674:	e8 b9 2f ff ff       	call   c000f632 <free>
c001c679:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c67c:	e8 b1 2f ff ff       	call   c000f632 <free>
c001c681:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c001c686:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c68a:	8d 50 01             	lea    edx,[eax+0x1]
c001c68d:	89 0c 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],ecx
c001c694:	89 34 85 e0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf120],esi
c001c69b:	89 15 e0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fe0,edx
c001c6a1:	83 c4 10             	add    esp,0x10
c001c6a4:	b0 01                	mov    al,0x1
c001c6a6:	83 c4 5c             	add    esp,0x5c
c001c6a9:	5b                   	pop    ebx
c001c6aa:	5e                   	pop    esi
c001c6ab:	5f                   	pop    edi
c001c6ac:	5d                   	pop    ebp
c001c6ad:	c3                   	ret    

c001c6ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c6ae:	55                   	push   ebp
c001c6af:	57                   	push   edi
c001c6b0:	56                   	push   esi
c001c6b1:	53                   	push   ebx
c001c6b2:	81 ec 68 03 00 00    	sub    esp,0x368
c001c6b8:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c6bf:	8b 1d 34 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031034
c001c6c5:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c6c9:	68 14 01 00 00       	push   0x114
c001c6ce:	e8 4f 2f ff ff       	call   c000f622 <malloc>
c001c6d3:	83 c4 0c             	add    esp,0xc
c001c6d6:	89 c5                	mov    ebp,eax
c001c6d8:	53                   	push   ebx
c001c6d9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c6e0:	50                   	push   eax
c001c6e1:	e8 64 67 ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001c6e6:	5e                   	pop    esi
c001c6e7:	5f                   	pop    edi
c001c6e8:	6a 01                	push   0x1
c001c6ea:	55                   	push   ebp
c001c6eb:	e8 be 67 ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001c6f0:	83 c4 10             	add    esp,0x10
c001c6f3:	85 c0                	test   eax,eax
c001c6f5:	0f 85 8d 06 00 00    	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c6fb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c703:	83 ec 0c             	sub    esp,0xc
c001c706:	6a 34                	push   0x34
c001c708:	e8 15 2f ff ff       	call   c000f622 <malloc>
c001c70d:	5b                   	pop    ebx
c001c70e:	89 c7                	mov    edi,eax
c001c710:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c714:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c717:	53                   	push   ebx
c001c718:	57                   	push   edi
c001c719:	6a 00                	push   0x0
c001c71b:	6a 34                	push   0x34
c001c71d:	55                   	push   ebp
c001c71e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c721:	83 c4 20             	add    esp,0x20
c001c724:	85 c0                	test   eax,eax
c001c726:	0f 85 5c 06 00 00    	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c72c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c732:	0f 85 50 06 00 00    	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c738:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c73b:	85 c0                	test   eax,eax
c001c73d:	0f 84 45 06 00 00    	je     c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c743:	31 d2                	xor    edx,edx
c001c745:	51                   	push   ecx
c001c746:	52                   	push   edx
c001c747:	50                   	push   eax
c001c748:	55                   	push   ebp
c001c749:	e8 1e 68 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c74e:	83 c4 10             	add    esp,0x10
c001c751:	85 c0                	test   eax,eax
c001c753:	0f 85 2f 06 00 00    	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c759:	83 ec 0c             	sub    esp,0xc
c001c75c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c75f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c763:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c767:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c76b:	0f af c2             	imul   eax,edx
c001c76e:	50                   	push   eax
c001c76f:	e8 ae 2e ff ff       	call   c000f622 <malloc>
c001c774:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c777:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c77b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c77e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c782:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c786:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c78a:	0f af c2             	imul   eax,edx
c001c78d:	99                   	cdq    
c001c78e:	52                   	push   edx
c001c78f:	50                   	push   eax
c001c790:	55                   	push   ebp
c001c791:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c794:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c797:	83 c4 20             	add    esp,0x20
c001c79a:	85 c0                	test   eax,eax
c001c79c:	0f 84 e6 05 00 00    	je     c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c7a2:	52                   	push   edx
c001c7a3:	31 d2                	xor    edx,edx
c001c7a5:	52                   	push   edx
c001c7a6:	50                   	push   eax
c001c7a7:	55                   	push   ebp
c001c7a8:	e8 bf 67 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c7ad:	83 c4 10             	add    esp,0x10
c001c7b0:	85 c0                	test   eax,eax
c001c7b2:	0f 85 d0 05 00 00    	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c7b8:	83 ec 0c             	sub    esp,0xc
c001c7bb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7bf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7c3:	31 f6                	xor    esi,esi
c001c7c5:	0f af c2             	imul   eax,edx
c001c7c8:	50                   	push   eax
c001c7c9:	e8 54 2e ff ff       	call   c000f622 <malloc>
c001c7ce:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7dc:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7e0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7e4:	0f af c2             	imul   eax,edx
c001c7e7:	99                   	cdq    
c001c7e8:	52                   	push   edx
c001c7e9:	50                   	push   eax
c001c7ea:	55                   	push   ebp
c001c7eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7ee:	83 c4 20             	add    esp,0x20
c001c7f1:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c7f5:	0f 86 8a 00 00 00    	jbe    c001c885 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c7fb:	0f b7 de             	movzx  ebx,si
c001c7fe:	c1 e3 05             	shl    ebx,0x5
c001c801:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c805:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c808:	75 75                	jne    c001c87f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c80a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c80d:	31 d2                	xor    edx,edx
c001c80f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c813:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c816:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c81a:	50                   	push   eax
c001c81b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c81e:	52                   	push   edx
c001c81f:	50                   	push   eax
c001c820:	55                   	push   ebp
c001c821:	e8 46 67 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c826:	83 c4 10             	add    esp,0x10
c001c829:	85 c0                	test   eax,eax
c001c82b:	0f 85 57 05 00 00    	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c831:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c838:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c83b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c83f:	31 d2                	xor    edx,edx
c001c841:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c845:	83 ec 0c             	sub    esp,0xc
c001c848:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c84c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c853:	50                   	push   eax
c001c854:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c85c:	52                   	push   edx
c001c85d:	50                   	push   eax
c001c85e:	55                   	push   ebp
c001c85f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c862:	83 c4 1c             	add    esp,0x1c
c001c865:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c868:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c86b:	50                   	push   eax
c001c86c:	6a 00                	push   0x0
c001c86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c872:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c876:	50                   	push   eax
c001c877:	e8 46 3e fe ff       	call   c00006c2 <memset>
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	46                   	inc    esi
c001c880:	e9 6c ff ff ff       	jmp    c001c7f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c885:	53                   	push   ebx
c001c886:	31 db                	xor    ebx,ebx
c001c888:	68 00 01 00 00       	push   0x100
c001c88d:	6a 00                	push   0x0
c001c88f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c893:	50                   	push   eax
c001c894:	e8 29 3e fe ff       	call   c00006c2 <memset>
c001c899:	83 c4 0c             	add    esp,0xc
c001c89c:	68 00 01 00 00       	push   0x100
c001c8a1:	6a 00                	push   0x0
c001c8a3:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c8aa:	50                   	push   eax
c001c8ab:	e8 12 3e fe ff       	call   c00006c2 <memset>
c001c8b0:	83 c4 10             	add    esp,0x10
c001c8b3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c8bb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c8c3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c8cb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c8d3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c8db:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c8df:	0f 86 30 01 00 00    	jbe    c001ca15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c8e5:	0f b7 f3             	movzx  esi,bx
c001c8e8:	6b f6 28             	imul   esi,esi,0x28
c001c8eb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c8ef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c8f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8f6:	52                   	push   edx
c001c8f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8fb:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c8ff:	8b 06                	mov    eax,DWORD PTR [esi]
c001c901:	6b d2 28             	imul   edx,edx,0x28
c001c904:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c908:	31 d2                	xor    edx,edx
c001c90a:	52                   	push   edx
c001c90b:	50                   	push   eax
c001c90c:	55                   	push   ebp
c001c90d:	e8 5a 66 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001c912:	83 c4 0c             	add    esp,0xc
c001c915:	6a 20                	push   0x20
c001c917:	6a 00                	push   0x0
c001c919:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c920:	51                   	push   ecx
c001c921:	e8 9c 3d fe ff       	call   c00006c2 <memset>
c001c926:	59                   	pop    ecx
c001c927:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c92a:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c92e:	52                   	push   edx
c001c92f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c936:	51                   	push   ecx
c001c937:	6a 00                	push   0x0
c001c939:	6a 1f                	push   0x1f
c001c93b:	55                   	push   ebp
c001c93c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c93f:	83 c4 1c             	add    esp,0x1c
c001c942:	6a 09                	push   0x9
c001c944:	68 1e b7 02 c0       	push   0xc002b71e
c001c949:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c950:	51                   	push   ecx
c001c951:	e8 e7 3c fe ff       	call   c000063d <memcmp>
c001c956:	83 c4 10             	add    esp,0x10
c001c959:	85 c0                	test   eax,eax
c001c95b:	75 21                	jne    c001c97e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c95d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c961:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c965:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c969:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c96d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c970:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c977:	89 d0                	mov    eax,edx
c001c979:	40                   	inc    eax
c001c97a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c97e:	50                   	push   eax
c001c97f:	6a 09                	push   0x9
c001c981:	68 28 b7 02 c0       	push   0xc002b728
c001c986:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c98d:	50                   	push   eax
c001c98e:	e8 aa 3c fe ff       	call   c000063d <memcmp>
c001c993:	83 c4 10             	add    esp,0x10
c001c996:	85 c0                	test   eax,eax
c001c998:	75 21                	jne    c001c9bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c99e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9a2:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c9a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9aa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9ad:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c9b4:	89 d0                	mov    eax,edx
c001c9b6:	40                   	inc    eax
c001c9b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9bb:	50                   	push   eax
c001c9bc:	50                   	push   eax
c001c9bd:	68 f4 b6 02 c0       	push   0xc002b6f4
c001c9c2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9c9:	50                   	push   eax
c001c9ca:	e8 e3 3d fe ff       	call   c00007b2 <strcmp>
c001c9cf:	83 c4 10             	add    esp,0x10
c001c9d2:	85 c0                	test   eax,eax
c001c9d4:	75 0f                	jne    c001c9e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c9d6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9e5:	50                   	push   eax
c001c9e6:	50                   	push   eax
c001c9e7:	68 fc b6 02 c0       	push   0xc002b6fc
c001c9ec:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9f3:	50                   	push   eax
c001c9f4:	e8 b9 3d fe ff       	call   c00007b2 <strcmp>
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	85 c0                	test   eax,eax
c001c9fe:	75 0f                	jne    c001ca0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001ca00:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca0b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ca0f:	43                   	inc    ebx
c001ca10:	e9 c6 fe ff ff       	jmp    c001c8db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001ca15:	31 d2                	xor    edx,edx
c001ca17:	50                   	push   eax
c001ca18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca1c:	52                   	push   edx
c001ca1d:	50                   	push   eax
c001ca1e:	55                   	push   ebp
c001ca1f:	e8 48 65 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001ca24:	58                   	pop    eax
c001ca25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca29:	e8 f4 2b ff ff       	call   c000f622 <malloc>
c001ca2e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca31:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ca35:	31 d2                	xor    edx,edx
c001ca37:	58                   	pop    eax
c001ca38:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca3c:	53                   	push   ebx
c001ca3d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ca41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca45:	52                   	push   edx
c001ca46:	50                   	push   eax
c001ca47:	55                   	push   ebp
c001ca48:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca4b:	83 c4 14             	add    esp,0x14
c001ca4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca52:	e8 cb 2b ff ff       	call   c000f622 <malloc>
c001ca57:	31 d2                	xor    edx,edx
c001ca59:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca5d:	83 c4 0c             	add    esp,0xc
c001ca60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca64:	52                   	push   edx
c001ca65:	50                   	push   eax
c001ca66:	55                   	push   ebp
c001ca67:	e8 00 65 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001ca6c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca6f:	31 d2                	xor    edx,edx
c001ca71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca74:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ca78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca7c:	52                   	push   edx
c001ca7d:	50                   	push   eax
c001ca7e:	55                   	push   ebp
c001ca7f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca82:	83 c4 20             	add    esp,0x20
c001ca85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ca91:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ca95:	0f 84 f1 02 00 00    	je     c001cd8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001ca9b:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001caa2:	31 d2                	xor    edx,edx
c001caa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caa8:	c1 e8 03             	shr    eax,0x3
c001caab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001caaf:	51                   	push   ecx
c001cab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cab4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cab8:	52                   	push   edx
c001cab9:	50                   	push   eax
c001caba:	55                   	push   ebp
c001cabb:	e8 ac 64 ff ff       	call   c0012f6c <File::seek(unsigned long long)>
c001cac0:	5b                   	pop    ebx
c001cac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cac5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cacc:	e8 51 2b ff ff       	call   c000f622 <malloc>
c001cad1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cad4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cad8:	31 d2                	xor    edx,edx
c001cada:	5e                   	pop    esi
c001cadb:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cadf:	50                   	push   eax
c001cae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cae8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001caef:	52                   	push   edx
c001caf0:	50                   	push   eax
c001caf1:	55                   	push   ebp
c001caf2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caf5:	83 c4 20             	add    esp,0x20
c001caf8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cb00:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cb04:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cb08:	0f 8d 62 02 00 00    	jge    c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001cb0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb16:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cb1b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cb1e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cb22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb26:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cb2a:	89 d8                	mov    eax,ebx
c001cb2c:	c1 e8 08             	shr    eax,0x8
c001cb2f:	89 c6                	mov    esi,eax
c001cb31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb35:	c1 e6 04             	shl    esi,0x4
c001cb38:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cb3c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cb3f:	85 d2                	test   edx,edx
c001cb41:	0f 85 bf 00 00 00    	jne    c001cc06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb47:	83 ec 0c             	sub    esp,0xc
c001cb4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb4e:	03 06                	add    eax,DWORD PTR [esi]
c001cb50:	50                   	push   eax
c001cb51:	e8 4b f8 ff ff       	call   c001c3a1 <Thr::getAddressOfKernelSymbol(char const*)>
c001cb56:	83 c4 10             	add    esp,0x10
c001cb59:	89 c2                	mov    edx,eax
c001cb5b:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cb60:	85 c0                	test   eax,eax
c001cb62:	0f 85 9e 00 00 00    	jne    c001cc06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb68:	83 ec 0c             	sub    esp,0xc
c001cb6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb6f:	03 06                	add    eax,DWORD PTR [esi]
c001cb71:	50                   	push   eax
c001cb72:	e8 65 17 ff ff       	call   c000e2dc <Krnl::resolveCompatibilitySymbol(char*)>
c001cb77:	83 c4 10             	add    esp,0x10
c001cb7a:	89 c2                	mov    edx,eax
c001cb7c:	85 c0                	test   eax,eax
c001cb7e:	0f 85 82 00 00 00    	jne    c001cc06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb84:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cb88:	50                   	push   eax
c001cb89:	50                   	push   eax
c001cb8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb8e:	03 06                	add    eax,DWORD PTR [esi]
c001cb90:	50                   	push   eax
c001cb91:	68 32 b7 02 c0       	push   0xc002b732
c001cb96:	e8 56 5d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001cb9b:	58                   	pop    eax
c001cb9c:	5a                   	pop    edx
c001cb9d:	68 4c b7 02 c0       	push   0xc002b74c
c001cba2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cba9:	50                   	push   eax
c001cbaa:	e8 b2 3b fe ff       	call   c0000761 <strcpy>
c001cbaf:	59                   	pop    ecx
c001cbb0:	58                   	pop    eax
c001cbb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbb5:	03 06                	add    eax,DWORD PTR [esi]
c001cbb7:	50                   	push   eax
c001cbb8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbbf:	50                   	push   eax
c001cbc0:	e8 53 3c fe ff       	call   c0000818 <strcat>
c001cbc5:	58                   	pop    eax
c001cbc6:	5a                   	pop    edx
c001cbc7:	68 e2 b7 02 c0       	push   0xc002b7e2
c001cbcc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbd3:	50                   	push   eax
c001cbd4:	e8 3f 3c fe ff       	call   c0000818 <strcat>
c001cbd9:	83 c4 10             	add    esp,0x10
c001cbdc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cbe1:	0f 84 43 01 00 00    	je     c001cd2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cbe7:	83 ec 0c             	sub    esp,0xc
c001cbea:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbf1:	50                   	push   eax
c001cbf2:	e8 6e d2 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001cbf7:	83 c4 10             	add    esp,0x10
c001cbfa:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cbfe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc02:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cc06:	80 fb 01             	cmp    bl,0x1
c001cc09:	75 7d                	jne    c001cc88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001cc0b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cc12:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc16:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cc1a:	01 ce                	add    esi,ecx
c001cc1c:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc22:	0f 94 c0             	sete   al
c001cc25:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cc2b:	0f 94 c3             	sete   bl
c001cc2e:	09 c3                	or     ebx,eax
c001cc30:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc32:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cc37:	74 36                	je     c001cc6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001cc39:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cc3c:	84 db                	test   bl,bl
c001cc3e:	75 0a                	jne    c001cc4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001cc40:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc44:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc48:	76 37                	jbe    c001cc81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc4a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cc4e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc53:	0f 84 d1 00 00 00    	je     c001cd2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cc59:	83 ec 0c             	sub    esp,0xc
c001cc5c:	68 63 b7 02 c0       	push   0xc002b763
c001cc61:	e8 ff d1 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001cc66:	83 c4 10             	add    esp,0x10
c001cc69:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc6d:	eb 12                	jmp    c001cc81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc6f:	01 c1                	add    ecx,eax
c001cc71:	84 db                	test   bl,bl
c001cc73:	75 0c                	jne    c001cc81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc75:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc79:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc7d:	77 02                	ja     c001cc81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cc7f:	01 d1                	add    ecx,edx
c001cc81:	89 0e                	mov    DWORD PTR [esi],ecx
c001cc83:	e9 df 00 00 00       	jmp    c001cd67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cc88:	80 fb 02             	cmp    bl,0x2
c001cc8b:	75 71                	jne    c001ccfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001cc8d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cc94:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cc98:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cc9c:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cca2:	74 15                	je     c001ccb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001cca4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ccaa:	74 0d                	je     c001ccb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ccac:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccb0:	83 e8 04             	sub    eax,0x4
c001ccb3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ccb7:	76 1f                	jbe    c001ccd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001ccb9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ccbd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccc2:	74 66                	je     c001cd2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ccc4:	83 ec 0c             	sub    esp,0xc
c001ccc7:	68 7f b7 02 c0       	push   0xc002b77f
c001cccc:	e8 94 d1 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001ccd1:	83 c4 10             	add    esp,0x10
c001ccd4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccd8:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccda:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ccdf:	74 13                	je     c001ccf4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001cce1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cce5:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ccec:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ccf0:	01 c8                	add    eax,ecx
c001ccf2:	eb 04                	jmp    c001ccf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001ccf4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ccf8:	01 c2                	add    edx,eax
c001ccfa:	89 16                	mov    DWORD PTR [esi],edx
c001ccfc:	eb 69                	jmp    c001cd67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ccfe:	0f b6 db             	movzx  ebx,bl
c001cd01:	50                   	push   eax
c001cd02:	50                   	push   eax
c001cd03:	53                   	push   ebx
c001cd04:	68 9b b7 02 c0       	push   0xc002b79b
c001cd09:	e8 e3 5b ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001cd0e:	83 c4 10             	add    esp,0x10
c001cd11:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd16:	74 12                	je     c001cd2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cd18:	83 ec 0c             	sub    esp,0xc
c001cd1b:	68 a6 b7 02 c0       	push   0xc002b7a6
c001cd20:	e8 40 d1 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001cd25:	83 c4 10             	add    esp,0x10
c001cd28:	eb 3d                	jmp    c001cd67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cd2a:	83 ec 0c             	sub    esp,0xc
c001cd2d:	55                   	push   ebp
c001cd2e:	e8 d9 61 ff ff       	call   c0012f0c <File::close()>
c001cd33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd36:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd39:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd3c:	59                   	pop    ecx
c001cd3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd41:	e8 ec 28 ff ff       	call   c000f632 <free>
c001cd46:	5b                   	pop    ebx
c001cd47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd4b:	e8 e2 28 ff ff       	call   c000f632 <free>
c001cd50:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd53:	e8 da 28 ff ff       	call   c000f632 <free>
c001cd58:	5e                   	pop    esi
c001cd59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd5d:	e8 d0 28 ff ff       	call   c000f632 <free>
c001cd62:	83 c4 10             	add    esp,0x10
c001cd65:	eb 21                	jmp    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd67:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cd6b:	e9 90 fd ff ff       	jmp    c001cb00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cd70:	83 ec 0c             	sub    esp,0xc
c001cd73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd77:	e8 b6 28 ff ff       	call   c000f632 <free>
c001cd7c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cd80:	83 c4 10             	add    esp,0x10
c001cd83:	e9 05 fd ff ff       	jmp    c001ca8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cd88:	31 c0                	xor    eax,eax
c001cd8a:	eb 33                	jmp    c001cdbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cd8c:	83 ec 0c             	sub    esp,0xc
c001cd8f:	55                   	push   ebp
c001cd90:	e8 77 61 ff ff       	call   c0012f0c <File::close()>
c001cd95:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd98:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd9e:	58                   	pop    eax
c001cd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cda3:	e8 8a 28 ff ff       	call   c000f632 <free>
c001cda8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cdab:	e8 82 28 ff ff       	call   c000f632 <free>
c001cdb0:	5a                   	pop    edx
c001cdb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb5:	e8 78 28 ff ff       	call   c000f632 <free>
c001cdba:	83 c4 10             	add    esp,0x10
c001cdbd:	b0 01                	mov    al,0x1
c001cdbf:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cdc5:	5b                   	pop    ebx
c001cdc6:	5e                   	pop    esi
c001cdc7:	5f                   	pop    edi
c001cdc8:	5d                   	pop    ebp
c001cdc9:	c3                   	ret    

c001cdca <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cdca:	56                   	push   esi
c001cdcb:	31 d2                	xor    edx,edx
c001cdcd:	53                   	push   ebx
c001cdce:	8b 1d 40 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030840
c001cdd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdd8:	39 d3                	cmp    ebx,edx
c001cdda:	7e 1b                	jle    c001cdf7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cddc:	8b 04 95 60 0a 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf5a0]
c001cde3:	39 c8                	cmp    eax,ecx
c001cde5:	77 0d                	ja     c001cdf4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cde7:	8b 34 95 60 08 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf7a0]
c001cdee:	01 c6                	add    esi,eax
c001cdf0:	39 ce                	cmp    esi,ecx
c001cdf2:	77 05                	ja     c001cdf9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cdf4:	42                   	inc    edx
c001cdf5:	eb e1                	jmp    c001cdd8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cdf7:	31 c0                	xor    eax,eax
c001cdf9:	5b                   	pop    ebx
c001cdfa:	5e                   	pop    esi
c001cdfb:	c3                   	ret    

c001cdfc <Thr::getDriverNameFromAddress(unsigned long)>:
c001cdfc:	53                   	push   ebx
c001cdfd:	31 c0                	xor    eax,eax
c001cdff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ce03:	8b 1d 40 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030840
c001ce09:	39 c3                	cmp    ebx,eax
c001ce0b:	7e 22                	jle    c001ce2f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001ce0d:	8b 14 85 60 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf5a0]
c001ce14:	39 ca                	cmp    edx,ecx
c001ce16:	77 14                	ja     c001ce2c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce18:	03 14 85 60 08 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf7a0]
c001ce1f:	39 ca                	cmp    edx,ecx
c001ce21:	76 09                	jbe    c001ce2c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce23:	8b 04 85 60 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3a0]
c001ce2a:	eb 05                	jmp    c001ce31 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ce2c:	40                   	inc    eax
c001ce2d:	eb da                	jmp    c001ce09 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001ce2f:	31 c0                	xor    eax,eax
c001ce31:	5b                   	pop    ebx
c001ce32:	c3                   	ret    

c001ce33 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001ce33:	53                   	push   ebx
c001ce34:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ce38:	53                   	push   ebx
c001ce39:	e8 8c ff ff ff       	call   c001cdca <Thr::getDriverBaseFromAddress(unsigned long)>
c001ce3e:	5a                   	pop    edx
c001ce3f:	31 d2                	xor    edx,edx
c001ce41:	85 c0                	test   eax,eax
c001ce43:	74 04                	je     c001ce49 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ce45:	89 da                	mov    edx,ebx
c001ce47:	29 c2                	sub    edx,eax
c001ce49:	89 d0                	mov    eax,edx
c001ce4b:	5b                   	pop    ebx
c001ce4c:	c3                   	ret    

c001ce4d <Thr::loadDLL(char const*, bool)>:
c001ce4d:	55                   	push   ebp
c001ce4e:	57                   	push   edi
c001ce4f:	56                   	push   esi
c001ce50:	53                   	push   ebx
c001ce51:	81 ec 34 01 00 00    	sub    esp,0x134
c001ce57:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ce5e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001ce65:	56                   	push   esi
c001ce66:	68 be b7 02 c0       	push   0xc002b7be
c001ce6b:	e8 81 5a ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ce70:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ce77:	e8 a6 27 ff ff       	call   c000f622 <malloc>
c001ce7c:	83 c4 0c             	add    esp,0xc
c001ce7f:	89 c3                	mov    ebx,eax
c001ce81:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c001ce87:	56                   	push   esi
c001ce88:	50                   	push   eax
c001ce89:	e8 bc 5f ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001ce8e:	83 c4 10             	add    esp,0x10
c001ce91:	85 db                	test   ebx,ebx
c001ce93:	75 3c                	jne    c001ced1 <Thr::loadDLL(char const*, bool)+0x84>
c001ce95:	89 e8                	mov    eax,ebp
c001ce97:	84 c0                	test   al,al
c001ce99:	0f 84 b0 01 00 00    	je     c001d04f <Thr::loadDLL(char const*, bool)+0x202>
c001ce9f:	50                   	push   eax
c001cea0:	50                   	push   eax
c001cea1:	68 cf b7 02 c0       	push   0xc002b7cf
c001cea6:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001ceaa:	57                   	push   edi
c001ceab:	e8 b1 38 fe ff       	call   c0000761 <strcpy>
c001ceb0:	58                   	pop    eax
c001ceb1:	5a                   	pop    edx
c001ceb2:	56                   	push   esi
c001ceb3:	57                   	push   edi
c001ceb4:	e8 5f 39 fe ff       	call   c0000818 <strcat>
c001ceb9:	59                   	pop    ecx
c001ceba:	58                   	pop    eax
c001cebb:	68 e2 b7 02 c0       	push   0xc002b7e2
c001cec0:	57                   	push   edi
c001cec1:	e8 52 39 fe ff       	call   c0000818 <strcat>
c001cec6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cec9:	e8 97 cf ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001cece:	83 c4 10             	add    esp,0x10
c001ced1:	50                   	push   eax
c001ced2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001ced6:	50                   	push   eax
c001ced7:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cedb:	50                   	push   eax
c001cedc:	53                   	push   ebx
c001cedd:	e8 78 62 ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001cee2:	83 c4 10             	add    esp,0x10
c001cee5:	85 db                	test   ebx,ebx
c001cee7:	74 0c                	je     c001cef5 <Thr::loadDLL(char const*, bool)+0xa8>
c001cee9:	83 ec 0c             	sub    esp,0xc
c001ceec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceee:	53                   	push   ebx
c001ceef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cef2:	83 c4 10             	add    esp,0x10
c001cef5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cefa:	75 0a                	jne    c001cf06 <Thr::loadDLL(char const*, bool)+0xb9>
c001cefc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf00:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cf04:	75 3c                	jne    c001cf42 <Thr::loadDLL(char const*, bool)+0xf5>
c001cf06:	89 e8                	mov    eax,ebp
c001cf08:	84 c0                	test   al,al
c001cf0a:	0f 84 3d 01 00 00    	je     c001d04d <Thr::loadDLL(char const*, bool)+0x200>
c001cf10:	50                   	push   eax
c001cf11:	50                   	push   eax
c001cf12:	68 cf b7 02 c0       	push   0xc002b7cf
c001cf17:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cf1b:	53                   	push   ebx
c001cf1c:	e8 40 38 fe ff       	call   c0000761 <strcpy>
c001cf21:	58                   	pop    eax
c001cf22:	5a                   	pop    edx
c001cf23:	56                   	push   esi
c001cf24:	53                   	push   ebx
c001cf25:	e8 ee 38 fe ff       	call   c0000818 <strcat>
c001cf2a:	59                   	pop    ecx
c001cf2b:	5f                   	pop    edi
c001cf2c:	68 e2 b7 02 c0       	push   0xc002b7e2
c001cf31:	53                   	push   ebx
c001cf32:	e8 e1 38 fe ff       	call   c0000818 <strcat>
c001cf37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf3a:	e8 26 cf ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001cf3f:	83 c4 10             	add    esp,0x10
c001cf42:	e8 4a 4b ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c001cf47:	51                   	push   ecx
c001cf48:	6a 03                	push   0x3
c001cf4a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cf4e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cf52:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001cf58:	83 d3 00             	adc    ebx,0x0
c001cf5b:	89 ca                	mov    edx,ecx
c001cf5d:	89 d1                	mov    ecx,edx
c001cf5f:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001cf63:	51                   	push   ecx
c001cf64:	50                   	push   eax
c001cf65:	e8 62 51 ff ff       	call   c00120cc <VAS::allocatePages(int, int)>
c001cf6a:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf6d:	89 c3                	mov    ebx,eax
c001cf6f:	e8 6b 37 fe ff       	call   c00006df <strlen>
c001cf74:	8b 3d 40 08 03 c0    	mov    edi,DWORD PTR ds:0xc0030840
c001cf7a:	40                   	inc    eax
c001cf7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf7e:	e8 9f 26 ff ff       	call   c000f622 <malloc>
c001cf83:	89 04 bd 60 0c 03 c0 	mov    DWORD PTR [edi*4-0x3ffcf3a0],eax
c001cf8a:	5f                   	pop    edi
c001cf8b:	58                   	pop    eax
c001cf8c:	a1 40 08 03 c0       	mov    eax,ds:0xc0030840
c001cf91:	56                   	push   esi
c001cf92:	ff 34 85 60 0c 03 c0 	push   DWORD PTR [eax*4-0x3ffcf3a0]
c001cf99:	e8 c3 37 fe ff       	call   c0000761 <strcpy>
c001cf9e:	a1 40 08 03 c0       	mov    eax,ds:0xc0030840
c001cfa3:	8d 50 01             	lea    edx,[eax+0x1]
c001cfa6:	89 1c 85 60 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5a0],ebx
c001cfad:	89 15 40 08 03 c0    	mov    DWORD PTR ds:0xc0030840,edx
c001cfb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfb7:	83 c4 0c             	add    esp,0xc
c001cfba:	89 14 85 60 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf7a0],edx
c001cfc1:	6a 01                	push   0x1
c001cfc3:	53                   	push   ebx
c001cfc4:	56                   	push   esi
c001cfc5:	e8 e4 f6 ff ff       	call   c001c6ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	89 c7                	mov    edi,eax
c001cfcf:	fe c8                	dec    al
c001cfd1:	74 16                	je     c001cfe9 <Thr::loadDLL(char const*, bool)+0x19c>
c001cfd3:	89 e8                	mov    eax,ebp
c001cfd5:	84 c0                	test   al,al
c001cfd7:	74 10                	je     c001cfe9 <Thr::loadDLL(char const*, bool)+0x19c>
c001cfd9:	83 ec 0c             	sub    esp,0xc
c001cfdc:	68 e4 b7 02 c0       	push   0xc002b7e4
c001cfe1:	e8 7f ce ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001cfe6:	83 c4 10             	add    esp,0x10
c001cfe9:	31 f6                	xor    esi,esi
c001cfeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cff3:	05 ff 0f 00 00       	add    eax,0xfff
c001cff8:	83 d2 00             	adc    edx,0x0
c001cffb:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cfff:	c1 ea 0c             	shr    edx,0xc
c001d002:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d006:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d00a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d00e:	ba 00 00 00 00       	mov    edx,0x0
c001d013:	89 d0                	mov    eax,edx
c001d015:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d019:	73 2c                	jae    c001d047 <Thr::loadDLL(char const*, bool)+0x1fa>
c001d01b:	e8 71 4a ff ff       	call   c0011a91 <Virt::getAKernelVAS()>
c001d020:	89 f5                	mov    ebp,esi
c001d022:	c1 e5 0c             	shl    ebp,0xc
c001d025:	52                   	push   edx
c001d026:	01 dd                	add    ebp,ebx
c001d028:	52                   	push   edx
c001d029:	55                   	push   ebp
c001d02a:	50                   	push   eax
c001d02b:	e8 16 4c ff ff       	call   c0011c46 <VAS::getPageTableEntry(unsigned long)>
c001d030:	83 c4 10             	add    esp,0x10
c001d033:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d036:	75 0c                	jne    c001d044 <Thr::loadDLL(char const*, bool)+0x1f7>
c001d038:	83 ec 0c             	sub    esp,0xc
c001d03b:	55                   	push   ebp
c001d03c:	e8 f4 2b ff ff       	call   c000fc35 <Phys::freePage(unsigned long)>
c001d041:	83 c4 10             	add    esp,0x10
c001d044:	46                   	inc    esi
c001d045:	eb a4                	jmp    c001cfeb <Thr::loadDLL(char const*, bool)+0x19e>
c001d047:	89 f8                	mov    eax,edi
c001d049:	84 c0                	test   al,al
c001d04b:	75 02                	jne    c001d04f <Thr::loadDLL(char const*, bool)+0x202>
c001d04d:	31 db                	xor    ebx,ebx
c001d04f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d055:	89 d8                	mov    eax,ebx
c001d057:	5b                   	pop    ebx
c001d058:	5e                   	pop    esi
c001d059:	5f                   	pop    edi
c001d05a:	5d                   	pop    ebp
c001d05b:	c3                   	ret    

c001d05c <Thr::executeDLL(unsigned long, void*)>:
c001d05c:	56                   	push   esi
c001d05d:	53                   	push   ebx
c001d05e:	51                   	push   ecx
c001d05f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d063:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d067:	85 db                	test   ebx,ebx
c001d069:	75 10                	jne    c001d07b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d06b:	83 ec 0c             	sub    esp,0xc
c001d06e:	68 03 b8 02 c0       	push   0xc002b803
c001d073:	e8 ed cd ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001d078:	83 c4 10             	add    esp,0x10
c001d07b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001d07f:	89 d8                	mov    eax,ebx
c001d081:	5a                   	pop    edx
c001d082:	5b                   	pop    ebx
c001d083:	5e                   	pop    esi
c001d084:	ff e0                	jmp    eax

c001d086 <changeTSS>:
c001d086:	83 ec 14             	sub    esp,0x14
c001d089:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d08e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d091:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d096:	c1 e2 15             	shl    edx,0x15
c001d099:	29 d0                	sub    eax,edx
c001d09b:	50                   	push   eax
c001d09c:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001d0a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0a7:	05 7c 11 00 00       	add    eax,0x117c
c001d0ac:	50                   	push   eax
c001d0ad:	e8 8e 41 ff ff       	call   c0011240 <TSS::setESP(unsigned long)>
c001d0b2:	83 c4 1c             	add    esp,0x1c
c001d0b5:	c3                   	ret    

c001d0b6 <Process::addArgs(char**)>:
c001d0b6:	57                   	push   edi
c001d0b7:	56                   	push   esi
c001d0b8:	53                   	push   ebx
c001d0b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0bd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d0c1:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d0cb:	85 ff                	test   edi,edi
c001d0cd:	74 3d                	je     c001d10c <Process::addArgs(char**)+0x56>
c001d0cf:	8b 07                	mov    eax,DWORD PTR [edi]
c001d0d1:	85 c0                	test   eax,eax
c001d0d3:	74 37                	je     c001d10c <Process::addArgs(char**)+0x56>
c001d0d5:	31 db                	xor    ebx,ebx
c001d0d7:	83 ec 0c             	sub    esp,0xc
c001d0da:	50                   	push   eax
c001d0db:	e8 ff 35 fe ff       	call   c00006df <strlen>
c001d0e0:	40                   	inc    eax
c001d0e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0e4:	e8 39 25 ff ff       	call   c000f622 <malloc>
c001d0e9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d0f0:	5a                   	pop    edx
c001d0f1:	59                   	pop    ecx
c001d0f2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d0f5:	43                   	inc    ebx
c001d0f6:	50                   	push   eax
c001d0f7:	e8 65 36 fe ff       	call   c0000761 <strcpy>
c001d0fc:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d102:	83 c4 10             	add    esp,0x10
c001d105:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d108:	85 c0                	test   eax,eax
c001d10a:	75 cb                	jne    c001d0d7 <Process::addArgs(char**)+0x21>
c001d10c:	5b                   	pop    ebx
c001d10d:	5e                   	pop    esi
c001d10e:	5f                   	pop    edi
c001d10f:	c3                   	ret    

c001d110 <Process::Process(char const*, Process*, char**)>:
c001d110:	56                   	push   esi
c001d111:	53                   	push   ebx
c001d112:	83 ec 14             	sub    esp,0x14
c001d115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d119:	05 0c 02 00 00       	add    eax,0x20c
c001d11e:	bb 07 00 00 00       	mov    ebx,0x7
c001d123:	89 c6                	mov    esi,eax
c001d125:	85 db                	test   ebx,ebx
c001d127:	78 12                	js     c001d13b <Process::Process(char const*, Process*, char**)+0x2b>
c001d129:	83 ec 0c             	sub    esp,0xc
c001d12c:	56                   	push   esi
c001d12d:	e8 d0 b2 00 00       	call   c0028402 <ThreadControlBlock::ThreadControlBlock()>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	83 c6 63             	add    esi,0x63
c001d138:	4b                   	dec    ebx
c001d139:	eb ea                	jmp    c001d125 <Process::Process(char const*, Process*, char**)+0x15>
c001d13b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d13f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d146:	83 ec 0c             	sub    esp,0xc
c001d149:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d14d:	e8 64 cb ff ff       	call   c0019cb6 <Krnl::newProcessEnv(Process*)>
c001d152:	83 c4 10             	add    esp,0x10
c001d155:	89 c2                	mov    edx,eax
c001d157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d15b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d165:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d16e:	a1 50 d0 02 c0       	mov    eax,ds:0xc002d050
c001d173:	8d 50 01             	lea    edx,[eax+0x1]
c001d176:	89 15 50 d0 02 c0    	mov    DWORD PTR ds:0xc002d050,edx
c001d17c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d180:	89 02                	mov    DWORD PTR [edx],eax
c001d182:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d18a:	83 ec 0c             	sub    esp,0xc
c001d18d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d191:	e8 8c 24 ff ff       	call   c000f622 <malloc>
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	89 c3                	mov    ebx,eax
c001d19b:	83 ec 08             	sub    esp,0x8
c001d19e:	6a 00                	push   0x0
c001d1a0:	53                   	push   ebx
c001d1a1:	e8 ce 52 ff ff       	call   c0012474 <VAS::VAS(bool)>
c001d1a6:	83 c4 10             	add    esp,0x10
c001d1a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1ad:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d1b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1b7:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d1c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d1c9:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d1cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d1d9:	85 c0                	test   eax,eax
c001d1db:	74 42                	je     c001d21f <Process::Process(char const*, Process*, char**)+0x10f>
c001d1dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1e1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d1e7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d1ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d1f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d201:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d20b:	05 0c 01 00 00       	add    eax,0x10c
c001d210:	83 ec 08             	sub    esp,0x8
c001d213:	52                   	push   edx
c001d214:	50                   	push   eax
c001d215:	e8 47 35 fe ff       	call   c0000761 <strcpy>
c001d21a:	83 c4 10             	add    esp,0x10
c001d21d:	eb 63                	jmp    c001d282 <Process::Process(char const*, Process*, char**)+0x172>
c001d21f:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d227:	83 ec 0c             	sub    esp,0xc
c001d22a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d22e:	e8 ef 23 ff ff       	call   c000f622 <malloc>
c001d233:	83 c4 10             	add    esp,0x10
c001d236:	89 c3                	mov    ebx,eax
c001d238:	83 ec 08             	sub    esp,0x8
c001d23b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d23f:	53                   	push   ebx
c001d240:	e8 f9 3c ff ff       	call   c0010f3e <VgaText::VgaText(char const*)>
c001d245:	83 c4 10             	add    esp,0x10
c001d248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d24c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d256:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d25c:	83 ec 0c             	sub    esp,0xc
c001d25f:	50                   	push   eax
c001d260:	e8 cc 30 ff ff       	call   c0010331 <addToTerminalCycle(VgaText*)>
c001d265:	83 c4 10             	add    esp,0x10
c001d268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d26c:	05 0c 01 00 00       	add    eax,0x10c
c001d271:	83 ec 08             	sub    esp,0x8
c001d274:	68 2d b8 02 c0       	push   0xc002b82d
c001d279:	50                   	push   eax
c001d27a:	e8 e2 34 fe ff       	call   c0000761 <strcpy>
c001d27f:	83 c4 10             	add    esp,0x10
c001d282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d286:	83 c0 0c             	add    eax,0xc
c001d289:	83 ec 08             	sub    esp,0x8
c001d28c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d290:	50                   	push   eax
c001d291:	e8 cb 34 fe ff       	call   c0000761 <strcpy>
c001d296:	83 c4 10             	add    esp,0x10
c001d299:	83 ec 08             	sub    esp,0x8
c001d29c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d2a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2a4:	e8 0d fe ff ff       	call   c001d0b6 <Process::addArgs(char**)>
c001d2a9:	83 c4 10             	add    esp,0x10
c001d2ac:	83 ec 08             	sub    esp,0x8
c001d2af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2b7:	e8 bc ee ff ff       	call   c001c178 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d2bc:	83 c4 10             	add    esp,0x10
c001d2bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d2c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d2c7:	83 f0 01             	xor    eax,0x1
c001d2ca:	88 c2                	mov    dl,al
c001d2cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2d0:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d2d6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d2db:	83 ec 08             	sub    esp,0x8
c001d2de:	50                   	push   eax
c001d2df:	68 28 b9 02 c0       	push   0xc002b928
c001d2e4:	e8 08 56 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001d2e9:	83 c4 10             	add    esp,0x10
c001d2ec:	90                   	nop
c001d2ed:	83 c4 14             	add    esp,0x14
c001d2f0:	5b                   	pop    ebx
c001d2f1:	5e                   	pop    esi
c001d2f2:	c3                   	ret    
c001d2f3:	90                   	nop

c001d2f4 <Process::Process(bool, char const*, Process*, char**)>:
c001d2f4:	56                   	push   esi
c001d2f5:	53                   	push   ebx
c001d2f6:	83 ec 24             	sub    esp,0x24
c001d2f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2fd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d305:	05 0c 02 00 00       	add    eax,0x20c
c001d30a:	bb 07 00 00 00       	mov    ebx,0x7
c001d30f:	89 c6                	mov    esi,eax
c001d311:	85 db                	test   ebx,ebx
c001d313:	78 12                	js     c001d327 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d315:	83 ec 0c             	sub    esp,0xc
c001d318:	56                   	push   esi
c001d319:	e8 e4 b0 00 00       	call   c0028402 <ThreadControlBlock::ThreadControlBlock()>
c001d31e:	83 c4 10             	add    esp,0x10
c001d321:	83 c6 63             	add    esi,0x63
c001d324:	4b                   	dec    ebx
c001d325:	eb ea                	jmp    c001d311 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d327:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d32b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d332:	83 ec 0c             	sub    esp,0xc
c001d335:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d339:	e8 78 c9 ff ff       	call   c0019cb6 <Krnl::newProcessEnv(Process*)>
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	89 c2                	mov    edx,eax
c001d343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d347:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d34d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d351:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d35a:	a1 50 d0 02 c0       	mov    eax,ds:0xc002d050
c001d35f:	8d 50 01             	lea    edx,[eax+0x1]
c001d362:	89 15 50 d0 02 c0    	mov    DWORD PTR ds:0xc002d050,edx
c001d368:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d36c:	89 02                	mov    DWORD PTR [edx],eax
c001d36e:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d376:	83 ec 0c             	sub    esp,0xc
c001d379:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d37d:	e8 a0 22 ff ff       	call   c000f622 <malloc>
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	89 c3                	mov    ebx,eax
c001d387:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d38c:	83 ec 08             	sub    esp,0x8
c001d38f:	50                   	push   eax
c001d390:	53                   	push   ebx
c001d391:	e8 de 50 ff ff       	call   c0012474 <VAS::VAS(bool)>
c001d396:	83 c4 10             	add    esp,0x10
c001d399:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d39d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d3a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3a7:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d3b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3b5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d3b9:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d3bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3c3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3c9:	85 c0                	test   eax,eax
c001d3cb:	74 42                	je     c001d40f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d3cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3d1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3d7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d3dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3e1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d3e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3eb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3f1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d3f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3fb:	05 0c 01 00 00       	add    eax,0x10c
c001d400:	83 ec 08             	sub    esp,0x8
c001d403:	52                   	push   edx
c001d404:	50                   	push   eax
c001d405:	e8 57 33 fe ff       	call   c0000761 <strcpy>
c001d40a:	83 c4 10             	add    esp,0x10
c001d40d:	eb 63                	jmp    c001d472 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d40f:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d417:	83 ec 0c             	sub    esp,0xc
c001d41a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d41e:	e8 ff 21 ff ff       	call   c000f622 <malloc>
c001d423:	83 c4 10             	add    esp,0x10
c001d426:	89 c3                	mov    ebx,eax
c001d428:	83 ec 08             	sub    esp,0x8
c001d42b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d42f:	53                   	push   ebx
c001d430:	e8 09 3b ff ff       	call   c0010f3e <VgaText::VgaText(char const*)>
c001d435:	83 c4 10             	add    esp,0x10
c001d438:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d43c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d442:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d446:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d44c:	83 ec 0c             	sub    esp,0xc
c001d44f:	50                   	push   eax
c001d450:	e8 dc 2e ff ff       	call   c0010331 <addToTerminalCycle(VgaText*)>
c001d455:	83 c4 10             	add    esp,0x10
c001d458:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d45c:	05 0c 01 00 00       	add    eax,0x10c
c001d461:	83 ec 08             	sub    esp,0x8
c001d464:	68 2d b8 02 c0       	push   0xc002b82d
c001d469:	50                   	push   eax
c001d46a:	e8 f2 32 fe ff       	call   c0000761 <strcpy>
c001d46f:	83 c4 10             	add    esp,0x10
c001d472:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d476:	83 c0 0c             	add    eax,0xc
c001d479:	83 ec 08             	sub    esp,0x8
c001d47c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d480:	50                   	push   eax
c001d481:	e8 db 32 fe ff       	call   c0000761 <strcpy>
c001d486:	83 c4 10             	add    esp,0x10
c001d489:	83 ec 08             	sub    esp,0x8
c001d48c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d490:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d494:	e8 1d fc ff ff       	call   c001d0b6 <Process::addArgs(char**)>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	90                   	nop
c001d49d:	83 c4 24             	add    esp,0x24
c001d4a0:	5b                   	pop    ebx
c001d4a1:	5e                   	pop    esi
c001d4a2:	c3                   	ret    

c001d4a3 <disableIRQs()>:
c001d4a3:	fa                   	cli    
c001d4a4:	ff 05 0c 10 03 c0    	inc    DWORD PTR ds:0xc003100c
c001d4aa:	c3                   	ret    

c001d4ab <getIRQNestingLevel()>:
c001d4ab:	a1 0c 10 03 c0       	mov    eax,ds:0xc003100c
c001d4b0:	c3                   	ret    

c001d4b1 <enableIRQs()>:
c001d4b1:	a1 0c 10 03 c0       	mov    eax,ds:0xc003100c
c001d4b6:	48                   	dec    eax
c001d4b7:	a3 0c 10 03 c0       	mov    ds:0xc003100c,eax
c001d4bc:	75 01                	jne    c001d4bf <enableIRQs()+0xe>
c001d4be:	fb                   	sti    
c001d4bf:	c3                   	ret    

c001d4c0 <lockScheduler()>:
c001d4c0:	eb e1                	jmp    c001d4a3 <disableIRQs()>

c001d4c2 <unlockScheduler()>:
c001d4c2:	eb ed                	jmp    c001d4b1 <enableIRQs()>

c001d4c4 <userModeEntryPoint(void*)>:
c001d4c4:	83 ec 0c             	sub    esp,0xc
c001d4c7:	e8 f6 ff ff ff       	call   c001d4c2 <unlockScheduler()>
c001d4cc:	fb                   	sti    
c001d4cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d4d5:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d4db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4df:	83 c4 0c             	add    esp,0xc
c001d4e2:	e9 43 2e fe ff       	jmp    c000032a <goToUsermode>

c001d4e7 <lockStuff()>:
c001d4e7:	e8 b7 ff ff ff       	call   c001d4a3 <disableIRQs()>
c001d4ec:	ff 05 08 10 03 c0    	inc    DWORD PTR ds:0xc0031008
c001d4f2:	c3                   	ret    

c001d4f3 <taskStartupFunction>:
c001d4f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4f8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d4fb:	c3                   	ret    

c001d4fc <updateTimeUsed()>:
c001d4fc:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c001d501:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d507:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d50e:	74 50                	je     c001d560 <updateTimeUsed()+0x64>
c001d510:	57                   	push   edi
c001d511:	56                   	push   esi
c001d512:	53                   	push   ebx
c001d513:	0f 31                	rdtsc  
c001d515:	89 c1                	mov    ecx,eax
c001d517:	a3 48 10 03 c0       	mov    ds:0xc0031048,eax
c001d51c:	2b 0d 38 10 03 c0    	sub    ecx,DWORD PTR ds:0xc0031038
c001d522:	89 d3                	mov    ebx,edx
c001d524:	89 0d 40 10 03 c0    	mov    DWORD PTR ds:0xc0031040,ecx
c001d52a:	1b 1d 3c 10 03 c0    	sbb    ebx,DWORD PTR ds:0xc003103c
c001d530:	a3 38 10 03 c0       	mov    ds:0xc0031038,eax
c001d535:	89 1d 44 10 03 c0    	mov    DWORD PTR ds:0xc0031044,ebx
c001d53b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d540:	89 15 4c 10 03 c0    	mov    DWORD PTR ds:0xc003104c,edx
c001d546:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d549:	89 15 3c 10 03 c0    	mov    DWORD PTR ds:0xc003103c,edx
c001d54f:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d552:	01 f1                	add    ecx,esi
c001d554:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d557:	11 fb                	adc    ebx,edi
c001d559:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d55c:	5b                   	pop    ebx
c001d55d:	5e                   	pop    esi
c001d55e:	5f                   	pop    edi
c001d55f:	c3                   	ret    
c001d560:	c3                   	ret    

c001d561 <switchToThread(ThreadControlBlock*)>:
c001d561:	53                   	push   ebx
c001d562:	83 ec 08             	sub    esp,0x8
c001d565:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c001d56a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d56e:	85 c0                	test   eax,eax
c001d570:	75 30                	jne    c001d5a2 <switchToThread(ThreadControlBlock*)+0x41>
c001d572:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d575:	3c ff                	cmp    al,0xff
c001d577:	74 25                	je     c001d59e <switchToThread(ThreadControlBlock*)+0x3d>
c001d579:	0f b6 d0             	movzx  edx,al
c001d57c:	b8 84 03 00 00       	mov    eax,0x384
c001d581:	29 d0                	sub    eax,edx
c001d583:	c1 e0 10             	shl    eax,0x10
c001d586:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d589:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d58c:	e8 6b ff ff ff       	call   c001d4fc <updateTimeUsed()>
c001d591:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d595:	83 c4 08             	add    esp,0x8
c001d598:	5b                   	pop    ebx
c001d599:	e9 c4 2d fe ff       	jmp    c0000362 <switchToThreadASM>
c001d59e:	31 c0                	xor    eax,eax
c001d5a0:	eb e7                	jmp    c001d589 <switchToThread(ThreadControlBlock*)+0x28>
c001d5a2:	c7 05 04 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031004,0x1
c001d5ac:	83 c4 08             	add    esp,0x8
c001d5af:	5b                   	pop    ebx
c001d5b0:	c3                   	ret    
c001d5b1:	90                   	nop

c001d5b2 <Semaphore::Semaphore(int)>:
c001d5b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5ba:	89 10                	mov    DWORD PTR [eax],edx
c001d5bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5c0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5d6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d5dd:	90                   	nop
c001d5de:	c3                   	ret    
c001d5df:	90                   	nop

c001d5e0 <Mutex::Mutex()>:
c001d5e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5e4:	6a 01                	push   0x1
c001d5e6:	50                   	push   eax
c001d5e7:	e8 c6 ff ff ff       	call   c001d5b2 <Semaphore::Semaphore(int)>
c001d5ec:	83 c4 08             	add    esp,0x8
c001d5ef:	90                   	nop
c001d5f0:	c3                   	ret    
c001d5f1:	90                   	nop

c001d5f2 <Process::createThread(void (*)(void*), void*, int)>:
c001d5f2:	55                   	push   ebp
c001d5f3:	31 c9                	xor    ecx,ecx
c001d5f5:	57                   	push   edi
c001d5f6:	56                   	push   esi
c001d5f7:	53                   	push   ebx
c001d5f8:	83 ec 1c             	sub    esp,0x1c
c001d5fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5ff:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d606:	89 f2                	mov    edx,esi
c001d608:	0f b7 c2             	movzx  eax,dx
c001d60b:	83 e2 01             	and    edx,0x1
c001d60e:	74 14                	je     c001d624 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d610:	d1 f8                	sar    eax,1
c001d612:	41                   	inc    ecx
c001d613:	89 c2                	mov    edx,eax
c001d615:	83 f9 10             	cmp    ecx,0x10
c001d618:	75 ee                	jne    c001d608 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d61a:	83 c4 1c             	add    esp,0x1c
c001d61d:	31 c0                	xor    eax,eax
c001d61f:	5b                   	pop    ebx
c001d620:	5e                   	pop    esi
c001d621:	5f                   	pop    edi
c001d622:	5d                   	pop    ebp
c001d623:	c3                   	ret    
c001d624:	83 ec 08             	sub    esp,0x8
c001d627:	b8 01 00 00 00       	mov    eax,0x1
c001d62c:	d3 e0                	shl    eax,cl
c001d62e:	09 c6                	or     esi,eax
c001d630:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d636:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d63d:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d640:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d643:	01 ce                	add    esi,ecx
c001d645:	89 f0                	mov    eax,esi
c001d647:	c1 e0 05             	shl    eax,0x5
c001d64a:	01 c6                	add    esi,eax
c001d64c:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d64f:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d655:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d65b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d65f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d665:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d66b:	89 ca                	mov    edx,ecx
c001d66d:	f7 da                	neg    edx
c001d66f:	c1 e2 15             	shl    edx,0x15
c001d672:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d678:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d67e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d682:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d68c:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d692:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d696:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d69c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d6a6:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d6b0:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d6b7:	50                   	push   eax
c001d6b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6bc:	68 28 10 03 c0       	push   0xc0031028
c001d6c1:	e8 ca ab 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6c6:	83 c4 10             	add    esp,0x10
c001d6c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6cd:	83 c4 1c             	add    esp,0x1c
c001d6d0:	5b                   	pop    ebx
c001d6d1:	5e                   	pop    esi
c001d6d2:	5f                   	pop    edi
c001d6d3:	5d                   	pop    ebp
c001d6d4:	c3                   	ret    
c001d6d5:	90                   	nop

c001d6d6 <Process::createUserThread()>:
c001d6d6:	83 ec 0c             	sub    esp,0xc
c001d6d9:	68 80 00 00 00       	push   0x80
c001d6de:	6a 00                	push   0x0
c001d6e0:	68 c4 d4 01 c0       	push   0xc001d4c4
c001d6e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e9:	e8 04 ff ff ff       	call   c001d5f2 <Process::createThread(void (*)(void*), void*, int)>
c001d6ee:	83 c4 1c             	add    esp,0x1c
c001d6f1:	c3                   	ret    

c001d6f2 <setupMultitasking(void (*)())>:
c001d6f2:	56                   	push   esi
c001d6f3:	53                   	push   ebx
c001d6f4:	53                   	push   ebx
c001d6f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6f9:	eb 10                	jmp    c001d70b <setupMultitasking(void (*)())+0x19>
c001d6fb:	83 ec 0c             	sub    esp,0xc
c001d6fe:	68 28 10 03 c0       	push   0xc0031028
c001d703:	e8 da aa 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d708:	83 c4 10             	add    esp,0x10
c001d70b:	83 ec 0c             	sub    esp,0xc
c001d70e:	68 28 10 03 c0       	push   0xc0031028
c001d713:	e8 ae aa 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d718:	83 c4 10             	add    esp,0x10
c001d71b:	84 c0                	test   al,al
c001d71d:	74 dc                	je     c001d6fb <setupMultitasking(void (*)())+0x9>
c001d71f:	83 ec 0c             	sub    esp,0xc
c001d722:	68 3f 07 00 00       	push   0x73f
c001d727:	e8 f6 1e ff ff       	call   c000f622 <malloc>
c001d72c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d733:	89 c3                	mov    ebx,eax
c001d735:	6a 00                	push   0x0
c001d737:	68 31 b8 02 c0       	push   0xc002b831
c001d73c:	6a 01                	push   0x1
c001d73e:	50                   	push   eax
c001d73f:	e8 b0 fb ff ff       	call   c001d2f4 <Process::Process(bool, char const*, Process*, char**)>
c001d744:	83 c4 18             	add    esp,0x18
c001d747:	89 1d 34 10 03 c0    	mov    DWORD PTR ds:0xc0031034,ebx
c001d74d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d753:	68 50 b9 02 c0       	push   0xc002b950
c001d758:	e8 94 51 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001d75d:	58                   	pop    eax
c001d75e:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d764:	e8 4a 33 ff ff       	call   c0010ab3 <setActiveTerminal(VgaText*)>
c001d769:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d771:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d777:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d77a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d784:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d78a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d790:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d79a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d7a4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d7ae:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d7b4:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d7ba:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d7c4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d7ca:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d7d4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d7da:	5a                   	pop    edx
c001d7db:	59                   	pop    ecx
c001d7dc:	68 2d b8 02 c0       	push   0xc002b82d
c001d7e1:	50                   	push   eax
c001d7e2:	e8 7a 2f fe ff       	call   c0000761 <strcpy>
c001d7e7:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d7ee:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d7f2:	83 c4 14             	add    esp,0x14
c001d7f5:	5b                   	pop    ebx
c001d7f6:	5e                   	pop    esi
c001d7f7:	e9 58 2b fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d7fc <schedule()>:
c001d7fc:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c001d801:	85 c0                	test   eax,eax
c001d803:	74 0b                	je     c001d810 <schedule()+0x14>
c001d805:	c7 05 04 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031004,0x1
c001d80f:	c3                   	ret    
c001d810:	53                   	push   ebx
c001d811:	83 ec 14             	sub    esp,0x14
c001d814:	68 28 10 03 c0       	push   0xc0031028
c001d819:	e8 a8 a9 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d81e:	83 c4 10             	add    esp,0x10
c001d821:	84 c0                	test   al,al
c001d823:	75 38                	jne    c001d85d <schedule()+0x61>
c001d825:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d82a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d82d:	4a                   	dec    edx
c001d82e:	74 32                	je     c001d862 <schedule()+0x66>
c001d830:	83 ec 0c             	sub    esp,0xc
c001d833:	68 28 10 03 c0       	push   0xc0031028
c001d838:	e8 81 a9 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d83d:	c7 04 24 28 10 03 c0 	mov    DWORD PTR [esp],0xc0031028
c001d844:	89 c3                	mov    ebx,eax
c001d846:	e8 97 a9 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d84b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d852:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d855:	e8 07 fd ff ff       	call   c001d561 <switchToThread(ThreadControlBlock*)>
c001d85a:	83 c4 10             	add    esp,0x10
c001d85d:	83 c4 08             	add    esp,0x8
c001d860:	5b                   	pop    ebx
c001d861:	c3                   	ret    
c001d862:	83 ec 08             	sub    esp,0x8
c001d865:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d86c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d872:	68 28 10 03 c0       	push   0xc0031028
c001d877:	e8 14 aa 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d87c:	83 c4 10             	add    esp,0x10
c001d87f:	eb af                	jmp    c001d830 <schedule()+0x34>

c001d881 <unlockStuff()>:
c001d881:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c001d886:	48                   	dec    eax
c001d887:	a3 08 10 03 c0       	mov    ds:0xc0031008,eax
c001d88c:	75 09                	jne    c001d897 <unlockStuff()+0x16>
c001d88e:	a1 04 10 03 c0       	mov    eax,ds:0xc0031004
c001d893:	85 c0                	test   eax,eax
c001d895:	75 05                	jne    c001d89c <unlockStuff()+0x1b>
c001d897:	e9 15 fc ff ff       	jmp    c001d4b1 <enableIRQs()>
c001d89c:	83 ec 0c             	sub    esp,0xc
c001d89f:	c7 05 04 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031004,0x0
c001d8a9:	e8 4e ff ff ff       	call   c001d7fc <schedule()>
c001d8ae:	83 c4 0c             	add    esp,0xc
c001d8b1:	e9 fb fb ff ff       	jmp    c001d4b1 <enableIRQs()>

c001d8b6 <Semaphore::tryAcquire()>:
c001d8b6:	83 ec 0c             	sub    esp,0xc
c001d8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8bd:	e8 25 fc ff ff       	call   c001d4e7 <lockStuff()>
c001d8c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d8c5:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d8c7:	7c 0b                	jl     c001d8d4 <Semaphore::tryAcquire()+0x1e>
c001d8c9:	e8 b3 ff ff ff       	call   c001d881 <unlockStuff()>
c001d8ce:	31 c0                	xor    eax,eax
c001d8d0:	83 c4 0c             	add    esp,0xc
c001d8d3:	c3                   	ret    
c001d8d4:	42                   	inc    edx
c001d8d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d8d8:	e8 a4 ff ff ff       	call   c001d881 <unlockStuff()>
c001d8dd:	b0 01                	mov    al,0x1
c001d8df:	83 c4 0c             	add    esp,0xc
c001d8e2:	c3                   	ret    
c001d8e3:	90                   	nop

c001d8e4 <Semaphore::assertLocked(char const*)>:
c001d8e4:	83 ec 0c             	sub    esp,0xc
c001d8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d8ef:	e8 f3 fb ff ff       	call   c001d4e7 <lockStuff()>
c001d8f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d8f6:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d8f9:	7c 05                	jl     c001d900 <Semaphore::assertLocked(char const*)+0x1c>
c001d8fb:	83 c4 0c             	add    esp,0xc
c001d8fe:	eb 81                	jmp    c001d881 <unlockStuff()>
c001d900:	83 ec 0c             	sub    esp,0xc
c001d903:	52                   	push   edx
c001d904:	e8 5c c5 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001d909:	83 c4 10             	add    esp,0x10
c001d90c:	83 c4 0c             	add    esp,0xc
c001d90f:	e9 6d ff ff ff       	jmp    c001d881 <unlockStuff()>

c001d914 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d914:	83 ec 0c             	sub    esp,0xc
c001d917:	e8 8f fb ff ff       	call   c001d4ab <getIRQNestingLevel()>
c001d91c:	83 ec 08             	sub    esp,0x8
c001d91f:	50                   	push   eax
c001d920:	68 84 b9 02 c0       	push   0xc002b984
c001d925:	e8 c7 4f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001d92a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d92e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d933:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d936:	e8 c1 fe ff ff       	call   c001d7fc <schedule()>
c001d93b:	e8 82 fb ff ff       	call   c001d4c2 <unlockScheduler()>
c001d940:	e8 66 fb ff ff       	call   c001d4ab <getIRQNestingLevel()>
c001d945:	5a                   	pop    edx
c001d946:	59                   	pop    ecx
c001d947:	50                   	push   eax
c001d948:	68 b8 b9 02 c0       	push   0xc002b9b8
c001d94d:	e8 9f 4f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001d952:	83 c4 1c             	add    esp,0x1c
c001d955:	c3                   	ret    

c001d956 <blockTask(TaskState)>:
c001d956:	83 ec 0c             	sub    esp,0xc
c001d959:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d95d:	e8 5e fb ff ff       	call   c001d4c0 <lockScheduler()>
c001d962:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d967:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d96a:	e8 8d fe ff ff       	call   c001d7fc <schedule()>
c001d96f:	83 c4 0c             	add    esp,0xc
c001d972:	e9 4b fb ff ff       	jmp    c001d4c2 <unlockScheduler()>

c001d977 <waitTask(int, int*, int)>:
c001d977:	83 ec 18             	sub    esp,0x18
c001d97a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d97f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d983:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d986:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d98a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d98f:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d992:	6a 07                	push   0x7
c001d994:	e8 bd ff ff ff       	call   c001d956 <blockTask(TaskState)>
c001d999:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d99e:	83 c4 10             	add    esp,0x10
c001d9a1:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d9a4:	85 d2                	test   edx,edx
c001d9a6:	74 0a                	je     c001d9b2 <waitTask(int, int*, int)+0x3b>
c001d9a8:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d9ab:	89 02                	mov    DWORD PTR [edx],eax
c001d9ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9b2:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d9b5:	83 c4 0c             	add    esp,0xc
c001d9b8:	c3                   	ret    

c001d9b9 <nanoSleepUntil(unsigned long long)>:
c001d9b9:	83 ec 0c             	sub    esp,0xc
c001d9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9c4:	3b 05 50 e1 02 c0    	cmp    eax,DWORD PTR ds:0xc002e150
c001d9ca:	89 d1                	mov    ecx,edx
c001d9cc:	1b 0d 54 e1 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e154
c001d9d2:	73 04                	jae    c001d9d8 <nanoSleepUntil(unsigned long long)+0x1f>
c001d9d4:	83 c4 0c             	add    esp,0xc
c001d9d7:	c3                   	ret    
c001d9d8:	e8 0a fb ff ff       	call   c001d4e7 <lockStuff()>
c001d9dd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d9e3:	83 ec 08             	sub    esp,0x8
c001d9e6:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d9e9:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d9ec:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d9f2:	68 1c 10 03 c0       	push   0xc003101c
c001d9f7:	e8 94 a8 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d9fc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001da03:	e8 4e ff ff ff       	call   c001d956 <blockTask(TaskState)>
c001da08:	83 c4 1c             	add    esp,0x1c
c001da0b:	e9 71 fe ff ff       	jmp    c001d881 <unlockStuff()>

c001da10 <nanoSleep(unsigned long long)>:
c001da10:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c001da15:	8b 15 54 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e154
c001da1b:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001da1f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001da23:	eb 94                	jmp    c001d9b9 <nanoSleepUntil(unsigned long long)>

c001da25 <sleep(unsigned long long)>:
c001da25:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001da2d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001da32:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001da36:	01 ca                	add    edx,ecx
c001da38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da3c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001da40:	eb ce                	jmp    c001da10 <nanoSleep(unsigned long long)>

c001da42 <Semaphore::acquire()>:
c001da42:	83 ec 0c             	sub    esp,0xc
c001da45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da49:	e8 99 fa ff ff       	call   c001d4e7 <lockStuff()>
c001da4e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001da51:	3b 10                	cmp    edx,DWORD PTR [eax]
c001da53:	7d 0c                	jge    c001da61 <Semaphore::acquire()+0x1f>
c001da55:	42                   	inc    edx
c001da56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001da59:	83 c4 0c             	add    esp,0xc
c001da5c:	e9 20 fe ff ff       	jmp    c001d881 <unlockStuff()>
c001da61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001da67:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001da6e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001da71:	85 d2                	test   edx,edx
c001da73:	74 2a                	je     c001da9f <Semaphore::acquire()+0x5d>
c001da75:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001da78:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001da7e:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001da81:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001da87:	83 ec 0c             	sub    esp,0xc
c001da8a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001da8d:	6a 05                	push   0x5
c001da8f:	e8 c2 fe ff ff       	call   c001d956 <blockTask(TaskState)>
c001da94:	83 c4 10             	add    esp,0x10
c001da97:	83 c4 0c             	add    esp,0xc
c001da9a:	e9 e2 fd ff ff       	jmp    c001d881 <unlockStuff()>
c001da9f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001daa5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001daa8:	eb d7                	jmp    c001da81 <Semaphore::acquire()+0x3f>

c001daaa <taskReturned>:
c001daaa:	83 ec 18             	sub    esp,0x18
c001daad:	68 ec b9 02 c0       	push   0xc002b9ec
c001dab2:	e8 ae c3 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001dab7:	83 c4 10             	add    esp,0x10
c001daba:	83 ec 0c             	sub    esp,0xc
c001dabd:	6a 02                	push   0x2
c001dabf:	e8 92 fe ff ff       	call   c001d956 <blockTask(TaskState)>
c001dac4:	e8 f7 f9 ff ff       	call   c001d4c0 <lockScheduler()>
c001dac9:	e8 2e fd ff ff       	call   c001d7fc <schedule()>
c001dace:	e8 ef f9 ff ff       	call   c001d4c2 <unlockScheduler()>
c001dad3:	83 c4 10             	add    esp,0x10
c001dad6:	eb e2                	jmp    c001daba <taskReturned+0x10>

c001dad8 <unblockTask(ThreadControlBlock*)>:
c001dad8:	53                   	push   ebx
c001dad9:	83 ec 08             	sub    esp,0x8
c001dadc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dae0:	e8 db f9 ff ff       	call   c001d4c0 <lockScheduler()>
c001dae5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dae8:	85 c0                	test   eax,eax
c001daea:	74 5c                	je     c001db48 <unblockTask(ThreadControlBlock*)+0x70>
c001daec:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001daef:	48                   	dec    eax
c001daf0:	74 31                	je     c001db23 <unblockTask(ThreadControlBlock*)+0x4b>
c001daf2:	83 ec 0c             	sub    esp,0xc
c001daf5:	68 28 10 03 c0       	push   0xc0031028
c001dafa:	e8 bf a6 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001daff:	83 c4 10             	add    esp,0x10
c001db02:	85 c0                	test   eax,eax
c001db04:	75 17                	jne    c001db1d <unblockTask(ThreadControlBlock*)+0x45>
c001db06:	eb 65                	jmp    c001db6d <unblockTask(ThreadControlBlock*)+0x95>
c001db08:	83 ec 08             	sub    esp,0x8
c001db0b:	50                   	push   eax
c001db0c:	68 28 10 03 c0       	push   0xc0031028
c001db11:	e8 82 a9 00 00       	call   c0028498 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001db16:	83 c4 10             	add    esp,0x10
c001db19:	85 c0                	test   eax,eax
c001db1b:	74 50                	je     c001db6d <unblockTask(ThreadControlBlock*)+0x95>
c001db1d:	39 c3                	cmp    ebx,eax
c001db1f:	75 e7                	jne    c001db08 <unblockTask(ThreadControlBlock*)+0x30>
c001db21:	eb 1c                	jmp    c001db3f <unblockTask(ThreadControlBlock*)+0x67>
c001db23:	83 ec 0c             	sub    esp,0xc
c001db26:	68 dc ba 02 c0       	push   0xc002badc
c001db2b:	e8 c1 4d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001db30:	c7 04 24 68 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba68
c001db37:	e8 b5 4d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001db3c:	83 c4 10             	add    esp,0x10
c001db3f:	83 c4 08             	add    esp,0x8
c001db42:	5b                   	pop    ebx
c001db43:	e9 7a f9 ff ff       	jmp    c001d4c2 <unlockScheduler()>
c001db48:	83 ec 0c             	sub    esp,0xc
c001db4b:	68 20 ba 02 c0       	push   0xc002ba20
c001db50:	e8 9c 4d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001db55:	c7 04 24 68 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba68
c001db5c:	e8 90 4d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001db61:	83 c4 10             	add    esp,0x10
c001db64:	83 c4 08             	add    esp,0x8
c001db67:	5b                   	pop    ebx
c001db68:	e9 55 f9 ff ff       	jmp    c001d4c2 <unlockScheduler()>
c001db6d:	83 ec 08             	sub    esp,0x8
c001db70:	53                   	push   ebx
c001db71:	68 28 10 03 c0       	push   0xc0031028
c001db76:	e8 15 a7 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db7b:	83 c4 10             	add    esp,0x10
c001db7e:	83 c4 08             	add    esp,0x8
c001db81:	5b                   	pop    ebx
c001db82:	e9 3b f9 ff ff       	jmp    c001d4c2 <unlockScheduler()>

c001db87 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001db87:	55                   	push   ebp
c001db88:	57                   	push   edi
c001db89:	56                   	push   esi
c001db8a:	53                   	push   ebx
c001db8b:	83 ec 1c             	sub    esp,0x1c
c001db8e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db92:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001db95:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001db9b:	85 ff                	test   edi,edi
c001db9d:	7e 20                	jle    c001dbbf <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001db9f:	31 f6                	xor    esi,esi
c001dba1:	83 ec 0c             	sub    esp,0xc
c001dba4:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dbab:	46                   	inc    esi
c001dbac:	e8 81 1a ff ff       	call   c000f632 <free>
c001dbb1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dbb4:	83 c4 10             	add    esp,0x10
c001dbb7:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dbbd:	7f e2                	jg     c001dba1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dbbf:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbc9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dbce:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dbd1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dbd4:	d3 c0                	rol    eax,cl
c001dbd6:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dbdd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dbe0:	89 f7                	mov    edi,esi
c001dbe2:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dbea:	0f 85 74 01 00 00    	jne    c001dd64 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001dbf0:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dbf6:	85 ed                	test   ebp,ebp
c001dbf8:	74 1b                	je     c001dc15 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dbfa:	83 ec 0c             	sub    esp,0xc
c001dbfd:	55                   	push   ebp
c001dbfe:	e8 cf bf ff ff       	call   c0019bd2 <EnvVarContainer::~EnvVarContainer()>
c001dc03:	59                   	pop    ecx
c001dc04:	5e                   	pop    esi
c001dc05:	6a 0c                	push   0xc
c001dc07:	55                   	push   ebp
c001dc08:	e8 04 4c ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c001dc0d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dc10:	83 c4 10             	add    esp,0x10
c001dc13:	89 f7                	mov    edi,esi
c001dc15:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc1b:	85 c0                	test   eax,eax
c001dc1d:	0f 84 aa 00 00 00    	je     c001dccd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dc23:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dc26:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dc2a:	31 c9                	xor    ecx,ecx
c001dc2c:	eb 10                	jmp    c001dc3e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dc2e:	41                   	inc    ecx
c001dc2f:	83 f9 10             	cmp    ecx,0x10
c001dc32:	0f 84 95 00 00 00    	je     c001dccd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dc38:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc3e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dc45:	d3 fa                	sar    edx,cl
c001dc47:	83 e2 01             	and    edx,0x1
c001dc4a:	74 e2                	je     c001dc2e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc4c:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dc4f:	01 ca                	add    edx,ecx
c001dc51:	89 d5                	mov    ebp,edx
c001dc53:	c1 e5 05             	shl    ebp,0x5
c001dc56:	01 ea                	add    edx,ebp
c001dc58:	01 d0                	add    eax,edx
c001dc5a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dc60:	83 fd 07             	cmp    ebp,0x7
c001dc63:	75 c9                	jne    c001dc2e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc65:	05 40 02 00 00       	add    eax,0x240
c001dc6a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dc6d:	83 fd ff             	cmp    ebp,0xffffffff
c001dc70:	0f 8c 08 01 00 00    	jl     c001dd7e <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001dc76:	0f 84 b9 01 00 00    	je     c001de35 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001dc7c:	85 ed                	test   ebp,ebp
c001dc7e:	0f 84 a0 01 00 00    	je     c001de24 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001dc84:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dc86:	75 a6                	jne    c001dc2e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dc88:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dc8e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dc92:	01 d0                	add    eax,edx
c001dc94:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dc98:	83 ec 0c             	sub    esp,0xc
c001dc9b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dca1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dca4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcaa:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001dcb1:	50                   	push   eax
c001dcb2:	e8 21 fe ff ff       	call   c001dad8 <unblockTask(ThreadControlBlock*)>
c001dcb7:	83 c4 10             	add    esp,0x10
c001dcba:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcc1:	89 f7                	mov    edi,esi
c001dcc3:	41                   	inc    ecx
c001dcc4:	83 f9 10             	cmp    ecx,0x10
c001dcc7:	0f 85 6b ff ff ff    	jne    c001dc38 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001dccd:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001dcd3:	85 c0                	test   eax,eax
c001dcd5:	74 5d                	je     c001dd34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dcd7:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001dcdd:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001dce3:	74 4f                	je     c001dd34 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dce5:	83 ec 0c             	sub    esp,0xc
c001dce8:	68 28 10 03 c0       	push   0xc0031028
c001dced:	e8 cc a4 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcf2:	c7 04 24 28 10 03 c0 	mov    DWORD PTR [esp],0xc0031028
c001dcf9:	89 c7                	mov    edi,eax
c001dcfb:	e8 c6 a4 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dd00:	83 c4 10             	add    esp,0x10
c001dd03:	84 c0                	test   al,al
c001dd05:	0f 84 e4 00 00 00    	je     c001ddef <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001dd0b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd0e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd14:	85 d2                	test   edx,edx
c001dd16:	74 0f                	je     c001dd27 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001dd18:	83 ec 0c             	sub    esp,0xc
c001dd1b:	8b 02                	mov    eax,DWORD PTR [edx]
c001dd1d:	52                   	push   edx
c001dd1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd21:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd24:	83 c4 10             	add    esp,0x10
c001dd27:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001dd31:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001dd34:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001dd3a:	85 db                	test   ebx,ebx
c001dd3c:	74 16                	je     c001dd54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dd3e:	83 ec 0c             	sub    esp,0xc
c001dd41:	53                   	push   ebx
c001dd42:	e8 19 41 ff ff       	call   c0011e60 <VAS::~VAS()>
c001dd47:	58                   	pop    eax
c001dd48:	5a                   	pop    edx
c001dd49:	6a 10                	push   0x10
c001dd4b:	53                   	push   ebx
c001dd4c:	e8 c0 4a ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c001dd51:	83 c4 10             	add    esp,0x10
c001dd54:	83 ec 0c             	sub    esp,0xc
c001dd57:	68 38 b8 02 c0       	push   0xc002b838
c001dd5c:	e8 90 4b ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001dd61:	83 c4 10             	add    esp,0x10
c001dd64:	83 ec 08             	sub    esp,0x8
c001dd67:	68 3f 07 00 00       	push   0x73f
c001dd6c:	68 46 b8 02 c0       	push   0xc002b846
c001dd71:	e8 7b 4b ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001dd76:	83 c4 2c             	add    esp,0x2c
c001dd79:	5b                   	pop    ebx
c001dd7a:	5e                   	pop    esi
c001dd7b:	5f                   	pop    edi
c001dd7c:	5d                   	pop    ebp
c001dd7d:	c3                   	ret    
c001dd7e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dd82:	83 ec 0c             	sub    esp,0xc
c001dd85:	68 20 bb 02 c0       	push   0xc002bb20
c001dd8a:	e8 d6 c0 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001dd8f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd92:	83 c4 10             	add    esp,0x10
c001dd95:	89 f7                	mov    edi,esi
c001dd97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd9b:	e9 8e fe ff ff       	jmp    c001dc2e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dda0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dda6:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ddac:	75 1c                	jne    c001ddca <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ddae:	83 ec 0c             	sub    esp,0xc
c001ddb1:	68 88 bb 02 c0       	push   0xc002bb88
c001ddb6:	e8 36 4b ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ddbb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ddc2:	e8 8f fb ff ff       	call   c001d956 <blockTask(TaskState)>
c001ddc7:	83 c4 10             	add    esp,0x10
c001ddca:	83 ec 08             	sub    esp,0x8
c001ddcd:	56                   	push   esi
c001ddce:	68 28 10 03 c0       	push   0xc0031028
c001ddd3:	e8 b8 a4 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddd8:	c7 04 24 28 10 03 c0 	mov    DWORD PTR [esp],0xc0031028
c001dddf:	e8 da a3 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dde4:	83 c4 10             	add    esp,0x10
c001dde7:	39 f8                	cmp    eax,edi
c001dde9:	0f 84 1c ff ff ff    	je     c001dd0b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ddef:	83 ec 0c             	sub    esp,0xc
c001ddf2:	68 28 10 03 c0       	push   0xc0031028
c001ddf7:	e8 c2 a3 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddfc:	c7 04 24 28 10 03 c0 	mov    DWORD PTR [esp],0xc0031028
c001de03:	89 c6                	mov    esi,eax
c001de05:	e8 d8 a3 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de0a:	83 c4 10             	add    esp,0x10
c001de0d:	39 f3                	cmp    ebx,esi
c001de0f:	74 b9                	je     c001ddca <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001de11:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001de14:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de17:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001de1d:	75 ab                	jne    c001ddca <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001de1f:	e9 7c ff ff ff       	jmp    c001dda0 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001de24:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de28:	83 ec 0c             	sub    esp,0xc
c001de2b:	68 54 bb 02 c0       	push   0xc002bb54
c001de30:	e9 55 ff ff ff       	jmp    c001dd8a <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001de35:	8b 36                	mov    esi,DWORD PTR [esi]
c001de37:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de3b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001de3e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de41:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001de47:	01 d7                	add    edi,edx
c001de49:	89 f8                	mov    eax,edi
c001de4b:	e9 44 fe ff ff       	jmp    c001dc94 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001de50 <cleanerTaskFunction(void*)>:
c001de50:	53                   	push   ebx
c001de51:	83 ec 08             	sub    esp,0x8
c001de54:	e8 69 f6 ff ff       	call   c001d4c2 <unlockScheduler()>
c001de59:	e8 62 f6 ff ff       	call   c001d4c0 <lockScheduler()>
c001de5e:	80 3d ec 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fec,0x0
c001de65:	0f 85 8e 00 00 00    	jne    c001def9 <cleanerTaskFunction(void*)+0xa9>
c001de6b:	83 ec 0c             	sub    esp,0xc
c001de6e:	6a 02                	push   0x2
c001de70:	e8 9f fa ff ff       	call   c001d914 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001de75:	83 c4 10             	add    esp,0x10
c001de78:	c6 05 ec 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030fec,0x0
c001de7f:	e8 63 f6 ff ff       	call   c001d4e7 <lockStuff()>
c001de84:	e8 37 f6 ff ff       	call   c001d4c0 <lockScheduler()>
c001de89:	83 ec 0c             	sub    esp,0xc
c001de8c:	68 10 10 03 c0       	push   0xc0031010
c001de91:	e8 30 a3 00 00       	call   c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	84 c0                	test   al,al
c001de9b:	75 40                	jne    c001dedd <cleanerTaskFunction(void*)+0x8d>
c001de9d:	83 ec 0c             	sub    esp,0xc
c001dea0:	68 10 10 03 c0       	push   0xc0031010
c001dea5:	e8 14 a3 00 00       	call   c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001deaa:	c7 04 24 10 10 03 c0 	mov    DWORD PTR [esp],0xc0031010
c001deb1:	89 c3                	mov    ebx,eax
c001deb3:	e8 2a a3 00 00       	call   c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001deb8:	c7 04 24 5c b8 02 c0 	mov    DWORD PTR [esp],0xc002b85c
c001debf:	e8 2d 4a ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001dec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dec7:	e8 bb fc ff ff       	call   c001db87 <cleanupTerminatedTask(ThreadControlBlock*)>
c001decc:	c7 04 24 75 b8 02 c0 	mov    DWORD PTR [esp],0xc002b875
c001ded3:	e8 19 4a ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	eb ac                	jmp    c001de89 <cleanerTaskFunction(void*)+0x39>
c001dedd:	e8 e0 f5 ff ff       	call   c001d4c2 <unlockScheduler()>
c001dee2:	e8 9a f9 ff ff       	call   c001d881 <unlockStuff()>
c001dee7:	e8 d4 f5 ff ff       	call   c001d4c0 <lockScheduler()>
c001deec:	80 3d ec 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fec,0x0
c001def3:	0f 84 72 ff ff ff    	je     c001de6b <cleanerTaskFunction(void*)+0x1b>
c001def9:	e8 c4 f5 ff ff       	call   c001d4c2 <unlockScheduler()>
c001defe:	e9 75 ff ff ff       	jmp    c001de78 <cleanerTaskFunction(void*)+0x28>

c001df03 <terminateTask(int)>:
c001df03:	83 ec 14             	sub    esp,0x14
c001df06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df0e:	83 c0 0c             	add    eax,0xc
c001df11:	50                   	push   eax
c001df12:	68 b0 bb 02 c0       	push   0xc002bbb0
c001df17:	e8 d5 49 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001df1c:	e8 c6 f5 ff ff       	call   c001d4e7 <lockStuff()>
c001df21:	e8 9a f5 ff ff       	call   c001d4c0 <lockScheduler()>
c001df26:	c7 04 24 88 b8 02 c0 	mov    DWORD PTR [esp],0xc002b888
c001df2d:	e8 bf 49 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001df32:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001df36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df3b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001df3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df43:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001df46:	5a                   	pop    edx
c001df47:	59                   	pop    ecx
c001df48:	50                   	push   eax
c001df49:	68 10 10 03 c0       	push   0xc0031010
c001df4e:	e8 3d a3 00 00       	call   c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df58:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001df5f:	c7 04 24 a2 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8a2
c001df66:	e8 86 49 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001df6b:	83 c4 10             	add    esp,0x10
c001df6e:	a1 e8 0f 03 c0       	mov    eax,ds:0xc0030fe8
c001df73:	85 c0                	test   eax,eax
c001df75:	74 5a                	je     c001dfd1 <terminateTask(int)+0xce>
c001df77:	83 ec 0c             	sub    esp,0xc
c001df7a:	68 bc b8 02 c0       	push   0xc002b8bc
c001df7f:	e8 6d 49 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001df84:	58                   	pop    eax
c001df85:	c6 05 ec 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fec,0x1
c001df8c:	ff 35 e8 0f 03 c0    	push   DWORD PTR ds:0xc0030fe8
c001df92:	e8 41 fb ff ff       	call   c001dad8 <unblockTask(ThreadControlBlock*)>
c001df97:	c7 04 24 d6 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8d6
c001df9e:	e8 4e 49 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001dfa3:	83 c4 10             	add    esp,0x10
c001dfa6:	e8 17 f5 ff ff       	call   c001d4c2 <unlockScheduler()>
c001dfab:	e8 d1 f8 ff ff       	call   c001d881 <unlockStuff()>
c001dfb0:	83 ec 0c             	sub    esp,0xc
c001dfb3:	68 0e b9 02 c0       	push   0xc002b90e
c001dfb8:	e8 34 49 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001dfbd:	83 c4 10             	add    esp,0x10
c001dfc0:	e8 fb f4 ff ff       	call   c001d4c0 <lockScheduler()>
c001dfc5:	e8 32 f8 ff ff       	call   c001d7fc <schedule()>
c001dfca:	e8 f3 f4 ff ff       	call   c001d4c2 <unlockScheduler()>
c001dfcf:	eb ef                	jmp    c001dfc0 <terminateTask(int)+0xbd>
c001dfd1:	83 ec 0c             	sub    esp,0xc
c001dfd4:	68 f0 b8 02 c0       	push   0xc002b8f0
c001dfd9:	e8 13 49 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001dfde:	83 c4 10             	add    esp,0x10
c001dfe1:	eb c3                	jmp    c001dfa6 <terminateTask(int)+0xa3>

c001dfe3 <Thr::terminateFromIRQ(int)>:
c001dfe3:	83 ec 18             	sub    esp,0x18
c001dfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfea:	e8 14 ff ff ff       	call   c001df03 <terminateTask(int)>
c001dfef:	90                   	nop

c001dff0 <Semaphore::release()>:
c001dff0:	83 ec 0c             	sub    esp,0xc
c001dff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff7:	e8 eb f4 ff ff       	call   c001d4e7 <lockStuff()>
c001dffc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dfff:	85 d2                	test   edx,edx
c001e001:	74 1a                	je     c001e01d <Semaphore::release()+0x2d>
c001e003:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e006:	83 ec 0c             	sub    esp,0xc
c001e009:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e00c:	52                   	push   edx
c001e00d:	e8 c6 fa ff ff       	call   c001dad8 <unblockTask(ThreadControlBlock*)>
c001e012:	83 c4 10             	add    esp,0x10
c001e015:	83 c4 0c             	add    esp,0xc
c001e018:	e9 64 f8 ff ff       	jmp    c001d881 <unlockStuff()>
c001e01d:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e020:	83 c4 0c             	add    esp,0xc
c001e023:	e9 59 f8 ff ff       	jmp    c001d881 <unlockStuff()>

c001e028 <__static_initialization_and_destruction_0(int, int)>:
c001e028:	83 ec 0c             	sub    esp,0xc
c001e02b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e030:	0f 85 88 00 00 00    	jne    c001e0be <__static_initialization_and_destruction_0(int, int)+0x96>
c001e036:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e03e:	75 7e                	jne    c001e0be <__static_initialization_and_destruction_0(int, int)+0x96>
c001e040:	83 ec 0c             	sub    esp,0xc
c001e043:	68 28 10 03 c0       	push   0xc0031028
c001e048:	e8 f3 a3 00 00       	call   c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e04d:	83 c4 10             	add    esp,0x10
c001e050:	83 ec 04             	sub    esp,0x4
c001e053:	68 ec c9 02 c0       	push   0xc002c9ec
c001e058:	68 28 10 03 c0       	push   0xc0031028
c001e05d:	68 00 84 02 c0       	push   0xc0028400
c001e062:	e8 24 47 ff ff       	call   c001278b <__cxa_atexit>
c001e067:	83 c4 10             	add    esp,0x10
c001e06a:	83 ec 0c             	sub    esp,0xc
c001e06d:	68 1c 10 03 c0       	push   0xc003101c
c001e072:	e8 c9 a3 00 00       	call   c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e077:	83 c4 10             	add    esp,0x10
c001e07a:	83 ec 04             	sub    esp,0x4
c001e07d:	68 ec c9 02 c0       	push   0xc002c9ec
c001e082:	68 1c 10 03 c0       	push   0xc003101c
c001e087:	68 00 84 02 c0       	push   0xc0028400
c001e08c:	e8 fa 46 ff ff       	call   c001278b <__cxa_atexit>
c001e091:	83 c4 10             	add    esp,0x10
c001e094:	83 ec 0c             	sub    esp,0xc
c001e097:	68 10 10 03 c0       	push   0xc0031010
c001e09c:	e8 9f a3 00 00       	call   c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e0a1:	83 c4 10             	add    esp,0x10
c001e0a4:	83 ec 04             	sub    esp,0x4
c001e0a7:	68 ec c9 02 c0       	push   0xc002c9ec
c001e0ac:	68 10 10 03 c0       	push   0xc0031010
c001e0b1:	68 00 84 02 c0       	push   0xc0028400
c001e0b6:	e8 d0 46 ff ff       	call   c001278b <__cxa_atexit>
c001e0bb:	83 c4 10             	add    esp,0x10
c001e0be:	90                   	nop
c001e0bf:	83 c4 0c             	add    esp,0xc
c001e0c2:	c3                   	ret    

c001e0c3 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e0c3:	83 ec 0c             	sub    esp,0xc
c001e0c6:	83 ec 08             	sub    esp,0x8
c001e0c9:	68 ff ff 00 00       	push   0xffff
c001e0ce:	6a 01                	push   0x1
c001e0d0:	e8 53 ff ff ff       	call   c001e028 <__static_initialization_and_destruction_0(int, int)>
c001e0d5:	83 c4 10             	add    esp,0x10
c001e0d8:	83 c4 0c             	add    esp,0xc
c001e0db:	c3                   	ret    

c001e0dc <Vm::inbv(unsigned short)>:
c001e0dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e0e0:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e0e5:	75 06                	jne    c001e0ed <Vm::inbv(unsigned short)+0x11>
c001e0e7:	a0 6c 10 03 c0       	mov    al,ds:0xc003106c
c001e0ec:	c3                   	ret    
c001e0ed:	ec                   	in     al,dx
c001e0ee:	c3                   	ret    

c001e0ef <Vm::outbv(unsigned short, unsigned char)>:
c001e0ef:	53                   	push   ebx
c001e0f0:	83 ec 08             	sub    esp,0x8
c001e0f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e0fb:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e100:	75 38                	jne    c001e13a <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e102:	0f b6 c3             	movzx  eax,bl
c001e105:	51                   	push   ecx
c001e106:	51                   	push   ecx
c001e107:	50                   	push   eax
c001e108:	68 cf bb 02 c0       	push   0xc002bbcf
c001e10d:	e8 df 47 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e112:	8b 15 6c 10 03 c0    	mov    edx,DWORD PTR ds:0xc003106c
c001e118:	83 c4 10             	add    esp,0x10
c001e11b:	8d 42 01             	lea    eax,[edx+0x1]
c001e11e:	88 9a 80 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef80],bl
c001e124:	a3 6c 10 03 c0       	mov    ds:0xc003106c,eax
c001e129:	83 f8 20             	cmp    eax,0x20
c001e12c:	75 0f                	jne    c001e13d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e12e:	c7 05 6c 10 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003106c,0x1f
c001e138:	eb 03                	jmp    c001e13d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e13a:	88 d8                	mov    al,bl
c001e13c:	ee                   	out    dx,al
c001e13d:	83 c4 08             	add    esp,0x8
c001e140:	5b                   	pop    ebx
c001e141:	c3                   	ret    

c001e142 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e142:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e147:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e14c:	c1 e0 04             	shl    eax,0x4
c001e14f:	01 d0                	add    eax,edx
c001e151:	c3                   	ret    

c001e152 <Vm::getSegment(unsigned int)>:
c001e152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e156:	c1 e8 10             	shr    eax,0x10
c001e159:	c3                   	ret    

c001e15a <Vm::getOffset(unsigned int)>:
c001e15a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e15e:	c3                   	ret    

c001e15f <Vm::mainloop2()>:
c001e15f:	83 ec 0c             	sub    esp,0xc
c001e162:	e8 59 f3 ff ff       	call   c001d4c0 <lockScheduler()>
c001e167:	83 ec 0c             	sub    esp,0xc
c001e16a:	c6 05 65 10 03 c0 01 	mov    BYTE PTR ds:0xc0031065,0x1
c001e171:	6a 02                	push   0x2
c001e173:	e8 9c f7 ff ff       	call   c001d914 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e178:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e17d:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e181:	52                   	push   edx
c001e182:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e186:	52                   	push   edx
c001e187:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e18b:	52                   	push   edx
c001e18c:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e190:	50                   	push   eax
c001e191:	e8 64 21 fe ff       	call   c00002fa <goToVM86>
c001e196:	83 c4 2c             	add    esp,0x2c
c001e199:	c3                   	ret    

c001e19a <Vm::mainVm8086Loop(void*)>:
c001e19a:	83 ec 0c             	sub    esp,0xc
c001e19d:	e8 20 f3 ff ff       	call   c001d4c2 <unlockScheduler()>
c001e1a2:	83 c4 0c             	add    esp,0xc
c001e1a5:	eb b8                	jmp    c001e15f <Vm::mainloop2()>

c001e1a7 <Vm::mainloop3(unsigned long)>:
c001e1a7:	53                   	push   ebx
c001e1a8:	83 ec 08             	sub    esp,0x8
c001e1ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e1af:	e8 0c f3 ff ff       	call   c001d4c0 <lockScheduler()>
c001e1b4:	83 ec 0c             	sub    esp,0xc
c001e1b7:	89 1d 60 10 03 c0    	mov    DWORD PTR ds:0xc0031060,ebx
c001e1bd:	6a 02                	push   0x2
c001e1bf:	c6 05 64 10 03 c0 01 	mov    BYTE PTR ds:0xc0031064,0x1
c001e1c6:	e8 49 f7 ff ff       	call   c001d914 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e1cb:	83 c4 18             	add    esp,0x18
c001e1ce:	5b                   	pop    ebx
c001e1cf:	eb 8e                	jmp    c001e15f <Vm::mainloop2()>

c001e1d1 <Vm::initialise8086()>:
c001e1d1:	83 ec 0c             	sub    esp,0xc
c001e1d4:	68 80 00 00 00       	push   0x80
c001e1d9:	6a 00                	push   0x0
c001e1db:	68 9a e1 01 c0       	push   0xc001e19a
c001e1e0:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c001e1e6:	e8 07 f4 ff ff       	call   c001d5f2 <Process::createThread(void (*)(void*), void*, int)>
c001e1eb:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e1f2:	a3 68 10 03 c0       	mov    ds:0xc0031068,eax
c001e1f7:	68 00 01 00 00       	push   0x100
c001e1fc:	a1 34 10 03 c0       	mov    eax,ds:0xc0031034
c001e201:	6a 00                	push   0x0
c001e203:	6a 00                	push   0x0
c001e205:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e20b:	e8 b0 40 ff ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e210:	83 c4 2c             	add    esp,0x2c
c001e213:	c3                   	ret    

c001e214 <Vm::finish8086()>:
c001e214:	53                   	push   ebx
c001e215:	83 ec 08             	sub    esp,0x8
c001e218:	e8 a3 f2 ff ff       	call   c001d4c0 <lockScheduler()>
c001e21d:	80 3d 64 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031064,0x0
c001e224:	75 0c                	jne    c001e232 <Vm::finish8086()+0x1e>
c001e226:	e8 d1 f5 ff ff       	call   c001d7fc <schedule()>
c001e22b:	e8 92 f2 ff ff       	call   c001d4c2 <unlockScheduler()>
c001e230:	eb e6                	jmp    c001e218 <Vm::finish8086()+0x4>
c001e232:	83 ec 0c             	sub    esp,0xc
c001e235:	8b 1d 60 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031060
c001e23b:	ff 35 68 10 03 c0    	push   DWORD PTR ds:0xc0031068
c001e241:	c6 05 64 10 03 c0 00 	mov    BYTE PTR ds:0xc0031064,0x0
c001e248:	e8 8b f8 ff ff       	call   c001dad8 <unblockTask(ThreadControlBlock*)>
c001e24d:	e8 70 f2 ff ff       	call   c001d4c2 <unlockScheduler()>
c001e252:	89 d8                	mov    eax,ebx
c001e254:	83 c4 18             	add    esp,0x18
c001e257:	5b                   	pop    ebx
c001e258:	c3                   	ret    

c001e259 <Vm::getOutput8086(unsigned char*)>:
c001e259:	83 ec 10             	sub    esp,0x10
c001e25c:	ff 35 6c 10 03 c0    	push   DWORD PTR ds:0xc003106c
c001e262:	68 80 10 03 c0       	push   0xc0031080
c001e267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e26b:	e8 30 24 fe ff       	call   c00006a0 <memcpy>
c001e270:	a1 6c 10 03 c0       	mov    eax,ds:0xc003106c
c001e275:	c7 05 6c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003106c,0x0
c001e27f:	83 c4 1c             	add    esp,0x1c
c001e282:	c3                   	ret    

c001e283 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e283:	55                   	push   ebp
c001e284:	57                   	push   edi
c001e285:	56                   	push   esi
c001e286:	53                   	push   ebx
c001e287:	83 ec 2c             	sub    esp,0x2c
c001e28a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e28e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e292:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e296:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e29a:	e8 21 f2 ff ff       	call   c001d4c0 <lockScheduler()>
c001e29f:	a0 65 10 03 c0       	mov    al,ds:0xc0031065
c001e2a4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e2a8:	84 c0                	test   al,al
c001e2aa:	75 0c                	jne    c001e2b8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e2ac:	e8 4b f5 ff ff       	call   c001d7fc <schedule()>
c001e2b1:	e8 0c f2 ff ff       	call   c001d4c2 <unlockScheduler()>
c001e2b6:	eb e2                	jmp    c001e29a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e2b8:	a1 68 10 03 c0       	mov    eax,ds:0xc0031068
c001e2bd:	c7 05 6c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003106c,0x0
c001e2c7:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e2cb:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e2cf:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e2d3:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e2d7:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e2db:	50                   	push   eax
c001e2dc:	6a 20                	push   0x20
c001e2de:	6a 00                	push   0x0
c001e2e0:	68 80 10 03 c0       	push   0xc0031080
c001e2e5:	e8 d8 23 fe ff       	call   c00006c2 <memset>
c001e2ea:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e2f1:	e8 2c 13 ff ff       	call   c000f622 <malloc>
c001e2f6:	83 c4 0c             	add    esp,0xc
c001e2f9:	89 c7                	mov    edi,eax
c001e2fb:	ff 35 34 10 03 c0    	push   DWORD PTR ds:0xc0031034
c001e301:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e305:	50                   	push   eax
c001e306:	e8 3f 4b ff ff       	call   c0012e4a <File::File(char const*, Process*)>
c001e30b:	83 c4 10             	add    esp,0x10
c001e30e:	85 ff                	test   edi,edi
c001e310:	75 0a                	jne    c001e31c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e312:	83 ec 0c             	sub    esp,0xc
c001e315:	68 eb bb 02 c0       	push   0xc002bbeb
c001e31a:	eb 27                	jmp    c001e343 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e31c:	50                   	push   eax
c001e31d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e321:	50                   	push   eax
c001e322:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e326:	50                   	push   eax
c001e327:	57                   	push   edi
c001e328:	e8 2d 4e ff ff       	call   c001315a <File::stat(unsigned long long*, bool*)>
c001e32d:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e332:	83 c4 10             	add    esp,0x10
c001e335:	89 e8                	mov    eax,ebp
c001e337:	84 c0                	test   al,al
c001e339:	74 19                	je     c001e354 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e33b:	83 ec 0c             	sub    esp,0xc
c001e33e:	68 ff bb 02 c0       	push   0xc002bbff
c001e343:	e8 1d bb ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001e348:	31 ed                	xor    ebp,ebp
c001e34a:	e8 73 f1 ff ff       	call   c001d4c2 <unlockScheduler()>
c001e34f:	83 c4 10             	add    esp,0x10
c001e352:	eb 75                	jmp    c001e3c9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e354:	50                   	push   eax
c001e355:	50                   	push   eax
c001e356:	6a 01                	push   0x1
c001e358:	57                   	push   edi
c001e359:	e8 50 4b ff ff       	call   c0012eae <File::open(FileOpenMode)>
c001e35e:	83 c4 10             	add    esp,0x10
c001e361:	85 c0                	test   eax,eax
c001e363:	74 17                	je     c001e37c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e365:	83 ec 0c             	sub    esp,0xc
c001e368:	68 18 bc 02 c0       	push   0xc002bc18
c001e36d:	e8 f3 ba ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001e372:	e8 4b f1 ff ff       	call   c001d4c2 <unlockScheduler()>
c001e377:	83 c4 10             	add    esp,0x10
c001e37a:	eb 4d                	jmp    c001e3c9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e37c:	0f b7 f6             	movzx  esi,si
c001e37f:	50                   	push   eax
c001e380:	0f b7 db             	movzx  ebx,bx
c001e383:	50                   	push   eax
c001e384:	56                   	push   esi
c001e385:	53                   	push   ebx
c001e386:	e8 b7 fd ff ff       	call   c001e142 <Vm::realToLinear(unsigned short, unsigned short)>
c001e38b:	5a                   	pop    edx
c001e38c:	8b 17                	mov    edx,DWORD PTR [edi]
c001e38e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e392:	51                   	push   ecx
c001e393:	50                   	push   eax
c001e394:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e398:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e39c:	57                   	push   edi
c001e39d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e3a0:	83 c4 14             	add    esp,0x14
c001e3a3:	57                   	push   edi
c001e3a4:	e8 63 4b ff ff       	call   c0012f0c <File::close()>
c001e3a9:	c6 05 65 10 03 c0 00 	mov    BYTE PTR ds:0xc0031065,0x0
c001e3b0:	e8 0d f1 ff ff       	call   c001d4c2 <unlockScheduler()>
c001e3b5:	59                   	pop    ecx
c001e3b6:	ff 35 68 10 03 c0    	push   DWORD PTR ds:0xc0031068
c001e3bc:	e8 17 f7 ff ff       	call   c001dad8 <unblockTask(ThreadControlBlock*)>
c001e3c1:	83 c4 10             	add    esp,0x10
c001e3c4:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e3c9:	83 c4 2c             	add    esp,0x2c
c001e3cc:	89 e8                	mov    eax,ebp
c001e3ce:	5b                   	pop    ebx
c001e3cf:	5e                   	pop    esi
c001e3d0:	5f                   	pop    edi
c001e3d1:	5d                   	pop    ebp
c001e3d2:	c3                   	ret    

c001e3d3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e3d3:	57                   	push   edi
c001e3d4:	56                   	push   esi
c001e3d5:	53                   	push   ebx
c001e3d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3de:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e3e2:	83 e8 06             	sub    eax,0x6
c001e3e5:	0f b7 c0             	movzx  eax,ax
c001e3e8:	50                   	push   eax
c001e3e9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e3ee:	50                   	push   eax
c001e3ef:	e8 4e fd ff ff       	call   c001e142 <Vm::realToLinear(unsigned short, unsigned short)>
c001e3f4:	5a                   	pop    edx
c001e3f5:	5e                   	pop    esi
c001e3f6:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e3f9:	8d 56 fa             	lea    edx,[esi-0x6]
c001e3fc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e402:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e405:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e408:	83 c2 02             	add    edx,0x2
c001e40b:	66 89 10             	mov    WORD PTR [eax],dx
c001e40e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e411:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e415:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e418:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e41c:	89 d6                	mov    esi,edx
c001e41e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e424:	66 81 e6 ff fd       	and    si,0xfdff
c001e429:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e42d:	74 07                	je     c001e436 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e42f:	89 d6                	mov    esi,edx
c001e431:	66 81 ce 00 02       	or     si,0x200
c001e436:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e43a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e43f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e443:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e44b:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e44e:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e456:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e459:	5b                   	pop    ebx
c001e45a:	5e                   	pop    esi
c001e45b:	5f                   	pop    edi
c001e45c:	c3                   	ret    

c001e45d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e45d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e462:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e467:	c1 e0 04             	shl    eax,0x4
c001e46a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e46d:	c3                   	ret    

c001e46e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e46e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e473:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e478:	c1 e0 04             	shl    eax,0x4
c001e47b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e47f:	c3                   	ret    

c001e480 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e480:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e485:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e48a:	c1 e0 04             	shl    eax,0x4
c001e48d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e490:	c3                   	ret    

c001e491 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e491:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e496:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e49b:	c1 e0 04             	shl    eax,0x4
c001e49e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4a2:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e4a5:	c3                   	ret    

c001e4a6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e4a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4b0:	c1 e0 04             	shl    eax,0x4
c001e4b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4b7:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e4bb:	c3                   	ret    

c001e4bc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e4bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e4c1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4c6:	c1 e0 04             	shl    eax,0x4
c001e4c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4cd:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e4d0:	c3                   	ret    

c001e4d1 <Vm::faultHandler(regs*)>:
c001e4d1:	55                   	push   ebp
c001e4d2:	57                   	push   edi
c001e4d3:	56                   	push   esi
c001e4d4:	53                   	push   ebx
c001e4d5:	83 ec 1c             	sub    esp,0x1c
c001e4d8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4dc:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e4df:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e4e2:	0f b7 c1             	movzx  eax,cx
c001e4e5:	50                   	push   eax
c001e4e6:	0f b7 c3             	movzx  eax,bx
c001e4e9:	c1 e3 04             	shl    ebx,0x4
c001e4ec:	50                   	push   eax
c001e4ed:	e8 50 fc ff ff       	call   c001e142 <Vm::realToLinear(unsigned short, unsigned short)>
c001e4f2:	5a                   	pop    edx
c001e4f3:	89 c5                	mov    ebp,eax
c001e4f5:	5e                   	pop    esi
c001e4f6:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e4fa:	50                   	push   eax
c001e4fb:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e4ff:	50                   	push   eax
c001e500:	e8 3d fc ff ff       	call   c001e142 <Vm::realToLinear(unsigned short, unsigned short)>
c001e505:	01 cb                	add    ebx,ecx
c001e507:	89 c6                	mov    esi,eax
c001e509:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e50d:	50                   	push   eax
c001e50e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e512:	50                   	push   eax
c001e513:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e517:	50                   	push   eax
c001e518:	55                   	push   ebp
c001e519:	53                   	push   ebx
c001e51a:	b3 06                	mov    bl,0x6
c001e51c:	68 31 bc 02 c0       	push   0xc002bc31
c001e521:	e8 cb 43 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e526:	83 c4 20             	add    esp,0x20
c001e529:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e52e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e533:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e537:	3c 9d                	cmp    al,0x9d
c001e539:	0f 84 d7 02 00 00    	je     c001e816 <Vm::faultHandler(regs*)+0x345>
c001e53f:	0f 87 a3 00 00 00    	ja     c001e5e8 <Vm::faultHandler(regs*)+0x117>
c001e545:	3c 66                	cmp    al,0x66
c001e547:	0f 84 15 02 00 00    	je     c001e762 <Vm::faultHandler(regs*)+0x291>
c001e54d:	77 5f                	ja     c001e5ae <Vm::faultHandler(regs*)+0xdd>
c001e54f:	3c 36                	cmp    al,0x36
c001e551:	0f 84 f1 01 00 00    	je     c001e748 <Vm::faultHandler(regs*)+0x277>
c001e557:	77 28                	ja     c001e581 <Vm::faultHandler(regs*)+0xb0>
c001e559:	3c 26                	cmp    al,0x26
c001e55b:	0f 84 99 01 00 00    	je     c001e6fa <Vm::faultHandler(regs*)+0x229>
c001e561:	3c 2e                	cmp    al,0x2e
c001e563:	0f 85 3b 07 00 00    	jne    c001eca4 <Vm::faultHandler(regs*)+0x7d3>
c001e569:	83 ec 0c             	sub    esp,0xc
c001e56c:	31 db                	xor    ebx,ebx
c001e56e:	68 46 bc 02 c0       	push   0xc002bc46
c001e573:	e8 79 43 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e578:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e57b:	83 c4 10             	add    esp,0x10
c001e57e:	45                   	inc    ebp
c001e57f:	eb b2                	jmp    c001e533 <Vm::faultHandler(regs*)+0x62>
c001e581:	3c 64                	cmp    al,0x64
c001e583:	0f 84 8b 01 00 00    	je     c001e714 <Vm::faultHandler(regs*)+0x243>
c001e589:	0f 87 9f 01 00 00    	ja     c001e72e <Vm::faultHandler(regs*)+0x25d>
c001e58f:	3c 3e                	cmp    al,0x3e
c001e591:	0f 85 0d 07 00 00    	jne    c001eca4 <Vm::faultHandler(regs*)+0x7d3>
c001e597:	83 ec 0c             	sub    esp,0xc
c001e59a:	b3 01                	mov    bl,0x1
c001e59c:	68 4a bc 02 c0       	push   0xc002bc4a
c001e5a1:	e8 4b 43 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e5a6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e5a9:	83 c4 10             	add    esp,0x10
c001e5ac:	eb d0                	jmp    c001e57e <Vm::faultHandler(regs*)+0xad>
c001e5ae:	3c 6d                	cmp    al,0x6d
c001e5b0:	0f 84 af 03 00 00    	je     c001e965 <Vm::faultHandler(regs*)+0x494>
c001e5b6:	77 15                	ja     c001e5cd <Vm::faultHandler(regs*)+0xfc>
c001e5b8:	3c 67                	cmp    al,0x67
c001e5ba:	0f 84 bf 01 00 00    	je     c001e77f <Vm::faultHandler(regs*)+0x2ae>
c001e5c0:	3c 6c                	cmp    al,0x6c
c001e5c2:	0f 84 3f 03 00 00    	je     c001e907 <Vm::faultHandler(regs*)+0x436>
c001e5c8:	e9 d7 06 00 00       	jmp    c001eca4 <Vm::faultHandler(regs*)+0x7d3>
c001e5cd:	3c 6f                	cmp    al,0x6f
c001e5cf:	0f 84 a4 04 00 00    	je     c001ea79 <Vm::faultHandler(regs*)+0x5a8>
c001e5d5:	0f 82 11 04 00 00    	jb     c001e9ec <Vm::faultHandler(regs*)+0x51b>
c001e5db:	3c 9c                	cmp    al,0x9c
c001e5dd:	0f 84 ba 01 00 00    	je     c001e79d <Vm::faultHandler(regs*)+0x2cc>
c001e5e3:	e9 bc 06 00 00       	jmp    c001eca4 <Vm::faultHandler(regs*)+0x7d3>
c001e5e8:	3c ec                	cmp    al,0xec
c001e5ea:	0f 84 24 06 00 00    	je     c001ec14 <Vm::faultHandler(regs*)+0x743>
c001e5f0:	0f 87 93 00 00 00    	ja     c001e689 <Vm::faultHandler(regs*)+0x1b8>
c001e5f6:	3c e4                	cmp    al,0xe4
c001e5f8:	0f 84 5c 05 00 00    	je     c001eb5a <Vm::faultHandler(regs*)+0x689>
c001e5fe:	77 6a                	ja     c001e66a <Vm::faultHandler(regs*)+0x199>
c001e600:	3c cd                	cmp    al,0xcd
c001e602:	0f 84 7e 02 00 00    	je     c001e886 <Vm::faultHandler(regs*)+0x3b5>
c001e608:	3c cf                	cmp    al,0xcf
c001e60a:	0f 85 94 06 00 00    	jne    c001eca4 <Vm::faultHandler(regs*)+0x7d3>
c001e610:	83 ec 0c             	sub    esp,0xc
c001e613:	68 8e bc 02 c0       	push   0xc002bc8e
c001e618:	e8 d4 42 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e61d:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e620:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e623:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e627:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e62a:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e62e:	0d 00 02 02 00       	or     eax,0x20200
c001e633:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e636:	56                   	push   esi
c001e637:	53                   	push   ebx
c001e638:	52                   	push   edx
c001e639:	68 94 bc 02 c0       	push   0xc002bc94
c001e63e:	e8 ae 42 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e643:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e647:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e64d:	66 c1 e8 09          	shr    ax,0x9
c001e651:	83 e0 01             	and    eax,0x1
c001e654:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e657:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e65a:	83 c0 06             	add    eax,0x6
c001e65d:	25 ff ff 00 00       	and    eax,0xffff
c001e662:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e665:	e9 95 02 00 00       	jmp    c001e8ff <Vm::faultHandler(regs*)+0x42e>
c001e66a:	3c e6                	cmp    al,0xe6
c001e66c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e670:	0f 84 4e 05 00 00    	je     c001ebc4 <Vm::faultHandler(regs*)+0x6f3>
c001e676:	0f 82 0a 05 00 00    	jb     c001eb86 <Vm::faultHandler(regs*)+0x6b5>
c001e67c:	3c e7                	cmp    al,0xe7
c001e67e:	0f 84 69 05 00 00    	je     c001ebed <Vm::faultHandler(regs*)+0x71c>
c001e684:	e9 1b 06 00 00       	jmp    c001eca4 <Vm::faultHandler(regs*)+0x7d3>
c001e689:	3c ef                	cmp    al,0xef
c001e68b:	0f 84 e6 05 00 00    	je     c001ec77 <Vm::faultHandler(regs*)+0x7a6>
c001e691:	77 37                	ja     c001e6ca <Vm::faultHandler(regs*)+0x1f9>
c001e693:	3c ed                	cmp    al,0xed
c001e695:	0f 84 a3 05 00 00    	je     c001ec3e <Vm::faultHandler(regs*)+0x76d>
c001e69b:	3c ee                	cmp    al,0xee
c001e69d:	0f 85 01 06 00 00    	jne    c001eca4 <Vm::faultHandler(regs*)+0x7d3>
c001e6a3:	52                   	push   edx
c001e6a4:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e6a7:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e6aa:	68 2f bd 02 c0       	push   0xc002bd2f
c001e6af:	e8 3d 42 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e6b4:	59                   	pop    ecx
c001e6b5:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e6b9:	5b                   	pop    ebx
c001e6ba:	50                   	push   eax
c001e6bb:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6bf:	50                   	push   eax
c001e6c0:	e8 2a fa ff ff       	call   c001e0ef <Vm::outbv(unsigned short, unsigned char)>
c001e6c5:	e9 a5 05 00 00       	jmp    c001ec6f <Vm::faultHandler(regs*)+0x79e>
c001e6ca:	3c fa                	cmp    al,0xfa
c001e6cc:	0f 84 f7 01 00 00    	je     c001e8c9 <Vm::faultHandler(regs*)+0x3f8>
c001e6d2:	3c fb                	cmp    al,0xfb
c001e6d4:	0f 84 0a 02 00 00    	je     c001e8e4 <Vm::faultHandler(regs*)+0x413>
c001e6da:	3c f3                	cmp    al,0xf3
c001e6dc:	0f 85 c2 05 00 00    	jne    c001eca4 <Vm::faultHandler(regs*)+0x7d3>
c001e6e2:	83 ec 0c             	sub    esp,0xc
c001e6e5:	68 67 bc 02 c0       	push   0xc002bc67
c001e6ea:	e8 02 42 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e6ef:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e6f2:	83 c4 10             	add    esp,0x10
c001e6f5:	e9 84 fe ff ff       	jmp    c001e57e <Vm::faultHandler(regs*)+0xad>
c001e6fa:	83 ec 0c             	sub    esp,0xc
c001e6fd:	b3 02                	mov    bl,0x2
c001e6ff:	68 42 bc 02 c0       	push   0xc002bc42
c001e704:	e8 e8 41 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e709:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e70c:	83 c4 10             	add    esp,0x10
c001e70f:	e9 6a fe ff ff       	jmp    c001e57e <Vm::faultHandler(regs*)+0xad>
c001e714:	83 ec 0c             	sub    esp,0xc
c001e717:	b3 03                	mov    bl,0x3
c001e719:	68 4e bc 02 c0       	push   0xc002bc4e
c001e71e:	e8 ce 41 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e723:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e726:	83 c4 10             	add    esp,0x10
c001e729:	e9 50 fe ff ff       	jmp    c001e57e <Vm::faultHandler(regs*)+0xad>
c001e72e:	83 ec 0c             	sub    esp,0xc
c001e731:	b3 04                	mov    bl,0x4
c001e733:	68 52 bc 02 c0       	push   0xc002bc52
c001e738:	e8 b4 41 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e73d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e740:	83 c4 10             	add    esp,0x10
c001e743:	e9 36 fe ff ff       	jmp    c001e57e <Vm::faultHandler(regs*)+0xad>
c001e748:	83 ec 0c             	sub    esp,0xc
c001e74b:	b3 05                	mov    bl,0x5
c001e74d:	68 56 bc 02 c0       	push   0xc002bc56
c001e752:	e8 9a 41 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e757:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e75a:	83 c4 10             	add    esp,0x10
c001e75d:	e9 1c fe ff ff       	jmp    c001e57e <Vm::faultHandler(regs*)+0xad>
c001e762:	83 ec 0c             	sub    esp,0xc
c001e765:	68 5a bc 02 c0       	push   0xc002bc5a
c001e76a:	e8 82 41 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e76f:	83 c4 10             	add    esp,0x10
c001e772:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e775:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e77a:	e9 ff fd ff ff       	jmp    c001e57e <Vm::faultHandler(regs*)+0xad>
c001e77f:	50                   	push   eax
c001e780:	50                   	push   eax
c001e781:	6a 01                	push   0x1
c001e783:	68 5f bc 02 c0       	push   0xc002bc5f
c001e788:	e8 64 41 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e78d:	83 c4 10             	add    esp,0x10
c001e790:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e793:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e798:	e9 e1 fd ff ff       	jmp    c001e57e <Vm::faultHandler(regs*)+0xad>
c001e79d:	83 ec 0c             	sub    esp,0xc
c001e7a0:	68 6d bc 02 c0       	push   0xc002bc6d
c001e7a5:	e8 47 41 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e7aa:	83 c4 10             	add    esp,0x10
c001e7ad:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e7b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e7b5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e7b8:	74 2f                	je     c001e7e9 <Vm::faultHandler(regs*)+0x318>
c001e7ba:	83 ea 04             	sub    edx,0x4
c001e7bd:	25 ff 0d 00 00       	and    eax,0xdff
c001e7c2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7c8:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e7cb:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e7ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7d4:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e7d8:	0f 84 bf 04 00 00    	je     c001ec9d <Vm::faultHandler(regs*)+0x7cc>
c001e7de:	80 cc 02             	or     ah,0x2
c001e7e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e7e4:	e9 b4 04 00 00       	jmp    c001ec9d <Vm::faultHandler(regs*)+0x7cc>
c001e7e9:	83 ea 02             	sub    edx,0x2
c001e7ec:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e7f2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e7f5:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e7f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7ff:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e803:	74 05                	je     c001e80a <Vm::faultHandler(regs*)+0x339>
c001e805:	80 cc 02             	or     ah,0x2
c001e808:	eb 03                	jmp    c001e80d <Vm::faultHandler(regs*)+0x33c>
c001e80a:	80 e4 fd             	and    ah,0xfd
c001e80d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e811:	e9 87 04 00 00       	jmp    c001ec9d <Vm::faultHandler(regs*)+0x7cc>
c001e816:	83 ec 0c             	sub    esp,0xc
c001e819:	68 74 bc 02 c0       	push   0xc002bc74
c001e81e:	e8 ce 40 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e823:	83 c4 10             	add    esp,0x10
c001e826:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e82b:	74 28                	je     c001e855 <Vm::faultHandler(regs*)+0x384>
c001e82d:	8b 06                	mov    eax,DWORD PTR [esi]
c001e82f:	25 ff 0d 00 00       	and    eax,0xdff
c001e834:	0d 00 02 02 00       	or     eax,0x20200
c001e839:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e83c:	8b 06                	mov    eax,DWORD PTR [esi]
c001e83e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e844:	c1 e8 09             	shr    eax,0x9
c001e847:	83 e0 01             	and    eax,0x1
c001e84a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e84d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e850:	83 c0 04             	add    eax,0x4
c001e853:	eb 24                	jmp    c001e879 <Vm::faultHandler(regs*)+0x3a8>
c001e855:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e858:	0d 00 02 02 00       	or     eax,0x20200
c001e85d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e860:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e863:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e869:	66 c1 e8 09          	shr    ax,0x9
c001e86d:	83 e0 01             	and    eax,0x1
c001e870:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e873:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e876:	83 c0 02             	add    eax,0x2
c001e879:	25 ff ff 00 00       	and    eax,0xffff
c001e87e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e881:	e9 17 04 00 00       	jmp    c001ec9d <Vm::faultHandler(regs*)+0x7cc>
c001e886:	53                   	push   ebx
c001e887:	53                   	push   ebx
c001e888:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e88c:	50                   	push   eax
c001e88d:	68 7a bc 02 c0       	push   0xc002bc7a
c001e892:	e8 5a 40 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e897:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e89b:	83 c4 10             	add    esp,0x10
c001e89e:	3c ee                	cmp    al,0xee
c001e8a0:	75 10                	jne    c001e8b2 <Vm::faultHandler(regs*)+0x3e1>
c001e8a2:	83 ec 0c             	sub    esp,0xc
c001e8a5:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e8a8:	e8 fa f8 ff ff       	call   c001e1a7 <Vm::mainloop3(unsigned long)>
c001e8ad:	e9 c0 03 00 00       	jmp    c001ec72 <Vm::faultHandler(regs*)+0x7a1>
c001e8b2:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e8b6:	83 ec 0c             	sub    esp,0xc
c001e8b9:	53                   	push   ebx
c001e8ba:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e8be:	53                   	push   ebx
c001e8bf:	55                   	push   ebp
c001e8c0:	50                   	push   eax
c001e8c1:	57                   	push   edi
c001e8c2:	e8 0c fb ff ff       	call   c001e3d3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e8c7:	eb 36                	jmp    c001e8ff <Vm::faultHandler(regs*)+0x42e>
c001e8c9:	83 ec 0c             	sub    esp,0xc
c001e8cc:	68 84 bc 02 c0       	push   0xc002bc84
c001e8d1:	e8 1b 40 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e8d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8db:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e8df:	e9 8b 03 00 00       	jmp    c001ec6f <Vm::faultHandler(regs*)+0x79e>
c001e8e4:	83 ec 0c             	sub    esp,0xc
c001e8e7:	68 89 bc 02 c0       	push   0xc002bc89
c001e8ec:	e8 00 40 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e8f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f6:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e8fa:	e9 70 03 00 00       	jmp    c001ec6f <Vm::faultHandler(regs*)+0x79e>
c001e8ff:	83 c4 20             	add    esp,0x20
c001e902:	e9 99 03 00 00       	jmp    c001eca0 <Vm::faultHandler(regs*)+0x7cf>
c001e907:	83 ec 0c             	sub    esp,0xc
c001e90a:	68 c7 bc 02 c0       	push   0xc002bcc7
c001e90f:	e8 dd 3f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e914:	83 c4 10             	add    esp,0x10
c001e917:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e91a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e91f:	74 0d                	je     c001e92e <Vm::faultHandler(regs*)+0x45d>
c001e921:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e928:	0f 87 9e 01 00 00    	ja     c001eacc <Vm::faultHandler(regs*)+0x5fb>
c001e92e:	83 ec 0c             	sub    esp,0xc
c001e931:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e935:	0f b7 db             	movzx  ebx,bx
c001e938:	50                   	push   eax
c001e939:	e8 9e f7 ff ff       	call   c001e0dc <Vm::inbv(unsigned short)>
c001e93e:	83 c4 0c             	add    esp,0xc
c001e941:	0f b6 c0             	movzx  eax,al
c001e944:	50                   	push   eax
c001e945:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e949:	50                   	push   eax
c001e94a:	53                   	push   ebx
c001e94b:	e8 41 fb ff ff       	call   c001e491 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e950:	83 c4 10             	add    esp,0x10
c001e953:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e956:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e95a:	74 03                	je     c001e95f <Vm::faultHandler(regs*)+0x48e>
c001e95c:	48                   	dec    eax
c001e95d:	eb 01                	jmp    c001e960 <Vm::faultHandler(regs*)+0x48f>
c001e95f:	40                   	inc    eax
c001e960:	0f b7 c0             	movzx  eax,ax
c001e963:	eb 7f                	jmp    c001e9e4 <Vm::faultHandler(regs*)+0x513>
c001e965:	83 ec 0c             	sub    esp,0xc
c001e968:	68 f9 bc 02 c0       	push   0xc002bcf9
c001e96d:	e8 7f 3f ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e978:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e97d:	74 0d                	je     c001e98c <Vm::faultHandler(regs*)+0x4bb>
c001e97f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e986:	0f 87 40 01 00 00    	ja     c001eacc <Vm::faultHandler(regs*)+0x5fb>
c001e98c:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e98f:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e993:	0f b7 db             	movzx  ebx,bx
c001e996:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e99b:	74 20                	je     c001e9bd <Vm::faultHandler(regs*)+0x4ec>
c001e99d:	ed                   	in     eax,dx
c001e99e:	51                   	push   ecx
c001e99f:	50                   	push   eax
c001e9a0:	56                   	push   esi
c001e9a1:	53                   	push   ebx
c001e9a2:	e8 15 fb ff ff       	call   c001e4bc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e9a7:	83 c4 10             	add    esp,0x10
c001e9aa:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e9ad:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e9b1:	74 05                	je     c001e9b8 <Vm::faultHandler(regs*)+0x4e7>
c001e9b3:	83 e8 04             	sub    eax,0x4
c001e9b6:	eb 27                	jmp    c001e9df <Vm::faultHandler(regs*)+0x50e>
c001e9b8:	83 c0 04             	add    eax,0x4
c001e9bb:	eb 22                	jmp    c001e9df <Vm::faultHandler(regs*)+0x50e>
c001e9bd:	66 ed                	in     ax,dx
c001e9bf:	0f b7 c0             	movzx  eax,ax
c001e9c2:	52                   	push   edx
c001e9c3:	50                   	push   eax
c001e9c4:	56                   	push   esi
c001e9c5:	53                   	push   ebx
c001e9c6:	e8 db fa ff ff       	call   c001e4a6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e9cb:	83 c4 10             	add    esp,0x10
c001e9ce:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e9d1:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e9d5:	74 05                	je     c001e9dc <Vm::faultHandler(regs*)+0x50b>
c001e9d7:	83 e8 02             	sub    eax,0x2
c001e9da:	eb 03                	jmp    c001e9df <Vm::faultHandler(regs*)+0x50e>
c001e9dc:	83 c0 02             	add    eax,0x2
c001e9df:	25 ff ff 00 00       	and    eax,0xffff
c001e9e4:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e9e7:	e9 b1 02 00 00       	jmp    c001ec9d <Vm::faultHandler(regs*)+0x7cc>
c001e9ec:	83 ec 0c             	sub    esp,0xc
c001e9ef:	4b                   	dec    ebx
c001e9f0:	68 ff bc 02 c0       	push   0xc002bcff
c001e9f5:	e8 f7 3e ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001e9fa:	83 c4 10             	add    esp,0x10
c001e9fd:	80 fb 05             	cmp    bl,0x5
c001ea00:	77 0a                	ja     c001ea0c <Vm::faultHandler(regs*)+0x53b>
c001ea02:	0f b6 db             	movzx  ebx,bl
c001ea05:	ff 24 9d 70 bd 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4290]
c001ea0c:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ea10:	eb 1b                	jmp    c001ea2d <Vm::faultHandler(regs*)+0x55c>
c001ea12:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ea16:	eb 15                	jmp    c001ea2d <Vm::faultHandler(regs*)+0x55c>
c001ea18:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ea1c:	eb 0f                	jmp    c001ea2d <Vm::faultHandler(regs*)+0x55c>
c001ea1e:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ea22:	eb 09                	jmp    c001ea2d <Vm::faultHandler(regs*)+0x55c>
c001ea24:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ea27:	eb 04                	jmp    c001ea2d <Vm::faultHandler(regs*)+0x55c>
c001ea29:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ea2d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ea32:	74 0d                	je     c001ea41 <Vm::faultHandler(regs*)+0x570>
c001ea34:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001ea3b:	0f 87 8b 00 00 00    	ja     c001eacc <Vm::faultHandler(regs*)+0x5fb>
c001ea41:	53                   	push   ebx
c001ea42:	53                   	push   ebx
c001ea43:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001ea47:	52                   	push   edx
c001ea48:	50                   	push   eax
c001ea49:	e8 0f fa ff ff       	call   c001e45d <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ea4e:	5e                   	pop    esi
c001ea4f:	0f b6 c0             	movzx  eax,al
c001ea52:	5d                   	pop    ebp
c001ea53:	50                   	push   eax
c001ea54:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ea58:	50                   	push   eax
c001ea59:	e8 91 f6 ff ff       	call   c001e0ef <Vm::outbv(unsigned short, unsigned char)>
c001ea5e:	83 c4 10             	add    esp,0x10
c001ea61:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ea64:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ea68:	74 03                	je     c001ea6d <Vm::faultHandler(regs*)+0x59c>
c001ea6a:	48                   	dec    eax
c001ea6b:	eb 01                	jmp    c001ea6e <Vm::faultHandler(regs*)+0x59d>
c001ea6d:	40                   	inc    eax
c001ea6e:	0f b7 c0             	movzx  eax,ax
c001ea71:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001ea74:	e9 24 02 00 00       	jmp    c001ec9d <Vm::faultHandler(regs*)+0x7cc>
c001ea79:	83 ec 0c             	sub    esp,0xc
c001ea7c:	4b                   	dec    ebx
c001ea7d:	68 ff bc 02 c0       	push   0xc002bcff
c001ea82:	e8 6a 3e ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ea87:	83 c4 10             	add    esp,0x10
c001ea8a:	80 fb 05             	cmp    bl,0x5
c001ea8d:	77 0a                	ja     c001ea99 <Vm::faultHandler(regs*)+0x5c8>
c001ea8f:	0f b6 db             	movzx  ebx,bl
c001ea92:	ff 24 9d 88 bd 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4278]
c001ea99:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ea9d:	eb 1b                	jmp    c001eaba <Vm::faultHandler(regs*)+0x5e9>
c001ea9f:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001eaa3:	eb 15                	jmp    c001eaba <Vm::faultHandler(regs*)+0x5e9>
c001eaa5:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001eaa9:	eb 0f                	jmp    c001eaba <Vm::faultHandler(regs*)+0x5e9>
c001eaab:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001eaaf:	eb 09                	jmp    c001eaba <Vm::faultHandler(regs*)+0x5e9>
c001eab1:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001eab4:	eb 04                	jmp    c001eaba <Vm::faultHandler(regs*)+0x5e9>
c001eab6:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eaba:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001eabd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eac2:	74 39                	je     c001eafd <Vm::faultHandler(regs*)+0x62c>
c001eac4:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001eaca:	76 31                	jbe    c001eafd <Vm::faultHandler(regs*)+0x62c>
c001eacc:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ead0:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ead4:	51                   	push   ecx
c001ead5:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ead9:	51                   	push   ecx
c001eada:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001eade:	51                   	push   ecx
c001eadf:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001eae3:	51                   	push   ecx
c001eae4:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eae8:	52                   	push   edx
c001eae9:	50                   	push   eax
c001eaea:	50                   	push   eax
c001eaeb:	68 cc bc 02 c0       	push   0xc002bccc
c001eaf0:	e8 fc 3d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001eaf5:	83 c4 20             	add    esp,0x20
c001eaf8:	e9 fb 01 00 00       	jmp    c001ecf8 <Vm::faultHandler(regs*)+0x827>
c001eafd:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001eb00:	0f b7 d3             	movzx  edx,bx
c001eb03:	81 e6 00 04 00 00    	and    esi,0x400
c001eb09:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001eb0c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb11:	74 1d                	je     c001eb30 <Vm::faultHandler(regs*)+0x65f>
c001eb13:	51                   	push   ecx
c001eb14:	51                   	push   ecx
c001eb15:	52                   	push   edx
c001eb16:	50                   	push   eax
c001eb17:	e8 64 f9 ff ff       	call   c001e480 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001eb1c:	83 c4 10             	add    esp,0x10
c001eb1f:	89 ea                	mov    edx,ebp
c001eb21:	ef                   	out    dx,eax
c001eb22:	85 f6                	test   esi,esi
c001eb24:	74 05                	je     c001eb2b <Vm::faultHandler(regs*)+0x65a>
c001eb26:	83 eb 04             	sub    ebx,0x4
c001eb29:	eb 21                	jmp    c001eb4c <Vm::faultHandler(regs*)+0x67b>
c001eb2b:	83 c3 04             	add    ebx,0x4
c001eb2e:	eb 1c                	jmp    c001eb4c <Vm::faultHandler(regs*)+0x67b>
c001eb30:	51                   	push   ecx
c001eb31:	51                   	push   ecx
c001eb32:	52                   	push   edx
c001eb33:	50                   	push   eax
c001eb34:	e8 35 f9 ff ff       	call   c001e46e <Vm::readWordFromReal(unsigned short, unsigned short)>
c001eb39:	83 c4 10             	add    esp,0x10
c001eb3c:	89 ea                	mov    edx,ebp
c001eb3e:	66 ef                	out    dx,ax
c001eb40:	85 f6                	test   esi,esi
c001eb42:	74 05                	je     c001eb49 <Vm::faultHandler(regs*)+0x678>
c001eb44:	83 eb 02             	sub    ebx,0x2
c001eb47:	eb 03                	jmp    c001eb4c <Vm::faultHandler(regs*)+0x67b>
c001eb49:	83 c3 02             	add    ebx,0x2
c001eb4c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001eb52:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001eb55:	e9 43 01 00 00       	jmp    c001ec9d <Vm::faultHandler(regs*)+0x7cc>
c001eb5a:	53                   	push   ebx
c001eb5b:	53                   	push   ebx
c001eb5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb60:	50                   	push   eax
c001eb61:	68 05 bd 02 c0       	push   0xc002bd05
c001eb66:	e8 86 3d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001eb6b:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001eb72:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb76:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb79:	e8 5e f5 ff ff       	call   c001e0dc <Vm::inbv(unsigned short)>
c001eb7e:	0f b6 c0             	movzx  eax,al
c001eb81:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001eb84:	eb 5e                	jmp    c001ebe4 <Vm::faultHandler(regs*)+0x713>
c001eb86:	51                   	push   ecx
c001eb87:	51                   	push   ecx
c001eb88:	53                   	push   ebx
c001eb89:	68 0b bd 02 c0       	push   0xc002bd0b
c001eb8e:	e8 5e 3d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001eb93:	83 c4 10             	add    esp,0x10
c001eb96:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eb9b:	74 07                	je     c001eba4 <Vm::faultHandler(regs*)+0x6d3>
c001eb9d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eba1:	ed                   	in     eax,dx
c001eba2:	eb 14                	jmp    c001ebb8 <Vm::faultHandler(regs*)+0x6e7>
c001eba4:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001eba7:	66 31 db             	xor    bx,bx
c001ebaa:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001ebad:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ebb1:	66 ed                	in     ax,dx
c001ebb3:	0f b7 c0             	movzx  eax,ax
c001ebb6:	09 d8                	or     eax,ebx
c001ebb8:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ebbb:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ebbf:	e9 dc 00 00 00       	jmp    c001eca0 <Vm::faultHandler(regs*)+0x7cf>
c001ebc4:	50                   	push   eax
c001ebc5:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ebc8:	53                   	push   ebx
c001ebc9:	68 11 bd 02 c0       	push   0xc002bd11
c001ebce:	e8 1e 3d ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ebd3:	58                   	pop    eax
c001ebd4:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ebd8:	5a                   	pop    edx
c001ebd9:	50                   	push   eax
c001ebda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ebde:	50                   	push   eax
c001ebdf:	e8 0b f5 ff ff       	call   c001e0ef <Vm::outbv(unsigned short, unsigned char)>
c001ebe4:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001ebe8:	e9 85 00 00 00       	jmp    c001ec72 <Vm::faultHandler(regs*)+0x7a1>
c001ebed:	50                   	push   eax
c001ebee:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ebf1:	53                   	push   ebx
c001ebf2:	68 1a bd 02 c0       	push   0xc002bd1a
c001ebf7:	e8 f5 3c ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ebfc:	83 c4 10             	add    esp,0x10
c001ebff:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ec03:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec08:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ec0b:	74 03                	je     c001ec10 <Vm::faultHandler(regs*)+0x73f>
c001ec0d:	ef                   	out    dx,eax
c001ec0e:	eb ab                	jmp    c001ebbb <Vm::faultHandler(regs*)+0x6ea>
c001ec10:	66 ef                	out    dx,ax
c001ec12:	eb a7                	jmp    c001ebbb <Vm::faultHandler(regs*)+0x6ea>
c001ec14:	55                   	push   ebp
c001ec15:	55                   	push   ebp
c001ec16:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec19:	68 23 bd 02 c0       	push   0xc002bd23
c001ec1e:	e8 ce 3c ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ec23:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ec2a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ec2e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec31:	e8 a6 f4 ff ff       	call   c001e0dc <Vm::inbv(unsigned short)>
c001ec36:	0f b6 c0             	movzx  eax,al
c001ec39:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ec3c:	eb 31                	jmp    c001ec6f <Vm::faultHandler(regs*)+0x79e>
c001ec3e:	56                   	push   esi
c001ec3f:	56                   	push   esi
c001ec40:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec43:	68 29 bd 02 c0       	push   0xc002bd29
c001ec48:	e8 a4 3c ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ec4d:	83 c4 10             	add    esp,0x10
c001ec50:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ec53:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec58:	74 03                	je     c001ec5d <Vm::faultHandler(regs*)+0x78c>
c001ec5a:	ed                   	in     eax,dx
c001ec5b:	eb 0d                	jmp    c001ec6a <Vm::faultHandler(regs*)+0x799>
c001ec5d:	66 ed                	in     ax,dx
c001ec5f:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001ec62:	0f b7 c0             	movzx  eax,ax
c001ec65:	66 31 d2             	xor    dx,dx
c001ec68:	09 d0                	or     eax,edx
c001ec6a:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ec6d:	eb 2e                	jmp    c001ec9d <Vm::faultHandler(regs*)+0x7cc>
c001ec6f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec72:	83 c4 10             	add    esp,0x10
c001ec75:	eb 29                	jmp    c001eca0 <Vm::faultHandler(regs*)+0x7cf>
c001ec77:	50                   	push   eax
c001ec78:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ec7b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ec7e:	68 38 bd 02 c0       	push   0xc002bd38
c001ec83:	e8 69 3c ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ec88:	83 c4 10             	add    esp,0x10
c001ec8b:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ec8e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec93:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ec96:	74 03                	je     c001ec9b <Vm::faultHandler(regs*)+0x7ca>
c001ec98:	ef                   	out    dx,eax
c001ec99:	eb 02                	jmp    c001ec9d <Vm::faultHandler(regs*)+0x7cc>
c001ec9b:	66 ef                	out    dx,ax
c001ec9d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eca0:	b0 01                	mov    al,0x1
c001eca2:	eb 56                	jmp    c001ecfa <Vm::faultHandler(regs*)+0x829>
c001eca4:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001eca8:	51                   	push   ecx
c001eca9:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ecad:	51                   	push   ecx
c001ecae:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ecb2:	51                   	push   ecx
c001ecb3:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ecb7:	51                   	push   ecx
c001ecb8:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ecbc:	52                   	push   edx
c001ecbd:	50                   	push   eax
c001ecbe:	50                   	push   eax
c001ecbf:	68 41 bd 02 c0       	push   0xc002bd41
c001ecc4:	e8 28 3c ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ecc9:	83 c4 20             	add    esp,0x20
c001eccc:	83 ec 0c             	sub    esp,0xc
c001eccf:	6a 60                	push   0x60
c001ecd1:	e8 06 f4 ff ff       	call   c001e0dc <Vm::inbv(unsigned short)>
c001ecd6:	83 c4 10             	add    esp,0x10
c001ecd9:	3c 1c                	cmp    al,0x1c
c001ecdb:	74 04                	je     c001ece1 <Vm::faultHandler(regs*)+0x810>
c001ecdd:	3c 5a                	cmp    al,0x5a
c001ecdf:	75 eb                	jne    c001eccc <Vm::faultHandler(regs*)+0x7fb>
c001ece1:	3c 1c                	cmp    al,0x1c
c001ece3:	74 04                	je     c001ece9 <Vm::faultHandler(regs*)+0x818>
c001ece5:	3c 5a                	cmp    al,0x5a
c001ece7:	75 0f                	jne    c001ecf8 <Vm::faultHandler(regs*)+0x827>
c001ece9:	83 ec 0c             	sub    esp,0xc
c001ecec:	6a 60                	push   0x60
c001ecee:	e8 e9 f3 ff ff       	call   c001e0dc <Vm::inbv(unsigned short)>
c001ecf3:	83 c4 10             	add    esp,0x10
c001ecf6:	eb e9                	jmp    c001ece1 <Vm::faultHandler(regs*)+0x810>
c001ecf8:	31 c0                	xor    eax,eax
c001ecfa:	83 c4 1c             	add    esp,0x1c
c001ecfd:	5b                   	pop    ebx
c001ecfe:	5e                   	pop    esi
c001ecff:	5f                   	pop    edi
c001ed00:	5d                   	pop    ebp
c001ed01:	c3                   	ret    

c001ed02 <Vm::fpuInternalTo32(unsigned long long)>:
c001ed02:	57                   	push   edi
c001ed03:	56                   	push   esi
c001ed04:	53                   	push   ebx
c001ed05:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0d:	89 d6                	mov    esi,edx
c001ed0f:	89 d7                	mov    edi,edx
c001ed11:	89 c1                	mov    ecx,eax
c001ed13:	c1 ef 14             	shr    edi,0x14
c001ed16:	89 d3                	mov    ebx,edx
c001ed18:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ed1e:	31 d2                	xor    edx,edx
c001ed20:	89 f8                	mov    eax,edi
c001ed22:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ed28:	bf ff 00 00 00       	mov    edi,0xff
c001ed2d:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ed32:	83 d2 ff             	adc    edx,0xffffffff
c001ed35:	39 c7                	cmp    edi,eax
c001ed37:	bf 00 00 00 00       	mov    edi,0x0
c001ed3c:	19 d7                	sbb    edi,edx
c001ed3e:	72 15                	jb     c001ed55 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ed40:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ed44:	c1 e0 17             	shl    eax,0x17
c001ed47:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ed4d:	09 f1                	or     ecx,esi
c001ed4f:	09 c1                	or     ecx,eax
c001ed51:	89 cf                	mov    edi,ecx
c001ed53:	eb 02                	jmp    c001ed57 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ed55:	31 ff                	xor    edi,edi
c001ed57:	89 f8                	mov    eax,edi
c001ed59:	5b                   	pop    ebx
c001ed5a:	5e                   	pop    esi
c001ed5b:	5f                   	pop    edi
c001ed5c:	c3                   	ret    

c001ed5d <Vm::fpuInternalTo64(unsigned long long)>:
c001ed5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed61:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed65:	c3                   	ret    

c001ed66 <Vm::fpu32ToInternal(unsigned int)>:
c001ed66:	57                   	push   edi
c001ed67:	31 ff                	xor    edi,edi
c001ed69:	56                   	push   esi
c001ed6a:	53                   	push   ebx
c001ed6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed6f:	89 cb                	mov    ebx,ecx
c001ed71:	89 ce                	mov    esi,ecx
c001ed73:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ed79:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ed7f:	c1 e9 17             	shr    ecx,0x17
c001ed82:	89 f0                	mov    eax,esi
c001ed84:	0f b6 d1             	movzx  edx,cl
c001ed87:	81 c2 80 03 00 00    	add    edx,0x380
c001ed8d:	89 d1                	mov    ecx,edx
c001ed8f:	89 fa                	mov    edx,edi
c001ed91:	c1 e1 14             	shl    ecx,0x14
c001ed94:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ed98:	c1 e0 1d             	shl    eax,0x1d
c001ed9b:	89 d7                	mov    edi,edx
c001ed9d:	89 c6                	mov    esi,eax
c001ed9f:	89 ca                	mov    edx,ecx
c001eda1:	89 f0                	mov    eax,esi
c001eda3:	09 fa                	or     edx,edi
c001eda5:	09 da                	or     edx,ebx
c001eda7:	5b                   	pop    ebx
c001eda8:	5e                   	pop    esi
c001eda9:	5f                   	pop    edi
c001edaa:	c3                   	ret    

c001edab <Vm::fpu64ToInternal(unsigned long long)>:
c001edab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edaf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001edb3:	c3                   	ret    

c001edb4 <Vm::fpuFloatToLong(unsigned long long)>:
c001edb4:	57                   	push   edi
c001edb5:	31 c0                	xor    eax,eax
c001edb7:	56                   	push   esi
c001edb8:	31 d2                	xor    edx,edx
c001edba:	53                   	push   ebx
c001edbb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001edc3:	89 d9                	mov    ecx,ebx
c001edc5:	c1 e9 14             	shr    ecx,0x14
c001edc8:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001edce:	89 cf                	mov    edi,ecx
c001edd0:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001edd6:	78 33                	js     c001ee0b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001edd8:	89 d9                	mov    ecx,ebx
c001edda:	89 f0                	mov    eax,esi
c001eddc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ede2:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ede8:	89 ca                	mov    edx,ecx
c001edea:	b9 34 00 00 00       	mov    ecx,0x34
c001edef:	29 f9                	sub    ecx,edi
c001edf1:	0f ad d0             	shrd   eax,edx,cl
c001edf4:	d3 fa                	sar    edx,cl
c001edf6:	f6 c1 20             	test   cl,0x20
c001edf9:	74 05                	je     c001ee00 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001edfb:	89 d0                	mov    eax,edx
c001edfd:	c1 fa 1f             	sar    edx,0x1f
c001ee00:	85 db                	test   ebx,ebx
c001ee02:	79 07                	jns    c001ee0b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee04:	f7 d8                	neg    eax
c001ee06:	83 d2 00             	adc    edx,0x0
c001ee09:	f7 da                	neg    edx
c001ee0b:	5b                   	pop    ebx
c001ee0c:	5e                   	pop    esi
c001ee0d:	5f                   	pop    edi
c001ee0e:	c3                   	ret    

c001ee0f <Vm::fpuULongToFloat(unsigned long long)>:
c001ee0f:	57                   	push   edi
c001ee10:	31 c9                	xor    ecx,ecx
c001ee12:	56                   	push   esi
c001ee13:	53                   	push   ebx
c001ee14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee18:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ee1c:	0f ba e7 14          	bt     edi,0x14
c001ee20:	72 07                	jb     c001ee29 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ee22:	01 f6                	add    esi,esi
c001ee24:	11 ff                	adc    edi,edi
c001ee26:	41                   	inc    ecx
c001ee27:	eb f3                	jmp    c001ee1c <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ee29:	89 fa                	mov    edx,edi
c001ee2b:	89 f0                	mov    eax,esi
c001ee2d:	bb 33 04 00 00       	mov    ebx,0x433
c001ee32:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ee38:	29 cb                	sub    ebx,ecx
c001ee3a:	89 d9                	mov    ecx,ebx
c001ee3c:	5b                   	pop    ebx
c001ee3d:	c1 e1 14             	shl    ecx,0x14
c001ee40:	5e                   	pop    esi
c001ee41:	09 ca                	or     edx,ecx
c001ee43:	5f                   	pop    edi
c001ee44:	c3                   	ret    

c001ee45 <Vm::fpuLongToFloat(long long)>:
c001ee45:	56                   	push   esi
c001ee46:	31 c0                	xor    eax,eax
c001ee48:	53                   	push   ebx
c001ee49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ee51:	39 c8                	cmp    eax,ecx
c001ee53:	19 d8                	sbb    eax,ebx
c001ee55:	7d 04                	jge    c001ee5b <Vm::fpuLongToFloat(long long)+0x16>
c001ee57:	31 f6                	xor    esi,esi
c001ee59:	eb 0c                	jmp    c001ee67 <Vm::fpuLongToFloat(long long)+0x22>
c001ee5b:	f7 d9                	neg    ecx
c001ee5d:	be 01 00 00 00       	mov    esi,0x1
c001ee62:	83 d3 00             	adc    ebx,0x0
c001ee65:	f7 db                	neg    ebx
c001ee67:	31 c0                	xor    eax,eax
c001ee69:	0f ba e3 14          	bt     ebx,0x14
c001ee6d:	72 07                	jb     c001ee76 <Vm::fpuLongToFloat(long long)+0x31>
c001ee6f:	01 c9                	add    ecx,ecx
c001ee71:	11 db                	adc    ebx,ebx
c001ee73:	40                   	inc    eax
c001ee74:	eb f3                	jmp    c001ee69 <Vm::fpuLongToFloat(long long)+0x24>
c001ee76:	ba 33 04 00 00       	mov    edx,0x433
c001ee7b:	29 c2                	sub    edx,eax
c001ee7d:	89 c8                	mov    eax,ecx
c001ee7f:	c1 e2 14             	shl    edx,0x14
c001ee82:	89 d9                	mov    ecx,ebx
c001ee84:	89 f3                	mov    ebx,esi
c001ee86:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ee8c:	09 ca                	or     edx,ecx
c001ee8e:	84 db                	test   bl,bl
c001ee90:	74 06                	je     c001ee98 <Vm::fpuLongToFloat(long long)+0x53>
c001ee92:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ee98:	5b                   	pop    ebx
c001ee99:	5e                   	pop    esi
c001ee9a:	c3                   	ret    

c001ee9b <Vm::fpuGet0()>:
c001ee9b:	31 c0                	xor    eax,eax
c001ee9d:	31 d2                	xor    edx,edx
c001ee9f:	c3                   	ret    

c001eea0 <Vm::fpuGet1()>:
c001eea0:	b8 01 00 00 00       	mov    eax,0x1
c001eea5:	31 d2                	xor    edx,edx
c001eea7:	c3                   	ret    

c001eea8 <Vm::fpuGetPi()>:
c001eea8:	b8 03 00 00 00       	mov    eax,0x3
c001eead:	31 d2                	xor    edx,edx
c001eeaf:	c3                   	ret    

c001eeb0 <Vm::fpuGetLog2E()>:
c001eeb0:	83 ec 18             	sub    esp,0x18
c001eeb3:	68 a0 bd 02 c0       	push   0xc002bda0
c001eeb8:	e8 a8 af ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001eebd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eec2:	31 d2                	xor    edx,edx
c001eec4:	83 c4 1c             	add    esp,0x1c
c001eec7:	c3                   	ret    

c001eec8 <Vm::fpuGetLogE2()>:
c001eec8:	83 ec 18             	sub    esp,0x18
c001eecb:	68 ac bd 02 c0       	push   0xc002bdac
c001eed0:	e8 90 af ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001eed5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eeda:	31 d2                	xor    edx,edx
c001eedc:	83 c4 1c             	add    esp,0x1c
c001eedf:	c3                   	ret    

c001eee0 <Vm::fpuGetLog210()>:
c001eee0:	83 ec 18             	sub    esp,0x18
c001eee3:	68 b8 bd 02 c0       	push   0xc002bdb8
c001eee8:	e8 78 af ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001eeed:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eef2:	31 d2                	xor    edx,edx
c001eef4:	83 c4 1c             	add    esp,0x1c
c001eef7:	c3                   	ret    

c001eef8 <Vm::fpuGetLog102()>:
c001eef8:	83 ec 18             	sub    esp,0x18
c001eefb:	68 c5 bd 02 c0       	push   0xc002bdc5
c001ef00:	e8 60 af ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001ef05:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef0a:	31 d2                	xor    edx,edx
c001ef0c:	83 c4 1c             	add    esp,0x1c
c001ef0f:	c3                   	ret    

c001ef10 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ef10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef14:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ef18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef1c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ef20:	0f 92 c0             	setb   al
c001ef23:	c3                   	ret    

c001ef24 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ef24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ef30:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ef34:	09 c2                	or     edx,eax
c001ef36:	0f 94 c0             	sete   al
c001ef39:	c3                   	ret    

c001ef3a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ef3a:	57                   	push   edi
c001ef3b:	56                   	push   esi
c001ef3c:	53                   	push   ebx
c001ef3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef41:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef45:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef49:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef4d:	57                   	push   edi
c001ef4e:	56                   	push   esi
c001ef4f:	53                   	push   ebx
c001ef50:	51                   	push   ecx
c001ef51:	e8 ce ff ff ff       	call   c001ef24 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	88 c2                	mov    dl,al
c001ef5b:	31 c0                	xor    eax,eax
c001ef5d:	84 d2                	test   dl,dl
c001ef5f:	75 0c                	jne    c001ef6d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ef61:	57                   	push   edi
c001ef62:	56                   	push   esi
c001ef63:	53                   	push   ebx
c001ef64:	51                   	push   ecx
c001ef65:	e8 a6 ff ff ff       	call   c001ef10 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ef6a:	83 c4 10             	add    esp,0x10
c001ef6d:	83 e0 01             	and    eax,0x1
c001ef70:	5b                   	pop    ebx
c001ef71:	88 c1                	mov    cl,al
c001ef73:	83 e2 01             	and    edx,0x1
c001ef76:	a0 a1 10 03 c0       	mov    al,ds:0xc00310a1
c001ef7b:	c1 e2 06             	shl    edx,0x6
c001ef7e:	83 e0 ba             	and    eax,0xffffffba
c001ef81:	5e                   	pop    esi
c001ef82:	09 c8                	or     eax,ecx
c001ef84:	5f                   	pop    edi
c001ef85:	09 d0                	or     eax,edx
c001ef87:	a2 a1 10 03 c0       	mov    ds:0xc00310a1,al
c001ef8c:	c3                   	ret    

c001ef8d <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ef8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef95:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ef99:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ef9d:	c3                   	ret    

c001ef9e <Vm::fpuAbs(unsigned long long)>:
c001ef9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efa6:	c3                   	ret    

c001efa7 <Vm::fpuChs(unsigned long long)>:
c001efa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efaf:	f7 d8                	neg    eax
c001efb1:	83 d2 00             	adc    edx,0x0
c001efb4:	f7 da                	neg    edx
c001efb6:	c3                   	ret    

c001efb7 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001efb7:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001efbb:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001efc0:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001efc4:	eb c7                	jmp    c001ef8d <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001efc6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001efc6:	53                   	push   ebx
c001efc7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001efcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efcf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efd3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efd7:	0f af ca             	imul   ecx,edx
c001efda:	0f af d8             	imul   ebx,eax
c001efdd:	f7 e2                	mul    edx
c001efdf:	01 d9                	add    ecx,ebx
c001efe1:	5b                   	pop    ebx
c001efe2:	01 ca                	add    edx,ecx
c001efe4:	c3                   	ret    

c001efe5 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001efe5:	83 ec 0c             	sub    esp,0xc
c001efe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff8:	e8 4f 71 00 00       	call   c002614c <__udivdi3>
c001effd:	83 c4 1c             	add    esp,0x1c
c001f000:	c3                   	ret    

c001f001 <Vm::fpuSquare(unsigned long long)>:
c001f001:	50                   	push   eax
c001f002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f006:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f00a:	52                   	push   edx
c001f00b:	50                   	push   eax
c001f00c:	52                   	push   edx
c001f00d:	50                   	push   eax
c001f00e:	e8 b3 ff ff ff       	call   c001efc6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f013:	83 c4 14             	add    esp,0x14
c001f016:	c3                   	ret    

c001f017 <Vm::fpuGetReg(int)>:
c001f017:	83 ec 0c             	sub    esp,0xc
c001f01a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f01f:	76 10                	jbe    c001f031 <Vm::fpuGetReg(int)+0x1a>
c001f021:	83 ec 0c             	sub    esp,0xc
c001f024:	68 d2 bd 02 c0       	push   0xc002bdd2
c001f029:	e8 37 ae ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001f02e:	83 c4 10             	add    esp,0x10
c001f031:	a0 a1 10 03 c0       	mov    al,ds:0xc00310a1
c001f036:	b9 08 00 00 00       	mov    ecx,0x8
c001f03b:	c0 e8 03             	shr    al,0x3
c001f03e:	83 e0 07             	and    eax,0x7
c001f041:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f045:	99                   	cdq    
c001f046:	f7 f9                	idiv   ecx
c001f048:	8b 04 d5 a4 10 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcef5c]
c001f04f:	8b 14 d5 a8 10 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcef58]
c001f056:	83 c4 0c             	add    esp,0xc
c001f059:	c3                   	ret    

c001f05a <Vm::fpuSetReg(int, unsigned long long)>:
c001f05a:	57                   	push   edi
c001f05b:	56                   	push   esi
c001f05c:	52                   	push   edx
c001f05d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f061:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f065:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f06a:	76 10                	jbe    c001f07c <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f06c:	83 ec 0c             	sub    esp,0xc
c001f06f:	68 e5 bd 02 c0       	push   0xc002bde5
c001f074:	e8 ec ad ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c001f079:	83 c4 10             	add    esp,0x10
c001f07c:	a0 a1 10 03 c0       	mov    al,ds:0xc00310a1
c001f081:	b9 08 00 00 00       	mov    ecx,0x8
c001f086:	c0 e8 03             	shr    al,0x3
c001f089:	83 e0 07             	and    eax,0x7
c001f08c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f090:	99                   	cdq    
c001f091:	f7 f9                	idiv   ecx
c001f093:	89 34 d5 a4 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef5c],esi
c001f09a:	89 3c d5 a8 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef58],edi
c001f0a1:	58                   	pop    eax
c001f0a2:	5e                   	pop    esi
c001f0a3:	5f                   	pop    edi
c001f0a4:	c3                   	ret    

c001f0a5 <Vm::fpuPush(unsigned long long)>:
c001f0a5:	a0 a1 10 03 c0       	mov    al,ds:0xc00310a1
c001f0aa:	c0 e8 03             	shr    al,0x3
c001f0ad:	83 e0 07             	and    eax,0x7
c001f0b0:	83 c0 07             	add    eax,0x7
c001f0b3:	88 c2                	mov    dl,al
c001f0b5:	83 e0 07             	and    eax,0x7
c001f0b8:	83 e2 07             	and    edx,0x7
c001f0bb:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f0c2:	8a 15 a1 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a1
c001f0c8:	83 e2 c7             	and    edx,0xffffffc7
c001f0cb:	09 ca                	or     edx,ecx
c001f0cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0d1:	88 15 a1 10 03 c0    	mov    BYTE PTR ds:0xc00310a1,dl
c001f0d7:	89 0c c5 a8 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef58],ecx
c001f0de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f0e2:	89 14 c5 a4 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef5c],edx
c001f0e9:	a1 e4 10 03 c0       	mov    eax,ds:0xc00310e4
c001f0ee:	83 f8 08             	cmp    eax,0x8
c001f0f1:	75 08                	jne    c001f0fb <Vm::fpuPush(unsigned long long)+0x56>
c001f0f3:	80 0d a0 10 03 c0 40 	or     BYTE PTR ds:0xc00310a0,0x40
c001f0fa:	c3                   	ret    
c001f0fb:	40                   	inc    eax
c001f0fc:	a3 e4 10 03 c0       	mov    ds:0xc00310e4,eax
c001f101:	c3                   	ret    

c001f102 <Vm::fpuPop()>:
c001f102:	8a 0d a1 10 03 c0    	mov    cl,BYTE PTR ds:0xc00310a1
c001f108:	53                   	push   ebx
c001f109:	c0 e9 03             	shr    cl,0x3
c001f10c:	8a 1d a1 10 03 c0    	mov    bl,BYTE PTR ds:0xc00310a1
c001f112:	83 e1 07             	and    ecx,0x7
c001f115:	83 e3 c7             	and    ebx,0xffffffc7
c001f118:	8b 04 cd a4 10 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcef5c]
c001f11f:	8b 14 cd a8 10 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcef58]
c001f126:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f12d:	83 e1 38             	and    ecx,0x38
c001f130:	09 d9                	or     ecx,ebx
c001f132:	88 0d a1 10 03 c0    	mov    BYTE PTR ds:0xc00310a1,cl
c001f138:	8b 0d e4 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310e4
c001f13e:	85 c9                	test   ecx,ecx
c001f140:	74 09                	je     c001f14b <Vm::fpuPop()+0x49>
c001f142:	49                   	dec    ecx
c001f143:	89 0d e4 10 03 c0    	mov    DWORD PTR ds:0xc00310e4,ecx
c001f149:	eb 07                	jmp    c001f152 <Vm::fpuPop()+0x50>
c001f14b:	80 0d a0 10 03 c0 40 	or     BYTE PTR ds:0xc00310a0,0x40
c001f152:	5b                   	pop    ebx
c001f153:	c3                   	ret    

c001f154 <Vm::x87Handler(regs*)>:
c001f154:	55                   	push   ebp
c001f155:	57                   	push   edi
c001f156:	56                   	push   esi
c001f157:	53                   	push   ebx
c001f158:	83 ec 1c             	sub    esp,0x1c
c001f15b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f15f:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f164:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f16f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f173:	50                   	push   eax
c001f174:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f178:	50                   	push   eax
c001f179:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f17d:	50                   	push   eax
c001f17e:	53                   	push   ebx
c001f17f:	e8 12 a5 ff ff       	call   c0019696 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f184:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f187:	83 c4 10             	add    esp,0x10
c001f18a:	89 c6                	mov    esi,eax
c001f18c:	80 fa d9             	cmp    dl,0xd9
c001f18f:	0f 85 52 01 00 00    	jne    c001f2e7 <Vm::x87Handler(regs*)+0x193>
c001f195:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f199:	8d 50 20             	lea    edx,[eax+0x20]
c001f19c:	80 fa 0e             	cmp    dl,0xe
c001f19f:	0f 87 86 00 00 00    	ja     c001f22b <Vm::x87Handler(regs*)+0xd7>
c001f1a5:	0f b6 d2             	movzx  edx,dl
c001f1a8:	ff 24 95 f8 bd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4208]
c001f1af:	e8 e7 fc ff ff       	call   c001ee9b <Vm::fpuGet0()>
c001f1b4:	eb 05                	jmp    c001f1bb <Vm::x87Handler(regs*)+0x67>
c001f1b6:	e8 e5 fc ff ff       	call   c001eea0 <Vm::fpuGet1()>
c001f1bb:	57                   	push   edi
c001f1bc:	57                   	push   edi
c001f1bd:	52                   	push   edx
c001f1be:	50                   	push   eax
c001f1bf:	e8 e1 fe ff ff       	call   c001f0a5 <Vm::fpuPush(unsigned long long)>
c001f1c4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f1c8:	83 c4 10             	add    esp,0x10
c001f1cb:	b0 01                	mov    al,0x1
c001f1cd:	e9 e3 09 00 00       	jmp    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001f1d2:	83 ec 0c             	sub    esp,0xc
c001f1d5:	6a 00                	push   0x0
c001f1d7:	e8 3b fe ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f1dc:	59                   	pop    ecx
c001f1dd:	5e                   	pop    esi
c001f1de:	52                   	push   edx
c001f1df:	50                   	push   eax
c001f1e0:	e8 c2 fd ff ff       	call   c001efa7 <Vm::fpuChs(unsigned long long)>
c001f1e5:	eb 13                	jmp    c001f1fa <Vm::x87Handler(regs*)+0xa6>
c001f1e7:	83 ec 0c             	sub    esp,0xc
c001f1ea:	6a 00                	push   0x0
c001f1ec:	e8 26 fe ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f1f1:	5f                   	pop    edi
c001f1f2:	5d                   	pop    ebp
c001f1f3:	52                   	push   edx
c001f1f4:	50                   	push   eax
c001f1f5:	e8 a4 fd ff ff       	call   c001ef9e <Vm::fpuAbs(unsigned long long)>
c001f1fa:	83 c4 0c             	add    esp,0xc
c001f1fd:	52                   	push   edx
c001f1fe:	50                   	push   eax
c001f1ff:	6a 00                	push   0x0
c001f201:	e8 54 fe ff ff       	call   c001f05a <Vm::fpuSetReg(int, unsigned long long)>
c001f206:	eb bc                	jmp    c001f1c4 <Vm::x87Handler(regs*)+0x70>
c001f208:	e8 d3 fc ff ff       	call   c001eee0 <Vm::fpuGetLog210()>
c001f20d:	eb ac                	jmp    c001f1bb <Vm::x87Handler(regs*)+0x67>
c001f20f:	e8 9c fc ff ff       	call   c001eeb0 <Vm::fpuGetLog2E()>
c001f214:	eb a5                	jmp    c001f1bb <Vm::x87Handler(regs*)+0x67>
c001f216:	e8 8d fc ff ff       	call   c001eea8 <Vm::fpuGetPi()>
c001f21b:	eb 9e                	jmp    c001f1bb <Vm::x87Handler(regs*)+0x67>
c001f21d:	e8 d6 fc ff ff       	call   c001eef8 <Vm::fpuGetLog102()>
c001f222:	eb 97                	jmp    c001f1bb <Vm::x87Handler(regs*)+0x67>
c001f224:	e8 9f fc ff ff       	call   c001eec8 <Vm::fpuGetLogE2()>
c001f229:	eb 90                	jmp    c001f1bb <Vm::x87Handler(regs*)+0x67>
c001f22b:	8d 50 40             	lea    edx,[eax+0x40]
c001f22e:	80 fa 07             	cmp    dl,0x7
c001f231:	77 15                	ja     c001f248 <Vm::x87Handler(regs*)+0xf4>
c001f233:	83 ec 0c             	sub    esp,0xc
c001f236:	2d c0 00 00 00       	sub    eax,0xc0
c001f23b:	50                   	push   eax
c001f23c:	e8 d6 fd ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f241:	59                   	pop    ecx
c001f242:	5e                   	pop    esi
c001f243:	e9 75 ff ff ff       	jmp    c001f1bd <Vm::x87Handler(regs*)+0x69>
c001f248:	8d 50 38             	lea    edx,[eax+0x38]
c001f24b:	80 fa 07             	cmp    dl,0x7
c001f24e:	77 3c                	ja     c001f28c <Vm::x87Handler(regs*)+0x138>
c001f250:	83 ec 0c             	sub    esp,0xc
c001f253:	2d c8 00 00 00       	sub    eax,0xc8
c001f258:	50                   	push   eax
c001f259:	e8 b9 fd ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f25e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f265:	89 c6                	mov    esi,eax
c001f267:	89 d7                	mov    edi,edx
c001f269:	e8 a9 fd ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f26e:	83 c4 0c             	add    esp,0xc
c001f271:	52                   	push   edx
c001f272:	50                   	push   eax
c001f273:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f277:	2d c8 00 00 00       	sub    eax,0xc8
c001f27c:	50                   	push   eax
c001f27d:	e8 d8 fd ff ff       	call   c001f05a <Vm::fpuSetReg(int, unsigned long long)>
c001f282:	83 c4 0c             	add    esp,0xc
c001f285:	57                   	push   edi
c001f286:	56                   	push   esi
c001f287:	e9 73 ff ff ff       	jmp    c001f1ff <Vm::x87Handler(regs*)+0xab>
c001f28c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f290:	84 d2                	test   dl,dl
c001f292:	75 0f                	jne    c001f2a3 <Vm::x87Handler(regs*)+0x14f>
c001f294:	83 ec 0c             	sub    esp,0xc
c001f297:	ff 36                	push   DWORD PTR [esi]
c001f299:	e8 c8 fa ff ff       	call   c001ed66 <Vm::fpu32ToInternal(unsigned int)>
c001f29e:	e9 bf 00 00 00       	jmp    c001f362 <Vm::x87Handler(regs*)+0x20e>
c001f2a3:	80 fa 03             	cmp    dl,0x3
c001f2a6:	75 13                	jne    c001f2bb <Vm::x87Handler(regs*)+0x167>
c001f2a8:	e8 55 fe ff ff       	call   c001f102 <Vm::fpuPop()>
c001f2ad:	55                   	push   ebp
c001f2ae:	55                   	push   ebp
c001f2af:	52                   	push   edx
c001f2b0:	50                   	push   eax
c001f2b1:	e8 4c fa ff ff       	call   c001ed02 <Vm::fpuInternalTo32(unsigned long long)>
c001f2b6:	e9 88 00 00 00       	jmp    c001f343 <Vm::x87Handler(regs*)+0x1ef>
c001f2bb:	80 fa 05             	cmp    dl,0x5
c001f2be:	75 0e                	jne    c001f2ce <Vm::x87Handler(regs*)+0x17a>
c001f2c0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f2c3:	66 a3 a2 10 03 c0    	mov    ds:0xc00310a2,ax
c001f2c9:	e9 df 00 00 00       	jmp    c001f3ad <Vm::x87Handler(regs*)+0x259>
c001f2ce:	31 c0                	xor    eax,eax
c001f2d0:	80 fa 07             	cmp    dl,0x7
c001f2d3:	0f 85 dc 08 00 00    	jne    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001f2d9:	66 a1 a2 10 03 c0    	mov    ax,ds:0xc00310a2
c001f2df:	66 89 06             	mov    WORD PTR [esi],ax
c001f2e2:	e9 c6 00 00 00       	jmp    c001f3ad <Vm::x87Handler(regs*)+0x259>
c001f2e7:	80 fa d8             	cmp    dl,0xd8
c001f2ea:	0f 84 c9 00 00 00    	je     c001f3b9 <Vm::x87Handler(regs*)+0x265>
c001f2f0:	80 fa dc             	cmp    dl,0xdc
c001f2f3:	0f 84 0d 02 00 00    	je     c001f506 <Vm::x87Handler(regs*)+0x3b2>
c001f2f9:	80 fa de             	cmp    dl,0xde
c001f2fc:	0f 84 cd 02 00 00    	je     c001f5cf <Vm::x87Handler(regs*)+0x47b>
c001f302:	80 fa dd             	cmp    dl,0xdd
c001f305:	0f 84 5f 04 00 00    	je     c001f76a <Vm::x87Handler(regs*)+0x616>
c001f30b:	80 fa da             	cmp    dl,0xda
c001f30e:	0f 84 24 05 00 00    	je     c001f838 <Vm::x87Handler(regs*)+0x6e4>
c001f314:	80 fa df             	cmp    dl,0xdf
c001f317:	0f 84 68 05 00 00    	je     c001f885 <Vm::x87Handler(regs*)+0x731>
c001f31d:	31 c0                	xor    eax,eax
c001f31f:	80 fa db             	cmp    dl,0xdb
c001f322:	0f 85 8d 08 00 00    	jne    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001f328:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f32c:	80 fa 03             	cmp    dl,0x3
c001f32f:	0f 85 70 06 00 00    	jne    c001f9a5 <Vm::x87Handler(regs*)+0x851>
c001f335:	e8 c8 fd ff ff       	call   c001f102 <Vm::fpuPop()>
c001f33a:	55                   	push   ebp
c001f33b:	55                   	push   ebp
c001f33c:	52                   	push   edx
c001f33d:	50                   	push   eax
c001f33e:	e8 71 fa ff ff       	call   c001edb4 <Vm::fpuFloatToLong(unsigned long long)>
c001f343:	83 c4 10             	add    esp,0x10
c001f346:	89 06                	mov    DWORD PTR [esi],eax
c001f348:	eb 63                	jmp    c001f3ad <Vm::x87Handler(regs*)+0x259>
c001f34a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f34e:	84 d2                	test   dl,dl
c001f350:	0f 85 e6 05 00 00    	jne    c001f93c <Vm::x87Handler(regs*)+0x7e8>
c001f356:	57                   	push   edi
c001f357:	57                   	push   edi
c001f358:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f35b:	ff 36                	push   DWORD PTR [esi]
c001f35d:	e8 49 fa ff ff       	call   c001edab <Vm::fpu64ToInternal(unsigned long long)>
c001f362:	5e                   	pop    esi
c001f363:	5f                   	pop    edi
c001f364:	52                   	push   edx
c001f365:	50                   	push   eax
c001f366:	e8 3a fd ff ff       	call   c001f0a5 <Vm::fpuPush(unsigned long long)>
c001f36b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f36f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f372:	e9 51 fe ff ff       	jmp    c001f1c8 <Vm::x87Handler(regs*)+0x74>
c001f377:	80 fa 03             	cmp    dl,0x3
c001f37a:	0f 85 d7 06 00 00    	jne    c001fa57 <Vm::x87Handler(regs*)+0x903>
c001f380:	57                   	push   edi
c001f381:	57                   	push   edi
c001f382:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f385:	ff 36                	push   DWORD PTR [esi]
c001f387:	e8 1f fa ff ff       	call   c001edab <Vm::fpu64ToInternal(unsigned long long)>
c001f38c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f393:	89 c6                	mov    esi,eax
c001f395:	89 d7                	mov    edi,edx
c001f397:	e8 7b fc ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f39c:	57                   	push   edi
c001f39d:	56                   	push   esi
c001f39e:	52                   	push   edx
c001f39f:	50                   	push   eax
c001f3a0:	e8 95 fb ff ff       	call   c001ef3a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f3a5:	83 c4 20             	add    esp,0x20
c001f3a8:	e8 55 fd ff ff       	call   c001f102 <Vm::fpuPop()>
c001f3ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3b1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f3b4:	e9 12 fe ff ff       	jmp    c001f1cb <Vm::x87Handler(regs*)+0x77>
c001f3b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3bd:	8d 50 40             	lea    edx,[eax+0x40]
c001f3c0:	80 fa 07             	cmp    dl,0x7
c001f3c3:	77 29                	ja     c001f3ee <Vm::x87Handler(regs*)+0x29a>
c001f3c5:	83 ec 0c             	sub    esp,0xc
c001f3c8:	2d c0 00 00 00       	sub    eax,0xc0
c001f3cd:	50                   	push   eax
c001f3ce:	e8 44 fc ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f3d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3da:	89 c6                	mov    esi,eax
c001f3dc:	89 d7                	mov    edi,edx
c001f3de:	e8 34 fc ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f3e3:	57                   	push   edi
c001f3e4:	56                   	push   esi
c001f3e5:	52                   	push   edx
c001f3e6:	50                   	push   eax
c001f3e7:	e8 a1 fb ff ff       	call   c001ef8d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f3ec:	eb 2f                	jmp    c001f41d <Vm::x87Handler(regs*)+0x2c9>
c001f3ee:	8d 50 38             	lea    edx,[eax+0x38]
c001f3f1:	80 fa 07             	cmp    dl,0x7
c001f3f4:	77 2f                	ja     c001f425 <Vm::x87Handler(regs*)+0x2d1>
c001f3f6:	83 ec 0c             	sub    esp,0xc
c001f3f9:	2d c8 00 00 00       	sub    eax,0xc8
c001f3fe:	50                   	push   eax
c001f3ff:	e8 13 fc ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f404:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f40b:	89 c6                	mov    esi,eax
c001f40d:	89 d7                	mov    edi,edx
c001f40f:	e8 03 fc ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f414:	57                   	push   edi
c001f415:	56                   	push   esi
c001f416:	52                   	push   edx
c001f417:	50                   	push   eax
c001f418:	e8 a9 fb ff ff       	call   c001efc6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f41d:	83 c4 1c             	add    esp,0x1c
c001f420:	e9 d8 fd ff ff       	jmp    c001f1fd <Vm::x87Handler(regs*)+0xa9>
c001f425:	8d 50 30             	lea    edx,[eax+0x30]
c001f428:	80 fa 07             	cmp    dl,0x7
c001f42b:	77 0d                	ja     c001f43a <Vm::x87Handler(regs*)+0x2e6>
c001f42d:	83 ec 0c             	sub    esp,0xc
c001f430:	2d d0 00 00 00       	sub    eax,0xd0
c001f435:	e9 99 03 00 00       	jmp    c001f7d3 <Vm::x87Handler(regs*)+0x67f>
c001f43a:	8d 50 28             	lea    edx,[eax+0x28]
c001f43d:	80 fa 07             	cmp    dl,0x7
c001f440:	77 0d                	ja     c001f44f <Vm::x87Handler(regs*)+0x2fb>
c001f442:	83 ec 0c             	sub    esp,0xc
c001f445:	2d d8 00 00 00       	sub    eax,0xd8
c001f44a:	e9 c0 03 00 00       	jmp    c001f80f <Vm::x87Handler(regs*)+0x6bb>
c001f44f:	8d 50 20             	lea    edx,[eax+0x20]
c001f452:	80 fa 07             	cmp    dl,0x7
c001f455:	77 1b                	ja     c001f472 <Vm::x87Handler(regs*)+0x31e>
c001f457:	83 ec 0c             	sub    esp,0xc
c001f45a:	2d e0 00 00 00       	sub    eax,0xe0
c001f45f:	50                   	push   eax
c001f460:	e8 b2 fb ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f465:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f46c:	89 c6                	mov    esi,eax
c001f46e:	89 d7                	mov    edi,edx
c001f470:	eb 22                	jmp    c001f494 <Vm::x87Handler(regs*)+0x340>
c001f472:	8d 50 18             	lea    edx,[eax+0x18]
c001f475:	80 fa 07             	cmp    dl,0x7
c001f478:	77 2d                	ja     c001f4a7 <Vm::x87Handler(regs*)+0x353>
c001f47a:	83 ec 0c             	sub    esp,0xc
c001f47d:	6a 00                	push   0x0
c001f47f:	e8 93 fb ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f484:	89 c6                	mov    esi,eax
c001f486:	89 d7                	mov    edi,edx
c001f488:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f48c:	2d e8 00 00 00       	sub    eax,0xe8
c001f491:	89 04 24             	mov    DWORD PTR [esp],eax
c001f494:	e8 7e fb ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f499:	57                   	push   edi
c001f49a:	56                   	push   esi
c001f49b:	52                   	push   edx
c001f49c:	50                   	push   eax
c001f49d:	e8 15 fb ff ff       	call   c001efb7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f4a2:	e9 76 ff ff ff       	jmp    c001f41d <Vm::x87Handler(regs*)+0x2c9>
c001f4a7:	8d 50 10             	lea    edx,[eax+0x10]
c001f4aa:	80 fa 07             	cmp    dl,0x7
c001f4ad:	77 1b                	ja     c001f4ca <Vm::x87Handler(regs*)+0x376>
c001f4af:	83 ec 0c             	sub    esp,0xc
c001f4b2:	2d f0 00 00 00       	sub    eax,0xf0
c001f4b7:	50                   	push   eax
c001f4b8:	e8 5a fb ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f4bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4c4:	89 c6                	mov    esi,eax
c001f4c6:	89 d7                	mov    edi,edx
c001f4c8:	eb 22                	jmp    c001f4ec <Vm::x87Handler(regs*)+0x398>
c001f4ca:	3c f7                	cmp    al,0xf7
c001f4cc:	0f 86 d1 03 00 00    	jbe    c001f8a3 <Vm::x87Handler(regs*)+0x74f>
c001f4d2:	83 ec 0c             	sub    esp,0xc
c001f4d5:	6a 00                	push   0x0
c001f4d7:	e8 3b fb ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f4dc:	89 c6                	mov    esi,eax
c001f4de:	89 d7                	mov    edi,edx
c001f4e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4e4:	2d f8 00 00 00       	sub    eax,0xf8
c001f4e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4ec:	e8 26 fb ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f4f1:	57                   	push   edi
c001f4f2:	56                   	push   esi
c001f4f3:	52                   	push   edx
c001f4f4:	50                   	push   eax
c001f4f5:	e8 eb fa ff ff       	call   c001efe5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f4fa:	83 c4 1c             	add    esp,0x1c
c001f4fd:	52                   	push   edx
c001f4fe:	50                   	push   eax
c001f4ff:	6a 00                	push   0x0
c001f501:	e9 51 02 00 00       	jmp    c001f757 <Vm::x87Handler(regs*)+0x603>
c001f506:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f50a:	8d 50 40             	lea    edx,[eax+0x40]
c001f50d:	80 fa 07             	cmp    dl,0x7
c001f510:	77 37                	ja     c001f549 <Vm::x87Handler(regs*)+0x3f5>
c001f512:	83 ec 0c             	sub    esp,0xc
c001f515:	2d c0 00 00 00       	sub    eax,0xc0
c001f51a:	50                   	push   eax
c001f51b:	e8 f7 fa ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f520:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f527:	89 c6                	mov    esi,eax
c001f529:	89 d7                	mov    edi,edx
c001f52b:	e8 e7 fa ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f530:	57                   	push   edi
c001f531:	56                   	push   esi
c001f532:	52                   	push   edx
c001f533:	50                   	push   eax
c001f534:	e8 54 fa ff ff       	call   c001ef8d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f539:	83 c4 1c             	add    esp,0x1c
c001f53c:	52                   	push   edx
c001f53d:	50                   	push   eax
c001f53e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f542:	2d c0 00 00 00       	sub    eax,0xc0
c001f547:	eb 3d                	jmp    c001f586 <Vm::x87Handler(regs*)+0x432>
c001f549:	8d 50 38             	lea    edx,[eax+0x38]
c001f54c:	80 fa 07             	cmp    dl,0x7
c001f54f:	77 3b                	ja     c001f58c <Vm::x87Handler(regs*)+0x438>
c001f551:	83 ec 0c             	sub    esp,0xc
c001f554:	2d c8 00 00 00       	sub    eax,0xc8
c001f559:	50                   	push   eax
c001f55a:	e8 b8 fa ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f55f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f566:	89 c6                	mov    esi,eax
c001f568:	89 d7                	mov    edi,edx
c001f56a:	e8 a8 fa ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f56f:	57                   	push   edi
c001f570:	56                   	push   esi
c001f571:	52                   	push   edx
c001f572:	50                   	push   eax
c001f573:	e8 4e fa ff ff       	call   c001efc6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f578:	83 c4 1c             	add    esp,0x1c
c001f57b:	52                   	push   edx
c001f57c:	50                   	push   eax
c001f57d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f581:	2d c8 00 00 00       	sub    eax,0xc8
c001f586:	50                   	push   eax
c001f587:	e9 75 fc ff ff       	jmp    c001f201 <Vm::x87Handler(regs*)+0xad>
c001f58c:	83 c0 18             	add    eax,0x18
c001f58f:	3c 07                	cmp    al,0x7
c001f591:	0f 87 3b 04 00 00    	ja     c001f9d2 <Vm::x87Handler(regs*)+0x87e>
c001f597:	83 ec 0c             	sub    esp,0xc
c001f59a:	6a 00                	push   0x0
c001f59c:	e8 76 fa ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f5a1:	89 c6                	mov    esi,eax
c001f5a3:	89 d7                	mov    edi,edx
c001f5a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5a9:	2d e8 00 00 00       	sub    eax,0xe8
c001f5ae:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5b1:	e8 61 fa ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f5b6:	57                   	push   edi
c001f5b7:	56                   	push   esi
c001f5b8:	52                   	push   edx
c001f5b9:	50                   	push   eax
c001f5ba:	e8 f8 f9 ff ff       	call   c001efb7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f5bf:	83 c4 1c             	add    esp,0x1c
c001f5c2:	52                   	push   edx
c001f5c3:	50                   	push   eax
c001f5c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5c8:	2d e8 00 00 00       	sub    eax,0xe8
c001f5cd:	eb b7                	jmp    c001f586 <Vm::x87Handler(regs*)+0x432>
c001f5cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5d3:	8d 50 40             	lea    edx,[eax+0x40]
c001f5d6:	80 fa 07             	cmp    dl,0x7
c001f5d9:	77 3a                	ja     c001f615 <Vm::x87Handler(regs*)+0x4c1>
c001f5db:	83 ec 0c             	sub    esp,0xc
c001f5de:	2d c0 00 00 00       	sub    eax,0xc0
c001f5e3:	50                   	push   eax
c001f5e4:	e8 2e fa ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f5e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5f0:	89 c6                	mov    esi,eax
c001f5f2:	89 d7                	mov    edi,edx
c001f5f4:	e8 1e fa ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f5f9:	57                   	push   edi
c001f5fa:	56                   	push   esi
c001f5fb:	52                   	push   edx
c001f5fc:	50                   	push   eax
c001f5fd:	e8 8b f9 ff ff       	call   c001ef8d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f602:	83 c4 1c             	add    esp,0x1c
c001f605:	52                   	push   edx
c001f606:	50                   	push   eax
c001f607:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f60b:	2d c0 00 00 00       	sub    eax,0xc0
c001f610:	e9 9e 01 00 00       	jmp    c001f7b3 <Vm::x87Handler(regs*)+0x65f>
c001f615:	8d 50 20             	lea    edx,[eax+0x20]
c001f618:	80 fa 07             	cmp    dl,0x7
c001f61b:	77 3a                	ja     c001f657 <Vm::x87Handler(regs*)+0x503>
c001f61d:	83 ec 0c             	sub    esp,0xc
c001f620:	2d e0 00 00 00       	sub    eax,0xe0
c001f625:	50                   	push   eax
c001f626:	e8 ec f9 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f62b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f632:	89 c6                	mov    esi,eax
c001f634:	89 d7                	mov    edi,edx
c001f636:	e8 dc f9 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f63b:	57                   	push   edi
c001f63c:	56                   	push   esi
c001f63d:	52                   	push   edx
c001f63e:	50                   	push   eax
c001f63f:	e8 73 f9 ff ff       	call   c001efb7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f644:	83 c4 1c             	add    esp,0x1c
c001f647:	52                   	push   edx
c001f648:	50                   	push   eax
c001f649:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f64d:	2d e0 00 00 00       	sub    eax,0xe0
c001f652:	e9 5c 01 00 00       	jmp    c001f7b3 <Vm::x87Handler(regs*)+0x65f>
c001f657:	8d 50 18             	lea    edx,[eax+0x18]
c001f65a:	80 fa 07             	cmp    dl,0x7
c001f65d:	77 3b                	ja     c001f69a <Vm::x87Handler(regs*)+0x546>
c001f65f:	83 ec 0c             	sub    esp,0xc
c001f662:	6a 00                	push   0x0
c001f664:	e8 ae f9 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f669:	89 c6                	mov    esi,eax
c001f66b:	89 d7                	mov    edi,edx
c001f66d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f671:	2d e8 00 00 00       	sub    eax,0xe8
c001f676:	89 04 24             	mov    DWORD PTR [esp],eax
c001f679:	e8 99 f9 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f67e:	57                   	push   edi
c001f67f:	56                   	push   esi
c001f680:	52                   	push   edx
c001f681:	50                   	push   eax
c001f682:	e8 30 f9 ff ff       	call   c001efb7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f687:	83 c4 1c             	add    esp,0x1c
c001f68a:	52                   	push   edx
c001f68b:	50                   	push   eax
c001f68c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f690:	2d e8 00 00 00       	sub    eax,0xe8
c001f695:	e9 19 01 00 00       	jmp    c001f7b3 <Vm::x87Handler(regs*)+0x65f>
c001f69a:	8d 50 38             	lea    edx,[eax+0x38]
c001f69d:	80 fa 07             	cmp    dl,0x7
c001f6a0:	77 37                	ja     c001f6d9 <Vm::x87Handler(regs*)+0x585>
c001f6a2:	83 ec 0c             	sub    esp,0xc
c001f6a5:	2d c8 00 00 00       	sub    eax,0xc8
c001f6aa:	50                   	push   eax
c001f6ab:	e8 67 f9 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f6b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6b7:	89 c6                	mov    esi,eax
c001f6b9:	89 d7                	mov    edi,edx
c001f6bb:	e8 57 f9 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f6c0:	57                   	push   edi
c001f6c1:	56                   	push   esi
c001f6c2:	52                   	push   edx
c001f6c3:	50                   	push   eax
c001f6c4:	e8 fd f8 ff ff       	call   c001efc6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f6c9:	83 c4 1c             	add    esp,0x1c
c001f6cc:	52                   	push   edx
c001f6cd:	50                   	push   eax
c001f6ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6d2:	2d c8 00 00 00       	sub    eax,0xc8
c001f6d7:	eb 7d                	jmp    c001f756 <Vm::x87Handler(regs*)+0x602>
c001f6d9:	3c f7                	cmp    al,0xf7
c001f6db:	76 38                	jbe    c001f715 <Vm::x87Handler(regs*)+0x5c1>
c001f6dd:	83 ec 0c             	sub    esp,0xc
c001f6e0:	6a 00                	push   0x0
c001f6e2:	e8 30 f9 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f6e7:	89 c6                	mov    esi,eax
c001f6e9:	89 d7                	mov    edi,edx
c001f6eb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6ef:	2d f8 00 00 00       	sub    eax,0xf8
c001f6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6f7:	e8 1b f9 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f6fc:	57                   	push   edi
c001f6fd:	56                   	push   esi
c001f6fe:	52                   	push   edx
c001f6ff:	50                   	push   eax
c001f700:	e8 e0 f8 ff ff       	call   c001efe5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f705:	83 c4 1c             	add    esp,0x1c
c001f708:	52                   	push   edx
c001f709:	50                   	push   eax
c001f70a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f70e:	2d f8 00 00 00       	sub    eax,0xf8
c001f713:	eb 41                	jmp    c001f756 <Vm::x87Handler(regs*)+0x602>
c001f715:	8d 50 10             	lea    edx,[eax+0x10]
c001f718:	80 fa 07             	cmp    dl,0x7
c001f71b:	0f 87 5a 01 00 00    	ja     c001f87b <Vm::x87Handler(regs*)+0x727>
c001f721:	83 ec 0c             	sub    esp,0xc
c001f724:	2d f0 00 00 00       	sub    eax,0xf0
c001f729:	50                   	push   eax
c001f72a:	e8 e8 f8 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f72f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f736:	89 c6                	mov    esi,eax
c001f738:	89 d7                	mov    edi,edx
c001f73a:	e8 d8 f8 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f73f:	57                   	push   edi
c001f740:	56                   	push   esi
c001f741:	52                   	push   edx
c001f742:	50                   	push   eax
c001f743:	e8 9d f8 ff ff       	call   c001efe5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f748:	83 c4 1c             	add    esp,0x1c
c001f74b:	52                   	push   edx
c001f74c:	50                   	push   eax
c001f74d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f751:	2d f0 00 00 00       	sub    eax,0xf0
c001f756:	50                   	push   eax
c001f757:	e8 fe f8 ff ff       	call   c001f05a <Vm::fpuSetReg(int, unsigned long long)>
c001f75c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f760:	e8 9d f9 ff ff       	call   c001f102 <Vm::fpuPop()>
c001f765:	e9 5e fa ff ff       	jmp    c001f1c8 <Vm::x87Handler(regs*)+0x74>
c001f76a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f76e:	8d 50 30             	lea    edx,[eax+0x30]
c001f771:	80 fa 07             	cmp    dl,0x7
c001f774:	77 1d                	ja     c001f793 <Vm::x87Handler(regs*)+0x63f>
c001f776:	83 ec 0c             	sub    esp,0xc
c001f779:	6a 00                	push   0x0
c001f77b:	e8 97 f8 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f780:	83 c4 0c             	add    esp,0xc
c001f783:	52                   	push   edx
c001f784:	50                   	push   eax
c001f785:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f789:	2d d0 00 00 00       	sub    eax,0xd0
c001f78e:	e9 f3 fd ff ff       	jmp    c001f586 <Vm::x87Handler(regs*)+0x432>
c001f793:	8d 50 28             	lea    edx,[eax+0x28]
c001f796:	80 fa 07             	cmp    dl,0x7
c001f799:	77 28                	ja     c001f7c3 <Vm::x87Handler(regs*)+0x66f>
c001f79b:	83 ec 0c             	sub    esp,0xc
c001f79e:	6a 00                	push   0x0
c001f7a0:	e8 72 f8 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f7a5:	83 c4 0c             	add    esp,0xc
c001f7a8:	52                   	push   edx
c001f7a9:	50                   	push   eax
c001f7aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7ae:	2d d8 00 00 00       	sub    eax,0xd8
c001f7b3:	50                   	push   eax
c001f7b4:	e8 a1 f8 ff ff       	call   c001f05a <Vm::fpuSetReg(int, unsigned long long)>
c001f7b9:	e8 44 f9 ff ff       	call   c001f102 <Vm::fpuPop()>
c001f7be:	e9 01 fa ff ff       	jmp    c001f1c4 <Vm::x87Handler(regs*)+0x70>
c001f7c3:	8d 50 20             	lea    edx,[eax+0x20]
c001f7c6:	80 fa 07             	cmp    dl,0x7
c001f7c9:	77 30                	ja     c001f7fb <Vm::x87Handler(regs*)+0x6a7>
c001f7cb:	83 ec 0c             	sub    esp,0xc
c001f7ce:	2d e0 00 00 00       	sub    eax,0xe0
c001f7d3:	50                   	push   eax
c001f7d4:	e8 3e f8 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f7d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7e0:	89 c6                	mov    esi,eax
c001f7e2:	89 d7                	mov    edi,edx
c001f7e4:	e8 2e f8 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f7e9:	57                   	push   edi
c001f7ea:	56                   	push   esi
c001f7eb:	52                   	push   edx
c001f7ec:	50                   	push   eax
c001f7ed:	e8 48 f7 ff ff       	call   c001ef3a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f7f2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f7f6:	e9 54 02 00 00       	jmp    c001fa4f <Vm::x87Handler(regs*)+0x8fb>
c001f7fb:	8d 50 18             	lea    edx,[eax+0x18]
c001f7fe:	80 fa 07             	cmp    dl,0x7
c001f801:	0f 87 43 fb ff ff    	ja     c001f34a <Vm::x87Handler(regs*)+0x1f6>
c001f807:	83 ec 0c             	sub    esp,0xc
c001f80a:	2d e8 00 00 00       	sub    eax,0xe8
c001f80f:	50                   	push   eax
c001f810:	e8 02 f8 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f815:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f81c:	89 c6                	mov    esi,eax
c001f81e:	89 d7                	mov    edi,edx
c001f820:	e8 f2 f7 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f825:	57                   	push   edi
c001f826:	56                   	push   esi
c001f827:	52                   	push   edx
c001f828:	50                   	push   eax
c001f829:	e8 0c f7 ff ff       	call   c001ef3a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f82e:	83 c4 20             	add    esp,0x20
c001f831:	e8 cc f8 ff ff       	call   c001f102 <Vm::fpuPop()>
c001f836:	eb 62                	jmp    c001f89a <Vm::x87Handler(regs*)+0x746>
c001f838:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f83c:	0f 85 0f 01 00 00    	jne    c001f951 <Vm::x87Handler(regs*)+0x7fd>
c001f842:	83 ec 0c             	sub    esp,0xc
c001f845:	6a 01                	push   0x1
c001f847:	e8 cb f7 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f84c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f853:	89 c6                	mov    esi,eax
c001f855:	89 d7                	mov    edi,edx
c001f857:	e8 bb f7 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f85c:	57                   	push   edi
c001f85d:	56                   	push   esi
c001f85e:	52                   	push   edx
c001f85f:	50                   	push   eax
c001f860:	e8 d5 f6 ff ff       	call   c001ef3a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f865:	83 c4 20             	add    esp,0x20
c001f868:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f86c:	e8 91 f8 ff ff       	call   c001f102 <Vm::fpuPop()>
c001f871:	e8 8c f8 ff ff       	call   c001f102 <Vm::fpuPop()>
c001f876:	e9 50 f9 ff ff       	jmp    c001f1cb <Vm::x87Handler(regs*)+0x77>
c001f87b:	3c d9                	cmp    al,0xd9
c001f87d:	0f 85 b5 02 00 00    	jne    c001fb38 <Vm::x87Handler(regs*)+0x9e4>
c001f883:	eb bd                	jmp    c001f842 <Vm::x87Handler(regs*)+0x6ee>
c001f885:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f889:	0f 85 ea 02 00 00    	jne    c001fb79 <Vm::x87Handler(regs*)+0xa25>
c001f88f:	0f b7 05 a0 10 03 c0 	movzx  eax,WORD PTR ds:0xc00310a0
c001f896:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f89a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f89e:	e9 28 f9 ff ff       	jmp    c001f1cb <Vm::x87Handler(regs*)+0x77>
c001f8a3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8a7:	84 d2                	test   dl,dl
c001f8a9:	75 0f                	jne    c001f8ba <Vm::x87Handler(regs*)+0x766>
c001f8ab:	83 ec 0c             	sub    esp,0xc
c001f8ae:	ff 36                	push   DWORD PTR [esi]
c001f8b0:	e8 b1 f4 ff ff       	call   c001ed66 <Vm::fpu32ToInternal(unsigned int)>
c001f8b5:	e9 2c 01 00 00       	jmp    c001f9e6 <Vm::x87Handler(regs*)+0x892>
c001f8ba:	80 fa 01             	cmp    dl,0x1
c001f8bd:	75 0f                	jne    c001f8ce <Vm::x87Handler(regs*)+0x77a>
c001f8bf:	83 ec 0c             	sub    esp,0xc
c001f8c2:	ff 36                	push   DWORD PTR [esi]
c001f8c4:	e8 9d f4 ff ff       	call   c001ed66 <Vm::fpu32ToInternal(unsigned int)>
c001f8c9:	e9 81 02 00 00       	jmp    c001fb4f <Vm::x87Handler(regs*)+0x9fb>
c001f8ce:	80 fa 04             	cmp    dl,0x4
c001f8d1:	75 0f                	jne    c001f8e2 <Vm::x87Handler(regs*)+0x78e>
c001f8d3:	83 ec 0c             	sub    esp,0xc
c001f8d6:	ff 36                	push   DWORD PTR [esi]
c001f8d8:	e8 89 f4 ff ff       	call   c001ed66 <Vm::fpu32ToInternal(unsigned int)>
c001f8dd:	e9 86 01 00 00       	jmp    c001fa68 <Vm::x87Handler(regs*)+0x914>
c001f8e2:	80 fa 05             	cmp    dl,0x5
c001f8e5:	75 1b                	jne    c001f902 <Vm::x87Handler(regs*)+0x7ae>
c001f8e7:	83 ec 0c             	sub    esp,0xc
c001f8ea:	6a 00                	push   0x0
c001f8ec:	e8 26 f7 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f8f1:	89 c7                	mov    edi,eax
c001f8f3:	89 d5                	mov    ebp,edx
c001f8f5:	58                   	pop    eax
c001f8f6:	ff 36                	push   DWORD PTR [esi]
c001f8f8:	e8 69 f4 ff ff       	call   c001ed66 <Vm::fpu32ToInternal(unsigned int)>
c001f8fd:	e9 a3 01 00 00       	jmp    c001faa5 <Vm::x87Handler(regs*)+0x951>
c001f902:	80 fa 06             	cmp    dl,0x6
c001f905:	75 0f                	jne    c001f916 <Vm::x87Handler(regs*)+0x7c2>
c001f907:	83 ec 0c             	sub    esp,0xc
c001f90a:	ff 36                	push   DWORD PTR [esi]
c001f90c:	e8 55 f4 ff ff       	call   c001ed66 <Vm::fpu32ToInternal(unsigned int)>
c001f911:	e9 ae 01 00 00       	jmp    c001fac4 <Vm::x87Handler(regs*)+0x970>
c001f916:	31 c0                	xor    eax,eax
c001f918:	80 fa 07             	cmp    dl,0x7
c001f91b:	0f 85 94 02 00 00    	jne    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001f921:	83 ec 0c             	sub    esp,0xc
c001f924:	6a 00                	push   0x0
c001f926:	e8 ec f6 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f92b:	89 c7                	mov    edi,eax
c001f92d:	89 d5                	mov    ebp,edx
c001f92f:	58                   	pop    eax
c001f930:	ff 36                	push   DWORD PTR [esi]
c001f932:	e8 2f f4 ff ff       	call   c001ed66 <Vm::fpu32ToInternal(unsigned int)>
c001f937:	e9 cb 01 00 00       	jmp    c001fb07 <Vm::x87Handler(regs*)+0x9b3>
c001f93c:	80 fa 03             	cmp    dl,0x3
c001f93f:	0f 85 d3 01 00 00    	jne    c001fb18 <Vm::x87Handler(regs*)+0x9c4>
c001f945:	e8 b8 f7 ff ff       	call   c001f102 <Vm::fpuPop()>
c001f94a:	51                   	push   ecx
c001f94b:	51                   	push   ecx
c001f94c:	e9 de 01 00 00       	jmp    c001fb2f <Vm::x87Handler(regs*)+0x9db>
c001f951:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f955:	80 fa 01             	cmp    dl,0x1
c001f958:	75 09                	jne    c001f963 <Vm::x87Handler(regs*)+0x80f>
c001f95a:	57                   	push   edi
c001f95b:	57                   	push   edi
c001f95c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f95e:	e9 e3 01 00 00       	jmp    c001fb46 <Vm::x87Handler(regs*)+0x9f2>
c001f963:	80 fa 04             	cmp    dl,0x4
c001f966:	75 12                	jne    c001f97a <Vm::x87Handler(regs*)+0x826>
c001f968:	31 d2                	xor    edx,edx
c001f96a:	51                   	push   ecx
c001f96b:	51                   	push   ecx
c001f96c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f96e:	52                   	push   edx
c001f96f:	50                   	push   eax
c001f970:	e8 d0 f4 ff ff       	call   c001ee45 <Vm::fpuLongToFloat(long long)>
c001f975:	e9 ee 00 00 00       	jmp    c001fa68 <Vm::x87Handler(regs*)+0x914>
c001f97a:	31 c0                	xor    eax,eax
c001f97c:	80 fa 07             	cmp    dl,0x7
c001f97f:	0f 85 30 02 00 00    	jne    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001f985:	83 ec 0c             	sub    esp,0xc
c001f988:	6a 00                	push   0x0
c001f98a:	e8 88 f6 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f98f:	89 c7                	mov    edi,eax
c001f991:	89 d5                	mov    ebp,edx
c001f993:	58                   	pop    eax
c001f994:	8b 06                	mov    eax,DWORD PTR [esi]
c001f996:	5a                   	pop    edx
c001f997:	31 d2                	xor    edx,edx
c001f999:	52                   	push   edx
c001f99a:	50                   	push   eax
c001f99b:	e8 a5 f4 ff ff       	call   c001ee45 <Vm::fpuLongToFloat(long long)>
c001f9a0:	e9 62 01 00 00       	jmp    c001fb07 <Vm::x87Handler(regs*)+0x9b3>
c001f9a5:	84 d2                	test   dl,dl
c001f9a7:	75 0d                	jne    c001f9b6 <Vm::x87Handler(regs*)+0x862>
c001f9a9:	31 d2                	xor    edx,edx
c001f9ab:	55                   	push   ebp
c001f9ac:	55                   	push   ebp
c001f9ad:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9af:	52                   	push   edx
c001f9b0:	50                   	push   eax
c001f9b1:	e9 d3 01 00 00       	jmp    c001fb89 <Vm::x87Handler(regs*)+0xa35>
c001f9b6:	31 c0                	xor    eax,eax
c001f9b8:	80 fa 02             	cmp    dl,0x2
c001f9bb:	0f 85 f4 01 00 00    	jne    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001f9c1:	83 ec 0c             	sub    esp,0xc
c001f9c4:	6a 00                	push   0x0
c001f9c6:	e8 4c f6 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f9cb:	59                   	pop    ecx
c001f9cc:	5f                   	pop    edi
c001f9cd:	e9 6a f9 ff ff       	jmp    c001f33c <Vm::x87Handler(regs*)+0x1e8>
c001f9d2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9d6:	84 d2                	test   dl,dl
c001f9d8:	75 2a                	jne    c001fa04 <Vm::x87Handler(regs*)+0x8b0>
c001f9da:	50                   	push   eax
c001f9db:	50                   	push   eax
c001f9dc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f9df:	ff 36                	push   DWORD PTR [esi]
c001f9e1:	e8 c5 f3 ff ff       	call   c001edab <Vm::fpu64ToInternal(unsigned long long)>
c001f9e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9ed:	89 c6                	mov    esi,eax
c001f9ef:	89 d7                	mov    edi,edx
c001f9f1:	e8 21 f6 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001f9f6:	57                   	push   edi
c001f9f7:	56                   	push   esi
c001f9f8:	52                   	push   edx
c001f9f9:	50                   	push   eax
c001f9fa:	e8 8e f5 ff ff       	call   c001ef8d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f9ff:	e9 64 01 00 00       	jmp    c001fb68 <Vm::x87Handler(regs*)+0xa14>
c001fa04:	80 fa 01             	cmp    dl,0x1
c001fa07:	75 11                	jne    c001fa1a <Vm::x87Handler(regs*)+0x8c6>
c001fa09:	50                   	push   eax
c001fa0a:	50                   	push   eax
c001fa0b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa0e:	ff 36                	push   DWORD PTR [esi]
c001fa10:	e8 96 f3 ff ff       	call   c001edab <Vm::fpu64ToInternal(unsigned long long)>
c001fa15:	e9 35 01 00 00       	jmp    c001fb4f <Vm::x87Handler(regs*)+0x9fb>
c001fa1a:	80 fa 02             	cmp    dl,0x2
c001fa1d:	0f 85 54 f9 ff ff    	jne    c001f377 <Vm::x87Handler(regs*)+0x223>
c001fa23:	55                   	push   ebp
c001fa24:	55                   	push   ebp
c001fa25:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa28:	ff 36                	push   DWORD PTR [esi]
c001fa2a:	e8 7c f3 ff ff       	call   c001edab <Vm::fpu64ToInternal(unsigned long long)>
c001fa2f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa36:	89 c6                	mov    esi,eax
c001fa38:	89 d7                	mov    edi,edx
c001fa3a:	e8 d8 f5 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001fa3f:	57                   	push   edi
c001fa40:	56                   	push   esi
c001fa41:	52                   	push   edx
c001fa42:	50                   	push   eax
c001fa43:	e8 f2 f4 ff ff       	call   c001ef3a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fa4c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fa4f:	83 c4 20             	add    esp,0x20
c001fa52:	e9 74 f7 ff ff       	jmp    c001f1cb <Vm::x87Handler(regs*)+0x77>
c001fa57:	80 fa 04             	cmp    dl,0x4
c001fa5a:	75 2a                	jne    c001fa86 <Vm::x87Handler(regs*)+0x932>
c001fa5c:	51                   	push   ecx
c001fa5d:	51                   	push   ecx
c001fa5e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa61:	ff 36                	push   DWORD PTR [esi]
c001fa63:	e8 43 f3 ff ff       	call   c001edab <Vm::fpu64ToInternal(unsigned long long)>
c001fa68:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa6f:	89 c6                	mov    esi,eax
c001fa71:	89 d7                	mov    edi,edx
c001fa73:	e8 9f f5 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001fa78:	57                   	push   edi
c001fa79:	56                   	push   esi
c001fa7a:	52                   	push   edx
c001fa7b:	50                   	push   eax
c001fa7c:	e8 36 f5 ff ff       	call   c001efb7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa81:	e9 e2 00 00 00       	jmp    c001fb68 <Vm::x87Handler(regs*)+0xa14>
c001fa86:	80 fa 05             	cmp    dl,0x5
c001fa89:	75 28                	jne    c001fab3 <Vm::x87Handler(regs*)+0x95f>
c001fa8b:	83 ec 0c             	sub    esp,0xc
c001fa8e:	6a 00                	push   0x0
c001fa90:	e8 82 f5 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001fa95:	89 c7                	mov    edi,eax
c001fa97:	89 d5                	mov    ebp,edx
c001fa99:	58                   	pop    eax
c001fa9a:	5a                   	pop    edx
c001fa9b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa9e:	ff 36                	push   DWORD PTR [esi]
c001faa0:	e8 06 f3 ff ff       	call   c001edab <Vm::fpu64ToInternal(unsigned long long)>
c001faa5:	83 c4 10             	add    esp,0x10
c001faa8:	55                   	push   ebp
c001faa9:	57                   	push   edi
c001faaa:	52                   	push   edx
c001faab:	50                   	push   eax
c001faac:	e8 06 f5 ff ff       	call   c001efb7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fab1:	eb 60                	jmp    c001fb13 <Vm::x87Handler(regs*)+0x9bf>
c001fab3:	80 fa 06             	cmp    dl,0x6
c001fab6:	75 2a                	jne    c001fae2 <Vm::x87Handler(regs*)+0x98e>
c001fab8:	51                   	push   ecx
c001fab9:	51                   	push   ecx
c001faba:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fabd:	ff 36                	push   DWORD PTR [esi]
c001fabf:	e8 e7 f2 ff ff       	call   c001edab <Vm::fpu64ToInternal(unsigned long long)>
c001fac4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001facb:	89 c6                	mov    esi,eax
c001facd:	89 d7                	mov    edi,edx
c001facf:	e8 43 f5 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001fad4:	57                   	push   edi
c001fad5:	56                   	push   esi
c001fad6:	52                   	push   edx
c001fad7:	50                   	push   eax
c001fad8:	e8 08 f5 ff ff       	call   c001efe5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fadd:	e9 86 00 00 00       	jmp    c001fb68 <Vm::x87Handler(regs*)+0xa14>
c001fae2:	31 c0                	xor    eax,eax
c001fae4:	80 fa 07             	cmp    dl,0x7
c001fae7:	0f 85 c8 00 00 00    	jne    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001faed:	83 ec 0c             	sub    esp,0xc
c001faf0:	6a 00                	push   0x0
c001faf2:	e8 20 f5 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001faf7:	89 c7                	mov    edi,eax
c001faf9:	89 d5                	mov    ebp,edx
c001fafb:	58                   	pop    eax
c001fafc:	5a                   	pop    edx
c001fafd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb00:	ff 36                	push   DWORD PTR [esi]
c001fb02:	e8 a4 f2 ff ff       	call   c001edab <Vm::fpu64ToInternal(unsigned long long)>
c001fb07:	83 c4 10             	add    esp,0x10
c001fb0a:	55                   	push   ebp
c001fb0b:	57                   	push   edi
c001fb0c:	52                   	push   edx
c001fb0d:	50                   	push   eax
c001fb0e:	e8 d2 f4 ff ff       	call   c001efe5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb13:	83 c4 0c             	add    esp,0xc
c001fb16:	eb 53                	jmp    c001fb6b <Vm::x87Handler(regs*)+0xa17>
c001fb18:	31 c0                	xor    eax,eax
c001fb1a:	80 fa 02             	cmp    dl,0x2
c001fb1d:	0f 85 92 00 00 00    	jne    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001fb23:	83 ec 0c             	sub    esp,0xc
c001fb26:	6a 00                	push   0x0
c001fb28:	e8 ea f4 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001fb2d:	59                   	pop    ecx
c001fb2e:	5f                   	pop    edi
c001fb2f:	52                   	push   edx
c001fb30:	50                   	push   eax
c001fb31:	e8 27 f2 ff ff       	call   c001ed5d <Vm::fpuInternalTo64(unsigned long long)>
c001fb36:	eb 70                	jmp    c001fba8 <Vm::x87Handler(regs*)+0xa54>
c001fb38:	31 c0                	xor    eax,eax
c001fb3a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fb3f:	75 74                	jne    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001fb41:	50                   	push   eax
c001fb42:	50                   	push   eax
c001fb43:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fb46:	31 d2                	xor    edx,edx
c001fb48:	52                   	push   edx
c001fb49:	50                   	push   eax
c001fb4a:	e8 f6 f2 ff ff       	call   c001ee45 <Vm::fpuLongToFloat(long long)>
c001fb4f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb56:	89 c6                	mov    esi,eax
c001fb58:	89 d7                	mov    edi,edx
c001fb5a:	e8 b8 f4 ff ff       	call   c001f017 <Vm::fpuGetReg(int)>
c001fb5f:	57                   	push   edi
c001fb60:	56                   	push   esi
c001fb61:	52                   	push   edx
c001fb62:	50                   	push   eax
c001fb63:	e8 5e f4 ff ff       	call   c001efc6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb68:	83 c4 1c             	add    esp,0x1c
c001fb6b:	52                   	push   edx
c001fb6c:	50                   	push   eax
c001fb6d:	6a 00                	push   0x0
c001fb6f:	e8 e6 f4 ff ff       	call   c001f05a <Vm::fpuSetReg(int, unsigned long long)>
c001fb74:	e9 f2 f7 ff ff       	jmp    c001f36b <Vm::x87Handler(regs*)+0x217>
c001fb79:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb7d:	80 fa 05             	cmp    dl,0x5
c001fb80:	75 11                	jne    c001fb93 <Vm::x87Handler(regs*)+0xa3f>
c001fb82:	55                   	push   ebp
c001fb83:	55                   	push   ebp
c001fb84:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb87:	ff 36                	push   DWORD PTR [esi]
c001fb89:	e8 81 f2 ff ff       	call   c001ee0f <Vm::fpuULongToFloat(unsigned long long)>
c001fb8e:	e9 cf f7 ff ff       	jmp    c001f362 <Vm::x87Handler(regs*)+0x20e>
c001fb93:	31 c0                	xor    eax,eax
c001fb95:	80 fa 07             	cmp    dl,0x7
c001fb98:	75 1b                	jne    c001fbb5 <Vm::x87Handler(regs*)+0xa61>
c001fb9a:	e8 63 f5 ff ff       	call   c001f102 <Vm::fpuPop()>
c001fb9f:	51                   	push   ecx
c001fba0:	51                   	push   ecx
c001fba1:	52                   	push   edx
c001fba2:	50                   	push   eax
c001fba3:	e8 0c f2 ff ff       	call   c001edb4 <Vm::fpuFloatToLong(unsigned long long)>
c001fba8:	83 c4 10             	add    esp,0x10
c001fbab:	89 06                	mov    DWORD PTR [esi],eax
c001fbad:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fbb0:	e9 f8 f7 ff ff       	jmp    c001f3ad <Vm::x87Handler(regs*)+0x259>
c001fbb5:	83 c4 1c             	add    esp,0x1c
c001fbb8:	5b                   	pop    ebx
c001fbb9:	5e                   	pop    esi
c001fbba:	5f                   	pop    edi
c001fbbb:	5d                   	pop    ebp
c001fbbc:	c3                   	ret    

c001fbbd <__static_initialization_and_destruction_0(int, int)>:
c001fbbd:	83 ec 0c             	sub    esp,0xc
c001fbc0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fbc5:	75 1a                	jne    c001fbe1 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fbc7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fbcf:	75 10                	jne    c001fbe1 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fbd1:	83 ec 0c             	sub    esp,0xc
c001fbd4:	68 a0 10 03 c0       	push   0xc00310a0
c001fbd9:	e8 c2 88 00 00       	call   c00284a0 <Vm::_FPUState::_FPUState()>
c001fbde:	83 c4 10             	add    esp,0x10
c001fbe1:	90                   	nop
c001fbe2:	83 c4 0c             	add    esp,0xc
c001fbe5:	c3                   	ret    

c001fbe6 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fbe6:	83 ec 0c             	sub    esp,0xc
c001fbe9:	83 ec 08             	sub    esp,0x8
c001fbec:	68 ff ff 00 00       	push   0xffff
c001fbf1:	6a 01                	push   0x1
c001fbf3:	e8 c5 ff ff ff       	call   c001fbbd <__static_initialization_and_destruction_0(int, int)>
c001fbf8:	83 c4 10             	add    esp,0x10
c001fbfb:	83 c4 0c             	add    esp,0xc
c001fbfe:	c3                   	ret    
c001fbff:	90                   	nop

c001fc00 <FAT::getName()>:
c001fc00:	b8 34 be 02 c0       	mov    eax,0xc002be34
c001fc05:	c3                   	ret    

c001fc06 <FAT::tell(void*, unsigned long long*)>:
c001fc06:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc0b:	75 06                	jne    c001fc13 <FAT::tell(void*, unsigned long long*)+0xd>
c001fc0d:	b8 04 00 00 00       	mov    eax,0x4
c001fc12:	c3                   	ret    
c001fc13:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc18:	75 06                	jne    c001fc20 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fc1a:	b8 04 00 00 00       	mov    eax,0x4
c001fc1f:	c3                   	ret    
c001fc20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc24:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fc27:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fc2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc2e:	89 01                	mov    DWORD PTR [ecx],eax
c001fc30:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc33:	b8 00 00 00 00       	mov    eax,0x0
c001fc38:	c3                   	ret    
c001fc39:	90                   	nop

c001fc3a <FAT::stat(void*, unsigned long long*)>:
c001fc3a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc3f:	75 06                	jne    c001fc47 <FAT::stat(void*, unsigned long long*)+0xd>
c001fc41:	b8 04 00 00 00       	mov    eax,0x4
c001fc46:	c3                   	ret    
c001fc47:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc4c:	75 06                	jne    c001fc54 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fc4e:	b8 04 00 00 00       	mov    eax,0x4
c001fc53:	c3                   	ret    
c001fc54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc58:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fc5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fc5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc62:	89 01                	mov    DWORD PTR [ecx],eax
c001fc64:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc67:	b8 00 00 00 00       	mov    eax,0x0
c001fc6c:	c3                   	ret    
c001fc6d:	90                   	nop

c001fc6e <FAT::~FAT()>:
c001fc6e:	83 ec 0c             	sub    esp,0xc
c001fc71:	ba b8 be 02 c0       	mov    edx,0xc002beb8
c001fc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7a:	89 10                	mov    DWORD PTR [eax],edx
c001fc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc80:	83 ec 0c             	sub    esp,0xc
c001fc83:	50                   	push   eax
c001fc84:	e8 91 2f ff ff       	call   c0012c1a <Filesystem::~Filesystem()>
c001fc89:	83 c4 10             	add    esp,0x10
c001fc8c:	90                   	nop
c001fc8d:	83 c4 0c             	add    esp,0xc
c001fc90:	c3                   	ret    
c001fc91:	90                   	nop

c001fc92 <FAT::~FAT()>:
c001fc92:	83 ec 0c             	sub    esp,0xc
c001fc95:	83 ec 0c             	sub    esp,0xc
c001fc98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc9c:	e8 cd ff ff ff       	call   c001fc6e <FAT::~FAT()>
c001fca1:	83 c4 10             	add    esp,0x10
c001fca4:	83 ec 08             	sub    esp,0x8
c001fca7:	6a 08                	push   0x8
c001fca9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcad:	e8 5f 2b ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c001fcb2:	83 c4 10             	add    esp,0x10
c001fcb5:	83 c4 0c             	add    esp,0xc
c001fcb8:	c3                   	ret    
c001fcb9:	90                   	nop

c001fcba <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fcba:	83 ec 1c             	sub    esp,0x1c
c001fcbd:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fcc4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fcc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fccd:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001fcd4:	83 f8 ff             	cmp    eax,0xffffffff
c001fcd7:	75 34                	jne    c001fd0d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fcd9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fcdd:	88 c2                	mov    dl,al
c001fcdf:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001fce4:	01 d0                	add    eax,edx
c001fce6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fcea:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c001fcf0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fcf4:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001fcfb:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001fd00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fd04:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c001fd0b:	eb 17                	jmp    c001fd24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fd0d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd11:	88 c2                	mov    dl,al
c001fd13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd17:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001fd1e:	01 d0                	add    eax,edx
c001fd20:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd24:	83 ec 04             	sub    esp,0x4
c001fd27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd2f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fd33:	50                   	push   eax
c001fd34:	e8 e6 6d fe ff       	call   c0006b1f <f_getlabel>
c001fd39:	83 c4 10             	add    esp,0x10
c001fd3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd40:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd45:	75 07                	jne    c001fd4e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fd47:	b8 00 00 00 00       	mov    eax,0x0
c001fd4c:	eb 05                	jmp    c001fd53 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fd4e:	b8 01 00 00 00       	mov    eax,0x1
c001fd53:	83 c4 1c             	add    esp,0x1c
c001fd56:	c3                   	ret    
c001fd57:	90                   	nop

c001fd58 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fd58:	57                   	push   edi
c001fd59:	83 ec 58             	sub    esp,0x58
c001fd5c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fd64:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fd68:	b9 0f 00 00 00       	mov    ecx,0xf
c001fd6d:	b8 00 00 00 00       	mov    eax,0x0
c001fd72:	fc                   	cld    
c001fd73:	89 d7                	mov    edi,edx
c001fd75:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fd77:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fd7b:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001fd82:	83 f8 ff             	cmp    eax,0xffffffff
c001fd85:	75 34                	jne    c001fdbb <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fd87:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fd8b:	88 c2                	mov    dl,al
c001fd8d:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001fd92:	01 d0                	add    eax,edx
c001fd94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd98:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c001fd9e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fda2:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001fda9:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001fdae:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fdb2:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c001fdb9:	eb 17                	jmp    c001fdd2 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fdbb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fdbf:	88 c2                	mov    dl,al
c001fdc1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fdc5:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001fdcc:	01 d0                	add    eax,edx
c001fdce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdd2:	83 ec 08             	sub    esp,0x8
c001fdd5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fdd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fddd:	50                   	push   eax
c001fdde:	e8 35 0a fe ff       	call   c0000818 <strcat>
c001fde3:	83 c4 10             	add    esp,0x10
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fded:	50                   	push   eax
c001fdee:	e8 1a 6f fe ff       	call   c0006d0d <f_setlabel>
c001fdf3:	83 c4 10             	add    esp,0x10
c001fdf6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fdfa:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fdff:	75 07                	jne    c001fe08 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fe01:	b8 00 00 00 00       	mov    eax,0x0
c001fe06:	eb 05                	jmp    c001fe0d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fe08:	b8 01 00 00 00       	mov    eax,0x1
c001fe0d:	83 c4 58             	add    esp,0x58
c001fe10:	5f                   	pop    edi
c001fe11:	c3                   	ret    

c001fe12 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fe12:	83 ec 2c             	sub    esp,0x2c
c001fe15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fe1d:	83 ec 08             	sub    esp,0x8
c001fe20:	68 58 be 02 c0       	push   0xc002be58
c001fe25:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe29:	e8 84 09 fe ff       	call   c00007b2 <strcmp>
c001fe2e:	83 c4 10             	add    esp,0x10
c001fe31:	85 c0                	test   eax,eax
c001fe33:	0f 94 c0             	sete   al
c001fe36:	84 c0                	test   al,al
c001fe38:	74 0d                	je     c001fe47 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fe3a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe42:	e9 a6 00 00 00       	jmp    c001feed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe47:	83 ec 08             	sub    esp,0x8
c001fe4a:	68 4a be 02 c0       	push   0xc002be4a
c001fe4f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe53:	e8 5a 09 fe ff       	call   c00007b2 <strcmp>
c001fe58:	83 c4 10             	add    esp,0x10
c001fe5b:	85 c0                	test   eax,eax
c001fe5d:	0f 94 c0             	sete   al
c001fe60:	84 c0                	test   al,al
c001fe62:	74 0a                	je     c001fe6e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fe64:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe6c:	eb 7f                	jmp    c001feed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe6e:	83 ec 08             	sub    esp,0x8
c001fe71:	68 50 be 02 c0       	push   0xc002be50
c001fe76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe7a:	e8 33 09 fe ff       	call   c00007b2 <strcmp>
c001fe7f:	83 c4 10             	add    esp,0x10
c001fe82:	85 c0                	test   eax,eax
c001fe84:	0f 94 c0             	sete   al
c001fe87:	84 c0                	test   al,al
c001fe89:	74 0a                	je     c001fe95 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fe8b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fe93:	eb 58                	jmp    c001feed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fe95:	83 ec 08             	sub    esp,0x8
c001fe98:	68 0c 8c 02 c0       	push   0xc0028c0c
c001fe9d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fea1:	e8 0c 09 fe ff       	call   c00007b2 <strcmp>
c001fea6:	83 c4 10             	add    esp,0x10
c001fea9:	85 c0                	test   eax,eax
c001feab:	0f 94 c0             	sete   al
c001feae:	84 c0                	test   al,al
c001feb0:	74 0a                	je     c001febc <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001feb2:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001feba:	eb 31                	jmp    c001feed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001febc:	83 ec 08             	sub    esp,0x8
c001febf:	68 56 be 02 c0       	push   0xc002be56
c001fec4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fec8:	e8 e5 08 fe ff       	call   c00007b2 <strcmp>
c001fecd:	83 c4 10             	add    esp,0x10
c001fed0:	85 c0                	test   eax,eax
c001fed2:	0f 94 c0             	sete   al
c001fed5:	84 c0                	test   al,al
c001fed7:	74 0a                	je     c001fee3 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001fed9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001fee1:	eb 0a                	jmp    c001feed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fee3:	b8 08 00 00 00       	mov    eax,0x8
c001fee8:	e9 04 01 00 00       	jmp    c001fff1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001feed:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001fef4:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001fef9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fefd:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001ff04:	83 f8 ff             	cmp    eax,0xffffffff
c001ff07:	75 34                	jne    c001ff3d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001ff09:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff0d:	88 c2                	mov    dl,al
c001ff0f:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001ff14:	01 d0                	add    eax,edx
c001ff16:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff1a:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c001ff20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff24:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001ff2b:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c001ff30:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ff34:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c001ff3b:	eb 17                	jmp    c001ff54 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001ff3d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff41:	88 c2                	mov    dl,al
c001ff43:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff47:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c001ff4e:	01 d0                	add    eax,edx
c001ff50:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff58:	88 04 24             	mov    BYTE PTR [esp],al
c001ff5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ff5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff63:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ff6b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ff70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ff78:	83 ec 0c             	sub    esp,0xc
c001ff7b:	68 00 20 00 00       	push   0x2000
c001ff80:	e8 9d f6 fe ff       	call   c000f622 <malloc>
c001ff85:	83 c4 10             	add    esp,0x10
c001ff88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ff8c:	68 00 20 00 00       	push   0x2000
c001ff91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff95:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ff99:	50                   	push   eax
c001ff9a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ff9e:	50                   	push   eax
c001ff9f:	e8 b4 71 fe ff       	call   c0007158 <f_mkfs>
c001ffa4:	83 c4 10             	add    esp,0x10
c001ffa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ffab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ffb0:	75 07                	jne    c001ffb9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001ffb2:	b8 00 00 00 00       	mov    eax,0x0
c001ffb7:	eb 38                	jmp    c001fff1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ffb9:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ffbe:	75 17                	jne    c001ffd7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001ffc0:	83 ec 0c             	sub    esp,0xc
c001ffc3:	68 88 be 02 c0       	push   0xc002be88
c001ffc8:	e8 24 29 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ffcd:	83 c4 10             	add    esp,0x10
c001ffd0:	b8 09 00 00 00       	mov    eax,0x9
c001ffd5:	eb 1a                	jmp    c001fff1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ffd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ffdb:	83 ec 08             	sub    esp,0x8
c001ffde:	50                   	push   eax
c001ffdf:	68 5c be 02 c0       	push   0xc002be5c
c001ffe4:	e8 08 29 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c001ffe9:	83 c4 10             	add    esp,0x10
c001ffec:	b8 01 00 00 00       	mov    eax,0x1
c001fff1:	83 c4 2c             	add    esp,0x2c
c001fff4:	c3                   	ret    
c001fff5:	90                   	nop

c001fff6 <FAT::tryMount(LogicalDisk*, int)>:
c001fff6:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fffc:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c0020001:	83 f8 14             	cmp    eax,0x14
c0020004:	75 17                	jne    c002001d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020006:	83 ec 0c             	sub    esp,0xc
c0020009:	68 6e be 02 c0       	push   0xc002be6e
c002000e:	e8 52 9e ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0020013:	83 c4 10             	add    esp,0x10
c0020016:	b0 00                	mov    al,0x0
c0020018:	e9 d7 01 00 00       	jmp    c00201f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002001d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020024:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002002a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020030:	3d 00 02 00 00       	cmp    eax,0x200
c0020035:	74 07                	je     c002003e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020037:	b0 00                	mov    al,0x0
c0020039:	e9 b6 01 00 00       	jmp    c00201f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002003e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020046:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002004d:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c0020054:	83 f8 ff             	cmp    eax,0xffffffff
c0020057:	74 07                	je     c0020060 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020059:	b0 01                	mov    al,0x1
c002005b:	e9 94 01 00 00       	jmp    c00201f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020060:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002006a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020072:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020079:	88 c2                	mov    dl,al
c002007b:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c0020080:	01 d0                	add    eax,edx
c0020082:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020089:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c002008f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020096:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c002009d:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c00200a2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00200a9:	89 14 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],edx
c00200b0:	83 ec 0c             	sub    esp,0xc
c00200b3:	68 54 02 00 00       	push   0x254
c00200b8:	e8 65 f5 fe ff       	call   c000f622 <malloc>
c00200bd:	83 c4 10             	add    esp,0x10
c00200c0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00200c7:	83 ec 04             	sub    esp,0x4
c00200ca:	6a 00                	push   0x0
c00200cc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00200d3:	50                   	push   eax
c00200d4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00200db:	e8 36 4c fe ff       	call   c0004d16 <f_mount>
c00200e0:	83 c4 10             	add    esp,0x10
c00200e3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00200ea:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00200f2:	74 19                	je     c002010d <FAT::tryMount(LogicalDisk*, int)+0x117>
c00200f4:	83 ec 0c             	sub    esp,0xc
c00200f7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00200fe:	e8 3f f5 fe ff       	call   c000f642 <rfree>
c0020103:	83 c4 10             	add    esp,0x10
c0020106:	b0 00                	mov    al,0x0
c0020108:	e9 e7 00 00 00       	jmp    c00201f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002010d:	83 ec 04             	sub    esp,0x4
c0020110:	68 00 01 00 00       	push   0x100
c0020115:	6a 00                	push   0x0
c0020117:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002011e:	50                   	push   eax
c002011f:	e8 9e 05 fe ff       	call   c00006c2 <memset>
c0020124:	83 c4 10             	add    esp,0x10
c0020127:	83 ec 08             	sub    esp,0x8
c002012a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020131:	50                   	push   eax
c0020132:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020139:	50                   	push   eax
c002013a:	e8 d9 06 fe ff       	call   c0000818 <strcat>
c002013f:	83 c4 10             	add    esp,0x10
c0020142:	83 ec 08             	sub    esp,0x8
c0020145:	68 7c be 02 c0       	push   0xc002be7c
c002014a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020151:	50                   	push   eax
c0020152:	e8 c1 06 fe ff       	call   c0000818 <strcat>
c0020157:	83 c4 10             	add    esp,0x10
c002015a:	83 ec 04             	sub    esp,0x4
c002015d:	6a 01                	push   0x1
c002015f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020166:	50                   	push   eax
c0020167:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002016b:	50                   	push   eax
c002016c:	e8 07 4c fe ff       	call   c0004d78 <f_open>
c0020171:	83 c4 10             	add    esp,0x10
c0020174:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002017b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020182:	85 c0                	test   eax,eax
c0020184:	74 0a                	je     c0020190 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020186:	78 2d                	js     c00201b5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020188:	83 e8 04             	sub    eax,0x4
c002018b:	83 f8 01             	cmp    eax,0x1
c002018e:	77 25                	ja     c00201b5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020190:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020198:	83 ec 0c             	sub    esp,0xc
c002019b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002019f:	50                   	push   eax
c00201a0:	e8 25 57 fe ff       	call   c00058ca <f_close>
c00201a5:	83 c4 10             	add    esp,0x10
c00201a8:	90                   	nop
c00201a9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00201b1:	74 3a                	je     c00201ed <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00201b3:	eb 2d                	jmp    c00201e2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00201b5:	83 ec 0c             	sub    esp,0xc
c00201b8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201bf:	e8 7e f4 fe ff       	call   c000f642 <rfree>
c00201c4:	83 c4 10             	add    esp,0x10
c00201c7:	83 ec 04             	sub    esp,0x4
c00201ca:	6a 00                	push   0x0
c00201cc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00201d3:	50                   	push   eax
c00201d4:	6a 00                	push   0x0
c00201d6:	e8 3b 4b fe ff       	call   c0004d16 <f_mount>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	b0 00                	mov    al,0x0
c00201e0:	eb 12                	jmp    c00201f4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00201e2:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c00201e7:	40                   	inc    eax
c00201e8:	a3 00 11 03 c0       	mov    ds:0xc0031100,eax
c00201ed:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00201f4:	81 c4 6c 03 00 00    	add    esp,0x36c
c00201fa:	c3                   	ret    
c00201fb:	90                   	nop

c00201fc <FAT::readDir(void*, unsigned long, void*, int*)>:
c00201fc:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020202:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c002020a:	74 0a                	je     c0020216 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c002020c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020214:	75 0a                	jne    c0020220 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020216:	b8 04 00 00 00       	mov    eax,0x4
c002021b:	e9 db 00 00 00       	jmp    c00202fb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020220:	83 ec 08             	sub    esp,0x8
c0020223:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002022a:	50                   	push   eax
c002022b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020232:	e8 9d 5c fe ff       	call   c0005ed4 <f_readdir>
c0020237:	83 c4 10             	add    esp,0x10
c002023a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020241:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020247:	83 ec 0c             	sub    esp,0xc
c002024a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020251:	83 c0 1a             	add    eax,0x1a
c0020254:	50                   	push   eax
c0020255:	e8 85 04 fe ff       	call   c00006df <strlen>
c002025a:	83 c4 10             	add    esp,0x10
c002025d:	ba 00 00 00 00       	mov    edx,0x0
c0020262:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020266:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002026a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020271:	0f b6 c0             	movzx  eax,al
c0020274:	83 e0 10             	and    eax,0x10
c0020277:	74 07                	je     c0020280 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020279:	b8 02 00 00 00       	mov    eax,0x2
c002027e:	eb 05                	jmp    c0020285 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020280:	b8 01 00 00 00       	mov    eax,0x1
c0020285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020289:	83 ec 08             	sub    esp,0x8
c002028c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020293:	83 c0 1a             	add    eax,0x1a
c0020296:	50                   	push   eax
c0020297:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002029b:	83 c0 10             	add    eax,0x10
c002029e:	50                   	push   eax
c002029f:	e8 bd 04 fe ff       	call   c0000761 <strcpy>
c00202a4:	83 c4 10             	add    esp,0x10
c00202a7:	83 ec 04             	sub    esp,0x4
c00202aa:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00202b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00202b5:	50                   	push   eax
c00202b6:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00202bd:	e8 de 03 fe ff       	call   c00006a0 <memcpy>
c00202c2:	83 c4 10             	add    esp,0x10
c00202c5:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00202cc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00202d2:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00202d9:	84 c0                	test   al,al
c00202db:	75 07                	jne    c00202e4 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00202dd:	b8 07 00 00 00       	mov    eax,0x7
c00202e2:	eb 17                	jmp    c00202fb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00202e4:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00202eb:	85 c0                	test   eax,eax
c00202ed:	75 07                	jne    c00202f6 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00202ef:	b8 00 00 00 00       	mov    eax,0x0
c00202f4:	eb 05                	jmp    c00202fb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00202f6:	b8 01 00 00 00       	mov    eax,0x1
c00202fb:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020301:	c3                   	ret    

c0020302 <FAT::read(void*, unsigned long, void*, int*)>:
c0020302:	83 ec 1c             	sub    esp,0x1c
c0020305:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002030a:	74 07                	je     c0020313 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002030c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020311:	75 07                	jne    c002031a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020313:	b8 04 00 00 00       	mov    eax,0x4
c0020318:	eb 3d                	jmp    c0020357 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002031a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002031e:	50                   	push   eax
c002031f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020327:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002032b:	e8 84 4e fe ff       	call   c00051b4 <f_read>
c0020330:	83 c4 10             	add    esp,0x10
c0020333:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002033b:	89 c2                	mov    edx,eax
c002033d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020341:	89 10                	mov    DWORD PTR [eax],edx
c0020343:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020347:	85 c0                	test   eax,eax
c0020349:	75 07                	jne    c0020352 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002034b:	b8 00 00 00 00       	mov    eax,0x0
c0020350:	eb 05                	jmp    c0020357 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020352:	b8 01 00 00 00       	mov    eax,0x1
c0020357:	83 c4 1c             	add    esp,0x1c
c002035a:	c3                   	ret    
c002035b:	90                   	nop

c002035c <FAT::write(void*, unsigned long, void*, int*)>:
c002035c:	83 ec 1c             	sub    esp,0x1c
c002035f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020364:	74 07                	je     c002036d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020366:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002036b:	75 07                	jne    c0020374 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002036d:	b8 04 00 00 00       	mov    eax,0x4
c0020372:	eb 3d                	jmp    c00203b1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020374:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020378:	50                   	push   eax
c0020379:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002037d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020385:	e8 aa 50 fe ff       	call   c0005434 <f_write>
c002038a:	83 c4 10             	add    esp,0x10
c002038d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020391:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020395:	89 c2                	mov    edx,eax
c0020397:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002039b:	89 10                	mov    DWORD PTR [eax],edx
c002039d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203a1:	85 c0                	test   eax,eax
c00203a3:	75 07                	jne    c00203ac <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00203a5:	b8 00 00 00 00       	mov    eax,0x0
c00203aa:	eb 05                	jmp    c00203b1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00203ac:	b8 01 00 00 00       	mov    eax,0x1
c00203b1:	83 c4 1c             	add    esp,0x1c
c00203b4:	c3                   	ret    
c00203b5:	90                   	nop

c00203b6 <FAT::close(void*)>:
c00203b6:	83 ec 1c             	sub    esp,0x1c
c00203b9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00203be:	75 07                	jne    c00203c7 <FAT::close(void*)+0x11>
c00203c0:	b8 04 00 00 00       	mov    eax,0x4
c00203c5:	eb 36                	jmp    c00203fd <FAT::close(void*)+0x47>
c00203c7:	83 ec 0c             	sub    esp,0xc
c00203ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00203ce:	e8 f7 54 fe ff       	call   c00058ca <f_close>
c00203d3:	83 c4 10             	add    esp,0x10
c00203d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00203da:	83 ec 0c             	sub    esp,0xc
c00203dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00203e1:	e8 4c f2 fe ff       	call   c000f632 <free>
c00203e6:	83 c4 10             	add    esp,0x10
c00203e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203ed:	85 c0                	test   eax,eax
c00203ef:	75 07                	jne    c00203f8 <FAT::close(void*)+0x42>
c00203f1:	b8 00 00 00 00       	mov    eax,0x0
c00203f6:	eb 05                	jmp    c00203fd <FAT::close(void*)+0x47>
c00203f8:	b8 01 00 00 00       	mov    eax,0x1
c00203fd:	83 c4 1c             	add    esp,0x1c
c0020400:	c3                   	ret    
c0020401:	90                   	nop

c0020402 <FAT::closeDir(void*)>:
c0020402:	83 ec 1c             	sub    esp,0x1c
c0020405:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002040a:	75 07                	jne    c0020413 <FAT::closeDir(void*)+0x11>
c002040c:	b8 04 00 00 00       	mov    eax,0x4
c0020411:	eb 36                	jmp    c0020449 <FAT::closeDir(void*)+0x47>
c0020413:	83 ec 0c             	sub    esp,0xc
c0020416:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002041a:	e8 93 5a fe ff       	call   c0005eb2 <f_closedir>
c002041f:	83 c4 10             	add    esp,0x10
c0020422:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020426:	83 ec 0c             	sub    esp,0xc
c0020429:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002042d:	e8 00 f2 fe ff       	call   c000f632 <free>
c0020432:	83 c4 10             	add    esp,0x10
c0020435:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020439:	85 c0                	test   eax,eax
c002043b:	75 07                	jne    c0020444 <FAT::closeDir(void*)+0x42>
c002043d:	b8 00 00 00 00       	mov    eax,0x0
c0020442:	eb 05                	jmp    c0020449 <FAT::closeDir(void*)+0x47>
c0020444:	b8 01 00 00 00       	mov    eax,0x1
c0020449:	83 c4 1c             	add    esp,0x1c
c002044c:	c3                   	ret    
c002044d:	90                   	nop

c002044e <FAT::seek(void*, unsigned long long)>:
c002044e:	83 ec 2c             	sub    esp,0x2c
c0020451:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020455:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020459:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002045d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020461:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020466:	75 07                	jne    c002046f <FAT::seek(void*, unsigned long long)+0x21>
c0020468:	b8 04 00 00 00       	mov    eax,0x4
c002046d:	eb 2f                	jmp    c002049e <FAT::seek(void*, unsigned long long)+0x50>
c002046f:	83 ec 04             	sub    esp,0x4
c0020472:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020476:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002047a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002047e:	e8 76 54 fe ff       	call   c00058f9 <f_lseek>
c0020483:	83 c4 10             	add    esp,0x10
c0020486:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002048a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002048e:	85 c0                	test   eax,eax
c0020490:	75 07                	jne    c0020499 <FAT::seek(void*, unsigned long long)+0x4b>
c0020492:	b8 00 00 00 00       	mov    eax,0x0
c0020497:	eb 05                	jmp    c002049e <FAT::seek(void*, unsigned long long)+0x50>
c0020499:	b8 01 00 00 00       	mov    eax,0x1
c002049e:	83 c4 2c             	add    esp,0x2c
c00204a1:	c3                   	ret    

c00204a2 <fatWrapperReadDisk>:
c00204a2:	83 ec 1c             	sub    esp,0x1c
c00204a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204a9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00204ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00204b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00204b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00204bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00204c1:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c00204c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00204cc:	83 ec 0c             	sub    esp,0xc
c00204cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204d3:	52                   	push   edx
c00204d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00204d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00204dc:	50                   	push   eax
c00204dd:	e8 cc 5b ff ff       	call   c00160ae <LogicalDisk::read(unsigned long long, int, void*)>
c00204e2:	83 c4 20             	add    esp,0x20
c00204e5:	83 c4 1c             	add    esp,0x1c
c00204e8:	c3                   	ret    

c00204e9 <fatWrapperWriteDisk>:
c00204e9:	83 ec 1c             	sub    esp,0x1c
c00204ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00204f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00204fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00204ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020503:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020508:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c002050f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020513:	83 ec 0c             	sub    esp,0xc
c0020516:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002051a:	52                   	push   edx
c002051b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002051f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020523:	50                   	push   eax
c0020524:	e8 f1 5b ff ff       	call   c001611a <LogicalDisk::write(unsigned long long, int, void*)>
c0020529:	83 c4 20             	add    esp,0x20
c002052c:	83 c4 1c             	add    esp,0x1c
c002052f:	c3                   	ret    

c0020530 <fatWrapperIoctl>:
c0020530:	53                   	push   ebx
c0020531:	83 ec 28             	sub    esp,0x28
c0020534:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020538:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002053c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020540:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020544:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020549:	75 31                	jne    c002057c <fatWrapperIoctl+0x4c>
c002054b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002054f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020553:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020558:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c002055f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020565:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002056b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002056f:	66 89 02             	mov    WORD PTR [edx],ax
c0020572:	b8 00 00 00 00       	mov    eax,0x0
c0020577:	e9 b2 00 00 00       	jmp    c002062e <fatWrapperIoctl+0xfe>
c002057c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020581:	75 6a                	jne    c00205ed <fatWrapperIoctl+0xbd>
c0020583:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020587:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002058b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020590:	8b 04 85 e0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f20]
c0020597:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002059d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00205a3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00205a9:	89 c8                	mov    eax,ecx
c00205ab:	89 da                	mov    edx,ebx
c00205ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00205b1:	c1 e0 0a             	shl    eax,0xa
c00205b4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00205b9:	8b 0c 8d e0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f20]
c00205c0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00205c6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00205cc:	89 cb                	mov    ebx,ecx
c00205ce:	c1 fb 1f             	sar    ebx,0x1f
c00205d1:	53                   	push   ebx
c00205d2:	51                   	push   ecx
c00205d3:	52                   	push   edx
c00205d4:	50                   	push   eax
c00205d5:	e8 72 5b 00 00       	call   c002614c <__udivdi3>
c00205da:	83 c4 10             	add    esp,0x10
c00205dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00205e1:	89 01                	mov    DWORD PTR [ecx],eax
c00205e3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205e6:	b8 00 00 00 00       	mov    eax,0x0
c00205eb:	eb 41                	jmp    c002062e <fatWrapperIoctl+0xfe>
c00205ed:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00205f2:	75 07                	jne    c00205fb <fatWrapperIoctl+0xcb>
c00205f4:	b8 00 00 00 00       	mov    eax,0x0
c00205f9:	eb 33                	jmp    c002062e <fatWrapperIoctl+0xfe>
c00205fb:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020600:	75 19                	jne    c002061b <fatWrapperIoctl+0xeb>
c0020602:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020606:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002060a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002060e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020614:	b8 00 00 00 00       	mov    eax,0x0
c0020619:	eb 13                	jmp    c002062e <fatWrapperIoctl+0xfe>
c002061b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020620:	75 07                	jne    c0020629 <fatWrapperIoctl+0xf9>
c0020622:	b8 00 00 00 00       	mov    eax,0x0
c0020627:	eb 05                	jmp    c002062e <fatWrapperIoctl+0xfe>
c0020629:	b8 04 00 00 00       	mov    eax,0x4
c002062e:	83 c4 28             	add    esp,0x28
c0020631:	5b                   	pop    ebx
c0020632:	c3                   	ret    
c0020633:	90                   	nop

c0020634 <FAT::FAT()>:
c0020634:	83 ec 1c             	sub    esp,0x1c
c0020637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002063b:	83 ec 0c             	sub    esp,0xc
c002063e:	50                   	push   eax
c002063f:	e8 b2 25 ff ff       	call   c0012bf6 <Filesystem::Filesystem()>
c0020644:	83 c4 10             	add    esp,0x10
c0020647:	ba b8 be 02 c0       	mov    edx,0xc002beb8
c002064c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020650:	89 10                	mov    DWORD PTR [eax],edx
c0020652:	c7 05 00 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031100,0x0
c002065c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020664:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020669:	7f 15                	jg     c0020680 <FAT::FAT()+0x4c>
c002066b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002066f:	c7 04 85 20 11 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffceee0],0xffffffff
c002067a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002067e:	eb e4                	jmp    c0020664 <FAT::FAT()+0x30>
c0020680:	90                   	nop
c0020681:	83 c4 1c             	add    esp,0x1c
c0020684:	c3                   	ret    
c0020685:	90                   	nop

c0020686 <FAT::fixFilepath(char*)>:
c0020686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002068a:	8a 00                	mov    al,BYTE PTR [eax]
c002068c:	3c 40                	cmp    al,0x40
c002068e:	7e 2c                	jle    c00206bc <FAT::fixFilepath(char*)+0x36>
c0020690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020694:	8a 00                	mov    al,BYTE PTR [eax]
c0020696:	83 e8 41             	sub    eax,0x41
c0020699:	88 c2                	mov    dl,al
c002069b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002069f:	88 10                	mov    BYTE PTR [eax],dl
c00206a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206a5:	8a 00                	mov    al,BYTE PTR [eax]
c00206a7:	0f be c0             	movsx  eax,al
c00206aa:	8b 04 85 20 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceee0]
c00206b1:	83 c0 30             	add    eax,0x30
c00206b4:	88 c2                	mov    dl,al
c00206b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206ba:	88 10                	mov    BYTE PTR [eax],dl
c00206bc:	90                   	nop
c00206bd:	c3                   	ret    

c00206be <FAT::open(char const*, void**, FileOpenMode)>:
c00206be:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00206c4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00206cc:	74 0a                	je     c00206d8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00206ce:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00206d6:	75 0a                	jne    c00206e2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00206d8:	b8 04 00 00 00       	mov    eax,0x4
c00206dd:	e9 fd 00 00 00       	jmp    c00207df <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00206e2:	83 ec 08             	sub    esp,0x8
c00206e5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00206ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00206f0:	50                   	push   eax
c00206f1:	e8 6b 00 fe ff       	call   c0000761 <strcpy>
c00206f6:	83 c4 10             	add    esp,0x10
c00206f9:	83 ec 08             	sub    esp,0x8
c00206fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020700:	50                   	push   eax
c0020701:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020708:	e8 79 ff ff ff       	call   c0020686 <FAT::fixFilepath(char*)>
c002070d:	83 c4 10             	add    esp,0x10
c0020710:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020718:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002071f:	83 e0 01             	and    eax,0x1
c0020722:	74 08                	je     c002072c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020724:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002072c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020733:	83 e0 04             	and    eax,0x4
c0020736:	74 10                	je     c0020748 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020738:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020740:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020748:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002074f:	83 e0 02             	and    eax,0x2
c0020752:	74 08                	je     c002075c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020754:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002075c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020763:	83 e0 08             	and    eax,0x8
c0020766:	74 08                	je     c0020770 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020768:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020770:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020777:	83 e0 10             	and    eax,0x10
c002077a:	74 08                	je     c0020784 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002077c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020784:	83 ec 0c             	sub    esp,0xc
c0020787:	68 50 02 00 00       	push   0x250
c002078c:	e8 91 ee fe ff       	call   c000f622 <malloc>
c0020791:	83 c4 10             	add    esp,0x10
c0020794:	89 c2                	mov    edx,eax
c0020796:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002079d:	89 10                	mov    DWORD PTR [eax],edx
c002079f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00207a7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00207ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00207b0:	83 ec 04             	sub    esp,0x4
c00207b3:	52                   	push   edx
c00207b4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00207b8:	52                   	push   edx
c00207b9:	50                   	push   eax
c00207ba:	e8 b9 45 fe ff       	call   c0004d78 <f_open>
c00207bf:	83 c4 10             	add    esp,0x10
c00207c2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00207c9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00207d1:	74 07                	je     c00207da <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00207d3:	b8 01 00 00 00       	mov    eax,0x1
c00207d8:	eb 05                	jmp    c00207df <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00207da:	b8 00 00 00 00       	mov    eax,0x0
c00207df:	81 c4 1c 01 00 00    	add    esp,0x11c
c00207e5:	c3                   	ret    

c00207e6 <FAT::openDir(char const*, void**)>:
c00207e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00207ec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00207f4:	74 0a                	je     c0020800 <FAT::openDir(char const*, void**)+0x1a>
c00207f6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00207fe:	75 07                	jne    c0020807 <FAT::openDir(char const*, void**)+0x21>
c0020800:	b8 04 00 00 00       	mov    eax,0x4
c0020805:	eb 7d                	jmp    c0020884 <FAT::openDir(char const*, void**)+0x9e>
c0020807:	83 ec 08             	sub    esp,0x8
c002080a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020811:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020815:	50                   	push   eax
c0020816:	e8 46 ff fd ff       	call   c0000761 <strcpy>
c002081b:	83 c4 10             	add    esp,0x10
c002081e:	83 ec 08             	sub    esp,0x8
c0020821:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020825:	50                   	push   eax
c0020826:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002082d:	e8 54 fe ff ff       	call   c0020686 <FAT::fixFilepath(char*)>
c0020832:	83 c4 10             	add    esp,0x10
c0020835:	83 ec 0c             	sub    esp,0xc
c0020838:	6a 4c                	push   0x4c
c002083a:	e8 e3 ed fe ff       	call   c000f622 <malloc>
c002083f:	83 c4 10             	add    esp,0x10
c0020842:	89 c2                	mov    edx,eax
c0020844:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002084b:	89 10                	mov    DWORD PTR [eax],edx
c002084d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020854:	8b 00                	mov    eax,DWORD PTR [eax]
c0020856:	83 ec 08             	sub    esp,0x8
c0020859:	8d 54 24 14          	lea    edx,[esp+0x14]
c002085d:	52                   	push   edx
c002085e:	50                   	push   eax
c002085f:	e8 4c 55 fe ff       	call   c0005db0 <f_opendir>
c0020864:	83 c4 10             	add    esp,0x10
c0020867:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002086e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020876:	74 07                	je     c002087f <FAT::openDir(char const*, void**)+0x99>
c0020878:	b8 01 00 00 00       	mov    eax,0x1
c002087d:	eb 05                	jmp    c0020884 <FAT::openDir(char const*, void**)+0x9e>
c002087f:	b8 00 00 00 00       	mov    eax,0x0
c0020884:	81 c4 1c 01 00 00    	add    esp,0x11c
c002088a:	c3                   	ret    
c002088b:	90                   	nop

c002088c <FAT::stat(char const*, unsigned long long*, bool*)>:
c002088c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020892:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002089a:	75 0a                	jne    c00208a6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002089c:	b8 04 00 00 00       	mov    eax,0x4
c00208a1:	e9 c9 00 00 00       	jmp    c002096f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208a6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00208ae:	75 0a                	jne    c00208ba <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00208b0:	b8 04 00 00 00       	mov    eax,0x4
c00208b5:	e9 b5 00 00 00       	jmp    c002096f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208ba:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00208c2:	75 0a                	jne    c00208ce <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00208c4:	b8 04 00 00 00       	mov    eax,0x4
c00208c9:	e9 a1 00 00 00       	jmp    c002096f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00208ce:	83 ec 08             	sub    esp,0x8
c00208d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00208d8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00208df:	50                   	push   eax
c00208e0:	e8 7c fe fd ff       	call   c0000761 <strcpy>
c00208e5:	83 c4 10             	add    esp,0x10
c00208e8:	83 ec 08             	sub    esp,0x8
c00208eb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00208f2:	50                   	push   eax
c00208f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00208fa:	e8 87 fd ff ff       	call   c0020686 <FAT::fixFilepath(char*)>
c00208ff:	83 c4 10             	add    esp,0x10
c0020902:	83 ec 08             	sub    esp,0x8
c0020905:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020909:	50                   	push   eax
c002090a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020911:	50                   	push   eax
c0020912:	e8 58 56 fe ff       	call   c0005f6f <f_stat>
c0020917:	83 c4 10             	add    esp,0x10
c002091a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020921:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020928:	85 c0                	test   eax,eax
c002092a:	74 07                	je     c0020933 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002092c:	83 f8 04             	cmp    eax,0x4
c002092f:	74 32                	je     c0020963 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020931:	eb 37                	jmp    c002096a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020933:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020937:	0f b6 c0             	movzx  eax,al
c002093a:	83 e0 10             	and    eax,0x10
c002093d:	0f 95 c2             	setne  dl
c0020940:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020947:	88 10                	mov    BYTE PTR [eax],dl
c0020949:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002094c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020950:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020957:	89 01                	mov    DWORD PTR [ecx],eax
c0020959:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002095c:	b8 00 00 00 00       	mov    eax,0x0
c0020961:	eb 0c                	jmp    c002096f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020963:	b8 02 00 00 00       	mov    eax,0x2
c0020968:	eb 05                	jmp    c002096f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002096a:	b8 01 00 00 00       	mov    eax,0x1
c002096f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020975:	c3                   	ret    

c0020976 <FAT::unlink(char const*)>:
c0020976:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002097c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020984:	75 07                	jne    c002098d <FAT::unlink(char const*)+0x17>
c0020986:	b8 04 00 00 00       	mov    eax,0x4
c002098b:	eb 5c                	jmp    c00209e9 <FAT::unlink(char const*)+0x73>
c002098d:	83 ec 08             	sub    esp,0x8
c0020990:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020997:	8d 44 24 18          	lea    eax,[esp+0x18]
c002099b:	50                   	push   eax
c002099c:	e8 c0 fd fd ff       	call   c0000761 <strcpy>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	83 ec 08             	sub    esp,0x8
c00209a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209ab:	50                   	push   eax
c00209ac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209b3:	e8 ce fc ff ff       	call   c0020686 <FAT::fixFilepath(char*)>
c00209b8:	83 c4 10             	add    esp,0x10
c00209bb:	83 ec 0c             	sub    esp,0xc
c00209be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209c2:	50                   	push   eax
c00209c3:	e8 f9 58 fe ff       	call   c00062c1 <f_unlink>
c00209c8:	83 c4 10             	add    esp,0x10
c00209cb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00209d2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00209d9:	85 c0                	test   eax,eax
c00209db:	75 07                	jne    c00209e4 <FAT::unlink(char const*)+0x6e>
c00209dd:	b8 00 00 00 00       	mov    eax,0x0
c00209e2:	eb 05                	jmp    c00209e9 <FAT::unlink(char const*)+0x73>
c00209e4:	b8 01 00 00 00       	mov    eax,0x1
c00209e9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209ef:	c3                   	ret    

c00209f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00209f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00209f6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00209fd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020a04:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020a08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020a0c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020a14:	75 0a                	jne    c0020a20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020a16:	b8 04 00 00 00       	mov    eax,0x4
c0020a1b:	e9 1c 01 00 00       	jmp    c0020b3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020a20:	83 ec 08             	sub    esp,0x8
c0020a23:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020a2a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020a2e:	50                   	push   eax
c0020a2f:	e8 2d fd fd ff       	call   c0000761 <strcpy>
c0020a34:	83 c4 10             	add    esp,0x10
c0020a37:	83 ec 08             	sub    esp,0x8
c0020a3a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020a3e:	50                   	push   eax
c0020a3f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020a46:	e8 3b fc ff ff       	call   c0020686 <FAT::fixFilepath(char*)>
c0020a4b:	83 c4 10             	add    esp,0x10
c0020a4e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020a56:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020a5e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a63:	83 e0 01             	and    eax,0x1
c0020a66:	74 08                	je     c0020a70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020a68:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020a70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a75:	83 e0 02             	and    eax,0x2
c0020a78:	74 08                	je     c0020a82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020a7a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020a82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a87:	83 e0 04             	and    eax,0x4
c0020a8a:	74 08                	je     c0020a94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020a8c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020a94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a99:	83 e0 08             	and    eax,0x8
c0020a9c:	74 08                	je     c0020aa6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020a9e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020aa6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020aab:	83 e0 01             	and    eax,0x1
c0020aae:	74 08                	je     c0020ab8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020ab0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020ab8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020abd:	83 e0 02             	and    eax,0x2
c0020ac0:	74 08                	je     c0020aca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020ac2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020aca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020acf:	83 e0 04             	and    eax,0x4
c0020ad2:	74 08                	je     c0020adc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020ad4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020adc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ae1:	83 e0 08             	and    eax,0x8
c0020ae4:	74 08                	je     c0020aee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020ae6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020aee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020af5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020afc:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020b04:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020b0c:	83 ec 04             	sub    esp,0x4
c0020b0f:	52                   	push   edx
c0020b10:	50                   	push   eax
c0020b11:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b15:	50                   	push   eax
c0020b16:	e8 48 5e fe ff       	call   c0006963 <f_chmod>
c0020b1b:	83 c4 10             	add    esp,0x10
c0020b1e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020b25:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020b2c:	85 c0                	test   eax,eax
c0020b2e:	75 07                	jne    c0020b37 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020b30:	b8 00 00 00 00       	mov    eax,0x0
c0020b35:	eb 05                	jmp    c0020b3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020b37:	b8 01 00 00 00       	mov    eax,0x1
c0020b3c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020b42:	c3                   	ret    
c0020b43:	90                   	nop

c0020b44 <FAT::rename(char const*, char const*)>:
c0020b44:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020b4a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020b52:	74 0a                	je     c0020b5e <FAT::rename(char const*, char const*)+0x1a>
c0020b54:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020b5c:	75 0a                	jne    c0020b68 <FAT::rename(char const*, char const*)+0x24>
c0020b5e:	b8 04 00 00 00       	mov    eax,0x4
c0020b63:	e9 98 00 00 00       	jmp    c0020c00 <FAT::rename(char const*, char const*)+0xbc>
c0020b68:	83 ec 08             	sub    esp,0x8
c0020b6b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020b72:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b79:	50                   	push   eax
c0020b7a:	e8 e2 fb fd ff       	call   c0000761 <strcpy>
c0020b7f:	83 c4 10             	add    esp,0x10
c0020b82:	83 ec 08             	sub    esp,0x8
c0020b85:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020b8c:	50                   	push   eax
c0020b8d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020b94:	e8 ed fa ff ff       	call   c0020686 <FAT::fixFilepath(char*)>
c0020b99:	83 c4 10             	add    esp,0x10
c0020b9c:	83 ec 08             	sub    esp,0x8
c0020b9f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020ba6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020baa:	50                   	push   eax
c0020bab:	e8 b1 fb fd ff       	call   c0000761 <strcpy>
c0020bb0:	83 c4 10             	add    esp,0x10
c0020bb3:	83 ec 08             	sub    esp,0x8
c0020bb6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bba:	50                   	push   eax
c0020bbb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020bc2:	e8 bf fa ff ff       	call   c0020686 <FAT::fixFilepath(char*)>
c0020bc7:	83 c4 10             	add    esp,0x10
c0020bca:	83 ec 08             	sub    esp,0x8
c0020bcd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bd1:	50                   	push   eax
c0020bd2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bd9:	50                   	push   eax
c0020bda:	e8 91 5a fe ff       	call   c0006670 <f_rename>
c0020bdf:	83 c4 10             	add    esp,0x10
c0020be2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020be9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020bf0:	85 c0                	test   eax,eax
c0020bf2:	75 07                	jne    c0020bfb <FAT::rename(char const*, char const*)+0xb7>
c0020bf4:	b8 00 00 00 00       	mov    eax,0x0
c0020bf9:	eb 05                	jmp    c0020c00 <FAT::rename(char const*, char const*)+0xbc>
c0020bfb:	b8 01 00 00 00       	mov    eax,0x1
c0020c00:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020c06:	c3                   	ret    
c0020c07:	90                   	nop

c0020c08 <FAT::mkdir(char const*)>:
c0020c08:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c0e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c16:	75 07                	jne    c0020c1f <FAT::mkdir(char const*)+0x17>
c0020c18:	b8 04 00 00 00       	mov    eax,0x4
c0020c1d:	eb 5c                	jmp    c0020c7b <FAT::mkdir(char const*)+0x73>
c0020c1f:	83 ec 08             	sub    esp,0x8
c0020c22:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c29:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c2d:	50                   	push   eax
c0020c2e:	e8 2e fb fd ff       	call   c0000761 <strcpy>
c0020c33:	83 c4 10             	add    esp,0x10
c0020c36:	83 ec 08             	sub    esp,0x8
c0020c39:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c3d:	50                   	push   eax
c0020c3e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c45:	e8 3c fa ff ff       	call   c0020686 <FAT::fixFilepath(char*)>
c0020c4a:	83 c4 10             	add    esp,0x10
c0020c4d:	83 ec 0c             	sub    esp,0xc
c0020c50:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c54:	50                   	push   eax
c0020c55:	e8 ea 57 fe ff       	call   c0006444 <f_mkdir>
c0020c5a:	83 c4 10             	add    esp,0x10
c0020c5d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020c64:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020c6b:	85 c0                	test   eax,eax
c0020c6d:	75 07                	jne    c0020c76 <FAT::mkdir(char const*)+0x6e>
c0020c6f:	b8 00 00 00 00       	mov    eax,0x0
c0020c74:	eb 05                	jmp    c0020c7b <FAT::mkdir(char const*)+0x73>
c0020c76:	b8 01 00 00 00       	mov    eax,0x1
c0020c7b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c81:	c3                   	ret    

c0020c82 <FAT::exists(char const*)>:
c0020c82:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020c88:	83 ec 08             	sub    esp,0x8
c0020c8b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c96:	50                   	push   eax
c0020c97:	e8 c5 fa fd ff       	call   c0000761 <strcpy>
c0020c9c:	83 c4 10             	add    esp,0x10
c0020c9f:	83 ec 08             	sub    esp,0x8
c0020ca2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ca6:	50                   	push   eax
c0020ca7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020cae:	e8 d3 f9 ff ff       	call   c0020686 <FAT::fixFilepath(char*)>
c0020cb3:	83 c4 10             	add    esp,0x10
c0020cb6:	83 ec 08             	sub    esp,0x8
c0020cb9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020cc0:	50                   	push   eax
c0020cc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020cc5:	50                   	push   eax
c0020cc6:	e8 a4 52 fe ff       	call   c0005f6f <f_stat>
c0020ccb:	83 c4 10             	add    esp,0x10
c0020cce:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020cd5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020cdc:	85 c0                	test   eax,eax
c0020cde:	75 04                	jne    c0020ce4 <FAT::exists(char const*)+0x62>
c0020ce0:	b0 01                	mov    al,0x1
c0020ce2:	eb 02                	jmp    c0020ce6 <FAT::exists(char const*)+0x64>
c0020ce4:	b0 00                	mov    al,0x0
c0020ce6:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020cec:	c3                   	ret    
c0020ced:	90                   	nop

c0020cee <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020cee:	b8 08 00 00 00       	mov    eax,0x8
c0020cf3:	c3                   	ret    

c0020cf4 <ISO9660::seek(void*, unsigned long long)>:
c0020cf4:	53                   	push   ebx
c0020cf5:	b8 04 00 00 00       	mov    eax,0x4
c0020cfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020cfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020d02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020d06:	85 d2                	test   edx,edx
c0020d08:	74 17                	je     c0020d21 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020d0a:	89 c8                	mov    eax,ecx
c0020d0c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020d0f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020d12:	b8 01 00 00 00       	mov    eax,0x1
c0020d17:	73 08                	jae    c0020d21 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020d19:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020d1c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020d1f:	31 c0                	xor    eax,eax
c0020d21:	5b                   	pop    ebx
c0020d22:	c3                   	ret    
c0020d23:	90                   	nop

c0020d24 <ISO9660::tell(void*, unsigned long long*)>:
c0020d24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d2c:	85 d2                	test   edx,edx
c0020d2e:	74 12                	je     c0020d42 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020d30:	85 c0                	test   eax,eax
c0020d32:	74 0e                	je     c0020d42 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020d34:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020d37:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020d3a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020d3d:	89 10                	mov    DWORD PTR [eax],edx
c0020d3f:	31 c0                	xor    eax,eax
c0020d41:	c3                   	ret    
c0020d42:	b8 04 00 00 00       	mov    eax,0x4
c0020d47:	c3                   	ret    

c0020d48 <ISO9660::getName()>:
c0020d48:	b8 14 bf 02 c0       	mov    eax,0xc002bf14
c0020d4d:	c3                   	ret    

c0020d4e <ISO9660::stat(void*, unsigned long long*)>:
c0020d4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d56:	85 d2                	test   edx,edx
c0020d58:	74 12                	je     c0020d6c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020d5a:	85 c0                	test   eax,eax
c0020d5c:	74 0e                	je     c0020d6c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020d5e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020d61:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020d64:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020d67:	89 10                	mov    DWORD PTR [eax],edx
c0020d69:	31 c0                	xor    eax,eax
c0020d6b:	c3                   	ret    
c0020d6c:	b8 04 00 00 00       	mov    eax,0x4
c0020d71:	c3                   	ret    

c0020d72 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d72:	b8 01 00 00 00       	mov    eax,0x1
c0020d77:	c3                   	ret    

c0020d78 <ISO9660::unlink(char const*)>:
c0020d78:	b8 01 00 00 00       	mov    eax,0x1
c0020d7d:	c3                   	ret    

c0020d7e <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020d7e:	b8 01 00 00 00       	mov    eax,0x1
c0020d83:	c3                   	ret    

c0020d84 <ISO9660::rename(char const*, char const*)>:
c0020d84:	b8 01 00 00 00       	mov    eax,0x1
c0020d89:	c3                   	ret    

c0020d8a <ISO9660::mkdir(char const*)>:
c0020d8a:	b8 01 00 00 00       	mov    eax,0x1
c0020d8f:	c3                   	ret    

c0020d90 <ISO9660::close(void*)>:
c0020d90:	83 ec 0c             	sub    esp,0xc
c0020d93:	b8 04 00 00 00       	mov    eax,0x4
c0020d98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d9c:	85 d2                	test   edx,edx
c0020d9e:	74 0e                	je     c0020dae <ISO9660::close(void*)+0x1e>
c0020da0:	83 ec 0c             	sub    esp,0xc
c0020da3:	52                   	push   edx
c0020da4:	e8 89 e8 fe ff       	call   c000f632 <free>
c0020da9:	83 c4 10             	add    esp,0x10
c0020dac:	31 c0                	xor    eax,eax
c0020dae:	83 c4 0c             	add    esp,0xc
c0020db1:	c3                   	ret    

c0020db2 <ISO9660::closeDir(void*)>:
c0020db2:	83 ec 0c             	sub    esp,0xc
c0020db5:	b8 04 00 00 00       	mov    eax,0x4
c0020dba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020dbe:	85 d2                	test   edx,edx
c0020dc0:	74 0e                	je     c0020dd0 <ISO9660::closeDir(void*)+0x1e>
c0020dc2:	83 ec 0c             	sub    esp,0xc
c0020dc5:	52                   	push   edx
c0020dc6:	e8 67 e8 fe ff       	call   c000f632 <free>
c0020dcb:	83 c4 10             	add    esp,0x10
c0020dce:	31 c0                	xor    eax,eax
c0020dd0:	83 c4 0c             	add    esp,0xc
c0020dd3:	c3                   	ret    

c0020dd4 <ISO9660::~ISO9660()>:
c0020dd4:	83 ec 0c             	sub    esp,0xc
c0020dd7:	ba 78 bf 02 c0       	mov    edx,0xc002bf78
c0020ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020de0:	89 10                	mov    DWORD PTR [eax],edx
c0020de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020de6:	83 ec 0c             	sub    esp,0xc
c0020de9:	50                   	push   eax
c0020dea:	e8 2b 1e ff ff       	call   c0012c1a <Filesystem::~Filesystem()>
c0020def:	83 c4 10             	add    esp,0x10
c0020df2:	90                   	nop
c0020df3:	83 c4 0c             	add    esp,0xc
c0020df6:	c3                   	ret    
c0020df7:	90                   	nop

c0020df8 <ISO9660::~ISO9660()>:
c0020df8:	83 ec 0c             	sub    esp,0xc
c0020dfb:	83 ec 0c             	sub    esp,0xc
c0020dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e02:	e8 cd ff ff ff       	call   c0020dd4 <ISO9660::~ISO9660()>
c0020e07:	83 c4 10             	add    esp,0x10
c0020e0a:	83 ec 08             	sub    esp,0x8
c0020e0d:	6a 08                	push   0x8
c0020e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e13:	e8 f9 19 ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0020e18:	83 c4 10             	add    esp,0x10
c0020e1b:	83 c4 0c             	add    esp,0xc
c0020e1e:	c3                   	ret    

c0020e1f <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020e1f:	55                   	push   ebp
c0020e20:	31 c9                	xor    ecx,ecx
c0020e22:	57                   	push   edi
c0020e23:	56                   	push   esi
c0020e24:	53                   	push   ebx
c0020e25:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020e29:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020e2d:	89 eb                	mov    ebx,ebp
c0020e2f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020e33:	39 ce                	cmp    esi,ecx
c0020e35:	7e 17                	jle    c0020e4e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020e37:	31 d2                	xor    edx,edx
c0020e39:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020e3d:	7d 13                	jge    c0020e52 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020e3f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020e43:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020e46:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020e49:	75 0d                	jne    c0020e58 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020e4b:	42                   	inc    edx
c0020e4c:	eb eb                	jmp    c0020e39 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020e4e:	31 c0                	xor    eax,eax
c0020e50:	eb 0a                	jmp    c0020e5c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020e52:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020e56:	eb 04                	jmp    c0020e5c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020e58:	41                   	inc    ecx
c0020e59:	43                   	inc    ebx
c0020e5a:	eb d7                	jmp    c0020e33 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020e5c:	5b                   	pop    ebx
c0020e5d:	5e                   	pop    esi
c0020e5e:	5f                   	pop    edi
c0020e5f:	5d                   	pop    ebp
c0020e60:	c3                   	ret    

c0020e61 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020e61:	56                   	push   esi
c0020e62:	53                   	push   ebx
c0020e63:	52                   	push   edx
c0020e64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020e6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e70:	39 0d 00 12 03 c0    	cmp    DWORD PTR ds:0xc0031200,ecx
c0020e76:	75 08                	jne    c0020e80 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020e78:	38 05 54 d0 02 c0    	cmp    BYTE PTR ds:0xc002d054,al
c0020e7e:	74 2b                	je     c0020eab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020e80:	83 ec 0c             	sub    esp,0xc
c0020e83:	a2 54 d0 02 c0       	mov    ds:0xc002d054,al
c0020e88:	68 20 12 03 c0       	push   0xc0031220
c0020e8d:	0f be c0             	movsx  eax,al
c0020e90:	6a 01                	push   0x1
c0020e92:	89 0d 00 12 03 c0    	mov    DWORD PTR ds:0xc0031200,ecx
c0020e98:	31 db                	xor    ebx,ebx
c0020e9a:	53                   	push   ebx
c0020e9b:	51                   	push   ecx
c0020e9c:	ff 34 85 dc df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2024]
c0020ea3:	e8 06 52 ff ff       	call   c00160ae <LogicalDisk::read(unsigned long long, int, void*)>
c0020ea8:	83 c4 20             	add    esp,0x20
c0020eab:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020eb3:	c7 44 24 14 20 12 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031220
c0020ebb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020ebf:	58                   	pop    eax
c0020ec0:	5b                   	pop    ebx
c0020ec1:	5e                   	pop    esi
c0020ec2:	e9 d9 f7 fd ff       	jmp    c00006a0 <memcpy>
c0020ec7:	90                   	nop

c0020ec8 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020ec8:	81 ec 10 08 00 00    	sub    esp,0x810
c0020ece:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020ed5:	83 c0 41             	add    eax,0x41
c0020ed8:	0f be c0             	movsx  eax,al
c0020edb:	50                   	push   eax
c0020edc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ee0:	50                   	push   eax
c0020ee1:	6a 10                	push   0x10
c0020ee3:	e8 79 ff ff ff       	call   c0020e61 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ee8:	83 c4 10             	add    esp,0x10
c0020eeb:	31 c0                	xor    eax,eax
c0020eed:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020ef2:	75 1d                	jne    c0020f11 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ef4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020ef9:	75 16                	jne    c0020f11 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020efb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020f00:	75 0f                	jne    c0020f11 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020f02:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020f07:	75 08                	jne    c0020f11 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020f09:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020f0e:	0f 94 c0             	sete   al
c0020f11:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020f17:	c3                   	ret    

c0020f18 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020f18:	55                   	push   ebp
c0020f19:	57                   	push   edi
c0020f1a:	56                   	push   esi
c0020f1b:	53                   	push   ebx
c0020f1c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020f22:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020f29:	85 ed                	test   ebp,ebp
c0020f2b:	0f 84 d6 01 00 00    	je     c0021107 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020f31:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020f39:	0f 84 c8 01 00 00    	je     c0021107 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020f3f:	b8 01 00 00 00       	mov    eax,0x1
c0020f44:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020f48:	0f 85 be 01 00 00    	jne    c002110c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020f4e:	31 d2                	xor    edx,edx
c0020f50:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020f57:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020f5a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020f5d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020f61:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020f64:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f6b:	01 f0                	add    eax,esi
c0020f6d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020f70:	11 fa                	adc    edx,edi
c0020f72:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020f76:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020f7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020f7e:	19 d1                	sbb    ecx,edx
c0020f80:	72 0a                	jb     c0020f8c <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f8a:	eb 13                	jmp    c0020f9f <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020f8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020f94:	29 f0                	sub    eax,esi
c0020f96:	19 fa                	sbb    edx,edi
c0020f98:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020fa2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020fa5:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020fa9:	51                   	push   ecx
c0020faa:	c1 e0 0b             	shl    eax,0xb
c0020fad:	01 c6                	add    esi,eax
c0020faf:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020fb3:	11 d7                	adc    edi,edx
c0020fb5:	50                   	push   eax
c0020fb6:	89 fa                	mov    edx,edi
c0020fb8:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020fbc:	89 f0                	mov    eax,esi
c0020fbe:	53                   	push   ebx
c0020fbf:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020fc3:	50                   	push   eax
c0020fc4:	e8 98 fe ff ff       	call   c0020e61 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020fc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020fcd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020fd0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020fd4:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020fda:	83 c4 10             	add    esp,0x10
c0020fdd:	b8 00 08 00 00       	mov    eax,0x800
c0020fe2:	29 d0                	sub    eax,edx
c0020fe4:	39 c1                	cmp    ecx,eax
c0020fe6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020fea:	83 d9 00             	sbb    ecx,0x0
c0020fed:	7d 1c                	jge    c002100b <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020fef:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020ff4:	75 12                	jne    c0021008 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020ff6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020ffd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021003:	e9 fb 00 00 00       	jmp    c0021103 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021008:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002100b:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002100e:	31 d2                	xor    edx,edx
c0021010:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021014:	39 c2                	cmp    edx,eax
c0021016:	7d 14                	jge    c002102c <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021018:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002101f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021023:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021026:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021029:	42                   	inc    edx
c002102a:	eb e8                	jmp    c0021014 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002102c:	89 c3                	mov    ebx,eax
c002102e:	85 c0                	test   eax,eax
c0021030:	79 02                	jns    c0021034 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021032:	31 db                	xor    ebx,ebx
c0021034:	99                   	cdq    
c0021035:	01 c3                	add    ebx,eax
c0021037:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002103e:	01 c6                	add    esi,eax
c0021040:	11 d7                	adc    edi,edx
c0021042:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021046:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002104a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002104d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021051:	29 c6                	sub    esi,eax
c0021053:	19 d7                	sbb    edi,edx
c0021055:	89 34 24             	mov    DWORD PTR [esp],esi
c0021058:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002105c:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021061:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021064:	b8 00 00 00 00       	mov    eax,0x0
c0021069:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002106d:	7d 3e                	jge    c00210ad <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c002106f:	52                   	push   edx
c0021070:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021074:	50                   	push   eax
c0021075:	53                   	push   ebx
c0021076:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002107a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002107e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021082:	50                   	push   eax
c0021083:	e8 d9 fd ff ff       	call   c0020e61 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021088:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021090:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021095:	81 c3 00 08 00 00    	add    ebx,0x800
c002109b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00210a3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00210a8:	83 c4 10             	add    esp,0x10
c00210ab:	eb af                	jmp    c002105c <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00210ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210b1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00210b4:	74 32                	je     c00210e8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00210b6:	50                   	push   eax
c00210b7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00210bb:	50                   	push   eax
c00210bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00210c0:	50                   	push   eax
c00210c1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00210c5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00210c9:	0f ac fe 0b          	shrd   esi,edi,0xb
c00210cd:	56                   	push   esi
c00210ce:	e8 8e fd ff ff       	call   c0020e61 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210d3:	83 c4 0c             	add    esp,0xc
c00210d6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00210da:	8d 44 24 28          	lea    eax,[esp+0x28]
c00210de:	50                   	push   eax
c00210df:	53                   	push   ebx
c00210e0:	e8 bb f5 fd ff       	call   c00006a0 <memcpy>
c00210e5:	83 c4 10             	add    esp,0x10
c00210e8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00210ef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00210f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00210f7:	89 38                	mov    DWORD PTR [eax],edi
c00210f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210fd:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021100:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021103:	31 c0                	xor    eax,eax
c0021105:	eb 05                	jmp    c002110c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021107:	b8 04 00 00 00       	mov    eax,0x4
c002110c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021112:	5b                   	pop    ebx
c0021113:	5e                   	pop    esi
c0021114:	5f                   	pop    edi
c0021115:	5d                   	pop    ebp
c0021116:	c3                   	ret    
c0021117:	90                   	nop

c0021118 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021118:	55                   	push   ebp
c0021119:	57                   	push   edi
c002111a:	56                   	push   esi
c002111b:	53                   	push   ebx
c002111c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021122:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021129:	85 f6                	test   esi,esi
c002112b:	0f 84 64 02 00 00    	je     c0021395 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021131:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021139:	0f 84 56 02 00 00    	je     c0021395 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002113f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021142:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021145:	75 0a                	jne    c0021151 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021147:	b8 07 00 00 00       	mov    eax,0x7
c002114c:	e9 49 02 00 00       	jmp    c002139a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021151:	50                   	push   eax
c0021152:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021156:	50                   	push   eax
c0021157:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002115e:	53                   	push   ebx
c002115f:	8b 06                	mov    eax,DWORD PTR [esi]
c0021161:	c1 e0 0b             	shl    eax,0xb
c0021164:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021167:	c1 e8 0b             	shr    eax,0xb
c002116a:	50                   	push   eax
c002116b:	e8 f1 fc ff ff       	call   c0020e61 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021170:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021173:	83 c4 10             	add    esp,0x10
c0021176:	89 c1                	mov    ecx,eax
c0021178:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c002117b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021181:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021184:	84 db                	test   bl,bl
c0021186:	0f 85 90 00 00 00    	jne    c002121c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c002118c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021192:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021198:	29 c7                	sub    edi,eax
c002119a:	89 fb                	mov    ebx,edi
c002119c:	c1 fb 1f             	sar    ebx,0x1f
c002119f:	01 f8                	add    eax,edi
c00211a1:	11 da                	adc    edx,ebx
c00211a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00211ab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00211ae:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00211b1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00211b4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00211b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00211ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211be:	89 d8                	mov    eax,ebx
c00211c0:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00211c3:	ba 00 00 00 00       	mov    edx,0x0
c00211c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00211cc:	b8 00 00 00 00       	mov    eax,0x0
c00211d1:	73 0b                	jae    c00211de <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00211d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00211d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00211da:	29 f8                	sub    eax,edi
c00211dc:	19 da                	sbb    edx,ebx
c00211de:	89 d3                	mov    ebx,edx
c00211e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00211e3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00211e6:	09 c3                	or     ebx,eax
c00211e8:	0f 84 59 ff ff ff    	je     c0021147 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00211ee:	55                   	push   ebp
c00211ef:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00211f3:	50                   	push   eax
c00211f4:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00211fb:	53                   	push   ebx
c00211fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00211fe:	c1 e0 0b             	shl    eax,0xb
c0021201:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021205:	c1 e8 0b             	shr    eax,0xb
c0021208:	50                   	push   eax
c0021209:	e8 53 fc ff ff       	call   c0020e61 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002120e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021211:	83 c4 10             	add    esp,0x10
c0021214:	25 ff 07 00 00       	and    eax,0x7ff
c0021219:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002121c:	57                   	push   edi
c002121d:	6a 28                	push   0x28
c002121f:	6a 00                	push   0x0
c0021221:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021225:	50                   	push   eax
c0021226:	e8 97 f4 fd ff       	call   c00006c2 <memset>
c002122b:	31 d2                	xor    edx,edx
c002122d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021230:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021236:	89 f8                	mov    eax,edi
c0021238:	83 c0 21             	add    eax,0x21
c002123b:	83 d2 00             	adc    edx,0x0
c002123e:	89 c7                	mov    edi,eax
c0021240:	89 d5                	mov    ebp,edx
c0021242:	83 c4 10             	add    esp,0x10
c0021245:	31 c9                	xor    ecx,ecx
c0021247:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c002124e:	83 f9 28             	cmp    ecx,0x28
c0021251:	88 04 24             	mov    BYTE PTR [esp],al
c0021254:	0f 94 c2             	sete   dl
c0021257:	88 d0                	mov    al,dl
c0021259:	ba ff 07 00 00       	mov    edx,0x7ff
c002125e:	39 fa                	cmp    edx,edi
c0021260:	ba 00 00 00 00       	mov    edx,0x0
c0021265:	19 ea                	sbb    edx,ebp
c0021267:	0f 92 c2             	setb   dl
c002126a:	09 c2                	or     edx,eax
c002126c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021270:	0f 94 c0             	sete   al
c0021273:	08 d0                	or     al,dl
c0021275:	75 16                	jne    c002128d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021277:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002127b:	74 10                	je     c002128d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c002127d:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021280:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021284:	41                   	inc    ecx
c0021285:	83 c7 01             	add    edi,0x1
c0021288:	83 d5 00             	adc    ebp,0x0
c002128b:	eb ba                	jmp    c0021247 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c002128d:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021294:	83 ec 0c             	sub    esp,0xc
c0021297:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002129b:	57                   	push   edi
c002129c:	e8 3e f4 fd ff       	call   c00006df <strlen>
c00212a1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00212a9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00212ad:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00212b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00212b7:	5a                   	pop    edx
c00212b8:	25 ff 07 00 00       	and    eax,0x7ff
c00212bd:	01 c8                	add    eax,ecx
c00212bf:	59                   	pop    ecx
c00212c0:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00212c6:	83 e0 02             	and    eax,0x2
c00212c9:	3c 01                	cmp    al,0x1
c00212cb:	19 c0                	sbb    eax,eax
c00212cd:	83 c0 02             	add    eax,0x2
c00212d0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00212d4:	57                   	push   edi
c00212d5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00212d9:	50                   	push   eax
c00212da:	e8 82 f4 fd ff       	call   c0000761 <strcpy>
c00212df:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00212e3:	83 c4 10             	add    esp,0x10
c00212e6:	84 c0                	test   al,al
c00212e8:	75 21                	jne    c002130b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c00212ea:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00212f2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00212fa:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021302:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021309:	eb 28                	jmp    c0021333 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002130b:	fe c8                	dec    al
c002130d:	75 24                	jne    c0021333 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002130f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021317:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002131f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021327:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002132e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021333:	0f b6 fb             	movzx  edi,bl
c0021336:	31 db                	xor    ebx,ebx
c0021338:	50                   	push   eax
c0021339:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021340:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021344:	50                   	push   eax
c0021345:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c002134c:	e8 4f f3 fd ff       	call   c00006a0 <memcpy>
c0021351:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021358:	89 f9                	mov    ecx,edi
c002135a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021360:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021363:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021366:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021369:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002136c:	83 c4 10             	add    esp,0x10
c002136f:	39 c7                	cmp    edi,eax
c0021371:	89 df                	mov    edi,ebx
c0021373:	19 d7                	sbb    edi,edx
c0021375:	72 10                	jb     c0021387 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021377:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c002137e:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021385:	eb 0a                	jmp    c0021391 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021387:	29 c8                	sub    eax,ecx
c0021389:	19 da                	sbb    edx,ebx
c002138b:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002138e:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021391:	31 c0                	xor    eax,eax
c0021393:	eb 05                	jmp    c002139a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021395:	b8 04 00 00 00       	mov    eax,0x4
c002139a:	81 c4 5c 09 00 00    	add    esp,0x95c
c00213a0:	5b                   	pop    ebx
c00213a1:	5e                   	pop    esi
c00213a2:	5f                   	pop    edi
c00213a3:	5d                   	pop    ebp
c00213a4:	c3                   	ret    

c00213a5 <readRoot(unsigned int*, unsigned int*, char)>:
c00213a5:	81 ec 40 08 00 00    	sub    esp,0x840
c00213ab:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00213b3:	50                   	push   eax
c00213b4:	8d 44 24 38          	lea    eax,[esp+0x38]
c00213b8:	50                   	push   eax
c00213b9:	6a 10                	push   0x10
c00213bb:	e8 a1 fa ff ff       	call   c0020e61 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213c0:	83 c4 0c             	add    esp,0xc
c00213c3:	6a 22                	push   0x22
c00213c5:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c00213cc:	50                   	push   eax
c00213cd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00213d1:	50                   	push   eax
c00213d2:	e8 c9 f2 fd ff       	call   c00006a0 <memcpy>
c00213d7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00213e2:	89 10                	mov    DWORD PTR [eax],edx
c00213e4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00213eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00213ef:	89 10                	mov    DWORD PTR [eax],edx
c00213f1:	b0 01                	mov    al,0x1
c00213f3:	81 c4 4c 08 00 00    	add    esp,0x84c
c00213f9:	c3                   	ret    

c00213fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00213fa:	55                   	push   ebp
c00213fb:	57                   	push   edi
c00213fc:	56                   	push   esi
c00213fd:	53                   	push   ebx
c00213fe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021404:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002140b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021412:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021416:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002141a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002141e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021422:	75 03                	jne    c0021427 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021424:	83 c3 02             	add    ebx,0x2
c0021427:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002142a:	75 03                	jne    c002142f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002142c:	43                   	inc    ebx
c002142d:	eb f8                	jmp    c0021427 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002142f:	51                   	push   ecx
c0021430:	68 00 01 00 00       	push   0x100
c0021435:	6a 00                	push   0x0
c0021437:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002143b:	50                   	push   eax
c002143c:	e8 81 f2 fd ff       	call   c00006c2 <memset>
c0021441:	83 c4 10             	add    esp,0x10
c0021444:	31 d2                	xor    edx,edx
c0021446:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021449:	84 c0                	test   al,al
c002144b:	74 21                	je     c002146e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002144d:	3c 2f                	cmp    al,0x2f
c002144f:	75 0b                	jne    c002145c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021451:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021455:	bd 01 00 00 00       	mov    ebp,0x1
c002145a:	eb 14                	jmp    c0021470 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002145c:	8d 48 9f             	lea    ecx,[eax-0x61]
c002145f:	80 f9 19             	cmp    cl,0x19
c0021462:	77 03                	ja     c0021467 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021464:	83 e8 20             	sub    eax,0x20
c0021467:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002146b:	42                   	inc    edx
c002146c:	eb d8                	jmp    c0021446 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002146e:	31 ed                	xor    ebp,ebp
c0021470:	83 ec 0c             	sub    esp,0xc
c0021473:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002147a:	e8 a3 e1 fe ff       	call   c000f622 <malloc>
c002147f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021486:	89 c6                	mov    esi,eax
c0021488:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002148e:	c1 ef 0b             	shr    edi,0xb
c0021491:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021498:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002149c:	83 c4 10             	add    esp,0x10
c002149f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00214a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214a8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00214af:	74 28                	je     c00214d9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00214b1:	52                   	push   edx
c00214b2:	57                   	push   edi
c00214b3:	50                   	push   eax
c00214b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00214b8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00214bf:	e8 9d f9 ff ff       	call   c0020e61 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214c8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00214cf:	05 00 08 00 00       	add    eax,0x800
c00214d4:	83 c4 10             	add    esp,0x10
c00214d7:	eb cb                	jmp    c00214a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00214d9:	83 ec 0c             	sub    esp,0xc
c00214dc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00214e0:	57                   	push   edi
c00214e1:	e8 f9 f1 fd ff       	call   c00006df <strlen>
c00214e6:	50                   	push   eax
c00214e7:	57                   	push   edi
c00214e8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00214ef:	56                   	push   esi
c00214f0:	e8 2a f9 ff ff       	call   c0020e1f <__memmem(unsigned char*, int, unsigned char*, int)>
c00214f5:	83 c4 20             	add    esp,0x20
c00214f8:	85 c0                	test   eax,eax
c00214fa:	75 13                	jne    c002150f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00214fc:	83 ec 0c             	sub    esp,0xc
c00214ff:	56                   	push   esi
c0021500:	e8 2d e1 fe ff       	call   c000f632 <free>
c0021505:	83 c4 10             	add    esp,0x10
c0021508:	31 c0                	xor    eax,eax
c002150a:	e9 b3 00 00 00       	jmp    c00215c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002150f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021513:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021517:	c1 e7 08             	shl    edi,0x8
c002151a:	c1 e2 10             	shl    edx,0x10
c002151d:	09 d7                	or     edi,edx
c002151f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021523:	09 d7                	or     edi,edx
c0021525:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021529:	c1 e2 18             	shl    edx,0x18
c002152c:	09 d7                	or     edi,edx
c002152e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021532:	89 d1                	mov    ecx,edx
c0021534:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021538:	c1 e1 08             	shl    ecx,0x8
c002153b:	c1 e2 10             	shl    edx,0x10
c002153e:	09 ca                	or     edx,ecx
c0021540:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021544:	09 ca                	or     edx,ecx
c0021546:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002154a:	c1 e1 18             	shl    ecx,0x18
c002154d:	09 ca                	or     edx,ecx
c002154f:	89 e9                	mov    ecx,ebp
c0021551:	84 c9                	test   cl,cl
c0021553:	74 3c                	je     c0021591 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021555:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021559:	83 ec 0c             	sub    esp,0xc
c002155c:	56                   	push   esi
c002155d:	e8 d0 e0 fe ff       	call   c000f632 <free>
c0021562:	83 c4 0c             	add    esp,0xc
c0021565:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002156c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021571:	50                   	push   eax
c0021572:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021579:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021580:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021584:	52                   	push   edx
c0021585:	57                   	push   edi
c0021586:	53                   	push   ebx
c0021587:	e8 6e fe ff ff       	call   c00213fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002158c:	83 c4 20             	add    esp,0x20
c002158f:	eb 31                	jmp    c00215c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021591:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021594:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002159b:	d0 e8                	shr    al,1
c002159d:	89 3b                	mov    DWORD PTR [ebx],edi
c002159f:	83 e0 01             	and    eax,0x1
c00215a2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00215a9:	83 ec 0c             	sub    esp,0xc
c00215ac:	89 13                	mov    DWORD PTR [ebx],edx
c00215ae:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00215b5:	89 03                	mov    DWORD PTR [ebx],eax
c00215b7:	56                   	push   esi
c00215b8:	e8 75 e0 fe ff       	call   c000f632 <free>
c00215bd:	83 c4 10             	add    esp,0x10
c00215c0:	b0 01                	mov    al,0x1
c00215c2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215c8:	5b                   	pop    ebx
c00215c9:	5e                   	pop    esi
c00215ca:	5f                   	pop    edi
c00215cb:	5d                   	pop    ebp
c00215cc:	c3                   	ret    

c00215cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00215cd:	55                   	push   ebp
c00215ce:	57                   	push   edi
c00215cf:	56                   	push   esi
c00215d0:	53                   	push   ebx
c00215d1:	83 ec 20             	sub    esp,0x20
c00215d4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00215d8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00215dc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00215e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00215e8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00215f0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00215f5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00215fb:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021601:	57                   	push   edi
c0021602:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021606:	50                   	push   eax
c0021607:	8d 44 24 14          	lea    eax,[esp+0x14]
c002160b:	50                   	push   eax
c002160c:	e8 94 fd ff ff       	call   c00213a5 <readRoot(unsigned int*, unsigned int*, char)>
c0021611:	5a                   	pop    edx
c0021612:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021616:	e8 c4 f0 fd ff       	call   c00006df <strlen>
c002161b:	83 c4 10             	add    esp,0x10
c002161e:	83 f8 03             	cmp    eax,0x3
c0021621:	77 17                	ja     c002163a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021623:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021627:	89 03                	mov    DWORD PTR [ebx],eax
c0021629:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002162d:	89 06                	mov    DWORD PTR [esi],eax
c002162f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021636:	b0 01                	mov    al,0x1
c0021638:	eb 19                	jmp    c0021653 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002163a:	50                   	push   eax
c002163b:	55                   	push   ebp
c002163c:	57                   	push   edi
c002163d:	56                   	push   esi
c002163e:	53                   	push   ebx
c002163f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021643:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021647:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002164b:	e8 aa fd ff ff       	call   c00213fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021650:	83 c4 20             	add    esp,0x20
c0021653:	83 c4 1c             	add    esp,0x1c
c0021656:	5b                   	pop    ebx
c0021657:	5e                   	pop    esi
c0021658:	5f                   	pop    edi
c0021659:	5d                   	pop    ebp
c002165a:	c3                   	ret    
c002165b:	90                   	nop

c002165c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002165c:	57                   	push   edi
c002165d:	56                   	push   esi
c002165e:	53                   	push   ebx
c002165f:	83 ec 10             	sub    esp,0x10
c0021662:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021666:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002166a:	85 ff                	test   edi,edi
c002166c:	0f 84 9d 00 00 00    	je     c002170f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021672:	85 f6                	test   esi,esi
c0021674:	0f 84 95 00 00 00    	je     c002170f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002167a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002167f:	74 17                	je     c0021698 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021681:	83 ec 0c             	sub    esp,0xc
c0021684:	68 2f bf 02 c0       	push   0xc002bf2f
c0021689:	e8 63 12 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c002168e:	83 c4 10             	add    esp,0x10
c0021691:	b8 03 00 00 00       	mov    eax,0x3
c0021696:	eb 7c                	jmp    c0021714 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021698:	83 ec 0c             	sub    esp,0xc
c002169b:	6a 1c                	push   0x1c
c002169d:	e8 80 df fe ff       	call   c000f622 <malloc>
c00216a2:	89 07                	mov    DWORD PTR [edi],eax
c00216a4:	89 c3                	mov    ebx,eax
c00216a6:	58                   	pop    eax
c00216a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216ab:	50                   	push   eax
c00216ac:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00216af:	50                   	push   eax
c00216b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216b4:	50                   	push   eax
c00216b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00216b9:	50                   	push   eax
c00216ba:	56                   	push   esi
c00216bb:	e8 0d ff ff ff       	call   c00215cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00216c0:	83 c4 20             	add    esp,0x20
c00216c3:	84 c0                	test   al,al
c00216c5:	74 07                	je     c00216ce <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00216c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00216cc:	74 0b                	je     c00216d9 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00216ce:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00216d2:	b8 01 00 00 00       	mov    eax,0x1
c00216d7:	eb 3b                	jmp    c0021714 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00216d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216dd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00216e1:	89 03                	mov    DWORD PTR [ebx],eax
c00216e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00216ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00216f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00216fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00216ff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021706:	8a 06                	mov    al,BYTE PTR [esi]
c0021708:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002170b:	31 c0                	xor    eax,eax
c002170d:	eb 05                	jmp    c0021714 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002170f:	b8 04 00 00 00       	mov    eax,0x4
c0021714:	83 c4 10             	add    esp,0x10
c0021717:	5b                   	pop    ebx
c0021718:	5e                   	pop    esi
c0021719:	5f                   	pop    edi
c002171a:	c3                   	ret    
c002171b:	90                   	nop

c002171c <ISO9660::exists(char const*)>:
c002171c:	83 ec 28             	sub    esp,0x28
c002171f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021723:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021727:	52                   	push   edx
c0021728:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002172b:	52                   	push   edx
c002172c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021730:	52                   	push   edx
c0021731:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021735:	52                   	push   edx
c0021736:	50                   	push   eax
c0021737:	e8 91 fe ff ff       	call   c00215cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002173c:	83 c4 3c             	add    esp,0x3c
c002173f:	c3                   	ret    

c0021740 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021740:	56                   	push   esi
c0021741:	53                   	push   ebx
c0021742:	83 ec 14             	sub    esp,0x14
c0021745:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021749:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002174d:	85 db                	test   ebx,ebx
c002174f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021753:	0f 94 c2             	sete   dl
c0021756:	85 f6                	test   esi,esi
c0021758:	0f 94 c0             	sete   al
c002175b:	08 c2                	or     dl,al
c002175d:	75 68                	jne    c00217c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002175f:	85 c9                	test   ecx,ecx
c0021761:	74 64                	je     c00217c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021763:	83 ec 0c             	sub    esp,0xc
c0021766:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021769:	8d 44 24 18          	lea    eax,[esp+0x18]
c002176d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021773:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002177a:	50                   	push   eax
c002177b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002177e:	50                   	push   eax
c002177f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021783:	50                   	push   eax
c0021784:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021788:	50                   	push   eax
c0021789:	51                   	push   ecx
c002178a:	e8 3e fe ff ff       	call   c00215cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002178f:	83 c4 20             	add    esp,0x20
c0021792:	ba 01 00 00 00       	mov    edx,0x1
c0021797:	84 c0                	test   al,al
c0021799:	74 31                	je     c00217cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002179b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002179f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217a6:	89 03                	mov    DWORD PTR [ebx],eax
c00217a8:	ba 00 00 00 00       	mov    edx,0x0
c00217ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217b1:	85 c0                	test   eax,eax
c00217b3:	0f 95 06             	setne  BYTE PTR [esi]
c00217b6:	74 14                	je     c00217cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00217b8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00217be:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00217c5:	eb 05                	jmp    c00217cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00217c7:	ba 04 00 00 00       	mov    edx,0x4
c00217cc:	83 c4 14             	add    esp,0x14
c00217cf:	89 d0                	mov    eax,edx
c00217d1:	5b                   	pop    ebx
c00217d2:	5e                   	pop    esi
c00217d3:	c3                   	ret    

c00217d4 <ISO9660::openDir(char const*, void**)>:
c00217d4:	57                   	push   edi
c00217d5:	56                   	push   esi
c00217d6:	53                   	push   ebx
c00217d7:	83 ec 10             	sub    esp,0x10
c00217da:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00217de:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00217e2:	85 ff                	test   edi,edi
c00217e4:	0f 84 95 00 00 00    	je     c002187f <ISO9660::openDir(char const*, void**)+0xab>
c00217ea:	85 f6                	test   esi,esi
c00217ec:	0f 84 8d 00 00 00    	je     c002187f <ISO9660::openDir(char const*, void**)+0xab>
c00217f2:	83 ec 0c             	sub    esp,0xc
c00217f5:	6a 1c                	push   0x1c
c00217f7:	e8 26 de fe ff       	call   c000f622 <malloc>
c00217fc:	89 07                	mov    DWORD PTR [edi],eax
c00217fe:	89 c3                	mov    ebx,eax
c0021800:	59                   	pop    ecx
c0021801:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021805:	50                   	push   eax
c0021806:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021809:	50                   	push   eax
c002180a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002180e:	50                   	push   eax
c002180f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021813:	50                   	push   eax
c0021814:	56                   	push   esi
c0021815:	e8 b3 fd ff ff       	call   c00215cd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002181a:	83 c4 20             	add    esp,0x20
c002181d:	84 c0                	test   al,al
c002181f:	74 07                	je     c0021828 <ISO9660::openDir(char const*, void**)+0x54>
c0021821:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021826:	75 21                	jne    c0021849 <ISO9660::openDir(char const*, void**)+0x75>
c0021828:	0f b6 c0             	movzx  eax,al
c002182b:	52                   	push   edx
c002182c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021830:	50                   	push   eax
c0021831:	68 55 bf 02 c0       	push   0xc002bf55
c0021836:	e8 b6 10 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c002183b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002183f:	83 c4 10             	add    esp,0x10
c0021842:	b8 01 00 00 00       	mov    eax,0x1
c0021847:	eb 3b                	jmp    c0021884 <ISO9660::openDir(char const*, void**)+0xb0>
c0021849:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002184d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021851:	89 03                	mov    DWORD PTR [ebx],eax
c0021853:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002185a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002185e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021865:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002186c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002186f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021876:	8a 06                	mov    al,BYTE PTR [esi]
c0021878:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002187b:	31 c0                	xor    eax,eax
c002187d:	eb 05                	jmp    c0021884 <ISO9660::openDir(char const*, void**)+0xb0>
c002187f:	b8 04 00 00 00       	mov    eax,0x4
c0021884:	83 c4 10             	add    esp,0x10
c0021887:	5b                   	pop    ebx
c0021888:	5e                   	pop    esi
c0021889:	5f                   	pop    edi
c002188a:	c3                   	ret    
c002188b:	90                   	nop

c002188c <ISO9660::ISO9660()>:
c002188c:	83 ec 0c             	sub    esp,0xc
c002188f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021893:	83 ec 0c             	sub    esp,0xc
c0021896:	50                   	push   eax
c0021897:	e8 5a 13 ff ff       	call   c0012bf6 <Filesystem::Filesystem()>
c002189c:	83 c4 10             	add    esp,0x10
c002189f:	ba 78 bf 02 c0       	mov    edx,0xc002bf78
c00218a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a8:	89 10                	mov    DWORD PTR [eax],edx
c00218aa:	90                   	nop
c00218ab:	83 c4 0c             	add    esp,0xc
c00218ae:	c3                   	ret    
c00218af:	90                   	nop

c00218b0 <SoundChannel::~SoundChannel()>:
c00218b0:	83 ec 0c             	sub    esp,0xc
c00218b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00218ba:	83 ec 0c             	sub    esp,0xc
c00218bd:	50                   	push   eax
c00218be:	e8 6f dd fe ff       	call   c000f632 <free>
c00218c3:	83 c4 10             	add    esp,0x10
c00218c6:	90                   	nop
c00218c7:	83 c4 0c             	add    esp,0xc
c00218ca:	c3                   	ret    
c00218cb:	90                   	nop

c00218cc <SoundChannel::setSpeed(float)>:
c00218cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00218d4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00218d7:	c3                   	ret    

c00218d8 <SoundChannel::getSpeed()>:
c00218d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218dc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00218df:	c3                   	ret    

c00218e0 <SoundChannel::setVolume(int)>:
c00218e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218e4:	83 f8 64             	cmp    eax,0x64
c00218e7:	7e 05                	jle    c00218ee <SoundChannel::setVolume(int)+0xe>
c00218e9:	b8 64 00 00 00       	mov    eax,0x64
c00218ee:	85 c0                	test   eax,eax
c00218f0:	79 02                	jns    c00218f4 <SoundChannel::setVolume(int)+0x14>
c00218f2:	31 c0                	xor    eax,eax
c00218f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00218f8:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00218fb:	c3                   	ret    

c00218fc <SoundChannel::getVolume()>:
c00218fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021900:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021903:	c3                   	ret    

c0021904 <SoundChannel::pause()>:
c0021904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021908:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002190c:	c3                   	ret    
c002190d:	90                   	nop

c002190e <SoundChannel::SoundChannel(int, int, int, int)>:
c002190e:	83 ec 1c             	sub    esp,0x1c
c0021911:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021915:	e8 ea ff ff ff       	call   c0021904 <SoundChannel::pause()>
c002191a:	83 c4 04             	add    esp,0x4
c002191d:	6a 50                	push   0x50
c002191f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021923:	e8 b8 ff ff ff       	call   c00218e0 <SoundChannel::setVolume(int)>
c0021928:	83 c4 08             	add    esp,0x8
c002192b:	a1 f0 bf 02 c0       	mov    eax,ds:0xc002bff0
c0021930:	50                   	push   eax
c0021931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021935:	e8 92 ff ff ff       	call   c00218cc <SoundChannel::setSpeed(float)>
c002193a:	83 c4 08             	add    esp,0x8
c002193d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021941:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021945:	89 10                	mov    DWORD PTR [eax],edx
c0021947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002194b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002194f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021956:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002195a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002195d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021962:	75 23                	jne    c0021987 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021968:	8b 10                	mov    edx,DWORD PTR [eax]
c002196a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002196e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021971:	0f af c2             	imul   eax,edx
c0021974:	85 c0                	test   eax,eax
c0021976:	79 03                	jns    c002197b <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021978:	83 c0 03             	add    eax,0x3
c002197b:	c1 f8 02             	sar    eax,0x2
c002197e:	05 a0 0f 00 00       	add    eax,0xfa0
c0021983:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002198b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002198f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021996:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002199d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219a1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00219a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00219af:	c1 e0 02             	shl    eax,0x2
c00219b2:	83 ec 0c             	sub    esp,0xc
c00219b5:	50                   	push   eax
c00219b6:	e8 67 dc fe ff       	call   c000f622 <malloc>
c00219bb:	83 c4 10             	add    esp,0x10
c00219be:	89 c2                	mov    edx,eax
c00219c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00219c7:	83 ec 04             	sub    esp,0x4
c00219ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00219ce:	50                   	push   eax
c00219cf:	6a 01                	push   0x1
c00219d1:	6a 04                	push   0x4
c00219d3:	e8 ae 6f fe ff       	call   c0008986 <src_new>
c00219d8:	83 c4 10             	add    esp,0x10
c00219db:	89 c2                	mov    edx,eax
c00219dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00219e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219e8:	85 c0                	test   eax,eax
c00219ea:	74 10                	je     c00219fc <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00219ec:	83 ec 0c             	sub    esp,0xc
c00219ef:	68 d4 bf 02 c0       	push   0xc002bfd4
c00219f4:	e8 6c 84 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c00219f9:	83 c4 10             	add    esp,0x10
c00219fc:	a0 20 1e 03 c0       	mov    al,ds:0xc0031e20
c0021a01:	83 f0 01             	xor    eax,0x1
c0021a04:	84 c0                	test   al,al
c0021a06:	74 57                	je     c0021a5f <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021a08:	a1 f4 bf 02 c0       	mov    eax,ds:0xc002bff4
c0021a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a19:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021a21:	7f 35                	jg     c0021a58 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021a23:	83 ec 0c             	sub    esp,0xc
c0021a26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a2a:	e8 48 50 00 00       	call   c0026a77 <__floatsisf>
c0021a2f:	83 c4 10             	add    esp,0x10
c0021a32:	8b 15 f4 bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bff4
c0021a38:	83 ec 08             	sub    esp,0x8
c0021a3b:	52                   	push   edx
c0021a3c:	50                   	push   eax
c0021a3d:	e8 47 4c 00 00       	call   c0026689 <__mulsf3>
c0021a42:	83 c4 10             	add    esp,0x10
c0021a45:	89 c2                	mov    edx,eax
c0021a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a4b:	89 14 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],edx
c0021a52:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021a56:	eb c1                	jmp    c0021a19 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021a58:	c6 05 20 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e20,0x1
c0021a5f:	90                   	nop
c0021a60:	83 c4 1c             	add    esp,0x1c
c0021a63:	c3                   	ret    

c0021a64 <SoundChannel::play()>:
c0021a64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a68:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021a6c:	c3                   	ret    
c0021a6d:	90                   	nop

c0021a6e <SoundChannel::paused()>:
c0021a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a72:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021a75:	c3                   	ret    

c0021a76 <SoundChannel::getSampleRate()>:
c0021a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a7c:	c3                   	ret    
c0021a7d:	90                   	nop

c0021a7e <SoundChannel::getBits()>:
c0021a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a85:	c3                   	ret    

c0021a86 <SoundChannel::getBufferUsed()>:
c0021a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a8a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021a8d:	c3                   	ret    

c0021a8e <SoundChannel::getBufferSize()>:
c0021a8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a92:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021a95:	c3                   	ret    

c0021a96 <SoundChannel::unbuffer(float*, int, int)>:
c0021a96:	56                   	push   esi
c0021a97:	53                   	push   ebx
c0021a98:	83 ec 40             	sub    esp,0x40
c0021a9b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021a9f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021aa2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021aa6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021aa9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021aad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021ab1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021ab5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021ab9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021abd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021ac1:	e8 b1 4f 00 00       	call   c0026a77 <__floatsisf>
c0021ac6:	5a                   	pop    edx
c0021ac7:	89 c6                	mov    esi,eax
c0021ac9:	ff 33                	push   DWORD PTR [ebx]
c0021acb:	e8 a7 4f 00 00       	call   c0026a77 <__floatsisf>
c0021ad0:	59                   	pop    ecx
c0021ad1:	5a                   	pop    edx
c0021ad2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021ad5:	50                   	push   eax
c0021ad6:	e8 ae 4b 00 00       	call   c0026689 <__mulsf3>
c0021adb:	59                   	pop    ecx
c0021adc:	5a                   	pop    edx
c0021add:	50                   	push   eax
c0021ade:	56                   	push   esi
c0021adf:	e8 68 4d 00 00       	call   c002684c <__divsf3>
c0021ae4:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ae7:	e8 5b 62 00 00       	call   c0027d47 <__extendsfdf2>
c0021aec:	59                   	pop    ecx
c0021aed:	5e                   	pop    esi
c0021aee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021af2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021af6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021afe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b02:	50                   	push   eax
c0021b03:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021b06:	e8 70 6a fe ff       	call   c000857b <src_process>
c0021b0b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b0f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021b12:	83 c4 0c             	add    esp,0xc
c0021b15:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021b18:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021b1b:	29 d0                	sub    eax,edx
c0021b1d:	c1 e0 02             	shl    eax,0x2
c0021b20:	50                   	push   eax
c0021b21:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021b24:	50                   	push   eax
c0021b25:	51                   	push   ecx
c0021b26:	e8 3d eb fd ff       	call   c0000668 <memmove>
c0021b2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b2f:	83 c4 44             	add    esp,0x44
c0021b32:	5b                   	pop    ebx
c0021b33:	5e                   	pop    esi
c0021b34:	c3                   	ret    
c0021b35:	90                   	nop

c0021b36 <SoundChannel::buffer8(unsigned char*, int)>:
c0021b36:	55                   	push   ebp
c0021b37:	57                   	push   edi
c0021b38:	56                   	push   esi
c0021b39:	53                   	push   ebx
c0021b3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b3e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021b42:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021b45:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021b49:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021b4c:	74 7a                	je     c0021bc8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021b4e:	85 ff                	test   edi,edi
c0021b50:	7e 76                	jle    c0021bc8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021b52:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021b56:	8d 70 01             	lea    esi,[eax+0x1]
c0021b59:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021b5c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021b5f:	8b 1c 9d 20 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce5e0]
c0021b66:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021b69:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021b6c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021b6f:	74 5e                	je     c0021bcf <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021b71:	83 ff 01             	cmp    edi,0x1
c0021b74:	74 4b                	je     c0021bc1 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021b76:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021b7a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021b7d:	8d 70 01             	lea    esi,[eax+0x1]
c0021b80:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021b83:	8b 1c 9d 20 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce5e0]
c0021b8a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021b8d:	b8 02 00 00 00       	mov    eax,0x2
c0021b92:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021b95:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021b98:	75 23                	jne    c0021bbd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021b9a:	eb 27                	jmp    c0021bc3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021b9c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ba1:	8d 71 01             	lea    esi,[ecx+0x1]
c0021ba4:	40                   	inc    eax
c0021ba5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ba8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021bab:	8b 1c 9d 20 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce5e0]
c0021bb2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021bb5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021bb8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021bbb:	74 06                	je     c0021bc3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021bbd:	39 c7                	cmp    edi,eax
c0021bbf:	75 db                	jne    c0021b9c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021bc1:	89 f8                	mov    eax,edi
c0021bc3:	5b                   	pop    ebx
c0021bc4:	5e                   	pop    esi
c0021bc5:	5f                   	pop    edi
c0021bc6:	5d                   	pop    ebp
c0021bc7:	c3                   	ret    
c0021bc8:	5b                   	pop    ebx
c0021bc9:	31 c0                	xor    eax,eax
c0021bcb:	5e                   	pop    esi
c0021bcc:	5f                   	pop    edi
c0021bcd:	5d                   	pop    ebp
c0021bce:	c3                   	ret    
c0021bcf:	b8 01 00 00 00       	mov    eax,0x1
c0021bd4:	eb ed                	jmp    c0021bc3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021bd6 <SoundDevice::SoundDevice(char const*)>:
c0021bd6:	83 ec 1c             	sub    esp,0x1c
c0021bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bdd:	83 ec 08             	sub    esp,0x8
c0021be0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021be4:	50                   	push   eax
c0021be5:	e8 1e 23 ff ff       	call   c0013f08 <Device::Device(char const*)>
c0021bea:	83 c4 10             	add    esp,0x10
c0021bed:	ba 00 c0 02 c0       	mov    edx,0xc002c000
c0021bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf6:	89 10                	mov    DWORD PTR [eax],edx
c0021bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bfc:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c0a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021c14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c1c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021c21:	7f 19                	jg     c0021c3c <SoundDevice::SoundDevice(char const*)+0x66>
c0021c23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c2b:	83 c2 54             	add    edx,0x54
c0021c2e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021c36:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c3a:	eb e0                	jmp    c0021c1c <SoundDevice::SoundDevice(char const*)+0x46>
c0021c3c:	90                   	nop
c0021c3d:	83 c4 1c             	add    esp,0x1c
c0021c40:	c3                   	ret    
c0021c41:	90                   	nop

c0021c42 <SoundDevice::~SoundDevice()>:
c0021c42:	53                   	push   ebx
c0021c43:	83 ec 18             	sub    esp,0x18
c0021c46:	ba 00 c0 02 c0       	mov    edx,0xc002c000
c0021c4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c4f:	89 10                	mov    DWORD PTR [eax],edx
c0021c51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c59:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021c5e:	7f 46                	jg     c0021ca6 <SoundDevice::~SoundDevice()+0x64>
c0021c60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c68:	83 c2 54             	add    edx,0x54
c0021c6b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021c6f:	85 c0                	test   eax,eax
c0021c71:	74 2d                	je     c0021ca0 <SoundDevice::~SoundDevice()+0x5e>
c0021c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c7b:	83 c2 54             	add    edx,0x54
c0021c7e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021c82:	85 db                	test   ebx,ebx
c0021c84:	74 1a                	je     c0021ca0 <SoundDevice::~SoundDevice()+0x5e>
c0021c86:	83 ec 0c             	sub    esp,0xc
c0021c89:	53                   	push   ebx
c0021c8a:	e8 21 fc ff ff       	call   c00218b0 <SoundChannel::~SoundChannel()>
c0021c8f:	83 c4 10             	add    esp,0x10
c0021c92:	83 ec 08             	sub    esp,0x8
c0021c95:	6a 2c                	push   0x2c
c0021c97:	53                   	push   ebx
c0021c98:	e8 74 0b ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0021c9d:	83 c4 10             	add    esp,0x10
c0021ca0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ca4:	eb b3                	jmp    c0021c59 <SoundDevice::~SoundDevice()+0x17>
c0021ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021caa:	83 ec 0c             	sub    esp,0xc
c0021cad:	50                   	push   eax
c0021cae:	e8 37 1f ff ff       	call   c0013bea <Device::~Device()>
c0021cb3:	83 c4 10             	add    esp,0x10
c0021cb6:	90                   	nop
c0021cb7:	83 c4 18             	add    esp,0x18
c0021cba:	5b                   	pop    ebx
c0021cbb:	c3                   	ret    

c0021cbc <SoundDevice::~SoundDevice()>:
c0021cbc:	83 ec 0c             	sub    esp,0xc
c0021cbf:	83 ec 0c             	sub    esp,0xc
c0021cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cc6:	e8 77 ff ff ff       	call   c0021c42 <SoundDevice::~SoundDevice()>
c0021ccb:	83 c4 10             	add    esp,0x10
c0021cce:	83 ec 08             	sub    esp,0x8
c0021cd1:	68 e4 01 00 00       	push   0x1e4
c0021cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cda:	e8 32 0b ff ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0021cdf:	83 c4 10             	add    esp,0x10
c0021ce2:	83 c4 0c             	add    esp,0xc
c0021ce5:	c3                   	ret    

c0021ce6 <SoundDevice::getFreeChannelNum()>:
c0021ce6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021cea:	31 c0                	xor    eax,eax
c0021cec:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021cf4:	74 09                	je     c0021cff <SoundDevice::getFreeChannelNum()+0x19>
c0021cf6:	40                   	inc    eax
c0021cf7:	83 f8 20             	cmp    eax,0x20
c0021cfa:	75 f0                	jne    c0021cec <SoundDevice::getFreeChannelNum()+0x6>
c0021cfc:	83 c8 ff             	or     eax,0xffffffff
c0021cff:	c3                   	ret    

c0021d00 <SoundDevice::addChannel(SoundChannel*)>:
c0021d00:	56                   	push   esi
c0021d01:	53                   	push   ebx
c0021d02:	51                   	push   ecx
c0021d03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021d0b:	53                   	push   ebx
c0021d0c:	e8 d5 ff ff ff       	call   c0021ce6 <SoundDevice::getFreeChannelNum()>
c0021d11:	5a                   	pop    edx
c0021d12:	83 f8 ff             	cmp    eax,0xffffffff
c0021d15:	74 51                	je     c0021d68 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021d17:	85 f6                	test   esi,esi
c0021d19:	74 4d                	je     c0021d68 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021d1b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021d22:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021d29:	75 30                	jne    c0021d5b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021d2b:	83 ec 0c             	sub    esp,0xc
c0021d2e:	56                   	push   esi
c0021d2f:	e8 42 fd ff ff       	call   c0021a76 <SoundChannel::getSampleRate()>
c0021d34:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021d3a:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d3d:	e8 3c fd ff ff       	call   c0021a7e <SoundChannel::getBits()>
c0021d42:	83 c4 0c             	add    esp,0xc
c0021d45:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021d4b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021d4d:	50                   	push   eax
c0021d4e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021d54:	53                   	push   ebx
c0021d55:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021d58:	83 c4 10             	add    esp,0x10
c0021d5b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021d61:	b8 01 00 00 00       	mov    eax,0x1
c0021d66:	eb 03                	jmp    c0021d6b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021d68:	83 c8 ff             	or     eax,0xffffffff
c0021d6b:	5a                   	pop    edx
c0021d6c:	5b                   	pop    ebx
c0021d6d:	5e                   	pop    esi
c0021d6e:	c3                   	ret    
c0021d6f:	90                   	nop

c0021d70 <SoundDevice::removeChannel(int)>:
c0021d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d78:	83 fa 1f             	cmp    edx,0x1f
c0021d7b:	77 23                	ja     c0021da0 <SoundDevice::removeChannel(int)+0x30>
c0021d7d:	8d 14 90             	lea    edx,[eax+edx*4]
c0021d80:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021d87:	74 17                	je     c0021da0 <SoundDevice::removeChannel(int)+0x30>
c0021d89:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021d93:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021d99:	75 05                	jne    c0021da0 <SoundDevice::removeChannel(int)+0x30>
c0021d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d9d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021da0:	c3                   	ret    
c0021da1:	90                   	nop

c0021da2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021da2:	57                   	push   edi
c0021da3:	56                   	push   esi
c0021da4:	53                   	push   ebx
c0021da5:	31 db                	xor    ebx,ebx
c0021da7:	83 ec 10             	sub    esp,0x10
c0021daa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021dae:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021db2:	0f 8d cb 00 00 00    	jge    c0021e83 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021db8:	83 ec 0c             	sub    esp,0xc
c0021dbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021dbf:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021dc2:	e8 80 5f 00 00       	call   c0027d47 <__extendsfdf2>
c0021dc7:	83 c4 10             	add    esp,0x10
c0021dca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021dce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021dd2:	68 00 00 f0 3f       	push   0x3ff00000
c0021dd7:	6a 00                	push   0x0
c0021dd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021de1:	e8 ed 4e 00 00       	call   c0026cd3 <__adddf3>
c0021de6:	83 c4 10             	add    esp,0x10
c0021de9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ded:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021df1:	68 00 00 e0 3f       	push   0x3fe00000
c0021df6:	6a 00                	push   0x0
c0021df8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dfc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e00:	e8 4b 55 00 00       	call   c0027350 <__muldf3>
c0021e05:	83 c4 10             	add    esp,0x10
c0021e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021e10:	68 00 00 60 40       	push   0x40600000
c0021e15:	6a 00                	push   0x0
c0021e17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e1f:	e8 2c 55 00 00       	call   c0027350 <__muldf3>
c0021e24:	59                   	pop    ecx
c0021e25:	5f                   	pop    edi
c0021e26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021e2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021e2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e36:	e8 e8 5d 00 00       	call   c0027c23 <__truncdfsf2>
c0021e3b:	5a                   	pop    edx
c0021e3c:	89 c7                	mov    edi,eax
c0021e3e:	59                   	pop    ecx
c0021e3f:	68 00 00 fe 42       	push   0x42fe0000
c0021e44:	50                   	push   eax
c0021e45:	e8 83 4e 00 00       	call   c0026ccd <__gesf2>
c0021e4a:	83 c4 10             	add    esp,0x10
c0021e4d:	85 c0                	test   eax,eax
c0021e4f:	78 06                	js     c0021e57 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021e51:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021e55:	eb 26                	jmp    c0021e7d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021e57:	50                   	push   eax
c0021e58:	50                   	push   eax
c0021e59:	6a 00                	push   0x0
c0021e5b:	57                   	push   edi
c0021e5c:	e8 70 4e 00 00       	call   c0026cd1 <__lesf2>
c0021e61:	83 c4 10             	add    esp,0x10
c0021e64:	85 c0                	test   eax,eax
c0021e66:	7f 06                	jg     c0021e6e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021e68:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021e6c:	eb 0f                	jmp    c0021e7d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021e6e:	83 ec 0c             	sub    esp,0xc
c0021e71:	57                   	push   edi
c0021e72:	e8 65 5f 00 00       	call   c0027ddc <lrintf>
c0021e77:	83 c4 10             	add    esp,0x10
c0021e7a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021e7d:	43                   	inc    ebx
c0021e7e:	e9 2b ff ff ff       	jmp    c0021dae <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021e83:	83 c4 10             	add    esp,0x10
c0021e86:	5b                   	pop    ebx
c0021e87:	5e                   	pop    esi
c0021e88:	5f                   	pop    edi
c0021e89:	c3                   	ret    

c0021e8a <SoundDevice::getAudio(int, float*, float*)>:
c0021e8a:	55                   	push   ebp
c0021e8b:	57                   	push   edi
c0021e8c:	56                   	push   esi
c0021e8d:	53                   	push   ebx
c0021e8e:	31 db                	xor    ebx,ebx
c0021e90:	83 ec 20             	sub    esp,0x20
c0021e93:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021e97:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021e9b:	c1 e0 02             	shl    eax,0x2
c0021e9e:	50                   	push   eax
c0021e9f:	6a 00                	push   0x0
c0021ea1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021ea5:	e8 18 e8 fd ff       	call   c00006c2 <memset>
c0021eaa:	83 c4 10             	add    esp,0x10
c0021ead:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021eb1:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021eb8:	85 c0                	test   eax,eax
c0021eba:	0f 84 d7 00 00 00    	je     c0021f97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021ec0:	83 ec 0c             	sub    esp,0xc
c0021ec3:	50                   	push   eax
c0021ec4:	e8 a5 fb ff ff       	call   c0021a6e <SoundChannel::paused()>
c0021ec9:	83 c4 10             	add    esp,0x10
c0021ecc:	84 c0                	test   al,al
c0021ece:	0f 85 c3 00 00 00    	jne    c0021f97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021ed4:	83 ec 0c             	sub    esp,0xc
c0021ed7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021ede:	e8 19 fa ff ff       	call   c00218fc <SoundChannel::getVolume()>
c0021ee3:	83 c4 10             	add    esp,0x10
c0021ee6:	85 c0                	test   eax,eax
c0021ee8:	0f 84 a9 00 00 00    	je     c0021f97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021eee:	83 ec 0c             	sub    esp,0xc
c0021ef1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021ef8:	e8 ff f9 ff ff       	call   c00218fc <SoundChannel::getVolume()>
c0021efd:	83 ec 0c             	sub    esp,0xc
c0021f00:	50                   	push   eax
c0021f01:	e8 71 4b 00 00       	call   c0026a77 <__floatsisf>
c0021f06:	59                   	pop    ecx
c0021f07:	5d                   	pop    ebp
c0021f08:	31 ed                	xor    ebp,ebp
c0021f0a:	68 00 00 c8 42       	push   0x42c80000
c0021f0f:	50                   	push   eax
c0021f10:	e8 37 49 00 00       	call   c002684c <__divsf3>
c0021f15:	83 c4 10             	add    esp,0x10
c0021f18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021f20:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021f26:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021f2a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021f31:	e8 60 fb ff ff       	call   c0021a96 <SoundChannel::unbuffer(float*, int, int)>
c0021f36:	83 c4 20             	add    esp,0x20
c0021f39:	89 c1                	mov    ecx,eax
c0021f3b:	39 cd                	cmp    ebp,ecx
c0021f3d:	7d 52                	jge    c0021f91 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021f3f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021f43:	50                   	push   eax
c0021f44:	50                   	push   eax
c0021f45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021f49:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021f4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021f50:	e8 34 47 00 00       	call   c0026689 <__mulsf3>
c0021f55:	5a                   	pop    edx
c0021f56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021f5a:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021f60:	e8 12 4b 00 00       	call   c0026a77 <__floatsisf>
c0021f65:	59                   	pop    ecx
c0021f66:	5a                   	pop    edx
c0021f67:	50                   	push   eax
c0021f68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f6c:	e8 db 48 00 00       	call   c002684c <__divsf3>
c0021f71:	59                   	pop    ecx
c0021f72:	5a                   	pop    edx
c0021f73:	50                   	push   eax
c0021f74:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021f78:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021f7b:	e8 e6 43 00 00       	call   c0026366 <__addsf3>
c0021f80:	83 c4 10             	add    esp,0x10
c0021f83:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021f87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021f8b:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021f8e:	45                   	inc    ebp
c0021f8f:	eb aa                	jmp    c0021f3b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021f91:	39 cf                	cmp    edi,ecx
c0021f93:	7e 02                	jle    c0021f97 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021f95:	89 cf                	mov    edi,ecx
c0021f97:	43                   	inc    ebx
c0021f98:	83 fb 20             	cmp    ebx,0x20
c0021f9b:	0f 85 10 ff ff ff    	jne    c0021eb1 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021fa1:	83 c4 1c             	add    esp,0x1c
c0021fa4:	89 f8                	mov    eax,edi
c0021fa6:	5b                   	pop    ebx
c0021fa7:	5e                   	pop    esi
c0021fa8:	5f                   	pop    edi
c0021fa9:	5d                   	pop    ebp
c0021faa:	c3                   	ret    
c0021fab:	90                   	nop

c0021fac <PCI::open(int, int, void*)>:
c0021fac:	83 ec 18             	sub    esp,0x18
c0021faf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0021fb5:	50                   	push   eax
c0021fb6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021fb9:	31 c0                	xor    eax,eax
c0021fbb:	83 c4 1c             	add    esp,0x1c
c0021fbe:	c3                   	ret    
c0021fbf:	90                   	nop

c0021fc0 <PCI::close(int, int, void*)>:
c0021fc0:	31 c0                	xor    eax,eax
c0021fc2:	c3                   	ret    
c0021fc3:	90                   	nop

c0021fc4 <PCI::PCI()>:
c0021fc4:	83 ec 0c             	sub    esp,0xc
c0021fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fcb:	83 ec 08             	sub    esp,0x8
c0021fce:	68 30 c0 02 c0       	push   0xc002c030
c0021fd3:	50                   	push   eax
c0021fd4:	e8 b3 15 ff ff       	call   c001358c <Bus::Bus(char const*)>
c0021fd9:	83 c4 10             	add    esp,0x10
c0021fdc:	ba 9c c0 02 c0       	mov    edx,0xc002c09c
c0021fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe5:	89 10                	mov    DWORD PTR [eax],edx
c0021fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021feb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ff1:	0f b6 d0             	movzx  edx,al
c0021ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff8:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022003:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022009:	0f b6 d0             	movzx  edx,al
c002200c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022010:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022019:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002201f:	8d 50 01             	lea    edx,[eax+0x1]
c0022022:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022026:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002202c:	0f b6 d0             	movzx  edx,al
c002202f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022033:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022037:	83 c9 c0             	or     ecx,0xffffffc0
c002203a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002203e:	90                   	nop
c002203f:	83 c4 0c             	add    esp,0xc
c0022042:	c3                   	ret    
c0022043:	90                   	nop

c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022044:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022048:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002204d:	89 ca                	mov    edx,ecx
c002204f:	c1 e0 10             	shl    eax,0x10
c0022052:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022058:	09 d0                	or     eax,edx
c002205a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002205f:	c1 e2 08             	shl    edx,0x8
c0022062:	09 d0                	or     eax,edx
c0022064:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022069:	c1 e2 0b             	shl    edx,0xb
c002206c:	09 d0                	or     eax,edx
c002206e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022073:	0d 00 00 00 80       	or     eax,0x80000000
c0022078:	ef                   	out    dx,eax
c0022079:	ba fc 0c 00 00       	mov    edx,0xcfc
c002207e:	ed                   	in     eax,dx
c002207f:	83 e1 02             	and    ecx,0x2
c0022082:	0f b6 c9             	movzx  ecx,cl
c0022085:	c1 e1 03             	shl    ecx,0x3
c0022088:	d3 e8                	shr    eax,cl
c002208a:	c3                   	ret    
c002208b:	90                   	nop

c002208c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002208c:	6a 00                	push   0x0
c002208e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022093:	50                   	push   eax
c0022094:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022099:	50                   	push   eax
c002209a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002209f:	50                   	push   eax
c00220a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220a4:	e8 9b ff ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220a9:	83 c4 14             	add    esp,0x14
c00220ac:	c3                   	ret    
c00220ad:	90                   	nop

c00220ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00220ae:	6a 0e                	push   0xe
c00220b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220b5:	50                   	push   eax
c00220b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220bb:	50                   	push   eax
c00220bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00220c1:	50                   	push   eax
c00220c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220c6:	e8 79 ff ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220cb:	83 c4 14             	add    esp,0x14
c00220ce:	0f b6 c0             	movzx  eax,al
c00220d1:	c3                   	ret    

c00220d2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00220d2:	55                   	push   ebp
c00220d3:	57                   	push   edi
c00220d4:	56                   	push   esi
c00220d5:	53                   	push   ebx
c00220d6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00220db:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00220e0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00220e5:	6a 0a                	push   0xa
c00220e7:	56                   	push   esi
c00220e8:	55                   	push   ebp
c00220e9:	57                   	push   edi
c00220ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00220ee:	e8 51 ff ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220f3:	6a 0a                	push   0xa
c00220f5:	89 c3                	mov    ebx,eax
c00220f7:	56                   	push   esi
c00220f8:	0f b6 db             	movzx  ebx,bl
c00220fb:	55                   	push   ebp
c00220fc:	57                   	push   edi
c00220fd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022101:	e8 3e ff ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022106:	83 c4 28             	add    esp,0x28
c0022109:	25 00 ff 00 00       	and    eax,0xff00
c002210e:	09 d8                	or     eax,ebx
c0022110:	5b                   	pop    ebx
c0022111:	5e                   	pop    esi
c0022112:	5f                   	pop    edi
c0022113:	5d                   	pop    ebp
c0022114:	c3                   	ret    
c0022115:	90                   	nop

c0022116 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022116:	6a 08                	push   0x8
c0022118:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002211d:	50                   	push   eax
c002211e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022123:	50                   	push   eax
c0022124:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022129:	50                   	push   eax
c002212a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002212e:	e8 11 ff ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022133:	83 c4 14             	add    esp,0x14
c0022136:	0f b6 c4             	movzx  eax,ah
c0022139:	c3                   	ret    

c002213a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002213a:	6a 08                	push   0x8
c002213c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022141:	50                   	push   eax
c0022142:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022147:	50                   	push   eax
c0022148:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002214d:	50                   	push   eax
c002214e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022152:	e8 ed fe ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022157:	83 c4 14             	add    esp,0x14
c002215a:	c3                   	ret    
c002215b:	90                   	nop

c002215c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002215c:	6a 3c                	push   0x3c
c002215e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022163:	50                   	push   eax
c0022164:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022169:	50                   	push   eax
c002216a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002216f:	50                   	push   eax
c0022170:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022174:	e8 cb fe ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022179:	83 c4 14             	add    esp,0x14
c002217c:	c3                   	ret    
c002217d:	90                   	nop

c002217e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002217e:	6a 18                	push   0x18
c0022180:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022185:	50                   	push   eax
c0022186:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002218b:	50                   	push   eax
c002218c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022191:	50                   	push   eax
c0022192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022196:	e8 a9 fe ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002219b:	83 c4 14             	add    esp,0x14
c002219e:	0f b6 c4             	movzx  eax,ah
c00221a1:	c3                   	ret    

c00221a2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00221a2:	55                   	push   ebp
c00221a3:	57                   	push   edi
c00221a4:	56                   	push   esi
c00221a5:	53                   	push   ebx
c00221a6:	50                   	push   eax
c00221a7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00221ab:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00221b0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00221b5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00221ba:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00221c1:	8d 43 12             	lea    eax,[ebx+0x12]
c00221c4:	83 c3 10             	add    ebx,0x10
c00221c7:	0f b6 c0             	movzx  eax,al
c00221ca:	0f b6 db             	movzx  ebx,bl
c00221cd:	50                   	push   eax
c00221ce:	51                   	push   ecx
c00221cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00221d3:	57                   	push   edi
c00221d4:	55                   	push   ebp
c00221d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00221d9:	e8 66 fe ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221de:	53                   	push   ebx
c00221df:	89 c6                	mov    esi,eax
c00221e1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00221e5:	c1 e6 10             	shl    esi,0x10
c00221e8:	51                   	push   ecx
c00221e9:	57                   	push   edi
c00221ea:	55                   	push   ebp
c00221eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00221ef:	e8 50 fe ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221f4:	83 c4 2c             	add    esp,0x2c
c00221f7:	0f b7 c0             	movzx  eax,ax
c00221fa:	5b                   	pop    ebx
c00221fb:	09 f0                	or     eax,esi
c00221fd:	5e                   	pop    esi
c00221fe:	5f                   	pop    edi
c00221ff:	5d                   	pop    ebp
c0022200:	c3                   	ret    
c0022201:	90                   	nop

c0022202 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022202:	53                   	push   ebx
c0022203:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022208:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002220d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022211:	c1 e1 10             	shl    ecx,0x10
c0022214:	25 fc 00 00 00       	and    eax,0xfc
c0022219:	09 c1                	or     ecx,eax
c002221b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022220:	c1 e0 08             	shl    eax,0x8
c0022223:	09 c1                	or     ecx,eax
c0022225:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002222a:	c1 e0 0b             	shl    eax,0xb
c002222d:	09 c1                	or     ecx,eax
c002222f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022235:	89 c8                	mov    eax,ecx
c0022237:	ef                   	out    dx,eax
c0022238:	ba fc 0c 00 00       	mov    edx,0xcfc
c002223d:	ed                   	in     eax,dx
c002223e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022243:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022248:	74 0a                	je     c0022254 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002224a:	0f b7 d8             	movzx  ebx,ax
c002224d:	89 d0                	mov    eax,edx
c002224f:	c1 e0 10             	shl    eax,0x10
c0022252:	eb 05                	jmp    c0022259 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022254:	66 31 c0             	xor    ax,ax
c0022257:	89 d3                	mov    ebx,edx
c0022259:	09 c3                	or     ebx,eax
c002225b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022260:	89 c8                	mov    eax,ecx
c0022262:	ef                   	out    dx,eax
c0022263:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022268:	89 d8                	mov    eax,ebx
c002226a:	ef                   	out    dx,eax
c002226b:	5b                   	pop    ebx
c002226c:	c3                   	ret    
c002226d:	90                   	nop

c002226e <PCI::checkBus(unsigned char)>:
c002226e:	56                   	push   esi
c002226f:	53                   	push   ebx
c0022270:	31 db                	xor    ebx,ebx
c0022272:	51                   	push   ecx
c0022273:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022278:	52                   	push   edx
c0022279:	53                   	push   ebx
c002227a:	43                   	inc    ebx
c002227b:	56                   	push   esi
c002227c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022280:	e8 2b 03 00 00       	call   c00225b0 <PCI::checkDevice(unsigned char, unsigned char)>
c0022285:	83 c4 10             	add    esp,0x10
c0022288:	83 fb 20             	cmp    ebx,0x20
c002228b:	75 eb                	jne    c0022278 <PCI::checkBus(unsigned char)+0xa>
c002228d:	58                   	pop    eax
c002228e:	5b                   	pop    ebx
c002228f:	5e                   	pop    esi
c0022290:	c3                   	ret    
c0022291:	90                   	nop

c0022292 <PCI::foundDevice(PCIDeviceInfo)>:
c0022292:	55                   	push   ebp
c0022293:	57                   	push   edi
c0022294:	56                   	push   esi
c0022295:	53                   	push   ebx
c0022296:	83 ec 1c             	sub    esp,0x1c
c0022299:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002229d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00222a3:	0f 84 52 01 00 00    	je     c00223fb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00222a9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00222ad:	66 81 f9 06 04       	cmp    cx,0x406
c00222b2:	75 2c                	jne    c00222e0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00222b4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00222b9:	50                   	push   eax
c00222ba:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00222bf:	50                   	push   eax
c00222c0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00222c5:	50                   	push   eax
c00222c6:	56                   	push   esi
c00222c7:	e8 b2 fe ff ff       	call   c002217e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00222cc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00222d0:	0f b6 c0             	movzx  eax,al
c00222d3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00222d7:	83 c4 2c             	add    esp,0x2c
c00222da:	5b                   	pop    ebx
c00222db:	5e                   	pop    esi
c00222dc:	5f                   	pop    edi
c00222dd:	5d                   	pop    ebp
c00222de:	eb 8e                	jmp    c002226e <PCI::checkBus(unsigned char)>
c00222e0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00222e4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00222ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222ee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00222f2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00222f6:	88 d3                	mov    bl,dl
c00222f8:	85 c0                	test   eax,eax
c00222fa:	74 33                	je     c002232f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00222fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00222ff:	85 d2                	test   edx,edx
c0022301:	74 28                	je     c002232b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022303:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022309:	31 ef                	xor    edi,ebp
c002230b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022311:	75 18                	jne    c002232b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022313:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022317:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002231d:	75 0c                	jne    c002232b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002231f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022325:	0f 84 d0 00 00 00    	je     c00223fb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002232b:	8b 00                	mov    eax,DWORD PTR [eax]
c002232d:	eb c9                	jmp    c00222f8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002232f:	66 81 f9 01 06       	cmp    cx,0x601
c0022334:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022338:	75 19                	jne    c0022353 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002233a:	83 ec 0c             	sub    esp,0xc
c002233d:	68 64 01 00 00       	push   0x164
c0022342:	e8 db d2 fe ff       	call   c000f622 <malloc>
c0022347:	89 c5                	mov    ebp,eax
c0022349:	89 04 24             	mov    DWORD PTR [esp],eax
c002234c:	e8 95 0f 00 00       	call   c00232e6 <SATABus::SATABus()>
c0022351:	eb 1e                	jmp    c0022371 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022353:	66 81 f9 01 01       	cmp    cx,0x101
c0022358:	75 60                	jne    c00223ba <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002235a:	83 ec 0c             	sub    esp,0xc
c002235d:	68 70 02 00 00       	push   0x270
c0022362:	e8 bb d2 fe ff       	call   c000f622 <malloc>
c0022367:	89 c5                	mov    ebp,eax
c0022369:	89 04 24             	mov    DWORD PTR [esp],eax
c002236c:	e8 03 03 00 00       	call   c0022674 <IDE::IDE()>
c0022371:	58                   	pop    eax
c0022372:	5a                   	pop    edx
c0022373:	55                   	push   ebp
c0022374:	56                   	push   esi
c0022375:	e8 9e 19 ff ff       	call   c0013d18 <Device::addChild(Device*)>
c002237a:	83 ec 1c             	sub    esp,0x1c
c002237d:	b9 09 00 00 00       	mov    ecx,0x9
c0022382:	fc                   	cld    
c0022383:	89 e7                	mov    edi,esp
c0022385:	89 de                	mov    esi,ebx
c0022387:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022389:	55                   	push   ebp
c002238a:	e8 93 18 ff ff       	call   c0013c22 <Device::preOpenPCI(PCIDeviceInfo)>
c002238f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022392:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022396:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002239e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00223a6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00223ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00223b1:	83 c4 4c             	add    esp,0x4c
c00223b4:	5b                   	pop    ebx
c00223b5:	5e                   	pop    esi
c00223b6:	5f                   	pop    edi
c00223b7:	5d                   	pop    ebp
c00223b8:	ff e0                	jmp    eax
c00223ba:	83 ec 0c             	sub    esp,0xc
c00223bd:	68 58 01 00 00       	push   0x158
c00223c2:	e8 5b d2 fe ff       	call   c000f622 <malloc>
c00223c7:	89 c5                	mov    ebp,eax
c00223c9:	58                   	pop    eax
c00223ca:	5a                   	pop    edx
c00223cb:	68 38 c0 02 c0       	push   0xc002c038
c00223d0:	55                   	push   ebp
c00223d1:	e8 38 1c ff ff       	call   c001400e <DriverlessDevice::DriverlessDevice(char const*)>
c00223d6:	59                   	pop    ecx
c00223d7:	5f                   	pop    edi
c00223d8:	55                   	push   ebp
c00223d9:	56                   	push   esi
c00223da:	e8 39 19 ff ff       	call   c0013d18 <Device::addChild(Device*)>
c00223df:	b9 09 00 00 00       	mov    ecx,0x9
c00223e4:	fc                   	cld    
c00223e5:	89 df                	mov    edi,ebx
c00223e7:	89 de                	mov    esi,ebx
c00223e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00223eb:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00223ef:	83 c4 2c             	add    esp,0x2c
c00223f2:	5b                   	pop    ebx
c00223f3:	5e                   	pop    esi
c00223f4:	5f                   	pop    edi
c00223f5:	5d                   	pop    ebp
c00223f6:	e9 27 18 ff ff       	jmp    c0013c22 <Device::preOpenPCI(PCIDeviceInfo)>
c00223fb:	83 c4 1c             	add    esp,0x1c
c00223fe:	5b                   	pop    ebx
c00223ff:	5e                   	pop    esi
c0022400:	5f                   	pop    edi
c0022401:	5d                   	pop    ebp
c0022402:	c3                   	ret    
c0022403:	90                   	nop

c0022404 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022404:	55                   	push   ebp
c0022405:	57                   	push   edi
c0022406:	56                   	push   esi
c0022407:	53                   	push   ebx
c0022408:	83 ec 5c             	sub    esp,0x5c
c002240b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002240f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022413:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022417:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002241c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022420:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022424:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022429:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002242d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022432:	6a 0c                	push   0xc
c0022434:	55                   	push   ebp
c0022435:	53                   	push   ebx
c0022436:	57                   	push   edi
c0022437:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002243e:	e8 01 fc ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022443:	55                   	push   ebp
c0022444:	53                   	push   ebx
c0022445:	57                   	push   edi
c0022446:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002244d:	e8 80 fc ff ff       	call   c00220d2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022452:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022457:	83 c4 24             	add    esp,0x24
c002245a:	55                   	push   ebp
c002245b:	53                   	push   ebx
c002245c:	57                   	push   edi
c002245d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022461:	e8 f6 fc ff ff       	call   c002215c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022466:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002246a:	6a 3c                	push   0x3c
c002246c:	55                   	push   ebp
c002246d:	53                   	push   ebx
c002246e:	57                   	push   edi
c002246f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022476:	e8 c9 fb ff ff       	call   c0022044 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002247b:	0f b6 c4             	movzx  eax,ah
c002247e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022482:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022486:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002248a:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c002248f:	83 c4 24             	add    esp,0x24
c0022492:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022498:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c002249f:	74 6c                	je     c002250d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00224a1:	31 f6                	xor    esi,esi
c00224a3:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c00224a9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00224af:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00224b5:	7e 56                	jle    c002250d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00224b7:	8d 14 f2             	lea    edx,[edx+esi*8]
c00224ba:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00224c1:	39 cb                	cmp    ebx,ecx
c00224c3:	75 45                	jne    c002250a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00224c5:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00224cc:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00224d0:	75 38                	jne    c002250a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00224d2:	83 ec 0c             	sub    esp,0xc
c00224d5:	68 52 c0 02 c0       	push   0xc002c052
c00224da:	e8 12 04 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00224df:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c00224e5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00224eb:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00224f3:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00224f7:	52                   	push   edx
c00224f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00224fc:	53                   	push   ebx
c00224fd:	68 77 c0 02 c0       	push   0xc002c077
c0022502:	e8 ea 03 ff ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0022507:	83 c4 20             	add    esp,0x20
c002250a:	46                   	inc    esi
c002250b:	eb 96                	jmp    c00224a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002250d:	31 d2                	xor    edx,edx
c002250f:	83 ec 0c             	sub    esp,0xc
c0022512:	55                   	push   ebp
c0022513:	53                   	push   ebx
c0022514:	57                   	push   edi
c0022515:	52                   	push   edx
c0022516:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002251a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022521:	e8 7c fc ff ff       	call   c00221a2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022526:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002252a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002252e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022532:	42                   	inc    edx
c0022533:	83 c4 20             	add    esp,0x20
c0022536:	83 fa 06             	cmp    edx,0x6
c0022539:	75 d4                	jne    c002250f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002253b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002253f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022543:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022547:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002254b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002254f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022553:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022558:	86 e0                	xchg   al,ah
c002255a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002255f:	55                   	push   ebp
c0022560:	53                   	push   ebx
c0022561:	57                   	push   edi
c0022562:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022566:	e8 ab fb ff ff       	call   c0022116 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002256b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002256f:	55                   	push   ebp
c0022570:	53                   	push   ebx
c0022571:	57                   	push   edi
c0022572:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022579:	e8 0e fb ff ff       	call   c002208c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002257e:	83 ec 0c             	sub    esp,0xc
c0022581:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022586:	b9 09 00 00 00       	mov    ecx,0x9
c002258b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002258f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022593:	fc                   	cld    
c0022594:	89 e7                	mov    edi,esp
c0022596:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022598:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002259f:	e8 ee fc ff ff       	call   c0022292 <PCI::foundDevice(PCIDeviceInfo)>
c00225a4:	81 c4 8c 00 00 00    	add    esp,0x8c
c00225aa:	5b                   	pop    ebx
c00225ab:	5e                   	pop    esi
c00225ac:	5f                   	pop    edi
c00225ad:	5d                   	pop    ebp
c00225ae:	c3                   	ret    
c00225af:	90                   	nop

c00225b0 <PCI::checkDevice(unsigned char, unsigned char)>:
c00225b0:	55                   	push   ebp
c00225b1:	57                   	push   edi
c00225b2:	56                   	push   esi
c00225b3:	53                   	push   ebx
c00225b4:	83 ec 0c             	sub    esp,0xc
c00225b7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00225bb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00225c0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00225c5:	6a 00                	push   0x0
c00225c7:	56                   	push   esi
c00225c8:	57                   	push   edi
c00225c9:	55                   	push   ebp
c00225ca:	e8 bd fa ff ff       	call   c002208c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00225cf:	6a 00                	push   0x0
c00225d1:	56                   	push   esi
c00225d2:	57                   	push   edi
c00225d3:	55                   	push   ebp
c00225d4:	e8 2b fe ff ff       	call   c0022404 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00225d9:	83 c4 20             	add    esp,0x20
c00225dc:	6a 00                	push   0x0
c00225de:	56                   	push   esi
c00225df:	57                   	push   edi
c00225e0:	55                   	push   ebp
c00225e1:	e8 c8 fa ff ff       	call   c00220ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00225e6:	83 c4 10             	add    esp,0x10
c00225e9:	84 c0                	test   al,al
c00225eb:	79 27                	jns    c0022614 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00225ed:	bb 01 00 00 00       	mov    ebx,0x1
c00225f2:	53                   	push   ebx
c00225f3:	56                   	push   esi
c00225f4:	57                   	push   edi
c00225f5:	55                   	push   ebp
c00225f6:	e8 91 fa ff ff       	call   c002208c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00225fb:	83 c4 10             	add    esp,0x10
c00225fe:	66 40                	inc    ax
c0022600:	74 0c                	je     c002260e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022602:	53                   	push   ebx
c0022603:	56                   	push   esi
c0022604:	57                   	push   edi
c0022605:	55                   	push   ebp
c0022606:	e8 f9 fd ff ff       	call   c0022404 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002260b:	83 c4 10             	add    esp,0x10
c002260e:	43                   	inc    ebx
c002260f:	83 fb 08             	cmp    ebx,0x8
c0022612:	75 de                	jne    c00225f2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022614:	83 c4 0c             	add    esp,0xc
c0022617:	5b                   	pop    ebx
c0022618:	5e                   	pop    esi
c0022619:	5f                   	pop    edi
c002261a:	5d                   	pop    ebp
c002261b:	c3                   	ret    

c002261c <PCI::detect()>:
c002261c:	56                   	push   esi
c002261d:	53                   	push   ebx
c002261e:	53                   	push   ebx
c002261f:	31 db                	xor    ebx,ebx
c0022621:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022625:	6a 00                	push   0x0
c0022627:	6a 00                	push   0x0
c0022629:	6a 00                	push   0x0
c002262b:	56                   	push   esi
c002262c:	e8 7d fa ff ff       	call   c00220ae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022631:	83 c4 10             	add    esp,0x10
c0022634:	a8 80                	test   al,0x80
c0022636:	75 21                	jne    c0022659 <PCI::detect()+0x3d>
c0022638:	51                   	push   ecx
c0022639:	51                   	push   ecx
c002263a:	6a 00                	push   0x0
c002263c:	56                   	push   esi
c002263d:	e8 2c fc ff ff       	call   c002226e <PCI::checkBus(unsigned char)>
c0022642:	83 c4 10             	add    esp,0x10
c0022645:	eb 24                	jmp    c002266b <PCI::detect()+0x4f>
c0022647:	52                   	push   edx
c0022648:	52                   	push   edx
c0022649:	53                   	push   ebx
c002264a:	43                   	inc    ebx
c002264b:	56                   	push   esi
c002264c:	e8 1d fc ff ff       	call   c002226e <PCI::checkBus(unsigned char)>
c0022651:	83 c4 10             	add    esp,0x10
c0022654:	83 fb 08             	cmp    ebx,0x8
c0022657:	74 12                	je     c002266b <PCI::detect()+0x4f>
c0022659:	53                   	push   ebx
c002265a:	6a 00                	push   0x0
c002265c:	6a 00                	push   0x0
c002265e:	56                   	push   esi
c002265f:	e8 28 fa ff ff       	call   c002208c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022664:	83 c4 10             	add    esp,0x10
c0022667:	66 40                	inc    ax
c0022669:	74 dc                	je     c0022647 <PCI::detect()+0x2b>
c002266b:	58                   	pop    eax
c002266c:	5b                   	pop    ebx
c002266d:	5e                   	pop    esi
c002266e:	c3                   	ret    
c002266f:	90                   	nop

c0022670 <IDE::close(int, int, void*)>:
c0022670:	83 c8 ff             	or     eax,0xffffffff
c0022673:	c3                   	ret    

c0022674 <IDE::IDE()>:
c0022674:	83 ec 0c             	sub    esp,0xc
c0022677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002267b:	83 ec 08             	sub    esp,0x8
c002267e:	68 c0 c0 02 c0       	push   0xc002c0c0
c0022683:	50                   	push   eax
c0022684:	e8 1b 1a ff ff       	call   c00140a4 <HardDiskController::HardDiskController(char const*)>
c0022689:	83 c4 10             	add    esp,0x10
c002268c:	ba 00 c3 02 c0       	mov    edx,0xc002c300
c0022691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022695:	89 10                	mov    DWORD PTR [eax],edx
c0022697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002269b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00226a2:	90                   	nop
c00226a3:	83 c4 0c             	add    esp,0xc
c00226a6:	c3                   	ret    
c00226a7:	90                   	nop

c00226a8 <IDE::prepareInterrupt(unsigned char)>:
c00226a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00226ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226b1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00226b9:	c3                   	ret    

c00226ba <selectDrive(unsigned char, unsigned char)>:
c00226ba:	c3                   	ret    
c00226bb:	90                   	nop

c00226bc <IDE::getBase(unsigned char)>:
c00226bc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00226c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226c5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00226cd:	c3                   	ret    

c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00226ce:	55                   	push   ebp
c00226cf:	57                   	push   edi
c00226d0:	56                   	push   esi
c00226d1:	53                   	push   ebx
c00226d2:	83 ec 1c             	sub    esp,0x1c
c00226d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00226d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00226dd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00226e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00226e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00226e8:	80 f9 03             	cmp    cl,0x3
c00226eb:	77 51                	ja     c002273e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00226ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00226f1:	0f b6 f2             	movzx  esi,dl
c00226f4:	0f b6 db             	movzx  ebx,bl
c00226f7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00226fa:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00226fe:	83 ca 80             	or     edx,0xffffff80
c0022701:	0f b6 d2             	movzx  edx,dl
c0022704:	52                   	push   edx
c0022705:	6a 0c                	push   0xc
c0022707:	56                   	push   esi
c0022708:	57                   	push   edi
c0022709:	e8 c0 ff ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002270e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022713:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022717:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002271b:	ee                   	out    dx,al
c002271c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022721:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022725:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022729:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002272d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022735:	83 c4 2c             	add    esp,0x2c
c0022738:	5b                   	pop    ebx
c0022739:	5e                   	pop    esi
c002273a:	5f                   	pop    edi
c002273b:	5d                   	pop    ebp
c002273c:	eb 90                	jmp    c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002273e:	80 fb 07             	cmp    bl,0x7
c0022741:	77 12                	ja     c0022755 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022743:	0f b6 d2             	movzx  edx,dl
c0022746:	0f b6 db             	movzx  ebx,bl
c0022749:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022751:	89 da                	mov    edx,ebx
c0022753:	eb 2f                	jmp    c0022784 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022755:	80 fb 0d             	cmp    bl,0xd
c0022758:	77 13                	ja     c002276d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002275a:	0f b6 d2             	movzx  edx,dl
c002275d:	0f b6 db             	movzx  ebx,bl
c0022760:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022767:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002276b:	eb 17                	jmp    c0022784 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002276d:	80 fb 15             	cmp    bl,0x15
c0022770:	77 13                	ja     c0022785 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022772:	0f b6 d2             	movzx  edx,dl
c0022775:	0f b6 db             	movzx  ebx,bl
c0022778:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022780:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022784:	ee                   	out    dx,al
c0022785:	83 c4 1c             	add    esp,0x1c
c0022788:	5b                   	pop    ebx
c0022789:	5e                   	pop    esi
c002278a:	5f                   	pop    edi
c002278b:	5d                   	pop    ebp
c002278c:	c3                   	ret    
c002278d:	90                   	nop

c002278e <IDE::read(unsigned char, unsigned char)>:
c002278e:	55                   	push   ebp
c002278f:	57                   	push   edi
c0022790:	56                   	push   esi
c0022791:	53                   	push   ebx
c0022792:	83 ec 1c             	sub    esp,0x1c
c0022795:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022799:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002279d:	8d 43 f8             	lea    eax,[ebx-0x8]
c00227a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00227a4:	3c 03                	cmp    al,0x3
c00227a6:	77 43                	ja     c00227eb <IDE::read(unsigned char, unsigned char)+0x5d>
c00227a8:	0f b6 f2             	movzx  esi,dl
c00227ab:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00227ae:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00227b2:	83 c8 80             	or     eax,0xffffff80
c00227b5:	0f b6 c0             	movzx  eax,al
c00227b8:	50                   	push   eax
c00227b9:	6a 0c                	push   0xc
c00227bb:	56                   	push   esi
c00227bc:	57                   	push   edi
c00227bd:	e8 0c ff ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227c2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00227c7:	0f b6 c3             	movzx  eax,bl
c00227ca:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00227ce:	ec                   	in     al,dx
c00227cf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00227d3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00227d8:	52                   	push   edx
c00227d9:	6a 0c                	push   0xc
c00227db:	56                   	push   esi
c00227dc:	57                   	push   edi
c00227dd:	e8 ec fe ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227e2:	83 c4 20             	add    esp,0x20
c00227e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00227e9:	eb 49                	jmp    c0022834 <IDE::read(unsigned char, unsigned char)+0xa6>
c00227eb:	80 fb 07             	cmp    bl,0x7
c00227ee:	77 12                	ja     c0022802 <IDE::read(unsigned char, unsigned char)+0x74>
c00227f0:	0f b6 d2             	movzx  edx,dl
c00227f3:	0f b6 c3             	movzx  eax,bl
c00227f6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00227fe:	89 c2                	mov    edx,eax
c0022800:	eb 31                	jmp    c0022833 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022802:	80 fb 0d             	cmp    bl,0xd
c0022805:	77 13                	ja     c002281a <IDE::read(unsigned char, unsigned char)+0x8c>
c0022807:	0f b6 d2             	movzx  edx,dl
c002280a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022811:	0f b6 d3             	movzx  edx,bl
c0022814:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022818:	eb 19                	jmp    c0022833 <IDE::read(unsigned char, unsigned char)+0xa5>
c002281a:	31 c0                	xor    eax,eax
c002281c:	80 fb 15             	cmp    bl,0x15
c002281f:	77 13                	ja     c0022834 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022821:	0f b6 d2             	movzx  edx,dl
c0022824:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002282c:	0f b6 d3             	movzx  edx,bl
c002282f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022833:	ec                   	in     al,dx
c0022834:	83 c4 1c             	add    esp,0x1c
c0022837:	5b                   	pop    ebx
c0022838:	5e                   	pop    esi
c0022839:	5f                   	pop    edi
c002283a:	5d                   	pop    ebp
c002283b:	c3                   	ret    

c002283c <IDE::waitInterrupt(unsigned char)>:
c002283c:	55                   	push   ebp
c002283d:	57                   	push   edi
c002283e:	56                   	push   esi
c002283f:	53                   	push   ebx
c0022840:	31 db                	xor    ebx,ebx
c0022842:	83 ec 0c             	sub    esp,0xc
c0022845:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022849:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002284e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022856:	89 e8                	mov    eax,ebp
c0022858:	84 c0                	test   al,al
c002285a:	75 34                	jne    c0022890 <IDE::waitInterrupt(unsigned char)+0x54>
c002285c:	52                   	push   edx
c002285d:	6a 0c                	push   0xc
c002285f:	56                   	push   esi
c0022860:	57                   	push   edi
c0022861:	e8 28 ff ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022866:	83 c4 10             	add    esp,0x10
c0022869:	a8 01                	test   al,0x1
c002286b:	75 2b                	jne    c0022898 <IDE::waitInterrupt(unsigned char)+0x5c>
c002286d:	f6 c3 04             	test   bl,0x4
c0022870:	75 16                	jne    c0022888 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022872:	83 fb 32             	cmp    ebx,0x32
c0022875:	7e 11                	jle    c0022888 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022877:	50                   	push   eax
c0022878:	50                   	push   eax
c0022879:	6a 00                	push   0x0
c002287b:	68 80 96 98 00       	push   0x989680
c0022880:	e8 8b b1 ff ff       	call   c001da10 <nanoSleep(unsigned long long)>
c0022885:	83 c4 10             	add    esp,0x10
c0022888:	83 fb 3c             	cmp    ebx,0x3c
c002288b:	74 0b                	je     c0022898 <IDE::waitInterrupt(unsigned char)+0x5c>
c002288d:	43                   	inc    ebx
c002288e:	eb be                	jmp    c002284e <IDE::waitInterrupt(unsigned char)+0x12>
c0022890:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022898:	83 c4 0c             	add    esp,0xc
c002289b:	89 e8                	mov    eax,ebp
c002289d:	5b                   	pop    ebx
c002289e:	5e                   	pop    esi
c002289f:	5f                   	pop    edi
c00228a0:	5d                   	pop    ebp
c00228a1:	c3                   	ret    

c00228a2 <ideChannel0IRQHandler(regs*, void*)>:
c00228a2:	83 ec 10             	sub    esp,0x10
c00228a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00228b0:	6a 07                	push   0x7
c00228b2:	6a 00                	push   0x0
c00228b4:	50                   	push   eax
c00228b5:	e8 d4 fe ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c00228ba:	83 c4 1c             	add    esp,0x1c
c00228bd:	c3                   	ret    

c00228be <ideChannel1IRQHandler(regs*, void*)>:
c00228be:	83 ec 10             	sub    esp,0x10
c00228c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00228cc:	6a 07                	push   0x7
c00228ce:	6a 01                	push   0x1
c00228d0:	50                   	push   eax
c00228d1:	e8 b8 fe ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c00228d6:	83 c4 1c             	add    esp,0x1c
c00228d9:	c3                   	ret    

c00228da <IDE::enableIRQs(unsigned char, bool)>:
c00228da:	57                   	push   edi
c00228db:	56                   	push   esi
c00228dc:	be 04 00 00 00       	mov    esi,0x4
c00228e1:	53                   	push   ebx
c00228e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00228e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228eb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00228f0:	0f 94 c0             	sete   al
c00228f3:	d1 e0                	shl    eax,1
c00228f5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00228fc:	0f b6 c0             	movzx  eax,al
c00228ff:	50                   	push   eax
c0022900:	6a 0c                	push   0xc
c0022902:	57                   	push   edi
c0022903:	53                   	push   ebx
c0022904:	e8 c5 fd ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022909:	83 c4 10             	add    esp,0x10
c002290c:	50                   	push   eax
c002290d:	6a 0c                	push   0xc
c002290f:	57                   	push   edi
c0022910:	53                   	push   ebx
c0022911:	e8 78 fe ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022916:	83 c4 10             	add    esp,0x10
c0022919:	4e                   	dec    esi
c002291a:	75 f0                	jne    c002290c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002291c:	5b                   	pop    ebx
c002291d:	5e                   	pop    esi
c002291e:	5f                   	pop    edi
c002291f:	c3                   	ret    

c0022920 <IDE::open(int, int, void*)>:
c0022920:	55                   	push   ebp
c0022921:	57                   	push   edi
c0022922:	56                   	push   esi
c0022923:	53                   	push   ebx
c0022924:	83 ec 1c             	sub    esp,0x1c
c0022927:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002292b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022934:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002293d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022944:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002294b:	0f 85 b0 02 00 00    	jne    c0022c01 <IDE::open(int, int, void*)+0x2e1>
c0022951:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022957:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002295b:	83 e0 7f             	and    eax,0x7f
c002295e:	3c 05                	cmp    al,0x5
c0022960:	74 04                	je     c0022966 <IDE::open(int, int, void*)+0x46>
c0022962:	3c 0f                	cmp    al,0xf
c0022964:	75 32                	jne    c0022998 <IDE::open(int, int, void*)+0x78>
c0022966:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002296c:	83 e0 fc             	and    eax,0xfffffffc
c002296f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022976:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002297c:	83 e0 fc             	and    eax,0xfffffffc
c002297f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022986:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002298c:	83 e0 fc             	and    eax,0xfffffffc
c002298f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022996:	eb 14                	jmp    c00229ac <IDE::open(int, int, void*)+0x8c>
c0022998:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00229a2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00229ac:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00229b3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00229ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00229be:	89 c6                	mov    esi,eax
c00229c0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00229c5:	c1 e6 10             	shl    esi,0x10
c00229c8:	89 e8                	mov    eax,ebp
c00229ca:	89 fa                	mov    edx,edi
c00229cc:	c1 e0 0b             	shl    eax,0xb
c00229cf:	09 f0                	or     eax,esi
c00229d1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00229d8:	c1 e6 08             	shl    esi,0x8
c00229db:	09 c6                	or     esi,eax
c00229dd:	89 f0                	mov    eax,esi
c00229df:	0d 08 00 00 80       	or     eax,0x80000008
c00229e4:	ef                   	out    dx,eax
c00229e5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00229ea:	89 ca                	mov    edx,ecx
c00229ec:	ed                   	in     eax,dx
c00229ed:	c1 e8 10             	shr    eax,0x10
c00229f0:	3d ff ff 00 00       	cmp    eax,0xffff
c00229f5:	0f 84 f5 00 00 00    	je     c0022af0 <IDE::open(int, int, void*)+0x1d0>
c00229fb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022a01:	89 fa                	mov    edx,edi
c0022a03:	89 f0                	mov    eax,esi
c0022a05:	ef                   	out    dx,eax
c0022a06:	b0 fe                	mov    al,0xfe
c0022a08:	89 ca                	mov    edx,ecx
c0022a0a:	ee                   	out    dx,al
c0022a0b:	89 f0                	mov    eax,esi
c0022a0d:	89 fa                	mov    edx,edi
c0022a0f:	ef                   	out    dx,eax
c0022a10:	89 ca                	mov    edx,ecx
c0022a12:	ed                   	in     eax,dx
c0022a13:	3c fe                	cmp    al,0xfe
c0022a15:	0f 85 a9 00 00 00    	jne    c0022ac4 <IDE::open(int, int, void*)+0x1a4>
c0022a1b:	8b 15 c8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dac8
c0022a21:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022a28:	74 33                	je     c0022a5d <IDE::open(int, int, void*)+0x13d>
c0022a2a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022a30:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022a34:	40                   	inc    eax
c0022a35:	83 ec 0c             	sub    esp,0xc
c0022a38:	0f b6 c0             	movzx  eax,al
c0022a3b:	50                   	push   eax
c0022a3c:	55                   	push   ebp
c0022a3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a41:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022a47:	51                   	push   ecx
c0022a48:	e8 db 51 ff ff       	call   c0017c28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022a4d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022a52:	83 c4 1c             	add    esp,0x1c
c0022a55:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022a5b:	eb 0a                	jmp    c0022a67 <IDE::open(int, int, void*)+0x147>
c0022a5d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022a67:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022a6e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022a75:	c1 e1 10             	shl    ecx,0x10
c0022a78:	c1 e0 08             	shl    eax,0x8
c0022a7b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022a80:	09 c1                	or     ecx,eax
c0022a82:	89 fa                	mov    edx,edi
c0022a84:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022a8b:	c1 e0 0b             	shl    eax,0xb
c0022a8e:	09 c1                	or     ecx,eax
c0022a90:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022a96:	89 c8                	mov    eax,ecx
c0022a98:	ef                   	out    dx,eax
c0022a99:	be fc 0c 00 00       	mov    esi,0xcfc
c0022a9e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022aa4:	89 f2                	mov    edx,esi
c0022aa6:	ee                   	out    dx,al
c0022aa7:	89 c8                	mov    eax,ecx
c0022aa9:	89 fa                	mov    edx,edi
c0022aab:	ef                   	out    dx,eax
c0022aac:	89 f2                	mov    edx,esi
c0022aae:	ed                   	in     eax,dx
c0022aaf:	0f b6 c0             	movzx  eax,al
c0022ab2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022ab8:	74 46                	je     c0022b00 <IDE::open(int, int, void*)+0x1e0>
c0022aba:	83 ec 0c             	sub    esp,0xc
c0022abd:	68 d8 c0 02 c0       	push   0xc002c0d8
c0022ac2:	eb 34                	jmp    c0022af8 <IDE::open(int, int, void*)+0x1d8>
c0022ac4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022acd:	75 17                	jne    c0022ae6 <IDE::open(int, int, void*)+0x1c6>
c0022acf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022ad4:	74 07                	je     c0022add <IDE::open(int, int, void*)+0x1bd>
c0022ad6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022adb:	75 09                	jne    c0022ae6 <IDE::open(int, int, void*)+0x1c6>
c0022add:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022ae4:	eb 1a                	jmp    c0022b00 <IDE::open(int, int, void*)+0x1e0>
c0022ae6:	83 ec 0c             	sub    esp,0xc
c0022ae9:	68 e0 c0 02 c0       	push   0xc002c0e0
c0022aee:	eb 08                	jmp    c0022af8 <IDE::open(int, int, void*)+0x1d8>
c0022af0:	83 ec 0c             	sub    esp,0xc
c0022af3:	68 11 c1 02 c0       	push   0xc002c111
c0022af8:	e8 68 73 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0022afd:	83 c4 10             	add    esp,0x10
c0022b00:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022b07:	79 1a                	jns    c0022b23 <IDE::open(int, int, void*)+0x203>
c0022b09:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022b0f:	83 e0 fc             	and    eax,0xfffffffc
c0022b12:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022b19:	83 c0 08             	add    eax,0x8
c0022b1c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022b23:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022b29:	89 c2                	mov    edx,eax
c0022b2b:	83 e2 0f             	and    edx,0xf
c0022b2e:	66 83 fa 08          	cmp    dx,0x8
c0022b32:	75 0a                	jne    c0022b3e <IDE::open(int, int, void*)+0x21e>
c0022b34:	83 e8 02             	sub    eax,0x2
c0022b37:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022b3e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022b44:	89 c2                	mov    edx,eax
c0022b46:	83 e2 0f             	and    edx,0xf
c0022b49:	66 83 fa 08          	cmp    dx,0x8
c0022b4d:	75 0a                	jne    c0022b59 <IDE::open(int, int, void*)+0x239>
c0022b4f:	83 e8 02             	sub    eax,0x2
c0022b52:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022b59:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022b60:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022b67:	89 d0                	mov    eax,edx
c0022b69:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022b6c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022b70:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022b74:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022b77:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022b7c:	0f b6 c9             	movzx  ecx,cl
c0022b7f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022b86:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022b89:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022b8d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022b91:	8d 50 02             	lea    edx,[eax+0x2]
c0022b94:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022b99:	0f b6 d2             	movzx  edx,dl
c0022b9c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022ba2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022ba5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022ba9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022bad:	8d 48 03             	lea    ecx,[eax+0x3]
c0022bb0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022bb5:	0f b6 c9             	movzx  ecx,cl
c0022bb8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022bbe:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022bc1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022bc5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022bc9:	8d 50 04             	lea    edx,[eax+0x4]
c0022bcc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022bd2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022bd7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022bde:	66 85 f6             	test   si,si
c0022be1:	74 3e                	je     c0022c21 <IDE::open(int, int, void*)+0x301>
c0022be3:	0f b6 d2             	movzx  edx,dl
c0022be6:	83 c0 05             	add    eax,0x5
c0022be9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022bec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022bf0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022bf4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022bfa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022bff:	eb 20                	jmp    c0022c21 <IDE::open(int, int, void*)+0x301>
c0022c01:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022c0b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022c15:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022c1c:	e9 02 ff ff ff       	jmp    c0022b23 <IDE::open(int, int, void*)+0x203>
c0022c21:	52                   	push   edx
c0022c22:	52                   	push   edx
c0022c23:	6a 00                	push   0x0
c0022c25:	53                   	push   ebx
c0022c26:	e8 7d fa ff ff       	call   c00226a8 <IDE::prepareInterrupt(unsigned char)>
c0022c2b:	59                   	pop    ecx
c0022c2c:	5e                   	pop    esi
c0022c2d:	6a 01                	push   0x1
c0022c2f:	53                   	push   ebx
c0022c30:	e8 73 fa ff ff       	call   c00226a8 <IDE::prepareInterrupt(unsigned char)>
c0022c35:	83 c4 0c             	add    esp,0xc
c0022c38:	6a 00                	push   0x0
c0022c3a:	6a 00                	push   0x0
c0022c3c:	53                   	push   ebx
c0022c3d:	e8 98 fc ff ff       	call   c00228da <IDE::enableIRQs(unsigned char, bool)>
c0022c42:	83 c4 0c             	add    esp,0xc
c0022c45:	6a 00                	push   0x0
c0022c47:	6a 01                	push   0x1
c0022c49:	53                   	push   ebx
c0022c4a:	e8 8b fc ff ff       	call   c00228da <IDE::enableIRQs(unsigned char, bool)>
c0022c4f:	83 c4 10             	add    esp,0x10
c0022c52:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022c59:	74 40                	je     c0022c9b <IDE::open(int, int, void*)+0x37b>
c0022c5b:	83 ec 0c             	sub    esp,0xc
c0022c5e:	68 3b c1 02 c0       	push   0xc002c13b
c0022c63:	e8 89 fc fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0022c68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c6b:	6a 01                	push   0x1
c0022c6d:	68 a2 28 02 c0       	push   0xc00228a2
c0022c72:	6a 0e                	push   0xe
c0022c74:	53                   	push   ebx
c0022c75:	e8 22 10 ff ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022c7a:	83 c4 14             	add    esp,0x14
c0022c7d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022c83:	53                   	push   ebx
c0022c84:	6a 01                	push   0x1
c0022c86:	68 be 28 02 c0       	push   0xc00228be
c0022c8b:	6a 0f                	push   0xf
c0022c8d:	53                   	push   ebx
c0022c8e:	e8 09 10 ff ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022c93:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022c99:	eb 4a                	jmp    c0022ce5 <IDE::open(int, int, void*)+0x3c5>
c0022c9b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022ca5:	50                   	push   eax
c0022ca6:	6a 0f                	push   0xf
c0022ca8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022cae:	68 57 c1 02 c0       	push   0xc002c157
c0022cb3:	e8 39 fc fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0022cb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022cbb:	6a 00                	push   0x0
c0022cbd:	68 a2 28 02 c0       	push   0xc00228a2
c0022cc2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022cc8:	53                   	push   ebx
c0022cc9:	e8 ce 0f ff ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022cce:	83 c4 14             	add    esp,0x14
c0022cd1:	53                   	push   ebx
c0022cd2:	6a 00                	push   0x0
c0022cd4:	68 be 28 02 c0       	push   0xc00228be
c0022cd9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022cdf:	53                   	push   ebx
c0022ce0:	e8 b7 0f ff ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022ce5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022ce7:	83 c4 20             	add    esp,0x20
c0022cea:	83 ec 0c             	sub    esp,0xc
c0022ced:	53                   	push   ebx
c0022cee:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022cf1:	83 c4 0c             	add    esp,0xc
c0022cf4:	6a 07                	push   0x7
c0022cf6:	6a 00                	push   0x0
c0022cf8:	53                   	push   ebx
c0022cf9:	e8 90 fa ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022cfe:	83 c4 0c             	add    esp,0xc
c0022d01:	6a 07                	push   0x7
c0022d03:	6a 01                	push   0x1
c0022d05:	53                   	push   ebx
c0022d06:	e8 83 fa ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022d0b:	83 c4 0c             	add    esp,0xc
c0022d0e:	6a 01                	push   0x1
c0022d10:	6a 00                	push   0x0
c0022d12:	53                   	push   ebx
c0022d13:	e8 c2 fb ff ff       	call   c00228da <IDE::enableIRQs(unsigned char, bool)>
c0022d18:	83 c4 0c             	add    esp,0xc
c0022d1b:	6a 01                	push   0x1
c0022d1d:	6a 01                	push   0x1
c0022d1f:	53                   	push   ebx
c0022d20:	e8 b5 fb ff ff       	call   c00228da <IDE::enableIRQs(unsigned char, bool)>
c0022d25:	83 c4 2c             	add    esp,0x2c
c0022d28:	31 c0                	xor    eax,eax
c0022d2a:	5b                   	pop    ebx
c0022d2b:	5e                   	pop    esi
c0022d2c:	5f                   	pop    edi
c0022d2d:	5d                   	pop    ebp
c0022d2e:	c3                   	ret    
c0022d2f:	90                   	nop

c0022d30 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022d30:	55                   	push   ebp
c0022d31:	57                   	push   edi
c0022d32:	56                   	push   esi
c0022d33:	53                   	push   ebx
c0022d34:	83 ec 1c             	sub    esp,0x1c
c0022d37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022d3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d3f:	8d 50 f8             	lea    edx,[eax-0x8]
c0022d42:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d46:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022d4a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022d4e:	80 fa 03             	cmp    dl,0x3
c0022d51:	77 5d                	ja     c0022db0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022d53:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022d57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d5b:	0f b6 db             	movzx  ebx,bl
c0022d5e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022d61:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022d65:	83 ca 80             	or     edx,0xffffff80
c0022d68:	0f b6 d2             	movzx  edx,dl
c0022d6b:	52                   	push   edx
c0022d6c:	6a 0c                	push   0xc
c0022d6e:	53                   	push   ebx
c0022d6f:	56                   	push   esi
c0022d70:	e8 59 f9 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d75:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022d7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022d82:	0f b6 c0             	movzx  eax,al
c0022d85:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022d89:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022d8b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022d90:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022d94:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022d98:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022d9c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022da4:	83 c4 2c             	add    esp,0x2c
c0022da7:	5b                   	pop    ebx
c0022da8:	5e                   	pop    esi
c0022da9:	5f                   	pop    edi
c0022daa:	5d                   	pop    ebp
c0022dab:	e9 1e f9 ff ff       	jmp    c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022db0:	3c 07                	cmp    al,0x7
c0022db2:	77 10                	ja     c0022dc4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022db4:	0f b6 db             	movzx  ebx,bl
c0022db7:	0f b6 d0             	movzx  edx,al
c0022dba:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022dc2:	eb 2d                	jmp    c0022df1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022dc4:	3c 0d                	cmp    al,0xd
c0022dc6:	77 13                	ja     c0022ddb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022dc8:	0f b6 db             	movzx  ebx,bl
c0022dcb:	0f b6 c0             	movzx  eax,al
c0022dce:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022dd5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022dd9:	eb 16                	jmp    c0022df1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022ddb:	3c 15                	cmp    al,0x15
c0022ddd:	77 14                	ja     c0022df3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022ddf:	0f b6 db             	movzx  ebx,bl
c0022de2:	0f b6 c0             	movzx  eax,al
c0022de5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022ded:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022df1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022df3:	83 c4 1c             	add    esp,0x1c
c0022df6:	5b                   	pop    ebx
c0022df7:	5e                   	pop    esi
c0022df8:	5f                   	pop    edi
c0022df9:	5d                   	pop    ebp
c0022dfa:	c3                   	ret    
c0022dfb:	90                   	nop

c0022dfc <IDE::detect()>:
c0022dfc:	55                   	push   ebp
c0022dfd:	57                   	push   edi
c0022dfe:	56                   	push   esi
c0022dff:	53                   	push   ebx
c0022e00:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022e06:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022e0d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022e14:	0f 85 be 02 00 00    	jne    c00230d8 <IDE::detect()+0x2dc>
c0022e1a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022e21:	31 f6                	xor    esi,esi
c0022e23:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022e2b:	31 ed                	xor    ebp,ebp
c0022e2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e31:	c1 e0 06             	shl    eax,0x6
c0022e34:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022e3c:	89 e8                	mov    eax,ebp
c0022e3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022e42:	c1 e0 04             	shl    eax,0x4
c0022e45:	83 c8 a0             	or     eax,0xffffffa0
c0022e48:	0f b6 c0             	movzx  eax,al
c0022e4b:	50                   	push   eax
c0022e4c:	6a 06                	push   0x6
c0022e4e:	56                   	push   esi
c0022e4f:	53                   	push   ebx
c0022e50:	e8 79 f8 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e55:	83 c4 0c             	add    esp,0xc
c0022e58:	6a 0c                	push   0xc
c0022e5a:	56                   	push   esi
c0022e5b:	53                   	push   ebx
c0022e5c:	e8 2d f9 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022e61:	83 c4 0c             	add    esp,0xc
c0022e64:	6a 0c                	push   0xc
c0022e66:	56                   	push   esi
c0022e67:	53                   	push   ebx
c0022e68:	e8 21 f9 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022e6d:	83 c4 0c             	add    esp,0xc
c0022e70:	6a 0c                	push   0xc
c0022e72:	56                   	push   esi
c0022e73:	53                   	push   ebx
c0022e74:	e8 15 f9 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022e79:	83 c4 0c             	add    esp,0xc
c0022e7c:	6a 0c                	push   0xc
c0022e7e:	56                   	push   esi
c0022e7f:	53                   	push   ebx
c0022e80:	e8 09 f9 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022e85:	68 ec 00 00 00       	push   0xec
c0022e8a:	6a 07                	push   0x7
c0022e8c:	56                   	push   esi
c0022e8d:	53                   	push   ebx
c0022e8e:	e8 3b f8 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e93:	83 c4 1c             	add    esp,0x1c
c0022e96:	6a 0c                	push   0xc
c0022e98:	56                   	push   esi
c0022e99:	53                   	push   ebx
c0022e9a:	e8 ef f8 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022e9f:	83 c4 0c             	add    esp,0xc
c0022ea2:	6a 0c                	push   0xc
c0022ea4:	56                   	push   esi
c0022ea5:	53                   	push   ebx
c0022ea6:	e8 e3 f8 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022eab:	83 c4 0c             	add    esp,0xc
c0022eae:	6a 0c                	push   0xc
c0022eb0:	56                   	push   esi
c0022eb1:	53                   	push   ebx
c0022eb2:	e8 d7 f8 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022eb7:	83 c4 0c             	add    esp,0xc
c0022eba:	6a 0c                	push   0xc
c0022ebc:	56                   	push   esi
c0022ebd:	53                   	push   ebx
c0022ebe:	e8 cb f8 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022ec3:	83 c4 0c             	add    esp,0xc
c0022ec6:	6a 0c                	push   0xc
c0022ec8:	56                   	push   esi
c0022ec9:	53                   	push   ebx
c0022eca:	e8 bf f8 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022ecf:	83 c4 10             	add    esp,0x10
c0022ed2:	84 c0                	test   al,al
c0022ed4:	0f 84 8b 01 00 00    	je     c0023065 <IDE::detect()+0x269>
c0022eda:	31 ff                	xor    edi,edi
c0022edc:	50                   	push   eax
c0022edd:	6a 0c                	push   0xc
c0022edf:	56                   	push   esi
c0022ee0:	53                   	push   ebx
c0022ee1:	e8 a8 f8 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0022ee6:	83 c4 10             	add    esp,0x10
c0022ee9:	a8 01                	test   al,0x1
c0022eeb:	0f 85 8e 01 00 00    	jne    c002307f <IDE::detect()+0x283>
c0022ef1:	84 c0                	test   al,al
c0022ef3:	78 04                	js     c0022ef9 <IDE::detect()+0xfd>
c0022ef5:	a8 08                	test   al,0x8
c0022ef7:	75 27                	jne    c0022f20 <IDE::detect()+0x124>
c0022ef9:	47                   	inc    edi
c0022efa:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022f00:	7e da                	jle    c0022edc <IDE::detect()+0xe0>
c0022f02:	50                   	push   eax
c0022f03:	50                   	push   eax
c0022f04:	6a 00                	push   0x0
c0022f06:	68 40 4b 4c 00       	push   0x4c4b40
c0022f0b:	e8 00 ab ff ff       	call   c001da10 <nanoSleep(unsigned long long)>
c0022f10:	83 c4 10             	add    esp,0x10
c0022f13:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022f19:	75 c1                	jne    c0022edc <IDE::detect()+0xe0>
c0022f1b:	e9 5f 01 00 00       	jmp    c002307f <IDE::detect()+0x283>
c0022f20:	31 c9                	xor    ecx,ecx
c0022f22:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022f26:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022f2a:	83 ec 0c             	sub    esp,0xc
c0022f2d:	68 80 00 00 00       	push   0x80
c0022f32:	57                   	push   edi
c0022f33:	6a 00                	push   0x0
c0022f35:	56                   	push   esi
c0022f36:	53                   	push   ebx
c0022f37:	e8 f4 fd ff ff       	call   c0022d30 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022f3c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022f41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022f45:	89 d1                	mov    ecx,edx
c0022f47:	c1 e0 06             	shl    eax,0x6
c0022f4a:	01 d8                	add    eax,ebx
c0022f4c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022f53:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022f5a:	89 f2                	mov    edx,esi
c0022f5c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022f62:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022f66:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022f6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022f70:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022f77:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022f7f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022f86:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022f8e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022f94:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022f9b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022fa1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022fa5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022fa9:	83 c4 20             	add    esp,0x20
c0022fac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022faf:	83 c0 02             	add    eax,0x2
c0022fb2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022fb8:	83 c7 02             	add    edi,0x2
c0022fbb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022fbe:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022fc4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022fc8:	75 e2                	jne    c0022fac <IDE::detect()+0x1b0>
c0022fca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fce:	c1 e0 06             	shl    eax,0x6
c0022fd1:	01 d8                	add    eax,ebx
c0022fd3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022fd9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022fe0:	66 c1 ea 09          	shr    dx,0x9
c0022fe4:	83 e2 01             	and    edx,0x1
c0022fe7:	84 c9                	test   cl,cl
c0022fe9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022fef:	75 2f                	jne    c0023020 <IDE::detect()+0x224>
c0022ff1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022ff7:	85 c0                	test   eax,eax
c0022ff9:	74 66                	je     c0023061 <IDE::detect()+0x265>
c0022ffb:	50                   	push   eax
c0022ffc:	55                   	push   ebp
c0022ffd:	56                   	push   esi
c0022ffe:	68 73 c1 02 c0       	push   0xc002c173
c0023003:	e8 e9 f8 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023008:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002300f:	e8 0e c6 fe ff       	call   c000f622 <malloc>
c0023014:	89 c7                	mov    edi,eax
c0023016:	89 04 24             	mov    DWORD PTR [esp],eax
c0023019:	e8 78 06 00 00       	call   c0023696 <ATA::ATA()>
c002301e:	eb 28                	jmp    c0023048 <IDE::detect()+0x24c>
c0023020:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023026:	55                   	push   ebp
c0023027:	56                   	push   esi
c0023028:	68 a2 c1 02 c0       	push   0xc002c1a2
c002302d:	e8 bf f8 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023032:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023039:	e8 e4 c5 fe ff       	call   c000f622 <malloc>
c002303e:	89 c7                	mov    edi,eax
c0023040:	89 04 24             	mov    DWORD PTR [esp],eax
c0023043:	e8 16 0d 00 00       	call   c0023d5e <ATAPI::ATAPI()>
c0023048:	5a                   	pop    edx
c0023049:	59                   	pop    ecx
c002304a:	57                   	push   edi
c002304b:	53                   	push   ebx
c002304c:	e8 c7 0c ff ff       	call   c0013d18 <Device::addChild(Device*)>
c0023051:	8b 07                	mov    eax,DWORD PTR [edi]
c0023053:	53                   	push   ebx
c0023054:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023058:	6a 00                	push   0x0
c002305a:	57                   	push   edi
c002305b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002305e:	83 c4 20             	add    esp,0x20
c0023061:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023065:	4d                   	dec    ebp
c0023066:	74 0a                	je     c0023072 <IDE::detect()+0x276>
c0023068:	bd 01 00 00 00       	mov    ebp,0x1
c002306d:	e9 bb fd ff ff       	jmp    c0022e2d <IDE::detect()+0x31>
c0023072:	4e                   	dec    esi
c0023073:	74 63                	je     c00230d8 <IDE::detect()+0x2dc>
c0023075:	be 01 00 00 00       	mov    esi,0x1
c002307a:	e9 ac fd ff ff       	jmp    c0022e2b <IDE::detect()+0x2f>
c002307f:	50                   	push   eax
c0023080:	6a 04                	push   0x4
c0023082:	56                   	push   esi
c0023083:	53                   	push   ebx
c0023084:	e8 05 f7 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0023089:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002308d:	83 c4 0c             	add    esp,0xc
c0023090:	6a 05                	push   0x5
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	e8 f5 f6 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0023099:	83 c4 10             	add    esp,0x10
c002309c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00230a0:	80 fa 14             	cmp    dl,0x14
c00230a3:	75 04                	jne    c00230a9 <IDE::detect()+0x2ad>
c00230a5:	3c eb                	cmp    al,0xeb
c00230a7:	eb 07                	jmp    c00230b0 <IDE::detect()+0x2b4>
c00230a9:	3c 96                	cmp    al,0x96
c00230ab:	75 b8                	jne    c0023065 <IDE::detect()+0x269>
c00230ad:	80 fa 69             	cmp    dl,0x69
c00230b0:	75 b3                	jne    c0023065 <IDE::detect()+0x269>
c00230b2:	68 a1 00 00 00       	push   0xa1
c00230b7:	6a 07                	push   0x7
c00230b9:	56                   	push   esi
c00230ba:	53                   	push   ebx
c00230bb:	e8 0e f6 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230c0:	5f                   	pop    edi
c00230c1:	58                   	pop    eax
c00230c2:	6a 00                	push   0x0
c00230c4:	68 40 42 0f 00       	push   0xf4240
c00230c9:	e8 42 a9 ff ff       	call   c001da10 <nanoSleep(unsigned long long)>
c00230ce:	83 c4 10             	add    esp,0x10
c00230d1:	b1 01                	mov    cl,0x1
c00230d3:	e9 4a fe ff ff       	jmp    c0022f22 <IDE::detect()+0x126>
c00230d8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00230de:	5b                   	pop    ebx
c00230df:	5e                   	pop    esi
c00230e0:	5f                   	pop    edi
c00230e1:	5d                   	pop    ebp
c00230e2:	c3                   	ret    
c00230e3:	90                   	nop

c00230e4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00230e4:	55                   	push   ebp
c00230e5:	57                   	push   edi
c00230e6:	56                   	push   esi
c00230e7:	53                   	push   ebx
c00230e8:	83 ec 1c             	sub    esp,0x1c
c00230eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230f3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00230f7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00230fb:	88 c3                	mov    bl,al
c00230fd:	84 c0                	test   al,al
c00230ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023103:	0f 84 67 01 00 00    	je     c0023270 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023109:	83 ec 0c             	sub    esp,0xc
c002310c:	68 d3 c1 02 c0       	push   0xc002c1d3
c0023111:	e8 db f7 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023116:	83 c4 10             	add    esp,0x10
c0023119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002311d:	3c 01                	cmp    al,0x1
c002311f:	75 17                	jne    c0023138 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023121:	83 ec 0c             	sub    esp,0xc
c0023124:	b3 13                	mov    bl,0x13
c0023126:	68 df c1 02 c0       	push   0xc002c1df
c002312b:	e8 c1 f7 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023130:	83 c4 10             	add    esp,0x10
c0023133:	e9 25 01 00 00       	jmp    c002325d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023138:	3c 02                	cmp    al,0x2
c002313a:	0f 85 ef 00 00 00    	jne    c002322f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023140:	d1 e6                	shl    esi,1
c0023142:	09 ee                	or     esi,ebp
c0023144:	52                   	push   edx
c0023145:	89 f0                	mov    eax,esi
c0023147:	6a 01                	push   0x1
c0023149:	0f b6 f0             	movzx  esi,al
c002314c:	c1 e6 06             	shl    esi,0x6
c002314f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023157:	50                   	push   eax
c0023158:	57                   	push   edi
c0023159:	e8 30 f6 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c002315e:	83 c4 10             	add    esp,0x10
c0023161:	89 c6                	mov    esi,eax
c0023163:	a8 01                	test   al,0x1
c0023165:	74 12                	je     c0023179 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023167:	83 ec 0c             	sub    esp,0xc
c002316a:	b3 07                	mov    bl,0x7
c002316c:	68 f4 c1 02 c0       	push   0xc002c1f4
c0023171:	e8 7b f7 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023176:	83 c4 10             	add    esp,0x10
c0023179:	f7 c6 02 00 00 00    	test   esi,0x2
c002317f:	74 12                	je     c0023193 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023181:	83 ec 0c             	sub    esp,0xc
c0023184:	b3 03                	mov    bl,0x3
c0023186:	68 12 c2 02 c0       	push   0xc002c212
c002318b:	e8 61 f7 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023190:	83 c4 10             	add    esp,0x10
c0023193:	f7 c6 04 00 00 00    	test   esi,0x4
c0023199:	74 12                	je     c00231ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002319b:	83 ec 0c             	sub    esp,0xc
c002319e:	b3 14                	mov    bl,0x14
c00231a0:	68 32 c2 02 c0       	push   0xc002c232
c00231a5:	e8 47 f7 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00231aa:	83 c4 10             	add    esp,0x10
c00231ad:	f7 c6 08 00 00 00    	test   esi,0x8
c00231b3:	74 12                	je     c00231c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00231b5:	83 ec 0c             	sub    esp,0xc
c00231b8:	b3 03                	mov    bl,0x3
c00231ba:	68 12 c2 02 c0       	push   0xc002c212
c00231bf:	e8 2d f7 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00231c4:	83 c4 10             	add    esp,0x10
c00231c7:	f7 c6 10 00 00 00    	test   esi,0x10
c00231cd:	74 12                	je     c00231e1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00231cf:	83 ec 0c             	sub    esp,0xc
c00231d2:	b3 15                	mov    bl,0x15
c00231d4:	68 4a c2 02 c0       	push   0xc002c24a
c00231d9:	e8 13 f7 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00231de:	83 c4 10             	add    esp,0x10
c00231e1:	f7 c6 20 00 00 00    	test   esi,0x20
c00231e7:	74 12                	je     c00231fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00231e9:	83 ec 0c             	sub    esp,0xc
c00231ec:	b3 03                	mov    bl,0x3
c00231ee:	68 12 c2 02 c0       	push   0xc002c212
c00231f3:	e8 f9 f6 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00231f8:	83 c4 10             	add    esp,0x10
c00231fb:	f7 c6 40 00 00 00    	test   esi,0x40
c0023201:	74 12                	je     c0023215 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023203:	83 ec 0c             	sub    esp,0xc
c0023206:	b3 16                	mov    bl,0x16
c0023208:	68 64 c2 02 c0       	push   0xc002c264
c002320d:	e8 df f6 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023212:	83 c4 10             	add    esp,0x10
c0023215:	89 f0                	mov    eax,esi
c0023217:	84 c0                	test   al,al
c0023219:	79 42                	jns    c002325d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002321b:	83 ec 0c             	sub    esp,0xc
c002321e:	b3 0d                	mov    bl,0xd
c0023220:	68 85 c2 02 c0       	push   0xc002c285
c0023225:	e8 c7 f6 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c002322a:	83 c4 10             	add    esp,0x10
c002322d:	eb 2e                	jmp    c002325d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002322f:	3c 03                	cmp    al,0x3
c0023231:	75 14                	jne    c0023247 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023233:	83 ec 0c             	sub    esp,0xc
c0023236:	b3 17                	mov    bl,0x17
c0023238:	68 99 c2 02 c0       	push   0xc002c299
c002323d:	e8 af f6 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023242:	83 c4 10             	add    esp,0x10
c0023245:	eb 16                	jmp    c002325d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023247:	3c 04                	cmp    al,0x4
c0023249:	75 12                	jne    c002325d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002324b:	83 ec 0c             	sub    esp,0xc
c002324e:	b3 08                	mov    bl,0x8
c0023250:	68 af c2 02 c0       	push   0xc002c2af
c0023255:	e8 97 f6 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c002325a:	83 c4 10             	add    esp,0x10
c002325d:	50                   	push   eax
c002325e:	50                   	push   eax
c002325f:	0f b6 c3             	movzx  eax,bl
c0023262:	50                   	push   eax
c0023263:	68 c7 c2 02 c0       	push   0xc002c2c7
c0023268:	e8 84 f6 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c002326d:	83 c4 10             	add    esp,0x10
c0023270:	83 c4 1c             	add    esp,0x1c
c0023273:	88 d8                	mov    al,bl
c0023275:	5b                   	pop    ebx
c0023276:	5e                   	pop    esi
c0023277:	5f                   	pop    edi
c0023278:	5d                   	pop    ebp
c0023279:	c3                   	ret    

c002327a <IDE::polling(unsigned char, unsigned int)>:
c002327a:	57                   	push   edi
c002327b:	56                   	push   esi
c002327c:	53                   	push   ebx
c002327d:	bb 04 00 00 00       	mov    ebx,0x4
c0023282:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023286:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002328b:	52                   	push   edx
c002328c:	6a 0c                	push   0xc
c002328e:	56                   	push   esi
c002328f:	57                   	push   edi
c0023290:	e8 f9 f4 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0023295:	83 c4 10             	add    esp,0x10
c0023298:	4b                   	dec    ebx
c0023299:	75 f0                	jne    c002328b <IDE::polling(unsigned char, unsigned int)+0x11>
c002329b:	bb a0 86 01 00       	mov    ebx,0x186a0
c00232a0:	50                   	push   eax
c00232a1:	6a 0c                	push   0xc
c00232a3:	56                   	push   esi
c00232a4:	57                   	push   edi
c00232a5:	e8 e4 f4 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c00232aa:	83 c4 10             	add    esp,0x10
c00232ad:	a8 01                	test   al,0x1
c00232af:	74 12                	je     c00232c3 <IDE::polling(unsigned char, unsigned int)+0x49>
c00232b1:	83 ec 0c             	sub    esp,0xc
c00232b4:	68 e1 c2 02 c0       	push   0xc002c2e1
c00232b9:	e8 33 f6 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00232be:	83 c4 10             	add    esp,0x10
c00232c1:	eb 17                	jmp    c00232da <IDE::polling(unsigned char, unsigned int)+0x60>
c00232c3:	a8 20                	test   al,0x20
c00232c5:	75 0f                	jne    c00232d6 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00232c7:	4b                   	dec    ebx
c00232c8:	74 10                	je     c00232da <IDE::polling(unsigned char, unsigned int)+0x60>
c00232ca:	84 c0                	test   al,al
c00232cc:	78 d2                	js     c00232a0 <IDE::polling(unsigned char, unsigned int)+0x26>
c00232ce:	a8 08                	test   al,0x8
c00232d0:	74 ce                	je     c00232a0 <IDE::polling(unsigned char, unsigned int)+0x26>
c00232d2:	31 c0                	xor    eax,eax
c00232d4:	eb 06                	jmp    c00232dc <IDE::polling(unsigned char, unsigned int)+0x62>
c00232d6:	b0 01                	mov    al,0x1
c00232d8:	eb 02                	jmp    c00232dc <IDE::polling(unsigned char, unsigned int)+0x62>
c00232da:	b0 02                	mov    al,0x2
c00232dc:	5b                   	pop    ebx
c00232dd:	5e                   	pop    esi
c00232de:	5f                   	pop    edi
c00232df:	c3                   	ret    

c00232e0 <SATABus::close(int, int, void*)>:
c00232e0:	31 c0                	xor    eax,eax
c00232e2:	c3                   	ret    
c00232e3:	90                   	nop

c00232e4 <SATABus::detect()>:
c00232e4:	c3                   	ret    
c00232e5:	90                   	nop

c00232e6 <SATABus::SATABus()>:
c00232e6:	83 ec 0c             	sub    esp,0xc
c00232e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232ed:	83 ec 08             	sub    esp,0x8
c00232f0:	68 24 c3 02 c0       	push   0xc002c324
c00232f5:	50                   	push   eax
c00232f6:	e8 a9 0d ff ff       	call   c00140a4 <HardDiskController::HardDiskController(char const*)>
c00232fb:	83 c4 10             	add    esp,0x10
c00232fe:	ba e0 c3 02 c0       	mov    edx,0xc002c3e0
c0023303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023307:	89 10                	mov    DWORD PTR [eax],edx
c0023309:	83 ec 0c             	sub    esp,0xc
c002330c:	6a 50                	push   0x50
c002330e:	e8 74 ca fe ff       	call   c000fd87 <Phys::allocateContiguousPages(int)>
c0023313:	83 c4 10             	add    esp,0x10
c0023316:	89 c2                	mov    edx,eax
c0023318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002331c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023322:	83 ec 0c             	sub    esp,0xc
c0023325:	6a 50                	push   0x50
c0023327:	e8 d5 e5 fe ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c002332c:	83 c4 10             	add    esp,0x10
c002332f:	89 c2                	mov    edx,eax
c0023331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023335:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002333b:	e8 51 e7 fe ff       	call   c0011a91 <Virt::getAKernelVAS()>
c0023340:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023344:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002334a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002334e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023354:	83 ec 0c             	sub    esp,0xc
c0023357:	6a 03                	push   0x3
c0023359:	6a 50                	push   0x50
c002335b:	51                   	push   ecx
c002335c:	52                   	push   edx
c002335d:	50                   	push   eax
c002335e:	e8 5d ef fe ff       	call   c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023363:	83 c4 20             	add    esp,0x20
c0023366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002336a:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023374:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002337a:	83 ec 04             	sub    esp,0x4
c002337d:	52                   	push   edx
c002337e:	50                   	push   eax
c002337f:	68 48 c3 02 c0       	push   0xc002c348
c0023384:	e8 68 f5 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023389:	83 c4 10             	add    esp,0x10
c002338c:	90                   	nop
c002338d:	83 c4 0c             	add    esp,0xc
c0023390:	c3                   	ret    
c0023391:	90                   	nop

c0023392 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023392:	83 ec 0c             	sub    esp,0xc
c0023395:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023399:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002339c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002339f:	09 c2                	or     edx,eax
c00233a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00233ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c00233ad:	31 c0                	xor    eax,eax
c00233af:	c1 e9 08             	shr    ecx,0x8
c00233b2:	83 e1 0f             	and    ecx,0xf
c00233b5:	39 c8                	cmp    eax,ecx
c00233b7:	74 0a                	je     c00233c3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00233b9:	f6 c2 01             	test   dl,0x1
c00233bc:	74 18                	je     c00233d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00233be:	d1 ea                	shr    edx,1
c00233c0:	40                   	inc    eax
c00233c1:	eb f2                	jmp    c00233b5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00233c3:	83 ec 0c             	sub    esp,0xc
c00233c6:	68 6c c3 02 c0       	push   0xc002c36c
c00233cb:	e8 95 6a ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c00233d0:	83 c4 10             	add    esp,0x10
c00233d3:	83 c8 ff             	or     eax,0xffffffff
c00233d6:	83 c4 0c             	add    esp,0xc
c00233d9:	c3                   	ret    

c00233da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00233da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00233de:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00233e1:	89 c2                	mov    edx,eax
c00233e3:	c1 ea 08             	shr    edx,0x8
c00233e6:	83 e2 0f             	and    edx,0xf
c00233e9:	fe ca                	dec    dl
c00233eb:	75 31                	jne    c002341e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00233ed:	83 e0 0f             	and    eax,0xf
c00233f0:	3c 03                	cmp    al,0x3
c00233f2:	75 2a                	jne    c002341e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00233f4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00233f7:	b8 02 00 00 00       	mov    eax,0x2
c00233fc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023402:	74 1c                	je     c0023420 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023404:	b8 04 00 00 00       	mov    eax,0x4
c0023409:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002340f:	74 0f                	je     c0023420 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023411:	31 c0                	xor    eax,eax
c0023413:	83 fa 03             	cmp    edx,0x3
c0023416:	0f 94 c0             	sete   al
c0023419:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002341d:	c3                   	ret    
c002341e:	31 c0                	xor    eax,eax
c0023420:	c3                   	ret    
c0023421:	90                   	nop

c0023422 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023426:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023429:	0f ba e2 0f          	bt     edx,0xf
c002342d:	72 f7                	jb     c0023426 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002342f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023432:	83 ca 10             	or     edx,0x10
c0023435:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023438:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002343b:	83 ca 01             	or     edx,0x1
c002343e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023441:	c3                   	ret    

c0023442 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023442:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023446:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023449:	83 e2 fe             	and    edx,0xfffffffe
c002344c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002344f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023452:	83 e2 ef             	and    edx,0xffffffef
c0023455:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023458:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002345b:	0f ba e2 0e          	bt     edx,0xe
c002345f:	72 f7                	jb     c0023458 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023461:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023464:	0f ba e2 0f          	bt     edx,0xf
c0023468:	72 ee                	jb     c0023458 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002346a:	c3                   	ret    
c002346b:	90                   	nop

c002346c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002346c:	55                   	push   ebp
c002346d:	57                   	push   edi
c002346e:	56                   	push   esi
c002346f:	53                   	push   ebx
c0023470:	83 ec 1c             	sub    esp,0x1c
c0023473:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023477:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002347b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002347f:	53                   	push   ebx
c0023480:	89 fd                	mov    ebp,edi
c0023482:	56                   	push   esi
c0023483:	c1 e5 0a             	shl    ebp,0xa
c0023486:	e8 b7 ff ff ff       	call   c0023442 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002348b:	83 ec 0c             	sub    esp,0xc
c002348e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023494:	01 e8                	add    eax,ebp
c0023496:	89 03                	mov    DWORD PTR [ebx],eax
c0023498:	8b 03                	mov    eax,DWORD PTR [ebx]
c002349a:	68 00 04 00 00       	push   0x400
c002349f:	6a 00                	push   0x0
c00234a1:	50                   	push   eax
c00234a2:	e8 1b d2 fd ff       	call   c00006c2 <memset>
c00234a7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00234ad:	89 fa                	mov    edx,edi
c00234af:	01 e8                	add    eax,ebp
c00234b1:	c1 e7 0d             	shl    edi,0xd
c00234b4:	89 03                	mov    DWORD PTR [ebx],eax
c00234b6:	c1 e2 08             	shl    edx,0x8
c00234b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00234c0:	81 c2 00 80 00 00    	add    edx,0x8000
c00234c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00234ca:	89 d0                	mov    eax,edx
c00234cc:	83 c4 1c             	add    esp,0x1c
c00234cf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00234d5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00234d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00234db:	68 00 01 00 00       	push   0x100
c00234e0:	6a 00                	push   0x0
c00234e2:	50                   	push   eax
c00234e3:	e8 da d1 fd ff       	call   c00006c2 <memset>
c00234e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00234ec:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00234f2:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00234f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00234fc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00234ff:	83 c4 10             	add    esp,0x10
c0023502:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023509:	31 ff                	xor    edi,edi
c002350b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023511:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023517:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002351b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023521:	83 c5 20             	add    ebp,0x20
c0023524:	01 f8                	add    eax,edi
c0023526:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023529:	52                   	push   edx
c002352a:	68 00 01 00 00       	push   0x100
c002352f:	6a 00                	push   0x0
c0023531:	50                   	push   eax
c0023532:	e8 8b d1 fd ff       	call   c00006c2 <memset>
c0023537:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002353b:	83 c4 10             	add    esp,0x10
c002353e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023544:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002354b:	01 f8                	add    eax,edi
c002354d:	81 c7 00 01 00 00    	add    edi,0x100
c0023553:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023556:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002355c:	75 b3                	jne    c0023511 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c002355e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023562:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023566:	83 c4 1c             	add    esp,0x1c
c0023569:	5b                   	pop    ebx
c002356a:	5e                   	pop    esi
c002356b:	5f                   	pop    edi
c002356c:	5d                   	pop    ebp
c002356d:	e9 b0 fe ff ff       	jmp    c0023422 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023572 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023572:	55                   	push   ebp
c0023573:	57                   	push   edi
c0023574:	56                   	push   esi
c0023575:	53                   	push   ebx
c0023576:	31 db                	xor    ebx,ebx
c0023578:	83 ec 0c             	sub    esp,0xc
c002357b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002357f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023583:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023586:	f7 c7 01 00 00 00    	test   edi,0x1
c002358c:	0f 84 aa 00 00 00    	je     c002363c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023592:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023596:	89 d8                	mov    eax,ebx
c0023598:	c1 e0 07             	shl    eax,0x7
c002359b:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00235a2:	55                   	push   ebp
c00235a3:	56                   	push   esi
c00235a4:	e8 31 fe ff ff       	call   c00233da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00235a9:	5a                   	pop    edx
c00235aa:	83 f8 01             	cmp    eax,0x1
c00235ad:	59                   	pop    ecx
c00235ae:	75 30                	jne    c00235e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00235b0:	50                   	push   eax
c00235b1:	50                   	push   eax
c00235b2:	53                   	push   ebx
c00235b3:	68 91 c3 02 c0       	push   0xc002c391
c00235b8:	e8 34 f3 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00235bd:	83 c4 0c             	add    esp,0xc
c00235c0:	53                   	push   ebx
c00235c1:	55                   	push   ebp
c00235c2:	56                   	push   esi
c00235c3:	e8 a4 fe ff ff       	call   c002346c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00235c8:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00235cf:	e8 4e c0 fe ff       	call   c000f622 <malloc>
c00235d4:	89 c5                	mov    ebp,eax
c00235d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00235d9:	e8 e8 0d 00 00       	call   c00243c6 <SATA::SATA()>
c00235de:	eb 33                	jmp    c0023613 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00235e0:	83 f8 04             	cmp    eax,0x4
c00235e3:	75 47                	jne    c002362c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00235e5:	50                   	push   eax
c00235e6:	50                   	push   eax
c00235e7:	53                   	push   ebx
c00235e8:	68 a8 c3 02 c0       	push   0xc002c3a8
c00235ed:	e8 ff f2 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00235f2:	83 c4 0c             	add    esp,0xc
c00235f5:	53                   	push   ebx
c00235f6:	55                   	push   ebp
c00235f7:	56                   	push   esi
c00235f8:	e8 6f fe ff ff       	call   c002346c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00235fd:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023604:	e8 19 c0 fe ff       	call   c000f622 <malloc>
c0023609:	89 c5                	mov    ebp,eax
c002360b:	89 04 24             	mov    DWORD PTR [esp],eax
c002360e:	e8 8b 11 00 00       	call   c002479e <SATAPI::SATAPI()>
c0023613:	5a                   	pop    edx
c0023614:	59                   	pop    ecx
c0023615:	55                   	push   ebp
c0023616:	56                   	push   esi
c0023617:	e8 fc 06 ff ff       	call   c0013d18 <Device::addChild(Device*)>
c002361c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002361f:	56                   	push   esi
c0023620:	6a 00                	push   0x0
c0023622:	53                   	push   ebx
c0023623:	55                   	push   ebp
c0023624:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023627:	83 c4 20             	add    esp,0x20
c002362a:	eb 10                	jmp    c002363c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002362c:	50                   	push   eax
c002362d:	50                   	push   eax
c002362e:	53                   	push   ebx
c002362f:	68 c1 c3 02 c0       	push   0xc002c3c1
c0023634:	e8 b8 f2 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023639:	83 c4 10             	add    esp,0x10
c002363c:	d1 ef                	shr    edi,1
c002363e:	43                   	inc    ebx
c002363f:	83 fb 20             	cmp    ebx,0x20
c0023642:	0f 85 3e ff ff ff    	jne    c0023586 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023648:	83 c4 0c             	add    esp,0xc
c002364b:	5b                   	pop    ebx
c002364c:	5e                   	pop    esi
c002364d:	5f                   	pop    edi
c002364e:	5d                   	pop    ebp
c002364f:	c3                   	ret    

c0023650 <SATABus::open(int, int, void*)>:
c0023650:	83 ec 14             	sub    esp,0x14
c0023653:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023657:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002365d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023663:	52                   	push   edx
c0023664:	50                   	push   eax
c0023665:	e8 08 ff ff ff       	call   c0023572 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002366a:	31 c0                	xor    eax,eax
c002366c:	83 c4 1c             	add    esp,0x1c
c002366f:	c3                   	ret    

c0023670 <ATA::close(int, int, void*)>:
c0023670:	83 ec 0c             	sub    esp,0xc
c0023673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023677:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002367d:	85 c0                	test   eax,eax
c002367f:	74 0c                	je     c002368d <ATA::close(int, int, void*)+0x1d>
c0023681:	83 ec 0c             	sub    esp,0xc
c0023684:	8b 10                	mov    edx,DWORD PTR [eax]
c0023686:	50                   	push   eax
c0023687:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002368a:	83 c4 10             	add    esp,0x10
c002368d:	31 c0                	xor    eax,eax
c002368f:	83 c4 0c             	add    esp,0xc
c0023692:	c3                   	ret    
c0023693:	90                   	nop

c0023694 <ATA::powerSaving(PowerSavingLevel)>:
c0023694:	c3                   	ret    
c0023695:	90                   	nop

c0023696 <ATA::ATA()>:
c0023696:	83 ec 0c             	sub    esp,0xc
c0023699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002369d:	83 ec 04             	sub    esp,0x4
c00236a0:	68 00 02 00 00       	push   0x200
c00236a5:	68 65 c5 02 c0       	push   0xc002c565
c00236aa:	50                   	push   eax
c00236ab:	e8 8c 0a ff ff       	call   c001413c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00236b0:	83 c4 10             	add    esp,0x10
c00236b3:	ba e8 c4 02 c0       	mov    edx,0xc002c4e8
c00236b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236bc:	89 10                	mov    DWORD PTR [eax],edx
c00236be:	90                   	nop
c00236bf:	83 c4 0c             	add    esp,0xc
c00236c2:	c3                   	ret    
c00236c3:	90                   	nop

c00236c4 <ATA::flush(bool)>:
c00236c4:	53                   	push   ebx
c00236c5:	83 ec 08             	sub    esp,0x8
c00236c8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00236cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00236d1:	19 c0                	sbb    eax,eax
c00236d3:	83 e0 fd             	and    eax,0xfffffffd
c00236d6:	05 ea 00 00 00       	add    eax,0xea
c00236db:	50                   	push   eax
c00236dc:	6a 07                	push   0x7
c00236de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236e5:	50                   	push   eax
c00236e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236ec:	e8 dd ef ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236f1:	83 c4 0c             	add    esp,0xc
c00236f4:	6a 00                	push   0x0
c00236f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236fd:	50                   	push   eax
c00236fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023704:	e8 71 fb ff ff       	call   c002327a <IDE::polling(unsigned char, unsigned int)>
c0023709:	83 c4 18             	add    esp,0x18
c002370c:	5b                   	pop    ebx
c002370d:	c3                   	ret    

c002370e <ATA::readyForCommand()>:
c002370e:	56                   	push   esi
c002370f:	53                   	push   ebx
c0023710:	31 db                	xor    ebx,ebx
c0023712:	50                   	push   eax
c0023713:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023717:	50                   	push   eax
c0023718:	6a 0c                	push   0xc
c002371a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023721:	50                   	push   eax
c0023722:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023728:	e8 61 f0 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c002372d:	83 c4 10             	add    esp,0x10
c0023730:	a8 88                	test   al,0x88
c0023732:	74 23                	je     c0023757 <ATA::readyForCommand()+0x49>
c0023734:	43                   	inc    ebx
c0023735:	83 fb 63             	cmp    ebx,0x63
c0023738:	7e dd                	jle    c0023717 <ATA::readyForCommand()+0x9>
c002373a:	51                   	push   ecx
c002373b:	51                   	push   ecx
c002373c:	6a 00                	push   0x0
c002373e:	68 40 42 0f 00       	push   0xf4240
c0023743:	e8 c8 a2 ff ff       	call   c001da10 <nanoSleep(unsigned long long)>
c0023748:	83 c4 10             	add    esp,0x10
c002374b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023751:	75 c4                	jne    c0023717 <ATA::readyForCommand()+0x9>
c0023753:	31 c0                	xor    eax,eax
c0023755:	eb 02                	jmp    c0023759 <ATA::readyForCommand()+0x4b>
c0023757:	b0 01                	mov    al,0x1
c0023759:	5a                   	pop    edx
c002375a:	5b                   	pop    ebx
c002375b:	5e                   	pop    esi
c002375c:	c3                   	ret    
c002375d:	90                   	nop

c002375e <ATA::access(unsigned long long, int, void*, bool)>:
c002375e:	55                   	push   ebp
c002375f:	57                   	push   edi
c0023760:	56                   	push   esi
c0023761:	53                   	push   ebx
c0023762:	83 ec 30             	sub    esp,0x30
c0023765:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0023769:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002376d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023771:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0023775:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0023779:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c002377d:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0023781:	56                   	push   esi
c0023782:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023786:	68 04 c4 02 c0       	push   0xc002c404
c002378b:	e8 61 f1 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023790:	83 c4 10             	add    esp,0x10
c0023793:	83 7c 24 4c 04       	cmp    DWORD PTR [esp+0x4c],0x4
c0023798:	75 16                	jne    c00237b0 <ATA::access(unsigned long long, int, void*, bool)+0x52>
c002379a:	31 ff                	xor    edi,edi
c002379c:	56                   	push   esi
c002379d:	31 f6                	xor    esi,esi
c002379f:	6a 00                	push   0x0
c00237a1:	6a 04                	push   0x4
c00237a3:	68 2f c4 02 c0       	push   0xc002c42f
c00237a8:	e8 44 f1 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00237ad:	83 c4 10             	add    esp,0x10
c00237b0:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00237b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00237ba:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00237c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00237c4:	c1 e0 06             	shl    eax,0x6
c00237c7:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00237cf:	74 61                	je     c0023832 <ATA::access(unsigned long long, int, void*, bool)+0xd4>
c00237d1:	89 fa                	mov    edx,edi
c00237d3:	89 f0                	mov    eax,esi
c00237d5:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00237d9:	c1 ea 1c             	shr    edx,0x1c
c00237dc:	89 d1                	mov    ecx,edx
c00237de:	09 c1                	or     ecx,eax
c00237e0:	74 25                	je     c0023807 <ATA::access(unsigned long long, int, void*, bool)+0xa9>
c00237e2:	31 ed                	xor    ebp,ebp
c00237e4:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00237eb:	89 fa                	mov    edx,edi
c00237ed:	89 f0                	mov    eax,esi
c00237ef:	0f ad d0             	shrd   eax,edx,cl
c00237f2:	d3 ea                	shr    edx,cl
c00237f4:	f6 c1 20             	test   cl,0x20
c00237f7:	74 02                	je     c00237fb <ATA::access(unsigned long long, int, void*, bool)+0x9d>
c00237f9:	89 d0                	mov    eax,edx
c00237fb:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00237ff:	45                   	inc    ebp
c0023800:	83 fd 06             	cmp    ebp,0x6
c0023803:	75 df                	jne    c00237e4 <ATA::access(unsigned long long, int, void*, bool)+0x86>
c0023805:	eb 7a                	jmp    c0023881 <ATA::access(unsigned long long, int, void*, bool)+0x123>
c0023807:	89 fa                	mov    edx,edi
c0023809:	89 f0                	mov    eax,esi
c002380b:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023810:	0f ac d0 10          	shrd   eax,edx,0x10
c0023814:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002381b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002381f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023824:	89 f0                	mov    eax,esi
c0023826:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002382b:	c1 e8 18             	shr    eax,0x18
c002382e:	89 c7                	mov    edi,eax
c0023830:	eb 56                	jmp    c0023888 <ATA::access(unsigned long long, int, void*, bool)+0x12a>
c0023832:	6a 00                	push   0x0
c0023834:	6a 3f                	push   0x3f
c0023836:	57                   	push   edi
c0023837:	56                   	push   esi
c0023838:	e8 0f 2a 00 00       	call   c002624c <__umoddi3>
c002383d:	83 c4 10             	add    esp,0x10
c0023840:	40                   	inc    eax
c0023841:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023845:	6a 00                	push   0x0
c0023847:	68 f0 03 00 00       	push   0x3f0
c002384c:	57                   	push   edi
c002384d:	56                   	push   esi
c002384e:	e8 f9 28 00 00       	call   c002614c <__udivdi3>
c0023853:	83 c4 10             	add    esp,0x10
c0023856:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002385b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023862:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023867:	6a 00                	push   0x0
c0023869:	6a 3f                	push   0x3f
c002386b:	57                   	push   edi
c002386c:	56                   	push   esi
c002386d:	e8 da 28 00 00       	call   c002614c <__udivdi3>
c0023872:	83 c4 10             	add    esp,0x10
c0023875:	89 c7                	mov    edi,eax
c0023877:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002387c:	83 e7 0f             	and    edi,0xf
c002387f:	eb 07                	jmp    c0023888 <ATA::access(unsigned long long, int, void*, bool)+0x12a>
c0023881:	31 ff                	xor    edi,edi
c0023883:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023888:	51                   	push   ecx
c0023889:	6a 00                	push   0x0
c002388b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023892:	50                   	push   eax
c0023893:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023897:	e8 3e f0 ff ff       	call   c00228da <IDE::enableIRQs(unsigned char, bool)>
c002389c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002389f:	e8 6a fe ff ff       	call   c002370e <ATA::readyForCommand()>
c00238a4:	83 c4 10             	add    esp,0x10
c00238a7:	84 c0                	test   al,al
c00238a9:	75 1a                	jne    c00238c5 <ATA::access(unsigned long long, int, void*, bool)+0x167>
c00238ab:	83 ec 0c             	sub    esp,0xc
c00238ae:	be 01 00 00 00       	mov    esi,0x1
c00238b3:	68 62 c4 02 c0       	push   0xc002c462
c00238b8:	e8 34 f0 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00238bd:	83 c4 10             	add    esp,0x10
c00238c0:	e9 9e 02 00 00       	jmp    c0023b63 <ATA::access(unsigned long long, int, void*, bool)+0x405>
c00238c5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00238cb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00238d1:	c1 e0 04             	shl    eax,0x4
c00238d4:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00238db:	09 c7                	or     edi,eax
c00238dd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00238e2:	75 05                	jne    c00238e9 <ATA::access(unsigned long long, int, void*, bool)+0x18b>
c00238e4:	83 cf a0             	or     edi,0xffffffa0
c00238e7:	eb 03                	jmp    c00238ec <ATA::access(unsigned long long, int, void*, bool)+0x18e>
c00238e9:	83 cf e0             	or     edi,0xffffffe0
c00238ec:	89 f8                	mov    eax,edi
c00238ee:	0f b6 f8             	movzx  edi,al
c00238f1:	57                   	push   edi
c00238f2:	6a 06                	push   0x6
c00238f4:	51                   	push   ecx
c00238f5:	52                   	push   edx
c00238f6:	e8 d3 ed ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238fb:	83 c4 10             	add    esp,0x10
c00238fe:	6a 00                	push   0x0
c0023900:	6a 01                	push   0x1
c0023902:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023909:	50                   	push   eax
c002390a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023910:	e8 b9 ed ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023915:	83 c4 10             	add    esp,0x10
c0023918:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002391d:	75 6e                	jne    c002398d <ATA::access(unsigned long long, int, void*, bool)+0x22f>
c002391f:	6a 00                	push   0x0
c0023921:	6a 08                	push   0x8
c0023923:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002392a:	50                   	push   eax
c002392b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023931:	e8 98 ed ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023936:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002393b:	50                   	push   eax
c002393c:	6a 09                	push   0x9
c002393e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023945:	50                   	push   eax
c0023946:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002394c:	e8 7d ed ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023951:	83 c4 20             	add    esp,0x20
c0023954:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023959:	50                   	push   eax
c002395a:	6a 0a                	push   0xa
c002395c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023963:	50                   	push   eax
c0023964:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002396a:	e8 5f ed ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002396f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023974:	50                   	push   eax
c0023975:	6a 0b                	push   0xb
c0023977:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002397e:	50                   	push   eax
c002397f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023985:	e8 44 ed ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002398a:	83 c4 20             	add    esp,0x20
c002398d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023992:	50                   	push   eax
c0023993:	6a 02                	push   0x2
c0023995:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002399c:	50                   	push   eax
c002399d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239a3:	e8 26 ed ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239a8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00239ad:	50                   	push   eax
c00239ae:	6a 03                	push   0x3
c00239b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239b7:	50                   	push   eax
c00239b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239be:	e8 0b ed ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239c3:	83 c4 20             	add    esp,0x20
c00239c6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00239cb:	50                   	push   eax
c00239cc:	6a 04                	push   0x4
c00239ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239d5:	50                   	push   eax
c00239d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239dc:	e8 ed ec ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00239e6:	50                   	push   eax
c00239e7:	6a 05                	push   0x5
c00239e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239f0:	50                   	push   eax
c00239f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239f7:	e8 d2 ec ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239fc:	83 c4 20             	add    esp,0x20
c00239ff:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023a04:	0f 94 c0             	sete   al
c0023a07:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023a0c:	74 09                	je     c0023a17 <ATA::access(unsigned long long, int, void*, bool)+0x2b9>
c0023a0e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023a15:	eb 07                	jmp    c0023a1e <ATA::access(unsigned long long, int, void*, bool)+0x2c0>
c0023a17:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023a1e:	0f b6 c0             	movzx  eax,al
c0023a21:	50                   	push   eax
c0023a22:	6a 07                	push   0x7
c0023a24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a2b:	50                   	push   eax
c0023a2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a32:	e8 97 ec ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a37:	58                   	pop    eax
c0023a38:	5a                   	pop    edx
c0023a39:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023a3d:	68 71 c4 02 c0       	push   0xc002c471
c0023a42:	e8 aa ee fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023a47:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0023a4b:	83 c4 10             	add    esp,0x10
c0023a4e:	8d 70 ff             	lea    esi,[eax-0x1]
c0023a51:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0023a55:	83 fe ff             	cmp    esi,0xffffffff
c0023a58:	0f 84 ca 00 00 00    	je     c0023b28 <ATA::access(unsigned long long, int, void*, bool)+0x3ca>
c0023a5e:	50                   	push   eax
c0023a5f:	56                   	push   esi
c0023a60:	57                   	push   edi
c0023a61:	68 7d c4 02 c0       	push   0xc002c47d
c0023a66:	e8 86 ee fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023a6b:	83 c4 0c             	add    esp,0xc
c0023a6e:	6a 01                	push   0x1
c0023a70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a77:	50                   	push   eax
c0023a78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a7e:	e8 f7 f7 ff ff       	call   c002327a <IDE::polling(unsigned char, unsigned int)>
c0023a83:	83 c4 10             	add    esp,0x10
c0023a86:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023a8c:	84 c0                	test   al,al
c0023a8e:	74 2f                	je     c0023abf <ATA::access(unsigned long long, int, void*, bool)+0x361>
c0023a90:	0f b6 f0             	movzx  esi,al
c0023a93:	56                   	push   esi
c0023a94:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023a9b:	50                   	push   eax
c0023a9c:	0f b6 c2             	movzx  eax,dl
c0023a9f:	50                   	push   eax
c0023aa0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023aa6:	e8 39 f6 ff ff       	call   c00230e4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023aab:	c7 04 24 aa c4 02 c0 	mov    DWORD PTR [esp],0xc002c4aa
c0023ab2:	e8 3a ee fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023ab7:	83 c4 10             	add    esp,0x10
c0023aba:	e9 a4 00 00 00       	jmp    c0023b63 <ATA::access(unsigned long long, int, void*, bool)+0x405>
c0023abf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023ac4:	74 41                	je     c0023b07 <ATA::access(unsigned long long, int, void*, bool)+0x3a9>
c0023ac6:	31 c9                	xor    ecx,ecx
c0023ac8:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0023acc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023ad0:	50                   	push   eax
c0023ad1:	50                   	push   eax
c0023ad2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ad9:	50                   	push   eax
c0023ada:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ae0:	e8 d7 eb ff ff       	call   c00226bc <IDE::getBase(unsigned char)>
c0023ae5:	89 c2                	mov    edx,eax
c0023ae7:	89 e8                	mov    eax,ebp
c0023ae9:	66 ef                	out    dx,ax
c0023aeb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023aef:	83 c4 10             	add    esp,0x10
c0023af2:	41                   	inc    ecx
c0023af3:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023af9:	75 cd                	jne    c0023ac8 <ATA::access(unsigned long long, int, void*, bool)+0x36a>
c0023afb:	81 c7 00 02 00 00    	add    edi,0x200
c0023b01:	4e                   	dec    esi
c0023b02:	e9 4e ff ff ff       	jmp    c0023a55 <ATA::access(unsigned long long, int, void*, bool)+0x2f7>
c0023b07:	0f b6 c2             	movzx  eax,dl
c0023b0a:	51                   	push   ecx
c0023b0b:	51                   	push   ecx
c0023b0c:	50                   	push   eax
c0023b0d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b13:	e8 a4 eb ff ff       	call   c00226bc <IDE::getBase(unsigned char)>
c0023b18:	b9 00 01 00 00       	mov    ecx,0x100
c0023b1d:	89 c2                	mov    edx,eax
c0023b1f:	fc                   	cld    
c0023b20:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023b23:	83 c4 10             	add    esp,0x10
c0023b26:	eb d9                	jmp    c0023b01 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c0023b28:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023b2d:	74 16                	je     c0023b45 <ATA::access(unsigned long long, int, void*, bool)+0x3e7>
c0023b2f:	31 c0                	xor    eax,eax
c0023b31:	52                   	push   edx
c0023b32:	52                   	push   edx
c0023b33:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023b38:	0f 94 c0             	sete   al
c0023b3b:	50                   	push   eax
c0023b3c:	53                   	push   ebx
c0023b3d:	e8 82 fb ff ff       	call   c00236c4 <ATA::flush(bool)>
c0023b42:	83 c4 10             	add    esp,0x10
c0023b45:	31 f6                	xor    esi,esi
c0023b47:	83 7c 24 4c 01       	cmp    DWORD PTR [esp+0x4c],0x1
c0023b4c:	74 15                	je     c0023b63 <ATA::access(unsigned long long, int, void*, bool)+0x405>
c0023b4e:	50                   	push   eax
c0023b4f:	50                   	push   eax
c0023b50:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0023b54:	68 b5 c4 02 c0       	push   0xc002c4b5
c0023b59:	e8 93 ed fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0023b5e:	83 c4 10             	add    esp,0x10
c0023b61:	eb fe                	jmp    c0023b61 <ATA::access(unsigned long long, int, void*, bool)+0x403>
c0023b63:	83 c4 2c             	add    esp,0x2c
c0023b66:	89 f0                	mov    eax,esi
c0023b68:	5b                   	pop    ebx
c0023b69:	5e                   	pop    esi
c0023b6a:	5f                   	pop    edi
c0023b6b:	5d                   	pop    ebp
c0023b6c:	c3                   	ret    
c0023b6d:	90                   	nop

c0023b6e <ATA::read(unsigned long long, int, void*)>:
c0023b6e:	57                   	push   edi
c0023b6f:	b8 04 00 00 00       	mov    eax,0x4
c0023b74:	56                   	push   esi
c0023b75:	53                   	push   ebx
c0023b76:	83 ec 10             	sub    esp,0x10
c0023b79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023b7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023b81:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023b84:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023b88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023b8c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023b92:	77 3b                	ja     c0023bcf <ATA::read(unsigned long long, int, void*)+0x61>
c0023b94:	b8 06 00 00 00       	mov    eax,0x6
c0023b99:	85 d2                	test   edx,edx
c0023b9b:	74 32                	je     c0023bcf <ATA::read(unsigned long long, int, void*)+0x61>
c0023b9d:	50                   	push   eax
c0023b9e:	50                   	push   eax
c0023b9f:	6a 00                	push   0x0
c0023ba1:	52                   	push   edx
c0023ba2:	53                   	push   ebx
c0023ba3:	57                   	push   edi
c0023ba4:	56                   	push   esi
c0023ba5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023ba9:	e8 b0 fb ff ff       	call   c002375e <ATA::access(unsigned long long, int, void*, bool)>
c0023bae:	83 c4 20             	add    esp,0x20
c0023bb1:	85 c0                	test   eax,eax
c0023bb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023bb7:	75 11                	jne    c0023bca <ATA::read(unsigned long long, int, void*)+0x5c>
c0023bb9:	01 1d 28 1e 03 c0    	add    DWORD PTR ds:0xc0031e28,ebx
c0023bbf:	e8 92 cb fe ff       	call   c0010756 <VgaText::updateDiskUsage()>
c0023bc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023bc8:	eb 05                	jmp    c0023bcf <ATA::read(unsigned long long, int, void*)+0x61>
c0023bca:	b8 01 00 00 00       	mov    eax,0x1
c0023bcf:	83 c4 10             	add    esp,0x10
c0023bd2:	5b                   	pop    ebx
c0023bd3:	5e                   	pop    esi
c0023bd4:	5f                   	pop    edi
c0023bd5:	c3                   	ret    

c0023bd6 <ATA::write(unsigned long long, int, void*)>:
c0023bd6:	57                   	push   edi
c0023bd7:	b8 04 00 00 00       	mov    eax,0x4
c0023bdc:	56                   	push   esi
c0023bdd:	53                   	push   ebx
c0023bde:	83 ec 10             	sub    esp,0x10
c0023be1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023be9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023bec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023bf0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023bf4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023bfa:	77 3b                	ja     c0023c37 <ATA::write(unsigned long long, int, void*)+0x61>
c0023bfc:	b8 06 00 00 00       	mov    eax,0x6
c0023c01:	85 d2                	test   edx,edx
c0023c03:	74 32                	je     c0023c37 <ATA::write(unsigned long long, int, void*)+0x61>
c0023c05:	50                   	push   eax
c0023c06:	50                   	push   eax
c0023c07:	6a 01                	push   0x1
c0023c09:	52                   	push   edx
c0023c0a:	53                   	push   ebx
c0023c0b:	57                   	push   edi
c0023c0c:	56                   	push   esi
c0023c0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023c11:	e8 48 fb ff ff       	call   c002375e <ATA::access(unsigned long long, int, void*, bool)>
c0023c16:	83 c4 20             	add    esp,0x20
c0023c19:	85 c0                	test   eax,eax
c0023c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023c1f:	75 11                	jne    c0023c32 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023c21:	01 1d 24 1e 03 c0    	add    DWORD PTR ds:0xc0031e24,ebx
c0023c27:	e8 2a cb fe ff       	call   c0010756 <VgaText::updateDiskUsage()>
c0023c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c30:	eb 05                	jmp    c0023c37 <ATA::write(unsigned long long, int, void*)+0x61>
c0023c32:	b8 01 00 00 00       	mov    eax,0x1
c0023c37:	83 c4 10             	add    esp,0x10
c0023c3a:	5b                   	pop    ebx
c0023c3b:	5e                   	pop    esi
c0023c3c:	5f                   	pop    edi
c0023c3d:	c3                   	ret    

c0023c3e <ATA::detectCHS()>:
c0023c3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023c42:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023c48:	c1 e0 06             	shl    eax,0x6
c0023c4b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023c51:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023c5b:	c7 44 24 04 cd c4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c4cd
c0023c63:	e9 fd 61 ff ff       	jmp    c0019e65 <Krnl::panic(char const*)>

c0023c68 <ATA::open(int, int, void*)>:
c0023c68:	53                   	push   ebx
c0023c69:	83 ec 08             	sub    esp,0x8
c0023c6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c78:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023c7e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023c84:	c1 e0 06             	shl    eax,0x6
c0023c87:	01 d0                	add    eax,edx
c0023c89:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023c90:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023c96:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023c9d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023ca7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023cad:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0023cb4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023cbb:	75 0c                	jne    c0023cc9 <ATA::open(int, int, void*)+0x61>
c0023cbd:	83 ec 0c             	sub    esp,0xc
c0023cc0:	53                   	push   ebx
c0023cc1:	e8 78 ff ff ff       	call   c0023c3e <ATA::detectCHS()>
c0023cc6:	83 c4 10             	add    esp,0x10
c0023cc9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023ccf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023cd5:	c1 e0 06             	shl    eax,0x6
c0023cd8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023cdf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023ce9:	d1 e8                	shr    eax,1
c0023ceb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023cf1:	6a 04                	push   0x4
c0023cf3:	6a 0c                	push   0xc
c0023cf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cfc:	50                   	push   eax
c0023cfd:	52                   	push   edx
c0023cfe:	e8 cb e9 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d03:	90                   	nop
c0023d04:	90                   	nop
c0023d05:	6a 00                	push   0x0
c0023d07:	6a 0c                	push   0xc
c0023d09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d10:	50                   	push   eax
c0023d11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d17:	e8 b2 e9 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d1c:	83 c4 14             	add    esp,0x14
c0023d1f:	53                   	push   ebx
c0023d20:	e8 7f 04 ff ff       	call   c00141a4 <PhysicalDisk::startCache()>
c0023d25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d28:	e8 99 25 ff ff       	call   c00162c6 <createPartitionsForDisk(PhysicalDisk*)>
c0023d2d:	31 c0                	xor    eax,eax
c0023d2f:	83 c4 18             	add    esp,0x18
c0023d32:	5b                   	pop    ebx
c0023d33:	c3                   	ret    

c0023d34 <ATAPI::write(unsigned long long, int, void*)>:
c0023d34:	b8 03 00 00 00       	mov    eax,0x3
c0023d39:	c3                   	ret    

c0023d3a <ATAPI::close(int, int, void*)>:
c0023d3a:	83 ec 0c             	sub    esp,0xc
c0023d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d41:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d47:	85 c0                	test   eax,eax
c0023d49:	74 0c                	je     c0023d57 <ATAPI::close(int, int, void*)+0x1d>
c0023d4b:	83 ec 0c             	sub    esp,0xc
c0023d4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d50:	50                   	push   eax
c0023d51:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d54:	83 c4 10             	add    esp,0x10
c0023d57:	31 c0                	xor    eax,eax
c0023d59:	83 c4 0c             	add    esp,0xc
c0023d5c:	c3                   	ret    
c0023d5d:	90                   	nop

c0023d5e <ATAPI::ATAPI()>:
c0023d5e:	83 ec 0c             	sub    esp,0xc
c0023d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d65:	83 ec 04             	sub    esp,0x4
c0023d68:	68 00 08 00 00       	push   0x800
c0023d6d:	68 cd c5 02 c0       	push   0xc002c5cd
c0023d72:	50                   	push   eax
c0023d73:	e8 c4 03 ff ff       	call   c001413c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d78:	83 c4 10             	add    esp,0x10
c0023d7b:	ba 20 c5 02 c0       	mov    edx,0xc002c520
c0023d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d84:	89 10                	mov    DWORD PTR [eax],edx
c0023d86:	90                   	nop
c0023d87:	83 c4 0c             	add    esp,0xc
c0023d8a:	c3                   	ret    
c0023d8b:	90                   	nop

c0023d8c <ATAPI::readyForCommand()>:
c0023d8c:	56                   	push   esi
c0023d8d:	53                   	push   ebx
c0023d8e:	31 db                	xor    ebx,ebx
c0023d90:	50                   	push   eax
c0023d91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023d95:	50                   	push   eax
c0023d96:	6a 0c                	push   0xc
c0023d98:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023d9f:	50                   	push   eax
c0023da0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023da6:	e8 e3 e9 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0023dab:	83 c4 10             	add    esp,0x10
c0023dae:	a8 88                	test   al,0x88
c0023db0:	74 23                	je     c0023dd5 <ATAPI::readyForCommand()+0x49>
c0023db2:	43                   	inc    ebx
c0023db3:	83 fb 63             	cmp    ebx,0x63
c0023db6:	7e dd                	jle    c0023d95 <ATAPI::readyForCommand()+0x9>
c0023db8:	51                   	push   ecx
c0023db9:	51                   	push   ecx
c0023dba:	6a 00                	push   0x0
c0023dbc:	68 40 42 0f 00       	push   0xf4240
c0023dc1:	e8 4a 9c ff ff       	call   c001da10 <nanoSleep(unsigned long long)>
c0023dc6:	83 c4 10             	add    esp,0x10
c0023dc9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023dcf:	75 c4                	jne    c0023d95 <ATAPI::readyForCommand()+0x9>
c0023dd1:	31 c0                	xor    eax,eax
c0023dd3:	eb 02                	jmp    c0023dd7 <ATAPI::readyForCommand()+0x4b>
c0023dd5:	b0 01                	mov    al,0x1
c0023dd7:	5a                   	pop    edx
c0023dd8:	5b                   	pop    ebx
c0023dd9:	5e                   	pop    esi
c0023dda:	c3                   	ret    
c0023ddb:	90                   	nop

c0023ddc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023ddc:	55                   	push   ebp
c0023ddd:	57                   	push   edi
c0023dde:	56                   	push   esi
c0023ddf:	53                   	push   ebx
c0023de0:	83 ec 20             	sub    esp,0x20
c0023de3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023de7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023deb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023def:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023df3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023df7:	6a 01                	push   0x1
c0023df9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e00:	50                   	push   eax
c0023e01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e07:	e8 ce ea ff ff       	call   c00228da <IDE::enableIRQs(unsigned char, bool)>
c0023e0c:	5e                   	pop    esi
c0023e0d:	58                   	pop    eax
c0023e0e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e15:	50                   	push   eax
c0023e16:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e1c:	e8 87 e8 ff ff       	call   c00226a8 <IDE::prepareInterrupt(unsigned char)>
c0023e21:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023e24:	e8 63 ff ff ff       	call   c0023d8c <ATAPI::readyForCommand()>
c0023e29:	83 c4 10             	add    esp,0x10
c0023e2c:	84 c0                	test   al,al
c0023e2e:	75 0a                	jne    c0023e3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023e30:	bb 01 00 00 00       	mov    ebx,0x1
c0023e35:	e9 57 02 00 00       	jmp    c0024091 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023e3a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023e40:	c1 e0 04             	shl    eax,0x4
c0023e43:	0f b6 c0             	movzx  eax,al
c0023e46:	50                   	push   eax
c0023e47:	6a 06                	push   0x6
c0023e49:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e50:	50                   	push   eax
c0023e51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e57:	e8 72 e8 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e5c:	6a 00                	push   0x0
c0023e5e:	6a 01                	push   0x1
c0023e60:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e67:	50                   	push   eax
c0023e68:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e6e:	e8 5b e8 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e73:	83 c4 20             	add    esp,0x20
c0023e76:	0f b6 c3             	movzx  eax,bl
c0023e79:	0f b6 df             	movzx  ebx,bh
c0023e7c:	50                   	push   eax
c0023e7d:	6a 04                	push   0x4
c0023e7f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e86:	50                   	push   eax
c0023e87:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023e8d:	e8 3c e8 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e92:	53                   	push   ebx
c0023e93:	6a 05                	push   0x5
c0023e95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023e9c:	50                   	push   eax
c0023e9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ea3:	e8 26 e8 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ea8:	83 c4 20             	add    esp,0x20
c0023eab:	68 a0 00 00 00       	push   0xa0
c0023eb0:	6a 07                	push   0x7
c0023eb2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023eb9:	50                   	push   eax
c0023eba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ec0:	e8 09 e8 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ec5:	83 c4 0c             	add    esp,0xc
c0023ec8:	6a 01                	push   0x1
c0023eca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023ed1:	50                   	push   eax
c0023ed2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ed8:	e8 9d f3 ff ff       	call   c002327a <IDE::polling(unsigned char, unsigned int)>
c0023edd:	83 c4 10             	add    esp,0x10
c0023ee0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023ee6:	84 c0                	test   al,al
c0023ee8:	74 23                	je     c0023f0d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023eea:	0f b6 d8             	movzx  ebx,al
c0023eed:	0f b6 d2             	movzx  edx,dl
c0023ef0:	53                   	push   ebx
c0023ef1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023ef8:	50                   	push   eax
c0023ef9:	52                   	push   edx
c0023efa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f00:	e8 df f1 ff ff       	call   c00230e4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023f05:	83 c4 10             	add    esp,0x10
c0023f08:	e9 84 01 00 00       	jmp    c0024091 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023f0d:	0f b6 d2             	movzx  edx,dl
c0023f10:	53                   	push   ebx
c0023f11:	53                   	push   ebx
c0023f12:	52                   	push   edx
c0023f13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f19:	e8 9e e7 ff ff       	call   c00226bc <IDE::getBase(unsigned char)>
c0023f1e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f22:	b9 06 00 00 00       	mov    ecx,0x6
c0023f27:	89 c2                	mov    edx,eax
c0023f29:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023f2c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023f30:	83 c4 10             	add    esp,0x10
c0023f33:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023f39:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023f40:	85 db                	test   ebx,ebx
c0023f42:	0f 84 ec 00 00 00    	je     c0024034 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023f48:	51                   	push   ecx
c0023f49:	51                   	push   ecx
c0023f4a:	52                   	push   edx
c0023f4b:	50                   	push   eax
c0023f4c:	e8 eb e8 ff ff       	call   c002283c <IDE::waitInterrupt(unsigned char)>
c0023f51:	83 c4 10             	add    esp,0x10
c0023f54:	84 c0                	test   al,al
c0023f56:	0f 84 d4 fe ff ff    	je     c0023e30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023f5c:	56                   	push   esi
c0023f5d:	56                   	push   esi
c0023f5e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f65:	50                   	push   eax
c0023f66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f6c:	e8 37 e7 ff ff       	call   c00226a8 <IDE::prepareInterrupt(unsigned char)>
c0023f71:	83 c4 0c             	add    esp,0xc
c0023f74:	6a 04                	push   0x4
c0023f76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f7d:	50                   	push   eax
c0023f7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f84:	e8 05 e8 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0023f89:	83 c4 0c             	add    esp,0xc
c0023f8c:	89 c6                	mov    esi,eax
c0023f8e:	6a 05                	push   0x5
c0023f90:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f97:	50                   	push   eax
c0023f98:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f9e:	e8 eb e7 ff ff       	call   c002278e <IDE::read(unsigned char, unsigned char)>
c0023fa3:	89 f1                	mov    ecx,esi
c0023fa5:	0f b6 c0             	movzx  eax,al
c0023fa8:	0f b6 f1             	movzx  esi,cl
c0023fab:	c1 e0 08             	shl    eax,0x8
c0023fae:	09 c6                	or     esi,eax
c0023fb0:	d1 fe                	sar    esi,1
c0023fb2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023fb6:	83 c4 10             	add    esp,0x10
c0023fb9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023fbe:	74 41                	je     c0024001 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023fc0:	31 c9                	xor    ecx,ecx
c0023fc2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023fc8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023fcf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023fd3:	75 0a                	jne    c0023fdf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023fd5:	01 c9                	add    ecx,ecx
c0023fd7:	01 cd                	add    ebp,ecx
c0023fd9:	4b                   	dec    ebx
c0023fda:	e9 54 ff ff ff       	jmp    c0023f33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023fdf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023fe8:	51                   	push   ecx
c0023fe9:	51                   	push   ecx
c0023fea:	52                   	push   edx
c0023feb:	50                   	push   eax
c0023fec:	e8 cb e6 ff ff       	call   c00226bc <IDE::getBase(unsigned char)>
c0023ff1:	89 c2                	mov    edx,eax
c0023ff3:	89 f0                	mov    eax,esi
c0023ff5:	66 ef                	out    dx,ax
c0023ff7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023ffb:	83 c4 10             	add    esp,0x10
c0023ffe:	41                   	inc    ecx
c0023fff:	eb c1                	jmp    c0023fc2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024001:	31 f6                	xor    esi,esi
c0024003:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024009:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024010:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024014:	75 06                	jne    c002401c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024016:	01 f6                	add    esi,esi
c0024018:	01 f5                	add    ebp,esi
c002401a:	eb bd                	jmp    c0023fd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002401c:	51                   	push   ecx
c002401d:	51                   	push   ecx
c002401e:	52                   	push   edx
c002401f:	50                   	push   eax
c0024020:	e8 97 e6 ff ff       	call   c00226bc <IDE::getBase(unsigned char)>
c0024025:	89 c2                	mov    edx,eax
c0024027:	66 ed                	in     ax,dx
c0024029:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002402e:	83 c4 10             	add    esp,0x10
c0024031:	46                   	inc    esi
c0024032:	eb cf                	jmp    c0024003 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024034:	51                   	push   ecx
c0024035:	51                   	push   ecx
c0024036:	52                   	push   edx
c0024037:	50                   	push   eax
c0024038:	e8 ff e7 ff ff       	call   c002283c <IDE::waitInterrupt(unsigned char)>
c002403d:	83 c4 10             	add    esp,0x10
c0024040:	84 c0                	test   al,al
c0024042:	0f 84 e8 fd ff ff    	je     c0023e30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024048:	bb a0 86 01 00       	mov    ebx,0x186a0
c002404d:	52                   	push   edx
c002404e:	52                   	push   edx
c002404f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024056:	50                   	push   eax
c0024057:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002405d:	e8 46 e6 ff ff       	call   c00226a8 <IDE::prepareInterrupt(unsigned char)>
c0024062:	83 c4 10             	add    esp,0x10
c0024065:	50                   	push   eax
c0024066:	50                   	push   eax
c0024067:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002406e:	50                   	push   eax
c002406f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024075:	e8 42 e6 ff ff       	call   c00226bc <IDE::getBase(unsigned char)>
c002407a:	8d 50 07             	lea    edx,[eax+0x7]
c002407d:	ec                   	in     al,dx
c002407e:	83 c4 10             	add    esp,0x10
c0024081:	a8 88                	test   al,0x88
c0024083:	74 0a                	je     c002408f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024085:	4b                   	dec    ebx
c0024086:	75 dd                	jne    c0024065 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024088:	bb 02 00 00 00       	mov    ebx,0x2
c002408d:	eb 02                	jmp    c0024091 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002408f:	31 db                	xor    ebx,ebx
c0024091:	83 c4 1c             	add    esp,0x1c
c0024094:	89 d8                	mov    eax,ebx
c0024096:	5b                   	pop    ebx
c0024097:	5e                   	pop    esi
c0024098:	5f                   	pop    edi
c0024099:	5d                   	pop    ebp
c002409a:	c3                   	ret    
c002409b:	90                   	nop

c002409c <ATAPI::diskRemoved()>:
c002409c:	83 ec 18             	sub    esp,0x18
c002409f:	68 d9 c5 02 c0       	push   0xc002c5d9
c00240a4:	e8 48 e8 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00240a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00240ad:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00240b4:	83 c4 1c             	add    esp,0x1c
c00240b7:	c3                   	ret    

c00240b8 <ATAPI::eject()>:
c00240b8:	57                   	push   edi
c00240b9:	b9 03 00 00 00       	mov    ecx,0x3
c00240be:	53                   	push   ebx
c00240bf:	83 ec 14             	sub    esp,0x14
c00240c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00240c6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00240ca:	fc                   	cld    
c00240cb:	31 c0                	xor    eax,eax
c00240cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00240cf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00240d4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00240d9:	50                   	push   eax
c00240da:	50                   	push   eax
c00240db:	6a 00                	push   0x0
c00240dd:	6a 00                	push   0x0
c00240df:	6a 00                	push   0x0
c00240e1:	6a 02                	push   0x2
c00240e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00240e7:	50                   	push   eax
c00240e8:	53                   	push   ebx
c00240e9:	e8 ee fc ff ff       	call   c0023ddc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00240ee:	83 c4 14             	add    esp,0x14
c00240f1:	53                   	push   ebx
c00240f2:	e8 a5 ff ff ff       	call   c002409c <ATAPI::diskRemoved()>
c00240f7:	83 c4 24             	add    esp,0x24
c00240fa:	31 c0                	xor    eax,eax
c00240fc:	5b                   	pop    ebx
c00240fd:	5f                   	pop    edi
c00240fe:	c3                   	ret    
c00240ff:	90                   	nop

c0024100 <ATAPI::diskInserted()>:
c0024100:	53                   	push   ebx
c0024101:	83 ec 14             	sub    esp,0x14
c0024104:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024108:	68 f0 c5 02 c0       	push   0xc002c5f0
c002410d:	e8 df e7 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0024112:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024119:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002411c:	e8 83 00 ff ff       	call   c00141a4 <PhysicalDisk::startCache()>
c0024121:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024125:	83 c4 18             	add    esp,0x18
c0024128:	5b                   	pop    ebx
c0024129:	e9 98 21 ff ff       	jmp    c00162c6 <createPartitionsForDisk(PhysicalDisk*)>

c002412e <ATAPI::detectMedia()>:
c002412e:	56                   	push   esi
c002412f:	53                   	push   ebx
c0024130:	83 ec 28             	sub    esp,0x28
c0024133:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024137:	6a 0c                	push   0xc
c0024139:	6a 00                	push   0x0
c002413b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002413f:	56                   	push   esi
c0024140:	e8 7d c5 fd ff       	call   c00006c2 <memset>
c0024145:	58                   	pop    eax
c0024146:	5a                   	pop    edx
c0024147:	6a 00                	push   0x0
c0024149:	6a 00                	push   0x0
c002414b:	6a 00                	push   0x0
c002414d:	6a 00                	push   0x0
c002414f:	56                   	push   esi
c0024150:	53                   	push   ebx
c0024151:	e8 86 fc ff ff       	call   c0023ddc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024156:	83 c4 1c             	add    esp,0x1c
c0024159:	6a 0c                	push   0xc
c002415b:	6a 00                	push   0x0
c002415d:	56                   	push   esi
c002415e:	e8 5f c5 fd ff       	call   c00006c2 <memset>
c0024163:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024168:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002416d:	59                   	pop    ecx
c002416e:	58                   	pop    eax
c002416f:	6a 01                	push   0x1
c0024171:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024175:	50                   	push   eax
c0024176:	6a 00                	push   0x0
c0024178:	6a 12                	push   0x12
c002417a:	56                   	push   esi
c002417b:	53                   	push   ebx
c002417c:	e8 5b fc ff ff       	call   c0023ddc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024181:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024185:	83 c4 20             	add    esp,0x20
c0024188:	83 e0 7f             	and    eax,0x7f
c002418b:	3c 70                	cmp    al,0x70
c002418d:	74 15                	je     c00241a4 <ATAPI::detectMedia()+0x76>
c002418f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024196:	75 0c                	jne    c00241a4 <ATAPI::detectMedia()+0x76>
c0024198:	83 ec 0c             	sub    esp,0xc
c002419b:	53                   	push   ebx
c002419c:	e8 5f ff ff ff       	call   c0024100 <ATAPI::diskInserted()>
c00241a1:	83 c4 10             	add    esp,0x10
c00241a4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00241a8:	83 e0 0f             	and    eax,0xf
c00241ab:	3c 02                	cmp    al,0x2
c00241ad:	75 1b                	jne    c00241ca <ATAPI::detectMedia()+0x9c>
c00241af:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00241b4:	75 2d                	jne    c00241e3 <ATAPI::detectMedia()+0xb5>
c00241b6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00241bd:	74 24                	je     c00241e3 <ATAPI::detectMedia()+0xb5>
c00241bf:	83 ec 0c             	sub    esp,0xc
c00241c2:	53                   	push   ebx
c00241c3:	e8 d4 fe ff ff       	call   c002409c <ATAPI::diskRemoved()>
c00241c8:	eb 16                	jmp    c00241e0 <ATAPI::detectMedia()+0xb2>
c00241ca:	84 c0                	test   al,al
c00241cc:	75 15                	jne    c00241e3 <ATAPI::detectMedia()+0xb5>
c00241ce:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00241d5:	75 0c                	jne    c00241e3 <ATAPI::detectMedia()+0xb5>
c00241d7:	83 ec 0c             	sub    esp,0xc
c00241da:	53                   	push   ebx
c00241db:	e8 20 ff ff ff       	call   c0024100 <ATAPI::diskInserted()>
c00241e0:	83 c4 10             	add    esp,0x10
c00241e3:	83 c4 24             	add    esp,0x24
c00241e6:	5b                   	pop    ebx
c00241e7:	5e                   	pop    esi
c00241e8:	c3                   	ret    
c00241e9:	90                   	nop

c00241ea <ATAPI::open(int, int, void*)>:
c00241ea:	53                   	push   ebx
c00241eb:	83 ec 08             	sub    esp,0x8
c00241ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00241f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241fa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024200:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024206:	c1 e0 06             	shl    eax,0x6
c0024209:	01 d0                	add    eax,edx
c002420b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024212:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024218:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002421f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024229:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002422f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024236:	6a 04                	push   0x4
c0024238:	6a 0c                	push   0xc
c002423a:	51                   	push   ecx
c002423b:	52                   	push   edx
c002423c:	e8 8d e4 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024241:	90                   	nop
c0024242:	90                   	nop
c0024243:	6a 00                	push   0x0
c0024245:	6a 0c                	push   0xc
c0024247:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002424e:	50                   	push   eax
c002424f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024255:	e8 74 e4 ff ff       	call   c00226ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002425a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024261:	83 c4 14             	add    esp,0x14
c0024264:	53                   	push   ebx
c0024265:	e8 c4 fe ff ff       	call   c002412e <ATAPI::detectMedia()>
c002426a:	31 c0                	xor    eax,eax
c002426c:	83 c4 18             	add    esp,0x18
c002426f:	5b                   	pop    ebx
c0024270:	c3                   	ret    
c0024271:	90                   	nop

c0024272 <ATAPI::read(unsigned long long, int, void*)>:
c0024272:	55                   	push   ebp
c0024273:	57                   	push   edi
c0024274:	56                   	push   esi
c0024275:	53                   	push   ebx
c0024276:	83 ec 1c             	sub    esp,0x1c
c0024279:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002427d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024281:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024285:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002428c:	74 41                	je     c00242cf <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002428e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024292:	b9 03 00 00 00       	mov    ecx,0x3
c0024297:	fc                   	cld    
c0024298:	31 c0                	xor    eax,eax
c002429a:	86 fb                	xchg   bl,bh
c002429c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002429e:	c1 c3 10             	rol    ebx,0x10
c00242a1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00242a6:	89 e8                	mov    eax,ebp
c00242a8:	86 fb                	xchg   bl,bh
c00242aa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00242ae:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00242b2:	50                   	push   eax
c00242b3:	50                   	push   eax
c00242b4:	55                   	push   ebp
c00242b5:	c1 e5 0b             	shl    ebp,0xb
c00242b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00242bc:	6a 00                	push   0x0
c00242be:	55                   	push   ebp
c00242bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00242c3:	50                   	push   eax
c00242c4:	56                   	push   esi
c00242c5:	e8 12 fb ff ff       	call   c0023ddc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00242ca:	83 c4 20             	add    esp,0x20
c00242cd:	eb 1a                	jmp    c00242e9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00242cf:	83 ec 0c             	sub    esp,0xc
c00242d2:	56                   	push   esi
c00242d3:	e8 56 fe ff ff       	call   c002412e <ATAPI::detectMedia()>
c00242d8:	83 c4 10             	add    esp,0x10
c00242db:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00242e2:	75 aa                	jne    c002428e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00242e4:	b8 02 00 00 00       	mov    eax,0x2
c00242e9:	83 c4 1c             	add    esp,0x1c
c00242ec:	5b                   	pop    ebx
c00242ed:	5e                   	pop    esi
c00242ee:	5f                   	pop    edi
c00242ef:	5d                   	pop    ebp
c00242f0:	c3                   	ret    
c00242f1:	90                   	nop

c00242f2 <SATA::close(int, int, void*)>:
c00242f2:	83 ec 0c             	sub    esp,0xc
c00242f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242f9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00242ff:	85 c0                	test   eax,eax
c0024301:	74 0c                	je     c002430f <SATA::close(int, int, void*)+0x1d>
c0024303:	83 ec 0c             	sub    esp,0xc
c0024306:	8b 10                	mov    edx,DWORD PTR [eax]
c0024308:	50                   	push   eax
c0024309:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002430c:	83 c4 10             	add    esp,0x10
c002430f:	31 c0                	xor    eax,eax
c0024311:	83 c4 0c             	add    esp,0xc
c0024314:	c3                   	ret    
c0024315:	90                   	nop

c0024316 <SATA::powerSaving(PowerSavingLevel)>:
c0024316:	c3                   	ret    
c0024317:	90                   	nop

c0024318 <SATA::open(int, int, void*)>:
c0024318:	56                   	push   esi
c0024319:	53                   	push   ebx
c002431a:	50                   	push   eax
c002431b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002431f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024323:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002432d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024333:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002433d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024341:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002434b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024351:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024358:	e8 62 b9 fe ff       	call   c000fcbf <Phys::allocatePage()>
c002435d:	89 c6                	mov    esi,eax
c002435f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024365:	81 c6 00 10 00 00    	add    esi,0x1000
c002436b:	e8 4f b9 fe ff       	call   c000fcbf <Phys::allocatePage()>
c0024370:	39 c6                	cmp    esi,eax
c0024372:	74 10                	je     c0024384 <SATA::open(int, int, void*)+0x6c>
c0024374:	83 ec 0c             	sub    esp,0xc
c0024377:	68 50 c5 02 c0       	push   0xc002c550
c002437c:	e8 e4 5a ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0024381:	83 c4 10             	add    esp,0x10
c0024384:	83 ec 0c             	sub    esp,0xc
c0024387:	6a 02                	push   0x2
c0024389:	e8 73 d5 fe ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c002438e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024394:	e8 f8 d6 fe ff       	call   c0011a91 <Virt::getAKernelVAS()>
c0024399:	6a 03                	push   0x3
c002439b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00243a1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00243a7:	50                   	push   eax
c00243a8:	e8 1f dc fe ff       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c00243ad:	83 c4 14             	add    esp,0x14
c00243b0:	53                   	push   ebx
c00243b1:	e8 ee fd fe ff       	call   c00141a4 <PhysicalDisk::startCache()>
c00243b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00243b9:	e8 08 1f ff ff       	call   c00162c6 <createPartitionsForDisk(PhysicalDisk*)>
c00243be:	83 c4 14             	add    esp,0x14
c00243c1:	31 c0                	xor    eax,eax
c00243c3:	5b                   	pop    ebx
c00243c4:	5e                   	pop    esi
c00243c5:	c3                   	ret    

c00243c6 <SATA::SATA()>:
c00243c6:	83 ec 0c             	sub    esp,0xc
c00243c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243cd:	83 ec 04             	sub    esp,0x4
c00243d0:	68 00 02 00 00       	push   0x200
c00243d5:	68 64 c5 02 c0       	push   0xc002c564
c00243da:	50                   	push   eax
c00243db:	e8 5c fd fe ff       	call   c001413c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00243e0:	83 c4 10             	add    esp,0x10
c00243e3:	ba 9c c5 02 c0       	mov    edx,0xc002c59c
c00243e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243ec:	89 10                	mov    DWORD PTR [eax],edx
c00243ee:	90                   	nop
c00243ef:	83 c4 0c             	add    esp,0xc
c00243f2:	c3                   	ret    
c00243f3:	90                   	nop

c00243f4 <SATA::access(unsigned long long, int, void*, bool)>:
c00243f4:	55                   	push   ebp
c00243f5:	57                   	push   edi
c00243f6:	56                   	push   esi
c00243f7:	53                   	push   ebx
c00243f8:	83 ec 2c             	sub    esp,0x2c
c00243fb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00243ff:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0024403:	89 04 24             	mov    DWORD PTR [esp],eax
c0024406:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002440a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002440e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024412:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024416:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c002441b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024420:	7e 33                	jle    c0024455 <SATA::access(unsigned long long, int, void*, bool)+0x61>
c0024422:	57                   	push   edi
c0024423:	57                   	push   edi
c0024424:	53                   	push   ebx
c0024425:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024429:	6a 10                	push   0x10
c002442b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002442f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024433:	55                   	push   ebp
c0024434:	e8 bb ff ff ff       	call   c00243f4 <SATA::access(unsigned long long, int, void*, bool)>
c0024439:	83 6c 24 6c 10       	sub    DWORD PTR [esp+0x6c],0x10
c002443e:	83 44 24 20 10       	add    DWORD PTR [esp+0x20],0x10
c0024443:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0024448:	81 44 24 70 00 20 00 00 	add    DWORD PTR [esp+0x70],0x2000
c0024450:	83 c4 20             	add    esp,0x20
c0024453:	eb c6                	jmp    c002441b <SATA::access(unsigned long long, int, void*, bool)+0x27>
c0024455:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024458:	8b 9d 6c 01 00 00    	mov    ebx,DWORD PTR [ebp+0x16c]
c002445e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024466:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002446a:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024470:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024476:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002447a:	89 d8                	mov    eax,ebx
c002447c:	c1 e0 07             	shl    eax,0x7
c002447f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024483:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002448d:	56                   	push   esi
c002448e:	8d 43 02             	lea    eax,[ebx+0x2]
c0024491:	56                   	push   esi
c0024492:	c1 e0 07             	shl    eax,0x7
c0024495:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024499:	50                   	push   eax
c002449a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00244a0:	e8 ed ee ff ff       	call   c0023392 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00244a5:	ba 01 00 00 00       	mov    edx,0x1
c00244aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00244ae:	83 c4 10             	add    esp,0x10
c00244b1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00244b6:	0f 84 dd 01 00 00    	je     c0024699 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c00244bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00244c0:	c1 e0 09             	shl    eax,0x9
c00244c3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00244c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00244cc:	74 17                	je     c00244e5 <SATA::access(unsigned long long, int, void*, bool)+0xf1>
c00244ce:	51                   	push   ecx
c00244cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00244d3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00244d7:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00244dd:	e8 be c1 fd ff       	call   c00006a0 <memcpy>
c00244e2:	83 c4 10             	add    esp,0x10
c00244e5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00244eb:	8d 43 02             	lea    eax,[ebx+0x2]
c00244ee:	c1 e0 07             	shl    eax,0x7
c00244f1:	89 de                	mov    esi,ebx
c00244f3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00244f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00244f9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00244ff:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024505:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024509:	c1 e1 05             	shl    ecx,0x5
c002450c:	01 c8                	add    eax,ecx
c002450e:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024512:	8b 38                	mov    edi,DWORD PTR [eax]
c0024514:	83 e1 01             	and    ecx,0x1
c0024517:	83 e7 bf             	and    edi,0xffffffbf
c002451a:	c1 e1 06             	shl    ecx,0x6
c002451d:	09 f9                	or     ecx,edi
c002451f:	88 08                	mov    BYTE PTR [eax],cl
c0024521:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024523:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024529:	81 c9 05 00 01 00    	or     ecx,0x10005
c002452f:	89 08                	mov    DWORD PTR [eax],ecx
c0024531:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024537:	8b b9 58 01 00 00    	mov    edi,DWORD PTR [ecx+0x158]
c002453d:	2b b9 5c 01 00 00    	sub    edi,DWORD PTR [ecx+0x15c]
c0024543:	03 78 08             	add    edi,DWORD PTR [eax+0x8]
c0024546:	52                   	push   edx
c0024547:	68 90 00 00 00       	push   0x90
c002454c:	6a 00                	push   0x0
c002454e:	57                   	push   edi
c002454f:	e8 6e c1 fd ff       	call   c00006c2 <memset>
c0024554:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c002455a:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
c002455e:	89 87 80 00 00 00    	mov    DWORD PTR [edi+0x80],eax
c0024564:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024568:	83 c4 10             	add    esp,0x10
c002456b:	8d 48 ff             	lea    ecx,[eax-0x1]
c002456e:	8b 87 8c 00 00 00    	mov    eax,DWORD PTR [edi+0x8c]
c0024574:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002457a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002457f:	09 c8                	or     eax,ecx
c0024581:	89 87 8c 00 00 00    	mov    DWORD PTR [edi+0x8c],eax
c0024587:	66 8b 07             	mov    ax,WORD PTR [edi]
c002458a:	80 8f 8f 00 00 00 80 	or     BYTE PTR [edi+0x8f],0x80
c0024591:	66 25 00 7f          	and    ax,0x7f00
c0024595:	66 0d 27 80          	or     ax,0x8027
c0024599:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002459e:	66 89 07             	mov    WORD PTR [edi],ax
c00245a1:	19 c0                	sbb    eax,eax
c00245a3:	c1 e6 07             	shl    esi,0x7
c00245a6:	83 e0 f0             	and    eax,0xfffffff0
c00245a9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00245ad:	83 c0 35             	add    eax,0x35
c00245b0:	88 47 02             	mov    BYTE PTR [edi+0x2],al
c00245b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00245b6:	66 89 47 04          	mov    WORD PTR [edi+0x4],ax
c00245ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245be:	c1 e8 10             	shr    eax,0x10
c00245c1:	88 47 06             	mov    BYTE PTR [edi+0x6],al
c00245c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245c8:	c1 e8 18             	shr    eax,0x18
c00245cb:	88 47 08             	mov    BYTE PTR [edi+0x8],al
c00245ce:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00245d2:	88 47 09             	mov    BYTE PTR [edi+0x9],al
c00245d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00245d9:	88 67 0a             	mov    BYTE PTR [edi+0xa],ah
c00245dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00245e0:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
c00245e4:	31 c0                	xor    eax,eax
c00245e6:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00245ec:	80 e1 88             	and    cl,0x88
c00245ef:	74 0a                	je     c00245fb <SATA::access(unsigned long long, int, void*, bool)+0x207>
c00245f1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00245f6:	74 0a                	je     c0024602 <SATA::access(unsigned long long, int, void*, bool)+0x20e>
c00245f8:	40                   	inc    eax
c00245f9:	eb eb                	jmp    c00245e6 <SATA::access(unsigned long long, int, void*, bool)+0x1f2>
c00245fb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024600:	75 0a                	jne    c002460c <SATA::access(unsigned long long, int, void*, bool)+0x218>
c0024602:	83 ec 0c             	sub    esp,0xc
c0024605:	68 74 c5 02 c0       	push   0xc002c574
c002460a:	eb 56                	jmp    c0024662 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002460c:	b8 01 00 00 00       	mov    eax,0x1
c0024611:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024615:	c1 e3 07             	shl    ebx,0x7
c0024618:	d3 e0                	shl    eax,cl
c002461a:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002461e:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024624:	8b 8b 38 01 00 00    	mov    ecx,DWORD PTR [ebx+0x138]
c002462a:	85 c8                	test   eax,ecx
c002462c:	74 20                	je     c002464e <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c002462e:	8b 8b 10 01 00 00    	mov    ecx,DWORD PTR [ebx+0x110]
c0024634:	0f ba e1 1e          	bt     ecx,0x1e
c0024638:	73 ea                	jae    c0024624 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c002463a:	83 ec 0c             	sub    esp,0xc
c002463d:	68 82 c5 02 c0       	push   0xc002c582
c0024642:	e8 1e 58 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0024647:	83 c4 10             	add    esp,0x10
c002464a:	31 d2                	xor    edx,edx
c002464c:	eb 4b                	jmp    c0024699 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c002464e:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0024654:	0f ba e0 1e          	bt     eax,0x1e
c0024658:	73 17                	jae    c0024671 <SATA::access(unsigned long long, int, void*, bool)+0x27d>
c002465a:	83 ec 0c             	sub    esp,0xc
c002465d:	68 82 c5 02 c0       	push   0xc002c582
c0024662:	e8 fe 57 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0024667:	83 c4 10             	add    esp,0x10
c002466a:	ba 01 00 00 00       	mov    edx,0x1
c002466f:	eb 28                	jmp    c0024699 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c0024671:	31 d2                	xor    edx,edx
c0024673:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024678:	75 1f                	jne    c0024699 <SATA::access(unsigned long long, int, void*, bool)+0x2a5>
c002467a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002467e:	50                   	push   eax
c002467f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024683:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024689:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002468d:	e8 0e c0 fd ff       	call   c00006a0 <memcpy>
c0024692:	83 c4 10             	add    esp,0x10
c0024695:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024699:	83 c4 2c             	add    esp,0x2c
c002469c:	89 d0                	mov    eax,edx
c002469e:	5b                   	pop    ebx
c002469f:	5e                   	pop    esi
c00246a0:	5f                   	pop    edi
c00246a1:	5d                   	pop    ebp
c00246a2:	c3                   	ret    
c00246a3:	90                   	nop

c00246a4 <SATA::read(unsigned long long, int, void*)>:
c00246a4:	57                   	push   edi
c00246a5:	b8 04 00 00 00       	mov    eax,0x4
c00246aa:	56                   	push   esi
c00246ab:	53                   	push   ebx
c00246ac:	83 ec 10             	sub    esp,0x10
c00246af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00246b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00246b7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00246ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00246be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00246c2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00246c8:	77 3b                	ja     c0024705 <SATA::read(unsigned long long, int, void*)+0x61>
c00246ca:	b8 06 00 00 00       	mov    eax,0x6
c00246cf:	85 d2                	test   edx,edx
c00246d1:	74 32                	je     c0024705 <SATA::read(unsigned long long, int, void*)+0x61>
c00246d3:	50                   	push   eax
c00246d4:	50                   	push   eax
c00246d5:	6a 00                	push   0x0
c00246d7:	52                   	push   edx
c00246d8:	53                   	push   ebx
c00246d9:	57                   	push   edi
c00246da:	56                   	push   esi
c00246db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00246df:	e8 10 fd ff ff       	call   c00243f4 <SATA::access(unsigned long long, int, void*, bool)>
c00246e4:	83 c4 20             	add    esp,0x20
c00246e7:	85 c0                	test   eax,eax
c00246e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00246ed:	75 11                	jne    c0024700 <SATA::read(unsigned long long, int, void*)+0x5c>
c00246ef:	01 1d 28 1e 03 c0    	add    DWORD PTR ds:0xc0031e28,ebx
c00246f5:	e8 5c c0 fe ff       	call   c0010756 <VgaText::updateDiskUsage()>
c00246fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246fe:	eb 05                	jmp    c0024705 <SATA::read(unsigned long long, int, void*)+0x61>
c0024700:	b8 01 00 00 00       	mov    eax,0x1
c0024705:	83 c4 10             	add    esp,0x10
c0024708:	5b                   	pop    ebx
c0024709:	5e                   	pop    esi
c002470a:	5f                   	pop    edi
c002470b:	c3                   	ret    

c002470c <SATA::write(unsigned long long, int, void*)>:
c002470c:	57                   	push   edi
c002470d:	b8 04 00 00 00       	mov    eax,0x4
c0024712:	56                   	push   esi
c0024713:	53                   	push   ebx
c0024714:	83 ec 10             	sub    esp,0x10
c0024717:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002471b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002471f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024722:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024726:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002472a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024730:	77 3b                	ja     c002476d <SATA::write(unsigned long long, int, void*)+0x61>
c0024732:	b8 06 00 00 00       	mov    eax,0x6
c0024737:	85 d2                	test   edx,edx
c0024739:	74 32                	je     c002476d <SATA::write(unsigned long long, int, void*)+0x61>
c002473b:	50                   	push   eax
c002473c:	50                   	push   eax
c002473d:	6a 01                	push   0x1
c002473f:	52                   	push   edx
c0024740:	53                   	push   ebx
c0024741:	57                   	push   edi
c0024742:	56                   	push   esi
c0024743:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024747:	e8 a8 fc ff ff       	call   c00243f4 <SATA::access(unsigned long long, int, void*, bool)>
c002474c:	83 c4 20             	add    esp,0x20
c002474f:	85 c0                	test   eax,eax
c0024751:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024755:	75 11                	jne    c0024768 <SATA::write(unsigned long long, int, void*)+0x5c>
c0024757:	01 1d 24 1e 03 c0    	add    DWORD PTR ds:0xc0031e24,ebx
c002475d:	e8 f4 bf fe ff       	call   c0010756 <VgaText::updateDiskUsage()>
c0024762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024766:	eb 05                	jmp    c002476d <SATA::write(unsigned long long, int, void*)+0x61>
c0024768:	b8 01 00 00 00       	mov    eax,0x1
c002476d:	83 c4 10             	add    esp,0x10
c0024770:	5b                   	pop    ebx
c0024771:	5e                   	pop    esi
c0024772:	5f                   	pop    edi
c0024773:	c3                   	ret    

c0024774 <SATAPI::write(unsigned long long, int, void*)>:
c0024774:	b8 03 00 00 00       	mov    eax,0x3
c0024779:	c3                   	ret    

c002477a <SATAPI::close(int, int, void*)>:
c002477a:	83 ec 0c             	sub    esp,0xc
c002477d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024781:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024787:	85 c0                	test   eax,eax
c0024789:	74 0c                	je     c0024797 <SATAPI::close(int, int, void*)+0x1d>
c002478b:	83 ec 0c             	sub    esp,0xc
c002478e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024790:	50                   	push   eax
c0024791:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024794:	83 c4 10             	add    esp,0x10
c0024797:	31 c0                	xor    eax,eax
c0024799:	83 c4 0c             	add    esp,0xc
c002479c:	c3                   	ret    
c002479d:	90                   	nop

c002479e <SATAPI::SATAPI()>:
c002479e:	83 ec 0c             	sub    esp,0xc
c00247a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247a5:	83 ec 04             	sub    esp,0x4
c00247a8:	68 00 08 00 00       	push   0x800
c00247ad:	68 cc c5 02 c0       	push   0xc002c5cc
c00247b2:	50                   	push   eax
c00247b3:	e8 84 f9 fe ff       	call   c001413c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247b8:	83 c4 10             	add    esp,0x10
c00247bb:	ba 78 c6 02 c0       	mov    edx,0xc002c678
c00247c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247c4:	89 10                	mov    DWORD PTR [eax],edx
c00247c6:	90                   	nop
c00247c7:	83 c4 0c             	add    esp,0xc
c00247ca:	c3                   	ret    
c00247cb:	90                   	nop

c00247cc <SATAPI::diskRemoved()>:
c00247cc:	83 ec 18             	sub    esp,0x18
c00247cf:	68 d8 c5 02 c0       	push   0xc002c5d8
c00247d4:	e8 18 e1 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00247d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00247dd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00247e4:	83 c4 1c             	add    esp,0x1c
c00247e7:	c3                   	ret    

c00247e8 <SATAPI::diskInserted()>:
c00247e8:	53                   	push   ebx
c00247e9:	83 ec 14             	sub    esp,0x14
c00247ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00247f0:	68 ef c5 02 c0       	push   0xc002c5ef
c00247f5:	e8 f7 e0 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00247fa:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024801:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024804:	e8 9b f9 fe ff       	call   c00141a4 <PhysicalDisk::startCache()>
c0024809:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002480d:	83 c4 18             	add    esp,0x18
c0024810:	5b                   	pop    ebx
c0024811:	e9 b0 1a ff ff       	jmp    c00162c6 <createPartitionsForDisk(PhysicalDisk*)>

c0024816 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024816:	55                   	push   ebp
c0024817:	57                   	push   edi
c0024818:	56                   	push   esi
c0024819:	53                   	push   ebx
c002481a:	83 ec 24             	sub    esp,0x24
c002481d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024821:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024825:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002482b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002482f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024833:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024839:	8d 5f 02             	lea    ebx,[edi+0x2]
c002483c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024842:	c1 e3 07             	shl    ebx,0x7
c0024845:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024849:	89 f8                	mov    eax,edi
c002484b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002484f:	c1 e0 07             	shl    eax,0x7
c0024852:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024856:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002485a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024864:	53                   	push   ebx
c0024865:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002486b:	e8 22 eb ff ff       	call   c0023392 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024870:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024874:	83 c4 10             	add    esp,0x10
c0024877:	b8 01 00 00 00       	mov    eax,0x1
c002487c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024881:	0f 84 8a 01 00 00    	je     c0024a11 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024887:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002488d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002488f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024895:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002489b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002489f:	c1 e1 05             	shl    ecx,0x5
c00248a2:	01 c8                	add    eax,ecx
c00248a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00248a6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00248ac:	81 c9 25 00 01 00    	or     ecx,0x10025
c00248b2:	89 08                	mov    DWORD PTR [eax],ecx
c00248b4:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00248ba:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00248c0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00248c6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00248c9:	52                   	push   edx
c00248ca:	68 90 00 00 00       	push   0x90
c00248cf:	6a 00                	push   0x0
c00248d1:	53                   	push   ebx
c00248d2:	e8 eb bd fd ff       	call   c00006c2 <memset>
c00248d7:	83 c4 0c             	add    esp,0xc
c00248da:	8d 43 40             	lea    eax,[ebx+0x40]
c00248dd:	6a 0c                	push   0xc
c00248df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00248e3:	50                   	push   eax
c00248e4:	e8 b7 bd fd ff       	call   c00006a0 <memcpy>
c00248e9:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00248ef:	89 ea                	mov    edx,ebp
c00248f1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00248f7:	c1 ea 18             	shr    edx,0x18
c00248fa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00248fe:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024901:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024904:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024908:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002490e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024914:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024919:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002491d:	09 c8                	or     eax,ecx
c002491f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024923:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024929:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002492c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024933:	66 25 00 7f          	and    ax,0x7f00
c0024937:	66 0d 27 80          	or     ax,0x8027
c002493b:	66 89 03             	mov    WORD PTR [ebx],ax
c002493e:	89 e8                	mov    eax,ebp
c0024940:	c1 e8 10             	shr    eax,0x10
c0024943:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024946:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002494a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002494d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024951:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024954:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024958:	83 c4 10             	add    esp,0x10
c002495b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002495f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024963:	31 c0                	xor    eax,eax
c0024965:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002496b:	80 e1 88             	and    cl,0x88
c002496e:	74 0a                	je     c002497a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024970:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024975:	74 0a                	je     c0024981 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024977:	40                   	inc    eax
c0024978:	eb eb                	jmp    c0024965 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002497a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002497f:	75 0f                	jne    c0024990 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024981:	83 ec 0c             	sub    esp,0xc
c0024984:	68 74 c5 02 c0       	push   0xc002c574
c0024989:	e8 d7 54 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c002498e:	eb 3a                	jmp    c00249ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024990:	b8 01 00 00 00       	mov    eax,0x1
c0024995:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024999:	c1 e7 07             	shl    edi,0x7
c002499c:	d3 e0                	shl    eax,cl
c002499e:	03 3c 24             	add    edi,DWORD PTR [esp]
c00249a1:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00249a7:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00249ad:	85 d0                	test   eax,edx
c00249af:	74 23                	je     c00249d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00249b1:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00249b7:	0f ba e2 1e          	bt     edx,0x1e
c00249bb:	73 ea                	jae    c00249a7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00249bd:	83 ec 0c             	sub    esp,0xc
c00249c0:	68 07 c6 02 c0       	push   0xc002c607
c00249c5:	e8 27 df fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00249ca:	83 c4 10             	add    esp,0x10
c00249cd:	b8 01 00 00 00       	mov    eax,0x1
c00249d2:	eb 3d                	jmp    c0024a11 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00249d4:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00249da:	0f ba e0 1e          	bt     eax,0x1e
c00249de:	73 0a                	jae    c00249ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00249e0:	83 ec 0c             	sub    esp,0xc
c00249e3:	68 1a c6 02 c0       	push   0xc002c61a
c00249e8:	eb db                	jmp    c00249c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00249ea:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00249ef:	74 1e                	je     c0024a0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00249f1:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00249f6:	74 17                	je     c0024a0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00249f8:	50                   	push   eax
c00249f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00249fd:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0024a03:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024a07:	e8 94 bc fd ff       	call   c00006a0 <memcpy>
c0024a0c:	83 c4 10             	add    esp,0x10
c0024a0f:	31 c0                	xor    eax,eax
c0024a11:	83 c4 1c             	add    esp,0x1c
c0024a14:	5b                   	pop    ebx
c0024a15:	5e                   	pop    esi
c0024a16:	5f                   	pop    edi
c0024a17:	5d                   	pop    ebp
c0024a18:	c3                   	ret    
c0024a19:	90                   	nop

c0024a1a <SATAPI::eject()>:
c0024a1a:	57                   	push   edi
c0024a1b:	b9 03 00 00 00       	mov    ecx,0x3
c0024a20:	53                   	push   ebx
c0024a21:	83 ec 14             	sub    esp,0x14
c0024a24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a28:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a2c:	fc                   	cld    
c0024a2d:	31 c0                	xor    eax,eax
c0024a2f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a31:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a36:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a3b:	50                   	push   eax
c0024a3c:	6a 00                	push   0x0
c0024a3e:	6a 00                	push   0x0
c0024a40:	6a 00                	push   0x0
c0024a42:	6a 00                	push   0x0
c0024a44:	6a 02                	push   0x2
c0024a46:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a4a:	50                   	push   eax
c0024a4b:	53                   	push   ebx
c0024a4c:	e8 c5 fd ff ff       	call   c0024816 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a51:	83 c4 14             	add    esp,0x14
c0024a54:	53                   	push   ebx
c0024a55:	e8 72 fd ff ff       	call   c00247cc <SATAPI::diskRemoved()>
c0024a5a:	83 c4 24             	add    esp,0x24
c0024a5d:	31 c0                	xor    eax,eax
c0024a5f:	5b                   	pop    ebx
c0024a60:	5f                   	pop    edi
c0024a61:	c3                   	ret    

c0024a62 <SATAPI::detectMedia()>:
c0024a62:	56                   	push   esi
c0024a63:	53                   	push   ebx
c0024a64:	83 ec 28             	sub    esp,0x28
c0024a67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a6b:	6a 0c                	push   0xc
c0024a6d:	6a 00                	push   0x0
c0024a6f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a73:	56                   	push   esi
c0024a74:	e8 49 bc fd ff       	call   c00006c2 <memset>
c0024a79:	83 c4 0c             	add    esp,0xc
c0024a7c:	6a 00                	push   0x0
c0024a7e:	6a 00                	push   0x0
c0024a80:	6a 00                	push   0x0
c0024a82:	6a 00                	push   0x0
c0024a84:	6a 00                	push   0x0
c0024a86:	56                   	push   esi
c0024a87:	53                   	push   ebx
c0024a88:	e8 89 fd ff ff       	call   c0024816 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024a8d:	83 c4 1c             	add    esp,0x1c
c0024a90:	6a 0c                	push   0xc
c0024a92:	6a 00                	push   0x0
c0024a94:	56                   	push   esi
c0024a95:	e8 28 bc fd ff       	call   c00006c2 <memset>
c0024a9a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a9f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024aa4:	83 c4 0c             	add    esp,0xc
c0024aa7:	6a 01                	push   0x1
c0024aa9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024aad:	50                   	push   eax
c0024aae:	6a 00                	push   0x0
c0024ab0:	6a 00                	push   0x0
c0024ab2:	6a 12                	push   0x12
c0024ab4:	56                   	push   esi
c0024ab5:	53                   	push   ebx
c0024ab6:	e8 5b fd ff ff       	call   c0024816 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024abb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024abf:	83 c4 20             	add    esp,0x20
c0024ac2:	83 e0 7f             	and    eax,0x7f
c0024ac5:	3c 70                	cmp    al,0x70
c0024ac7:	74 15                	je     c0024ade <SATAPI::detectMedia()+0x7c>
c0024ac9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ad0:	75 0c                	jne    c0024ade <SATAPI::detectMedia()+0x7c>
c0024ad2:	83 ec 0c             	sub    esp,0xc
c0024ad5:	53                   	push   ebx
c0024ad6:	e8 0d fd ff ff       	call   c00247e8 <SATAPI::diskInserted()>
c0024adb:	83 c4 10             	add    esp,0x10
c0024ade:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ae2:	83 e0 0f             	and    eax,0xf
c0024ae5:	3c 02                	cmp    al,0x2
c0024ae7:	75 1b                	jne    c0024b04 <SATAPI::detectMedia()+0xa2>
c0024ae9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024aee:	75 2d                	jne    c0024b1d <SATAPI::detectMedia()+0xbb>
c0024af0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024af7:	74 24                	je     c0024b1d <SATAPI::detectMedia()+0xbb>
c0024af9:	83 ec 0c             	sub    esp,0xc
c0024afc:	53                   	push   ebx
c0024afd:	e8 ca fc ff ff       	call   c00247cc <SATAPI::diskRemoved()>
c0024b02:	eb 16                	jmp    c0024b1a <SATAPI::detectMedia()+0xb8>
c0024b04:	84 c0                	test   al,al
c0024b06:	75 15                	jne    c0024b1d <SATAPI::detectMedia()+0xbb>
c0024b08:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024b0f:	75 0c                	jne    c0024b1d <SATAPI::detectMedia()+0xbb>
c0024b11:	83 ec 0c             	sub    esp,0xc
c0024b14:	53                   	push   ebx
c0024b15:	e8 ce fc ff ff       	call   c00247e8 <SATAPI::diskInserted()>
c0024b1a:	83 c4 10             	add    esp,0x10
c0024b1d:	83 c4 24             	add    esp,0x24
c0024b20:	5b                   	pop    ebx
c0024b21:	5e                   	pop    esi
c0024b22:	c3                   	ret    
c0024b23:	90                   	nop

c0024b24 <SATAPI::open(int, int, void*)>:
c0024b24:	56                   	push   esi
c0024b25:	53                   	push   ebx
c0024b26:	50                   	push   eax
c0024b27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b2f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b39:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b3f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b4d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b57:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b5d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b64:	e8 56 b1 fe ff       	call   c000fcbf <Phys::allocatePage()>
c0024b69:	89 c6                	mov    esi,eax
c0024b6b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b71:	81 c6 00 10 00 00    	add    esi,0x1000
c0024b77:	e8 43 b1 fe ff       	call   c000fcbf <Phys::allocatePage()>
c0024b7c:	39 c6                	cmp    esi,eax
c0024b7e:	74 10                	je     c0024b90 <SATAPI::open(int, int, void*)+0x6c>
c0024b80:	83 ec 0c             	sub    esp,0xc
c0024b83:	68 2f c6 02 c0       	push   0xc002c62f
c0024b88:	e8 d8 52 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0024b8d:	83 c4 10             	add    esp,0x10
c0024b90:	83 ec 0c             	sub    esp,0xc
c0024b93:	6a 02                	push   0x2
c0024b95:	e8 67 cd fe ff       	call   c0011901 <Virt::allocateKernelVirtualPages(int)>
c0024b9a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024ba0:	e8 ec ce fe ff       	call   c0011a91 <Virt::getAKernelVAS()>
c0024ba5:	6a 03                	push   0x3
c0024ba7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024bad:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024bb3:	50                   	push   eax
c0024bb4:	e8 13 d4 fe ff       	call   c0011fcc <VAS::mapPage(unsigned long, unsigned long, int)>
c0024bb9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024bc0:	83 c4 14             	add    esp,0x14
c0024bc3:	53                   	push   ebx
c0024bc4:	e8 99 fe ff ff       	call   c0024a62 <SATAPI::detectMedia()>
c0024bc9:	83 c4 14             	add    esp,0x14
c0024bcc:	31 c0                	xor    eax,eax
c0024bce:	5b                   	pop    ebx
c0024bcf:	5e                   	pop    esi
c0024bd0:	c3                   	ret    
c0024bd1:	90                   	nop

c0024bd2 <SATAPI::read(unsigned long long, int, void*)>:
c0024bd2:	55                   	push   ebp
c0024bd3:	57                   	push   edi
c0024bd4:	56                   	push   esi
c0024bd5:	53                   	push   ebx
c0024bd6:	83 ec 1c             	sub    esp,0x1c
c0024bd9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024bdd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024be1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024be5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024bec:	74 19                	je     c0024c07 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024bee:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024bf3:	7e 2e                	jle    c0024c23 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024bf5:	83 ec 0c             	sub    esp,0xc
c0024bf8:	68 45 c6 02 c0       	push   0xc002c645
c0024bfd:	e8 63 52 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0024c02:	83 c4 10             	add    esp,0x10
c0024c05:	eb 1c                	jmp    c0024c23 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024c07:	83 ec 0c             	sub    esp,0xc
c0024c0a:	55                   	push   ebp
c0024c0b:	e8 52 fe ff ff       	call   c0024a62 <SATAPI::detectMedia()>
c0024c10:	83 c4 10             	add    esp,0x10
c0024c13:	b8 02 00 00 00       	mov    eax,0x2
c0024c18:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024c1f:	75 cd                	jne    c0024bee <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c21:	eb 49                	jmp    c0024c6c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024c23:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c27:	b9 03 00 00 00       	mov    ecx,0x3
c0024c2c:	fc                   	cld    
c0024c2d:	31 c0                	xor    eax,eax
c0024c2f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c31:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c36:	89 d8                	mov    eax,ebx
c0024c38:	86 e0                	xchg   al,ah
c0024c3a:	c1 c0 10             	rol    eax,0x10
c0024c3d:	86 e0                	xchg   al,ah
c0024c3f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024c43:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024c47:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c4b:	50                   	push   eax
c0024c4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024c50:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024c54:	56                   	push   esi
c0024c55:	53                   	push   ebx
c0024c56:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c5a:	c1 e0 0b             	shl    eax,0xb
c0024c5d:	50                   	push   eax
c0024c5e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c62:	50                   	push   eax
c0024c63:	55                   	push   ebp
c0024c64:	e8 ad fb ff ff       	call   c0024816 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024c69:	83 c4 20             	add    esp,0x20
c0024c6c:	83 c4 1c             	add    esp,0x1c
c0024c6f:	5b                   	pop    ebx
c0024c70:	5e                   	pop    esi
c0024c71:	5f                   	pop    edi
c0024c72:	5d                   	pop    ebp
c0024c73:	c3                   	ret    

c0024c74 <AVX::open(int, int, void*)>:
c0024c74:	83 ec 0c             	sub    esp,0xc
c0024c77:	e8 3c 11 00 00       	call   c0025db8 <avxInit>
c0024c7c:	b8 00 00 00 00       	mov    eax,0x0
c0024c81:	83 c4 0c             	add    esp,0xc
c0024c84:	c3                   	ret    
c0024c85:	90                   	nop

c0024c86 <AVX::close(int, int, void*)>:
c0024c86:	83 ec 0c             	sub    esp,0xc
c0024c89:	e8 2b 11 00 00       	call   c0025db9 <avxClose>
c0024c8e:	b8 00 00 00 00       	mov    eax,0x0
c0024c93:	83 c4 0c             	add    esp,0xc
c0024c96:	c3                   	ret    
c0024c97:	90                   	nop

c0024c98 <AVX::available()>:
c0024c98:	83 ec 0c             	sub    esp,0xc
c0024c9b:	e8 10 11 00 00       	call   c0025db0 <avxDetect>
c0024ca0:	85 c0                	test   eax,eax
c0024ca2:	0f 95 c0             	setne  al
c0024ca5:	83 c4 0c             	add    esp,0xc
c0024ca8:	c3                   	ret    
c0024ca9:	90                   	nop

c0024caa <AVX::save(void*)>:
c0024caa:	83 ec 0c             	sub    esp,0xc
c0024cad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cb1:	83 ec 0c             	sub    esp,0xc
c0024cb4:	50                   	push   eax
c0024cb5:	e8 fc 10 00 00       	call   c0025db6 <avxSave>
c0024cba:	83 c4 10             	add    esp,0x10
c0024cbd:	90                   	nop
c0024cbe:	83 c4 0c             	add    esp,0xc
c0024cc1:	c3                   	ret    

c0024cc2 <AVX::load(void*)>:
c0024cc2:	83 ec 0c             	sub    esp,0xc
c0024cc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cc9:	83 ec 0c             	sub    esp,0xc
c0024ccc:	50                   	push   eax
c0024ccd:	e8 e5 10 00 00       	call   c0025db7 <avxLoad>
c0024cd2:	83 c4 10             	add    esp,0x10
c0024cd5:	90                   	nop
c0024cd6:	83 c4 0c             	add    esp,0xc
c0024cd9:	c3                   	ret    

c0024cda <AVX::AVX()>:
c0024cda:	83 ec 0c             	sub    esp,0xc
c0024cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ce1:	83 ec 08             	sub    esp,0x8
c0024ce4:	68 a8 c6 02 c0       	push   0xc002c6a8
c0024ce9:	50                   	push   eax
c0024cea:	e8 2b f5 fe ff       	call   c001421a <FPU::FPU(char const*)>
c0024cef:	83 c4 10             	add    esp,0x10
c0024cf2:	ba b8 c6 02 c0       	mov    edx,0xc002c6b8
c0024cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cfb:	89 10                	mov    DWORD PTR [eax],edx
c0024cfd:	90                   	nop
c0024cfe:	83 c4 0c             	add    esp,0xc
c0024d01:	c3                   	ret    

c0024d02 <MMX::available()>:
c0024d02:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0024d07:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024d0d:	83 e0 20             	and    eax,0x20
c0024d10:	84 c0                	test   al,al
c0024d12:	0f 95 c0             	setne  al
c0024d15:	c3                   	ret    

c0024d16 <MMX::open(int, int, void*)>:
c0024d16:	83 ec 0c             	sub    esp,0xc
c0024d19:	e8 1e 11 00 00       	call   c0025e3c <x87Init>
c0024d1e:	b8 00 00 00 00       	mov    eax,0x0
c0024d23:	83 c4 0c             	add    esp,0xc
c0024d26:	c3                   	ret    
c0024d27:	90                   	nop

c0024d28 <MMX::close(int, int, void*)>:
c0024d28:	83 ec 0c             	sub    esp,0xc
c0024d2b:	e8 26 11 00 00       	call   c0025e56 <x87Close>
c0024d30:	b8 00 00 00 00       	mov    eax,0x0
c0024d35:	83 c4 0c             	add    esp,0xc
c0024d38:	c3                   	ret    
c0024d39:	90                   	nop

c0024d3a <MMX::save(void*)>:
c0024d3a:	83 ec 0c             	sub    esp,0xc
c0024d3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d41:	83 ec 0c             	sub    esp,0xc
c0024d44:	50                   	push   eax
c0024d45:	e8 e7 10 00 00       	call   c0025e31 <x87Save>
c0024d4a:	83 c4 10             	add    esp,0x10
c0024d4d:	90                   	nop
c0024d4e:	83 c4 0c             	add    esp,0xc
c0024d51:	c3                   	ret    

c0024d52 <MMX::load(void*)>:
c0024d52:	83 ec 0c             	sub    esp,0xc
c0024d55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d59:	83 ec 0c             	sub    esp,0xc
c0024d5c:	50                   	push   eax
c0024d5d:	e8 d5 10 00 00       	call   c0025e37 <x87Load>
c0024d62:	83 c4 10             	add    esp,0x10
c0024d65:	90                   	nop
c0024d66:	83 c4 0c             	add    esp,0xc
c0024d69:	c3                   	ret    

c0024d6a <MMX::MMX()>:
c0024d6a:	83 ec 0c             	sub    esp,0xc
c0024d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d71:	83 ec 08             	sub    esp,0x8
c0024d74:	68 e8 c6 02 c0       	push   0xc002c6e8
c0024d79:	50                   	push   eax
c0024d7a:	e8 9b f4 fe ff       	call   c001421a <FPU::FPU(char const*)>
c0024d7f:	83 c4 10             	add    esp,0x10
c0024d82:	ba f8 c6 02 c0       	mov    edx,0xc002c6f8
c0024d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d8b:	89 10                	mov    DWORD PTR [eax],edx
c0024d8d:	90                   	nop
c0024d8e:	83 c4 0c             	add    esp,0xc
c0024d91:	c3                   	ret    

c0024d92 <SSE::open(int, int, void*)>:
c0024d92:	83 ec 0c             	sub    esp,0xc
c0024d95:	e8 5a 10 00 00       	call   c0025df4 <sseInit>
c0024d9a:	b8 00 00 00 00       	mov    eax,0x0
c0024d9f:	83 c4 0c             	add    esp,0xc
c0024da2:	c3                   	ret    
c0024da3:	90                   	nop

c0024da4 <SSE::close(int, int, void*)>:
c0024da4:	83 ec 0c             	sub    esp,0xc
c0024da7:	e8 58 10 00 00       	call   c0025e04 <sseClose>
c0024dac:	b8 00 00 00 00       	mov    eax,0x0
c0024db1:	83 c4 0c             	add    esp,0xc
c0024db4:	c3                   	ret    
c0024db5:	90                   	nop

c0024db6 <SSE::available()>:
c0024db6:	83 ec 1c             	sub    esp,0x1c
c0024db9:	e8 12 10 00 00       	call   c0025dd0 <absolutelyNoChanceInHell>
c0024dbe:	85 c0                	test   eax,eax
c0024dc0:	0f 95 c0             	setne  al
c0024dc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024dc7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024dcb:	83 c4 1c             	add    esp,0x1c
c0024dce:	c3                   	ret    
c0024dcf:	90                   	nop

c0024dd0 <SSE::save(void*)>:
c0024dd0:	83 ec 0c             	sub    esp,0xc
c0024dd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024dd7:	83 ec 0c             	sub    esp,0xc
c0024dda:	50                   	push   eax
c0024ddb:	e8 08 10 00 00       	call   c0025de8 <sseSave>
c0024de0:	83 c4 10             	add    esp,0x10
c0024de3:	90                   	nop
c0024de4:	83 c4 0c             	add    esp,0xc
c0024de7:	c3                   	ret    

c0024de8 <SSE::load(void*)>:
c0024de8:	83 ec 0c             	sub    esp,0xc
c0024deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024def:	83 ec 0c             	sub    esp,0xc
c0024df2:	50                   	push   eax
c0024df3:	e8 f6 0f 00 00       	call   c0025dee <sseLoad>
c0024df8:	83 c4 10             	add    esp,0x10
c0024dfb:	90                   	nop
c0024dfc:	83 c4 0c             	add    esp,0xc
c0024dff:	c3                   	ret    

c0024e00 <SSE::SSE()>:
c0024e00:	83 ec 0c             	sub    esp,0xc
c0024e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e07:	83 ec 08             	sub    esp,0x8
c0024e0a:	68 28 c7 02 c0       	push   0xc002c728
c0024e0f:	50                   	push   eax
c0024e10:	e8 05 f4 fe ff       	call   c001421a <FPU::FPU(char const*)>
c0024e15:	83 c4 10             	add    esp,0x10
c0024e18:	ba 38 c7 02 c0       	mov    edx,0xc002c738
c0024e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e21:	89 10                	mov    DWORD PTR [eax],edx
c0024e23:	90                   	nop
c0024e24:	83 c4 0c             	add    esp,0xc
c0024e27:	c3                   	ret    

c0024e28 <x87::open(int, int, void*)>:
c0024e28:	83 ec 0c             	sub    esp,0xc
c0024e2b:	e8 0c 10 00 00       	call   c0025e3c <x87Init>
c0024e30:	b8 00 00 00 00       	mov    eax,0x0
c0024e35:	83 c4 0c             	add    esp,0xc
c0024e38:	c3                   	ret    
c0024e39:	90                   	nop

c0024e3a <x87::close(int, int, void*)>:
c0024e3a:	83 ec 0c             	sub    esp,0xc
c0024e3d:	e8 14 10 00 00       	call   c0025e56 <x87Close>
c0024e42:	b8 00 00 00 00       	mov    eax,0x0
c0024e47:	83 c4 0c             	add    esp,0xc
c0024e4a:	c3                   	ret    
c0024e4b:	90                   	nop

c0024e4c <x87::available()>:
c0024e4c:	83 ec 0c             	sub    esp,0xc
c0024e4f:	e8 c2 0f 00 00       	call   c0025e16 <x87Detect>
c0024e54:	85 c0                	test   eax,eax
c0024e56:	0f 95 c0             	setne  al
c0024e59:	83 c4 0c             	add    esp,0xc
c0024e5c:	c3                   	ret    
c0024e5d:	90                   	nop

c0024e5e <x87::save(void*)>:
c0024e5e:	83 ec 0c             	sub    esp,0xc
c0024e61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e65:	83 ec 0c             	sub    esp,0xc
c0024e68:	50                   	push   eax
c0024e69:	e8 c3 0f 00 00       	call   c0025e31 <x87Save>
c0024e6e:	83 c4 10             	add    esp,0x10
c0024e71:	90                   	nop
c0024e72:	83 c4 0c             	add    esp,0xc
c0024e75:	c3                   	ret    

c0024e76 <x87::load(void*)>:
c0024e76:	83 ec 0c             	sub    esp,0xc
c0024e79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e7d:	83 ec 0c             	sub    esp,0xc
c0024e80:	50                   	push   eax
c0024e81:	e8 b1 0f 00 00       	call   c0025e37 <x87Load>
c0024e86:	83 c4 10             	add    esp,0x10
c0024e89:	90                   	nop
c0024e8a:	83 c4 0c             	add    esp,0xc
c0024e8d:	c3                   	ret    

c0024e8e <x87::x87()>:
c0024e8e:	83 ec 0c             	sub    esp,0xc
c0024e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e95:	83 ec 08             	sub    esp,0x8
c0024e98:	68 68 c7 02 c0       	push   0xc002c768
c0024e9d:	50                   	push   eax
c0024e9e:	e8 77 f3 fe ff       	call   c001421a <FPU::FPU(char const*)>
c0024ea3:	83 c4 10             	add    esp,0x10
c0024ea6:	ba 78 c7 02 c0       	mov    edx,0xc002c778
c0024eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eaf:	89 10                	mov    DWORD PTR [eax],edx
c0024eb1:	90                   	nop
c0024eb2:	83 c4 0c             	add    esp,0xc
c0024eb5:	c3                   	ret    

c0024eb6 <APIC::disable()>:
c0024eb6:	90                   	nop
c0024eb7:	c3                   	ret    

c0024eb8 <APIC::close(int, int, void*)>:
c0024eb8:	55                   	push   ebp
c0024eb9:	89 e5                	mov    ebp,esp
c0024ebb:	83 ec 08             	sub    esp,0x8
c0024ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024ec1:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ec3:	83 c0 3c             	add    eax,0x3c
c0024ec6:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ec8:	83 ec 0c             	sub    esp,0xc
c0024ecb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ece:	ff d0                	call   eax
c0024ed0:	83 c4 10             	add    esp,0x10
c0024ed3:	b8 00 00 00 00       	mov    eax,0x0
c0024ed8:	c9                   	leave  
c0024ed9:	c3                   	ret    

c0024eda <IOAPIC::close(int, int, void*)>:
c0024eda:	b8 00 00 00 00       	mov    eax,0x0
c0024edf:	c3                   	ret    

c0024ee0 <APIC::io_wait()>:
c0024ee0:	eb 00                	jmp    c0024ee2 <APIC::io_wait()+0x2>
c0024ee2:	eb 00                	jmp    c0024ee4 <APIC::io_wait()+0x4>
c0024ee4:	90                   	nop
c0024ee5:	c3                   	ret    

c0024ee6 <APIC::getBase()>:
c0024ee6:	55                   	push   ebp
c0024ee7:	89 e5                	mov    ebp,esp
c0024ee9:	83 ec 18             	sub    esp,0x18
c0024eec:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0024ef1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024ef7:	83 e0 08             	and    eax,0x8
c0024efa:	84 c0                	test   al,al
c0024efc:	75 07                	jne    c0024f05 <APIC::getBase()+0x1f>
c0024efe:	b8 00 00 00 00       	mov    eax,0x0
c0024f03:	eb 21                	jmp    c0024f26 <APIC::getBase()+0x40>
c0024f05:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0024f0a:	83 ec 08             	sub    esp,0x8
c0024f0d:	6a 1b                	push   0x1b
c0024f0f:	50                   	push   eax
c0024f10:	e8 b5 9c fe ff       	call   c000ebca <Computer::rdmsr(unsigned int)>
c0024f15:	83 c4 10             	add    esp,0x10
c0024f18:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024f1b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024f1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024f21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024f26:	c9                   	leave  
c0024f27:	c3                   	ret    

c0024f28 <APIC::eoi(unsigned char)>:
c0024f28:	55                   	push   ebp
c0024f29:	89 e5                	mov    ebp,esp
c0024f2b:	83 ec 28             	sub    esp,0x28
c0024f2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024f31:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024f34:	83 ec 0c             	sub    esp,0xc
c0024f37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f3a:	e8 a7 ff ff ff       	call   c0024ee6 <APIC::getBase()>
c0024f3f:	83 c4 10             	add    esp,0x10
c0024f42:	05 b0 00 00 00       	add    eax,0xb0
c0024f47:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024f4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024f4d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0024f53:	90                   	nop
c0024f54:	c9                   	leave  
c0024f55:	c3                   	ret    

c0024f56 <APIC::open(int, int, void*)>:
c0024f56:	55                   	push   ebp
c0024f57:	89 e5                	mov    ebp,esp
c0024f59:	57                   	push   edi
c0024f5a:	56                   	push   esi
c0024f5b:	53                   	push   ebx
c0024f5c:	83 ec 2c             	sub    esp,0x2c
c0024f5f:	83 ec 0c             	sub    esp,0xc
c0024f62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f65:	e8 7c ff ff ff       	call   c0024ee6 <APIC::getBase()>
c0024f6a:	83 c4 10             	add    esp,0x10
c0024f6d:	89 c2                	mov    edx,eax
c0024f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024f72:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024f78:	0f b6 f8             	movzx  edi,al
c0024f7b:	89 d0                	mov    eax,edx
c0024f7d:	ba 00 00 00 00       	mov    edx,0x0
c0024f82:	89 c1                	mov    ecx,eax
c0024f84:	80 e5 ff             	and    ch,0xff
c0024f87:	89 cb                	mov    ebx,ecx
c0024f89:	0f b6 f2             	movzx  esi,dl
c0024f8c:	89 d8                	mov    eax,ebx
c0024f8e:	89 f2                	mov    edx,esi
c0024f90:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024f93:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024f96:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024f9a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024f9e:	83 e0 00             	and    eax,0x0
c0024fa1:	09 d0                	or     eax,edx
c0024fa3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024faa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024fb0:	8d 50 01             	lea    edx,[eax+0x1]
c0024fb3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024fb6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024fbc:	0f b6 d0             	movzx  edx,al
c0024fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024fc2:	83 c2 08             	add    edx,0x8
c0024fc5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024fc9:	0f b6 c9             	movzx  ecx,cl
c0024fcc:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024fd2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024fd6:	83 ec 0c             	sub    esp,0xc
c0024fd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fdc:	e8 05 ff ff ff       	call   c0024ee6 <APIC::getBase()>
c0024fe1:	83 c4 10             	add    esp,0x10
c0024fe4:	05 f0 00 00 00       	add    eax,0xf0
c0024fe9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024fec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024fef:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ff1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024ff4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024ffb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025002:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025005:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025008:	89 10                	mov    DWORD PTR [eax],edx
c002500a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025011:	a1 b0 03 03 c0       	mov    eax,ds:0xc00303b0
c0025016:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025019:	7d 7c                	jge    c0025097 <APIC::open(int, int, void*)+0x141>
c002501b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002501e:	8b 04 85 c0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc40]
c0025025:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025028:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002502b:	8b 04 85 c0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc40]
c0025032:	c1 e8 08             	shr    eax,0x8
c0025035:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025039:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002503c:	8b 04 85 c0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc40]
c0025043:	c1 e8 18             	shr    eax,0x18
c0025046:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025049:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002504d:	75 40                	jne    c002508f <APIC::open(int, int, void*)+0x139>
c002504f:	83 ec 0c             	sub    esp,0xc
c0025052:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025055:	e8 8c fe ff ff       	call   c0024ee6 <APIC::getBase()>
c002505a:	83 c4 10             	add    esp,0x10
c002505d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025061:	75 07                	jne    c002506a <APIC::open(int, int, void*)+0x114>
c0025063:	ba 60 03 00 00       	mov    edx,0x360
c0025068:	eb 05                	jmp    c002506f <APIC::open(int, int, void*)+0x119>
c002506a:	ba 50 03 00 00       	mov    edx,0x350
c002506f:	01 d0                	add    eax,edx
c0025071:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025074:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025077:	8b 00                	mov    eax,DWORD PTR [eax]
c0025079:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002507c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025083:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025087:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002508a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002508d:	89 10                	mov    DWORD PTR [eax],edx
c002508f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025092:	e9 7a ff ff ff       	jmp    c0025011 <APIC::open(int, int, void*)+0xbb>
c0025097:	b8 00 00 00 00       	mov    eax,0x0
c002509c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002509f:	5b                   	pop    ebx
c00250a0:	5e                   	pop    esi
c00250a1:	5f                   	pop    edi
c00250a2:	5d                   	pop    ebp
c00250a3:	c3                   	ret    

c00250a4 <IOAPIC::IOAPIC()>:
c00250a4:	83 ec 0c             	sub    esp,0xc
c00250a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ab:	83 ec 08             	sub    esp,0x8
c00250ae:	68 a8 c7 02 c0       	push   0xc002c7a8
c00250b3:	50                   	push   eax
c00250b4:	e8 4f ee fe ff       	call   c0013f08 <Device::Device(char const*)>
c00250b9:	83 c4 10             	add    esp,0x10
c00250bc:	ba d0 c8 02 c0       	mov    edx,0xc002c8d0
c00250c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c5:	89 10                	mov    DWORD PTR [eax],edx
c00250c7:	90                   	nop
c00250c8:	83 c4 0c             	add    esp,0xc
c00250cb:	c3                   	ret    

c00250cc <APIC::APIC()>:
c00250cc:	53                   	push   ebx
c00250cd:	83 ec 18             	sub    esp,0x18
c00250d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250d4:	83 ec 08             	sub    esp,0x8
c00250d7:	68 b0 c7 02 c0       	push   0xc002c7b0
c00250dc:	50                   	push   eax
c00250dd:	e8 92 f5 fe ff       	call   c0014674 <InterruptController::InterruptController(char const*)>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	ba 88 c8 02 c0       	mov    edx,0xc002c888
c00250ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250ee:	89 10                	mov    DWORD PTR [eax],edx
c00250f0:	a0 80 1e 03 c0       	mov    al,ds:0xc0031e80
c00250f5:	83 f0 01             	xor    eax,0x1
c00250f8:	84 c0                	test   al,al
c00250fa:	0f 84 a1 00 00 00    	je     c00251a1 <APIC::APIC()+0xd5>
c0025100:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025105:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c002510a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002510e:	0f 83 86 00 00 00    	jae    c002519a <APIC::APIC()+0xce>
c0025114:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002511c:	83 ec 0c             	sub    esp,0xc
c002511f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025123:	e8 fa a4 fe ff       	call   c000f622 <malloc>
c0025128:	83 c4 10             	add    esp,0x10
c002512b:	89 c3                	mov    ebx,eax
c002512d:	83 ec 0c             	sub    esp,0xc
c0025130:	53                   	push   ebx
c0025131:	e8 6e ff ff ff       	call   c00250a4 <IOAPIC::IOAPIC()>
c0025136:	83 c4 10             	add    esp,0x10
c0025139:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002513d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025142:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025146:	89 14 85 60 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1a0],edx
c002514d:	a1 40 1e 03 c0       	mov    eax,ds:0xc0031e40
c0025152:	40                   	inc    eax
c0025153:	a3 40 1e 03 c0       	mov    ds:0xc0031e40,eax
c0025158:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c002515d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025163:	83 ec 08             	sub    esp,0x8
c0025166:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002516a:	50                   	push   eax
c002516b:	e8 a8 eb fe ff       	call   c0013d18 <Device::addChild(Device*)>
c0025170:	83 c4 10             	add    esp,0x10
c0025173:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025177:	8b 00                	mov    eax,DWORD PTR [eax]
c0025179:	83 c0 08             	add    eax,0x8
c002517c:	8b 00                	mov    eax,DWORD PTR [eax]
c002517e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025183:	6a 00                	push   0x0
c0025185:	6a 00                	push   0x0
c0025187:	52                   	push   edx
c0025188:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002518c:	ff d0                	call   eax
c002518e:	83 c4 10             	add    esp,0x10
c0025191:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025195:	e9 6b ff ff ff       	jmp    c0025105 <APIC::APIC()+0x39>
c002519a:	c6 05 80 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e80,0x1
c00251a1:	90                   	nop
c00251a2:	83 c4 18             	add    esp,0x18
c00251a5:	5b                   	pop    ebx
c00251a6:	c3                   	ret    
c00251a7:	90                   	nop

c00251a8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00251a8:	55                   	push   ebp
c00251a9:	89 e5                	mov    ebp,esp
c00251ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00251b4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00251b7:	72 1d                	jb     c00251d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00251b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251bc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00251c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251c5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00251cb:	01 d0                	add    eax,edx
c00251cd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00251d0:	73 04                	jae    c00251d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00251d2:	b0 01                	mov    al,0x1
c00251d4:	eb 02                	jmp    c00251d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00251d6:	b0 00                	mov    al,0x0
c00251d8:	5d                   	pop    ebp
c00251d9:	c3                   	ret    

c00251da <IOAPIC::read(int)>:
c00251da:	55                   	push   ebp
c00251db:	89 e5                	mov    ebp,esp
c00251dd:	83 ec 10             	sub    esp,0x10
c00251e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00251e3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00251e9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00251ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00251ef:	0f b6 d0             	movzx  edx,al
c00251f2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00251f5:	89 10                	mov    DWORD PTR [eax],edx
c00251f7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00251fa:	83 c0 10             	add    eax,0x10
c00251fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00251ff:	c9                   	leave  
c0025200:	c3                   	ret    
c0025201:	90                   	nop

c0025202 <IOAPIC::open(int, int, void*)>:
c0025202:	55                   	push   ebp
c0025203:	89 e5                	mov    ebp,esp
c0025205:	57                   	push   edi
c0025206:	56                   	push   esi
c0025207:	53                   	push   ebx
c0025208:	83 ec 0c             	sub    esp,0xc
c002520b:	83 ec 0c             	sub    esp,0xc
c002520e:	68 db c7 02 c0       	push   0xc002c7db
c0025213:	e8 d9 d6 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0025218:	83 c4 10             	add    esp,0x10
c002521b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002521e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025221:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002522a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025230:	8b 14 85 a0 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb60]
c0025237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002523a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025243:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025249:	8b 14 85 20 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfae0]
c0025250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025253:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002525c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025265:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002526b:	0f b6 f8             	movzx  edi,al
c002526e:	89 d0                	mov    eax,edx
c0025270:	ba 00 00 00 00       	mov    edx,0x0
c0025275:	89 c1                	mov    ecx,eax
c0025277:	80 e5 ff             	and    ch,0xff
c002527a:	89 cb                	mov    ebx,ecx
c002527c:	0f b6 f2             	movzx  esi,dl
c002527f:	89 d8                	mov    eax,ebx
c0025281:	89 f2                	mov    edx,esi
c0025283:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025286:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025289:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002528d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025291:	83 e0 00             	and    eax,0x0
c0025294:	09 d0                	or     eax,edx
c0025296:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002529a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002529d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00252a3:	8d 50 01             	lea    edx,[eax+0x1]
c00252a6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00252a9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00252af:	0f b6 d0             	movzx  edx,al
c00252b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252b5:	83 c2 08             	add    edx,0x8
c00252b8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00252bc:	0f b6 c9             	movzx  ecx,cl
c00252bf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00252c5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00252c9:	83 ec 08             	sub    esp,0x8
c00252cc:	6a 01                	push   0x1
c00252ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00252d1:	e8 04 ff ff ff       	call   c00251da <IOAPIC::read(int)>
c00252d6:	83 c4 10             	add    esp,0x10
c00252d9:	c1 f8 10             	sar    eax,0x10
c00252dc:	0f b6 c0             	movzx  eax,al
c00252df:	8d 50 01             	lea    edx,[eax+0x1]
c00252e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252e5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00252eb:	b8 00 00 00 00       	mov    eax,0x0
c00252f0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00252f3:	5b                   	pop    ebx
c00252f4:	5e                   	pop    esi
c00252f5:	5f                   	pop    edi
c00252f6:	5d                   	pop    ebp
c00252f7:	c3                   	ret    

c00252f8 <IOAPIC::write(int, int)>:
c00252f8:	55                   	push   ebp
c00252f9:	89 e5                	mov    ebp,esp
c00252fb:	83 ec 10             	sub    esp,0x10
c00252fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025301:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025307:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002530a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002530d:	0f b6 d0             	movzx  edx,al
c0025310:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025313:	89 10                	mov    DWORD PTR [eax],edx
c0025315:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025318:	8d 50 10             	lea    edx,[eax+0x10]
c002531b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002531e:	89 02                	mov    DWORD PTR [edx],eax
c0025320:	90                   	nop
c0025321:	c9                   	leave  
c0025322:	c3                   	ret    
c0025323:	90                   	nop

c0025324 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025324:	55                   	push   ebp
c0025325:	89 e5                	mov    ebp,esp
c0025327:	53                   	push   ebx
c0025328:	83 ec 2c             	sub    esp,0x2c
c002532b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002532e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025331:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025334:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025337:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002533a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002533d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025340:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025343:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025346:	88 d8                	mov    al,bl
c0025348:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002534b:	88 c8                	mov    al,cl
c002534d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025350:	88 d0                	mov    al,dl
c0025352:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025355:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025359:	83 c0 08             	add    eax,0x8
c002535c:	01 c0                	add    eax,eax
c002535e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025361:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025365:	83 c0 08             	add    eax,0x8
c0025368:	01 c0                	add    eax,eax
c002536a:	40                   	inc    eax
c002536b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002536e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025371:	50                   	push   eax
c0025372:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025375:	e8 60 fe ff ff       	call   c00251da <IOAPIC::read(int)>
c002537a:	83 c4 08             	add    esp,0x8
c002537d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025380:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025387:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002538a:	c1 e0 18             	shl    eax,0x18
c002538d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025390:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025393:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025396:	52                   	push   edx
c0025397:	50                   	push   eax
c0025398:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002539b:	e8 58 ff ff ff       	call   c00252f8 <IOAPIC::write(int, int)>
c00253a0:	83 c4 0c             	add    esp,0xc
c00253a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00253a6:	50                   	push   eax
c00253a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253aa:	e8 2b fe ff ff       	call   c00251da <IOAPIC::read(int)>
c00253af:	83 c4 08             	add    esp,0x8
c00253b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00253b5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00253bc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00253c3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00253ca:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00253ce:	74 09                	je     c00253d9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00253d0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00253d7:	eb 07                	jmp    c00253e0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00253d9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00253e0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00253e4:	74 09                	je     c00253ef <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00253e6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00253ed:	eb 07                	jmp    c00253f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00253ef:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00253f6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00253fd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025401:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025404:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025407:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002540a:	52                   	push   edx
c002540b:	50                   	push   eax
c002540c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002540f:	e8 e4 fe ff ff       	call   c00252f8 <IOAPIC::write(int, int)>
c0025414:	83 c4 0c             	add    esp,0xc
c0025417:	90                   	nop
c0025418:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002541b:	c9                   	leave  
c002541c:	c3                   	ret    
c002541d:	90                   	nop

c002541e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002541e:	55                   	push   ebp
c002541f:	89 e5                	mov    ebp,esp
c0025421:	57                   	push   edi
c0025422:	56                   	push   esi
c0025423:	53                   	push   ebx
c0025424:	83 ec 2c             	sub    esp,0x2c
c0025427:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002542a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002542d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025431:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025435:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025439:	74 5a                	je     c0025495 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002543b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002543f:	7f 44                	jg     c0025485 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025441:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025444:	05 20 cd 02 c0       	add    eax,0xc002cd20
c0025449:	8a 00                	mov    al,BYTE PTR [eax]
c002544b:	0f b6 c0             	movzx  eax,al
c002544e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025451:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025454:	66 8b 84 00 40 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfbc0]
c002545c:	0f b7 c0             	movzx  eax,ax
c002545f:	83 e0 02             	and    eax,0x2
c0025462:	85 c0                	test   eax,eax
c0025464:	74 04                	je     c002546a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025466:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002546a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002546d:	66 8b 84 00 40 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfbc0]
c0025475:	0f b7 c0             	movzx  eax,ax
c0025478:	83 e0 08             	and    eax,0x8
c002547b:	85 c0                	test   eax,eax
c002547d:	74 16                	je     c0025495 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002547f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025483:	eb 10                	jmp    c0025495 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025485:	83 ec 0c             	sub    esp,0xc
c0025488:	68 ec c7 02 c0       	push   0xc002c7ec
c002548d:	e8 d3 49 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0025492:	83 c4 10             	add    esp,0x10
c0025495:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025499:	a1 40 1e 03 c0       	mov    eax,ds:0xc0031e40
c002549e:	83 ec 08             	sub    esp,0x8
c00254a1:	50                   	push   eax
c00254a2:	68 24 c8 02 c0       	push   0xc002c824
c00254a7:	e8 45 d4 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00254ac:	83 c4 10             	add    esp,0x10
c00254af:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00254b6:	a1 40 1e 03 c0       	mov    eax,ds:0xc0031e40
c00254bb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00254be:	7d 67                	jge    c0025527 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00254c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254c3:	8b 04 85 60 1e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce1a0]
c00254ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00254cd:	83 ec 08             	sub    esp,0x8
c00254d0:	52                   	push   edx
c00254d1:	50                   	push   eax
c00254d2:	e8 d1 fc ff ff       	call   c00251a8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00254d7:	83 c4 10             	add    esp,0x10
c00254da:	84 c0                	test   al,al
c00254dc:	74 44                	je     c0025522 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00254de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254e1:	8b 1c 85 60 1e 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce1a0]
c00254e8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00254ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00254ef:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00254f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254f6:	83 c0 20             	add    eax,0x20
c00254f9:	0f b6 f0             	movzx  esi,al
c00254fc:	b8 00 00 00 00       	mov    eax,0x0
c0025501:	99                   	cdq    
c0025502:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025505:	0f b6 c9             	movzx  ecx,cl
c0025508:	83 ec 04             	sub    esp,0x4
c002550b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002550e:	57                   	push   edi
c002550f:	56                   	push   esi
c0025510:	52                   	push   edx
c0025511:	50                   	push   eax
c0025512:	51                   	push   ecx
c0025513:	53                   	push   ebx
c0025514:	e8 0b fe ff ff       	call   c0025324 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025519:	83 c4 20             	add    esp,0x20
c002551c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025520:	eb 05                	jmp    c0025527 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025522:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025525:	eb 8f                	jmp    c00254b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025527:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002552a:	83 f0 01             	xor    eax,0x1
c002552d:	84 c0                	test   al,al
c002552f:	74 10                	je     c0025541 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025531:	83 ec 0c             	sub    esp,0xc
c0025534:	68 3b c8 02 c0       	push   0xc002c83b
c0025539:	e8 27 49 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c002553e:	83 c4 10             	add    esp,0x10
c0025541:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025545:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002554c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025550:	7f 65                	jg     c00255b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025555:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025558:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002555f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025562:	01 ca                	add    edx,ecx
c0025564:	83 c2 54             	add    edx,0x54
c0025567:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002556b:	85 c0                	test   eax,eax
c002556d:	75 43                	jne    c00255b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002556f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025572:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025575:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002557c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002557f:	01 ca                	add    edx,ecx
c0025581:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025584:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025587:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002558b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002558e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025591:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025598:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002559b:	01 ca                	add    edx,ecx
c002559d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00255a3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00255a6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00255aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255ad:	83 e8 20             	sub    eax,0x20
c00255b0:	eb 1a                	jmp    c00255cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00255b2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00255b5:	eb 95                	jmp    c002554c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00255b7:	83 ec 0c             	sub    esp,0xc
c00255ba:	68 48 c8 02 c0       	push   0xc002c848
c00255bf:	e8 a1 48 ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c00255c4:	83 c4 10             	add    esp,0x10
c00255c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00255cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00255cf:	5b                   	pop    ebx
c00255d0:	5e                   	pop    esi
c00255d1:	5f                   	pop    edi
c00255d2:	5d                   	pop    ebp
c00255d3:	c3                   	ret    

c00255d4 <PIC::disable()>:
c00255d4:	55                   	push   ebp
c00255d5:	89 e5                	mov    ebp,esp
c00255d7:	83 ec 10             	sub    esp,0x10
c00255da:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00255e0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00255e4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00255e7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00255eb:	ee                   	out    dx,al
c00255ec:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00255f2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00255f6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00255f9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00255fd:	ee                   	out    dx,al
c00255fe:	90                   	nop
c00255ff:	c9                   	leave  
c0025600:	c3                   	ret    
c0025601:	90                   	nop

c0025602 <PIC::close(int, int, void*)>:
c0025602:	55                   	push   ebp
c0025603:	89 e5                	mov    ebp,esp
c0025605:	83 ec 08             	sub    esp,0x8
c0025608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002560b:	8b 00                	mov    eax,DWORD PTR [eax]
c002560d:	83 c0 3c             	add    eax,0x3c
c0025610:	8b 00                	mov    eax,DWORD PTR [eax]
c0025612:	83 ec 0c             	sub    esp,0xc
c0025615:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025618:	ff d0                	call   eax
c002561a:	83 c4 10             	add    esp,0x10
c002561d:	b8 00 00 00 00       	mov    eax,0x0
c0025622:	c9                   	leave  
c0025623:	c3                   	ret    

c0025624 <PIC::PIC()>:
c0025624:	83 ec 0c             	sub    esp,0xc
c0025627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002562b:	83 ec 08             	sub    esp,0x8
c002562e:	68 f4 c8 02 c0       	push   0xc002c8f4
c0025633:	50                   	push   eax
c0025634:	e8 3b f0 fe ff       	call   c0014674 <InterruptController::InterruptController(char const*)>
c0025639:	83 c4 10             	add    esp,0x10
c002563c:	ba 20 c9 02 c0       	mov    edx,0xc002c920
c0025641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025645:	89 10                	mov    DWORD PTR [eax],edx
c0025647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002564b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025651:	0f b6 d0             	movzx  edx,al
c0025654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025658:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002565f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025663:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025669:	0f b6 d0             	movzx  edx,al
c002566c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025670:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025679:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002567f:	8d 50 01             	lea    edx,[eax+0x1]
c0025682:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025686:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002568c:	0f b6 d0             	movzx  edx,al
c002568f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025693:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025697:	83 e1 3f             	and    ecx,0x3f
c002569a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002569e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00256a8:	0f b6 d0             	movzx  edx,al
c00256ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256af:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00256b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00256c0:	0f b6 d0             	movzx  edx,al
c00256c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00256cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00256d6:	8d 50 01             	lea    edx,[eax+0x1]
c00256d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00256dd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00256e3:	0f b6 d0             	movzx  edx,al
c00256e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00256ee:	83 e1 3f             	and    ecx,0x3f
c00256f1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00256f5:	90                   	nop
c00256f6:	83 c4 0c             	add    esp,0xc
c00256f9:	c3                   	ret    

c00256fa <PIC::ioWait()>:
c00256fa:	eb 00                	jmp    c00256fc <PIC::ioWait()+0x2>
c00256fc:	eb 00                	jmp    c00256fe <PIC::ioWait()+0x4>
c00256fe:	90                   	nop
c00256ff:	c3                   	ret    

c0025700 <PIC::getIRQReg(int)>:
c0025700:	55                   	push   ebp
c0025701:	89 e5                	mov    ebp,esp
c0025703:	83 ec 10             	sub    esp,0x10
c0025706:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025709:	0f b6 c0             	movzx  eax,al
c002570c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025712:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025715:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025718:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002571c:	ee                   	out    dx,al
c002571d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025720:	0f b6 c0             	movzx  eax,al
c0025723:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025729:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002572c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002572f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025733:	ee                   	out    dx,al
c0025734:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002573a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002573e:	89 c2                	mov    edx,eax
c0025740:	ec                   	in     al,dx
c0025741:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025744:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025747:	0f b6 c0             	movzx  eax,al
c002574a:	c1 e0 08             	shl    eax,0x8
c002574d:	89 c1                	mov    ecx,eax
c002574f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025755:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025759:	89 c2                	mov    edx,eax
c002575b:	ec                   	in     al,dx
c002575c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002575f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025762:	0f b6 c0             	movzx  eax,al
c0025765:	09 c8                	or     eax,ecx
c0025767:	c9                   	leave  
c0025768:	c3                   	ret    
c0025769:	90                   	nop

c002576a <PIC::eoi(unsigned char)>:
c002576a:	55                   	push   ebp
c002576b:	89 e5                	mov    ebp,esp
c002576d:	83 ec 14             	sub    esp,0x14
c0025770:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025773:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025776:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002577a:	75 1e                	jne    c002579a <PIC::eoi(unsigned char)+0x30>
c002577c:	6a 0b                	push   0xb
c002577e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025781:	e8 7a ff ff ff       	call   c0025700 <PIC::getIRQReg(int)>
c0025786:	83 c4 08             	add    esp,0x8
c0025789:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002578d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025791:	25 80 00 00 00       	and    eax,0x80
c0025796:	85 c0                	test   eax,eax
c0025798:	74 5f                	je     c00257f9 <PIC::eoi(unsigned char)+0x8f>
c002579a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002579e:	75 2d                	jne    c00257cd <PIC::eoi(unsigned char)+0x63>
c00257a0:	6a 0b                	push   0xb
c00257a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257a5:	e8 56 ff ff ff       	call   c0025700 <PIC::getIRQReg(int)>
c00257aa:	83 c4 08             	add    esp,0x8
c00257ad:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00257b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257b4:	66 85 c0             	test   ax,ax
c00257b7:	78 14                	js     c00257cd <PIC::eoi(unsigned char)+0x63>
c00257b9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00257bf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00257c3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00257c6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00257ca:	ee                   	out    dx,al
c00257cb:	eb 2d                	jmp    c00257fa <PIC::eoi(unsigned char)+0x90>
c00257cd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00257d1:	76 12                	jbe    c00257e5 <PIC::eoi(unsigned char)+0x7b>
c00257d3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00257d9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00257dd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00257e0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00257e4:	ee                   	out    dx,al
c00257e5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00257eb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00257ef:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00257f2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00257f6:	ee                   	out    dx,al
c00257f7:	eb 01                	jmp    c00257fa <PIC::eoi(unsigned char)+0x90>
c00257f9:	90                   	nop
c00257fa:	c9                   	leave  
c00257fb:	c3                   	ret    

c00257fc <PIC::remap()>:
c00257fc:	55                   	push   ebp
c00257fd:	89 e5                	mov    ebp,esp
c00257ff:	83 ec 48             	sub    esp,0x48
c0025802:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025809:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025810:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025816:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025819:	89 c2                	mov    edx,eax
c002581b:	ec                   	in     al,dx
c002581c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002581f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025822:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025825:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002582b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002582e:	89 c2                	mov    edx,eax
c0025830:	ec                   	in     al,dx
c0025831:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025834:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025837:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002583a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025840:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025844:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025847:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002584a:	ee                   	out    dx,al
c002584b:	83 ec 0c             	sub    esp,0xc
c002584e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025851:	e8 a4 fe ff ff       	call   c00256fa <PIC::ioWait()>
c0025856:	83 c4 10             	add    esp,0x10
c0025859:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002585f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025863:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025866:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025869:	ee                   	out    dx,al
c002586a:	83 ec 0c             	sub    esp,0xc
c002586d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025870:	e8 85 fe ff ff       	call   c00256fa <PIC::ioWait()>
c0025875:	83 c4 10             	add    esp,0x10
c0025878:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002587b:	0f b6 c0             	movzx  eax,al
c002587e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025884:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025887:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002588a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002588d:	ee                   	out    dx,al
c002588e:	83 ec 0c             	sub    esp,0xc
c0025891:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025894:	e8 61 fe ff ff       	call   c00256fa <PIC::ioWait()>
c0025899:	83 c4 10             	add    esp,0x10
c002589c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002589f:	0f b6 c0             	movzx  eax,al
c00258a2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00258a8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00258ab:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00258ae:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00258b1:	ee                   	out    dx,al
c00258b2:	83 ec 0c             	sub    esp,0xc
c00258b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b8:	e8 3d fe ff ff       	call   c00256fa <PIC::ioWait()>
c00258bd:	83 c4 10             	add    esp,0x10
c00258c0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00258c6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00258ca:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00258cd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00258d0:	ee                   	out    dx,al
c00258d1:	83 ec 0c             	sub    esp,0xc
c00258d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258d7:	e8 1e fe ff ff       	call   c00256fa <PIC::ioWait()>
c00258dc:	83 c4 10             	add    esp,0x10
c00258df:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00258e5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00258e9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00258ec:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258ef:	ee                   	out    dx,al
c00258f0:	83 ec 0c             	sub    esp,0xc
c00258f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258f6:	e8 ff fd ff ff       	call   c00256fa <PIC::ioWait()>
c00258fb:	83 c4 10             	add    esp,0x10
c00258fe:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025904:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025908:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002590b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002590e:	ee                   	out    dx,al
c002590f:	83 ec 0c             	sub    esp,0xc
c0025912:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025915:	e8 e0 fd ff ff       	call   c00256fa <PIC::ioWait()>
c002591a:	83 c4 10             	add    esp,0x10
c002591d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025923:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025927:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002592a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002592d:	ee                   	out    dx,al
c002592e:	83 ec 0c             	sub    esp,0xc
c0025931:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025934:	e8 c1 fd ff ff       	call   c00256fa <PIC::ioWait()>
c0025939:	83 c4 10             	add    esp,0x10
c002593c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025940:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025946:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025949:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002594c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002594f:	ee                   	out    dx,al
c0025950:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025954:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002595a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002595d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025960:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025963:	ee                   	out    dx,al
c0025964:	90                   	nop
c0025965:	c9                   	leave  
c0025966:	c3                   	ret    
c0025967:	90                   	nop

c0025968 <PIC::open(int, int, void*)>:
c0025968:	55                   	push   ebp
c0025969:	89 e5                	mov    ebp,esp
c002596b:	83 ec 18             	sub    esp,0x18
c002596e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025974:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025978:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002597b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002597f:	ee                   	out    dx,al
c0025980:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025986:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002598a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002598d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025991:	ee                   	out    dx,al
c0025992:	83 ec 0c             	sub    esp,0xc
c0025995:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025998:	e8 5f fe ff ff       	call   c00257fc <PIC::remap()>
c002599d:	83 c4 10             	add    esp,0x10
c00259a0:	b8 00 00 00 00       	mov    eax,0x0
c00259a5:	c9                   	leave  
c00259a6:	c3                   	ret    
c00259a7:	90                   	nop

c00259a8 <APICTimer::close(int, int, void*)>:
c00259a8:	b8 00 00 00 00       	mov    eax,0x0
c00259ad:	c3                   	ret    

c00259ae <apicTimerHandler(regs*, void*)>:
c00259ae:	83 ec 0c             	sub    esp,0xc
c00259b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00259b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00259b7:	99                   	cdq    
c00259b8:	52                   	push   edx
c00259b9:	50                   	push   eax
c00259ba:	6a 00                	push   0x0
c00259bc:	68 00 ca 9a 3b       	push   0x3b9aca00
c00259c1:	e8 86 07 00 00       	call   c002614c <__udivdi3>
c00259c6:	83 c4 10             	add    esp,0x10
c00259c9:	83 ec 08             	sub    esp,0x8
c00259cc:	52                   	push   edx
c00259cd:	50                   	push   eax
c00259ce:	e8 98 0c ff ff       	call   c001666b <timerHandler(unsigned long long)>
c00259d3:	83 c4 10             	add    esp,0x10
c00259d6:	90                   	nop
c00259d7:	83 c4 0c             	add    esp,0xc
c00259da:	c3                   	ret    
c00259db:	90                   	nop

c00259dc <APICTimer::write(int)>:
c00259dc:	53                   	push   ebx
c00259dd:	83 ec 28             	sub    esp,0x28
c00259e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00259e4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00259e8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00259ee:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00259f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259f9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00259ff:	83 ec 0c             	sub    esp,0xc
c0025a02:	50                   	push   eax
c0025a03:	e8 de f4 ff ff       	call   c0024ee6 <APIC::getBase()>
c0025a08:	83 c4 10             	add    esp,0x10
c0025a0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025a0f:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0025a14:	8b 15 54 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e154
c0025a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025a1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025a22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a26:	05 e0 03 00 00       	add    eax,0x3e0
c0025a2b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025a31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a35:	05 80 03 00 00       	add    eax,0x380
c0025a3a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025a40:	fb                   	sti    
c0025a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a49:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025a4e:	83 d2 00             	adc    edx,0x0
c0025a51:	89 c1                	mov    ecx,eax
c0025a53:	89 d3                	mov    ebx,edx
c0025a55:	a1 50 e1 02 c0       	mov    eax,ds:0xc002e150
c0025a5a:	8b 15 54 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e154
c0025a60:	39 c8                	cmp    eax,ecx
c0025a62:	89 d0                	mov    eax,edx
c0025a64:	19 d8                	sbb    eax,ebx
c0025a66:	73 02                	jae    c0025a6a <APICTimer::write(int)+0x8e>
c0025a68:	eb d7                	jmp    c0025a41 <APICTimer::write(int)+0x65>
c0025a6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a6e:	05 20 03 00 00       	add    eax,0x320
c0025a73:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025a79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a7d:	05 90 03 00 00       	add    eax,0x390
c0025a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a84:	f7 d0                	not    eax
c0025a86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025a8a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a92:	ba 00 00 00 00       	mov    edx,0x0
c0025a97:	f7 f3                	div    ebx
c0025a99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025aa1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025aa7:	0d 00 00 02 00       	or     eax,0x20000
c0025aac:	89 c2                	mov    edx,eax
c0025aae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ab2:	05 20 03 00 00       	add    eax,0x320
c0025ab7:	89 10                	mov    DWORD PTR [eax],edx
c0025ab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025abd:	05 e0 03 00 00       	add    eax,0x3e0
c0025ac2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025ac8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025acc:	05 80 03 00 00       	add    eax,0x380
c0025ad1:	89 c2                	mov    edx,eax
c0025ad3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ad7:	89 02                	mov    DWORD PTR [edx],eax
c0025ad9:	90                   	nop
c0025ada:	83 c4 28             	add    esp,0x28
c0025add:	5b                   	pop    ebx
c0025ade:	c3                   	ret    
c0025adf:	90                   	nop

c0025ae0 <APICTimer::open(int, int, void*)>:
c0025ae0:	57                   	push   edi
c0025ae1:	56                   	push   esi
c0025ae2:	53                   	push   ebx
c0025ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae9:	83 c0 24             	add    eax,0x24
c0025aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aee:	83 ec 08             	sub    esp,0x8
c0025af1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025af5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025af9:	ff d0                	call   eax
c0025afb:	83 c4 10             	add    esp,0x10
c0025afe:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c0025b03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b09:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025b0f:	83 ec 0c             	sub    esp,0xc
c0025b12:	50                   	push   eax
c0025b13:	e8 ce f3 ff ff       	call   c0024ee6 <APIC::getBase()>
c0025b18:	83 c4 10             	add    esp,0x10
c0025b1b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b25:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b2b:	0f b6 f8             	movzx  edi,al
c0025b2e:	89 d0                	mov    eax,edx
c0025b30:	ba 00 00 00 00       	mov    edx,0x0
c0025b35:	89 c1                	mov    ecx,eax
c0025b37:	80 e5 ff             	and    ch,0xff
c0025b3a:	89 cb                	mov    ebx,ecx
c0025b3c:	0f b6 f2             	movzx  esi,dl
c0025b3f:	89 d8                	mov    eax,ebx
c0025b41:	89 f2                	mov    edx,esi
c0025b43:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b47:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b4a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b4e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b52:	83 e0 00             	and    eax,0x0
c0025b55:	09 d0                	or     eax,edx
c0025b57:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b5f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b65:	8d 50 01             	lea    edx,[eax+0x1]
c0025b68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b6c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b72:	0f b6 d0             	movzx  edx,al
c0025b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b79:	83 c2 08             	add    edx,0x8
c0025b7c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b80:	0f b6 c9             	movzx  ecx,cl
c0025b83:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025b89:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b91:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025b95:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025ba3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025ba9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025bad:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025bb3:	83 ec 0c             	sub    esp,0xc
c0025bb6:	51                   	push   ecx
c0025bb7:	6a 01                	push   0x1
c0025bb9:	68 ae 59 02 c0       	push   0xc00259ae
c0025bbe:	52                   	push   edx
c0025bbf:	50                   	push   eax
c0025bc0:	e8 d7 e0 fe ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025bc5:	83 c4 20             	add    esp,0x20
c0025bc8:	89 c2                	mov    edx,eax
c0025bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bce:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025bd4:	b8 00 00 00 00       	mov    eax,0x0
c0025bd9:	5b                   	pop    ebx
c0025bda:	5e                   	pop    esi
c0025bdb:	5f                   	pop    edi
c0025bdc:	c3                   	ret    
c0025bdd:	90                   	nop

c0025bde <APICTimer::APICTimer()>:
c0025bde:	83 ec 0c             	sub    esp,0xc
c0025be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be5:	83 ec 08             	sub    esp,0x8
c0025be8:	68 60 c9 02 c0       	push   0xc002c960
c0025bed:	50                   	push   eax
c0025bee:	e8 e9 09 ff ff       	call   c00165dc <Timer::Timer(char const*)>
c0025bf3:	83 c4 10             	add    esp,0x10
c0025bf6:	ba 74 c9 02 c0       	mov    edx,0xc002c974
c0025bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bff:	89 10                	mov    DWORD PTR [eax],edx
c0025c01:	90                   	nop
c0025c02:	83 c4 0c             	add    esp,0xc
c0025c05:	c3                   	ret    

c0025c06 <PIT::write(int)>:
c0025c06:	83 ec 10             	sub    esp,0x10
c0025c09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025c11:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025c17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025c1b:	a3 84 1e 03 c0       	mov    ds:0xc0031e84,eax
c0025c20:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025c25:	99                   	cdq    
c0025c26:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025c2e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025c35:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025c3a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025c3e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025c43:	ee                   	out    dx,al
c0025c44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c48:	0f b6 c0             	movzx  eax,al
c0025c4b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025c52:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025c56:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025c5a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025c5f:	ee                   	out    dx,al
c0025c60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025c64:	c1 f8 08             	sar    eax,0x8
c0025c67:	0f b6 c0             	movzx  eax,al
c0025c6a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025c71:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025c75:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025c79:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025c7e:	ee                   	out    dx,al
c0025c7f:	90                   	nop
c0025c80:	83 c4 10             	add    esp,0x10
c0025c83:	c3                   	ret    

c0025c84 <pitHandler(regs*, void*)>:
c0025c84:	83 ec 0c             	sub    esp,0xc
c0025c87:	a1 84 1e 03 c0       	mov    eax,ds:0xc0031e84
c0025c8c:	99                   	cdq    
c0025c8d:	52                   	push   edx
c0025c8e:	50                   	push   eax
c0025c8f:	6a 00                	push   0x0
c0025c91:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025c96:	e8 b1 04 00 00       	call   c002614c <__udivdi3>
c0025c9b:	83 c4 10             	add    esp,0x10
c0025c9e:	83 ec 08             	sub    esp,0x8
c0025ca1:	52                   	push   edx
c0025ca2:	50                   	push   eax
c0025ca3:	e8 c3 09 ff ff       	call   c001666b <timerHandler(unsigned long long)>
c0025ca8:	83 c4 10             	add    esp,0x10
c0025cab:	90                   	nop
c0025cac:	83 c4 0c             	add    esp,0xc
c0025caf:	c3                   	ret    

c0025cb0 <PIT::open(int, int, void*)>:
c0025cb0:	83 ec 0c             	sub    esp,0xc
c0025cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cb9:	83 c0 24             	add    eax,0x24
c0025cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cbe:	83 ec 08             	sub    esp,0x8
c0025cc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cc9:	ff d0                	call   eax
c0025ccb:	83 c4 10             	add    esp,0x10
c0025cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd2:	83 ec 0c             	sub    esp,0xc
c0025cd5:	6a 00                	push   0x0
c0025cd7:	6a 01                	push   0x1
c0025cd9:	68 84 5c 02 c0       	push   0xc0025c84
c0025cde:	6a 00                	push   0x0
c0025ce0:	50                   	push   eax
c0025ce1:	e8 b6 df fe ff       	call   c0013c9c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025ce6:	83 c4 20             	add    esp,0x20
c0025ce9:	89 c2                	mov    edx,eax
c0025ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cef:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025cf5:	b8 00 00 00 00       	mov    eax,0x0
c0025cfa:	83 c4 0c             	add    esp,0xc
c0025cfd:	c3                   	ret    

c0025cfe <PIT::close(int, int, void*)>:
c0025cfe:	83 ec 0c             	sub    esp,0xc
c0025d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d05:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d13:	6a 01                	push   0x1
c0025d15:	68 84 5c 02 c0       	push   0xc0025c84
c0025d1a:	6a 00                	push   0x0
c0025d1c:	50                   	push   eax
c0025d1d:	e8 b8 df fe ff       	call   c0013cda <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025d22:	83 c4 10             	add    esp,0x10
c0025d25:	b8 00 00 00 00       	mov    eax,0x0
c0025d2a:	83 c4 0c             	add    esp,0xc
c0025d2d:	c3                   	ret    

c0025d2e <PIT::PIT()>:
c0025d2e:	83 ec 0c             	sub    esp,0xc
c0025d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d35:	83 ec 08             	sub    esp,0x8
c0025d38:	68 9c c9 02 c0       	push   0xc002c99c
c0025d3d:	50                   	push   eax
c0025d3e:	e8 99 08 ff ff       	call   c00165dc <Timer::Timer(char const*)>
c0025d43:	83 c4 10             	add    esp,0x10
c0025d46:	ba c4 c9 02 c0       	mov    edx,0xc002c9c4
c0025d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d4f:	89 10                	mov    DWORD PTR [eax],edx
c0025d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d55:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d5b:	0f b6 d0             	movzx  edx,al
c0025d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d62:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d73:	0f b6 d0             	movzx  edx,al
c0025d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d7a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d89:	8d 50 01             	lea    edx,[eax+0x1]
c0025d8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d90:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d96:	0f b6 d0             	movzx  edx,al
c0025d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d9d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025da1:	83 e1 3f             	and    ecx,0x3f
c0025da4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025da8:	90                   	nop
c0025da9:	83 c4 0c             	add    esp,0xc
c0025dac:	c3                   	ret    
c0025dad:	66 90                	xchg   ax,ax
c0025daf:	90                   	nop

c0025db0 <avxDetect>:
c0025db0:	b8 00 00 00 00       	mov    eax,0x0
c0025db5:	c3                   	ret    

c0025db6 <avxSave>:
c0025db6:	c3                   	ret    

c0025db7 <avxLoad>:
c0025db7:	c3                   	ret    

c0025db8 <avxInit>:
c0025db8:	c3                   	ret    

c0025db9 <avxClose>:
c0025db9:	c3                   	ret    

c0025dba <wouldSheSayYes>:
c0025dba:	c3                   	ret    
c0025dbb:	49                   	dec    ecx
c0025dbc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025dc0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025dc4:	75 20                	jne    c0025de6 <sseDetect.noSSE+0x1>
c0025dc6:	4e                   	dec    esi
c0025dc7:	79 61                	jns    c0025e2a <x87Detect+0x14>
c0025dc9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0025dce:	66 90                	xchg   ax,ax

c0025dd0 <absolutelyNoChanceInHell>:
c0025dd0:	b8 01 00 00 00       	mov    eax,0x1
c0025dd5:	0f a2                	cpuid  
c0025dd7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0025ddd:	74 06                	je     c0025de5 <sseDetect.noSSE>
c0025ddf:	b8 01 00 00 00       	mov    eax,0x1
c0025de4:	c3                   	ret    

c0025de5 <sseDetect.noSSE>:
c0025de5:	31 c0                	xor    eax,eax
c0025de7:	c3                   	ret    

c0025de8 <sseSave>:
c0025de8:	0f ae 44 24 08       	fxsave [esp+0x8]
c0025ded:	c3                   	ret    

c0025dee <sseLoad>:
c0025dee:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025df3:	c3                   	ret    

c0025df4 <sseInit>:
c0025df4:	e8 43 00 00 00       	call   c0025e3c <x87Init>
c0025df9:	0f 20 e0             	mov    eax,cr4
c0025dfc:	66 0d 00 06          	or     ax,0x600
c0025e00:	0f 22 e0             	mov    cr4,eax
c0025e03:	c3                   	ret    

c0025e04 <sseClose>:
c0025e04:	c3                   	ret    
c0025e05:	66 90                	xchg   ax,ax
c0025e07:	66 90                	xchg   ax,ax
c0025e09:	66 90                	xchg   ax,ax
c0025e0b:	66 90                	xchg   ax,ax
c0025e0d:	66 90                	xchg   ax,ax
c0025e0f:	90                   	nop

c0025e10 <value_37F>:
c0025e10:	7f 03                	jg     c0025e15 <value_37A+0x1>

c0025e12 <value_37E>:
c0025e12:	7e 03                	jle    c0025e17 <x87Detect+0x1>

c0025e14 <value_37A>:
c0025e14:	7a 03                	jp     c0025e19 <x87Detect+0x3>

c0025e16 <x87Detect>:
c0025e16:	b8 01 00 00 00       	mov    eax,0x1
c0025e1b:	0f a2                	cpuid  
c0025e1d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025e23:	74 06                	je     c0025e2b <x87Detect.nox87>
c0025e25:	b8 01 00 00 00       	mov    eax,0x1
c0025e2a:	c3                   	ret    

c0025e2b <x87Detect.nox87>:
c0025e2b:	b8 00 00 00 00       	mov    eax,0x0
c0025e30:	c3                   	ret    

c0025e31 <x87Save>:
c0025e31:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025e36:	c3                   	ret    

c0025e37 <x87Load>:
c0025e37:	dd 64 24 08          	frstor [esp+0x8]
c0025e3b:	c3                   	ret    

c0025e3c <x87Init>:
c0025e3c:	9b db e3             	finit  
c0025e3f:	0f 20 c0             	mov    eax,cr0
c0025e42:	66 25 fb ff          	and    ax,0xfffb
c0025e46:	66 0d 22 00          	or     ax,0x22
c0025e4a:	0f 22 c0             	mov    cr0,eax
c0025e4d:	0f 06                	clts   
c0025e4f:	d9 2d 14 5e 02 c0    	fldcw  WORD PTR ds:0xc0025e14
c0025e55:	c3                   	ret    

c0025e56 <x87Close>:
c0025e56:	c3                   	ret    
c0025e57:	90                   	nop

c0025e58 <__do_global_ctors_aux>:
c0025e58:	a1 9c 89 02 c0       	mov    eax,ds:0xc002899c
c0025e5d:	83 f8 ff             	cmp    eax,0xffffffff
c0025e60:	74 1a                	je     c0025e7c <__do_global_ctors_aux+0x24>
c0025e62:	55                   	push   ebp
c0025e63:	89 e5                	mov    ebp,esp
c0025e65:	53                   	push   ebx
c0025e66:	52                   	push   edx
c0025e67:	bb 9c 89 02 c0       	mov    ebx,0xc002899c
c0025e6c:	ff d0                	call   eax
c0025e6e:	83 eb 04             	sub    ebx,0x4
c0025e71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025e73:	83 f8 ff             	cmp    eax,0xffffffff
c0025e76:	75 f4                	jne    c0025e6c <__do_global_ctors_aux+0x14>
c0025e78:	58                   	pop    eax
c0025e79:	5b                   	pop    ebx
c0025e7a:	5d                   	pop    ebp
c0025e7b:	c3                   	ret    
c0025e7c:	c3                   	ret    
c0025e7d:	66 90                	xchg   ax,ax
c0025e7f:	90                   	nop

c0025e80 <__divdi3>:
c0025e80:	55                   	push   ebp
c0025e81:	57                   	push   edi
c0025e82:	56                   	push   esi
c0025e83:	53                   	push   ebx
c0025e84:	83 ec 1c             	sub    esp,0x1c
c0025e87:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025e8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e8f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025e92:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025e96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025e9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025e9e:	85 db                	test   ebx,ebx
c0025ea0:	0f 88 8e 00 00 00    	js     c0025f34 <__divdi3+0xb4>
c0025ea6:	89 dd                	mov    ebp,ebx
c0025ea8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025eb0:	89 d3                	mov    ebx,edx
c0025eb2:	85 d2                	test   edx,edx
c0025eb4:	79 0d                	jns    c0025ec3 <__divdi3+0x43>
c0025eb6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0025eba:	f7 d8                	neg    eax
c0025ebc:	83 d2 00             	adc    edx,0x0
c0025ebf:	f7 da                	neg    edx
c0025ec1:	89 d3                	mov    ebx,edx
c0025ec3:	89 c7                	mov    edi,eax
c0025ec5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025ec8:	85 db                	test   ebx,ebx
c0025eca:	75 48                	jne    c0025f14 <__divdi3+0x94>
c0025ecc:	39 ef                	cmp    edi,ebp
c0025ece:	76 24                	jbe    c0025ef4 <__divdi3+0x74>
c0025ed0:	89 ea                	mov    edx,ebp
c0025ed2:	f7 f7                	div    edi
c0025ed4:	89 c1                	mov    ecx,eax
c0025ed6:	31 f6                	xor    esi,esi
c0025ed8:	89 c8                	mov    eax,ecx
c0025eda:	89 f2                	mov    edx,esi
c0025edc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025ee0:	85 c9                	test   ecx,ecx
c0025ee2:	74 07                	je     c0025eeb <__divdi3+0x6b>
c0025ee4:	f7 d8                	neg    eax
c0025ee6:	83 d2 00             	adc    edx,0x0
c0025ee9:	f7 da                	neg    edx
c0025eeb:	83 c4 1c             	add    esp,0x1c
c0025eee:	5b                   	pop    ebx
c0025eef:	5e                   	pop    esi
c0025ef0:	5f                   	pop    edi
c0025ef1:	5d                   	pop    ebp
c0025ef2:	c3                   	ret    
c0025ef3:	90                   	nop
c0025ef4:	85 ff                	test   edi,edi
c0025ef6:	75 0b                	jne    c0025f03 <__divdi3+0x83>
c0025ef8:	b8 01 00 00 00       	mov    eax,0x1
c0025efd:	31 d2                	xor    edx,edx
c0025eff:	f7 f3                	div    ebx
c0025f01:	89 c7                	mov    edi,eax
c0025f03:	31 d2                	xor    edx,edx
c0025f05:	89 e8                	mov    eax,ebp
c0025f07:	f7 f7                	div    edi
c0025f09:	89 c6                	mov    esi,eax
c0025f0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025f0e:	f7 f7                	div    edi
c0025f10:	89 c1                	mov    ecx,eax
c0025f12:	eb c4                	jmp    c0025ed8 <__divdi3+0x58>
c0025f14:	39 eb                	cmp    ebx,ebp
c0025f16:	77 3c                	ja     c0025f54 <__divdi3+0xd4>
c0025f18:	0f bd f3             	bsr    esi,ebx
c0025f1b:	83 f6 1f             	xor    esi,0x1f
c0025f1e:	75 40                	jne    c0025f60 <__divdi3+0xe0>
c0025f20:	39 eb                	cmp    ebx,ebp
c0025f22:	72 09                	jb     c0025f2d <__divdi3+0xad>
c0025f24:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025f27:	0f 87 97 00 00 00    	ja     c0025fc4 <__divdi3+0x144>
c0025f2d:	b9 01 00 00 00       	mov    ecx,0x1
c0025f32:	eb a4                	jmp    c0025ed8 <__divdi3+0x58>
c0025f34:	f7 d9                	neg    ecx
c0025f36:	83 d3 00             	adc    ebx,0x0
c0025f39:	f7 db                	neg    ebx
c0025f3b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025f3e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025f42:	89 dd                	mov    ebp,ebx
c0025f44:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0025f4c:	e9 5f ff ff ff       	jmp    c0025eb0 <__divdi3+0x30>
c0025f51:	8d 76 00             	lea    esi,[esi+0x0]
c0025f54:	31 f6                	xor    esi,esi
c0025f56:	31 c9                	xor    ecx,ecx
c0025f58:	e9 7b ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0025f60:	b8 20 00 00 00       	mov    eax,0x20
c0025f65:	29 f0                	sub    eax,esi
c0025f67:	89 f1                	mov    ecx,esi
c0025f69:	d3 e3                	shl    ebx,cl
c0025f6b:	89 fa                	mov    edx,edi
c0025f6d:	88 c1                	mov    cl,al
c0025f6f:	d3 ea                	shr    edx,cl
c0025f71:	09 da                	or     edx,ebx
c0025f73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025f77:	89 f1                	mov    ecx,esi
c0025f79:	d3 e7                	shl    edi,cl
c0025f7b:	89 eb                	mov    ebx,ebp
c0025f7d:	88 c1                	mov    cl,al
c0025f7f:	d3 eb                	shr    ebx,cl
c0025f81:	89 f1                	mov    ecx,esi
c0025f83:	d3 e5                	shl    ebp,cl
c0025f85:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025f88:	88 c1                	mov    cl,al
c0025f8a:	d3 ea                	shr    edx,cl
c0025f8c:	09 d5                	or     ebp,edx
c0025f8e:	89 e8                	mov    eax,ebp
c0025f90:	89 da                	mov    edx,ebx
c0025f92:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025f96:	89 d3                	mov    ebx,edx
c0025f98:	89 c5                	mov    ebp,eax
c0025f9a:	f7 e7                	mul    edi
c0025f9c:	39 d3                	cmp    ebx,edx
c0025f9e:	72 18                	jb     c0025fb8 <__divdi3+0x138>
c0025fa0:	74 0a                	je     c0025fac <__divdi3+0x12c>
c0025fa2:	89 e9                	mov    ecx,ebp
c0025fa4:	31 f6                	xor    esi,esi
c0025fa6:	e9 2d ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025fab:	90                   	nop
c0025fac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0025faf:	89 f1                	mov    ecx,esi
c0025fb1:	d3 e7                	shl    edi,cl
c0025fb3:	39 c7                	cmp    edi,eax
c0025fb5:	73 eb                	jae    c0025fa2 <__divdi3+0x122>
c0025fb7:	90                   	nop
c0025fb8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0025fbb:	31 f6                	xor    esi,esi
c0025fbd:	e9 16 ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025fc2:	66 90                	xchg   ax,ax
c0025fc4:	31 c9                	xor    ecx,ecx
c0025fc6:	e9 0d ff ff ff       	jmp    c0025ed8 <__divdi3+0x58>
c0025fcb:	90                   	nop

c0025fcc <__moddi3>:
c0025fcc:	55                   	push   ebp
c0025fcd:	57                   	push   edi
c0025fce:	56                   	push   esi
c0025fcf:	53                   	push   ebx
c0025fd0:	83 ec 2c             	sub    esp,0x2c
c0025fd3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025fd7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0025fdb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025fdf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025fe3:	85 db                	test   ebx,ebx
c0025fe5:	0f 88 85 00 00 00    	js     c0026070 <__moddi3+0xa4>
c0025feb:	89 de                	mov    esi,ebx
c0025fed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025ff5:	89 d7                	mov    edi,edx
c0025ff7:	85 d2                	test   edx,edx
c0025ff9:	79 09                	jns    c0026004 <__moddi3+0x38>
c0025ffb:	f7 d8                	neg    eax
c0025ffd:	83 d2 00             	adc    edx,0x0
c0026000:	f7 da                	neg    edx
c0026002:	89 d7                	mov    edi,edx
c0026004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026008:	89 cd                	mov    ebp,ecx
c002600a:	85 ff                	test   edi,edi
c002600c:	75 52                	jne    c0026060 <__moddi3+0x94>
c002600e:	89 c3                	mov    ebx,eax
c0026010:	39 f0                	cmp    eax,esi
c0026012:	76 24                	jbe    c0026038 <__moddi3+0x6c>
c0026014:	89 c8                	mov    eax,ecx
c0026016:	89 f2                	mov    edx,esi
c0026018:	f7 f3                	div    ebx
c002601a:	89 d6                	mov    esi,edx
c002601c:	89 f0                	mov    eax,esi
c002601e:	31 d2                	xor    edx,edx
c0026020:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026024:	85 c9                	test   ecx,ecx
c0026026:	74 07                	je     c002602f <__moddi3+0x63>
c0026028:	f7 d8                	neg    eax
c002602a:	83 d2 00             	adc    edx,0x0
c002602d:	f7 da                	neg    edx
c002602f:	83 c4 2c             	add    esp,0x2c
c0026032:	5b                   	pop    ebx
c0026033:	5e                   	pop    esi
c0026034:	5f                   	pop    edi
c0026035:	5d                   	pop    ebp
c0026036:	c3                   	ret    
c0026037:	90                   	nop
c0026038:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002603c:	85 db                	test   ebx,ebx
c002603e:	75 0d                	jne    c002604d <__moddi3+0x81>
c0026040:	b8 01 00 00 00       	mov    eax,0x1
c0026045:	31 d2                	xor    edx,edx
c0026047:	f7 f7                	div    edi
c0026049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002604d:	89 f0                	mov    eax,esi
c002604f:	31 d2                	xor    edx,edx
c0026051:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026055:	f7 f7                	div    edi
c0026057:	89 e8                	mov    eax,ebp
c0026059:	f7 f7                	div    edi
c002605b:	89 d6                	mov    esi,edx
c002605d:	eb bd                	jmp    c002601c <__moddi3+0x50>
c002605f:	90                   	nop
c0026060:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026064:	39 f7                	cmp    edi,esi
c0026066:	76 20                	jbe    c0026088 <__moddi3+0xbc>
c0026068:	89 c8                	mov    eax,ecx
c002606a:	89 f2                	mov    edx,esi
c002606c:	eb b2                	jmp    c0026020 <__moddi3+0x54>
c002606e:	66 90                	xchg   ax,ax
c0026070:	f7 d9                	neg    ecx
c0026072:	83 d3 00             	adc    ebx,0x0
c0026075:	f7 db                	neg    ebx
c0026077:	89 de                	mov    esi,ebx
c0026079:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026081:	e9 6f ff ff ff       	jmp    c0025ff5 <__moddi3+0x29>
c0026086:	66 90                	xchg   ax,ax
c0026088:	0f bd c7             	bsr    eax,edi
c002608b:	83 f0 1f             	xor    eax,0x1f
c002608e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026092:	75 24                	jne    c00260b8 <__moddi3+0xec>
c0026094:	39 f7                	cmp    edi,esi
c0026096:	72 06                	jb     c002609e <__moddi3+0xd2>
c0026098:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002609c:	77 0c                	ja     c00260aa <__moddi3+0xde>
c002609e:	89 e9                	mov    ecx,ebp
c00260a0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00260a4:	19 fe                	sbb    esi,edi
c00260a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00260aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260ae:	89 f2                	mov    edx,esi
c00260b0:	e9 6b ff ff ff       	jmp    c0026020 <__moddi3+0x54>
c00260b5:	8d 76 00             	lea    esi,[esi+0x0]
c00260b8:	b8 20 00 00 00       	mov    eax,0x20
c00260bd:	89 c2                	mov    edx,eax
c00260bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00260c3:	29 da                	sub    edx,ebx
c00260c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00260c9:	88 d9                	mov    cl,bl
c00260cb:	d3 e7                	shl    edi,cl
c00260cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00260d1:	88 d1                	mov    cl,dl
c00260d3:	d3 e8                	shr    eax,cl
c00260d5:	09 c7                	or     edi,eax
c00260d7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00260db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00260df:	89 d8                	mov    eax,ebx
c00260e1:	88 d9                	mov    cl,bl
c00260e3:	d3 e7                	shl    edi,cl
c00260e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00260e9:	89 f3                	mov    ebx,esi
c00260eb:	88 d1                	mov    cl,dl
c00260ed:	d3 eb                	shr    ebx,cl
c00260ef:	89 c7                	mov    edi,eax
c00260f1:	88 c1                	mov    cl,al
c00260f3:	d3 e6                	shl    esi,cl
c00260f5:	89 e8                	mov    eax,ebp
c00260f7:	88 d1                	mov    cl,dl
c00260f9:	d3 e8                	shr    eax,cl
c00260fb:	09 f0                	or     eax,esi
c00260fd:	89 f9                	mov    ecx,edi
c00260ff:	d3 e5                	shl    ebp,cl
c0026101:	89 da                	mov    edx,ebx
c0026103:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026107:	89 d3                	mov    ebx,edx
c0026109:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002610d:	89 c6                	mov    esi,eax
c002610f:	89 d1                	mov    ecx,edx
c0026111:	39 d3                	cmp    ebx,edx
c0026113:	72 27                	jb     c002613c <__moddi3+0x170>
c0026115:	74 21                	je     c0026138 <__moddi3+0x16c>
c0026117:	29 f5                	sub    ebp,esi
c0026119:	19 cb                	sbb    ebx,ecx
c002611b:	89 de                	mov    esi,ebx
c002611d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026121:	d3 e6                	shl    esi,cl
c0026123:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026127:	89 f9                	mov    ecx,edi
c0026129:	d3 ed                	shr    ebp,cl
c002612b:	09 ee                	or     esi,ebp
c002612d:	89 f0                	mov    eax,esi
c002612f:	d3 eb                	shr    ebx,cl
c0026131:	89 da                	mov    edx,ebx
c0026133:	e9 e8 fe ff ff       	jmp    c0026020 <__moddi3+0x54>
c0026138:	39 c5                	cmp    ebp,eax
c002613a:	73 db                	jae    c0026117 <__moddi3+0x14b>
c002613c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026140:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026144:	89 d1                	mov    ecx,edx
c0026146:	89 c6                	mov    esi,eax
c0026148:	eb cd                	jmp    c0026117 <__moddi3+0x14b>
c002614a:	66 90                	xchg   ax,ax

c002614c <__udivdi3>:
c002614c:	55                   	push   ebp
c002614d:	57                   	push   edi
c002614e:	56                   	push   esi
c002614f:	53                   	push   ebx
c0026150:	83 ec 1c             	sub    esp,0x1c
c0026153:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026157:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002615b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002615f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026163:	85 d2                	test   edx,edx
c0026165:	75 41                	jne    c00261a8 <__udivdi3+0x5c>
c0026167:	39 f7                	cmp    edi,esi
c0026169:	76 15                	jbe    c0026180 <__udivdi3+0x34>
c002616b:	89 e8                	mov    eax,ebp
c002616d:	89 f2                	mov    edx,esi
c002616f:	f7 f7                	div    edi
c0026171:	31 db                	xor    ebx,ebx
c0026173:	89 da                	mov    edx,ebx
c0026175:	83 c4 1c             	add    esp,0x1c
c0026178:	5b                   	pop    ebx
c0026179:	5e                   	pop    esi
c002617a:	5f                   	pop    edi
c002617b:	5d                   	pop    ebp
c002617c:	c3                   	ret    
c002617d:	8d 76 00             	lea    esi,[esi+0x0]
c0026180:	89 f9                	mov    ecx,edi
c0026182:	85 ff                	test   edi,edi
c0026184:	75 0b                	jne    c0026191 <__udivdi3+0x45>
c0026186:	b8 01 00 00 00       	mov    eax,0x1
c002618b:	31 d2                	xor    edx,edx
c002618d:	f7 f7                	div    edi
c002618f:	89 c1                	mov    ecx,eax
c0026191:	31 d2                	xor    edx,edx
c0026193:	89 f0                	mov    eax,esi
c0026195:	f7 f1                	div    ecx
c0026197:	89 c3                	mov    ebx,eax
c0026199:	89 e8                	mov    eax,ebp
c002619b:	f7 f1                	div    ecx
c002619d:	89 da                	mov    edx,ebx
c002619f:	83 c4 1c             	add    esp,0x1c
c00261a2:	5b                   	pop    ebx
c00261a3:	5e                   	pop    esi
c00261a4:	5f                   	pop    edi
c00261a5:	5d                   	pop    ebp
c00261a6:	c3                   	ret    
c00261a7:	90                   	nop
c00261a8:	39 f2                	cmp    edx,esi
c00261aa:	77 1c                	ja     c00261c8 <__udivdi3+0x7c>
c00261ac:	0f bd da             	bsr    ebx,edx
c00261af:	83 f3 1f             	xor    ebx,0x1f
c00261b2:	75 24                	jne    c00261d8 <__udivdi3+0x8c>
c00261b4:	39 f2                	cmp    edx,esi
c00261b6:	72 08                	jb     c00261c0 <__udivdi3+0x74>
c00261b8:	39 ef                	cmp    edi,ebp
c00261ba:	0f 87 84 00 00 00    	ja     c0026244 <__udivdi3+0xf8>
c00261c0:	b8 01 00 00 00       	mov    eax,0x1
c00261c5:	eb ac                	jmp    c0026173 <__udivdi3+0x27>
c00261c7:	90                   	nop
c00261c8:	31 db                	xor    ebx,ebx
c00261ca:	31 c0                	xor    eax,eax
c00261cc:	89 da                	mov    edx,ebx
c00261ce:	83 c4 1c             	add    esp,0x1c
c00261d1:	5b                   	pop    ebx
c00261d2:	5e                   	pop    esi
c00261d3:	5f                   	pop    edi
c00261d4:	5d                   	pop    ebp
c00261d5:	c3                   	ret    
c00261d6:	66 90                	xchg   ax,ax
c00261d8:	b8 20 00 00 00       	mov    eax,0x20
c00261dd:	29 d8                	sub    eax,ebx
c00261df:	88 d9                	mov    cl,bl
c00261e1:	d3 e2                	shl    edx,cl
c00261e3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00261e7:	89 fa                	mov    edx,edi
c00261e9:	88 c1                	mov    cl,al
c00261eb:	d3 ea                	shr    edx,cl
c00261ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00261f1:	09 d1                	or     ecx,edx
c00261f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00261f7:	88 d9                	mov    cl,bl
c00261f9:	d3 e7                	shl    edi,cl
c00261fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00261ff:	89 f7                	mov    edi,esi
c0026201:	88 c1                	mov    cl,al
c0026203:	d3 ef                	shr    edi,cl
c0026205:	88 d9                	mov    cl,bl
c0026207:	d3 e6                	shl    esi,cl
c0026209:	89 ea                	mov    edx,ebp
c002620b:	88 c1                	mov    cl,al
c002620d:	d3 ea                	shr    edx,cl
c002620f:	09 d6                	or     esi,edx
c0026211:	89 f0                	mov    eax,esi
c0026213:	89 fa                	mov    edx,edi
c0026215:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026219:	89 d7                	mov    edi,edx
c002621b:	89 c6                	mov    esi,eax
c002621d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026221:	39 d7                	cmp    edi,edx
c0026223:	72 13                	jb     c0026238 <__udivdi3+0xec>
c0026225:	74 09                	je     c0026230 <__udivdi3+0xe4>
c0026227:	89 f0                	mov    eax,esi
c0026229:	31 db                	xor    ebx,ebx
c002622b:	e9 43 ff ff ff       	jmp    c0026173 <__udivdi3+0x27>
c0026230:	88 d9                	mov    cl,bl
c0026232:	d3 e5                	shl    ebp,cl
c0026234:	39 c5                	cmp    ebp,eax
c0026236:	73 ef                	jae    c0026227 <__udivdi3+0xdb>
c0026238:	8d 46 ff             	lea    eax,[esi-0x1]
c002623b:	31 db                	xor    ebx,ebx
c002623d:	e9 31 ff ff ff       	jmp    c0026173 <__udivdi3+0x27>
c0026242:	66 90                	xchg   ax,ax
c0026244:	31 c0                	xor    eax,eax
c0026246:	e9 28 ff ff ff       	jmp    c0026173 <__udivdi3+0x27>
c002624b:	90                   	nop

c002624c <__umoddi3>:
c002624c:	55                   	push   ebp
c002624d:	57                   	push   edi
c002624e:	56                   	push   esi
c002624f:	53                   	push   ebx
c0026250:	83 ec 1c             	sub    esp,0x1c
c0026253:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026257:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002625b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002625f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026263:	89 da                	mov    edx,ebx
c0026265:	85 c0                	test   eax,eax
c0026267:	75 37                	jne    c00262a0 <__umoddi3+0x54>
c0026269:	39 df                	cmp    edi,ebx
c002626b:	76 13                	jbe    c0026280 <__umoddi3+0x34>
c002626d:	89 f0                	mov    eax,esi
c002626f:	f7 f7                	div    edi
c0026271:	89 d0                	mov    eax,edx
c0026273:	31 d2                	xor    edx,edx
c0026275:	83 c4 1c             	add    esp,0x1c
c0026278:	5b                   	pop    ebx
c0026279:	5e                   	pop    esi
c002627a:	5f                   	pop    edi
c002627b:	5d                   	pop    ebp
c002627c:	c3                   	ret    
c002627d:	8d 76 00             	lea    esi,[esi+0x0]
c0026280:	89 fd                	mov    ebp,edi
c0026282:	85 ff                	test   edi,edi
c0026284:	75 0b                	jne    c0026291 <__umoddi3+0x45>
c0026286:	b8 01 00 00 00       	mov    eax,0x1
c002628b:	31 d2                	xor    edx,edx
c002628d:	f7 f7                	div    edi
c002628f:	89 c5                	mov    ebp,eax
c0026291:	89 d8                	mov    eax,ebx
c0026293:	31 d2                	xor    edx,edx
c0026295:	f7 f5                	div    ebp
c0026297:	89 f0                	mov    eax,esi
c0026299:	f7 f5                	div    ebp
c002629b:	89 d0                	mov    eax,edx
c002629d:	eb d4                	jmp    c0026273 <__umoddi3+0x27>
c002629f:	90                   	nop
c00262a0:	89 f1                	mov    ecx,esi
c00262a2:	39 d8                	cmp    eax,ebx
c00262a4:	76 0a                	jbe    c00262b0 <__umoddi3+0x64>
c00262a6:	89 f0                	mov    eax,esi
c00262a8:	83 c4 1c             	add    esp,0x1c
c00262ab:	5b                   	pop    ebx
c00262ac:	5e                   	pop    esi
c00262ad:	5f                   	pop    edi
c00262ae:	5d                   	pop    ebp
c00262af:	c3                   	ret    
c00262b0:	0f bd e8             	bsr    ebp,eax
c00262b3:	83 f5 1f             	xor    ebp,0x1f
c00262b6:	75 1c                	jne    c00262d4 <__umoddi3+0x88>
c00262b8:	39 d8                	cmp    eax,ebx
c00262ba:	72 04                	jb     c00262c0 <__umoddi3+0x74>
c00262bc:	39 f7                	cmp    edi,esi
c00262be:	77 08                	ja     c00262c8 <__umoddi3+0x7c>
c00262c0:	89 da                	mov    edx,ebx
c00262c2:	29 fe                	sub    esi,edi
c00262c4:	19 c2                	sbb    edx,eax
c00262c6:	89 f1                	mov    ecx,esi
c00262c8:	89 c8                	mov    eax,ecx
c00262ca:	83 c4 1c             	add    esp,0x1c
c00262cd:	5b                   	pop    ebx
c00262ce:	5e                   	pop    esi
c00262cf:	5f                   	pop    edi
c00262d0:	5d                   	pop    ebp
c00262d1:	c3                   	ret    
c00262d2:	66 90                	xchg   ax,ax
c00262d4:	ba 20 00 00 00       	mov    edx,0x20
c00262d9:	29 ea                	sub    edx,ebp
c00262db:	89 e9                	mov    ecx,ebp
c00262dd:	d3 e0                	shl    eax,cl
c00262df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262e3:	89 f8                	mov    eax,edi
c00262e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00262e9:	88 d1                	mov    cl,dl
c00262eb:	d3 e8                	shr    eax,cl
c00262ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00262f1:	09 c1                	or     ecx,eax
c00262f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00262f7:	89 e9                	mov    ecx,ebp
c00262f9:	d3 e7                	shl    edi,cl
c00262fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00262ff:	89 d8                	mov    eax,ebx
c0026301:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026305:	88 d1                	mov    cl,dl
c0026307:	d3 e8                	shr    eax,cl
c0026309:	89 c7                	mov    edi,eax
c002630b:	89 e9                	mov    ecx,ebp
c002630d:	d3 e3                	shl    ebx,cl
c002630f:	89 f0                	mov    eax,esi
c0026311:	88 d1                	mov    cl,dl
c0026313:	d3 e8                	shr    eax,cl
c0026315:	09 d8                	or     eax,ebx
c0026317:	89 e9                	mov    ecx,ebp
c0026319:	d3 e6                	shl    esi,cl
c002631b:	89 f3                	mov    ebx,esi
c002631d:	89 fa                	mov    edx,edi
c002631f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026323:	89 d1                	mov    ecx,edx
c0026325:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026329:	89 c6                	mov    esi,eax
c002632b:	89 d7                	mov    edi,edx
c002632d:	39 d1                	cmp    ecx,edx
c002632f:	72 27                	jb     c0026358 <__umoddi3+0x10c>
c0026331:	74 21                	je     c0026354 <__umoddi3+0x108>
c0026333:	89 ca                	mov    edx,ecx
c0026335:	29 f3                	sub    ebx,esi
c0026337:	19 fa                	sbb    edx,edi
c0026339:	89 d0                	mov    eax,edx
c002633b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002633f:	d3 e0                	shl    eax,cl
c0026341:	89 e9                	mov    ecx,ebp
c0026343:	d3 eb                	shr    ebx,cl
c0026345:	09 d8                	or     eax,ebx
c0026347:	d3 ea                	shr    edx,cl
c0026349:	83 c4 1c             	add    esp,0x1c
c002634c:	5b                   	pop    ebx
c002634d:	5e                   	pop    esi
c002634e:	5f                   	pop    edi
c002634f:	5d                   	pop    ebp
c0026350:	c3                   	ret    
c0026351:	8d 76 00             	lea    esi,[esi+0x0]
c0026354:	39 c3                	cmp    ebx,eax
c0026356:	73 db                	jae    c0026333 <__umoddi3+0xe7>
c0026358:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002635c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026360:	89 d7                	mov    edi,edx
c0026362:	89 c6                	mov    esi,eax
c0026364:	eb cd                	jmp    c0026333 <__umoddi3+0xe7>

c0026366 <__addsf3>:
c0026366:	55                   	push   ebp
c0026367:	89 e5                	mov    ebp,esp
c0026369:	57                   	push   edi
c002636a:	56                   	push   esi
c002636b:	53                   	push   ebx
c002636c:	83 ec 08             	sub    esp,0x8
c002636f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026372:	89 fa                	mov    edx,edi
c0026374:	89 f8                	mov    eax,edi
c0026376:	c1 f8 17             	sar    eax,0x17
c0026379:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002637c:	c1 e2 08             	shl    edx,0x8
c002637f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026385:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026388:	89 de                	mov    esi,ebx
c002638a:	c1 fe 17             	sar    esi,0x17
c002638d:	c1 e3 08             	shl    ebx,0x8
c0026390:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026396:	31 f0                	xor    eax,esi
c0026398:	0f 88 3b 01 00 00    	js     c00264d9 <__addsf3+0x173>
c002639e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00263a1:	29 f1                	sub    ecx,esi
c00263a3:	85 c9                	test   ecx,ecx
c00263a5:	7e 54                	jle    c00263fb <__addsf3+0x95>
c00263a7:	89 f0                	mov    eax,esi
c00263a9:	84 c0                	test   al,al
c00263ab:	75 10                	jne    c00263bd <__addsf3+0x57>
c00263ad:	85 db                	test   ebx,ebx
c00263af:	0f 84 aa 02 00 00    	je     c002665f <__addsf3+0x2f9>
c00263b5:	49                   	dec    ecx
c00263b6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00263b9:	74 38                	je     c00263f3 <__addsf3+0x8d>
c00263bb:	eb 13                	jmp    c00263d0 <__addsf3+0x6a>
c00263bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263c0:	f7 d0                	not    eax
c00263c2:	84 c0                	test   al,al
c00263c4:	0f 84 95 02 00 00    	je     c002665f <__addsf3+0x2f9>
c00263ca:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00263d0:	83 f9 1f             	cmp    ecx,0x1f
c00263d3:	0f 8f 86 02 00 00    	jg     c002665f <__addsf3+0x2f9>
c00263d9:	89 de                	mov    esi,ebx
c00263db:	d3 ee                	shr    esi,cl
c00263dd:	b8 20 00 00 00       	mov    eax,0x20
c00263e2:	29 c8                	sub    eax,ecx
c00263e4:	89 c1                	mov    ecx,eax
c00263e6:	d3 e3                	shl    ebx,cl
c00263e8:	31 c0                	xor    eax,eax
c00263ea:	85 db                	test   ebx,ebx
c00263ec:	0f 95 c0             	setne  al
c00263ef:	09 f0                	or     eax,esi
c00263f1:	01 d0                	add    eax,edx
c00263f3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00263f6:	e9 b6 00 00 00       	jmp    c00264b1 <__addsf3+0x14b>
c00263fb:	74 5c                	je     c0026459 <__addsf3+0xf3>
c00263fd:	89 f1                	mov    ecx,esi
c00263ff:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026402:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026405:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026409:	75 14                	jne    c002641f <__addsf3+0xb9>
c002640b:	85 d2                	test   edx,edx
c002640d:	0f 84 4c 02 00 00    	je     c002665f <__addsf3+0x2f9>
c0026413:	49                   	dec    ecx
c0026414:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026417:	0f 84 94 00 00 00    	je     c00264b1 <__addsf3+0x14b>
c002641d:	eb 12                	jmp    c0026431 <__addsf3+0xcb>
c002641f:	89 f0                	mov    eax,esi
c0026421:	f7 d0                	not    eax
c0026423:	84 c0                	test   al,al
c0026425:	0f 84 34 02 00 00    	je     c002665f <__addsf3+0x2f9>
c002642b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026431:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026434:	83 f9 1f             	cmp    ecx,0x1f
c0026437:	0f 8f 22 02 00 00    	jg     c002665f <__addsf3+0x2f9>
c002643d:	89 d7                	mov    edi,edx
c002643f:	d3 ef                	shr    edi,cl
c0026441:	b8 20 00 00 00       	mov    eax,0x20
c0026446:	29 c8                	sub    eax,ecx
c0026448:	89 c1                	mov    ecx,eax
c002644a:	d3 e2                	shl    edx,cl
c002644c:	31 c0                	xor    eax,eax
c002644e:	85 d2                	test   edx,edx
c0026450:	0f 95 c0             	setne  al
c0026453:	09 f8                	or     eax,edi
c0026455:	01 d8                	add    eax,ebx
c0026457:	eb 58                	jmp    c00264b1 <__addsf3+0x14b>
c0026459:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002645c:	8d 70 01             	lea    esi,[eax+0x1]
c002645f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026465:	75 32                	jne    c0026499 <__addsf3+0x133>
c0026467:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002646b:	75 1f                	jne    c002648c <__addsf3+0x126>
c002646d:	85 d2                	test   edx,edx
c002646f:	0f 84 e0 01 00 00    	je     c0026655 <__addsf3+0x2ef>
c0026475:	85 db                	test   ebx,ebx
c0026477:	0f 84 e2 01 00 00    	je     c002665f <__addsf3+0x2f9>
c002647d:	89 d0                	mov    eax,edx
c002647f:	01 d8                	add    eax,ebx
c0026481:	0f 89 a9 01 00 00    	jns    c0026630 <__addsf3+0x2ca>
c0026487:	e9 9d 01 00 00       	jmp    c0026629 <__addsf3+0x2c3>
c002648c:	85 d2                	test   edx,edx
c002648e:	0f 85 cb 01 00 00    	jne    c002665f <__addsf3+0x2f9>
c0026494:	e9 bc 01 00 00       	jmp    c0026655 <__addsf3+0x2ef>
c0026499:	31 c0                	xor    eax,eax
c002649b:	89 f1                	mov    ecx,esi
c002649d:	f7 d1                	not    ecx
c002649f:	84 c9                	test   cl,cl
c00264a1:	0f 84 90 01 00 00    	je     c0026637 <__addsf3+0x2d1>
c00264a7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00264aa:	d1 e8                	shr    eax,1
c00264ac:	e9 86 01 00 00       	jmp    c0026637 <__addsf3+0x2d1>
c00264b1:	85 c0                	test   eax,eax
c00264b3:	0f 89 7e 01 00 00    	jns    c0026637 <__addsf3+0x2d1>
c00264b9:	46                   	inc    esi
c00264ba:	89 f2                	mov    edx,esi
c00264bc:	f7 d2                	not    edx
c00264be:	84 d2                	test   dl,dl
c00264c0:	0f 84 6f 01 00 00    	je     c0026635 <__addsf3+0x2cf>
c00264c6:	89 c2                	mov    edx,eax
c00264c8:	83 e2 01             	and    edx,0x1
c00264cb:	d1 e8                	shr    eax,1
c00264cd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00264d2:	09 d0                	or     eax,edx
c00264d4:	e9 5e 01 00 00       	jmp    c0026637 <__addsf3+0x2d1>
c00264d9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00264dd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264e0:	89 f0                	mov    eax,esi
c00264e2:	0f b6 c0             	movzx  eax,al
c00264e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00264e8:	29 c1                	sub    ecx,eax
c00264ea:	85 c9                	test   ecx,ecx
c00264ec:	7e 55                	jle    c0026543 <__addsf3+0x1dd>
c00264ee:	85 c0                	test   eax,eax
c00264f0:	75 11                	jne    c0026503 <__addsf3+0x19d>
c00264f2:	85 db                	test   ebx,ebx
c00264f4:	0f 84 65 01 00 00    	je     c002665f <__addsf3+0x2f9>
c00264fa:	49                   	dec    ecx
c00264fb:	75 19                	jne    c0026516 <__addsf3+0x1b0>
c00264fd:	89 d0                	mov    eax,edx
c00264ff:	29 d8                	sub    eax,ebx
c0026501:	eb 38                	jmp    c002653b <__addsf3+0x1d5>
c0026503:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026506:	f7 d0                	not    eax
c0026508:	84 c0                	test   al,al
c002650a:	0f 84 4f 01 00 00    	je     c002665f <__addsf3+0x2f9>
c0026510:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026516:	83 f9 1f             	cmp    ecx,0x1f
c0026519:	0f 8f 40 01 00 00    	jg     c002665f <__addsf3+0x2f9>
c002651f:	89 de                	mov    esi,ebx
c0026521:	d3 ee                	shr    esi,cl
c0026523:	b8 20 00 00 00       	mov    eax,0x20
c0026528:	29 c8                	sub    eax,ecx
c002652a:	89 c1                	mov    ecx,eax
c002652c:	d3 e3                	shl    ebx,cl
c002652e:	31 c0                	xor    eax,eax
c0026530:	85 db                	test   ebx,ebx
c0026532:	0f 95 c0             	setne  al
c0026535:	09 f0                	or     eax,esi
c0026537:	29 c2                	sub    edx,eax
c0026539:	89 d0                	mov    eax,edx
c002653b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002653e:	e9 af 00 00 00       	jmp    c00265f2 <__addsf3+0x28c>
c0026543:	74 5c                	je     c00265a1 <__addsf3+0x23b>
c0026545:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026548:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002654b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002654f:	75 14                	jne    c0026565 <__addsf3+0x1ff>
c0026551:	85 d2                	test   edx,edx
c0026553:	0f 84 06 01 00 00    	je     c002665f <__addsf3+0x2f9>
c0026559:	48                   	dec    eax
c002655a:	75 1b                	jne    c0026577 <__addsf3+0x211>
c002655c:	89 d8                	mov    eax,ebx
c002655e:	29 d0                	sub    eax,edx
c0026560:	e9 8d 00 00 00       	jmp    c00265f2 <__addsf3+0x28c>
c0026565:	89 f1                	mov    ecx,esi
c0026567:	f7 d1                	not    ecx
c0026569:	84 c9                	test   cl,cl
c002656b:	0f 84 ee 00 00 00    	je     c002665f <__addsf3+0x2f9>
c0026571:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026577:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002657a:	83 f8 1f             	cmp    eax,0x1f
c002657d:	0f 8f dc 00 00 00    	jg     c002665f <__addsf3+0x2f9>
c0026583:	89 d7                	mov    edi,edx
c0026585:	88 c1                	mov    cl,al
c0026587:	d3 ef                	shr    edi,cl
c0026589:	b9 20 00 00 00       	mov    ecx,0x20
c002658e:	29 c1                	sub    ecx,eax
c0026590:	d3 e2                	shl    edx,cl
c0026592:	31 c0                	xor    eax,eax
c0026594:	85 d2                	test   edx,edx
c0026596:	0f 95 c0             	setne  al
c0026599:	09 f8                	or     eax,edi
c002659b:	29 c3                	sub    ebx,eax
c002659d:	89 d8                	mov    eax,ebx
c002659f:	eb 51                	jmp    c00265f2 <__addsf3+0x28c>
c00265a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00265a4:	40                   	inc    eax
c00265a5:	a8 fe                	test   al,0xfe
c00265a7:	75 3d                	jne    c00265e6 <__addsf3+0x280>
c00265a9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00265ad:	0f 85 a7 00 00 00    	jne    c002665a <__addsf3+0x2f4>
c00265b3:	85 d2                	test   edx,edx
c00265b5:	75 12                	jne    c00265c9 <__addsf3+0x263>
c00265b7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00265ba:	85 db                	test   ebx,ebx
c00265bc:	0f 85 9d 00 00 00    	jne    c002665f <__addsf3+0x2f9>
c00265c2:	31 ff                	xor    edi,edi
c00265c4:	e9 96 00 00 00       	jmp    c002665f <__addsf3+0x2f9>
c00265c9:	85 db                	test   ebx,ebx
c00265cb:	0f 84 8e 00 00 00    	je     c002665f <__addsf3+0x2f9>
c00265d1:	89 d0                	mov    eax,edx
c00265d3:	29 d8                	sub    eax,ebx
c00265d5:	79 06                	jns    c00265dd <__addsf3+0x277>
c00265d7:	89 d8                	mov    eax,ebx
c00265d9:	29 d0                	sub    eax,edx
c00265db:	eb 5a                	jmp    c0026637 <__addsf3+0x2d1>
c00265dd:	bf 00 00 00 00       	mov    edi,0x0
c00265e2:	74 7b                	je     c002665f <__addsf3+0x2f9>
c00265e4:	eb 4a                	jmp    c0026630 <__addsf3+0x2ca>
c00265e6:	89 d0                	mov    eax,edx
c00265e8:	29 d8                	sub    eax,ebx
c00265ea:	79 12                	jns    c00265fe <__addsf3+0x298>
c00265ec:	89 d8                	mov    eax,ebx
c00265ee:	29 d0                	sub    eax,edx
c00265f0:	eb 09                	jmp    c00265fb <__addsf3+0x295>
c00265f2:	85 c0                	test   eax,eax
c00265f4:	79 41                	jns    c0026637 <__addsf3+0x2d1>
c00265f6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00265fb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00265fe:	31 f6                	xor    esi,esi
c0026600:	85 c0                	test   eax,eax
c0026602:	74 33                	je     c0026637 <__addsf3+0x2d1>
c0026604:	0f bd c8             	bsr    ecx,eax
c0026607:	83 f1 1f             	xor    ecx,0x1f
c002660a:	d3 e0                	shl    eax,cl
c002660c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026610:	39 ca                	cmp    edx,ecx
c0026612:	7f 10                	jg     c0026624 <__addsf3+0x2be>
c0026614:	29 d1                	sub    ecx,edx
c0026616:	41                   	inc    ecx
c0026617:	d3 e8                	shr    eax,cl
c0026619:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002661c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026622:	eb 13                	jmp    c0026637 <__addsf3+0x2d1>
c0026624:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026627:	29 ce                	sub    esi,ecx
c0026629:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002662e:	eb 07                	jmp    c0026637 <__addsf3+0x2d1>
c0026630:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026633:	eb 02                	jmp    c0026637 <__addsf3+0x2d1>
c0026635:	31 c0                	xor    eax,eax
c0026637:	89 c2                	mov    edx,eax
c0026639:	c1 ea 08             	shr    edx,0x8
c002663c:	a8 7f                	test   al,0x7f
c002663e:	0f 95 c1             	setne  cl
c0026641:	09 d1                	or     ecx,edx
c0026643:	83 e1 01             	and    ecx,0x1
c0026646:	c1 e8 07             	shr    eax,0x7
c0026649:	21 c8                	and    eax,ecx
c002664b:	c1 e6 17             	shl    esi,0x17
c002664e:	09 d6                	or     esi,edx
c0026650:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026653:	eb 0a                	jmp    c002665f <__addsf3+0x2f9>
c0026655:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026658:	eb 05                	jmp    c002665f <__addsf3+0x2f9>
c002665a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002665f:	89 f8                	mov    eax,edi
c0026661:	5a                   	pop    edx
c0026662:	59                   	pop    ecx
c0026663:	5b                   	pop    ebx
c0026664:	5e                   	pop    esi
c0026665:	5f                   	pop    edi
c0026666:	5d                   	pop    ebp
c0026667:	c3                   	ret    

c0026668 <__subsf3>:
c0026668:	55                   	push   ebp
c0026669:	89 e5                	mov    ebp,esp
c002666b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002666e:	05 00 00 00 80       	add    eax,0x80000000
c0026673:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026676:	5d                   	pop    ebp
c0026677:	e9 ea fc ff ff       	jmp    c0026366 <__addsf3>

c002667c <__negsf2>:
c002667c:	55                   	push   ebp
c002667d:	89 e5                	mov    ebp,esp
c002667f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026682:	05 00 00 00 80       	add    eax,0x80000000
c0026687:	5d                   	pop    ebp
c0026688:	c3                   	ret    

c0026689 <__mulsf3>:
c0026689:	55                   	push   ebp
c002668a:	89 e5                	mov    ebp,esp
c002668c:	57                   	push   edi
c002668d:	56                   	push   esi
c002668e:	53                   	push   ebx
c002668f:	83 ec 1c             	sub    esp,0x1c
c0026692:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026695:	89 f0                	mov    eax,esi
c0026697:	89 f1                	mov    ecx,esi
c0026699:	c1 f9 17             	sar    ecx,0x17
c002669c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002669f:	c1 e0 08             	shl    eax,0x8
c00266a2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00266a7:	89 c1                	mov    ecx,eax
c00266a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00266ac:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00266af:	89 c7                	mov    edi,eax
c00266b1:	c1 ff 17             	sar    edi,0x17
c00266b4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00266b8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00266bb:	89 f8                	mov    eax,edi
c00266bd:	0f b6 c0             	movzx  eax,al
c00266c0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00266c3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00266c7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00266ca:	42                   	inc    edx
c00266cb:	80 e2 fe             	and    dl,0xfe
c00266ce:	75 7b                	jne    c002674b <__mulsf3+0xc2>
c00266d0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00266d4:	74 54                	je     c002672a <__mulsf3+0xa1>
c00266d6:	85 c9                	test   ecx,ecx
c00266d8:	0f 85 64 01 00 00    	jne    c0026842 <__mulsf3+0x1b9>
c00266de:	8d 57 01             	lea    edx,[edi+0x1]
c00266e1:	80 e2 fe             	and    dl,0xfe
c00266e4:	75 1f                	jne    c0026705 <__mulsf3+0x7c>
c00266e6:	85 c0                	test   eax,eax
c00266e8:	b8 00 00 00 00       	mov    eax,0x0
c00266ed:	74 29                	je     c0026718 <__mulsf3+0x8f>
c00266ef:	53                   	push   ebx
c00266f0:	53                   	push   ebx
c00266f1:	50                   	push   eax
c00266f2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00266f5:	e8 96 05 00 00       	call   c0026c90 <__nesf2>
c00266fa:	83 c4 10             	add    esp,0x10
c00266fd:	85 c0                	test   eax,eax
c00266ff:	0f 85 3a 01 00 00    	jne    c002683f <__mulsf3+0x1b6>
c0026705:	85 ff                	test   edi,edi
c0026707:	0f 89 35 01 00 00    	jns    c0026842 <__mulsf3+0x1b9>
c002670d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026713:	e9 2a 01 00 00       	jmp    c0026842 <__mulsf3+0x1b9>
c0026718:	51                   	push   ecx
c0026719:	51                   	push   ecx
c002671a:	50                   	push   eax
c002671b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002671e:	e8 6d 05 00 00       	call   c0026c90 <__nesf2>
c0026723:	83 c4 10             	add    esp,0x10
c0026726:	85 c0                	test   eax,eax
c0026728:	eb 15                	jmp    c002673f <__mulsf3+0xb6>
c002672a:	85 c9                	test   ecx,ecx
c002672c:	74 0b                	je     c0026739 <__mulsf3+0xb0>
c002672e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026731:	01 c9                	add    ecx,ecx
c0026733:	78 16                	js     c002674b <__mulsf3+0xc2>
c0026735:	89 d3                	mov    ebx,edx
c0026737:	eb f5                	jmp    c002672e <__mulsf3+0xa5>
c0026739:	89 f8                	mov    eax,edi
c002673b:	f7 d0                	not    eax
c002673d:	84 c0                	test   al,al
c002673f:	75 c4                	jne    c0026705 <__mulsf3+0x7c>
c0026741:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026746:	e9 f7 00 00 00       	jmp    c0026842 <__mulsf3+0x1b9>
c002674b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002674e:	c1 e6 08             	shl    esi,0x8
c0026751:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026757:	8d 57 01             	lea    edx,[edi+0x1]
c002675a:	80 e2 fe             	and    dl,0xfe
c002675d:	75 63                	jne    c00267c2 <__mulsf3+0x139>
c002675f:	85 c0                	test   eax,eax
c0026761:	74 2f                	je     c0026792 <__mulsf3+0x109>
c0026763:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026767:	0f 89 d2 00 00 00    	jns    c002683f <__mulsf3+0x1b6>
c002676d:	52                   	push   edx
c002676e:	52                   	push   edx
c002676f:	6a 00                	push   0x0
c0026771:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026774:	e8 dc 04 00 00       	call   c0026c55 <__eqsf2>
c0026779:	83 c4 10             	add    esp,0x10
c002677c:	85 c0                	test   eax,eax
c002677e:	0f 85 bb 00 00 00    	jne    c002683f <__mulsf3+0x1b6>
c0026784:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026787:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002678d:	e9 b0 00 00 00       	jmp    c0026842 <__mulsf3+0x1b9>
c0026792:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026795:	50                   	push   eax
c0026796:	50                   	push   eax
c0026797:	6a 00                	push   0x0
c0026799:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002679c:	e8 b4 04 00 00       	call   c0026c55 <__eqsf2>
c00267a1:	83 c4 10             	add    esp,0x10
c00267a4:	85 c0                	test   eax,eax
c00267a6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00267a9:	75 0c                	jne    c00267b7 <__mulsf3+0x12e>
c00267ab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00267af:	0f 89 8a 00 00 00    	jns    c002683f <__mulsf3+0x1b6>
c00267b5:	eb cd                	jmp    c0026784 <__mulsf3+0xfb>
c00267b7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00267ba:	01 f6                	add    esi,esi
c00267bc:	78 04                	js     c00267c2 <__mulsf3+0x139>
c00267be:	89 c3                	mov    ebx,eax
c00267c0:	eb f5                	jmp    c00267b7 <__mulsf3+0x12e>
c00267c2:	89 c8                	mov    eax,ecx
c00267c4:	0d 00 00 00 80       	or     eax,0x80000000
c00267c9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267cf:	f7 e6                	mul    esi
c00267d1:	85 c0                	test   eax,eax
c00267d3:	0f 95 c0             	setne  al
c00267d6:	0f b6 c0             	movzx  eax,al
c00267d9:	09 c2                	or     edx,eax
c00267db:	78 03                	js     c00267e0 <__mulsf3+0x157>
c00267dd:	01 d2                	add    edx,edx
c00267df:	4b                   	dec    ebx
c00267e0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00267e6:	7f 22                	jg     c002680a <__mulsf3+0x181>
c00267e8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00267ee:	85 db                	test   ebx,ebx
c00267f0:	7f 23                	jg     c0026815 <__mulsf3+0x18c>
c00267f2:	83 fb e9             	cmp    ebx,0xffffffe9
c00267f5:	7c 1a                	jl     c0026811 <__mulsf3+0x188>
c00267f7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00267fd:	b9 01 00 00 00       	mov    ecx,0x1
c0026802:	29 d9                	sub    ecx,ebx
c0026804:	d3 ea                	shr    edx,cl
c0026806:	31 db                	xor    ebx,ebx
c0026808:	eb 0b                	jmp    c0026815 <__mulsf3+0x18c>
c002680a:	bb ff 00 00 00       	mov    ebx,0xff
c002680f:	eb 02                	jmp    c0026813 <__mulsf3+0x18a>
c0026811:	31 db                	xor    ebx,ebx
c0026813:	31 d2                	xor    edx,edx
c0026815:	89 d0                	mov    eax,edx
c0026817:	c1 e8 08             	shr    eax,0x8
c002681a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002681d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026823:	09 fb                	or     ebx,edi
c0026825:	c1 e3 17             	shl    ebx,0x17
c0026828:	09 c3                	or     ebx,eax
c002682a:	f6 c2 7f             	test   dl,0x7f
c002682d:	0f 95 c1             	setne  cl
c0026830:	09 c8                	or     eax,ecx
c0026832:	83 e0 01             	and    eax,0x1
c0026835:	c1 ea 07             	shr    edx,0x7
c0026838:	21 c2                	and    edx,eax
c002683a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002683d:	eb 03                	jmp    c0026842 <__mulsf3+0x1b9>
c002683f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026842:	89 f0                	mov    eax,esi
c0026844:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026847:	5b                   	pop    ebx
c0026848:	5e                   	pop    esi
c0026849:	5f                   	pop    edi
c002684a:	5d                   	pop    ebp
c002684b:	c3                   	ret    

c002684c <__divsf3>:
c002684c:	55                   	push   ebp
c002684d:	89 e5                	mov    ebp,esp
c002684f:	57                   	push   edi
c0026850:	56                   	push   esi
c0026851:	53                   	push   ebx
c0026852:	83 ec 1c             	sub    esp,0x1c
c0026855:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026858:	89 d8                	mov    eax,ebx
c002685a:	89 d9                	mov    ecx,ebx
c002685c:	c1 f9 17             	sar    ecx,0x17
c002685f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026862:	c1 e0 08             	shl    eax,0x8
c0026865:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002686a:	89 c1                	mov    ecx,eax
c002686c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002686f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026872:	89 c7                	mov    edi,eax
c0026874:	c1 ff 17             	sar    edi,0x17
c0026877:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002687b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002687e:	89 f8                	mov    eax,edi
c0026880:	0f b6 c0             	movzx  eax,al
c0026883:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026886:	29 c6                	sub    esi,eax
c0026888:	83 c6 7f             	add    esi,0x7f
c002688b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002688e:	42                   	inc    edx
c002688f:	80 e2 fe             	and    dl,0xfe
c0026892:	0f 85 9c 00 00 00    	jne    c0026934 <__divsf3+0xe8>
c0026898:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002689c:	74 33                	je     c00268d1 <__divsf3+0x85>
c002689e:	85 c9                	test   ecx,ecx
c00268a0:	0f 85 c7 01 00 00    	jne    c0026a6d <__divsf3+0x221>
c00268a6:	8d 57 01             	lea    edx,[edi+0x1]
c00268a9:	80 e2 fe             	and    dl,0xfe
c00268ac:	75 2f                	jne    c00268dd <__divsf3+0x91>
c00268ae:	85 c0                	test   eax,eax
c00268b0:	74 2b                	je     c00268dd <__divsf3+0x91>
c00268b2:	51                   	push   ecx
c00268b3:	51                   	push   ecx
c00268b4:	6a 00                	push   0x0
c00268b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268b9:	e8 d2 03 00 00       	call   c0026c90 <__nesf2>
c00268be:	83 c4 10             	add    esp,0x10
c00268c1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00268c4:	85 c0                	test   eax,eax
c00268c6:	0f 85 a1 01 00 00    	jne    c0026a6d <__divsf3+0x221>
c00268cc:	e9 92 01 00 00       	jmp    c0026a63 <__divsf3+0x217>
c00268d1:	85 c9                	test   ecx,ecx
c00268d3:	75 1b                	jne    c00268f0 <__divsf3+0xa4>
c00268d5:	8d 57 01             	lea    edx,[edi+0x1]
c00268d8:	80 e2 fe             	and    dl,0xfe
c00268db:	74 1e                	je     c00268fb <__divsf3+0xaf>
c00268dd:	85 ff                	test   edi,edi
c00268df:	0f 89 88 01 00 00    	jns    c0026a6d <__divsf3+0x221>
c00268e5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00268eb:	e9 7d 01 00 00       	jmp    c0026a6d <__divsf3+0x221>
c00268f0:	8d 56 ff             	lea    edx,[esi-0x1]
c00268f3:	01 c9                	add    ecx,ecx
c00268f5:	78 3d                	js     c0026934 <__divsf3+0xe8>
c00268f7:	89 d6                	mov    esi,edx
c00268f9:	eb f5                	jmp    c00268f0 <__divsf3+0xa4>
c00268fb:	85 c0                	test   eax,eax
c00268fd:	b8 00 00 00 00       	mov    eax,0x0
c0026902:	74 18                	je     c002691c <__divsf3+0xd0>
c0026904:	52                   	push   edx
c0026905:	52                   	push   edx
c0026906:	50                   	push   eax
c0026907:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002690a:	e8 81 03 00 00       	call   c0026c90 <__nesf2>
c002690f:	83 c4 10             	add    esp,0x10
c0026912:	85 c0                	test   eax,eax
c0026914:	0f 85 50 01 00 00    	jne    c0026a6a <__divsf3+0x21e>
c002691a:	eb c1                	jmp    c00268dd <__divsf3+0x91>
c002691c:	56                   	push   esi
c002691d:	56                   	push   esi
c002691e:	50                   	push   eax
c002691f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026922:	e8 69 03 00 00       	call   c0026c90 <__nesf2>
c0026927:	83 c4 10             	add    esp,0x10
c002692a:	85 c0                	test   eax,eax
c002692c:	0f 84 31 01 00 00    	je     c0026a63 <__divsf3+0x217>
c0026932:	eb a9                	jmp    c00268dd <__divsf3+0x91>
c0026934:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026937:	c1 e3 08             	shl    ebx,0x8
c002693a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026940:	8d 57 01             	lea    edx,[edi+0x1]
c0026943:	80 e2 fe             	and    dl,0xfe
c0026946:	75 71                	jne    c00269b9 <__divsf3+0x16d>
c0026948:	85 c0                	test   eax,eax
c002694a:	ba 00 00 00 00       	mov    edx,0x0
c002694f:	74 2f                	je     c0026980 <__divsf3+0x134>
c0026951:	51                   	push   ecx
c0026952:	51                   	push   ecx
c0026953:	52                   	push   edx
c0026954:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026957:	e8 f9 02 00 00       	call   c0026c55 <__eqsf2>
c002695c:	83 c4 10             	add    esp,0x10
c002695f:	85 c0                	test   eax,eax
c0026961:	0f 85 03 01 00 00    	jne    c0026a6a <__divsf3+0x21e>
c0026967:	31 d2                	xor    edx,edx
c0026969:	89 d3                	mov    ebx,edx
c002696b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002696e:	31 f8                	xor    eax,edi
c0026970:	0f 89 f7 00 00 00    	jns    c0026a6d <__divsf3+0x221>
c0026976:	bb 00 00 00 80       	mov    ebx,0x80000000
c002697b:	e9 ed 00 00 00       	jmp    c0026a6d <__divsf3+0x221>
c0026980:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026983:	50                   	push   eax
c0026984:	50                   	push   eax
c0026985:	52                   	push   edx
c0026986:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026989:	e8 c7 02 00 00       	call   c0026c55 <__eqsf2>
c002698e:	83 c4 10             	add    esp,0x10
c0026991:	85 c0                	test   eax,eax
c0026993:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026996:	75 16                	jne    c00269ae <__divsf3+0x162>
c0026998:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002699b:	31 fb                	xor    ebx,edi
c002699d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00269a3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00269a9:	e9 bf 00 00 00       	jmp    c0026a6d <__divsf3+0x221>
c00269ae:	8d 46 01             	lea    eax,[esi+0x1]
c00269b1:	01 db                	add    ebx,ebx
c00269b3:	78 04                	js     c00269b9 <__divsf3+0x16d>
c00269b5:	89 c6                	mov    esi,eax
c00269b7:	eb f5                	jmp    c00269ae <__divsf3+0x162>
c00269b9:	89 c8                	mov    eax,ecx
c00269bb:	0d 00 00 00 80       	or     eax,0x80000000
c00269c0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269c6:	31 d2                	xor    edx,edx
c00269c8:	39 d8                	cmp    eax,ebx
c00269ca:	72 07                	jb     c00269d3 <__divsf3+0x187>
c00269cc:	29 d8                	sub    eax,ebx
c00269ce:	ba 01 00 00 00       	mov    edx,0x1
c00269d3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00269da:	01 d2                	add    edx,edx
c00269dc:	89 c1                	mov    ecx,eax
c00269de:	01 c0                	add    eax,eax
c00269e0:	85 c9                	test   ecx,ecx
c00269e2:	78 04                	js     c00269e8 <__divsf3+0x19c>
c00269e4:	39 c3                	cmp    ebx,eax
c00269e6:	77 05                	ja     c00269ed <__divsf3+0x1a1>
c00269e8:	29 d8                	sub    eax,ebx
c00269ea:	83 ca 01             	or     edx,0x1
c00269ed:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00269f0:	75 e8                	jne    c00269da <__divsf3+0x18e>
c00269f2:	85 c0                	test   eax,eax
c00269f4:	0f 95 c0             	setne  al
c00269f7:	0f b6 c0             	movzx  eax,al
c00269fa:	c1 e2 06             	shl    edx,0x6
c00269fd:	09 c2                	or     edx,eax
c00269ff:	78 03                	js     c0026a04 <__divsf3+0x1b8>
c0026a01:	01 d2                	add    edx,edx
c0026a03:	4e                   	dec    esi
c0026a04:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026a0a:	7f 22                	jg     c0026a2e <__divsf3+0x1e2>
c0026a0c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026a12:	85 f6                	test   esi,esi
c0026a14:	7f 23                	jg     c0026a39 <__divsf3+0x1ed>
c0026a16:	83 fe e9             	cmp    esi,0xffffffe9
c0026a19:	7c 1a                	jl     c0026a35 <__divsf3+0x1e9>
c0026a1b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a21:	b9 01 00 00 00       	mov    ecx,0x1
c0026a26:	29 f1                	sub    ecx,esi
c0026a28:	d3 ea                	shr    edx,cl
c0026a2a:	31 f6                	xor    esi,esi
c0026a2c:	eb 0b                	jmp    c0026a39 <__divsf3+0x1ed>
c0026a2e:	be ff 00 00 00       	mov    esi,0xff
c0026a33:	eb 02                	jmp    c0026a37 <__divsf3+0x1eb>
c0026a35:	31 f6                	xor    esi,esi
c0026a37:	31 d2                	xor    edx,edx
c0026a39:	89 d0                	mov    eax,edx
c0026a3b:	c1 e8 08             	shr    eax,0x8
c0026a3e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026a41:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026a47:	09 fe                	or     esi,edi
c0026a49:	c1 e6 17             	shl    esi,0x17
c0026a4c:	09 c6                	or     esi,eax
c0026a4e:	f6 c2 7f             	test   dl,0x7f
c0026a51:	0f 95 c1             	setne  cl
c0026a54:	09 c8                	or     eax,ecx
c0026a56:	83 e0 01             	and    eax,0x1
c0026a59:	c1 ea 07             	shr    edx,0x7
c0026a5c:	21 c2                	and    edx,eax
c0026a5e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026a61:	eb 0a                	jmp    c0026a6d <__divsf3+0x221>
c0026a63:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026a68:	eb 03                	jmp    c0026a6d <__divsf3+0x221>
c0026a6a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a6d:	89 d8                	mov    eax,ebx
c0026a6f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026a72:	5b                   	pop    ebx
c0026a73:	5e                   	pop    esi
c0026a74:	5f                   	pop    edi
c0026a75:	5d                   	pop    ebp
c0026a76:	c3                   	ret    

c0026a77 <__floatsisf>:
c0026a77:	55                   	push   ebp
c0026a78:	89 e5                	mov    ebp,esp
c0026a7a:	53                   	push   ebx
c0026a7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026a7e:	85 d2                	test   edx,edx
c0026a80:	7e 2b                	jle    c0026aad <__floatsisf+0x36>
c0026a82:	0f bd ca             	bsr    ecx,edx
c0026a85:	83 f1 1f             	xor    ecx,0x1f
c0026a88:	d3 e2                	shl    edx,cl
c0026a8a:	89 d0                	mov    eax,edx
c0026a8c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a91:	89 c3                	mov    ebx,eax
c0026a93:	c1 eb 08             	shr    ebx,0x8
c0026a96:	80 e2 7f             	and    dl,0x7f
c0026a99:	0f 95 c2             	setne  dl
c0026a9c:	09 da                	or     edx,ebx
c0026a9e:	83 e2 01             	and    edx,0x1
c0026aa1:	c1 e8 07             	shr    eax,0x7
c0026aa4:	21 c2                	and    edx,eax
c0026aa6:	b8 9e 00 00 00       	mov    eax,0x9e
c0026aab:	eb 32                	jmp    c0026adf <__floatsisf+0x68>
c0026aad:	b8 00 00 00 00       	mov    eax,0x0
c0026ab2:	74 34                	je     c0026ae8 <__floatsisf+0x71>
c0026ab4:	f7 da                	neg    edx
c0026ab6:	0f bd ca             	bsr    ecx,edx
c0026ab9:	83 f1 1f             	xor    ecx,0x1f
c0026abc:	d3 e2                	shl    edx,cl
c0026abe:	89 d0                	mov    eax,edx
c0026ac0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ac5:	89 c3                	mov    ebx,eax
c0026ac7:	c1 eb 08             	shr    ebx,0x8
c0026aca:	80 e2 7f             	and    dl,0x7f
c0026acd:	0f 95 c2             	setne  dl
c0026ad0:	09 da                	or     edx,ebx
c0026ad2:	83 e2 01             	and    edx,0x1
c0026ad5:	c1 e8 07             	shr    eax,0x7
c0026ad8:	21 c2                	and    edx,eax
c0026ada:	b8 9e 01 00 00       	mov    eax,0x19e
c0026adf:	29 c8                	sub    eax,ecx
c0026ae1:	c1 e0 17             	shl    eax,0x17
c0026ae4:	09 d8                	or     eax,ebx
c0026ae6:	01 d0                	add    eax,edx
c0026ae8:	5b                   	pop    ebx
c0026ae9:	5d                   	pop    ebp
c0026aea:	c3                   	ret    

c0026aeb <__floatunsisf>:
c0026aeb:	55                   	push   ebp
c0026aec:	89 e5                	mov    ebp,esp
c0026aee:	53                   	push   ebx
c0026aef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026af2:	31 c0                	xor    eax,eax
c0026af4:	85 d2                	test   edx,edx
c0026af6:	74 32                	je     c0026b2a <__floatunsisf+0x3f>
c0026af8:	0f bd ca             	bsr    ecx,edx
c0026afb:	83 f1 1f             	xor    ecx,0x1f
c0026afe:	d3 e2                	shl    edx,cl
c0026b00:	89 d0                	mov    eax,edx
c0026b02:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b07:	89 c3                	mov    ebx,eax
c0026b09:	c1 eb 08             	shr    ebx,0x8
c0026b0c:	80 e2 7f             	and    dl,0x7f
c0026b0f:	0f 95 c2             	setne  dl
c0026b12:	09 da                	or     edx,ebx
c0026b14:	83 e2 01             	and    edx,0x1
c0026b17:	c1 e8 07             	shr    eax,0x7
c0026b1a:	21 c2                	and    edx,eax
c0026b1c:	b8 9e 00 00 00       	mov    eax,0x9e
c0026b21:	29 c8                	sub    eax,ecx
c0026b23:	c1 e0 17             	shl    eax,0x17
c0026b26:	09 d8                	or     eax,ebx
c0026b28:	01 d0                	add    eax,edx
c0026b2a:	5b                   	pop    ebx
c0026b2b:	5d                   	pop    ebp
c0026b2c:	c3                   	ret    

c0026b2d <__fixsfsi>:
c0026b2d:	55                   	push   ebp
c0026b2e:	89 e5                	mov    ebp,esp
c0026b30:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026b33:	89 d1                	mov    ecx,edx
c0026b35:	c1 e1 08             	shl    ecx,0x8
c0026b38:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026b3e:	c1 fa 17             	sar    edx,0x17
c0026b41:	78 1c                	js     c0026b5f <__fixsfsi+0x32>
c0026b43:	83 ea 7f             	sub    edx,0x7f
c0026b46:	31 c0                	xor    eax,eax
c0026b48:	83 fa 1e             	cmp    edx,0x1e
c0026b4b:	77 40                	ja     c0026b8d <__fixsfsi+0x60>
c0026b4d:	89 c8                	mov    eax,ecx
c0026b4f:	0d 00 00 00 80       	or     eax,0x80000000
c0026b54:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026b59:	29 d1                	sub    ecx,edx
c0026b5b:	d3 e8                	shr    eax,cl
c0026b5d:	eb 2e                	jmp    c0026b8d <__fixsfsi+0x60>
c0026b5f:	31 c0                	xor    eax,eax
c0026b61:	81 c2 81 00 00 00    	add    edx,0x81
c0026b67:	78 24                	js     c0026b8d <__fixsfsi+0x60>
c0026b69:	83 fa 1e             	cmp    edx,0x1e
c0026b6c:	7e 09                	jle    c0026b77 <__fixsfsi+0x4a>
c0026b6e:	83 fa 1f             	cmp    edx,0x1f
c0026b71:	75 18                	jne    c0026b8b <__fixsfsi+0x5e>
c0026b73:	85 c9                	test   ecx,ecx
c0026b75:	75 14                	jne    c0026b8b <__fixsfsi+0x5e>
c0026b77:	89 c8                	mov    eax,ecx
c0026b79:	0d 00 00 00 80       	or     eax,0x80000000
c0026b7e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026b83:	29 d1                	sub    ecx,edx
c0026b85:	d3 e8                	shr    eax,cl
c0026b87:	f7 d8                	neg    eax
c0026b89:	eb 02                	jmp    c0026b8d <__fixsfsi+0x60>
c0026b8b:	31 c0                	xor    eax,eax
c0026b8d:	5d                   	pop    ebp
c0026b8e:	c3                   	ret    

c0026b8f <__fixunssfsi>:
c0026b8f:	55                   	push   ebp
c0026b90:	89 e5                	mov    ebp,esp
c0026b92:	53                   	push   ebx
c0026b93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026b96:	89 d3                	mov    ebx,edx
c0026b98:	c1 fb 17             	sar    ebx,0x17
c0026b9b:	83 eb 7f             	sub    ebx,0x7f
c0026b9e:	31 c0                	xor    eax,eax
c0026ba0:	83 fb 1f             	cmp    ebx,0x1f
c0026ba3:	77 18                	ja     c0026bbd <__fixunssfsi+0x2e>
c0026ba5:	89 d0                	mov    eax,edx
c0026ba7:	c1 e0 08             	shl    eax,0x8
c0026baa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026baf:	0d 00 00 00 80       	or     eax,0x80000000
c0026bb4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026bb9:	29 d9                	sub    ecx,ebx
c0026bbb:	d3 e8                	shr    eax,cl
c0026bbd:	5b                   	pop    ebx
c0026bbe:	5d                   	pop    ebp
c0026bbf:	c3                   	ret    

c0026bc0 <__cmpsf2>:
c0026bc0:	55                   	push   ebp
c0026bc1:	89 e5                	mov    ebp,esp
c0026bc3:	57                   	push   edi
c0026bc4:	56                   	push   esi
c0026bc5:	53                   	push   ebx
c0026bc6:	83 ec 24             	sub    esp,0x24
c0026bc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bcf:	e8 4f 10 00 00       	call   c0027c23 <__truncdfsf2>
c0026bd4:	5a                   	pop    edx
c0026bd5:	59                   	pop    ecx
c0026bd6:	89 c3                	mov    ebx,eax
c0026bd8:	c1 e8 17             	shr    eax,0x17
c0026bdb:	0f b6 f0             	movzx  esi,al
c0026bde:	89 d8                	mov    eax,ebx
c0026be0:	c1 e8 1f             	shr    eax,0x1f
c0026be3:	31 c6                	xor    esi,eax
c0026be5:	c1 e3 08             	shl    ebx,0x8
c0026be8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026beb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026bee:	e8 30 10 00 00       	call   c0027c23 <__truncdfsf2>
c0026bf3:	83 c4 10             	add    esp,0x10
c0026bf6:	89 c1                	mov    ecx,eax
c0026bf8:	c1 e9 17             	shr    ecx,0x17
c0026bfb:	0f b6 c9             	movzx  ecx,cl
c0026bfe:	89 c7                	mov    edi,eax
c0026c00:	c1 ef 1f             	shr    edi,0x1f
c0026c03:	89 ca                	mov    edx,ecx
c0026c05:	31 fa                	xor    edx,edi
c0026c07:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026c0a:	c1 e0 08             	shl    eax,0x8
c0026c0d:	89 c2                	mov    edx,eax
c0026c0f:	89 d8                	mov    eax,ebx
c0026c11:	09 d0                	or     eax,edx
c0026c13:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c18:	09 f0                	or     eax,esi
c0026c1a:	75 08                	jne    c0026c24 <__cmpsf2+0x64>
c0026c1c:	31 c0                	xor    eax,eax
c0026c1e:	39 f9                	cmp    ecx,edi
c0026c20:	75 0c                	jne    c0026c2e <__cmpsf2+0x6e>
c0026c22:	eb 29                	jmp    c0026c4d <__cmpsf2+0x8d>
c0026c24:	b8 01 00 00 00       	mov    eax,0x1
c0026c29:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026c2c:	7f 1f                	jg     c0026c4d <__cmpsf2+0x8d>
c0026c2e:	83 c8 ff             	or     eax,0xffffffff
c0026c31:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026c34:	7c 17                	jl     c0026c4d <__cmpsf2+0x8d>
c0026c36:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c3c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c42:	b8 01 00 00 00       	mov    eax,0x1
c0026c47:	39 d3                	cmp    ebx,edx
c0026c49:	77 02                	ja     c0026c4d <__cmpsf2+0x8d>
c0026c4b:	19 c0                	sbb    eax,eax
c0026c4d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026c50:	5b                   	pop    ebx
c0026c51:	5e                   	pop    esi
c0026c52:	5f                   	pop    edi
c0026c53:	5d                   	pop    ebp
c0026c54:	c3                   	ret    

c0026c55 <__eqsf2>:
c0026c55:	55                   	push   ebp
c0026c56:	89 e5                	mov    ebp,esp
c0026c58:	83 ec 24             	sub    esp,0x24
c0026c5b:	6a 01                	push   0x1
c0026c5d:	83 ec 0c             	sub    esp,0xc
c0026c60:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c63:	e8 df 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026c68:	83 c4 10             	add    esp,0x10
c0026c6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c6e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c71:	52                   	push   edx
c0026c72:	50                   	push   eax
c0026c73:	50                   	push   eax
c0026c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c77:	e8 cb 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026c7c:	59                   	pop    ecx
c0026c7d:	59                   	pop    ecx
c0026c7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c81:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026c84:	52                   	push   edx
c0026c85:	50                   	push   eax
c0026c86:	e8 35 ff ff ff       	call   c0026bc0 <__cmpsf2>
c0026c8b:	83 c4 20             	add    esp,0x20
c0026c8e:	c9                   	leave  
c0026c8f:	c3                   	ret    

c0026c90 <__nesf2>:
c0026c90:	eb c3                	jmp    c0026c55 <__eqsf2>

c0026c92 <__gtsf2>:
c0026c92:	55                   	push   ebp
c0026c93:	89 e5                	mov    ebp,esp
c0026c95:	83 ec 24             	sub    esp,0x24
c0026c98:	6a ff                	push   0xffffffff
c0026c9a:	83 ec 0c             	sub    esp,0xc
c0026c9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ca0:	e8 a2 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026ca5:	83 c4 10             	add    esp,0x10
c0026ca8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026cae:	52                   	push   edx
c0026caf:	50                   	push   eax
c0026cb0:	50                   	push   eax
c0026cb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026cb4:	e8 8e 10 00 00       	call   c0027d47 <__extendsfdf2>
c0026cb9:	59                   	pop    ecx
c0026cba:	59                   	pop    ecx
c0026cbb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cbe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026cc1:	52                   	push   edx
c0026cc2:	50                   	push   eax
c0026cc3:	e8 f8 fe ff ff       	call   c0026bc0 <__cmpsf2>
c0026cc8:	83 c4 20             	add    esp,0x20
c0026ccb:	c9                   	leave  
c0026ccc:	c3                   	ret    

c0026ccd <__gesf2>:
c0026ccd:	eb c3                	jmp    c0026c92 <__gtsf2>

c0026ccf <__ltsf2>:
c0026ccf:	eb 84                	jmp    c0026c55 <__eqsf2>

c0026cd1 <__lesf2>:
c0026cd1:	eb 82                	jmp    c0026c55 <__eqsf2>

c0026cd3 <__adddf3>:
c0026cd3:	55                   	push   ebp
c0026cd4:	89 e5                	mov    ebp,esp
c0026cd6:	57                   	push   edi
c0026cd7:	56                   	push   esi
c0026cd8:	53                   	push   ebx
c0026cd9:	83 ec 24             	sub    esp,0x24
c0026cdc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026cdf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026ce2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026ce5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ce8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026ceb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026cee:	89 c8                	mov    eax,ecx
c0026cf0:	89 ce                	mov    esi,ecx
c0026cf2:	c1 fe 14             	sar    esi,0x14
c0026cf5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026cf8:	89 fb                	mov    ebx,edi
c0026cfa:	89 fa                	mov    edx,edi
c0026cfc:	c1 e2 0b             	shl    edx,0xb
c0026cff:	c1 e0 0b             	shl    eax,0xb
c0026d02:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d07:	c1 eb 15             	shr    ebx,0x15
c0026d0a:	09 d8                	or     eax,ebx
c0026d0c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026d0f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026d12:	c1 fe 14             	sar    esi,0x14
c0026d15:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026d18:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d1b:	89 f3                	mov    ebx,esi
c0026d1d:	c1 e3 0b             	shl    ebx,0xb
c0026d20:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026d23:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026d26:	c1 e3 0b             	shl    ebx,0xb
c0026d29:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026d2f:	c1 ee 15             	shr    esi,0x15
c0026d32:	09 f3                	or     ebx,esi
c0026d34:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026d37:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026d3a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026d3d:	0f 88 5f 02 00 00    	js     c0026fa2 <__adddf3+0x2cf>
c0026d43:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d46:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026d49:	85 db                	test   ebx,ebx
c0026d4b:	0f 8e c7 00 00 00    	jle    c0026e18 <__adddf3+0x145>
c0026d51:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026d58:	75 1a                	jne    c0026d74 <__adddf3+0xa1>
c0026d5a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d5d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026d60:	0f 84 b2 05 00 00    	je     c0027318 <__adddf3+0x645>
c0026d66:	4b                   	dec    ebx
c0026d67:	75 23                	jne    c0026d8c <__adddf3+0xb9>
c0026d69:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026d6c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026d6f:	e9 99 00 00 00       	jmp    c0026e0d <__adddf3+0x13a>
c0026d74:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026d77:	f7 d6                	not    esi
c0026d79:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026d7f:	0f 84 93 05 00 00    	je     c0027318 <__adddf3+0x645>
c0026d85:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026d8c:	83 fb 1f             	cmp    ebx,0x1f
c0026d8f:	7e 42                	jle    c0026dd3 <__adddf3+0x100>
c0026d91:	83 fb 3f             	cmp    ebx,0x3f
c0026d94:	0f 8f 7e 05 00 00    	jg     c0027318 <__adddf3+0x645>
c0026d9a:	83 e3 1f             	and    ebx,0x1f
c0026d9d:	89 d9                	mov    ecx,ebx
c0026d9f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026da2:	d3 ef                	shr    edi,cl
c0026da4:	31 db                	xor    ebx,ebx
c0026da6:	85 c9                	test   ecx,ecx
c0026da8:	74 15                	je     c0026dbf <__adddf3+0xec>
c0026daa:	be 20 00 00 00       	mov    esi,0x20
c0026daf:	29 ce                	sub    esi,ecx
c0026db1:	89 f1                	mov    ecx,esi
c0026db3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026db6:	d3 e6                	shl    esi,cl
c0026db8:	31 db                	xor    ebx,ebx
c0026dba:	85 f6                	test   esi,esi
c0026dbc:	0f 95 c3             	setne  bl
c0026dbf:	31 c9                	xor    ecx,ecx
c0026dc1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026dc5:	0f 95 c1             	setne  cl
c0026dc8:	09 cf                	or     edi,ecx
c0026dca:	09 fb                	or     ebx,edi
c0026dcc:	01 da                	add    edx,ebx
c0026dce:	83 d0 00             	adc    eax,0x0
c0026dd1:	eb 3a                	jmp    c0026e0d <__adddf3+0x13a>
c0026dd3:	bf 20 00 00 00       	mov    edi,0x20
c0026dd8:	29 df                	sub    edi,ebx
c0026dda:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026ddd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026de0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026de3:	d3 e6                	shl    esi,cl
c0026de5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026de8:	88 d9                	mov    cl,bl
c0026dea:	d3 ef                	shr    edi,cl
c0026dec:	09 fe                	or     esi,edi
c0026dee:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026df1:	88 d9                	mov    cl,bl
c0026df3:	d3 ef                	shr    edi,cl
c0026df5:	89 fb                	mov    ebx,edi
c0026df7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026dfa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026dfd:	d3 e7                	shl    edi,cl
c0026dff:	85 ff                	test   edi,edi
c0026e01:	0f 95 c1             	setne  cl
c0026e04:	0f b6 c9             	movzx  ecx,cl
c0026e07:	09 ce                	or     esi,ecx
c0026e09:	01 f2                	add    edx,esi
c0026e0b:	11 d8                	adc    eax,ebx
c0026e0d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026e10:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026e13:	e9 52 01 00 00       	jmp    c0026f6a <__adddf3+0x297>
c0026e18:	0f 84 d5 00 00 00    	je     c0026ef3 <__adddf3+0x220>
c0026e1e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026e21:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026e24:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026e27:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026e2a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026e31:	75 20                	jne    c0026e53 <__adddf3+0x180>
c0026e33:	89 d6                	mov    esi,edx
c0026e35:	09 c6                	or     esi,eax
c0026e37:	0f 84 db 04 00 00    	je     c0027318 <__adddf3+0x645>
c0026e3d:	4b                   	dec    ebx
c0026e3e:	75 29                	jne    c0026e69 <__adddf3+0x196>
c0026e40:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e43:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e46:	01 d1                	add    ecx,edx
c0026e48:	11 c6                	adc    esi,eax
c0026e4a:	89 f0                	mov    eax,esi
c0026e4c:	89 ca                	mov    edx,ecx
c0026e4e:	e9 17 01 00 00       	jmp    c0026f6a <__adddf3+0x297>
c0026e53:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026e56:	f7 d6                	not    esi
c0026e58:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026e5e:	0f 84 b4 04 00 00    	je     c0027318 <__adddf3+0x645>
c0026e64:	0d 00 00 00 80       	or     eax,0x80000000
c0026e69:	83 fb 1f             	cmp    ebx,0x1f
c0026e6c:	7e 48                	jle    c0026eb6 <__adddf3+0x1e3>
c0026e6e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026e71:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026e74:	83 fb 3f             	cmp    ebx,0x3f
c0026e77:	0f 8f 9b 04 00 00    	jg     c0027318 <__adddf3+0x645>
c0026e7d:	83 e3 1f             	and    ebx,0x1f
c0026e80:	89 d9                	mov    ecx,ebx
c0026e82:	89 c7                	mov    edi,eax
c0026e84:	d3 ef                	shr    edi,cl
c0026e86:	31 db                	xor    ebx,ebx
c0026e88:	85 c9                	test   ecx,ecx
c0026e8a:	74 12                	je     c0026e9e <__adddf3+0x1cb>
c0026e8c:	be 20 00 00 00       	mov    esi,0x20
c0026e91:	29 ce                	sub    esi,ecx
c0026e93:	89 f1                	mov    ecx,esi
c0026e95:	d3 e0                	shl    eax,cl
c0026e97:	31 db                	xor    ebx,ebx
c0026e99:	85 c0                	test   eax,eax
c0026e9b:	0f 95 c3             	setne  bl
c0026e9e:	31 c0                	xor    eax,eax
c0026ea0:	85 d2                	test   edx,edx
c0026ea2:	0f 95 c0             	setne  al
c0026ea5:	09 c7                	or     edi,eax
c0026ea7:	09 fb                	or     ebx,edi
c0026ea9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026eac:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026eaf:	01 da                	add    edx,ebx
c0026eb1:	83 d6 00             	adc    esi,0x0
c0026eb4:	eb 39                	jmp    c0026eef <__adddf3+0x21c>
c0026eb6:	be 20 00 00 00       	mov    esi,0x20
c0026ebb:	29 de                	sub    esi,ebx
c0026ebd:	89 c7                	mov    edi,eax
c0026ebf:	89 f1                	mov    ecx,esi
c0026ec1:	d3 e7                	shl    edi,cl
c0026ec3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026ec6:	89 d7                	mov    edi,edx
c0026ec8:	88 d9                	mov    cl,bl
c0026eca:	d3 ef                	shr    edi,cl
c0026ecc:	89 f9                	mov    ecx,edi
c0026ece:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026ed1:	09 cf                	or     edi,ecx
c0026ed3:	88 d9                	mov    cl,bl
c0026ed5:	d3 e8                	shr    eax,cl
c0026ed7:	89 f1                	mov    ecx,esi
c0026ed9:	d3 e2                	shl    edx,cl
c0026edb:	85 d2                	test   edx,edx
c0026edd:	0f 95 c2             	setne  dl
c0026ee0:	0f b6 d2             	movzx  edx,dl
c0026ee3:	09 d7                	or     edi,edx
c0026ee5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ee8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026eeb:	01 fa                	add    edx,edi
c0026eed:	11 c6                	adc    esi,eax
c0026eef:	89 f0                	mov    eax,esi
c0026ef1:	eb 77                	jmp    c0026f6a <__adddf3+0x297>
c0026ef3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026ef6:	46                   	inc    esi
c0026ef7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026efa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026f00:	75 41                	jne    c0026f43 <__adddf3+0x270>
c0026f02:	89 d3                	mov    ebx,edx
c0026f04:	09 c3                	or     ebx,eax
c0026f06:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026f0d:	75 27                	jne    c0026f36 <__adddf3+0x263>
c0026f0f:	85 db                	test   ebx,ebx
c0026f11:	0f 84 fb 03 00 00    	je     c0027312 <__adddf3+0x63f>
c0026f17:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026f1a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026f1d:	0f 84 f5 03 00 00    	je     c0027318 <__adddf3+0x645>
c0026f23:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026f26:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026f29:	85 c0                	test   eax,eax
c0026f2b:	0f 89 91 03 00 00    	jns    c00272c2 <__adddf3+0x5ef>
c0026f31:	e9 85 03 00 00       	jmp    c00272bb <__adddf3+0x5e8>
c0026f36:	85 db                	test   ebx,ebx
c0026f38:	0f 85 da 03 00 00    	jne    c0027318 <__adddf3+0x645>
c0026f3e:	e9 cf 03 00 00       	jmp    c0027312 <__adddf3+0x63f>
c0026f43:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026f46:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026f49:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f4c:	f7 d1                	not    ecx
c0026f4e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026f54:	0f 84 70 03 00 00    	je     c00272ca <__adddf3+0x5f7>
c0026f5a:	d1 ea                	shr    edx,1
c0026f5c:	89 c1                	mov    ecx,eax
c0026f5e:	c1 e1 1f             	shl    ecx,0x1f
c0026f61:	09 ca                	or     edx,ecx
c0026f63:	d1 e8                	shr    eax,1
c0026f65:	e9 6f 03 00 00       	jmp    c00272d9 <__adddf3+0x606>
c0026f6a:	85 c0                	test   eax,eax
c0026f6c:	0f 89 67 03 00 00    	jns    c00272d9 <__adddf3+0x606>
c0026f72:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026f75:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f78:	f7 d1                	not    ecx
c0026f7a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026f80:	0f 84 44 03 00 00    	je     c00272ca <__adddf3+0x5f7>
c0026f86:	89 d1                	mov    ecx,edx
c0026f88:	d1 e9                	shr    ecx,1
c0026f8a:	83 e2 01             	and    edx,0x1
c0026f8d:	09 ca                	or     edx,ecx
c0026f8f:	89 c1                	mov    ecx,eax
c0026f91:	c1 e1 1f             	shl    ecx,0x1f
c0026f94:	09 ca                	or     edx,ecx
c0026f96:	d1 e8                	shr    eax,1
c0026f98:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026f9d:	e9 37 03 00 00       	jmp    c00272d9 <__adddf3+0x606>
c0026fa2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026fa5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026fab:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0026fae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026fb1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026fb7:	29 de                	sub    esi,ebx
c0026fb9:	85 f6                	test   esi,esi
c0026fbb:	0f 8e bd 00 00 00    	jle    c002707e <__adddf3+0x3ab>
c0026fc1:	85 db                	test   ebx,ebx
c0026fc3:	75 17                	jne    c0026fdc <__adddf3+0x309>
c0026fc5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fc8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026fcb:	0f 84 47 03 00 00    	je     c0027318 <__adddf3+0x645>
c0026fd1:	4e                   	dec    esi
c0026fd2:	75 20                	jne    c0026ff4 <__adddf3+0x321>
c0026fd4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026fd7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026fda:	eb 5b                	jmp    c0027037 <__adddf3+0x364>
c0026fdc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026fdf:	f7 d3                	not    ebx
c0026fe1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026fe7:	0f 84 2b 03 00 00    	je     c0027318 <__adddf3+0x645>
c0026fed:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026ff4:	83 fe 1f             	cmp    esi,0x1f
c0026ff7:	7e 49                	jle    c0027042 <__adddf3+0x36f>
c0026ff9:	83 fe 3f             	cmp    esi,0x3f
c0026ffc:	0f 8f 16 03 00 00    	jg     c0027318 <__adddf3+0x645>
c0027002:	83 e6 1f             	and    esi,0x1f
c0027005:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027008:	89 f1                	mov    ecx,esi
c002700a:	d3 ef                	shr    edi,cl
c002700c:	31 db                	xor    ebx,ebx
c002700e:	85 f6                	test   esi,esi
c0027010:	74 13                	je     c0027025 <__adddf3+0x352>
c0027012:	b9 20 00 00 00       	mov    ecx,0x20
c0027017:	29 f1                	sub    ecx,esi
c0027019:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002701c:	d3 e6                	shl    esi,cl
c002701e:	31 db                	xor    ebx,ebx
c0027020:	85 f6                	test   esi,esi
c0027022:	0f 95 c3             	setne  bl
c0027025:	31 c9                	xor    ecx,ecx
c0027027:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002702b:	0f 95 c1             	setne  cl
c002702e:	09 cf                	or     edi,ecx
c0027030:	09 fb                	or     ebx,edi
c0027032:	29 da                	sub    edx,ebx
c0027034:	83 d8 00             	sbb    eax,0x0
c0027037:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002703a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002703d:	e9 aa 01 00 00       	jmp    c00271ec <__adddf3+0x519>
c0027042:	bf 20 00 00 00       	mov    edi,0x20
c0027047:	29 f7                	sub    edi,esi
c0027049:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002704c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002704f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027052:	d3 e3                	shl    ebx,cl
c0027054:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027057:	89 f1                	mov    ecx,esi
c0027059:	d3 ef                	shr    edi,cl
c002705b:	09 fb                	or     ebx,edi
c002705d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027060:	89 f1                	mov    ecx,esi
c0027062:	d3 ef                	shr    edi,cl
c0027064:	89 fe                	mov    esi,edi
c0027066:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027069:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002706c:	d3 e7                	shl    edi,cl
c002706e:	85 ff                	test   edi,edi
c0027070:	0f 95 c1             	setne  cl
c0027073:	0f b6 c9             	movzx  ecx,cl
c0027076:	09 cb                	or     ebx,ecx
c0027078:	29 da                	sub    edx,ebx
c002707a:	19 f0                	sbb    eax,esi
c002707c:	eb b9                	jmp    c0027037 <__adddf3+0x364>
c002707e:	0f 84 cd 00 00 00    	je     c0027151 <__adddf3+0x47e>
c0027084:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027087:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002708a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002708d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027091:	75 1b                	jne    c00270ae <__adddf3+0x3db>
c0027093:	89 d6                	mov    esi,edx
c0027095:	09 c6                	or     esi,eax
c0027097:	0f 84 7b 02 00 00    	je     c0027318 <__adddf3+0x645>
c002709d:	4b                   	dec    ebx
c002709e:	75 24                	jne    c00270c4 <__adddf3+0x3f1>
c00270a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00270a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270a6:	29 d1                	sub    ecx,edx
c00270a8:	19 c6                	sbb    esi,eax
c00270aa:	89 ca                	mov    edx,ecx
c00270ac:	eb 61                	jmp    c002710f <__adddf3+0x43c>
c00270ae:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00270b1:	f7 d6                	not    esi
c00270b3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00270b9:	0f 84 59 02 00 00    	je     c0027318 <__adddf3+0x645>
c00270bf:	0d 00 00 00 80       	or     eax,0x80000000
c00270c4:	83 fb 1f             	cmp    ebx,0x1f
c00270c7:	7e 4d                	jle    c0027116 <__adddf3+0x443>
c00270c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00270cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00270cf:	83 fb 3f             	cmp    ebx,0x3f
c00270d2:	0f 8f 40 02 00 00    	jg     c0027318 <__adddf3+0x645>
c00270d8:	83 e3 1f             	and    ebx,0x1f
c00270db:	89 d9                	mov    ecx,ebx
c00270dd:	89 c7                	mov    edi,eax
c00270df:	d3 ef                	shr    edi,cl
c00270e1:	31 db                	xor    ebx,ebx
c00270e3:	85 c9                	test   ecx,ecx
c00270e5:	74 12                	je     c00270f9 <__adddf3+0x426>
c00270e7:	be 20 00 00 00       	mov    esi,0x20
c00270ec:	29 ce                	sub    esi,ecx
c00270ee:	89 f1                	mov    ecx,esi
c00270f0:	d3 e0                	shl    eax,cl
c00270f2:	31 db                	xor    ebx,ebx
c00270f4:	85 c0                	test   eax,eax
c00270f6:	0f 95 c3             	setne  bl
c00270f9:	31 c0                	xor    eax,eax
c00270fb:	85 d2                	test   edx,edx
c00270fd:	0f 95 c0             	setne  al
c0027100:	09 c7                	or     edi,eax
c0027102:	09 fb                	or     ebx,edi
c0027104:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027107:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002710a:	29 da                	sub    edx,ebx
c002710c:	83 de 00             	sbb    esi,0x0
c002710f:	89 f0                	mov    eax,esi
c0027111:	e9 d6 00 00 00       	jmp    c00271ec <__adddf3+0x519>
c0027116:	be 20 00 00 00       	mov    esi,0x20
c002711b:	29 de                	sub    esi,ebx
c002711d:	89 c7                	mov    edi,eax
c002711f:	89 f1                	mov    ecx,esi
c0027121:	d3 e7                	shl    edi,cl
c0027123:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027126:	89 d7                	mov    edi,edx
c0027128:	88 d9                	mov    cl,bl
c002712a:	d3 ef                	shr    edi,cl
c002712c:	89 f9                	mov    ecx,edi
c002712e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027131:	09 cf                	or     edi,ecx
c0027133:	88 d9                	mov    cl,bl
c0027135:	d3 e8                	shr    eax,cl
c0027137:	89 f1                	mov    ecx,esi
c0027139:	d3 e2                	shl    edx,cl
c002713b:	85 d2                	test   edx,edx
c002713d:	0f 95 c2             	setne  dl
c0027140:	0f b6 d2             	movzx  edx,dl
c0027143:	09 d7                	or     edi,edx
c0027145:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027148:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002714b:	29 fa                	sub    edx,edi
c002714d:	19 c6                	sbb    esi,eax
c002714f:	eb be                	jmp    c002710f <__adddf3+0x43c>
c0027151:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027154:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027157:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002715d:	75 6a                	jne    c00271c9 <__adddf3+0x4f6>
c002715f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027163:	75 58                	jne    c00271bd <__adddf3+0x4ea>
c0027165:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027168:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002716b:	89 d6                	mov    esi,edx
c002716d:	09 c6                	or     esi,eax
c002716f:	75 17                	jne    c0027188 <__adddf3+0x4b5>
c0027171:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027174:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027177:	85 db                	test   ebx,ebx
c0027179:	0f 85 99 01 00 00    	jne    c0027318 <__adddf3+0x645>
c002717f:	31 ff                	xor    edi,edi
c0027181:	31 c9                	xor    ecx,ecx
c0027183:	e9 90 01 00 00       	jmp    c0027318 <__adddf3+0x645>
c0027188:	85 db                	test   ebx,ebx
c002718a:	0f 84 88 01 00 00    	je     c0027318 <__adddf3+0x645>
c0027190:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027193:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027196:	85 c0                	test   eax,eax
c0027198:	79 10                	jns    c00271aa <__adddf3+0x4d7>
c002719a:	31 c9                	xor    ecx,ecx
c002719c:	f7 da                	neg    edx
c002719e:	0f 95 c1             	setne  cl
c00271a1:	01 c8                	add    eax,ecx
c00271a3:	f7 d8                	neg    eax
c00271a5:	e9 2f 01 00 00       	jmp    c00272d9 <__adddf3+0x606>
c00271aa:	31 ff                	xor    edi,edi
c00271ac:	31 c9                	xor    ecx,ecx
c00271ae:	89 c3                	mov    ebx,eax
c00271b0:	09 d3                	or     ebx,edx
c00271b2:	0f 84 60 01 00 00    	je     c0027318 <__adddf3+0x645>
c00271b8:	e9 05 01 00 00       	jmp    c00272c2 <__adddf3+0x5ef>
c00271bd:	31 ff                	xor    edi,edi
c00271bf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00271c4:	e9 4f 01 00 00       	jmp    c0027318 <__adddf3+0x645>
c00271c9:	89 c1                	mov    ecx,eax
c00271cb:	89 d0                	mov    eax,edx
c00271cd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00271d0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00271d3:	89 ca                	mov    edx,ecx
c00271d5:	85 c9                	test   ecx,ecx
c00271d7:	79 2c                	jns    c0027205 <__adddf3+0x532>
c00271d9:	31 c9                	xor    ecx,ecx
c00271db:	f7 d8                	neg    eax
c00271dd:	0f 95 c1             	setne  cl
c00271e0:	01 ca                	add    edx,ecx
c00271e2:	f7 da                	neg    edx
c00271e4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00271e7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00271ea:	eb 19                	jmp    c0027205 <__adddf3+0x532>
c00271ec:	85 c0                	test   eax,eax
c00271ee:	0f 89 e5 00 00 00    	jns    c00272d9 <__adddf3+0x606>
c00271f4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271f9:	89 c1                	mov    ecx,eax
c00271fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00271fe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027201:	89 d0                	mov    eax,edx
c0027203:	89 ca                	mov    edx,ecx
c0027205:	85 d2                	test   edx,edx
c0027207:	74 59                	je     c0027262 <__adddf3+0x58f>
c0027209:	0f bd da             	bsr    ebx,edx
c002720c:	83 f3 1f             	xor    ebx,0x1f
c002720f:	88 d9                	mov    cl,bl
c0027211:	d3 e2                	shl    edx,cl
c0027213:	bf 20 00 00 00       	mov    edi,0x20
c0027218:	89 f9                	mov    ecx,edi
c002721a:	29 d9                	sub    ecx,ebx
c002721c:	89 c6                	mov    esi,eax
c002721e:	d3 ee                	shr    esi,cl
c0027220:	09 d6                	or     esi,edx
c0027222:	88 d9                	mov    cl,bl
c0027224:	d3 e0                	shl    eax,cl
c0027226:	89 c2                	mov    edx,eax
c0027228:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002722b:	25 ff 07 00 00       	and    eax,0x7ff
c0027230:	39 d8                	cmp    eax,ebx
c0027232:	7f 22                	jg     c0027256 <__adddf3+0x583>
c0027234:	29 c3                	sub    ebx,eax
c0027236:	43                   	inc    ebx
c0027237:	88 d9                	mov    cl,bl
c0027239:	d3 ea                	shr    edx,cl
c002723b:	29 df                	sub    edi,ebx
c002723d:	89 f9                	mov    ecx,edi
c002723f:	89 f0                	mov    eax,esi
c0027241:	d3 e0                	shl    eax,cl
c0027243:	09 c2                	or     edx,eax
c0027245:	89 f0                	mov    eax,esi
c0027247:	88 d9                	mov    cl,bl
c0027249:	d3 e8                	shr    eax,cl
c002724b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002724e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027254:	eb 6f                	jmp    c00272c5 <__adddf3+0x5f2>
c0027256:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027259:	29 d8                	sub    eax,ebx
c002725b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002725e:	89 f0                	mov    eax,esi
c0027260:	eb 59                	jmp    c00272bb <__adddf3+0x5e8>
c0027262:	85 c0                	test   eax,eax
c0027264:	74 6a                	je     c00272d0 <__adddf3+0x5fd>
c0027266:	0f bd c8             	bsr    ecx,eax
c0027269:	83 f1 1f             	xor    ecx,0x1f
c002726c:	d3 e0                	shl    eax,cl
c002726e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027271:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027277:	83 c1 20             	add    ecx,0x20
c002727a:	39 cb                	cmp    ebx,ecx
c002727c:	7f 35                	jg     c00272b3 <__adddf3+0x5e0>
c002727e:	29 d9                	sub    ecx,ebx
c0027280:	8d 71 01             	lea    esi,[ecx+0x1]
c0027283:	83 fe 1f             	cmp    esi,0x1f
c0027286:	7e 09                	jle    c0027291 <__adddf3+0x5be>
c0027288:	83 e9 1f             	sub    ecx,0x1f
c002728b:	d3 e8                	shr    eax,cl
c002728d:	89 c3                	mov    ebx,eax
c002728f:	eb 11                	jmp    c00272a2 <__adddf3+0x5cf>
c0027291:	b9 20 00 00 00       	mov    ecx,0x20
c0027296:	29 f1                	sub    ecx,esi
c0027298:	89 c3                	mov    ebx,eax
c002729a:	d3 e3                	shl    ebx,cl
c002729c:	89 f1                	mov    ecx,esi
c002729e:	d3 e8                	shr    eax,cl
c00272a0:	89 c2                	mov    edx,eax
c00272a2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272a5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00272aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00272ad:	89 d0                	mov    eax,edx
c00272af:	89 da                	mov    edx,ebx
c00272b1:	eb 26                	jmp    c00272d9 <__adddf3+0x606>
c00272b3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272b6:	29 cf                	sub    edi,ecx
c00272b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272bb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272c0:	eb 17                	jmp    c00272d9 <__adddf3+0x606>
c00272c2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272c5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272c8:	eb 0f                	jmp    c00272d9 <__adddf3+0x606>
c00272ca:	31 d2                	xor    edx,edx
c00272cc:	31 c0                	xor    eax,eax
c00272ce:	eb 09                	jmp    c00272d9 <__adddf3+0x606>
c00272d0:	89 c2                	mov    edx,eax
c00272d2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00272d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00272dc:	c1 e1 14             	shl    ecx,0x14
c00272df:	89 c3                	mov    ebx,eax
c00272e1:	c1 eb 0b             	shr    ebx,0xb
c00272e4:	09 d9                	or     ecx,ebx
c00272e6:	89 d3                	mov    ebx,edx
c00272e8:	c1 eb 0b             	shr    ebx,0xb
c00272eb:	c1 e0 15             	shl    eax,0x15
c00272ee:	09 d8                	or     eax,ebx
c00272f0:	89 c7                	mov    edi,eax
c00272f2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00272f8:	0f 95 c0             	setne  al
c00272fb:	89 c6                	mov    esi,eax
c00272fd:	09 f3                	or     ebx,esi
c00272ff:	83 e3 01             	and    ebx,0x1
c0027302:	c1 ea 0a             	shr    edx,0xa
c0027305:	21 da                	and    edx,ebx
c0027307:	89 f8                	mov    eax,edi
c0027309:	01 d0                	add    eax,edx
c002730b:	83 d1 00             	adc    ecx,0x0
c002730e:	89 c7                	mov    edi,eax
c0027310:	eb 06                	jmp    c0027318 <__adddf3+0x645>
c0027312:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027315:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027318:	89 f8                	mov    eax,edi
c002731a:	89 ca                	mov    edx,ecx
c002731c:	83 c4 24             	add    esp,0x24
c002731f:	5b                   	pop    ebx
c0027320:	5e                   	pop    esi
c0027321:	5f                   	pop    edi
c0027322:	5d                   	pop    ebp
c0027323:	c3                   	ret    

c0027324 <__subdf3>:
c0027324:	55                   	push   ebp
c0027325:	89 e5                	mov    ebp,esp
c0027327:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002732a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002732d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027333:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027336:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027339:	5d                   	pop    ebp
c002733a:	e9 94 f9 ff ff       	jmp    c0026cd3 <__adddf3>

c002733f <__negdf2>:
c002733f:	55                   	push   ebp
c0027340:	89 e5                	mov    ebp,esp
c0027342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027345:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027348:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002734e:	5d                   	pop    ebp
c002734f:	c3                   	ret    

c0027350 <__muldf3>:
c0027350:	55                   	push   ebp
c0027351:	89 e5                	mov    ebp,esp
c0027353:	57                   	push   edi
c0027354:	56                   	push   esi
c0027355:	53                   	push   ebx
c0027356:	83 ec 24             	sub    esp,0x24
c0027359:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002735c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002735f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027362:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027365:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027368:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002736b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002736e:	89 c8                	mov    eax,ecx
c0027370:	c1 f8 14             	sar    eax,0x14
c0027373:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027376:	89 f8                	mov    eax,edi
c0027378:	89 fb                	mov    ebx,edi
c002737a:	c1 e3 0b             	shl    ebx,0xb
c002737d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027380:	c1 e1 0b             	shl    ecx,0xb
c0027383:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027389:	c1 e8 15             	shr    eax,0x15
c002738c:	09 c1                	or     ecx,eax
c002738e:	89 d6                	mov    esi,edx
c0027390:	89 d0                	mov    eax,edx
c0027392:	c1 f8 14             	sar    eax,0x14
c0027395:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027398:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002739b:	89 c3                	mov    ebx,eax
c002739d:	c1 e3 0b             	shl    ebx,0xb
c00273a0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00273a3:	c1 e6 0b             	shl    esi,0xb
c00273a6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00273ac:	c1 e8 15             	shr    eax,0x15
c00273af:	09 c6                	or     esi,eax
c00273b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00273b4:	25 ff 07 00 00       	and    eax,0x7ff
c00273b9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00273bc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00273bf:	25 ff 07 00 00       	and    eax,0x7ff
c00273c4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00273c7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00273ca:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00273cd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00273d4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00273d7:	40                   	inc    eax
c00273d8:	a9 fe 07 00 00       	test   eax,0x7fe
c00273dd:	0f 85 8d 00 00 00    	jne    c0027470 <__muldf3+0x120>
c00273e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273e6:	09 c8                	or     eax,ecx
c00273e8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00273ec:	74 44                	je     c0027432 <__muldf3+0xe2>
c00273ee:	85 c0                	test   eax,eax
c00273f0:	0f 85 31 02 00 00    	jne    c0027627 <__muldf3+0x2d7>
c00273f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00273f9:	40                   	inc    eax
c00273fa:	a9 fe 07 00 00       	test   eax,0x7fe
c00273ff:	75 13                	jne    c0027414 <__muldf3+0xc4>
c0027401:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027404:	09 f1                	or     ecx,esi
c0027406:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002740a:	74 22                	je     c002742e <__muldf3+0xde>
c002740c:	85 c9                	test   ecx,ecx
c002740e:	0f 85 0d 02 00 00    	jne    c0027621 <__muldf3+0x2d1>
c0027414:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027418:	0f 89 09 02 00 00    	jns    c0027627 <__muldf3+0x2d7>
c002741e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027421:	05 00 00 00 80       	add    eax,0x80000000
c0027426:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027429:	e9 f9 01 00 00       	jmp    c0027627 <__muldf3+0x2d7>
c002742e:	85 c9                	test   ecx,ecx
c0027430:	eb 2e                	jmp    c0027460 <__muldf3+0x110>
c0027432:	85 c0                	test   eax,eax
c0027434:	74 20                	je     c0027456 <__muldf3+0x106>
c0027436:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027439:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002743c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002743f:	c1 ef 1f             	shr    edi,0x1f
c0027442:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027445:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027448:	8d 43 ff             	lea    eax,[ebx-0x1]
c002744b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002744e:	09 f9                	or     ecx,edi
c0027450:	78 1e                	js     c0027470 <__muldf3+0x120>
c0027452:	89 c3                	mov    ebx,eax
c0027454:	eb e0                	jmp    c0027436 <__muldf3+0xe6>
c0027456:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027459:	f7 d0                	not    eax
c002745b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027460:	75 b2                	jne    c0027414 <__muldf3+0xc4>
c0027462:	31 ff                	xor    edi,edi
c0027464:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002746b:	e9 b7 01 00 00       	jmp    c0027627 <__muldf3+0x2d7>
c0027470:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027473:	40                   	inc    eax
c0027474:	a9 fe 07 00 00       	test   eax,0x7fe
c0027479:	75 57                	jne    c00274d2 <__muldf3+0x182>
c002747b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002747e:	09 f0                	or     eax,esi
c0027480:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027484:	74 23                	je     c00274a9 <__muldf3+0x159>
c0027486:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002748a:	0f 89 91 01 00 00    	jns    c0027621 <__muldf3+0x2d1>
c0027490:	85 c0                	test   eax,eax
c0027492:	0f 85 89 01 00 00    	jne    c0027621 <__muldf3+0x2d1>
c0027498:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002749b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00274a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00274a4:	e9 7e 01 00 00       	jmp    c0027627 <__muldf3+0x2d7>
c00274a9:	85 c0                	test   eax,eax
c00274ab:	75 0c                	jne    c00274b9 <__muldf3+0x169>
c00274ad:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00274b1:	0f 89 6a 01 00 00    	jns    c0027621 <__muldf3+0x2d1>
c00274b7:	eb df                	jmp    c0027498 <__muldf3+0x148>
c00274b9:	01 f6                	add    esi,esi
c00274bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274be:	c1 ea 1f             	shr    edx,0x1f
c00274c1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00274c4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00274c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00274ca:	09 d6                	or     esi,edx
c00274cc:	78 04                	js     c00274d2 <__muldf3+0x182>
c00274ce:	89 c3                	mov    ebx,eax
c00274d0:	eb e7                	jmp    c00274b9 <__muldf3+0x169>
c00274d2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00274d8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00274de:	89 c8                	mov    eax,ecx
c00274e0:	f7 e6                	mul    esi
c00274e2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00274e5:	89 c7                	mov    edi,eax
c00274e7:	89 c8                	mov    eax,ecx
c00274e9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00274ec:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00274ef:	89 c1                	mov    ecx,eax
c00274f1:	89 f0                	mov    eax,esi
c00274f3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00274f6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00274f9:	89 c6                	mov    esi,eax
c00274fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00274fe:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027501:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027504:	31 c0                	xor    eax,eax
c0027506:	01 f1                	add    ecx,esi
c0027508:	0f 92 c0             	setb   al
c002750b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002750e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027511:	83 d6 00             	adc    esi,0x0
c0027514:	01 c7                	add    edi,eax
c0027516:	83 d6 00             	adc    esi,0x0
c0027519:	01 ca                	add    edx,ecx
c002751b:	0f 92 c1             	setb   cl
c002751e:	0f b6 c9             	movzx  ecx,cl
c0027521:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027524:	83 d6 00             	adc    esi,0x0
c0027527:	01 cf                	add    edi,ecx
c0027529:	83 d6 00             	adc    esi,0x0
c002752c:	31 c9                	xor    ecx,ecx
c002752e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027531:	0f 95 c1             	setne  cl
c0027534:	09 cf                	or     edi,ecx
c0027536:	85 f6                	test   esi,esi
c0027538:	78 0c                	js     c0027546 <__muldf3+0x1f6>
c002753a:	01 f6                	add    esi,esi
c002753c:	89 f8                	mov    eax,edi
c002753e:	c1 e8 1f             	shr    eax,0x1f
c0027541:	09 c6                	or     esi,eax
c0027543:	01 ff                	add    edi,edi
c0027545:	4b                   	dec    ebx
c0027546:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002754c:	0f 8f 85 00 00 00    	jg     c00275d7 <__muldf3+0x287>
c0027552:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027558:	85 db                	test   ebx,ebx
c002755a:	0f 8f 84 00 00 00    	jg     c00275e4 <__muldf3+0x294>
c0027560:	83 fb cc             	cmp    ebx,0xffffffcc
c0027563:	7c 79                	jl     c00275de <__muldf3+0x28e>
c0027565:	ba 01 00 00 00       	mov    edx,0x1
c002756a:	29 da                	sub    edx,ebx
c002756c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027572:	83 fa 1f             	cmp    edx,0x1f
c0027575:	7e 30                	jle    c00275a7 <__muldf3+0x257>
c0027577:	83 fa 20             	cmp    edx,0x20
c002757a:	75 0b                	jne    c0027587 <__muldf3+0x237>
c002757c:	31 c0                	xor    eax,eax
c002757e:	85 ff                	test   edi,edi
c0027580:	0f 95 c0             	setne  al
c0027583:	89 c7                	mov    edi,eax
c0027585:	eb 1a                	jmp    c00275a1 <__muldf3+0x251>
c0027587:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002758a:	89 f0                	mov    eax,esi
c002758c:	d3 e0                	shl    eax,cl
c002758e:	09 f8                	or     eax,edi
c0027590:	0f 95 c0             	setne  al
c0027593:	0f b6 c0             	movzx  eax,al
c0027596:	89 c7                	mov    edi,eax
c0027598:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002759d:	29 d9                	sub    ecx,ebx
c002759f:	d3 ee                	shr    esi,cl
c00275a1:	09 f7                	or     edi,esi
c00275a3:	31 db                	xor    ebx,ebx
c00275a5:	eb 3b                	jmp    c00275e2 <__muldf3+0x292>
c00275a7:	83 c3 1f             	add    ebx,0x1f
c00275aa:	89 f0                	mov    eax,esi
c00275ac:	88 d9                	mov    cl,bl
c00275ae:	d3 e0                	shl    eax,cl
c00275b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275b3:	89 f8                	mov    eax,edi
c00275b5:	88 d1                	mov    cl,dl
c00275b7:	d3 e8                	shr    eax,cl
c00275b9:	89 c1                	mov    ecx,eax
c00275bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00275be:	09 c8                	or     eax,ecx
c00275c0:	88 d9                	mov    cl,bl
c00275c2:	d3 e7                	shl    edi,cl
c00275c4:	31 db                	xor    ebx,ebx
c00275c6:	85 ff                	test   edi,edi
c00275c8:	0f 95 c3             	setne  bl
c00275cb:	89 df                	mov    edi,ebx
c00275cd:	09 c7                	or     edi,eax
c00275cf:	88 d1                	mov    cl,dl
c00275d1:	d3 ee                	shr    esi,cl
c00275d3:	31 db                	xor    ebx,ebx
c00275d5:	eb 0d                	jmp    c00275e4 <__muldf3+0x294>
c00275d7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00275dc:	eb 02                	jmp    c00275e0 <__muldf3+0x290>
c00275de:	31 db                	xor    ebx,ebx
c00275e0:	31 ff                	xor    edi,edi
c00275e2:	31 f6                	xor    esi,esi
c00275e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00275e7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00275ea:	25 00 f8 ff ff       	and    eax,0xfffff800
c00275ef:	09 c3                	or     ebx,eax
c00275f1:	c1 e3 14             	shl    ebx,0x14
c00275f4:	89 f0                	mov    eax,esi
c00275f6:	c1 e8 0b             	shr    eax,0xb
c00275f9:	09 c3                	or     ebx,eax
c00275fb:	89 f8                	mov    eax,edi
c00275fd:	c1 e8 0b             	shr    eax,0xb
c0027600:	c1 e6 15             	shl    esi,0x15
c0027603:	09 c6                	or     esi,eax
c0027605:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002760b:	0f 95 c1             	setne  cl
c002760e:	09 c8                	or     eax,ecx
c0027610:	83 e0 01             	and    eax,0x1
c0027613:	c1 ef 0a             	shr    edi,0xa
c0027616:	21 c7                	and    edi,eax
c0027618:	01 f7                	add    edi,esi
c002761a:	83 d3 00             	adc    ebx,0x0
c002761d:	89 da                	mov    edx,ebx
c002761f:	eb 03                	jmp    c0027624 <__muldf3+0x2d4>
c0027621:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027624:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027627:	89 f8                	mov    eax,edi
c0027629:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002762c:	83 c4 24             	add    esp,0x24
c002762f:	5b                   	pop    ebx
c0027630:	5e                   	pop    esi
c0027631:	5f                   	pop    edi
c0027632:	5d                   	pop    ebp
c0027633:	c3                   	ret    

c0027634 <__divdf3>:
c0027634:	55                   	push   ebp
c0027635:	89 e5                	mov    ebp,esp
c0027637:	57                   	push   edi
c0027638:	56                   	push   esi
c0027639:	53                   	push   ebx
c002763a:	83 ec 2c             	sub    esp,0x2c
c002763d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027640:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027643:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027646:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027649:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002764c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002764f:	89 ce                	mov    esi,ecx
c0027651:	89 c8                	mov    eax,ecx
c0027653:	c1 f8 14             	sar    eax,0x14
c0027656:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027659:	89 f8                	mov    eax,edi
c002765b:	89 fb                	mov    ebx,edi
c002765d:	c1 e3 0b             	shl    ebx,0xb
c0027660:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027663:	c1 e6 0b             	shl    esi,0xb
c0027666:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002766c:	c1 e8 15             	shr    eax,0x15
c002766f:	09 c6                	or     esi,eax
c0027671:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027674:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027677:	89 c2                	mov    edx,eax
c0027679:	c1 fa 14             	sar    edx,0x14
c002767c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002767f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027682:	89 de                	mov    esi,ebx
c0027684:	c1 e6 0b             	shl    esi,0xb
c0027687:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002768a:	c1 e0 0b             	shl    eax,0xb
c002768d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027692:	c1 eb 15             	shr    ebx,0x15
c0027695:	09 d8                	or     eax,ebx
c0027697:	89 c2                	mov    edx,eax
c0027699:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002769c:	25 ff 07 00 00       	and    eax,0x7ff
c00276a1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00276a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276a7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276ad:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00276b0:	29 d8                	sub    eax,ebx
c00276b2:	05 ff 03 00 00       	add    eax,0x3ff
c00276b7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00276ba:	46                   	inc    esi
c00276bb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00276c1:	0f 85 a5 00 00 00    	jne    c002776c <__divdf3+0x138>
c00276c7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276ca:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00276cd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00276d1:	74 2a                	je     c00276fd <__divdf3+0xc9>
c00276d3:	85 f6                	test   esi,esi
c00276d5:	0f 85 cc 02 00 00    	jne    c00279a7 <__divdf3+0x373>
c00276db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276de:	40                   	inc    eax
c00276df:	a9 fe 07 00 00       	test   eax,0x7fe
c00276e4:	75 26                	jne    c002770c <__divdf3+0xd8>
c00276e6:	85 db                	test   ebx,ebx
c00276e8:	74 22                	je     c002770c <__divdf3+0xd8>
c00276ea:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00276ed:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00276f0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00276f3:	09 d0                	or     eax,edx
c00276f5:	0f 85 ac 02 00 00    	jne    c00279a7 <__divdf3+0x373>
c00276fb:	eb 63                	jmp    c0027760 <__divdf3+0x12c>
c00276fd:	85 f6                	test   esi,esi
c00276ff:	75 22                	jne    c0027723 <__divdf3+0xef>
c0027701:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027704:	40                   	inc    eax
c0027705:	a9 fe 07 00 00       	test   eax,0x7fe
c002770a:	74 36                	je     c0027742 <__divdf3+0x10e>
c002770c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027710:	0f 89 91 02 00 00    	jns    c00279a7 <__divdf3+0x373>
c0027716:	89 f8                	mov    eax,edi
c0027718:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002771e:	e9 80 02 00 00       	jmp    c00279a3 <__divdf3+0x36f>
c0027723:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027726:	01 f6                	add    esi,esi
c0027728:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002772b:	c1 ef 1f             	shr    edi,0x1f
c002772e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027731:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027734:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027737:	09 f7                	or     edi,esi
c0027739:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002773c:	78 2e                	js     c002776c <__divdf3+0x138>
c002773e:	89 c8                	mov    eax,ecx
c0027740:	eb e1                	jmp    c0027723 <__divdf3+0xef>
c0027742:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027745:	09 d0                	or     eax,edx
c0027747:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002774b:	74 0f                	je     c002775c <__divdf3+0x128>
c002774d:	85 c0                	test   eax,eax
c002774f:	74 bb                	je     c002770c <__divdf3+0xd8>
c0027751:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027754:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027757:	e9 4b 02 00 00       	jmp    c00279a7 <__divdf3+0x373>
c002775c:	85 c0                	test   eax,eax
c002775e:	75 ac                	jne    c002770c <__divdf3+0xd8>
c0027760:	31 ff                	xor    edi,edi
c0027762:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027767:	e9 3b 02 00 00       	jmp    c00279a7 <__divdf3+0x373>
c002776c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002776f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027772:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027778:	75 6b                	jne    c00277e5 <__divdf3+0x1b1>
c002777a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002777d:	09 d6                	or     esi,edx
c002777f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027783:	74 28                	je     c00277ad <__divdf3+0x179>
c0027785:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027788:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002778b:	85 f6                	test   esi,esi
c002778d:	0f 85 14 02 00 00    	jne    c00279a7 <__divdf3+0x373>
c0027793:	31 ff                	xor    edi,edi
c0027795:	31 c9                	xor    ecx,ecx
c0027797:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002779a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002779d:	0f 89 04 02 00 00    	jns    c00279a7 <__divdf3+0x373>
c00277a3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00277a8:	e9 fa 01 00 00       	jmp    c00279a7 <__divdf3+0x373>
c00277ad:	85 f6                	test   esi,esi
c00277af:	75 1b                	jne    c00277cc <__divdf3+0x198>
c00277b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277b4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00277b7:	25 00 00 00 80       	and    eax,0x80000000
c00277bc:	31 c9                	xor    ecx,ecx
c00277be:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00277c3:	89 cf                	mov    edi,ecx
c00277c5:	89 c1                	mov    ecx,eax
c00277c7:	e9 db 01 00 00       	jmp    c00279a7 <__divdf3+0x373>
c00277cc:	01 d2                	add    edx,edx
c00277ce:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00277d1:	c1 eb 1f             	shr    ebx,0x1f
c00277d4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00277da:	8d 48 01             	lea    ecx,[eax+0x1]
c00277dd:	09 da                	or     edx,ebx
c00277df:	78 04                	js     c00277e5 <__divdf3+0x1b1>
c00277e1:	89 c8                	mov    eax,ecx
c00277e3:	eb e7                	jmp    c00277cc <__divdf3+0x198>
c00277e5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00277ee:	81 ca 00 00 00 80    	or     edx,0x80000000
c00277f4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00277f7:	39 d6                	cmp    esi,edx
c00277f9:	77 0d                	ja     c0027808 <__divdf3+0x1d4>
c00277fb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00277fe:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027801:	72 1b                	jb     c002781e <__divdf3+0x1ea>
c0027803:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027806:	75 16                	jne    c002781e <__divdf3+0x1ea>
c0027808:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002780b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002780e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027811:	83 de 00             	sbb    esi,0x0
c0027814:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027817:	ba 01 00 00 00       	mov    edx,0x1
c002781c:	eb 02                	jmp    c0027820 <__divdf3+0x1ec>
c002781e:	31 d2                	xor    edx,edx
c0027820:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027827:	31 ff                	xor    edi,edi
c0027829:	01 ff                	add    edi,edi
c002782b:	89 d1                	mov    ecx,edx
c002782d:	c1 e9 1f             	shr    ecx,0x1f
c0027830:	09 cf                	or     edi,ecx
c0027832:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027835:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027838:	89 da                	mov    edx,ebx
c002783a:	89 f3                	mov    ebx,esi
c002783c:	8d 34 36             	lea    esi,[esi+esi*1]
c002783f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027842:	c1 e9 1f             	shr    ecx,0x1f
c0027845:	09 ce                	or     esi,ecx
c0027847:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002784a:	01 c9                	add    ecx,ecx
c002784c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002784f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027852:	85 db                	test   ebx,ebx
c0027854:	78 29                	js     c002787f <__divdf3+0x24b>
c0027856:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027859:	72 07                	jb     c0027862 <__divdf3+0x22e>
c002785b:	75 3c                	jne    c0027899 <__divdf3+0x265>
c002785d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027860:	77 37                	ja     c0027899 <__divdf3+0x265>
c0027862:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027865:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027868:	31 d2                	xor    edx,edx
c002786a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002786d:	0f 97 c2             	seta   dl
c0027870:	29 d6                	sub    esi,edx
c0027872:	89 d9                	mov    ecx,ebx
c0027874:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027877:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002787a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002787d:	eb 17                	jmp    c0027896 <__divdf3+0x262>
c002787f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027882:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027885:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027888:	0f 97 c1             	seta   cl
c002788b:	0f b6 c9             	movzx  ecx,cl
c002788e:	29 ce                	sub    esi,ecx
c0027890:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027893:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027896:	83 ca 01             	or     edx,0x1
c0027899:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002789c:	75 8b                	jne    c0027829 <__divdf3+0x1f5>
c002789e:	c1 e7 09             	shl    edi,0x9
c00278a1:	89 d1                	mov    ecx,edx
c00278a3:	c1 e9 17             	shr    ecx,0x17
c00278a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278a9:	09 f3                	or     ebx,esi
c00278ab:	0f 95 c3             	setne  bl
c00278ae:	0f b6 db             	movzx  ebx,bl
c00278b1:	c1 e2 09             	shl    edx,0x9
c00278b4:	09 d3                	or     ebx,edx
c00278b6:	89 ca                	mov    edx,ecx
c00278b8:	09 fa                	or     edx,edi
c00278ba:	78 0c                	js     c00278c8 <__divdf3+0x294>
c00278bc:	01 d2                	add    edx,edx
c00278be:	89 d9                	mov    ecx,ebx
c00278c0:	c1 e9 1f             	shr    ecx,0x1f
c00278c3:	09 ca                	or     edx,ecx
c00278c5:	01 db                	add    ebx,ebx
c00278c7:	48                   	dec    eax
c00278c8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00278cd:	0f 8f 83 00 00 00    	jg     c0027956 <__divdf3+0x322>
c00278d3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00278d9:	85 c0                	test   eax,eax
c00278db:	0f 8f 82 00 00 00    	jg     c0027963 <__divdf3+0x32f>
c00278e1:	83 f8 cc             	cmp    eax,0xffffffcc
c00278e4:	7c 77                	jl     c002795d <__divdf3+0x329>
c00278e6:	be 01 00 00 00       	mov    esi,0x1
c00278eb:	29 c6                	sub    esi,eax
c00278ed:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278f3:	83 fe 1f             	cmp    esi,0x1f
c00278f6:	7e 2f                	jle    c0027927 <__divdf3+0x2f3>
c00278f8:	83 fe 20             	cmp    esi,0x20
c00278fb:	75 0a                	jne    c0027907 <__divdf3+0x2d3>
c00278fd:	85 db                	test   ebx,ebx
c00278ff:	0f 95 c3             	setne  bl
c0027902:	0f b6 db             	movzx  ebx,bl
c0027905:	eb 1a                	jmp    c0027921 <__divdf3+0x2ed>
c0027907:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002790a:	89 d7                	mov    edi,edx
c002790c:	d3 e7                	shl    edi,cl
c002790e:	89 f9                	mov    ecx,edi
c0027910:	09 d9                	or     ecx,ebx
c0027912:	0f 95 c3             	setne  bl
c0027915:	0f b6 db             	movzx  ebx,bl
c0027918:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002791d:	29 c1                	sub    ecx,eax
c002791f:	d3 ea                	shr    edx,cl
c0027921:	09 d3                	or     ebx,edx
c0027923:	31 c0                	xor    eax,eax
c0027925:	eb 3a                	jmp    c0027961 <__divdf3+0x32d>
c0027927:	83 c0 1f             	add    eax,0x1f
c002792a:	89 d7                	mov    edi,edx
c002792c:	88 c1                	mov    cl,al
c002792e:	d3 e7                	shl    edi,cl
c0027930:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027933:	89 df                	mov    edi,ebx
c0027935:	89 f1                	mov    ecx,esi
c0027937:	d3 ef                	shr    edi,cl
c0027939:	89 f9                	mov    ecx,edi
c002793b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002793e:	09 cf                	or     edi,ecx
c0027940:	88 c1                	mov    cl,al
c0027942:	d3 e3                	shl    ebx,cl
c0027944:	85 db                	test   ebx,ebx
c0027946:	0f 95 c3             	setne  bl
c0027949:	0f b6 db             	movzx  ebx,bl
c002794c:	09 fb                	or     ebx,edi
c002794e:	89 f1                	mov    ecx,esi
c0027950:	d3 ea                	shr    edx,cl
c0027952:	31 c0                	xor    eax,eax
c0027954:	eb 0d                	jmp    c0027963 <__divdf3+0x32f>
c0027956:	b8 ff 07 00 00       	mov    eax,0x7ff
c002795b:	eb 02                	jmp    c002795f <__divdf3+0x32b>
c002795d:	31 c0                	xor    eax,eax
c002795f:	31 db                	xor    ebx,ebx
c0027961:	31 d2                	xor    edx,edx
c0027963:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027966:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027969:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002796f:	09 c8                	or     eax,ecx
c0027971:	c1 e0 14             	shl    eax,0x14
c0027974:	89 d1                	mov    ecx,edx
c0027976:	c1 e9 0b             	shr    ecx,0xb
c0027979:	09 c8                	or     eax,ecx
c002797b:	89 c6                	mov    esi,eax
c002797d:	89 d9                	mov    ecx,ebx
c002797f:	c1 e9 0b             	shr    ecx,0xb
c0027982:	c1 e2 15             	shl    edx,0x15
c0027985:	09 ca                	or     edx,ecx
c0027987:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002798d:	0f 95 c0             	setne  al
c0027990:	09 c1                	or     ecx,eax
c0027992:	83 e1 01             	and    ecx,0x1
c0027995:	c1 eb 0a             	shr    ebx,0xa
c0027998:	21 cb                	and    ebx,ecx
c002799a:	01 d3                	add    ebx,edx
c002799c:	89 d8                	mov    eax,ebx
c002799e:	83 d6 00             	adc    esi,0x0
c00279a1:	89 f2                	mov    edx,esi
c00279a3:	89 c7                	mov    edi,eax
c00279a5:	89 d1                	mov    ecx,edx
c00279a7:	89 f8                	mov    eax,edi
c00279a9:	89 ca                	mov    edx,ecx
c00279ab:	83 c4 2c             	add    esp,0x2c
c00279ae:	5b                   	pop    ebx
c00279af:	5e                   	pop    esi
c00279b0:	5f                   	pop    edi
c00279b1:	5d                   	pop    ebp
c00279b2:	c3                   	ret    

c00279b3 <__floatsidf>:
c00279b3:	55                   	push   ebp
c00279b4:	89 e5                	mov    ebp,esp
c00279b6:	56                   	push   esi
c00279b7:	53                   	push   ebx
c00279b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00279bb:	85 db                	test   ebx,ebx
c00279bd:	7e 15                	jle    c00279d4 <__floatsidf+0x21>
c00279bf:	0f bd cb             	bsr    ecx,ebx
c00279c2:	83 f1 1f             	xor    ecx,0x1f
c00279c5:	d3 e3                	shl    ebx,cl
c00279c7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00279cd:	b8 1e 04 00 00       	mov    eax,0x41e
c00279d2:	eb 21                	jmp    c00279f5 <__floatsidf+0x42>
c00279d4:	b8 00 00 00 00       	mov    eax,0x0
c00279d9:	ba 00 00 00 00       	mov    edx,0x0
c00279de:	74 2a                	je     c0027a0a <__floatsidf+0x57>
c00279e0:	f7 db                	neg    ebx
c00279e2:	0f bd cb             	bsr    ecx,ebx
c00279e5:	83 f1 1f             	xor    ecx,0x1f
c00279e8:	d3 e3                	shl    ebx,cl
c00279ea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00279f0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00279f5:	29 c8                	sub    eax,ecx
c00279f7:	c1 e0 14             	shl    eax,0x14
c00279fa:	89 c1                	mov    ecx,eax
c00279fc:	89 de                	mov    esi,ebx
c00279fe:	c1 ee 0b             	shr    esi,0xb
c0027a01:	09 f1                	or     ecx,esi
c0027a03:	89 ca                	mov    edx,ecx
c0027a05:	c1 e3 15             	shl    ebx,0x15
c0027a08:	89 d8                	mov    eax,ebx
c0027a0a:	5b                   	pop    ebx
c0027a0b:	5e                   	pop    esi
c0027a0c:	5d                   	pop    ebp
c0027a0d:	c3                   	ret    

c0027a0e <__floatunsidf>:
c0027a0e:	55                   	push   ebp
c0027a0f:	89 e5                	mov    ebp,esp
c0027a11:	56                   	push   esi
c0027a12:	53                   	push   ebx
c0027a13:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027a16:	85 db                	test   ebx,ebx
c0027a18:	74 2a                	je     c0027a44 <__floatunsidf+0x36>
c0027a1a:	0f bd cb             	bsr    ecx,ebx
c0027a1d:	83 f1 1f             	xor    ecx,0x1f
c0027a20:	d3 e3                	shl    ebx,cl
c0027a22:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027a28:	b8 1e 04 00 00       	mov    eax,0x41e
c0027a2d:	29 c8                	sub    eax,ecx
c0027a2f:	c1 e0 14             	shl    eax,0x14
c0027a32:	89 c1                	mov    ecx,eax
c0027a34:	89 de                	mov    esi,ebx
c0027a36:	c1 ee 0b             	shr    esi,0xb
c0027a39:	09 f1                	or     ecx,esi
c0027a3b:	89 ca                	mov    edx,ecx
c0027a3d:	c1 e3 15             	shl    ebx,0x15
c0027a40:	89 d8                	mov    eax,ebx
c0027a42:	eb 04                	jmp    c0027a48 <__floatunsidf+0x3a>
c0027a44:	31 c0                	xor    eax,eax
c0027a46:	31 d2                	xor    edx,edx
c0027a48:	5b                   	pop    ebx
c0027a49:	5e                   	pop    esi
c0027a4a:	5d                   	pop    ebp
c0027a4b:	c3                   	ret    

c0027a4c <__fixdfsi>:
c0027a4c:	55                   	push   ebp
c0027a4d:	89 e5                	mov    ebp,esp
c0027a4f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027a52:	89 d1                	mov    ecx,edx
c0027a54:	c1 e1 0b             	shl    ecx,0xb
c0027a57:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a60:	c1 e8 15             	shr    eax,0x15
c0027a63:	09 c1                	or     ecx,eax
c0027a65:	c1 fa 14             	sar    edx,0x14
c0027a68:	78 1f                	js     c0027a89 <__fixdfsi+0x3d>
c0027a6a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027a70:	31 c0                	xor    eax,eax
c0027a72:	83 fa 1e             	cmp    edx,0x1e
c0027a75:	77 40                	ja     c0027ab7 <__fixdfsi+0x6b>
c0027a77:	89 c8                	mov    eax,ecx
c0027a79:	0d 00 00 00 80       	or     eax,0x80000000
c0027a7e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027a83:	29 d1                	sub    ecx,edx
c0027a85:	d3 e8                	shr    eax,cl
c0027a87:	eb 2e                	jmp    c0027ab7 <__fixdfsi+0x6b>
c0027a89:	31 c0                	xor    eax,eax
c0027a8b:	81 c2 01 04 00 00    	add    edx,0x401
c0027a91:	78 24                	js     c0027ab7 <__fixdfsi+0x6b>
c0027a93:	83 fa 1e             	cmp    edx,0x1e
c0027a96:	7e 09                	jle    c0027aa1 <__fixdfsi+0x55>
c0027a98:	83 fa 1f             	cmp    edx,0x1f
c0027a9b:	75 18                	jne    c0027ab5 <__fixdfsi+0x69>
c0027a9d:	85 c9                	test   ecx,ecx
c0027a9f:	75 14                	jne    c0027ab5 <__fixdfsi+0x69>
c0027aa1:	89 c8                	mov    eax,ecx
c0027aa3:	0d 00 00 00 80       	or     eax,0x80000000
c0027aa8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027aad:	29 d1                	sub    ecx,edx
c0027aaf:	d3 e8                	shr    eax,cl
c0027ab1:	f7 d8                	neg    eax
c0027ab3:	eb 02                	jmp    c0027ab7 <__fixdfsi+0x6b>
c0027ab5:	31 c0                	xor    eax,eax
c0027ab7:	5d                   	pop    ebp
c0027ab8:	c3                   	ret    

c0027ab9 <__fixunsdfsi>:
c0027ab9:	55                   	push   ebp
c0027aba:	89 e5                	mov    ebp,esp
c0027abc:	53                   	push   ebx
c0027abd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027ac0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027ac3:	89 d3                	mov    ebx,edx
c0027ac5:	c1 fb 14             	sar    ebx,0x14
c0027ac8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027ace:	31 c0                	xor    eax,eax
c0027ad0:	83 fb 1f             	cmp    ebx,0x1f
c0027ad3:	77 1d                	ja     c0027af2 <__fixunsdfsi+0x39>
c0027ad5:	89 d0                	mov    eax,edx
c0027ad7:	c1 e0 0b             	shl    eax,0xb
c0027ada:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027adf:	c1 e9 15             	shr    ecx,0x15
c0027ae2:	09 c8                	or     eax,ecx
c0027ae4:	0d 00 00 00 80       	or     eax,0x80000000
c0027ae9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027aee:	29 d9                	sub    ecx,ebx
c0027af0:	d3 e8                	shr    eax,cl
c0027af2:	5b                   	pop    ebx
c0027af3:	5d                   	pop    ebp
c0027af4:	c3                   	ret    

c0027af5 <__cmpdf2>:
c0027af5:	55                   	push   ebp
c0027af6:	89 e5                	mov    ebp,esp
c0027af8:	57                   	push   edi
c0027af9:	56                   	push   esi
c0027afa:	53                   	push   ebx
c0027afb:	83 ec 0c             	sub    esp,0xc
c0027afe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027b01:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b04:	89 ca                	mov    edx,ecx
c0027b06:	c1 ea 14             	shr    edx,0x14
c0027b09:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027b0f:	89 cb                	mov    ebx,ecx
c0027b11:	c1 fb 1f             	sar    ebx,0x1f
c0027b14:	31 da                	xor    edx,ebx
c0027b16:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b19:	89 df                	mov    edi,ebx
c0027b1b:	c1 e7 0b             	shl    edi,0xb
c0027b1e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b21:	c1 e1 0b             	shl    ecx,0xb
c0027b24:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b2a:	c1 eb 15             	shr    ebx,0x15
c0027b2d:	09 d9                	or     ecx,ebx
c0027b2f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027b32:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b35:	89 ce                	mov    esi,ecx
c0027b37:	c1 ee 14             	shr    esi,0x14
c0027b3a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027b40:	89 cb                	mov    ebx,ecx
c0027b42:	c1 fb 1f             	sar    ebx,0x1f
c0027b45:	31 de                	xor    esi,ebx
c0027b47:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027b4a:	89 df                	mov    edi,ebx
c0027b4c:	c1 e7 0b             	shl    edi,0xb
c0027b4f:	c1 e1 0b             	shl    ecx,0xb
c0027b52:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b58:	c1 eb 15             	shr    ebx,0x15
c0027b5b:	09 d9                	or     ecx,ebx
c0027b5d:	89 d3                	mov    ebx,edx
c0027b5f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027b65:	43                   	inc    ebx
c0027b66:	83 fb 01             	cmp    ebx,0x1
c0027b69:	77 08                	ja     c0027b73 <__cmpdf2+0x7e>
c0027b6b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b6e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027b71:	75 68                	jne    c0027bdb <__cmpdf2+0xe6>
c0027b73:	89 f3                	mov    ebx,esi
c0027b75:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027b7b:	43                   	inc    ebx
c0027b7c:	83 fb 01             	cmp    ebx,0x1
c0027b7f:	77 06                	ja     c0027b87 <__cmpdf2+0x92>
c0027b81:	89 fb                	mov    ebx,edi
c0027b83:	09 cb                	or     ebx,ecx
c0027b85:	75 54                	jne    c0027bdb <__cmpdf2+0xe6>
c0027b87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b8a:	09 f8                	or     eax,edi
c0027b8c:	09 c8                	or     eax,ecx
c0027b8e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027b91:	75 12                	jne    c0027ba5 <__cmpdf2+0xb0>
c0027b93:	8d 42 01             	lea    eax,[edx+0x1]
c0027b96:	83 f8 01             	cmp    eax,0x1
c0027b99:	77 0a                	ja     c0027ba5 <__cmpdf2+0xb0>
c0027b9b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027b9e:	31 c0                	xor    eax,eax
c0027ba0:	83 fb 01             	cmp    ebx,0x1
c0027ba3:	76 36                	jbe    c0027bdb <__cmpdf2+0xe6>
c0027ba5:	b8 01 00 00 00       	mov    eax,0x1
c0027baa:	39 f2                	cmp    edx,esi
c0027bac:	7f 2d                	jg     c0027bdb <__cmpdf2+0xe6>
c0027bae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027bb3:	7c 26                	jl     c0027bdb <__cmpdf2+0xe6>
c0027bb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027bb8:	77 07                	ja     c0027bc1 <__cmpdf2+0xcc>
c0027bba:	72 16                	jb     c0027bd2 <__cmpdf2+0xdd>
c0027bbc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027bbf:	76 0a                	jbe    c0027bcb <__cmpdf2+0xd6>
c0027bc1:	89 d0                	mov    eax,edx
c0027bc3:	c1 f8 1f             	sar    eax,0x1f
c0027bc6:	83 c8 01             	or     eax,0x1
c0027bc9:	eb 10                	jmp    c0027bdb <__cmpdf2+0xe6>
c0027bcb:	b8 00 00 00 00       	mov    eax,0x0
c0027bd0:	73 09                	jae    c0027bdb <__cmpdf2+0xe6>
c0027bd2:	89 d0                	mov    eax,edx
c0027bd4:	c1 f8 1f             	sar    eax,0x1f
c0027bd7:	83 e0 02             	and    eax,0x2
c0027bda:	48                   	dec    eax
c0027bdb:	83 c4 0c             	add    esp,0xc
c0027bde:	5b                   	pop    ebx
c0027bdf:	5e                   	pop    esi
c0027be0:	5f                   	pop    edi
c0027be1:	5d                   	pop    ebp
c0027be2:	c3                   	ret    

c0027be3 <__eqdf2>:
c0027be3:	55                   	push   ebp
c0027be4:	89 e5                	mov    ebp,esp
c0027be6:	50                   	push   eax
c0027be7:	6a 01                	push   0x1
c0027be9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027bec:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027bef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027bf5:	e8 fb fe ff ff       	call   c0027af5 <__cmpdf2>
c0027bfa:	83 c4 18             	add    esp,0x18
c0027bfd:	c9                   	leave  
c0027bfe:	c3                   	ret    

c0027bff <__nedf2>:
c0027bff:	eb e2                	jmp    c0027be3 <__eqdf2>

c0027c01 <__gtdf2>:
c0027c01:	55                   	push   ebp
c0027c02:	89 e5                	mov    ebp,esp
c0027c04:	50                   	push   eax
c0027c05:	6a ff                	push   0xffffffff
c0027c07:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c0a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c13:	e8 dd fe ff ff       	call   c0027af5 <__cmpdf2>
c0027c18:	83 c4 18             	add    esp,0x18
c0027c1b:	c9                   	leave  
c0027c1c:	c3                   	ret    

c0027c1d <__gedf2>:
c0027c1d:	eb e2                	jmp    c0027c01 <__gtdf2>

c0027c1f <__ltdf2>:
c0027c1f:	eb c2                	jmp    c0027be3 <__eqdf2>

c0027c21 <__ledf2>:
c0027c21:	eb c0                	jmp    c0027be3 <__eqdf2>

c0027c23 <__truncdfsf2>:
c0027c23:	55                   	push   ebp
c0027c24:	89 e5                	mov    ebp,esp
c0027c26:	57                   	push   edi
c0027c27:	56                   	push   esi
c0027c28:	53                   	push   ebx
c0027c29:	83 ec 0c             	sub    esp,0xc
c0027c2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027c2f:	89 d1                	mov    ecx,edx
c0027c31:	c1 f9 14             	sar    ecx,0x14
c0027c34:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027c37:	89 df                	mov    edi,ebx
c0027c39:	c1 e7 0b             	shl    edi,0xb
c0027c3c:	89 d0                	mov    eax,edx
c0027c3e:	c1 e0 0b             	shl    eax,0xb
c0027c41:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c46:	c1 eb 15             	shr    ebx,0x15
c0027c49:	09 d8                	or     eax,ebx
c0027c4b:	89 cb                	mov    ebx,ecx
c0027c4d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c53:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027c59:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027c5f:	0f 86 9e 00 00 00    	jbe    c0027d03 <__truncdfsf2+0xe0>
c0027c65:	85 db                	test   ebx,ebx
c0027c67:	75 0a                	jne    c0027c73 <__truncdfsf2+0x50>
c0027c69:	c1 fa 17             	sar    edx,0x17
c0027c6c:	30 d2                	xor    dl,dl
c0027c6e:	e9 84 00 00 00       	jmp    c0027cf7 <__truncdfsf2+0xd4>
c0027c73:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027c79:	83 fe 83             	cmp    esi,0xffffff83
c0027c7c:	7d 4b                	jge    c0027cc9 <__truncdfsf2+0xa6>
c0027c7e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027c83:	29 f1                	sub    ecx,esi
c0027c85:	83 f9 1f             	cmp    ecx,0x1f
c0027c88:	7f 6b                	jg     c0027cf5 <__truncdfsf2+0xd2>
c0027c8a:	0d 00 00 00 80       	or     eax,0x80000000
c0027c8f:	89 c3                	mov    ebx,eax
c0027c91:	d3 eb                	shr    ebx,cl
c0027c93:	be 01 00 00 00       	mov    esi,0x1
c0027c98:	d3 e6                	shl    esi,cl
c0027c9a:	4e                   	dec    esi
c0027c9b:	21 f0                	and    eax,esi
c0027c9d:	09 f8                	or     eax,edi
c0027c9f:	0f 95 c0             	setne  al
c0027ca2:	0f b6 c0             	movzx  eax,al
c0027ca5:	09 c3                	or     ebx,eax
c0027ca7:	89 d9                	mov    ecx,ebx
c0027ca9:	c1 e9 08             	shr    ecx,0x8
c0027cac:	f6 c3 7f             	test   bl,0x7f
c0027caf:	0f 95 c0             	setne  al
c0027cb2:	09 c8                	or     eax,ecx
c0027cb4:	83 e0 01             	and    eax,0x1
c0027cb7:	c1 eb 07             	shr    ebx,0x7
c0027cba:	21 c3                	and    ebx,eax
c0027cbc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027cc2:	09 d1                	or     ecx,edx
c0027cc4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027cc7:	eb 76                	jmp    c0027d3f <__truncdfsf2+0x11c>
c0027cc9:	83 c6 80             	add    esi,0xffffff80
c0027ccc:	7e 1d                	jle    c0027ceb <__truncdfsf2+0xc8>
c0027cce:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027cd4:	75 0b                	jne    c0027ce1 <__truncdfsf2+0xbe>
c0027cd6:	09 f8                	or     eax,edi
c0027cd8:	74 09                	je     c0027ce3 <__truncdfsf2+0xc0>
c0027cda:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0027cdf:	eb 02                	jmp    c0027ce3 <__truncdfsf2+0xc0>
c0027ce1:	31 c0                	xor    eax,eax
c0027ce3:	c1 fa 17             	sar    edx,0x17
c0027ce6:	80 ca ff             	or     dl,0xff
c0027ce9:	eb 0e                	jmp    c0027cf9 <__truncdfsf2+0xd6>
c0027ceb:	c1 fa 1f             	sar    edx,0x1f
c0027cee:	c1 e2 08             	shl    edx,0x8
c0027cf1:	09 ca                	or     edx,ecx
c0027cf3:	eb 04                	jmp    c0027cf9 <__truncdfsf2+0xd6>
c0027cf5:	31 d2                	xor    edx,edx
c0027cf7:	31 c0                	xor    eax,eax
c0027cf9:	c1 e2 17             	shl    edx,0x17
c0027cfc:	c1 e8 08             	shr    eax,0x8
c0027cff:	09 d0                	or     eax,edx
c0027d01:	eb 3c                	jmp    c0027d3f <__truncdfsf2+0x11c>
c0027d03:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027d09:	89 ca                	mov    edx,ecx
c0027d0b:	c1 fa 0b             	sar    edx,0xb
c0027d0e:	c1 e2 08             	shl    edx,0x8
c0027d11:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d14:	31 db                	xor    ebx,ebx
c0027d16:	85 ff                	test   edi,edi
c0027d18:	0f 95 c3             	setne  bl
c0027d1b:	09 d8                	or     eax,ebx
c0027d1d:	89 c3                	mov    ebx,eax
c0027d1f:	c1 eb 08             	shr    ebx,0x8
c0027d22:	a8 7f                	test   al,0x7f
c0027d24:	0f 95 c2             	setne  dl
c0027d27:	89 d6                	mov    esi,edx
c0027d29:	09 de                	or     esi,ebx
c0027d2b:	83 e6 01             	and    esi,0x1
c0027d2e:	c1 e8 07             	shr    eax,0x7
c0027d31:	21 f0                	and    eax,esi
c0027d33:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d36:	09 ca                	or     edx,ecx
c0027d38:	c1 e2 17             	shl    edx,0x17
c0027d3b:	09 da                	or     edx,ebx
c0027d3d:	01 d0                	add    eax,edx
c0027d3f:	83 c4 0c             	add    esp,0xc
c0027d42:	5b                   	pop    ebx
c0027d43:	5e                   	pop    esi
c0027d44:	5f                   	pop    edi
c0027d45:	5d                   	pop    ebp
c0027d46:	c3                   	ret    

c0027d47 <__extendsfdf2>:
c0027d47:	55                   	push   ebp
c0027d48:	89 e5                	mov    ebp,esp
c0027d4a:	57                   	push   edi
c0027d4b:	56                   	push   esi
c0027d4c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d4f:	89 d1                	mov    ecx,edx
c0027d51:	c1 f9 17             	sar    ecx,0x17
c0027d54:	c1 e2 08             	shl    edx,0x8
c0027d57:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027d5d:	89 c8                	mov    eax,ecx
c0027d5f:	80 e4 f8             	and    ah,0xf8
c0027d62:	8d 71 01             	lea    esi,[ecx+0x1]
c0027d65:	81 e6 fe 00 00 00    	and    esi,0xfe
c0027d6b:	75 27                	jne    c0027d94 <__extendsfdf2+0x4d>
c0027d6d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027d73:	75 18                	jne    c0027d8d <__extendsfdf2+0x46>
c0027d75:	85 d2                	test   edx,edx
c0027d77:	74 20                	je     c0027d99 <__extendsfdf2+0x52>
c0027d79:	41                   	inc    ecx
c0027d7a:	01 d2                	add    edx,edx
c0027d7c:	79 fb                	jns    c0027d79 <__extendsfdf2+0x32>
c0027d7e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d84:	29 c8                	sub    eax,ecx
c0027d86:	05 81 03 00 00       	add    eax,0x381
c0027d8b:	eb 0c                	jmp    c0027d99 <__extendsfdf2+0x52>
c0027d8d:	05 00 07 00 00       	add    eax,0x700
c0027d92:	eb 05                	jmp    c0027d99 <__extendsfdf2+0x52>
c0027d94:	05 80 03 00 00       	add    eax,0x380
c0027d99:	c1 e0 14             	shl    eax,0x14
c0027d9c:	89 c1                	mov    ecx,eax
c0027d9e:	89 d0                	mov    eax,edx
c0027da0:	c1 e8 0b             	shr    eax,0xb
c0027da3:	09 c1                	or     ecx,eax
c0027da5:	c1 e2 15             	shl    edx,0x15
c0027da8:	89 d0                	mov    eax,edx
c0027daa:	89 ca                	mov    edx,ecx
c0027dac:	5e                   	pop    esi
c0027dad:	5f                   	pop    edi
c0027dae:	5d                   	pop    ebp
c0027daf:	c3                   	ret    

c0027db0 <fabs>:
c0027db0:	83 ec 0c             	sub    esp,0xc
c0027db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0027dba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027dbe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027dc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027dc7:	dd 04 24             	fld    QWORD PTR [esp]
c0027dca:	83 c4 0c             	add    esp,0xc
c0027dcd:	c3                   	ret    
c0027dce:	66 90                	xchg   ax,ax

c0027dd0 <lrint>:
c0027dd0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027dd4:	83 ec 04             	sub    esp,0x4
c0027dd7:	db 1c 24             	fistp  DWORD PTR [esp]
c0027dda:	58                   	pop    eax
c0027ddb:	c3                   	ret    

c0027ddc <lrintf>:
c0027ddc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027de0:	83 ec 04             	sub    esp,0x4
c0027de3:	db 1c 24             	fistp  DWORD PTR [esp]
c0027de6:	58                   	pop    eax
c0027de7:	c3                   	ret    

Disassembly of section .init:

c0027de8 <_init>:
c0027de8:	55                   	push   ebp
c0027de9:	89 e5                	mov    ebp,esp
c0027deb:	e8 28 83 fd ff       	call   c0000118 <frame_dummy>
c0027df0:	e8 63 e0 ff ff       	call   c0025e58 <__do_global_ctors_aux>
c0027df5:	5d                   	pop    ebp
c0027df6:	c3                   	ret    

Disassembly of section .fini:

c0027df7 <_fini>:
c0027df7:	55                   	push   ebp
c0027df8:	89 e5                	mov    ebp,esp
c0027dfa:	e8 a9 82 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0027dff:	5d                   	pop    ebp
c0027e00:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027e02 <Computer::~Computer()>:
c0027e02:	83 ec 0c             	sub    esp,0xc
c0027e05:	ba 48 99 02 c0       	mov    edx,0xc0029948
c0027e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e0e:	89 10                	mov    DWORD PTR [eax],edx
c0027e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e14:	83 ec 0c             	sub    esp,0xc
c0027e17:	50                   	push   eax
c0027e18:	e8 cd bd fe ff       	call   c0013bea <Device::~Device()>
c0027e1d:	83 c4 10             	add    esp,0x10
c0027e20:	90                   	nop
c0027e21:	83 c4 0c             	add    esp,0xc
c0027e24:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027e26 <Computer::~Computer()>:
c0027e26:	83 ec 0c             	sub    esp,0xc
c0027e29:	83 ec 0c             	sub    esp,0xc
c0027e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e30:	e8 cd ff ff ff       	call   c0027e02 <Computer::~Computer()>
c0027e35:	83 c4 10             	add    esp,0x10
c0027e38:	83 ec 08             	sub    esp,0x8
c0027e3b:	68 ec 01 00 00       	push   0x1ec
c0027e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e44:	e8 c8 a9 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0027e49:	83 c4 10             	add    esp,0x10
c0027e4c:	83 c4 0c             	add    esp,0xc
c0027e4f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027e50 <idleCommon()>:
c0027e50:	83 ec 0c             	sub    esp,0xc
c0027e53:	e8 68 56 ff ff       	call   c001d4c0 <lockScheduler()>
c0027e58:	e8 9f 59 ff ff       	call   c001d7fc <schedule()>
c0027e5d:	83 c4 0c             	add    esp,0xc
c0027e60:	e9 5d 56 ff ff       	jmp    c001d4c2 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027e66 <LinkedList<UnixFile>::~LinkedList()>:
c0027e66:	90                   	nop
c0027e67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027e68 <LinkedList<UnixFile>::LinkedList()>:
c0027e68:	83 ec 0c             	sub    esp,0xc
c0027e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e84:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ea4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027eab:	83 ec 0c             	sub    esp,0xc
c0027eae:	68 06 9c 02 c0       	push   0xc0029c06
c0027eb3:	e8 39 aa fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0027eb8:	83 c4 10             	add    esp,0x10
c0027ebb:	90                   	nop
c0027ebc:	83 c4 0c             	add    esp,0xc
c0027ebf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027ec0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027ec0:	83 ec 0c             	sub    esp,0xc
c0027ec3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027ec8:	75 10                	jne    c0027eda <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0027eca:	83 ec 0c             	sub    esp,0xc
c0027ecd:	68 20 9c 02 c0       	push   0xc0029c20
c0027ed2:	e8 8e 1f ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0027ed7:	83 c4 10             	add    esp,0x10
c0027eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ede:	8b 00                	mov    eax,DWORD PTR [eax]
c0027ee0:	85 c0                	test   eax,eax
c0027ee2:	74 34                	je     c0027f18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027eeb:	85 c0                	test   eax,eax
c0027eed:	74 29                	je     c0027f18 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ef3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027ef6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027efa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027f16:	eb 65                	jmp    c0027f7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f1e:	85 c0                	test   eax,eax
c0027f20:	75 4b                	jne    c0027f6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f29:	85 c0                	test   eax,eax
c0027f2b:	75 40                	jne    c0027f6d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f35:	89 10                	mov    DWORD PTR [eax],edx
c0027f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027f3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027f49:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f57:	85 c0                	test   eax,eax
c0027f59:	74 22                	je     c0027f7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f5b:	83 ec 0c             	sub    esp,0xc
c0027f5e:	68 42 9c 02 c0       	push   0xc0029c42
c0027f63:	e8 fd 1e ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0027f68:	83 c4 10             	add    esp,0x10
c0027f6b:	eb 10                	jmp    c0027f7d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027f6d:	83 ec 0c             	sub    esp,0xc
c0027f70:	68 4c 9c 02 c0       	push   0xc0029c4c
c0027f75:	e8 eb 1e ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0027f7a:	83 c4 10             	add    esp,0x10
c0027f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027f84:	8d 50 01             	lea    edx,[eax+0x1]
c0027f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027f8e:	90                   	nop
c0027f8f:	83 c4 0c             	add    esp,0xc
c0027f92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027f94 <LinkedList<UnixFile>::getFirstElement()>:
c0027f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027f98:	8b 00                	mov    eax,DWORD PTR [eax]
c0027f9a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0027f9c <LinkedList<UnixFile>::removeFirst()>:
c0027f9c:	83 ec 0c             	sub    esp,0xc
c0027f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fa5:	85 c0                	test   eax,eax
c0027fa7:	75 12                	jne    c0027fbb <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027fa9:	83 ec 0c             	sub    esp,0xc
c0027fac:	68 58 9c 02 c0       	push   0xc0029c58
c0027fb1:	e8 af 1e ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0027fb6:	83 c4 10             	add    esp,0x10
c0027fb9:	eb 7e                	jmp    c0028039 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0027fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027fc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027fc5:	85 c0                	test   eax,eax
c0027fc7:	74 10                	je     c0027fd9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027fc9:	83 ec 0c             	sub    esp,0xc
c0027fcc:	68 a3 9c 02 c0       	push   0xc0029ca3
c0027fd1:	e8 8f 1e ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0027fd6:	83 c4 10             	add    esp,0x10
c0027fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0027fdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027fe2:	85 c0                	test   eax,eax
c0027fe4:	75 33                	jne    c0028019 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ff4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028002:	83 f8 01             	cmp    eax,0x1
c0028005:	74 21                	je     c0028028 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028007:	83 ec 0c             	sub    esp,0xc
c002800a:	68 7c 9c 02 c0       	push   0xc0029c7c
c002800f:	e8 51 1e ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0028014:	83 c4 10             	add    esp,0x10
c0028017:	eb 0f                	jmp    c0028028 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002801d:	8b 00                	mov    eax,DWORD PTR [eax]
c002801f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028026:	89 10                	mov    DWORD PTR [eax],edx
c0028028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002802c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002802f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028036:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028039:	83 c4 0c             	add    esp,0xc
c002803c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002803e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002803e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028042:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028045:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028046 <DriverlessDevice::~DriverlessDevice()>:
c0028046:	ba 84 a3 02 c0       	mov    edx,0xc002a384
c002804b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002804f:	89 10                	mov    DWORD PTR [eax],edx
c0028051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028055:	50                   	push   eax
c0028056:	e8 8f bb fe ff       	call   c0013bea <Device::~Device()>
c002805b:	83 c4 04             	add    esp,0x4
c002805e:	90                   	nop
c002805f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028060 <DriverlessDevice::~DriverlessDevice()>:
c0028060:	83 ec 0c             	sub    esp,0xc
c0028063:	83 ec 0c             	sub    esp,0xc
c0028066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002806a:	e8 d7 ff ff ff       	call   c0028046 <DriverlessDevice::~DriverlessDevice()>
c002806f:	83 c4 10             	add    esp,0x10
c0028072:	83 ec 08             	sub    esp,0x8
c0028075:	68 58 01 00 00       	push   0x158
c002807a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002807e:	e8 8e a7 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0028083:	83 c4 10             	add    esp,0x10
c0028086:	83 c4 0c             	add    esp,0xc
c0028089:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002808a <LinkedList<Device>::addElement(Device*)>:
c002808a:	83 ec 0c             	sub    esp,0xc
c002808d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028092:	75 10                	jne    c00280a4 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028094:	83 ec 0c             	sub    esp,0xc
c0028097:	68 20 9c 02 c0       	push   0xc0029c20
c002809c:	e8 c4 1d ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c00280a1:	83 c4 10             	add    esp,0x10
c00280a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00280aa:	85 c0                	test   eax,eax
c00280ac:	74 3a                	je     c00280e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00280ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280b5:	85 c0                	test   eax,eax
c00280b7:	74 2f                	je     c00280e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00280b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280c4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00280ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00280d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00280d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280dc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00280e6:	eb 68                	jmp    c0028150 <LinkedList<Device>::addElement(Device*)+0xc6>
c00280e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00280ee:	85 c0                	test   eax,eax
c00280f0:	75 4e                	jne    c0028140 <LinkedList<Device>::addElement(Device*)+0xb6>
c00280f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280f9:	85 c0                	test   eax,eax
c00280fb:	75 43                	jne    c0028140 <LinkedList<Device>::addElement(Device*)+0xb6>
c00280fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028101:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028105:	89 10                	mov    DWORD PTR [eax],edx
c0028107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002810b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002810f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028119:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028127:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002812a:	85 c0                	test   eax,eax
c002812c:	74 22                	je     c0028150 <LinkedList<Device>::addElement(Device*)+0xc6>
c002812e:	83 ec 0c             	sub    esp,0xc
c0028131:	68 42 9c 02 c0       	push   0xc0029c42
c0028136:	e8 2a 1d ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c002813b:	83 c4 10             	add    esp,0x10
c002813e:	eb 10                	jmp    c0028150 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028140:	83 ec 0c             	sub    esp,0xc
c0028143:	68 4c 9c 02 c0       	push   0xc0029c4c
c0028148:	e8 18 1d ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c002814d:	83 c4 10             	add    esp,0x10
c0028150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028154:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028157:	8d 50 01             	lea    edx,[eax+0x1]
c002815a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002815e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028161:	90                   	nop
c0028162:	83 c4 0c             	add    esp,0xc
c0028165:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028166 <LinkedList<Device>::LinkedList()>:
c0028166:	83 ec 0c             	sub    esp,0xc
c0028169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002816d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028177:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002817e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028182:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002818d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028197:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002819e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00281a9:	83 ec 0c             	sub    esp,0xc
c00281ac:	68 06 9c 02 c0       	push   0xc0029c06
c00281b1:	e8 3b a7 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c00281b6:	83 c4 10             	add    esp,0x10
c00281b9:	90                   	nop
c00281ba:	83 c4 0c             	add    esp,0xc
c00281bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00281be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00281be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00281c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00281c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00281c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00281cc:	85 c0                	test   eax,eax
c00281ce:	75 0e                	jne    c00281de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00281d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00281d7:	85 c0                	test   eax,eax
c00281d9:	75 03                	jne    c00281de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00281db:	b0 01                	mov    al,0x1
c00281dd:	c3                   	ret    
c00281de:	b0 00                	mov    al,0x0
c00281e0:	90                   	nop
c00281e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00281e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00281e2:	83 ec 0c             	sub    esp,0xc
c00281e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00281eb:	85 c0                	test   eax,eax
c00281ed:	75 15                	jne    c0028204 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00281ef:	83 ec 0c             	sub    esp,0xc
c00281f2:	68 58 9c 02 c0       	push   0xc0029c58
c00281f7:	e8 69 1c ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c00281fc:	83 c4 10             	add    esp,0x10
c00281ff:	e9 88 00 00 00       	jmp    c002828c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028208:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002820b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002820e:	85 c0                	test   eax,eax
c0028210:	0f 95 c0             	setne  al
c0028213:	84 c0                	test   al,al
c0028215:	74 10                	je     c0028227 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028217:	83 ec 0c             	sub    esp,0xc
c002821a:	68 a3 9c 02 c0       	push   0xc0029ca3
c002821f:	e8 41 1c ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0028224:	83 c4 10             	add    esp,0x10
c0028227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002822b:	8b 00                	mov    eax,DWORD PTR [eax]
c002822d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028230:	85 c0                	test   eax,eax
c0028232:	0f 94 c0             	sete   al
c0028235:	84 c0                	test   al,al
c0028237:	74 33                	je     c002826c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002823d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028247:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002824e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028252:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028255:	83 f8 01             	cmp    eax,0x1
c0028258:	74 21                	je     c002827b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002825a:	83 ec 0c             	sub    esp,0xc
c002825d:	68 7c 9c 02 c0       	push   0xc0029c7c
c0028262:	e8 fe 1b ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0028267:	83 c4 10             	add    esp,0x10
c002826a:	eb 0f                	jmp    c002827b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002826c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028270:	8b 00                	mov    eax,DWORD PTR [eax]
c0028272:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028279:	89 10                	mov    DWORD PTR [eax],edx
c002827b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002827f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028282:	8d 50 ff             	lea    edx,[eax-0x1]
c0028285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028289:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002828c:	83 c4 0c             	add    esp,0xc
c002828f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028290 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028290:	83 ec 0c             	sub    esp,0xc
c0028293:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028298:	75 10                	jne    c00282aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002829a:	83 ec 0c             	sub    esp,0xc
c002829d:	68 20 9c 02 c0       	push   0xc0029c20
c00282a2:	e8 be 1b ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c00282a7:	83 c4 10             	add    esp,0x10
c00282aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00282b0:	85 c0                	test   eax,eax
c00282b2:	74 34                	je     c00282e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00282b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282bb:	85 c0                	test   eax,eax
c00282bd:	74 29                	je     c00282e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00282bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00282cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282df:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00282e6:	eb 65                	jmp    c002834d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00282e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00282ee:	85 c0                	test   eax,eax
c00282f0:	75 4b                	jne    c002833d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00282f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282f9:	85 c0                	test   eax,eax
c00282fb:	75 40                	jne    c002833d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00282fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028301:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028305:	89 10                	mov    DWORD PTR [eax],edx
c0028307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002830b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002830f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028319:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028324:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028327:	85 c0                	test   eax,eax
c0028329:	74 22                	je     c002834d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002832b:	83 ec 0c             	sub    esp,0xc
c002832e:	68 42 9c 02 c0       	push   0xc0029c42
c0028333:	e8 2d 1b ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c0028338:	83 c4 10             	add    esp,0x10
c002833b:	eb 10                	jmp    c002834d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002833d:	83 ec 0c             	sub    esp,0xc
c0028340:	68 4c 9c 02 c0       	push   0xc0029c4c
c0028345:	e8 1b 1b ff ff       	call   c0019e65 <Krnl::panic(char const*)>
c002834a:	83 c4 10             	add    esp,0x10
c002834d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028351:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028354:	8d 50 01             	lea    edx,[eax+0x1]
c0028357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002835b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002835e:	90                   	nop
c002835f:	83 c4 0c             	add    esp,0xc
c0028362:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028364 <ACPI::~ACPI()>:
c0028364:	83 ec 0c             	sub    esp,0xc
c0028367:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c002836c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028370:	89 10                	mov    DWORD PTR [eax],edx
c0028372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028376:	83 ec 0c             	sub    esp,0xc
c0028379:	50                   	push   eax
c002837a:	e8 6b b8 fe ff       	call   c0013bea <Device::~Device()>
c002837f:	83 c4 10             	add    esp,0x10
c0028382:	90                   	nop
c0028383:	83 c4 0c             	add    esp,0xc
c0028386:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028388 <ACPI::~ACPI()>:
c0028388:	83 ec 0c             	sub    esp,0xc
c002838b:	83 ec 0c             	sub    esp,0xc
c002838e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028392:	e8 cd ff ff ff       	call   c0028364 <ACPI::~ACPI()>
c0028397:	83 c4 10             	add    esp,0x10
c002839a:	83 ec 08             	sub    esp,0x8
c002839d:	68 68 12 00 00       	push   0x1268
c00283a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283a6:	e8 66 a4 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c00283ab:	83 c4 10             	add    esp,0x10
c00283ae:	83 c4 0c             	add    esp,0xc
c00283b1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00283b2 <CPU::~CPU()>:
c00283b2:	83 ec 0c             	sub    esp,0xc
c00283b5:	ba 38 b1 02 c0       	mov    edx,0xc002b138
c00283ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283be:	89 10                	mov    DWORD PTR [eax],edx
c00283c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c4:	83 ec 0c             	sub    esp,0xc
c00283c7:	50                   	push   eax
c00283c8:	e8 1d b8 fe ff       	call   c0013bea <Device::~Device()>
c00283cd:	83 c4 10             	add    esp,0x10
c00283d0:	90                   	nop
c00283d1:	83 c4 0c             	add    esp,0xc
c00283d4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00283d6 <CPU::~CPU()>:
c00283d6:	83 ec 0c             	sub    esp,0xc
c00283d9:	83 ec 0c             	sub    esp,0xc
c00283dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283e0:	e8 cd ff ff ff       	call   c00283b2 <CPU::~CPU()>
c00283e5:	83 c4 10             	add    esp,0x10
c00283e8:	83 ec 08             	sub    esp,0x8
c00283eb:	68 98 11 00 00       	push   0x1198
c00283f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283f4:	e8 18 a4 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c00283f9:	83 c4 10             	add    esp,0x10
c00283fc:	83 c4 0c             	add    esp,0xc
c00283ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028400 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028400:	90                   	nop
c0028401:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028402 <ThreadControlBlock::ThreadControlBlock()>:
c0028402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028406:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002840d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028411:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002841c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028423:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028427:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002842e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028432:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002843a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002843e:	90                   	nop
c002843f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028440 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028440:	83 ec 0c             	sub    esp,0xc
c0028443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028447:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002844d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028451:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002845c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028467:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028471:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028483:	83 ec 0c             	sub    esp,0xc
c0028486:	68 06 9c 02 c0       	push   0xc0029c06
c002848b:	e8 61 a4 fe ff       	call   c00128f1 <Dbg::kprintf(char const*, ...)>
c0028490:	83 c4 10             	add    esp,0x10
c0028493:	90                   	nop
c0028494:	83 c4 0c             	add    esp,0xc
c0028497:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028498 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002849c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002849f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00284a0 <Vm::_FPUState::_FPUState()>:
c00284a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284a4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00284ab:	90                   	nop
c00284ac:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00284ae <PCI::~PCI()>:
c00284ae:	83 ec 0c             	sub    esp,0xc
c00284b1:	ba 9c c0 02 c0       	mov    edx,0xc002c09c
c00284b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ba:	89 10                	mov    DWORD PTR [eax],edx
c00284bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c0:	83 ec 0c             	sub    esp,0xc
c00284c3:	50                   	push   eax
c00284c4:	e8 f9 b0 fe ff       	call   c00135c2 <Bus::~Bus()>
c00284c9:	83 c4 10             	add    esp,0x10
c00284cc:	90                   	nop
c00284cd:	83 c4 0c             	add    esp,0xc
c00284d0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00284d2 <PCI::~PCI()>:
c00284d2:	83 ec 0c             	sub    esp,0xc
c00284d5:	83 ec 0c             	sub    esp,0xc
c00284d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284dc:	e8 cd ff ff ff       	call   c00284ae <PCI::~PCI()>
c00284e1:	83 c4 10             	add    esp,0x10
c00284e4:	83 ec 08             	sub    esp,0x8
c00284e7:	68 58 01 00 00       	push   0x158
c00284ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284f0:	e8 1c a3 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c00284f5:	83 c4 10             	add    esp,0x10
c00284f8:	83 c4 0c             	add    esp,0xc
c00284fb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00284fc <IDE::~IDE()>:
c00284fc:	83 ec 0c             	sub    esp,0xc
c00284ff:	ba 00 c3 02 c0       	mov    edx,0xc002c300
c0028504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028508:	89 10                	mov    DWORD PTR [eax],edx
c002850a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850e:	83 ec 0c             	sub    esp,0xc
c0028511:	50                   	push   eax
c0028512:	e8 c3 bb fe ff       	call   c00140da <HardDiskController::~HardDiskController()>
c0028517:	83 c4 10             	add    esp,0x10
c002851a:	90                   	nop
c002851b:	83 c4 0c             	add    esp,0xc
c002851e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028520 <IDE::~IDE()>:
c0028520:	83 ec 0c             	sub    esp,0xc
c0028523:	83 ec 0c             	sub    esp,0xc
c0028526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002852a:	e8 cd ff ff ff       	call   c00284fc <IDE::~IDE()>
c002852f:	83 c4 10             	add    esp,0x10
c0028532:	83 ec 08             	sub    esp,0x8
c0028535:	68 70 02 00 00       	push   0x270
c002853a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002853e:	e8 ce a2 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0028543:	83 c4 10             	add    esp,0x10
c0028546:	83 c4 0c             	add    esp,0xc
c0028549:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002854a <SATABus::~SATABus()>:
c002854a:	83 ec 0c             	sub    esp,0xc
c002854d:	ba e0 c3 02 c0       	mov    edx,0xc002c3e0
c0028552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028556:	89 10                	mov    DWORD PTR [eax],edx
c0028558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002855c:	83 ec 0c             	sub    esp,0xc
c002855f:	50                   	push   eax
c0028560:	e8 75 bb fe ff       	call   c00140da <HardDiskController::~HardDiskController()>
c0028565:	83 c4 10             	add    esp,0x10
c0028568:	90                   	nop
c0028569:	83 c4 0c             	add    esp,0xc
c002856c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002856e <SATABus::~SATABus()>:
c002856e:	83 ec 0c             	sub    esp,0xc
c0028571:	83 ec 0c             	sub    esp,0xc
c0028574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028578:	e8 cd ff ff ff       	call   c002854a <SATABus::~SATABus()>
c002857d:	83 c4 10             	add    esp,0x10
c0028580:	83 ec 08             	sub    esp,0x8
c0028583:	68 64 01 00 00       	push   0x164
c0028588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002858c:	e8 80 a2 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0028591:	83 c4 10             	add    esp,0x10
c0028594:	83 c4 0c             	add    esp,0xc
c0028597:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028598 <ATA::~ATA()>:
c0028598:	83 ec 0c             	sub    esp,0xc
c002859b:	ba e8 c4 02 c0       	mov    edx,0xc002c4e8
c00285a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a4:	89 10                	mov    DWORD PTR [eax],edx
c00285a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285aa:	83 ec 0c             	sub    esp,0xc
c00285ad:	50                   	push   eax
c00285ae:	e8 19 bc fe ff       	call   c00141cc <PhysicalDisk::~PhysicalDisk()>
c00285b3:	83 c4 10             	add    esp,0x10
c00285b6:	90                   	nop
c00285b7:	83 c4 0c             	add    esp,0xc
c00285ba:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00285bc <ATA::~ATA()>:
c00285bc:	83 ec 0c             	sub    esp,0xc
c00285bf:	83 ec 0c             	sub    esp,0xc
c00285c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285c6:	e8 cd ff ff ff       	call   c0028598 <ATA::~ATA()>
c00285cb:	83 c4 10             	add    esp,0x10
c00285ce:	83 ec 08             	sub    esp,0x8
c00285d1:	68 7c 01 00 00       	push   0x17c
c00285d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00285da:	e8 32 a2 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c00285df:	83 c4 10             	add    esp,0x10
c00285e2:	83 c4 0c             	add    esp,0xc
c00285e5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00285e6 <ATAPI::~ATAPI()>:
c00285e6:	83 ec 0c             	sub    esp,0xc
c00285e9:	ba 20 c5 02 c0       	mov    edx,0xc002c520
c00285ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f2:	89 10                	mov    DWORD PTR [eax],edx
c00285f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f8:	83 ec 0c             	sub    esp,0xc
c00285fb:	50                   	push   eax
c00285fc:	e8 cb bb fe ff       	call   c00141cc <PhysicalDisk::~PhysicalDisk()>
c0028601:	83 c4 10             	add    esp,0x10
c0028604:	90                   	nop
c0028605:	83 c4 0c             	add    esp,0xc
c0028608:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002860a <ATAPI::~ATAPI()>:
c002860a:	83 ec 0c             	sub    esp,0xc
c002860d:	83 ec 0c             	sub    esp,0xc
c0028610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028614:	e8 cd ff ff ff       	call   c00285e6 <ATAPI::~ATAPI()>
c0028619:	83 c4 10             	add    esp,0x10
c002861c:	83 ec 08             	sub    esp,0x8
c002861f:	68 80 01 00 00       	push   0x180
c0028624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028628:	e8 e4 a1 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c002862d:	83 c4 10             	add    esp,0x10
c0028630:	83 c4 0c             	add    esp,0xc
c0028633:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028634 <SATA::~SATA()>:
c0028634:	83 ec 0c             	sub    esp,0xc
c0028637:	ba 9c c5 02 c0       	mov    edx,0xc002c59c
c002863c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028640:	89 10                	mov    DWORD PTR [eax],edx
c0028642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028646:	83 ec 0c             	sub    esp,0xc
c0028649:	50                   	push   eax
c002864a:	e8 7d bb fe ff       	call   c00141cc <PhysicalDisk::~PhysicalDisk()>
c002864f:	83 c4 10             	add    esp,0x10
c0028652:	90                   	nop
c0028653:	83 c4 0c             	add    esp,0xc
c0028656:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028658 <SATA::~SATA()>:
c0028658:	83 ec 0c             	sub    esp,0xc
c002865b:	83 ec 0c             	sub    esp,0xc
c002865e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028662:	e8 cd ff ff ff       	call   c0028634 <SATA::~SATA()>
c0028667:	83 c4 10             	add    esp,0x10
c002866a:	83 ec 08             	sub    esp,0x8
c002866d:	68 7c 01 00 00       	push   0x17c
c0028672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028676:	e8 96 a1 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c002867b:	83 c4 10             	add    esp,0x10
c002867e:	83 c4 0c             	add    esp,0xc
c0028681:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028682 <SATAPI::~SATAPI()>:
c0028682:	83 ec 0c             	sub    esp,0xc
c0028685:	ba 78 c6 02 c0       	mov    edx,0xc002c678
c002868a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868e:	89 10                	mov    DWORD PTR [eax],edx
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	83 ec 0c             	sub    esp,0xc
c0028697:	50                   	push   eax
c0028698:	e8 2f bb fe ff       	call   c00141cc <PhysicalDisk::~PhysicalDisk()>
c002869d:	83 c4 10             	add    esp,0x10
c00286a0:	90                   	nop
c00286a1:	83 c4 0c             	add    esp,0xc
c00286a4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00286a6 <SATAPI::~SATAPI()>:
c00286a6:	83 ec 0c             	sub    esp,0xc
c00286a9:	83 ec 0c             	sub    esp,0xc
c00286ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b0:	e8 cd ff ff ff       	call   c0028682 <SATAPI::~SATAPI()>
c00286b5:	83 c4 10             	add    esp,0x10
c00286b8:	83 ec 08             	sub    esp,0x8
c00286bb:	68 80 01 00 00       	push   0x180
c00286c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286c4:	e8 48 a1 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c00286c9:	83 c4 10             	add    esp,0x10
c00286cc:	83 c4 0c             	add    esp,0xc
c00286cf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00286d0 <AVX::~AVX()>:
c00286d0:	83 ec 0c             	sub    esp,0xc
c00286d3:	ba b8 c6 02 c0       	mov    edx,0xc002c6b8
c00286d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dc:	89 10                	mov    DWORD PTR [eax],edx
c00286de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e2:	83 ec 0c             	sub    esp,0xc
c00286e5:	50                   	push   eax
c00286e6:	e8 65 bb fe ff       	call   c0014250 <FPU::~FPU()>
c00286eb:	83 c4 10             	add    esp,0x10
c00286ee:	90                   	nop
c00286ef:	83 c4 0c             	add    esp,0xc
c00286f2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00286f4 <AVX::~AVX()>:
c00286f4:	83 ec 0c             	sub    esp,0xc
c00286f7:	83 ec 0c             	sub    esp,0xc
c00286fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286fe:	e8 cd ff ff ff       	call   c00286d0 <AVX::~AVX()>
c0028703:	83 c4 10             	add    esp,0x10
c0028706:	83 ec 08             	sub    esp,0x8
c0028709:	68 58 01 00 00       	push   0x158
c002870e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028712:	e8 fa a0 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0028717:	83 c4 10             	add    esp,0x10
c002871a:	83 c4 0c             	add    esp,0xc
c002871d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002871e <MMX::~MMX()>:
c002871e:	83 ec 0c             	sub    esp,0xc
c0028721:	ba f8 c6 02 c0       	mov    edx,0xc002c6f8
c0028726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872a:	89 10                	mov    DWORD PTR [eax],edx
c002872c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	50                   	push   eax
c0028734:	e8 17 bb fe ff       	call   c0014250 <FPU::~FPU()>
c0028739:	83 c4 10             	add    esp,0x10
c002873c:	90                   	nop
c002873d:	83 c4 0c             	add    esp,0xc
c0028740:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028742 <MMX::~MMX()>:
c0028742:	83 ec 0c             	sub    esp,0xc
c0028745:	83 ec 0c             	sub    esp,0xc
c0028748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002874c:	e8 cd ff ff ff       	call   c002871e <MMX::~MMX()>
c0028751:	83 c4 10             	add    esp,0x10
c0028754:	83 ec 08             	sub    esp,0x8
c0028757:	68 58 01 00 00       	push   0x158
c002875c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028760:	e8 ac a0 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0028765:	83 c4 10             	add    esp,0x10
c0028768:	83 c4 0c             	add    esp,0xc
c002876b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002876c <SSE::~SSE()>:
c002876c:	83 ec 0c             	sub    esp,0xc
c002876f:	ba 38 c7 02 c0       	mov    edx,0xc002c738
c0028774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028778:	89 10                	mov    DWORD PTR [eax],edx
c002877a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877e:	83 ec 0c             	sub    esp,0xc
c0028781:	50                   	push   eax
c0028782:	e8 c9 ba fe ff       	call   c0014250 <FPU::~FPU()>
c0028787:	83 c4 10             	add    esp,0x10
c002878a:	90                   	nop
c002878b:	83 c4 0c             	add    esp,0xc
c002878e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028790 <SSE::~SSE()>:
c0028790:	83 ec 0c             	sub    esp,0xc
c0028793:	83 ec 0c             	sub    esp,0xc
c0028796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002879a:	e8 cd ff ff ff       	call   c002876c <SSE::~SSE()>
c002879f:	83 c4 10             	add    esp,0x10
c00287a2:	83 ec 08             	sub    esp,0x8
c00287a5:	68 58 01 00 00       	push   0x158
c00287aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ae:	e8 5e a0 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c00287b3:	83 c4 10             	add    esp,0x10
c00287b6:	83 c4 0c             	add    esp,0xc
c00287b9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00287ba <x87::~x87()>:
c00287ba:	83 ec 0c             	sub    esp,0xc
c00287bd:	ba 78 c7 02 c0       	mov    edx,0xc002c778
c00287c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c6:	89 10                	mov    DWORD PTR [eax],edx
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	83 ec 0c             	sub    esp,0xc
c00287cf:	50                   	push   eax
c00287d0:	e8 7b ba fe ff       	call   c0014250 <FPU::~FPU()>
c00287d5:	83 c4 10             	add    esp,0x10
c00287d8:	90                   	nop
c00287d9:	83 c4 0c             	add    esp,0xc
c00287dc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00287de <x87::~x87()>:
c00287de:	83 ec 0c             	sub    esp,0xc
c00287e1:	83 ec 0c             	sub    esp,0xc
c00287e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287e8:	e8 cd ff ff ff       	call   c00287ba <x87::~x87()>
c00287ed:	83 c4 10             	add    esp,0x10
c00287f0:	83 ec 08             	sub    esp,0x8
c00287f3:	68 58 01 00 00       	push   0x158
c00287f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287fc:	e8 10 a0 fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0028801:	83 c4 10             	add    esp,0x10
c0028804:	83 c4 0c             	add    esp,0xc
c0028807:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028808 <IOAPIC::~IOAPIC()>:
c0028808:	83 ec 0c             	sub    esp,0xc
c002880b:	ba d0 c8 02 c0       	mov    edx,0xc002c8d0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	89 10                	mov    DWORD PTR [eax],edx
c0028816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	50                   	push   eax
c002881e:	e8 c7 b3 fe ff       	call   c0013bea <Device::~Device()>
c0028823:	83 c4 10             	add    esp,0x10
c0028826:	90                   	nop
c0028827:	83 c4 0c             	add    esp,0xc
c002882a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002882c <IOAPIC::~IOAPIC()>:
c002882c:	83 ec 0c             	sub    esp,0xc
c002882f:	83 ec 0c             	sub    esp,0xc
c0028832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028836:	e8 cd ff ff ff       	call   c0028808 <IOAPIC::~IOAPIC()>
c002883b:	83 c4 10             	add    esp,0x10
c002883e:	83 ec 08             	sub    esp,0x8
c0028841:	68 68 01 00 00       	push   0x168
c0028846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002884a:	e8 c2 9f fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c002884f:	83 c4 10             	add    esp,0x10
c0028852:	83 c4 0c             	add    esp,0xc
c0028855:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028856 <APIC::~APIC()>:
c0028856:	83 ec 0c             	sub    esp,0xc
c0028859:	ba 88 c8 02 c0       	mov    edx,0xc002c888
c002885e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028862:	89 10                	mov    DWORD PTR [eax],edx
c0028864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028868:	83 ec 0c             	sub    esp,0xc
c002886b:	50                   	push   eax
c002886c:	e8 a9 be fe ff       	call   c001471a <InterruptController::~InterruptController()>
c0028871:	83 c4 10             	add    esp,0x10
c0028874:	90                   	nop
c0028875:	83 c4 0c             	add    esp,0xc
c0028878:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002887a <APIC::~APIC()>:
c002887a:	83 ec 0c             	sub    esp,0xc
c002887d:	83 ec 0c             	sub    esp,0xc
c0028880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028884:	e8 cd ff ff ff       	call   c0028856 <APIC::~APIC()>
c0028889:	83 c4 10             	add    esp,0x10
c002888c:	83 ec 08             	sub    esp,0x8
c002888f:	68 58 21 00 00       	push   0x2158
c0028894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028898:	e8 74 9f fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c002889d:	83 c4 10             	add    esp,0x10
c00288a0:	83 c4 0c             	add    esp,0xc
c00288a3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00288a4 <PIC::~PIC()>:
c00288a4:	83 ec 0c             	sub    esp,0xc
c00288a7:	ba 20 c9 02 c0       	mov    edx,0xc002c920
c00288ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b0:	89 10                	mov    DWORD PTR [eax],edx
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	83 ec 0c             	sub    esp,0xc
c00288b9:	50                   	push   eax
c00288ba:	e8 5b be fe ff       	call   c001471a <InterruptController::~InterruptController()>
c00288bf:	83 c4 10             	add    esp,0x10
c00288c2:	90                   	nop
c00288c3:	83 c4 0c             	add    esp,0xc
c00288c6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00288c8 <PIC::~PIC()>:
c00288c8:	83 ec 0c             	sub    esp,0xc
c00288cb:	83 ec 0c             	sub    esp,0xc
c00288ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288d2:	e8 cd ff ff ff       	call   c00288a4 <PIC::~PIC()>
c00288d7:	83 c4 10             	add    esp,0x10
c00288da:	83 ec 08             	sub    esp,0x8
c00288dd:	68 58 21 00 00       	push   0x2158
c00288e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288e6:	e8 26 9f fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c00288eb:	83 c4 10             	add    esp,0x10
c00288ee:	83 c4 0c             	add    esp,0xc
c00288f1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00288f2 <APICTimer::~APICTimer()>:
c00288f2:	83 ec 0c             	sub    esp,0xc
c00288f5:	ba 74 c9 02 c0       	mov    edx,0xc002c974
c00288fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fe:	89 10                	mov    DWORD PTR [eax],edx
c0028900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028904:	83 ec 0c             	sub    esp,0xc
c0028907:	50                   	push   eax
c0028908:	e8 05 dd fe ff       	call   c0016612 <Timer::~Timer()>
c002890d:	83 c4 10             	add    esp,0x10
c0028910:	90                   	nop
c0028911:	83 c4 0c             	add    esp,0xc
c0028914:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028916 <APICTimer::~APICTimer()>:
c0028916:	83 ec 0c             	sub    esp,0xc
c0028919:	83 ec 0c             	sub    esp,0xc
c002891c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028920:	e8 cd ff ff ff       	call   c00288f2 <APICTimer::~APICTimer()>
c0028925:	83 c4 10             	add    esp,0x10
c0028928:	83 ec 08             	sub    esp,0x8
c002892b:	68 60 01 00 00       	push   0x160
c0028930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028934:	e8 d8 9e fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0028939:	83 c4 10             	add    esp,0x10
c002893c:	83 c4 0c             	add    esp,0xc
c002893f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028940 <PIT::~PIT()>:
c0028940:	83 ec 0c             	sub    esp,0xc
c0028943:	ba c4 c9 02 c0       	mov    edx,0xc002c9c4
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	89 10                	mov    DWORD PTR [eax],edx
c002894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028952:	83 ec 0c             	sub    esp,0xc
c0028955:	50                   	push   eax
c0028956:	e8 b7 dc fe ff       	call   c0016612 <Timer::~Timer()>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	90                   	nop
c002895f:	83 c4 0c             	add    esp,0xc
c0028962:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028964 <PIT::~PIT()>:
c0028964:	83 ec 0c             	sub    esp,0xc
c0028967:	83 ec 0c             	sub    esp,0xc
c002896a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002896e:	e8 cd ff ff ff       	call   c0028940 <PIT::~PIT()>
c0028973:	83 c4 10             	add    esp,0x10
c0028976:	83 ec 08             	sub    esp,0x8
c0028979:	68 5c 01 00 00       	push   0x15c
c002897e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028982:	e8 8a 9e fe ff       	call   c0012811 <operator delete(void*, unsigned long)>
c0028987:	83 c4 10             	add    esp,0x10
c002898a:	83 c4 0c             	add    esp,0xc
c002898d:	c3                   	ret    
