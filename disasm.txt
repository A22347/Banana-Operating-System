
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 81 02 00       	call   c0028188 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 32 8d 02 c0       	mov    ebx,0xc0028d32
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 40 8d 02 c0    	cmp    ebx,0xc0028d40
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 d3 02 c0       	mov    eax,0xc002d378
c0000049:	3d 78 d3 02 c0       	cmp    eax,0xc002d378
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 d3 02 c0       	push   0xc002d378
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 d3 02 c0       	mov    eax,0xc002d378
c0000075:	2d 78 d3 02 c0       	sub    eax,0xc002d378
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 d3 02 c0       	push   0xc002d378
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d9a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 48 8d 02 c0       	mov    ebx,0xc0028d48
c00000bb:	81 eb 44 8d 02 c0    	sub    ebx,0xc0028d44
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 44 8d 02 c0       	mov    esi,0xc0028d44
c00000ca:	a1 ac d9 02 c0       	mov    eax,ds:0xc002d9ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac d9 02 c0       	mov    ds:0xc002d9ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac d9 02 c0       	mov    eax,ds:0xc002d9ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 d3 02 c0       	push   0xc002d378
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 d9 02 c0 01 	mov    BYTE PTR ds:0xc002d9a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 d9 02 c0       	push   0xc002d9b0
c000012c:	68 78 d3 02 c0       	push   0xc002d378
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 b1 d0 01 00       	call   c001d44c <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 3a 25 01 00       	call   c00128ed <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 8f d0 01 00       	call   c001d44c <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 dd d4 01 00       	call   c001d8b9 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 8b da 01 00       	call   c001de70 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 f0 dd 02 c0 	lgdtd  ds:0xc002ddf0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 18 42 01 00       	call   c00147f1 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 c8 d9 02 c0       	mov    ds:0xc002d9c8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 c8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9c8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d c8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9c8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 60 8d 02 c0 02 	test   BYTE PTR [edx-0x3ffd72a0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 60 8d 02 c0 01 	test   BYTE PTR [edx-0x3ffd72a0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 60 8d 02 c0 08 	test   BYTE PTR [edx-0x3ffd72a0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 60 8d 02 c0 04 	test   BYTE PTR [ebx-0x3ffd72a0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 60 8d 02 c0 01 	test   BYTE PTR [edx-0x3ffd72a0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d e0 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9e0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d e0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 e4 d9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd261c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 e4 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd261c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d e0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 0c da 02 c0    	cmp    DWORD PTR ds:0xc002da0c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 1c da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da1c
c0000e60:	c7 42 0c 14 da 02 c0 	mov    DWORD PTR [edx+0xc],0xc002da14
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 1c da 02 c0    	mov    DWORD PTR ds:0xc002da1c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 0c da 02 c0    	mov    DWORD PTR ds:0xc002da0c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 e0 d9 02 c0 02 	test   BYTE PTR ds:0xc002d9e0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d e0 d9 02 c0    	mov    edi,DWORD PTR ds:0xc002d9e0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 e4 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd261c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 e4 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd261c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 14 da 02 c0 	lea    edx,[eax*8-0x3ffd25ec]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 20 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da20
c00011e2:	81 fb 14 da 02 c0    	cmp    ebx,0xc002da14
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 14 da 02 c0       	cmp    eax,0xc002da14
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 10 da 02 c0    	cmp    DWORD PTR ds:0xc002da10,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 1c da 02 c0       	mov    ds:0xc002da1c,eax
c000121e:	a3 20 da 02 c0       	mov    ds:0xc002da20,eax
c0001223:	a3 10 da 02 c0       	mov    ds:0xc002da10,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 14 da 02 c0 	mov    DWORD PTR [eax+0x8],0xc002da14
c0001231:	c7 40 0c 14 da 02 c0 	mov    DWORD PTR [eax+0xc],0xc002da14
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 20 da 02 c0       	mov    ds:0xc002da20,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 14 da 02 c0 	mov    DWORD PTR [eax+0x8],0xc002da14
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 d8 d9 02 c0 	lea    ebp,[edx*4-0x3ffd2628]
c0001282:	8b 14 95 e0 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2620]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 e0 d9 02 c0 	lea    ecx,[edx*4-0x3ffd2620]
c000129d:	8b 14 95 e0 d9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2620]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 14 dd 02 c0 	or     DWORD PTR [edi*4-0x3ffd22ec],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 14 da 02 c0 	lea    eax,[eax*8-0x3ffd25ec]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 1c da 02 c0    	mov    DWORD PTR ds:0xc002da1c,ecx
c0001357:	89 0d 20 da 02 c0    	mov    DWORD PTR ds:0xc002da20,ecx
c000135d:	c7 41 08 14 da 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002da14
c0001364:	c7 41 0c 14 da 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002da14
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 0c da 02 c0 	lea    edx,[ecx*8-0x3ffd25f4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 14 dd 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd22ec]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 14 dd 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd22ec]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 0c da 02 c0 	lea    edx,[eax*4-0x3ffd25f4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 14 dd 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd22ec],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 1c da 02 c0    	mov    DWORD PTR ds:0xc002da1c,edi
c000142a:	89 3d 20 da 02 c0    	mov    DWORD PTR ds:0xc002da20,edi
c0001430:	c7 47 08 14 da 02 c0 	mov    DWORD PTR [edi+0x8],0xc002da14
c0001437:	c7 47 0c 14 da 02 c0 	mov    DWORD PTR [edi+0xc],0xc002da14
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 10 da 02 c0    	mov    DWORD PTR ds:0xc002da10,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 0c da 02 c0    	mov    DWORD PTR ds:0xc002da0c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba e0 d9 02 c0       	mov    edx,0xc002d9e0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d e0 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d9e0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 34 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd34
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 34 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd34,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 34 dd 02 c0    	mov    DWORD PTR ds:0xc002dd34,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 0c da 02 c0    	cmp    DWORD PTR ds:0xc002da0c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 0c da 02 c0    	mov    DWORD PTR ds:0xc002da0c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d e0 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d9e0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 3c dd 02 c0    	push   DWORD PTR ds:0xc002dd3c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d e0 d9 02 c0 00 	cmp    DWORD PTR ds:0xc002d9e0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 3c dd 02 c0       	mov    eax,ds:0xc002dd3c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 0c da 02 c0 00 	cmp    DWORD PTR ds:0xc002da0c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 0c da 02 c0       	mov    eax,ds:0xc002da0c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 e4 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd261c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 14 da 02 c0       	mov    eax,0xc002da14
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 0c dd 02 c0       	cmp    eax,0xc002dd0c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 48 dd 02 c0       	mov    eax,ds:0xc002dd48
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 30 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd30
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 44 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd44
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 54 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd54
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 64 8e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd719c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 e0 d9 02 c0       	mov    eax,ds:0xc002d9e0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 e0 d9 02 c0       	mov    ds:0xc002d9e0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 24 dd 02 c0    	mov    DWORD PTR ds:0xc002dd24,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 28 dd 02 c0    	mov    DWORD PTR ds:0xc002dd28,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 2c dd 02 c0    	mov    DWORD PTR ds:0xc002dd2c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 34 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd34,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 e0 15 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcea20]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 ca ec 01 00       	jmp    c00208f6 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 e0 15 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcea20]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 fb ec 01 00       	jmp    c002093d <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 e0 15 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcea20]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 23 ed 01 00       	jmp    c0020984 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 a8 45 02 00       	call   c00264ec <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 80 8f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7080]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 80 8f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7080]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 80 8e 02 c0       	mov    edx,0xc0028e80
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba a0 8f 02 c0       	mov    edx,0xc0028fa0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 00 c2 02 c0       	mov    edx,0xc002c200
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ac 8f 02 c0       	mov    edx,0xc0028fac
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 90 8f 02 c0       	mov    edx,0xc0028f90
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 80 dd 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2280]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 60 dd 02 c0    	mov    ax,ds:0xc002dd60
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 60 dd 02 c0    	mov    ds:0xc002dd60,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 a5 33 02 00       	call   c00264ec <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 b2 8f 02 c0       	mov    eax,0xc0028fb2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 00 8f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7100]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 bb 8f 02 c0       	mov    eax,0xc0028fbb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 80 8f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7080]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 70 1d 02 00       	call   c00264ec <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 90 8f 02 c0       	mov    edx,0xc0028f90
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 80 8e 02 c0       	mov    edx,0xc0028e80
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 90 8e 02 c0       	mov    edx,0xc0028e90
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 80 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2280]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 80 dd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2280],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 37 07 02 00       	call   c00264ec <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 1d 07 02 00       	call   c00264ec <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 d7 8e 02 c0       	mov    eax,0xc0028ed7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 d0 8e 02 c0       	mov    eax,0xc0028ed0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 80 dd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2280]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be c0 8e 02 c0       	mov    esi,0xc0028ec0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 60 ee 01 00       	call   c00264ec <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba a0 8f 02 c0       	mov    edx,0xc0028fa0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba a0 8e 02 c0       	mov    edx,0xc0028ea0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba b0 8e 02 c0       	mov    edx,0xc0028eb0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba c2 8f 02 c0       	mov    edx,0xc0028fc2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ce 8f 02 c0       	mov    edx,0xc0028fce
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba e2 8f 02 c0       	mov    edx,0xc0028fe2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 00 93 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029300
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 00 93 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029300
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 00 91 02 c0       	mov    eax,0xc0029100
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 40 90 02 c0       	mov    eax,0xc0029040
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 00 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7000]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 b4 f7 01 00       	call   c0027fbf <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 77 f7 01 00       	call   c0027fa1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 4b f7 01 00       	call   c0027fbf <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 fe ed 01 00       	call   c00276c4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 78 f8 01 00       	call   c0028150 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 c5 f6 01 00       	call   c0027fbf <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 07 f6 01 00       	call   c0027fbf <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 d4 f5 01 00       	call   c0027fa1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 c1 f4 01 00       	call   c0027fbf <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 89 f4 01 00       	call   c0027fa1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 00 94 02 c0       	mov    eax,0xc0029400
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 95 f2 01 00       	call   c0027fbf <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 5a f2 01 00       	call   c0027fa1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 60 98 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd67a0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 6a ef 01 00       	call   c0027d53 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 e8 e8 01 00       	call   c00276f0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 a4 f1 01 00       	call   c0027fc3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 92 f2 01 00       	call   c00280e7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 7c e8 01 00       	call   c00276f0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 27 f1 01 00       	call   c0027fbd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 08 f1 01 00       	call   c0027fc1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 96 f2 01 00       	call   c0028170 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 48 ee 01 00       	call   c0027d53 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 c6 e7 01 00       	call   c00276f0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 82 f0 01 00       	call   c0027fc3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 70 f1 01 00       	call   c00280e7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 5a e7 01 00       	call   c00276f0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 05 f0 01 00       	call   c0027fbd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 e5 ef 01 00       	call   c0027fc1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 72 f1 01 00       	call   c0028170 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 20 ef 01 00       	call   c0027fbf <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 de ee 01 00       	call   c0027fa1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 c6 ee 01 00       	call   c0027fbf <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 38 ec 01 00       	call   c0027d53 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 3a df 01 00       	call   c0027073 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 9d e5 01 00       	call   c00276f0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 ef eb 01 00       	call   c0027d53 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 f5 de 01 00       	call   c0027073 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 c4 eb 01 00       	call   c0027d53 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 14 ee 01 00       	call   c0027fbd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 f1 e4 01 00       	call   c00276c4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 6b ef 01 00       	call   c0028150 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 9a ed 01 00       	call   c0027fa1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 95 e4 01 00       	call   c00276c4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 13 eb 01 00       	call   c0027d53 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 96 e4 01 00       	call   c00276f0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 e8 ea 01 00       	call   c0027d53 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 4f e7 01 00       	call   c00279d4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 ce dd 01 00       	call   c0027073 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 2e d7 01 00       	call   c0026a08 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 05 ee 01 00       	call   c00280e7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 ee e3 01 00       	call   c00276f0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 d5 ed 01 00       	call   c00280e7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 47 dd 01 00       	call   c0027073 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 80 ec 01 00       	call   c0027fc3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 68 e6 01 00       	call   c00279d4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 ee dc 01 00       	call   c0027073 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 d4 ed 01 00       	call   c0028170 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 ae e9 01 00       	call   c0027d53 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 05 e3 01 00       	call   c00276c4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 e4 eb 01 00       	call   c0027fbf <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 7d dc 01 00       	call   c0027073 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 a9 e2 01 00       	call   c00276c4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 43 ed 01 00       	call   c0028170 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 fc e8 01 00       	call   c0027d53 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 79 e2 01 00       	call   c00276f0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 cc e8 01 00       	call   c0027d53 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 d2 db 01 00       	call   c0027073 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 a2 e8 01 00       	call   c0027d53 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 f4 ea 01 00       	call   c0027fbf <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 cb e1 01 00       	call   c00276c4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 45 ec 01 00       	call   c0028150 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 74 ea 01 00       	call   c0027fa1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 6e e1 01 00       	call   c00276c4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 ec e7 01 00       	call   c0027d53 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 6f e1 01 00       	call   c00276f0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 c1 e7 01 00       	call   c0027d53 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 28 e4 01 00       	call   c00279d4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 a7 da 01 00       	call   c0027073 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 f7 d3 01 00       	call   c0026a08 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 ce ea 01 00       	call   c00280e7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 b7 e0 01 00       	call   c00276f0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 9e ea 01 00       	call   c00280e7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 10 da 01 00       	call   c0027073 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 49 e9 01 00       	call   c0027fc3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 30 e3 01 00       	call   c00279d4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 af d9 01 00       	call   c0027073 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 95 ea 01 00       	call   c0028170 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 6f e6 01 00       	call   c0027d53 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 c6 df 01 00       	call   c00276c4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 a5 e8 01 00       	call   c0027fbf <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 3e d9 01 00       	call   c0027073 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 6a df 01 00       	call   c00276c4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 df e5 01 00       	call   c0027d53 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 e5 d8 01 00       	call   c0027073 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 d4 98 02 c0       	mov    eax,0xc00298d4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 5a e4 01 00       	call   c0027d53 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 d8 dd 01 00       	call   c00276f0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 6a d0 01 00       	call   c0026a08 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 41 e7 01 00       	call   c00280e7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 2a dd 01 00       	call   c00276f0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 0d e7 01 00       	call   c00280e7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 7f d6 01 00       	call   c0027073 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 df e6 01 00       	call   c00280e7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 ce dc 01 00       	call   c00276f0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 37 d6 01 00       	call   c0027073 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 58 cf 01 00       	call   c0026a08 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 2f e6 01 00       	call   c00280e7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 18 dc 01 00       	call   c00276f0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 fb e5 01 00       	call   c00280e7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 6d d5 01 00       	call   c0027073 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 cd e5 01 00       	call   c00280e7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 bc db 01 00       	call   c00276f0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 25 d5 01 00       	call   c0027073 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 03 d5 01 00       	call   c0027073 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 df cd 01 00       	call   c0026a08 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 b6 e4 01 00       	call   c00280e7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 9f da 01 00       	call   c00276f0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 82 e4 01 00       	call   c00280e7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 f4 d3 01 00       	call   c0027073 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 54 e4 01 00       	call   c00280e7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 3d da 01 00       	call   c00276f0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 a6 d3 01 00       	call   c0027073 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 06 e4 01 00       	call   c00280e7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 ef d9 01 00       	call   c00276f0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 58 d3 01 00       	call   c0027073 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 6d cc 01 00       	call   c0026a08 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 44 e3 01 00       	call   c00280e7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 2d d9 01 00       	call   c00276f0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 14 e3 01 00       	call   c00280e7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 86 d2 01 00       	call   c0027073 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 e6 e2 01 00       	call   c00280e7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 cf d8 01 00       	call   c00276f0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 38 d2 01 00       	call   c0027073 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 98 e2 01 00       	call   c00280e7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 81 d8 01 00       	call   c00276f0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ea d1 01 00       	call   c0027073 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 be d1 01 00       	call   c0027073 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 1b d8 01 00       	call   c00276f0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 d7 e0 01 00       	call   c0027fc3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 66 d1 01 00       	call   c0027073 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 c3 d7 01 00       	call   c00276f0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 7f e0 01 00       	call   c0027fc3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 f9 c9 01 00       	call   c0026a08 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 d0 e0 01 00       	call   c00280e7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 b9 d6 01 00       	call   c00276f0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 9c e0 01 00       	call   c00280e7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 0e d0 01 00       	call   c0027073 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 6e e0 01 00       	call   c00280e7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 57 d6 01 00       	call   c00276f0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 c0 cf 01 00       	call   c0027073 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 20 e0 01 00       	call   c00280e7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 09 d6 01 00       	call   c00276f0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 72 cf 01 00       	call   c0027073 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 d2 df 01 00       	call   c00280e7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 bb d5 01 00       	call   c00276f0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 24 cf 01 00       	call   c0027073 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 84 df 01 00       	call   c00280e7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 6d d5 01 00       	call   c00276f0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 d6 ce 01 00       	call   c0027073 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 d8 c7 01 00       	call   c0026a08 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 af de 01 00       	call   c00280e7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 98 d4 01 00       	call   c00276f0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 7f de 01 00       	call   c00280e7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 f1 cd 01 00       	call   c0027073 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 51 de 01 00       	call   c00280e7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 3a d4 01 00       	call   c00276f0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 a3 cd 01 00       	call   c0027073 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 03 de 01 00       	call   c00280e7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 ec d3 01 00       	call   c00276f0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 55 cd 01 00       	call   c0027073 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 b5 dd 01 00       	call   c00280e7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 9e d3 01 00       	call   c00276f0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 07 cd 01 00       	call   c0027073 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 67 dd 01 00       	call   c00280e7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 50 d3 01 00       	call   c00276f0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 b9 cc 01 00       	call   c0027073 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 8d cc 01 00       	call   c0027073 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ea d2 01 00       	call   c00276f0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 a6 db 01 00       	call   c0027fc3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 35 cc 01 00       	call   c0027073 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 92 d2 01 00       	call   c00276f0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 4e db 01 00       	call   c0027fc3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 dc cb 01 00       	call   c0027073 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 39 d2 01 00       	call   c00276f0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 f5 da 01 00       	call   c0027fc3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 83 cb 01 00       	call   c0027073 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 e0 d1 01 00       	call   c00276f0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 9c da 01 00       	call   c0027fc3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 fa c3 01 00       	call   c0026a08 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 d1 da 01 00       	call   c00280e7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 ba d0 01 00       	call   c00276f0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 9d da 01 00       	call   c00280e7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 0f ca 01 00       	call   c0027073 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 6f da 01 00       	call   c00280e7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 58 d0 01 00       	call   c00276f0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 c1 c9 01 00       	call   c0027073 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 21 da 01 00       	call   c00280e7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 0a d0 01 00       	call   c00276f0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 73 c9 01 00       	call   c0027073 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 d3 d9 01 00       	call   c00280e7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 bc cf 01 00       	call   c00276f0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 25 c9 01 00       	call   c0027073 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 85 d9 01 00       	call   c00280e7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 6e cf 01 00       	call   c00276f0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 d7 c8 01 00       	call   c0027073 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 37 d9 01 00       	call   c00280e7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 20 cf 01 00       	call   c00276f0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 86 c8 01 00       	call   c0027073 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 e6 d8 01 00       	call   c00280e7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 cf ce 01 00       	call   c00276f0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 38 c8 01 00       	call   c0027073 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 32 c1 01 00       	call   c0026a08 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 09 d8 01 00       	call   c00280e7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 f2 cd 01 00       	call   c00276f0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 d2 d7 01 00       	call   c00280e7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 44 c7 01 00       	call   c0027073 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 a4 d7 01 00       	call   c00280e7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 8d cd 01 00       	call   c00276f0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 f6 c6 01 00       	call   c0027073 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 56 d7 01 00       	call   c00280e7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 3f cd 01 00       	call   c00276f0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 a8 c6 01 00       	call   c0027073 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 08 d7 01 00       	call   c00280e7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 f1 cc 01 00       	call   c00276f0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 5a c6 01 00       	call   c0027073 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 ba d6 01 00       	call   c00280e7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 a3 cc 01 00       	call   c00276f0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 0c c6 01 00       	call   c0027073 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 6c d6 01 00       	call   c00280e7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 55 cc 01 00       	call   c00276f0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 bb c5 01 00       	call   c0027073 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 1b d6 01 00       	call   c00280e7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 04 cc 01 00       	call   c00276f0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 73 c5 01 00       	call   c0027073 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 4c c5 01 00       	call   c0027073 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 aa cb 01 00       	call   c00276f0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 66 d4 01 00       	call   c0027fc3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 f5 c4 01 00       	call   c0027073 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 53 cb 01 00       	call   c00276f0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 0f d4 01 00       	call   c0027fc3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 9d c4 01 00       	call   c0027073 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 fb ca 01 00       	call   c00276f0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 b7 d3 01 00       	call   c0027fc3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 45 c4 01 00       	call   c0027073 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 a3 ca 01 00       	call   c00276f0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 5f d3 01 00       	call   c0027fc3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 ed c3 01 00       	call   c0027073 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 4b ca 01 00       	call   c00276f0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 07 d3 01 00       	call   c0027fc3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 9b c3 01 00       	call   c0027073 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 f9 c9 01 00       	call   c00276f0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 b5 d2 01 00       	call   c0027fc3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 c9 bb 01 00       	call   c0026a08 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 a0 d2 01 00       	call   c00280e7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 89 c8 01 00       	call   c00276f0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 70 d2 01 00       	call   c00280e7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 e2 c1 01 00       	call   c0027073 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 04 99 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd66fc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 16 d2 01 00       	call   c00280e7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 ff c7 01 00       	call   c00276f0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 6a c1 01 00       	call   c0027073 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 b7 d1 01 00       	call   c00280e7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 a0 c7 01 00       	call   c00276f0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 0b c1 01 00       	call   c0027073 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 58 d1 01 00       	call   c00280e7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 41 c7 01 00       	call   c00276f0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 ac c0 01 00       	call   c0027073 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 f9 d0 01 00       	call   c00280e7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 e2 c6 01 00       	call   c00276f0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 4d c0 01 00       	call   c0027073 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 9a d0 01 00       	call   c00280e7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 83 c6 01 00       	call   c00276f0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 ee bf 01 00       	call   c0027073 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 3b d0 01 00       	call   c00280e7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 24 c6 01 00       	call   c00276f0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 8f bf 01 00       	call   c0027073 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 dc cf 01 00       	call   c00280e7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 c5 c5 01 00       	call   c00276f0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 30 bf 01 00       	call   c0027073 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 7d cf 01 00       	call   c00280e7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 66 c5 01 00       	call   c00276f0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 d1 be 01 00       	call   c0027073 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 db b7 01 00       	call   c0026a08 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 b2 ce 01 00       	call   c00280e7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 9b c4 01 00       	call   c00276f0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 82 ce 01 00       	call   c00280e7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 f4 bd 01 00       	call   c0027073 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 20 99 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd66e0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 27 ce 01 00       	call   c00280e7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 10 c4 01 00       	call   c00276f0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 7b bd 01 00       	call   c0027073 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 c7 cd 01 00       	call   c00280e7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 b0 c3 01 00       	call   c00276f0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 1b bd 01 00       	call   c0027073 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 67 cd 01 00       	call   c00280e7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 50 c3 01 00       	call   c00276f0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 bb bc 01 00       	call   c0027073 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 07 cd 01 00       	call   c00280e7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 f0 c2 01 00       	call   c00276f0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 5b bc 01 00       	call   c0027073 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 a7 cc 01 00       	call   c00280e7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 90 c2 01 00       	call   c00276f0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 fb bb 01 00       	call   c0027073 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 47 cc 01 00       	call   c00280e7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 30 c2 01 00       	call   c00276f0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 9b bb 01 00       	call   c0027073 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 e7 cb 01 00       	call   c00280e7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 d0 c1 01 00       	call   c00276f0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 3b bb 01 00       	call   c0027073 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 87 cb 01 00       	call   c00280e7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 70 c1 01 00       	call   c00276f0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 db ba 01 00       	call   c0027073 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 3c 99 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd66c4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 80 ba 01 00       	call   c0027073 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 dd c0 01 00       	call   c00276f0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 99 c9 01 00       	call   c0027fc3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 23 ba 01 00       	call   c0027073 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 80 c0 01 00       	call   c00276f0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 3c c9 01 00       	call   c0027fc3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 c6 b9 01 00       	call   c0027073 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 23 c0 01 00       	call   c00276f0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 df c8 01 00       	call   c0027fc3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 69 b9 01 00       	call   c0027073 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 c6 bf 01 00       	call   c00276f0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 82 c8 01 00       	call   c0027fc3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 0c b9 01 00       	call   c0027073 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 69 bf 01 00       	call   c00276f0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 25 c8 01 00       	call   c0027fc3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 af b8 01 00       	call   c0027073 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 0c bf 01 00       	call   c00276f0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 c8 c7 01 00       	call   c0027fc3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 52 b8 01 00       	call   c0027073 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 af be 01 00       	call   c00276f0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 6b c7 01 00       	call   c0027fc3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 f5 b7 01 00       	call   c0027073 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 52 be 01 00       	call   c00276f0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 0e c7 01 00       	call   c0027fc3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 0a be 01 00       	call   c00276f0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 7a c8 01 00       	jmp    c0028170 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 ec c4 01 00       	call   c0027fbf <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 aa c4 01 00       	call   c0027fa1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 41 c2 01 00       	call   c0027d53 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 42 b5 01 00       	call   c0027073 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 11 c2 01 00       	call   c0027d53 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 78 be 01 00       	call   c00279d4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 17 c4 01 00       	call   c0027fa1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 1a c4 01 00       	call   c0027fbf <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 ed c3 01 00       	call   c0027fbf <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 e6 bd 01 00       	call   c00279d4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 68 c5 01 00       	call   c0028170 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 43 c5 01 00       	call   c0028170 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 1d c1 01 00       	call   c0027d53 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 74 ba 01 00       	call   c00276c4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 53 c3 01 00       	call   c0027fbf <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 ec b3 01 00       	call   c0027073 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 10 ba 01 00       	call   c00276c4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 aa c4 01 00       	call   c0028170 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ea bc 01 00       	call   c00279d4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 67 b3 01 00       	call   c0027073 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 93 bf 01 00       	call   c0027d53 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 93 b2 01 00       	call   c0027073 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 73 b2 01 00       	call   c0027073 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 43 bf 01 00       	call   c0027d53 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 93 c1 01 00       	call   c0027fbd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 72 b8 01 00       	call   c00276c4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 ec c2 01 00       	call   c0028150 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 1b c1 01 00       	call   c0027fa1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 19 b8 01 00       	call   c00276c4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 97 be 01 00       	call   c0027d53 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 1a b8 01 00       	call   c00276f0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 6c be 01 00       	call   c0027d53 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 d3 ba 01 00       	call   c00279d4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 52 b1 01 00       	call   c0027073 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 1c be 01 00       	call   c0027d53 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 68 c0 01 00       	call   c0027fbf <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 5d b7 01 00       	call   c00276f0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 2f b7 01 00       	call   c00276f0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 68 bd 01 00       	call   c0027d53 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 cc b9 01 00       	call   c00279d4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 94 b9 01 00       	call   c00279d4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 13 b0 01 00       	call   c0027073 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 f8 c0 01 00       	call   c0028170 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 d2 bc 01 00       	call   c0027d53 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 29 b6 01 00       	call   c00276c4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 08 bf 01 00       	call   c0027fbf <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 a0 af 01 00       	call   c0027073 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 c4 b5 01 00       	call   c00276c4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 5e c0 01 00       	call   c0028170 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 27 be 01 00       	call   c0027fbf <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 e5 bd 01 00       	call   c0027fa1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 7c bb 01 00       	call   c0027d53 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 7d ae 01 00       	call   c0027073 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 4c bb 01 00       	call   c0027d53 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 b3 b7 01 00       	call   c00279d4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 52 bd 01 00       	call   c0027fa1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 55 bd 01 00       	call   c0027fbf <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 28 bd 01 00       	call   c0027fbf <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 21 b7 01 00       	call   c00279d4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 a3 be 01 00       	call   c0028170 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 7e be 01 00       	call   c0028170 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 58 ba 01 00       	call   c0027d53 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 af b3 01 00       	call   c00276c4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 8e bc 01 00       	call   c0027fbf <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 27 ad 01 00       	call   c0027073 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 4b b3 01 00       	call   c00276c4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 e5 bd 01 00       	call   c0028170 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 25 b6 01 00       	call   c00279d4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 a2 ac 01 00       	call   c0027073 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 cd b8 01 00       	call   c0027d53 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 cd ab 01 00       	call   c0027073 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 ad ab 01 00       	call   c0027073 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 7d b8 01 00       	call   c0027d53 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 cd ba 01 00       	call   c0027fbd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 ab b1 01 00       	call   c00276c4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 25 bc 01 00       	call   c0028150 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 54 ba 01 00       	call   c0027fa1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 51 b1 01 00       	call   c00276c4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 cf b7 01 00       	call   c0027d53 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 52 b1 01 00       	call   c00276f0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 a4 b7 01 00       	call   c0027d53 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 0b b4 01 00       	call   c00279d4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 8a aa 01 00       	call   c0027073 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 54 b7 01 00       	call   c0027d53 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 a0 b9 01 00       	call   c0027fbf <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 95 b0 01 00       	call   c00276f0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 67 b0 01 00       	call   c00276f0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 9e b6 01 00       	call   c0027d53 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 02 b3 01 00       	call   c00279d4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 cf b2 01 00       	call   c00279d4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 4e a9 01 00       	call   c0027073 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 33 ba 01 00       	call   c0028170 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 0d b6 01 00       	call   c0027d53 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 64 af 01 00       	call   c00276c4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 43 b8 01 00       	call   c0027fbf <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 db a8 01 00       	call   c0027073 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 ff ae 01 00       	call   c00276c4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 99 b9 01 00       	call   c0028170 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 62 b7 01 00       	call   c0027fbf <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 20 b7 01 00       	call   c0027fa1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 b7 b4 01 00       	call   c0027d53 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 b8 a7 01 00       	call   c0027073 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 87 b4 01 00       	call   c0027d53 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 ee b0 01 00       	call   c00279d4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 8d b6 01 00       	call   c0027fa1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 90 b6 01 00       	call   c0027fbf <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 63 b6 01 00       	call   c0027fbf <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 5c b0 01 00       	call   c00279d4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 de b7 01 00       	call   c0028170 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 b9 b7 01 00       	call   c0028170 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 93 b3 01 00       	call   c0027d53 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ea ac 01 00       	call   c00276c4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 c9 b5 01 00       	call   c0027fbf <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 62 a6 01 00       	call   c0027073 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 86 ac 01 00       	call   c00276c4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 20 b7 01 00       	call   c0028170 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 60 af 01 00       	call   c00279d4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 dd a5 01 00       	call   c0027073 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 08 b2 01 00       	call   c0027d53 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 08 a5 01 00       	call   c0027073 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 e8 a4 01 00       	call   c0027073 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 b8 b1 01 00       	call   c0027d53 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 08 b4 01 00       	call   c0027fbd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 e6 aa 01 00       	call   c00276c4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 60 b5 01 00       	call   c0028150 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 8f b3 01 00       	call   c0027fa1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 8c aa 01 00       	call   c00276c4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 0a b1 01 00       	call   c0027d53 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 8d aa 01 00       	call   c00276f0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 df b0 01 00       	call   c0027d53 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 46 ad 01 00       	call   c00279d4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 c5 a3 01 00       	call   c0027073 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 8f b0 01 00       	call   c0027d53 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 db b2 01 00       	call   c0027fbf <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 d0 a9 01 00       	call   c00276f0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 a2 a9 01 00       	call   c00276f0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 d9 af 01 00       	call   c0027d53 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 3d ac 01 00       	call   c00279d4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 0a ac 01 00       	call   c00279d4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 89 a2 01 00       	call   c0027073 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 6e b3 01 00       	call   c0028170 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 48 af 01 00       	call   c0027d53 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 9f a8 01 00       	call   c00276c4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 7e b1 01 00       	call   c0027fbf <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 16 a2 01 00       	call   c0027073 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 3a a8 01 00       	call   c00276c4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 d4 b2 01 00       	call   c0028170 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 9d b0 01 00       	call   c0027fbf <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 5b b0 01 00       	call   c0027fa1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 f2 ad 01 00       	call   c0027d53 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 f3 a0 01 00       	call   c0027073 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 c2 ad 01 00       	call   c0027d53 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 29 aa 01 00       	call   c00279d4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 c8 af 01 00       	call   c0027fa1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 cb af 01 00       	call   c0027fbf <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 9e af 01 00       	call   c0027fbf <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 97 a9 01 00       	call   c00279d4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 19 b1 01 00       	call   c0028170 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 f4 b0 01 00       	call   c0028170 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 ce ac 01 00       	call   c0027d53 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 25 a6 01 00       	call   c00276c4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 04 af 01 00       	call   c0027fbf <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 9d 9f 01 00       	call   c0027073 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 c1 a5 01 00       	call   c00276c4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 5b b0 01 00       	call   c0028170 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 9b a8 01 00       	call   c00279d4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 18 9f 01 00       	call   c0027073 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 43 ab 01 00       	call   c0027d53 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 43 9e 01 00       	call   c0027073 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 23 9e 01 00       	call   c0027073 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 f3 aa 01 00       	call   c0027d53 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 43 ad 01 00       	call   c0027fbd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 21 a4 01 00       	call   c00276c4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 9b ae 01 00       	call   c0028150 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 ca ac 01 00       	call   c0027fa1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 c7 a3 01 00       	call   c00276c4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 45 aa 01 00       	call   c0027d53 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 c8 a3 01 00       	call   c00276f0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 1a aa 01 00       	call   c0027d53 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 81 a6 01 00       	call   c00279d4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 00 9d 01 00       	call   c0027073 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 ca a9 01 00       	call   c0027d53 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 16 ac 01 00       	call   c0027fbf <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 0b a3 01 00       	call   c00276f0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 dd a2 01 00       	call   c00276f0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 14 a9 01 00       	call   c0027d53 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 78 a5 01 00       	call   c00279d4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 45 a5 01 00       	call   c00279d4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 c4 9b 01 00       	call   c0027073 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 a9 ac 01 00       	call   c0028170 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 83 a8 01 00       	call   c0027d53 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 da a1 01 00       	call   c00276c4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 b9 aa 01 00       	call   c0027fbf <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 51 9b 01 00       	call   c0027073 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 75 a1 01 00       	call   c00276c4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 0f ac 01 00       	call   c0028170 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 d5 a9 01 00       	call   c0027fbf <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 93 a9 01 00       	call   c0027fa1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 2a a7 01 00       	call   c0027d53 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 2b 9a 01 00       	call   c0027073 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 fa a6 01 00       	call   c0027d53 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 61 a3 01 00       	call   c00279d4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 00 a9 01 00       	call   c0027fa1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 03 a9 01 00       	call   c0027fbf <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 d6 a8 01 00       	call   c0027fbf <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 cf a2 01 00       	call   c00279d4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 51 aa 01 00       	call   c0028170 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 28 aa 01 00       	call   c0028170 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 02 a6 01 00       	call   c0027d53 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 59 9f 01 00       	call   c00276c4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 38 a8 01 00       	call   c0027fbf <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 d1 98 01 00       	call   c0027073 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 f9 9e 01 00       	call   c00276c4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 93 a9 01 00       	call   c0028170 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 d4 a1 01 00       	call   c00279d4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 51 98 01 00       	call   c0027073 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 7d a4 01 00       	call   c0027d53 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 7d 97 01 00       	call   c0027073 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 5d 97 01 00       	call   c0027073 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 2d a4 01 00       	call   c0027d53 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 61 a6 01 00       	call   c0027fa1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 58 9d 01 00       	call   c00276c4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 d2 a7 01 00       	call   c0028150 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 01 a6 01 00       	call   c0027fa1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 fb 9c 01 00       	call   c00276c4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 79 a3 01 00       	call   c0027d53 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 fc 9c 01 00       	call   c00276f0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 4e a3 01 00       	call   c0027d53 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 b5 9f 01 00       	call   c00279d4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 34 96 01 00       	call   c0027073 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 fe a2 01 00       	call   c0027d53 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 4a a5 01 00       	call   c0027fbf <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 3f 9c 01 00       	call   c00276f0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 11 9c 01 00       	call   c00276f0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 55 a2 01 00       	call   c0027d53 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 bc 9e 01 00       	call   c00279d4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 a5 9b 01 00       	call   c00276f0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 61 a4 01 00       	call   c0027fc3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 54 9e 01 00       	call   c00279d4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 d3 94 01 00       	call   c0027073 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 b8 a5 01 00       	call   c0028170 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 92 a1 01 00       	call   c0027d53 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 e9 9a 01 00       	call   c00276c4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 c8 a3 01 00       	call   c0027fbf <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 60 94 01 00       	call   c0027073 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 88 9a 01 00       	call   c00276c4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 22 a5 01 00       	call   c0028170 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 64 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd669c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 58 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd66a8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 dd a1 01 00       	call   c0027fbf <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 9b a1 01 00       	call   c0027fa1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 87 a1 01 00       	call   c0027fbf <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 f9 9e 01 00       	call   c0027d53 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 77 98 01 00       	call   c00276f0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 c9 9e 01 00       	call   c0027d53 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 cf 91 01 00       	call   c0027073 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 9e 9e 01 00       	call   c0027d53 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 ee a0 01 00       	call   c0027fbd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 cf 97 01 00       	call   c00276c4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 49 a2 01 00       	call   c0028150 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 78 a0 01 00       	call   c0027fa1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 77 97 01 00       	call   c00276c4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 f5 9d 01 00       	call   c0027d53 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 78 97 01 00       	call   c00276f0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 ca 9d 01 00       	call   c0027d53 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 31 9a 01 00       	call   c00279d4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 b0 90 01 00       	call   c0027073 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 d8 99 01 00       	call   c00279d4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 5e 90 01 00       	call   c0027073 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 44 a1 01 00       	call   c0028170 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 1e 9d 01 00       	call   c0027d53 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 75 96 01 00       	call   c00276c4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 54 9f 01 00       	call   c0027fbf <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 ed 8f 01 00       	call   c0027073 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 19 96 01 00       	call   c00276c4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 b3 a0 01 00       	call   c0028170 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 68 9c 01 00       	call   c0027d53 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 e5 95 01 00       	call   c00276f0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 36 9c 01 00       	call   c0027d53 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 3c 8f 01 00       	call   c0027073 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 0c 9c 01 00       	call   c0027d53 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 60 9e 01 00       	call   c0027fc1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 39 95 01 00       	call   c00276c4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 b3 9f 01 00       	call   c0028150 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 e2 9d 01 00       	call   c0027fa1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 e0 94 01 00       	call   c00276c4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 5e 9b 01 00       	call   c0027d53 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 e1 94 01 00       	call   c00276f0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 33 9b 01 00       	call   c0027d53 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 9a 97 01 00       	call   c00279d4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 19 8e 01 00       	call   c0027073 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 35 97 01 00       	call   c00279d4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 b4 8d 01 00       	call   c0027073 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 9a 9e 01 00       	call   c0028170 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 74 9a 01 00       	call   c0027d53 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 cb 93 01 00       	call   c00276c4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 aa 9c 01 00       	call   c0027fbf <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 43 8d 01 00       	call   c0027073 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 6f 93 01 00       	call   c00276c4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 e0 99 01 00       	call   c0027d53 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 e6 8c 01 00       	call   c0027073 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 7e 9a 02 c0       	mov    eax,0xc0029a7e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 8f 9a 02 c0       	mov    eax,0xc0029a8f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 c6 9a 02 c0       	push   0xc0029ac6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 e8 dd 02 c0       	mov    eax,0xc002dde8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 cf 9a 02 c0       	push   0xc0029acf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 ec 64 02 c0       	mov    eax,0xc00264ec
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 d9 9a 02 c0       	push   0xc0029ad9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 20 62 02 c0       	mov    eax,0xc0026220
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 e2 9a 02 c0       	push   0xc0029ae2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 ec 65 02 c0       	mov    eax,0xc00265ec
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ec 9a 02 c0       	push   0xc0029aec
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 6c 63 02 c0       	mov    eax,0xc002636c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 f5 9a 02 c0       	push   0xc0029af5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ec dd 02 c0       	mov    eax,0xc002ddec
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 02 9b 02 c0       	push   0xc0029b02
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ed dd 02 c0       	mov    eax,0xc002dded
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 89 5a 00 00       	call   c00140ac <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c000e668:	68 0f 9b 02 c0       	push   0xc0029b0f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 45 f0 00 00       	call   c001d6ba <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 2e f3 00 00       	call   c001d9b8 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 16 e2 01 c0       	push   0xc001e216
c000e693:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c000e699:	e8 1a f3 00 00       	call   c001d9b8 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 08 13 03 c0       	mov    ds:0xc0031308,eax
c000e6a6:	c6 05 ed dd 02 c0 01 	mov    BYTE PTR ds:0xc002dded,0x1
c000e6ad:	e8 e5 fe 00 00       	call   c001e597 <Vm::initialise8086()>
c000e6b2:	e8 dd 47 00 00       	call   c0012e94 <Fs::initVFS()>
c000e6b7:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 97 d9 00 00       	call   c001c06a <Sys::loadSyscalls()>
c000e6d3:	e8 7a b9 00 00       	call   c001a052 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 1c 9b 02 c0       	push   0xc0029b1c
c000e6e2:	68 25 9b 02 c0       	push   0xc0029b25
c000e6e7:	e8 8c c6 00 00       	call   c001ad78 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 88 52 00 00       	call   c001397c <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 7b 59 00 00       	call   c0014080 <Device::loadDriversForAll()>
c000e705:	e8 8e b4 00 00       	call   c0019b98 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d e8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 2d 9b 02 c0       	push   0xc0029b2d
c000e719:	e8 c1 ea 00 00       	call   c001d1df <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 ec ec 00 00       	call   c001d413 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 e8 f5 00 00       	call   c001dd1c <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 49 9b 02 c0       	push   0xc0029b49
c000e749:	50                   	push   eax
c000e74a:	e8 d7 59 00 00       	call   c0014126 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba e8 9c 02 c0       	mov    edx,0xc0029ce8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 01 de 02 c0 04 	test   BYTE PTR ds:0xc002de01,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 d3 78 01 00       	call   c00261b6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 8c 9f 00 00       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 65 9f 00 00       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 43 9f 00 00       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 21 9f 00 00       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 00 de 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002de00,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 2f 9e 00 00       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 0a 9e 00 00       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 3d 77 01 00       	call   c0026170 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 fa 76 01 00       	call   c0026150 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 26 9e 00 00       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 59 9b 02 c0       	push   0xc0029b59
c000eaaf:	e8 5b 40 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 6c 9b 02 c0       	push   0xc0029b6c
c000ead2:	e8 38 40 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 7d 9b 02 c0       	push   0xc0029b7d
c000eaf5:	e8 15 40 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 8e 9b 02 c0       	push   0xc0029b8e
c000eb18:	e8 f2 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 9f 9b 02 c0       	push   0xc0029b9f
c000eb3b:	e8 cf 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 b0 9b 02 c0       	push   0xc0029bb0
c000eb5e:	e8 ac 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 c1 9b 02 c0       	push   0xc0029bc1
c000eb81:	e8 89 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 d2 9b 02 c0       	push   0xc0029bd2
c000eba4:	e8 66 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 e3 9b 02 c0       	push   0xc0029be3
c000ebc7:	e8 43 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 f4 9b 02 c0       	push   0xc0029bf4
c000ebea:	e8 20 3f 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 05 9c 02 c0       	push   0xc0029c05
c000ec0d:	e8 fd 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 16 9c 02 c0       	push   0xc0029c16
c000ec30:	e8 da 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 27 9c 02 c0       	push   0xc0029c27
c000ec53:	e8 b7 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 38 9c 02 c0       	push   0xc0029c38
c000ec76:	e8 94 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 49 9c 02 c0       	push   0xc0029c49
c000ec99:	e8 71 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 5a 9c 02 c0       	push   0xc0029c5a
c000ecbc:	e8 4e 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 6b 9c 02 c0       	push   0xc0029c6b
c000ecdf:	e8 2b 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 7c 9c 02 c0       	push   0xc0029c7c
c000ed02:	e8 08 3e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 8d 9c 02 c0       	push   0xc0029c8d
c000ed21:	e8 e9 3d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 70 b5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b570
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 d8 3d 00 00       	jmp    c0012b0f <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 9e 9c 02 c0       	push   0xc0029c9e
c000ee0a:	e8 7c b3 00 00       	call   c001a18b <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 a4 9c 02 c0       	push   0xc0029ca4
c000ee42:	e8 44 b3 00 00       	call   c001a18b <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 00 de 02 c0 04 	test   BYTE PTR ds:0xc002de00,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 24 cd 02 c0 	sete   BYTE PTR ds:0xc002cd24
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 c5 8e 00 00       	call   c0017d7a <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 72 50 00 00       	call   c0013f36 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 6e 9a 00 00       	call   c0018962 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 33 50 00 00       	call   c0013f36 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 9d 55 00 00       	call   c00144bc <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 03 50 00 00       	call   c0013f36 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 63 eb 00 00       	call   c001dab8 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 aa 9c 02 c0       	push   0xc0029caa
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 6c 3b 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 bb 9c 02 c0       	push   0xc0029cbb
c000efc0:	e8 c6 b1 00 00       	call   c001a18b <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 c8 9c 02 c0       	push   0xc0029cc8
c000efd5:	e8 b1 b1 00 00       	call   c001a18b <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 d2 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029cd2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 9a b1 00 00       	jmp    c001a18b <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 0c 9d 02 c0       	push   0xc0029d0c
c000f086:	e8 84 3a 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 f2 dd 02 c0       	mov    ds:0xc002ddf2,eax
c000f0c7:	66 89 15 f0 dd 02 c0 	mov    WORD PTR ds:0xc002ddf0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 aa e6 00 00       	call   c001d888 <unlockScheduler()>
c000f1de:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 e8 dd 02 c0    	push   DWORD PTR ds:0xc002dde8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 c4 8f 01 00       	call   c00281f0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 bb 8f 01 00       	call   c00281f0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 f8 dd 02 c0 ff 07 	mov    WORD PTR ds:0xc002ddf8,0x7ff
c000f323:	a3 fa dd 02 c0       	mov    ds:0xc002ddfa,eax
c000f328:	0f 01 1d f8 dd 02 c0 	lidtd  ds:0xc002ddf8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 9a 26 00 00       	call   c0011caf <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 ca 2c 00 00       	call   c00122ea <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 12 1e 00 00       	call   c0011450 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 43 1e 00 00       	call   c0011490 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 e8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dde8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 14 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cd14
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 14 cd 02 c0       	mov    eax,ds:0xc002cd14
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 28 9d 02 c0       	push   0xc0029d28
c000f6f4:	e8 16 34 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 14 cd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002cd14,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 90 25 00 00       	call   c0011caf <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 14 cd 02 c0    	mov    ebp,DWORD PTR ds:0xc002cd14
c000f727:	e8 b1 07 00 00       	call   c000fedd <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 b1 2a 00 00       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 14 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd14
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 58 9d 02 c0       	push   0xc0029d58
c000f7ad:	e8 d9 a9 00 00       	call   c001a18b <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 5d 9d 02 c0       	push   0xc0029d5d
c000f7c3:	e8 c3 a9 00 00       	call   c001a18b <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 ad e0 00 00       	call   c001d886 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 9e e0 00 00       	call   c001d888 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 b4 24 00 00       	call   c0011caf <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 e0 2a 00 00       	call   c00122ea <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 99 24 00 00       	call   c0011caf <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 83 27 00 00       	call   c0011fa6 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 20 cd 02 c0       	mov    eax,ds:0xc002cd20
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 80 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de80,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 20 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd20
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 80 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de80,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 80 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de80,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 80 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de80,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 80 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de80,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 20 cd 02 c0       	mov    eax,ds:0xc002cd20
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 32 0c 00 00       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 80 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de80,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 f4 0b 00 00       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 8b 0c 00 00       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 20 cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd20
c000fb46:	80 3d 80 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de80,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 20 cd 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002cd20,0x8000
c000fba0:	c6 05 80 de 02 c0 01 	mov    BYTE PTR ds:0xc002de80,0x1
c000fba7:	c7 05 b8 de 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002deb8,0xc000fa13
c000fbb1:	c7 05 a4 de 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002dea4,0xc000f89a
c000fbbb:	c7 05 a0 de 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002dea0,0xc000f8e5
c000fbc5:	c7 05 ac de 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002deac,0xc000fa59
c000fbcf:	c7 05 b4 de 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002deb4,0xc000f963
c000fbd9:	c7 05 a8 de 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002dea8,0xc000f9c1
c000fbe3:	c7 05 b0 de 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002deb0,0xc000f9c2
c000fbed:	c7 05 bc de 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002debc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 72 09 00 00       	call   c001057c <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 64 9d 02 c0       	push   0xc0029d64
c000fc4a:	e8 c0 2e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 d1 03 00 00       	call   c0010037 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 c5 1f 00 00       	call   c0011c30 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 71 b5 02 c0       	push   0xc002b571
c000fc92:	e8 f4 a4 00 00       	call   c001a18b <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 00 de 02 c0    	mov    DWORD PTR ds:0xc002de00,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 37 21 00 00       	call   c0011de4 <VAS::VAS()>
c000fcad:	89 1d 64 df 02 c0    	mov    DWORD PTR ds:0xc002df64,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 7b 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d7b
c000fcbf:	e8 4b 2e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000fcc4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccb:	e8 70 fb ff ff       	call   c000f840 <malloc>
c000fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd3:	89 c6                	mov    esi,eax
c000fcd5:	e8 60 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcda:	58                   	pop    eax
c000fcdb:	89 35 e8 dd 02 c0    	mov    DWORD PTR ds:0xc002dde8,esi
c000fce1:	5a                   	pop    edx
c000fce2:	56                   	push   esi
c000fce3:	68 98 9d 02 c0       	push   0xc0029d98
c000fce8:	e8 22 2e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000fced:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c000fcf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	50                   	push   eax
c000fcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcfe:	83 c4 14             	add    esp,0x14
c000fd01:	53                   	push   ebx
c000fd02:	e8 77 23 00 00       	call   c001207e <VAS::~VAS()>
c000fd07:	c7 04 24 ab 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dab
c000fd0e:	e8 78 a4 00 00       	call   c001a18b <Krnl::panic(char const*)>
c000fd13:	83 c4 20             	add    esp,0x20
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	c3                   	ret    

c000fd1a <Phys::allocateDMA(unsigned long)>:
c000fd1a:	55                   	push   ebp
c000fd1b:	31 d2                	xor    edx,edx
c000fd1d:	57                   	push   edi
c000fd1e:	31 ed                	xor    ebp,ebp
c000fd20:	56                   	push   esi
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	53                   	push   ebx
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	c1 ee 0c             	shr    esi,0xc
c000fd33:	eb 17                	jmp    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd35:	85 c9                	test   ecx,ecx
c000fd37:	75 04                	jne    c000fd3d <Phys::allocateDMA(unsigned long)+0x23>
c000fd39:	89 d5                	mov    ebp,edx
c000fd3b:	89 d0                	mov    eax,edx
c000fd3d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd40:	39 de                	cmp    esi,ebx
c000fd42:	74 20                	je     c000fd64 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd44:	42                   	inc    edx
c000fd45:	89 d9                	mov    ecx,ebx
c000fd47:	83 fa 2f             	cmp    edx,0x2f
c000fd4a:	7f 11                	jg     c000fd5d <Phys::allocateDMA(unsigned long)+0x43>
c000fd4c:	80 ba 40 de 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd21c0],0x0
c000fd53:	74 e0                	je     c000fd35 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	42                   	inc    edx
c000fd58:	83 fa 2f             	cmp    edx,0x2f
c000fd5b:	7e ef                	jle    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd5d:	5b                   	pop    ebx
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5e                   	pop    esi
c000fd61:	5f                   	pop    edi
c000fd62:	5d                   	pop    ebp
c000fd63:	c3                   	ret    
c000fd64:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd67:	89 d7                	mov    edi,edx
c000fd69:	4f                   	dec    edi
c000fd6a:	79 03                	jns    c000fd6f <Phys::allocateDMA(unsigned long)+0x55>
c000fd6c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd6f:	c1 ff 04             	sar    edi,0x4
c000fd72:	89 c2                	mov    edx,eax
c000fd74:	c1 fa 04             	sar    edx,0x4
c000fd77:	39 fa                	cmp    edx,edi
c000fd79:	75 2f                	jne    c000fdaa <Phys::allocateDMA(unsigned long)+0x90>
c000fd7b:	85 db                	test   ebx,ebx
c000fd7d:	74 1a                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd7f:	be 40 de 02 c0       	mov    esi,0xc002de40
c000fd84:	8d 90 40 de 02 c0    	lea    edx,[eax-0x3ffd21c0]
c000fd8a:	f7 d6                	not    esi
c000fd8c:	29 c6                	sub    esi,eax
c000fd8e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd91:	42                   	inc    edx
c000fd92:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd95:	39 d9                	cmp    ecx,ebx
c000fd97:	7f f5                	jg     c000fd8e <Phys::allocateDMA(unsigned long)+0x74>
c000fd99:	85 ff                	test   edi,edi
c000fd9b:	74 13                	je     c000fdb0 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9d:	5b                   	pop    ebx
c000fd9e:	05 50 20 0c 00       	add    eax,0xc2050
c000fda3:	5e                   	pop    esi
c000fda4:	c1 e0 0c             	shl    eax,0xc
c000fda7:	5f                   	pop    edi
c000fda8:	5d                   	pop    ebp
c000fda9:	c3                   	ret    
c000fdaa:	89 ea                	mov    edx,ebp
c000fdac:	31 c9                	xor    ecx,ecx
c000fdae:	eb a7                	jmp    c000fd57 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb0:	5b                   	pop    ebx
c000fdb1:	c1 e0 0c             	shl    eax,0xc
c000fdb4:	5e                   	pop    esi
c000fdb5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdba:	5f                   	pop    edi
c000fdbb:	5d                   	pop    ebp
c000fdbc:	c3                   	ret    

c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcb:	c1 e9 0c             	shr    ecx,0xc
c000fdce:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd3:	76 25                	jbe    c000fdfa <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdda:	c1 e8 0c             	shr    eax,0xc
c000fddd:	8d 50 10             	lea    edx,[eax+0x10]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 15                	je     c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde4:	8d 82 40 de 02 c0    	lea    eax,[edx-0x3ffd21c0]
c000fdea:	8d 94 11 40 de 02 c0 	lea    edx,[ecx+edx*1-0x3ffd21c0]
c000fdf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf4:	40                   	inc    eax
c000fdf5:	39 d0                	cmp    eax,edx
c000fdf7:	75 f8                	jne    c000fdf1 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf9:	c3                   	ret    
c000fdfa:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe00:	c1 ea 0c             	shr    edx,0xc
c000fe03:	eb db                	jmp    c000fde0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe05 <Phys::setPageState(unsigned long, bool)>:
c000fe05:	56                   	push   esi
c000fe06:	ba 01 00 00 00       	mov    edx,0x1
c000fe0b:	53                   	push   ebx
c000fe0c:	8b 35 18 cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd18
c000fe12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1a:	89 c8                	mov    eax,ecx
c000fe1c:	83 e1 07             	and    ecx,0x7
c000fe1f:	c1 e8 03             	shr    eax,0x3
c000fe22:	d3 e3                	shl    ebx,cl
c000fe24:	01 c6                	add    esi,eax
c000fe26:	d3 e2                	shl    edx,cl
c000fe28:	f7 d2                	not    edx
c000fe2a:	20 16                	and    BYTE PTR [esi],dl
c000fe2c:	03 05 18 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd18
c000fe32:	08 18                	or     BYTE PTR [eax],bl
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Phys::getPageState(unsigned long)>:
c000fe37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3b:	8b 15 18 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd18
c000fe41:	89 c8                	mov    eax,ecx
c000fe43:	83 e1 07             	and    ecx,0x7
c000fe46:	c1 e8 03             	shr    eax,0x3
c000fe49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4d:	d3 f8                	sar    eax,cl
c000fe4f:	83 e0 01             	and    eax,0x1
c000fe52:	c3                   	ret    

c000fe53 <Phys::freePage(unsigned long)>:
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe61:	76 57                	jbe    c000feba <Phys::freePage(unsigned long)+0x67>
c000fe63:	c1 eb 0c             	shr    ebx,0xc
c000fe66:	53                   	push   ebx
c000fe67:	e8 cb ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fe6c:	5a                   	pop    edx
c000fe6d:	84 c0                	test   al,al
c000fe6f:	74 5b                	je     c000fecc <Phys::freePage(unsigned long)+0x79>
c000fe71:	a1 2c de 02 c0       	mov    eax,ds:0xc002de2c
c000fe76:	48                   	dec    eax
c000fe77:	a3 2c de 02 c0       	mov    ds:0xc002de2c,eax
c000fe7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	c1 e0 02             	shl    eax,0x2
c000fe85:	99                   	cdq    
c000fe86:	f7 3d 30 de 02 c0    	idiv   DWORD PTR ds:0xc002de30
c000fe8c:	39 05 28 de 02 c0    	cmp    DWORD PTR ds:0xc002de28,eax
c000fe92:	75 13                	jne    c000fea7 <Phys::freePage(unsigned long)+0x54>
c000fe94:	83 ec 08             	sub    esp,0x8
c000fe97:	6a 00                	push   0x0
c000fe99:	53                   	push   ebx
c000fe9a:	e8 66 ff ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	83 c4 08             	add    esp,0x8
c000fea5:	5b                   	pop    ebx
c000fea6:	c3                   	ret    
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	a3 28 de 02 c0       	mov    ds:0xc002de28,eax
c000feaf:	50                   	push   eax
c000feb0:	e8 5b 0a 00 00       	call   c0010910 <VgaText::updateRAMUsageDisplay(int)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	eb da                	jmp    c000fe94 <Phys::freePage(unsigned long)+0x41>
c000feba:	68 00 10 00 00       	push   0x1000
c000febf:	53                   	push   ebx
c000fec0:	e8 f8 fe ff ff       	call   c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>
c000fec5:	59                   	pop    ecx
c000fec6:	5b                   	pop    ebx
c000fec7:	83 c4 08             	add    esp,0x8
c000feca:	5b                   	pop    ebx
c000fecb:	c3                   	ret    
c000fecc:	c7 44 24 10 c6 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029dc6
c000fed4:	83 c4 08             	add    esp,0x8
c000fed7:	5b                   	pop    ebx
c000fed8:	e9 ae a2 00 00       	jmp    c001a18b <Krnl::panic(char const*)>

c000fedd <Phys::allocatePage()>:
c000fedd:	56                   	push   esi
c000fede:	53                   	push   ebx
c000fedf:	51                   	push   ecx
c000fee0:	8b 35 20 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de20
c000fee6:	89 f3                	mov    ebx,esi
c000fee8:	eb 0a                	jmp    c000fef4 <Phys::allocatePage()+0x17>
c000feea:	89 1d 20 de 02 c0    	mov    DWORD PTR ds:0xc002de20,ebx
c000fef0:	39 de                	cmp    esi,ebx
c000fef2:	74 24                	je     c000ff18 <Phys::allocatePage()+0x3b>
c000fef4:	53                   	push   ebx
c000fef5:	e8 3d ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fefa:	5a                   	pop    edx
c000fefb:	84 c0                	test   al,al
c000fefd:	74 5a                	je     c000ff59 <Phys::allocatePage()+0x7c>
c000feff:	43                   	inc    ebx
c000ff00:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff06:	75 e2                	jne    c000feea <Phys::allocatePage()+0xd>
c000ff08:	31 db                	xor    ebx,ebx
c000ff0a:	c7 05 20 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de20,0x0
c000ff14:	39 de                	cmp    esi,ebx
c000ff16:	75 dc                	jne    c000fef4 <Phys::allocatePage()+0x17>
c000ff18:	83 ec 0c             	sub    esp,0xc
c000ff1b:	68 dc 9d 02 c0       	push   0xc0029ddc
c000ff20:	e8 ea 2b 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c000ff25:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff2c:	e8 e9 fd ff ff       	call   c000fd1a <Phys::allocateDMA(unsigned long)>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	85 c0                	test   eax,eax
c000ff36:	75 56                	jne    c000ff8e <Phys::allocatePage()+0xb1>
c000ff38:	83 ec 0c             	sub    esp,0xc
c000ff3b:	68 ed 9d 02 c0       	push   0xc0029ded
c000ff40:	e8 46 a2 00 00       	call   c001a18b <Krnl::panic(char const*)>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	8b 1d 20 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de20
c000ff4e:	53                   	push   ebx
c000ff4f:	e8 e3 fe ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000ff54:	5a                   	pop    edx
c000ff55:	84 c0                	test   al,al
c000ff57:	75 a6                	jne    c000feff <Phys::allocatePage()+0x22>
c000ff59:	6a 01                	push   0x1
c000ff5b:	53                   	push   ebx
c000ff5c:	e8 a4 fe ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000ff61:	a1 2c de 02 c0       	mov    eax,ds:0xc002de2c
c000ff66:	59                   	pop    ecx
c000ff67:	40                   	inc    eax
c000ff68:	5b                   	pop    ebx
c000ff69:	a3 2c de 02 c0       	mov    ds:0xc002de2c,eax
c000ff6e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff71:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff74:	c1 e0 02             	shl    eax,0x2
c000ff77:	99                   	cdq    
c000ff78:	f7 3d 30 de 02 c0    	idiv   DWORD PTR ds:0xc002de30
c000ff7e:	39 05 28 de 02 c0    	cmp    DWORD PTR ds:0xc002de28,eax
c000ff84:	75 0c                	jne    c000ff92 <Phys::allocatePage()+0xb5>
c000ff86:	a1 20 de 02 c0       	mov    eax,ds:0xc002de20
c000ff8b:	c1 e0 0c             	shl    eax,0xc
c000ff8e:	5a                   	pop    edx
c000ff8f:	5b                   	pop    ebx
c000ff90:	5e                   	pop    esi
c000ff91:	c3                   	ret    
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	a3 28 de 02 c0       	mov    ds:0xc002de28,eax
c000ff9a:	50                   	push   eax
c000ff9b:	e8 70 09 00 00       	call   c0010910 <VgaText::updateRAMUsageDisplay(int)>
c000ffa0:	83 c4 10             	add    esp,0x10
c000ffa3:	eb e1                	jmp    c000ff86 <Phys::allocatePage()+0xa9>

c000ffa5 <Phys::allocateContiguousPages(int)>:
c000ffa5:	57                   	push   edi
c000ffa6:	56                   	push   esi
c000ffa7:	53                   	push   ebx
c000ffa8:	31 db                	xor    ebx,ebx
c000ffaa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffae:	e8 d3 d8 00 00       	call   c001d886 <lockScheduler()>
c000ffb3:	85 db                	test   ebx,ebx
c000ffb5:	75 11                	jne    c000ffc8 <Phys::allocateContiguousPages(int)+0x23>
c000ffb7:	e8 21 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffbc:	83 ff 01             	cmp    edi,0x1
c000ffbf:	89 c6                	mov    esi,eax
c000ffc1:	74 21                	je     c000ffe4 <Phys::allocateContiguousPages(int)+0x3f>
c000ffc3:	bb 01 00 00 00       	mov    ebx,0x1
c000ffc8:	e8 10 ff ff ff       	call   c000fedd <Phys::allocatePage()>
c000ffcd:	89 da                	mov    edx,ebx
c000ffcf:	c1 e2 0c             	shl    edx,0xc
c000ffd2:	01 f2                	add    edx,esi
c000ffd4:	39 c2                	cmp    edx,eax
c000ffd6:	74 17                	je     c000ffef <Phys::allocateContiguousPages(int)+0x4a>
c000ffd8:	bb 01 00 00 00       	mov    ebx,0x1
c000ffdd:	89 c6                	mov    esi,eax
c000ffdf:	83 ff 01             	cmp    edi,0x1
c000ffe2:	75 e4                	jne    c000ffc8 <Phys::allocateContiguousPages(int)+0x23>
c000ffe4:	e8 9f d8 00 00       	call   c001d888 <unlockScheduler()>
c000ffe9:	89 f0                	mov    eax,esi
c000ffeb:	5b                   	pop    ebx
c000ffec:	5e                   	pop    esi
c000ffed:	5f                   	pop    edi
c000ffee:	c3                   	ret    
c000ffef:	43                   	inc    ebx
c000fff0:	39 fb                	cmp    ebx,edi
c000fff2:	75 bf                	jne    c000ffb3 <Phys::allocateContiguousPages(int)+0xe>
c000fff4:	e8 8f d8 00 00       	call   c001d888 <unlockScheduler()>
c000fff9:	89 f0                	mov    eax,esi
c000fffb:	5b                   	pop    ebx
c000fffc:	5e                   	pop    esi
c000fffd:	5f                   	pop    edi
c000fffe:	c3                   	ret    

c000ffff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ffff:	56                   	push   esi
c0010000:	53                   	push   ebx
c0010001:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010005:	39 1d 24 de 02 c0    	cmp    DWORD PTR ds:0xc002de24,ebx
c001000b:	73 06                	jae    c0010013 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001000d:	89 1d 24 de 02 c0    	mov    DWORD PTR ds:0xc002de24,ebx
c0010013:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010017:	c1 eb 0c             	shr    ebx,0xc
c001001a:	c1 e8 0c             	shr    eax,0xc
c001001d:	39 d8                	cmp    eax,ebx
c001001f:	73 13                	jae    c0010034 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010021:	6a 00                	push   0x0
c0010023:	8d 70 01             	lea    esi,[eax+0x1]
c0010026:	50                   	push   eax
c0010027:	e8 d9 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c001002c:	5a                   	pop    edx
c001002d:	89 f0                	mov    eax,esi
c001002f:	59                   	pop    ecx
c0010030:	39 f3                	cmp    ebx,esi
c0010032:	75 ed                	jne    c0010021 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010034:	5b                   	pop    ebx
c0010035:	5e                   	pop    esi
c0010036:	c3                   	ret    

c0010037 <Phys::physicalMemorySetup(unsigned int)>:
c0010037:	55                   	push   ebp
c0010038:	57                   	push   edi
c0010039:	56                   	push   esi
c001003a:	53                   	push   ebx
c001003b:	31 db                	xor    ebx,ebx
c001003d:	83 ec 40             	sub    esp,0x40
c0010040:	6a 30                	push   0x30
c0010042:	6a 00                	push   0x0
c0010044:	68 40 de 02 c0       	push   0xc002de40
c0010049:	e8 2a 07 ff ff       	call   c0000778 <memset>
c001004e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010052:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010057:	05 00 10 00 00       	add    eax,0x1000
c001005c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	83 ec 08             	sub    esp,0x8
c0010066:	6a 01                	push   0x1
c0010068:	53                   	push   ebx
c0010069:	43                   	inc    ebx
c001006a:	e8 96 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c001006f:	83 c4 10             	add    esp,0x10
c0010072:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010078:	75 e9                	jne    c0010063 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001007a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010081:	66 85 c0             	test   ax,ax
c0010084:	0f 84 8e 01 00 00    	je     c0010218 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001008a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001008e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010096:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001009a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c001009f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100a3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100ab:	eb 15                	jmp    c00100c2 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100ad:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100b1:	83 c3 18             	add    ebx,0x18
c00100b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100b8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100bc:	0f 84 66 01 00 00    	je     c0010228 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100c2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100d3:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100d5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100d8:	01 f0                	add    eax,esi
c00100da:	55                   	push   ebp
c00100db:	11 fa                	adc    edx,edi
c00100dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100e1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100e9:	56                   	push   esi
c00100ea:	68 28 9e 02 c0       	push   0xc0029e28
c00100ef:	e8 1b 2a 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00100f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100f8:	83 c4 10             	add    esp,0x10
c00100fb:	09 f8                	or     eax,edi
c00100fd:	0f 85 25 01 00 00    	jne    c0010228 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010103:	4d                   	dec    ebp
c0010104:	75 a7                	jne    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010106:	ba 00 00 08 00       	mov    edx,0x80000
c001010b:	89 c1                	mov    ecx,eax
c001010d:	39 f2                	cmp    edx,esi
c001010f:	19 f9                	sbb    ecx,edi
c0010111:	0f 82 a7 00 00 00    	jb     c00101be <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010117:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001011b:	89 c1                	mov    ecx,eax
c001011d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010121:	0f 83 97 00 00 00    	jae    c00101be <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010127:	ba 00 00 0a 00       	mov    edx,0xa0000
c001012c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010130:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010134:	39 fa                	cmp    edx,edi
c0010136:	19 e8                	sbb    eax,ebp
c0010138:	0f 82 14 01 00 00    	jb     c0010252 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001013e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010142:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010146:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001014c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010151:	83 d5 ff             	adc    ebp,0xffffffff
c0010154:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010158:	31 c0                	xor    eax,eax
c001015a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001015e:	39 fa                	cmp    edx,edi
c0010160:	89 c1                	mov    ecx,eax
c0010162:	19 e9                	sbb    ecx,ebp
c0010164:	0f 83 43 ff ff ff    	jae    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c001016a:	be 00 00 08 00       	mov    esi,0x80000
c001016f:	50                   	push   eax
c0010170:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010174:	57                   	push   edi
c0010175:	56                   	push   esi
c0010176:	68 4c 9e 02 c0       	push   0xc0029e4c
c001017b:	e8 8f 29 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0010180:	5a                   	pop    edx
c0010181:	59                   	pop    ecx
c0010182:	57                   	push   edi
c0010183:	56                   	push   esi
c0010184:	e8 76 fe ff ff       	call   c000ffff <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010189:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001018d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010191:	83 c4 0c             	add    esp,0xc
c0010194:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010198:	03 05 30 de 02 c0    	add    eax,DWORD PTR ds:0xc002de30
c001019e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101a5:	a3 30 de 02 c0       	mov    ds:0xc002de30,eax
c00101aa:	52                   	push   edx
c00101ab:	50                   	push   eax
c00101ac:	68 09 9e 02 c0       	push   0xc0029e09
c00101b1:	e8 59 29 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00101b6:	83 c4 10             	add    esp,0x10
c00101b9:	e9 ef fe ff ff       	jmp    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101be:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101ca:	39 ea                	cmp    edx,ebp
c00101cc:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101d0:	0f 82 d7 fe ff ff    	jb     c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101d6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101db:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101df:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101e3:	0f 83 c4 fe ff ff    	jae    c00100ad <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e9:	39 ee                	cmp    esi,ebp
c00101eb:	89 f8                	mov    eax,edi
c00101ed:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101f1:	0f 83 78 ff ff ff    	jae    c001016f <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101ff:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010203:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010207:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001020b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001020f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010213:	e9 57 ff ff ff       	jmp    c001016f <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010218:	83 ec 0c             	sub    esp,0xc
c001021b:	68 fb 9d 02 c0       	push   0xc0029dfb
c0010220:	e8 66 9f 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0010225:	83 c4 10             	add    esp,0x10
c0010228:	bb 40 01 00 00       	mov    ebx,0x140
c001022d:	83 ec 08             	sub    esp,0x8
c0010230:	6a 00                	push   0x0
c0010232:	53                   	push   ebx
c0010233:	43                   	inc    ebx
c0010234:	e8 cc fb ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010239:	ff 05 30 de 02 c0    	inc    DWORD PTR ds:0xc002de30
c001023f:	83 c4 10             	add    esp,0x10
c0010242:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010248:	75 e3                	jne    c001022d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001024a:	83 c4 3c             	add    esp,0x3c
c001024d:	5b                   	pop    ebx
c001024e:	5e                   	pop    esi
c001024f:	5f                   	pop    edi
c0010250:	5d                   	pop    ebp
c0010251:	c3                   	ret    
c0010252:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001025a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010262:	e9 d7 fe ff ff       	jmp    c001013e <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010267:	90                   	nop

c0010268 <Pipe::isAtty()>:
c0010268:	31 c0                	xor    eax,eax
c001026a:	c3                   	ret    
c001026b:	90                   	nop

c001026c <Pipe::~Pipe()>:
c001026c:	83 ec 0c             	sub    esp,0xc
c001026f:	ba b8 9e 02 c0       	mov    edx,0xc0029eb8
c0010274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010278:	89 10                	mov    DWORD PTR [eax],edx
c001027a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027e:	83 ec 0c             	sub    esp,0xc
c0010281:	50                   	push   eax
c0010282:	e8 37 16 00 00       	call   c00118be <UnixFile::~UnixFile()>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	90                   	nop
c001028b:	83 c4 0c             	add    esp,0xc
c001028e:	c3                   	ret    
c001028f:	90                   	nop

c0010290 <Pipe::~Pipe()>:
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	83 ec 0c             	sub    esp,0xc
c0010296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001029a:	e8 cd ff ff ff       	call   c001026c <Pipe::~Pipe()>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	83 ec 08             	sub    esp,0x8
c00102a5:	6a 20                	push   0x20
c00102a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ab:	e8 7f 27 00 00       	call   c0012a2f <operator delete(void*, unsigned long)>
c00102b0:	83 c4 10             	add    esp,0x10
c00102b3:	83 c4 0c             	add    esp,0xc
c00102b6:	c3                   	ret    
c00102b7:	90                   	nop

c00102b8 <Pipe::read(unsigned long long, void*, int*)>:
c00102b8:	55                   	push   ebp
c00102b9:	57                   	push   edi
c00102ba:	56                   	push   esi
c00102bb:	53                   	push   ebx
c00102bc:	83 ec 1c             	sub    esp,0x1c
c00102bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102ce:	89 c8                	mov    eax,ecx
c00102d0:	99                   	cdq    
c00102d1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102d5:	74 19                	je     c00102f0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102d7:	39 f9                	cmp    ecx,edi
c00102d9:	89 d1                	mov    ecx,edx
c00102db:	19 f1                	sbb    ecx,esi
c00102dd:	73 11                	jae    c00102f0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102df:	e8 a2 d5 00 00       	call   c001d886 <lockScheduler()>
c00102e4:	e8 d9 d8 00 00       	call   c001dbc2 <schedule()>
c00102e9:	e8 9a d5 00 00       	call   c001d888 <unlockScheduler()>
c00102ee:	eb db                	jmp    c00102cb <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102f0:	39 f8                	cmp    eax,edi
c00102f2:	89 d1                	mov    ecx,edx
c00102f4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102f8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00102fc:	19 f1                	sbb    ecx,esi
c00102fe:	73 08                	jae    c0010308 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010300:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010304:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010308:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001030b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001030e:	29 c6                	sub    esi,eax
c0010310:	89 f1                	mov    ecx,esi
c0010312:	c1 f9 1f             	sar    ecx,0x1f
c0010315:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010319:	89 ca                	mov    edx,ecx
c001031b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001031f:	19 d1                	sbb    ecx,edx
c0010321:	73 04                	jae    c0010327 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010323:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010327:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001032b:	89 fd                	mov    ebp,edi
c001032d:	29 f5                	sub    ebp,esi
c001032f:	85 f6                	test   esi,esi
c0010331:	74 12                	je     c0010345 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010333:	52                   	push   edx
c0010334:	56                   	push   esi
c0010335:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010338:	50                   	push   eax
c0010339:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001033d:	e8 02 04 ff ff       	call   c0000744 <memcpy>
c0010342:	83 c4 10             	add    esp,0x10
c0010345:	85 ed                	test   ebp,ebp
c0010347:	74 12                	je     c001035b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010349:	50                   	push   eax
c001034a:	55                   	push   ebp
c001034b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001034e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010352:	56                   	push   esi
c0010353:	e8 ec 03 ff ff       	call   c0000744 <memcpy>
c0010358:	83 c4 10             	add    esp,0x10
c001035b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001035e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010361:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010364:	99                   	cdq    
c0010365:	89 f7                	mov    edi,esi
c0010367:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001036b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001036f:	c1 ff 1f             	sar    edi,0x1f
c0010372:	57                   	push   edi
c0010373:	56                   	push   esi
c0010374:	52                   	push   edx
c0010375:	50                   	push   eax
c0010376:	e8 71 62 01 00       	call   c00265ec <__umoddi3>
c001037b:	83 c4 10             	add    esp,0x10
c001037e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010381:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010386:	75 10                	jne    c0010398 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010388:	83 ec 0c             	sub    esp,0xc
c001038b:	68 75 9e 02 c0       	push   0xc0029e75
c0010390:	e8 f6 9d 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0010395:	83 c4 10             	add    esp,0x10
c0010398:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001039c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a0:	89 10                	mov    DWORD PTR [eax],edx
c00103a2:	83 c4 1c             	add    esp,0x1c
c00103a5:	31 c0                	xor    eax,eax
c00103a7:	5b                   	pop    ebx
c00103a8:	5e                   	pop    esi
c00103a9:	5f                   	pop    edi
c00103aa:	5d                   	pop    ebp
c00103ab:	c3                   	ret    

c00103ac <Pipe::write(unsigned long long, void*, int*)>:
c00103ac:	55                   	push   ebp
c00103ad:	57                   	push   edi
c00103ae:	56                   	push   esi
c00103af:	53                   	push   ebx
c00103b0:	83 ec 1c             	sub    esp,0x1c
c00103b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00103c2:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103c5:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103cc:	89 de                	mov    esi,ebx
c00103ce:	89 df                	mov    edi,ebx
c00103d0:	c1 ff 1f             	sar    edi,0x1f
c00103d3:	01 c6                	add    esi,eax
c00103d5:	89 c8                	mov    eax,ecx
c00103d7:	11 d7                	adc    edi,edx
c00103d9:	99                   	cdq    
c00103da:	39 f1                	cmp    ecx,esi
c00103dc:	89 d0                	mov    eax,edx
c00103de:	19 f8                	sbb    eax,edi
c00103e0:	b8 01 00 00 00       	mov    eax,0x1
c00103e5:	0f 82 80 00 00 00    	jb     c001046b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103ee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103f1:	01 d8                	add    eax,ebx
c00103f3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103f7:	99                   	cdq    
c00103f8:	f7 f9                	idiv   ecx
c00103fa:	29 d1                	sub    ecx,edx
c00103fc:	89 d7                	mov    edi,edx
c00103fe:	89 c8                	mov    eax,ecx
c0010400:	99                   	cdq    
c0010401:	39 ce                	cmp    esi,ecx
c0010403:	19 d3                	sbb    ebx,edx
c0010405:	bb 00 00 00 00       	mov    ebx,0x0
c001040a:	72 04                	jb     c0010410 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001040c:	89 f3                	mov    ebx,esi
c001040e:	29 cb                	sub    ebx,ecx
c0010410:	89 f1                	mov    ecx,esi
c0010412:	29 d9                	sub    ecx,ebx
c0010414:	74 1a                	je     c0010430 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010416:	52                   	push   edx
c0010417:	51                   	push   ecx
c0010418:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001041c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010420:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010423:	57                   	push   edi
c0010424:	e8 1b 03 ff ff       	call   c0000744 <memcpy>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010430:	85 db                	test   ebx,ebx
c0010432:	74 12                	je     c0010446 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010434:	50                   	push   eax
c0010435:	53                   	push   ebx
c0010436:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001043a:	51                   	push   ecx
c001043b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001043e:	e8 01 03 ff ff       	call   c0000744 <memcpy>
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010449:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001044e:	75 10                	jne    c0010460 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010450:	83 ec 0c             	sub    esp,0xc
c0010453:	68 91 9e 02 c0       	push   0xc0029e91
c0010458:	e8 2e 9d 00 00       	call   c001a18b <Krnl::panic(char const*)>
c001045d:	83 c4 10             	add    esp,0x10
c0010460:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010464:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010467:	89 38                	mov    DWORD PTR [eax],edi
c0010469:	31 c0                	xor    eax,eax
c001046b:	83 c4 1c             	add    esp,0x1c
c001046e:	5b                   	pop    ebx
c001046f:	5e                   	pop    esi
c0010470:	5f                   	pop    edi
c0010471:	5d                   	pop    ebp
c0010472:	c3                   	ret    
c0010473:	90                   	nop

c0010474 <Pipe::Pipe(int)>:
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047b:	83 ec 08             	sub    esp,0x8
c001047e:	6a 00                	push   0x0
c0010480:	50                   	push   eax
c0010481:	e8 56 12 00 00       	call   c00116dc <UnixFile::UnixFile(int)>
c0010486:	83 c4 10             	add    esp,0x10
c0010489:	ba b8 9e 02 c0       	mov    edx,0xc0029eb8
c001048e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010492:	89 10                	mov    DWORD PTR [eax],edx
c0010494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010498:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001049c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001049f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ae:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104b9:	83 ec 0c             	sub    esp,0xc
c00104bc:	50                   	push   eax
c00104bd:	e8 7e f3 ff ff       	call   c000f840 <malloc>
c00104c2:	83 c4 10             	add    esp,0x10
c00104c5:	89 c2                	mov    edx,eax
c00104c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104d6:	90                   	nop
c00104d7:	83 c4 0c             	add    esp,0xc
c00104da:	c3                   	ret    
c00104db:	90                   	nop

c00104dc <VgaText::isAtty()>:
c00104dc:	b0 01                	mov    al,0x1
c00104de:	c3                   	ret    
c00104df:	90                   	nop

c00104e0 <VgaText::~VgaText()>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	ba 74 9f 02 c0       	mov    edx,0xc0029f74
c00104e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ec:	89 10                	mov    DWORD PTR [eax],edx
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	83 ec 0c             	sub    esp,0xc
c00104f5:	50                   	push   eax
c00104f6:	e8 c3 13 00 00       	call   c00118be <UnixFile::~UnixFile()>
c00104fb:	83 c4 10             	add    esp,0x10
c00104fe:	90                   	nop
c00104ff:	83 c4 0c             	add    esp,0xc
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <VgaText::~VgaText()>:
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	83 ec 0c             	sub    esp,0xc
c001050a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050e:	e8 cd ff ff ff       	call   c00104e0 <VgaText::~VgaText()>
c0010513:	83 c4 10             	add    esp,0x10
c0010516:	83 ec 08             	sub    esp,0x8
c0010519:	68 60 12 00 00       	push   0x1260
c001051e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010522:	e8 08 25 00 00       	call   c0012a2f <operator delete(void*, unsigned long)>
c0010527:	83 c4 10             	add    esp,0x10
c001052a:	83 c4 0c             	add    esp,0xc
c001052d:	c3                   	ret    

c001052e <VgaText::read(unsigned long long, void*, int*)>:
c001052e:	83 ec 10             	sub    esp,0x10
c0010531:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010535:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010539:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053d:	e8 4a 59 00 00       	call   c0015e8c <readKeyboard(VgaText*, char*, unsigned long)>
c0010542:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010546:	89 02                	mov    DWORD PTR [edx],eax
c0010548:	31 c0                	xor    eax,eax
c001054a:	83 c4 1c             	add    esp,0x1c
c001054d:	c3                   	ret    

c001054e <setTerminalScrollLock(bool)>:
c001054e:	c3                   	ret    

c001054f <addToTerminalCycle(VgaText*)>:
c001054f:	8b 15 c0 de 02 c0    	mov    edx,DWORD PTR ds:0xc002dec0
c0010555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010559:	85 d2                	test   edx,edx
c001055b:	75 0c                	jne    c0010569 <addToTerminalCycle(VgaText*)+0x1a>
c001055d:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010563:	a3 c0 de 02 c0       	mov    ds:0xc002dec0,eax
c0010568:	c3                   	ret    
c0010569:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001056f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010575:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001057b:	c3                   	ret    

c001057c <installVgaTextImplementation()>:
c001057c:	83 ec 10             	sub    esp,0x10
c001057f:	6a 20                	push   0x20
c0010581:	6a 00                	push   0x0
c0010583:	68 a0 de 02 c0       	push   0xc002dea0
c0010588:	e8 eb 01 ff ff       	call   c0000778 <memset>
c001058d:	83 c4 1c             	add    esp,0x1c
c0010590:	c3                   	ret    

c0010591 <scrollTerminalScrollLock(int)>:
c0010591:	c3                   	ret    

c0010592 <VgaText::load()>:
c0010592:	53                   	push   ebx
c0010593:	31 c0                	xor    eax,eax
c0010595:	83 ec 58             	sub    esp,0x58
c0010598:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001059c:	89 e2                	mov    edx,esp
c001059e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105a2:	40                   	inc    eax
c00105a3:	83 f8 50             	cmp    eax,0x50
c00105a6:	75 f6                	jne    c001059e <VgaText::load()+0xc>
c00105a8:	31 c0                	xor    eax,eax
c00105aa:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105b1:	84 c9                	test   cl,cl
c00105b3:	74 06                	je     c00105bb <VgaText::load()+0x29>
c00105b5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105b8:	40                   	inc    eax
c00105b9:	eb ef                	jmp    c00105aa <VgaText::load()+0x18>
c00105bb:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105c1:	85 c0                	test   eax,eax
c00105c3:	74 09                	je     c00105ce <VgaText::load()+0x3c>
c00105c5:	51                   	push   ecx
c00105c6:	51                   	push   ecx
c00105c7:	52                   	push   edx
c00105c8:	53                   	push   ebx
c00105c9:	ff d0                	call   eax
c00105cb:	83 c4 10             	add    esp,0x10
c00105ce:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105d4:	85 c0                	test   eax,eax
c00105d6:	74 09                	je     c00105e1 <VgaText::load()+0x4f>
c00105d8:	83 ec 0c             	sub    esp,0xc
c00105db:	53                   	push   ebx
c00105dc:	ff d0                	call   eax
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 c4 58             	add    esp,0x58
c00105e4:	5b                   	pop    ebx
c00105e5:	c3                   	ret    

c00105e6 <VgaText::updateCursor()>:
c00105e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ea:	39 05 c4 de 02 c0    	cmp    DWORD PTR ds:0xc002dec4,eax
c00105f0:	75 0c                	jne    c00105fe <VgaText::updateCursor()+0x18>
c00105f2:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00105f8:	85 c0                	test   eax,eax
c00105fa:	74 02                	je     c00105fe <VgaText::updateCursor()+0x18>
c00105fc:	ff e0                	jmp    eax
c00105fe:	c3                   	ret    
c00105ff:	90                   	nop

c0010600 <VgaText::showCursor(bool)>:
c0010600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010604:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010608:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001060e:	c3                   	ret    
c001060f:	90                   	nop

c0010610 <VgaText::disableBlink(bool)>:
c0010610:	56                   	push   esi
c0010611:	53                   	push   ebx
c0010612:	51                   	push   ecx
c0010613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010617:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001061b:	39 1d c4 de 02 c0    	cmp    DWORD PTR ds:0xc002dec4,ebx
c0010621:	75 18                	jne    c001063b <VgaText::disableBlink(bool)+0x2b>
c0010623:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010629:	85 c0                	test   eax,eax
c001062b:	74 0e                	je     c001063b <VgaText::disableBlink(bool)+0x2b>
c001062d:	89 f1                	mov    ecx,esi
c001062f:	52                   	push   edx
c0010630:	52                   	push   edx
c0010631:	0f b6 d1             	movzx  edx,cl
c0010634:	52                   	push   edx
c0010635:	53                   	push   ebx
c0010636:	ff d0                	call   eax
c0010638:	83 c4 10             	add    esp,0x10
c001063b:	89 f0                	mov    eax,esi
c001063d:	83 f0 01             	xor    eax,0x1
c0010640:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010646:	58                   	pop    eax
c0010647:	5b                   	pop    ebx
c0010648:	5e                   	pop    esi
c0010649:	c3                   	ret    

c001064a <VgaText::doANSI_SGR(int)>:
c001064a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001064e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010652:	85 d2                	test   edx,edx
c0010654:	75 14                	jne    c001066a <VgaText::doANSI_SGR(int)+0x20>
c0010656:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001065c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010662:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010668:	eb 65                	jmp    c00106cf <VgaText::doANSI_SGR(int)+0x85>
c001066a:	83 fa 07             	cmp    edx,0x7
c001066d:	75 14                	jne    c0010683 <VgaText::doANSI_SGR(int)+0x39>
c001066f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010675:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001067b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010681:	eb 4c                	jmp    c00106cf <VgaText::doANSI_SGR(int)+0x85>
c0010683:	83 fa 1b             	cmp    edx,0x1b
c0010686:	74 ce                	je     c0010656 <VgaText::doANSI_SGR(int)+0xc>
c0010688:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001068b:	83 f9 07             	cmp    ecx,0x7
c001068e:	77 09                	ja     c0010699 <VgaText::doANSI_SGR(int)+0x4f>
c0010690:	8b 14 8d 40 cd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd32c0]
c0010697:	eb 20                	jmp    c00106b9 <VgaText::doANSI_SGR(int)+0x6f>
c0010699:	8d 4a d8             	lea    ecx,[edx-0x28]
c001069c:	83 f9 07             	cmp    ecx,0x7
c001069f:	77 09                	ja     c00106aa <VgaText::doANSI_SGR(int)+0x60>
c00106a1:	8b 14 8d 40 cd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd32c0]
c00106a8:	eb 25                	jmp    c00106cf <VgaText::doANSI_SGR(int)+0x85>
c00106aa:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106ad:	83 f9 07             	cmp    ecx,0x7
c00106b0:	77 0e                	ja     c00106c0 <VgaText::doANSI_SGR(int)+0x76>
c00106b2:	8b 14 95 f8 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3408]
c00106b9:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106bf:	c3                   	ret    
c00106c0:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c3:	83 f9 07             	cmp    ecx,0x7
c00106c6:	77 0d                	ja     c00106d5 <VgaText::doANSI_SGR(int)+0x8b>
c00106c8:	8b 14 95 d0 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3430]
c00106cf:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106d5:	c3                   	ret    

c00106d6 <VgaText::setDefaultBgColour(VgaColour)>:
c00106d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106de:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00106e4:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106ea:	c3                   	ret    
c00106eb:	90                   	nop

c00106ec <VgaText::setDefaultFgColour(VgaColour)>:
c00106ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f4:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00106fa:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010700:	c3                   	ret    
c0010701:	90                   	nop

c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010702:	53                   	push   ebx
c0010703:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010707:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001070b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001070f:	51                   	push   ecx
c0010710:	e8 c1 ff ff ff       	call   c00106d6 <VgaText::setDefaultBgColour(VgaColour)>
c0010715:	58                   	pop    eax
c0010716:	5a                   	pop    edx
c0010717:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001071b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001071f:	5b                   	pop    ebx
c0010720:	eb ca                	jmp    c00106ec <VgaText::setDefaultFgColour(VgaColour)>

c0010722 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010722:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010726:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001072b:	83 e0 0f             	and    eax,0xf
c001072e:	c1 e2 04             	shl    edx,0x4
c0010731:	09 d0                	or     eax,edx
c0010733:	c3                   	ret    

c0010734 <VgaText::scrollScreen()>:
c0010734:	57                   	push   edi
c0010735:	56                   	push   esi
c0010736:	be 01 00 00 00       	mov    esi,0x1
c001073b:	53                   	push   ebx
c001073c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010740:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010746:	31 ff                	xor    edi,edi
c0010748:	01 d9                	add    ecx,ebx
c001074a:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001074d:	83 fe 17             	cmp    esi,0x17
c0010750:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010756:	75 28                	jne    c0010780 <VgaText::scrollScreen()+0x4c>
c0010758:	f7 c7 01 00 00 00    	test   edi,0x1
c001075e:	74 1c                	je     c001077c <VgaText::scrollScreen()+0x48>
c0010760:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010767:	50                   	push   eax
c0010768:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001076f:	50                   	push   eax
c0010770:	e8 ad ff ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010775:	5a                   	pop    edx
c0010776:	5a                   	pop    edx
c0010777:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001077a:	eb 04                	jmp    c0010780 <VgaText::scrollScreen()+0x4c>
c001077c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010780:	47                   	inc    edi
c0010781:	41                   	inc    ecx
c0010782:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010788:	75 c0                	jne    c001074a <VgaText::scrollScreen()+0x16>
c001078a:	46                   	inc    esi
c001078b:	83 fe 18             	cmp    esi,0x18
c001078e:	75 b0                	jne    c0010740 <VgaText::scrollScreen()+0xc>
c0010790:	39 1d c4 de 02 c0    	cmp    DWORD PTR ds:0xc002dec4,ebx
c0010796:	75 24                	jne    c00107bc <VgaText::scrollScreen()+0x88>
c0010798:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001079f:	74 08                	je     c00107a9 <VgaText::scrollScreen()+0x75>
c00107a1:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107a7:	eb 13                	jmp    c00107bc <VgaText::scrollScreen()+0x88>
c00107a9:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107af:	85 c0                	test   eax,eax
c00107b1:	74 09                	je     c00107bc <VgaText::scrollScreen()+0x88>
c00107b3:	83 ec 0c             	sub    esp,0xc
c00107b6:	53                   	push   ebx
c00107b7:	ff d0                	call   eax
c00107b9:	83 c4 10             	add    esp,0x10
c00107bc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107c0:	5b                   	pop    ebx
c00107c1:	5e                   	pop    esi
c00107c2:	5f                   	pop    edi
c00107c3:	e9 1e fe ff ff       	jmp    c00105e6 <VgaText::updateCursor()>

c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107cd:	c1 e0 08             	shl    eax,0x8
c00107d0:	89 c2                	mov    edx,eax
c00107d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107d7:	09 d0                	or     eax,edx
c00107d9:	c3                   	ret    

c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107da:	53                   	push   ebx
c00107db:	83 ec 08             	sub    esp,0x8
c00107de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e7:	50                   	push   eax
c00107e8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ed:	50                   	push   eax
c00107ee:	e8 2f ff ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f3:	5a                   	pop    edx
c00107f4:	0f b6 c0             	movzx  eax,al
c00107f7:	5b                   	pop    ebx
c00107f8:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107fd:	50                   	push   eax
c00107fe:	53                   	push   ebx
c00107ff:	e8 c4 ff ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010804:	5a                   	pop    edx
c0010805:	5a                   	pop    edx
c0010806:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001080c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010810:	0f b7 d2             	movzx  edx,dx
c0010813:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010818:	39 0d c4 de 02 c0    	cmp    DWORD PTR ds:0xc002dec4,ecx
c001081e:	75 14                	jne    c0010834 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010820:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010826:	85 c0                	test   eax,eax
c0010828:	74 0a                	je     c0010834 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001082a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001082e:	83 c4 08             	add    esp,0x8
c0010831:	5b                   	pop    ebx
c0010832:	ff e0                	jmp    eax
c0010834:	83 c4 08             	add    esp,0x8
c0010837:	5b                   	pop    ebx
c0010838:	c3                   	ret    
c0010839:	90                   	nop

c001083a <VgaText::getCursorX()>:
c001083a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010844:	c3                   	ret    
c0010845:	90                   	nop

c0010846 <VgaText::getCursorY()>:
c0010846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084a:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010850:	c3                   	ret    
c0010851:	90                   	nop

c0010852 <VgaText::setCursor(int, int)>:
c0010852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010856:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001085a:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010860:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010864:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001086a:	e9 77 fd ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c001086f:	90                   	nop

c0010870 <VgaText::setCursorX(int)>:
c0010870:	83 ec 10             	sub    esp,0x10
c0010873:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010877:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001087d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010881:	50                   	push   eax
c0010882:	e8 cb ff ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0010887:	83 c4 1c             	add    esp,0x1c
c001088a:	c3                   	ret    
c001088b:	90                   	nop

c001088c <VgaText::setCursorY(int)>:
c001088c:	83 ec 10             	sub    esp,0x10
c001088f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010893:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010897:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001089d:	50                   	push   eax
c001089e:	e8 af ff ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c00108a3:	83 c4 1c             	add    esp,0x1c
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <VgaText::incrementCursor(bool)>:
c00108a8:	56                   	push   esi
c00108a9:	53                   	push   ebx
c00108aa:	51                   	push   ecx
c00108ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108b3:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108b9:	40                   	inc    eax
c00108ba:	83 f8 50             	cmp    eax,0x50
c00108bd:	74 08                	je     c00108c7 <VgaText::incrementCursor(bool)+0x1f>
c00108bf:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108c5:	eb 33                	jmp    c00108fa <VgaText::incrementCursor(bool)+0x52>
c00108c7:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108cd:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108d7:	8d 50 01             	lea    edx,[eax+0x1]
c00108da:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108e0:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108e6:	75 12                	jne    c00108fa <VgaText::incrementCursor(bool)+0x52>
c00108e8:	83 ec 0c             	sub    esp,0xc
c00108eb:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00108f1:	53                   	push   ebx
c00108f2:	e8 3d fe ff ff       	call   c0010734 <VgaText::scrollScreen()>
c00108f7:	83 c4 10             	add    esp,0x10
c00108fa:	89 f0                	mov    eax,esi
c00108fc:	84 c0                	test   al,al
c00108fe:	74 0c                	je     c001090c <VgaText::incrementCursor(bool)+0x64>
c0010900:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010904:	5a                   	pop    edx
c0010905:	5b                   	pop    ebx
c0010906:	5e                   	pop    esi
c0010907:	e9 da fc ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c001090c:	58                   	pop    eax
c001090d:	5b                   	pop    ebx
c001090e:	5e                   	pop    esi
c001090f:	c3                   	ret    

c0010910 <VgaText::updateRAMUsageDisplay(int)>:
c0010910:	56                   	push   esi
c0010911:	8b 35 20 cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd20
c0010917:	53                   	push   ebx
c0010918:	bb 0a 00 00 00       	mov    ebx,0xa
c001091d:	6a 0f                	push   0xf
c001091f:	6a 00                	push   0x0
c0010921:	e8 fc fd ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010926:	5a                   	pop    edx
c0010927:	59                   	pop    ecx
c0010928:	0f b6 c8             	movzx  ecx,al
c001092b:	51                   	push   ecx
c001092c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010930:	99                   	cdq    
c0010931:	f7 fb                	idiv   ebx
c0010933:	89 d3                	mov    ebx,edx
c0010935:	83 c0 30             	add    eax,0x30
c0010938:	83 c3 30             	add    ebx,0x30
c001093b:	0f be c0             	movsx  eax,al
c001093e:	0f b6 db             	movzx  ebx,bl
c0010941:	50                   	push   eax
c0010942:	e8 81 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010947:	5a                   	pop    edx
c0010948:	5a                   	pop    edx
c0010949:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010950:	51                   	push   ecx
c0010951:	53                   	push   ebx
c0010952:	e8 71 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010957:	5b                   	pop    ebx
c0010958:	5a                   	pop    edx
c0010959:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010960:	51                   	push   ecx
c0010961:	6a 25                	push   0x25
c0010963:	e8 60 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010968:	59                   	pop    ecx
c0010969:	5b                   	pop    ebx
c001096a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010971:	5b                   	pop    ebx
c0010972:	5e                   	pop    esi
c0010973:	c3                   	ret    

c0010974 <VgaText::updateDiskUsage()>:
c0010974:	55                   	push   ebp
c0010975:	bd 10 27 00 00       	mov    ebp,0x2710
c001097a:	57                   	push   edi
c001097b:	8b 3d 20 cd 02 c0    	mov    edi,DWORD PTR ds:0xc002cd20
c0010981:	56                   	push   esi
c0010982:	53                   	push   ebx
c0010983:	6a 0f                	push   0xf
c0010985:	6a 00                	push   0x0
c0010987:	e8 96 fd ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c001098c:	5a                   	pop    edx
c001098d:	0f b6 d8             	movzx  ebx,al
c0010990:	59                   	pop    ecx
c0010991:	8b 35 68 22 03 c0    	mov    esi,DWORD PTR ds:0xc0032268
c0010997:	53                   	push   ebx
c0010998:	b9 0a 00 00 00       	mov    ecx,0xa
c001099d:	89 f0                	mov    eax,esi
c001099f:	99                   	cdq    
c00109a0:	f7 fd                	idiv   ebp
c00109a2:	99                   	cdq    
c00109a3:	f7 f9                	idiv   ecx
c00109a5:	8d 42 30             	lea    eax,[edx+0x30]
c00109a8:	0f b6 c0             	movzx  eax,al
c00109ab:	50                   	push   eax
c00109ac:	e8 17 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b1:	5d                   	pop    ebp
c00109b2:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109b7:	5a                   	pop    edx
c00109b8:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109bc:	53                   	push   ebx
c00109bd:	89 f0                	mov    eax,esi
c00109bf:	99                   	cdq    
c00109c0:	f7 fd                	idiv   ebp
c00109c2:	99                   	cdq    
c00109c3:	f7 f9                	idiv   ecx
c00109c5:	8d 42 30             	lea    eax,[edx+0x30]
c00109c8:	0f b6 c0             	movzx  eax,al
c00109cb:	50                   	push   eax
c00109cc:	e8 f7 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d1:	5d                   	pop    ebp
c00109d2:	bd 64 00 00 00       	mov    ebp,0x64
c00109d7:	5a                   	pop    edx
c00109d8:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109df:	53                   	push   ebx
c00109e0:	89 f0                	mov    eax,esi
c00109e2:	99                   	cdq    
c00109e3:	f7 fd                	idiv   ebp
c00109e5:	99                   	cdq    
c00109e6:	f7 f9                	idiv   ecx
c00109e8:	8d 42 30             	lea    eax,[edx+0x30]
c00109eb:	0f b6 c0             	movzx  eax,al
c00109ee:	50                   	push   eax
c00109ef:	e8 d4 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109f4:	5d                   	pop    ebp
c00109f5:	5a                   	pop    edx
c00109f6:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109fd:	53                   	push   ebx
c00109fe:	89 f0                	mov    eax,esi
c0010a00:	99                   	cdq    
c0010a01:	f7 f9                	idiv   ecx
c0010a03:	89 d6                	mov    esi,edx
c0010a05:	99                   	cdq    
c0010a06:	f7 f9                	idiv   ecx
c0010a08:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0b:	0f b6 c0             	movzx  eax,al
c0010a0e:	50                   	push   eax
c0010a0f:	e8 b4 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a14:	5d                   	pop    ebp
c0010a15:	5a                   	pop    edx
c0010a16:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a1d:	53                   	push   ebx
c0010a1e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a21:	0f b6 f0             	movzx  esi,al
c0010a24:	56                   	push   esi
c0010a25:	e8 9e fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2a:	5e                   	pop    esi
c0010a2b:	8b 35 64 22 03 c0    	mov    esi,DWORD PTR ds:0xc0032264
c0010a31:	5d                   	pop    ebp
c0010a32:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a39:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a3e:	53                   	push   ebx
c0010a3f:	89 f0                	mov    eax,esi
c0010a41:	99                   	cdq    
c0010a42:	f7 fd                	idiv   ebp
c0010a44:	99                   	cdq    
c0010a45:	f7 f9                	idiv   ecx
c0010a47:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4a:	0f b6 c0             	movzx  eax,al
c0010a4d:	50                   	push   eax
c0010a4e:	e8 75 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a53:	5a                   	pop    edx
c0010a54:	5d                   	pop    ebp
c0010a55:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a5c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a61:	53                   	push   ebx
c0010a62:	89 f0                	mov    eax,esi
c0010a64:	99                   	cdq    
c0010a65:	f7 fd                	idiv   ebp
c0010a67:	99                   	cdq    
c0010a68:	f7 f9                	idiv   ecx
c0010a6a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6d:	0f b6 c0             	movzx  eax,al
c0010a70:	50                   	push   eax
c0010a71:	e8 52 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a76:	5a                   	pop    edx
c0010a77:	5d                   	pop    ebp
c0010a78:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a7f:	bd 64 00 00 00       	mov    ebp,0x64
c0010a84:	53                   	push   ebx
c0010a85:	89 f0                	mov    eax,esi
c0010a87:	99                   	cdq    
c0010a88:	f7 fd                	idiv   ebp
c0010a8a:	99                   	cdq    
c0010a8b:	f7 f9                	idiv   ecx
c0010a8d:	83 c2 30             	add    edx,0x30
c0010a90:	0f b6 d2             	movzx  edx,dl
c0010a93:	52                   	push   edx
c0010a94:	e8 2f fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a99:	5a                   	pop    edx
c0010a9a:	5d                   	pop    ebp
c0010a9b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010aa2:	53                   	push   ebx
c0010aa3:	89 f0                	mov    eax,esi
c0010aa5:	99                   	cdq    
c0010aa6:	f7 f9                	idiv   ecx
c0010aa8:	89 d6                	mov    esi,edx
c0010aaa:	99                   	cdq    
c0010aab:	f7 f9                	idiv   ecx
c0010aad:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab0:	0f b6 c0             	movzx  eax,al
c0010ab3:	50                   	push   eax
c0010ab4:	e8 0f fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab9:	5a                   	pop    edx
c0010aba:	59                   	pop    ecx
c0010abb:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ac2:	53                   	push   ebx
c0010ac3:	8d 46 30             	lea    eax,[esi+0x30]
c0010ac6:	0f b6 f0             	movzx  esi,al
c0010ac9:	56                   	push   esi
c0010aca:	e8 f9 fc ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010acf:	5b                   	pop    ebx
c0010ad0:	5e                   	pop    esi
c0010ad1:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ad8:	5b                   	pop    ebx
c0010ad9:	5e                   	pop    esi
c0010ada:	5f                   	pop    edi
c0010adb:	5d                   	pop    ebp
c0010adc:	c3                   	ret    
c0010add:	90                   	nop

c0010ade <VgaText::updateTitle()>:
c0010ade:	53                   	push   ebx
c0010adf:	31 c0                	xor    eax,eax
c0010ae1:	83 ec 58             	sub    esp,0x58
c0010ae4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ae8:	89 e1                	mov    ecx,esp
c0010aea:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010aee:	40                   	inc    eax
c0010aef:	83 f8 50             	cmp    eax,0x50
c0010af2:	75 f6                	jne    c0010aea <VgaText::updateTitle()+0xc>
c0010af4:	31 c0                	xor    eax,eax
c0010af6:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010afd:	84 db                	test   bl,bl
c0010aff:	74 06                	je     c0010b07 <VgaText::updateTitle()+0x29>
c0010b01:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b04:	40                   	inc    eax
c0010b05:	eb ef                	jmp    c0010af6 <VgaText::updateTitle()+0x18>
c0010b07:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b0d:	85 c0                	test   eax,eax
c0010b0f:	74 09                	je     c0010b1a <VgaText::updateTitle()+0x3c>
c0010b11:	53                   	push   ebx
c0010b12:	53                   	push   ebx
c0010b13:	51                   	push   ecx
c0010b14:	52                   	push   edx
c0010b15:	ff d0                	call   eax
c0010b17:	83 c4 10             	add    esp,0x10
c0010b1a:	e8 55 fe ff ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0010b1f:	83 c4 58             	add    esp,0x58
c0010b22:	5b                   	pop    ebx
c0010b23:	c3                   	ret    

c0010b24 <VgaText::setTitleTextColour(VgaColour)>:
c0010b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b2c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b32:	eb aa                	jmp    c0010ade <VgaText::updateTitle()>

c0010b34 <VgaText::setTitleColour(VgaColour)>:
c0010b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b3c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b42:	eb 9a                	jmp    c0010ade <VgaText::updateTitle()>

c0010b44 <VgaText::setTitle(char*)>:
c0010b44:	53                   	push   ebx
c0010b45:	83 ec 10             	sub    esp,0x10
c0010b48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b50:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b56:	50                   	push   eax
c0010b57:	e8 d8 fc fe ff       	call   c0000834 <strcpy>
c0010b5c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b60:	83 c4 18             	add    esp,0x18
c0010b63:	5b                   	pop    ebx
c0010b64:	e9 75 ff ff ff       	jmp    c0010ade <VgaText::updateTitle()>
c0010b69:	90                   	nop

c0010b6a <VgaText::decrementCursor(bool)>:
c0010b6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b72:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	74 07                	je     c0010b83 <VgaText::decrementCursor(bool)+0x19>
c0010b7c:	48                   	dec    eax
c0010b7d:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b83:	84 c9                	test   cl,cl
c0010b85:	74 09                	je     c0010b90 <VgaText::decrementCursor(bool)+0x26>
c0010b87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b8b:	e9 56 fa ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c0010b90:	c3                   	ret    
c0010b91:	90                   	nop

c0010b92 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b92:	53                   	push   ebx
c0010b93:	83 ec 08             	sub    esp,0x8
c0010b96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010ba6:	3c 07                	cmp    al,0x7
c0010ba8:	75 2a                	jne    c0010bd4 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010baa:	a1 6c df 02 c0       	mov    eax,ds:0xc002df6c
c0010baf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bb7:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bbf:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bcb:	83 c4 08             	add    esp,0x8
c0010bce:	5b                   	pop    ebx
c0010bcf:	e9 3a 2d 00 00       	jmp    c001390e <Buzzer::beep(int, int, bool)>
c0010bd4:	3c 0d                	cmp    al,0xd
c0010bd6:	75 0c                	jne    c0010be4 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bd8:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010be2:	eb 3b                	jmp    c0010c1f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010be4:	3c 0a                	cmp    al,0xa
c0010be6:	75 40                	jne    c0010c28 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010be8:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010bee:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bf8:	8d 50 01             	lea    edx,[eax+0x1]
c0010bfb:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c01:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c07:	75 12                	jne    c0010c1b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c09:	83 ec 0c             	sub    esp,0xc
c0010c0c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c12:	53                   	push   ebx
c0010c13:	e8 1c fb ff ff       	call   c0010734 <VgaText::scrollScreen()>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c1f:	83 c4 08             	add    esp,0x8
c0010c22:	5b                   	pop    ebx
c0010c23:	e9 be f9 ff ff       	jmp    c00105e6 <VgaText::updateCursor()>
c0010c28:	3c 08                	cmp    al,0x8
c0010c2a:	75 31                	jne    c0010c5d <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c2c:	50                   	push   eax
c0010c2d:	50                   	push   eax
c0010c2e:	6a 01                	push   0x1
c0010c30:	53                   	push   ebx
c0010c31:	e8 34 ff ff ff       	call   c0010b6a <VgaText::decrementCursor(bool)>
c0010c36:	5a                   	pop    edx
c0010c37:	59                   	pop    ecx
c0010c38:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c3e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c44:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c4a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c50:	6a 20                	push   0x20
c0010c52:	53                   	push   ebx
c0010c53:	e8 82 fb ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c58:	83 c4 28             	add    esp,0x28
c0010c5b:	5b                   	pop    ebx
c0010c5c:	c3                   	ret    
c0010c5d:	83 ec 08             	sub    esp,0x8
c0010c60:	0f be c0             	movsx  eax,al
c0010c63:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c69:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c6f:	51                   	push   ecx
c0010c70:	52                   	push   edx
c0010c71:	50                   	push   eax
c0010c72:	53                   	push   ebx
c0010c73:	e8 62 fb ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c78:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c7c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c84:	83 c4 28             	add    esp,0x28
c0010c87:	5b                   	pop    ebx
c0010c88:	e9 1b fc ff ff       	jmp    c00108a8 <VgaText::incrementCursor(bool)>
c0010c8d:	90                   	nop

c0010c8e <VgaText::isShowingCursor()>:
c0010c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c92:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010c98:	c3                   	ret    
c0010c99:	90                   	nop

c0010c9a <VgaText::isBlinkDisabled()>:
c0010c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c9e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010ca4:	83 f0 01             	xor    eax,0x1
c0010ca7:	c3                   	ret    

c0010ca8 <VgaText::setCursorHeight(int)>:
c0010ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cb0:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cb6:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cc1:	e9 3a f9 ff ff       	jmp    c0010600 <VgaText::showCursor(bool)>

c0010cc6 <VgaText::getCursorHeight()>:
c0010cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cca:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cd0:	c3                   	ret    

c0010cd1 <setActiveTerminal(VgaText*)>:
c0010cd1:	53                   	push   ebx
c0010cd2:	83 ec 08             	sub    esp,0x8
c0010cd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd9:	85 db                	test   ebx,ebx
c0010cdb:	75 11                	jne    c0010cee <setActiveTerminal(VgaText*)+0x1d>
c0010cdd:	c7 44 24 10 cc 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ecc
c0010ce5:	83 c4 08             	add    esp,0x8
c0010ce8:	5b                   	pop    ebx
c0010ce9:	e9 9d 94 00 00       	jmp    c001a18b <Krnl::panic(char const*)>
c0010cee:	50                   	push   eax
c0010cef:	50                   	push   eax
c0010cf0:	53                   	push   ebx
c0010cf1:	68 da 9e 02 c0       	push   0xc0029eda
c0010cf6:	e8 14 1e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0010cfb:	a1 c4 de 02 c0       	mov    eax,ds:0xc002dec4
c0010d00:	83 c4 10             	add    esp,0x10
c0010d03:	85 c0                	test   eax,eax
c0010d05:	74 0c                	je     c0010d13 <setActiveTerminal(VgaText*)+0x42>
c0010d07:	83 ec 0c             	sub    esp,0xc
c0010d0a:	50                   	push   eax
c0010d0b:	e8 d6 f8 ff ff       	call   c00105e6 <VgaText::updateCursor()>
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	89 1d c4 de 02 c0    	mov    DWORD PTR ds:0xc002dec4,ebx
c0010d19:	51                   	push   ecx
c0010d1a:	51                   	push   ecx
c0010d1b:	53                   	push   ebx
c0010d1c:	68 f2 9e 02 c0       	push   0xc0029ef2
c0010d21:	e8 e9 1d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0010d26:	83 c4 0c             	add    esp,0xc
c0010d29:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d2f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d35:	53                   	push   ebx
c0010d36:	e8 17 fb ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0010d3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d3e:	e8 57 ff ff ff       	call   c0010c9a <VgaText::isBlinkDisabled()>
c0010d43:	5a                   	pop    edx
c0010d44:	0f b6 c0             	movzx  eax,al
c0010d47:	59                   	pop    ecx
c0010d48:	50                   	push   eax
c0010d49:	53                   	push   ebx
c0010d4a:	e8 c1 f8 ff ff       	call   c0010610 <VgaText::disableBlink(bool)>
c0010d4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d52:	e8 6f ff ff ff       	call   c0010cc6 <VgaText::getCursorHeight()>
c0010d57:	5a                   	pop    edx
c0010d58:	59                   	pop    ecx
c0010d59:	50                   	push   eax
c0010d5a:	53                   	push   ebx
c0010d5b:	e8 48 ff ff ff       	call   c0010ca8 <VgaText::setCursorHeight(int)>
c0010d60:	83 c4 10             	add    esp,0x10
c0010d63:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d6a:	75 0a                	jne    c0010d76 <setActiveTerminal(VgaText*)+0xa5>
c0010d6c:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d7a:	83 c4 08             	add    esp,0x8
c0010d7d:	5b                   	pop    ebx
c0010d7e:	e9 0f f8 ff ff       	jmp    c0010592 <VgaText::load()>

c0010d83 <doTerminalCycle()>:
c0010d83:	83 ec 18             	sub    esp,0x18
c0010d86:	a1 c0 de 02 c0       	mov    eax,ds:0xc002dec0
c0010d8b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010d91:	50                   	push   eax
c0010d92:	a3 c0 de 02 c0       	mov    ds:0xc002dec0,eax
c0010d97:	e8 35 ff ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c0010d9c:	83 c4 1c             	add    esp,0x1c
c0010d9f:	c3                   	ret    

c0010da0 <VgaText::doUpdate()>:
c0010da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da4:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010daa:	85 c0                	test   eax,eax
c0010dac:	74 02                	je     c0010db0 <VgaText::doUpdate()+0x10>
c0010dae:	ff e0                	jmp    eax
c0010db0:	c3                   	ret    
c0010db1:	90                   	nop

c0010db2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010db2:	55                   	push   ebp
c0010db3:	57                   	push   edi
c0010db4:	56                   	push   esi
c0010db5:	53                   	push   ebx
c0010db6:	83 ec 1c             	sub    esp,0x1c
c0010db9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dbd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dc2:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010dc9:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dcc:	50                   	push   eax
c0010dcd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dd2:	50                   	push   eax
c0010dd3:	e8 4a f9 ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dd8:	59                   	pop    ecx
c0010dd9:	0f b6 c0             	movzx  eax,al
c0010ddc:	5b                   	pop    ebx
c0010ddd:	31 c9                	xor    ecx,ecx
c0010ddf:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010de7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010deb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010df1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010df5:	0f b7 db             	movzx  ebx,bx
c0010df8:	01 db                	add    ebx,ebx
c0010dfa:	01 fb                	add    ebx,edi
c0010dfc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010dff:	84 c0                	test   al,al
c0010e01:	0f 84 38 01 00 00    	je     c0010f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e07:	3c 0d                	cmp    al,0xd
c0010e09:	75 0f                	jne    c0010e1a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e0b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e15:	e9 1f 01 00 00       	jmp    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e1a:	3c 0a                	cmp    al,0xa
c0010e1c:	75 5b                	jne    c0010e79 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e1e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e24:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e2e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e31:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e37:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e3d:	75 12                	jne    c0010e51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e48:	55                   	push   ebp
c0010e49:	e8 e6 f8 ff ff       	call   c0010734 <VgaText::scrollScreen()>
c0010e4e:	83 c4 10             	add    esp,0x10
c0010e51:	83 ec 0c             	sub    esp,0xc
c0010e54:	55                   	push   ebp
c0010e55:	e8 8c f7 ff ff       	call   c00105e6 <VgaText::updateCursor()>
c0010e5a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e6b:	31 c9                	xor    ecx,ecx
c0010e6d:	0f b7 db             	movzx  ebx,bx
c0010e70:	01 db                	add    ebx,ebx
c0010e72:	01 fb                	add    ebx,edi
c0010e74:	e9 c0 00 00 00       	jmp    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e79:	3c 08                	cmp    al,0x8
c0010e7b:	75 4e                	jne    c0010ecb <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e7d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e81:	53                   	push   ebx
c0010e82:	53                   	push   ebx
c0010e83:	6a 01                	push   0x1
c0010e85:	55                   	push   ebp
c0010e86:	e8 df fc ff ff       	call   c0010b6a <VgaText::decrementCursor(bool)>
c0010e8b:	58                   	pop    eax
c0010e8c:	5a                   	pop    edx
c0010e8d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010e93:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010e99:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010e9f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ea5:	6a 20                	push   0x20
c0010ea7:	55                   	push   ebp
c0010ea8:	e8 2d f9 ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ead:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eb5:	83 c4 20             	add    esp,0x20
c0010eb8:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ebe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ec2:	0f b7 db             	movzx  ebx,bx
c0010ec5:	01 db                	add    ebx,ebx
c0010ec7:	01 fb                	add    ebx,edi
c0010ec9:	eb 6e                	jmp    c0010f39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ecb:	51                   	push   ecx
c0010ecc:	51                   	push   ecx
c0010ecd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ed1:	50                   	push   eax
c0010ed2:	e8 f1 f8 ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ed7:	83 c4 10             	add    esp,0x10
c0010eda:	66 89 03             	mov    WORD PTR [ebx],ax
c0010edd:	39 2d c4 de 02 c0    	cmp    DWORD PTR ds:0xc002dec4,ebp
c0010ee3:	75 2a                	jne    c0010f0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ee5:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010eeb:	85 c0                	test   eax,eax
c0010eed:	74 20                	je     c0010f0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010eef:	52                   	push   edx
c0010ef0:	52                   	push   edx
c0010ef1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ef7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010efd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f01:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f05:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f08:	51                   	push   ecx
c0010f09:	55                   	push   ebp
c0010f0a:	ff d0                	call   eax
c0010f0c:	83 c4 20             	add    esp,0x20
c0010f0f:	83 c3 02             	add    ebx,0x2
c0010f12:	50                   	push   eax
c0010f13:	50                   	push   eax
c0010f14:	6a 00                	push   0x0
c0010f16:	55                   	push   ebp
c0010f17:	e8 8c f9 ff ff       	call   c00108a8 <VgaText::incrementCursor(bool)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f26:	75 0f                	jne    c0010f37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f28:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f30:	0f b7 db             	movzx  ebx,bx
c0010f33:	01 db                	add    ebx,ebx
c0010f35:	01 fb                	add    ebx,edi
c0010f37:	b1 01                	mov    cl,0x1
c0010f39:	46                   	inc    esi
c0010f3a:	e9 bd fe ff ff       	jmp    c0010dfc <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f3f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f43:	83 ec 0c             	sub    esp,0xc
c0010f46:	55                   	push   ebp
c0010f47:	e8 9a f6 ff ff       	call   c00105e6 <VgaText::updateCursor()>
c0010f4c:	83 c4 10             	add    esp,0x10
c0010f4f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f53:	84 c9                	test   cl,cl
c0010f55:	74 0c                	je     c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f57:	83 ec 0c             	sub    esp,0xc
c0010f5a:	55                   	push   ebp
c0010f5b:	e8 40 fe ff ff       	call   c0010da0 <VgaText::doUpdate()>
c0010f60:	83 c4 10             	add    esp,0x10
c0010f63:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f6a:	83 c4 1c             	add    esp,0x1c
c0010f6d:	5b                   	pop    ebx
c0010f6e:	5e                   	pop    esi
c0010f6f:	5f                   	pop    edi
c0010f70:	5d                   	pop    ebp
c0010f71:	c3                   	ret    

c0010f72 <VgaText::clearScreen()>:
c0010f72:	57                   	push   edi
c0010f73:	56                   	push   esi
c0010f74:	31 f6                	xor    esi,esi
c0010f76:	53                   	push   ebx
c0010f77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f7b:	52                   	push   edx
c0010f7c:	6a 00                	push   0x0
c0010f7e:	6a 00                	push   0x0
c0010f80:	53                   	push   ebx
c0010f81:	e8 cc f8 ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0010f86:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010f96:	7e 26                	jle    c0010fbe <VgaText::clearScreen()+0x4c>
c0010f98:	31 ff                	xor    edi,edi
c0010f9a:	50                   	push   eax
c0010f9b:	50                   	push   eax
c0010f9c:	56                   	push   esi
c0010f9d:	57                   	push   edi
c0010f9e:	47                   	inc    edi
c0010f9f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fa5:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fab:	6a 20                	push   0x20
c0010fad:	53                   	push   ebx
c0010fae:	e8 27 f8 ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fb3:	83 c4 20             	add    esp,0x20
c0010fb6:	83 ff 50             	cmp    edi,0x50
c0010fb9:	75 df                	jne    c0010f9a <VgaText::clearScreen()+0x28>
c0010fbb:	46                   	inc    esi
c0010fbc:	eb d2                	jmp    c0010f90 <VgaText::clearScreen()+0x1e>
c0010fbe:	83 ec 0c             	sub    esp,0xc
c0010fc1:	53                   	push   ebx
c0010fc2:	e8 d9 fd ff ff       	call   c0010da0 <VgaText::doUpdate()>
c0010fc7:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	5b                   	pop    ebx
c0010fd2:	5e                   	pop    esi
c0010fd3:	5f                   	pop    edi
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop

c0010fd6 <VgaText::putchar(char)>:
c0010fd6:	56                   	push   esi
c0010fd7:	53                   	push   ebx
c0010fd8:	83 ec 14             	sub    esp,0x14
c0010fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fdf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fe3:	3c 5b                	cmp    al,0x5b
c0010fe5:	75 21                	jne    c0011008 <VgaText::putchar(char)+0x32>
c0010fe7:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010fee:	74 28                	je     c0011018 <VgaText::putchar(char)+0x42>
c0010ff0:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010ff9:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011003:	e9 e2 00 00 00       	jmp    c00110ea <VgaText::putchar(char)+0x114>
c0011008:	3c 1b                	cmp    al,0x1b
c001100a:	75 0c                	jne    c0011018 <VgaText::putchar(char)+0x42>
c001100c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011013:	e9 d2 00 00 00       	jmp    c00110ea <VgaText::putchar(char)+0x114>
c0011018:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001101e:	84 c9                	test   cl,cl
c0011020:	0f 84 ab 00 00 00    	je     c00110d1 <VgaText::putchar(char)+0xfb>
c0011026:	8d 50 c0             	lea    edx,[eax-0x40]
c0011029:	80 fa 3e             	cmp    dl,0x3e
c001102c:	0f 87 82 00 00 00    	ja     c00110b4 <VgaText::putchar(char)+0xde>
c0011032:	3c 6d                	cmp    al,0x6d
c0011034:	75 4d                	jne    c0011083 <VgaText::putchar(char)+0xad>
c0011036:	31 f6                	xor    esi,esi
c0011038:	31 d2                	xor    edx,edx
c001103a:	31 c0                	xor    eax,eax
c001103c:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011042:	7e 30                	jle    c0011074 <VgaText::putchar(char)+0x9e>
c0011044:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001104c:	80 fa 3b             	cmp    dl,0x3b
c001104f:	75 17                	jne    c0011068 <VgaText::putchar(char)+0x92>
c0011051:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011055:	50                   	push   eax
c0011056:	53                   	push   ebx
c0011057:	e8 ee f5 ff ff       	call   c001064a <VgaText::doANSI_SGR(int)>
c001105c:	59                   	pop    ecx
c001105d:	31 d2                	xor    edx,edx
c001105f:	58                   	pop    eax
c0011060:	31 c0                	xor    eax,eax
c0011062:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011066:	eb 09                	jmp    c0011071 <VgaText::putchar(char)+0x9b>
c0011068:	6b c0 0a             	imul   eax,eax,0xa
c001106b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001106f:	88 ca                	mov    dl,cl
c0011071:	46                   	inc    esi
c0011072:	eb c8                	jmp    c001103c <VgaText::putchar(char)+0x66>
c0011074:	84 d2                	test   dl,dl
c0011076:	74 31                	je     c00110a9 <VgaText::putchar(char)+0xd3>
c0011078:	50                   	push   eax
c0011079:	53                   	push   ebx
c001107a:	e8 cb f5 ff ff       	call   c001064a <VgaText::doANSI_SGR(int)>
c001107f:	58                   	pop    eax
c0011080:	5a                   	pop    edx
c0011081:	eb 26                	jmp    c00110a9 <VgaText::putchar(char)+0xd3>
c0011083:	3c 4a                	cmp    al,0x4a
c0011085:	75 22                	jne    c00110a9 <VgaText::putchar(char)+0xd3>
c0011087:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c001108e:	75 19                	jne    c00110a9 <VgaText::putchar(char)+0xd3>
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	53                   	push   ebx
c0011094:	e8 d9 fe ff ff       	call   c0010f72 <VgaText::clearScreen()>
c0011099:	83 c4 0c             	add    esp,0xc
c001109c:	6a 00                	push   0x0
c001109e:	6a 00                	push   0x0
c00110a0:	53                   	push   ebx
c00110a1:	e8 ac f7 ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110b2:	eb 36                	jmp    c00110ea <VgaText::putchar(char)+0x114>
c00110b4:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110ba:	83 fa 0e             	cmp    edx,0xe
c00110bd:	7f 2b                	jg     c00110ea <VgaText::putchar(char)+0x114>
c00110bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110c2:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110c8:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110cf:	eb 19                	jmp    c00110ea <VgaText::putchar(char)+0x114>
c00110d1:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110d7:	0f be c0             	movsx  eax,al
c00110da:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110e0:	50                   	push   eax
c00110e1:	53                   	push   ebx
c00110e2:	e8 ab fa ff ff       	call   c0010b92 <VgaText::putchar(char, VgaColour, VgaColour)>
c00110e7:	83 c4 10             	add    esp,0x10
c00110ea:	83 c4 14             	add    esp,0x14
c00110ed:	5b                   	pop    ebx
c00110ee:	5e                   	pop    esi
c00110ef:	c3                   	ret    

c00110f0 <VgaText::puts(char const*)>:
c00110f0:	53                   	push   ebx
c00110f1:	83 ec 08             	sub    esp,0x8
c00110f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110f8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00110fb:	84 c0                	test   al,al
c00110fd:	74 12                	je     c0011111 <VgaText::puts(char const*)+0x21>
c00110ff:	43                   	inc    ebx
c0011100:	51                   	push   ecx
c0011101:	51                   	push   ecx
c0011102:	50                   	push   eax
c0011103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011107:	e8 ca fe ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c001110c:	83 c4 10             	add    esp,0x10
c001110f:	eb e7                	jmp    c00110f8 <VgaText::puts(char const*)+0x8>
c0011111:	83 c4 08             	add    esp,0x8
c0011114:	5b                   	pop    ebx
c0011115:	c3                   	ret    

c0011116 <VgaText::putx(unsigned int)>:
c0011116:	57                   	push   edi
c0011117:	b9 11 00 00 00       	mov    ecx,0x11
c001111c:	56                   	push   esi
c001111d:	be 0e 9f 02 c0       	mov    esi,0xc0029f0e
c0011122:	53                   	push   ebx
c0011123:	83 ec 20             	sub    esp,0x20
c0011126:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001112a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001112e:	fc                   	cld    
c001112f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011131:	be 08 00 00 00       	mov    esi,0x8
c0011136:	50                   	push   eax
c0011137:	50                   	push   eax
c0011138:	89 d8                	mov    eax,ebx
c001113a:	c1 e3 04             	shl    ebx,0x4
c001113d:	c1 e8 1c             	shr    eax,0x1c
c0011140:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011145:	50                   	push   eax
c0011146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001114a:	e8 87 fe ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c001114f:	83 c4 10             	add    esp,0x10
c0011152:	4e                   	dec    esi
c0011153:	75 e1                	jne    c0011136 <VgaText::putx(unsigned int)+0x20>
c0011155:	83 c4 20             	add    esp,0x20
c0011158:	5b                   	pop    ebx
c0011159:	5e                   	pop    esi
c001115a:	5f                   	pop    edi
c001115b:	c3                   	ret    

c001115c <VgaText::VgaText(char const*)>:
c001115c:	57                   	push   edi
c001115d:	56                   	push   esi
c001115e:	53                   	push   ebx
c001115f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011163:	83 ec 08             	sub    esp,0x8
c0011166:	6a 00                	push   0x0
c0011168:	50                   	push   eax
c0011169:	e8 6e 05 00 00       	call   c00116dc <UnixFile::UnixFile(int)>
c001116e:	83 c4 10             	add    esp,0x10
c0011171:	ba 74 9f 02 c0       	mov    edx,0xc0029f74
c0011176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117a:	89 10                	mov    DWORD PTR [eax],edx
c001117c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011180:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001118a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0011198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a7:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b2:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c0:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ce:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d9:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e4:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00111ea:	bb a0 de 02 c0       	mov    ebx,0xc002dea0
c00111ef:	b8 08 00 00 00       	mov    eax,0x8
c00111f4:	fc                   	cld    
c00111f5:	89 d7                	mov    edi,edx
c00111f7:	89 de                	mov    esi,ebx
c00111f9:	89 c1                	mov    ecx,eax
c00111fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00111fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011201:	05 1e 10 00 00       	add    eax,0x101e
c0011206:	83 ec 08             	sub    esp,0x8
c0011209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001120d:	50                   	push   eax
c001120e:	e8 21 f6 fe ff       	call   c0000834 <strcpy>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011228:	83 c0 0c             	add    eax,0xc
c001122b:	83 ec 04             	sub    esp,0x4
c001122e:	68 00 0f 00 00       	push   0xf00
c0011233:	6a 00                	push   0x0
c0011235:	50                   	push   eax
c0011236:	e8 3d f5 fe ff       	call   c0000778 <memset>
c001123b:	83 c4 10             	add    esp,0x10
c001123e:	83 ec 04             	sub    esp,0x4
c0011241:	6a 00                	push   0x0
c0011243:	6a 07                	push   0x7
c0011245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011249:	e8 b4 f4 ff ff       	call   c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	83 ec 08             	sub    esp,0x8
c0011254:	6a 02                	push   0x2
c0011256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001125a:	e8 49 fa ff ff       	call   c0010ca8 <VgaText::setCursorHeight(int)>
c001125f:	83 c4 10             	add    esp,0x10
c0011262:	83 ec 04             	sub    esp,0x4
c0011265:	6a 00                	push   0x0
c0011267:	6a 00                	push   0x0
c0011269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126d:	e8 e0 f5 ff ff       	call   c0010852 <VgaText::setCursor(int, int)>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	83 ec 08             	sub    esp,0x8
c0011278:	6a 01                	push   0x1
c001127a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001127e:	e8 7d f3 ff ff       	call   c0010600 <VgaText::showCursor(bool)>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	83 ec 08             	sub    esp,0x8
c0011289:	6a 01                	push   0x1
c001128b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128f:	e8 7c f3 ff ff       	call   c0010610 <VgaText::disableBlink(bool)>
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	83 ec 0c             	sub    esp,0xc
c001129a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129e:	e8 cf fc ff ff       	call   c0010f72 <VgaText::clearScreen()>
c00112a3:	83 c4 10             	add    esp,0x10
c00112a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112aa:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b5:	05 9e 10 00 00       	add    eax,0x109e
c00112ba:	83 ec 04             	sub    esp,0x4
c00112bd:	68 96 00 00 00       	push   0x96
c00112c2:	6a 00                	push   0x0
c00112c4:	50                   	push   eax
c00112c5:	e8 ae f4 fe ff       	call   c0000778 <memset>
c00112ca:	83 c4 10             	add    esp,0x10
c00112cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d1:	05 34 11 00 00       	add    eax,0x1134
c00112d6:	83 ec 04             	sub    esp,0x4
c00112d9:	68 2c 01 00 00       	push   0x12c
c00112de:	6a 00                	push   0x0
c00112e0:	50                   	push   eax
c00112e1:	e8 92 f4 fe ff       	call   c0000778 <memset>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	90                   	nop
c00112ea:	5b                   	pop    ebx
c00112eb:	5e                   	pop    esi
c00112ec:	5f                   	pop    edi
c00112ed:	c3                   	ret    

c00112ee <VgaText::receiveKey(unsigned char)>:
c00112ee:	55                   	push   ebp
c00112ef:	57                   	push   edi
c00112f0:	56                   	push   esi
c00112f1:	53                   	push   ebx
c00112f2:	83 ec 1c             	sub    esp,0x1c
c00112f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112fd:	84 db                	test   bl,bl
c00112ff:	0f 84 c9 00 00 00    	je     c00113ce <VgaText::receiveKey(unsigned char)+0xe0>
c0011305:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001130b:	80 fb 08             	cmp    bl,0x8
c001130e:	75 2c                	jne    c001133c <VgaText::receiveKey(unsigned char)+0x4e>
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	57                   	push   edi
c0011314:	e8 7b f4 fe ff       	call   c0000794 <strlen>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	85 c0                	test   eax,eax
c001131e:	74 41                	je     c0011361 <VgaText::receiveKey(unsigned char)+0x73>
c0011320:	50                   	push   eax
c0011321:	50                   	push   eax
c0011322:	6a 08                	push   0x8
c0011324:	56                   	push   esi
c0011325:	e8 ac fc ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c001132a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001132d:	e8 62 f4 fe ff       	call   c0000794 <strlen>
c0011332:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001133a:	eb 22                	jmp    c001135e <VgaText::receiveKey(unsigned char)+0x70>
c001133c:	0f be c3             	movsx  eax,bl
c001133f:	52                   	push   edx
c0011340:	52                   	push   edx
c0011341:	50                   	push   eax
c0011342:	56                   	push   esi
c0011343:	e8 8e fc ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c0011348:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001134c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011351:	59                   	pop    ecx
c0011352:	5d                   	pop    ebp
c0011353:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011357:	50                   	push   eax
c0011358:	57                   	push   edi
c0011359:	e8 16 f6 fe ff       	call   c0000974 <strcat>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011368:	75 05                	jne    c001136f <VgaText::receiveKey(unsigned char)+0x81>
c001136a:	80 fb 0a             	cmp    bl,0xa
c001136d:	75 53                	jne    c00113c2 <VgaText::receiveKey(unsigned char)+0xd4>
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011378:	53                   	push   ebx
c0011379:	e8 16 f4 fe ff       	call   c0000794 <strlen>
c001137e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011381:	89 c5                	mov    ebp,eax
c0011383:	e8 0c f4 fe ff       	call   c0000794 <strlen>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001138f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011394:	76 10                	jbe    c00113a6 <VgaText::receiveKey(unsigned char)+0xb8>
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	68 1f 9f 02 c0       	push   0xc0029f1f
c001139e:	e8 e8 8d 00 00       	call   c001a18b <Krnl::panic(char const*)>
c00113a3:	83 c4 10             	add    esp,0x10
c00113a6:	50                   	push   eax
c00113a7:	50                   	push   eax
c00113a8:	57                   	push   edi
c00113a9:	53                   	push   ebx
c00113aa:	e8 c5 f5 fe ff       	call   c0000974 <strcat>
c00113af:	83 c4 0c             	add    esp,0xc
c00113b2:	68 96 00 00 00       	push   0x96
c00113b7:	6a 00                	push   0x0
c00113b9:	57                   	push   edi
c00113ba:	e8 b9 f3 fe ff       	call   c0000778 <memset>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	56                   	push   esi
c00113c6:	e8 d5 f9 ff ff       	call   c0010da0 <VgaText::doUpdate()>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	83 c4 1c             	add    esp,0x1c
c00113d1:	5b                   	pop    ebx
c00113d2:	5e                   	pop    esi
c00113d3:	5f                   	pop    edi
c00113d4:	5d                   	pop    ebp
c00113d5:	c3                   	ret    

c00113d6 <VgaText::write(unsigned long long, void*, int*)>:
c00113d6:	55                   	push   ebp
c00113d7:	57                   	push   edi
c00113d8:	56                   	push   esi
c00113d9:	53                   	push   ebx
c00113da:	83 ec 0c             	sub    esp,0xc
c00113dd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113e1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113e9:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00113f0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113f3:	39 eb                	cmp    ebx,ebp
c00113f5:	74 13                	je     c001140a <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113f7:	43                   	inc    ebx
c00113f8:	50                   	push   eax
c00113f9:	50                   	push   eax
c00113fa:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113fe:	50                   	push   eax
c00113ff:	56                   	push   esi
c0011400:	e8 d1 fb ff ff       	call   c0010fd6 <VgaText::putchar(char)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	eb e9                	jmp    c00113f3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011414:	56                   	push   esi
c0011415:	e8 86 f9 ff ff       	call   c0010da0 <VgaText::doUpdate()>
c001141a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001141e:	89 38                	mov    DWORD PTR [eax],edi
c0011420:	83 c4 1c             	add    esp,0x1c
c0011423:	31 c0                	xor    eax,eax
c0011425:	5b                   	pop    ebx
c0011426:	5e                   	pop    esi
c0011427:	5f                   	pop    edi
c0011428:	5d                   	pop    ebp
c0011429:	c3                   	ret    

c001142a <newTerminal(char*)>:
c001142a:	83 ec 28             	sub    esp,0x28
c001142d:	68 60 12 00 00       	push   0x1260
c0011432:	e8 09 e4 ff ff       	call   c000f840 <malloc>
c0011437:	5a                   	pop    edx
c0011438:	59                   	pop    ecx
c0011439:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001143d:	50                   	push   eax
c001143e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011442:	e8 15 fd ff ff       	call   c001115c <VgaText::VgaText(char const*)>
c0011447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144b:	83 c4 2c             	add    esp,0x2c
c001144e:	c3                   	ret    
c001144f:	90                   	nop

c0011450 <TSS::TSS()>:
c0011450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011454:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001145b:	90                   	nop
c001145c:	c3                   	ret    
c001145d:	90                   	nop

c001145e <TSS::setESP(unsigned long)>:
c001145e:	55                   	push   ebp
c001145f:	89 e5                	mov    ebp,esp
c0011461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011464:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011467:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001146a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001146d:	90                   	nop
c001146e:	5d                   	pop    ebp
c001146f:	c3                   	ret    

c0011470 <TSS::flush()>:
c0011470:	55                   	push   ebp
c0011471:	89 e5                	mov    ebp,esp
c0011473:	83 ec 10             	sub    esp,0x10
c0011476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011479:	8b 00                	mov    eax,DWORD PTR [eax]
c001147b:	83 c8 03             	or     eax,0x3
c001147e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011482:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011486:	66 89 d0             	mov    ax,dx
c0011489:	0f 00 d8             	ltr    ax
c001148c:	90                   	nop
c001148d:	c9                   	leave  
c001148e:	c3                   	ret    
c001148f:	90                   	nop

c0011490 <TSS::setup(unsigned long, unsigned long)>:
c0011490:	55                   	push   ebp
c0011491:	89 e5                	mov    ebp,esp
c0011493:	83 ec 18             	sub    esp,0x18
c0011496:	83 ec 0c             	sub    esp,0xc
c0011499:	6a 68                	push   0x68
c001149b:	e8 a0 e3 ff ff       	call   c000f840 <malloc>
c00114a0:	83 c4 10             	add    esp,0x10
c00114a3:	89 c2                	mov    edx,eax
c00114a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b1:	83 ec 04             	sub    esp,0x4
c00114b4:	6a 68                	push   0x68
c00114b6:	6a 00                	push   0x0
c00114b8:	50                   	push   eax
c00114b9:	e8 ba f2 fe ff       	call   c0000778 <memset>
c00114be:	83 c4 10             	add    esp,0x10
c00114c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114eb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011503:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011527:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011536:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011542:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011555:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011558:	0f 20 da             	mov    edx,cr3
c001155b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001155e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011561:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156a:	83 ec 08             	sub    esp,0x8
c001156d:	50                   	push   eax
c001156e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011571:	50                   	push   eax
c0011572:	e8 a7 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011577:	83 c4 10             	add    esp,0x10
c001157a:	83 ec 08             	sub    esp,0x8
c001157d:	6a 68                	push   0x68
c001157f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011582:	50                   	push   eax
c0011583:	e8 b2 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c0011588:	83 c4 10             	add    esp,0x10
c001158b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001158f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011592:	83 e0 0f             	and    eax,0xf
c0011595:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011598:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001159b:	83 c8 40             	or     eax,0x40
c001159e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115a1:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00115a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115ac:	05 78 01 00 00       	add    eax,0x178
c00115b1:	83 ec 04             	sub    esp,0x4
c00115b4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115b7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115ba:	50                   	push   eax
c00115bb:	e8 ae da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115c0:	83 c4 10             	add    esp,0x10
c00115c3:	89 c2                	mov    edx,eax
c00115c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c8:	89 10                	mov    DWORD PTR [eax],edx
c00115ca:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00115cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d5:	05 78 01 00 00       	add    eax,0x178
c00115da:	83 ec 0c             	sub    esp,0xc
c00115dd:	50                   	push   eax
c00115de:	e8 cf da ff ff       	call   c000f0b2 <GDT::flush()>
c00115e3:	83 c4 10             	add    esp,0x10
c00115e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00115eb:	83 ec 08             	sub    esp,0x8
c00115ee:	50                   	push   eax
c00115ef:	68 88 9f 02 c0       	push   0xc0029f88
c00115f4:	e8 16 15 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00115f9:	83 c4 10             	add    esp,0x10
c00115fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011601:	c9                   	leave  
c0011602:	c3                   	ret    
c0011603:	90                   	nop

c0011604 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001160c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001160f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011614:	75 08                	jne    c001161e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011616:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001161c:	eb 38                	jmp    c0011656 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001161e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011623:	75 17                	jne    c001163c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011625:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001162a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001162d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011633:	8b 10                	mov    edx,DWORD PTR [eax]
c0011635:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011639:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001163c:	89 c1                	mov    ecx,eax
c001163e:	83 e1 fd             	and    ecx,0xfffffffd
c0011641:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011647:	74 cd                	je     c0011616 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011649:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001164e:	83 e0 ef             	and    eax,0xffffffef
c0011651:	83 f8 08             	cmp    eax,0x8
c0011654:	76 c0                	jbe    c0011616 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011656:	31 c0                	xor    eax,eax
c0011658:	c3                   	ret    
c0011659:	90                   	nop

c001165a <ReservedFilename::isAtty()>:
c001165a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001165e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011661:	31 c0                	xor    eax,eax
c0011663:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011669:	74 09                	je     c0011674 <ReservedFilename::isAtty()+0x1a>
c001166b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011671:	0f 94 c0             	sete   al
c0011674:	c3                   	ret    
c0011675:	90                   	nop

c0011676 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001167e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011681:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011685:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001168a:	75 08                	jne    c0011694 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001168c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011692:	eb 3d                	jmp    c00116d1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011694:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011699:	75 17                	jne    c00116b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001169b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116a3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116af:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116b2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116b7:	75 04                	jne    c00116bd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116b9:	89 0a                	mov    DWORD PTR [edx],ecx
c00116bb:	eb 14                	jmp    c00116d1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116bd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116c2:	74 c8                	je     c001168c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116c4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116c9:	83 e0 ef             	and    eax,0xffffffef
c00116cc:	83 f8 08             	cmp    eax,0x8
c00116cf:	76 bb                	jbe    c001168c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116d1:	31 c0                	xor    eax,eax
c00116d3:	c3                   	ret    

c00116d4 <UnixFile::getFileDescriptor()>:
c00116d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116db:	c3                   	ret    

c00116dc <UnixFile::UnixFile(int)>:
c00116dc:	53                   	push   ebx
c00116dd:	83 ec 28             	sub    esp,0x28
c00116e0:	ba 74 a0 02 c0       	mov    edx,0xc002a074
c00116e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e9:	89 10                	mov    DWORD PTR [eax],edx
c00116eb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116f3:	0f 8f 8c 01 00 00    	jg     c0011885 <UnixFile::UnixFile(int)+0x1a9>
c00116f9:	a1 80 cd 02 c0       	mov    eax,ds:0xc002cd80
c00116fe:	8d 50 01             	lea    edx,[eax+0x1]
c0011701:	89 15 80 cd 02 c0    	mov    DWORD PTR ds:0xc002cd80,edx
c0011707:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001170b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001170e:	83 ec 08             	sub    esp,0x8
c0011711:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011715:	68 58 df 02 c0       	push   0xc002df58
c001171a:	e8 41 6b 01 00       	call   c0028260 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	a0 54 df 02 c0       	mov    al,ds:0xc002df54
c0011727:	83 f0 01             	xor    eax,0x1
c001172a:	84 c0                	test   al,al
c001172c:	0f 84 54 01 00 00    	je     c0011886 <UnixFile::UnixFile(int)+0x1aa>
c0011732:	c6 05 54 df 02 c0 01 	mov    BYTE PTR ds:0xc002df54,0x1
c0011739:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011741:	83 ec 0c             	sub    esp,0xc
c0011744:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011748:	e8 f3 e0 ff ff       	call   c000f840 <malloc>
c001174d:	83 c4 10             	add    esp,0x10
c0011750:	89 c3                	mov    ebx,eax
c0011752:	83 ec 08             	sub    esp,0x8
c0011755:	68 03 ff ff 0f       	push   0xfffff03
c001175a:	53                   	push   ebx
c001175b:	e8 2c 01 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c0011760:	83 c4 10             	add    esp,0x10
c0011763:	89 1d 4c df 02 c0    	mov    DWORD PTR ds:0xc002df4c,ebx
c0011769:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011771:	83 ec 0c             	sub    esp,0xc
c0011774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011778:	e8 c3 e0 ff ff       	call   c000f840 <malloc>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	89 c3                	mov    ebx,eax
c0011782:	83 ec 08             	sub    esp,0x8
c0011785:	68 01 ff ff 0f       	push   0xfffff01
c001178a:	53                   	push   ebx
c001178b:	e8 fc 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c0011790:	83 c4 10             	add    esp,0x10
c0011793:	89 1d 50 df 02 c0    	mov    DWORD PTR ds:0xc002df50,ebx
c0011799:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117a1:	83 ec 0c             	sub    esp,0xc
c00117a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117a8:	e8 93 e0 ff ff       	call   c000f840 <malloc>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	89 c3                	mov    ebx,eax
c00117b2:	83 ec 08             	sub    esp,0x8
c00117b5:	68 00 ff ff 0f       	push   0xfffff00
c00117ba:	53                   	push   ebx
c00117bb:	e8 cc 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	89 1d 44 df 02 c0    	mov    DWORD PTR ds:0xc002df44,ebx
c00117c9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117d1:	83 ec 0c             	sub    esp,0xc
c00117d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117d8:	e8 63 e0 ff ff       	call   c000f840 <malloc>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	89 c3                	mov    ebx,eax
c00117e2:	83 ec 08             	sub    esp,0x8
c00117e5:	68 02 ff ff 0f       	push   0xfffff02
c00117ea:	53                   	push   ebx
c00117eb:	e8 9c 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c00117f0:	83 c4 10             	add    esp,0x10
c00117f3:	89 1d 48 df 02 c0    	mov    DWORD PTR ds:0xc002df48,ebx
c00117f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011801:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011806:	7f 7e                	jg     c0011886 <UnixFile::UnixFile(int)+0x1aa>
c0011808:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011810:	83 ec 0c             	sub    esp,0xc
c0011813:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011817:	e8 24 e0 ff ff       	call   c000f840 <malloc>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 c3                	mov    ebx,eax
c0011821:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011825:	05 10 ff ff 0f       	add    eax,0xfffff10
c001182a:	83 ec 08             	sub    esp,0x8
c001182d:	50                   	push   eax
c001182e:	53                   	push   ebx
c001182f:	e8 58 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c0011834:	83 c4 10             	add    esp,0x10
c0011837:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001183b:	89 1c 85 20 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd20e0],ebx
c0011842:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001184a:	83 ec 0c             	sub    esp,0xc
c001184d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011851:	e8 ea df ff ff       	call   c000f840 <malloc>
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	89 c3                	mov    ebx,eax
c001185b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001185f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011864:	83 ec 08             	sub    esp,0x8
c0011867:	50                   	push   eax
c0011868:	53                   	push   ebx
c0011869:	e8 1e 00 00 00       	call   c001188c <ReservedFilename::ReservedFilename(int)>
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011875:	89 1c 85 e0 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2120],ebx
c001187c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011880:	e9 7c ff ff ff       	jmp    c0011801 <UnixFile::UnixFile(int)+0x125>
c0011885:	90                   	nop
c0011886:	83 c4 28             	add    esp,0x28
c0011889:	5b                   	pop    ebx
c001188a:	c3                   	ret    
c001188b:	90                   	nop

c001188c <ReservedFilename::ReservedFilename(int)>:
c001188c:	83 ec 0c             	sub    esp,0xc
c001188f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011893:	83 ec 08             	sub    esp,0x8
c0011896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001189a:	50                   	push   eax
c001189b:	e8 3c fe ff ff       	call   c00116dc <UnixFile::UnixFile(int)>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	ba 90 a0 02 c0       	mov    edx,0xc002a090
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	89 10                	mov    DWORD PTR [eax],edx
c00118ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118b6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118b9:	90                   	nop
c00118ba:	83 c4 0c             	add    esp,0xc
c00118bd:	c3                   	ret    

c00118be <UnixFile::~UnixFile()>:
c00118be:	83 ec 1c             	sub    esp,0x1c
c00118c1:	ba 74 a0 02 c0       	mov    edx,0xc002a074
c00118c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ca:	89 10                	mov    DWORD PTR [eax],edx
c00118cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118d8:	7f 73                	jg     c001194d <UnixFile::~UnixFile()+0x8f>
c00118da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118e2:	83 ec 0c             	sub    esp,0xc
c00118e5:	68 58 df 02 c0       	push   0xc002df58
c00118ea:	e8 45 6a 01 00       	call   c0028334 <LinkedList<UnixFile>::getFirstElement()>
c00118ef:	83 c4 10             	add    esp,0x10
c00118f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118f6:	83 ec 0c             	sub    esp,0xc
c00118f9:	68 58 df 02 c0       	push   0xc002df58
c00118fe:	e8 39 6a 01 00       	call   c002833c <LinkedList<UnixFile>::removeFirst()>
c0011903:	83 c4 10             	add    esp,0x10
c0011906:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001190a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001190e:	74 40                	je     c0011950 <UnixFile::~UnixFile()+0x92>
c0011910:	83 ec 08             	sub    esp,0x8
c0011913:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011917:	68 58 df 02 c0       	push   0xc002df58
c001191c:	e8 3f 69 01 00       	call   c0028260 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011928:	8d 50 01             	lea    edx,[eax+0x1]
c001192b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001192f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011934:	0f 94 c0             	sete   al
c0011937:	84 c0                	test   al,al
c0011939:	74 a7                	je     c00118e2 <UnixFile::~UnixFile()+0x24>
c001193b:	83 ec 0c             	sub    esp,0xc
c001193e:	68 4c a0 02 c0       	push   0xc002a04c
c0011943:	e8 43 88 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0011948:	83 c4 10             	add    esp,0x10
c001194b:	eb 95                	jmp    c00118e2 <UnixFile::~UnixFile()+0x24>
c001194d:	90                   	nop
c001194e:	eb 01                	jmp    c0011951 <UnixFile::~UnixFile()+0x93>
c0011950:	90                   	nop
c0011951:	90                   	nop
c0011952:	83 c4 1c             	add    esp,0x1c
c0011955:	c3                   	ret    

c0011956 <UnixFile::~UnixFile()>:
c0011956:	83 ec 0c             	sub    esp,0xc
c0011959:	83 ec 0c             	sub    esp,0xc
c001195c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011960:	e8 59 ff ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	6a 0c                	push   0xc
c001196d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011971:	e8 b9 10 00 00       	call   c0012a2f <operator delete(void*, unsigned long)>
c0011976:	83 c4 10             	add    esp,0x10
c0011979:	83 c4 0c             	add    esp,0xc
c001197c:	c3                   	ret    
c001197d:	90                   	nop

c001197e <ReservedFilename::~ReservedFilename()>:
c001197e:	83 ec 0c             	sub    esp,0xc
c0011981:	ba 90 a0 02 c0       	mov    edx,0xc002a090
c0011986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001198a:	89 10                	mov    DWORD PTR [eax],edx
c001198c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	50                   	push   eax
c0011994:	e8 25 ff ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	90                   	nop
c001199d:	83 c4 0c             	add    esp,0xc
c00119a0:	c3                   	ret    
c00119a1:	90                   	nop

c00119a2 <ReservedFilename::~ReservedFilename()>:
c00119a2:	83 ec 0c             	sub    esp,0xc
c00119a5:	83 ec 0c             	sub    esp,0xc
c00119a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ac:	e8 cd ff ff ff       	call   c001197e <ReservedFilename::~ReservedFilename()>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	83 ec 08             	sub    esp,0x8
c00119b7:	6a 0c                	push   0xc
c00119b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119bd:	e8 6d 10 00 00       	call   c0012a2f <operator delete(void*, unsigned long)>
c00119c2:	83 c4 10             	add    esp,0x10
c00119c5:	83 c4 0c             	add    esp,0xc
c00119c8:	c3                   	ret    

c00119c9 <getFromFileDescriptor(int)>:
c00119c9:	53                   	push   ebx
c00119ca:	83 ec 08             	sub    esp,0x8
c00119cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119dd:	7f 2c                	jg     c0011a0b <getFromFileDescriptor(int)+0x42>
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	68 58 df 02 c0       	push   0xc002df58
c00119e7:	e8 48 69 01 00       	call   c0028334 <LinkedList<UnixFile>::getFirstElement()>
c00119ec:	83 c4 10             	add    esp,0x10
c00119ef:	85 c0                	test   eax,eax
c00119f1:	75 04                	jne    c00119f7 <getFromFileDescriptor(int)+0x2e>
c00119f3:	31 c0                	xor    eax,eax
c00119f5:	eb 6e                	jmp    c0011a65 <getFromFileDescriptor(int)+0x9c>
c00119f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119fa:	74 69                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c00119fc:	52                   	push   edx
c00119fd:	52                   	push   edx
c00119fe:	50                   	push   eax
c00119ff:	68 58 df 02 c0       	push   0xc002df58
c0011a04:	e8 d5 69 01 00       	call   c00283de <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a09:	eb e1                	jmp    c00119ec <getFromFileDescriptor(int)+0x23>
c0011a0b:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c0011a10:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a16:	74 4d                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a18:	a1 50 df 02 c0       	mov    eax,ds:0xc002df50
c0011a1d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a23:	74 40                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a25:	a1 48 df 02 c0       	mov    eax,ds:0xc002df48
c0011a2a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a30:	74 33                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a32:	a1 44 df 02 c0       	mov    eax,ds:0xc002df44
c0011a37:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a3d:	74 26                	je     c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a3f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a45:	83 f8 08             	cmp    eax,0x8
c0011a48:	77 09                	ja     c0011a53 <getFromFileDescriptor(int)+0x8a>
c0011a4a:	8b 04 85 20 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20e0]
c0011a51:	eb 12                	jmp    c0011a65 <getFromFileDescriptor(int)+0x9c>
c0011a53:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a59:	83 fb 08             	cmp    ebx,0x8
c0011a5c:	77 95                	ja     c00119f3 <getFromFileDescriptor(int)+0x2a>
c0011a5e:	8b 04 9d e0 de 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2120]
c0011a65:	83 c4 08             	add    esp,0x8
c0011a68:	5b                   	pop    ebx
c0011a69:	c3                   	ret    

c0011a6a <__static_initialization_and_destruction_0(int, int)>:
c0011a6a:	83 ec 0c             	sub    esp,0xc
c0011a6d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a72:	75 34                	jne    c0011aa8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a74:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a7c:	75 2a                	jne    c0011aa8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	68 58 df 02 c0       	push   0xc002df58
c0011a86:	e8 7d 67 01 00       	call   c0028208 <LinkedList<UnixFile>::LinkedList()>
c0011a8b:	83 c4 10             	add    esp,0x10
c0011a8e:	83 ec 04             	sub    esp,0x4
c0011a91:	68 10 cd 02 c0       	push   0xc002cd10
c0011a96:	68 58 df 02 c0       	push   0xc002df58
c0011a9b:	68 06 82 02 c0       	push   0xc0028206
c0011aa0:	e8 04 0f 00 00       	call   c00129a9 <__cxa_atexit>
c0011aa5:	83 c4 10             	add    esp,0x10
c0011aa8:	90                   	nop
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	c3                   	ret    

c0011aad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011aad:	83 ec 0c             	sub    esp,0xc
c0011ab0:	83 ec 08             	sub    esp,0x8
c0011ab3:	68 ff ff 00 00       	push   0xffff
c0011ab8:	6a 01                	push   0x1
c0011aba:	e8 ab ff ff ff       	call   c0011a6a <__static_initialization_and_destruction_0(int, int)>
c0011abf:	83 c4 10             	add    esp,0x10
c0011ac2:	83 c4 0c             	add    esp,0xc
c0011ac5:	c3                   	ret    

c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ac6:	53                   	push   ebx
c0011ac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011acb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011acf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011ad5:	89 c8                	mov    eax,ecx
c0011ad7:	d1 e8                	shr    eax,1
c0011ad9:	03 05 88 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd88
c0011adf:	83 e1 01             	and    ecx,0x1
c0011ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0011ae4:	75 09                	jne    c0011aef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011ae6:	83 e2 f0             	and    edx,0xfffffff0
c0011ae9:	09 da                	or     edx,ebx
c0011aeb:	88 10                	mov    BYTE PTR [eax],dl
c0011aed:	5b                   	pop    ebx
c0011aee:	c3                   	ret    
c0011aef:	c1 e3 04             	shl    ebx,0x4
c0011af2:	83 e2 0f             	and    edx,0xf
c0011af5:	09 da                	or     edx,ebx
c0011af7:	88 10                	mov    BYTE PTR [eax],dl
c0011af9:	5b                   	pop    ebx
c0011afa:	c3                   	ret    

c0011afb <Virt::getPageState(unsigned long)>:
c0011afb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aff:	8b 0d 88 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cd88
c0011b05:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b0b:	89 d0                	mov    eax,edx
c0011b0d:	d1 e8                	shr    eax,1
c0011b0f:	83 e2 01             	and    edx,0x1
c0011b12:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b15:	75 04                	jne    c0011b1b <Virt::getPageState(unsigned long)+0x20>
c0011b17:	83 e0 0f             	and    eax,0xf
c0011b1a:	c3                   	ret    
c0011b1b:	c0 e8 04             	shr    al,0x4
c0011b1e:	c3                   	ret    

c0011b1f <Virt::allocateKernelVirtualPages(int)>:
c0011b1f:	55                   	push   ebp
c0011b20:	31 ed                	xor    ebp,ebp
c0011b22:	57                   	push   edi
c0011b23:	56                   	push   esi
c0011b24:	53                   	push   ebx
c0011b25:	31 db                	xor    ebx,ebx
c0011b27:	83 ec 1c             	sub    esp,0x1c
c0011b2a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b2e:	8b 3d 84 cd 02 c0    	mov    edi,DWORD PTR ds:0xc002cd84
c0011b34:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b39:	57                   	push   edi
c0011b3a:	e8 bc ff ff ff       	call   c0011afb <Virt::getPageState(unsigned long)>
c0011b3f:	5a                   	pop    edx
c0011b40:	84 c0                	test   al,al
c0011b42:	75 3a                	jne    c0011b7e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b44:	85 db                	test   ebx,ebx
c0011b46:	75 02                	jne    c0011b4a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b48:	89 fd                	mov    ebp,edi
c0011b4a:	43                   	inc    ebx
c0011b4b:	39 f3                	cmp    ebx,esi
c0011b4d:	74 5a                	je     c0011ba9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b4f:	47                   	inc    edi
c0011b50:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b56:	76 31                	jbe    c0011b89 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b58:	c7 05 84 cd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002cd84,0xc8000
c0011b62:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b67:	75 28                	jne    c0011b91 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b69:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b6e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b73:	57                   	push   edi
c0011b74:	e8 82 ff ff ff       	call   c0011afb <Virt::getPageState(unsigned long)>
c0011b79:	5a                   	pop    edx
c0011b7a:	84 c0                	test   al,al
c0011b7c:	74 c6                	je     c0011b44 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b7e:	31 db                	xor    ebx,ebx
c0011b80:	47                   	inc    edi
c0011b81:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b87:	77 cf                	ja     c0011b58 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b89:	89 3d 84 cd 02 c0    	mov    DWORD PTR ds:0xc002cd84,edi
c0011b8f:	eb a8                	jmp    c0011b39 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b91:	83 ec 0c             	sub    esp,0xc
c0011b94:	68 a4 a0 02 c0       	push   0xc002a0a4
c0011b99:	e8 ed 85 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0011b9e:	8b 3d 84 cd 02 c0    	mov    edi,DWORD PTR ds:0xc002cd84
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	eb 90                	jmp    c0011b39 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ba9:	89 2d 84 cd 02 c0    	mov    DWORD PTR ds:0xc002cd84,ebp
c0011baf:	4b                   	dec    ebx
c0011bb0:	74 5f                	je     c0011c11 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bb2:	85 f6                	test   esi,esi
c0011bb4:	74 3d                	je     c0011bf3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bb6:	89 e8                	mov    eax,ebp
c0011bb8:	31 db                	xor    ebx,ebx
c0011bba:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bbd:	eb 14                	jmp    c0011bd3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bbf:	6a 01                	push   0x1
c0011bc1:	43                   	inc    ebx
c0011bc2:	50                   	push   eax
c0011bc3:	e8 fe fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc8:	58                   	pop    eax
c0011bc9:	39 f3                	cmp    ebx,esi
c0011bcb:	5a                   	pop    edx
c0011bcc:	74 25                	je     c0011bf3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bce:	a1 84 cd 02 c0       	mov    eax,ds:0xc002cd84
c0011bd3:	8d 50 01             	lea    edx,[eax+0x1]
c0011bd6:	85 db                	test   ebx,ebx
c0011bd8:	89 15 84 cd 02 c0    	mov    DWORD PTR ds:0xc002cd84,edx
c0011bde:	74 20                	je     c0011c00 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011be0:	39 df                	cmp    edi,ebx
c0011be2:	75 db                	jne    c0011bbf <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011be4:	6a 03                	push   0x3
c0011be6:	43                   	inc    ebx
c0011be7:	50                   	push   eax
c0011be8:	e8 d9 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bed:	59                   	pop    ecx
c0011bee:	39 f3                	cmp    ebx,esi
c0011bf0:	58                   	pop    eax
c0011bf1:	75 db                	jne    c0011bce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bf3:	83 c4 1c             	add    esp,0x1c
c0011bf6:	89 e8                	mov    eax,ebp
c0011bf8:	5b                   	pop    ebx
c0011bf9:	c1 e0 0c             	shl    eax,0xc
c0011bfc:	5e                   	pop    esi
c0011bfd:	5f                   	pop    edi
c0011bfe:	5d                   	pop    ebp
c0011bff:	c3                   	ret    
c0011c00:	6a 02                	push   0x2
c0011c02:	bb 01 00 00 00       	mov    ebx,0x1
c0011c07:	50                   	push   eax
c0011c08:	e8 b9 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0d:	58                   	pop    eax
c0011c0e:	5a                   	pop    edx
c0011c0f:	eb bd                	jmp    c0011bce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c11:	6a 04                	push   0x4
c0011c13:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c16:	55                   	push   ebp
c0011c17:	a3 84 cd 02 c0       	mov    ds:0xc002cd84,eax
c0011c1c:	e8 a5 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c21:	59                   	pop    ecx
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	5b                   	pop    ebx
c0011c25:	c1 e0 0c             	shl    eax,0xc
c0011c28:	83 c4 1c             	add    esp,0x1c
c0011c2b:	5b                   	pop    ebx
c0011c2c:	5e                   	pop    esi
c0011c2d:	5f                   	pop    edi
c0011c2e:	5d                   	pop    ebp
c0011c2f:	c3                   	ret    

c0011c30 <Virt::virtualMemorySetup()>:
c0011c30:	53                   	push   ebx
c0011c31:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c36:	83 ec 08             	sub    esp,0x8
c0011c39:	6a 0f                	push   0xf
c0011c3b:	53                   	push   ebx
c0011c3c:	43                   	inc    ebx
c0011c3d:	e8 84 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c42:	59                   	pop    ecx
c0011c43:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c49:	58                   	pop    eax
c0011c4a:	75 ed                	jne    c0011c39 <Virt::virtualMemorySetup()+0x9>
c0011c4c:	83 ec 08             	sub    esp,0x8
c0011c4f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c54:	68 00 00 00 c8       	push   0xc8000000
c0011c59:	68 2b a2 02 c0       	push   0xc002a22b
c0011c5e:	e8 ac 0e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011c63:	58                   	pop    eax
c0011c64:	5a                   	pop    edx
c0011c65:	68 00 f0 ff ef       	push   0xeffff000
c0011c6a:	68 3f a2 02 c0       	push   0xc002a23f
c0011c6f:	e8 9b 0e 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	83 ec 08             	sub    esp,0x8
c0011c7a:	6a 00                	push   0x0
c0011c7c:	53                   	push   ebx
c0011c7d:	43                   	inc    ebx
c0011c7e:	e8 43 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c83:	83 c4 10             	add    esp,0x10
c0011c86:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c8c:	75 e9                	jne    c0011c77 <Virt::virtualMemorySetup()+0x47>
c0011c8e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c93:	83 ec 08             	sub    esp,0x8
c0011c96:	6a 0f                	push   0xf
c0011c98:	53                   	push   ebx
c0011c99:	43                   	inc    ebx
c0011c9a:	e8 27 fe ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c9f:	83 c4 10             	add    esp,0x10
c0011ca2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011ca8:	75 e9                	jne    c0011c93 <Virt::virtualMemorySetup()+0x63>
c0011caa:	83 c4 08             	add    esp,0x8
c0011cad:	5b                   	pop    ebx
c0011cae:	c3                   	ret    

c0011caf <Virt::getAKernelVAS()>:
c0011caf:	a1 64 df 02 c0       	mov    eax,ds:0xc002df64
c0011cb4:	c3                   	ret    

c0011cb5 <Virt::setupPageSwapping(int)>:
c0011cb5:	57                   	push   edi
c0011cb6:	56                   	push   esi
c0011cb7:	53                   	push   ebx
c0011cb8:	83 ec 1c             	sub    esp,0x1c
c0011cbb:	68 14 01 00 00       	push   0x114
c0011cc0:	e8 7b db ff ff       	call   c000f840 <malloc>
c0011cc5:	83 c4 0c             	add    esp,0xc
c0011cc8:	89 c6                	mov    esi,eax
c0011cca:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c0011cd0:	68 53 a2 02 c0       	push   0xc002a253
c0011cd5:	50                   	push   eax
c0011cd6:	e8 8d 13 00 00       	call   c0013068 <File::File(char const*, Process*)>
c0011cdb:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cde:	e8 61 15 00 00       	call   c0013244 <File::unlink()>
c0011ce3:	58                   	pop    eax
c0011ce4:	5a                   	pop    edx
c0011ce5:	6a 12                	push   0x12
c0011ce7:	56                   	push   esi
c0011ce8:	e8 df 13 00 00       	call   c00130cc <File::open(FileOpenMode)>
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	85 c0                	test   eax,eax
c0011cf2:	0f 85 ca 00 00 00    	jne    c0011dc2 <Virt::setupPageSwapping(int)+0x10d>
c0011cf8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cfc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d04:	c1 e3 08             	shl    ebx,0x8
c0011d07:	83 ec 0c             	sub    esp,0xc
c0011d0a:	68 00 00 01 00       	push   0x10000
c0011d0f:	e8 2c db ff ff       	call   c000f840 <malloc>
c0011d14:	83 c4 0c             	add    esp,0xc
c0011d17:	89 c7                	mov    edi,eax
c0011d19:	68 00 00 01 00       	push   0x10000
c0011d1e:	6a 00                	push   0x0
c0011d20:	50                   	push   eax
c0011d21:	e8 52 ea fe ff       	call   c0000778 <memset>
c0011d26:	83 c4 10             	add    esp,0x10
c0011d29:	85 db                	test   ebx,ebx
c0011d2b:	79 03                	jns    c0011d30 <Virt::setupPageSwapping(int)+0x7b>
c0011d2d:	83 c3 0f             	add    ebx,0xf
c0011d30:	c1 fb 04             	sar    ebx,0x4
c0011d33:	4b                   	dec    ebx
c0011d34:	83 fb ff             	cmp    ebx,0xffffffff
c0011d37:	74 4b                	je     c0011d84 <Virt::setupPageSwapping(int)+0xcf>
c0011d39:	83 ec 0c             	sub    esp,0xc
c0011d3c:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d3e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d42:	52                   	push   edx
c0011d43:	57                   	push   edi
c0011d44:	6a 00                	push   0x0
c0011d46:	68 00 00 01 00       	push   0x10000
c0011d4b:	56                   	push   esi
c0011d4c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d4f:	83 c4 20             	add    esp,0x20
c0011d52:	85 c0                	test   eax,eax
c0011d54:	75 59                	jne    c0011daf <Virt::setupPageSwapping(int)+0xfa>
c0011d56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d5a:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d5f:	74 d2                	je     c0011d33 <Virt::setupPageSwapping(int)+0x7e>
c0011d61:	83 ec 08             	sub    esp,0x8
c0011d64:	4b                   	dec    ebx
c0011d65:	50                   	push   eax
c0011d66:	68 a6 a2 02 c0       	push   0xc002a2a6
c0011d6b:	e8 9f 0d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011d70:	c7 04 24 af a2 02 c0 	mov    DWORD PTR [esp],0xc002a2af
c0011d77:	e8 0f 84 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0011d7c:	83 c4 10             	add    esp,0x10
c0011d7f:	83 fb ff             	cmp    ebx,0xffffffff
c0011d82:	75 b5                	jne    c0011d39 <Virt::setupPageSwapping(int)+0x84>
c0011d84:	83 ec 0c             	sub    esp,0xc
c0011d87:	56                   	push   esi
c0011d88:	e8 9d 13 00 00       	call   c001312a <File::close()>
c0011d8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d90:	e8 cb da ff ff       	call   c000f860 <rfree>
c0011d95:	83 c4 10             	add    esp,0x10
c0011d98:	85 f6                	test   esi,esi
c0011d9a:	74 0c                	je     c0011da8 <Virt::setupPageSwapping(int)+0xf3>
c0011d9c:	83 ec 0c             	sub    esp,0xc
c0011d9f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da1:	56                   	push   esi
c0011da2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011da5:	83 c4 10             	add    esp,0x10
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	5b                   	pop    ebx
c0011dac:	5e                   	pop    esi
c0011dad:	5f                   	pop    edi
c0011dae:	c3                   	ret    
c0011daf:	83 ec 08             	sub    esp,0x8
c0011db2:	50                   	push   eax
c0011db3:	68 8e a2 02 c0       	push   0xc002a28e
c0011db8:	e8 52 0d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011dbd:	83 c4 10             	add    esp,0x10
c0011dc0:	eb 94                	jmp    c0011d56 <Virt::setupPageSwapping(int)+0xa1>
c0011dc2:	83 ec 08             	sub    esp,0x8
c0011dc5:	50                   	push   eax
c0011dc6:	68 6a a2 02 c0       	push   0xc002a26a
c0011dcb:	e8 3f 0d 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0011dd0:	c7 04 24 73 a2 02 c0 	mov    DWORD PTR [esp],0xc002a273
c0011dd7:	e8 af 83 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0011ddc:	83 c4 10             	add    esp,0x10
c0011ddf:	e9 14 ff ff ff       	jmp    c0011cf8 <Virt::setupPageSwapping(int)+0x43>

c0011de4 <VAS::VAS()>:
c0011de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011de8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011def:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df3:	a3 64 df 02 c0       	mov    ds:0xc002df64,eax
c0011df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfc:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e04:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e12:	90                   	nop
c0011e13:	c3                   	ret    

c0011e14 <VAS::VAS(VAS*)>:
c0011e14:	83 ec 0c             	sub    esp,0xc
c0011e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e22:	83 ec 0c             	sub    esp,0xc
c0011e25:	68 c4 a0 02 c0       	push   0xc002a0c4
c0011e2a:	e8 5c 83 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0011e2f:	83 c4 10             	add    esp,0x10
c0011e32:	90                   	nop
c0011e33:	83 c4 0c             	add    esp,0xc
c0011e36:	c3                   	ret    
c0011e37:	90                   	nop

c0011e38 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e3c:	89 c2                	mov    edx,eax
c0011e3e:	c1 e8 0a             	shr    eax,0xa
c0011e41:	c1 ea 16             	shr    edx,0x16
c0011e44:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e49:	19 c9                	sbb    ecx,ecx
c0011e4b:	c1 e2 0c             	shl    edx,0xc
c0011e4e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e54:	25 fc 0f 00 00       	and    eax,0xffc
c0011e59:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e60:	01 d0                	add    eax,edx
c0011e62:	c3                   	ret    
c0011e63:	90                   	nop

c0011e64 <VAS::getPageTableEntry(unsigned long)>:
c0011e64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e68:	89 ca                	mov    edx,ecx
c0011e6a:	c1 e9 0a             	shr    ecx,0xa
c0011e6d:	c1 ea 16             	shr    edx,0x16
c0011e70:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e76:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e7c:	c1 e0 0c             	shl    eax,0xc
c0011e7f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e82:	c3                   	ret    

c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e83:	57                   	push   edi
c0011e84:	56                   	push   esi
c0011e85:	be 01 00 00 00       	mov    esi,0x1
c0011e8a:	53                   	push   ebx
c0011e8b:	83 ec 10             	sub    esp,0x10
c0011e8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e92:	c1 eb 0c             	shr    ebx,0xc
c0011e95:	eb 3f                	jmp    c0011ed6 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011e97:	e8 13 fe ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c0011e9c:	83 ec 08             	sub    esp,0x8
c0011e9f:	57                   	push   edi
c0011ea0:	50                   	push   eax
c0011ea1:	e8 be ff ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c0011ea6:	83 c4 10             	add    esp,0x10
c0011ea9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eab:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011eaf:	f6 c4 04             	test   ah,0x4
c0011eb2:	75 5f                	jne    c0011f13 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011eb4:	80 fa 04             	cmp    dl,0x4
c0011eb7:	74 78                	je     c0011f31 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011eb9:	80 fa 02             	cmp    dl,0x2
c0011ebc:	0f 84 88 00 00 00    	je     c0011f4a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ec2:	80 fa 03             	cmp    dl,0x3
c0011ec5:	0f 84 ad 00 00 00    	je     c0011f78 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ecb:	fe ca                	dec    dl
c0011ecd:	0f 84 92 00 00 00    	je     c0011f65 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ed3:	43                   	inc    ebx
c0011ed4:	31 f6                	xor    esi,esi
c0011ed6:	53                   	push   ebx
c0011ed7:	e8 1f fc ff ff       	call   c0011afb <Virt::getPageState(unsigned long)>
c0011edc:	5f                   	pop    edi
c0011edd:	89 df                	mov    edi,ebx
c0011edf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ee3:	c1 e7 0c             	shl    edi,0xc
c0011ee6:	84 c0                	test   al,al
c0011ee8:	75 ad                	jne    c0011e97 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011eea:	83 ec 0c             	sub    esp,0xc
c0011eed:	68 b5 a2 02 c0       	push   0xc002a2b5
c0011ef2:	e8 94 82 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0011ef7:	e8 b3 fd ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c0011efc:	5a                   	pop    edx
c0011efd:	59                   	pop    ecx
c0011efe:	57                   	push   edi
c0011eff:	50                   	push   eax
c0011f00:	e8 5f ff ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f0a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f0e:	f6 c4 04             	test   ah,0x4
c0011f11:	74 c0                	je     c0011ed3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f13:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f17:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f1c:	83 ec 0c             	sub    esp,0xc
c0011f1f:	50                   	push   eax
c0011f20:	e8 2e df ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0011f25:	83 c4 10             	add    esp,0x10
c0011f28:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f2c:	80 fa 04             	cmp    dl,0x4
c0011f2f:	75 88                	jne    c0011eb9 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f31:	89 f0                	mov    eax,esi
c0011f33:	84 c0                	test   al,al
c0011f35:	75 47                	jne    c0011f7e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f37:	c7 44 24 20 e8 a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a0e8
c0011f3f:	83 c4 10             	add    esp,0x10
c0011f42:	5b                   	pop    ebx
c0011f43:	5e                   	pop    esi
c0011f44:	5f                   	pop    edi
c0011f45:	e9 41 82 00 00       	jmp    c001a18b <Krnl::panic(char const*)>
c0011f4a:	89 f0                	mov    eax,esi
c0011f4c:	84 c0                	test   al,al
c0011f4e:	75 15                	jne    c0011f65 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f50:	83 ec 0c             	sub    esp,0xc
c0011f53:	68 d1 a2 02 c0       	push   0xc002a2d1
c0011f58:	e8 2e 82 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0011f5d:	83 c4 10             	add    esp,0x10
c0011f60:	e9 6e ff ff ff       	jmp    c0011ed3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f65:	83 ec 08             	sub    esp,0x8
c0011f68:	6a 00                	push   0x0
c0011f6a:	53                   	push   ebx
c0011f6b:	e8 56 fb ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f70:	83 c4 10             	add    esp,0x10
c0011f73:	e9 5b ff ff ff       	jmp    c0011ed3 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f78:	89 f0                	mov    eax,esi
c0011f7a:	84 c0                	test   al,al
c0011f7c:	75 15                	jne    c0011f93 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f7e:	83 ec 08             	sub    esp,0x8
c0011f81:	6a 00                	push   0x0
c0011f83:	53                   	push   ebx
c0011f84:	e8 3d fb ff ff       	call   c0011ac6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f89:	83 c4 10             	add    esp,0x10
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	5b                   	pop    ebx
c0011f90:	5e                   	pop    esi
c0011f91:	5f                   	pop    edi
c0011f92:	c3                   	ret    
c0011f93:	c7 44 24 20 ed a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a2ed
c0011f9b:	83 c4 10             	add    esp,0x10
c0011f9e:	5b                   	pop    ebx
c0011f9f:	5e                   	pop    esi
c0011fa0:	5f                   	pop    edi
c0011fa1:	e9 e5 81 00 00       	jmp    c001a18b <Krnl::panic(char const*)>

c0011fa6 <VAS::freeAllocatedPages(unsigned long)>:
c0011fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011faa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fae:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fb2:	74 09                	je     c0011fbd <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fb8:	e9 c6 fe ff ff       	jmp    c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fbd:	c7 44 24 04 0c a1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a10c
c0011fc5:	e9 45 0b 00 00       	jmp    c0012b0f <Dbg::kprintf(char const*, ...)>

c0011fca <VAS::virtualToPhysical(unsigned long)>:
c0011fca:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fce:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd2:	e8 8d fe ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c0011fd7:	5a                   	pop    edx
c0011fd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fda:	59                   	pop    ecx
c0011fdb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe0:	c3                   	ret    
c0011fe1:	90                   	nop

c0011fe2 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011fe2:	55                   	push   ebp
c0011fe3:	57                   	push   edi
c0011fe4:	56                   	push   esi
c0011fe5:	53                   	push   ebx
c0011fe6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011fea:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011fee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011ff2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011ff6:	85 db                	test   ebx,ebx
c0011ff8:	7e 22                	jle    c001201c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011ffa:	c1 e3 0c             	shl    ebx,0xc
c0011ffd:	01 f3                	add    ebx,esi
c0011fff:	56                   	push   esi
c0012000:	81 c6 00 10 00 00    	add    esi,0x1000
c0012006:	55                   	push   ebp
c0012007:	e8 58 fe ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c001200c:	5a                   	pop    edx
c001200d:	59                   	pop    ecx
c001200e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012010:	21 f9                	and    ecx,edi
c0012012:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012016:	39 f3                	cmp    ebx,esi
c0012018:	89 08                	mov    DWORD PTR [eax],ecx
c001201a:	75 e3                	jne    c0011fff <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001201c:	5b                   	pop    ebx
c001201d:	5e                   	pop    esi
c001201e:	5f                   	pop    edi
c001201f:	5d                   	pop    ebp
c0012020:	c3                   	ret    
c0012021:	90                   	nop

c0012022 <VAS::setToWriteCombining(unsigned long, int)>:
c0012022:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0012027:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001202d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012034:	75 01                	jne    c0012037 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012036:	c3                   	ret    
c0012037:	68 80 00 00 00       	push   0x80
c001203c:	6a ff                	push   0xffffffff
c001203e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012042:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012046:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001204a:	e8 93 ff ff ff       	call   c0011fe2 <VAS::reflagRange(unsigned long, int, int, int)>
c001204f:	83 c4 14             	add    esp,0x14
c0012052:	c3                   	ret    
c0012053:	90                   	nop

c0012054 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012054:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012059:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001205d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012064:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012067:	19 c0                	sbb    eax,eax
c0012069:	83 ca 03             	or     edx,0x3
c001206c:	83 e0 fc             	and    eax,0xfffffffc
c001206f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012076:	0f 20 d8             	mov    eax,cr3
c0012079:	0f 22 d8             	mov    cr3,eax
c001207c:	c3                   	ret    
c001207d:	90                   	nop

c001207e <VAS::~VAS()>:
c001207e:	83 ec 2c             	sub    esp,0x2c
c0012081:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012089:	e8 f8 b7 00 00       	call   c001d886 <lockScheduler()>
c001208e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012093:	8b 00                	mov    eax,DWORD PTR [eax]
c0012095:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012098:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001209e:	83 ec 04             	sub    esp,0x4
c00120a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120a5:	6a 01                	push   0x1
c00120a7:	50                   	push   eax
c00120a8:	e8 a7 ff ff ff       	call   c0012054 <VAS::mapOtherVASIn(bool, VAS*)>
c00120ad:	83 c4 10             	add    esp,0x10
c00120b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120b8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120c0:	0f 8f d7 00 00 00    	jg     c001219d <VAS::~VAS()+0x11f>
c00120c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120d1:	c1 e2 02             	shl    edx,0x2
c00120d4:	01 d0                	add    eax,edx
c00120d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e0:	83 e0 01             	and    eax,0x1
c00120e3:	0f 84 ab 00 00 00    	je     c0012194 <VAS::~VAS()+0x116>
c00120e9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120f1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00120f9:	7f 75                	jg     c0012170 <VAS::~VAS()+0xf2>
c00120fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120ff:	c1 e0 0a             	shl    eax,0xa
c0012102:	89 c2                	mov    edx,eax
c0012104:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012108:	01 d0                	add    eax,edx
c001210a:	c1 e0 0c             	shl    eax,0xc
c001210d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012111:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012116:	8b 00                	mov    eax,DWORD PTR [eax]
c0012118:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001211b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012121:	83 ec 04             	sub    esp,0x4
c0012124:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012128:	6a 01                	push   0x1
c001212a:	50                   	push   eax
c001212b:	e8 08 fd ff ff       	call   c0011e38 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012130:	83 c4 10             	add    esp,0x10
c0012133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012137:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001213b:	8b 00                	mov    eax,DWORD PTR [eax]
c001213d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012145:	25 01 04 00 00       	and    eax,0x401
c001214a:	3d 01 04 00 00       	cmp    eax,0x401
c001214f:	75 19                	jne    c001216a <VAS::~VAS()+0xec>
c0012151:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012155:	25 00 f0 ff ff       	and    eax,0xfffff000
c001215a:	83 ec 0c             	sub    esp,0xc
c001215d:	50                   	push   eax
c001215e:	e8 f0 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0012163:	83 c4 10             	add    esp,0x10
c0012166:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001216a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001216e:	eb 81                	jmp    c00120f1 <VAS::~VAS()+0x73>
c0012170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012174:	25 00 04 00 00       	and    eax,0x400
c0012179:	74 19                	je     c0012194 <VAS::~VAS()+0x116>
c001217b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001217f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012184:	83 ec 0c             	sub    esp,0xc
c0012187:	50                   	push   eax
c0012188:	e8 c6 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001218d:	83 c4 10             	add    esp,0x10
c0012190:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012194:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012198:	e9 1b ff ff ff       	jmp    c00120b8 <VAS::~VAS()+0x3a>
c001219d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121a4:	83 ec 0c             	sub    esp,0xc
c00121a7:	50                   	push   eax
c00121a8:	e8 d6 fc ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c00121ad:	83 c4 10             	add    esp,0x10
c00121b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121b7:	83 ec 0c             	sub    esp,0xc
c00121ba:	50                   	push   eax
c00121bb:	e8 93 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121c0:	83 c4 10             	add    esp,0x10
c00121c3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121cb:	c1 e0 02             	shl    eax,0x2
c00121ce:	83 ec 08             	sub    esp,0x8
c00121d1:	50                   	push   eax
c00121d2:	68 30 a1 02 c0       	push   0xc002a130
c00121d7:	e8 33 09 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00121dc:	83 c4 10             	add    esp,0x10
c00121df:	e8 a4 b6 00 00       	call   c001d888 <unlockScheduler()>
c00121e4:	90                   	nop
c00121e5:	83 c4 2c             	add    esp,0x2c
c00121e8:	c3                   	ret    
c00121e9:	90                   	nop

c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>:
c00121ea:	55                   	push   ebp
c00121eb:	57                   	push   edi
c00121ec:	56                   	push   esi
c00121ed:	53                   	push   ebx
c00121ee:	83 ec 1c             	sub    esp,0x1c
c00121f1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00121f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121f9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00121ff:	77 08                	ja     c0012209 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012201:	0f 20 d8             	mov    eax,cr3
c0012204:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012207:	75 47                	jne    c0012250 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012209:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001220d:	09 d8                	or     eax,ebx
c001220f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012214:	75 57                	jne    c001226d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012216:	89 de                	mov    esi,ebx
c0012218:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001221b:	c1 ee 16             	shr    esi,0x16
c001221e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012225:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012229:	74 54                	je     c001227f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001222b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001222f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012235:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012239:	c1 e6 0c             	shl    esi,0xc
c001223c:	c1 eb 0a             	shr    ebx,0xa
c001223f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012245:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012248:	83 c4 1c             	add    esp,0x1c
c001224b:	5b                   	pop    ebx
c001224c:	5e                   	pop    esi
c001224d:	5f                   	pop    edi
c001224e:	5d                   	pop    ebp
c001224f:	c3                   	ret    
c0012250:	83 ec 0c             	sub    esp,0xc
c0012253:	68 50 a1 02 c0       	push   0xc002a150
c0012258:	e8 b2 08 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012264:	09 d8                	or     eax,ebx
c0012266:	a9 ff 0f 00 00       	test   eax,0xfff
c001226b:	74 a9                	je     c0012216 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001226d:	83 ec 0c             	sub    esp,0xc
c0012270:	68 b8 a1 02 c0       	push   0xc002a1b8
c0012275:	e8 11 7f 00 00       	call   c001a18b <Krnl::panic(char const*)>
c001227a:	83 c4 10             	add    esp,0x10
c001227d:	eb 97                	jmp    c0012216 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001227f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012283:	e8 55 dc ff ff       	call   c000fedd <Phys::allocatePage()>
c0012288:	89 c5                	mov    ebp,eax
c001228a:	e8 20 fa ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c001228f:	83 ec 0c             	sub    esp,0xc
c0012292:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012296:	6a 01                	push   0x1
c0012298:	e8 82 f8 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c001229d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122a4:	6a 01                	push   0x1
c00122a6:	50                   	push   eax
c00122a7:	55                   	push   ebp
c00122a8:	81 cd 07 04 00 00    	or     ebp,0x407
c00122ae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122b2:	51                   	push   ecx
c00122b3:	e8 26 02 00 00       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122b8:	83 c4 1c             	add    esp,0x1c
c00122bb:	68 00 10 00 00       	push   0x1000
c00122c0:	6a 00                	push   0x0
c00122c2:	50                   	push   eax
c00122c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122c7:	e8 ac e4 fe ff       	call   c0000778 <memset>
c00122cc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122d0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122d3:	e8 ab fb ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c00122d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122df:	83 c4 10             	add    esp,0x10
c00122e2:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122e5:	e9 41 ff ff ff       	jmp    c001222b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00122ea <VAS::allocatePages(int, int)>:
c00122ea:	55                   	push   ebp
c00122eb:	57                   	push   edi
c00122ec:	56                   	push   esi
c00122ed:	53                   	push   ebx
c00122ee:	83 ec 1c             	sub    esp,0x1c
c00122f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122f5:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00122fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012300:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012306:	83 e0 01             	and    eax,0x1
c0012309:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001230d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012311:	0f 85 cc 00 00 00    	jne    c00123e3 <VAS::allocatePages(int, int)+0xf9>
c0012317:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001231a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001231e:	85 c0                	test   eax,eax
c0012320:	0f 84 a1 00 00 00    	je     c00123c7 <VAS::allocatePages(int, int)+0xdd>
c0012326:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001232a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001232e:	c1 e6 0c             	shl    esi,0xc
c0012331:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012335:	85 c0                	test   eax,eax
c0012337:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001233a:	7e 33                	jle    c001236f <VAS::allocatePages(int, int)+0x85>
c001233c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012340:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012344:	81 cd 00 04 00 00    	or     ebp,0x400
c001234a:	e8 8e db ff ff       	call   c000fedd <Phys::allocatePage()>
c001234f:	55                   	push   ebp
c0012350:	53                   	push   ebx
c0012351:	50                   	push   eax
c0012352:	57                   	push   edi
c0012353:	e8 92 fe ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0012358:	83 c4 10             	add    esp,0x10
c001235b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012360:	74 03                	je     c0012365 <VAS::allocatePages(int, int)+0x7b>
c0012362:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012365:	81 c3 00 10 00 00    	add    ebx,0x1000
c001236b:	39 de                	cmp    esi,ebx
c001236d:	75 db                	jne    c001234a <VAS::allocatePages(int, int)+0x60>
c001236f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012374:	75 12                	jne    c0012388 <VAS::allocatePages(int, int)+0x9e>
c0012376:	0f 20 d8             	mov    eax,cr3
c0012379:	0f 22 d8             	mov    cr3,eax
c001237c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012380:	83 c4 1c             	add    esp,0x1c
c0012383:	5b                   	pop    ebx
c0012384:	5e                   	pop    esi
c0012385:	5f                   	pop    edi
c0012386:	5d                   	pop    ebp
c0012387:	c3                   	ret    
c0012388:	c1 ee 0a             	shr    esi,0xa
c001238b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001238f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012395:	c1 eb 0a             	shr    ebx,0xa
c0012398:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001239e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123a4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123aa:	39 c3                	cmp    ebx,eax
c00123ac:	77 ce                	ja     c001237c <VAS::allocatePages(int, int)+0x92>
c00123ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123b7:	39 d8                	cmp    eax,ebx
c00123b9:	73 f3                	jae    c00123ae <VAS::allocatePages(int, int)+0xc4>
c00123bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123bf:	83 c4 1c             	add    esp,0x1c
c00123c2:	5b                   	pop    ebx
c00123c3:	5e                   	pop    esi
c00123c4:	5f                   	pop    edi
c00123c5:	5d                   	pop    ebp
c00123c6:	c3                   	ret    
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	68 dc a1 02 c0       	push   0xc002a1dc
c00123cf:	e8 b7 7d 00 00       	call   c001a18b <Krnl::panic(char const*)>
c00123d4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123db:	83 c4 10             	add    esp,0x10
c00123de:	e9 43 ff ff ff       	jmp    c0012326 <VAS::allocatePages(int, int)+0x3c>
c00123e3:	83 ec 0c             	sub    esp,0xc
c00123e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123ea:	e8 30 f7 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00123ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00123fb:	0f 87 9b 00 00 00    	ja     c001249c <VAS::allocatePages(int, int)+0x1b2>
c0012401:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012405:	85 d2                	test   edx,edx
c0012407:	7e 3c                	jle    c0012445 <VAS::allocatePages(int, int)+0x15b>
c0012409:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001240d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012411:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012415:	c1 e5 0c             	shl    ebp,0xc
c0012418:	81 ce 00 04 00 00    	or     esi,0x400
c001241e:	01 dd                	add    ebp,ebx
c0012420:	e8 b8 da ff ff       	call   c000fedd <Phys::allocatePage()>
c0012425:	56                   	push   esi
c0012426:	53                   	push   ebx
c0012427:	50                   	push   eax
c0012428:	57                   	push   edi
c0012429:	e8 bc fd ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c001242e:	83 c4 10             	add    esp,0x10
c0012431:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012436:	74 03                	je     c001243b <VAS::allocatePages(int, int)+0x151>
c0012438:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001243b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012441:	39 dd                	cmp    ebp,ebx
c0012443:	75 db                	jne    c0012420 <VAS::allocatePages(int, int)+0x136>
c0012445:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001244a:	0f 84 26 ff ff ff    	je     c0012376 <VAS::allocatePages(int, int)+0x8c>
c0012450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012454:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012458:	89 d3                	mov    ebx,edx
c001245a:	c1 e0 0c             	shl    eax,0xc
c001245d:	c1 eb 0a             	shr    ebx,0xa
c0012460:	01 d0                	add    eax,edx
c0012462:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012468:	c1 e8 0a             	shr    eax,0xa
c001246b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012471:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012476:	2d 00 00 40 00       	sub    eax,0x400000
c001247b:	39 c3                	cmp    ebx,eax
c001247d:	0f 87 f9 fe ff ff    	ja     c001237c <VAS::allocatePages(int, int)+0x92>
c0012483:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012486:	81 c3 00 10 00 00    	add    ebx,0x1000
c001248c:	39 d8                	cmp    eax,ebx
c001248e:	73 f3                	jae    c0012483 <VAS::allocatePages(int, int)+0x199>
c0012490:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012494:	83 c4 1c             	add    esp,0x1c
c0012497:	5b                   	pop    ebx
c0012498:	5e                   	pop    esi
c0012499:	5f                   	pop    edi
c001249a:	5d                   	pop    ebp
c001249b:	c3                   	ret    
c001249c:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00124a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124a7:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124ae:	0f 84 4d ff ff ff    	je     c0012401 <VAS::allocatePages(int, int)+0x117>
c00124b4:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124bc:	e9 40 ff ff ff       	jmp    c0012401 <VAS::allocatePages(int, int)+0x117>
c00124c1:	90                   	nop

c00124c2 <VAS::setCPUSpecific(unsigned long)>:
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	6a 05                	push   0x5
c00124c7:	68 00 00 40 c2       	push   0xc2400000
c00124cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d4:	e8 11 fd ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d9:	83 c4 1c             	add    esp,0x1c
c00124dc:	c3                   	ret    
c00124dd:	90                   	nop

c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124de:	55                   	push   ebp
c00124df:	57                   	push   edi
c00124e0:	56                   	push   esi
c00124e1:	53                   	push   ebx
c00124e2:	83 ec 1c             	sub    esp,0x1c
c00124e5:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00124ea:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124f4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124f8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00124fe:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012502:	83 e0 01             	and    eax,0x1
c0012505:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012509:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001250d:	85 c0                	test   eax,eax
c001250f:	7e 39                	jle    c001254a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012511:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012515:	89 f3                	mov    ebx,esi
c0012517:	c1 e0 0c             	shl    eax,0xc
c001251a:	01 f0                	add    eax,esi
c001251c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012520:	55                   	push   ebp
c0012521:	53                   	push   ebx
c0012522:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012526:	29 f0                	sub    eax,esi
c0012528:	01 d8                	add    eax,ebx
c001252a:	50                   	push   eax
c001252b:	57                   	push   edi
c001252c:	e8 b9 fc ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0012531:	83 c4 10             	add    esp,0x10
c0012534:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012539:	74 03                	je     c001253e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001253b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001253e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012544:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012548:	75 d6                	jne    c0012520 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001254a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001254f:	75 10                	jne    c0012561 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012551:	0f 20 d8             	mov    eax,cr3
c0012554:	0f 22 d8             	mov    cr3,eax
c0012557:	83 c4 1c             	add    esp,0x1c
c001255a:	89 f0                	mov    eax,esi
c001255c:	5b                   	pop    ebx
c001255d:	5e                   	pop    esi
c001255e:	5f                   	pop    edi
c001255f:	5d                   	pop    ebp
c0012560:	c3                   	ret    
c0012561:	89 f3                	mov    ebx,esi
c0012563:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012567:	c1 eb 0a             	shr    ebx,0xa
c001256a:	c1 e0 0c             	shl    eax,0xc
c001256d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012573:	01 f0                	add    eax,esi
c0012575:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001257b:	c1 e8 0a             	shr    eax,0xa
c001257e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012583:	2d 00 00 40 00       	sub    eax,0x400000
c0012588:	39 c3                	cmp    ebx,eax
c001258a:	77 cb                	ja     c0012557 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001258c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001258f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012595:	39 d8                	cmp    eax,ebx
c0012597:	73 f3                	jae    c001258c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012599:	83 c4 1c             	add    esp,0x1c
c001259c:	89 f0                	mov    eax,esi
c001259e:	5b                   	pop    ebx
c001259f:	5e                   	pop    esi
c00125a0:	5f                   	pop    edi
c00125a1:	5d                   	pop    ebp
c00125a2:	c3                   	ret    
c00125a3:	90                   	nop

c00125a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125a4:	55                   	push   ebp
c00125a5:	57                   	push   edi
c00125a6:	56                   	push   esi
c00125a7:	53                   	push   ebx
c00125a8:	83 ec 1c             	sub    esp,0x1c
c00125ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125af:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125b3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125b7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125bb:	a9 ff 0f 00 00       	test   eax,0xfff
c00125c0:	75 4a                	jne    c001260c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125c6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125c9:	c1 eb 16             	shr    ebx,0x16
c00125cc:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125d3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125d7:	74 4d                	je     c0012626 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125dd:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125e1:	c1 e8 0a             	shr    eax,0xa
c00125e4:	80 fa 01             	cmp    dl,0x1
c00125e7:	19 d2                	sbb    edx,edx
c00125e9:	c1 e3 0c             	shl    ebx,0xc
c00125ec:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00125f0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00125f6:	25 fc 0f 00 00       	and    eax,0xffc
c00125fb:	01 d8                	add    eax,ebx
c00125fd:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012604:	83 c4 1c             	add    esp,0x1c
c0012607:	5b                   	pop    ebx
c0012608:	5e                   	pop    esi
c0012609:	5f                   	pop    edi
c001260a:	5d                   	pop    ebp
c001260b:	c3                   	ret    
c001260c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012610:	83 ec 0c             	sub    esp,0xc
c0012613:	68 08 a2 02 c0       	push   0xc002a208
c0012618:	e8 6e 7b 00 00       	call   c001a18b <Krnl::panic(char const*)>
c001261d:	83 c4 10             	add    esp,0x10
c0012620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012624:	eb 9c                	jmp    c00125c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001262a:	e8 ae d8 ff ff       	call   c000fedd <Phys::allocatePage()>
c001262f:	89 c5                	mov    ebp,eax
c0012631:	e8 79 f6 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c0012636:	83 ec 0c             	sub    esp,0xc
c0012639:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001263d:	6a 01                	push   0x1
c001263f:	e8 db f4 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0012644:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001264b:	6a 01                	push   0x1
c001264d:	50                   	push   eax
c001264e:	55                   	push   ebp
c001264f:	81 cd 07 04 00 00    	or     ebp,0x407
c0012655:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012659:	51                   	push   ecx
c001265a:	e8 7f fe ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001265f:	83 c4 1c             	add    esp,0x1c
c0012662:	68 00 10 00 00       	push   0x1000
c0012667:	6a 00                	push   0x0
c0012669:	50                   	push   eax
c001266a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001266e:	e8 05 e1 fe ff       	call   c0000778 <memset>
c0012673:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012677:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001267a:	e8 04 f8 ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c001267f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012682:	83 c4 10             	add    esp,0x10
c0012685:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012688:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001268c:	e9 48 ff ff ff       	jmp    c00125d9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012691:	90                   	nop

c0012692 <VAS::VAS(bool)>:
c0012692:	53                   	push   ebx
c0012693:	83 ec 28             	sub    esp,0x28
c0012696:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001269a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001269e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ad:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126b1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126b4:	e8 24 d8 ff ff       	call   c000fedd <Phys::allocatePage()>
c00126b9:	89 c2                	mov    edx,eax
c00126bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126c2:	e8 e8 f5 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c00126c7:	89 c3                	mov    ebx,eax
c00126c9:	83 ec 0c             	sub    esp,0xc
c00126cc:	6a 01                	push   0x1
c00126ce:	e8 4c f4 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00126d3:	83 c4 10             	add    esp,0x10
c00126d6:	89 c2                	mov    edx,eax
c00126d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126df:	83 ec 0c             	sub    esp,0xc
c00126e2:	6a 03                	push   0x3
c00126e4:	6a 01                	push   0x1
c00126e6:	52                   	push   edx
c00126e7:	50                   	push   eax
c00126e8:	53                   	push   ebx
c00126e9:	e8 f0 fd ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126ee:	83 c4 20             	add    esp,0x20
c00126f1:	89 c2                	mov    edx,eax
c00126f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00126fa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012702:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001270a:	7f 1c                	jg     c0012728 <VAS::VAS(bool)+0x96>
c001270c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012713:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012717:	c1 e2 02             	shl    edx,0x2
c001271a:	01 d0                	add    eax,edx
c001271c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012722:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012726:	eb da                	jmp    c0012702 <VAS::VAS(bool)+0x70>
c0012728:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012730:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012738:	7f 7a                	jg     c00127b4 <VAS::VAS(bool)+0x122>
c001273a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001273e:	2d 00 02 00 00       	sub    eax,0x200
c0012743:	c1 e0 0c             	shl    eax,0xc
c0012746:	83 c8 03             	or     eax,0x3
c0012749:	89 c2                	mov    edx,eax
c001274b:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0012750:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012756:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001275c:	83 e0 10             	and    eax,0x10
c001275f:	84 c0                	test   al,al
c0012761:	74 07                	je     c001276a <VAS::VAS(bool)+0xd8>
c0012763:	b8 00 01 00 00       	mov    eax,0x100
c0012768:	eb 05                	jmp    c001276f <VAS::VAS(bool)+0xdd>
c001276a:	b8 00 00 00 00       	mov    eax,0x0
c001276f:	09 d0                	or     eax,edx
c0012771:	89 c1                	mov    ecx,eax
c0012773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012777:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001277a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001277e:	c1 e2 02             	shl    edx,0x2
c0012781:	01 d0                	add    eax,edx
c0012783:	89 ca                	mov    edx,ecx
c0012785:	89 10                	mov    DWORD PTR [eax],edx
c0012787:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001278b:	2d 40 03 00 00       	sub    eax,0x340
c0012790:	83 f8 7f             	cmp    eax,0x7f
c0012793:	77 16                	ja     c00127ab <VAS::VAS(bool)+0x119>
c0012795:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012799:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001279c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a0:	c1 e2 02             	shl    edx,0x2
c00127a3:	01 d0                	add    eax,edx
c00127a5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127ab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127af:	e9 7c ff ff ff       	jmp    c0012730 <VAS::VAS(bool)+0x9e>
c00127b4:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00127b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127bf:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127c5:	83 e0 10             	and    eax,0x10
c00127c8:	84 c0                	test   al,al
c00127ca:	74 07                	je     c00127d3 <VAS::VAS(bool)+0x141>
c00127cc:	b8 03 41 00 00       	mov    eax,0x4103
c00127d1:	eb 05                	jmp    c00127d8 <VAS::VAS(bool)+0x146>
c00127d3:	b8 03 40 00 00       	mov    eax,0x4003
c00127d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127dc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00127df:	81 c2 20 0c 00 00    	add    edx,0xc20
c00127e5:	89 02                	mov    DWORD PTR [edx],eax
c00127e7:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00127ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127f2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00127f8:	83 ec 08             	sub    esp,0x8
c00127fb:	50                   	push   eax
c00127fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012800:	e8 bd fc ff ff       	call   c00124c2 <VAS::setCPUSpecific(unsigned long)>
c0012805:	83 c4 10             	add    esp,0x10
c0012808:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001280c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001280f:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0012814:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001281a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012820:	83 e0 10             	and    eax,0x10
c0012823:	84 c0                	test   al,al
c0012825:	74 07                	je     c001282e <VAS::VAS(bool)+0x19c>
c0012827:	b8 00 01 00 00       	mov    eax,0x100
c001282c:	eb 05                	jmp    c0012833 <VAS::VAS(bool)+0x1a1>
c001282e:	b8 00 00 00 00       	mov    eax,0x0
c0012833:	09 c2                	or     edx,eax
c0012835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012839:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001283c:	05 fc 0f 00 00       	add    eax,0xffc
c0012841:	83 ca 03             	or     edx,0x3
c0012844:	89 10                	mov    DWORD PTR [eax],edx
c0012846:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001284b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012851:	83 ec 0c             	sub    esp,0xc
c0012854:	50                   	push   eax
c0012855:	e8 c8 19 00 00       	call   c0014222 <Device::getName()>
c001285a:	83 c4 10             	add    esp,0x10
c001285d:	83 ec 08             	sub    esp,0x8
c0012860:	68 07 a3 02 c0       	push   0xc002a307
c0012865:	50                   	push   eax
c0012866:	e8 55 e0 fe ff       	call   c00008c0 <strcmp>
c001286b:	83 c4 10             	add    esp,0x10
c001286e:	85 c0                	test   eax,eax
c0012870:	0f 94 c0             	sete   al
c0012873:	84 c0                	test   al,al
c0012875:	74 70                	je     c00128e7 <VAS::VAS(bool)+0x255>
c0012877:	e8 ed af 00 00       	call   c001d869 <disableIRQs()>
c001287c:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0012881:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012887:	05 7c 09 00 00       	add    eax,0x97c
c001288c:	83 ec 0c             	sub    esp,0xc
c001288f:	50                   	push   eax
c0012890:	e8 27 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012895:	83 c4 10             	add    esp,0x10
c0012898:	25 00 f0 ff ff       	and    eax,0xfffff000
c001289d:	89 c3                	mov    ebx,eax
c001289f:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00128a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128aa:	05 7c 09 00 00       	add    eax,0x97c
c00128af:	83 ec 0c             	sub    esp,0xc
c00128b2:	50                   	push   eax
c00128b3:	e8 04 ca ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128b8:	83 c4 10             	add    esp,0x10
c00128bb:	83 ec 08             	sub    esp,0x8
c00128be:	50                   	push   eax
c00128bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128c3:	e8 9c f5 ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c00128c8:	83 c4 10             	add    esp,0x10
c00128cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00128cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128d2:	6a 11                	push   0x11
c00128d4:	53                   	push   ebx
c00128d5:	50                   	push   eax
c00128d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128da:	e8 0b f9 ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c00128df:	83 c4 10             	add    esp,0x10
c00128e2:	e8 90 af 00 00       	call   c001d877 <enableIRQs()>
c00128e7:	90                   	nop
c00128e8:	83 c4 28             	add    esp,0x28
c00128eb:	5b                   	pop    ebx
c00128ec:	c3                   	ret    

c00128ed <mapVASFirstTime>:
c00128ed:	55                   	push   ebp
c00128ee:	57                   	push   edi
c00128ef:	56                   	push   esi
c00128f0:	53                   	push   ebx
c00128f1:	83 ec 0c             	sub    esp,0xc
c00128f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128f9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00128fc:	4a                   	dec    edx
c00128fd:	0f 84 8e 00 00 00    	je     c0012991 <mapVASFirstTime+0xa4>
c0012903:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012906:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012909:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001290e:	c1 e5 15             	shl    ebp,0x15
c0012911:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012916:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001291c:	29 eb                	sub    ebx,ebp
c001291e:	29 ee                	sub    esi,ebp
c0012920:	e8 b8 d5 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012925:	83 ec 0c             	sub    esp,0xc
c0012928:	68 03 04 00 00       	push   0x403
c001292d:	6a 01                	push   0x1
c001292f:	53                   	push   ebx
c0012930:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012936:	50                   	push   eax
c0012937:	57                   	push   edi
c0012938:	e8 a1 fb ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001293d:	83 c4 20             	add    esp,0x20
c0012940:	39 f3                	cmp    ebx,esi
c0012942:	75 dc                	jne    c0012920 <mapVASFirstTime+0x33>
c0012944:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012949:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001294e:	29 ee                	sub    esi,ebp
c0012950:	29 e8                	sub    eax,ebp
c0012952:	89 c5                	mov    ebp,eax
c0012954:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012958:	19 db                	sbb    ebx,ebx
c001295a:	e8 7e d5 ff ff       	call   c000fedd <Phys::allocatePage()>
c001295f:	83 e3 04             	and    ebx,0x4
c0012962:	83 ec 0c             	sub    esp,0xc
c0012965:	81 c3 03 04 00 00    	add    ebx,0x403
c001296b:	53                   	push   ebx
c001296c:	6a 01                	push   0x1
c001296e:	56                   	push   esi
c001296f:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012975:	50                   	push   eax
c0012976:	57                   	push   edi
c0012977:	e8 62 fb ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001297c:	83 c4 20             	add    esp,0x20
c001297f:	39 f5                	cmp    ebp,esi
c0012981:	75 d1                	jne    c0012954 <mapVASFirstTime+0x67>
c0012983:	0f 20 d8             	mov    eax,cr3
c0012986:	0f 22 d8             	mov    cr3,eax
c0012989:	83 c4 0c             	add    esp,0xc
c001298c:	5b                   	pop    ebx
c001298d:	5e                   	pop    esi
c001298e:	5f                   	pop    edi
c001298f:	5d                   	pop    ebp
c0012990:	c3                   	ret    
c0012991:	83 ec 0c             	sub    esp,0xc
c0012994:	68 15 a3 02 c0       	push   0xc002a315
c0012999:	e8 71 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001299e:	83 c4 10             	add    esp,0x10
c00129a1:	83 c4 0c             	add    esp,0xc
c00129a4:	5b                   	pop    ebx
c00129a5:	5e                   	pop    esi
c00129a6:	5f                   	pop    edi
c00129a7:	5d                   	pop    ebp
c00129a8:	c3                   	ret    

c00129a9 <__cxa_atexit>:
c00129a9:	31 c0                	xor    eax,eax
c00129ab:	c3                   	ret    

c00129ac <__cxa_finalize>:
c00129ac:	c3                   	ret    

c00129ad <__stack_chk_fail>:
c00129ad:	55                   	push   ebp
c00129ae:	89 e5                	mov    ebp,esp
c00129b0:	83 ec 14             	sub    esp,0x14
c00129b3:	68 2e a3 02 c0       	push   0xc002a32e
c00129b8:	e8 52 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00129bd:	58                   	pop    eax
c00129be:	5a                   	pop    edx
c00129bf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00129c2:	68 7e a3 02 c0       	push   0xc002a37e
c00129c7:	e8 43 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00129cc:	59                   	pop    ecx
c00129cd:	58                   	pop    eax
c00129ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129d4:	68 7e a3 02 c0       	push   0xc002a37e
c00129d9:	e8 31 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00129de:	5a                   	pop    edx
c00129df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129e2:	59                   	pop    ecx
c00129e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00129e5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129e8:	68 7e a3 02 c0       	push   0xc002a37e
c00129ed:	e8 1d 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00129f2:	5a                   	pop    edx
c00129f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129f6:	59                   	pop    ecx
c00129f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00129f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00129fb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129fe:	68 7e a3 02 c0       	push   0xc002a37e
c0012a03:	e8 07 01 00 00       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0012a08:	c7 04 24 86 a3 02 c0 	mov    DWORD PTR [esp],0xc002a386
c0012a0f:	e8 77 77 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0012a14:	83 c4 10             	add    esp,0x10
c0012a17:	c9                   	leave  
c0012a18:	c3                   	ret    

c0012a19 <__cxa_pure_virtual>:
c0012a19:	83 ec 18             	sub    esp,0x18
c0012a1c:	68 9e a3 02 c0       	push   0xc002a39e
c0012a21:	e8 65 77 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0012a26:	83 c4 1c             	add    esp,0x1c
c0012a29:	c3                   	ret    

c0012a2a <operator new[](unsigned long)>:
c0012a2a:	e9 11 ce ff ff       	jmp    c000f840 <malloc>

c0012a2f <operator delete(void*, unsigned long)>:
c0012a2f:	e9 2c ce ff ff       	jmp    c000f860 <rfree>

c0012a34 <operator delete[](void*)>:
c0012a34:	e9 27 ce ff ff       	jmp    c000f860 <rfree>

c0012a39 <operator delete[](void*, unsigned long)>:
c0012a39:	e9 22 ce ff ff       	jmp    c000f860 <rfree>

c0012a3e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012a3e:	57                   	push   edi
c0012a3f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012a44:	56                   	push   esi
c0012a45:	be b4 a3 02 c0       	mov    esi,0xc002a3b4
c0012a4a:	53                   	push   ebx
c0012a4b:	83 ec 40             	sub    esp,0x40
c0012a4e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a52:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012a56:	fc                   	cld    
c0012a57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a59:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012a5d:	83 f9 3e             	cmp    ecx,0x3e
c0012a60:	7e 05                	jle    c0012a67 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012a62:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012a67:	89 df                	mov    edi,ebx
c0012a69:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a6d:	eb 02                	jmp    c0012a71 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012a6f:	89 c7                	mov    edi,eax
c0012a71:	31 d2                	xor    edx,edx
c0012a73:	46                   	inc    esi
c0012a74:	89 f8                	mov    eax,edi
c0012a76:	f7 f1                	div    ecx
c0012a78:	39 cf                	cmp    edi,ecx
c0012a7a:	73 f3                	jae    c0012a6f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012a7c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a7f:	eb 02                	jmp    c0012a83 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012a81:	89 c3                	mov    ebx,eax
c0012a83:	31 d2                	xor    edx,edx
c0012a85:	4e                   	dec    esi
c0012a86:	89 d8                	mov    eax,ebx
c0012a88:	f7 f1                	div    ecx
c0012a8a:	39 cb                	cmp    ebx,ecx
c0012a8c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012a90:	88 16                	mov    BYTE PTR [esi],dl
c0012a92:	73 ed                	jae    c0012a81 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012a94:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012a98:	83 c4 40             	add    esp,0x40
c0012a9b:	5b                   	pop    ebx
c0012a9c:	5e                   	pop    esi
c0012a9d:	5f                   	pop    edi
c0012a9e:	c3                   	ret    

c0012a9f <Dbg::logc(char)>:
c0012a9f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012aa3:	ba fd 03 00 00       	mov    edx,0x3fd
c0012aa8:	ec                   	in     al,dx
c0012aa9:	a8 20                	test   al,0x20
c0012aab:	74 fb                	je     c0012aa8 <Dbg::logc(char)+0x9>
c0012aad:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ab2:	88 c8                	mov    al,cl
c0012ab4:	ee                   	out    dx,al
c0012ab5:	c3                   	ret    

c0012ab6 <Dbg::logs(char*)>:
c0012ab6:	53                   	push   ebx
c0012ab7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012abb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012abe:	84 c0                	test   al,al
c0012ac0:	74 0f                	je     c0012ad1 <Dbg::logs(char*)+0x1b>
c0012ac2:	50                   	push   eax
c0012ac3:	43                   	inc    ebx
c0012ac4:	e8 d6 ff ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012ac9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012acc:	5a                   	pop    edx
c0012acd:	84 c0                	test   al,al
c0012acf:	75 f1                	jne    c0012ac2 <Dbg::logs(char*)+0xc>
c0012ad1:	5b                   	pop    ebx
c0012ad2:	c3                   	ret    

c0012ad3 <Dbg::logWriteInt(unsigned int)>:
c0012ad3:	83 ec 10             	sub    esp,0x10
c0012ad6:	6a 0a                	push   0xa
c0012ad8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012adc:	50                   	push   eax
c0012add:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae1:	e8 58 ff ff ff       	call   c0012a3e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ae6:	50                   	push   eax
c0012ae7:	e8 ca ff ff ff       	call   c0012ab6 <Dbg::logs(char*)>
c0012aec:	83 c4 20             	add    esp,0x20
c0012aef:	c3                   	ret    

c0012af0 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012af0:	83 ec 10             	sub    esp,0x10
c0012af3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012af7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012afb:	50                   	push   eax
c0012afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b00:	e8 39 ff ff ff       	call   c0012a3e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b05:	50                   	push   eax
c0012b06:	e8 ab ff ff ff       	call   c0012ab6 <Dbg::logs(char*)>
c0012b0b:	83 c4 20             	add    esp,0x20
c0012b0e:	c3                   	ret    

c0012b0f <Dbg::kprintf(char const*, ...)>:
c0012b0f:	55                   	push   ebp
c0012b10:	57                   	push   edi
c0012b11:	56                   	push   esi
c0012b12:	53                   	push   ebx
c0012b13:	83 ec 0c             	sub    esp,0xc
c0012b16:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b1a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b22:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b25:	84 c0                	test   al,al
c0012b27:	74 4a                	je     c0012b73 <Dbg::kprintf(char const*, ...)+0x64>
c0012b29:	31 db                	xor    ebx,ebx
c0012b2b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b2e:	3c 25                	cmp    al,0x25
c0012b30:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012b33:	0f 85 e4 00 00 00    	jne    c0012c1d <Dbg::kprintf(char const*, ...)+0x10e>
c0012b39:	83 c3 02             	add    ebx,0x2
c0012b3c:	8a 07                	mov    al,BYTE PTR [edi]
c0012b3e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012b41:	83 e8 25             	sub    eax,0x25
c0012b44:	3c 53                	cmp    al,0x53
c0012b46:	0f 87 ba 00 00 00    	ja     c0012c06 <Dbg::kprintf(char const*, ...)+0xf7>
c0012b4c:	0f b6 c0             	movzx  eax,al
c0012b4f:	ff 24 85 f4 a3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5c0c]
c0012b56:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b5a:	89 c8                	mov    eax,ecx
c0012b5c:	83 c1 04             	add    ecx,0x4
c0012b5f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012b63:	ff 30                	push   DWORD PTR [eax]
c0012b65:	e8 4c ff ff ff       	call   c0012ab6 <Dbg::logs(char*)>
c0012b6a:	58                   	pop    eax
c0012b6b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012b6f:	84 c0                	test   al,al
c0012b71:	75 b8                	jne    c0012b2b <Dbg::kprintf(char const*, ...)+0x1c>
c0012b73:	83 c4 0c             	add    esp,0xc
c0012b76:	5b                   	pop    ebx
c0012b77:	5e                   	pop    esi
c0012b78:	5f                   	pop    edi
c0012b79:	5d                   	pop    ebp
c0012b7a:	c3                   	ret    
c0012b7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b7f:	89 d0                	mov    eax,edx
c0012b81:	83 c2 04             	add    edx,0x4
c0012b84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b88:	ff 30                	push   DWORD PTR [eax]
c0012b8a:	e8 44 ff ff ff       	call   c0012ad3 <Dbg::logWriteInt(unsigned int)>
c0012b8f:	58                   	pop    eax
c0012b90:	eb d9                	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012b92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b96:	89 d0                	mov    eax,edx
c0012b98:	83 c2 04             	add    edx,0x4
c0012b9b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012b9e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ba2:	50                   	push   eax
c0012ba3:	e8 f7 fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012ba8:	58                   	pop    eax
c0012ba9:	eb c0                	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012bab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012baf:	89 c8                	mov    eax,ecx
c0012bb1:	83 c1 04             	add    ecx,0x4
c0012bb4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bb8:	ff 30                	push   DWORD PTR [eax]
c0012bba:	e8 14 ff ff ff       	call   c0012ad3 <Dbg::logWriteInt(unsigned int)>
c0012bbf:	5f                   	pop    edi
c0012bc0:	eb a9                	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012bc2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bc6:	89 c8                	mov    eax,ecx
c0012bc8:	83 c1 04             	add    ecx,0x4
c0012bcb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bcf:	6a 10                	push   0x10
c0012bd1:	ff 30                	push   DWORD PTR [eax]
c0012bd3:	e8 18 ff ff ff       	call   c0012af0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bd8:	59                   	pop    ecx
c0012bd9:	5f                   	pop    edi
c0012bda:	eb 8f                	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012bdc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012be0:	89 d0                	mov    eax,edx
c0012be2:	83 c2 08             	add    edx,0x8
c0012be5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012be9:	6a 10                	push   0x10
c0012beb:	ff 30                	push   DWORD PTR [eax]
c0012bed:	e8 fe fe ff ff       	call   c0012af0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bf2:	58                   	pop    eax
c0012bf3:	5a                   	pop    edx
c0012bf4:	e9 72 ff ff ff       	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012bf9:	6a 25                	push   0x25
c0012bfb:	e8 9f fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012c00:	58                   	pop    eax
c0012c01:	e9 65 ff ff ff       	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012c06:	6a 25                	push   0x25
c0012c08:	e8 92 fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012c0d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012c10:	50                   	push   eax
c0012c11:	e8 89 fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012c16:	5a                   	pop    edx
c0012c17:	59                   	pop    ecx
c0012c18:	e9 4e ff ff ff       	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012c1d:	50                   	push   eax
c0012c1e:	89 eb                	mov    ebx,ebp
c0012c20:	e8 7a fe ff ff       	call   c0012a9f <Dbg::logc(char)>
c0012c25:	89 fd                	mov    ebp,edi
c0012c27:	58                   	pop    eax
c0012c28:	e9 3e ff ff ff       	jmp    c0012b6b <Dbg::kprintf(char const*, ...)+0x5c>
c0012c2d:	90                   	nop

c0012c2e <File::read(unsigned long long, void*, int*)>:
c0012c2e:	53                   	push   ebx
c0012c2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c33:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c37:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c3e:	3c 19                	cmp    al,0x19
c0012c40:	77 35                	ja     c0012c77 <File::read(unsigned long long, void*, int*)+0x49>
c0012c42:	8b 04 85 00 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c00]
c0012c49:	85 c0                	test   eax,eax
c0012c4b:	74 2a                	je     c0012c77 <File::read(unsigned long long, void*, int*)+0x49>
c0012c4d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c53:	85 c0                	test   eax,eax
c0012c55:	74 20                	je     c0012c77 <File::read(unsigned long long, void*, int*)+0x49>
c0012c57:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c5b:	74 21                	je     c0012c7e <File::read(unsigned long long, void*, int*)+0x50>
c0012c5d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c5f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c63:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c71:	5b                   	pop    ebx
c0012c72:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012c75:	ff e0                	jmp    eax
c0012c77:	b8 0b 00 00 00       	mov    eax,0xb
c0012c7c:	eb 05                	jmp    c0012c83 <File::read(unsigned long long, void*, int*)+0x55>
c0012c7e:	b8 05 00 00 00       	mov    eax,0x5
c0012c83:	5b                   	pop    ebx
c0012c84:	c3                   	ret    
c0012c85:	90                   	nop

c0012c86 <File::write(unsigned long long, void*, int*)>:
c0012c86:	53                   	push   ebx
c0012c87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c8b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c8f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c96:	3c 19                	cmp    al,0x19
c0012c98:	77 35                	ja     c0012ccf <File::write(unsigned long long, void*, int*)+0x49>
c0012c9a:	8b 04 85 00 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c00]
c0012ca1:	85 c0                	test   eax,eax
c0012ca3:	74 2a                	je     c0012ccf <File::write(unsigned long long, void*, int*)+0x49>
c0012ca5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cab:	85 c0                	test   eax,eax
c0012cad:	74 20                	je     c0012ccf <File::write(unsigned long long, void*, int*)+0x49>
c0012caf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cb3:	74 21                	je     c0012cd6 <File::write(unsigned long long, void*, int*)+0x50>
c0012cb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012cb7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012cbb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012cc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012cc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012cc9:	5b                   	pop    ebx
c0012cca:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ccd:	ff e0                	jmp    eax
c0012ccf:	b8 0b 00 00 00       	mov    eax,0xb
c0012cd4:	eb 05                	jmp    c0012cdb <File::write(unsigned long long, void*, int*)+0x55>
c0012cd6:	b8 05 00 00 00       	mov    eax,0x5
c0012cdb:	5b                   	pop    ebx
c0012cdc:	c3                   	ret    
c0012cdd:	90                   	nop

c0012cde <Directory::read(unsigned long long, void*, int*)>:
c0012cde:	53                   	push   ebx
c0012cdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ce3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ce7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012cee:	3c 19                	cmp    al,0x19
c0012cf0:	77 35                	ja     c0012d27 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cf2:	8b 04 85 00 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c00]
c0012cf9:	85 c0                	test   eax,eax
c0012cfb:	74 2a                	je     c0012d27 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cfd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d03:	85 c0                	test   eax,eax
c0012d05:	74 20                	je     c0012d27 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d0b:	74 21                	je     c0012d2e <Directory::read(unsigned long long, void*, int*)+0x50>
c0012d0d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d13:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d21:	5b                   	pop    ebx
c0012d22:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012d25:	ff e0                	jmp    eax
c0012d27:	b8 0b 00 00 00       	mov    eax,0xb
c0012d2c:	eb 05                	jmp    c0012d33 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012d2e:	b8 05 00 00 00       	mov    eax,0x5
c0012d33:	5b                   	pop    ebx
c0012d34:	c3                   	ret    
c0012d35:	90                   	nop

c0012d36 <Directory::write(unsigned long long, void*, int*)>:
c0012d36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d3a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012d41:	b8 0b 00 00 00       	mov    eax,0xb
c0012d46:	80 fa 19             	cmp    dl,0x19
c0012d49:	77 18                	ja     c0012d63 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d4b:	8b 14 95 00 e4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c00]
c0012d52:	85 d2                	test   edx,edx
c0012d54:	74 0d                	je     c0012d63 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d56:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012d5d:	19 c0                	sbb    eax,eax
c0012d5f:	83 e0 0a             	and    eax,0xa
c0012d62:	40                   	inc    eax
c0012d63:	c3                   	ret    

c0012d64 <File::isAtty()>:
c0012d64:	31 c0                	xor    eax,eax
c0012d66:	c3                   	ret    
c0012d67:	90                   	nop

c0012d68 <Directory::isAtty()>:
c0012d68:	31 c0                	xor    eax,eax
c0012d6a:	c3                   	ret    
c0012d6b:	90                   	nop

c0012d6c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012d6c:	b8 0a 00 00 00       	mov    eax,0xa
c0012d71:	c3                   	ret    

c0012d72 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012d72:	b8 0a 00 00 00       	mov    eax,0xa
c0012d77:	c3                   	ret    

c0012d78 <File::~File()>:
c0012d78:	83 ec 0c             	sub    esp,0xc
c0012d7b:	ba b0 a5 02 c0       	mov    edx,0xc002a5b0
c0012d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d84:	89 10                	mov    DWORD PTR [eax],edx
c0012d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8a:	83 ec 0c             	sub    esp,0xc
c0012d8d:	50                   	push   eax
c0012d8e:	e8 2b eb ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0012d93:	83 c4 10             	add    esp,0x10
c0012d96:	90                   	nop
c0012d97:	83 c4 0c             	add    esp,0xc
c0012d9a:	c3                   	ret    
c0012d9b:	90                   	nop

c0012d9c <File::~File()>:
c0012d9c:	83 ec 0c             	sub    esp,0xc
c0012d9f:	83 ec 0c             	sub    esp,0xc
c0012da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da6:	e8 cd ff ff ff       	call   c0012d78 <File::~File()>
c0012dab:	83 c4 10             	add    esp,0x10
c0012dae:	83 ec 08             	sub    esp,0x8
c0012db1:	68 14 01 00 00       	push   0x114
c0012db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dba:	e8 70 fc ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0012dbf:	83 c4 10             	add    esp,0x10
c0012dc2:	83 c4 0c             	add    esp,0xc
c0012dc5:	c3                   	ret    

c0012dc6 <Directory::~Directory()>:
c0012dc6:	83 ec 0c             	sub    esp,0xc
c0012dc9:	ba cc a5 02 c0       	mov    edx,0xc002a5cc
c0012dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd2:	89 10                	mov    DWORD PTR [eax],edx
c0012dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd8:	83 ec 0c             	sub    esp,0xc
c0012ddb:	50                   	push   eax
c0012ddc:	e8 dd ea ff ff       	call   c00118be <UnixFile::~UnixFile()>
c0012de1:	83 c4 10             	add    esp,0x10
c0012de4:	90                   	nop
c0012de5:	83 c4 0c             	add    esp,0xc
c0012de8:	c3                   	ret    
c0012de9:	90                   	nop

c0012dea <Directory::~Directory()>:
c0012dea:	83 ec 0c             	sub    esp,0xc
c0012ded:	83 ec 0c             	sub    esp,0xc
c0012df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012df4:	e8 cd ff ff ff       	call   c0012dc6 <Directory::~Directory()>
c0012df9:	83 c4 10             	add    esp,0x10
c0012dfc:	83 ec 08             	sub    esp,0x8
c0012dff:	68 14 01 00 00       	push   0x114
c0012e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e08:	e8 22 fc ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0012e0d:	83 c4 10             	add    esp,0x10
c0012e10:	83 c4 0c             	add    esp,0xc
c0012e13:	c3                   	ret    

c0012e14 <Filesystem::Filesystem()>:
c0012e14:	ba 4c a5 02 c0       	mov    edx,0xc002a54c
c0012e19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e1d:	89 10                	mov    DWORD PTR [eax],edx
c0012e1f:	8b 15 68 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df68
c0012e25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e29:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e30:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c0012e35:	90                   	nop
c0012e36:	c3                   	ret    
c0012e37:	90                   	nop

c0012e38 <Filesystem::~Filesystem()>:
c0012e38:	ba 4c a5 02 c0       	mov    edx,0xc002a54c
c0012e3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e41:	89 10                	mov    DWORD PTR [eax],edx
c0012e43:	90                   	nop
c0012e44:	c3                   	ret    
c0012e45:	90                   	nop

c0012e46 <Filesystem::~Filesystem()>:
c0012e46:	83 ec 0c             	sub    esp,0xc
c0012e49:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e4d:	e8 e6 ff ff ff       	call   c0012e38 <Filesystem::~Filesystem()>
c0012e52:	83 c4 04             	add    esp,0x4
c0012e55:	83 ec 08             	sub    esp,0x8
c0012e58:	6a 08                	push   0x8
c0012e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e5e:	e8 cc fb ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0012e63:	83 c4 10             	add    esp,0x10
c0012e66:	83 c4 0c             	add    esp,0xc
c0012e69:	c3                   	ret    

c0012e6a <Fs::getcwd(Process*, char*, int)>:
c0012e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e6e:	31 c0                	xor    eax,eax
c0012e70:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e73:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012e77:	7d 15                	jge    c0012e8e <Fs::getcwd(Process*, char*, int)+0x24>
c0012e79:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e7d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012e84:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012e87:	84 c9                	test   cl,cl
c0012e89:	74 06                	je     c0012e91 <Fs::getcwd(Process*, char*, int)+0x27>
c0012e8b:	40                   	inc    eax
c0012e8c:	eb e2                	jmp    c0012e70 <Fs::getcwd(Process*, char*, int)+0x6>
c0012e8e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012e91:	31 c0                	xor    eax,eax
c0012e93:	c3                   	ret    

c0012e94 <Fs::initVFS()>:
c0012e94:	83 ec 18             	sub    esp,0x18
c0012e97:	6a 08                	push   0x8
c0012e99:	e8 a2 c9 ff ff       	call   c000f840 <malloc>
c0012e9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ea1:	e8 e2 db 00 00       	call   c0020a88 <FAT::FAT()>
c0012ea6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ead:	e8 8e c9 ff ff       	call   c000f840 <malloc>
c0012eb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eb5:	e8 26 ee 00 00       	call   c0021ce0 <ISO9660::ISO9660()>
c0012eba:	83 c4 1c             	add    esp,0x1c
c0012ebd:	c3                   	ret    

c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ebe:	55                   	push   ebp
c0012ebf:	57                   	push   edi
c0012ec0:	56                   	push   esi
c0012ec1:	53                   	push   ebx
c0012ec2:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ec8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ecf:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012ed6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012edd:	68 00 04 00 00       	push   0x400
c0012ee2:	6a 00                	push   0x0
c0012ee4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012ee8:	56                   	push   esi
c0012ee9:	e8 8a d8 fe ff       	call   c0000778 <memset>
c0012eee:	83 c4 10             	add    esp,0x10
c0012ef1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ef5:	75 0b                	jne    c0012f02 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ef7:	50                   	push   eax
c0012ef8:	50                   	push   eax
c0012ef9:	57                   	push   edi
c0012efa:	56                   	push   esi
c0012efb:	e8 34 d9 fe ff       	call   c0000834 <strcpy>
c0012f00:	eb 41                	jmp    c0012f43 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012f02:	8a 07                	mov    al,BYTE PTR [edi]
c0012f04:	3c 5c                	cmp    al,0x5c
c0012f06:	74 04                	je     c0012f0c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012f08:	3c 2f                	cmp    al,0x2f
c0012f0a:	75 18                	jne    c0012f24 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012f0c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012f0f:	3c 60                	cmp    al,0x60
c0012f11:	7e 03                	jle    c0012f16 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012f13:	83 e8 20             	sub    eax,0x20
c0012f16:	88 04 24             	mov    BYTE PTR [esp],al
c0012f19:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f20:	50                   	push   eax
c0012f21:	50                   	push   eax
c0012f22:	eb 18                	jmp    c0012f3c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012f24:	50                   	push   eax
c0012f25:	50                   	push   eax
c0012f26:	55                   	push   ebp
c0012f27:	56                   	push   esi
c0012f28:	e8 07 d9 fe ff       	call   c0000834 <strcpy>
c0012f2d:	5a                   	pop    edx
c0012f2e:	59                   	pop    ecx
c0012f2f:	68 d7 bb 02 c0       	push   0xc002bbd7
c0012f34:	56                   	push   esi
c0012f35:	e8 3a da fe ff       	call   c0000974 <strcat>
c0012f3a:	5d                   	pop    ebp
c0012f3b:	58                   	pop    eax
c0012f3c:	57                   	push   edi
c0012f3d:	56                   	push   esi
c0012f3e:	e8 31 da fe ff       	call   c0000974 <strcat>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012f49:	3c 60                	cmp    al,0x60
c0012f4b:	7e 03                	jle    c0012f50 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012f4d:	83 e8 20             	sub    eax,0x20
c0012f50:	88 04 24             	mov    BYTE PTR [esp],al
c0012f53:	88 03                	mov    BYTE PTR [ebx],al
c0012f55:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f5c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012f62:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012f66:	bf 03 00 00 00       	mov    edi,0x3
c0012f6b:	b8 03 00 00 00       	mov    eax,0x3
c0012f70:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012f73:	84 d2                	test   dl,dl
c0012f75:	0f 84 91 00 00 00    	je     c001300c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012f7b:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012f7e:	80 fa 5c             	cmp    dl,0x5c
c0012f81:	74 05                	je     c0012f88 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012f83:	80 fa 2f             	cmp    dl,0x2f
c0012f86:	75 12                	jne    c0012f9a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f88:	89 c5                	mov    ebp,eax
c0012f8a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f8f:	74 09                	je     c0012f9a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f91:	40                   	inc    eax
c0012f92:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012f96:	89 cf                	mov    edi,ecx
c0012f98:	eb d6                	jmp    c0012f70 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012f9a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012f9f:	75 5b                	jne    c0012ffc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fa1:	80 fa 2e             	cmp    dl,0x2e
c0012fa4:	75 56                	jne    c0012ffc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fa6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012faa:	74 19                	je     c0012fc5 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012fac:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fb1:	74 53                	je     c0013006 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fb3:	89 f9                	mov    ecx,edi
c0012fb5:	41                   	inc    ecx
c0012fb6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fb9:	80 fa 2f             	cmp    dl,0x2f
c0012fbc:	74 f7                	je     c0012fb5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fbe:	80 fa 5c             	cmp    dl,0x5c
c0012fc1:	74 f2                	je     c0012fb5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fc3:	eb d1                	jmp    c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fc5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fca:	74 3a                	je     c0013006 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fcc:	83 f8 03             	cmp    eax,0x3
c0012fcf:	74 c5                	je     c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fd1:	41                   	inc    ecx
c0012fd2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fd5:	80 fa 2f             	cmp    dl,0x2f
c0012fd8:	74 f7                	je     c0012fd1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fda:	80 fa 5c             	cmp    dl,0x5c
c0012fdd:	74 f2                	je     c0012fd1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fdf:	48                   	dec    eax
c0012fe0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012fe4:	75 06                	jne    c0012fec <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012fe6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012fea:	eb f3                	jmp    c0012fdf <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012fec:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ff0:	74 07                	je     c0012ff9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ff2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ff6:	48                   	dec    eax
c0012ff7:	eb f3                	jmp    c0012fec <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ff9:	40                   	inc    eax
c0012ffa:	eb 9a                	jmp    c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ffc:	80 fa 2f             	cmp    dl,0x2f
c0012fff:	74 95                	je     c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013001:	80 fa 5c             	cmp    dl,0x5c
c0013004:	74 90                	je     c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013006:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013009:	40                   	inc    eax
c001300a:	eb 8a                	jmp    c0012f96 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001300c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013010:	83 ec 0c             	sub    esp,0xc
c0013013:	53                   	push   ebx
c0013014:	e8 7b d7 fe ff       	call   c0000794 <strlen>
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013021:	75 26                	jne    c0013049 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013023:	83 ec 0c             	sub    esp,0xc
c0013026:	53                   	push   ebx
c0013027:	e8 68 d7 fe ff       	call   c0000794 <strlen>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013034:	74 26                	je     c001305c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013036:	83 ec 0c             	sub    esp,0xc
c0013039:	53                   	push   ebx
c001303a:	e8 55 d7 fe ff       	call   c0000794 <strlen>
c001303f:	83 c4 10             	add    esp,0x10
c0013042:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013047:	eb c7                	jmp    c0013010 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013049:	83 ec 0c             	sub    esp,0xc
c001304c:	53                   	push   ebx
c001304d:	e8 42 d7 fe ff       	call   c0000794 <strlen>
c0013052:	83 c4 10             	add    esp,0x10
c0013055:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001305a:	74 c7                	je     c0013023 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001305c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013062:	5b                   	pop    ebx
c0013063:	5e                   	pop    esi
c0013064:	5f                   	pop    edi
c0013065:	5d                   	pop    ebp
c0013066:	c3                   	ret    
c0013067:	90                   	nop

c0013068 <File::File(char const*, Process*)>:
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306f:	83 ec 08             	sub    esp,0x8
c0013072:	6a 00                	push   0x0
c0013074:	50                   	push   eax
c0013075:	e8 62 e6 ff ff       	call   c00116dc <UnixFile::UnixFile(int)>
c001307a:	83 c4 10             	add    esp,0x10
c001307d:	ba b0 a5 02 c0       	mov    edx,0xc002a5b0
c0013082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013086:	89 10                	mov    DWORD PTR [eax],edx
c0013088:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001308c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013096:	83 c0 0d             	add    eax,0xd
c0013099:	83 ec 04             	sub    esp,0x4
c001309c:	52                   	push   edx
c001309d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a1:	50                   	push   eax
c00130a2:	e8 17 fe ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c00130a7:	83 c4 10             	add    esp,0x10
c00130aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ae:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130b1:	8d 50 bf             	lea    edx,[eax-0x41]
c00130b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130c6:	90                   	nop
c00130c7:	83 c4 0c             	add    esp,0xc
c00130ca:	c3                   	ret    
c00130cb:	90                   	nop

c00130cc <File::open(FileOpenMode)>:
c00130cc:	53                   	push   ebx
c00130cd:	b8 0b 00 00 00       	mov    eax,0xb
c00130d2:	83 ec 08             	sub    esp,0x8
c00130d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130d9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130e0:	80 fa 19             	cmp    dl,0x19
c00130e3:	77 40                	ja     c0013125 <File::open(FileOpenMode)+0x59>
c00130e5:	8b 14 95 00 e4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c00]
c00130ec:	85 d2                	test   edx,edx
c00130ee:	74 35                	je     c0013125 <File::open(FileOpenMode)+0x59>
c00130f0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130f6:	85 d2                	test   edx,edx
c00130f8:	74 2b                	je     c0013125 <File::open(FileOpenMode)+0x59>
c00130fa:	b8 06 00 00 00       	mov    eax,0x6
c00130ff:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013103:	75 20                	jne    c0013125 <File::open(FileOpenMode)+0x59>
c0013105:	8b 02                	mov    eax,DWORD PTR [edx]
c0013107:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001310d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013111:	51                   	push   ecx
c0013112:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013115:	51                   	push   ecx
c0013116:	52                   	push   edx
c0013117:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001311a:	83 c4 10             	add    esp,0x10
c001311d:	85 c0                	test   eax,eax
c001311f:	75 04                	jne    c0013125 <File::open(FileOpenMode)+0x59>
c0013121:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013125:	83 c4 08             	add    esp,0x8
c0013128:	5b                   	pop    ebx
c0013129:	c3                   	ret    

c001312a <File::close()>:
c001312a:	53                   	push   ebx
c001312b:	b8 0b 00 00 00       	mov    eax,0xb
c0013130:	83 ec 08             	sub    esp,0x8
c0013133:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013137:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001313e:	80 fa 19             	cmp    dl,0x19
c0013141:	77 41                	ja     c0013184 <File::close()+0x5a>
c0013143:	8b 1c 95 00 e4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1c00]
c001314a:	85 db                	test   ebx,ebx
c001314c:	74 36                	je     c0013184 <File::close()+0x5a>
c001314e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013155:	74 2d                	je     c0013184 <File::close()+0x5a>
c0013157:	b8 05 00 00 00       	mov    eax,0x5
c001315c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013160:	74 22                	je     c0013184 <File::close()+0x5a>
c0013162:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013166:	8b 04 95 00 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c00]
c001316d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013173:	53                   	push   ebx
c0013174:	53                   	push   ebx
c0013175:	8b 10                	mov    edx,DWORD PTR [eax]
c0013177:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001317d:	50                   	push   eax
c001317e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013181:	83 c4 10             	add    esp,0x10
c0013184:	83 c4 08             	add    esp,0x8
c0013187:	5b                   	pop    ebx
c0013188:	c3                   	ret    
c0013189:	90                   	nop

c001318a <File::seek(unsigned long long)>:
c001318a:	56                   	push   esi
c001318b:	53                   	push   ebx
c001318c:	b8 0b 00 00 00       	mov    eax,0xb
c0013191:	51                   	push   ecx
c0013192:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013196:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001319a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00131a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131a5:	80 fa 19             	cmp    dl,0x19
c00131a8:	77 31                	ja     c00131db <File::seek(unsigned long long)+0x51>
c00131aa:	8b 14 95 00 e4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c00]
c00131b1:	85 d2                	test   edx,edx
c00131b3:	74 26                	je     c00131db <File::seek(unsigned long long)+0x51>
c00131b5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131bb:	85 d2                	test   edx,edx
c00131bd:	74 1c                	je     c00131db <File::seek(unsigned long long)+0x51>
c00131bf:	b8 05 00 00 00       	mov    eax,0x5
c00131c4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00131c8:	74 11                	je     c00131db <File::seek(unsigned long long)+0x51>
c00131ca:	8b 02                	mov    eax,DWORD PTR [edx]
c00131cc:	53                   	push   ebx
c00131cd:	51                   	push   ecx
c00131ce:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00131d4:	52                   	push   edx
c00131d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00131d8:	83 c4 10             	add    esp,0x10
c00131db:	5a                   	pop    edx
c00131dc:	5b                   	pop    ebx
c00131dd:	5e                   	pop    esi
c00131de:	c3                   	ret    
c00131df:	90                   	nop

c00131e0 <File::tell(unsigned long long*)>:
c00131e0:	83 ec 0c             	sub    esp,0xc
c00131e3:	b8 0b 00 00 00       	mov    eax,0xb
c00131e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131ec:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131f3:	80 fa 19             	cmp    dl,0x19
c00131f6:	77 34                	ja     c001322c <File::tell(unsigned long long*)+0x4c>
c00131f8:	8b 14 95 00 e4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c00]
c00131ff:	85 d2                	test   edx,edx
c0013201:	74 29                	je     c001322c <File::tell(unsigned long long*)+0x4c>
c0013203:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013209:	85 d2                	test   edx,edx
c001320b:	74 1f                	je     c001322c <File::tell(unsigned long long*)+0x4c>
c001320d:	b8 05 00 00 00       	mov    eax,0x5
c0013212:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013216:	74 14                	je     c001322c <File::tell(unsigned long long*)+0x4c>
c0013218:	50                   	push   eax
c0013219:	8b 02                	mov    eax,DWORD PTR [edx]
c001321b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001321f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013225:	52                   	push   edx
c0013226:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	83 c4 0c             	add    esp,0xc
c001322f:	c3                   	ret    

c0013230 <File::rewind()>:
c0013230:	83 ec 10             	sub    esp,0x10
c0013233:	6a 00                	push   0x0
c0013235:	6a 00                	push   0x0
c0013237:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323b:	e8 4a ff ff ff       	call   c001318a <File::seek(unsigned long long)>
c0013240:	83 c4 1c             	add    esp,0x1c
c0013243:	c3                   	ret    

c0013244 <File::unlink()>:
c0013244:	83 ec 0c             	sub    esp,0xc
c0013247:	b8 0b 00 00 00       	mov    eax,0xb
c001324c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013250:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013257:	80 f9 19             	cmp    cl,0x19
c001325a:	77 2f                	ja     c001328b <File::unlink()+0x47>
c001325c:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c0013263:	85 c9                	test   ecx,ecx
c0013265:	74 24                	je     c001328b <File::unlink()+0x47>
c0013267:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001326d:	85 c9                	test   ecx,ecx
c001326f:	74 1a                	je     c001328b <File::unlink()+0x47>
c0013271:	b8 06 00 00 00       	mov    eax,0x6
c0013276:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001327a:	75 0f                	jne    c001328b <File::unlink()+0x47>
c001327c:	83 c2 0d             	add    edx,0xd
c001327f:	50                   	push   eax
c0013280:	50                   	push   eax
c0013281:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013283:	52                   	push   edx
c0013284:	51                   	push   ecx
c0013285:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013288:	83 c4 10             	add    esp,0x10
c001328b:	83 c4 0c             	add    esp,0xc
c001328e:	c3                   	ret    
c001328f:	90                   	nop

c0013290 <File::rename(char const*)>:
c0013290:	83 ec 0c             	sub    esp,0xc
c0013293:	b8 0b 00 00 00       	mov    eax,0xb
c0013298:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001329c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a3:	80 f9 19             	cmp    cl,0x19
c00132a6:	77 32                	ja     c00132da <File::rename(char const*)+0x4a>
c00132a8:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c00132af:	85 c9                	test   ecx,ecx
c00132b1:	74 27                	je     c00132da <File::rename(char const*)+0x4a>
c00132b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b9:	85 c9                	test   ecx,ecx
c00132bb:	74 1d                	je     c00132da <File::rename(char const*)+0x4a>
c00132bd:	b8 06 00 00 00       	mov    eax,0x6
c00132c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132c6:	75 12                	jne    c00132da <File::rename(char const*)+0x4a>
c00132c8:	83 c2 0d             	add    edx,0xd
c00132cb:	50                   	push   eax
c00132cc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132d2:	52                   	push   edx
c00132d3:	51                   	push   ecx
c00132d4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132d7:	83 c4 10             	add    esp,0x10
c00132da:	83 c4 0c             	add    esp,0xc
c00132dd:	c3                   	ret    

c00132de <File::chfatattr(unsigned char, unsigned char)>:
c00132de:	57                   	push   edi
c00132df:	b8 0b 00 00 00       	mov    eax,0xb
c00132e4:	56                   	push   esi
c00132e5:	53                   	push   ebx
c00132e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00132f9:	80 f9 19             	cmp    cl,0x19
c00132fc:	77 37                	ja     c0013335 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00132fe:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c0013305:	85 c9                	test   ecx,ecx
c0013307:	74 2c                	je     c0013335 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013309:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001330f:	85 c9                	test   ecx,ecx
c0013311:	74 22                	je     c0013335 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013313:	b8 06 00 00 00       	mov    eax,0x6
c0013318:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001331c:	75 17                	jne    c0013335 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001331e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013320:	89 f0                	mov    eax,esi
c0013322:	83 c2 0d             	add    edx,0xd
c0013325:	0f b6 f0             	movzx  esi,al
c0013328:	0f b6 db             	movzx  ebx,bl
c001332b:	56                   	push   esi
c001332c:	53                   	push   ebx
c001332d:	52                   	push   edx
c001332e:	51                   	push   ecx
c001332f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013332:	83 c4 10             	add    esp,0x10
c0013335:	5b                   	pop    ebx
c0013336:	5e                   	pop    esi
c0013337:	5f                   	pop    edi
c0013338:	c3                   	ret    
c0013339:	90                   	nop

c001333a <File::exists()>:
c001333a:	83 ec 0c             	sub    esp,0xc
c001333d:	31 c0                	xor    eax,eax
c001333f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013343:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001334a:	80 f9 19             	cmp    cl,0x19
c001334d:	77 24                	ja     c0013373 <File::exists()+0x39>
c001334f:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c0013356:	85 c9                	test   ecx,ecx
c0013358:	74 19                	je     c0013373 <File::exists()+0x39>
c001335a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013360:	85 c9                	test   ecx,ecx
c0013362:	74 0f                	je     c0013373 <File::exists()+0x39>
c0013364:	83 c2 0d             	add    edx,0xd
c0013367:	50                   	push   eax
c0013368:	50                   	push   eax
c0013369:	8b 01                	mov    eax,DWORD PTR [ecx]
c001336b:	52                   	push   edx
c001336c:	51                   	push   ecx
c001336d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013370:	83 c4 10             	add    esp,0x10
c0013373:	83 c4 0c             	add    esp,0xc
c0013376:	c3                   	ret    
c0013377:	90                   	nop

c0013378 <File::stat(unsigned long long*, bool*)>:
c0013378:	56                   	push   esi
c0013379:	53                   	push   ebx
c001337a:	50                   	push   eax
c001337b:	b8 0b 00 00 00       	mov    eax,0xb
c0013380:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013384:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013388:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001338f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013393:	80 f9 19             	cmp    cl,0x19
c0013396:	77 3d                	ja     c00133d5 <File::stat(unsigned long long*, bool*)+0x5d>
c0013398:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c001339f:	85 c9                	test   ecx,ecx
c00133a1:	74 32                	je     c00133d5 <File::stat(unsigned long long*, bool*)+0x5d>
c00133a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133a9:	85 c9                	test   ecx,ecx
c00133ab:	74 28                	je     c00133d5 <File::stat(unsigned long long*, bool*)+0x5d>
c00133ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133af:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133b3:	74 13                	je     c00133c8 <File::stat(unsigned long long*, bool*)+0x50>
c00133b5:	83 ec 04             	sub    esp,0x4
c00133b8:	56                   	push   esi
c00133b9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00133bf:	51                   	push   ecx
c00133c0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00133c3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133c6:	eb 0a                	jmp    c00133d2 <File::stat(unsigned long long*, bool*)+0x5a>
c00133c8:	53                   	push   ebx
c00133c9:	83 c2 0d             	add    edx,0xd
c00133cc:	56                   	push   esi
c00133cd:	52                   	push   edx
c00133ce:	51                   	push   ecx
c00133cf:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00133d2:	83 c4 10             	add    esp,0x10
c00133d5:	5a                   	pop    edx
c00133d6:	5b                   	pop    ebx
c00133d7:	5e                   	pop    esi
c00133d8:	c3                   	ret    

c00133d9 <Fs::setcwd(Process*, char*)>:
c00133d9:	55                   	push   ebp
c00133da:	57                   	push   edi
c00133db:	56                   	push   esi
c00133dc:	53                   	push   ebx
c00133dd:	81 ec 20 02 00 00    	sub    esp,0x220
c00133e3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00133ea:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00133f0:	57                   	push   edi
c00133f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00133f8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00133fc:	56                   	push   esi
c00133fd:	e8 bc fa ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c0013402:	89 34 24             	mov    DWORD PTR [esp],esi
c0013405:	e8 8a d3 fe ff       	call   c0000794 <strlen>
c001340a:	83 c4 10             	add    esp,0x10
c001340d:	83 f8 02             	cmp    eax,0x2
c0013410:	77 17                	ja     c0013429 <Fs::setcwd(Process*, char*)+0x50>
c0013412:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013417:	83 e8 41             	sub    eax,0x41
c001341a:	83 f8 19             	cmp    eax,0x19
c001341d:	76 24                	jbe    c0013443 <Fs::setcwd(Process*, char*)+0x6a>
c001341f:	b8 03 00 00 00       	mov    eax,0x3
c0013424:	e9 e0 00 00 00       	jmp    c0013509 <Fs::setcwd(Process*, char*)+0x130>
c0013429:	83 ec 0c             	sub    esp,0xc
c001342c:	56                   	push   esi
c001342d:	e8 62 d3 fe ff       	call   c0000794 <strlen>
c0013432:	83 c4 10             	add    esp,0x10
c0013435:	83 f8 03             	cmp    eax,0x3
c0013438:	75 34                	jne    c001346e <Fs::setcwd(Process*, char*)+0x95>
c001343a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001343f:	75 2d                	jne    c001346e <Fs::setcwd(Process*, char*)+0x95>
c0013441:	eb cf                	jmp    c0013412 <Fs::setcwd(Process*, char*)+0x39>
c0013443:	8b 14 85 00 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c00]
c001344a:	b8 05 00 00 00       	mov    eax,0x5
c001344f:	85 d2                	test   edx,edx
c0013451:	0f 84 b2 00 00 00    	je     c0013509 <Fs::setcwd(Process*, char*)+0x130>
c0013457:	b8 06 00 00 00       	mov    eax,0x6
c001345c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013463:	0f 85 92 00 00 00    	jne    c00134fb <Fs::setcwd(Process*, char*)+0x122>
c0013469:	e9 9b 00 00 00       	jmp    c0013509 <Fs::setcwd(Process*, char*)+0x130>
c001346e:	83 ec 0c             	sub    esp,0xc
c0013471:	68 14 01 00 00       	push   0x114
c0013476:	e8 c5 c3 ff ff       	call   c000f840 <malloc>
c001347b:	83 c4 0c             	add    esp,0xc
c001347e:	89 c3                	mov    ebx,eax
c0013480:	55                   	push   ebp
c0013481:	56                   	push   esi
c0013482:	50                   	push   eax
c0013483:	e8 e0 fb ff ff       	call   c0013068 <File::File(char const*, Process*)>
c0013488:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001348d:	83 c4 0c             	add    esp,0xc
c0013490:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013494:	50                   	push   eax
c0013495:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013499:	50                   	push   eax
c001349a:	53                   	push   ebx
c001349b:	e8 d8 fe ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	83 f8 02             	cmp    eax,0x2
c00134a6:	74 04                	je     c00134ac <Fs::setcwd(Process*, char*)+0xd3>
c00134a8:	85 c0                	test   eax,eax
c00134aa:	74 1c                	je     c00134c8 <Fs::setcwd(Process*, char*)+0xef>
c00134ac:	b8 01 00 00 00       	mov    eax,0x1
c00134b1:	85 db                	test   ebx,ebx
c00134b3:	74 54                	je     c0013509 <Fs::setcwd(Process*, char*)+0x130>
c00134b5:	83 ec 0c             	sub    esp,0xc
c00134b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134ba:	53                   	push   ebx
c00134bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134be:	83 c4 10             	add    esp,0x10
c00134c1:	b8 01 00 00 00       	mov    eax,0x1
c00134c6:	eb 41                	jmp    c0013509 <Fs::setcwd(Process*, char*)+0x130>
c00134c8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00134cd:	75 1c                	jne    c00134eb <Fs::setcwd(Process*, char*)+0x112>
c00134cf:	b8 02 00 00 00       	mov    eax,0x2
c00134d4:	85 db                	test   ebx,ebx
c00134d6:	74 31                	je     c0013509 <Fs::setcwd(Process*, char*)+0x130>
c00134d8:	83 ec 0c             	sub    esp,0xc
c00134db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134dd:	53                   	push   ebx
c00134de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134e1:	83 c4 10             	add    esp,0x10
c00134e4:	b8 02 00 00 00       	mov    eax,0x2
c00134e9:	eb 1e                	jmp    c0013509 <Fs::setcwd(Process*, char*)+0x130>
c00134eb:	85 db                	test   ebx,ebx
c00134ed:	74 0c                	je     c00134fb <Fs::setcwd(Process*, char*)+0x122>
c00134ef:	83 ec 0c             	sub    esp,0xc
c00134f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134f4:	53                   	push   ebx
c00134f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134f8:	83 c4 10             	add    esp,0x10
c00134fb:	50                   	push   eax
c00134fc:	50                   	push   eax
c00134fd:	56                   	push   esi
c00134fe:	57                   	push   edi
c00134ff:	e8 30 d3 fe ff       	call   c0000834 <strcpy>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	31 c0                	xor    eax,eax
c0013509:	81 c4 1c 02 00 00    	add    esp,0x21c
c001350f:	5b                   	pop    ebx
c0013510:	5e                   	pop    esi
c0013511:	5f                   	pop    edi
c0013512:	5d                   	pop    ebp
c0013513:	c3                   	ret    

c0013514 <Directory::Directory(char const*, Process*)>:
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001351b:	83 ec 08             	sub    esp,0x8
c001351e:	6a 00                	push   0x0
c0013520:	50                   	push   eax
c0013521:	e8 b6 e1 ff ff       	call   c00116dc <UnixFile::UnixFile(int)>
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	ba cc a5 02 c0       	mov    edx,0xc002a5cc
c001352e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013532:	89 10                	mov    DWORD PTR [eax],edx
c0013534:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013538:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001353e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013542:	83 c0 0d             	add    eax,0xd
c0013545:	83 ec 04             	sub    esp,0x4
c0013548:	52                   	push   edx
c0013549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001354d:	50                   	push   eax
c001354e:	e8 6b f9 ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001355d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013564:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001356a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013572:	90                   	nop
c0013573:	83 c4 0c             	add    esp,0xc
c0013576:	c3                   	ret    
c0013577:	90                   	nop

c0013578 <Directory::open()>:
c0013578:	53                   	push   ebx
c0013579:	b8 0b 00 00 00       	mov    eax,0xb
c001357e:	83 ec 08             	sub    esp,0x8
c0013581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013585:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001358c:	80 fa 19             	cmp    dl,0x19
c001358f:	77 3d                	ja     c00135ce <Directory::open()+0x56>
c0013591:	8b 14 95 00 e4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c00]
c0013598:	85 d2                	test   edx,edx
c001359a:	74 32                	je     c00135ce <Directory::open()+0x56>
c001359c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135a2:	85 d2                	test   edx,edx
c00135a4:	74 28                	je     c00135ce <Directory::open()+0x56>
c00135a6:	b8 06 00 00 00       	mov    eax,0x6
c00135ab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135af:	75 1d                	jne    c00135ce <Directory::open()+0x56>
c00135b1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135b7:	50                   	push   eax
c00135b8:	8b 02                	mov    eax,DWORD PTR [edx]
c00135ba:	51                   	push   ecx
c00135bb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135be:	51                   	push   ecx
c00135bf:	52                   	push   edx
c00135c0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	85 c0                	test   eax,eax
c00135c8:	75 04                	jne    c00135ce <Directory::open()+0x56>
c00135ca:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135ce:	83 c4 08             	add    esp,0x8
c00135d1:	5b                   	pop    ebx
c00135d2:	c3                   	ret    
c00135d3:	90                   	nop

c00135d4 <Directory::close()>:
c00135d4:	53                   	push   ebx
c00135d5:	b8 0b 00 00 00       	mov    eax,0xb
c00135da:	83 ec 08             	sub    esp,0x8
c00135dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135e1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135e8:	80 fa 19             	cmp    dl,0x19
c00135eb:	77 41                	ja     c001362e <Directory::close()+0x5a>
c00135ed:	8b 1c 95 00 e4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1c00]
c00135f4:	85 db                	test   ebx,ebx
c00135f6:	74 36                	je     c001362e <Directory::close()+0x5a>
c00135f8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135ff:	74 2d                	je     c001362e <Directory::close()+0x5a>
c0013601:	b8 05 00 00 00       	mov    eax,0x5
c0013606:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001360a:	74 22                	je     c001362e <Directory::close()+0x5a>
c001360c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013610:	8b 04 95 00 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c00]
c0013617:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001361d:	53                   	push   ebx
c001361e:	53                   	push   ebx
c001361f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013621:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013627:	50                   	push   eax
c0013628:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	83 c4 08             	add    esp,0x8
c0013631:	5b                   	pop    ebx
c0013632:	c3                   	ret    
c0013633:	90                   	nop

c0013634 <Directory::unlink()>:
c0013634:	83 ec 0c             	sub    esp,0xc
c0013637:	b8 0b 00 00 00       	mov    eax,0xb
c001363c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013640:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013647:	80 f9 19             	cmp    cl,0x19
c001364a:	77 2f                	ja     c001367b <Directory::unlink()+0x47>
c001364c:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c0013653:	85 c9                	test   ecx,ecx
c0013655:	74 24                	je     c001367b <Directory::unlink()+0x47>
c0013657:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001365d:	85 c9                	test   ecx,ecx
c001365f:	74 1a                	je     c001367b <Directory::unlink()+0x47>
c0013661:	b8 06 00 00 00       	mov    eax,0x6
c0013666:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001366a:	75 0f                	jne    c001367b <Directory::unlink()+0x47>
c001366c:	83 c2 0d             	add    edx,0xd
c001366f:	50                   	push   eax
c0013670:	50                   	push   eax
c0013671:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013673:	52                   	push   edx
c0013674:	51                   	push   ecx
c0013675:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013678:	83 c4 10             	add    esp,0x10
c001367b:	83 c4 0c             	add    esp,0xc
c001367e:	c3                   	ret    
c001367f:	90                   	nop

c0013680 <Directory::rename(char const*)>:
c0013680:	83 ec 0c             	sub    esp,0xc
c0013683:	b8 0b 00 00 00       	mov    eax,0xb
c0013688:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001368c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013693:	80 f9 19             	cmp    cl,0x19
c0013696:	77 32                	ja     c00136ca <Directory::rename(char const*)+0x4a>
c0013698:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c001369f:	85 c9                	test   ecx,ecx
c00136a1:	74 27                	je     c00136ca <Directory::rename(char const*)+0x4a>
c00136a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136a9:	85 c9                	test   ecx,ecx
c00136ab:	74 1d                	je     c00136ca <Directory::rename(char const*)+0x4a>
c00136ad:	b8 06 00 00 00       	mov    eax,0x6
c00136b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136b6:	75 12                	jne    c00136ca <Directory::rename(char const*)+0x4a>
c00136b8:	83 c2 0d             	add    edx,0xd
c00136bb:	50                   	push   eax
c00136bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136c2:	52                   	push   edx
c00136c3:	51                   	push   ecx
c00136c4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136c7:	83 c4 10             	add    esp,0x10
c00136ca:	83 c4 0c             	add    esp,0xc
c00136cd:	c3                   	ret    

c00136ce <Directory::exists()>:
c00136ce:	83 ec 0c             	sub    esp,0xc
c00136d1:	31 c0                	xor    eax,eax
c00136d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136de:	80 f9 19             	cmp    cl,0x19
c00136e1:	77 24                	ja     c0013707 <Directory::exists()+0x39>
c00136e3:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c00136ea:	85 c9                	test   ecx,ecx
c00136ec:	74 19                	je     c0013707 <Directory::exists()+0x39>
c00136ee:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136f4:	85 c9                	test   ecx,ecx
c00136f6:	74 0f                	je     c0013707 <Directory::exists()+0x39>
c00136f8:	83 c2 0d             	add    edx,0xd
c00136fb:	50                   	push   eax
c00136fc:	50                   	push   eax
c00136fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136ff:	52                   	push   edx
c0013700:	51                   	push   ecx
c0013701:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013704:	83 c4 10             	add    esp,0x10
c0013707:	83 c4 0c             	add    esp,0xc
c001370a:	c3                   	ret    
c001370b:	90                   	nop

c001370c <Directory::read(dirent*)>:
c001370c:	83 ec 1c             	sub    esp,0x1c
c001370f:	b8 0b 00 00 00       	mov    eax,0xb
c0013714:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013718:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001371f:	80 fa 19             	cmp    dl,0x19
c0013722:	77 30                	ja     c0013754 <Directory::read(dirent*)+0x48>
c0013724:	8b 14 95 00 e4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1c00]
c001372b:	85 d2                	test   edx,edx
c001372d:	74 25                	je     c0013754 <Directory::read(dirent*)+0x48>
c001372f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013736:	74 1c                	je     c0013754 <Directory::read(dirent*)+0x48>
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001373d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013741:	52                   	push   edx
c0013742:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013746:	6a 00                	push   0x0
c0013748:	68 10 01 00 00       	push   0x110
c001374d:	51                   	push   ecx
c001374e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013751:	83 c4 20             	add    esp,0x20
c0013754:	83 c4 1c             	add    esp,0x1c
c0013757:	c3                   	ret    

c0013758 <Directory::create()>:
c0013758:	83 ec 0c             	sub    esp,0xc
c001375b:	b8 0b 00 00 00       	mov    eax,0xb
c0013760:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013764:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001376b:	80 f9 19             	cmp    cl,0x19
c001376e:	77 2f                	ja     c001379f <Directory::create()+0x47>
c0013770:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c0013777:	85 c9                	test   ecx,ecx
c0013779:	74 24                	je     c001379f <Directory::create()+0x47>
c001377b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013781:	85 c9                	test   ecx,ecx
c0013783:	74 1a                	je     c001379f <Directory::create()+0x47>
c0013785:	b8 06 00 00 00       	mov    eax,0x6
c001378a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001378e:	75 0f                	jne    c001379f <Directory::create()+0x47>
c0013790:	83 c2 0d             	add    edx,0xd
c0013793:	50                   	push   eax
c0013794:	50                   	push   eax
c0013795:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013797:	52                   	push   edx
c0013798:	51                   	push   ecx
c0013799:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001379c:	83 c4 10             	add    esp,0x10
c001379f:	83 c4 0c             	add    esp,0xc
c00137a2:	c3                   	ret    
c00137a3:	90                   	nop

c00137a4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00137a4:	b8 0a 00 00 00       	mov    eax,0xa
c00137a9:	c3                   	ret    

c00137aa <Bus::Bus(char const*)>:
c00137aa:	83 ec 0c             	sub    esp,0xc
c00137ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b1:	83 ec 08             	sub    esp,0x8
c00137b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b8:	50                   	push   eax
c00137b9:	e8 68 09 00 00       	call   c0014126 <Device::Device(char const*)>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	ba e8 a5 02 c0       	mov    edx,0xc002a5e8
c00137c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ca:	89 10                	mov    DWORD PTR [eax],edx
c00137cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00137da:	90                   	nop
c00137db:	83 c4 0c             	add    esp,0xc
c00137de:	c3                   	ret    
c00137df:	90                   	nop

c00137e0 <Bus::~Bus()>:
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	ba e8 a5 02 c0       	mov    edx,0xc002a5e8
c00137e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ec:	89 10                	mov    DWORD PTR [eax],edx
c00137ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f2:	83 ec 0c             	sub    esp,0xc
c00137f5:	50                   	push   eax
c00137f6:	e8 0d 06 00 00       	call   c0013e08 <Device::~Device()>
c00137fb:	83 c4 10             	add    esp,0x10
c00137fe:	90                   	nop
c00137ff:	83 c4 0c             	add    esp,0xc
c0013802:	c3                   	ret    
c0013803:	90                   	nop

c0013804 <Bus::~Bus()>:
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	83 ec 0c             	sub    esp,0xc
c001380a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001380e:	e8 cd ff ff ff       	call   c00137e0 <Bus::~Bus()>
c0013813:	83 c4 10             	add    esp,0x10
c0013816:	83 ec 08             	sub    esp,0x8
c0013819:	68 58 01 00 00       	push   0x158
c001381e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013822:	e8 08 f2 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0013827:	83 c4 10             	add    esp,0x10
c001382a:	83 c4 0c             	add    esp,0xc
c001382d:	c3                   	ret    

c001382e <Buzzer::Buzzer(char const*)>:
c001382e:	83 ec 0c             	sub    esp,0xc
c0013831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013835:	83 ec 08             	sub    esp,0x8
c0013838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001383c:	50                   	push   eax
c001383d:	e8 e4 08 00 00       	call   c0014126 <Device::Device(char const*)>
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c001384a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384e:	89 10                	mov    DWORD PTR [eax],edx
c0013850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013854:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001385e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013862:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001386c:	90                   	nop
c001386d:	83 c4 0c             	add    esp,0xc
c0013870:	c3                   	ret    
c0013871:	90                   	nop

c0013872 <Buzzer::~Buzzer()>:
c0013872:	83 ec 0c             	sub    esp,0xc
c0013875:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c001387a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387e:	89 10                	mov    DWORD PTR [eax],edx
c0013880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013884:	83 ec 0c             	sub    esp,0xc
c0013887:	50                   	push   eax
c0013888:	e8 7b 05 00 00       	call   c0013e08 <Device::~Device()>
c001388d:	83 c4 10             	add    esp,0x10
c0013890:	90                   	nop
c0013891:	83 c4 0c             	add    esp,0xc
c0013894:	c3                   	ret    
c0013895:	90                   	nop

c0013896 <Buzzer::~Buzzer()>:
c0013896:	83 ec 0c             	sub    esp,0xc
c0013899:	83 ec 0c             	sub    esp,0xc
c001389c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138a0:	e8 cd ff ff ff       	call   c0013872 <Buzzer::~Buzzer()>
c00138a5:	83 c4 10             	add    esp,0x10
c00138a8:	83 ec 08             	sub    esp,0x8
c00138ab:	68 5c 01 00 00       	push   0x15c
c00138b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138b4:	e8 76 f1 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00138b9:	83 c4 10             	add    esp,0x10
c00138bc:	83 c4 0c             	add    esp,0xc
c00138bf:	c3                   	ret    

c00138c0 <Buzzer::stop()>:
c00138c0:	83 ec 14             	sub    esp,0x14
c00138c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00138c9:	6a 00                	push   0x0
c00138cb:	50                   	push   eax
c00138cc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00138cf:	83 c4 1c             	add    esp,0x1c
c00138d2:	c3                   	ret    

c00138d3 <beepThread(void*)>:
c00138d3:	53                   	push   ebx
c00138d4:	83 ec 08             	sub    esp,0x8
c00138d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138db:	e8 a8 9f 00 00       	call   c001d888 <unlockScheduler()>
c00138e0:	b8 40 42 0f 00       	mov    eax,0xf4240
c00138e5:	52                   	push   edx
c00138e6:	52                   	push   edx
c00138e7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00138ed:	52                   	push   edx
c00138ee:	50                   	push   eax
c00138ef:	e8 e2 a4 00 00       	call   c001ddd6 <nanoSleep(unsigned long long)>
c00138f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138f7:	e8 c4 ff ff ff       	call   c00138c0 <Buzzer::stop()>
c00138fc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013904:	83 c4 18             	add    esp,0x18
c0013907:	5b                   	pop    ebx
c0013908:	e9 0f a4 00 00       	jmp    c001dd1c <blockTask(TaskState)>
c001390d:	90                   	nop

c001390e <Buzzer::beep(int, int, bool)>:
c001390e:	57                   	push   edi
c001390f:	56                   	push   esi
c0013910:	53                   	push   ebx
c0013911:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013915:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013919:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001391d:	52                   	push   edx
c001391e:	52                   	push   edx
c001391f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013925:	56                   	push   esi
c0013926:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013929:	83 c4 10             	add    esp,0x10
c001392c:	89 f8                	mov    eax,edi
c001392e:	84 c0                	test   al,al
c0013930:	74 1f                	je     c0013951 <Buzzer::beep(int, int, bool)+0x43>
c0013932:	50                   	push   eax
c0013933:	50                   	push   eax
c0013934:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001393a:	99                   	cdq    
c001393b:	52                   	push   edx
c001393c:	50                   	push   eax
c001393d:	e8 94 a4 00 00       	call   c001ddd6 <nanoSleep(unsigned long long)>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013949:	5b                   	pop    ebx
c001394a:	5e                   	pop    esi
c001394b:	5f                   	pop    edi
c001394c:	e9 6f ff ff ff       	jmp    c00138c0 <Buzzer::stop()>
c0013951:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013957:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001395c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013964:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013968:	c7 44 24 14 d3 38 01 c0 	mov    DWORD PTR [esp+0x14],0xc00138d3
c0013970:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013974:	5b                   	pop    ebx
c0013975:	5e                   	pop    esi
c0013976:	5f                   	pop    edi
c0013977:	e9 3c a0 00 00       	jmp    c001d9b8 <Process::createThread(void (*)(void*), void*, int)>

c001397c <User::loadClockSettings(int)>:
c001397c:	53                   	push   ebx
c001397d:	83 ec 14             	sub    esp,0x14
c0013980:	68 14 01 00 00       	push   0x114
c0013985:	e8 b6 be ff ff       	call   c000f840 <malloc>
c001398a:	83 c4 0c             	add    esp,0xc
c001398d:	89 c3                	mov    ebx,eax
c001398f:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c0013995:	68 3c a6 02 c0       	push   0xc002a63c
c001399a:	50                   	push   eax
c001399b:	e8 c8 f6 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c00139a0:	58                   	pop    eax
c00139a1:	5a                   	pop    edx
c00139a2:	6a 01                	push   0x1
c00139a4:	53                   	push   ebx
c00139a5:	e8 22 f7 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c00139aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139ad:	e8 78 f7 ff ff       	call   c001312a <File::close()>
c00139b2:	83 c4 10             	add    esp,0x10
c00139b5:	85 db                	test   ebx,ebx
c00139b7:	74 0f                	je     c00139c8 <User::loadClockSettings(int)+0x4c>
c00139b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00139bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139c2:	83 c4 08             	add    esp,0x8
c00139c5:	5b                   	pop    ebx
c00139c6:	ff e0                	jmp    eax
c00139c8:	83 c4 08             	add    esp,0x8
c00139cb:	5b                   	pop    ebx
c00139cc:	c3                   	ret    
c00139cd:	90                   	nop

c00139ce <Clock::Clock(char const*)>:
c00139ce:	83 ec 0c             	sub    esp,0xc
c00139d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d5:	83 ec 08             	sub    esp,0x8
c00139d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139dc:	50                   	push   eax
c00139dd:	e8 44 07 00 00       	call   c0014126 <Device::Device(char const*)>
c00139e2:	83 c4 10             	add    esp,0x10
c00139e5:	ba 64 a6 02 c0       	mov    edx,0xc002a664
c00139ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ee:	89 10                	mov    DWORD PTR [eax],edx
c00139f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00139fe:	90                   	nop
c00139ff:	83 c4 0c             	add    esp,0xc
c0013a02:	c3                   	ret    
c0013a03:	90                   	nop

c0013a04 <Clock::~Clock()>:
c0013a04:	83 ec 0c             	sub    esp,0xc
c0013a07:	ba 64 a6 02 c0       	mov    edx,0xc002a664
c0013a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a10:	89 10                	mov    DWORD PTR [eax],edx
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	50                   	push   eax
c0013a1a:	e8 e9 03 00 00       	call   c0013e08 <Device::~Device()>
c0013a1f:	83 c4 10             	add    esp,0x10
c0013a22:	90                   	nop
c0013a23:	83 c4 0c             	add    esp,0xc
c0013a26:	c3                   	ret    
c0013a27:	90                   	nop

c0013a28 <Clock::~Clock()>:
c0013a28:	83 ec 0c             	sub    esp,0xc
c0013a2b:	83 ec 0c             	sub    esp,0xc
c0013a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a32:	e8 cd ff ff ff       	call   c0013a04 <Clock::~Clock()>
c0013a37:	83 c4 10             	add    esp,0x10
c0013a3a:	83 ec 08             	sub    esp,0x8
c0013a3d:	68 58 01 00 00       	push   0x158
c0013a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a46:	e8 e4 ef ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0013a4b:	83 c4 10             	add    esp,0x10
c0013a4e:	83 c4 0c             	add    esp,0xc
c0013a51:	c3                   	ret    

c0013a52 <Clock::timeInSecondsLocal()>:
c0013a52:	53                   	push   ebx
c0013a53:	83 ec 14             	sub    esp,0x14
c0013a56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a5c:	50                   	push   eax
c0013a5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013a60:	0f b6 0d 70 df 02 c0 	movzx  ecx,BYTE PTR ds:0xc002df70
c0013a67:	03 0d 74 df 02 c0    	add    ecx,DWORD PTR ds:0xc002df74
c0013a6d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a73:	89 cb                	mov    ebx,ecx
c0013a75:	c1 fb 1f             	sar    ebx,0x1f
c0013a78:	01 c8                	add    eax,ecx
c0013a7a:	11 da                	adc    edx,ebx
c0013a7c:	83 c4 10             	add    esp,0x10
c0013a7f:	31 c9                	xor    ecx,ecx
c0013a81:	80 3d 71 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df71,0x0
c0013a88:	74 05                	je     c0013a8f <Clock::timeInSecondsLocal()+0x3d>
c0013a8a:	b9 08 07 00 00       	mov    ecx,0x708
c0013a8f:	31 db                	xor    ebx,ebx
c0013a91:	01 c8                	add    eax,ecx
c0013a93:	11 da                	adc    edx,ebx
c0013a95:	83 c4 08             	add    esp,0x8
c0013a98:	5b                   	pop    ebx
c0013a99:	c3                   	ret    

c0013a9a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013a9a:	57                   	push   edi
c0013a9b:	56                   	push   esi
c0013a9c:	53                   	push   ebx
c0013a9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013aa1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013aa5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aa7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013aab:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013aae:	0f b6 05 70 df 02 c0 	movzx  eax,BYTE PTR ds:0xc002df70
c0013ab5:	03 05 74 df 02 c0    	add    eax,DWORD PTR ds:0xc002df74
c0013abb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ac1:	99                   	cdq    
c0013ac2:	29 c6                	sub    esi,eax
c0013ac4:	19 d7                	sbb    edi,edx
c0013ac6:	89 f0                	mov    eax,esi
c0013ac8:	89 fa                	mov    edx,edi
c0013aca:	31 f6                	xor    esi,esi
c0013acc:	80 3d 71 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df71,0x0
c0013ad3:	74 05                	je     c0013ada <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ad5:	be 08 07 00 00       	mov    esi,0x708
c0013ada:	31 ff                	xor    edi,edi
c0013adc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ae0:	29 f0                	sub    eax,esi
c0013ae2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ae6:	19 fa                	sbb    edx,edi
c0013ae8:	89 d8                	mov    eax,ebx
c0013aea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013aee:	5b                   	pop    ebx
c0013aef:	5e                   	pop    esi
c0013af0:	5f                   	pop    edi
c0013af1:	ff e0                	jmp    eax

c0013af3 <datetimeToSeconds(datetime_t)>:
c0013af3:	55                   	push   ebp
c0013af4:	57                   	push   edi
c0013af5:	56                   	push   esi
c0013af6:	53                   	push   ebx
c0013af7:	83 ec 14             	sub    esp,0x14
c0013afa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013afe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013b02:	89 d3                	mov    ebx,edx
c0013b04:	0f b6 c6             	movzx  eax,dh
c0013b07:	c1 eb 10             	shr    ebx,0x10
c0013b0a:	48                   	dec    eax
c0013b0b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013b10:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013b14:	0f b6 f5             	movzx  esi,ch
c0013b17:	89 cf                	mov    edi,ecx
c0013b19:	6b f6 3c             	imul   esi,esi,0x3c
c0013b1c:	c1 ef 10             	shr    edi,0x10
c0013b1f:	0f b6 c9             	movzx  ecx,cl
c0013b22:	89 f8                	mov    eax,edi
c0013b24:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b2a:	0f b6 f8             	movzx  edi,al
c0013b2d:	0f b6 d2             	movzx  edx,dl
c0013b30:	01 fe                	add    esi,edi
c0013b32:	01 f1                	add    ecx,esi
c0013b34:	0f b7 f3             	movzx  esi,bx
c0013b37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013b3b:	c1 f9 1f             	sar    ecx,0x1f
c0013b3e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013b43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b47:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013b4c:	8b 0c 8d a0 a6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5960]
c0013b53:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013b57:	76 29                	jbe    c0013b82 <datetimeToSeconds(datetime_t)+0x8f>
c0013b59:	f6 c3 03             	test   bl,0x3
c0013b5c:	75 24                	jne    c0013b82 <datetimeToSeconds(datetime_t)+0x8f>
c0013b5e:	31 d2                	xor    edx,edx
c0013b60:	bf 64 00 00 00       	mov    edi,0x64
c0013b65:	89 d8                	mov    eax,ebx
c0013b67:	66 f7 f7             	div    di
c0013b6a:	66 85 d2             	test   dx,dx
c0013b6d:	75 12                	jne    c0013b81 <datetimeToSeconds(datetime_t)+0x8e>
c0013b6f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013b75:	bf 90 01 00 00       	mov    edi,0x190
c0013b7a:	99                   	cdq    
c0013b7b:	f7 ff                	idiv   edi
c0013b7d:	85 d2                	test   edx,edx
c0013b7f:	75 01                	jne    c0013b82 <datetimeToSeconds(datetime_t)+0x8f>
c0013b81:	41                   	inc    ecx
c0013b82:	66 83 fb 46          	cmp    bx,0x46
c0013b86:	76 45                	jbe    c0013bcd <datetimeToSeconds(datetime_t)+0xda>
c0013b88:	bb 46 00 00 00       	mov    ebx,0x46
c0013b8d:	bf 64 00 00 00       	mov    edi,0x64
c0013b92:	bd 90 01 00 00       	mov    ebp,0x190
c0013b97:	b8 6d 01 00 00       	mov    eax,0x16d
c0013b9c:	f6 c3 03             	test   bl,0x3
c0013b9f:	75 23                	jne    c0013bc4 <datetimeToSeconds(datetime_t)+0xd1>
c0013ba1:	89 d8                	mov    eax,ebx
c0013ba3:	99                   	cdq    
c0013ba4:	f7 ff                	idiv   edi
c0013ba6:	b8 6e 01 00 00       	mov    eax,0x16e
c0013bab:	85 d2                	test   edx,edx
c0013bad:	75 15                	jne    c0013bc4 <datetimeToSeconds(datetime_t)+0xd1>
c0013baf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013bb5:	99                   	cdq    
c0013bb6:	f7 fd                	idiv   ebp
c0013bb8:	83 fa 01             	cmp    edx,0x1
c0013bbb:	19 c0                	sbb    eax,eax
c0013bbd:	f7 d0                	not    eax
c0013bbf:	05 6e 01 00 00       	add    eax,0x16e
c0013bc4:	01 c1                	add    ecx,eax
c0013bc6:	43                   	inc    ebx
c0013bc7:	39 f3                	cmp    ebx,esi
c0013bc9:	7c cc                	jl     c0013b97 <datetimeToSeconds(datetime_t)+0xa4>
c0013bcb:	eb 35                	jmp    c0013c02 <datetimeToSeconds(datetime_t)+0x10f>
c0013bcd:	74 33                	je     c0013c02 <datetimeToSeconds(datetime_t)+0x10f>
c0013bcf:	b8 45 00 00 00       	mov    eax,0x45
c0013bd4:	89 c2                	mov    edx,eax
c0013bd6:	83 e2 03             	and    edx,0x3
c0013bd9:	39 f0                	cmp    eax,esi
c0013bdb:	7e 0f                	jle    c0013bec <datetimeToSeconds(datetime_t)+0xf9>
c0013bdd:	83 fa 01             	cmp    edx,0x1
c0013be0:	19 d2                	sbb    edx,edx
c0013be2:	48                   	dec    eax
c0013be3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013bea:	eb e8                	jmp    c0013bd4 <datetimeToSeconds(datetime_t)+0xe1>
c0013bec:	b8 6d 01 00 00       	mov    eax,0x16d
c0013bf1:	85 d2                	test   edx,edx
c0013bf3:	75 0b                	jne    c0013c00 <datetimeToSeconds(datetime_t)+0x10d>
c0013bf5:	66 83 fb 01          	cmp    bx,0x1
c0013bf9:	19 c0                	sbb    eax,eax
c0013bfb:	05 6e 01 00 00       	add    eax,0x16e
c0013c00:	29 c1                	sub    ecx,eax
c0013c02:	b8 80 51 01 00       	mov    eax,0x15180
c0013c07:	f7 e9                	imul   ecx
c0013c09:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013c0d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013c11:	83 c4 14             	add    esp,0x14
c0013c14:	5b                   	pop    ebx
c0013c15:	5e                   	pop    esi
c0013c16:	5f                   	pop    edi
c0013c17:	5d                   	pop    ebp
c0013c18:	c3                   	ret    
c0013c19:	90                   	nop

c0013c1a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013c1a:	57                   	push   edi
c0013c1b:	56                   	push   esi
c0013c1c:	53                   	push   ebx
c0013c1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c21:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c23:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013c26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c2e:	e8 c0 fe ff ff       	call   c0013af3 <datetimeToSeconds(datetime_t)>
c0013c33:	59                   	pop    ecx
c0013c34:	0f b6 0d 70 df 02 c0 	movzx  ecx,BYTE PTR ds:0xc002df70
c0013c3b:	5b                   	pop    ebx
c0013c3c:	03 0d 74 df 02 c0    	add    ecx,DWORD PTR ds:0xc002df74
c0013c42:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013c48:	89 cb                	mov    ebx,ecx
c0013c4a:	c1 fb 1f             	sar    ebx,0x1f
c0013c4d:	29 c8                	sub    eax,ecx
c0013c4f:	19 da                	sbb    edx,ebx
c0013c51:	31 c9                	xor    ecx,ecx
c0013c53:	80 3d 71 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df71,0x0
c0013c5a:	74 05                	je     c0013c61 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013c5c:	b9 08 07 00 00       	mov    ecx,0x708
c0013c61:	31 db                	xor    ebx,ebx
c0013c63:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c67:	29 c8                	sub    eax,ecx
c0013c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c6d:	19 da                	sbb    edx,ebx
c0013c6f:	89 f8                	mov    eax,edi
c0013c71:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013c75:	5b                   	pop    ebx
c0013c76:	5e                   	pop    esi
c0013c77:	5f                   	pop    edi
c0013c78:	ff e0                	jmp    eax

c0013c7a <secondsToDatetime(unsigned long long)>:
c0013c7a:	55                   	push   ebp
c0013c7b:	57                   	push   edi
c0013c7c:	56                   	push   esi
c0013c7d:	53                   	push   ebx
c0013c7e:	83 ec 1c             	sub    esp,0x1c
c0013c81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013c85:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013c89:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013c8d:	6a 00                	push   0x0
c0013c8f:	68 80 51 01 00       	push   0x15180
c0013c94:	55                   	push   ebp
c0013c95:	57                   	push   edi
c0013c96:	e8 51 28 01 00       	call   c00264ec <__udivdi3>
c0013c9b:	83 c4 10             	add    esp,0x10
c0013c9e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013ca4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ca8:	6a 00                	push   0x0
c0013caa:	68 80 51 01 00       	push   0x15180
c0013caf:	55                   	push   ebp
c0013cb0:	57                   	push   edi
c0013cb1:	bf 10 0e 00 00       	mov    edi,0xe10
c0013cb6:	e8 31 29 01 00       	call   c00265ec <__umoddi3>
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	99                   	cdq    
c0013cbf:	f7 ff                	idiv   edi
c0013cc1:	bf 3c 00 00 00       	mov    edi,0x3c
c0013cc6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013cc9:	89 d0                	mov    eax,edx
c0013ccb:	99                   	cdq    
c0013ccc:	f7 ff                	idiv   edi
c0013cce:	85 db                	test   ebx,ebx
c0013cd0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013cd3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013cd6:	79 11                	jns    c0013ce9 <secondsToDatetime(unsigned long long)+0x6f>
c0013cd8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013cdc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ce2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ce7:	eb 07                	jmp    c0013cf0 <secondsToDatetime(unsigned long long)+0x76>
c0013ce9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013cee:	89 d8                	mov    eax,ebx
c0013cf0:	bf b4 05 00 00       	mov    edi,0x5b4
c0013cf5:	99                   	cdq    
c0013cf6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013cfb:	f7 f9                	idiv   ecx
c0013cfd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013d02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d06:	31 d2                	xor    edx,edx
c0013d08:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013d10:	01 c3                	add    ebx,eax
c0013d12:	89 d8                	mov    eax,ebx
c0013d14:	f7 f1                	div    ecx
c0013d16:	31 d2                	xor    edx,edx
c0013d18:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013d1b:	89 d8                	mov    eax,ebx
c0013d1d:	f7 f7                	div    edi
c0013d1f:	31 d2                	xor    edx,edx
c0013d21:	29 c1                	sub    ecx,eax
c0013d23:	89 d8                	mov    eax,ebx
c0013d25:	f7 f5                	div    ebp
c0013d27:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013d2c:	29 c1                	sub    ecx,eax
c0013d2e:	31 d2                	xor    edx,edx
c0013d30:	89 c8                	mov    eax,ecx
c0013d32:	f7 f5                	div    ebp
c0013d34:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013d39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d3d:	31 d2                	xor    edx,edx
c0013d3f:	89 c8                	mov    eax,ecx
c0013d41:	f7 f5                	div    ebp
c0013d43:	31 d2                	xor    edx,edx
c0013d45:	01 c3                	add    ebx,eax
c0013d47:	89 c8                	mov    eax,ecx
c0013d49:	f7 f7                	div    edi
c0013d4b:	bf 99 00 00 00       	mov    edi,0x99
c0013d50:	29 c3                	sub    ebx,eax
c0013d52:	31 d2                	xor    edx,edx
c0013d54:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013d5c:	29 c3                	sub    ebx,eax
c0013d5e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013d61:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013d64:	bb 05 00 00 00       	mov    ebx,0x5
c0013d69:	83 c1 02             	add    ecx,0x2
c0013d6c:	89 c8                	mov    eax,ecx
c0013d6e:	f7 f7                	div    edi
c0013d70:	31 d2                	xor    edx,edx
c0013d72:	89 c7                	mov    edi,eax
c0013d74:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013d7a:	83 c0 02             	add    eax,0x2
c0013d7d:	f7 f3                	div    ebx
c0013d7f:	89 eb                	mov    ebx,ebp
c0013d81:	29 c3                	sub    ebx,eax
c0013d83:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013d89:	88 1e                	mov    BYTE PTR [esi],bl
c0013d8b:	19 c0                	sbb    eax,eax
c0013d8d:	31 d2                	xor    edx,edx
c0013d8f:	83 e0 0c             	and    eax,0xc
c0013d92:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013d96:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013d9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013da2:	83 f9 01             	cmp    ecx,0x1
c0013da5:	0f 96 c2             	setbe  dl
c0013da8:	41                   	inc    ecx
c0013da9:	01 d0                	add    eax,edx
c0013dab:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013dae:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013db2:	83 c4 1c             	add    esp,0x1c
c0013db5:	89 f0                	mov    eax,esi
c0013db7:	5b                   	pop    ebx
c0013db8:	5e                   	pop    esi
c0013db9:	5f                   	pop    edi
c0013dba:	5d                   	pop    ebp
c0013dbb:	c2 04 00             	ret    0x4

c0013dbe <Clock::timeInDatetimeLocal()>:
c0013dbe:	53                   	push   ebx
c0013dbf:	83 ec 14             	sub    esp,0x14
c0013dc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dca:	e8 83 fc ff ff       	call   c0013a52 <Clock::timeInSecondsLocal()>
c0013dcf:	83 c4 0c             	add    esp,0xc
c0013dd2:	52                   	push   edx
c0013dd3:	50                   	push   eax
c0013dd4:	53                   	push   ebx
c0013dd5:	e8 a0 fe ff ff       	call   c0013c7a <secondsToDatetime(unsigned long long)>
c0013dda:	89 d8                	mov    eax,ebx
c0013ddc:	83 c4 14             	add    esp,0x14
c0013ddf:	5b                   	pop    ebx
c0013de0:	c2 04 00             	ret    0x4
c0013de3:	90                   	nop

c0013de4 <Device::hibernate()>:
c0013de4:	c3                   	ret    
c0013de5:	90                   	nop

c0013de6 <Device::wake()>:
c0013de6:	c3                   	ret    
c0013de7:	90                   	nop

c0013de8 <Device::detect()>:
c0013de8:	c3                   	ret    
c0013de9:	90                   	nop

c0013dea <Device::disableLegacy()>:
c0013dea:	c3                   	ret    
c0013deb:	90                   	nop

c0013dec <Device::powerSaving(PowerSavingLevel)>:
c0013dec:	c3                   	ret    
c0013ded:	90                   	nop

c0013dee <DriverlessDevice::close(int, int, void*)>:
c0013dee:	31 c0                	xor    eax,eax
c0013df0:	c3                   	ret    
c0013df1:	90                   	nop

c0013df2 <DriverlessDevice::detect()>:
c0013df2:	c3                   	ret    
c0013df3:	90                   	nop

c0013df4 <DriverlessDevice::open(int, int, void*)>:
c0013df4:	83 ec 18             	sub    esp,0x18
c0013df7:	68 d0 a6 02 c0       	push   0xc002a6d0
c0013dfc:	e8 8a 63 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0013e01:	83 c8 ff             	or     eax,0xffffffff
c0013e04:	83 c4 1c             	add    esp,0x1c
c0013e07:	c3                   	ret    

c0013e08 <Device::~Device()>:
c0013e08:	ba f8 a6 02 c0       	mov    edx,0xc002a6f8
c0013e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e11:	89 10                	mov    DWORD PTR [eax],edx
c0013e13:	90                   	nop
c0013e14:	c3                   	ret    
c0013e15:	90                   	nop

c0013e16 <Device::~Device()>:
c0013e16:	83 ec 0c             	sub    esp,0xc
c0013e19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e1d:	e8 e6 ff ff ff       	call   c0013e08 <Device::~Device()>
c0013e22:	83 c4 04             	add    esp,0x4
c0013e25:	83 ec 08             	sub    esp,0x8
c0013e28:	68 58 01 00 00       	push   0x158
c0013e2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e31:	e8 f9 eb ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0013e36:	83 c4 10             	add    esp,0x10
c0013e39:	83 c4 0c             	add    esp,0xc
c0013e3c:	c3                   	ret    
c0013e3d:	90                   	nop

c0013e3e <Device::findAndLoadDriver()>:
c0013e3e:	c3                   	ret    
c0013e3f:	90                   	nop

c0013e40 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013e40:	57                   	push   edi
c0013e41:	b9 09 00 00 00       	mov    ecx,0x9
c0013e46:	56                   	push   esi
c0013e47:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013e4b:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013e4f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013e59:	81 c7 18 01 00 00    	add    edi,0x118
c0013e5f:	fc                   	cld    
c0013e60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013e62:	5e                   	pop    esi
c0013e63:	5f                   	pop    edi
c0013e64:	c3                   	ret    
c0013e65:	90                   	nop

c0013e66 <Device::preOpenACPI(void*, char*, char*)>:
c0013e66:	56                   	push   esi
c0013e67:	53                   	push   ebx
c0013e68:	83 ec 08             	sub    esp,0x8
c0013e6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e6f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013e73:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013e7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e81:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013e87:	6a 1e                	push   0x1e
c0013e89:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013e8f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e93:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013e99:	50                   	push   eax
c0013e9a:	e8 a5 c8 fe ff       	call   c0000744 <memcpy>
c0013e9f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013ea3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ea7:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013eaf:	83 c4 14             	add    esp,0x14
c0013eb2:	5b                   	pop    ebx
c0013eb3:	5e                   	pop    esi
c0013eb4:	e9 8b c8 fe ff       	jmp    c0000744 <memcpy>
c0013eb9:	90                   	nop

c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013eba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ebe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ec3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013eca:	75 0b                	jne    c0013ed7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ece:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ed2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013ed5:	eb 1e                	jmp    c0013ef5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013ed7:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0013edc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ee2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ee8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013eea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013eee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ef2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ef5:	ff e0                	jmp    eax
c0013ef7:	90                   	nop

c0013ef8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013ef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013efc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f01:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f08:	75 0b                	jne    c0013f15 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f10:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013f13:	eb 1e                	jmp    c0013f33 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013f15:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0013f1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f20:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f26:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f30:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013f33:	ff e0                	jmp    eax
c0013f35:	90                   	nop

c0013f36 <Device::addChild(Device*)>:
c0013f36:	53                   	push   ebx
c0013f37:	83 ec 08             	sub    esp,0x8
c0013f3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f42:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013f48:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013f4e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013f50:	85 d2                	test   edx,edx
c0013f52:	74 04                	je     c0013f58 <Device::addChild(Device*)+0x22>
c0013f54:	89 d3                	mov    ebx,edx
c0013f56:	eb f6                	jmp    c0013f4e <Device::addChild(Device*)+0x18>
c0013f58:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013f5b:	83 ec 0c             	sub    esp,0xc
c0013f5e:	6a 08                	push   0x8
c0013f60:	e8 db b8 ff ff       	call   c000f840 <malloc>
c0013f65:	89 03                	mov    DWORD PTR [ebx],eax
c0013f67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f74:	83 c4 18             	add    esp,0x18
c0013f77:	5b                   	pop    ebx
c0013f78:	c3                   	ret    
c0013f79:	90                   	nop

c0013f7a <Device::removeAllChildren()>:
c0013f7a:	56                   	push   esi
c0013f7b:	53                   	push   ebx
c0013f7c:	52                   	push   edx
c0013f7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f81:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013f87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f8a:	74 17                	je     c0013fa3 <Device::removeAllChildren()+0x29>
c0013f8c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f8f:	85 c0                	test   eax,eax
c0013f91:	74 0c                	je     c0013f9f <Device::removeAllChildren()+0x25>
c0013f93:	83 ec 0c             	sub    esp,0xc
c0013f96:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f98:	50                   	push   eax
c0013f99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013f9c:	83 c4 10             	add    esp,0x10
c0013f9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fa1:	eb e4                	jmp    c0013f87 <Device::removeAllChildren()+0xd>
c0013fa3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fa9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013faf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fb5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fbc:	58                   	pop    eax
c0013fbd:	5b                   	pop    ebx
c0013fbe:	5e                   	pop    esi
c0013fbf:	c3                   	ret    

c0013fc0 <Device::hibernateAll()>:
c0013fc0:	53                   	push   ebx
c0013fc1:	83 ec 14             	sub    esp,0x14
c0013fc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fca:	53                   	push   ebx
c0013fcb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013fce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fd4:	83 c4 10             	add    esp,0x10
c0013fd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fda:	74 0f                	je     c0013feb <Device::hibernateAll()+0x2b>
c0013fdc:	83 ec 0c             	sub    esp,0xc
c0013fdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fe2:	e8 d9 ff ff ff       	call   c0013fc0 <Device::hibernateAll()>
c0013fe7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fe9:	eb e9                	jmp    c0013fd4 <Device::hibernateAll()+0x14>
c0013feb:	83 c4 08             	add    esp,0x8
c0013fee:	5b                   	pop    ebx
c0013fef:	c3                   	ret    

c0013ff0 <Device::wakeAll()>:
c0013ff0:	53                   	push   ebx
c0013ff1:	83 ec 14             	sub    esp,0x14
c0013ff4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ff8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ffa:	53                   	push   ebx
c0013ffb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ffe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014004:	83 c4 10             	add    esp,0x10
c0014007:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001400a:	74 0f                	je     c001401b <Device::wakeAll()+0x2b>
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014012:	e8 d9 ff ff ff       	call   c0013ff0 <Device::wakeAll()>
c0014017:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014019:	eb e9                	jmp    c0014004 <Device::wakeAll()+0x14>
c001401b:	83 c4 08             	add    esp,0x8
c001401e:	5b                   	pop    ebx
c001401f:	c3                   	ret    

c0014020 <Device::detectAll()>:
c0014020:	53                   	push   ebx
c0014021:	83 ec 14             	sub    esp,0x14
c0014024:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014028:	8b 03                	mov    eax,DWORD PTR [ebx]
c001402a:	53                   	push   ebx
c001402b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001402e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014034:	83 c4 10             	add    esp,0x10
c0014037:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001403a:	74 0f                	je     c001404b <Device::detectAll()+0x2b>
c001403c:	83 ec 0c             	sub    esp,0xc
c001403f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014042:	e8 d9 ff ff ff       	call   c0014020 <Device::detectAll()>
c0014047:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014049:	eb e9                	jmp    c0014034 <Device::detectAll()+0x14>
c001404b:	83 c4 08             	add    esp,0x8
c001404e:	5b                   	pop    ebx
c001404f:	c3                   	ret    

c0014050 <Device::disableLegacyAll()>:
c0014050:	53                   	push   ebx
c0014051:	83 ec 14             	sub    esp,0x14
c0014054:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014058:	8b 03                	mov    eax,DWORD PTR [ebx]
c001405a:	53                   	push   ebx
c001405b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001405e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001406a:	74 0f                	je     c001407b <Device::disableLegacyAll()+0x2b>
c001406c:	83 ec 0c             	sub    esp,0xc
c001406f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014072:	e8 d9 ff ff ff       	call   c0014050 <Device::disableLegacyAll()>
c0014077:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014079:	eb e9                	jmp    c0014064 <Device::disableLegacyAll()+0x14>
c001407b:	83 c4 08             	add    esp,0x8
c001407e:	5b                   	pop    ebx
c001407f:	c3                   	ret    

c0014080 <Device::loadDriversForAll()>:
c0014080:	53                   	push   ebx
c0014081:	83 ec 08             	sub    esp,0x8
c0014084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014088:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001408e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014090:	85 db                	test   ebx,ebx
c0014092:	74 12                	je     c00140a6 <Device::loadDriversForAll()+0x26>
c0014094:	83 ec 0c             	sub    esp,0xc
c0014097:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001409a:	e8 e1 ff ff ff       	call   c0014080 <Device::loadDriversForAll()>
c001409f:	83 c4 10             	add    esp,0x10
c00140a2:	89 d8                	mov    eax,ebx
c00140a4:	eb e8                	jmp    c001408e <Device::loadDriversForAll()+0xe>
c00140a6:	83 c4 08             	add    esp,0x8
c00140a9:	5b                   	pop    ebx
c00140aa:	c3                   	ret    
c00140ab:	90                   	nop

c00140ac <Device::closeAll()>:
c00140ac:	53                   	push   ebx
c00140ad:	83 ec 08             	sub    esp,0x8
c00140b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140b6:	6a 00                	push   0x0
c00140b8:	6a 00                	push   0x0
c00140ba:	6a 00                	push   0x0
c00140bc:	53                   	push   ebx
c00140bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140c6:	83 c4 10             	add    esp,0x10
c00140c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140cc:	74 0f                	je     c00140dd <Device::closeAll()+0x31>
c00140ce:	83 ec 0c             	sub    esp,0xc
c00140d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140d4:	e8 d3 ff ff ff       	call   c00140ac <Device::closeAll()>
c00140d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140db:	eb e9                	jmp    c00140c6 <Device::closeAll()+0x1a>
c00140dd:	83 c4 08             	add    esp,0x8
c00140e0:	5b                   	pop    ebx
c00140e1:	c3                   	ret    

c00140e2 <Device::powerSavingAll(PowerSavingLevel)>:
c00140e2:	56                   	push   esi
c00140e3:	53                   	push   ebx
c00140e4:	83 ec 0c             	sub    esp,0xc
c00140e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00140eb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00140ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140f1:	56                   	push   esi
c00140f2:	53                   	push   ebx
c00140f3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00140f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140fc:	83 c4 10             	add    esp,0x10
c00140ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014102:	74 0f                	je     c0014113 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014104:	52                   	push   edx
c0014105:	52                   	push   edx
c0014106:	56                   	push   esi
c0014107:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001410a:	e8 d3 ff ff ff       	call   c00140e2 <Device::powerSavingAll(PowerSavingLevel)>
c001410f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014111:	eb e9                	jmp    c00140fc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014113:	58                   	pop    eax
c0014114:	5b                   	pop    ebx
c0014115:	5e                   	pop    esi
c0014116:	c3                   	ret    
c0014117:	90                   	nop

c0014118 <Device::setName(char const*)>:
c0014118:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014120:	e9 0f c7 fe ff       	jmp    c0000834 <strcpy>
c0014125:	90                   	nop

c0014126 <Device::Device(char const*)>:
c0014126:	83 ec 1c             	sub    esp,0x1c
c0014129:	ba f8 a6 02 c0       	mov    edx,0xc002a6f8
c001412e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014132:	89 10                	mov    DWORD PTR [eax],edx
c0014134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014138:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014146:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014154:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001415e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014162:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001416c:	83 ec 08             	sub    esp,0x8
c001416f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014177:	e8 9c ff ff ff       	call   c0014118 <Device::setName(char const*)>
c001417c:	83 c4 10             	add    esp,0x10
c001417f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014187:	83 ec 0c             	sub    esp,0xc
c001418a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001418e:	e8 ad b6 ff ff       	call   c000f840 <malloc>
c0014193:	83 c4 10             	add    esp,0x10
c0014196:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001419c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141a7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00141ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141b1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00141d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141dd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00141e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00141f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014204:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001420e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014212:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001421c:	90                   	nop
c001421d:	83 c4 1c             	add    esp,0x1c
c0014220:	c3                   	ret    
c0014221:	90                   	nop

c0014222 <Device::getName()>:
c0014222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014226:	05 d0 00 00 00       	add    eax,0xd0
c001422b:	c3                   	ret    

c001422c <DriverlessDevice::DriverlessDevice(char const*)>:
c001422c:	83 ec 0c             	sub    esp,0xc
c001422f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014233:	83 ec 08             	sub    esp,0x8
c0014236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001423a:	50                   	push   eax
c001423b:	e8 e6 fe ff ff       	call   c0014126 <Device::Device(char const*)>
c0014240:	83 c4 10             	add    esp,0x10
c0014243:	ba 24 a7 02 c0       	mov    edx,0xc002a724
c0014248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001424c:	89 10                	mov    DWORD PTR [eax],edx
c001424e:	90                   	nop
c001424f:	83 c4 0c             	add    esp,0xc
c0014252:	c3                   	ret    
c0014253:	90                   	nop

c0014254 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014254:	57                   	push   edi
c0014255:	56                   	push   esi
c0014256:	53                   	push   ebx
c0014257:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001425b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001425f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014263:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014269:	75 0c                	jne    c0014277 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001426b:	52                   	push   edx
c001426c:	52                   	push   edx
c001426d:	53                   	push   ebx
c001426e:	56                   	push   esi
c001426f:	e8 b6 41 01 00       	call   c002842a <LinkedList<Device>::addElement(Device*)>
c0014274:	83 c4 10             	add    esp,0x10
c0014277:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001427d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014280:	74 12                	je     c0014294 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014282:	50                   	push   eax
c0014283:	57                   	push   edi
c0014284:	56                   	push   esi
c0014285:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014288:	e8 c7 ff ff ff       	call   c0014254 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001428d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001428f:	83 c4 10             	add    esp,0x10
c0014292:	eb e9                	jmp    c001427d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014294:	5b                   	pop    ebx
c0014295:	5e                   	pop    esi
c0014296:	5f                   	pop    edi
c0014297:	c3                   	ret    

c0014298 <getDevicesOfType(DeviceType)>:
c0014298:	53                   	push   ebx
c0014299:	83 ec 14             	sub    esp,0x14
c001429c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142a0:	53                   	push   ebx
c00142a1:	e8 60 42 01 00       	call   c0028506 <LinkedList<Device>::LinkedList()>
c00142a6:	83 c4 0c             	add    esp,0xc
c00142a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142ad:	53                   	push   ebx
c00142ae:	ff 35 e8 dd 02 c0    	push   DWORD PTR ds:0xc002dde8
c00142b4:	e8 9b ff ff ff       	call   c0014254 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00142b9:	89 d8                	mov    eax,ebx
c00142bb:	83 c4 18             	add    esp,0x18
c00142be:	5b                   	pop    ebx
c00142bf:	c2 04 00             	ret    0x4

c00142c2 <HardDiskController::HardDiskController(char const*)>:
c00142c2:	83 ec 0c             	sub    esp,0xc
c00142c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c9:	83 ec 08             	sub    esp,0x8
c00142cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142d0:	50                   	push   eax
c00142d1:	e8 50 fe ff ff       	call   c0014126 <Device::Device(char const*)>
c00142d6:	83 c4 10             	add    esp,0x10
c00142d9:	ba 50 a7 02 c0       	mov    edx,0xc002a750
c00142de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142e2:	89 10                	mov    DWORD PTR [eax],edx
c00142e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142e8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00142f2:	90                   	nop
c00142f3:	83 c4 0c             	add    esp,0xc
c00142f6:	c3                   	ret    
c00142f7:	90                   	nop

c00142f8 <HardDiskController::~HardDiskController()>:
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	ba 50 a7 02 c0       	mov    edx,0xc002a750
c0014300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014304:	89 10                	mov    DWORD PTR [eax],edx
c0014306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001430a:	83 ec 0c             	sub    esp,0xc
c001430d:	50                   	push   eax
c001430e:	e8 f5 fa ff ff       	call   c0013e08 <Device::~Device()>
c0014313:	83 c4 10             	add    esp,0x10
c0014316:	90                   	nop
c0014317:	83 c4 0c             	add    esp,0xc
c001431a:	c3                   	ret    
c001431b:	90                   	nop

c001431c <HardDiskController::~HardDiskController()>:
c001431c:	83 ec 0c             	sub    esp,0xc
c001431f:	83 ec 0c             	sub    esp,0xc
c0014322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014326:	e8 cd ff ff ff       	call   c00142f8 <HardDiskController::~HardDiskController()>
c001432b:	83 c4 10             	add    esp,0x10
c001432e:	83 ec 08             	sub    esp,0x8
c0014331:	68 58 01 00 00       	push   0x158
c0014336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001433a:	e8 f0 e6 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c001433f:	83 c4 10             	add    esp,0x10
c0014342:	83 c4 0c             	add    esp,0xc
c0014345:	c3                   	ret    

c0014346 <PhysicalDisk::eject()>:
c0014346:	83 ec 18             	sub    esp,0x18
c0014349:	68 74 a7 02 c0       	push   0xc002a774
c001434e:	e8 bc e7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014353:	83 c8 ff             	or     eax,0xffffffff
c0014356:	83 c4 1c             	add    esp,0x1c
c0014359:	c3                   	ret    

c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001435a:	83 ec 0c             	sub    esp,0xc
c001435d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014361:	83 ec 08             	sub    esp,0x8
c0014364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014368:	50                   	push   eax
c0014369:	e8 b8 fd ff ff       	call   c0014126 <Device::Device(char const*)>
c001436e:	83 c4 10             	add    esp,0x10
c0014371:	ba a4 a7 02 c0       	mov    edx,0xc002a7a4
c0014376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001437a:	89 10                	mov    DWORD PTR [eax],edx
c001437c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014380:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014396:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00143a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143a8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00143ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143bc:	90                   	nop
c00143bd:	83 c4 0c             	add    esp,0xc
c00143c0:	c3                   	ret    
c00143c1:	90                   	nop

c00143c2 <PhysicalDisk::startCache()>:
c00143c2:	56                   	push   esi
c00143c3:	53                   	push   ebx
c00143c4:	83 ec 10             	sub    esp,0x10
c00143c7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143cb:	6a 44                	push   0x44
c00143cd:	e8 6e b4 ff ff       	call   c000f840 <malloc>
c00143d2:	89 c6                	mov    esi,eax
c00143d4:	58                   	pop    eax
c00143d5:	5a                   	pop    edx
c00143d6:	53                   	push   ebx
c00143d7:	56                   	push   esi
c00143d8:	e8 03 27 00 00       	call   c0016ae0 <VCache::VCache(PhysicalDisk*)>
c00143dd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00143e3:	83 c4 14             	add    esp,0x14
c00143e6:	5b                   	pop    ebx
c00143e7:	5e                   	pop    esi
c00143e8:	c3                   	ret    
c00143e9:	90                   	nop

c00143ea <PhysicalDisk::~PhysicalDisk()>:
c00143ea:	83 ec 0c             	sub    esp,0xc
c00143ed:	ba a4 a7 02 c0       	mov    edx,0xc002a7a4
c00143f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143f6:	89 10                	mov    DWORD PTR [eax],edx
c00143f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	50                   	push   eax
c0014400:	e8 03 fa ff ff       	call   c0013e08 <Device::~Device()>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	90                   	nop
c0014409:	83 c4 0c             	add    esp,0xc
c001440c:	c3                   	ret    
c001440d:	90                   	nop

c001440e <PhysicalDisk::~PhysicalDisk()>:
c001440e:	83 ec 0c             	sub    esp,0xc
c0014411:	83 ec 0c             	sub    esp,0xc
c0014414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014418:	e8 cd ff ff ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c001441d:	83 c4 10             	add    esp,0x10
c0014420:	83 ec 08             	sub    esp,0x8
c0014423:	68 6c 01 00 00       	push   0x16c
c0014428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001442c:	e8 fe e5 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	83 c4 0c             	add    esp,0xc
c0014437:	c3                   	ret    

c0014438 <FPU::FPU(char const*)>:
c0014438:	83 ec 0c             	sub    esp,0xc
c001443b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001443f:	83 ec 08             	sub    esp,0x8
c0014442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014446:	50                   	push   eax
c0014447:	e8 da fc ff ff       	call   c0014126 <Device::Device(char const*)>
c001444c:	83 c4 10             	add    esp,0x10
c001444f:	ba e8 a7 02 c0       	mov    edx,0xc002a7e8
c0014454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014458:	89 10                	mov    DWORD PTR [eax],edx
c001445a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001445e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014468:	90                   	nop
c0014469:	83 c4 0c             	add    esp,0xc
c001446c:	c3                   	ret    
c001446d:	90                   	nop

c001446e <FPU::~FPU()>:
c001446e:	83 ec 0c             	sub    esp,0xc
c0014471:	ba e8 a7 02 c0       	mov    edx,0xc002a7e8
c0014476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001447a:	89 10                	mov    DWORD PTR [eax],edx
c001447c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014480:	83 ec 0c             	sub    esp,0xc
c0014483:	50                   	push   eax
c0014484:	e8 7f f9 ff ff       	call   c0013e08 <Device::~Device()>
c0014489:	83 c4 10             	add    esp,0x10
c001448c:	90                   	nop
c001448d:	83 c4 0c             	add    esp,0xc
c0014490:	c3                   	ret    
c0014491:	90                   	nop

c0014492 <FPU::~FPU()>:
c0014492:	83 ec 0c             	sub    esp,0xc
c0014495:	83 ec 0c             	sub    esp,0xc
c0014498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001449c:	e8 cd ff ff ff       	call   c001446e <FPU::~FPU()>
c00144a1:	83 c4 10             	add    esp,0x10
c00144a4:	83 ec 08             	sub    esp,0x8
c00144a7:	68 58 01 00 00       	push   0x158
c00144ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144b0:	e8 7a e5 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00144b5:	83 c4 10             	add    esp,0x10
c00144b8:	83 c4 0c             	add    esp,0xc
c00144bb:	c3                   	ret    

c00144bc <setupFPU()>:
c00144bc:	53                   	push   ebx
c00144bd:	83 ec 08             	sub    esp,0x8
c00144c0:	8b 15 e8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dde8
c00144c6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00144cd:	74 19                	je     c00144e8 <setupFPU()+0x2c>
c00144cf:	83 ec 0c             	sub    esp,0xc
c00144d2:	68 58 01 00 00       	push   0x158
c00144d7:	e8 64 b3 ff ff       	call   c000f840 <malloc>
c00144dc:	89 c3                	mov    ebx,eax
c00144de:	89 04 24             	mov    DWORD PTR [esp],eax
c00144e1:	e8 94 0b 01 00       	call   c002507a <AVX::AVX()>
c00144e6:	eb 5b                	jmp    c0014543 <setupFPU()+0x87>
c00144e8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00144ee:	84 c0                	test   al,al
c00144f0:	79 19                	jns    c001450b <setupFPU()+0x4f>
c00144f2:	83 ec 0c             	sub    esp,0xc
c00144f5:	68 58 01 00 00       	push   0x158
c00144fa:	e8 41 b3 ff ff       	call   c000f840 <malloc>
c00144ff:	89 c3                	mov    ebx,eax
c0014501:	89 04 24             	mov    DWORD PTR [esp],eax
c0014504:	e8 97 0c 01 00       	call   c00251a0 <SSE::SSE()>
c0014509:	eb 38                	jmp    c0014543 <setupFPU()+0x87>
c001450b:	a8 20                	test   al,0x20
c001450d:	74 19                	je     c0014528 <setupFPU()+0x6c>
c001450f:	83 ec 0c             	sub    esp,0xc
c0014512:	68 58 01 00 00       	push   0x158
c0014517:	e8 24 b3 ff ff       	call   c000f840 <malloc>
c001451c:	89 c3                	mov    ebx,eax
c001451e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014521:	e8 e4 0b 01 00       	call   c002510a <MMX::MMX()>
c0014526:	eb 1b                	jmp    c0014543 <setupFPU()+0x87>
c0014528:	a8 10                	test   al,0x10
c001452a:	74 1c                	je     c0014548 <setupFPU()+0x8c>
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	68 58 01 00 00       	push   0x158
c0014534:	e8 07 b3 ff ff       	call   c000f840 <malloc>
c0014539:	89 c3                	mov    ebx,eax
c001453b:	89 04 24             	mov    DWORD PTR [esp],eax
c001453e:	e8 eb 0c 01 00       	call   c002522e <x87::x87()>
c0014543:	83 c4 10             	add    esp,0x10
c0014546:	eb 24                	jmp    c001456c <setupFPU()+0xb0>
c0014548:	83 e0 ef             	and    eax,0xffffffef
c001454b:	83 ec 0c             	sub    esp,0xc
c001454e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014554:	68 d4 a7 02 c0       	push   0xc002a7d4
c0014559:	e8 b1 e5 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001455e:	0f 20 c0             	mov    eax,cr0
c0014561:	83 c8 04             	or     eax,0x4
c0014564:	0f 22 c0             	mov    cr0,eax
c0014567:	31 db                	xor    ebx,ebx
c0014569:	83 c4 10             	add    esp,0x10
c001456c:	89 d8                	mov    eax,ebx
c001456e:	83 c4 08             	add    esp,0x8
c0014571:	5b                   	pop    ebx
c0014572:	c3                   	ret    
c0014573:	90                   	nop

c0014574 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014578:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001457c:	c1 e0 04             	shl    eax,0x4
c001457f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014583:	8d 50 10             	lea    edx,[eax+0x10]
c0014586:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001458c:	74 08                	je     c0014596 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001458e:	83 c0 04             	add    eax,0x4
c0014591:	39 d0                	cmp    eax,edx
c0014593:	75 f1                	jne    c0014586 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014595:	c3                   	ret    
c0014596:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145a0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145aa:	eb e2                	jmp    c001458e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00145ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00145ac:	57                   	push   edi
c00145ad:	31 c0                	xor    eax,eax
c00145af:	56                   	push   esi
c00145b0:	53                   	push   ebx
c00145b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00145b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00145bd:	89 da                	mov    edx,ebx
c00145bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00145c3:	c1 e2 04             	shl    edx,0x4
c00145c6:	01 ca                	add    edx,ecx
c00145c8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00145d0:	74 16                	je     c00145e8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00145d2:	40                   	inc    eax
c00145d3:	83 f8 04             	cmp    eax,0x4
c00145d6:	75 f0                	jne    c00145c8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00145d8:	c7 44 24 10 18 a8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a818
c00145e0:	5b                   	pop    ebx
c00145e1:	5e                   	pop    esi
c00145e2:	5f                   	pop    edi
c00145e3:	e9 a3 5b 00 00       	jmp    c001a18b <Krnl::panic(char const*)>
c00145e8:	8d 04 98             	lea    eax,[eax+ebx*4]
c00145eb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00145ee:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00145f4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00145fa:	5b                   	pop    ebx
c00145fb:	5e                   	pop    esi
c00145fc:	5f                   	pop    edi
c00145fd:	c3                   	ret    

c00145fe <doubleFault(regs*, void*)>:
c00145fe:	55                   	push   ebp
c00145ff:	89 e5                	mov    ebp,esp
c0014601:	83 ec 08             	sub    esp,0x8
c0014604:	83 ec 0c             	sub    esp,0xc
c0014607:	68 53 a8 02 c0       	push   0xc002a853
c001460c:	e8 7a 5b 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0014611:	83 c4 10             	add    esp,0x10
c0014614:	90                   	nop
c0014615:	c9                   	leave  
c0014616:	c3                   	ret    
c0014617:	90                   	nop

c0014618 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014618:	56                   	push   esi
c0014619:	53                   	push   ebx
c001461a:	50                   	push   eax
c001461b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001461f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014623:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014628:	75 35                	jne    c001465f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001462a:	8d 43 20             	lea    eax,[ebx+0x20]
c001462d:	31 d2                	xor    edx,edx
c001462f:	89 c1                	mov    ecx,eax
c0014631:	c1 e1 04             	shl    ecx,0x4
c0014634:	01 f1                	add    ecx,esi
c0014636:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001463e:	74 3e                	je     c001467e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014640:	42                   	inc    edx
c0014641:	83 fa 04             	cmp    edx,0x4
c0014644:	75 f0                	jne    c0014636 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014646:	83 ec 0c             	sub    esp,0xc
c0014649:	68 98 a8 02 c0       	push   0xc002a898
c001464e:	e8 38 5b 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0014653:	83 c4 10             	add    esp,0x10
c0014656:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001465b:	5a                   	pop    edx
c001465c:	5b                   	pop    ebx
c001465d:	5e                   	pop    esi
c001465e:	c3                   	ret    
c001465f:	83 ec 0c             	sub    esp,0xc
c0014662:	56                   	push   esi
c0014663:	e8 ba fb ff ff       	call   c0014222 <Device::getName()>
c0014668:	83 c4 10             	add    esp,0x10
c001466b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001466e:	75 ba                	jne    c001462a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014670:	83 fb 0f             	cmp    ebx,0xf
c0014673:	7f 29                	jg     c001469e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014675:	0f b6 9b 40 d0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2fc0]
c001467c:	eb ac                	jmp    c001462a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001467e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014681:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014685:	8d 04 86             	lea    eax,[esi+eax*4]
c0014688:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001468e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014692:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014698:	89 d8                	mov    eax,ebx
c001469a:	5a                   	pop    edx
c001469b:	5b                   	pop    ebx
c001469c:	5e                   	pop    esi
c001469d:	c3                   	ret    
c001469e:	83 ec 0c             	sub    esp,0xc
c00146a1:	68 60 a8 02 c0       	push   0xc002a860
c00146a6:	e8 e0 5a 00 00       	call   c001a18b <Krnl::panic(char const*)>
c00146ab:	83 c4 10             	add    esp,0x10
c00146ae:	e9 77 ff ff ff       	jmp    c001462a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146b3:	90                   	nop

c00146b4 <InterruptController::clearAllHandlers(int, bool)>:
c00146b4:	56                   	push   esi
c00146b5:	53                   	push   ebx
c00146b6:	52                   	push   edx
c00146b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146bf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00146c4:	75 61                	jne    c0014727 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00146c6:	8d 46 20             	lea    eax,[esi+0x20]
c00146c9:	c1 e6 04             	shl    esi,0x4
c00146cc:	c1 e0 04             	shl    eax,0x4
c00146cf:	01 de                	add    esi,ebx
c00146d1:	01 d8                	add    eax,ebx
c00146d3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00146dd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00146e7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00146f1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00146fb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014705:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001470f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014719:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014723:	58                   	pop    eax
c0014724:	5b                   	pop    ebx
c0014725:	5e                   	pop    esi
c0014726:	c3                   	ret    
c0014727:	83 ec 0c             	sub    esp,0xc
c001472a:	53                   	push   ebx
c001472b:	e8 f2 fa ff ff       	call   c0014222 <Device::getName()>
c0014730:	83 c4 10             	add    esp,0x10
c0014733:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014736:	75 8e                	jne    c00146c6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014738:	83 fe 0f             	cmp    esi,0xf
c001473b:	7f 09                	jg     c0014746 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001473d:	0f b6 b6 40 d0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2fc0]
c0014744:	eb 80                	jmp    c00146c6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014746:	83 ec 0c             	sub    esp,0xc
c0014749:	68 d4 a8 02 c0       	push   0xc002a8d4
c001474e:	e8 38 5a 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0014753:	83 c4 10             	add    esp,0x10
c0014756:	e9 6b ff ff ff       	jmp    c00146c6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001475b:	90                   	nop

c001475c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001475c:	56                   	push   esi
c001475d:	53                   	push   ebx
c001475e:	52                   	push   edx
c001475f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014763:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014767:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001476c:	75 3a                	jne    c00147a8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001476e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014772:	8d 50 20             	lea    edx,[eax+0x20]
c0014775:	c1 e2 04             	shl    edx,0x4
c0014778:	8d 04 16             	lea    eax,[esi+edx*1]
c001477b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001477f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014785:	74 0b                	je     c0014792 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014787:	83 c0 04             	add    eax,0x4
c001478a:	39 d0                	cmp    eax,edx
c001478c:	75 f1                	jne    c001477f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001478e:	58                   	pop    eax
c001478f:	5b                   	pop    ebx
c0014790:	5e                   	pop    esi
c0014791:	c3                   	ret    
c0014792:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001479c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00147a6:	eb df                	jmp    c0014787 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00147a8:	83 ec 0c             	sub    esp,0xc
c00147ab:	56                   	push   esi
c00147ac:	e8 71 fa ff ff       	call   c0014222 <Device::getName()>
c00147b1:	83 c4 10             	add    esp,0x10
c00147b4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00147b7:	75 b5                	jne    c001476e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147b9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00147be:	7f 11                	jg     c00147d1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00147c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147c4:	0f b6 80 40 d0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2fc0]
c00147cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147cf:	eb 9d                	jmp    c001476e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147d1:	83 ec 0c             	sub    esp,0xc
c00147d4:	68 d4 a8 02 c0       	push   0xc002a8d4
c00147d9:	e8 ad 59 00 00       	call   c001a18b <Krnl::panic(char const*)>
c00147de:	83 c4 10             	add    esp,0x10
c00147e1:	eb 8b                	jmp    c001476e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00147e3 <nmiHandler(regs*, void*)>:
c00147e3:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00147e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147ec:	e9 9b a7 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c00147f1 <int_handler>:
c00147f1:	55                   	push   ebp
c00147f2:	57                   	push   edi
c00147f3:	56                   	push   esi
c00147f4:	53                   	push   ebx
c00147f5:	83 ec 0c             	sub    esp,0xc
c00147f8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00147fc:	80 3d 44 09 03 c0 00 	cmp    BYTE PTR ds:0xc0030944,0x0
c0014803:	74 0b                	je     c0014810 <int_handler+0x1f>
c0014805:	fa                   	cli    
c0014806:	f4                   	hlt    
c0014807:	80 3d 44 09 03 c0 00 	cmp    BYTE PTR ds:0xc0030944,0x0
c001480e:	75 f5                	jne    c0014805 <int_handler+0x14>
c0014810:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0014815:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014818:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001481e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014824:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014827:	83 f8 17             	cmp    eax,0x17
c001482a:	77 13                	ja     c001483f <int_handler+0x4e>
c001482c:	83 ec 08             	sub    esp,0x8
c001482f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014831:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014834:	0f b6 c0             	movzx  eax,al
c0014837:	50                   	push   eax
c0014838:	57                   	push   edi
c0014839:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001483c:	83 c4 10             	add    esp,0x10
c001483f:	83 c3 15             	add    ebx,0x15
c0014842:	c1 e3 04             	shl    ebx,0x4
c0014845:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014849:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014850:	31 db                	xor    ebx,ebx
c0014852:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014856:	85 c0                	test   eax,eax
c0014858:	74 13                	je     c001486d <int_handler+0x7c>
c001485a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001485d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014861:	74 1c                	je     c001487f <int_handler+0x8e>
c0014863:	83 ec 08             	sub    esp,0x8
c0014866:	52                   	push   edx
c0014867:	56                   	push   esi
c0014868:	ff d0                	call   eax
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	43                   	inc    ebx
c001486e:	83 fb 04             	cmp    ebx,0x4
c0014871:	75 df                	jne    c0014852 <int_handler+0x61>
c0014873:	83 c4 0c             	add    esp,0xc
c0014876:	31 c0                	xor    eax,eax
c0014878:	5b                   	pop    ebx
c0014879:	31 d2                	xor    edx,edx
c001487b:	5e                   	pop    esi
c001487c:	5f                   	pop    edi
c001487d:	5d                   	pop    ebp
c001487e:	c3                   	ret    
c001487f:	83 ec 08             	sub    esp,0x8
c0014882:	52                   	push   edx
c0014883:	56                   	push   esi
c0014884:	ff d0                	call   eax
c0014886:	83 c4 10             	add    esp,0x10
c0014889:	83 c4 0c             	add    esp,0xc
c001488c:	5b                   	pop    ebx
c001488d:	5e                   	pop    esi
c001488e:	5f                   	pop    edi
c001488f:	5d                   	pop    ebp
c0014890:	c3                   	ret    
c0014891:	90                   	nop

c0014892 <InterruptController::InterruptController(char const*)>:
c0014892:	83 ec 1c             	sub    esp,0x1c
c0014895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014899:	83 ec 08             	sub    esp,0x8
c001489c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00148a0:	50                   	push   eax
c00148a1:	e8 80 f8 ff ff       	call   c0014126 <Device::Device(char const*)>
c00148a6:	83 c4 10             	add    esp,0x10
c00148a9:	ba 70 ab 02 c0       	mov    edx,0xc002ab70
c00148ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148b2:	89 10                	mov    DWORD PTR [eax],edx
c00148b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148b8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00148c2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148ca:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00148d2:	7f 5e                	jg     c0014932 <InterruptController::InterruptController(char const*)+0xa0>
c00148d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148dc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00148e1:	7f 49                	jg     c001492c <InterruptController::InterruptController(char const*)+0x9a>
c00148e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00148eb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00148f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148f6:	01 ca                	add    edx,ecx
c00148f8:	83 c2 54             	add    edx,0x54
c00148fb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014907:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001490b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014912:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014916:	01 ca                	add    edx,ecx
c0014918:	81 c2 54 04 00 00    	add    edx,0x454
c001491e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014926:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001492a:	eb b0                	jmp    c00148dc <InterruptController::InterruptController(char const*)+0x4a>
c001492c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014930:	eb 98                	jmp    c00148ca <InterruptController::InterruptController(char const*)+0x38>
c0014932:	90                   	nop
c0014933:	83 c4 1c             	add    esp,0x1c
c0014936:	c3                   	ret    
c0014937:	90                   	nop

c0014938 <InterruptController::~InterruptController()>:
c0014938:	83 ec 0c             	sub    esp,0xc
c001493b:	ba 70 ab 02 c0       	mov    edx,0xc002ab70
c0014940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014944:	89 10                	mov    DWORD PTR [eax],edx
c0014946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001494a:	83 ec 0c             	sub    esp,0xc
c001494d:	50                   	push   eax
c001494e:	e8 b5 f4 ff ff       	call   c0013e08 <Device::~Device()>
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	90                   	nop
c0014957:	83 c4 0c             	add    esp,0xc
c001495a:	c3                   	ret    
c001495b:	90                   	nop

c001495c <InterruptController::~InterruptController()>:
c001495c:	83 ec 0c             	sub    esp,0xc
c001495f:	83 ec 0c             	sub    esp,0xc
c0014962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014966:	e8 cd ff ff ff       	call   c0014938 <InterruptController::~InterruptController()>
c001496b:	83 c4 10             	add    esp,0x10
c001496e:	83 ec 08             	sub    esp,0x8
c0014971:	68 58 21 00 00       	push   0x2158
c0014976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001497a:	e8 b0 e0 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c001497f:	83 c4 10             	add    esp,0x10
c0014982:	83 c4 0c             	add    esp,0xc
c0014985:	c3                   	ret    

c0014986 <displayDebugInfo(regs*)>:
c0014986:	55                   	push   ebp
c0014987:	57                   	push   edi
c0014988:	56                   	push   esi
c0014989:	53                   	push   ebx
c001498a:	83 ec 24             	sub    esp,0x24
c001498d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014991:	0f 20 c2             	mov    edx,cr0
c0014994:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014998:	0f 20 d7             	mov    edi,cr2
c001499b:	0f 20 de             	mov    esi,cr3
c001499e:	0f 20 e5             	mov    ebp,cr4
c00149a1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00149a4:	68 0e a9 02 c0       	push   0xc002a90e
c00149a9:	e8 61 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149ae:	59                   	pop    ecx
c00149af:	58                   	pop    eax
c00149b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149b3:	68 19 a9 02 c0       	push   0xc002a919
c00149b8:	e8 52 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149bd:	58                   	pop    eax
c00149be:	5a                   	pop    edx
c00149bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00149c2:	68 24 a9 02 c0       	push   0xc002a924
c00149c7:	e8 43 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149cc:	59                   	pop    ecx
c00149cd:	58                   	pop    eax
c00149ce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149d1:	68 2f a9 02 c0       	push   0xc002a92f
c00149d6:	e8 34 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149db:	58                   	pop    eax
c00149dc:	5a                   	pop    edx
c00149dd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00149e0:	68 3a a9 02 c0       	push   0xc002a93a
c00149e5:	e8 25 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149ea:	59                   	pop    ecx
c00149eb:	58                   	pop    eax
c00149ec:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00149ef:	68 45 a9 02 c0       	push   0xc002a945
c00149f4:	e8 16 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00149f9:	58                   	pop    eax
c00149fa:	5a                   	pop    edx
c00149fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00149fe:	68 50 a9 02 c0       	push   0xc002a950
c0014a03:	e8 07 e1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a08:	59                   	pop    ecx
c0014a09:	58                   	pop    eax
c0014a0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014a0d:	68 5b a9 02 c0       	push   0xc002a95b
c0014a12:	e8 f8 e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a17:	58                   	pop    eax
c0014a18:	5a                   	pop    edx
c0014a19:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a1c:	68 66 a9 02 c0       	push   0xc002a966
c0014a21:	e8 e9 e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a26:	59                   	pop    ecx
c0014a27:	58                   	pop    eax
c0014a28:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a2b:	68 75 a9 02 c0       	push   0xc002a975
c0014a30:	e8 da e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a35:	58                   	pop    eax
c0014a36:	5a                   	pop    edx
c0014a37:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a3a:	68 80 a9 02 c0       	push   0xc002a980
c0014a3f:	e8 cb e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a44:	59                   	pop    ecx
c0014a45:	58                   	pop    eax
c0014a46:	57                   	push   edi
c0014a47:	68 8b a9 02 c0       	push   0xc002a98b
c0014a4c:	e8 be e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a51:	58                   	pop    eax
c0014a52:	5a                   	pop    edx
c0014a53:	56                   	push   esi
c0014a54:	68 96 a9 02 c0       	push   0xc002a996
c0014a59:	e8 b1 e0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014a5e:	59                   	pop    ecx
c0014a5f:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014a64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6a:	e8 62 c2 ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c0014a6f:	58                   	pop    eax
c0014a70:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a73:	5a                   	pop    edx
c0014a74:	c1 e0 05             	shl    eax,0x5
c0014a77:	05 a0 cd 02 c0       	add    eax,0xc002cda0
c0014a7c:	50                   	push   eax
c0014a7d:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014a82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a88:	e8 63 c6 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014a8d:	59                   	pop    ecx
c0014a8e:	58                   	pop    eax
c0014a8f:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014a94:	68 a1 a9 02 c0       	push   0xc002a9a1
c0014a99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a9f:	e8 4c c6 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014aa4:	58                   	pop    eax
c0014aa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aaa:	5a                   	pop    edx
c0014aab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aae:	83 c0 0c             	add    eax,0xc
c0014ab1:	50                   	push   eax
c0014ab2:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014ab7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abd:	e8 2e c6 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014ac2:	59                   	pop    ecx
c0014ac3:	58                   	pop    eax
c0014ac4:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014ac9:	68 aa a9 02 c0       	push   0xc002a9aa
c0014ace:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad4:	e8 17 c6 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014ad9:	58                   	pop    eax
c0014ada:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014adf:	5a                   	pop    edx
c0014ae0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ae3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae9:	e8 28 c6 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014aee:	59                   	pop    ecx
c0014aef:	58                   	pop    eax
c0014af0:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014af5:	68 b2 a9 02 c0       	push   0xc002a9b2
c0014afa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b00:	e8 eb c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014b05:	58                   	pop    eax
c0014b06:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014b0b:	5a                   	pop    edx
c0014b0c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014b0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b15:	e8 fc c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014b1a:	59                   	pop    ecx
c0014b1b:	58                   	pop    eax
c0014b1c:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014b21:	68 ba a9 02 c0       	push   0xc002a9ba
c0014b26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2c:	e8 bf c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014b31:	58                   	pop    eax
c0014b32:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014b37:	5a                   	pop    edx
c0014b38:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014b3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b41:	e8 d0 c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014b46:	59                   	pop    ecx
c0014b47:	58                   	pop    eax
c0014b48:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014b4d:	68 c2 a9 02 c0       	push   0xc002a9c2
c0014b52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b58:	e8 93 c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014b5d:	58                   	pop    eax
c0014b5e:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014b63:	5a                   	pop    edx
c0014b64:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014b67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b6d:	e8 a4 c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014b72:	59                   	pop    ecx
c0014b73:	58                   	pop    eax
c0014b74:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014b79:	68 ca a9 02 c0       	push   0xc002a9ca
c0014b7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b84:	e8 67 c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014b89:	58                   	pop    eax
c0014b8a:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014b8f:	5a                   	pop    edx
c0014b90:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014b93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b99:	e8 78 c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014b9e:	59                   	pop    ecx
c0014b9f:	58                   	pop    eax
c0014ba0:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014ba5:	68 d2 a9 02 c0       	push   0xc002a9d2
c0014baa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb0:	e8 3b c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014bb5:	58                   	pop    eax
c0014bb6:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014bbb:	5a                   	pop    edx
c0014bbc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014bbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bc5:	e8 4c c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014bca:	59                   	pop    ecx
c0014bcb:	58                   	pop    eax
c0014bcc:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014bd1:	68 da a9 02 c0       	push   0xc002a9da
c0014bd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bdc:	e8 0f c5 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014be1:	58                   	pop    eax
c0014be2:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014be7:	5a                   	pop    edx
c0014be8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014bec:	52                   	push   edx
c0014bed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bf3:	e8 1e c5 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014bf8:	59                   	pop    ecx
c0014bf9:	58                   	pop    eax
c0014bfa:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014bff:	68 e3 a9 02 c0       	push   0xc002a9e3
c0014c04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c0a:	e8 e1 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014c0f:	58                   	pop    eax
c0014c10:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014c15:	5a                   	pop    edx
c0014c16:	57                   	push   edi
c0014c17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c1d:	e8 f4 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014c22:	59                   	pop    ecx
c0014c23:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014c28:	5f                   	pop    edi
c0014c29:	68 eb a9 02 c0       	push   0xc002a9eb
c0014c2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c34:	e8 b7 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014c39:	58                   	pop    eax
c0014c3a:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014c3f:	5a                   	pop    edx
c0014c40:	56                   	push   esi
c0014c41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c47:	e8 ca c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014c4c:	59                   	pop    ecx
c0014c4d:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014c52:	5e                   	pop    esi
c0014c53:	68 f3 a9 02 c0       	push   0xc002a9f3
c0014c58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c5e:	e8 8d c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014c63:	5f                   	pop    edi
c0014c64:	58                   	pop    eax
c0014c65:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014c6a:	55                   	push   ebp
c0014c6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c71:	e8 a0 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014c76:	58                   	pop    eax
c0014c77:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014c7c:	5a                   	pop    edx
c0014c7d:	68 fb a9 02 c0       	push   0xc002a9fb
c0014c82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c88:	e8 63 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014c8d:	0f 21 c0             	mov    eax,db0
c0014c90:	59                   	pop    ecx
c0014c91:	5e                   	pop    esi
c0014c92:	50                   	push   eax
c0014c93:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014c98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c9e:	e8 73 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014ca3:	5f                   	pop    edi
c0014ca4:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014ca9:	5d                   	pop    ebp
c0014caa:	68 04 aa 02 c0       	push   0xc002aa04
c0014caf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cb5:	e8 36 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014cba:	0f 21 c8             	mov    eax,db1
c0014cbd:	5a                   	pop    edx
c0014cbe:	59                   	pop    ecx
c0014cbf:	50                   	push   eax
c0014cc0:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014cc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ccb:	e8 46 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014cd0:	5e                   	pop    esi
c0014cd1:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014cd6:	5f                   	pop    edi
c0014cd7:	68 0c aa 02 c0       	push   0xc002aa0c
c0014cdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce2:	e8 09 c4 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014ce7:	0f 21 d0             	mov    eax,db2
c0014cea:	5d                   	pop    ebp
c0014ceb:	5a                   	pop    edx
c0014cec:	50                   	push   eax
c0014ced:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014cf2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cf8:	e8 19 c4 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014cfd:	59                   	pop    ecx
c0014cfe:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014d03:	5e                   	pop    esi
c0014d04:	68 14 aa 02 c0       	push   0xc002aa14
c0014d09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d0f:	e8 dc c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014d14:	0f 21 d8             	mov    eax,db3
c0014d17:	5f                   	pop    edi
c0014d18:	5d                   	pop    ebp
c0014d19:	50                   	push   eax
c0014d1a:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014d1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d25:	e8 ec c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014d2a:	58                   	pop    eax
c0014d2b:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014d30:	5a                   	pop    edx
c0014d31:	68 1c aa 02 c0       	push   0xc002aa1c
c0014d36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d3c:	e8 af c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014d41:	0f 21 f0             	mov    eax,db6
c0014d44:	59                   	pop    ecx
c0014d45:	5e                   	pop    esi
c0014d46:	50                   	push   eax
c0014d47:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014d4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d52:	e8 bf c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014d57:	5f                   	pop    edi
c0014d58:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014d5d:	5d                   	pop    ebp
c0014d5e:	68 24 aa 02 c0       	push   0xc002aa24
c0014d63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d69:	e8 82 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014d6e:	0f 21 f8             	mov    eax,db7
c0014d71:	5a                   	pop    edx
c0014d72:	59                   	pop    ecx
c0014d73:	50                   	push   eax
c0014d74:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014d79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d7f:	e8 92 c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014d84:	5e                   	pop    esi
c0014d85:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d88:	e8 01 84 00 00       	call   c001d18e <Thr::getDriverNameFromAddress(unsigned long)>
c0014d8d:	83 c4 10             	add    esp,0x10
c0014d90:	85 c0                	test   eax,eax
c0014d92:	74 7d                	je     c0014e11 <displayDebugInfo(regs*)+0x48b>
c0014d94:	89 c6                	mov    esi,eax
c0014d96:	50                   	push   eax
c0014d97:	50                   	push   eax
c0014d98:	56                   	push   esi
c0014d99:	68 2c aa 02 c0       	push   0xc002aa2c
c0014d9e:	e8 6c dd ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014da3:	5a                   	pop    edx
c0014da4:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014da9:	59                   	pop    ecx
c0014daa:	68 3a aa 02 c0       	push   0xc002aa3a
c0014daf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014db5:	e8 36 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014dba:	5f                   	pop    edi
c0014dbb:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014dc0:	5d                   	pop    ebp
c0014dc1:	56                   	push   esi
c0014dc2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc8:	e8 23 c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014dcd:	58                   	pop    eax
c0014dce:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014dd3:	5a                   	pop    edx
c0014dd4:	68 46 aa 02 c0       	push   0xc002aa46
c0014dd9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ddf:	e8 0c c3 ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c0014de4:	59                   	pop    ecx
c0014de5:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0014dea:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014df0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014df3:	e8 cd 83 00 00       	call   c001d1c5 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014df8:	5b                   	pop    ebx
c0014df9:	5d                   	pop    ebp
c0014dfa:	50                   	push   eax
c0014dfb:	57                   	push   edi
c0014dfc:	e8 15 c3 ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c0014e01:	58                   	pop    eax
c0014e02:	5a                   	pop    edx
c0014e03:	56                   	push   esi
c0014e04:	68 52 aa 02 c0       	push   0xc002aa52
c0014e09:	e8 01 dd ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014e0e:	83 c4 10             	add    esp,0x10
c0014e11:	fa                   	cli    
c0014e12:	f4                   	hlt    
c0014e13:	eb fe                	jmp    c0014e13 <displayDebugInfo(regs*)+0x48d>

c0014e15 <x87EmulHandler(regs*, void*)>:
c0014e15:	53                   	push   ebx
c0014e16:	83 ec 14             	sub    esp,0x14
c0014e19:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e1d:	53                   	push   ebx
c0014e1e:	e8 85 a7 00 00       	call   c001f5a8 <Vm::x87Handler(regs*)>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	84 c0                	test   al,al
c0014e28:	74 05                	je     c0014e2f <x87EmulHandler(regs*, void*)+0x1a>
c0014e2a:	83 c4 08             	add    esp,0x8
c0014e2d:	5b                   	pop    ebx
c0014e2e:	c3                   	ret    
c0014e2f:	83 ec 0c             	sub    esp,0xc
c0014e32:	68 62 aa 02 c0       	push   0xc002aa62
c0014e37:	e8 d3 dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014e3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e3f:	e8 42 fb ff ff       	call   c0014986 <displayDebugInfo(regs*)>

c0014e44 <gpFault(regs*, void*)>:
c0014e44:	53                   	push   ebx
c0014e45:	83 ec 14             	sub    esp,0x14
c0014e48:	c7 05 90 df 02 c0 25 e9 01 c0 	mov    DWORD PTR ds:0xc002df90,0xc001e925
c0014e52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e56:	53                   	push   ebx
c0014e57:	e8 c9 9a 00 00       	call   c001e925 <Vm::faultHandler(regs*)>
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	84 c0                	test   al,al
c0014e61:	74 05                	je     c0014e68 <gpFault(regs*, void*)+0x24>
c0014e63:	83 c4 08             	add    esp,0x8
c0014e66:	5b                   	pop    ebx
c0014e67:	c3                   	ret    
c0014e68:	83 ec 0c             	sub    esp,0xc
c0014e6b:	68 78 aa 02 c0       	push   0xc002aa78
c0014e70:	e8 9a dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014e75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e78:	e8 09 fb ff ff       	call   c0014986 <displayDebugInfo(regs*)>

c0014e7d <pgFault(regs*, void*)>:
c0014e7d:	83 ec 18             	sub    esp,0x18
c0014e80:	68 93 aa 02 c0       	push   0xc002aa93
c0014e85:	e8 85 dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014e8a:	58                   	pop    eax
c0014e8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e8f:	e8 f2 fa ff ff       	call   c0014986 <displayDebugInfo(regs*)>

c0014e94 <otherISRHandler(regs*, void*)>:
c0014e94:	53                   	push   ebx
c0014e95:	83 ec 0c             	sub    esp,0xc
c0014e98:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e9c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e9f:	50                   	push   eax
c0014ea0:	50                   	push   eax
c0014ea1:	68 a0 aa 02 c0       	push   0xc002aaa0
c0014ea6:	e8 64 dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014eab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eae:	e8 d3 fa ff ff       	call   c0014986 <displayDebugInfo(regs*)>

c0014eb3 <opcodeFault(regs*, void*)>:
c0014eb3:	55                   	push   ebp
c0014eb4:	89 e5                	mov    ebp,esp
c0014eb6:	56                   	push   esi
c0014eb7:	53                   	push   ebx
c0014eb8:	83 ec 40             	sub    esp,0x40
c0014ebb:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0014ec0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ec6:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014ecc:	84 c0                	test   al,al
c0014ece:	74 24                	je     c0014ef4 <opcodeFault(regs*, void*)+0x41>
c0014ed0:	83 ec 0c             	sub    esp,0xc
c0014ed3:	68 c0 aa 02 c0       	push   0xc002aac0
c0014ed8:	e8 32 dc ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0014edd:	83 c4 10             	add    esp,0x10
c0014ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ee6:	8d 50 19             	lea    edx,[eax+0x19]
c0014ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eef:	e9 be 05 00 00       	jmp    c00154b2 <opcodeFault(regs*, void*)+0x5ff>
c0014ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014efa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014efd:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014f01:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f0b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014f0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f11:	8a 00                	mov    al,BYTE PTR [eax]
c0014f13:	3c f0                	cmp    al,0xf0
c0014f15:	75 17                	jne    c0014f2e <opcodeFault(regs*, void*)+0x7b>
c0014f17:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f20:	8d 50 01             	lea    edx,[eax+0x1]
c0014f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f26:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f29:	e9 da 00 00 00       	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014f2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f31:	8a 00                	mov    al,BYTE PTR [eax]
c0014f33:	3c f2                	cmp    al,0xf2
c0014f35:	74 09                	je     c0014f40 <opcodeFault(regs*, void*)+0x8d>
c0014f37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f3c:	3c f3                	cmp    al,0xf3
c0014f3e:	75 1b                	jne    c0014f5b <opcodeFault(regs*, void*)+0xa8>
c0014f40:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f44:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f4d:	8d 50 01             	lea    edx,[eax+0x1]
c0014f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f53:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f56:	e9 ad 00 00 00       	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014f5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f5e:	8a 00                	mov    al,BYTE PTR [eax]
c0014f60:	3c 66                	cmp    al,0x66
c0014f62:	75 1f                	jne    c0014f83 <opcodeFault(regs*, void*)+0xd0>
c0014f64:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f68:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014f6c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f75:	8d 50 01             	lea    edx,[eax+0x1]
c0014f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f7e:	e9 85 00 00 00       	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014f83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f86:	8a 00                	mov    al,BYTE PTR [eax]
c0014f88:	3c 67                	cmp    al,0x67
c0014f8a:	75 18                	jne    c0014fa4 <opcodeFault(regs*, void*)+0xf1>
c0014f8c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f90:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f96:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f99:	8d 50 01             	lea    edx,[eax+0x1]
c0014f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa2:	eb 64                	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014fa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa9:	3c 2e                	cmp    al,0x2e
c0014fab:	74 09                	je     c0014fb6 <opcodeFault(regs*, void*)+0x103>
c0014fad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb0:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb2:	3c 3e                	cmp    al,0x3e
c0014fb4:	75 18                	jne    c0014fce <opcodeFault(regs*, void*)+0x11b>
c0014fb6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fc3:	8d 50 01             	lea    edx,[eax+0x1]
c0014fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fcc:	eb 3a                	jmp    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014fce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd3:	3c 36                	cmp    al,0x36
c0014fd5:	74 1b                	je     c0014ff2 <opcodeFault(regs*, void*)+0x13f>
c0014fd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fda:	8a 00                	mov    al,BYTE PTR [eax]
c0014fdc:	3c 26                	cmp    al,0x26
c0014fde:	74 12                	je     c0014ff2 <opcodeFault(regs*, void*)+0x13f>
c0014fe0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe3:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe5:	3c 64                	cmp    al,0x64
c0014fe7:	74 09                	je     c0014ff2 <opcodeFault(regs*, void*)+0x13f>
c0014fe9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fec:	8a 00                	mov    al,BYTE PTR [eax]
c0014fee:	3c 65                	cmp    al,0x65
c0014ff0:	75 16                	jne    c0015008 <opcodeFault(regs*, void*)+0x155>
c0014ff2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ff6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fff:	8d 50 01             	lea    edx,[eax+0x1]
c0015002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015005:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015008:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001500b:	8a 00                	mov    al,BYTE PTR [eax]
c001500d:	3c 0f                	cmp    al,0xf
c001500f:	0f 85 ad 00 00 00    	jne    c00150c2 <opcodeFault(regs*, void*)+0x20f>
c0015015:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015018:	40                   	inc    eax
c0015019:	8a 00                	mov    al,BYTE PTR [eax]
c001501b:	3c c2                	cmp    al,0xc2
c001501d:	74 0e                	je     c001502d <opcodeFault(regs*, void*)+0x17a>
c001501f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015022:	40                   	inc    eax
c0015023:	8a 00                	mov    al,BYTE PTR [eax]
c0015025:	3c c3                	cmp    al,0xc3
c0015027:	0f 85 95 00 00 00    	jne    c00150c2 <opcodeFault(regs*, void*)+0x20f>
c001502d:	83 ec 0c             	sub    esp,0xc
c0015030:	68 e3 aa 02 c0       	push   0xc002aae3
c0015035:	e8 d5 da ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001503a:	83 c4 10             	add    esp,0x10
c001503d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015040:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015043:	8d 50 01             	lea    edx,[eax+0x1]
c0015046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015049:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001504c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001504f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015052:	8a 00                	mov    al,BYTE PTR [eax]
c0015054:	8d 50 fe             	lea    edx,[eax-0x2]
c0015057:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001505a:	88 10                	mov    BYTE PTR [eax],dl
c001505c:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001505f:	50                   	push   eax
c0015060:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015063:	50                   	push   eax
c0015064:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015067:	50                   	push   eax
c0015068:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001506b:	e8 e2 47 00 00       	call   c0019852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015070:	83 c4 10             	add    esp,0x10
c0015073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015076:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015079:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001507c:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001507f:	01 d0                	add    eax,edx
c0015081:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015087:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001508a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001508d:	48                   	dec    eax
c001508e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015094:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015097:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001509a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509d:	83 ec 04             	sub    esp,0x4
c00150a0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00150a3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150a6:	50                   	push   eax
c00150a7:	e8 08 b1 fe ff       	call   c00001b4 <voodooXADD>
c00150ac:	83 c4 10             	add    esp,0x10
c00150af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00150b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00150b5:	01 c2                	add    edx,eax
c00150b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150bd:	e9 f0 03 00 00       	jmp    c00154b2 <opcodeFault(regs*, void*)+0x5ff>
c00150c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c5:	8a 00                	mov    al,BYTE PTR [eax]
c00150c7:	3c 0f                	cmp    al,0xf
c00150c9:	0f 85 8b 01 00 00    	jne    c001525a <opcodeFault(regs*, void*)+0x3a7>
c00150cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d2:	40                   	inc    eax
c00150d3:	8a 00                	mov    al,BYTE PTR [eax]
c00150d5:	3c c7                	cmp    al,0xc7
c00150d7:	0f 86 7d 01 00 00    	jbe    c001525a <opcodeFault(regs*, void*)+0x3a7>
c00150dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e0:	40                   	inc    eax
c00150e1:	8a 00                	mov    al,BYTE PTR [eax]
c00150e3:	3c cf                	cmp    al,0xcf
c00150e5:	0f 87 6f 01 00 00    	ja     c001525a <opcodeFault(regs*, void*)+0x3a7>
c00150eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ee:	40                   	inc    eax
c00150ef:	8a 00                	mov    al,BYTE PTR [eax]
c00150f1:	83 c0 38             	add    eax,0x38
c00150f4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00150f7:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00150fb:	75 0b                	jne    c0015108 <opcodeFault(regs*, void*)+0x255>
c00150fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015100:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015103:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015106:	eb 75                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c0015108:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001510c:	75 0b                	jne    c0015119 <opcodeFault(regs*, void*)+0x266>
c001510e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015111:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015114:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015117:	eb 64                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c0015119:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001511d:	75 0b                	jne    c001512a <opcodeFault(regs*, void*)+0x277>
c001511f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015122:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015125:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015128:	eb 53                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001512a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001512e:	75 0b                	jne    c001513b <opcodeFault(regs*, void*)+0x288>
c0015130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015133:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015136:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015139:	eb 42                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001513b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001513f:	75 0b                	jne    c001514c <opcodeFault(regs*, void*)+0x299>
c0015141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015144:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015147:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001514a:	eb 31                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001514c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015150:	75 0b                	jne    c001515d <opcodeFault(regs*, void*)+0x2aa>
c0015152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015155:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015158:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001515b:	eb 20                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001515d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015161:	75 0b                	jne    c001516e <opcodeFault(regs*, void*)+0x2bb>
c0015163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015166:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015169:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001516c:	eb 0f                	jmp    c001517d <opcodeFault(regs*, void*)+0x2ca>
c001516e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015172:	75 09                	jne    c001517d <opcodeFault(regs*, void*)+0x2ca>
c0015174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015177:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001517a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001517d:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015181:	74 10                	je     c0015193 <opcodeFault(regs*, void*)+0x2e0>
c0015183:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001518a:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015191:	eb 2d                	jmp    c00151c0 <opcodeFault(regs*, void*)+0x30d>
c0015193:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015196:	c1 e0 18             	shl    eax,0x18
c0015199:	89 c2                	mov    edx,eax
c001519b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001519e:	c1 e0 08             	shl    eax,0x8
c00151a1:	25 00 00 ff 00       	and    eax,0xff0000
c00151a6:	09 c2                	or     edx,eax
c00151a8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151ab:	c1 e8 08             	shr    eax,0x8
c00151ae:	25 00 ff 00 00       	and    eax,0xff00
c00151b3:	09 c2                	or     edx,eax
c00151b5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151b8:	c1 e8 18             	shr    eax,0x18
c00151bb:	09 d0                	or     eax,edx
c00151bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151c0:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00151c4:	75 0b                	jne    c00151d1 <opcodeFault(regs*, void*)+0x31e>
c00151c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151cc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151cf:	eb 75                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c00151d1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151d5:	75 0b                	jne    c00151e2 <opcodeFault(regs*, void*)+0x32f>
c00151d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151dd:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00151e0:	eb 64                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c00151e2:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151e6:	75 0b                	jne    c00151f3 <opcodeFault(regs*, void*)+0x340>
c00151e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151ee:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151f1:	eb 53                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c00151f3:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151f7:	75 0b                	jne    c0015204 <opcodeFault(regs*, void*)+0x351>
c00151f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151ff:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015202:	eb 42                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c0015204:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015208:	75 0b                	jne    c0015215 <opcodeFault(regs*, void*)+0x362>
c001520a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015210:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015213:	eb 31                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c0015215:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015219:	75 0b                	jne    c0015226 <opcodeFault(regs*, void*)+0x373>
c001521b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015221:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015224:	eb 20                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c0015226:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001522a:	75 0b                	jne    c0015237 <opcodeFault(regs*, void*)+0x384>
c001522c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015232:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015235:	eb 0f                	jmp    c0015246 <opcodeFault(regs*, void*)+0x393>
c0015237:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001523b:	75 09                	jne    c0015246 <opcodeFault(regs*, void*)+0x393>
c001523d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015240:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015243:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015249:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001524c:	8d 50 02             	lea    edx,[eax+0x2]
c001524f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015252:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015255:	e9 58 02 00 00       	jmp    c00154b2 <opcodeFault(regs*, void*)+0x5ff>
c001525a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525d:	8a 00                	mov    al,BYTE PTR [eax]
c001525f:	3c 0f                	cmp    al,0xf
c0015261:	0f 85 76 01 00 00    	jne    c00153dd <opcodeFault(regs*, void*)+0x52a>
c0015267:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526a:	40                   	inc    eax
c001526b:	8a 00                	mov    al,BYTE PTR [eax]
c001526d:	3c c7                	cmp    al,0xc7
c001526f:	0f 85 68 01 00 00    	jne    c00153dd <opcodeFault(regs*, void*)+0x52a>
c0015275:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001527e:	8d 50 01             	lea    edx,[eax+0x1]
c0015281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015284:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015287:	8d 45 ba             	lea    eax,[ebp-0x46]
c001528a:	50                   	push   eax
c001528b:	8d 45 bb             	lea    eax,[ebp-0x45]
c001528e:	50                   	push   eax
c001528f:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015292:	50                   	push   eax
c0015293:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015296:	e8 b7 45 00 00       	call   c0019852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00152a1:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00152a4:	83 f0 01             	xor    eax,0x1
c00152a7:	84 c0                	test   al,al
c00152a9:	0f 84 2e 01 00 00    	je     c00153dd <opcodeFault(regs*, void*)+0x52a>
c00152af:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00152b2:	3c 01                	cmp    al,0x1
c00152b4:	0f 85 23 01 00 00    	jne    c00153dd <opcodeFault(regs*, void*)+0x52a>
c00152ba:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00152bd:	83 f0 01             	xor    eax,0x1
c00152c0:	84 c0                	test   al,al
c00152c2:	0f 84 15 01 00 00    	je     c00153dd <opcodeFault(regs*, void*)+0x52a>
c00152c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00152ce:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152d1:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00152d8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152db:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152de:	89 c2                	mov    edx,eax
c00152e0:	b8 00 00 00 00       	mov    eax,0x0
c00152e5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152e8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ee:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00152f1:	ba 00 00 00 00       	mov    edx,0x0
c00152f6:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00152f9:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00152fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ff:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015302:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015305:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001530c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001530f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015312:	89 c2                	mov    edx,eax
c0015314:	b8 00 00 00 00       	mov    eax,0x0
c0015319:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001531c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001531f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015322:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015325:	ba 00 00 00 00       	mov    edx,0x0
c001532a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001532d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015330:	e8 51 85 00 00       	call   c001d886 <lockScheduler()>
c0015335:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015338:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001533b:	8b 00                	mov    eax,DWORD PTR [eax]
c001533d:	89 c1                	mov    ecx,eax
c001533f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015342:	89 cb                	mov    ebx,ecx
c0015344:	89 d0                	mov    eax,edx
c0015346:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015349:	89 c6                	mov    esi,eax
c001534b:	89 f0                	mov    eax,esi
c001534d:	09 d8                	or     eax,ebx
c001534f:	85 c0                	test   eax,eax
c0015351:	75 21                	jne    c0015374 <opcodeFault(regs*, void*)+0x4c1>
c0015353:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015356:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015359:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001535c:	89 01                	mov    DWORD PTR [ecx],eax
c001535e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015364:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015367:	83 c8 40             	or     eax,0x40
c001536a:	89 c2                	mov    edx,eax
c001536c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015372:	eb 3e                	jmp    c00153b2 <opcodeFault(regs*, void*)+0x4ff>
c0015374:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015377:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001537a:	8b 00                	mov    eax,DWORD PTR [eax]
c001537c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001537f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015382:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015388:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001538b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001538e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015391:	89 d0                	mov    eax,edx
c0015393:	31 d2                	xor    edx,edx
c0015395:	89 c3                	mov    ebx,eax
c0015397:	89 d6                	mov    esi,edx
c0015399:	89 da                	mov    edx,ebx
c001539b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00153a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153a7:	83 e0 bf             	and    eax,0xffffffbf
c00153aa:	89 c2                	mov    edx,eax
c00153ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153af:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00153b2:	e8 d1 84 00 00       	call   c001d888 <unlockScheduler()>
c00153b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153bd:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00153c0:	01 c2                	add    edx,eax
c00153c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c8:	83 ec 0c             	sub    esp,0xc
c00153cb:	68 f2 aa 02 c0       	push   0xc002aaf2
c00153d0:	e8 3a d7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	e9 d5 00 00 00       	jmp    c00154b2 <opcodeFault(regs*, void*)+0x5ff>
c00153dd:	83 ec 0c             	sub    esp,0xc
c00153e0:	68 05 ab 02 c0       	push   0xc002ab05
c00153e5:	e8 25 d7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00153ea:	83 c4 10             	add    esp,0x10
c00153ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153f9:	c1 e0 04             	shl    eax,0x4
c00153fc:	01 d0                	add    eax,edx
c00153fe:	83 c0 03             	add    eax,0x3
c0015401:	8a 00                	mov    al,BYTE PTR [eax]
c0015403:	0f b6 d8             	movzx  ebx,al
c0015406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015409:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001540c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015412:	c1 e0 04             	shl    eax,0x4
c0015415:	01 d0                	add    eax,edx
c0015417:	83 c0 02             	add    eax,0x2
c001541a:	8a 00                	mov    al,BYTE PTR [eax]
c001541c:	0f b6 c8             	movzx  ecx,al
c001541f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015422:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015428:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001542b:	c1 e0 04             	shl    eax,0x4
c001542e:	01 d0                	add    eax,edx
c0015430:	40                   	inc    eax
c0015431:	8a 00                	mov    al,BYTE PTR [eax]
c0015433:	0f b6 d0             	movzx  edx,al
c0015436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015439:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001543c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015442:	c1 e0 04             	shl    eax,0x4
c0015445:	01 f0                	add    eax,esi
c0015447:	8a 00                	mov    al,BYTE PTR [eax]
c0015449:	0f b6 c0             	movzx  eax,al
c001544c:	83 ec 0c             	sub    esp,0xc
c001544f:	53                   	push   ebx
c0015450:	51                   	push   ecx
c0015451:	52                   	push   edx
c0015452:	50                   	push   eax
c0015453:	68 18 ab 02 c0       	push   0xc002ab18
c0015458:	e8 b2 d6 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001545d:	83 c4 20             	add    esp,0x20
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015466:	83 c0 03             	add    eax,0x3
c0015469:	8a 00                	mov    al,BYTE PTR [eax]
c001546b:	0f b6 d8             	movzx  ebx,al
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015474:	83 c0 02             	add    eax,0x2
c0015477:	8a 00                	mov    al,BYTE PTR [eax]
c0015479:	0f b6 c8             	movzx  ecx,al
c001547c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015482:	40                   	inc    eax
c0015483:	8a 00                	mov    al,BYTE PTR [eax]
c0015485:	0f b6 d0             	movzx  edx,al
c0015488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001548e:	8a 00                	mov    al,BYTE PTR [eax]
c0015490:	0f b6 c0             	movzx  eax,al
c0015493:	83 ec 0c             	sub    esp,0xc
c0015496:	53                   	push   ebx
c0015497:	51                   	push   ecx
c0015498:	52                   	push   edx
c0015499:	50                   	push   eax
c001549a:	68 40 ab 02 c0       	push   0xc002ab40
c001549f:	e8 6b d6 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00154a4:	83 c4 20             	add    esp,0x20
c00154a7:	83 ec 0c             	sub    esp,0xc
c00154aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154ad:	e8 d4 f4 ff ff       	call   c0014986 <displayDebugInfo(regs*)>
c00154b2:	8d 65 f8             	lea    esp,[ebp-0x8]
c00154b5:	5b                   	pop    ebx
c00154b6:	5e                   	pop    esi
c00154b7:	5d                   	pop    ebp
c00154b8:	c3                   	ret    

c00154b9 <displayProgramFault(char const*)>:
c00154b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154c1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154c7:	85 c0                	test   eax,eax
c00154c9:	74 15                	je     c00154e0 <displayProgramFault(char const*)+0x27>
c00154cb:	83 ec 0c             	sub    esp,0xc
c00154ce:	6a 04                	push   0x4
c00154d0:	6a 0f                	push   0xf
c00154d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154d6:	50                   	push   eax
c00154d7:	e8 d6 b8 ff ff       	call   c0010db2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154dc:	83 c4 1c             	add    esp,0x1c
c00154df:	c3                   	ret    
c00154e0:	c3                   	ret    

c00154e1 <setupInterruptController()>:
c00154e1:	55                   	push   ebp
c00154e2:	89 e5                	mov    ebp,esp
c00154e4:	53                   	push   ebx
c00154e5:	83 ec 24             	sub    esp,0x24
c00154e8:	b8 00 00 00 00       	mov    eax,0x0
c00154ed:	85 c0                	test   eax,eax
c00154ef:	0f 95 c0             	setne  al
c00154f2:	84 c0                	test   al,al
c00154f4:	74 5b                	je     c0015551 <setupInterruptController()+0x70>
c00154f6:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00154fd:	83 ec 0c             	sub    esp,0xc
c0015500:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015503:	e8 38 a3 ff ff       	call   c000f840 <malloc>
c0015508:	83 c4 10             	add    esp,0x10
c001550b:	89 c3                	mov    ebx,eax
c001550d:	83 ec 0c             	sub    esp,0xc
c0015510:	53                   	push   ebx
c0015511:	e8 56 ff 00 00       	call   c002546c <APIC::APIC()>
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001551c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001551f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	83 c0 08             	add    eax,0x8
c0015527:	8b 00                	mov    eax,DWORD PTR [eax]
c0015529:	6a 00                	push   0x0
c001552b:	6a 00                	push   0x0
c001552d:	6a 00                	push   0x0
c001552f:	52                   	push   edx
c0015530:	ff d0                	call   eax
c0015532:	83 c4 10             	add    esp,0x10
c0015535:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001553a:	83 ec 08             	sub    esp,0x8
c001553d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015540:	50                   	push   eax
c0015541:	e8 f0 e9 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0015546:	83 c4 10             	add    esp,0x10
c0015549:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001554c:	e9 52 03 00 00       	jmp    c00158a3 <setupInterruptController()+0x3c2>
c0015551:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0015556:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001555c:	83 e0 01             	and    eax,0x1
c001555f:	84 c0                	test   al,al
c0015561:	0f 95 c0             	setne  al
c0015564:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015567:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015574:	e8 c7 a2 ff ff       	call   c000f840 <malloc>
c0015579:	83 c4 10             	add    esp,0x10
c001557c:	89 c3                	mov    ebx,eax
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	53                   	push   ebx
c0015582:	e8 3d 04 01 00       	call   c00259c4 <PIC::PIC()>
c0015587:	83 c4 10             	add    esp,0x10
c001558a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001558d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015590:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015593:	8b 00                	mov    eax,DWORD PTR [eax]
c0015595:	83 c0 08             	add    eax,0x8
c0015598:	8b 00                	mov    eax,DWORD PTR [eax]
c001559a:	6a 00                	push   0x0
c001559c:	6a 00                	push   0x0
c001559e:	6a 00                	push   0x0
c00155a0:	52                   	push   edx
c00155a1:	ff d0                	call   eax
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00155aa:	74 73                	je     c001561f <setupInterruptController()+0x13e>
c00155ac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b4:	83 c0 0c             	add    eax,0xc
c00155b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b9:	6a 00                	push   0x0
c00155bb:	6a 00                	push   0x0
c00155bd:	6a 00                	push   0x0
c00155bf:	52                   	push   edx
c00155c0:	ff d0                	call   eax
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155c9:	74 15                	je     c00155e0 <setupInterruptController()+0xff>
c00155cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d0:	83 c0 04             	add    eax,0x4
c00155d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d5:	83 ec 0c             	sub    esp,0xc
c00155d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155db:	ff d0                	call   eax
c00155dd:	83 c4 10             	add    esp,0x10
c00155e0:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00155e7:	83 ec 0c             	sub    esp,0xc
c00155ea:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155ed:	e8 4e a2 ff ff       	call   c000f840 <malloc>
c00155f2:	83 c4 10             	add    esp,0x10
c00155f5:	89 c3                	mov    ebx,eax
c00155f7:	83 ec 0c             	sub    esp,0xc
c00155fa:	53                   	push   ebx
c00155fb:	e8 6c fe 00 00       	call   c002546c <APIC::APIC()>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015606:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015609:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560c:	8b 00                	mov    eax,DWORD PTR [eax]
c001560e:	83 c0 08             	add    eax,0x8
c0015611:	8b 00                	mov    eax,DWORD PTR [eax]
c0015613:	6a 00                	push   0x0
c0015615:	6a 00                	push   0x0
c0015617:	6a 00                	push   0x0
c0015619:	52                   	push   edx
c001561a:	ff d0                	call   eax
c001561c:	83 c4 10             	add    esp,0x10
c001561f:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0015624:	83 ec 08             	sub    esp,0x8
c0015627:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562a:	50                   	push   eax
c001562b:	e8 06 e9 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015636:	8b 00                	mov    eax,DWORD PTR [eax]
c0015638:	83 c0 24             	add    eax,0x24
c001563b:	8b 00                	mov    eax,DWORD PTR [eax]
c001563d:	6a 00                	push   0x0
c001563f:	68 94 4e 01 c0       	push   0xc0014e94
c0015644:	6a 00                	push   0x0
c0015646:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015649:	ff d0                	call   eax
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015651:	8b 00                	mov    eax,DWORD PTR [eax]
c0015653:	83 c0 24             	add    eax,0x24
c0015656:	8b 00                	mov    eax,DWORD PTR [eax]
c0015658:	6a 00                	push   0x0
c001565a:	68 94 4e 01 c0       	push   0xc0014e94
c001565f:	6a 01                	push   0x1
c0015661:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015664:	ff d0                	call   eax
c0015666:	83 c4 10             	add    esp,0x10
c0015669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566c:	8b 00                	mov    eax,DWORD PTR [eax]
c001566e:	83 c0 24             	add    eax,0x24
c0015671:	8b 00                	mov    eax,DWORD PTR [eax]
c0015673:	6a 00                	push   0x0
c0015675:	68 e3 47 01 c0       	push   0xc00147e3
c001567a:	6a 02                	push   0x2
c001567c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001567f:	ff d0                	call   eax
c0015681:	83 c4 10             	add    esp,0x10
c0015684:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015687:	8b 00                	mov    eax,DWORD PTR [eax]
c0015689:	83 c0 24             	add    eax,0x24
c001568c:	8b 00                	mov    eax,DWORD PTR [eax]
c001568e:	6a 00                	push   0x0
c0015690:	68 94 4e 01 c0       	push   0xc0014e94
c0015695:	6a 03                	push   0x3
c0015697:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001569a:	ff d0                	call   eax
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a4:	83 c0 24             	add    eax,0x24
c00156a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a9:	6a 00                	push   0x0
c00156ab:	68 94 4e 01 c0       	push   0xc0014e94
c00156b0:	6a 04                	push   0x4
c00156b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b5:	ff d0                	call   eax
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156bf:	83 c0 24             	add    eax,0x24
c00156c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c4:	6a 00                	push   0x0
c00156c6:	68 94 4e 01 c0       	push   0xc0014e94
c00156cb:	6a 05                	push   0x5
c00156cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d0:	ff d0                	call   eax
c00156d2:	83 c4 10             	add    esp,0x10
c00156d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156da:	83 c0 24             	add    eax,0x24
c00156dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156df:	6a 00                	push   0x0
c00156e1:	68 b3 4e 01 c0       	push   0xc0014eb3
c00156e6:	6a 06                	push   0x6
c00156e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156eb:	ff d0                	call   eax
c00156ed:	83 c4 10             	add    esp,0x10
c00156f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f5:	83 c0 24             	add    eax,0x24
c00156f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fa:	6a 00                	push   0x0
c00156fc:	68 15 4e 01 c0       	push   0xc0014e15
c0015701:	6a 07                	push   0x7
c0015703:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015706:	ff d0                	call   eax
c0015708:	83 c4 10             	add    esp,0x10
c001570b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001570e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015710:	83 c0 24             	add    eax,0x24
c0015713:	8b 00                	mov    eax,DWORD PTR [eax]
c0015715:	6a 00                	push   0x0
c0015717:	68 fe 45 01 c0       	push   0xc00145fe
c001571c:	6a 08                	push   0x8
c001571e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015721:	ff d0                	call   eax
c0015723:	83 c4 10             	add    esp,0x10
c0015726:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015729:	8b 00                	mov    eax,DWORD PTR [eax]
c001572b:	83 c0 24             	add    eax,0x24
c001572e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015730:	6a 00                	push   0x0
c0015732:	68 94 4e 01 c0       	push   0xc0014e94
c0015737:	6a 09                	push   0x9
c0015739:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001573c:	ff d0                	call   eax
c001573e:	83 c4 10             	add    esp,0x10
c0015741:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015744:	8b 00                	mov    eax,DWORD PTR [eax]
c0015746:	83 c0 24             	add    eax,0x24
c0015749:	8b 00                	mov    eax,DWORD PTR [eax]
c001574b:	6a 00                	push   0x0
c001574d:	68 94 4e 01 c0       	push   0xc0014e94
c0015752:	6a 0a                	push   0xa
c0015754:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015757:	ff d0                	call   eax
c0015759:	83 c4 10             	add    esp,0x10
c001575c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001575f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015761:	83 c0 24             	add    eax,0x24
c0015764:	8b 00                	mov    eax,DWORD PTR [eax]
c0015766:	6a 00                	push   0x0
c0015768:	68 94 4e 01 c0       	push   0xc0014e94
c001576d:	6a 0b                	push   0xb
c001576f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015772:	ff d0                	call   eax
c0015774:	83 c4 10             	add    esp,0x10
c0015777:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001577a:	8b 00                	mov    eax,DWORD PTR [eax]
c001577c:	83 c0 24             	add    eax,0x24
c001577f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015781:	6a 00                	push   0x0
c0015783:	68 94 4e 01 c0       	push   0xc0014e94
c0015788:	6a 0c                	push   0xc
c001578a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001578d:	ff d0                	call   eax
c001578f:	83 c4 10             	add    esp,0x10
c0015792:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015795:	8b 00                	mov    eax,DWORD PTR [eax]
c0015797:	83 c0 24             	add    eax,0x24
c001579a:	8b 00                	mov    eax,DWORD PTR [eax]
c001579c:	6a 00                	push   0x0
c001579e:	68 44 4e 01 c0       	push   0xc0014e44
c00157a3:	6a 0d                	push   0xd
c00157a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157a8:	ff d0                	call   eax
c00157aa:	83 c4 10             	add    esp,0x10
c00157ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b2:	83 c0 24             	add    eax,0x24
c00157b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b7:	6a 00                	push   0x0
c00157b9:	68 7d 4e 01 c0       	push   0xc0014e7d
c00157be:	6a 0e                	push   0xe
c00157c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157c3:	ff d0                	call   eax
c00157c5:	83 c4 10             	add    esp,0x10
c00157c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157cd:	83 c0 24             	add    eax,0x24
c00157d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d2:	6a 00                	push   0x0
c00157d4:	68 94 4e 01 c0       	push   0xc0014e94
c00157d9:	6a 0f                	push   0xf
c00157db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157de:	ff d0                	call   eax
c00157e0:	83 c4 10             	add    esp,0x10
c00157e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e8:	83 c0 24             	add    eax,0x24
c00157eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ed:	6a 00                	push   0x0
c00157ef:	68 94 4e 01 c0       	push   0xc0014e94
c00157f4:	6a 10                	push   0x10
c00157f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157f9:	ff d0                	call   eax
c00157fb:	83 c4 10             	add    esp,0x10
c00157fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015801:	8b 00                	mov    eax,DWORD PTR [eax]
c0015803:	83 c0 24             	add    eax,0x24
c0015806:	8b 00                	mov    eax,DWORD PTR [eax]
c0015808:	6a 00                	push   0x0
c001580a:	68 94 4e 01 c0       	push   0xc0014e94
c001580f:	6a 11                	push   0x11
c0015811:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015814:	ff d0                	call   eax
c0015816:	83 c4 10             	add    esp,0x10
c0015819:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001581c:	8b 00                	mov    eax,DWORD PTR [eax]
c001581e:	83 c0 24             	add    eax,0x24
c0015821:	8b 00                	mov    eax,DWORD PTR [eax]
c0015823:	6a 00                	push   0x0
c0015825:	68 94 4e 01 c0       	push   0xc0014e94
c001582a:	6a 12                	push   0x12
c001582c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001582f:	ff d0                	call   eax
c0015831:	83 c4 10             	add    esp,0x10
c0015834:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015837:	8b 00                	mov    eax,DWORD PTR [eax]
c0015839:	83 c0 24             	add    eax,0x24
c001583c:	8b 00                	mov    eax,DWORD PTR [eax]
c001583e:	6a 00                	push   0x0
c0015840:	68 94 4e 01 c0       	push   0xc0014e94
c0015845:	6a 13                	push   0x13
c0015847:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001584a:	ff d0                	call   eax
c001584c:	83 c4 10             	add    esp,0x10
c001584f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015852:	8b 00                	mov    eax,DWORD PTR [eax]
c0015854:	83 c0 24             	add    eax,0x24
c0015857:	8b 00                	mov    eax,DWORD PTR [eax]
c0015859:	6a 00                	push   0x0
c001585b:	68 94 4e 01 c0       	push   0xc0014e94
c0015860:	6a 14                	push   0x14
c0015862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015865:	ff d0                	call   eax
c0015867:	83 c4 10             	add    esp,0x10
c001586a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001586d:	8b 00                	mov    eax,DWORD PTR [eax]
c001586f:	83 c0 24             	add    eax,0x24
c0015872:	8b 00                	mov    eax,DWORD PTR [eax]
c0015874:	6a 00                	push   0x0
c0015876:	68 94 4e 01 c0       	push   0xc0014e94
c001587b:	6a 1e                	push   0x1e
c001587d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015880:	ff d0                	call   eax
c0015882:	83 c4 10             	add    esp,0x10
c0015885:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015888:	8b 00                	mov    eax,DWORD PTR [eax]
c001588a:	83 c0 24             	add    eax,0x24
c001588d:	8b 00                	mov    eax,DWORD PTR [eax]
c001588f:	6a 00                	push   0x0
c0015891:	68 4b c2 01 c0       	push   0xc001c24b
c0015896:	6a 60                	push   0x60
c0015898:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001589b:	ff d0                	call   eax
c001589d:	83 c4 10             	add    esp,0x10
c00158a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158a6:	c9                   	leave  
c00158a7:	c3                   	ret    

c00158a8 <InterruptController::convertLegacyIRQNumber(int)>:
c00158a8:	55                   	push   ebp
c00158a9:	89 e5                	mov    ebp,esp
c00158ab:	83 ec 08             	sub    esp,0x8
c00158ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b1:	83 ec 0c             	sub    esp,0xc
c00158b4:	50                   	push   eax
c00158b5:	e8 68 e9 ff ff       	call   c0014222 <Device::getName()>
c00158ba:	83 c4 10             	add    esp,0x10
c00158bd:	8a 00                	mov    al,BYTE PTR [eax]
c00158bf:	3c 41                	cmp    al,0x41
c00158c1:	0f 94 c0             	sete   al
c00158c4:	84 c0                	test   al,al
c00158c6:	74 28                	je     c00158f0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158c8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00158cc:	7f 12                	jg     c00158e0 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00158ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158d1:	05 40 d0 02 c0       	add    eax,0xc002d040
c00158d6:	8a 00                	mov    al,BYTE PTR [eax]
c00158d8:	0f b6 c0             	movzx  eax,al
c00158db:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00158de:	eb 10                	jmp    c00158f0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158e0:	83 ec 0c             	sub    esp,0xc
c00158e3:	68 60 a8 02 c0       	push   0xc002a860
c00158e8:	e8 9e 48 00 00       	call   c001a18b <Krnl::panic(char const*)>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158f3:	c9                   	leave  
c00158f4:	c3                   	ret    
c00158f5:	90                   	nop

c00158f6 <startGUI(void*)>:
c00158f6:	55                   	push   ebp
c00158f7:	89 e5                	mov    ebp,esp
c00158f9:	53                   	push   ebx
c00158fa:	83 ec 04             	sub    esp,0x4
c00158fd:	e8 86 7f 00 00       	call   c001d888 <unlockScheduler()>
c0015902:	8b 1d e8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde8
c0015908:	83 ec 08             	sub    esp,0x8
c001590b:	6a 01                	push   0x1
c001590d:	68 b0 ab 02 c0       	push   0xc002abb0
c0015912:	e8 c8 78 00 00       	call   c001d1df <Thr::loadDLL(char const*, bool)>
c0015917:	83 c4 10             	add    esp,0x10
c001591a:	83 ec 08             	sub    esp,0x8
c001591d:	53                   	push   ebx
c001591e:	50                   	push   eax
c001591f:	e8 ef 7a 00 00       	call   c001d413 <Thr::executeDLL(unsigned long, void*)>
c0015924:	83 c4 10             	add    esp,0x10
c0015927:	8b 1d e8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde8
c001592d:	83 ec 08             	sub    esp,0x8
c0015930:	6a 01                	push   0x1
c0015932:	68 ca ab 02 c0       	push   0xc002abca
c0015937:	e8 a3 78 00 00       	call   c001d1df <Thr::loadDLL(char const*, bool)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	83 ec 08             	sub    esp,0x8
c0015942:	53                   	push   ebx
c0015943:	50                   	push   eax
c0015944:	e8 ca 7a 00 00       	call   c001d413 <Thr::executeDLL(unsigned long, void*)>
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	90                   	nop
c001594d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015950:	c9                   	leave  
c0015951:	c3                   	ret    

c0015952 <startGUIVESA(void*)>:
c0015952:	55                   	push   ebp
c0015953:	89 e5                	mov    ebp,esp
c0015955:	53                   	push   ebx
c0015956:	83 ec 04             	sub    esp,0x4
c0015959:	e8 2a 7f 00 00       	call   c001d888 <unlockScheduler()>
c001595e:	8b 1d e8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde8
c0015964:	83 ec 08             	sub    esp,0x8
c0015967:	6a 01                	push   0x1
c0015969:	68 e4 ab 02 c0       	push   0xc002abe4
c001596e:	e8 6c 78 00 00       	call   c001d1df <Thr::loadDLL(char const*, bool)>
c0015973:	83 c4 10             	add    esp,0x10
c0015976:	83 ec 08             	sub    esp,0x8
c0015979:	53                   	push   ebx
c001597a:	50                   	push   eax
c001597b:	e8 93 7a 00 00       	call   c001d413 <Thr::executeDLL(unsigned long, void*)>
c0015980:	83 c4 10             	add    esp,0x10
c0015983:	8b 1d e8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde8
c0015989:	83 ec 08             	sub    esp,0x8
c001598c:	6a 01                	push   0x1
c001598e:	68 ca ab 02 c0       	push   0xc002abca
c0015993:	e8 47 78 00 00       	call   c001d1df <Thr::loadDLL(char const*, bool)>
c0015998:	83 c4 10             	add    esp,0x10
c001599b:	83 ec 08             	sub    esp,0x8
c001599e:	53                   	push   ebx
c001599f:	50                   	push   eax
c00159a0:	e8 6e 7a 00 00       	call   c001d413 <Thr::executeDLL(unsigned long, void*)>
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	90                   	nop
c00159a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159ac:	c9                   	leave  
c00159ad:	c3                   	ret    

c00159ae <sendKeyToTerminal(unsigned char)>:
c00159ae:	55                   	push   ebp
c00159af:	89 e5                	mov    ebp,esp
c00159b1:	83 ec 28             	sub    esp,0x28
c00159b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00159ba:	a1 c4 de 02 c0       	mov    eax,ds:0xc002dec4
c00159bf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00159c3:	83 ec 08             	sub    esp,0x8
c00159c6:	52                   	push   edx
c00159c7:	50                   	push   eax
c00159c8:	e8 21 b9 ff ff       	call   c00112ee <VgaText::receiveKey(unsigned char)>
c00159cd:	83 c4 10             	add    esp,0x10
c00159d0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00159d4:	75 41                	jne    c0015a17 <sendKeyToTerminal(unsigned char)+0x69>
c00159d6:	e8 d2 7e 00 00       	call   c001d8ad <lockStuff()>
c00159db:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c00159e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159e3:	c7 05 a0 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfa0,0x0
c00159ed:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159f1:	74 1f                	je     c0015a12 <sendKeyToTerminal(unsigned char)+0x64>
c00159f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00159f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159fc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00159ff:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a02:	83 ec 0c             	sub    esp,0xc
c0015a05:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a08:	e8 91 84 00 00       	call   c001de9e <unblockTask(ThreadControlBlock*)>
c0015a0d:	83 c4 10             	add    esp,0x10
c0015a10:	eb db                	jmp    c00159ed <sendKeyToTerminal(unsigned char)+0x3f>
c0015a12:	e8 30 82 00 00       	call   c001dc47 <unlockStuff()>
c0015a17:	90                   	nop
c0015a18:	c9                   	leave  
c0015a19:	c3                   	ret    

c0015a1a <sendKeyboardToken(KeyboardToken)>:
c0015a1a:	55                   	push   ebp
c0015a1b:	89 e5                	mov    ebp,esp
c0015a1d:	83 ec 18             	sub    esp,0x18
c0015a20:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a26:	0f b7 c0             	movzx  eax,ax
c0015a29:	83 f2 01             	xor    edx,0x1
c0015a2c:	88 90 c0 df 02 c0    	mov    BYTE PTR [eax-0x3ffd2040],dl
c0015a32:	a1 a8 df 02 c0       	mov    eax,ds:0xc002dfa8
c0015a37:	85 c0                	test   eax,eax
c0015a39:	74 24                	je     c0015a5f <sendKeyboardToken(KeyboardToken)+0x45>
c0015a3b:	8b 0d a8 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfa8
c0015a41:	83 ec 04             	sub    esp,0x4
c0015a44:	68 c0 df 02 c0       	push   0xc002dfc0
c0015a49:	83 ec 08             	sub    esp,0x8
c0015a4c:	89 e2                	mov    edx,esp
c0015a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a51:	89 02                	mov    DWORD PTR [edx],eax
c0015a53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a56:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015a5a:	ff d1                	call   ecx
c0015a5c:	83 c4 10             	add    esp,0x10
c0015a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a62:	66 3d 03 02          	cmp    ax,0x203
c0015a66:	75 07                	jne    c0015a6f <sendKeyboardToken(KeyboardToken)+0x55>
c0015a68:	a0 c0 e0 02 c0       	mov    al,ds:0xc002e0c0
c0015a6d:	84 c0                	test   al,al
c0015a6f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015a73:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015a76:	a0 c8 e3 02 c0       	mov    al,ds:0xc002e3c8
c0015a7b:	38 c2                	cmp    dl,al
c0015a7d:	74 1c                	je     c0015a9b <sendKeyboardToken(KeyboardToken)+0x81>
c0015a7f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015a82:	a2 c8 e3 02 c0       	mov    ds:0xc002e3c8,al
c0015a87:	a0 c8 e3 02 c0       	mov    al,ds:0xc002e3c8
c0015a8c:	0f b6 c0             	movzx  eax,al
c0015a8f:	83 ec 0c             	sub    esp,0xc
c0015a92:	50                   	push   eax
c0015a93:	e8 b6 aa ff ff       	call   c001054e <setTerminalScrollLock(bool)>
c0015a98:	83 c4 10             	add    esp,0x10
c0015a9b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015a9e:	84 c0                	test   al,al
c0015aa0:	0f 84 ae 00 00 00    	je     c0015b54 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa9:	66 3d 10 03          	cmp    ax,0x310
c0015aad:	75 06                	jne    c0015ab5 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015aaf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab8:	66 3d 11 03          	cmp    ax,0x311
c0015abc:	75 06                	jne    c0015ac4 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015abe:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac7:	66 3d 12 03          	cmp    ax,0x312
c0015acb:	75 06                	jne    c0015ad3 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015acd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad6:	66 3d 13 03          	cmp    ax,0x313
c0015ada:	75 06                	jne    c0015ae2 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015adc:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae5:	66 3d 14 03          	cmp    ax,0x314
c0015ae9:	75 06                	jne    c0015af1 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015aeb:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af4:	66 3d 15 03          	cmp    ax,0x315
c0015af8:	75 06                	jne    c0015b00 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015afa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b03:	66 3d 16 03          	cmp    ax,0x316
c0015b07:	75 06                	jne    c0015b0f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b09:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b12:	66 3d 17 03          	cmp    ax,0x317
c0015b16:	75 06                	jne    c0015b1e <sendKeyboardToken(KeyboardToken)+0x104>
c0015b18:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b21:	66 3d 18 03          	cmp    ax,0x318
c0015b25:	75 06                	jne    c0015b2d <sendKeyboardToken(KeyboardToken)+0x113>
c0015b27:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b30:	66 3d 19 03          	cmp    ax,0x319
c0015b34:	75 06                	jne    c0015b3c <sendKeyboardToken(KeyboardToken)+0x122>
c0015b36:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3f:	66 3d 1a 03          	cmp    ax,0x31a
c0015b43:	0f 85 c9 00 00 00    	jne    c0015c12 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b49:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b4f:	e9 be 00 00 00       	jmp    c0015c12 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b57:	66 3d 10 03          	cmp    ax,0x310
c0015b5b:	75 0a                	jne    c0015b67 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015b5d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015b63:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6a:	66 3d 11 03          	cmp    ax,0x311
c0015b6e:	75 0a                	jne    c0015b7a <sendKeyboardToken(KeyboardToken)+0x160>
c0015b70:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015b76:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7d:	66 3d 12 03          	cmp    ax,0x312
c0015b81:	75 0a                	jne    c0015b8d <sendKeyboardToken(KeyboardToken)+0x173>
c0015b83:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015b89:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b90:	66 3d 13 03          	cmp    ax,0x313
c0015b94:	75 0a                	jne    c0015ba0 <sendKeyboardToken(KeyboardToken)+0x186>
c0015b96:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015b9c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba3:	66 3d 14 03          	cmp    ax,0x314
c0015ba7:	75 0a                	jne    c0015bb3 <sendKeyboardToken(KeyboardToken)+0x199>
c0015ba9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015baf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb6:	66 3d 15 03          	cmp    ax,0x315
c0015bba:	75 0a                	jne    c0015bc6 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015bbc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015bc2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc9:	66 3d 16 03          	cmp    ax,0x316
c0015bcd:	75 0a                	jne    c0015bd9 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015bcf:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015bd5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdc:	66 3d 17 03          	cmp    ax,0x317
c0015be0:	75 0a                	jne    c0015bec <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015be2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015be8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bef:	66 3d 18 03          	cmp    ax,0x318
c0015bf3:	75 0a                	jne    c0015bff <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015bf5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015bfb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c02:	66 3d 19 03          	cmp    ax,0x319
c0015c06:	75 0a                	jne    c0015c12 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c08:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015c0e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c15:	66 3d 00 02          	cmp    ax,0x200
c0015c19:	75 2c                	jne    c0015c47 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c1b:	a0 c0 e3 02 c0       	mov    al,ds:0xc002e3c0
c0015c20:	83 f0 01             	xor    eax,0x1
c0015c23:	84 c0                	test   al,al
c0015c25:	74 20                	je     c0015c47 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c27:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0015c2c:	6a 01                	push   0x1
c0015c2e:	6a 00                	push   0x0
c0015c30:	68 f6 58 01 c0       	push   0xc00158f6
c0015c35:	50                   	push   eax
c0015c36:	e8 7d 7d 00 00       	call   c001d9b8 <Process::createThread(void (*)(void*), void*, int)>
c0015c3b:	83 c4 10             	add    esp,0x10
c0015c3e:	c6 05 c0 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3c0,0x1
c0015c45:	eb 33                	jmp    c0015c7a <sendKeyboardToken(KeyboardToken)+0x260>
c0015c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4a:	66 3d 01 02          	cmp    ax,0x201
c0015c4e:	75 2a                	jne    c0015c7a <sendKeyboardToken(KeyboardToken)+0x260>
c0015c50:	a0 c0 e3 02 c0       	mov    al,ds:0xc002e3c0
c0015c55:	83 f0 01             	xor    eax,0x1
c0015c58:	84 c0                	test   al,al
c0015c5a:	74 1e                	je     c0015c7a <sendKeyboardToken(KeyboardToken)+0x260>
c0015c5c:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0015c61:	6a 01                	push   0x1
c0015c63:	6a 00                	push   0x0
c0015c65:	68 52 59 01 c0       	push   0xc0015952
c0015c6a:	50                   	push   eax
c0015c6b:	e8 48 7d 00 00       	call   c001d9b8 <Process::createThread(void (*)(void*), void*, int)>
c0015c70:	83 c4 10             	add    esp,0x10
c0015c73:	c6 05 c0 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3c0,0x1
c0015c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7d:	66 3d 1d 03          	cmp    ax,0x31d
c0015c81:	75 06                	jne    c0015c89 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015c83:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8c:	66 3d 1c 03          	cmp    ax,0x31c
c0015c90:	75 06                	jne    c0015c98 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015c92:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9b:	66 3d 1b 03          	cmp    ax,0x31b
c0015c9f:	75 06                	jne    c0015ca7 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015ca1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015ca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015caa:	66 3d 1e 03          	cmp    ax,0x31e
c0015cae:	75 06                	jne    c0015cb6 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015cb0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb9:	66 3d 1f 03          	cmp    ax,0x31f
c0015cbd:	75 06                	jne    c0015cc5 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015cbf:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc8:	66 3d 1a 03          	cmp    ax,0x31a
c0015ccc:	75 06                	jne    c0015cd4 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015cce:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015cd4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015cd8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cdb:	83 f0 01             	xor    eax,0x1
c0015cde:	84 c0                	test   al,al
c0015ce0:	74 77                	je     c0015d59 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015ce2:	a0 c1 e0 02 c0       	mov    al,ds:0xc002e0c1
c0015ce7:	84 c0                	test   al,al
c0015ce9:	74 41                	je     c0015d2c <sendKeyboardToken(KeyboardToken)+0x312>
c0015ceb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015cef:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015cf3:	74 2b                	je     c0015d20 <sendKeyboardToken(KeyboardToken)+0x306>
c0015cf5:	8b 15 c4 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e3c4
c0015cfb:	89 d0                	mov    eax,edx
c0015cfd:	c1 e0 02             	shl    eax,0x2
c0015d00:	01 d0                	add    eax,edx
c0015d02:	01 c0                	add    eax,eax
c0015d04:	a3 c4 e3 02 c0       	mov    ds:0xc002e3c4,eax
c0015d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0c:	0f b7 c0             	movzx  eax,ax
c0015d0f:	8d 50 d0             	lea    edx,[eax-0x30]
c0015d12:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c0015d17:	01 d0                	add    eax,edx
c0015d19:	a3 c4 e3 02 c0       	mov    ds:0xc002e3c4,eax
c0015d1e:	eb 6d                	jmp    c0015d8d <sendKeyboardToken(KeyboardToken)+0x373>
c0015d20:	c7 05 c4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c4,0x0
c0015d2a:	eb 61                	jmp    c0015d8d <sendKeyboardToken(KeyboardToken)+0x373>
c0015d2c:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c0015d31:	85 c0                	test   eax,eax
c0015d33:	74 18                	je     c0015d4d <sendKeyboardToken(KeyboardToken)+0x333>
c0015d35:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c0015d3a:	0f b6 c0             	movzx  eax,al
c0015d3d:	83 ec 0c             	sub    esp,0xc
c0015d40:	50                   	push   eax
c0015d41:	e8 68 fc ff ff       	call   c00159ae <sendKeyToTerminal(unsigned char)>
c0015d46:	83 c4 10             	add    esp,0x10
c0015d49:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d4d:	c7 05 c4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c4,0x0
c0015d57:	eb 34                	jmp    c0015d8d <sendKeyboardToken(KeyboardToken)+0x373>
c0015d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d5c:	66 3d 01 01          	cmp    ax,0x101
c0015d60:	75 2b                	jne    c0015d8d <sendKeyboardToken(KeyboardToken)+0x373>
c0015d62:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c0015d67:	85 c0                	test   eax,eax
c0015d69:	74 18                	je     c0015d83 <sendKeyboardToken(KeyboardToken)+0x369>
c0015d6b:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c0015d70:	0f b6 c0             	movzx  eax,al
c0015d73:	83 ec 0c             	sub    esp,0xc
c0015d76:	50                   	push   eax
c0015d77:	e8 32 fc ff ff       	call   c00159ae <sendKeyToTerminal(unsigned char)>
c0015d7c:	83 c4 10             	add    esp,0x10
c0015d7f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d83:	c7 05 c4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c4,0x0
c0015d8d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d90:	83 f0 01             	xor    eax,0x1
c0015d93:	84 c0                	test   al,al
c0015d95:	74 4c                	je     c0015de3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015d97:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d9a:	83 f0 01             	xor    eax,0x1
c0015d9d:	84 c0                	test   al,al
c0015d9f:	74 42                	je     c0015de3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015da1:	a0 c0 e0 02 c0       	mov    al,ds:0xc002e0c0
c0015da6:	83 f0 01             	xor    eax,0x1
c0015da9:	84 c0                	test   al,al
c0015dab:	74 36                	je     c0015de3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015dad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db0:	66 83 f8 1f          	cmp    ax,0x1f
c0015db4:	76 09                	jbe    c0015dbf <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db9:	66 83 f8 7e          	cmp    ax,0x7e
c0015dbd:	76 12                	jbe    c0015dd1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc2:	66 83 f8 0a          	cmp    ax,0xa
c0015dc6:	74 09                	je     c0015dd1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dcb:	66 83 f8 08          	cmp    ax,0x8
c0015dcf:	75 12                	jne    c0015de3 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015dd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd4:	0f b6 c0             	movzx  eax,al
c0015dd7:	83 ec 0c             	sub    esp,0xc
c0015dda:	50                   	push   eax
c0015ddb:	e8 ce fb ff ff       	call   c00159ae <sendKeyToTerminal(unsigned char)>
c0015de0:	83 c4 10             	add    esp,0x10
c0015de3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015de6:	83 f0 01             	xor    eax,0x1
c0015de9:	84 c0                	test   al,al
c0015deb:	74 4f                	je     c0015e3c <sendKeyboardToken(KeyboardToken)+0x422>
c0015ded:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015df0:	83 f0 01             	xor    eax,0x1
c0015df3:	84 c0                	test   al,al
c0015df5:	74 45                	je     c0015e3c <sendKeyboardToken(KeyboardToken)+0x422>
c0015df7:	a0 c0 e0 02 c0       	mov    al,ds:0xc002e0c0
c0015dfc:	84 c0                	test   al,al
c0015dfe:	74 3c                	je     c0015e3c <sendKeyboardToken(KeyboardToken)+0x422>
c0015e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e03:	66 83 f8 3f          	cmp    ax,0x3f
c0015e07:	76 33                	jbe    c0015e3c <sendKeyboardToken(KeyboardToken)+0x422>
c0015e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0c:	66 83 f8 7f          	cmp    ax,0x7f
c0015e10:	77 2a                	ja     c0015e3c <sendKeyboardToken(KeyboardToken)+0x422>
c0015e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e15:	88 c2                	mov    dl,al
c0015e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1a:	66 83 f8 5f          	cmp    ax,0x5f
c0015e1e:	76 04                	jbe    c0015e24 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015e20:	b0 20                	mov    al,0x20
c0015e22:	eb 02                	jmp    c0015e26 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015e24:	b0 00                	mov    al,0x0
c0015e26:	29 c2                	sub    edx,eax
c0015e28:	88 d0                	mov    al,dl
c0015e2a:	83 e8 40             	sub    eax,0x40
c0015e2d:	0f b6 c0             	movzx  eax,al
c0015e30:	83 ec 0c             	sub    esp,0xc
c0015e33:	50                   	push   eax
c0015e34:	e8 75 fb ff ff       	call   c00159ae <sendKeyToTerminal(unsigned char)>
c0015e39:	83 c4 10             	add    esp,0x10
c0015e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3f:	66 3d 00 03          	cmp    ax,0x300
c0015e43:	75 0f                	jne    c0015e54 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e45:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e48:	83 f0 01             	xor    eax,0x1
c0015e4b:	84 c0                	test   al,al
c0015e4d:	74 05                	je     c0015e54 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e4f:	e8 2f af ff ff       	call   c0010d83 <doTerminalCycle()>
c0015e54:	90                   	nop
c0015e55:	c9                   	leave  
c0015e56:	c3                   	ret    

c0015e57 <clearInternalKeybuffer(VgaText*)>:
c0015e57:	55                   	push   ebp
c0015e58:	89 e5                	mov    ebp,esp
c0015e5a:	83 ec 08             	sub    esp,0x8
c0015e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e60:	05 34 11 00 00       	add    eax,0x1134
c0015e65:	83 ec 0c             	sub    esp,0xc
c0015e68:	50                   	push   eax
c0015e69:	e8 26 a9 fe ff       	call   c0000794 <strlen>
c0015e6e:	83 c4 10             	add    esp,0x10
c0015e71:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e74:	81 c2 34 11 00 00    	add    edx,0x1134
c0015e7a:	83 ec 04             	sub    esp,0x4
c0015e7d:	50                   	push   eax
c0015e7e:	6a 00                	push   0x0
c0015e80:	52                   	push   edx
c0015e81:	e8 f2 a8 fe ff       	call   c0000778 <memset>
c0015e86:	83 c4 10             	add    esp,0x10
c0015e89:	90                   	nop
c0015e8a:	c9                   	leave  
c0015e8b:	c3                   	ret    

c0015e8c <readKeyboard(VgaText*, char*, unsigned long)>:
c0015e8c:	55                   	push   ebp
c0015e8d:	89 e5                	mov    ebp,esp
c0015e8f:	83 ec 18             	sub    esp,0x18
c0015e92:	fb                   	sti    
c0015e93:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015e9a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015e9e:	0f 84 8a 00 00 00    	je     c0015f2e <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015ea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015ead:	84 c0                	test   al,al
c0015eaf:	75 11                	jne    c0015ec2 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015eb1:	e8 d0 79 00 00       	call   c001d886 <lockScheduler()>
c0015eb6:	e8 07 7d 00 00       	call   c001dbc2 <schedule()>
c0015ebb:	e8 c8 79 00 00       	call   c001d888 <unlockScheduler()>
c0015ec0:	eb e2                	jmp    c0015ea4 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015ec2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ec5:	8d 50 01             	lea    edx,[eax+0x1]
c0015ec8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015ecb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ece:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015ed4:	88 10                	mov    BYTE PTR [eax],dl
c0015ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015edf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee5:	05 34 11 00 00       	add    eax,0x1134
c0015eea:	83 ec 0c             	sub    esp,0xc
c0015eed:	50                   	push   eax
c0015eee:	e8 a1 a8 fe ff       	call   c0000794 <strlen>
c0015ef3:	83 c4 10             	add    esp,0x10
c0015ef6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ef9:	81 c2 34 11 00 00    	add    edx,0x1134
c0015eff:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015f02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f05:	81 c2 34 11 00 00    	add    edx,0x1134
c0015f0b:	83 ec 04             	sub    esp,0x4
c0015f0e:	50                   	push   eax
c0015f0f:	51                   	push   ecx
c0015f10:	52                   	push   edx
c0015f11:	e8 66 a7 fe ff       	call   c000067c <memmove>
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015f1c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015f1f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015f23:	0f 85 71 ff ff ff    	jne    c0015e9a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015f29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f2c:	eb 03                	jmp    c0015f31 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015f2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f31:	c9                   	leave  
c0015f32:	c3                   	ret    
c0015f33:	90                   	nop

c0015f34 <Keyboard::Keyboard(char const*)>:
c0015f34:	83 ec 0c             	sub    esp,0xc
c0015f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f3b:	83 ec 08             	sub    esp,0x8
c0015f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f42:	50                   	push   eax
c0015f43:	e8 de e1 ff ff       	call   c0014126 <Device::Device(char const*)>
c0015f48:	83 c4 10             	add    esp,0x10
c0015f4b:	ba 08 ac 02 c0       	mov    edx,0xc002ac08
c0015f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f54:	89 10                	mov    DWORD PTR [eax],edx
c0015f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f5a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015f64:	c6 05 a4 df 02 c0 01 	mov    BYTE PTR ds:0xc002dfa4,0x1
c0015f6b:	90                   	nop
c0015f6c:	83 c4 0c             	add    esp,0xc
c0015f6f:	c3                   	ret    

c0015f70 <Keyboard::~Keyboard()>:
c0015f70:	83 ec 0c             	sub    esp,0xc
c0015f73:	ba 08 ac 02 c0       	mov    edx,0xc002ac08
c0015f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f7c:	89 10                	mov    DWORD PTR [eax],edx
c0015f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f82:	83 ec 0c             	sub    esp,0xc
c0015f85:	50                   	push   eax
c0015f86:	e8 7d de ff ff       	call   c0013e08 <Device::~Device()>
c0015f8b:	83 c4 10             	add    esp,0x10
c0015f8e:	90                   	nop
c0015f8f:	83 c4 0c             	add    esp,0xc
c0015f92:	c3                   	ret    
c0015f93:	90                   	nop

c0015f94 <Keyboard::~Keyboard()>:
c0015f94:	83 ec 0c             	sub    esp,0xc
c0015f97:	83 ec 0c             	sub    esp,0xc
c0015f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f9e:	e8 cd ff ff ff       	call   c0015f70 <Keyboard::~Keyboard()>
c0015fa3:	83 c4 10             	add    esp,0x10
c0015fa6:	83 ec 08             	sub    esp,0x8
c0015fa9:	68 5c 01 00 00       	push   0x15c
c0015fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fb2:	e8 78 ca ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0015fb7:	83 c4 10             	add    esp,0x10
c0015fba:	83 c4 0c             	add    esp,0xc
c0015fbd:	c3                   	ret    

c0015fbe <LogicalDisk::close(int, int, void*)>:
c0015fbe:	83 c8 ff             	or     eax,0xffffffff
c0015fc1:	c3                   	ret    

c0015fc2 <LogicalDisk::~LogicalDisk()>:
c0015fc2:	83 ec 0c             	sub    esp,0xc
c0015fc5:	ba b8 ac 02 c0       	mov    edx,0xc002acb8
c0015fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fce:	89 10                	mov    DWORD PTR [eax],edx
c0015fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fd4:	83 ec 0c             	sub    esp,0xc
c0015fd7:	50                   	push   eax
c0015fd8:	e8 2b de ff ff       	call   c0013e08 <Device::~Device()>
c0015fdd:	83 c4 10             	add    esp,0x10
c0015fe0:	90                   	nop
c0015fe1:	83 c4 0c             	add    esp,0xc
c0015fe4:	c3                   	ret    
c0015fe5:	90                   	nop

c0015fe6 <LogicalDisk::~LogicalDisk()>:
c0015fe6:	83 ec 0c             	sub    esp,0xc
c0015fe9:	83 ec 0c             	sub    esp,0xc
c0015fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ff0:	e8 cd ff ff ff       	call   c0015fc2 <LogicalDisk::~LogicalDisk()>
c0015ff5:	83 c4 10             	add    esp,0x10
c0015ff8:	83 ec 08             	sub    esp,0x8
c0015ffb:	68 74 01 00 00       	push   0x174
c0016000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016004:	e8 26 ca ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0016009:	83 c4 10             	add    esp,0x10
c001600c:	83 c4 0c             	add    esp,0xc
c001600f:	c3                   	ret    

c0016010 <LogicalDisk::open(int, int, void*)>:
c0016010:	83 ec 18             	sub    esp,0x18
c0016013:	68 34 ac 02 c0       	push   0xc002ac34
c0016018:	e8 6e 41 00 00       	call   c001a18b <Krnl::panic(char const*)>
c001601d:	83 c8 ff             	or     eax,0xffffffff
c0016020:	83 c4 1c             	add    esp,0x1c
c0016023:	c3                   	ret    

c0016024 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016024:	53                   	push   ebx
c0016025:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001602d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016031:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016037:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001603d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016043:	77 10                	ja     c0016055 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016045:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001604b:	89 d3                	mov    ebx,edx
c001604d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016053:	72 05                	jb     c001605a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016055:	83 c8 ff             	or     eax,0xffffffff
c0016058:	89 c2                	mov    edx,eax
c001605a:	5b                   	pop    ebx
c001605b:	c3                   	ret    

c001605c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001605c:	56                   	push   esi
c001605d:	83 c8 ff             	or     eax,0xffffffff
c0016060:	53                   	push   ebx
c0016061:	89 c2                	mov    edx,eax
c0016063:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016067:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001606b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001606f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016075:	77 27                	ja     c001609e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016077:	89 d8                	mov    eax,ebx
c0016079:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001607f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016085:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001608a:	89 c2                	mov    edx,eax
c001608c:	73 10                	jae    c001609e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001608e:	89 c8                	mov    eax,ecx
c0016090:	89 da                	mov    edx,ebx
c0016092:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016098:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001609e:	5b                   	pop    ebx
c001609f:	5e                   	pop    esi
c00160a0:	c3                   	ret    
c00160a1:	90                   	nop

c00160a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00160a2:	83 ec 1c             	sub    esp,0x1c
c00160a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00160a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00160ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00160b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00160bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160c8:	83 ec 08             	sub    esp,0x8
c00160cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160cf:	50                   	push   eax
c00160d0:	e8 51 e0 ff ff       	call   c0014126 <Device::Device(char const*)>
c00160d5:	83 c4 10             	add    esp,0x10
c00160d8:	ba b8 ac 02 c0       	mov    edx,0xc002acb8
c00160dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160e1:	89 10                	mov    DWORD PTR [eax],edx
c00160e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160e7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160f2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160fd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016107:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001610b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001610f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016113:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016119:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001611f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016123:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016126:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001612a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016130:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001613a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001613e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016148:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016152:	90                   	nop
c0016153:	83 c4 1c             	add    esp,0x1c
c0016156:	c3                   	ret    
c0016157:	90                   	nop

c0016158 <LogicalDisk::assignDriveLetter()>:
c0016158:	55                   	push   ebp
c0016159:	57                   	push   edi
c001615a:	56                   	push   esi
c001615b:	53                   	push   ebx
c001615c:	83 ec 14             	sub    esp,0x14
c001615f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016163:	8b 3d e0 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e3e0
c0016169:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001616f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016173:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016179:	8b 3d e4 e3 02 c0    	mov    edi,DWORD PTR ds:0xc002e3e4
c001617f:	3c 01                	cmp    al,0x1
c0016181:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016185:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016189:	19 c0                	sbb    eax,eax
c001618b:	83 e0 02             	and    eax,0x2
c001618e:	83 c0 41             	add    eax,0x41
c0016191:	0f be e8             	movsx  ebp,al
c0016194:	3c 43                	cmp    al,0x43
c0016196:	75 10                	jne    c00161a8 <LogicalDisk::assignDriveLetter()+0x50>
c0016198:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001619f:	75 5d                	jne    c00161fe <LogicalDisk::assignDriveLetter()+0xa6>
c00161a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00161a6:	75 56                	jne    c00161fe <LogicalDisk::assignDriveLetter()+0xa6>
c00161a8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00161ab:	ba 01 00 00 00       	mov    edx,0x1
c00161b0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00161b4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00161b8:	d3 e2                	shl    edx,cl
c00161ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161be:	89 d7                	mov    edi,edx
c00161c0:	89 d6                	mov    esi,edx
c00161c2:	c1 ff 1f             	sar    edi,0x1f
c00161c5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00161c9:	21 f9                	and    ecx,edi
c00161cb:	09 d1                	or     ecx,edx
c00161cd:	75 2f                	jne    c00161fe <LogicalDisk::assignDriveLetter()+0xa6>
c00161cf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00161d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00161d7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00161dd:	09 f2                	or     edx,esi
c00161df:	89 15 e0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e0,edx
c00161e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161e9:	09 fa                	or     edx,edi
c00161eb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00161ef:	89 15 e4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e4,edx
c00161f5:	89 1c bd 00 e4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1c00],ebx
c00161fc:	eb 08                	jmp    c0016206 <LogicalDisk::assignDriveLetter()+0xae>
c00161fe:	45                   	inc    ebp
c00161ff:	40                   	inc    eax
c0016200:	3c 5b                	cmp    al,0x5b
c0016202:	75 90                	jne    c0016194 <LogicalDisk::assignDriveLetter()+0x3c>
c0016204:	31 c0                	xor    eax,eax
c0016206:	83 c4 14             	add    esp,0x14
c0016209:	5b                   	pop    ebx
c001620a:	5e                   	pop    esi
c001620b:	5f                   	pop    edi
c001620c:	5d                   	pop    ebp
c001620d:	c3                   	ret    

c001620e <LogicalDisk::mount()>:
c001620e:	56                   	push   esi
c001620f:	53                   	push   ebx
c0016210:	51                   	push   ecx
c0016211:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016215:	8b 1d 68 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df68
c001621b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016225:	85 db                	test   ebx,ebx
c0016227:	74 50                	je     c0016279 <LogicalDisk::mount()+0x6b>
c0016229:	e8 43 76 00 00       	call   c001d871 <getIRQNestingLevel()>
c001622e:	52                   	push   edx
c001622f:	52                   	push   edx
c0016230:	50                   	push   eax
c0016231:	68 58 ac 02 c0       	push   0xc002ac58
c0016236:	e8 d4 c8 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001623b:	83 c4 0c             	add    esp,0xc
c001623e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016245:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016247:	83 e8 41             	sub    eax,0x41
c001624a:	50                   	push   eax
c001624b:	56                   	push   esi
c001624c:	53                   	push   ebx
c001624d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	84 c0                	test   al,al
c0016255:	74 08                	je     c001625f <LogicalDisk::mount()+0x51>
c0016257:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001625d:	eb 1c                	jmp    c001627b <LogicalDisk::mount()+0x6d>
c001625f:	e8 0d 76 00 00       	call   c001d871 <getIRQNestingLevel()>
c0016264:	51                   	push   ecx
c0016265:	51                   	push   ecx
c0016266:	50                   	push   eax
c0016267:	68 73 ac 02 c0       	push   0xc002ac73
c001626c:	e8 9e c8 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0016271:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016274:	83 c4 10             	add    esp,0x10
c0016277:	eb ac                	jmp    c0016225 <LogicalDisk::mount()+0x17>
c0016279:	31 c0                	xor    eax,eax
c001627b:	5a                   	pop    edx
c001627c:	5b                   	pop    ebx
c001627d:	5e                   	pop    esi
c001627e:	c3                   	ret    
c001627f:	90                   	nop

c0016280 <LogicalDisk::unmount()>:
c0016280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016284:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001628e:	c3                   	ret    
c001628f:	90                   	nop

c0016290 <LogicalDisk::eject()>:
c0016290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016294:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001629a:	8b 10                	mov    edx,DWORD PTR [eax]
c001629c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162a0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00162a3:	90                   	nop

c00162a4 <LogicalDisk::unassignDriveLetter()>:
c00162a4:	57                   	push   edi
c00162a5:	56                   	push   esi
c00162a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162aa:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00162b1:	84 c9                	test   cl,cl
c00162b3:	75 0f                	jne    c00162c4 <LogicalDisk::unassignDriveLetter()+0x20>
c00162b5:	c7 44 24 0c 8e ac 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ac8e
c00162bd:	5e                   	pop    esi
c00162be:	5f                   	pop    edi
c00162bf:	e9 c7 3e 00 00       	jmp    c001a18b <Krnl::panic(char const*)>
c00162c4:	83 e9 41             	sub    ecx,0x41
c00162c7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00162ce:	b8 01 00 00 00       	mov    eax,0x1
c00162d3:	c7 04 8d 00 e4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1c00],0x0
c00162de:	d3 e0                	shl    eax,cl
c00162e0:	89 c7                	mov    edi,eax
c00162e2:	f7 d0                	not    eax
c00162e4:	c1 ff 1f             	sar    edi,0x1f
c00162e7:	21 05 e0 e3 02 c0    	and    DWORD PTR ds:0xc002e3e0,eax
c00162ed:	89 fe                	mov    esi,edi
c00162ef:	f7 d6                	not    esi
c00162f1:	21 35 e4 e3 02 c0    	and    DWORD PTR ds:0xc002e3e4,esi
c00162f7:	5e                   	pop    esi
c00162f8:	5f                   	pop    edi
c00162f9:	c3                   	ret    

c00162fa <LogicalDisk::read(unsigned long long, int, void*)>:
c00162fa:	57                   	push   edi
c00162fb:	56                   	push   esi
c00162fc:	53                   	push   ebx
c00162fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016301:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016305:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016309:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001630d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016313:	77 41                	ja     c0016356 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016315:	99                   	cdq    
c0016316:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001631c:	01 c8                	add    eax,ecx
c001631e:	11 da                	adc    edx,ebx
c0016320:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016326:	19 d7                	sbb    edi,edx
c0016328:	72 33                	jb     c001635d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001632a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016330:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016336:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001633a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001633e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016344:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001634a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001634e:	5b                   	pop    ebx
c001634f:	5e                   	pop    esi
c0016350:	5f                   	pop    edi
c0016351:	e9 b0 0a 00 00       	jmp    c0016e06 <VCache::read(unsigned long long, int, void*)>
c0016356:	b8 05 00 00 00       	mov    eax,0x5
c001635b:	eb 05                	jmp    c0016362 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001635d:	b8 07 00 00 00       	mov    eax,0x7
c0016362:	5b                   	pop    ebx
c0016363:	5e                   	pop    esi
c0016364:	5f                   	pop    edi
c0016365:	c3                   	ret    

c0016366 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016366:	57                   	push   edi
c0016367:	56                   	push   esi
c0016368:	53                   	push   ebx
c0016369:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001636d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016371:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016375:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016379:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001637f:	77 41                	ja     c00163c2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016381:	99                   	cdq    
c0016382:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016388:	01 c8                	add    eax,ecx
c001638a:	11 da                	adc    edx,ebx
c001638c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016392:	19 d7                	sbb    edi,edx
c0016394:	72 33                	jb     c00163c9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016396:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001639c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00163a2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00163a6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00163aa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163ba:	5b                   	pop    ebx
c00163bb:	5e                   	pop    esi
c00163bc:	5f                   	pop    edi
c00163bd:	e9 4e 09 00 00       	jmp    c0016d10 <VCache::write(unsigned long long, int, void*)>
c00163c2:	b8 05 00 00 00       	mov    eax,0x5
c00163c7:	eb 05                	jmp    c00163ce <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00163c9:	b8 07 00 00 00       	mov    eax,0x7
c00163ce:	5b                   	pop    ebx
c00163cf:	5e                   	pop    esi
c00163d0:	5f                   	pop    edi
c00163d1:	c3                   	ret    

c00163d2 <Mouse::Mouse(char const*)>:
c00163d2:	83 ec 0c             	sub    esp,0xc
c00163d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d9:	83 ec 08             	sub    esp,0x8
c00163dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e0:	50                   	push   eax
c00163e1:	e8 40 dd ff ff       	call   c0014126 <Device::Device(char const*)>
c00163e6:	83 c4 10             	add    esp,0x10
c00163e9:	ba e4 ac 02 c0       	mov    edx,0xc002ace4
c00163ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f2:	89 10                	mov    DWORD PTR [eax],edx
c00163f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f8:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016402:	90                   	nop
c0016403:	83 c4 0c             	add    esp,0xc
c0016406:	c3                   	ret    
c0016407:	90                   	nop

c0016408 <Mouse::~Mouse()>:
c0016408:	83 ec 0c             	sub    esp,0xc
c001640b:	ba e4 ac 02 c0       	mov    edx,0xc002ace4
c0016410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016414:	89 10                	mov    DWORD PTR [eax],edx
c0016416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641a:	83 ec 0c             	sub    esp,0xc
c001641d:	50                   	push   eax
c001641e:	e8 e5 d9 ff ff       	call   c0013e08 <Device::~Device()>
c0016423:	83 c4 10             	add    esp,0x10
c0016426:	90                   	nop
c0016427:	83 c4 0c             	add    esp,0xc
c001642a:	c3                   	ret    
c001642b:	90                   	nop

c001642c <Mouse::~Mouse()>:
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	83 ec 0c             	sub    esp,0xc
c0016432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016436:	e8 cd ff ff ff       	call   c0016408 <Mouse::~Mouse()>
c001643b:	83 c4 10             	add    esp,0x10
c001643e:	83 ec 08             	sub    esp,0x8
c0016441:	68 58 01 00 00       	push   0x158
c0016446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644a:	e8 e0 c5 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	83 c4 0c             	add    esp,0xc
c0016455:	c3                   	ret    

c0016456 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016456:	55                   	push   ebp
c0016457:	57                   	push   edi
c0016458:	56                   	push   esi
c0016459:	53                   	push   ebx
c001645a:	81 ec 28 01 00 00    	sub    esp,0x128
c0016460:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016467:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001646e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016475:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001647c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016480:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016484:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001648b:	e8 92 dd ff ff       	call   c0014222 <Device::getName()>
c0016490:	5a                   	pop    edx
c0016491:	59                   	pop    ecx
c0016492:	50                   	push   eax
c0016493:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016497:	55                   	push   ebp
c0016498:	e8 97 a3 fe ff       	call   c0000834 <strcpy>
c001649d:	5b                   	pop    ebx
c001649e:	58                   	pop    eax
c001649f:	68 08 ad 02 c0       	push   0xc002ad08
c00164a4:	55                   	push   ebp
c00164a5:	e8 ca a4 fe ff       	call   c0000974 <strcat>
c00164aa:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00164b1:	e8 8a 93 ff ff       	call   c000f840 <malloc>
c00164b6:	83 c4 0c             	add    esp,0xc
c00164b9:	89 c3                	mov    ebx,eax
c00164bb:	57                   	push   edi
c00164bc:	56                   	push   esi
c00164bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164c5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00164cc:	55                   	push   ebp
c00164cd:	50                   	push   eax
c00164ce:	e8 cf fb ff ff       	call   c00160a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00164d3:	83 c4 14             	add    esp,0x14
c00164d6:	53                   	push   ebx
c00164d7:	e8 7c fc ff ff       	call   c0016158 <LogicalDisk::assignDriveLetter()>
c00164dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164df:	89 c6                	mov    esi,eax
c00164e1:	e8 28 fd ff ff       	call   c001620e <LogicalDisk::mount()>
c00164e6:	58                   	pop    eax
c00164e7:	5a                   	pop    edx
c00164e8:	53                   	push   ebx
c00164e9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164f0:	e8 41 da ff ff       	call   c0013f36 <Device::addChild(Device*)>
c00164f5:	59                   	pop    ecx
c00164f6:	89 f0                	mov    eax,esi
c00164f8:	5b                   	pop    ebx
c00164f9:	0f be f0             	movsx  esi,al
c00164fc:	56                   	push   esi
c00164fd:	68 13 ad 02 c0       	push   0xc002ad13
c0016502:	e8 08 c6 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0016507:	81 c4 2c 01 00 00    	add    esp,0x12c
c001650d:	5b                   	pop    ebx
c001650e:	5e                   	pop    esi
c001650f:	5f                   	pop    edi
c0016510:	5d                   	pop    ebp
c0016511:	c3                   	ret    

c0016512 <createPartitionsForDisk(PhysicalDisk*)>:
c0016512:	55                   	push   ebp
c0016513:	57                   	push   edi
c0016514:	56                   	push   esi
c0016515:	53                   	push   ebx
c0016516:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001651c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016523:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016529:	3d 00 02 00 00       	cmp    eax,0x200
c001652e:	74 27                	je     c0016557 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016530:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016536:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001653c:	83 ec 10             	sub    esp,0x10
c001653f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016543:	99                   	cdq    
c0016544:	c1 e6 0a             	shl    esi,0xa
c0016547:	52                   	push   edx
c0016548:	89 fd                	mov    ebp,edi
c001654a:	50                   	push   eax
c001654b:	55                   	push   ebp
c001654c:	56                   	push   esi
c001654d:	e8 9a ff 00 00       	call   c00264ec <__udivdi3>
c0016552:	e9 b1 00 00 00       	jmp    c0016608 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016557:	83 ec 0c             	sub    esp,0xc
c001655a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001655c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016560:	56                   	push   esi
c0016561:	6a 01                	push   0x1
c0016563:	6a 00                	push   0x0
c0016565:	6a 00                	push   0x0
c0016567:	53                   	push   ebx
c0016568:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001656b:	83 c4 20             	add    esp,0x20
c001656e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016576:	75 0a                	jne    c0016582 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016578:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016580:	74 2c                	je     c00165ae <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016582:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016588:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001658e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016594:	83 ec 10             	sub    esp,0x10
c0016597:	0f a4 c2 0a          	shld   edx,eax,0xa
c001659b:	89 f7                	mov    edi,esi
c001659d:	c1 e0 0a             	shl    eax,0xa
c00165a0:	c1 ff 1f             	sar    edi,0x1f
c00165a3:	57                   	push   edi
c00165a4:	56                   	push   esi
c00165a5:	52                   	push   edx
c00165a6:	50                   	push   eax
c00165a7:	e8 40 ff 00 00       	call   c00264ec <__udivdi3>
c00165ac:	eb 5a                	jmp    c0016608 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165ae:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00165b5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00165bc:	83 e1 7f             	and    ecx,0x7f
c00165bf:	83 e0 7f             	and    eax,0x7f
c00165c2:	01 c1                	add    ecx,eax
c00165c4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00165cb:	83 e0 7f             	and    eax,0x7f
c00165ce:	01 c1                	add    ecx,eax
c00165d0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00165d7:	83 e0 7f             	and    eax,0x7f
c00165da:	00 c1                	add    cl,al
c00165dc:	74 41                	je     c001661f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00165de:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165e4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165ea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165f0:	83 ec 10             	sub    esp,0x10
c00165f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165f7:	89 f7                	mov    edi,esi
c00165f9:	c1 e0 0a             	shl    eax,0xa
c00165fc:	c1 ff 1f             	sar    edi,0x1f
c00165ff:	57                   	push   edi
c0016600:	56                   	push   esi
c0016601:	52                   	push   edx
c0016602:	50                   	push   eax
c0016603:	e8 e4 fe 00 00       	call   c00264ec <__udivdi3>
c0016608:	83 c4 14             	add    esp,0x14
c001660b:	52                   	push   edx
c001660c:	50                   	push   eax
c001660d:	6a 00                	push   0x0
c001660f:	6a 00                	push   0x0
c0016611:	53                   	push   ebx
c0016612:	e8 3f fe ff ff       	call   c0016456 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016617:	83 c4 20             	add    esp,0x20
c001661a:	e9 79 01 00 00       	jmp    c0016798 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001661f:	89 f0                	mov    eax,esi
c0016621:	31 f6                	xor    esi,esi
c0016623:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001662a:	75 02                	jne    c001662e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001662c:	89 f1                	mov    ecx,esi
c001662e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016635:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001663c:	c1 e2 08             	shl    edx,0x8
c001663f:	c1 e7 10             	shl    edi,0x10
c0016642:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001664a:	09 fa                	or     edx,edi
c001664c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016654:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001665b:	83 c0 10             	add    eax,0x10
c001665e:	09 fa                	or     edx,edi
c0016660:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016667:	c1 e7 18             	shl    edi,0x18
c001666a:	09 fa                	or     edx,edi
c001666c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016673:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016677:	c1 e7 10             	shl    edi,0x10
c001667a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016681:	c1 e2 08             	shl    edx,0x8
c0016684:	09 fa                	or     edx,edi
c0016686:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001668d:	09 fa                	or     edx,edi
c001668f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016696:	c1 e7 18             	shl    edi,0x18
c0016699:	09 fa                	or     edx,edi
c001669b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001669f:	46                   	inc    esi
c00166a0:	83 fe 04             	cmp    esi,0x4
c00166a3:	0f 85 7a ff ff ff    	jne    c0016623 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00166a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ad:	83 f0 01             	xor    eax,0x1
c00166b0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00166b4:	75 57                	jne    c001670d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00166b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166ba:	83 f0 01             	xor    eax,0x1
c00166bd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00166c1:	75 4a                	jne    c001670d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00166c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00166c7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00166cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166d7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00166dd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00166e3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00166e9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166ed:	89 f7                	mov    edi,esi
c00166ef:	c1 e0 0a             	shl    eax,0xa
c00166f2:	c1 ff 1f             	sar    edi,0x1f
c00166f5:	57                   	push   edi
c00166f6:	56                   	push   esi
c00166f7:	52                   	push   edx
c00166f8:	50                   	push   eax
c00166f9:	e8 ee fd 00 00       	call   c00264ec <__udivdi3>
c00166fe:	83 c4 10             	add    esp,0x10
c0016701:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016705:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016709:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001670d:	84 c9                	test   cl,cl
c001670f:	74 53                	je     c0016764 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016711:	0f b6 c9             	movzx  ecx,cl
c0016714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016718:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001671c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016720:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016724:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001672c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016730:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001673c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016744:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016748:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001674c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016750:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016754:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016758:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001675c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016760:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016764:	31 ed                	xor    ebp,ebp
c0016766:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001676a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001676e:	89 f8                	mov    eax,edi
c0016770:	09 f0                	or     eax,esi
c0016772:	74 1e                	je     c0016792 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016774:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016778:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001677c:	89 d1                	mov    ecx,edx
c001677e:	09 c1                	or     ecx,eax
c0016780:	74 10                	je     c0016792 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016782:	83 ec 0c             	sub    esp,0xc
c0016785:	57                   	push   edi
c0016786:	56                   	push   esi
c0016787:	52                   	push   edx
c0016788:	50                   	push   eax
c0016789:	53                   	push   ebx
c001678a:	e8 c7 fc ff ff       	call   c0016456 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001678f:	83 c4 20             	add    esp,0x20
c0016792:	45                   	inc    ebp
c0016793:	83 fd 04             	cmp    ebp,0x4
c0016796:	75 ce                	jne    c0016766 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016798:	81 c4 5c 02 00 00    	add    esp,0x25c
c001679e:	5b                   	pop    ebx
c001679f:	5e                   	pop    esi
c00167a0:	5f                   	pop    edi
c00167a1:	5d                   	pop    ebp
c00167a2:	c3                   	ret    
c00167a3:	90                   	nop

c00167a4 <Serial::Serial(char const*)>:
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ab:	83 ec 08             	sub    esp,0x8
c00167ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167b2:	50                   	push   eax
c00167b3:	e8 6e d9 ff ff       	call   c0014126 <Device::Device(char const*)>
c00167b8:	83 c4 10             	add    esp,0x10
c00167bb:	ba 40 ad 02 c0       	mov    edx,0xc002ad40
c00167c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c4:	89 10                	mov    DWORD PTR [eax],edx
c00167c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ca:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00167d4:	90                   	nop
c00167d5:	83 c4 0c             	add    esp,0xc
c00167d8:	c3                   	ret    
c00167d9:	90                   	nop

c00167da <Serial::~Serial()>:
c00167da:	83 ec 0c             	sub    esp,0xc
c00167dd:	ba 40 ad 02 c0       	mov    edx,0xc002ad40
c00167e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e6:	89 10                	mov    DWORD PTR [eax],edx
c00167e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ec:	83 ec 0c             	sub    esp,0xc
c00167ef:	50                   	push   eax
c00167f0:	e8 13 d6 ff ff       	call   c0013e08 <Device::~Device()>
c00167f5:	83 c4 10             	add    esp,0x10
c00167f8:	90                   	nop
c00167f9:	83 c4 0c             	add    esp,0xc
c00167fc:	c3                   	ret    
c00167fd:	90                   	nop

c00167fe <Serial::~Serial()>:
c00167fe:	83 ec 0c             	sub    esp,0xc
c0016801:	83 ec 0c             	sub    esp,0xc
c0016804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016808:	e8 cd ff ff ff       	call   c00167da <Serial::~Serial()>
c001680d:	83 c4 10             	add    esp,0x10
c0016810:	83 ec 08             	sub    esp,0x8
c0016813:	68 58 01 00 00       	push   0x158
c0016818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001681c:	e8 0e c2 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0016821:	83 c4 10             	add    esp,0x10
c0016824:	83 c4 0c             	add    esp,0xc
c0016827:	c3                   	ret    

c0016828 <Timer::Timer(char const*)>:
c0016828:	83 ec 0c             	sub    esp,0xc
c001682b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001682f:	83 ec 08             	sub    esp,0x8
c0016832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016836:	50                   	push   eax
c0016837:	e8 ea d8 ff ff       	call   c0014126 <Device::Device(char const*)>
c001683c:	83 c4 10             	add    esp,0x10
c001683f:	ba 84 ad 02 c0       	mov    edx,0xc002ad84
c0016844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016848:	89 10                	mov    DWORD PTR [eax],edx
c001684a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016858:	90                   	nop
c0016859:	83 c4 0c             	add    esp,0xc
c001685c:	c3                   	ret    
c001685d:	90                   	nop

c001685e <Timer::~Timer()>:
c001685e:	83 ec 0c             	sub    esp,0xc
c0016861:	ba 84 ad 02 c0       	mov    edx,0xc002ad84
c0016866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686a:	89 10                	mov    DWORD PTR [eax],edx
c001686c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016870:	83 ec 0c             	sub    esp,0xc
c0016873:	50                   	push   eax
c0016874:	e8 8f d5 ff ff       	call   c0013e08 <Device::~Device()>
c0016879:	83 c4 10             	add    esp,0x10
c001687c:	90                   	nop
c001687d:	83 c4 0c             	add    esp,0xc
c0016880:	c3                   	ret    
c0016881:	90                   	nop

c0016882 <Timer::~Timer()>:
c0016882:	83 ec 0c             	sub    esp,0xc
c0016885:	83 ec 0c             	sub    esp,0xc
c0016888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001688c:	e8 cd ff ff ff       	call   c001685e <Timer::~Timer()>
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	83 ec 08             	sub    esp,0x8
c0016897:	68 5c 01 00 00       	push   0x15c
c001689c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a0:	e8 8a c1 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00168a5:	83 c4 10             	add    esp,0x10
c00168a8:	83 c4 0c             	add    esp,0xc
c00168ab:	c3                   	ret    

c00168ac <Timer::read()>:
c00168ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168b6:	c3                   	ret    

c00168b7 <timerHandler(unsigned long long)>:
c00168b7:	55                   	push   ebp
c00168b8:	57                   	push   edi
c00168b9:	56                   	push   esi
c00168ba:	53                   	push   ebx
c00168bb:	83 ec 0c             	sub    esp,0xc
c00168be:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168c2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00168c6:	01 35 70 e4 02 c0    	add    DWORD PTR ds:0xc002e470,esi
c00168cc:	11 3d 74 e4 02 c0    	adc    DWORD PTR ds:0xc002e474,edi
c00168d2:	80 3d ed dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dded,0x0
c00168d9:	0f 84 07 01 00 00    	je     c00169e6 <timerHandler(unsigned long long)+0x12f>
c00168df:	e8 c9 6f 00 00       	call   c001d8ad <lockStuff()>
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	68 3c 13 03 c0       	push   0xc003133c
c00168ec:	e8 6d 1c 01 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f1:	c7 04 24 3c 13 03 c0 	mov    DWORD PTR [esp],0xc003133c
c00168f8:	89 c3                	mov    ebx,eax
c00168fa:	e8 67 1c 01 00       	call   c0028566 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168ff:	83 c4 10             	add    esp,0x10
c0016902:	84 c0                	test   al,al
c0016904:	74 60                	je     c0016966 <timerHandler(unsigned long long)+0xaf>
c0016906:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001690c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001690f:	85 c0                	test   eax,eax
c0016911:	0f 85 91 00 00 00    	jne    c00169a8 <timerHandler(unsigned long long)+0xf1>
c0016917:	e9 be 00 00 00       	jmp    c00169da <timerHandler(unsigned long long)+0x123>
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	55                   	push   ebp
c0016920:	e8 79 75 00 00       	call   c001de9e <unblockTask(ThreadControlBlock*)>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	39 eb                	cmp    ebx,ebp
c001692a:	75 12                	jne    c001693e <timerHandler(unsigned long long)+0x87>
c001692c:	83 ec 0c             	sub    esp,0xc
c001692f:	68 3c 13 03 c0       	push   0xc003133c
c0016934:	e8 25 1c 01 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016939:	89 c3                	mov    ebx,eax
c001693b:	83 c4 10             	add    esp,0x10
c001693e:	83 ec 0c             	sub    esp,0xc
c0016941:	68 3c 13 03 c0       	push   0xc003133c
c0016946:	e8 1b 1c 01 00       	call   c0028566 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	84 c0                	test   al,al
c0016950:	75 b4                	jne    c0016906 <timerHandler(unsigned long long)+0x4f>
c0016952:	83 ec 0c             	sub    esp,0xc
c0016955:	68 3c 13 03 c0       	push   0xc003133c
c001695a:	e8 ff 1b 01 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001695f:	83 c4 10             	add    esp,0x10
c0016962:	39 d8                	cmp    eax,ebx
c0016964:	74 a0                	je     c0016906 <timerHandler(unsigned long long)+0x4f>
c0016966:	83 ec 0c             	sub    esp,0xc
c0016969:	68 3c 13 03 c0       	push   0xc003133c
c001696e:	e8 eb 1b 01 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016973:	c7 04 24 3c 13 03 c0 	mov    DWORD PTR [esp],0xc003133c
c001697a:	89 c5                	mov    ebp,eax
c001697c:	e8 01 1c 01 00       	call   c0028582 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016981:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016984:	83 c4 10             	add    esp,0x10
c0016987:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001698a:	39 15 70 e4 02 c0    	cmp    DWORD PTR ds:0xc002e470,edx
c0016990:	a1 74 e4 02 c0       	mov    eax,ds:0xc002e474
c0016995:	19 c8                	sbb    eax,ecx
c0016997:	73 83                	jae    c001691c <timerHandler(unsigned long long)+0x65>
c0016999:	50                   	push   eax
c001699a:	50                   	push   eax
c001699b:	55                   	push   ebp
c001699c:	68 3c 13 03 c0       	push   0xc003133c
c00169a1:	e8 8a 1c 01 00       	call   c0028630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169a6:	eb 93                	jmp    c001693b <timerHandler(unsigned long long)+0x84>
c00169a8:	80 3d ec dd 02 c0 00 	cmp    BYTE PTR ds:0xc002ddec,0x0
c00169af:	74 29                	je     c00169da <timerHandler(unsigned long long)+0x123>
c00169b1:	39 c6                	cmp    esi,eax
c00169b3:	bb 00 00 00 00       	mov    ebx,0x0
c00169b8:	19 df                	sbb    edi,ebx
c00169ba:	72 19                	jb     c00169d5 <timerHandler(unsigned long long)+0x11e>
c00169bc:	e8 c5 6e 00 00       	call   c001d886 <lockScheduler()>
c00169c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169c6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00169c9:	e8 f4 71 00 00       	call   c001dbc2 <schedule()>
c00169ce:	e8 b5 6e 00 00       	call   c001d888 <unlockScheduler()>
c00169d3:	eb 05                	jmp    c00169da <timerHandler(unsigned long long)+0x123>
c00169d5:	29 f0                	sub    eax,esi
c00169d7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00169da:	83 c4 0c             	add    esp,0xc
c00169dd:	5b                   	pop    ebx
c00169de:	5e                   	pop    esi
c00169df:	5f                   	pop    edi
c00169e0:	5d                   	pop    ebp
c00169e1:	e9 61 72 00 00       	jmp    c001dc47 <unlockStuff()>
c00169e6:	83 c4 0c             	add    esp,0xc
c00169e9:	5b                   	pop    ebx
c00169ea:	5e                   	pop    esi
c00169eb:	5f                   	pop    edi
c00169ec:	5d                   	pop    ebp
c00169ed:	c3                   	ret    

c00169ee <setupTimer(int)>:
c00169ee:	57                   	push   edi
c00169ef:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00169f4:	56                   	push   esi
c00169f5:	53                   	push   ebx
c00169f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a00:	83 ec 0c             	sub    esp,0xc
c0016a03:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a09:	e8 14 d8 ff ff       	call   c0014222 <Device::getName()>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016a14:	0f 85 8d 00 00 00    	jne    c0016aa7 <setupTimer(int)+0xb9>
c0016a1a:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0016a1f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016a26:	74 7f                	je     c0016aa7 <setupTimer(int)+0xb9>
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	68 5c 01 00 00       	push   0x15c
c0016a30:	e8 0b 8e ff ff       	call   c000f840 <malloc>
c0016a35:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a38:	89 c3                	mov    ebx,eax
c0016a3a:	e8 8f f6 00 00       	call   c00260ce <PIT::PIT()>
c0016a3f:	59                   	pop    ecx
c0016a40:	5f                   	pop    edi
c0016a41:	53                   	push   ebx
c0016a42:	ff 35 e8 dd 02 c0    	push   DWORD PTR ds:0xc002dde8
c0016a48:	e8 e9 d4 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0016a4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a4f:	6a 00                	push   0x0
c0016a51:	6a 00                	push   0x0
c0016a53:	56                   	push   esi
c0016a54:	53                   	push   ebx
c0016a55:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a58:	83 c4 14             	add    esp,0x14
c0016a5b:	68 60 01 00 00       	push   0x160
c0016a60:	e8 db 8d ff ff       	call   c000f840 <malloc>
c0016a65:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a68:	89 c7                	mov    edi,eax
c0016a6a:	e8 0f f5 00 00       	call   c0025f7e <APICTimer::APICTimer()>
c0016a6f:	6a 00                	push   0x0
c0016a71:	6a 00                	push   0x0
c0016a73:	56                   	push   esi
c0016a74:	57                   	push   edi
c0016a75:	e8 06 f4 00 00       	call   c0025e80 <APICTimer::open(int, int, void*)>
c0016a7a:	83 c4 20             	add    esp,0x20
c0016a7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a7f:	6a 00                	push   0x0
c0016a81:	6a 00                	push   0x0
c0016a83:	6a 00                	push   0x0
c0016a85:	53                   	push   ebx
c0016a86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a89:	58                   	pop    eax
c0016a8a:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0016a8f:	5a                   	pop    edx
c0016a90:	57                   	push   edi
c0016a91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a97:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a9d:	e8 94 d4 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0016aa2:	83 c4 10             	add    esp,0x10
c0016aa5:	eb 33                	jmp    c0016ada <setupTimer(int)+0xec>
c0016aa7:	83 ec 0c             	sub    esp,0xc
c0016aaa:	68 5c 01 00 00       	push   0x15c
c0016aaf:	e8 8c 8d ff ff       	call   c000f840 <malloc>
c0016ab4:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ab7:	89 c3                	mov    ebx,eax
c0016ab9:	e8 10 f6 00 00       	call   c00260ce <PIT::PIT()>
c0016abe:	58                   	pop    eax
c0016abf:	5a                   	pop    edx
c0016ac0:	53                   	push   ebx
c0016ac1:	ff 35 e8 dd 02 c0    	push   DWORD PTR ds:0xc002dde8
c0016ac7:	e8 6a d4 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0016acc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ace:	6a 00                	push   0x0
c0016ad0:	6a 00                	push   0x0
c0016ad2:	56                   	push   esi
c0016ad3:	53                   	push   ebx
c0016ad4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ad7:	83 c4 20             	add    esp,0x20
c0016ada:	89 d8                	mov    eax,ebx
c0016adc:	5b                   	pop    ebx
c0016add:	5e                   	pop    esi
c0016ade:	5f                   	pop    edi
c0016adf:	c3                   	ret    

c0016ae0 <VCache::VCache(PhysicalDisk*)>:
c0016ae0:	53                   	push   ebx
c0016ae1:	83 ec 18             	sub    esp,0x18
c0016ae4:	ba b4 ad 02 c0       	mov    edx,0xc002adb4
c0016ae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aed:	89 10                	mov    DWORD PTR [eax],edx
c0016aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016afa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016afe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b09:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016b10:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016b17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b1b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016b22:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b38:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b40:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b47:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b52:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b5a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b62:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b71:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b79:	83 ec 0c             	sub    esp,0xc
c0016b7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b80:	e8 bb 8c ff ff       	call   c000f840 <malloc>
c0016b85:	83 c4 10             	add    esp,0x10
c0016b88:	89 c3                	mov    ebx,eax
c0016b8a:	83 ec 0c             	sub    esp,0xc
c0016b8d:	53                   	push   ebx
c0016b8e:	e8 13 6e 00 00       	call   c001d9a6 <Mutex::Mutex()>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b9a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016ba5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bac:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016bb3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bb7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016bbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016bc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bc8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016bce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bd4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016bd8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016bdb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016be6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bf0:	05 00 01 00 00       	add    eax,0x100
c0016bf5:	c1 e0 04             	shl    eax,0x4
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	50                   	push   eax
c0016bfc:	e8 3f 8c ff ff       	call   c000f840 <malloc>
c0016c01:	83 c4 10             	add    esp,0x10
c0016c04:	89 c2                	mov    edx,eax
c0016c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c11:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c1c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016c20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c24:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c2a:	c1 e0 07             	shl    eax,0x7
c0016c2d:	83 ec 0c             	sub    esp,0xc
c0016c30:	50                   	push   eax
c0016c31:	e8 0a 8c ff ff       	call   c000f840 <malloc>
c0016c36:	83 c4 10             	add    esp,0x10
c0016c39:	89 c2                	mov    edx,eax
c0016c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c3f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c42:	90                   	nop
c0016c43:	83 c4 18             	add    esp,0x18
c0016c46:	5b                   	pop    ebx
c0016c47:	c3                   	ret    

c0016c48 <VCache::invalidateReadBuffer()>:
c0016c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c4c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c52:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c56:	c3                   	ret    
c0016c57:	90                   	nop

c0016c58 <VCache::writeWriteBuffer()>:
c0016c58:	53                   	push   ebx
c0016c59:	83 ec 14             	sub    esp,0x14
c0016c5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c63:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c65:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c68:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c6b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c71:	50                   	push   eax
c0016c72:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c75:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c7c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c83:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c87:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c8e:	83 c4 28             	add    esp,0x28
c0016c91:	5b                   	pop    ebx
c0016c92:	c3                   	ret    
c0016c93:	90                   	nop

c0016c94 <VCache::~VCache()>:
c0016c94:	83 ec 0c             	sub    esp,0xc
c0016c97:	ba b4 ad 02 c0       	mov    edx,0xc002adb4
c0016c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca0:	89 10                	mov    DWORD PTR [eax],edx
c0016ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016ca9:	84 c0                	test   al,al
c0016cab:	74 0f                	je     c0016cbc <VCache::~VCache()+0x28>
c0016cad:	83 ec 0c             	sub    esp,0xc
c0016cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb4:	e8 9f ff ff ff       	call   c0016c58 <VCache::writeWriteBuffer()>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016cc3:	83 ec 0c             	sub    esp,0xc
c0016cc6:	50                   	push   eax
c0016cc7:	e8 84 8b ff ff       	call   c000f850 <free>
c0016ccc:	83 c4 10             	add    esp,0x10
c0016ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016cd6:	83 ec 0c             	sub    esp,0xc
c0016cd9:	50                   	push   eax
c0016cda:	e8 71 8b ff ff       	call   c000f850 <free>
c0016cdf:	83 c4 10             	add    esp,0x10
c0016ce2:	90                   	nop
c0016ce3:	83 c4 0c             	add    esp,0xc
c0016ce6:	c3                   	ret    
c0016ce7:	90                   	nop

c0016ce8 <VCache::~VCache()>:
c0016ce8:	83 ec 0c             	sub    esp,0xc
c0016ceb:	83 ec 0c             	sub    esp,0xc
c0016cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf2:	e8 9d ff ff ff       	call   c0016c94 <VCache::~VCache()>
c0016cf7:	83 c4 10             	add    esp,0x10
c0016cfa:	83 ec 08             	sub    esp,0x8
c0016cfd:	6a 44                	push   0x44
c0016cff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d03:	e8 27 bd ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0016d08:	83 c4 10             	add    esp,0x10
c0016d0b:	83 c4 0c             	add    esp,0xc
c0016d0e:	c3                   	ret    
c0016d0f:	90                   	nop

c0016d10 <VCache::write(unsigned long long, int, void*)>:
c0016d10:	55                   	push   ebp
c0016d11:	57                   	push   edi
c0016d12:	56                   	push   esi
c0016d13:	53                   	push   ebx
c0016d14:	83 ec 28             	sub    esp,0x28
c0016d17:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d1b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d1f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d23:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016d27:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d2a:	e8 d9 70 00 00       	call   c001de08 <Semaphore::acquire()>
c0016d2f:	83 c4 10             	add    esp,0x10
c0016d32:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d36:	74 0c                	je     c0016d44 <VCache::write(unsigned long long, int, void*)+0x34>
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	53                   	push   ebx
c0016d3c:	e8 07 ff ff ff       	call   c0016c48 <VCache::invalidateReadBuffer()>
c0016d41:	83 c4 10             	add    esp,0x10
c0016d44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d48:	74 66                	je     c0016db0 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016d4a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d4d:	99                   	cdq    
c0016d4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d52:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016d55:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016d58:	89 c1                	mov    ecx,eax
c0016d5a:	89 d0                	mov    eax,edx
c0016d5c:	31 f1                	xor    ecx,esi
c0016d5e:	31 f8                	xor    eax,edi
c0016d60:	89 ca                	mov    edx,ecx
c0016d62:	09 c2                	or     edx,eax
c0016d64:	75 3e                	jne    c0016da4 <VCache::write(unsigned long long, int, void*)+0x94>
c0016d66:	83 fd 01             	cmp    ebp,0x1
c0016d69:	75 39                	jne    c0016da4 <VCache::write(unsigned long long, int, void*)+0x94>
c0016d6b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d6e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d74:	51                   	push   ecx
c0016d75:	50                   	push   eax
c0016d76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016d7e:	0f af c8             	imul   ecx,eax
c0016d81:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016d84:	51                   	push   ecx
c0016d85:	e8 ba 99 fe ff       	call   c0000744 <memcpy>
c0016d8a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	40                   	inc    eax
c0016d91:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d94:	83 c0 80             	add    eax,0xffffff80
c0016d97:	75 57                	jne    c0016df0 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016d99:	83 ec 0c             	sub    esp,0xc
c0016d9c:	53                   	push   ebx
c0016d9d:	e8 b6 fe ff ff       	call   c0016c58 <VCache::writeWriteBuffer()>
c0016da2:	eb 34                	jmp    c0016dd8 <VCache::write(unsigned long long, int, void*)+0xc8>
c0016da4:	83 ec 0c             	sub    esp,0xc
c0016da7:	53                   	push   ebx
c0016da8:	e8 ab fe ff ff       	call   c0016c58 <VCache::writeWriteBuffer()>
c0016dad:	83 c4 10             	add    esp,0x10
c0016db0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016db3:	83 fd 7f             	cmp    ebp,0x7f
c0016db6:	7f 25                	jg     c0016ddd <VCache::write(unsigned long long, int, void*)+0xcd>
c0016db8:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016dbb:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016dbe:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016dc1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016dc5:	52                   	push   edx
c0016dc6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016dcc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016dd0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016dd3:	e8 6c 99 fe ff       	call   c0000744 <memcpy>
c0016dd8:	83 c4 10             	add    esp,0x10
c0016ddb:	eb 13                	jmp    c0016df0 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016ddd:	83 ec 0c             	sub    esp,0xc
c0016de0:	8b 10                	mov    edx,DWORD PTR [eax]
c0016de2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016de6:	55                   	push   ebp
c0016de7:	57                   	push   edi
c0016de8:	56                   	push   esi
c0016de9:	50                   	push   eax
c0016dea:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016ded:	83 c4 20             	add    esp,0x20
c0016df0:	83 ec 0c             	sub    esp,0xc
c0016df3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016df6:	e8 bb 75 00 00       	call   c001e3b6 <Semaphore::release()>
c0016dfb:	83 c4 2c             	add    esp,0x2c
c0016dfe:	31 c0                	xor    eax,eax
c0016e00:	5b                   	pop    ebx
c0016e01:	5e                   	pop    esi
c0016e02:	5f                   	pop    edi
c0016e03:	5d                   	pop    ebp
c0016e04:	c3                   	ret    
c0016e05:	90                   	nop

c0016e06 <VCache::read(unsigned long long, int, void*)>:
c0016e06:	55                   	push   ebp
c0016e07:	57                   	push   edi
c0016e08:	56                   	push   esi
c0016e09:	53                   	push   ebx
c0016e0a:	83 ec 28             	sub    esp,0x28
c0016e0d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e15:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016e19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e1d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016e21:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016e25:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016e29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e2c:	e8 d7 6f 00 00       	call   c001de08 <Semaphore::acquire()>
c0016e31:	83 c4 10             	add    esp,0x10
c0016e34:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016e38:	74 0c                	je     c0016e46 <VCache::read(unsigned long long, int, void*)+0x40>
c0016e3a:	83 ec 0c             	sub    esp,0xc
c0016e3d:	53                   	push   ebx
c0016e3e:	e8 15 fe ff ff       	call   c0016c58 <VCache::writeWriteBuffer()>
c0016e43:	83 c4 10             	add    esp,0x10
c0016e46:	83 fe 01             	cmp    esi,0x1
c0016e49:	0f 85 80 00 00 00    	jne    c0016ecf <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e52:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016e59:	75 74                	jne    c0016ecf <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e5b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e5e:	89 d1                	mov    ecx,edx
c0016e60:	f7 d9                	neg    ecx
c0016e62:	89 cf                	mov    edi,ecx
c0016e64:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e68:	c1 ff 1f             	sar    edi,0x1f
c0016e6b:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016e6e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016e72:	89 ce                	mov    esi,ecx
c0016e74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e78:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016e7c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e80:	89 cf                	mov    edi,ecx
c0016e82:	74 0a                	je     c0016e8e <VCache::read(unsigned long long, int, void*)+0x88>
c0016e84:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e87:	75 05                	jne    c0016e8e <VCache::read(unsigned long long, int, void*)+0x88>
c0016e89:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016e8c:	74 1c                	je     c0016eaa <VCache::read(unsigned long long, int, void*)+0xa4>
c0016e8e:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e92:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016e95:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016e98:	83 ec 0c             	sub    esp,0xc
c0016e9b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e9d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016ea0:	52                   	push   edx
c0016ea1:	57                   	push   edi
c0016ea2:	56                   	push   esi
c0016ea3:	50                   	push   eax
c0016ea4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016ea7:	83 c4 20             	add    esp,0x20
c0016eaa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ead:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016eb3:	50                   	push   eax
c0016eb4:	52                   	push   edx
c0016eb5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016eb8:	48                   	dec    eax
c0016eb9:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016ebd:	0f af c2             	imul   eax,edx
c0016ec0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016ec3:	50                   	push   eax
c0016ec4:	55                   	push   ebp
c0016ec5:	e8 7a 98 fe ff       	call   c0000744 <memcpy>
c0016eca:	83 c4 10             	add    esp,0x10
c0016ecd:	eb 21                	jmp    c0016ef0 <VCache::read(unsigned long long, int, void*)+0xea>
c0016ecf:	83 ec 0c             	sub    esp,0xc
c0016ed2:	53                   	push   ebx
c0016ed3:	e8 70 fd ff ff       	call   c0016c48 <VCache::invalidateReadBuffer()>
c0016ed8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016edb:	8b 10                	mov    edx,DWORD PTR [eax]
c0016edd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ee0:	56                   	push   esi
c0016ee1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ee5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ee9:	50                   	push   eax
c0016eea:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016eed:	83 c4 20             	add    esp,0x20
c0016ef0:	83 ec 0c             	sub    esp,0xc
c0016ef3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ef6:	e8 bb 74 00 00       	call   c001e3b6 <Semaphore::release()>
c0016efb:	83 c4 2c             	add    esp,0x2c
c0016efe:	31 c0                	xor    eax,eax
c0016f00:	5b                   	pop    ebx
c0016f01:	5e                   	pop    esi
c0016f02:	5f                   	pop    edi
c0016f03:	5d                   	pop    ebp
c0016f04:	c3                   	ret    
c0016f05:	90                   	nop

c0016f06 <Video::putrect(int, int, int, int, unsigned int)>:
c0016f06:	55                   	push   ebp
c0016f07:	57                   	push   edi
c0016f08:	56                   	push   esi
c0016f09:	53                   	push   ebx
c0016f0a:	83 ec 1c             	sub    esp,0x1c
c0016f0d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016f11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f15:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016f19:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016f1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f25:	01 df                	add    edi,ebx
c0016f27:	39 fb                	cmp    ebx,edi
c0016f29:	7d 1f                	jge    c0016f4a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016f2b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f2f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016f33:	7d 12                	jge    c0016f47 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016f35:	8b 16                	mov    edx,DWORD PTR [esi]
c0016f37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016f3b:	53                   	push   ebx
c0016f3c:	55                   	push   ebp
c0016f3d:	45                   	inc    ebp
c0016f3e:	56                   	push   esi
c0016f3f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016f42:	83 c4 10             	add    esp,0x10
c0016f45:	eb e8                	jmp    c0016f2f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016f47:	43                   	inc    ebx
c0016f48:	eb dd                	jmp    c0016f27 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016f4a:	83 c4 1c             	add    esp,0x1c
c0016f4d:	5b                   	pop    ebx
c0016f4e:	5e                   	pop    esi
c0016f4f:	5f                   	pop    edi
c0016f50:	5d                   	pop    ebp
c0016f51:	c3                   	ret    

c0016f52 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016f52:	55                   	push   ebp
c0016f53:	57                   	push   edi
c0016f54:	31 ff                	xor    edi,edi
c0016f56:	56                   	push   esi
c0016f57:	53                   	push   ebx
c0016f58:	83 ec 1c             	sub    esp,0x1c
c0016f5b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016f5f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f63:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f6a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f73:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f77:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f7b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f7e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f82:	01 f9                	add    ecx,edi
c0016f84:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f88:	7d 2f                	jge    c0016fb9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f8a:	31 f6                	xor    esi,esi
c0016f8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f90:	01 f2                	add    edx,esi
c0016f92:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f96:	7d 1a                	jge    c0016fb2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f98:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f9b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f9e:	46                   	inc    esi
c0016f9f:	51                   	push   ecx
c0016fa0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016fa4:	52                   	push   edx
c0016fa5:	55                   	push   ebp
c0016fa6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fa9:	83 c4 10             	add    esp,0x10
c0016fac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fb0:	eb da                	jmp    c0016f8c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016fb2:	47                   	inc    edi
c0016fb3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016fb7:	eb c5                	jmp    c0016f7e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016fb9:	83 c4 1c             	add    esp,0x1c
c0016fbc:	5b                   	pop    ebx
c0016fbd:	5e                   	pop    esi
c0016fbe:	5f                   	pop    edi
c0016fbf:	5d                   	pop    ebp
c0016fc0:	c3                   	ret    
c0016fc1:	90                   	nop

c0016fc2 <Video::blit(unsigned int*, int, int, int, int)>:
c0016fc2:	55                   	push   ebp
c0016fc3:	57                   	push   edi
c0016fc4:	56                   	push   esi
c0016fc5:	53                   	push   ebx
c0016fc6:	83 ec 1c             	sub    esp,0x1c
c0016fc9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016fcd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fd1:	85 c0                	test   eax,eax
c0016fd3:	79 02                	jns    c0016fd7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016fd5:	31 c0                	xor    eax,eax
c0016fd7:	c1 e0 02             	shl    eax,0x2
c0016fda:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fe2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fe6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016fea:	39 d8                	cmp    eax,ebx
c0016fec:	7e 49                	jle    c0017037 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fee:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016ff4:	7c 41                	jl     c0017037 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016ff6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016ffa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ffe:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017002:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017006:	39 f9                	cmp    ecx,edi
c0017008:	7e 22                	jle    c001702c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001700a:	83 c5 04             	add    ebp,0x4
c001700d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017013:	7c 14                	jl     c0017029 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017015:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017017:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001701a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001701e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017022:	56                   	push   esi
c0017023:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017026:	83 c4 10             	add    esp,0x10
c0017029:	47                   	inc    edi
c001702a:	eb d2                	jmp    c0016ffe <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001702c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017030:	43                   	inc    ebx
c0017031:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017035:	eb ab                	jmp    c0016fe2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017037:	83 c4 1c             	add    esp,0x1c
c001703a:	5b                   	pop    ebx
c001703b:	5e                   	pop    esi
c001703c:	5f                   	pop    edi
c001703d:	5d                   	pop    ebp
c001703e:	c3                   	ret    
c001703f:	90                   	nop

c0017040 <Video::clearScreen(unsigned int)>:
c0017040:	57                   	push   edi
c0017041:	56                   	push   esi
c0017042:	53                   	push   ebx
c0017043:	31 db                	xor    ebx,ebx
c0017045:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017049:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001704f:	7e 1f                	jle    c0017070 <Video::clearScreen(unsigned int)+0x30>
c0017051:	31 ff                	xor    edi,edi
c0017053:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017059:	7e 12                	jle    c001706d <Video::clearScreen(unsigned int)+0x2d>
c001705b:	8b 06                	mov    eax,DWORD PTR [esi]
c001705d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017061:	53                   	push   ebx
c0017062:	57                   	push   edi
c0017063:	47                   	inc    edi
c0017064:	56                   	push   esi
c0017065:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017068:	83 c4 10             	add    esp,0x10
c001706b:	eb e6                	jmp    c0017053 <Video::clearScreen(unsigned int)+0x13>
c001706d:	43                   	inc    ebx
c001706e:	eb d9                	jmp    c0017049 <Video::clearScreen(unsigned int)+0x9>
c0017070:	5b                   	pop    ebx
c0017071:	5e                   	pop    esi
c0017072:	5f                   	pop    edi
c0017073:	c3                   	ret    

c0017074 <Video::putpixel(int, int, unsigned int)>:
c0017074:	c7 44 24 04 bc ad 02 c0 	mov    DWORD PTR [esp+0x4],0xc002adbc
c001707c:	e9 0a 31 00 00       	jmp    c001a18b <Krnl::panic(char const*)>
c0017081:	90                   	nop

c0017082 <Video::Video(char const*)>:
c0017082:	83 ec 0c             	sub    esp,0xc
c0017085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017089:	83 ec 08             	sub    esp,0x8
c001708c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017090:	50                   	push   eax
c0017091:	e8 90 d0 ff ff       	call   c0014126 <Device::Device(char const*)>
c0017096:	83 c4 10             	add    esp,0x10
c0017099:	ba 40 ae 02 c0       	mov    edx,0xc002ae40
c001709e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170a2:	89 10                	mov    DWORD PTR [eax],edx
c00170a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170a8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00170b2:	90                   	nop
c00170b3:	83 c4 0c             	add    esp,0xc
c00170b6:	c3                   	ret    
c00170b7:	90                   	nop

c00170b8 <Video::~Video()>:
c00170b8:	83 ec 0c             	sub    esp,0xc
c00170bb:	ba 40 ae 02 c0       	mov    edx,0xc002ae40
c00170c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170c4:	89 10                	mov    DWORD PTR [eax],edx
c00170c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170ca:	83 ec 0c             	sub    esp,0xc
c00170cd:	50                   	push   eax
c00170ce:	e8 35 cd ff ff       	call   c0013e08 <Device::~Device()>
c00170d3:	83 c4 10             	add    esp,0x10
c00170d6:	90                   	nop
c00170d7:	83 c4 0c             	add    esp,0xc
c00170da:	c3                   	ret    
c00170db:	90                   	nop

c00170dc <Video::~Video()>:
c00170dc:	83 ec 0c             	sub    esp,0xc
c00170df:	83 ec 0c             	sub    esp,0xc
c00170e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170e6:	e8 cd ff ff ff       	call   c00170b8 <Video::~Video()>
c00170eb:	83 c4 10             	add    esp,0x10
c00170ee:	83 ec 08             	sub    esp,0x8
c00170f1:	68 64 01 00 00       	push   0x164
c00170f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170fa:	e8 30 b9 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00170ff:	83 c4 10             	add    esp,0x10
c0017102:	83 c4 0c             	add    esp,0xc
c0017105:	c3                   	ret    

c0017106 <Video::isMonochrome()>:
c0017106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001710a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017110:	c3                   	ret    
c0017111:	90                   	nop

c0017112 <Video::getWidth()>:
c0017112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017116:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001711c:	c3                   	ret    
c001711d:	90                   	nop

c001711e <Video::getHeight()>:
c001711e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017122:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017128:	c3                   	ret    
c0017129:	90                   	nop

c001712a <Video::drawCursor(int, int, unsigned char*, int)>:
c001712a:	55                   	push   ebp
c001712b:	57                   	push   edi
c001712c:	56                   	push   esi
c001712d:	53                   	push   ebx
c001712e:	83 ec 2c             	sub    esp,0x2c
c0017131:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017135:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017139:	83 f8 01             	cmp    eax,0x1
c001713c:	19 c9                	sbb    ecx,ecx
c001713e:	31 db                	xor    ebx,ebx
c0017140:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017144:	89 cd                	mov    ebp,ecx
c0017146:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001714e:	f7 d5                	not    ebp
c0017150:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017156:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001715a:	01 d8                	add    eax,ebx
c001715c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017160:	56                   	push   esi
c0017161:	e8 b8 ff ff ff       	call   c001711e <Video::getHeight()>
c0017166:	59                   	pop    ecx
c0017167:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001716b:	7e 70                	jle    c00171dd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001716d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017171:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017175:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017178:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001717c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017180:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017187:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001718b:	89 f8                	mov    eax,edi
c001718d:	83 c0 20             	add    eax,0x20
c0017190:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017194:	56                   	push   esi
c0017195:	e8 78 ff ff ff       	call   c0017112 <Video::getWidth()>
c001719a:	5a                   	pop    edx
c001719b:	39 c7                	cmp    edi,eax
c001719d:	7d 34                	jge    c00171d3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001719f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00171a4:	74 05                	je     c00171ab <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00171a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00171a8:	55                   	push   ebp
c00171a9:	eb 0d                	jmp    c00171b8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00171ab:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00171b0:	74 12                	je     c00171c4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00171b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00171b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00171bc:	57                   	push   edi
c00171bd:	56                   	push   esi
c00171be:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00171c1:	83 c4 10             	add    esp,0x10
c00171c4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00171c8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00171cc:	47                   	inc    edi
c00171cd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00171d1:	75 c1                	jne    c0017194 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00171d3:	43                   	inc    ebx
c00171d4:	83 fb 20             	cmp    ebx,0x20
c00171d7:	0f 85 79 ff ff ff    	jne    c0017156 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00171dd:	83 c4 2c             	add    esp,0x2c
c00171e0:	5b                   	pop    ebx
c00171e1:	5e                   	pop    esi
c00171e2:	5f                   	pop    edi
c00171e3:	5d                   	pop    ebp
c00171e4:	c3                   	ret    
c00171e5:	90                   	nop

c00171e6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00171e6:	55                   	push   ebp
c00171e7:	57                   	push   edi
c00171e8:	56                   	push   esi
c00171e9:	53                   	push   ebx
c00171ea:	83 ec 28             	sub    esp,0x28
c00171ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171f1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00171f5:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00171f9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00171fd:	c1 e7 08             	shl    edi,0x8
c0017200:	01 c7                	add    edi,eax
c0017202:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017206:	c1 e0 08             	shl    eax,0x8
c0017209:	01 d0                	add    eax,edx
c001720b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001720f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017213:	0f af c7             	imul   eax,edi
c0017216:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001721d:	50                   	push   eax
c001721e:	e8 1d 86 ff ff       	call   c000f840 <malloc>
c0017223:	83 c4 10             	add    esp,0x10
c0017226:	89 c5                	mov    ebp,eax
c0017228:	85 c0                	test   eax,eax
c001722a:	75 15                	jne    c0017241 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001722c:	83 ec 0c             	sub    esp,0xc
c001722f:	68 dd ad 02 c0       	push   0xc002addd
c0017234:	e8 d6 b8 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0017239:	83 c4 10             	add    esp,0x10
c001723c:	e9 1c 01 00 00       	jmp    c001735d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017241:	be 12 00 00 00       	mov    esi,0x12
c0017246:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001724a:	74 11                	je     c001725d <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001724c:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017250:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017254:	c1 fe 03             	sar    esi,0x3
c0017257:	0f af f0             	imul   esi,eax
c001725a:	83 c6 12             	add    esi,0x12
c001725d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017261:	74 04                	je     c0017267 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017263:	85 ff                	test   edi,edi
c0017265:	75 12                	jne    c0017279 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017267:	83 ec 0c             	sub    esp,0xc
c001726a:	68 f4 ad 02 c0       	push   0xc002adf4
c001726f:	e8 9b b8 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0017274:	e9 ce 00 00 00       	jmp    c0017347 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017279:	52                   	push   edx
c001727a:	52                   	push   edx
c001727b:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001727f:	50                   	push   eax
c0017280:	68 09 ae 02 c0       	push   0xc002ae09
c0017285:	e8 85 b8 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001728a:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001728e:	83 c4 10             	add    esp,0x10
c0017291:	80 fa 02             	cmp    dl,0x2
c0017294:	0f 85 98 00 00 00    	jne    c0017332 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001729a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001729f:	75 10                	jne    c00172b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00172a1:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00172a5:	75 0a                	jne    c00172b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00172a7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00172aa:	83 e8 18             	sub    eax,0x18
c00172ad:	a8 f7                	test   al,0xf7
c00172af:	74 0a                	je     c00172bb <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00172b1:	83 ec 0c             	sub    esp,0xc
c00172b4:	68 16 ae 02 c0       	push   0xc002ae16
c00172b9:	eb 7f                	jmp    c001733a <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00172bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00172c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00172cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00172cf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00172d7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00172db:	75 0c                	jne    c00172e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00172dd:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00172e2:	c1 e0 18             	shl    eax,0x18
c00172e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172e9:	41                   	inc    ecx
c00172ea:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00172ef:	c1 e2 10             	shl    edx,0x10
c00172f2:	89 d0                	mov    eax,edx
c00172f4:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00172f9:	c1 e2 08             	shl    edx,0x8
c00172fc:	09 c2                	or     edx,eax
c00172fe:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017302:	09 c2                	or     edx,eax
c0017304:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017308:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001730c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017310:	c1 f8 03             	sar    eax,0x3
c0017313:	01 c6                	add    esi,eax
c0017315:	89 c8                	mov    eax,ecx
c0017317:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001731b:	39 c7                	cmp    edi,eax
c001731d:	7f b0                	jg     c00172cf <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001731f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017323:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017327:	39 14 24             	cmp    DWORD PTR [esp],edx
c001732a:	7e 22                	jle    c001734e <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001732c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017330:	eb 99                	jmp    c00172cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017332:	50                   	push   eax
c0017333:	50                   	push   eax
c0017334:	52                   	push   edx
c0017335:	68 24 ae 02 c0       	push   0xc002ae24
c001733a:	e8 d0 b7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001733f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017342:	e8 09 85 ff ff       	call   c000f850 <free>
c0017347:	83 c4 10             	add    esp,0x10
c001734a:	31 ed                	xor    ebp,ebp
c001734c:	eb 0f                	jmp    c001735d <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001734e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017352:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017355:	89 38                	mov    DWORD PTR [eax],edi
c0017357:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001735b:	89 08                	mov    DWORD PTR [eax],ecx
c001735d:	83 c4 1c             	add    esp,0x1c
c0017360:	89 e8                	mov    eax,ebp
c0017362:	5b                   	pop    ebx
c0017363:	5e                   	pop    esi
c0017364:	5f                   	pop    edi
c0017365:	5d                   	pop    ebp
c0017366:	c3                   	ret    
c0017367:	90                   	nop

c0017368 <Video::putTGA(int, int, unsigned char*, int)>:
c0017368:	55                   	push   ebp
c0017369:	57                   	push   edi
c001736a:	56                   	push   esi
c001736b:	53                   	push   ebx
c001736c:	83 ec 28             	sub    esp,0x28
c001736f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017373:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017377:	50                   	push   eax
c0017378:	8d 44 24 18          	lea    eax,[esp+0x18]
c001737c:	50                   	push   eax
c001737d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017381:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017385:	56                   	push   esi
c0017386:	e8 5b fe ff ff       	call   c00171e6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001738b:	83 c4 20             	add    esp,0x20
c001738e:	85 c0                	test   eax,eax
c0017390:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017394:	74 35                	je     c00173cb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017396:	89 c7                	mov    edi,eax
c0017398:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001739c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00173a0:	39 d8                	cmp    eax,ebx
c00173a2:	7e 27                	jle    c00173cb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00173a4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173ac:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00173b0:	39 e8                	cmp    eax,ebp
c00173b2:	7e 14                	jle    c00173c8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00173b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00173b6:	83 c7 04             	add    edi,0x4
c00173b9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00173bc:	53                   	push   ebx
c00173bd:	55                   	push   ebp
c00173be:	45                   	inc    ebp
c00173bf:	56                   	push   esi
c00173c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00173c3:	83 c4 10             	add    esp,0x10
c00173c6:	eb e0                	jmp    c00173a8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00173c8:	43                   	inc    ebx
c00173c9:	eb cd                	jmp    c0017398 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00173cb:	83 c4 1c             	add    esp,0x1c
c00173ce:	5b                   	pop    ebx
c00173cf:	5e                   	pop    esi
c00173d0:	5f                   	pop    edi
c00173d1:	5d                   	pop    ebp
c00173d2:	c3                   	ret    
c00173d3:	90                   	nop

c00173d4 <ACPI::close(int, int, void*)>:
c00173d4:	83 ec 1c             	sub    esp,0x1c
c00173d7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00173df:	74 0a                	je     c00173eb <ACPI::close(int, int, void*)+0x17>
c00173e1:	b8 00 00 00 00       	mov    eax,0x0
c00173e6:	e9 9a 00 00 00       	jmp    c0017485 <ACPI::close(int, int, void*)+0xb1>
c00173eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00173f0:	75 37                	jne    c0017429 <ACPI::close(int, int, void*)+0x55>
c00173f2:	83 ec 0c             	sub    esp,0xc
c00173f5:	68 80 ae 02 c0       	push   0xc002ae80
c00173fa:	e8 10 b7 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00173ff:	83 c4 10             	add    esp,0x10
c0017402:	a1 a8 04 03 c0       	mov    eax,ds:0xc00304a8
c0017407:	85 c0                	test   eax,eax
c0017409:	74 07                	je     c0017412 <ACPI::close(int, int, void*)+0x3e>
c001740b:	a1 a8 04 03 c0       	mov    eax,ds:0xc00304a8
c0017410:	ff d0                	call   eax
c0017412:	83 ec 0c             	sub    esp,0xc
c0017415:	68 a4 af 02 c0       	push   0xc002afa4
c001741a:	e8 6c 2d 00 00       	call   c001a18b <Krnl::panic(char const*)>
c001741f:	83 c4 10             	add    esp,0x10
c0017422:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017427:	eb 5c                	jmp    c0017485 <ACPI::close(int, int, void*)+0xb1>
c0017429:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001742e:	75 50                	jne    c0017480 <ACPI::close(int, int, void*)+0xac>
c0017430:	a1 a4 04 03 c0       	mov    eax,ds:0xc00304a4
c0017435:	85 c0                	test   eax,eax
c0017437:	74 07                	je     c0017440 <ACPI::close(int, int, void*)+0x6c>
c0017439:	a1 a4 04 03 c0       	mov    eax,ds:0xc00304a4
c001743e:	ff d0                	call   eax
c0017440:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017445:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001744a:	83 e0 02             	and    eax,0x2
c001744d:	74 1c                	je     c001746b <ACPI::close(int, int, void*)+0x97>
c001744f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001745a:	89 c2                	mov    edx,eax
c001745c:	ec                   	in     al,dx
c001745d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017461:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017465:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017469:	eb da                	jmp    c0017445 <ACPI::close(int, int, void*)+0x71>
c001746b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017472:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017477:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001747b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001747f:	ee                   	out    dx,al
c0017480:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017485:	83 c4 1c             	add    esp,0x1c
c0017488:	c3                   	ret    

c0017489 <findRSDP()>:
c0017489:	83 ec 1c             	sub    esp,0x1c
c001748c:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0017491:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017497:	83 e0 04             	and    eax,0x4
c001749a:	84 c0                	test   al,al
c001749c:	75 07                	jne    c00174a5 <findRSDP()+0x1c>
c001749e:	b8 00 00 00 00       	mov    eax,0x0
c00174a3:	eb 6a                	jmp    c001750f <findRSDP()+0x86>
c00174a5:	a1 30 de 02 c0       	mov    eax,ds:0xc002de30
c00174aa:	3d ff 07 00 00       	cmp    eax,0x7ff
c00174af:	7f 1b                	jg     c00174cc <findRSDP()+0x43>
c00174b1:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00174b6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174bc:	83 e2 fb             	and    edx,0xfffffffb
c00174bf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174c5:	b8 00 00 00 00       	mov    eax,0x0
c00174ca:	eb 43                	jmp    c001750f <findRSDP()+0x86>
c00174cc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00174d4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00174dc:	77 2c                	ja     c001750a <findRSDP()+0x81>
c00174de:	83 ec 04             	sub    esp,0x4
c00174e1:	6a 08                	push   0x8
c00174e3:	68 8d ae 02 c0       	push   0xc002ae8d
c00174e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174ec:	e8 4f 91 fe ff       	call   c0000640 <memcmp>
c00174f1:	83 c4 10             	add    esp,0x10
c00174f4:	85 c0                	test   eax,eax
c00174f6:	0f 94 c0             	sete   al
c00174f9:	84 c0                	test   al,al
c00174fb:	74 06                	je     c0017503 <findRSDP()+0x7a>
c00174fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017501:	eb 0c                	jmp    c001750f <findRSDP()+0x86>
c0017503:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017508:	eb ca                	jmp    c00174d4 <findRSDP()+0x4b>
c001750a:	b8 00 00 00 00       	mov    eax,0x0
c001750f:	83 c4 1c             	add    esp,0x1c
c0017512:	c3                   	ret    

c0017513 <loadACPITables(unsigned char*)>:
c0017513:	56                   	push   esi
c0017514:	53                   	push   ebx
c0017515:	83 ec 44             	sub    esp,0x44
c0017518:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001751d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017523:	83 e0 04             	and    eax,0x4
c0017526:	84 c0                	test   al,al
c0017528:	0f 84 05 02 00 00    	je     c0017733 <loadACPITables(unsigned char*)+0x220>
c001752e:	a0 c0 06 03 c0       	mov    al,ds:0xc00306c0
c0017533:	84 c0                	test   al,al
c0017535:	74 75                	je     c00175ac <loadACPITables(unsigned char*)+0x99>
c0017537:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001753b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001753f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017543:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017546:	83 e8 24             	sub    eax,0x24
c0017549:	c1 e8 03             	shr    eax,0x3
c001754c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017550:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017558:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001755c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017560:	0f 8d b2 00 00 00    	jge    c0017618 <loadACPITables(unsigned char*)+0x105>
c0017566:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001756a:	83 c0 24             	add    eax,0x24
c001756d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017571:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017575:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017579:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001757d:	c1 e0 03             	shl    eax,0x3
c0017580:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017584:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017588:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001758b:	8b 00                	mov    eax,DWORD PTR [eax]
c001758d:	89 c1                	mov    ecx,eax
c001758f:	a1 ac 04 03 c0       	mov    eax,ds:0xc00304ac
c0017594:	8d 50 01             	lea    edx,[eax+0x1]
c0017597:	89 15 ac 04 03 c0    	mov    DWORD PTR ds:0xc00304ac,edx
c001759d:	89 ca                	mov    edx,ecx
c001759f:	89 14 c5 c4 04 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfb3c],edx
c00175a6:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00175aa:	eb ac                	jmp    c0017558 <loadACPITables(unsigned char*)+0x45>
c00175ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175bb:	83 e8 24             	sub    eax,0x24
c00175be:	c1 e8 02             	shr    eax,0x2
c00175c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175c5:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00175cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175d1:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00175d5:	7d 41                	jge    c0017618 <loadACPITables(unsigned char*)+0x105>
c00175d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175db:	83 c0 24             	add    eax,0x24
c00175de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00175e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175ee:	c1 e0 02             	shl    eax,0x2
c00175f1:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00175f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00175fb:	a1 ac 04 03 c0       	mov    eax,ds:0xc00304ac
c0017600:	8d 50 01             	lea    edx,[eax+0x1]
c0017603:	89 15 ac 04 03 c0    	mov    DWORD PTR ds:0xc00304ac,edx
c0017609:	89 ca                	mov    edx,ecx
c001760b:	89 14 c5 c4 04 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfb3c],edx
c0017612:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017616:	eb b5                	jmp    c00175cd <loadACPITables(unsigned char*)+0xba>
c0017618:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017620:	a1 ac 04 03 c0       	mov    eax,ds:0xc00304ac
c0017625:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017629:	0f 8d 05 01 00 00    	jge    c0017734 <loadACPITables(unsigned char*)+0x221>
c001762f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017633:	8b 04 c5 c4 04 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfb3c]
c001763a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001763e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017642:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001764a:	25 ff 0f 00 00       	and    eax,0xfff
c001764f:	89 c6                	mov    esi,eax
c0017651:	e8 59 a6 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c0017656:	89 c3                	mov    ebx,eax
c0017658:	83 ec 0c             	sub    esp,0xc
c001765b:	6a 01                	push   0x1
c001765d:	e8 bd a4 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0017662:	83 c4 10             	add    esp,0x10
c0017665:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017669:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001766f:	83 ec 0c             	sub    esp,0xc
c0017672:	6a 01                	push   0x1
c0017674:	6a 01                	push   0x1
c0017676:	50                   	push   eax
c0017677:	52                   	push   edx
c0017678:	53                   	push   ebx
c0017679:	e8 60 ae ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001767e:	83 c4 20             	add    esp,0x20
c0017681:	09 f0                	or     eax,esi
c0017683:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017687:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001768b:	c1 e0 03             	shl    eax,0x3
c001768e:	05 c0 04 03 c0       	add    eax,0xc00304c0
c0017693:	83 ec 04             	sub    esp,0x4
c0017696:	6a 04                	push   0x4
c0017698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001769c:	50                   	push   eax
c001769d:	e8 a2 90 fe ff       	call   c0000744 <memcpy>
c00176a2:	83 c4 10             	add    esp,0x10
c00176a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176b4:	05 00 10 00 00       	add    eax,0x1000
c00176b9:	c1 e8 0c             	shr    eax,0xc
c00176bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00176c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00176c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176cb:	25 ff 0f 00 00       	and    eax,0xfff
c00176d0:	89 c6                	mov    esi,eax
c00176d2:	e8 d8 a5 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c00176d7:	89 c3                	mov    ebx,eax
c00176d9:	83 ec 0c             	sub    esp,0xc
c00176dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176e0:	e8 3a a4 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00176e5:	83 c4 10             	add    esp,0x10
c00176e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176f2:	83 ec 0c             	sub    esp,0xc
c00176f5:	6a 01                	push   0x1
c00176f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176fb:	50                   	push   eax
c00176fc:	52                   	push   edx
c00176fd:	53                   	push   ebx
c00176fe:	e8 db ad ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017703:	83 c4 20             	add    esp,0x20
c0017706:	09 f0                	or     eax,esi
c0017708:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001770c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001770f:	83 ec 0c             	sub    esp,0xc
c0017712:	50                   	push   eax
c0017713:	e8 6b a7 ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c0017718:	83 c4 10             	add    esp,0x10
c001771b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001771f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017723:	89 14 c5 c4 04 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfb3c],edx
c001772a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001772e:	e9 ed fe ff ff       	jmp    c0017620 <loadACPITables(unsigned char*)+0x10d>
c0017733:	90                   	nop
c0017734:	83 c4 44             	add    esp,0x44
c0017737:	5b                   	pop    ebx
c0017738:	5e                   	pop    esi
c0017739:	c3                   	ret    

c001773a <findRSDT(unsigned char*)>:
c001773a:	56                   	push   esi
c001773b:	53                   	push   ebx
c001773c:	83 ec 44             	sub    esp,0x44
c001773f:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0017744:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001774a:	83 e0 04             	and    eax,0x4
c001774d:	84 c0                	test   al,al
c001774f:	75 0a                	jne    c001775b <findRSDT(unsigned char*)+0x21>
c0017751:	b8 00 00 00 00       	mov    eax,0x0
c0017756:	e9 f7 00 00 00       	jmp    c0017852 <findRSDT(unsigned char*)+0x118>
c001775b:	83 ec 04             	sub    esp,0x4
c001775e:	6a 24                	push   0x24
c0017760:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017764:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017768:	50                   	push   eax
c0017769:	e8 d6 8f fe ff       	call   c0000744 <memcpy>
c001776e:	83 c4 10             	add    esp,0x10
c0017771:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017775:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017779:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017781:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017785:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017789:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001778d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017791:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017795:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017799:	25 ff 0f 00 00       	and    eax,0xfff
c001779e:	89 c6                	mov    esi,eax
c00177a0:	e8 0a a5 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c00177a5:	89 c3                	mov    ebx,eax
c00177a7:	83 ec 0c             	sub    esp,0xc
c00177aa:	6a 02                	push   0x2
c00177ac:	e8 6e a3 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00177b1:	83 c4 10             	add    esp,0x10
c00177b4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00177b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177be:	83 ec 0c             	sub    esp,0xc
c00177c1:	6a 01                	push   0x1
c00177c3:	6a 02                	push   0x2
c00177c5:	50                   	push   eax
c00177c6:	52                   	push   edx
c00177c7:	53                   	push   ebx
c00177c8:	e8 11 ad ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177cd:	83 c4 20             	add    esp,0x20
c00177d0:	09 f0                	or     eax,esi
c00177d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177da:	25 ff 0f 00 00       	and    eax,0xfff
c00177df:	89 c6                	mov    esi,eax
c00177e1:	e8 c9 a4 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c00177e6:	89 c3                	mov    ebx,eax
c00177e8:	83 ec 0c             	sub    esp,0xc
c00177eb:	6a 02                	push   0x2
c00177ed:	e8 2d a3 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177f9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177ff:	83 ec 0c             	sub    esp,0xc
c0017802:	6a 01                	push   0x1
c0017804:	6a 02                	push   0x2
c0017806:	50                   	push   eax
c0017807:	52                   	push   edx
c0017808:	53                   	push   ebx
c0017809:	e8 d0 ac ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001780e:	83 c4 20             	add    esp,0x20
c0017811:	09 f0                	or     eax,esi
c0017813:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017817:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001781c:	75 11                	jne    c001782f <findRSDT(unsigned char*)+0xf5>
c001781e:	c6 05 c0 06 03 c0 00 	mov    BYTE PTR ds:0xc00306c0,0x0
c0017825:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017829:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001782d:	eb 1f                	jmp    c001784e <findRSDT(unsigned char*)+0x114>
c001782f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017834:	75 11                	jne    c0017847 <findRSDT(unsigned char*)+0x10d>
c0017836:	c6 05 c0 06 03 c0 01 	mov    BYTE PTR ds:0xc00306c0,0x1
c001783d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017841:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017845:	eb 07                	jmp    c001784e <findRSDT(unsigned char*)+0x114>
c0017847:	b8 00 00 00 00       	mov    eax,0x0
c001784c:	eb 04                	jmp    c0017852 <findRSDT(unsigned char*)+0x118>
c001784e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017852:	83 c4 44             	add    esp,0x44
c0017855:	5b                   	pop    ebx
c0017856:	5e                   	pop    esi
c0017857:	c3                   	ret    

c0017858 <findDataTable(unsigned char*, char*)>:
c0017858:	83 ec 1c             	sub    esp,0x1c
c001785b:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0017860:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017866:	83 e0 04             	and    eax,0x4
c0017869:	84 c0                	test   al,al
c001786b:	75 07                	jne    c0017874 <findDataTable(unsigned char*, char*)+0x1c>
c001786d:	b8 00 00 00 00       	mov    eax,0x0
c0017872:	eb 7c                	jmp    c00178f0 <findDataTable(unsigned char*, char*)+0x98>
c0017874:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001787c:	a1 ac 04 03 c0       	mov    eax,ds:0xc00304ac
c0017881:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017885:	7d 3a                	jge    c00178c1 <findDataTable(unsigned char*, char*)+0x69>
c0017887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001788b:	c1 e0 03             	shl    eax,0x3
c001788e:	05 c0 04 03 c0       	add    eax,0xc00304c0
c0017893:	83 ec 04             	sub    esp,0x4
c0017896:	6a 04                	push   0x4
c0017898:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001789c:	50                   	push   eax
c001789d:	e8 9e 8d fe ff       	call   c0000640 <memcmp>
c00178a2:	83 c4 10             	add    esp,0x10
c00178a5:	85 c0                	test   eax,eax
c00178a7:	0f 94 c0             	sete   al
c00178aa:	84 c0                	test   al,al
c00178ac:	74 0d                	je     c00178bb <findDataTable(unsigned char*, char*)+0x63>
c00178ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178b2:	8b 04 c5 c4 04 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfb3c]
c00178b9:	eb 35                	jmp    c00178f0 <findDataTable(unsigned char*, char*)+0x98>
c00178bb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178bf:	eb bb                	jmp    c001787c <findDataTable(unsigned char*, char*)+0x24>
c00178c1:	a0 c0 06 03 c0       	mov    al,ds:0xc00306c0
c00178c6:	84 c0                	test   al,al
c00178c8:	74 07                	je     c00178d1 <findDataTable(unsigned char*, char*)+0x79>
c00178ca:	b8 58 00 00 00       	mov    eax,0x58
c00178cf:	eb 05                	jmp    c00178d6 <findDataTable(unsigned char*, char*)+0x7e>
c00178d1:	b8 52 00 00 00       	mov    eax,0x52
c00178d6:	83 ec 04             	sub    esp,0x4
c00178d9:	50                   	push   eax
c00178da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178de:	68 c8 af 02 c0       	push   0xc002afc8
c00178e3:	e8 27 b2 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00178e8:	83 c4 10             	add    esp,0x10
c00178eb:	b8 00 00 00 00       	mov    eax,0x0
c00178f0:	83 c4 1c             	add    esp,0x1c
c00178f3:	c3                   	ret    

c00178f4 <scanMADT()>:
c00178f4:	53                   	push   ebx
c00178f5:	83 ec 38             	sub    esp,0x38
c00178f8:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00178fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017903:	83 e0 04             	and    eax,0x4
c0017906:	84 c0                	test   al,al
c0017908:	0f 84 63 04 00 00    	je     c0017d71 <scanMADT()+0x47d>
c001790e:	e8 76 fb ff ff       	call   c0017489 <findRSDP()>
c0017913:	a3 cc 06 03 c0       	mov    ds:0xc00306cc,eax
c0017918:	a1 cc 06 03 c0       	mov    eax,ds:0xc00306cc
c001791d:	85 c0                	test   eax,eax
c001791f:	75 19                	jne    c001793a <scanMADT()+0x46>
c0017921:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0017926:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001792c:	83 e2 fb             	and    edx,0xfffffffb
c001792f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017935:	e9 3b 04 00 00       	jmp    c0017d75 <scanMADT()+0x481>
c001793a:	a1 cc 06 03 c0       	mov    eax,ds:0xc00306cc
c001793f:	83 ec 0c             	sub    esp,0xc
c0017942:	50                   	push   eax
c0017943:	e8 f2 fd ff ff       	call   c001773a <findRSDT(unsigned char*)>
c0017948:	83 c4 10             	add    esp,0x10
c001794b:	a3 c8 06 03 c0       	mov    ds:0xc00306c8,eax
c0017950:	a1 c8 06 03 c0       	mov    eax,ds:0xc00306c8
c0017955:	85 c0                	test   eax,eax
c0017957:	75 19                	jne    c0017972 <scanMADT()+0x7e>
c0017959:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001795e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017964:	83 e2 fb             	and    edx,0xfffffffb
c0017967:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001796d:	e9 03 04 00 00       	jmp    c0017d75 <scanMADT()+0x481>
c0017972:	a1 c8 06 03 c0       	mov    eax,ds:0xc00306c8
c0017977:	83 ec 0c             	sub    esp,0xc
c001797a:	50                   	push   eax
c001797b:	e8 93 fb ff ff       	call   c0017513 <loadACPITables(unsigned char*)>
c0017980:	83 c4 10             	add    esp,0x10
c0017983:	a1 c8 06 03 c0       	mov    eax,ds:0xc00306c8
c0017988:	83 ec 08             	sub    esp,0x8
c001798b:	68 96 ae 02 c0       	push   0xc002ae96
c0017990:	50                   	push   eax
c0017991:	e8 c2 fe ff ff       	call   c0017858 <findDataTable(unsigned char*, char*)>
c0017996:	83 c4 10             	add    esp,0x10
c0017999:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001799d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00179a2:	75 19                	jne    c00179bd <scanMADT()+0xc9>
c00179a4:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00179a9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179af:	83 e2 fe             	and    edx,0xfffffffe
c00179b2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179b8:	e9 b8 03 00 00       	jmp    c0017d75 <scanMADT()+0x481>
c00179bd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00179c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179cc:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179d0:	0f 87 9f 03 00 00    	ja     c0017d75 <scanMADT()+0x481>
c00179d6:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179de:	0f 87 91 03 00 00    	ja     c0017d75 <scanMADT()+0x481>
c00179e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f0:	8d 50 01             	lea    edx,[eax+0x1]
c00179f3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179fb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179ff:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017a03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a07:	8d 50 01             	lea    edx,[eax+0x1]
c0017a0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a12:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a16:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017a1a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017a1f:	0f 86 4f 03 00 00    	jbe    c0017d74 <scanMADT()+0x480>
c0017a25:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a2a:	75 57                	jne    c0017a83 <scanMADT()+0x18f>
c0017a2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a30:	8d 50 01             	lea    edx,[eax+0x1]
c0017a33:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a37:	8a 15 c0 08 03 c0    	mov    dl,BYTE PTR ds:0xc00308c0
c0017a3d:	0f b6 d2             	movzx  edx,dl
c0017a40:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a44:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a48:	88 82 00 09 03 c0    	mov    BYTE PTR [edx-0x3ffcf700],al
c0017a4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a52:	8d 50 01             	lea    edx,[eax+0x1]
c0017a55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a59:	8a 15 c0 08 03 c0    	mov    dl,BYTE PTR ds:0xc00308c0
c0017a5f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a62:	88 0d c0 08 03 c0    	mov    BYTE PTR ds:0xc00308c0,cl
c0017a68:	0f b6 d2             	movzx  edx,dl
c0017a6b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a6f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a73:	88 82 e0 08 03 c0    	mov    BYTE PTR [edx-0x3ffcf720],al
c0017a79:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a7e:	e9 da 02 00 00       	jmp    c0017d5d <scanMADT()+0x469>
c0017a83:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a88:	0f 85 14 01 00 00    	jne    c0017ba2 <scanMADT()+0x2ae>
c0017a8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a92:	8d 50 01             	lea    edx,[eax+0x1]
c0017a95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a99:	8a 15 80 07 03 c0    	mov    dl,BYTE PTR ds:0xc0030780
c0017a9f:	0f b6 d2             	movzx  edx,dl
c0017aa2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017aa6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017aaa:	88 82 a0 07 03 c0    	mov    BYTE PTR [edx-0x3ffcf860],al
c0017ab0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017ab4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ab8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017abc:	01 d0                	add    eax,edx
c0017abe:	83 c0 2c             	add    eax,0x2c
c0017ac1:	8a 00                	mov    al,BYTE PTR [eax]
c0017ac3:	0f b6 d0             	movzx  edx,al
c0017ac6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aca:	8d 48 01             	lea    ecx,[eax+0x1]
c0017acd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ad5:	0f b6 c0             	movzx  eax,al
c0017ad8:	c1 e0 08             	shl    eax,0x8
c0017adb:	89 d1                	mov    ecx,edx
c0017add:	09 c1                	or     ecx,eax
c0017adf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae3:	8d 50 02             	lea    edx,[eax+0x2]
c0017ae6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017aee:	0f b6 c0             	movzx  eax,al
c0017af1:	c1 e0 10             	shl    eax,0x10
c0017af4:	09 c1                	or     ecx,eax
c0017af6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017afa:	8d 50 03             	lea    edx,[eax+0x3]
c0017afd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b01:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b05:	0f b6 c0             	movzx  eax,al
c0017b08:	c1 e0 18             	shl    eax,0x18
c0017b0b:	09 c1                	or     ecx,eax
c0017b0d:	89 ca                	mov    edx,ecx
c0017b0f:	a0 80 07 03 c0       	mov    al,ds:0xc0030780
c0017b14:	0f b6 c0             	movzx  eax,al
c0017b17:	89 14 85 c0 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf840],edx
c0017b1e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b2b:	01 d0                	add    eax,edx
c0017b2d:	83 c0 2c             	add    eax,0x2c
c0017b30:	8a 00                	mov    al,BYTE PTR [eax]
c0017b32:	0f b6 d0             	movzx  edx,al
c0017b35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b39:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b40:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b44:	0f b6 c0             	movzx  eax,al
c0017b47:	c1 e0 08             	shl    eax,0x8
c0017b4a:	89 d1                	mov    ecx,edx
c0017b4c:	09 c1                	or     ecx,eax
c0017b4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b52:	8d 50 02             	lea    edx,[eax+0x2]
c0017b55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b59:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b5d:	0f b6 c0             	movzx  eax,al
c0017b60:	c1 e0 10             	shl    eax,0x10
c0017b63:	09 c1                	or     ecx,eax
c0017b65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b69:	8d 50 03             	lea    edx,[eax+0x3]
c0017b6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b70:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b74:	0f b6 c0             	movzx  eax,al
c0017b77:	c1 e0 18             	shl    eax,0x18
c0017b7a:	09 c1                	or     ecx,eax
c0017b7c:	89 ca                	mov    edx,ecx
c0017b7e:	a0 80 07 03 c0       	mov    al,ds:0xc0030780
c0017b83:	0f b6 c0             	movzx  eax,al
c0017b86:	89 14 85 40 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf7c0],edx
c0017b8d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b92:	a0 80 07 03 c0       	mov    al,ds:0xc0030780
c0017b97:	40                   	inc    eax
c0017b98:	a2 80 07 03 c0       	mov    ds:0xc0030780,al
c0017b9d:	e9 bb 01 00 00       	jmp    c0017d5d <scanMADT()+0x469>
c0017ba2:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017ba7:	0f 85 e9 00 00 00    	jne    c0017c96 <scanMADT()+0x3a2>
c0017bad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb1:	8d 50 01             	lea    edx,[eax+0x1]
c0017bb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bb8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bbc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bc0:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017bc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bc8:	8d 50 01             	lea    edx,[eax+0x1]
c0017bcb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bcf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bd3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bd7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be3:	01 d0                	add    eax,edx
c0017be5:	83 c0 2c             	add    eax,0x2c
c0017be8:	8a 00                	mov    al,BYTE PTR [eax]
c0017bea:	0f b6 d0             	movzx  edx,al
c0017bed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf1:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bf4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bf8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bfc:	0f b6 c0             	movzx  eax,al
c0017bff:	c1 e0 08             	shl    eax,0x8
c0017c02:	89 d1                	mov    ecx,edx
c0017c04:	09 c1                	or     ecx,eax
c0017c06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c0a:	8d 50 02             	lea    edx,[eax+0x2]
c0017c0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c11:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c15:	0f b6 c0             	movzx  eax,al
c0017c18:	c1 e0 10             	shl    eax,0x10
c0017c1b:	09 c1                	or     ecx,eax
c0017c1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c21:	8d 50 03             	lea    edx,[eax+0x3]
c0017c24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c28:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c2c:	0f b6 c0             	movzx  eax,al
c0017c2f:	c1 e0 18             	shl    eax,0x18
c0017c32:	09 c8                	or     eax,ecx
c0017c34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c38:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c45:	01 d0                	add    eax,edx
c0017c47:	83 c0 2c             	add    eax,0x2c
c0017c4a:	8a 00                	mov    al,BYTE PTR [eax]
c0017c4c:	0f b6 c0             	movzx  eax,al
c0017c4f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c53:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c5a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c5e:	0f b6 d2             	movzx  edx,dl
c0017c61:	c1 e2 08             	shl    edx,0x8
c0017c64:	09 d0                	or     eax,edx
c0017c66:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c6b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c70:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c79:	88 90 40 d0 02 c0    	mov    BYTE PTR [eax-0x3ffd2fc0],dl
c0017c7f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c84:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c89:	66 89 84 12 60 07 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf8a0],ax
c0017c91:	e9 c7 00 00 00       	jmp    c0017d5d <scanMADT()+0x469>
c0017c96:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c9b:	0f 85 b0 00 00 00    	jne    c0017d51 <scanMADT()+0x45d>
c0017ca1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca5:	8d 50 01             	lea    edx,[eax+0x1]
c0017ca8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cb0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cb4:	0f b6 c0             	movzx  eax,al
c0017cb7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cc3:	01 d0                	add    eax,edx
c0017cc5:	83 c0 2c             	add    eax,0x2c
c0017cc8:	8a 00                	mov    al,BYTE PTR [eax]
c0017cca:	0f b6 d0             	movzx  edx,al
c0017ccd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd1:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cd8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cdc:	0f b6 c0             	movzx  eax,al
c0017cdf:	c1 e0 08             	shl    eax,0x8
c0017ce2:	09 d0                	or     eax,edx
c0017ce4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ce8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017ced:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf1:	8d 50 01             	lea    edx,[eax+0x1]
c0017cf4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cf8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cfc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d00:	0f b6 c0             	movzx  eax,al
c0017d03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d0b:	c1 e0 08             	shl    eax,0x8
c0017d0e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017d12:	89 c1                	mov    ecx,eax
c0017d14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d18:	c1 e0 18             	shl    eax,0x18
c0017d1b:	89 c3                	mov    ebx,eax
c0017d1d:	a1 d0 06 03 c0       	mov    eax,ds:0xc00306d0
c0017d22:	8d 50 01             	lea    edx,[eax+0x1]
c0017d25:	89 15 d0 06 03 c0    	mov    DWORD PTR ds:0xc00306d0,edx
c0017d2b:	09 d9                	or     ecx,ebx
c0017d2d:	89 ca                	mov    edx,ecx
c0017d2f:	89 14 85 e0 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf920],edx
c0017d36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d42:	68 f8 af 02 c0       	push   0xc002aff8
c0017d47:	e8 c3 ad ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0017d4c:	83 c4 10             	add    esp,0x10
c0017d4f:	eb 0c                	jmp    c0017d5d <scanMADT()+0x469>
c0017d51:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d56:	75 05                	jne    c0017d5d <scanMADT()+0x469>
c0017d58:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d5d:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d66:	01 d0                	add    eax,edx
c0017d68:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d6c:	e9 54 fc ff ff       	jmp    c00179c5 <scanMADT()+0xd1>
c0017d71:	90                   	nop
c0017d72:	eb 01                	jmp    c0017d75 <scanMADT()+0x481>
c0017d74:	90                   	nop
c0017d75:	83 c4 38             	add    esp,0x38
c0017d78:	5b                   	pop    ebx
c0017d79:	c3                   	ret    

c0017d7a <ACPI::ACPI()>:
c0017d7a:	83 ec 0c             	sub    esp,0xc
c0017d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d81:	83 ec 08             	sub    esp,0x8
c0017d84:	68 9b ae 02 c0       	push   0xc002ae9b
c0017d89:	50                   	push   eax
c0017d8a:	e8 97 c3 ff ff       	call   c0014126 <Device::Device(char const*)>
c0017d8f:	83 c4 10             	add    esp,0x10
c0017d92:	ba 6c b0 02 c0       	mov    edx,0xc002b06c
c0017d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d9b:	89 10                	mov    DWORD PTR [eax],edx
c0017d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dac:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dba:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dc8:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dd3:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017dda:	e8 15 fb ff ff       	call   c00178f4 <scanMADT()>
c0017ddf:	90                   	nop
c0017de0:	83 c4 0c             	add    esp,0xc
c0017de3:	c3                   	ret    

c0017de4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017de4:	83 ec 2c             	sub    esp,0x2c
c0017de7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017deb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017def:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017df3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017df7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dfc:	88 d0                	mov    al,dl
c0017dfe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017e02:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e07:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e13:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e19:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017e1d:	0f 8d 97 00 00 00    	jge    c0017eba <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017e23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e2b:	83 c2 2a             	add    edx,0x2a
c0017e2e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e32:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e37:	75 78                	jne    c0017eb1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e41:	83 c2 2a             	add    edx,0x2a
c0017e44:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e48:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e4c:	75 63                	jne    c0017eb1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e4e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e53:	74 3a                	je     c0017e8f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e55:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e5d:	83 c2 2a             	add    edx,0x2a
c0017e60:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e6b:	39 c2                	cmp    edx,eax
c0017e6d:	74 10                	je     c0017e7f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e6f:	83 ec 0c             	sub    esp,0xc
c0017e72:	68 34 b0 02 c0       	push   0xc002b034
c0017e77:	e8 0f 23 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	83 ec 0c             	sub    esp,0xc
c0017e82:	68 a0 ae 02 c0       	push   0xc002aea0
c0017e87:	e8 ff 22 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0017e8c:	83 c4 10             	add    esp,0x10
c0017e8f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e9b:	83 c2 2a             	add    edx,0x2a
c0017e9e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017ea2:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ea4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ea7:	89 01                	mov    DWORD PTR [ecx],eax
c0017ea9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017eac:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017eb1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017eb5:	e9 55 ff ff ff       	jmp    c0017e0f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017eba:	90                   	nop
c0017ebb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ebf:	83 c4 2c             	add    esp,0x2c
c0017ec2:	c2 04 00             	ret    0x4
c0017ec5:	90                   	nop

c0017ec6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017ec6:	83 ec 1c             	sub    esp,0x1c
c0017ec9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ecd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ed1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ed5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017eda:	88 c8                	mov    al,cl
c0017edc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017ee0:	88 d0                	mov    al,dl
c0017ee2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eea:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ef7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017efb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f03:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f0d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017f10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f14:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f23:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017f27:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2e:	83 c2 2a             	add    edx,0x2a
c0017f31:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f39:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f43:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f46:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f4a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f52:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f58:	8d 50 01             	lea    edx,[eax+0x1]
c0017f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f69:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f6f:	3d 00 02 00 00       	cmp    eax,0x200
c0017f74:	75 10                	jne    c0017f86 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f76:	83 ec 0c             	sub    esp,0xc
c0017f79:	68 af ae 02 c0       	push   0xc002aeaf
c0017f7e:	e8 08 22 00 00       	call   c001a18b <Krnl::panic(char const*)>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	90                   	nop
c0017f87:	83 c4 1c             	add    esp,0x1c
c0017f8a:	c3                   	ret    
c0017f8b:	90                   	nop

c0017f8c <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f8c:	b8 00 00 00 00       	mov    eax,0x0
c0017f91:	c3                   	ret    

c0017f92 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017f92:	83 ec 1c             	sub    esp,0x1c
c0017f95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f99:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017f9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017fa0:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0017fa5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017faa:	83 ec 08             	sub    esp,0x8
c0017fad:	52                   	push   edx
c0017fae:	50                   	push   eax
c0017faf:	e8 a4 6e ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0017fb4:	83 c4 10             	add    esp,0x10
c0017fb7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017fbb:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0017fc0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017fc5:	83 ec 04             	sub    esp,0x4
c0017fc8:	6a 01                	push   0x1
c0017fca:	52                   	push   edx
c0017fcb:	50                   	push   eax
c0017fcc:	e8 9d 6f ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fd1:	83 c4 10             	add    esp,0x10
c0017fd4:	90                   	nop
c0017fd5:	83 c4 1c             	add    esp,0x1c
c0017fd8:	c3                   	ret    
c0017fd9:	90                   	nop

c0017fda <ACPI::open(int, int, void*)>:
c0017fda:	53                   	push   ebx
c0017fdb:	83 ec 28             	sub    esp,0x28
c0017fde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fe2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017fe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fed:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017ff4:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0017ff9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fff:	83 e0 04             	and    eax,0x4
c0018002:	84 c0                	test   al,al
c0018004:	74 47                	je     c001804d <ACPI::open(int, int, void*)+0x73>
c0018006:	a1 c8 06 03 c0       	mov    eax,ds:0xc00306c8
c001800b:	83 ec 08             	sub    esp,0x8
c001800e:	68 cc ae 02 c0       	push   0xc002aecc
c0018013:	50                   	push   eax
c0018014:	e8 3f f8 ff ff       	call   c0017858 <findDataTable(unsigned char*, char*)>
c0018019:	83 c4 10             	add    esp,0x10
c001801c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018020:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018025:	74 26                	je     c001804d <ACPI::open(int, int, void*)+0x73>
c0018027:	83 ec 0c             	sub    esp,0xc
c001802a:	68 d1 ae 02 c0       	push   0xc002aed1
c001802f:	e8 db aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018034:	83 c4 10             	add    esp,0x10
c0018037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001803b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018046:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001804d:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018055:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018059:	8a 00                	mov    al,BYTE PTR [eax]
c001805b:	3c 01                	cmp    al,0x1
c001805d:	75 28                	jne    c0018087 <ACPI::open(int, int, void*)+0xad>
c001805f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018063:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001806a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001806e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018075:	83 ec 0c             	sub    esp,0xc
c0018078:	68 e2 ae 02 c0       	push   0xc002aee2
c001807d:	e8 8d aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018082:	83 c4 10             	add    esp,0x10
c0018085:	eb 25                	jmp    c00180ac <ACPI::open(int, int, void*)+0xd2>
c0018087:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001808b:	8a 00                	mov    al,BYTE PTR [eax]
c001808d:	3c 02                	cmp    al,0x2
c001808f:	75 1b                	jne    c00180ac <ACPI::open(int, int, void*)+0xd2>
c0018091:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018095:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001809c:	83 ec 0c             	sub    esp,0xc
c001809f:	68 ea ae 02 c0       	push   0xc002aeea
c00180a4:	e8 66 aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b0:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00180b6:	83 f0 01             	xor    eax,0x1
c00180b9:	84 c0                	test   al,al
c00180bb:	74 6a                	je     c0018127 <ACPI::open(int, int, void*)+0x14d>
c00180bd:	83 ec 0c             	sub    esp,0xc
c00180c0:	68 f2 ae 02 c0       	push   0xc002aef2
c00180c5:	e8 45 aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00180ca:	83 c4 10             	add    esp,0x10
c00180cd:	e8 7e 80 fe ff       	call   c0000150 <manualPCIProbe>
c00180d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180d6:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00180db:	75 28                	jne    c0018105 <ACPI::open(int, int, void*)+0x12b>
c00180dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180ec:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00180f3:	83 ec 0c             	sub    esp,0xc
c00180f6:	68 00 af 02 c0       	push   0xc002af00
c00180fb:	e8 0f aa ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018100:	83 c4 10             	add    esp,0x10
c0018103:	eb 22                	jmp    c0018127 <ACPI::open(int, int, void*)+0x14d>
c0018105:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001810a:	75 1b                	jne    c0018127 <ACPI::open(int, int, void*)+0x14d>
c001810c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018110:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018117:	83 ec 0c             	sub    esp,0xc
c001811a:	68 0a af 02 c0       	push   0xc002af0a
c001811f:	e8 eb a9 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001812b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018131:	84 c0                	test   al,al
c0018133:	74 13                	je     c0018148 <ACPI::open(int, int, void*)+0x16e>
c0018135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018139:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001813f:	83 f0 01             	xor    eax,0x1
c0018142:	0f b6 c0             	movzx  eax,al
c0018145:	40                   	inc    eax
c0018146:	eb 05                	jmp    c001814d <ACPI::open(int, int, void*)+0x173>
c0018148:	b8 00 00 00 00       	mov    eax,0x0
c001814d:	83 ec 08             	sub    esp,0x8
c0018150:	50                   	push   eax
c0018151:	68 14 af 02 c0       	push   0xc002af14
c0018156:	e8 b4 a9 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001815b:	83 c4 10             	add    esp,0x10
c001815e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018162:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018168:	84 c0                	test   al,al
c001816a:	74 67                	je     c00181d3 <ACPI::open(int, int, void*)+0x1f9>
c001816c:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018174:	83 ec 0c             	sub    esp,0xc
c0018177:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001817b:	e8 c0 76 ff ff       	call   c000f840 <malloc>
c0018180:	83 c4 10             	add    esp,0x10
c0018183:	89 c3                	mov    ebx,eax
c0018185:	83 ec 0c             	sub    esp,0xc
c0018188:	53                   	push   ebx
c0018189:	e8 8a a2 00 00       	call   c0022418 <PCI::PCI()>
c001818e:	83 c4 10             	add    esp,0x10
c0018191:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018195:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018199:	83 ec 08             	sub    esp,0x8
c001819c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00181a0:	50                   	push   eax
c00181a1:	e8 90 bd ff ff       	call   c0013f36 <Device::addChild(Device*)>
c00181a6:	83 c4 10             	add    esp,0x10
c00181a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00181af:	83 c0 08             	add    eax,0x8
c00181b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00181b4:	6a 00                	push   0x0
c00181b6:	6a 00                	push   0x0
c00181b8:	6a 00                	push   0x0
c00181ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181be:	ff d0                	call   eax
c00181c0:	83 c4 10             	add    esp,0x10
c00181c3:	83 ec 0c             	sub    esp,0xc
c00181c6:	68 1d af 02 c0       	push   0xc002af1d
c00181cb:	e8 3f a9 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	83 ec 0c             	sub    esp,0xc
c00181d6:	68 28 af 02 c0       	push   0xc002af28
c00181db:	e8 a2 45 00 00       	call   c001c782 <Thr::loadKernelSymbolTable(char const*)>
c00181e0:	83 c4 10             	add    esp,0x10
c00181e3:	8b 1d e8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde8
c00181e9:	83 ec 08             	sub    esp,0x8
c00181ec:	6a 01                	push   0x1
c00181ee:	68 46 af 02 c0       	push   0xc002af46
c00181f3:	e8 e7 4f 00 00       	call   c001d1df <Thr::loadDLL(char const*, bool)>
c00181f8:	83 c4 10             	add    esp,0x10
c00181fb:	83 ec 08             	sub    esp,0x8
c00181fe:	53                   	push   ebx
c00181ff:	50                   	push   eax
c0018200:	e8 0e 52 00 00       	call   c001d413 <Thr::executeDLL(unsigned long, void*)>
c0018205:	83 c4 10             	add    esp,0x10
c0018208:	8b 1d e8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde8
c001820e:	83 ec 08             	sub    esp,0x8
c0018211:	6a 01                	push   0x1
c0018213:	68 63 af 02 c0       	push   0xc002af63
c0018218:	e8 c2 4f 00 00       	call   c001d1df <Thr::loadDLL(char const*, bool)>
c001821d:	83 c4 10             	add    esp,0x10
c0018220:	83 ec 08             	sub    esp,0x8
c0018223:	53                   	push   ebx
c0018224:	50                   	push   eax
c0018225:	e8 e9 51 00 00       	call   c001d413 <Thr::executeDLL(unsigned long, void*)>
c001822a:	83 c4 10             	add    esp,0x10
c001822d:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0018232:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018238:	83 e0 04             	and    eax,0x4
c001823b:	84 c0                	test   al,al
c001823d:	0f 84 d2 00 00 00    	je     c0018315 <ACPI::open(int, int, void*)+0x33b>
c0018243:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001824a:	83 ec 0c             	sub    esp,0xc
c001824d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018251:	e8 ea 75 ff ff       	call   c000f840 <malloc>
c0018256:	83 c4 10             	add    esp,0x10
c0018259:	89 c3                	mov    ebx,eax
c001825b:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c0018260:	83 ec 04             	sub    esp,0x4
c0018263:	50                   	push   eax
c0018264:	68 80 af 02 c0       	push   0xc002af80
c0018269:	53                   	push   ebx
c001826a:	e8 f9 ad ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001826f:	83 c4 10             	add    esp,0x10
c0018272:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018276:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001827b:	74 17                	je     c0018294 <ACPI::open(int, int, void*)+0x2ba>
c001827d:	83 ec 0c             	sub    esp,0xc
c0018280:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018284:	e8 b1 b0 ff ff       	call   c001333a <File::exists()>
c0018289:	83 c4 10             	add    esp,0x10
c001828c:	84 c0                	test   al,al
c001828e:	74 04                	je     c0018294 <ACPI::open(int, int, void*)+0x2ba>
c0018290:	b0 01                	mov    al,0x1
c0018292:	eb 02                	jmp    c0018296 <ACPI::open(int, int, void*)+0x2bc>
c0018294:	b0 00                	mov    al,0x0
c0018296:	84 c0                	test   al,al
c0018298:	74 22                	je     c00182bc <ACPI::open(int, int, void*)+0x2e2>
c001829a:	83 ec 08             	sub    esp,0x8
c001829d:	6a 01                	push   0x1
c001829f:	68 80 af 02 c0       	push   0xc002af80
c00182a4:	e8 36 4f 00 00       	call   c001d1df <Thr::loadDLL(char const*, bool)>
c00182a9:	83 c4 10             	add    esp,0x10
c00182ac:	83 ec 08             	sub    esp,0x8
c00182af:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00182b3:	50                   	push   eax
c00182b4:	e8 5a 51 00 00       	call   c001d413 <Thr::executeDLL(unsigned long, void*)>
c00182b9:	83 c4 10             	add    esp,0x10
c00182bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182c1:	74 1e                	je     c00182e1 <ACPI::open(int, int, void*)+0x307>
c00182c3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182c8:	74 17                	je     c00182e1 <ACPI::open(int, int, void*)+0x307>
c00182ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00182d0:	83 c0 08             	add    eax,0x8
c00182d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00182d5:	83 ec 0c             	sub    esp,0xc
c00182d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182dc:	ff d0                	call   eax
c00182de:	83 c4 10             	add    esp,0x10
c00182e1:	a1 c8 06 03 c0       	mov    eax,ds:0xc00306c8
c00182e6:	83 ec 08             	sub    esp,0x8
c00182e9:	68 9d af 02 c0       	push   0xc002af9d
c00182ee:	50                   	push   eax
c00182ef:	e8 64 f5 ff ff       	call   c0017858 <findDataTable(unsigned char*, char*)>
c00182f4:	83 c4 10             	add    esp,0x10
c00182f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182fb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018300:	74 13                	je     c0018315 <ACPI::open(int, int, void*)+0x33b>
c0018302:	83 ec 08             	sub    esp,0x8
c0018305:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018309:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001830d:	e8 80 fc ff ff       	call   c0017f92 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018312:	83 c4 10             	add    esp,0x10
c0018315:	b8 00 00 00 00       	mov    eax,0x0
c001831a:	83 c4 28             	add    esp,0x28
c001831d:	5b                   	pop    ebx
c001831e:	c3                   	ret    
c001831f:	90                   	nop

c0018320 <ACPI::sleep()>:
c0018320:	83 ec 0c             	sub    esp,0xc
c0018323:	a1 a0 04 03 c0       	mov    eax,ds:0xc00304a0
c0018328:	85 c0                	test   eax,eax
c001832a:	74 07                	je     c0018333 <ACPI::sleep()+0x13>
c001832c:	a1 a0 04 03 c0       	mov    eax,ds:0xc00304a0
c0018331:	ff d0                	call   eax
c0018333:	90                   	nop
c0018334:	83 c4 0c             	add    esp,0xc
c0018337:	c3                   	ret    

c0018338 <CPU::close(int, int, void*)>:
c0018338:	31 c0                	xor    eax,eax
c001833a:	c3                   	ret    
c001833b:	90                   	nop

c001833c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001833c:	55                   	push   ebp
c001833d:	57                   	push   edi
c001833e:	56                   	push   esi
c001833f:	53                   	push   ebx
c0018340:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018344:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018348:	89 ce                	mov    esi,ecx
c001834a:	89 d5                	mov    ebp,edx
c001834c:	80 f9 04             	cmp    cl,0x4
c001834f:	75 28                	jne    c0018379 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018351:	8d 42 f9             	lea    eax,[edx-0x7]
c0018354:	3c 03                	cmp    al,0x3
c0018356:	0f 86 63 01 00 00    	jbe    c00184bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001835c:	80 fa 03             	cmp    dl,0x3
c001835f:	0f 84 5a 01 00 00    	je     c00184bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018365:	8d 7a f2             	lea    edi,[edx-0xe]
c0018368:	b8 10 d2 02 c0       	mov    eax,0xc002d210
c001836d:	89 fb                	mov    ebx,edi
c001836f:	80 fb 01             	cmp    bl,0x1
c0018372:	77 4e                	ja     c00183c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018374:	e9 52 01 00 00       	jmp    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018379:	80 f9 05             	cmp    cl,0x5
c001837c:	75 4d                	jne    c00183cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001837e:	b8 20 d2 02 c0       	mov    eax,0xc002d220
c0018383:	80 fa 03             	cmp    dl,0x3
c0018386:	0f 86 3f 01 00 00    	jbe    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001838c:	8d 7a fa             	lea    edi,[edx-0x6]
c001838f:	b8 30 d2 02 c0       	mov    eax,0xc002d230
c0018394:	89 fb                	mov    ebx,edi
c0018396:	80 fb 01             	cmp    bl,0x1
c0018399:	0f 86 2c 01 00 00    	jbe    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001839f:	b8 40 d2 02 c0       	mov    eax,0xc002d240
c00183a4:	80 fa 08             	cmp    dl,0x8
c00183a7:	0f 84 1e 01 00 00    	je     c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ad:	89 d7                	mov    edi,edx
c00183af:	b8 50 d2 02 c0       	mov    eax,0xc002d250
c00183b4:	83 e7 fb             	and    edi,0xfffffffb
c00183b7:	89 fb                	mov    ebx,edi
c00183b9:	80 fb 09             	cmp    bl,0x9
c00183bc:	0f 84 09 01 00 00    	je     c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c2:	31 c0                	xor    eax,eax
c00183c4:	89 eb                	mov    ebx,ebp
c00183c6:	0f b6 fb             	movzx  edi,bl
c00183c9:	eb 30                	jmp    c00183fb <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00183cb:	31 c0                	xor    eax,eax
c00183cd:	80 f9 06             	cmp    cl,0x6
c00183d0:	75 f2                	jne    c00183c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183d2:	80 fa 0a             	cmp    dl,0xa
c00183d5:	77 ed                	ja     c00183c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183d7:	bf de 05 00 00       	mov    edi,0x5de
c00183dc:	0f a3 d7             	bt     edi,edx
c00183df:	73 e3                	jae    c00183c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183e1:	b8 60 d2 02 c0       	mov    eax,0xc002d260
c00183e6:	e9 e0 00 00 00       	jmp    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183eb:	39 c7                	cmp    edi,eax
c00183ed:	0f 84 d3 00 00 00    	je     c00184c6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183f3:	40                   	inc    eax
c00183f4:	3d d0 00 00 00       	cmp    eax,0xd0
c00183f9:	74 09                	je     c0018404 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00183fb:	89 f3                	mov    ebx,esi
c00183fd:	80 fb 0f             	cmp    bl,0xf
c0018400:	75 f1                	jne    c00183f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018402:	eb e7                	jmp    c00183eb <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018404:	80 f9 10             	cmp    cl,0x10
c0018407:	75 14                	jne    c001841d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018409:	8d 42 fc             	lea    eax,[edx-0x4]
c001840c:	83 e0 fb             	and    eax,0xfffffffb
c001840f:	3c 02                	cmp    al,0x2
c0018411:	76 34                	jbe    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018413:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c0018418:	80 fa 02             	cmp    dl,0x2
c001841b:	eb 24                	jmp    c0018441 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001841d:	80 f9 11             	cmp    cl,0x11
c0018420:	75 13                	jne    c0018435 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018422:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c0018427:	80 fa 03             	cmp    dl,0x3
c001842a:	0f 85 9b 00 00 00    	jne    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018430:	e9 91 00 00 00       	jmp    c00184c6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018435:	80 f9 12             	cmp    cl,0x12
c0018438:	75 14                	jne    c001844e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001843a:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c001843f:	fe ca                	dec    dl
c0018441:	0f 85 84 00 00 00    	jne    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018447:	b8 80 d2 02 c0       	mov    eax,0xc002d280
c001844c:	eb 7d                	jmp    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844e:	80 f9 14             	cmp    cl,0x14
c0018451:	75 12                	jne    c0018465 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018453:	4a                   	dec    edx
c0018454:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c0018459:	80 fa 01             	cmp    dl,0x1
c001845c:	77 6d                	ja     c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001845e:	b8 90 d2 02 c0       	mov    eax,0xc002d290
c0018463:	eb 66                	jmp    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018465:	80 f9 15             	cmp    cl,0x15
c0018468:	75 31                	jne    c001849b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001846a:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c001846f:	80 fa 01             	cmp    dl,0x1
c0018472:	74 57                	je     c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018474:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c0018479:	80 fa 13             	cmp    dl,0x13
c001847c:	76 0c                	jbe    c001848a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001847e:	80 fa 30             	cmp    dl,0x30
c0018481:	75 48                	jne    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018483:	b8 c0 d2 02 c0       	mov    eax,0xc002d2c0
c0018488:	eb 41                	jmp    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001848a:	b9 04 00 09 00       	mov    ecx,0x90004
c001848f:	0f a3 d1             	bt     ecx,edx
c0018492:	73 37                	jae    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018494:	b8 b0 d2 02 c0       	mov    eax,0xc002d2b0
c0018499:	eb 30                	jmp    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001849b:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c00184a0:	80 f9 16             	cmp    cl,0x16
c00184a3:	75 26                	jne    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184a5:	b8 d0 d2 02 c0       	mov    eax,0xc002d2d0
c00184aa:	84 d2                	test   dl,dl
c00184ac:	74 1d                	je     c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ae:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c00184b3:	80 fa 30             	cmp    dl,0x30
c00184b6:	75 13                	jne    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184b8:	b8 e0 d2 02 c0       	mov    eax,0xc002d2e0
c00184bd:	eb 0c                	jmp    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184bf:	b8 00 d2 02 c0       	mov    eax,0xc002d200
c00184c4:	eb 05                	jmp    c00184cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184c6:	b8 70 d2 02 c0       	mov    eax,0xc002d270
c00184cb:	5b                   	pop    ebx
c00184cc:	5e                   	pop    esi
c00184cd:	5f                   	pop    edi
c00184ce:	5d                   	pop    ebp
c00184cf:	c3                   	ret    

c00184d0 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00184d0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00184d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184d8:	80 f9 04             	cmp    cl,0x4
c00184db:	75 6b                	jne    c0018548 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00184dd:	b8 60 d0 02 c0       	mov    eax,0xc002d060
c00184e2:	80 fa 01             	cmp    dl,0x1
c00184e5:	0f 86 92 02 00 00    	jbe    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184eb:	b8 70 d0 02 c0       	mov    eax,0xc002d070
c00184f0:	80 fa 02             	cmp    dl,0x2
c00184f3:	0f 84 84 02 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f9:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c00184fe:	80 fa 03             	cmp    dl,0x3
c0018501:	0f 84 76 02 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018507:	b8 90 d0 02 c0       	mov    eax,0xc002d090
c001850c:	80 fa 04             	cmp    dl,0x4
c001850f:	0f 84 68 02 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018515:	b8 a0 d0 02 c0       	mov    eax,0xc002d0a0
c001851a:	80 fa 05             	cmp    dl,0x5
c001851d:	0f 84 5a 02 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018523:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c0018528:	80 fa 07             	cmp    dl,0x7
c001852b:	0f 84 4c 02 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018531:	83 ea 08             	sub    edx,0x8
c0018534:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c0018539:	80 fa 01             	cmp    dl,0x1
c001853c:	0f 87 3b 02 00 00    	ja     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018542:	b8 b0 d0 02 c0       	mov    eax,0xc002d0b0
c0018547:	c3                   	ret    
c0018548:	80 f9 05             	cmp    cl,0x5
c001854b:	75 45                	jne    c0018592 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001854d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018550:	b8 c0 d0 02 c0       	mov    eax,0xc002d0c0
c0018555:	80 f9 02             	cmp    cl,0x2
c0018558:	0f 86 1f 02 00 00    	jbe    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855e:	80 fa 04             	cmp    dl,0x4
c0018561:	0f 84 f3 01 00 00    	je     c001875a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018567:	80 fa 07             	cmp    dl,0x7
c001856a:	0f 84 0d 02 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018570:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c0018575:	80 fa 08             	cmp    dl,0x8
c0018578:	0f 84 ff 01 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001857e:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c0018583:	80 fa 09             	cmp    dl,0x9
c0018586:	0f 85 f1 01 00 00    	jne    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001858c:	b8 e0 d0 02 c0       	mov    eax,0xc002d0e0
c0018591:	c3                   	ret    
c0018592:	80 f9 06             	cmp    cl,0x6
c0018595:	0f 85 85 01 00 00    	jne    c0018720 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001859b:	b8 f0 d0 02 c0       	mov    eax,0xc002d0f0
c00185a0:	80 fa 01             	cmp    dl,0x1
c00185a3:	0f 84 d4 01 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a9:	8d 42 fb             	lea    eax,[edx-0x5]
c00185ac:	3c 01                	cmp    al,0x1
c00185ae:	0f 86 ac 01 00 00    	jbe    c0018760 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00185b4:	80 fa 03             	cmp    dl,0x3
c00185b7:	0f 84 a3 01 00 00    	je     c0018760 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00185bd:	8d 4a f9             	lea    ecx,[edx-0x7]
c00185c0:	b8 10 d1 02 c0       	mov    eax,0xc002d110
c00185c5:	80 f9 01             	cmp    cl,0x1
c00185c8:	0f 86 af 01 00 00    	jbe    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ce:	80 fa 09             	cmp    dl,0x9
c00185d1:	0f 84 8f 01 00 00    	je     c0018766 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00185d7:	8d 4a f6             	lea    ecx,[edx-0xa]
c00185da:	80 f9 01             	cmp    cl,0x1
c00185dd:	0f 86 9a 01 00 00    	jbe    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e3:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c00185e8:	80 fa 0d             	cmp    dl,0xd
c00185eb:	0f 84 8c 01 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f1:	b8 30 d1 02 c0       	mov    eax,0xc002d130
c00185f6:	80 fa 0e             	cmp    dl,0xe
c00185f9:	0f 84 7e 01 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ff:	b8 40 d1 02 c0       	mov    eax,0xc002d140
c0018604:	80 fa 0f             	cmp    dl,0xf
c0018607:	0f 84 70 01 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860d:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c0018612:	80 fa 15             	cmp    dl,0x15
c0018615:	0f 84 62 01 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861b:	8d 4a ea             	lea    ecx,[edx-0x16]
c001861e:	b8 40 d1 02 c0       	mov    eax,0xc002d140
c0018623:	80 f9 01             	cmp    cl,0x1
c0018626:	0f 86 51 01 00 00    	jbe    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862c:	80 fa 1a             	cmp    dl,0x1a
c001862f:	0f 84 37 01 00 00    	je     c001876c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018635:	80 fa 1c             	cmp    dl,0x1c
c0018638:	0f 84 34 01 00 00    	je     c0018772 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001863e:	80 fa 1d             	cmp    dl,0x1d
c0018641:	0f 84 36 01 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018647:	b8 70 d1 02 c0       	mov    eax,0xc002d170
c001864c:	80 fa 25             	cmp    dl,0x25
c001864f:	0f 84 28 01 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018655:	8d 4a da             	lea    ecx,[edx-0x26]
c0018658:	b8 60 d1 02 c0       	mov    eax,0xc002d160
c001865d:	80 f9 01             	cmp    cl,0x1
c0018660:	0f 86 17 01 00 00    	jbe    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018666:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c001866b:	80 fa 2a             	cmp    dl,0x2a
c001866e:	0f 84 09 01 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018674:	b8 70 d1 02 c0       	mov    eax,0xc002d170
c0018679:	80 fa 2c             	cmp    dl,0x2c
c001867c:	0f 84 fb 00 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018682:	b8 80 d1 02 c0       	mov    eax,0xc002d180
c0018687:	80 fa 2d             	cmp    dl,0x2d
c001868a:	0f 84 ed 00 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018690:	b8 50 d1 02 c0       	mov    eax,0xc002d150
c0018695:	80 fa 2e             	cmp    dl,0x2e
c0018698:	0f 84 df 00 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869e:	b8 70 d1 02 c0       	mov    eax,0xc002d170
c00186a3:	80 fa 2f             	cmp    dl,0x2f
c00186a6:	0f 84 d1 00 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ac:	8d 4a cb             	lea    ecx,[edx-0x35]
c00186af:	b8 60 d1 02 c0       	mov    eax,0xc002d160
c00186b4:	80 f9 01             	cmp    cl,0x1
c00186b7:	0f 86 c0 00 00 00    	jbe    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bd:	b8 90 d1 02 c0       	mov    eax,0xc002d190
c00186c2:	80 fa 37             	cmp    dl,0x37
c00186c5:	0f 84 b2 00 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cb:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00186d0:	80 fa 3a             	cmp    dl,0x3a
c00186d3:	0f 84 a4 00 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d9:	b8 b0 d1 02 c0       	mov    eax,0xc002d1b0
c00186de:	80 fa 3c             	cmp    dl,0x3c
c00186e1:	0f 84 96 00 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e7:	b8 c0 d1 02 c0       	mov    eax,0xc002d1c0
c00186ec:	80 fa 3d             	cmp    dl,0x3d
c00186ef:	0f 84 88 00 00 00    	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f5:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00186fa:	80 fa 3e             	cmp    dl,0x3e
c00186fd:	74 7e                	je     c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ff:	8d 42 bb             	lea    eax,[edx-0x45]
c0018702:	3c 01                	cmp    al,0x1
c0018704:	76 72                	jbe    c0018778 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018706:	80 fa 3f             	cmp    dl,0x3f
c0018709:	74 6d                	je     c0018778 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001870b:	80 fa 4a             	cmp    dl,0x4a
c001870e:	74 0a                	je     c001871a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018710:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c0018715:	80 fa 4d             	cmp    dl,0x4d
c0018718:	75 63                	jne    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001871a:	b8 90 d1 02 c0       	mov    eax,0xc002d190
c001871f:	c3                   	ret    
c0018720:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c0018725:	80 f9 0b             	cmp    cl,0xb
c0018728:	75 0a                	jne    c0018734 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001872a:	fe ca                	dec    dl
c001872c:	75 4f                	jne    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872e:	b8 d0 d1 02 c0       	mov    eax,0xc002d1d0
c0018733:	c3                   	ret    
c0018734:	80 f9 0f             	cmp    cl,0xf
c0018737:	75 44                	jne    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018739:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c001873e:	80 fa 02             	cmp    dl,0x2
c0018741:	76 3a                	jbe    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018743:	8d 42 fd             	lea    eax,[edx-0x3]
c0018746:	3c 01                	cmp    al,0x1
c0018748:	76 0a                	jbe    c0018754 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001874a:	b8 82 b3 02 c0       	mov    eax,0xc002b382
c001874f:	80 fa 06             	cmp    dl,0x6
c0018752:	75 29                	jne    c001877d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018754:	b8 f0 d1 02 c0       	mov    eax,0xc002d1f0
c0018759:	c3                   	ret    
c001875a:	b8 d0 d0 02 c0       	mov    eax,0xc002d0d0
c001875f:	c3                   	ret    
c0018760:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0018765:	c3                   	ret    
c0018766:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c001876b:	c3                   	ret    
c001876c:	b8 50 d1 02 c0       	mov    eax,0xc002d150
c0018771:	c3                   	ret    
c0018772:	b8 60 d1 02 c0       	mov    eax,0xc002d160
c0018777:	c3                   	ret    
c0018778:	b8 b0 d1 02 c0       	mov    eax,0xc002d1b0
c001877d:	c3                   	ret    

c001877e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001877e:	60                   	pusha  
c001877f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018783:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018787:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001878b:	9c                   	pushf  
c001878c:	fa                   	cli    
c001878d:	0f 09                	wbinvd 
c001878f:	0f 30                	wrmsr  
c0018791:	9d                   	popf   
c0018792:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018796:	89 02                	mov    DWORD PTR [edx],eax
c0018798:	61                   	popa   
c0018799:	c3                   	ret    

c001879a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001879a:	60                   	pusha  
c001879b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001879f:	9c                   	pushf  
c00187a0:	fa                   	cli    
c00187a1:	0f 09                	wbinvd 
c00187a3:	31 c0                	xor    eax,eax
c00187a5:	31 d2                	xor    edx,edx
c00187a7:	0f 32                	rdmsr  
c00187a9:	9d                   	popf   
c00187aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187ae:	89 02                	mov    DWORD PTR [edx],eax
c00187b0:	61                   	popa   
c00187b1:	c3                   	ret    

c00187b2 <CPU::AMD_K6_writeback(int, int, int)>:
c00187b2:	56                   	push   esi
c00187b3:	53                   	push   ebx
c00187b4:	83 ec 10             	sub    esp,0x10
c00187b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187bb:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00187c0:	75 5d                	jne    c001881f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187c2:	83 f8 08             	cmp    eax,0x8
c00187c5:	75 09                	jne    c00187d0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00187c7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00187cc:	7e 13                	jle    c00187e1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187ce:	eb 30                	jmp    c0018800 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187d0:	83 f8 06             	cmp    eax,0x6
c00187d3:	7c 4a                	jl     c001881f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187d5:	83 f8 07             	cmp    eax,0x7
c00187d8:	7e 07                	jle    c00187e1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187da:	83 f8 09             	cmp    eax,0x9
c00187dd:	74 21                	je     c0018800 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187df:	eb 3e                	jmp    c001881f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187e1:	89 e6                	mov    esi,esp
c00187e3:	8b 1d 24 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de24
c00187e9:	56                   	push   esi
c00187ea:	c1 eb 15             	shr    ebx,0x15
c00187ed:	68 82 00 00 c0       	push   0xc0000082
c00187f2:	83 e3 7e             	and    ebx,0x7e
c00187f5:	e8 a0 ff ff ff       	call   c001879a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187fa:	56                   	push   esi
c00187fb:	6a 00                	push   0x0
c00187fd:	53                   	push   ebx
c00187fe:	eb 12                	jmp    c0018812 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018800:	89 e3                	mov    ebx,esp
c0018802:	53                   	push   ebx
c0018803:	68 82 00 00 c0       	push   0xc0000082
c0018808:	e8 8d ff ff ff       	call   c001879a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001880d:	53                   	push   ebx
c001880e:	6a 00                	push   0x0
c0018810:	6a 00                	push   0x0
c0018812:	68 82 00 00 c0       	push   0xc0000082
c0018817:	e8 62 ff ff ff       	call   c001877e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001881c:	83 c4 18             	add    esp,0x18
c001881f:	83 c4 10             	add    esp,0x10
c0018822:	5b                   	pop    ebx
c0018823:	5e                   	pop    esi
c0018824:	c3                   	ret    
c0018825:	90                   	nop

c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018826:	55                   	push   ebp
c0018827:	57                   	push   edi
c0018828:	56                   	push   esi
c0018829:	53                   	push   ebx
c001882a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001882e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018832:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018836:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001883a:	39 05 00 d3 02 c0    	cmp    DWORD PTR ds:0xc002d300,eax
c0018840:	75 23                	jne    c0018865 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018842:	a1 2c 09 03 c0       	mov    eax,ds:0xc003092c
c0018847:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001884b:	89 06                	mov    DWORD PTR [esi],eax
c001884d:	a1 28 09 03 c0       	mov    eax,ds:0xc0030928
c0018852:	89 07                	mov    DWORD PTR [edi],eax
c0018854:	a1 24 09 03 c0       	mov    eax,ds:0xc0030924
c0018859:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001885c:	a1 20 09 03 c0       	mov    eax,ds:0xc0030920
c0018861:	89 02                	mov    DWORD PTR [edx],eax
c0018863:	eb 3f                	jmp    c00188a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018865:	31 c9                	xor    ecx,ecx
c0018867:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001886b:	0f a2                	cpuid  
c001886d:	89 06                	mov    DWORD PTR [esi],eax
c001886f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018871:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018875:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018878:	89 10                	mov    DWORD PTR [eax],edx
c001887a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001887e:	a3 00 d3 02 c0       	mov    ds:0xc002d300,eax
c0018883:	8b 06                	mov    eax,DWORD PTR [esi]
c0018885:	a3 2c 09 03 c0       	mov    ds:0xc003092c,eax
c001888a:	8b 07                	mov    eax,DWORD PTR [edi]
c001888c:	a3 28 09 03 c0       	mov    ds:0xc0030928,eax
c0018891:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018894:	a3 24 09 03 c0       	mov    ds:0xc0030924,eax
c0018899:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001889d:	8b 00                	mov    eax,DWORD PTR [eax]
c001889f:	a3 20 09 03 c0       	mov    ds:0xc0030920,eax
c00188a4:	5b                   	pop    ebx
c00188a5:	5e                   	pop    esi
c00188a6:	5f                   	pop    edi
c00188a7:	5d                   	pop    ebp
c00188a8:	c3                   	ret    
c00188a9:	90                   	nop

c00188aa <CPU::cpuidCheckEDX(unsigned int)>:
c00188aa:	83 ec 10             	sub    esp,0x10
c00188ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b1:	50                   	push   eax
c00188b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b6:	50                   	push   eax
c00188b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bb:	50                   	push   eax
c00188bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c0:	50                   	push   eax
c00188c1:	6a 01                	push   0x1
c00188c3:	e8 5e ff ff ff       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188cc:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00188d0:	0f 95 c0             	setne  al
c00188d3:	83 c4 24             	add    esp,0x24
c00188d6:	c3                   	ret    
c00188d7:	90                   	nop

c00188d8 <CPU::cpuidCheckECX(unsigned int)>:
c00188d8:	83 ec 10             	sub    esp,0x10
c00188db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188df:	50                   	push   eax
c00188e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e4:	50                   	push   eax
c00188e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e9:	50                   	push   eax
c00188ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ee:	50                   	push   eax
c00188ef:	6a 01                	push   0x1
c00188f1:	e8 30 ff ff ff       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188fa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188fe:	0f 95 c0             	setne  al
c0018901:	83 c4 24             	add    esp,0x24
c0018904:	c3                   	ret    
c0018905:	90                   	nop

c0018906 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018906:	83 ec 10             	sub    esp,0x10
c0018909:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001890d:	50                   	push   eax
c001890e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018912:	50                   	push   eax
c0018913:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018917:	50                   	push   eax
c0018918:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001891c:	50                   	push   eax
c001891d:	6a 07                	push   0x7
c001891f:	e8 02 ff ff ff       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018924:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018928:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001892c:	0f 95 c0             	setne  al
c001892f:	83 c4 24             	add    esp,0x24
c0018932:	c3                   	ret    
c0018933:	90                   	nop

c0018934 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018934:	83 ec 10             	sub    esp,0x10
c0018937:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001893b:	50                   	push   eax
c001893c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018940:	50                   	push   eax
c0018941:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018945:	50                   	push   eax
c0018946:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001894a:	50                   	push   eax
c001894b:	6a 07                	push   0x7
c001894d:	e8 d4 fe ff ff       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018952:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018956:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001895a:	0f 95 c0             	setne  al
c001895d:	83 c4 24             	add    esp,0x24
c0018960:	c3                   	ret    
c0018961:	90                   	nop

c0018962 <CPU::CPU()>:
c0018962:	83 ec 0c             	sub    esp,0xc
c0018965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018969:	83 ec 08             	sub    esp,0x8
c001896c:	68 82 b3 02 c0       	push   0xc002b382
c0018971:	50                   	push   eax
c0018972:	e8 af b7 ff ff       	call   c0014126 <Device::Device(char const*)>
c0018977:	83 c4 10             	add    esp,0x10
c001897a:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c001897f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018983:	89 10                	mov    DWORD PTR [eax],edx
c0018985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018989:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018997:	05 78 01 00 00       	add    eax,0x178
c001899c:	83 ec 0c             	sub    esp,0xc
c001899f:	50                   	push   eax
c00189a0:	e8 b3 66 ff ff       	call   c000f058 <GDT::GDT()>
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ac:	05 7c 09 00 00       	add    eax,0x97c
c00189b1:	83 ec 0c             	sub    esp,0xc
c00189b4:	50                   	push   eax
c00189b5:	e8 00 69 ff ff       	call   c000f2ba <IDT::IDT()>
c00189ba:	83 c4 10             	add    esp,0x10
c00189bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189c1:	05 7c 11 00 00       	add    eax,0x117c
c00189c6:	83 ec 0c             	sub    esp,0xc
c00189c9:	50                   	push   eax
c00189ca:	e8 81 8a ff ff       	call   c0011450 <TSS::TSS()>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189d6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00189dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189e1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00189eb:	90                   	nop
c00189ec:	83 c4 0c             	add    esp,0xc
c00189ef:	c3                   	ret    

c00189f0 <CPU::displayFeatures()>:
c00189f0:	53                   	push   ebx
c00189f1:	83 ec 10             	sub    esp,0x10
c00189f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189f8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00189fe:	68 90 b0 02 c0       	push   0xc002b090
c0018a03:	e8 07 a1 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a08:	59                   	pop    ecx
c0018a09:	58                   	pop    eax
c0018a0a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018a10:	50                   	push   eax
c0018a11:	68 a1 b0 02 c0       	push   0xc002b0a1
c0018a16:	e8 f4 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a1b:	58                   	pop    eax
c0018a1c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a22:	5a                   	pop    edx
c0018a23:	c1 e8 0e             	shr    eax,0xe
c0018a26:	0f b6 c0             	movzx  eax,al
c0018a29:	50                   	push   eax
c0018a2a:	68 b2 b0 02 c0       	push   0xc002b0b2
c0018a2f:	e8 db a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a34:	59                   	pop    ecx
c0018a35:	58                   	pop    eax
c0018a36:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a3c:	66 c1 e8 06          	shr    ax,0x6
c0018a40:	0f b6 c0             	movzx  eax,al
c0018a43:	50                   	push   eax
c0018a44:	68 c3 b0 02 c0       	push   0xc002b0c3
c0018a49:	e8 c1 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a4e:	c7 04 24 70 b5 02 c0 	mov    DWORD PTR [esp],0xc002b570
c0018a55:	e8 b5 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a5a:	83 c4 10             	add    esp,0x10
c0018a5d:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018a62:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018a69:	74 05                	je     c0018a70 <CPU::displayFeatures()+0x80>
c0018a6b:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018a70:	52                   	push   edx
c0018a71:	52                   	push   edx
c0018a72:	50                   	push   eax
c0018a73:	68 d4 b0 02 c0       	push   0xc002b0d4
c0018a78:	e8 92 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018a7d:	83 c4 10             	add    esp,0x10
c0018a80:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018a85:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018a8c:	78 05                	js     c0018a93 <CPU::displayFeatures()+0xa3>
c0018a8e:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018a93:	51                   	push   ecx
c0018a94:	51                   	push   ecx
c0018a95:	50                   	push   eax
c0018a96:	68 eb b0 02 c0       	push   0xc002b0eb
c0018a9b:	e8 6f a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018aa0:	83 c4 10             	add    esp,0x10
c0018aa3:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018aa8:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018aaf:	75 05                	jne    c0018ab6 <CPU::displayFeatures()+0xc6>
c0018ab1:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018ab6:	52                   	push   edx
c0018ab7:	52                   	push   edx
c0018ab8:	50                   	push   eax
c0018ab9:	68 02 b1 02 c0       	push   0xc002b102
c0018abe:	e8 4c a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018ac3:	83 c4 10             	add    esp,0x10
c0018ac6:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018acb:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018ad2:	75 05                	jne    c0018ad9 <CPU::displayFeatures()+0xe9>
c0018ad4:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018ad9:	51                   	push   ecx
c0018ada:	51                   	push   ecx
c0018adb:	50                   	push   eax
c0018adc:	68 19 b1 02 c0       	push   0xc002b119
c0018ae1:	e8 29 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018ae6:	83 c4 10             	add    esp,0x10
c0018ae9:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018aee:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018af5:	75 05                	jne    c0018afc <CPU::displayFeatures()+0x10c>
c0018af7:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018afc:	52                   	push   edx
c0018afd:	52                   	push   edx
c0018afe:	50                   	push   eax
c0018aff:	68 30 b1 02 c0       	push   0xc002b130
c0018b04:	e8 06 a0 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018b09:	83 c4 10             	add    esp,0x10
c0018b0c:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018b11:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018b18:	75 05                	jne    c0018b1f <CPU::displayFeatures()+0x12f>
c0018b1a:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018b1f:	51                   	push   ecx
c0018b20:	51                   	push   ecx
c0018b21:	50                   	push   eax
c0018b22:	68 47 b1 02 c0       	push   0xc002b147
c0018b27:	e8 e3 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018b2c:	83 c4 10             	add    esp,0x10
c0018b2f:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018b34:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018b3b:	75 05                	jne    c0018b42 <CPU::displayFeatures()+0x152>
c0018b3d:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018b42:	52                   	push   edx
c0018b43:	52                   	push   edx
c0018b44:	50                   	push   eax
c0018b45:	68 5e b1 02 c0       	push   0xc002b15e
c0018b4a:	e8 c0 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018b4f:	83 c4 10             	add    esp,0x10
c0018b52:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018b57:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018b5e:	75 05                	jne    c0018b65 <CPU::displayFeatures()+0x175>
c0018b60:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018b65:	51                   	push   ecx
c0018b66:	51                   	push   ecx
c0018b67:	50                   	push   eax
c0018b68:	68 75 b1 02 c0       	push   0xc002b175
c0018b6d:	e8 9d 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018b72:	83 c4 10             	add    esp,0x10
c0018b75:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018b7a:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018b81:	75 05                	jne    c0018b88 <CPU::displayFeatures()+0x198>
c0018b83:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018b88:	52                   	push   edx
c0018b89:	52                   	push   edx
c0018b8a:	50                   	push   eax
c0018b8b:	68 8c b1 02 c0       	push   0xc002b18c
c0018b90:	e8 7a 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018b95:	83 c4 10             	add    esp,0x10
c0018b98:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018b9d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018ba4:	75 05                	jne    c0018bab <CPU::displayFeatures()+0x1bb>
c0018ba6:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018bab:	51                   	push   ecx
c0018bac:	51                   	push   ecx
c0018bad:	50                   	push   eax
c0018bae:	68 a3 b1 02 c0       	push   0xc002b1a3
c0018bb3:	e8 57 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018bb8:	83 c4 10             	add    esp,0x10
c0018bbb:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018bc0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018bc7:	75 05                	jne    c0018bce <CPU::displayFeatures()+0x1de>
c0018bc9:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018bce:	52                   	push   edx
c0018bcf:	52                   	push   edx
c0018bd0:	50                   	push   eax
c0018bd1:	68 ba b1 02 c0       	push   0xc002b1ba
c0018bd6:	e8 34 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018bdb:	83 c4 10             	add    esp,0x10
c0018bde:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018be3:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018bea:	75 05                	jne    c0018bf1 <CPU::displayFeatures()+0x201>
c0018bec:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018bf1:	51                   	push   ecx
c0018bf2:	51                   	push   ecx
c0018bf3:	50                   	push   eax
c0018bf4:	68 d1 b1 02 c0       	push   0xc002b1d1
c0018bf9:	e8 11 9f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018bfe:	83 c4 10             	add    esp,0x10
c0018c01:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018c06:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018c0d:	75 05                	jne    c0018c14 <CPU::displayFeatures()+0x224>
c0018c0f:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018c14:	52                   	push   edx
c0018c15:	52                   	push   edx
c0018c16:	50                   	push   eax
c0018c17:	68 e8 b1 02 c0       	push   0xc002b1e8
c0018c1c:	e8 ee 9e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018c21:	83 c4 10             	add    esp,0x10
c0018c24:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018c29:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018c30:	78 05                	js     c0018c37 <CPU::displayFeatures()+0x247>
c0018c32:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018c37:	51                   	push   ecx
c0018c38:	51                   	push   ecx
c0018c39:	50                   	push   eax
c0018c3a:	68 ff b1 02 c0       	push   0xc002b1ff
c0018c3f:	e8 cb 9e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018c44:	83 c4 10             	add    esp,0x10
c0018c47:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0018c4c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018c53:	75 05                	jne    c0018c5a <CPU::displayFeatures()+0x26a>
c0018c55:	b8 56 9b 02 c0       	mov    eax,0xc0029b56
c0018c5a:	52                   	push   edx
c0018c5b:	52                   	push   edx
c0018c5c:	50                   	push   eax
c0018c5d:	68 16 b2 02 c0       	push   0xc002b216
c0018c62:	e8 a8 9e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0018c67:	83 c4 18             	add    esp,0x18
c0018c6a:	5b                   	pop    ebx
c0018c6b:	c3                   	ret    

c0018c6c <CPU::detectFeatures()>:
c0018c6c:	55                   	push   ebp
c0018c6d:	57                   	push   edi
c0018c6e:	56                   	push   esi
c0018c6f:	53                   	push   ebx
c0018c70:	83 ec 50             	sub    esp,0x50
c0018c73:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018c77:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018c81:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018c88:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018c8e:	6a 0d                	push   0xd
c0018c90:	6a 00                	push   0x0
c0018c92:	57                   	push   edi
c0018c93:	e8 e0 7a fe ff       	call   c0000778 <memset>
c0018c98:	83 c4 10             	add    esp,0x10
c0018c9b:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0018ca0:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018ca7:	0f 84 20 09 00 00    	je     c00195cd <CPU::detectFeatures()+0x961>
c0018cad:	83 ec 0c             	sub    esp,0xc
c0018cb0:	6a 10                	push   0x10
c0018cb2:	e8 f3 fb ff ff       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c0018cb7:	83 e0 01             	and    eax,0x1
c0018cba:	8d 14 00             	lea    edx,[eax+eax*1]
c0018cbd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cc3:	83 e0 fd             	and    eax,0xfffffffd
c0018cc6:	09 d0                	or     eax,edx
c0018cc8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cce:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018cd5:	e8 d0 fb ff ff       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c0018cda:	83 e0 01             	and    eax,0x1
c0018cdd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018ce4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cea:	83 e0 fb             	and    eax,0xfffffffb
c0018ced:	09 d0                	or     eax,edx
c0018cef:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cf5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018cfc:	e8 a9 fb ff ff       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c0018d01:	83 e0 01             	and    eax,0x1
c0018d04:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018d0b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d11:	83 e0 f7             	and    eax,0xfffffff7
c0018d14:	09 d0                	or     eax,edx
c0018d16:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d1c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018d23:	e8 82 fb ff ff       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c0018d28:	83 e0 01             	and    eax,0x1
c0018d2b:	c1 e0 04             	shl    eax,0x4
c0018d2e:	88 c2                	mov    dl,al
c0018d30:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d36:	83 e0 ef             	and    eax,0xffffffef
c0018d39:	09 d0                	or     eax,edx
c0018d3b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d41:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018d48:	e8 5d fb ff ff       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c0018d4d:	83 e0 01             	and    eax,0x1
c0018d50:	c1 e0 05             	shl    eax,0x5
c0018d53:	88 c2                	mov    dl,al
c0018d55:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d5b:	83 e0 df             	and    eax,0xffffffdf
c0018d5e:	09 d0                	or     eax,edx
c0018d60:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d66:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018d6d:	e8 38 fb ff ff       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c0018d72:	83 e0 01             	and    eax,0x1
c0018d75:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d78:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d7e:	83 e0 fd             	and    eax,0xfffffffd
c0018d81:	09 d0                	or     eax,edx
c0018d83:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d89:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018d90:	e8 15 fb ff ff       	call   c00188aa <CPU::cpuidCheckEDX(unsigned int)>
c0018d95:	83 e0 01             	and    eax,0x1
c0018d98:	c1 e0 06             	shl    eax,0x6
c0018d9b:	88 c2                	mov    dl,al
c0018d9d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018da3:	83 e0 bf             	and    eax,0xffffffbf
c0018da6:	09 d0                	or     eax,edx
c0018da8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018dae:	58                   	pop    eax
c0018daf:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018db3:	56                   	push   esi
c0018db4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018db8:	55                   	push   ebp
c0018db9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018dbd:	50                   	push   eax
c0018dbe:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018dc2:	52                   	push   edx
c0018dc3:	6a 00                	push   0x0
c0018dc5:	e8 5c fa ff ff       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dca:	83 c4 1c             	add    esp,0x1c
c0018dcd:	6a 04                	push   0x4
c0018dcf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018dd3:	50                   	push   eax
c0018dd4:	57                   	push   edi
c0018dd5:	e8 6a 79 fe ff       	call   c0000744 <memcpy>
c0018dda:	83 c4 0c             	add    esp,0xc
c0018ddd:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018de3:	6a 04                	push   0x4
c0018de5:	56                   	push   esi
c0018de6:	50                   	push   eax
c0018de7:	e8 58 79 fe ff       	call   c0000744 <memcpy>
c0018dec:	83 c4 0c             	add    esp,0xc
c0018def:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018df5:	6a 04                	push   0x4
c0018df7:	55                   	push   ebp
c0018df8:	50                   	push   eax
c0018df9:	e8 46 79 fe ff       	call   c0000744 <memcpy>
c0018dfe:	58                   	pop    eax
c0018dff:	5a                   	pop    edx
c0018e00:	68 2d b2 02 c0       	push   0xc002b22d
c0018e05:	57                   	push   edi
c0018e06:	e8 b5 7a fe ff       	call   c00008c0 <strcmp>
c0018e0b:	83 c4 10             	add    esp,0x10
c0018e0e:	85 c0                	test   eax,eax
c0018e10:	75 0f                	jne    c0018e21 <CPU::detectFeatures()+0x1b5>
c0018e12:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018e1c:	e9 22 02 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018e21:	50                   	push   eax
c0018e22:	50                   	push   eax
c0018e23:	68 3a b2 02 c0       	push   0xc002b23a
c0018e28:	57                   	push   edi
c0018e29:	e8 92 7a fe ff       	call   c00008c0 <strcmp>
c0018e2e:	83 c4 10             	add    esp,0x10
c0018e31:	85 c0                	test   eax,eax
c0018e33:	74 dd                	je     c0018e12 <CPU::detectFeatures()+0x1a6>
c0018e35:	51                   	push   ecx
c0018e36:	51                   	push   ecx
c0018e37:	68 47 b2 02 c0       	push   0xc002b247
c0018e3c:	57                   	push   edi
c0018e3d:	e8 7e 7a fe ff       	call   c00008c0 <strcmp>
c0018e42:	83 c4 10             	add    esp,0x10
c0018e45:	85 c0                	test   eax,eax
c0018e47:	74 2a                	je     c0018e73 <CPU::detectFeatures()+0x207>
c0018e49:	52                   	push   edx
c0018e4a:	52                   	push   edx
c0018e4b:	68 54 b2 02 c0       	push   0xc002b254
c0018e50:	57                   	push   edi
c0018e51:	e8 6a 7a fe ff       	call   c00008c0 <strcmp>
c0018e56:	83 c4 10             	add    esp,0x10
c0018e59:	85 c0                	test   eax,eax
c0018e5b:	74 16                	je     c0018e73 <CPU::detectFeatures()+0x207>
c0018e5d:	50                   	push   eax
c0018e5e:	50                   	push   eax
c0018e5f:	68 61 b2 02 c0       	push   0xc002b261
c0018e64:	57                   	push   edi
c0018e65:	e8 56 7a fe ff       	call   c00008c0 <strcmp>
c0018e6a:	83 c4 10             	add    esp,0x10
c0018e6d:	85 c0                	test   eax,eax
c0018e6f:	74 48                	je     c0018eb9 <CPU::detectFeatures()+0x24d>
c0018e71:	eb 0f                	jmp    c0018e82 <CPU::detectFeatures()+0x216>
c0018e73:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018e7d:	e9 c1 01 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018e82:	50                   	push   eax
c0018e83:	50                   	push   eax
c0018e84:	68 6e b2 02 c0       	push   0xc002b26e
c0018e89:	57                   	push   edi
c0018e8a:	e8 31 7a fe ff       	call   c00008c0 <strcmp>
c0018e8f:	83 c4 10             	add    esp,0x10
c0018e92:	85 c0                	test   eax,eax
c0018e94:	74 23                	je     c0018eb9 <CPU::detectFeatures()+0x24d>
c0018e96:	50                   	push   eax
c0018e97:	50                   	push   eax
c0018e98:	68 7b b2 02 c0       	push   0xc002b27b
c0018e9d:	57                   	push   edi
c0018e9e:	e8 1d 7a fe ff       	call   c00008c0 <strcmp>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	85 c0                	test   eax,eax
c0018ea8:	75 1e                	jne    c0018ec8 <CPU::detectFeatures()+0x25c>
c0018eaa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018eb4:	e9 8a 01 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018eb9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018ec3:	e9 7b 01 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018ec8:	50                   	push   eax
c0018ec9:	50                   	push   eax
c0018eca:	68 88 b2 02 c0       	push   0xc002b288
c0018ecf:	57                   	push   edi
c0018ed0:	e8 eb 79 fe ff       	call   c00008c0 <strcmp>
c0018ed5:	83 c4 10             	add    esp,0x10
c0018ed8:	85 c0                	test   eax,eax
c0018eda:	75 0f                	jne    c0018eeb <CPU::detectFeatures()+0x27f>
c0018edc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018ee6:	e9 58 01 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018eeb:	50                   	push   eax
c0018eec:	50                   	push   eax
c0018eed:	68 47 b2 02 c0       	push   0xc002b247
c0018ef2:	57                   	push   edi
c0018ef3:	e8 c8 79 fe ff       	call   c00008c0 <strcmp>
c0018ef8:	83 c4 10             	add    esp,0x10
c0018efb:	85 c0                	test   eax,eax
c0018efd:	75 0f                	jne    c0018f0e <CPU::detectFeatures()+0x2a2>
c0018eff:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018f09:	e9 35 01 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018f0e:	50                   	push   eax
c0018f0f:	50                   	push   eax
c0018f10:	68 95 b2 02 c0       	push   0xc002b295
c0018f15:	57                   	push   edi
c0018f16:	e8 a5 79 fe ff       	call   c00008c0 <strcmp>
c0018f1b:	83 c4 10             	add    esp,0x10
c0018f1e:	85 c0                	test   eax,eax
c0018f20:	75 0f                	jne    c0018f31 <CPU::detectFeatures()+0x2c5>
c0018f22:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018f2c:	e9 12 01 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018f31:	51                   	push   ecx
c0018f32:	51                   	push   ecx
c0018f33:	68 a2 b2 02 c0       	push   0xc002b2a2
c0018f38:	57                   	push   edi
c0018f39:	e8 82 79 fe ff       	call   c00008c0 <strcmp>
c0018f3e:	83 c4 10             	add    esp,0x10
c0018f41:	85 c0                	test   eax,eax
c0018f43:	75 0f                	jne    c0018f54 <CPU::detectFeatures()+0x2e8>
c0018f45:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018f4f:	e9 ef 00 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018f54:	52                   	push   edx
c0018f55:	52                   	push   edx
c0018f56:	68 af b2 02 c0       	push   0xc002b2af
c0018f5b:	57                   	push   edi
c0018f5c:	e8 5f 79 fe ff       	call   c00008c0 <strcmp>
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	85 c0                	test   eax,eax
c0018f66:	75 0f                	jne    c0018f77 <CPU::detectFeatures()+0x30b>
c0018f68:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018f72:	e9 cc 00 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018f77:	50                   	push   eax
c0018f78:	50                   	push   eax
c0018f79:	68 bc b2 02 c0       	push   0xc002b2bc
c0018f7e:	57                   	push   edi
c0018f7f:	e8 3c 79 fe ff       	call   c00008c0 <strcmp>
c0018f84:	83 c4 10             	add    esp,0x10
c0018f87:	85 c0                	test   eax,eax
c0018f89:	75 0f                	jne    c0018f9a <CPU::detectFeatures()+0x32e>
c0018f8b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018f95:	e9 a9 00 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018f9a:	50                   	push   eax
c0018f9b:	50                   	push   eax
c0018f9c:	68 c9 b2 02 c0       	push   0xc002b2c9
c0018fa1:	57                   	push   edi
c0018fa2:	e8 19 79 fe ff       	call   c00008c0 <strcmp>
c0018fa7:	83 c4 10             	add    esp,0x10
c0018faa:	85 c0                	test   eax,eax
c0018fac:	75 0f                	jne    c0018fbd <CPU::detectFeatures()+0x351>
c0018fae:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018fb8:	e9 86 00 00 00       	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018fbd:	50                   	push   eax
c0018fbe:	50                   	push   eax
c0018fbf:	68 d6 b2 02 c0       	push   0xc002b2d6
c0018fc4:	57                   	push   edi
c0018fc5:	e8 f6 78 fe ff       	call   c00008c0 <strcmp>
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	85 c0                	test   eax,eax
c0018fcf:	75 0c                	jne    c0018fdd <CPU::detectFeatures()+0x371>
c0018fd1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018fdb:	eb 66                	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018fdd:	50                   	push   eax
c0018fde:	50                   	push   eax
c0018fdf:	68 e3 b2 02 c0       	push   0xc002b2e3
c0018fe4:	57                   	push   edi
c0018fe5:	e8 d6 78 fe ff       	call   c00008c0 <strcmp>
c0018fea:	83 c4 10             	add    esp,0x10
c0018fed:	85 c0                	test   eax,eax
c0018fef:	75 0c                	jne    c0018ffd <CPU::detectFeatures()+0x391>
c0018ff1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018ffb:	eb 46                	jmp    c0019043 <CPU::detectFeatures()+0x3d7>
c0018ffd:	50                   	push   eax
c0018ffe:	50                   	push   eax
c0018fff:	68 f0 b2 02 c0       	push   0xc002b2f0
c0019004:	57                   	push   edi
c0019005:	e8 b6 78 fe ff       	call   c00008c0 <strcmp>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	85 c0                	test   eax,eax
c001900f:	74 e0                	je     c0018ff1 <CPU::detectFeatures()+0x385>
c0019011:	50                   	push   eax
c0019012:	50                   	push   eax
c0019013:	68 fd b2 02 c0       	push   0xc002b2fd
c0019018:	57                   	push   edi
c0019019:	e8 a2 78 fe ff       	call   c00008c0 <strcmp>
c001901e:	83 c4 10             	add    esp,0x10
c0019021:	85 c0                	test   eax,eax
c0019023:	74 cc                	je     c0018ff1 <CPU::detectFeatures()+0x385>
c0019025:	51                   	push   ecx
c0019026:	51                   	push   ecx
c0019027:	68 0a b3 02 c0       	push   0xc002b30a
c001902c:	57                   	push   edi
c001902d:	e8 8e 78 fe ff       	call   c00008c0 <strcmp>
c0019032:	83 c4 10             	add    esp,0x10
c0019035:	85 c0                	test   eax,eax
c0019037:	74 b8                	je     c0018ff1 <CPU::detectFeatures()+0x385>
c0019039:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019043:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019048:	0f 86 be 00 00 00    	jbe    c001910c <CPU::detectFeatures()+0x4a0>
c001904e:	83 ec 0c             	sub    esp,0xc
c0019051:	68 80 00 00 00       	push   0x80
c0019056:	e8 ab f8 ff ff       	call   c0018906 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001905b:	83 e0 01             	and    eax,0x1
c001905e:	c1 e0 06             	shl    eax,0x6
c0019061:	88 c2                	mov    dl,al
c0019063:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019069:	83 e0 bf             	and    eax,0xffffffbf
c001906c:	09 d0                	or     eax,edx
c001906e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019074:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001907b:	e8 86 f8 ff ff       	call   c0018906 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019080:	83 e0 01             	and    eax,0x1
c0019083:	c1 e0 04             	shl    eax,0x4
c0019086:	88 c2                	mov    dl,al
c0019088:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001908e:	83 e0 ef             	and    eax,0xffffffef
c0019091:	09 d0                	or     eax,edx
c0019093:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019099:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00190a0:	e8 61 f8 ff ff       	call   c0018906 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190a5:	c1 e0 07             	shl    eax,0x7
c00190a8:	88 c2                	mov    dl,al
c00190aa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190b0:	83 e0 7f             	and    eax,0x7f
c00190b3:	09 d0                	or     eax,edx
c00190b5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190bb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00190c2:	e8 6d f8 ff ff       	call   c0018934 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00190c7:	83 e0 01             	and    eax,0x1
c00190ca:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190d1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190d7:	83 e0 f7             	and    eax,0xfffffff7
c00190da:	09 d0                	or     eax,edx
c00190dc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190e2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00190e9:	e8 46 f8 ff ff       	call   c0018934 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00190ee:	83 c4 10             	add    esp,0x10
c00190f1:	83 e0 01             	and    eax,0x1
c00190f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190fb:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019101:	83 e0 fb             	and    eax,0xfffffffb
c0019104:	09 d0                	or     eax,edx
c0019106:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001910c:	83 ec 0c             	sub    esp,0xc
c001910f:	56                   	push   esi
c0019110:	55                   	push   ebp
c0019111:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019115:	57                   	push   edi
c0019116:	8d 44 24 28          	lea    eax,[esp+0x28]
c001911a:	50                   	push   eax
c001911b:	6a 01                	push   0x1
c001911d:	e8 04 f7 ff ff       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019122:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019126:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001912c:	88 ca                	mov    dl,cl
c001912e:	83 e0 f0             	and    eax,0xfffffff0
c0019131:	83 e2 0f             	and    edx,0xf
c0019134:	09 d0                	or     eax,edx
c0019136:	88 ca                	mov    dl,cl
c0019138:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001913e:	c0 ea 04             	shr    dl,0x4
c0019141:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019145:	0f b6 c2             	movzx  eax,dl
c0019148:	83 c4 20             	add    esp,0x20
c001914b:	c1 e0 06             	shl    eax,0x6
c001914e:	89 c5                	mov    ebp,eax
c0019150:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019156:	66 25 3f c0          	and    ax,0xc03f
c001915a:	09 e8                	or     eax,ebp
c001915c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019163:	89 c8                	mov    eax,ecx
c0019165:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001916b:	c1 e8 08             	shr    eax,0x8
c001916e:	83 e2 3f             	and    edx,0x3f
c0019171:	83 e0 0f             	and    eax,0xf
c0019174:	89 c5                	mov    ebp,eax
c0019176:	c1 e5 06             	shl    ebp,0x6
c0019179:	09 d5                	or     ebp,edx
c001917b:	89 ea                	mov    edx,ebp
c001917d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019183:	88 c2                	mov    dl,al
c0019185:	c0 ea 02             	shr    dl,0x2
c0019188:	89 d5                	mov    ebp,edx
c001918a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019190:	83 e2 c0             	and    edx,0xffffffc0
c0019193:	09 d5                	or     ebp,edx
c0019195:	89 ea                	mov    edx,ebp
c0019197:	89 cd                	mov    ebp,ecx
c0019199:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001919f:	c1 ed 0c             	shr    ebp,0xc
c00191a2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00191a8:	83 e5 03             	and    ebp,0x3
c00191ab:	83 e2 cf             	and    edx,0xffffffcf
c00191ae:	c1 e5 04             	shl    ebp,0x4
c00191b1:	09 d5                	or     ebp,edx
c00191b3:	3c 06                	cmp    al,0x6
c00191b5:	89 ea                	mov    edx,ebp
c00191b7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00191bd:	74 04                	je     c00191c3 <CPU::detectFeatures()+0x557>
c00191bf:	3c 0f                	cmp    al,0xf
c00191c1:	75 5c                	jne    c001921f <CPU::detectFeatures()+0x5b3>
c00191c3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00191c7:	89 cd                	mov    ebp,ecx
c00191c9:	c1 ed 10             	shr    ebp,0x10
c00191cc:	c1 e5 04             	shl    ebp,0x4
c00191cf:	09 ea                	or     edx,ebp
c00191d1:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00191d7:	0f b6 d2             	movzx  edx,dl
c00191da:	66 81 e5 3f c0       	and    bp,0xc03f
c00191df:	c1 e2 06             	shl    edx,0x6
c00191e2:	09 ea                	or     edx,ebp
c00191e4:	3c 0f                	cmp    al,0xf
c00191e6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00191ed:	75 30                	jne    c001921f <CPU::detectFeatures()+0x5b3>
c00191ef:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00191f5:	c1 e9 14             	shr    ecx,0x14
c00191f8:	83 e0 3f             	and    eax,0x3f
c00191fb:	83 c1 0f             	add    ecx,0xf
c00191fe:	88 ca                	mov    dl,cl
c0019200:	c0 e9 02             	shr    cl,0x2
c0019203:	c1 e2 06             	shl    edx,0x6
c0019206:	09 d0                	or     eax,edx
c0019208:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001920e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019214:	83 e0 c0             	and    eax,0xffffffc0
c0019217:	09 c1                	or     ecx,eax
c0019219:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001921f:	83 ec 0c             	sub    esp,0xc
c0019222:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019229:	56                   	push   esi
c001922a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001922e:	50                   	push   eax
c001922f:	57                   	push   edi
c0019230:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019234:	55                   	push   ebp
c0019235:	68 00 00 00 80       	push   0x80000000
c001923a:	e8 e7 f5 ff ff       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001923f:	83 c4 20             	add    esp,0x20
c0019242:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001924a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001924e:	76 1e                	jbe    c001926e <CPU::detectFeatures()+0x602>
c0019250:	83 ec 0c             	sub    esp,0xc
c0019253:	56                   	push   esi
c0019254:	50                   	push   eax
c0019255:	57                   	push   edi
c0019256:	55                   	push   ebp
c0019257:	68 01 00 00 80       	push   0x80000001
c001925c:	e8 c5 f5 ff ff       	call   c0018826 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019261:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001926b:	83 c4 20             	add    esp,0x20
c001926e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019274:	83 f8 01             	cmp    eax,0x1
c0019277:	75 6f                	jne    c00192e8 <CPU::detectFeatures()+0x67c>
c0019279:	51                   	push   ecx
c001927a:	51                   	push   ecx
c001927b:	68 16 b3 02 c0       	push   0xc002b316
c0019280:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019284:	56                   	push   esi
c0019285:	e8 aa 75 fe ff       	call   c0000834 <strcpy>
c001928a:	5f                   	pop    edi
c001928b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019291:	5d                   	pop    ebp
c0019292:	66 c1 e8 06          	shr    ax,0x6
c0019296:	0f b6 c0             	movzx  eax,al
c0019299:	50                   	push   eax
c001929a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192a0:	c1 e8 0e             	shr    eax,0xe
c00192a3:	0f b6 c0             	movzx  eax,al
c00192a6:	50                   	push   eax
c00192a7:	e8 24 f2 ff ff       	call   c00184d0 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00192ac:	5a                   	pop    edx
c00192ad:	59                   	pop    ecx
c00192ae:	50                   	push   eax
c00192af:	56                   	push   esi
c00192b0:	e8 bf 76 fe ff       	call   c0000974 <strcat>
c00192b5:	5f                   	pop    edi
c00192b6:	5d                   	pop    ebp
c00192b7:	56                   	push   esi
c00192b8:	53                   	push   ebx
c00192b9:	e8 5a ae ff ff       	call   c0014118 <Device::setName(char const*)>
c00192be:	58                   	pop    eax
c00192bf:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00192c5:	5a                   	pop    edx
c00192c6:	68 1d b3 02 c0       	push   0xc002b31d
c00192cb:	50                   	push   eax
c00192cc:	e8 ef 75 fe ff       	call   c00008c0 <strcmp>
c00192d1:	83 c4 10             	add    esp,0x10
c00192d4:	85 c0                	test   eax,eax
c00192d6:	0f 85 71 03 00 00    	jne    c001964d <CPU::detectFeatures()+0x9e1>
c00192dc:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00192e3:	e9 65 03 00 00       	jmp    c001964d <CPU::detectFeatures()+0x9e1>
c00192e8:	83 f8 02             	cmp    eax,0x2
c00192eb:	0f 85 b5 00 00 00    	jne    c00193a6 <CPU::detectFeatures()+0x73a>
c00192f1:	57                   	push   edi
c00192f2:	57                   	push   edi
c00192f3:	68 2f b3 02 c0       	push   0xc002b32f
c00192f8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192fc:	56                   	push   esi
c00192fd:	e8 32 75 fe ff       	call   c0000834 <strcpy>
c0019302:	5d                   	pop    ebp
c0019303:	58                   	pop    eax
c0019304:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001930a:	66 c1 e8 06          	shr    ax,0x6
c001930e:	0f b6 c0             	movzx  eax,al
c0019311:	50                   	push   eax
c0019312:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019318:	c1 e8 0e             	shr    eax,0xe
c001931b:	0f b6 c0             	movzx  eax,al
c001931e:	50                   	push   eax
c001931f:	e8 18 f0 ff ff       	call   c001833c <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019324:	5a                   	pop    edx
c0019325:	59                   	pop    ecx
c0019326:	50                   	push   eax
c0019327:	56                   	push   esi
c0019328:	e8 47 76 fe ff       	call   c0000974 <strcat>
c001932d:	5f                   	pop    edi
c001932e:	5d                   	pop    ebp
c001932f:	56                   	push   esi
c0019330:	53                   	push   ebx
c0019331:	e8 e2 ad ff ff       	call   c0014118 <Device::setName(char const*)>
c0019336:	58                   	pop    eax
c0019337:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001933d:	5a                   	pop    edx
c001933e:	68 34 b3 02 c0       	push   0xc002b334
c0019343:	50                   	push   eax
c0019344:	e8 77 75 fe ff       	call   c00008c0 <strcmp>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	85 c0                	test   eax,eax
c001934e:	75 20                	jne    c0019370 <CPU::detectFeatures()+0x704>
c0019350:	8b 15 e8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dde8
c0019356:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001935c:	a8 01                	test   al,0x1
c001935e:	74 10                	je     c0019370 <CPU::detectFeatures()+0x704>
c0019360:	83 e0 fe             	and    eax,0xfffffffe
c0019363:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019369:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019370:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019376:	c1 e8 0e             	shr    eax,0xe
c0019379:	3c 05                	cmp    al,0x5
c001937b:	0f 85 cc 02 00 00    	jne    c001964d <CPU::detectFeatures()+0x9e1>
c0019381:	56                   	push   esi
c0019382:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019388:	83 e0 0f             	and    eax,0xf
c001938b:	50                   	push   eax
c001938c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019392:	66 c1 e8 06          	shr    ax,0x6
c0019396:	0f b6 c0             	movzx  eax,al
c0019399:	50                   	push   eax
c001939a:	6a 05                	push   0x5
c001939c:	e8 11 f4 ff ff       	call   c00187b2 <CPU::AMD_K6_writeback(int, int, int)>
c00193a1:	e9 1f 02 00 00       	jmp    c00195c5 <CPU::detectFeatures()+0x959>
c00193a6:	8d 50 fd             	lea    edx,[eax-0x3]
c00193a9:	83 fa 01             	cmp    edx,0x1
c00193ac:	76 09                	jbe    c00193b7 <CPU::detectFeatures()+0x74b>
c00193ae:	83 f8 06             	cmp    eax,0x6
c00193b1:	0f 85 91 01 00 00    	jne    c0019548 <CPU::detectFeatures()+0x8dc>
c00193b7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00193bd:	c1 ea 0e             	shr    edx,0xe
c00193c0:	80 fa 05             	cmp    dl,0x5
c00193c3:	75 7b                	jne    c0019440 <CPU::detectFeatures()+0x7d4>
c00193c5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00193cb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00193d0:	66 81 fa 00 01       	cmp    dx,0x100
c00193d5:	75 0c                	jne    c00193e3 <CPU::detectFeatures()+0x777>
c00193d7:	51                   	push   ecx
c00193d8:	51                   	push   ecx
c00193d9:	68 3b b3 02 c0       	push   0xc002b33b
c00193de:	e9 dc 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c00193e3:	66 81 fa 00 02       	cmp    dx,0x200
c00193e8:	75 0c                	jne    c00193f6 <CPU::detectFeatures()+0x78a>
c00193ea:	52                   	push   edx
c00193eb:	52                   	push   edx
c00193ec:	68 4e b3 02 c0       	push   0xc002b34e
c00193f1:	e9 c9 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c00193f6:	66 81 fa 40 02       	cmp    dx,0x240
c00193fb:	75 0c                	jne    c0019409 <CPU::detectFeatures()+0x79d>
c00193fd:	50                   	push   eax
c00193fe:	50                   	push   eax
c00193ff:	68 60 b3 02 c0       	push   0xc002b360
c0019404:	e9 b6 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019409:	83 f8 06             	cmp    eax,0x6
c001940c:	75 0c                	jne    c001941a <CPU::detectFeatures()+0x7ae>
c001940e:	50                   	push   eax
c001940f:	50                   	push   eax
c0019410:	68 72 b3 02 c0       	push   0xc002b372
c0019415:	e9 a5 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c001941a:	83 f8 04             	cmp    eax,0x4
c001941d:	75 0c                	jne    c001942b <CPU::detectFeatures()+0x7bf>
c001941f:	50                   	push   eax
c0019420:	50                   	push   eax
c0019421:	68 7e b3 02 c0       	push   0xc002b37e
c0019426:	e9 94 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c001942b:	83 f8 03             	cmp    eax,0x3
c001942e:	0f 85 19 02 00 00    	jne    c001964d <CPU::detectFeatures()+0x9e1>
c0019434:	50                   	push   eax
c0019435:	50                   	push   eax
c0019436:	68 86 b3 02 c0       	push   0xc002b386
c001943b:	e9 7f 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019440:	80 fa 06             	cmp    dl,0x6
c0019443:	0f 85 db 00 00 00    	jne    c0019524 <CPU::detectFeatures()+0x8b8>
c0019449:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001944f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019454:	66 81 fa 80 01       	cmp    dx,0x180
c0019459:	75 0c                	jne    c0019467 <CPU::detectFeatures()+0x7fb>
c001945b:	50                   	push   eax
c001945c:	50                   	push   eax
c001945d:	68 91 b3 02 c0       	push   0xc002b391
c0019462:	e9 58 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019467:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001946d:	66 f7 c1 80 ff       	test   cx,0xff80
c0019472:	75 0c                	jne    c0019480 <CPU::detectFeatures()+0x814>
c0019474:	50                   	push   eax
c0019475:	50                   	push   eax
c0019476:	68 a1 b3 02 c0       	push   0xc002b3a1
c001947b:	e9 3f 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019480:	66 81 fa 40 02       	cmp    dx,0x240
c0019485:	75 0c                	jne    c0019493 <CPU::detectFeatures()+0x827>
c0019487:	55                   	push   ebp
c0019488:	55                   	push   ebp
c0019489:	68 a8 b3 02 c0       	push   0xc002b3a8
c001948e:	e9 2c 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019493:	66 81 fa 80 02       	cmp    dx,0x280
c0019498:	75 0c                	jne    c00194a6 <CPU::detectFeatures()+0x83a>
c001949a:	57                   	push   edi
c001949b:	57                   	push   edi
c001949c:	68 b1 b3 02 c0       	push   0xc002b3b1
c00194a1:	e9 19 01 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c00194a6:	66 81 fa 40 03       	cmp    dx,0x340
c00194ab:	74 ed                	je     c001949a <CPU::detectFeatures()+0x82e>
c00194ad:	66 81 fa c0 03       	cmp    dx,0x3c0
c00194b2:	75 0c                	jne    c00194c0 <CPU::detectFeatures()+0x854>
c00194b4:	56                   	push   esi
c00194b5:	56                   	push   esi
c00194b6:	68 b8 b3 02 c0       	push   0xc002b3b8
c00194bb:	e9 ff 00 00 00       	jmp    c00195bf <CPU::detectFeatures()+0x953>
c00194c0:	83 f8 06             	cmp    eax,0x6
c00194c3:	0f 84 45 ff ff ff    	je     c001940e <CPU::detectFeatures()+0x7a2>
c00194c9:	83 f8 04             	cmp    eax,0x4
c00194cc:	0f 84 4d ff ff ff    	je     c001941f <CPU::detectFeatures()+0x7b3>
c00194d2:	83 f8 03             	cmp    eax,0x3
c00194d5:	0f 85 72 01 00 00    	jne    c001964d <CPU::detectFeatures()+0x9e1>
c00194db:	51                   	push   ecx
c00194dc:	51                   	push   ecx
c00194dd:	68 c1 b3 02 c0       	push   0xc002b3c1
c00194e2:	53                   	push   ebx
c00194e3:	e8 30 ac ff ff       	call   c0014118 <Device::setName(char const*)>
c00194e8:	b1 c1                	mov    cl,0xc1
c00194ea:	88 c8                	mov    al,cl
c00194ec:	e6 22                	out    0x22,al
c00194ee:	e4 23                	in     al,0x23
c00194f0:	88 c2                	mov    dl,al
c00194f2:	88 c8                	mov    al,cl
c00194f4:	e6 22                	out    0x22,al
c00194f6:	88 d0                	mov    al,dl
c00194f8:	83 c8 10             	or     eax,0x10
c00194fb:	e6 23                	out    0x23,al
c00194fd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019504:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019507:	89 d0                	mov    eax,edx
c0019509:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001950f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019513:	40                   	inc    eax
c0019514:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001951a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001951f:	e9 a1 00 00 00       	jmp    c00195c5 <CPU::detectFeatures()+0x959>
c0019524:	83 f8 06             	cmp    eax,0x6
c0019527:	0f 84 e1 fe ff ff    	je     c001940e <CPU::detectFeatures()+0x7a2>
c001952d:	83 f8 04             	cmp    eax,0x4
c0019530:	0f 84 e9 fe ff ff    	je     c001941f <CPU::detectFeatures()+0x7b3>
c0019536:	83 f8 03             	cmp    eax,0x3
c0019539:	0f 85 0e 01 00 00    	jne    c001964d <CPU::detectFeatures()+0x9e1>
c001953f:	52                   	push   edx
c0019540:	52                   	push   edx
c0019541:	68 cc b3 02 c0       	push   0xc002b3cc
c0019546:	eb 77                	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019548:	83 f8 07             	cmp    eax,0x7
c001954b:	75 09                	jne    c0019556 <CPU::detectFeatures()+0x8ea>
c001954d:	50                   	push   eax
c001954e:	50                   	push   eax
c001954f:	68 d6 b3 02 c0       	push   0xc002b3d6
c0019554:	eb 69                	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019556:	83 f8 0a             	cmp    eax,0xa
c0019559:	75 09                	jne    c0019564 <CPU::detectFeatures()+0x8f8>
c001955b:	50                   	push   eax
c001955c:	50                   	push   eax
c001955d:	68 e1 b3 02 c0       	push   0xc002b3e1
c0019562:	eb 5b                	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019564:	83 f8 0b             	cmp    eax,0xb
c0019567:	75 09                	jne    c0019572 <CPU::detectFeatures()+0x906>
c0019569:	50                   	push   eax
c001956a:	50                   	push   eax
c001956b:	68 e9 b3 02 c0       	push   0xc002b3e9
c0019570:	eb 4d                	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019572:	83 f8 08             	cmp    eax,0x8
c0019575:	75 09                	jne    c0019580 <CPU::detectFeatures()+0x914>
c0019577:	50                   	push   eax
c0019578:	50                   	push   eax
c0019579:	68 f2 b3 02 c0       	push   0xc002b3f2
c001957e:	eb 3f                	jmp    c00195bf <CPU::detectFeatures()+0x953>
c0019580:	83 f8 09             	cmp    eax,0x9
c0019583:	75 09                	jne    c001958e <CPU::detectFeatures()+0x922>
c0019585:	50                   	push   eax
c0019586:	50                   	push   eax
c0019587:	68 fa b3 02 c0       	push   0xc002b3fa
c001958c:	eb 31                	jmp    c00195bf <CPU::detectFeatures()+0x953>
c001958e:	83 f8 05             	cmp    eax,0x5
c0019591:	75 09                	jne    c001959c <CPU::detectFeatures()+0x930>
c0019593:	50                   	push   eax
c0019594:	50                   	push   eax
c0019595:	68 02 b4 02 c0       	push   0xc002b402
c001959a:	eb 23                	jmp    c00195bf <CPU::detectFeatures()+0x953>
c001959c:	83 f8 0c             	cmp    eax,0xc
c001959f:	75 09                	jne    c00195aa <CPU::detectFeatures()+0x93e>
c00195a1:	55                   	push   ebp
c00195a2:	55                   	push   ebp
c00195a3:	68 10 b4 02 c0       	push   0xc002b410
c00195a8:	eb 15                	jmp    c00195bf <CPU::detectFeatures()+0x953>
c00195aa:	83 f8 0d             	cmp    eax,0xd
c00195ad:	75 09                	jne    c00195b8 <CPU::detectFeatures()+0x94c>
c00195af:	57                   	push   edi
c00195b0:	57                   	push   edi
c00195b1:	68 1b b4 02 c0       	push   0xc002b41b
c00195b6:	eb 07                	jmp    c00195bf <CPU::detectFeatures()+0x953>
c00195b8:	56                   	push   esi
c00195b9:	56                   	push   esi
c00195ba:	68 2f b4 02 c0       	push   0xc002b42f
c00195bf:	53                   	push   ebx
c00195c0:	e8 53 ab ff ff       	call   c0014118 <Device::setName(char const*)>
c00195c5:	83 c4 10             	add    esp,0x10
c00195c8:	e9 80 00 00 00       	jmp    c001964d <CPU::detectFeatures()+0x9e1>
c00195cd:	51                   	push   ecx
c00195ce:	51                   	push   ecx
c00195cf:	68 7b b2 02 c0       	push   0xc002b27b
c00195d4:	57                   	push   edi
c00195d5:	e8 5a 72 fe ff       	call   c0000834 <strcpy>
c00195da:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195e4:	e8 c5 6c fe ff       	call   c00002ae <is486>
c00195e9:	83 c4 10             	add    esp,0x10
c00195ec:	85 c0                	test   eax,eax
c00195ee:	74 2b                	je     c001961b <CPU::detectFeatures()+0x9af>
c00195f0:	52                   	push   edx
c00195f1:	52                   	push   edx
c00195f2:	68 3b b4 02 c0       	push   0xc002b43b
c00195f7:	53                   	push   ebx
c00195f8:	e8 1b ab ff ff       	call   c0014118 <Device::setName(char const*)>
c00195fd:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019604:	0f 20 c0             	mov    eax,cr0
c0019607:	83 e0 14             	and    eax,0x14
c001960a:	83 c4 10             	add    esp,0x10
c001960d:	83 f8 04             	cmp    eax,0x4
c0019610:	75 1f                	jne    c0019631 <CPU::detectFeatures()+0x9c5>
c0019612:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019619:	eb 32                	jmp    c001964d <CPU::detectFeatures()+0x9e1>
c001961b:	50                   	push   eax
c001961c:	50                   	push   eax
c001961d:	68 46 b4 02 c0       	push   0xc002b446
c0019622:	53                   	push   ebx
c0019623:	e8 f0 aa ff ff       	call   c0014118 <Device::setName(char const*)>
c0019628:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001962f:	eb d3                	jmp    c0019604 <CPU::detectFeatures()+0x998>
c0019631:	e8 53 6c fe ff       	call   c0000289 <hasLegacyFPU>
c0019636:	83 e0 01             	and    eax,0x1
c0019639:	8d 14 00             	lea    edx,[eax+eax*1]
c001963c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019642:	83 e0 fd             	and    eax,0xfffffffd
c0019645:	09 d0                	or     eax,edx
c0019647:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001964d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019654:	83 c4 4c             	add    esp,0x4c
c0019657:	5b                   	pop    ebx
c0019658:	5e                   	pop    esi
c0019659:	5f                   	pop    edi
c001965a:	5d                   	pop    ebp
c001965b:	c3                   	ret    

c001965c <CPU::setupSMEP()>:
c001965c:	0f 20 e0             	mov    eax,cr4
c001965f:	0d 00 00 10 00       	or     eax,0x100000
c0019664:	0f 22 e0             	mov    cr4,eax
c0019667:	c3                   	ret    

c0019668 <CPU::setupUMIP()>:
c0019668:	0f 20 e0             	mov    eax,cr4
c001966b:	80 cc 08             	or     ah,0x8
c001966e:	0f 22 e0             	mov    cr4,eax
c0019671:	c3                   	ret    

c0019672 <CPU::setupTSC()>:
c0019672:	0f 20 e0             	mov    eax,cr4
c0019675:	83 c8 04             	or     eax,0x4
c0019678:	0f 22 e0             	mov    cr4,eax
c001967b:	c3                   	ret    

c001967c <CPU::setupLargePages()>:
c001967c:	0f 20 e0             	mov    eax,cr4
c001967f:	83 c8 10             	or     eax,0x10
c0019682:	0f 22 e0             	mov    cr4,eax
c0019685:	c3                   	ret    

c0019686 <CPU::setupPAT()>:
c0019686:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001968b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019692:	74 2c                	je     c00196c0 <CPU::setupPAT()+0x3a>
c0019694:	53                   	push   ebx
c0019695:	83 ec 10             	sub    esp,0x10
c0019698:	68 77 02 00 00       	push   0x277
c001969d:	50                   	push   eax
c001969e:	e8 45 57 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00196a3:	83 e2 f8             	and    edx,0xfffffff8
c00196a6:	83 ca 01             	or     edx,0x1
c00196a9:	52                   	push   edx
c00196aa:	50                   	push   eax
c00196ab:	68 77 02 00 00       	push   0x277
c00196b0:	ff 35 e8 dd 02 c0    	push   DWORD PTR ds:0xc002dde8
c00196b6:	e8 59 57 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c00196bb:	83 c4 28             	add    esp,0x28
c00196be:	5b                   	pop    ebx
c00196bf:	c3                   	ret    
c00196c0:	c3                   	ret    
c00196c1:	90                   	nop

c00196c2 <CPU::setupMTRR()>:
c00196c2:	c3                   	ret    
c00196c3:	90                   	nop

c00196c4 <CPU::setupGlobalPages()>:
c00196c4:	0f 20 e0             	mov    eax,cr4
c00196c7:	0c 80                	or     al,0x80
c00196c9:	0f 22 e0             	mov    cr4,eax
c00196cc:	c3                   	ret    
c00196cd:	90                   	nop

c00196ce <CPU::allowUsermodeDataAccess()>:
c00196ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196d2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196d9:	74 03                	je     c00196de <CPU::allowUsermodeDataAccess()+0x10>
c00196db:	0f 01 cb             	stac   
c00196de:	c3                   	ret    
c00196df:	90                   	nop

c00196e0 <CPU::prohibitUsermodeDataAccess()>:
c00196e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196e4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196eb:	74 03                	je     c00196f0 <CPU::prohibitUsermodeDataAccess()+0x10>
c00196ed:	0f 01 ca             	clac   
c00196f0:	c3                   	ret    
c00196f1:	90                   	nop

c00196f2 <CPU::setupSMAP()>:
c00196f2:	0f 20 e0             	mov    eax,cr4
c00196f5:	0d 00 00 20 00       	or     eax,0x200000
c00196fa:	0f 22 e0             	mov    cr4,eax
c00196fd:	eb e1                	jmp    c00196e0 <CPU::prohibitUsermodeDataAccess()>
c00196ff:	90                   	nop

c0019700 <CPU::setupFeatures()>:
c0019700:	83 ec 0c             	sub    esp,0xc
c0019703:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019707:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001970e:	74 07                	je     c0019717 <CPU::setupFeatures()+0x17>
c0019710:	52                   	push   edx
c0019711:	e8 46 ff ff ff       	call   c001965c <CPU::setupSMEP()>
c0019716:	58                   	pop    eax
c0019717:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001971e:	74 07                	je     c0019727 <CPU::setupFeatures()+0x27>
c0019720:	52                   	push   edx
c0019721:	e8 cc ff ff ff       	call   c00196f2 <CPU::setupSMAP()>
c0019726:	58                   	pop    eax
c0019727:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001972e:	74 07                	je     c0019737 <CPU::setupFeatures()+0x37>
c0019730:	52                   	push   edx
c0019731:	e8 32 ff ff ff       	call   c0019668 <CPU::setupUMIP()>
c0019736:	58                   	pop    eax
c0019737:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001973e:	74 07                	je     c0019747 <CPU::setupFeatures()+0x47>
c0019740:	52                   	push   edx
c0019741:	e8 2c ff ff ff       	call   c0019672 <CPU::setupTSC()>
c0019746:	58                   	pop    eax
c0019747:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001974e:	74 07                	je     c0019757 <CPU::setupFeatures()+0x57>
c0019750:	52                   	push   edx
c0019751:	e8 26 ff ff ff       	call   c001967c <CPU::setupLargePages()>
c0019756:	59                   	pop    ecx
c0019757:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001975e:	74 07                	je     c0019767 <CPU::setupFeatures()+0x67>
c0019760:	52                   	push   edx
c0019761:	e8 5e ff ff ff       	call   c00196c4 <CPU::setupGlobalPages()>
c0019766:	58                   	pop    eax
c0019767:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001976e:	74 0c                	je     c001977c <CPU::setupFeatures()+0x7c>
c0019770:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019774:	83 c4 0c             	add    esp,0xc
c0019777:	e9 0a ff ff ff       	jmp    c0019686 <CPU::setupPAT()>
c001977c:	83 c4 0c             	add    esp,0xc
c001977f:	c3                   	ret    

c0019780 <CPU::open(int, int, void*)>:
c0019780:	57                   	push   edi
c0019781:	56                   	push   esi
c0019782:	53                   	push   ebx
c0019783:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001978b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019791:	83 ec 0c             	sub    esp,0xc
c0019794:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001979a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00197a0:	50                   	push   eax
c00197a1:	e8 2e 59 ff ff       	call   c000f0d4 <GDT::setup()>
c00197a6:	83 c4 0c             	add    esp,0xc
c00197a9:	6a 00                	push   0x0
c00197ab:	68 ef be ad de       	push   0xdeadbeef
c00197b0:	57                   	push   edi
c00197b1:	e8 da 7c ff ff       	call   c0011490 <TSS::setup(unsigned long, unsigned long)>
c00197b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00197b9:	e8 b2 7c ff ff       	call   c0011470 <TSS::flush()>
c00197be:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00197c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00197c7:	e8 64 5b ff ff       	call   c000f330 <IDT::setup()>
c00197cc:	b8 00 04 00 00       	mov    eax,0x400
c00197d1:	0f 23 f8             	mov    db7,eax
c00197d4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00197de:	e8 fa 66 ff ff       	call   c000fedd <Phys::allocatePage()>
c00197e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00197e9:	89 30                	mov    DWORD PTR [eax],esi
c00197eb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00197f1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00197f4:	58                   	pop    eax
c00197f5:	5a                   	pop    edx
c00197f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019800:	e8 bd 8c ff ff       	call   c00124c2 <VAS::setCPUSpecific(unsigned long)>
c0019805:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019808:	e8 5f f4 ff ff       	call   c0018c6c <CPU::detectFeatures()>
c001980d:	e8 cf bc ff ff       	call   c00154e1 <setupInterruptController()>
c0019812:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019818:	a1 00 de 02 c0       	mov    eax,ds:0xc002de00
c001981d:	83 e0 10             	and    eax,0x10
c0019820:	83 f8 01             	cmp    eax,0x1
c0019823:	19 c0                	sbb    eax,eax
c0019825:	83 e0 46             	and    eax,0x46
c0019828:	83 c0 1e             	add    eax,0x1e
c001982b:	89 04 24             	mov    DWORD PTR [esp],eax
c001982e:	e8 bb d1 ff ff       	call   c00169ee <setupTimer(int)>
c0019833:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001983c:	e8 bf fe ff ff       	call   c0019700 <CPU::setupFeatures()>
c0019841:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019844:	e8 a7 f1 ff ff       	call   c00189f0 <CPU::displayFeatures()>
c0019849:	83 c4 10             	add    esp,0x10
c001984c:	31 c0                	xor    eax,eax
c001984e:	5b                   	pop    ebx
c001984f:	5e                   	pop    esi
c0019850:	5f                   	pop    edi
c0019851:	c3                   	ret    

c0019852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019852:	57                   	push   edi
c0019853:	56                   	push   esi
c0019854:	53                   	push   ebx
c0019855:	51                   	push   ecx
c0019856:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001985a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001985d:	0f 02 c0             	lar    eax,ax
c0019860:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019863:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019867:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001986a:	88 ca                	mov    dl,cl
c001986c:	c0 ea 06             	shr    dl,0x6
c001986f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019873:	89 ca                	mov    edx,ecx
c0019875:	66 c1 ea 03          	shr    dx,0x3
c0019879:	83 e2 07             	and    edx,0x7
c001987c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019881:	88 17                	mov    BYTE PTR [edi],dl
c0019883:	0f 84 a6 01 00 00    	je     c0019a2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019889:	83 e1 07             	and    ecx,0x7
c001988c:	80 f9 04             	cmp    cl,0x4
c001988f:	0f 84 98 00 00 00    	je     c001992d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019895:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001989a:	0f 95 c0             	setne  al
c001989d:	80 f9 05             	cmp    cl,0x5
c00198a0:	0f 95 c2             	setne  dl
c00198a3:	08 c2                	or     dl,al
c00198a5:	74 79                	je     c0019920 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00198a7:	84 c9                	test   cl,cl
c00198a9:	75 05                	jne    c00198b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00198ab:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00198ae:	eb 3c                	jmp    c00198ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198b0:	80 f9 01             	cmp    cl,0x1
c00198b3:	75 05                	jne    c00198ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00198b5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00198b8:	eb 32                	jmp    c00198ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198ba:	80 f9 02             	cmp    cl,0x2
c00198bd:	75 05                	jne    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00198bf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00198c2:	eb 28                	jmp    c00198ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198c4:	31 c0                	xor    eax,eax
c00198c6:	80 f9 03             	cmp    cl,0x3
c00198c9:	75 05                	jne    c00198d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00198cb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00198ce:	eb 1c                	jmp    c00198ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198d0:	80 f9 05             	cmp    cl,0x5
c00198d3:	75 05                	jne    c00198da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00198d5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00198d8:	eb 12                	jmp    c00198ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198da:	80 f9 06             	cmp    cl,0x6
c00198dd:	75 05                	jne    c00198e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00198df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00198e2:	eb 08                	jmp    c00198ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198e4:	80 f9 07             	cmp    cl,0x7
c00198e7:	75 03                	jne    c00198ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198e9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198ec:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00198f1:	75 10                	jne    c0019903 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00198f3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00198f7:	b9 03 00 00 00       	mov    ecx,0x3
c00198fc:	01 d0                	add    eax,edx
c00198fe:	e9 37 01 00 00       	jmp    c0019a3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019903:	b9 02 00 00 00       	mov    ecx,0x2
c0019908:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001990d:	0f 85 27 01 00 00    	jne    c0019a3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019913:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019916:	b9 06 00 00 00       	mov    ecx,0x6
c001991b:	e9 1a 01 00 00       	jmp    c0019a3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019920:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019923:	b9 06 00 00 00       	mov    ecx,0x6
c0019928:	e9 0f 01 00 00       	jmp    c0019a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001992d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019930:	88 ca                	mov    dl,cl
c0019932:	c0 ea 06             	shr    dl,0x6
c0019935:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019939:	89 ca                	mov    edx,ecx
c001993b:	66 c1 ea 03          	shr    dx,0x3
c001993f:	83 e2 07             	and    edx,0x7
c0019942:	80 e1 07             	and    cl,0x7
c0019945:	75 05                	jne    c001994c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019947:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001994a:	eb 4c                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001994c:	80 f9 01             	cmp    cl,0x1
c001994f:	75 05                	jne    c0019956 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019951:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019954:	eb 42                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019956:	80 f9 02             	cmp    cl,0x2
c0019959:	75 05                	jne    c0019960 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001995b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001995e:	eb 38                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019960:	80 f9 03             	cmp    cl,0x3
c0019963:	75 05                	jne    c001996a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019965:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019968:	eb 2e                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001996a:	80 f9 04             	cmp    cl,0x4
c001996d:	75 12                	jne    c0019981 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001996f:	f6 c4 60             	test   ah,0x60
c0019972:	75 08                	jne    c001997c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019974:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019977:	8d 78 14             	lea    edi,[eax+0x14]
c001997a:	eb 1c                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001997c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001997f:	eb 17                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019981:	80 f9 05             	cmp    cl,0x5
c0019984:	75 05                	jne    c001998b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019986:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019989:	eb 0d                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001998b:	80 f9 06             	cmp    cl,0x6
c001998e:	75 05                	jne    c0019995 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019990:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019993:	eb 03                	jmp    c0019998 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019995:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019998:	84 d2                	test   dl,dl
c001999a:	75 05                	jne    c00199a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001999c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001999f:	eb 3c                	jmp    c00199dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199a1:	80 fa 01             	cmp    dl,0x1
c00199a4:	75 05                	jne    c00199ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00199a6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00199a9:	eb 32                	jmp    c00199dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199ab:	80 fa 02             	cmp    dl,0x2
c00199ae:	75 05                	jne    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00199b0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00199b3:	eb 28                	jmp    c00199dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199b5:	80 fa 03             	cmp    dl,0x3
c00199b8:	75 05                	jne    c00199bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00199ba:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00199bd:	eb 1e                	jmp    c00199dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199bf:	31 c0                	xor    eax,eax
c00199c1:	80 fa 04             	cmp    dl,0x4
c00199c4:	74 17                	je     c00199dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199c6:	80 fa 05             	cmp    dl,0x5
c00199c9:	75 05                	jne    c00199d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00199cb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00199ce:	eb 0d                	jmp    c00199dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199d0:	80 fa 06             	cmp    dl,0x6
c00199d3:	75 05                	jne    c00199da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00199d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00199d8:	eb 03                	jmp    c00199dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199da:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00199dd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199e2:	0f 94 c2             	sete   dl
c00199e5:	80 f9 05             	cmp    cl,0x5
c00199e8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00199ec:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00199f1:	d3 e0                	shl    eax,cl
c00199f3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00199f7:	74 0a                	je     c0019a03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00199f9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00199fc:	b9 07 00 00 00       	mov    ecx,0x7
c0019a01:	eb 37                	jmp    c0019a3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a03:	01 f8                	add    eax,edi
c0019a05:	b9 03 00 00 00       	mov    ecx,0x3
c0019a0a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a0f:	74 2b                	je     c0019a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a11:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019a16:	75 0d                	jne    c0019a25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019a18:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019a1c:	01 c8                	add    eax,ecx
c0019a1e:	b9 04 00 00 00       	mov    ecx,0x4
c0019a23:	eb 17                	jmp    c0019a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a25:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019a28:	b9 07 00 00 00       	mov    ecx,0x7
c0019a2d:	eb 0d                	jmp    c0019a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a2f:	b9 02 00 00 00       	mov    ecx,0x2
c0019a34:	b2 01                	mov    dl,0x1
c0019a36:	31 c0                	xor    eax,eax
c0019a38:	eb 02                	jmp    c0019a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a3a:	31 d2                	xor    edx,edx
c0019a3c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a40:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019a42:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a46:	88 11                	mov    BYTE PTR [ecx],dl
c0019a48:	5a                   	pop    edx
c0019a49:	5b                   	pop    ebx
c0019a4a:	5e                   	pop    esi
c0019a4b:	5f                   	pop    edi
c0019a4c:	c3                   	ret    

c0019a4d <Krnl::smpEntry()>:
c0019a4d:	eb fe                	jmp    c0019a4d <Krnl::smpEntry()>

c0019a4f <Krnl::startCPU(int)>:
c0019a4f:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0019a54:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a5b:	0f 84 36 01 00 00    	je     c0019b97 <Krnl::startCPU(int)+0x148>
c0019a61:	53                   	push   ebx
c0019a62:	83 ec 08             	sub    esp,0x8
c0019a65:	e8 1c 3e 00 00       	call   c001d886 <lockScheduler()>
c0019a6a:	52                   	push   edx
c0019a6b:	52                   	push   edx
c0019a6c:	6a 1b                	push   0x1b
c0019a6e:	ff 35 e8 dd 02 c0    	push   DWORD PTR ds:0xc002dde8
c0019a74:	e8 6f 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019a79:	59                   	pop    ecx
c0019a7a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019a7f:	89 c3                	mov    ebx,eax
c0019a81:	58                   	pop    eax
c0019a82:	53                   	push   ebx
c0019a83:	68 80 b4 02 c0       	push   0xc002b480
c0019a88:	e8 82 90 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0019a8d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a9b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019aa5:	c1 e0 18             	shl    eax,0x18
c0019aa8:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019aae:	83 c4 10             	add    esp,0x10
c0019ab1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ab7:	09 c2                	or     edx,eax
c0019ab9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019abf:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ac5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019acb:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ad1:	80 cd c5             	or     ch,0xc5
c0019ad4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ada:	f3 90                	pause  
c0019adc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ade:	0f ba e1 0c          	bt     ecx,0xc
c0019ae2:	72 f6                	jb     c0019ada <Krnl::startCPU(int)+0x8b>
c0019ae4:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019aea:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019af0:	09 c1                	or     ecx,eax
c0019af2:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019af8:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019afe:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019b04:	80 cd 85             	or     ch,0x85
c0019b07:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019b0d:	f3 90                	pause  
c0019b0f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b11:	0f ba e1 0c          	bt     ecx,0xc
c0019b15:	72 f6                	jb     c0019b0d <Krnl::startCPU(int)+0xbe>
c0019b17:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b21:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019b27:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019b2d:	09 c1                	or     ecx,eax
c0019b2f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019b35:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b3b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019b41:	81 c9 02 06 00 00    	or     ecx,0x602
c0019b47:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019b4d:	f3 90                	pause  
c0019b4f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b51:	0f ba e1 0c          	bt     ecx,0xc
c0019b55:	72 f6                	jb     c0019b4d <Krnl::startCPU(int)+0xfe>
c0019b57:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b61:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019b67:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019b6d:	09 c8                	or     eax,ecx
c0019b6f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019b75:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019b7b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019b80:	0d 02 06 00 00       	or     eax,0x602
c0019b85:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019b8b:	f3 90                	pause  
c0019b8d:	8b 02                	mov    eax,DWORD PTR [edx]
c0019b8f:	0f ba e0 0c          	bt     eax,0xc
c0019b93:	72 f6                	jb     c0019b8b <Krnl::startCPU(int)+0x13c>
c0019b95:	eb fe                	jmp    c0019b95 <Krnl::startCPU(int)+0x146>
c0019b97:	c3                   	ret    

c0019b98 <Krnl::startCPUs()>:
c0019b98:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0019b9d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019ba3:	88 c2                	mov    dl,al
c0019ba5:	83 e2 0a             	and    edx,0xa
c0019ba8:	80 fa 0a             	cmp    dl,0xa
c0019bab:	75 09                	jne    c0019bb6 <Krnl::startCPUs()+0x1e>
c0019bad:	a8 01                	test   al,0x1
c0019baf:	74 05                	je     c0019bb6 <Krnl::startCPUs()+0x1e>
c0019bb1:	e9 e5 65 fe ff       	jmp    c000019b <prepareTramp>
c0019bb6:	c3                   	ret    
c0019bb7:	90                   	nop

c0019bb8 <EnvVarContainer::getEnv(char const*)>:
c0019bb8:	57                   	push   edi
c0019bb9:	56                   	push   esi
c0019bba:	53                   	push   ebx
c0019bbb:	31 db                	xor    ebx,ebx
c0019bbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bc1:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019bc3:	7e 2b                	jle    c0019bf0 <EnvVarContainer::getEnv(char const*)+0x38>
c0019bc5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019bcc:	50                   	push   eax
c0019bcd:	50                   	push   eax
c0019bce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019bd1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019bd4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019bd8:	e8 e3 6c fe ff       	call   c00008c0 <strcmp>
c0019bdd:	83 c4 10             	add    esp,0x10
c0019be0:	85 c0                	test   eax,eax
c0019be2:	75 09                	jne    c0019bed <EnvVarContainer::getEnv(char const*)+0x35>
c0019be4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019be7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019beb:	eb 05                	jmp    c0019bf2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019bed:	43                   	inc    ebx
c0019bee:	eb d1                	jmp    c0019bc1 <EnvVarContainer::getEnv(char const*)+0x9>
c0019bf0:	31 c0                	xor    eax,eax
c0019bf2:	5b                   	pop    ebx
c0019bf3:	5e                   	pop    esi
c0019bf4:	5f                   	pop    edi
c0019bf5:	c3                   	ret    

c0019bf6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019bf6:	57                   	push   edi
c0019bf7:	56                   	push   esi
c0019bf8:	53                   	push   ebx
c0019bf9:	83 ec 1c             	sub    esp,0x1c
c0019bfc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019c00:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019c04:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019c08:	57                   	push   edi
c0019c09:	e8 86 6b fe ff       	call   c0000794 <strlen>
c0019c0e:	40                   	inc    eax
c0019c0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c12:	e8 29 5c ff ff       	call   c000f840 <malloc>
c0019c17:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c1e:	e8 71 6b fe ff       	call   c0000794 <strlen>
c0019c23:	40                   	inc    eax
c0019c24:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c27:	e8 14 5c ff ff       	call   c000f840 <malloc>
c0019c2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c33:	e8 5c 6b fe ff       	call   c0000794 <strlen>
c0019c38:	83 c4 0c             	add    esp,0xc
c0019c3b:	40                   	inc    eax
c0019c3c:	50                   	push   eax
c0019c3d:	6a 00                	push   0x0
c0019c3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019c43:	e8 30 6b fe ff       	call   c0000778 <memset>
c0019c48:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c4b:	e8 44 6b fe ff       	call   c0000794 <strlen>
c0019c50:	83 c4 0c             	add    esp,0xc
c0019c53:	40                   	inc    eax
c0019c54:	50                   	push   eax
c0019c55:	57                   	push   edi
c0019c56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019c5a:	e8 e5 6a fe ff       	call   c0000744 <memcpy>
c0019c5f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c62:	e8 2d 6b fe ff       	call   c0000794 <strlen>
c0019c67:	83 c4 0c             	add    esp,0xc
c0019c6a:	40                   	inc    eax
c0019c6b:	50                   	push   eax
c0019c6c:	6a 00                	push   0x0
c0019c6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c72:	e8 01 6b fe ff       	call   c0000778 <memset>
c0019c77:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c7a:	e8 15 6b fe ff       	call   c0000794 <strlen>
c0019c7f:	83 c4 0c             	add    esp,0xc
c0019c82:	40                   	inc    eax
c0019c83:	50                   	push   eax
c0019c84:	56                   	push   esi
c0019c85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c89:	e8 b6 6a fe ff       	call   c0000744 <memcpy>
c0019c8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c90:	40                   	inc    eax
c0019c91:	89 03                	mov    DWORD PTR [ebx],eax
c0019c93:	c1 e0 03             	shl    eax,0x3
c0019c96:	5a                   	pop    edx
c0019c97:	59                   	pop    ecx
c0019c98:	50                   	push   eax
c0019c99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019c9c:	e8 8b 5b ff ff       	call   c000f82c <realloc>
c0019ca1:	83 c4 0c             	add    esp,0xc
c0019ca4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019ca7:	6a 08                	push   0x8
c0019ca9:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019cad:	52                   	push   edx
c0019cae:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019cb0:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019cb4:	50                   	push   eax
c0019cb5:	e8 8a 6a fe ff       	call   c0000744 <memcpy>
c0019cba:	83 c4 20             	add    esp,0x20
c0019cbd:	5b                   	pop    ebx
c0019cbe:	5e                   	pop    esi
c0019cbf:	5f                   	pop    edi
c0019cc0:	c3                   	ret    
c0019cc1:	90                   	nop

c0019cc2 <EnvVarContainer::deleteEnv(char const*)>:
c0019cc2:	c3                   	ret    
c0019cc3:	90                   	nop

c0019cc4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019cc4:	55                   	push   ebp
c0019cc5:	57                   	push   edi
c0019cc6:	56                   	push   esi
c0019cc7:	53                   	push   ebx
c0019cc8:	81 ec 38 01 00 00    	sub    esp,0x138
c0019cce:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019cd5:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019cdc:	68 14 01 00 00       	push   0x114
c0019ce1:	e8 5a 5b ff ff       	call   c000f840 <malloc>
c0019ce6:	83 c4 0c             	add    esp,0xc
c0019ce9:	89 c7                	mov    edi,eax
c0019ceb:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019cee:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019cf5:	50                   	push   eax
c0019cf6:	e8 6d 93 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c0019cfb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019cfe:	e8 37 96 ff ff       	call   c001333a <File::exists()>
c0019d03:	83 c4 10             	add    esp,0x10
c0019d06:	84 c0                	test   al,al
c0019d08:	75 31                	jne    c0019d3b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019d0a:	51                   	push   ecx
c0019d0b:	51                   	push   ecx
c0019d0c:	6a 12                	push   0x12
c0019d0e:	57                   	push   edi
c0019d0f:	e8 b8 93 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c0019d14:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d16:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019d19:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019d1c:	e8 73 6a fe ff       	call   c0000794 <strlen>
c0019d21:	5a                   	pop    edx
c0019d22:	31 d2                	xor    edx,edx
c0019d24:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019d28:	51                   	push   ecx
c0019d29:	55                   	push   ebp
c0019d2a:	52                   	push   edx
c0019d2b:	50                   	push   eax
c0019d2c:	57                   	push   edi
c0019d2d:	ff d3                	call   ebx
c0019d2f:	83 c4 14             	add    esp,0x14
c0019d32:	57                   	push   edi
c0019d33:	e8 f2 93 ff ff       	call   c001312a <File::close()>
c0019d38:	83 c4 10             	add    esp,0x10
c0019d3b:	31 db                	xor    ebx,ebx
c0019d3d:	50                   	push   eax
c0019d3e:	31 ed                	xor    ebp,ebp
c0019d40:	68 00 01 00 00       	push   0x100
c0019d45:	6a 00                	push   0x0
c0019d47:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d4b:	50                   	push   eax
c0019d4c:	e8 27 6a fe ff       	call   c0000778 <memset>
c0019d51:	58                   	pop    eax
c0019d52:	5a                   	pop    edx
c0019d53:	6a 01                	push   0x1
c0019d55:	57                   	push   edi
c0019d56:	e8 71 93 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	83 ec 0c             	sub    esp,0xc
c0019d61:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d63:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019d67:	51                   	push   ecx
c0019d68:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019d6c:	52                   	push   edx
c0019d6d:	6a 00                	push   0x0
c0019d6f:	6a 01                	push   0x1
c0019d71:	57                   	push   edi
c0019d72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d75:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019d79:	83 c4 20             	add    esp,0x20
c0019d7c:	3c 0d                	cmp    al,0xd
c0019d7e:	0f 84 12 01 00 00    	je     c0019e96 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019d84:	85 db                	test   ebx,ebx
c0019d86:	0f 84 fd 00 00 00    	je     c0019e89 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019d8c:	3c 0a                	cmp    al,0xa
c0019d8e:	74 13                	je     c0019da3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019d90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019d95:	74 0c                	je     c0019da3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019d97:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019d9d:	0f 8e e6 00 00 00    	jle    c0019e89 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019da3:	83 ec 0c             	sub    esp,0xc
c0019da6:	8d 53 01             	lea    edx,[ebx+0x1]
c0019da9:	29 dd                	sub    ebp,ebx
c0019dab:	52                   	push   edx
c0019dac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019db0:	e8 8b 5a ff ff       	call   c000f840 <malloc>
c0019db5:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019db8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019dbc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019dbf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019dc3:	e8 78 5a ff ff       	call   c000f840 <malloc>
c0019dc8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019dcc:	83 c4 0c             	add    esp,0xc
c0019dcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019dd3:	52                   	push   edx
c0019dd4:	6a 00                	push   0x0
c0019dd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019dda:	e8 99 69 fe ff       	call   c0000778 <memset>
c0019ddf:	83 c4 0c             	add    esp,0xc
c0019de2:	53                   	push   ebx
c0019de3:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019de7:	55                   	push   ebp
c0019de8:	01 eb                	add    ebx,ebp
c0019dea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019dee:	e8 51 69 fe ff       	call   c0000744 <memcpy>
c0019df3:	83 c4 0c             	add    esp,0xc
c0019df6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019dfa:	51                   	push   ecx
c0019dfb:	6a 00                	push   0x0
c0019dfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e01:	e8 72 69 fe ff       	call   c0000778 <memset>
c0019e06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e09:	e8 86 69 fe ff       	call   c0000794 <strlen>
c0019e0e:	83 c4 0c             	add    esp,0xc
c0019e11:	50                   	push   eax
c0019e12:	53                   	push   ebx
c0019e13:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e17:	e8 28 69 fe ff       	call   c0000744 <memcpy>
c0019e1c:	5b                   	pop    ebx
c0019e1d:	58                   	pop    eax
c0019e1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e22:	68 91 b4 02 c0       	push   0xc002b491
c0019e27:	e8 e3 8c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0019e2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0019e2e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019e31:	40                   	inc    eax
c0019e32:	83 c4 10             	add    esp,0x10
c0019e35:	89 06                	mov    DWORD PTR [esi],eax
c0019e37:	85 d2                	test   edx,edx
c0019e39:	75 0c                	jne    c0019e47 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019e3b:	83 ec 0c             	sub    esp,0xc
c0019e3e:	6a 08                	push   0x8
c0019e40:	e8 fb 59 ff ff       	call   c000f840 <malloc>
c0019e45:	eb 0c                	jmp    c0019e53 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019e47:	c1 e0 03             	shl    eax,0x3
c0019e4a:	51                   	push   ecx
c0019e4b:	51                   	push   ecx
c0019e4c:	50                   	push   eax
c0019e4d:	52                   	push   edx
c0019e4e:	e8 d9 59 ff ff       	call   c000f82c <realloc>
c0019e53:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019e56:	83 c4 10             	add    esp,0x10
c0019e59:	31 db                	xor    ebx,ebx
c0019e5b:	52                   	push   edx
c0019e5c:	6a 08                	push   0x8
c0019e5e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019e62:	50                   	push   eax
c0019e63:	8b 16                	mov    edx,DWORD PTR [esi]
c0019e65:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e68:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019e6c:	50                   	push   eax
c0019e6d:	e8 d2 68 fe ff       	call   c0000744 <memcpy>
c0019e72:	83 c4 0c             	add    esp,0xc
c0019e75:	68 00 01 00 00       	push   0x100
c0019e7a:	6a 00                	push   0x0
c0019e7c:	55                   	push   ebp
c0019e7d:	31 ed                	xor    ebp,ebp
c0019e7f:	e8 f4 68 fe ff       	call   c0000778 <memset>
c0019e84:	83 c4 10             	add    esp,0x10
c0019e87:	eb 0d                	jmp    c0019e96 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019e89:	3c 3d                	cmp    al,0x3d
c0019e8b:	74 07                	je     c0019e94 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019e8d:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019e91:	45                   	inc    ebp
c0019e92:	eb 02                	jmp    c0019e96 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019e94:	89 eb                	mov    ebx,ebp
c0019e96:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019e9b:	0f 85 bd fe ff ff    	jne    c0019d5e <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019ea1:	50                   	push   eax
c0019ea2:	50                   	push   eax
c0019ea3:	ff 36                	push   DWORD PTR [esi]
c0019ea5:	68 9f b4 02 c0       	push   0xc002b49f
c0019eaa:	e8 60 8c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0019eaf:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019eb5:	5b                   	pop    ebx
c0019eb6:	5e                   	pop    esi
c0019eb7:	5f                   	pop    edi
c0019eb8:	5d                   	pop    ebp
c0019eb9:	c3                   	ret    

c0019eba <EnvVarContainer::__loadSystem()>:
c0019eba:	83 ec 10             	sub    esp,0x10
c0019ebd:	68 20 d3 02 c0       	push   0xc002d320
c0019ec2:	68 ca b4 02 c0       	push   0xc002b4ca
c0019ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ecb:	e8 f4 fd ff ff       	call   c0019cc4 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019ed0:	83 c4 1c             	add    esp,0x1c
c0019ed3:	c3                   	ret    

c0019ed4 <EnvVarContainer::__loadUser()>:
c0019ed4:	c3                   	ret    
c0019ed5:	90                   	nop

c0019ed6 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019ed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019eda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ee4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ee8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019eeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019eef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ef6:	90                   	nop
c0019ef7:	c3                   	ret    

c0019ef8 <EnvVarContainer::~EnvVarContainer()>:
c0019ef8:	83 ec 0c             	sub    esp,0xc
c0019efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019f02:	85 c0                	test   eax,eax
c0019f04:	74 1d                	je     c0019f23 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f0c:	85 c0                	test   eax,eax
c0019f0e:	74 13                	je     c0019f23 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019f17:	83 ec 0c             	sub    esp,0xc
c0019f1a:	50                   	push   eax
c0019f1b:	e8 30 59 ff ff       	call   c000f850 <free>
c0019f20:	83 c4 10             	add    esp,0x10
c0019f23:	90                   	nop
c0019f24:	83 c4 0c             	add    esp,0xc
c0019f27:	c3                   	ret    

c0019f28 <Krnl::getEnv(Process*, char const*)>:
c0019f28:	53                   	push   ebx
c0019f29:	83 ec 08             	sub    esp,0x8
c0019f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f34:	39 05 54 13 03 c0    	cmp    DWORD PTR ds:0xc0031354,eax
c0019f3a:	74 04                	je     c0019f40 <Krnl::getEnv(Process*, char const*)+0x18>
c0019f3c:	85 c0                	test   eax,eax
c0019f3e:	75 0b                	jne    c0019f4b <Krnl::getEnv(Process*, char const*)+0x23>
c0019f40:	a1 34 09 03 c0       	mov    eax,ds:0xc0030934
c0019f45:	85 c0                	test   eax,eax
c0019f47:	75 19                	jne    c0019f62 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019f49:	eb 27                	jmp    c0019f72 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019f4b:	52                   	push   edx
c0019f4c:	52                   	push   edx
c0019f4d:	53                   	push   ebx
c0019f4e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019f54:	e8 5f fc ff ff       	call   c0019bb8 <EnvVarContainer::getEnv(char const*)>
c0019f59:	83 c4 10             	add    esp,0x10
c0019f5c:	85 c0                	test   eax,eax
c0019f5e:	75 28                	jne    c0019f88 <Krnl::getEnv(Process*, char const*)+0x60>
c0019f60:	eb de                	jmp    c0019f40 <Krnl::getEnv(Process*, char const*)+0x18>
c0019f62:	52                   	push   edx
c0019f63:	52                   	push   edx
c0019f64:	53                   	push   ebx
c0019f65:	50                   	push   eax
c0019f66:	e8 4d fc ff ff       	call   c0019bb8 <EnvVarContainer::getEnv(char const*)>
c0019f6b:	83 c4 10             	add    esp,0x10
c0019f6e:	85 c0                	test   eax,eax
c0019f70:	75 16                	jne    c0019f88 <Krnl::getEnv(Process*, char const*)+0x60>
c0019f72:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019f76:	a1 38 09 03 c0       	mov    eax,ds:0xc0030938
c0019f7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f7f:	83 c4 08             	add    esp,0x8
c0019f82:	5b                   	pop    ebx
c0019f83:	e9 30 fc ff ff       	jmp    c0019bb8 <EnvVarContainer::getEnv(char const*)>
c0019f88:	83 c4 08             	add    esp,0x8
c0019f8b:	5b                   	pop    ebx
c0019f8c:	c3                   	ret    

c0019f8d <Krnl::setEnvSystem(char const*, char const*)>:
c0019f8d:	83 ec 10             	sub    esp,0x10
c0019f90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f98:	ff 35 38 09 03 c0    	push   DWORD PTR ds:0xc0030938
c0019f9e:	e8 53 fc ff ff       	call   c0019bf6 <EnvVarContainer::setEnv(char const*, char const*)>
c0019fa3:	83 c4 1c             	add    esp,0x1c
c0019fa6:	c3                   	ret    

c0019fa7 <Krnl::setEnvUser(char const*, char const*)>:
c0019fa7:	a1 34 09 03 c0       	mov    eax,ds:0xc0030934
c0019fac:	85 c0                	test   eax,eax
c0019fae:	74 15                	je     c0019fc5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019fb0:	83 ec 10             	sub    esp,0x10
c0019fb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fbb:	50                   	push   eax
c0019fbc:	e8 35 fc ff ff       	call   c0019bf6 <EnvVarContainer::setEnv(char const*, char const*)>
c0019fc1:	83 c4 1c             	add    esp,0x1c
c0019fc4:	c3                   	ret    
c0019fc5:	c3                   	ret    

c0019fc6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fca:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019fd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fd4:	e9 1d fc ff ff       	jmp    c0019bf6 <EnvVarContainer::setEnv(char const*, char const*)>

c0019fd9 <Krnl::deleteEnvSystem(char const*)>:
c0019fd9:	c3                   	ret    

c0019fda <Krnl::deleteEnvUser(char const*)>:
c0019fda:	c3                   	ret    

c0019fdb <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019fdb:	c3                   	ret    

c0019fdc <Krnl::newProcessEnv(Process*)>:
c0019fdc:	83 ec 28             	sub    esp,0x28
c0019fdf:	6a 0c                	push   0xc
c0019fe1:	e8 5a 58 ff ff       	call   c000f840 <malloc>
c0019fe6:	5a                   	pop    edx
c0019fe7:	59                   	pop    ecx
c0019fe8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019fec:	50                   	push   eax
c0019fed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ff1:	e8 e0 fe ff ff       	call   c0019ed6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ffa:	83 c4 2c             	add    esp,0x2c
c0019ffd:	c3                   	ret    

c0019ffe <Krnl::copyProcessEnv(Process*, Process*)>:
c0019ffe:	56                   	push   esi
c0019fff:	53                   	push   ebx
c001a000:	83 ec 10             	sub    esp,0x10
c001a003:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a007:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a00d:	6a 0c                	push   0xc
c001a00f:	e8 2c 58 ff ff       	call   c000f840 <malloc>
c001a014:	89 c3                	mov    ebx,eax
c001a016:	58                   	pop    eax
c001a017:	5a                   	pop    edx
c001a018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a01c:	53                   	push   ebx
c001a01d:	e8 b4 fe ff ff       	call   c0019ed6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a022:	8b 06                	mov    eax,DWORD PTR [esi]
c001a024:	89 03                	mov    DWORD PTR [ebx],eax
c001a026:	c1 e0 03             	shl    eax,0x3
c001a029:	89 04 24             	mov    DWORD PTR [esp],eax
c001a02c:	e8 0f 58 ff ff       	call   c000f840 <malloc>
c001a031:	83 c4 0c             	add    esp,0xc
c001a034:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a037:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a039:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a040:	52                   	push   edx
c001a041:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a044:	50                   	push   eax
c001a045:	e8 fa 66 fe ff       	call   c0000744 <memcpy>
c001a04a:	89 d8                	mov    eax,ebx
c001a04c:	83 c4 14             	add    esp,0x14
c001a04f:	5b                   	pop    ebx
c001a050:	5e                   	pop    esi
c001a051:	c3                   	ret    

c001a052 <Krnl::loadSystemEnv()>:
c001a052:	53                   	push   ebx
c001a053:	83 ec 14             	sub    esp,0x14
c001a056:	6a 0c                	push   0xc
c001a058:	e8 e3 57 ff ff       	call   c000f840 <malloc>
c001a05d:	89 c3                	mov    ebx,eax
c001a05f:	58                   	pop    eax
c001a060:	5a                   	pop    edx
c001a061:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c001a067:	53                   	push   ebx
c001a068:	e8 69 fe ff ff       	call   c0019ed6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a06d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a070:	89 1d 38 09 03 c0    	mov    DWORD PTR ds:0xc0030938,ebx
c001a076:	e8 3f fe ff ff       	call   c0019eba <EnvVarContainer::__loadSystem()>
c001a07b:	83 c4 18             	add    esp,0x18
c001a07e:	5b                   	pop    ebx
c001a07f:	c3                   	ret    

c001a080 <Krnl::loadUserEnv()>:
c001a080:	53                   	push   ebx
c001a081:	83 ec 14             	sub    esp,0x14
c001a084:	6a 0c                	push   0xc
c001a086:	e8 b5 57 ff ff       	call   c000f840 <malloc>
c001a08b:	89 c3                	mov    ebx,eax
c001a08d:	58                   	pop    eax
c001a08e:	5a                   	pop    edx
c001a08f:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c001a095:	53                   	push   ebx
c001a096:	e8 3b fe ff ff       	call   c0019ed6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a09b:	89 1d 34 09 03 c0    	mov    DWORD PTR ds:0xc0030934,ebx
c001a0a1:	83 c4 18             	add    esp,0x18
c001a0a4:	5b                   	pop    ebx
c001a0a5:	c3                   	ret    

c001a0a6 <Krnl::flushEnv()>:
c001a0a6:	c3                   	ret    

c001a0a7 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a0a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0ab:	8b 15 34 09 03 c0    	mov    edx,DWORD PTR ds:0xc0030934
c001a0b1:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a0b7:	a1 38 09 03 c0       	mov    eax,ds:0xc0030938
c001a0bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0be:	03 01                	add    eax,DWORD PTR [ecx]
c001a0c0:	85 d2                	test   edx,edx
c001a0c2:	74 02                	je     c001a0c6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a0c4:	03 02                	add    eax,DWORD PTR [edx]
c001a0c6:	c3                   	ret    

c001a0c7 <Krnl::getProcessEnvPair(Process*, int)>:
c001a0c7:	57                   	push   edi
c001a0c8:	8b 0d 34 09 03 c0    	mov    ecx,DWORD PTR ds:0xc0030934
c001a0ce:	56                   	push   esi
c001a0cf:	85 c9                	test   ecx,ecx
c001a0d1:	53                   	push   ebx
c001a0d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a0d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0da:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a0e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0e4:	8b 02                	mov    eax,DWORD PTR [edx]
c001a0e6:	75 47                	jne    c001a12f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a0e8:	39 c3                	cmp    ebx,eax
c001a0ea:	7c 47                	jl     c001a133 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a0ec:	8b 15 38 09 03 c0    	mov    edx,DWORD PTR ds:0xc0030938
c001a0f2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a0f4:	01 c1                	add    ecx,eax
c001a0f6:	39 d9                	cmp    ecx,ebx
c001a0f8:	7e 6c                	jle    c001a166 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a0fa:	51                   	push   ecx
c001a0fb:	89 d9                	mov    ecx,ebx
c001a0fd:	29 c1                	sub    ecx,eax
c001a0ff:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a102:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a106:	53                   	push   ebx
c001a107:	68 ec b4 02 c0       	push   0xc002b4ec
c001a10c:	e8 fe 89 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a111:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a117:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a119:	a1 38 09 03 c0       	mov    eax,ds:0xc0030938
c001a11e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a121:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a125:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a128:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a12b:	89 06                	mov    DWORD PTR [esi],eax
c001a12d:	eb 51                	jmp    c001a180 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a12f:	39 c3                	cmp    ebx,eax
c001a131:	7d 05                	jge    c001a138 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a133:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a136:	eb 20                	jmp    c001a158 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a138:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a13a:	8d 14 07             	lea    edx,[edi+eax*1]
c001a13d:	39 da                	cmp    edx,ebx
c001a13f:	7e 04                	jle    c001a145 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a141:	29 c3                	sub    ebx,eax
c001a143:	eb 10                	jmp    c001a155 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a145:	8b 0d 38 09 03 c0    	mov    ecx,DWORD PTR ds:0xc0030938
c001a14b:	03 11                	add    edx,DWORD PTR [ecx]
c001a14d:	39 da                	cmp    edx,ebx
c001a14f:	7e 15                	jle    c001a166 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a151:	29 c3                	sub    ebx,eax
c001a153:	29 fb                	sub    ebx,edi
c001a155:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a158:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a15c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a15f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a162:	89 06                	mov    DWORD PTR [esi],eax
c001a164:	eb 1d                	jmp    c001a183 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a166:	83 ec 0c             	sub    esp,0xc
c001a169:	68 00 b5 02 c0       	push   0xc002b500
c001a16e:	e8 18 00 00 00       	call   c001a18b <Krnl::panic(char const*)>
c001a173:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a179:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a180:	83 c4 10             	add    esp,0x10
c001a183:	89 f0                	mov    eax,esi
c001a185:	5b                   	pop    ebx
c001a186:	5e                   	pop    esi
c001a187:	5f                   	pop    edi
c001a188:	c2 04 00             	ret    0x4

c001a18b <Krnl::panic(char const*)>:
c001a18b:	55                   	push   ebp
c001a18c:	89 e5                	mov    ebp,esp
c001a18e:	53                   	push   ebx
c001a18f:	83 ec 0c             	sub    esp,0xc
c001a192:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a195:	fa                   	cli    
c001a196:	c6 05 44 09 03 c0 01 	mov    BYTE PTR ds:0xc0030944,0x1
c001a19d:	53                   	push   ebx
c001a19e:	c6 05 24 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd24,0x0
c001a1a5:	68 1a b5 02 c0       	push   0xc002b51a
c001a1aa:	e8 60 89 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a1af:	58                   	pop    eax
c001a1b0:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a1b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1bb:	e8 11 6b ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c001a1c0:	83 c4 0c             	add    esp,0xc
c001a1c3:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a1c8:	6a 01                	push   0x1
c001a1ca:	6a 0f                	push   0xf
c001a1cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1d2:	e8 2b 65 ff ff       	call   c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a1d7:	58                   	pop    eax
c001a1d8:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a1dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e3:	e8 8a 6d ff ff       	call   c0010f72 <VgaText::clearScreen()>
c001a1e8:	58                   	pop    eax
c001a1e9:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a1ee:	5a                   	pop    edx
c001a1ef:	68 33 b5 02 c0       	push   0xc002b533
c001a1f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1fa:	e8 f1 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a1ff:	59                   	pop    ecx
c001a200:	58                   	pop    eax
c001a201:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a206:	68 d8 b5 02 c0       	push   0xc002b5d8
c001a20b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a211:	e8 da 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a216:	58                   	pop    eax
c001a217:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a21c:	5a                   	pop    edx
c001a21d:	68 4f b5 02 c0       	push   0xc002b54f
c001a222:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a228:	e8 c3 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a22d:	59                   	pop    ecx
c001a22e:	58                   	pop    eax
c001a22f:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a234:	53                   	push   ebx
c001a235:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a23b:	e8 b0 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a240:	58                   	pop    eax
c001a241:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a246:	5a                   	pop    edx
c001a247:	68 6f b5 02 c0       	push   0xc002b56f
c001a24c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a252:	e8 99 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a257:	a1 40 09 03 c0       	mov    eax,ds:0xc0030940
c001a25c:	83 c4 10             	add    esp,0x10
c001a25f:	85 c0                	test   eax,eax
c001a261:	74 02                	je     c001a265 <Krnl::panic(char const*)+0xda>
c001a263:	ff d0                	call   eax
c001a265:	83 ec 0c             	sub    esp,0xc
c001a268:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a26b:	e8 1e 2f 00 00       	call   c001d18e <Thr::getDriverNameFromAddress(unsigned long)>
c001a270:	83 c4 10             	add    esp,0x10
c001a273:	89 c3                	mov    ebx,eax
c001a275:	85 c0                	test   eax,eax
c001a277:	0f 84 50 02 00 00    	je     c001a4cd <Krnl::panic(char const*)+0x342>
c001a27d:	83 ec 08             	sub    esp,0x8
c001a280:	8b 15 54 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031354
c001a286:	68 14 b6 02 c0       	push   0xc002b614
c001a28b:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a291:	e8 5a 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a296:	58                   	pop    eax
c001a297:	5a                   	pop    edx
c001a298:	8b 15 54 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031354
c001a29e:	68 4f b5 02 c0       	push   0xc002b54f
c001a2a3:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a2a9:	e8 42 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a2ae:	59                   	pop    ecx
c001a2af:	58                   	pop    eax
c001a2b0:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a2b5:	53                   	push   ebx
c001a2b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2bc:	e8 2f 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a2c1:	83 c4 10             	add    esp,0x10
c001a2c4:	83 ec 08             	sub    esp,0x8
c001a2c7:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a2cc:	68 6e b5 02 c0       	push   0xc002b56e
c001a2d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2d7:	e8 14 6e ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a2dc:	58                   	pop    eax
c001a2dd:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a2e2:	5a                   	pop    edx
c001a2e3:	68 6c b6 02 c0       	push   0xc002b66c
c001a2e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2ee:	e8 fd 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a2f3:	59                   	pop    ecx
c001a2f4:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a2f9:	5b                   	pop    ebx
c001a2fa:	68 ac b6 02 c0       	push   0xc002b6ac
c001a2ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a305:	e8 e6 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a30a:	58                   	pop    eax
c001a30b:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a310:	5a                   	pop    edx
c001a311:	68 5a b5 02 c0       	push   0xc002b55a
c001a316:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a31c:	e8 cf 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a321:	59                   	pop    ecx
c001a322:	5b                   	pop    ebx
c001a323:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a326:	68 72 b5 02 c0       	push   0xc002b572
c001a32b:	e8 df 87 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a330:	58                   	pop    eax
c001a331:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a334:	5a                   	pop    edx
c001a335:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a338:	68 7b b5 02 c0       	push   0xc002b57b
c001a33d:	e8 cd 87 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a342:	59                   	pop    ecx
c001a343:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a346:	5b                   	pop    ebx
c001a347:	8b 00                	mov    eax,DWORD PTR [eax]
c001a349:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a34c:	68 84 b5 02 c0       	push   0xc002b584
c001a351:	e8 b9 87 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a356:	58                   	pop    eax
c001a357:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a35c:	5a                   	pop    edx
c001a35d:	68 f0 b6 02 c0       	push   0xc002b6f0
c001a362:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a368:	e8 83 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a36d:	59                   	pop    ecx
c001a36e:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a373:	5b                   	pop    ebx
c001a374:	68 8d b5 02 c0       	push   0xc002b58d
c001a379:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a37f:	e8 6c 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a384:	0f 20 c0             	mov    eax,cr0
c001a387:	5a                   	pop    edx
c001a388:	59                   	pop    ecx
c001a389:	50                   	push   eax
c001a38a:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a38f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a395:	e8 7c 6d ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a39a:	5b                   	pop    ebx
c001a39b:	58                   	pop    eax
c001a39c:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a3a1:	68 97 b5 02 c0       	push   0xc002b597
c001a3a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ac:	e8 3f 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a3b1:	0f 20 d0             	mov    eax,cr2
c001a3b4:	5a                   	pop    edx
c001a3b5:	59                   	pop    ecx
c001a3b6:	50                   	push   eax
c001a3b7:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a3bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3c2:	e8 4f 6d ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a3c7:	5b                   	pop    ebx
c001a3c8:	58                   	pop    eax
c001a3c9:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a3ce:	68 a1 b5 02 c0       	push   0xc002b5a1
c001a3d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d9:	e8 12 6d ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a3de:	0f 20 d8             	mov    eax,cr3
c001a3e1:	5a                   	pop    edx
c001a3e2:	59                   	pop    ecx
c001a3e3:	50                   	push   eax
c001a3e4:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a3e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ef:	e8 22 6d ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a3f4:	5b                   	pop    ebx
c001a3f5:	58                   	pop    eax
c001a3f6:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a3fb:	68 b4 b5 02 c0       	push   0xc002b5b4
c001a400:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a406:	e8 e5 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a40b:	0f 20 e0             	mov    eax,cr4
c001a40e:	5a                   	pop    edx
c001a40f:	59                   	pop    ecx
c001a410:	50                   	push   eax
c001a411:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a416:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a41c:	e8 f5 6c ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a421:	5b                   	pop    ebx
c001a422:	58                   	pop    eax
c001a423:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a428:	68 be b5 02 c0       	push   0xc002b5be
c001a42d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a433:	e8 b8 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a438:	5a                   	pop    edx
c001a439:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a43e:	59                   	pop    ecx
c001a43f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a445:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a448:	50                   	push   eax
c001a449:	e8 c8 6c ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a44e:	5b                   	pop    ebx
c001a44f:	58                   	pop    eax
c001a450:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a455:	68 d5 b5 02 c0       	push   0xc002b5d5
c001a45a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a460:	e8 8b 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a465:	5a                   	pop    edx
c001a466:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a46b:	59                   	pop    ecx
c001a46c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a472:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a475:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a478:	50                   	push   eax
c001a479:	e8 98 6c ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a47e:	5b                   	pop    ebx
c001a47f:	58                   	pop    eax
c001a480:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a485:	68 d5 b5 02 c0       	push   0xc002b5d5
c001a48a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a490:	e8 5b 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a495:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a49a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a49d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4a3:	8b 12                	mov    edx,DWORD PTR [edx]
c001a4a5:	59                   	pop    ecx
c001a4a6:	5b                   	pop    ebx
c001a4a7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a4aa:	50                   	push   eax
c001a4ab:	e8 66 6c ff ff       	call   c0011116 <VgaText::putx(unsigned int)>
c001a4b0:	83 c4 10             	add    esp,0x10
c001a4b3:	b2 fe                	mov    dl,0xfe
c001a4b5:	e4 60                	in     al,0x60
c001a4b7:	3c 1c                	cmp    al,0x1c
c001a4b9:	74 04                	je     c001a4bf <Krnl::panic(char const*)+0x334>
c001a4bb:	3c 5a                	cmp    al,0x5a
c001a4bd:	75 f6                	jne    c001a4b5 <Krnl::panic(char const*)+0x32a>
c001a4bf:	e4 64                	in     al,0x64
c001a4c1:	a8 02                	test   al,0x2
c001a4c3:	75 fa                	jne    c001a4bf <Krnl::panic(char const*)+0x334>
c001a4c5:	88 d0                	mov    al,dl
c001a4c7:	e6 64                	out    0x64,al
c001a4c9:	fa                   	cli    
c001a4ca:	f4                   	hlt    
c001a4cb:	eb e8                	jmp    c001a4b5 <Krnl::panic(char const*)+0x32a>
c001a4cd:	50                   	push   eax
c001a4ce:	50                   	push   eax
c001a4cf:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a4d4:	68 40 b6 02 c0       	push   0xc002b640
c001a4d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4df:	e8 0c 6c ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a4e4:	58                   	pop    eax
c001a4e5:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a4ea:	5a                   	pop    edx
c001a4eb:	68 4f b5 02 c0       	push   0xc002b54f
c001a4f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4f6:	e8 f5 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a4fb:	59                   	pop    ecx
c001a4fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a501:	5b                   	pop    ebx
c001a502:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a505:	83 c0 0c             	add    eax,0xc
c001a508:	50                   	push   eax
c001a509:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001a50e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a514:	e8 d7 6b ff ff       	call   c00110f0 <VgaText::puts(char const*)>
c001a519:	83 c4 10             	add    esp,0x10
c001a51c:	e9 a3 fd ff ff       	jmp    c001a2c4 <Krnl::panic(char const*)+0x139>

c001a521 <Net::switchEndian16(unsigned short)>:
c001a521:	83 ec 04             	sub    esp,0x4
c001a524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a528:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a52c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a530:	c1 f8 08             	sar    eax,0x8
c001a533:	89 c2                	mov    edx,eax
c001a535:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a539:	c1 e0 08             	shl    eax,0x8
c001a53c:	09 d0                	or     eax,edx
c001a53e:	83 c4 04             	add    esp,0x4
c001a541:	c3                   	ret    

c001a542 <Net::switchEndian32(unsigned int)>:
c001a542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a546:	c1 e8 18             	shr    eax,0x18
c001a549:	89 c2                	mov    edx,eax
c001a54b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a54f:	c1 e0 08             	shl    eax,0x8
c001a552:	25 00 00 ff 00       	and    eax,0xff0000
c001a557:	09 c2                	or     edx,eax
c001a559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a55d:	c1 e8 08             	shr    eax,0x8
c001a560:	25 00 ff 00 00       	and    eax,0xff00
c001a565:	09 c2                	or     edx,eax
c001a567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a56b:	c1 e0 18             	shl    eax,0x18
c001a56e:	09 d0                	or     eax,edx
c001a570:	c3                   	ret    

c001a571 <Net::crc32Calc(unsigned char*, int)>:
c001a571:	83 ec 10             	sub    esp,0x10
c001a574:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a579:	75 07                	jne    c001a582 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a57b:	b8 00 00 00 00       	mov    eax,0x0
c001a580:	eb 7c                	jmp    c001a5fe <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a582:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a587:	7f 07                	jg     c001a590 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a589:	b8 00 00 00 00       	mov    eax,0x0
c001a58e:	eb 6e                	jmp    c001a5fe <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a590:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a598:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a5a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5a4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a5a8:	7d 4e                	jge    c001a5f8 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a5aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5b2:	01 d0                	add    eax,edx
c001a5b4:	8a 00                	mov    al,BYTE PTR [eax]
c001a5b6:	0f b6 c0             	movzx  eax,al
c001a5b9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a5bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5c5:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a5ca:	7f 26                	jg     c001a5f2 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5d0:	83 e0 01             	and    eax,0x1
c001a5d3:	74 0d                	je     c001a5e2 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a5d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5d9:	d1 e8                	shr    eax,1
c001a5db:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a5e0:	eb 06                	jmp    c001a5e8 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a5e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5e6:	d1 e8                	shr    eax,1
c001a5e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a5f0:	eb d3                	jmp    c001a5c5 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a5f2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a5f6:	eb a8                	jmp    c001a5a0 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5fc:	f7 d0                	not    eax
c001a5fe:	83 c4 10             	add    esp,0x10
c001a601:	c3                   	ret    

c001a602 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a602:	83 ec 1c             	sub    esp,0x1c
c001a605:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a609:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a60d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a615:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a61a:	7f 14                	jg     c001a630 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a61c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a620:	8d 50 01             	lea    edx,[eax+0x1]
c001a623:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a627:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a62a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a62e:	eb e5                	jmp    c001a615 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a630:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a634:	8d 50 01             	lea    edx,[eax+0x1]
c001a637:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a63b:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a63e:	83 ec 04             	sub    esp,0x4
c001a641:	6a 06                	push   0x6
c001a643:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a647:	50                   	push   eax
c001a648:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a64c:	e8 f3 60 fe ff       	call   c0000744 <memcpy>
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a659:	83 ec 04             	sub    esp,0x4
c001a65c:	6a 06                	push   0x6
c001a65e:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a662:	50                   	push   eax
c001a663:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a667:	e8 d8 60 fe ff       	call   c0000744 <memcpy>
c001a66c:	83 c4 10             	add    esp,0x10
c001a66f:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a674:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a678:	0f b7 c0             	movzx  eax,ax
c001a67b:	c1 f8 08             	sar    eax,0x8
c001a67e:	89 c1                	mov    ecx,eax
c001a680:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a684:	8d 50 01             	lea    edx,[eax+0x1]
c001a687:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a68b:	88 ca                	mov    dl,cl
c001a68d:	88 10                	mov    BYTE PTR [eax],dl
c001a68f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a693:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a697:	8d 48 01             	lea    ecx,[eax+0x1]
c001a69a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a69e:	88 10                	mov    BYTE PTR [eax],dl
c001a6a0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a6a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6a8:	83 ec 04             	sub    esp,0x4
c001a6ab:	52                   	push   edx
c001a6ac:	50                   	push   eax
c001a6ad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a6b1:	e8 8e 60 fe ff       	call   c0000744 <memcpy>
c001a6b6:	83 c4 10             	add    esp,0x10
c001a6b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a6bd:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a6c1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6c5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a6c9:	83 ec 08             	sub    esp,0x8
c001a6cc:	50                   	push   eax
c001a6cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a6d1:	e8 9b fe ff ff       	call   c001a571 <Net::crc32Calc(unsigned char*, int)>
c001a6d6:	83 c4 10             	add    esp,0x10
c001a6d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6e1:	c1 e8 18             	shr    eax,0x18
c001a6e4:	89 c1                	mov    ecx,eax
c001a6e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6ea:	8d 50 01             	lea    edx,[eax+0x1]
c001a6ed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a6f1:	88 ca                	mov    dl,cl
c001a6f3:	88 10                	mov    BYTE PTR [eax],dl
c001a6f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f9:	c1 e8 10             	shr    eax,0x10
c001a6fc:	89 c1                	mov    ecx,eax
c001a6fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a702:	8d 50 01             	lea    edx,[eax+0x1]
c001a705:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a709:	88 ca                	mov    dl,cl
c001a70b:	88 10                	mov    BYTE PTR [eax],dl
c001a70d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a711:	c1 e8 08             	shr    eax,0x8
c001a714:	89 c1                	mov    ecx,eax
c001a716:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a71a:	8d 50 01             	lea    edx,[eax+0x1]
c001a71d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a721:	88 ca                	mov    dl,cl
c001a723:	88 10                	mov    BYTE PTR [eax],dl
c001a725:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a729:	8d 50 01             	lea    edx,[eax+0x1]
c001a72c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a730:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a734:	88 10                	mov    BYTE PTR [eax],dl
c001a736:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a73a:	83 c4 1c             	add    esp,0x1c
c001a73d:	c3                   	ret    

c001a73e <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a73e:	83 ec 2c             	sub    esp,0x2c
c001a741:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a745:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a749:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a74e:	83 ec 04             	sub    esp,0x4
c001a751:	6a 06                	push   0x6
c001a753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a757:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a75b:	83 c0 0e             	add    eax,0xe
c001a75e:	50                   	push   eax
c001a75f:	e8 e0 5f fe ff       	call   c0000744 <memcpy>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a76c:	83 ec 04             	sub    esp,0x4
c001a76f:	6a 06                	push   0x6
c001a771:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a775:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a779:	83 c0 08             	add    eax,0x8
c001a77c:	50                   	push   eax
c001a77d:	e8 c2 5f fe ff       	call   c0000744 <memcpy>
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a78a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a78e:	8d 50 01             	lea    edx,[eax+0x1]
c001a791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a795:	8a 00                	mov    al,BYTE PTR [eax]
c001a797:	0f b6 c0             	movzx  eax,al
c001a79a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a79f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7a3:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a7aa:	8a 00                	mov    al,BYTE PTR [eax]
c001a7ac:	0f b6 c0             	movzx  eax,al
c001a7af:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a7b4:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a7b9:	c1 e0 08             	shl    eax,0x8
c001a7bc:	89 c2                	mov    edx,eax
c001a7be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7c2:	09 d0                	or     eax,edx
c001a7c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7c8:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a7cc:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a7d1:	75 3a                	jne    c001a80d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a7d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a7d7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a7da:	66 3d dc 05          	cmp    ax,0x5dc
c001a7de:	77 10                	ja     c001a7f0 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a7e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a7e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a7e7:	0f b7 c0             	movzx  eax,ax
c001a7ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a7ee:	eb 1d                	jmp    c001a80d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a7f0:	83 ec 0c             	sub    esp,0xc
c001a7f3:	68 18 b7 02 c0       	push   0xc002b718
c001a7f8:	e8 12 83 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001a7fd:	83 c4 10             	add    esp,0x10
c001a800:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a804:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a808:	e9 c0 00 00 00       	jmp    c001a8cd <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a80d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a811:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a815:	8b 00                	mov    eax,DWORD PTR [eax]
c001a817:	83 ec 04             	sub    esp,0x4
c001a81a:	52                   	push   edx
c001a81b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a81f:	50                   	push   eax
c001a820:	e8 1f 5f fe ff       	call   c0000744 <memcpy>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a82c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a830:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a834:	8d 50 01             	lea    edx,[eax+0x1]
c001a837:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a83b:	8a 00                	mov    al,BYTE PTR [eax]
c001a83d:	0f b6 c0             	movzx  eax,al
c001a840:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a844:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a848:	8d 50 01             	lea    edx,[eax+0x1]
c001a84b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a84f:	8a 00                	mov    al,BYTE PTR [eax]
c001a851:	0f b6 c0             	movzx  eax,al
c001a854:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a858:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a85c:	8d 50 01             	lea    edx,[eax+0x1]
c001a85f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a863:	8a 00                	mov    al,BYTE PTR [eax]
c001a865:	0f b6 c0             	movzx  eax,al
c001a868:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a86c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a870:	8d 50 01             	lea    edx,[eax+0x1]
c001a873:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a877:	8a 00                	mov    al,BYTE PTR [eax]
c001a879:	0f b6 c0             	movzx  eax,al
c001a87c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a880:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a884:	c1 e0 18             	shl    eax,0x18
c001a887:	89 c2                	mov    edx,eax
c001a889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a88d:	c1 e0 10             	shl    eax,0x10
c001a890:	09 c2                	or     edx,eax
c001a892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a896:	c1 e0 08             	shl    eax,0x8
c001a899:	09 d0                	or     eax,edx
c001a89b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a89f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a8a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8a7:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a8ab:	83 e8 04             	sub    eax,0x4
c001a8ae:	83 ec 08             	sub    esp,0x8
c001a8b1:	50                   	push   eax
c001a8b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a8b6:	e8 b6 fc ff ff       	call   c001a571 <Net::crc32Calc(unsigned char*, int)>
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a8c2:	0f 94 c2             	sete   dl
c001a8c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8c9:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a8cc:	90                   	nop
c001a8cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8d1:	83 c4 2c             	add    esp,0x2c
c001a8d4:	c2 04 00             	ret    0x4

c001a8d7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a8d7:	55                   	push   ebp
c001a8d8:	57                   	push   edi
c001a8d9:	56                   	push   esi
c001a8da:	53                   	push   ebx
c001a8db:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8e1:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a8e8:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a8ea:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a8ed:	80 fb 40             	cmp    bl,0x40
c001a8f0:	75 1b                	jne    c001a90d <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a8f2:	8a 16                	mov    dl,BYTE PTR [esi]
c001a8f4:	84 d2                	test   dl,dl
c001a8f6:	0f 84 f1 00 00 00    	je     c001a9ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8fc:	8d 46 01             	lea    eax,[esi+0x1]
c001a8ff:	80 fa 3a             	cmp    dl,0x3a
c001a902:	74 04                	je     c001a908 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a904:	89 c6                	mov    esi,eax
c001a906:	eb ea                	jmp    c001a8f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a908:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a90b:	89 c6                	mov    esi,eax
c001a90d:	50                   	push   eax
c001a90e:	6a 40                	push   0x40
c001a910:	6a 00                	push   0x0
c001a912:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a916:	50                   	push   eax
c001a917:	e8 5c 5e fe ff       	call   c0000778 <memset>
c001a91c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a923:	31 c0                	xor    eax,eax
c001a925:	83 c4 10             	add    esp,0x10
c001a928:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a92a:	84 c9                	test   cl,cl
c001a92c:	0f 84 bb 00 00 00    	je     c001a9ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a932:	3d c7 00 00 00       	cmp    eax,0xc7
c001a937:	0f 8f b0 00 00 00    	jg     c001a9ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a93d:	80 f9 0a             	cmp    cl,0xa
c001a940:	0f 85 98 00 00 00    	jne    c001a9de <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a946:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a94b:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a94f:	a8 df                	test   al,0xdf
c001a951:	0f 94 c1             	sete   cl
c001a954:	3c 23                	cmp    al,0x23
c001a956:	0f 94 c2             	sete   dl
c001a959:	08 d1                	or     cl,dl
c001a95b:	75 4a                	jne    c001a9a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a95d:	8d 50 f7             	lea    edx,[eax-0x9]
c001a960:	80 fa 01             	cmp    dl,0x1
c001a963:	76 42                	jbe    c001a9a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a965:	3c 5b                	cmp    al,0x5b
c001a967:	75 42                	jne    c001a9ab <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a969:	80 fb 40             	cmp    bl,0x40
c001a96c:	75 39                	jne    c001a9a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a96e:	83 ec 0c             	sub    esp,0xc
c001a971:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a975:	52                   	push   edx
c001a976:	e8 19 5e fe ff       	call   c0000794 <strlen>
c001a97b:	83 c4 10             	add    esp,0x10
c001a97e:	83 f8 3f             	cmp    eax,0x3f
c001a981:	77 6a                	ja     c001a9ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a983:	50                   	push   eax
c001a984:	50                   	push   eax
c001a985:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a989:	52                   	push   edx
c001a98a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a98e:	52                   	push   edx
c001a98f:	e8 a0 5e fe ff       	call   c0000834 <strcpy>
c001a994:	58                   	pop    eax
c001a995:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a999:	52                   	push   edx
c001a99a:	e8 f5 5d fe ff       	call   c0000794 <strlen>
c001a99f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a9a4:	83 c4 10             	add    esp,0x10
c001a9a7:	31 d2                	xor    edx,edx
c001a9a9:	eb 3a                	jmp    c001a9e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a9ab:	80 fb 40             	cmp    bl,0x40
c001a9ae:	74 06                	je     c001a9b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a9b0:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a9b4:	eb 20                	jmp    c001a9d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a9b6:	50                   	push   eax
c001a9b7:	50                   	push   eax
c001a9b8:	55                   	push   ebp
c001a9b9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9bd:	50                   	push   eax
c001a9be:	e8 fd 5e fe ff       	call   c00008c0 <strcmp>
c001a9c3:	83 c4 10             	add    esp,0x10
c001a9c6:	85 c0                	test   eax,eax
c001a9c8:	75 dd                	jne    c001a9a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9ca:	eb e4                	jmp    c001a9b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a9cc:	8d 50 01             	lea    edx,[eax+0x1]
c001a9cf:	80 f9 3d             	cmp    cl,0x3d
c001a9d2:	74 1d                	je     c001a9f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a9d4:	89 d0                	mov    eax,edx
c001a9d6:	8a 08                	mov    cl,BYTE PTR [eax]
c001a9d8:	84 c9                	test   cl,cl
c001a9da:	75 f0                	jne    c001a9cc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a9dc:	eb 0f                	jmp    c001a9ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9de:	8d 50 01             	lea    edx,[eax+0x1]
c001a9e1:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a9e5:	47                   	inc    edi
c001a9e6:	89 d0                	mov    eax,edx
c001a9e8:	e9 3b ff ff ff       	jmp    c001a928 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a9ed:	31 c0                	xor    eax,eax
c001a9ef:	eb 33                	jmp    c001aa24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a9f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a9f5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a9f8:	50                   	push   eax
c001a9f9:	50                   	push   eax
c001a9fa:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a9fe:	50                   	push   eax
c001a9ff:	56                   	push   esi
c001aa00:	e8 bb 5e fe ff       	call   c00008c0 <strcmp>
c001aa05:	83 c4 10             	add    esp,0x10
c001aa08:	85 c0                	test   eax,eax
c001aa0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa0e:	75 97                	jne    c001a9a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa10:	51                   	push   ecx
c001aa11:	51                   	push   ecx
c001aa12:	52                   	push   edx
c001aa13:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aa1a:	e8 15 5e fe ff       	call   c0000834 <strcpy>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	b0 01                	mov    al,0x1
c001aa24:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aa2a:	5b                   	pop    ebx
c001aa2b:	5e                   	pop    esi
c001aa2c:	5f                   	pop    edi
c001aa2d:	5d                   	pop    ebp
c001aa2e:	c3                   	ret    

c001aa2f <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aa2f:	57                   	push   edi
c001aa30:	56                   	push   esi
c001aa31:	53                   	push   ebx
c001aa32:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aa38:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aa3f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa46:	53                   	push   ebx
c001aa47:	e8 48 5d fe ff       	call   c0000794 <strlen>
c001aa4c:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa4f:	89 c7                	mov    edi,eax
c001aa51:	e8 3e 5d fe ff       	call   c0000794 <strlen>
c001aa56:	83 c4 10             	add    esp,0x10
c001aa59:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aa5d:	3d ff 00 00 00       	cmp    eax,0xff
c001aa62:	0f 87 d3 00 00 00    	ja     c001ab3b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aa68:	57                   	push   edi
c001aa69:	57                   	push   edi
c001aa6a:	56                   	push   esi
c001aa6b:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aa6f:	56                   	push   esi
c001aa70:	e8 bf 5d fe ff       	call   c0000834 <strcpy>
c001aa75:	58                   	pop    eax
c001aa76:	5a                   	pop    edx
c001aa77:	68 d7 bb 02 c0       	push   0xc002bbd7
c001aa7c:	56                   	push   esi
c001aa7d:	e8 f2 5e fe ff       	call   c0000974 <strcat>
c001aa82:	59                   	pop    ecx
c001aa83:	5f                   	pop    edi
c001aa84:	53                   	push   ebx
c001aa85:	56                   	push   esi
c001aa86:	e8 e9 5e fe ff       	call   c0000974 <strcat>
c001aa8b:	58                   	pop    eax
c001aa8c:	5a                   	pop    edx
c001aa8d:	68 64 b7 02 c0       	push   0xc002b764
c001aa92:	56                   	push   esi
c001aa93:	e8 dc 5e fe ff       	call   c0000974 <strcat>
c001aa98:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aa9f:	e8 9c 4d ff ff       	call   c000f840 <malloc>
c001aaa4:	83 c4 0c             	add    esp,0xc
c001aaa7:	89 c3                	mov    ebx,eax
c001aaa9:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c001aaaf:	56                   	push   esi
c001aab0:	50                   	push   eax
c001aab1:	e8 b2 85 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001aab6:	83 c4 10             	add    esp,0x10
c001aab9:	85 db                	test   ebx,ebx
c001aabb:	74 7e                	je     c001ab3b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aabd:	51                   	push   ecx
c001aabe:	51                   	push   ecx
c001aabf:	6a 01                	push   0x1
c001aac1:	53                   	push   ebx
c001aac2:	e8 05 86 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001aac7:	83 c4 10             	add    esp,0x10
c001aaca:	85 c0                	test   eax,eax
c001aacc:	74 08                	je     c001aad6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aace:	83 ec 0c             	sub    esp,0xc
c001aad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aad3:	53                   	push   ebx
c001aad4:	eb 5f                	jmp    c001ab35 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aad6:	52                   	push   edx
c001aad7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aadb:	50                   	push   eax
c001aadc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aae0:	50                   	push   eax
c001aae1:	53                   	push   ebx
c001aae2:	e8 91 88 ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001aae7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aaeb:	83 c4 10             	add    esp,0x10
c001aaee:	89 c1                	mov    ecx,eax
c001aaf0:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aaf4:	74 31                	je     c001ab27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aaf6:	83 ec 0c             	sub    esp,0xc
c001aaf9:	50                   	push   eax
c001aafa:	e8 41 4d ff ff       	call   c000f840 <malloc>
c001aaff:	89 c6                	mov    esi,eax
c001ab01:	58                   	pop    eax
c001ab02:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab04:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ab08:	52                   	push   edx
c001ab09:	56                   	push   esi
c001ab0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab12:	53                   	push   ebx
c001ab13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab16:	83 c4 20             	add    esp,0x20
c001ab19:	85 c0                	test   eax,eax
c001ab1b:	75 0a                	jne    c001ab27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab21:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ab25:	74 18                	je     c001ab3f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ab27:	83 ec 0c             	sub    esp,0xc
c001ab2a:	53                   	push   ebx
c001ab2b:	e8 fa 85 ff ff       	call   c001312a <File::close()>
c001ab30:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	31 c0                	xor    eax,eax
c001ab3d:	eb 3b                	jmp    c001ab7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ab3f:	83 ec 0c             	sub    esp,0xc
c001ab42:	53                   	push   ebx
c001ab43:	e8 e2 85 ff ff       	call   c001312a <File::close()>
c001ab48:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab50:	83 c4 0c             	add    esp,0xc
c001ab53:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab5a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab61:	56                   	push   esi
c001ab62:	e8 70 fd ff ff       	call   c001a8d7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ab67:	89 34 24             	mov    DWORD PTR [esp],esi
c001ab6a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab6e:	e8 dd 4c ff ff       	call   c000f850 <free>
c001ab73:	83 c4 10             	add    esp,0x10
c001ab76:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ab7a:	81 c4 20 01 00 00    	add    esp,0x120
c001ab80:	5b                   	pop    ebx
c001ab81:	5e                   	pop    esi
c001ab82:	5f                   	pop    edi
c001ab83:	c3                   	ret    

c001ab84 <Reg::getLine(char*, char*, char*)>:
c001ab84:	57                   	push   edi
c001ab85:	56                   	push   esi
c001ab86:	53                   	push   ebx
c001ab87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab8f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ab93:	57                   	push   edi
c001ab94:	56                   	push   esi
c001ab95:	53                   	push   ebx
c001ab96:	68 69 b7 02 c0       	push   0xc002b769
c001ab9b:	e8 8f fe ff ff       	call   c001aa2f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aba0:	83 c4 10             	add    esp,0x10
c001aba3:	84 c0                	test   al,al
c001aba5:	75 10                	jne    c001abb7 <Reg::getLine(char*, char*, char*)+0x33>
c001aba7:	57                   	push   edi
c001aba8:	56                   	push   esi
c001aba9:	53                   	push   ebx
c001abaa:	68 8e b7 02 c0       	push   0xc002b78e
c001abaf:	e8 7b fe ff ff       	call   c001aa2f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001abb4:	83 c4 10             	add    esp,0x10
c001abb7:	5b                   	pop    ebx
c001abb8:	5e                   	pop    esi
c001abb9:	5f                   	pop    edi
c001abba:	c3                   	ret    

c001abbb <Reg::readInt(char*, char*, int*)>:
c001abbb:	55                   	push   ebp
c001abbc:	57                   	push   edi
c001abbd:	56                   	push   esi
c001abbe:	53                   	push   ebx
c001abbf:	81 ec f0 00 00 00    	sub    esp,0xf0
c001abc5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001abc9:	57                   	push   edi
c001abca:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001abd1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001abd8:	e8 a7 ff ff ff       	call   c001ab84 <Reg::getLine(char*, char*, char*)>
c001abdd:	83 c4 10             	add    esp,0x10
c001abe0:	84 c0                	test   al,al
c001abe2:	0f 84 b3 00 00 00    	je     c001ac9b <Reg::readInt(char*, char*, int*)+0xe0>
c001abe8:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001abec:	80 fa 2b             	cmp    dl,0x2b
c001abef:	74 0c                	je     c001abfd <Reg::readInt(char*, char*, int*)+0x42>
c001abf1:	80 fa 2d             	cmp    dl,0x2d
c001abf4:	75 0e                	jne    c001ac04 <Reg::readInt(char*, char*, int*)+0x49>
c001abf6:	ba 01 00 00 00       	mov    edx,0x1
c001abfb:	eb 0b                	jmp    c001ac08 <Reg::readInt(char*, char*, int*)+0x4d>
c001abfd:	ba 01 00 00 00       	mov    edx,0x1
c001ac02:	eb 02                	jmp    c001ac06 <Reg::readInt(char*, char*, int*)+0x4b>
c001ac04:	31 d2                	xor    edx,edx
c001ac06:	31 c0                	xor    eax,eax
c001ac08:	be 0a 00 00 00       	mov    esi,0xa
c001ac0d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ac12:	75 20                	jne    c001ac34 <Reg::readInt(char*, char*, int*)+0x79>
c001ac14:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ac18:	80 f9 78             	cmp    cl,0x78
c001ac1b:	75 0a                	jne    c001ac27 <Reg::readInt(char*, char*, int*)+0x6c>
c001ac1d:	83 c2 02             	add    edx,0x2
c001ac20:	be 10 00 00 00       	mov    esi,0x10
c001ac25:	eb 0d                	jmp    c001ac34 <Reg::readInt(char*, char*, int*)+0x79>
c001ac27:	80 f9 62             	cmp    cl,0x62
c001ac2a:	75 08                	jne    c001ac34 <Reg::readInt(char*, char*, int*)+0x79>
c001ac2c:	83 c2 02             	add    edx,0x2
c001ac2f:	be 02 00 00 00       	mov    esi,0x2
c001ac34:	01 d7                	add    edi,edx
c001ac36:	31 d2                	xor    edx,edx
c001ac38:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ac3a:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ac3e:	80 fb 0d             	cmp    bl,0xd
c001ac41:	0f 94 c3             	sete   bl
c001ac44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ac49:	0f 94 c1             	sete   cl
c001ac4c:	08 cb                	or     bl,cl
c001ac4e:	75 3a                	jne    c001ac8a <Reg::readInt(char*, char*, int*)+0xcf>
c001ac50:	0f af d6             	imul   edx,esi
c001ac53:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ac58:	83 fe 10             	cmp    esi,0x10
c001ac5b:	75 26                	jne    c001ac83 <Reg::readInt(char*, char*, int*)+0xc8>
c001ac5d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac61:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ac64:	89 e9                	mov    ecx,ebp
c001ac66:	80 f9 05             	cmp    cl,0x5
c001ac69:	77 06                	ja     c001ac71 <Reg::readInt(char*, char*, int*)+0xb6>
c001ac6b:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ac6f:	eb 16                	jmp    c001ac87 <Reg::readInt(char*, char*, int*)+0xcc>
c001ac71:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ac75:	83 e9 61             	sub    ecx,0x61
c001ac78:	80 f9 05             	cmp    cl,0x5
c001ac7b:	77 06                	ja     c001ac83 <Reg::readInt(char*, char*, int*)+0xc8>
c001ac7d:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ac81:	eb 04                	jmp    c001ac87 <Reg::readInt(char*, char*, int*)+0xcc>
c001ac83:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ac87:	47                   	inc    edi
c001ac88:	eb ae                	jmp    c001ac38 <Reg::readInt(char*, char*, int*)+0x7d>
c001ac8a:	84 c0                	test   al,al
c001ac8c:	74 02                	je     c001ac90 <Reg::readInt(char*, char*, int*)+0xd5>
c001ac8e:	f7 da                	neg    edx
c001ac90:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ac97:	89 10                	mov    DWORD PTR [eax],edx
c001ac99:	88 d8                	mov    al,bl
c001ac9b:	81 c4 ec 00 00 00    	add    esp,0xec
c001aca1:	5b                   	pop    ebx
c001aca2:	5e                   	pop    esi
c001aca3:	5f                   	pop    edi
c001aca4:	5d                   	pop    ebp
c001aca5:	c3                   	ret    

c001aca6 <Reg::readString(char*, char*, char*, int)>:
c001aca6:	57                   	push   edi
c001aca7:	56                   	push   esi
c001aca8:	53                   	push   ebx
c001aca9:	81 ec d4 00 00 00    	sub    esp,0xd4
c001acaf:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001acb6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001acba:	57                   	push   edi
c001acbb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001acc2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001acc9:	e8 b6 fe ff ff       	call   c001ab84 <Reg::getLine(char*, char*, char*)>
c001acce:	83 c4 10             	add    esp,0x10
c001acd1:	89 c6                	mov    esi,eax
c001acd3:	84 c0                	test   al,al
c001acd5:	74 44                	je     c001ad1b <Reg::readString(char*, char*, char*, int)+0x75>
c001acd7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001acde:	31 c0                	xor    eax,eax
c001ace0:	4a                   	dec    edx
c001ace1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ace4:	84 c9                	test   cl,cl
c001ace6:	74 0f                	je     c001acf7 <Reg::readString(char*, char*, char*, int)+0x51>
c001ace8:	39 c2                	cmp    edx,eax
c001acea:	7e 0b                	jle    c001acf7 <Reg::readString(char*, char*, char*, int)+0x51>
c001acec:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001acef:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001acf4:	40                   	inc    eax
c001acf5:	eb ea                	jmp    c001ace1 <Reg::readString(char*, char*, char*, int)+0x3b>
c001acf7:	83 ec 0c             	sub    esp,0xc
c001acfa:	53                   	push   ebx
c001acfb:	e8 94 5a fe ff       	call   c0000794 <strlen>
c001ad00:	83 c4 10             	add    esp,0x10
c001ad03:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ad08:	75 11                	jne    c001ad1b <Reg::readString(char*, char*, char*, int)+0x75>
c001ad0a:	83 ec 0c             	sub    esp,0xc
c001ad0d:	53                   	push   ebx
c001ad0e:	e8 81 5a fe ff       	call   c0000794 <strlen>
c001ad13:	83 c4 10             	add    esp,0x10
c001ad16:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ad1b:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ad21:	89 f0                	mov    eax,esi
c001ad23:	5b                   	pop    ebx
c001ad24:	5e                   	pop    esi
c001ad25:	5f                   	pop    edi
c001ad26:	c3                   	ret    

c001ad27 <Reg::readBool(char*, char*, bool*)>:
c001ad27:	83 ec 20             	sub    esp,0x20
c001ad2a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad2e:	50                   	push   eax
c001ad2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad37:	e8 7f fe ff ff       	call   c001abbb <Reg::readInt(char*, char*, int*)>
c001ad3c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ad41:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad45:	0f 95 02             	setne  BYTE PTR [edx]
c001ad48:	83 c4 2c             	add    esp,0x2c
c001ad4b:	c3                   	ret    

c001ad4c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ad4c:	53                   	push   ebx
c001ad4d:	83 ec 1c             	sub    esp,0x1c
c001ad50:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ad54:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ad58:	50                   	push   eax
c001ad59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad61:	e8 c1 ff ff ff       	call   c001ad27 <Reg::readBool(char*, char*, bool*)>
c001ad66:	83 c4 10             	add    esp,0x10
c001ad69:	84 c0                	test   al,al
c001ad6b:	74 04                	je     c001ad71 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ad6d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ad71:	88 d8                	mov    al,bl
c001ad73:	83 c4 18             	add    esp,0x18
c001ad76:	5b                   	pop    ebx
c001ad77:	c3                   	ret    

c001ad78 <Reg::readIntWithDefault(char*, char*, int)>:
c001ad78:	53                   	push   ebx
c001ad79:	83 ec 1c             	sub    esp,0x1c
c001ad7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad80:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad84:	50                   	push   eax
c001ad85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad8d:	e8 29 fe ff ff       	call   c001abbb <Reg::readInt(char*, char*, int*)>
c001ad92:	83 c4 10             	add    esp,0x10
c001ad95:	84 c0                	test   al,al
c001ad97:	74 04                	je     c001ad9d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ad99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ad9d:	89 d8                	mov    eax,ebx
c001ad9f:	83 c4 18             	add    esp,0x18
c001ada2:	5b                   	pop    ebx
c001ada3:	c3                   	ret    

c001ada4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ada4:	57                   	push   edi
c001ada5:	56                   	push   esi
c001ada6:	53                   	push   ebx
c001ada7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001adab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001adaf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001adb3:	56                   	push   esi
c001adb4:	53                   	push   ebx
c001adb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adbd:	e8 e4 fe ff ff       	call   c001aca6 <Reg::readString(char*, char*, char*, int)>
c001adc2:	83 c4 10             	add    esp,0x10
c001adc5:	84 c0                	test   al,al
c001adc7:	75 1b                	jne    c001ade4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001adc9:	50                   	push   eax
c001adca:	56                   	push   esi
c001adcb:	4e                   	dec    esi
c001adcc:	6a 00                	push   0x0
c001adce:	53                   	push   ebx
c001adcf:	e8 a4 59 fe ff       	call   c0000778 <memset>
c001add4:	83 c4 0c             	add    esp,0xc
c001add7:	56                   	push   esi
c001add8:	57                   	push   edi
c001add9:	53                   	push   ebx
c001adda:	89 fb                	mov    ebx,edi
c001addc:	e8 63 59 fe ff       	call   c0000744 <memcpy>
c001ade1:	83 c4 10             	add    esp,0x10
c001ade4:	89 d8                	mov    eax,ebx
c001ade6:	5b                   	pop    ebx
c001ade7:	5e                   	pop    esi
c001ade8:	5f                   	pop    edi
c001ade9:	c3                   	ret    

c001adea <Sys::eject(regs*)>:
c001adea:	83 ec 0c             	sub    esp,0xc
c001aded:	83 ca ff             	or     edx,0xffffffff
c001adf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001adf7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001adfc:	83 e9 41             	sub    ecx,0x41
c001adff:	83 f9 19             	cmp    ecx,0x19
c001ae02:	77 18                	ja     c001ae1c <Sys::eject(regs*)+0x32>
c001ae04:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c001ae0b:	85 c9                	test   ecx,ecx
c001ae0d:	74 0d                	je     c001ae1c <Sys::eject(regs*)+0x32>
c001ae0f:	83 ec 0c             	sub    esp,0xc
c001ae12:	51                   	push   ecx
c001ae13:	e8 78 b4 ff ff       	call   c0016290 <LogicalDisk::eject()>
c001ae18:	83 c4 10             	add    esp,0x10
c001ae1b:	99                   	cdq    
c001ae1c:	83 c4 0c             	add    esp,0xc
c001ae1f:	c3                   	ret    

c001ae20 <Sys::exit(regs*)>:
c001ae20:	83 ec 18             	sub    esp,0x18
c001ae23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae27:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae2a:	e8 9a 34 00 00       	call   c001e2c9 <terminateTask(int)>
c001ae2f:	83 c8 ff             	or     eax,0xffffffff
c001ae32:	83 c4 1c             	add    esp,0x1c
c001ae35:	89 c2                	mov    edx,eax
c001ae37:	c3                   	ret    

c001ae38 <Sys::getCwd(regs*)>:
c001ae38:	83 ec 10             	sub    esp,0x10
c001ae3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae3f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ae42:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae4a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae4d:	e8 18 80 ff ff       	call   c0012e6a <Fs::getcwd(Process*, char*, int)>
c001ae52:	83 c4 1c             	add    esp,0x1c
c001ae55:	99                   	cdq    
c001ae56:	c3                   	ret    

c001ae57 <Sys::getPID(regs*)>:
c001ae57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae61:	99                   	cdq    
c001ae62:	c3                   	ret    

c001ae63 <Sys::loadDLL(regs*)>:
c001ae63:	56                   	push   esi
c001ae64:	53                   	push   ebx
c001ae65:	31 d2                	xor    edx,edx
c001ae67:	51                   	push   ecx
c001ae68:	b8 01 00 00 00       	mov    eax,0x1
c001ae6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae71:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ae75:	0f 84 8c 00 00 00    	je     c001af07 <Sys::loadDLL(regs*)+0xa4>
c001ae7b:	83 ec 0c             	sub    esp,0xc
c001ae7e:	68 14 01 00 00       	push   0x114
c001ae83:	e8 b8 49 ff ff       	call   c000f840 <malloc>
c001ae88:	83 c4 0c             	add    esp,0xc
c001ae8b:	89 c3                	mov    ebx,eax
c001ae8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae92:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae98:	53                   	push   ebx
c001ae99:	e8 ca 81 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001ae9e:	83 c4 10             	add    esp,0x10
c001aea1:	31 d2                	xor    edx,edx
c001aea3:	b8 02 00 00 00       	mov    eax,0x2
c001aea8:	85 db                	test   ebx,ebx
c001aeaa:	74 5b                	je     c001af07 <Sys::loadDLL(regs*)+0xa4>
c001aeac:	83 ec 0c             	sub    esp,0xc
c001aeaf:	53                   	push   ebx
c001aeb0:	e8 85 84 ff ff       	call   c001333a <File::exists()>
c001aeb5:	83 c4 10             	add    esp,0x10
c001aeb8:	84 c0                	test   al,al
c001aeba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aebc:	75 11                	jne    c001aecf <Sys::loadDLL(regs*)+0x6c>
c001aebe:	83 ec 0c             	sub    esp,0xc
c001aec1:	53                   	push   ebx
c001aec2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aec5:	83 c4 10             	add    esp,0x10
c001aec8:	b8 03 00 00 00       	mov    eax,0x3
c001aecd:	eb 36                	jmp    c001af05 <Sys::loadDLL(regs*)+0xa2>
c001aecf:	83 ec 0c             	sub    esp,0xc
c001aed2:	53                   	push   ebx
c001aed3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aed6:	58                   	pop    eax
c001aed7:	5a                   	pop    edx
c001aed8:	6a 00                	push   0x0
c001aeda:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aedd:	e8 fd 22 00 00       	call   c001d1df <Thr::loadDLL(char const*, bool)>
c001aee2:	83 c4 10             	add    esp,0x10
c001aee5:	89 c1                	mov    ecx,eax
c001aee7:	31 d2                	xor    edx,edx
c001aee9:	b8 04 00 00 00       	mov    eax,0x4
c001aeee:	85 c9                	test   ecx,ecx
c001aef0:	74 15                	je     c001af07 <Sys::loadDLL(regs*)+0xa4>
c001aef2:	53                   	push   ebx
c001aef3:	53                   	push   ebx
c001aef4:	ff 35 e8 dd 02 c0    	push   DWORD PTR ds:0xc002dde8
c001aefa:	51                   	push   ecx
c001aefb:	e8 13 25 00 00       	call   c001d413 <Thr::executeDLL(unsigned long, void*)>
c001af00:	83 c4 10             	add    esp,0x10
c001af03:	31 c0                	xor    eax,eax
c001af05:	31 d2                	xor    edx,edx
c001af07:	59                   	pop    ecx
c001af08:	5b                   	pop    ebx
c001af09:	5e                   	pop    esi
c001af0a:	c3                   	ret    

c001af0b <Sys::read(regs*)>:
c001af0b:	57                   	push   edi
c001af0c:	56                   	push   esi
c001af0d:	53                   	push   ebx
c001af0e:	83 ec 10             	sub    esp,0x10
c001af11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af18:	83 f8 02             	cmp    eax,0x2
c001af1b:	77 10                	ja     c001af2d <Sys::read(regs*)+0x22>
c001af1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af25:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001af2b:	eb 0e                	jmp    c001af3b <Sys::read(regs*)+0x30>
c001af2d:	83 ec 0c             	sub    esp,0xc
c001af30:	50                   	push   eax
c001af31:	e8 93 6a ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001af36:	83 c4 10             	add    esp,0x10
c001af39:	89 c1                	mov    ecx,eax
c001af3b:	83 c8 ff             	or     eax,0xffffffff
c001af3e:	85 c9                	test   ecx,ecx
c001af40:	89 c2                	mov    edx,eax
c001af42:	74 28                	je     c001af6c <Sys::read(regs*)+0x61>
c001af44:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af4c:	31 ff                	xor    edi,edi
c001af4e:	83 ec 0c             	sub    esp,0xc
c001af51:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af53:	8d 54 24 18          	lea    edx,[esp+0x18]
c001af57:	52                   	push   edx
c001af58:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af5b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001af5e:	57                   	push   edi
c001af5f:	56                   	push   esi
c001af60:	51                   	push   ecx
c001af61:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af68:	83 c4 20             	add    esp,0x20
c001af6b:	99                   	cdq    
c001af6c:	83 c4 10             	add    esp,0x10
c001af6f:	5b                   	pop    ebx
c001af70:	5e                   	pop    esi
c001af71:	5f                   	pop    edi
c001af72:	c3                   	ret    

c001af73 <Sys::sbrk(regs*)>:
c001af73:	56                   	push   esi
c001af74:	53                   	push   ebx
c001af75:	50                   	push   eax
c001af76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af82:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001af85:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001af8b:	85 db                	test   ebx,ebx
c001af8d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001af90:	74 02                	je     c001af94 <Sys::sbrk(regs*)+0x21>
c001af92:	79 06                	jns    c001af9a <Sys::sbrk(regs*)+0x27>
c001af94:	89 f0                	mov    eax,esi
c001af96:	31 d2                	xor    edx,edx
c001af98:	eb 2a                	jmp    c001afc4 <Sys::sbrk(regs*)+0x51>
c001af9a:	83 c8 ff             	or     eax,0xffffffff
c001af9d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001afa3:	89 c2                	mov    edx,eax
c001afa5:	77 1d                	ja     c001afc4 <Sys::sbrk(regs*)+0x51>
c001afa7:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001afad:	50                   	push   eax
c001afae:	c1 ea 0c             	shr    edx,0xc
c001afb1:	68 07 04 00 00       	push   0x407
c001afb6:	52                   	push   edx
c001afb7:	51                   	push   ecx
c001afb8:	e8 2d 73 ff ff       	call   c00122ea <VAS::allocatePages(int, int)>
c001afbd:	89 f0                	mov    eax,esi
c001afbf:	31 d2                	xor    edx,edx
c001afc1:	83 c4 10             	add    esp,0x10
c001afc4:	59                   	pop    ecx
c001afc5:	5b                   	pop    ebx
c001afc6:	5e                   	pop    esi
c001afc7:	c3                   	ret    

c001afc8 <Sys::setCwd(regs*)>:
c001afc8:	83 ec 14             	sub    esp,0x14
c001afcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afcf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001afd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afd7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afda:	e8 fa 83 ff ff       	call   c00133d9 <Fs::setcwd(Process*, char*)>
c001afdf:	83 c4 1c             	add    esp,0x1c
c001afe2:	99                   	cdq    
c001afe3:	c3                   	ret    

c001afe4 <Sys::setTime(regs*)>:
c001afe4:	55                   	push   ebp
c001afe5:	31 d2                	xor    edx,edx
c001afe7:	57                   	push   edi
c001afe8:	bf 18 00 00 00       	mov    edi,0x18
c001afed:	56                   	push   esi
c001afee:	53                   	push   ebx
c001afef:	bb 3c 00 00 00       	mov    ebx,0x3c
c001aff4:	83 ec 30             	sub    esp,0x30
c001aff7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001affb:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001affe:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b001:	f7 f3                	div    ebx
c001b003:	89 d6                	mov    esi,edx
c001b005:	31 d2                	xor    edx,edx
c001b007:	f7 f3                	div    ebx
c001b009:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b00c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b010:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b015:	31 d2                	xor    edx,edx
c001b017:	f7 f3                	div    ebx
c001b019:	31 d2                	xor    edx,edx
c001b01b:	bb 0c 00 00 00       	mov    ebx,0xc
c001b020:	f7 f7                	div    edi
c001b022:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b025:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b029:	0f b7 cd             	movzx  ecx,bp
c001b02c:	56                   	push   esi
c001b02d:	89 c7                	mov    edi,eax
c001b02f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b033:	c1 e6 10             	shl    esi,0x10
c001b036:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b03a:	83 e7 1f             	and    edi,0x1f
c001b03d:	51                   	push   ecx
c001b03e:	47                   	inc    edi
c001b03f:	c1 e8 05             	shr    eax,0x5
c001b042:	31 d2                	xor    edx,edx
c001b044:	f7 f3                	div    ebx
c001b046:	31 db                	xor    ebx,ebx
c001b048:	52                   	push   edx
c001b049:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b04d:	57                   	push   edi
c001b04e:	68 a9 b7 02 c0       	push   0xc002b7a9
c001b053:	e8 b7 7a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b058:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b05c:	89 f8                	mov    eax,edi
c001b05e:	31 c9                	xor    ecx,ecx
c001b060:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b064:	88 c1                	mov    cl,al
c001b066:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b06c:	88 d5                	mov    ch,dl
c001b06e:	c1 e0 10             	shl    eax,0x10
c001b071:	0f b7 d1             	movzx  edx,cx
c001b074:	09 c2                	or     edx,eax
c001b076:	89 d8                	mov    eax,ebx
c001b078:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b07d:	09 f0                	or     eax,esi
c001b07f:	89 c3                	mov    ebx,eax
c001b081:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b085:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b089:	83 c4 18             	add    esp,0x18
c001b08c:	53                   	push   ebx
c001b08d:	52                   	push   edx
c001b08e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b092:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b096:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b09a:	e8 54 8a ff ff       	call   c0013af3 <datetimeToSeconds(datetime_t)>
c001b09f:	83 c4 0c             	add    esp,0xc
c001b0a2:	52                   	push   edx
c001b0a3:	50                   	push   eax
c001b0a4:	56                   	push   esi
c001b0a5:	e8 d0 8b ff ff       	call   c0013c7a <secondsToDatetime(unsigned long long)>
c001b0aa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b0ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0b2:	51                   	push   ecx
c001b0b3:	89 d6                	mov    esi,edx
c001b0b5:	51                   	push   ecx
c001b0b6:	c1 ee 10             	shr    esi,0x10
c001b0b9:	89 f3                	mov    ebx,esi
c001b0bb:	0f b6 f3             	movzx  esi,bl
c001b0be:	56                   	push   esi
c001b0bf:	0f b6 f6             	movzx  esi,dh
c001b0c2:	0f b6 d2             	movzx  edx,dl
c001b0c5:	56                   	push   esi
c001b0c6:	52                   	push   edx
c001b0c7:	89 c2                	mov    edx,eax
c001b0c9:	c1 ea 10             	shr    edx,0x10
c001b0cc:	52                   	push   edx
c001b0cd:	0f b6 d4             	movzx  edx,ah
c001b0d0:	0f b6 c0             	movzx  eax,al
c001b0d3:	52                   	push   edx
c001b0d4:	50                   	push   eax
c001b0d5:	68 c5 b7 02 c0       	push   0xc002b7c5
c001b0da:	e8 30 7a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b0df:	83 c4 2c             	add    esp,0x2c
c001b0e2:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001b0e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b0eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b0ef:	53                   	push   ebx
c001b0f0:	51                   	push   ecx
c001b0f1:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b0f7:	e8 1e 8b ff ff       	call   c0013c1a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b0fc:	83 f0 01             	xor    eax,0x1
c001b0ff:	31 d2                	xor    edx,edx
c001b101:	0f b6 c0             	movzx  eax,al
c001b104:	83 c4 3c             	add    esp,0x3c
c001b107:	5b                   	pop    ebx
c001b108:	5e                   	pop    esi
c001b109:	5f                   	pop    edi
c001b10a:	5d                   	pop    ebp
c001b10b:	c3                   	ret    

c001b10c <Sys::timezone(regs*)>:
c001b10c:	53                   	push   ebx
c001b10d:	83 ec 08             	sub    esp,0x8
c001b110:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b114:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b118:	75 17                	jne    c001b131 <Sys::timezone(regs*)+0x25>
c001b11a:	83 ec 0c             	sub    esp,0xc
c001b11d:	68 e1 b7 02 c0       	push   0xc002b7e1
c001b122:	e8 e8 79 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b127:	83 c8 ff             	or     eax,0xffffffff
c001b12a:	83 c4 10             	add    esp,0x10
c001b12d:	89 c2                	mov    edx,eax
c001b12f:	eb 20                	jmp    c001b151 <Sys::timezone(regs*)+0x45>
c001b131:	83 ec 0c             	sub    esp,0xc
c001b134:	68 19 b8 02 c0       	push   0xc002b819
c001b139:	e8 d1 79 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b13e:	58                   	pop    eax
c001b13f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b142:	e8 35 88 ff ff       	call   c001397c <User::loadClockSettings(int)>
c001b147:	83 c4 10             	add    esp,0x10
c001b14a:	b8 01 00 00 00       	mov    eax,0x1
c001b14f:	31 d2                	xor    edx,edx
c001b151:	83 c4 08             	add    esp,0x8
c001b154:	5b                   	pop    ebx
c001b155:	c3                   	ret    

c001b156 <Sys::write(regs*)>:
c001b156:	57                   	push   edi
c001b157:	56                   	push   esi
c001b158:	53                   	push   ebx
c001b159:	83 ec 10             	sub    esp,0x10
c001b15c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b160:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b163:	83 f8 02             	cmp    eax,0x2
c001b166:	77 10                	ja     c001b178 <Sys::write(regs*)+0x22>
c001b168:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b16d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b170:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b176:	eb 0e                	jmp    c001b186 <Sys::write(regs*)+0x30>
c001b178:	83 ec 0c             	sub    esp,0xc
c001b17b:	50                   	push   eax
c001b17c:	e8 48 68 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b181:	83 c4 10             	add    esp,0x10
c001b184:	89 c1                	mov    ecx,eax
c001b186:	83 c8 ff             	or     eax,0xffffffff
c001b189:	85 c9                	test   ecx,ecx
c001b18b:	89 c2                	mov    edx,eax
c001b18d:	74 28                	je     c001b1b7 <Sys::write(regs*)+0x61>
c001b18f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b197:	31 ff                	xor    edi,edi
c001b199:	83 ec 0c             	sub    esp,0xc
c001b19c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b19e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b1a2:	52                   	push   edx
c001b1a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b1a6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b1a9:	57                   	push   edi
c001b1aa:	56                   	push   esi
c001b1ab:	51                   	push   ecx
c001b1ac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b1af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b1b3:	83 c4 20             	add    esp,0x20
c001b1b6:	99                   	cdq    
c001b1b7:	83 c4 10             	add    esp,0x10
c001b1ba:	5b                   	pop    ebx
c001b1bb:	5e                   	pop    esi
c001b1bc:	5f                   	pop    edi
c001b1bd:	c3                   	ret    

c001b1be <Sys::wsbe(regs*)>:
c001b1be:	57                   	push   edi
c001b1bf:	b9 0b 00 00 00       	mov    ecx,0xb
c001b1c4:	56                   	push   esi
c001b1c5:	be 58 b8 02 c0       	mov    esi,0xc002b858
c001b1ca:	53                   	push   ebx
c001b1cb:	83 ec 30             	sub    esp,0x30
c001b1ce:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b1d2:	fc                   	cld    
c001b1d3:	83 ec 0c             	sub    esp,0xc
c001b1d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b1d8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b1dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1e4:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b1ea:	8b 06                	mov    eax,DWORD PTR [esi]
c001b1ec:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b1ef:	57                   	push   edi
c001b1f0:	e8 9f 55 fe ff       	call   c0000794 <strlen>
c001b1f5:	5a                   	pop    edx
c001b1f6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b1fa:	52                   	push   edx
c001b1fb:	31 d2                	xor    edx,edx
c001b1fd:	57                   	push   edi
c001b1fe:	52                   	push   edx
c001b1ff:	50                   	push   eax
c001b200:	56                   	push   esi
c001b201:	ff d3                	call   ebx
c001b203:	83 c4 14             	add    esp,0x14
c001b206:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b20a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b20d:	e8 b7 30 00 00       	call   c001e2c9 <terminateTask(int)>
c001b212:	83 c4 40             	add    esp,0x40
c001b215:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b21a:	5b                   	pop    ebx
c001b21b:	31 d2                	xor    edx,edx
c001b21d:	5e                   	pop    esi
c001b21e:	5f                   	pop    edi
c001b21f:	c3                   	ret    

c001b220 <Sys::yield(regs*)>:
c001b220:	57                   	push   edi
c001b221:	56                   	push   esi
c001b222:	53                   	push   ebx
c001b223:	e8 5e 26 00 00       	call   c001d886 <lockScheduler()>
c001b228:	e8 95 29 00 00       	call   c001dbc2 <schedule()>
c001b22d:	e8 56 26 00 00       	call   c001d888 <unlockScheduler()>
c001b232:	8b 35 70 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e470
c001b238:	8b 3d 74 e4 02 c0    	mov    edi,DWORD PTR ds:0xc002e474
c001b23e:	89 f0                	mov    eax,esi
c001b240:	89 fb                	mov    ebx,edi
c001b242:	89 f1                	mov    ecx,esi
c001b244:	c1 e0 07             	shl    eax,0x7
c001b247:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b24b:	25 80 30 0f 00       	and    eax,0xf3080
c001b250:	c1 eb 17             	shr    ebx,0x17
c001b253:	31 c8                	xor    eax,ecx
c001b255:	89 da                	mov    edx,ebx
c001b257:	5b                   	pop    ebx
c001b258:	5e                   	pop    esi
c001b259:	5f                   	pop    edi
c001b25a:	c3                   	ret    

c001b25b <sysCallSeekDir(regs*)>:
c001b25b:	31 c0                	xor    eax,eax
c001b25d:	31 d2                	xor    edx,edx
c001b25f:	c3                   	ret    

c001b260 <sysCallTellDir(regs*)>:
c001b260:	31 c0                	xor    eax,eax
c001b262:	31 d2                	xor    edx,edx
c001b264:	c3                   	ret    

c001b265 <sysCallVerify(regs*)>:
c001b265:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b269:	31 d2                	xor    edx,edx
c001b26b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b26e:	c3                   	ret    

c001b26f <sysCallGetArgc(regs*)>:
c001b26f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b274:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b277:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b27d:	99                   	cdq    
c001b27e:	c3                   	ret    

c001b27f <sysFormatDisk(regs*)>:
c001b27f:	56                   	push   esi
c001b280:	53                   	push   ebx
c001b281:	53                   	push   ebx
c001b282:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b286:	8b 1d 68 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df68
c001b28c:	eb 25                	jmp    c001b2b3 <sysFormatDisk(regs*)+0x34>
c001b28e:	83 ec 0c             	sub    esp,0xc
c001b291:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b294:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b296:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b299:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b29c:	50                   	push   eax
c001b29d:	ff 34 85 00 e4 02 c0 	push   DWORD PTR [eax*4-0x3ffd1c00]
c001b2a4:	53                   	push   ebx
c001b2a5:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b2a8:	83 c4 20             	add    esp,0x20
c001b2ab:	83 f8 08             	cmp    eax,0x8
c001b2ae:	75 12                	jne    c001b2c2 <sysFormatDisk(regs*)+0x43>
c001b2b0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b2b3:	85 db                	test   ebx,ebx
c001b2b5:	75 d7                	jne    c001b28e <sysFormatDisk(regs*)+0xf>
c001b2b7:	59                   	pop    ecx
c001b2b8:	b8 03 00 00 00       	mov    eax,0x3
c001b2bd:	31 d2                	xor    edx,edx
c001b2bf:	5b                   	pop    ebx
c001b2c0:	5e                   	pop    esi
c001b2c1:	c3                   	ret    
c001b2c2:	85 c0                	test   eax,eax
c001b2c4:	74 1b                	je     c001b2e1 <sysFormatDisk(regs*)+0x62>
c001b2c6:	83 f8 09             	cmp    eax,0x9
c001b2c9:	74 0b                	je     c001b2d6 <sysFormatDisk(regs*)+0x57>
c001b2cb:	59                   	pop    ecx
c001b2cc:	b8 02 00 00 00       	mov    eax,0x2
c001b2d1:	31 d2                	xor    edx,edx
c001b2d3:	5b                   	pop    ebx
c001b2d4:	5e                   	pop    esi
c001b2d5:	c3                   	ret    
c001b2d6:	59                   	pop    ecx
c001b2d7:	b8 01 00 00 00       	mov    eax,0x1
c001b2dc:	31 d2                	xor    edx,edx
c001b2de:	5b                   	pop    ebx
c001b2df:	5e                   	pop    esi
c001b2e0:	c3                   	ret    
c001b2e1:	59                   	pop    ecx
c001b2e2:	31 c0                	xor    eax,eax
c001b2e4:	31 d2                	xor    edx,edx
c001b2e6:	5b                   	pop    ebx
c001b2e7:	5e                   	pop    esi
c001b2e8:	c3                   	ret    

c001b2e9 <sysSetDiskVolumeLabel(regs*)>:
c001b2e9:	56                   	push   esi
c001b2ea:	53                   	push   ebx
c001b2eb:	53                   	push   ebx
c001b2ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2f0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b2f3:	83 f8 19             	cmp    eax,0x19
c001b2f6:	77 29                	ja     c001b321 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b2f8:	8b 0c 85 00 e4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1c00]
c001b2ff:	85 c9                	test   ecx,ecx
c001b301:	74 1e                	je     c001b321 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b303:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b306:	85 d2                	test   edx,edx
c001b308:	74 17                	je     c001b321 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b30a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b310:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b312:	52                   	push   edx
c001b313:	50                   	push   eax
c001b314:	51                   	push   ecx
c001b315:	53                   	push   ebx
c001b316:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b319:	83 c4 10             	add    esp,0x10
c001b31c:	99                   	cdq    
c001b31d:	59                   	pop    ecx
c001b31e:	5b                   	pop    ebx
c001b31f:	5e                   	pop    esi
c001b320:	c3                   	ret    
c001b321:	59                   	pop    ecx
c001b322:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b327:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b32c:	5b                   	pop    ebx
c001b32d:	5e                   	pop    esi
c001b32e:	c3                   	ret    

c001b32f <sysGetDiskVolumeLabel(regs*)>:
c001b32f:	57                   	push   edi
c001b330:	56                   	push   esi
c001b331:	53                   	push   ebx
c001b332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b336:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b339:	83 fa 19             	cmp    edx,0x19
c001b33c:	77 34                	ja     c001b372 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b33e:	8b 0c 95 00 e4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1c00]
c001b345:	85 c9                	test   ecx,ecx
c001b347:	74 29                	je     c001b372 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b349:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b34c:	85 db                	test   ebx,ebx
c001b34e:	74 22                	je     c001b372 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b350:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b353:	85 c0                	test   eax,eax
c001b355:	74 1b                	je     c001b372 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b357:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b35d:	83 ec 0c             	sub    esp,0xc
c001b360:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b362:	50                   	push   eax
c001b363:	53                   	push   ebx
c001b364:	52                   	push   edx
c001b365:	51                   	push   ecx
c001b366:	56                   	push   esi
c001b367:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b36a:	83 c4 20             	add    esp,0x20
c001b36d:	99                   	cdq    
c001b36e:	5b                   	pop    ebx
c001b36f:	5e                   	pop    esi
c001b370:	5f                   	pop    edi
c001b371:	c3                   	ret    
c001b372:	5b                   	pop    ebx
c001b373:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b378:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b37d:	5e                   	pop    esi
c001b37e:	5f                   	pop    edi
c001b37f:	c3                   	ret    

c001b380 <sysShutdown(regs*)>:
c001b380:	83 ec 0c             	sub    esp,0xc
c001b383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b387:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b38a:	85 c0                	test   eax,eax
c001b38c:	74 18                	je     c001b3a6 <sysShutdown(regs*)+0x26>
c001b38e:	83 f8 01             	cmp    eax,0x1
c001b391:	74 38                	je     c001b3cb <sysShutdown(regs*)+0x4b>
c001b393:	83 f8 02             	cmp    eax,0x2
c001b396:	74 24                	je     c001b3bc <sysShutdown(regs*)+0x3c>
c001b398:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b39d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3a2:	83 c4 0c             	add    esp,0xc
c001b3a5:	c3                   	ret    
c001b3a6:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001b3ab:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3ad:	6a 00                	push   0x0
c001b3af:	6a 00                	push   0x0
c001b3b1:	6a 00                	push   0x0
c001b3b3:	50                   	push   eax
c001b3b4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b3b7:	83 c4 10             	add    esp,0x10
c001b3ba:	eb dc                	jmp    c001b398 <sysShutdown(regs*)+0x18>
c001b3bc:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001b3c1:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3c3:	6a 00                	push   0x0
c001b3c5:	6a 00                	push   0x0
c001b3c7:	6a 01                	push   0x1
c001b3c9:	eb e8                	jmp    c001b3b3 <sysShutdown(regs*)+0x33>
c001b3cb:	a1 a0 04 03 c0       	mov    eax,ds:0xc00304a0
c001b3d0:	85 c0                	test   eax,eax
c001b3d2:	74 02                	je     c001b3d6 <sysShutdown(regs*)+0x56>
c001b3d4:	ff d0                	call   eax
c001b3d6:	31 c0                	xor    eax,eax
c001b3d8:	31 d2                	xor    edx,edx
c001b3da:	83 c4 0c             	add    esp,0xc
c001b3dd:	c3                   	ret    

c001b3de <sysCallRealpath(regs*)>:
c001b3de:	83 ec 0c             	sub    esp,0xc
c001b3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3e5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b3e8:	85 d2                	test   edx,edx
c001b3ea:	74 07                	je     c001b3f3 <sysCallRealpath(regs*)+0x15>
c001b3ec:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b3ef:	85 c0                	test   eax,eax
c001b3f1:	75 0b                	jne    c001b3fe <sysCallRealpath(regs*)+0x20>
c001b3f3:	b8 01 00 00 00       	mov    eax,0x1
c001b3f8:	31 d2                	xor    edx,edx
c001b3fa:	83 c4 0c             	add    esp,0xc
c001b3fd:	c3                   	ret    
c001b3fe:	51                   	push   ecx
c001b3ff:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b405:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b408:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b40e:	51                   	push   ecx
c001b40f:	52                   	push   edx
c001b410:	50                   	push   eax
c001b411:	e8 a8 7a ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	31 c0                	xor    eax,eax
c001b41b:	31 d2                	xor    edx,edx
c001b41d:	83 c4 0c             	add    esp,0xc
c001b420:	c3                   	ret    

c001b421 <sysCallReadDir(regs*)>:
c001b421:	53                   	push   ebx
c001b422:	83 ec 18             	sub    esp,0x18
c001b425:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b429:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b42c:	83 f8 02             	cmp    eax,0x2
c001b42f:	76 53                	jbe    c001b484 <sysCallReadDir(regs*)+0x63>
c001b431:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b434:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b43a:	77 4f                	ja     c001b48b <sysCallReadDir(regs*)+0x6a>
c001b43c:	83 ec 0c             	sub    esp,0xc
c001b43f:	50                   	push   eax
c001b440:	e8 84 65 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b445:	83 c4 10             	add    esp,0x10
c001b448:	85 c0                	test   eax,eax
c001b44a:	74 50                	je     c001b49c <sysCallReadDir(regs*)+0x7b>
c001b44c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b454:	83 ec 0c             	sub    esp,0xc
c001b457:	8b 10                	mov    edx,DWORD PTR [eax]
c001b459:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b45d:	51                   	push   ecx
c001b45e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b461:	6a 00                	push   0x0
c001b463:	68 10 01 00 00       	push   0x110
c001b468:	50                   	push   eax
c001b469:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b46c:	83 c4 20             	add    esp,0x20
c001b46f:	85 c0                	test   eax,eax
c001b471:	74 38                	je     c001b4ab <sysCallReadDir(regs*)+0x8a>
c001b473:	83 f8 07             	cmp    eax,0x7
c001b476:	74 0c                	je     c001b484 <sysCallReadDir(regs*)+0x63>
c001b478:	b8 02 00 00 00       	mov    eax,0x2
c001b47d:	31 d2                	xor    edx,edx
c001b47f:	83 c4 18             	add    esp,0x18
c001b482:	5b                   	pop    ebx
c001b483:	c3                   	ret    
c001b484:	b8 01 00 00 00       	mov    eax,0x1
c001b489:	eb f2                	jmp    c001b47d <sysCallReadDir(regs*)+0x5c>
c001b48b:	83 ec 08             	sub    esp,0x8
c001b48e:	52                   	push   edx
c001b48f:	68 84 b8 02 c0       	push   0xc002b884
c001b494:	e8 76 76 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b499:	83 c4 10             	add    esp,0x10
c001b49c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4a6:	83 c4 18             	add    esp,0x18
c001b4a9:	5b                   	pop    ebx
c001b4aa:	c3                   	ret    
c001b4ab:	31 c0                	xor    eax,eax
c001b4ad:	eb ce                	jmp    c001b47d <sysCallReadDir(regs*)+0x5c>

c001b4af <sysCallIsATTY(regs*)>:
c001b4af:	83 ec 0c             	sub    esp,0xc
c001b4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4b9:	83 f8 02             	cmp    eax,0x2
c001b4bc:	76 07                	jbe    c001b4c5 <sysCallIsATTY(regs*)+0x16>
c001b4be:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b4c3:	75 26                	jne    c001b4eb <sysCallIsATTY(regs*)+0x3c>
c001b4c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4cd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b4d3:	85 c0                	test   eax,eax
c001b4d5:	74 24                	je     c001b4fb <sysCallIsATTY(regs*)+0x4c>
c001b4d7:	83 ec 0c             	sub    esp,0xc
c001b4da:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4dc:	50                   	push   eax
c001b4dd:	ff 12                	call   DWORD PTR [edx]
c001b4df:	31 d2                	xor    edx,edx
c001b4e1:	0f b6 c0             	movzx  eax,al
c001b4e4:	83 c4 10             	add    esp,0x10
c001b4e7:	83 c4 0c             	add    esp,0xc
c001b4ea:	c3                   	ret    
c001b4eb:	83 ec 0c             	sub    esp,0xc
c001b4ee:	50                   	push   eax
c001b4ef:	e8 d5 64 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b4f4:	83 c4 10             	add    esp,0x10
c001b4f7:	85 c0                	test   eax,eax
c001b4f9:	75 dc                	jne    c001b4d7 <sysCallIsATTY(regs*)+0x28>
c001b4fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b500:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b505:	83 c4 0c             	add    esp,0xc
c001b508:	c3                   	ret    

c001b509 <sysCallSeek(regs*)>:
c001b509:	53                   	push   ebx
c001b50a:	83 ec 08             	sub    esp,0x8
c001b50d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b511:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b514:	83 f8 02             	cmp    eax,0x2
c001b517:	76 4a                	jbe    c001b563 <sysCallSeek(regs*)+0x5a>
c001b519:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b51e:	77 32                	ja     c001b552 <sysCallSeek(regs*)+0x49>
c001b520:	83 ec 0c             	sub    esp,0xc
c001b523:	50                   	push   eax
c001b524:	e8 a0 64 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b529:	83 c4 0c             	add    esp,0xc
c001b52c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b52f:	31 db                	xor    ebx,ebx
c001b531:	53                   	push   ebx
c001b532:	51                   	push   ecx
c001b533:	50                   	push   eax
c001b534:	e8 51 7c ff ff       	call   c001318a <File::seek(unsigned long long)>
c001b539:	83 c4 10             	add    esp,0x10
c001b53c:	85 c0                	test   eax,eax
c001b53e:	0f 95 c0             	setne  al
c001b541:	31 d2                	xor    edx,edx
c001b543:	0f b6 c0             	movzx  eax,al
c001b546:	f7 d8                	neg    eax
c001b548:	83 d2 00             	adc    edx,0x0
c001b54b:	83 c4 08             	add    esp,0x8
c001b54e:	f7 da                	neg    edx
c001b550:	5b                   	pop    ebx
c001b551:	c3                   	ret    
c001b552:	83 ec 08             	sub    esp,0x8
c001b555:	50                   	push   eax
c001b556:	68 f3 b8 02 c0       	push   0xc002b8f3
c001b55b:	e8 af 75 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b560:	83 c4 10             	add    esp,0x10
c001b563:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b568:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b56d:	83 c4 08             	add    esp,0x8
c001b570:	5b                   	pop    ebx
c001b571:	c3                   	ret    

c001b572 <sysCallTell(regs*)>:
c001b572:	53                   	push   ebx
c001b573:	83 ec 08             	sub    esp,0x8
c001b576:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b57a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b57d:	83 f8 02             	cmp    eax,0x2
c001b580:	76 5e                	jbe    c001b5e0 <sysCallTell(regs*)+0x6e>
c001b582:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b587:	77 2d                	ja     c001b5b6 <sysCallTell(regs*)+0x44>
c001b589:	83 ec 0c             	sub    esp,0xc
c001b58c:	50                   	push   eax
c001b58d:	e8 37 64 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b592:	5a                   	pop    edx
c001b593:	59                   	pop    ecx
c001b594:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b597:	50                   	push   eax
c001b598:	e8 43 7c ff ff       	call   c00131e0 <File::tell(unsigned long long*)>
c001b59d:	83 c4 10             	add    esp,0x10
c001b5a0:	85 c0                	test   eax,eax
c001b5a2:	0f 95 c0             	setne  al
c001b5a5:	31 d2                	xor    edx,edx
c001b5a7:	0f b6 c0             	movzx  eax,al
c001b5aa:	f7 d8                	neg    eax
c001b5ac:	83 d2 00             	adc    edx,0x0
c001b5af:	83 c4 08             	add    esp,0x8
c001b5b2:	f7 da                	neg    edx
c001b5b4:	5b                   	pop    ebx
c001b5b5:	c3                   	ret    
c001b5b6:	83 ec 08             	sub    esp,0x8
c001b5b9:	50                   	push   eax
c001b5ba:	68 0d b9 02 c0       	push   0xc002b90d
c001b5bf:	e8 4b 75 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b5c4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b5c7:	83 c4 10             	add    esp,0x10
c001b5ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b5d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b5d7:	31 d2                	xor    edx,edx
c001b5d9:	31 c0                	xor    eax,eax
c001b5db:	83 c4 08             	add    esp,0x8
c001b5de:	5b                   	pop    ebx
c001b5df:	c3                   	ret    
c001b5e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5ea:	83 c4 08             	add    esp,0x8
c001b5ed:	5b                   	pop    ebx
c001b5ee:	c3                   	ret    

c001b5ef <sysCallSize(regs*)>:
c001b5ef:	53                   	push   ebx
c001b5f0:	83 ec 18             	sub    esp,0x18
c001b5f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5fa:	83 f8 02             	cmp    eax,0x2
c001b5fd:	76 64                	jbe    c001b663 <sysCallSize(regs*)+0x74>
c001b5ff:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b604:	77 33                	ja     c001b639 <sysCallSize(regs*)+0x4a>
c001b606:	83 ec 0c             	sub    esp,0xc
c001b609:	50                   	push   eax
c001b60a:	e8 ba 63 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b60f:	83 c4 0c             	add    esp,0xc
c001b612:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b616:	52                   	push   edx
c001b617:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b61a:	50                   	push   eax
c001b61b:	e8 58 7d ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001b620:	83 c4 10             	add    esp,0x10
c001b623:	85 c0                	test   eax,eax
c001b625:	0f 95 c0             	setne  al
c001b628:	31 d2                	xor    edx,edx
c001b62a:	0f b6 c0             	movzx  eax,al
c001b62d:	f7 d8                	neg    eax
c001b62f:	83 d2 00             	adc    edx,0x0
c001b632:	83 c4 18             	add    esp,0x18
c001b635:	f7 da                	neg    edx
c001b637:	5b                   	pop    ebx
c001b638:	c3                   	ret    
c001b639:	83 ec 08             	sub    esp,0x8
c001b63c:	50                   	push   eax
c001b63d:	68 27 b9 02 c0       	push   0xc002b927
c001b642:	e8 c8 74 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b647:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b64a:	83 c4 10             	add    esp,0x10
c001b64d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b653:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b65a:	31 d2                	xor    edx,edx
c001b65c:	31 c0                	xor    eax,eax
c001b65e:	83 c4 18             	add    esp,0x18
c001b661:	5b                   	pop    ebx
c001b662:	c3                   	ret    
c001b663:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b668:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b66d:	83 c4 18             	add    esp,0x18
c001b670:	5b                   	pop    ebx
c001b671:	c3                   	ret    

c001b672 <sysCallSizeFromFilename(regs*)>:
c001b672:	57                   	push   edi
c001b673:	56                   	push   esi
c001b674:	53                   	push   ebx
c001b675:	83 ec 20             	sub    esp,0x20
c001b678:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b67c:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b67f:	83 fb 02             	cmp    ebx,0x2
c001b682:	0f 86 99 00 00 00    	jbe    c001b721 <sysCallSizeFromFilename(regs*)+0xaf>
c001b688:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b68e:	77 65                	ja     c001b6f5 <sysCallSizeFromFilename(regs*)+0x83>
c001b690:	83 ec 0c             	sub    esp,0xc
c001b693:	68 14 01 00 00       	push   0x114
c001b698:	e8 a3 41 ff ff       	call   c000f840 <malloc>
c001b69d:	83 c4 0c             	add    esp,0xc
c001b6a0:	89 c6                	mov    esi,eax
c001b6a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6aa:	53                   	push   ebx
c001b6ab:	56                   	push   esi
c001b6ac:	e8 b7 79 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001b6b1:	83 c4 0c             	add    esp,0xc
c001b6b4:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b6b8:	50                   	push   eax
c001b6b9:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b6bc:	56                   	push   esi
c001b6bd:	e8 b6 7c ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001b6c2:	83 c4 10             	add    esp,0x10
c001b6c5:	85 f6                	test   esi,esi
c001b6c7:	74 14                	je     c001b6dd <sysCallSizeFromFilename(regs*)+0x6b>
c001b6c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6cd:	8b 16                	mov    edx,DWORD PTR [esi]
c001b6cf:	83 ec 0c             	sub    esp,0xc
c001b6d2:	56                   	push   esi
c001b6d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b6d6:	83 c4 10             	add    esp,0x10
c001b6d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6dd:	85 c0                	test   eax,eax
c001b6df:	0f 95 c0             	setne  al
c001b6e2:	31 d2                	xor    edx,edx
c001b6e4:	0f b6 c0             	movzx  eax,al
c001b6e7:	f7 d8                	neg    eax
c001b6e9:	83 d2 00             	adc    edx,0x0
c001b6ec:	83 c4 20             	add    esp,0x20
c001b6ef:	f7 da                	neg    edx
c001b6f1:	5b                   	pop    ebx
c001b6f2:	5e                   	pop    esi
c001b6f3:	5f                   	pop    edi
c001b6f4:	c3                   	ret    
c001b6f5:	83 ec 08             	sub    esp,0x8
c001b6f8:	53                   	push   ebx
c001b6f9:	68 27 b9 02 c0       	push   0xc002b927
c001b6fe:	e8 0c 74 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b703:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b706:	83 c4 10             	add    esp,0x10
c001b709:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b70f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b716:	31 d2                	xor    edx,edx
c001b718:	83 c4 20             	add    esp,0x20
c001b71b:	31 c0                	xor    eax,eax
c001b71d:	5b                   	pop    ebx
c001b71e:	5e                   	pop    esi
c001b71f:	5f                   	pop    edi
c001b720:	c3                   	ret    
c001b721:	83 c4 20             	add    esp,0x20
c001b724:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b729:	5b                   	pop    ebx
c001b72a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b72f:	5e                   	pop    esi
c001b730:	5f                   	pop    edi
c001b731:	c3                   	ret    

c001b732 <sysCallClose(regs*)>:
c001b732:	53                   	push   ebx
c001b733:	83 ec 08             	sub    esp,0x8
c001b736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b73a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b73d:	83 f8 02             	cmp    eax,0x2
c001b740:	76 50                	jbe    c001b792 <sysCallClose(regs*)+0x60>
c001b742:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b747:	74 58                	je     c001b7a1 <sysCallClose(regs*)+0x6f>
c001b749:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b74e:	74 60                	je     c001b7b0 <sysCallClose(regs*)+0x7e>
c001b750:	77 2f                	ja     c001b781 <sysCallClose(regs*)+0x4f>
c001b752:	83 ec 0c             	sub    esp,0xc
c001b755:	50                   	push   eax
c001b756:	e8 6e 62 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b75b:	89 c3                	mov    ebx,eax
c001b75d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b760:	e8 c5 79 ff ff       	call   c001312a <File::close()>
c001b765:	83 c4 10             	add    esp,0x10
c001b768:	85 db                	test   ebx,ebx
c001b76a:	74 0c                	je     c001b778 <sysCallClose(regs*)+0x46>
c001b76c:	83 ec 0c             	sub    esp,0xc
c001b76f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b771:	53                   	push   ebx
c001b772:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b775:	83 c4 10             	add    esp,0x10
c001b778:	31 c0                	xor    eax,eax
c001b77a:	31 d2                	xor    edx,edx
c001b77c:	83 c4 08             	add    esp,0x8
c001b77f:	5b                   	pop    ebx
c001b780:	c3                   	ret    
c001b781:	83 ec 08             	sub    esp,0x8
c001b784:	50                   	push   eax
c001b785:	68 a8 b8 02 c0       	push   0xc002b8a8
c001b78a:	e8 80 73 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b797:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b79c:	83 c4 08             	add    esp,0x8
c001b79f:	5b                   	pop    ebx
c001b7a0:	c3                   	ret    
c001b7a1:	83 ec 0c             	sub    esp,0xc
c001b7a4:	68 42 b9 02 c0       	push   0xc002b942
c001b7a9:	e8 61 73 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b7ae:	eb c5                	jmp    c001b775 <sysCallClose(regs*)+0x43>
c001b7b0:	83 ec 0c             	sub    esp,0xc
c001b7b3:	68 50 b9 02 c0       	push   0xc002b950
c001b7b8:	eb ef                	jmp    c001b7a9 <sysCallClose(regs*)+0x77>

c001b7ba <sysCallOpenDir(regs*)>:
c001b7ba:	56                   	push   esi
c001b7bb:	53                   	push   ebx
c001b7bc:	53                   	push   ebx
c001b7bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7c1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b7c4:	85 f6                	test   esi,esi
c001b7c6:	74 59                	je     c001b821 <sysCallOpenDir(regs*)+0x67>
c001b7c8:	83 ec 0c             	sub    esp,0xc
c001b7cb:	68 14 01 00 00       	push   0x114
c001b7d0:	e8 6b 40 ff ff       	call   c000f840 <malloc>
c001b7d5:	83 c4 0c             	add    esp,0xc
c001b7d8:	89 c6                	mov    esi,eax
c001b7da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7df:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7e5:	56                   	push   esi
c001b7e6:	e8 29 7d ff ff       	call   c0013514 <Directory::Directory(char const*, Process*)>
c001b7eb:	83 c4 10             	add    esp,0x10
c001b7ee:	85 f6                	test   esi,esi
c001b7f0:	74 2f                	je     c001b821 <sysCallOpenDir(regs*)+0x67>
c001b7f2:	83 ec 0c             	sub    esp,0xc
c001b7f5:	56                   	push   esi
c001b7f6:	e8 7d 7d ff ff       	call   c0013578 <Directory::open()>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	85 c0                	test   eax,eax
c001b800:	75 1f                	jne    c001b821 <sysCallOpenDir(regs*)+0x67>
c001b802:	83 ec 0c             	sub    esp,0xc
c001b805:	56                   	push   esi
c001b806:	e8 c9 5e ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001b80b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b80e:	83 c4 10             	add    esp,0x10
c001b811:	89 02                	mov    DWORD PTR [edx],eax
c001b813:	c1 f8 1f             	sar    eax,0x1f
c001b816:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b819:	31 c0                	xor    eax,eax
c001b81b:	59                   	pop    ecx
c001b81c:	31 d2                	xor    edx,edx
c001b81e:	5b                   	pop    ebx
c001b81f:	5e                   	pop    esi
c001b820:	c3                   	ret    
c001b821:	59                   	pop    ecx
c001b822:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b827:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b82c:	5b                   	pop    ebx
c001b82d:	5e                   	pop    esi
c001b82e:	c3                   	ret    

c001b82f <sysCallCloseDir(regs*)>:
c001b82f:	53                   	push   ebx
c001b830:	83 ec 08             	sub    esp,0x8
c001b833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b837:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b83a:	83 f8 02             	cmp    eax,0x2
c001b83d:	76 47                	jbe    c001b886 <sysCallCloseDir(regs*)+0x57>
c001b83f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b844:	77 2f                	ja     c001b875 <sysCallCloseDir(regs*)+0x46>
c001b846:	83 ec 0c             	sub    esp,0xc
c001b849:	50                   	push   eax
c001b84a:	e8 7a 61 ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001b84f:	89 c3                	mov    ebx,eax
c001b851:	89 04 24             	mov    DWORD PTR [esp],eax
c001b854:	e8 7b 7d ff ff       	call   c00135d4 <Directory::close()>
c001b859:	83 c4 10             	add    esp,0x10
c001b85c:	85 db                	test   ebx,ebx
c001b85e:	74 0c                	je     c001b86c <sysCallCloseDir(regs*)+0x3d>
c001b860:	83 ec 0c             	sub    esp,0xc
c001b863:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b865:	53                   	push   ebx
c001b866:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b869:	83 c4 10             	add    esp,0x10
c001b86c:	31 c0                	xor    eax,eax
c001b86e:	31 d2                	xor    edx,edx
c001b870:	83 c4 08             	add    esp,0x8
c001b873:	5b                   	pop    ebx
c001b874:	c3                   	ret    
c001b875:	83 ec 08             	sub    esp,0x8
c001b878:	50                   	push   eax
c001b879:	68 d0 b8 02 c0       	push   0xc002b8d0
c001b87e:	e8 8c 72 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001b883:	83 c4 10             	add    esp,0x10
c001b886:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b88b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b890:	83 c4 08             	add    esp,0x8
c001b893:	5b                   	pop    ebx
c001b894:	c3                   	ret    

c001b895 <sysCallMakeDir(regs*)>:
c001b895:	56                   	push   esi
c001b896:	53                   	push   ebx
c001b897:	83 ec 10             	sub    esp,0x10
c001b89a:	68 14 01 00 00       	push   0x114
c001b89f:	e8 9c 3f ff ff       	call   c000f840 <malloc>
c001b8a4:	83 c4 0c             	add    esp,0xc
c001b8a7:	89 c3                	mov    ebx,eax
c001b8a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ae:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8b5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b8b8:	53                   	push   ebx
c001b8b9:	e8 56 7c ff ff       	call   c0013514 <Directory::Directory(char const*, Process*)>
c001b8be:	83 c4 10             	add    esp,0x10
c001b8c1:	85 db                	test   ebx,ebx
c001b8c3:	74 32                	je     c001b8f7 <sysCallMakeDir(regs*)+0x62>
c001b8c5:	83 ec 0c             	sub    esp,0xc
c001b8c8:	53                   	push   ebx
c001b8c9:	e8 8a 7e ff ff       	call   c0013758 <Directory::create()>
c001b8ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8d1:	89 c6                	mov    esi,eax
c001b8d3:	e8 fc 7c ff ff       	call   c00135d4 <Directory::close()>
c001b8d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8e0:	83 c4 10             	add    esp,0x10
c001b8e3:	31 c0                	xor    eax,eax
c001b8e5:	59                   	pop    ecx
c001b8e6:	85 f6                	test   esi,esi
c001b8e8:	5b                   	pop    ebx
c001b8e9:	0f 95 c0             	setne  al
c001b8ec:	5e                   	pop    esi
c001b8ed:	31 d2                	xor    edx,edx
c001b8ef:	f7 d8                	neg    eax
c001b8f1:	83 d2 00             	adc    edx,0x0
c001b8f4:	f7 da                	neg    edx
c001b8f6:	c3                   	ret    
c001b8f7:	59                   	pop    ecx
c001b8f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b902:	5b                   	pop    ebx
c001b903:	5e                   	pop    esi
c001b904:	c3                   	ret    

c001b905 <sysCallWait(regs*)>:
c001b905:	83 ec 10             	sub    esp,0x10
c001b908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b90c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b90f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b912:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b915:	e8 23 24 00 00       	call   c001dd3d <waitTask(int, int*, int)>
c001b91a:	83 c4 1c             	add    esp,0x1c
c001b91d:	99                   	cdq    
c001b91e:	c3                   	ret    

c001b91f <sysCallNotImpl(regs*)>:
c001b91f:	83 ec 18             	sub    esp,0x18
c001b922:	68 5e b9 02 c0       	push   0xc002b95e
c001b927:	e8 5f e8 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001b92c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b931:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b936:	83 c4 1c             	add    esp,0x1c
c001b939:	c3                   	ret    

c001b93a <sysPanic(regs*)>:
c001b93a:	83 ec 18             	sub    esp,0x18
c001b93d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b941:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b944:	e8 42 e8 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001b949:	c7 04 24 78 b9 02 c0 	mov    DWORD PTR [esp],0xc002b978
c001b950:	e8 36 e8 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001b955:	b8 01 00 00 00       	mov    eax,0x1
c001b95a:	31 d2                	xor    edx,edx
c001b95c:	83 c4 1c             	add    esp,0x1c
c001b95f:	c3                   	ret    

c001b960 <sysCallRmdir(regs*)>:
c001b960:	56                   	push   esi
c001b961:	53                   	push   ebx
c001b962:	83 ec 20             	sub    esp,0x20
c001b965:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b969:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b96c:	68 14 01 00 00       	push   0x114
c001b971:	e8 ca 3e ff ff       	call   c000f840 <malloc>
c001b976:	83 c4 0c             	add    esp,0xc
c001b979:	89 c3                	mov    ebx,eax
c001b97b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b980:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b983:	56                   	push   esi
c001b984:	53                   	push   ebx
c001b985:	e8 de 76 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001b98a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b98d:	e8 b2 78 ff ff       	call   c0013244 <File::unlink()>
c001b992:	83 c4 10             	add    esp,0x10
c001b995:	85 db                	test   ebx,ebx
c001b997:	74 14                	je     c001b9ad <sysCallRmdir(regs*)+0x4d>
c001b999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b99d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b99f:	83 ec 0c             	sub    esp,0xc
c001b9a2:	53                   	push   ebx
c001b9a3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9a6:	83 c4 10             	add    esp,0x10
c001b9a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9ad:	85 c0                	test   eax,eax
c001b9af:	0f 95 c0             	setne  al
c001b9b2:	31 d2                	xor    edx,edx
c001b9b4:	0f b6 c0             	movzx  eax,al
c001b9b7:	f7 d8                	neg    eax
c001b9b9:	83 d2 00             	adc    edx,0x0
c001b9bc:	83 c4 14             	add    esp,0x14
c001b9bf:	f7 da                	neg    edx
c001b9c1:	5b                   	pop    ebx
c001b9c2:	5e                   	pop    esi
c001b9c3:	c3                   	ret    

c001b9c4 <sysCallUnlink(regs*)>:
c001b9c4:	56                   	push   esi
c001b9c5:	53                   	push   ebx
c001b9c6:	83 ec 20             	sub    esp,0x20
c001b9c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b9cd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b9d0:	68 14 01 00 00       	push   0x114
c001b9d5:	e8 66 3e ff ff       	call   c000f840 <malloc>
c001b9da:	83 c4 0c             	add    esp,0xc
c001b9dd:	89 c3                	mov    ebx,eax
c001b9df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9e7:	56                   	push   esi
c001b9e8:	53                   	push   ebx
c001b9e9:	e8 7a 76 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001b9ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9f1:	e8 4e 78 ff ff       	call   c0013244 <File::unlink()>
c001b9f6:	83 c4 10             	add    esp,0x10
c001b9f9:	85 db                	test   ebx,ebx
c001b9fb:	74 14                	je     c001ba11 <sysCallUnlink(regs*)+0x4d>
c001b9fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba01:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba03:	83 ec 0c             	sub    esp,0xc
c001ba06:	53                   	push   ebx
c001ba07:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba0a:	83 c4 10             	add    esp,0x10
c001ba0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba11:	85 c0                	test   eax,eax
c001ba13:	0f 95 c0             	setne  al
c001ba16:	31 d2                	xor    edx,edx
c001ba18:	0f b6 c0             	movzx  eax,al
c001ba1b:	f7 d8                	neg    eax
c001ba1d:	83 d2 00             	adc    edx,0x0
c001ba20:	83 c4 14             	add    esp,0x14
c001ba23:	f7 da                	neg    edx
c001ba25:	5b                   	pop    ebx
c001ba26:	5e                   	pop    esi
c001ba27:	c3                   	ret    

c001ba28 <sysCallGetArgv(regs*)>:
c001ba28:	83 ec 0c             	sub    esp,0xc
c001ba2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba2f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ba32:	85 c0                	test   eax,eax
c001ba34:	78 2b                	js     c001ba61 <sysCallGetArgv(regs*)+0x39>
c001ba36:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ba3c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ba3f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001ba45:	7d 1a                	jge    c001ba61 <sysCallGetArgv(regs*)+0x39>
c001ba47:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001ba4e:	85 c0                	test   eax,eax
c001ba50:	74 17                	je     c001ba69 <sysCallGetArgv(regs*)+0x41>
c001ba52:	83 ec 08             	sub    esp,0x8
c001ba55:	50                   	push   eax
c001ba56:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001ba59:	e8 d6 4d fe ff       	call   c0000834 <strcpy>
c001ba5e:	83 c4 10             	add    esp,0x10
c001ba61:	31 c0                	xor    eax,eax
c001ba63:	31 d2                	xor    edx,edx
c001ba65:	83 c4 0c             	add    esp,0xc
c001ba68:	c3                   	ret    
c001ba69:	b8 01 00 00 00       	mov    eax,0x1
c001ba6e:	31 d2                	xor    edx,edx
c001ba70:	83 c4 0c             	add    esp,0xc
c001ba73:	c3                   	ret    

c001ba74 <sysCallTTYName(regs*)>:
c001ba74:	56                   	push   esi
c001ba75:	53                   	push   ebx
c001ba76:	53                   	push   ebx
c001ba77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba7b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001ba7e:	85 c0                	test   eax,eax
c001ba80:	74 5f                	je     c001bae1 <sysCallTTYName(regs*)+0x6d>
c001ba82:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba85:	83 f8 02             	cmp    eax,0x2
c001ba88:	77 3e                	ja     c001bac8 <sysCallTTYName(regs*)+0x54>
c001ba8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba8f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba92:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001ba98:	85 db                	test   ebx,ebx
c001ba9a:	74 45                	je     c001bae1 <sysCallTTYName(regs*)+0x6d>
c001ba9c:	83 ec 0c             	sub    esp,0xc
c001ba9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001baa1:	53                   	push   ebx
c001baa2:	ff 10                	call   DWORD PTR [eax]
c001baa4:	83 c4 10             	add    esp,0x10
c001baa7:	84 c0                	test   al,al
c001baa9:	74 41                	je     c001baec <sysCallTTYName(regs*)+0x78>
c001baab:	83 ec 08             	sub    esp,0x8
c001baae:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bab4:	53                   	push   ebx
c001bab5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bab8:	e8 77 4d fe ff       	call   c0000834 <strcpy>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	31 c0                	xor    eax,eax
c001bac2:	59                   	pop    ecx
c001bac3:	31 d2                	xor    edx,edx
c001bac5:	5b                   	pop    ebx
c001bac6:	5e                   	pop    esi
c001bac7:	c3                   	ret    
c001bac8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bacd:	74 bb                	je     c001ba8a <sysCallTTYName(regs*)+0x16>
c001bacf:	83 ec 0c             	sub    esp,0xc
c001bad2:	50                   	push   eax
c001bad3:	e8 f1 5e ff ff       	call   c00119c9 <getFromFileDescriptor(int)>
c001bad8:	83 c4 10             	add    esp,0x10
c001badb:	89 c3                	mov    ebx,eax
c001badd:	85 db                	test   ebx,ebx
c001badf:	75 bb                	jne    c001ba9c <sysCallTTYName(regs*)+0x28>
c001bae1:	59                   	pop    ecx
c001bae2:	b8 01 00 00 00       	mov    eax,0x1
c001bae7:	31 d2                	xor    edx,edx
c001bae9:	5b                   	pop    ebx
c001baea:	5e                   	pop    esi
c001baeb:	c3                   	ret    
c001baec:	59                   	pop    ecx
c001baed:	b8 02 00 00 00       	mov    eax,0x2
c001baf2:	31 d2                	xor    edx,edx
c001baf4:	5b                   	pop    ebx
c001baf5:	5e                   	pop    esi
c001baf6:	c3                   	ret    

c001baf7 <sysCallUSleep(regs*)>:
c001baf7:	83 ec 14             	sub    esp,0x14
c001bafa:	b8 e8 03 00 00       	mov    eax,0x3e8
c001baff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bb03:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bb0a:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bb0d:	01 ca                	add    edx,ecx
c001bb0f:	52                   	push   edx
c001bb10:	50                   	push   eax
c001bb11:	e8 c0 22 00 00       	call   c001ddd6 <nanoSleep(unsigned long long)>
c001bb16:	31 c0                	xor    eax,eax
c001bb18:	31 d2                	xor    edx,edx
c001bb1a:	83 c4 1c             	add    esp,0x1c
c001bb1d:	c3                   	ret    

c001bb1e <sysCallSpawn(regs*)>:
c001bb1e:	56                   	push   esi
c001bb1f:	53                   	push   ebx
c001bb20:	53                   	push   ebx
c001bb21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb25:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bb28:	85 f6                	test   esi,esi
c001bb2a:	75 08                	jne    c001bb34 <sysCallSpawn(regs*)+0x16>
c001bb2c:	59                   	pop    ecx
c001bb2d:	31 c0                	xor    eax,eax
c001bb2f:	31 d2                	xor    edx,edx
c001bb31:	5b                   	pop    ebx
c001bb32:	5e                   	pop    esi
c001bb33:	c3                   	ret    
c001bb34:	83 ec 0c             	sub    esp,0xc
c001bb37:	68 3f 07 00 00       	push   0x73f
c001bb3c:	e8 ff 3c ff ff       	call   c000f840 <malloc>
c001bb41:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb44:	89 c6                	mov    esi,eax
c001bb46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb4b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb4e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb51:	56                   	push   esi
c001bb52:	e8 7f 19 00 00       	call   c001d4d6 <Process::Process(char const*, Process*, char**)>
c001bb57:	83 c4 20             	add    esp,0x20
c001bb5a:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bb61:	75 c9                	jne    c001bb2c <sysCallSpawn(regs*)+0xe>
c001bb63:	83 ec 0c             	sub    esp,0xc
c001bb66:	56                   	push   esi
c001bb67:	e8 30 1f 00 00       	call   c001da9c <Process::createUserThread()>
c001bb6c:	8b 06                	mov    eax,DWORD PTR [esi]
c001bb6e:	83 c4 10             	add    esp,0x10
c001bb71:	99                   	cdq    
c001bb72:	59                   	pop    ecx
c001bb73:	5b                   	pop    ebx
c001bb74:	5e                   	pop    esi
c001bb75:	c3                   	ret    

c001bb76 <sysCallGetEnv(regs*)>:
c001bb76:	57                   	push   edi
c001bb77:	56                   	push   esi
c001bb78:	53                   	push   ebx
c001bb79:	83 ec 1c             	sub    esp,0x1c
c001bb7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bb80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb85:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001bb88:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bb8b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb8e:	e8 14 e5 ff ff       	call   c001a0a7 <Krnl::getProcessTotalEnvCount(Process*)>
c001bb93:	83 c4 10             	add    esp,0x10
c001bb96:	39 c7                	cmp    edi,eax
c001bb98:	7c 14                	jl     c001bbae <sysCallGetEnv(regs*)+0x38>
c001bb9a:	85 f6                	test   esi,esi
c001bb9c:	75 0b                	jne    c001bba9 <sysCallGetEnv(regs*)+0x33>
c001bb9e:	83 c4 10             	add    esp,0x10
c001bba1:	31 c0                	xor    eax,eax
c001bba3:	5b                   	pop    ebx
c001bba4:	31 d2                	xor    edx,edx
c001bba6:	5e                   	pop    esi
c001bba7:	5f                   	pop    edi
c001bba8:	c3                   	ret    
c001bba9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bbac:	eb f0                	jmp    c001bb9e <sysCallGetEnv(regs*)+0x28>
c001bbae:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bbb2:	52                   	push   edx
c001bbb3:	57                   	push   edi
c001bbb4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bbba:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bbbd:	50                   	push   eax
c001bbbe:	e8 04 e5 ff ff       	call   c001a0c7 <Krnl::getProcessEnvPair(Process*, int)>
c001bbc3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bbc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbca:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bbce:	83 c4 0c             	add    esp,0xc
c001bbd1:	85 c9                	test   ecx,ecx
c001bbd3:	75 23                	jne    c001bbf8 <sysCallGetEnv(regs*)+0x82>
c001bbd5:	83 ec 0c             	sub    esp,0xc
c001bbd8:	50                   	push   eax
c001bbd9:	e8 b6 4b fe ff       	call   c0000794 <strlen>
c001bbde:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bbe1:	89 c3                	mov    ebx,eax
c001bbe3:	e8 ac 4b fe ff       	call   c0000794 <strlen>
c001bbe8:	83 c4 10             	add    esp,0x10
c001bbeb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bbef:	83 c4 10             	add    esp,0x10
c001bbf2:	31 d2                	xor    edx,edx
c001bbf4:	5b                   	pop    ebx
c001bbf5:	5e                   	pop    esi
c001bbf6:	5f                   	pop    edi
c001bbf7:	c3                   	ret    
c001bbf8:	83 ec 08             	sub    esp,0x8
c001bbfb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bbfe:	50                   	push   eax
c001bbff:	56                   	push   esi
c001bc00:	e8 2f 4c fe ff       	call   c0000834 <strcpy>
c001bc05:	58                   	pop    eax
c001bc06:	5a                   	pop    edx
c001bc07:	68 87 b9 02 c0       	push   0xc002b987
c001bc0c:	56                   	push   esi
c001bc0d:	e8 62 4d fe ff       	call   c0000974 <strcat>
c001bc12:	59                   	pop    ecx
c001bc13:	5b                   	pop    ebx
c001bc14:	57                   	push   edi
c001bc15:	56                   	push   esi
c001bc16:	e8 59 4d fe ff       	call   c0000974 <strcat>
c001bc1b:	83 c4 10             	add    esp,0x10
c001bc1e:	e9 7b ff ff ff       	jmp    c001bb9e <sysCallGetEnv(regs*)+0x28>

c001bc23 <sysAppSettings(regs*)>:
c001bc23:	53                   	push   ebx
c001bc24:	83 ec 08             	sub    esp,0x8
c001bc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bc2e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bc34:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bc39:	66 3d c0 09          	cmp    ax,0x9c0
c001bc3d:	75 2f                	jne    c001bc6e <sysAppSettings(regs*)+0x4b>
c001bc3f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bc45:	83 e0 1f             	and    eax,0x1f
c001bc48:	3c 01                	cmp    al,0x1
c001bc4a:	74 2e                	je     c001bc7a <sysAppSettings(regs*)+0x57>
c001bc4c:	3c 07                	cmp    al,0x7
c001bc4e:	0f 84 bd 00 00 00    	je     c001bd11 <sysAppSettings(regs*)+0xee>
c001bc54:	84 c0                	test   al,al
c001bc56:	0f 84 dc 00 00 00    	je     c001bd38 <sysAppSettings(regs*)+0x115>
c001bc5c:	3c 08                	cmp    al,0x8
c001bc5e:	74 6d                	je     c001bccd <sysAppSettings(regs*)+0xaa>
c001bc60:	0f b6 c0             	movzx  eax,al
c001bc63:	83 c4 08             	add    esp,0x8
c001bc66:	05 e8 03 00 00       	add    eax,0x3e8
c001bc6b:	5b                   	pop    ebx
c001bc6c:	99                   	cdq    
c001bc6d:	c3                   	ret    
c001bc6e:	b8 01 00 00 00       	mov    eax,0x1
c001bc73:	31 d2                	xor    edx,edx
c001bc75:	83 c4 08             	add    esp,0x8
c001bc78:	5b                   	pop    ebx
c001bc79:	c3                   	ret    
c001bc7a:	51                   	push   ecx
c001bc7b:	68 00 01 00 00       	push   0x100
c001bc80:	6a 00                	push   0x0
c001bc82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc8a:	83 c0 0c             	add    eax,0xc
c001bc8d:	50                   	push   eax
c001bc8e:	e8 e5 4a fe ff       	call   c0000778 <memset>
c001bc93:	83 c4 0c             	add    esp,0xc
c001bc96:	68 ff 00 00 00       	push   0xff
c001bc9b:	53                   	push   ebx
c001bc9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bca4:	83 c0 0c             	add    eax,0xc
c001bca7:	50                   	push   eax
c001bca8:	e8 97 4a fe ff       	call   c0000744 <memcpy>
c001bcad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb2:	5b                   	pop    ebx
c001bcb3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcb6:	5a                   	pop    edx
c001bcb7:	8d 50 0c             	lea    edx,[eax+0xc]
c001bcba:	52                   	push   edx
c001bcbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bcc1:	e8 7e 4e ff ff       	call   c0010b44 <VgaText::setTitle(char*)>
c001bcc6:	83 c4 10             	add    esp,0x10
c001bcc9:	31 c0                	xor    eax,eax
c001bccb:	eb a6                	jmp    c001bc73 <sysAppSettings(regs*)+0x50>
c001bccd:	83 ec 08             	sub    esp,0x8
c001bcd0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001bcd6:	83 e0 0f             	and    eax,0xf
c001bcd9:	50                   	push   eax
c001bcda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcdf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bce2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bce8:	e8 47 4e ff ff       	call   c0010b34 <VgaText::setTitleColour(VgaColour)>
c001bced:	58                   	pop    eax
c001bcee:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001bcf4:	5a                   	pop    edx
c001bcf5:	c1 e8 04             	shr    eax,0x4
c001bcf8:	83 e0 0f             	and    eax,0xf
c001bcfb:	50                   	push   eax
c001bcfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd01:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bd0a:	e8 15 4e ff ff       	call   c0010b24 <VgaText::setTitleTextColour(VgaColour)>
c001bd0f:	eb b5                	jmp    c001bcc6 <sysAppSettings(regs*)+0xa3>
c001bd11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd19:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bd1f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001bd25:	c0 e8 06             	shr    al,0x6
c001bd28:	83 e0 01             	and    eax,0x1
c001bd2b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001bd31:	31 c0                	xor    eax,eax
c001bd33:	e9 3b ff ff ff       	jmp    c001bc73 <sysAppSettings(regs*)+0x50>
c001bd38:	b8 02 00 00 00       	mov    eax,0x2
c001bd3d:	e9 31 ff ff ff       	jmp    c001bc73 <sysAppSettings(regs*)+0x50>

c001bd42 <sysSetFatAttrib(regs*)>:
c001bd42:	57                   	push   edi
c001bd43:	56                   	push   esi
c001bd44:	53                   	push   ebx
c001bd45:	83 ec 1c             	sub    esp,0x1c
c001bd48:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bd4c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bd4f:	68 14 01 00 00       	push   0x114
c001bd54:	e8 e7 3a ff ff       	call   c000f840 <malloc>
c001bd59:	83 c4 0c             	add    esp,0xc
c001bd5c:	89 c3                	mov    ebx,eax
c001bd5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd63:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd66:	57                   	push   edi
c001bd67:	53                   	push   ebx
c001bd68:	e8 fb 72 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001bd6d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bd70:	83 c4 0c             	add    esp,0xc
c001bd73:	0f b6 d4             	movzx  edx,ah
c001bd76:	0f b6 c0             	movzx  eax,al
c001bd79:	52                   	push   edx
c001bd7a:	50                   	push   eax
c001bd7b:	53                   	push   ebx
c001bd7c:	e8 5d 75 ff ff       	call   c00132de <File::chfatattr(unsigned char, unsigned char)>
c001bd81:	83 c4 10             	add    esp,0x10
c001bd84:	85 db                	test   ebx,ebx
c001bd86:	74 14                	je     c001bd9c <sysSetFatAttrib(regs*)+0x5a>
c001bd88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd8c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd8e:	83 ec 0c             	sub    esp,0xc
c001bd91:	53                   	push   ebx
c001bd92:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd95:	83 c4 10             	add    esp,0x10
c001bd98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd9c:	85 c0                	test   eax,eax
c001bd9e:	0f 95 c0             	setne  al
c001bda1:	31 d2                	xor    edx,edx
c001bda3:	0f b6 c0             	movzx  eax,al
c001bda6:	f7 d8                	neg    eax
c001bda8:	83 d2 00             	adc    edx,0x0
c001bdab:	83 c4 10             	add    esp,0x10
c001bdae:	f7 da                	neg    edx
c001bdb0:	5b                   	pop    ebx
c001bdb1:	5e                   	pop    esi
c001bdb2:	5f                   	pop    edi
c001bdb3:	c3                   	ret    

c001bdb4 <sysPipe(regs*)>:
c001bdb4:	57                   	push   edi
c001bdb5:	56                   	push   esi
c001bdb6:	53                   	push   ebx
c001bdb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdbb:	83 ec 0c             	sub    esp,0xc
c001bdbe:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bdc1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bdc4:	6a 20                	push   0x20
c001bdc6:	e8 75 3a ff ff       	call   c000f840 <malloc>
c001bdcb:	89 c3                	mov    ebx,eax
c001bdcd:	58                   	pop    eax
c001bdce:	5a                   	pop    edx
c001bdcf:	68 00 50 00 00       	push   0x5000
c001bdd4:	53                   	push   ebx
c001bdd5:	e8 9a 46 ff ff       	call   c0010474 <Pipe::Pipe(int)>
c001bdda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bddd:	e8 f2 58 ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001bde2:	89 07                	mov    DWORD PTR [edi],eax
c001bde4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bde7:	e8 e8 58 ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001bdec:	83 c4 10             	add    esp,0x10
c001bdef:	89 06                	mov    DWORD PTR [esi],eax
c001bdf1:	31 d2                	xor    edx,edx
c001bdf3:	5b                   	pop    ebx
c001bdf4:	31 c0                	xor    eax,eax
c001bdf6:	5e                   	pop    esi
c001bdf7:	5f                   	pop    edi
c001bdf8:	c3                   	ret    

c001bdf9 <sysGetUnixTime(regs*)>:
c001bdf9:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001bdfe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001be04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be08:	e9 45 7c ff ff       	jmp    c0013a52 <Clock::timeInSecondsLocal()>

c001be0d <string_ends_with(char const*, char const*)>:
c001be0d:	57                   	push   edi
c001be0e:	56                   	push   esi
c001be0f:	53                   	push   ebx
c001be10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be14:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001be18:	83 ec 0c             	sub    esp,0xc
c001be1b:	53                   	push   ebx
c001be1c:	e8 73 49 fe ff       	call   c0000794 <strlen>
c001be21:	89 3c 24             	mov    DWORD PTR [esp],edi
c001be24:	89 c6                	mov    esi,eax
c001be26:	e8 69 49 fe ff       	call   c0000794 <strlen>
c001be2b:	83 c4 10             	add    esp,0x10
c001be2e:	39 c6                	cmp    esi,eax
c001be30:	7d 06                	jge    c001be38 <string_ends_with(char const*, char const*)+0x2b>
c001be32:	5b                   	pop    ebx
c001be33:	31 c0                	xor    eax,eax
c001be35:	5e                   	pop    esi
c001be36:	5f                   	pop    edi
c001be37:	c3                   	ret    
c001be38:	83 ec 08             	sub    esp,0x8
c001be3b:	29 c6                	sub    esi,eax
c001be3d:	57                   	push   edi
c001be3e:	01 f3                	add    ebx,esi
c001be40:	53                   	push   ebx
c001be41:	e8 7a 4a fe ff       	call   c00008c0 <strcmp>
c001be46:	83 c4 10             	add    esp,0x10
c001be49:	85 c0                	test   eax,eax
c001be4b:	5b                   	pop    ebx
c001be4c:	0f 94 c0             	sete   al
c001be4f:	5e                   	pop    esi
c001be50:	0f b6 c0             	movzx  eax,al
c001be53:	5f                   	pop    edi
c001be54:	c3                   	ret    

c001be55 <sysCallOpen(regs*)>:
c001be55:	56                   	push   esi
c001be56:	53                   	push   ebx
c001be57:	81 ec 04 01 00 00    	sub    esp,0x104
c001be5d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001be64:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001be67:	85 c9                	test   ecx,ecx
c001be69:	0f 84 b3 00 00 00    	je     c001bf22 <sysCallOpen(regs*)+0xcd>
c001be6f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001be72:	85 c0                	test   eax,eax
c001be74:	0f 84 a8 00 00 00    	je     c001bf22 <sysCallOpen(regs*)+0xcd>
c001be7a:	52                   	push   edx
c001be7b:	68 89 b9 02 c0       	push   0xc002b989
c001be80:	50                   	push   eax
c001be81:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001be85:	56                   	push   esi
c001be86:	e8 33 70 ff ff       	call   c0012ebe <Fs::standardiseFiles(char*, char const*, char const*)>
c001be8b:	89 34 24             	mov    DWORD PTR [esp],esi
c001be8e:	e8 01 49 fe ff       	call   c0000794 <strlen>
c001be93:	83 c4 10             	add    esp,0x10
c001be96:	48                   	dec    eax
c001be97:	74 1d                	je     c001beb6 <sysCallOpen(regs*)+0x61>
c001be99:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001be9c:	eb 0f                	jmp    c001bead <sysCallOpen(regs*)+0x58>
c001be9e:	80 fa 3a             	cmp    dl,0x3a
c001bea1:	74 0f                	je     c001beb2 <sysCallOpen(regs*)+0x5d>
c001bea3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bea7:	48                   	dec    eax
c001bea8:	74 0c                	je     c001beb6 <sysCallOpen(regs*)+0x61>
c001beaa:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bead:	80 fa 2e             	cmp    dl,0x2e
c001beb0:	75 ec                	jne    c001be9e <sysCallOpen(regs*)+0x49>
c001beb2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001beb6:	83 ec 08             	sub    esp,0x8
c001beb9:	68 8d b9 02 c0       	push   0xc002b98d
c001bebe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bec1:	e8 47 ff ff ff       	call   c001be0d <string_ends_with(char const*, char const*)>
c001bec6:	83 c4 10             	add    esp,0x10
c001bec9:	85 c0                	test   eax,eax
c001becb:	75 17                	jne    c001bee4 <sysCallOpen(regs*)+0x8f>
c001becd:	83 ec 08             	sub    esp,0x8
c001bed0:	68 ae b9 02 c0       	push   0xc002b9ae
c001bed5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bed8:	e8 30 ff ff ff       	call   c001be0d <string_ends_with(char const*, char const*)>
c001bedd:	83 c4 10             	add    esp,0x10
c001bee0:	85 c0                	test   eax,eax
c001bee2:	74 51                	je     c001bf35 <sysCallOpen(regs*)+0xe0>
c001bee4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bee7:	83 ec 08             	sub    esp,0x8
c001beea:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bef0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bef7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001befa:	ff 30                	push   DWORD PTR [eax]
c001befc:	68 92 b9 02 c0       	push   0xc002b992
c001bf01:	e8 09 6c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001bf06:	c7 04 24 a1 b9 02 c0 	mov    DWORD PTR [esp],0xc002b9a1
c001bf0d:	e8 fd 6b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001bf12:	83 c4 10             	add    esp,0x10
c001bf15:	81 c4 04 01 00 00    	add    esp,0x104
c001bf1b:	31 c0                	xor    eax,eax
c001bf1d:	31 d2                	xor    edx,edx
c001bf1f:	5b                   	pop    ebx
c001bf20:	5e                   	pop    esi
c001bf21:	c3                   	ret    
c001bf22:	81 c4 04 01 00 00    	add    esp,0x104
c001bf28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf32:	5b                   	pop    ebx
c001bf33:	5e                   	pop    esi
c001bf34:	c3                   	ret    
c001bf35:	83 ec 08             	sub    esp,0x8
c001bf38:	68 8e b9 02 c0       	push   0xc002b98e
c001bf3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf40:	e8 7b 49 fe ff       	call   c00008c0 <strcmp>
c001bf45:	83 c4 10             	add    esp,0x10
c001bf48:	85 c0                	test   eax,eax
c001bf4a:	74 98                	je     c001bee4 <sysCallOpen(regs*)+0x8f>
c001bf4c:	83 ec 08             	sub    esp,0x8
c001bf4f:	68 8d b9 02 c0       	push   0xc002b98d
c001bf54:	56                   	push   esi
c001bf55:	e8 b3 fe ff ff       	call   c001be0d <string_ends_with(char const*, char const*)>
c001bf5a:	83 c4 10             	add    esp,0x10
c001bf5d:	85 c0                	test   eax,eax
c001bf5f:	75 83                	jne    c001bee4 <sysCallOpen(regs*)+0x8f>
c001bf61:	83 ec 08             	sub    esp,0x8
c001bf64:	68 b3 b9 02 c0       	push   0xc002b9b3
c001bf69:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf6c:	e8 9c fe ff ff       	call   c001be0d <string_ends_with(char const*, char const*)>
c001bf71:	83 c4 10             	add    esp,0x10
c001bf74:	85 c0                	test   eax,eax
c001bf76:	0f 85 d9 00 00 00    	jne    c001c055 <sysCallOpen(regs*)+0x200>
c001bf7c:	83 ec 08             	sub    esp,0x8
c001bf7f:	68 b8 b9 02 c0       	push   0xc002b9b8
c001bf84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf87:	e8 81 fe ff ff       	call   c001be0d <string_ends_with(char const*, char const*)>
c001bf8c:	83 c4 10             	add    esp,0x10
c001bf8f:	85 c0                	test   eax,eax
c001bf91:	0f 85 be 00 00 00    	jne    c001c055 <sysCallOpen(regs*)+0x200>
c001bf97:	83 ec 08             	sub    esp,0x8
c001bf9a:	68 b4 b9 02 c0       	push   0xc002b9b4
c001bf9f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfa2:	e8 19 49 fe ff       	call   c00008c0 <strcmp>
c001bfa7:	83 c4 10             	add    esp,0x10
c001bfaa:	85 c0                	test   eax,eax
c001bfac:	0f 84 a3 00 00 00    	je     c001c055 <sysCallOpen(regs*)+0x200>
c001bfb2:	83 ec 08             	sub    esp,0x8
c001bfb5:	68 b3 b9 02 c0       	push   0xc002b9b3
c001bfba:	56                   	push   esi
c001bfbb:	e8 4d fe ff ff       	call   c001be0d <string_ends_with(char const*, char const*)>
c001bfc0:	83 c4 10             	add    esp,0x10
c001bfc3:	85 c0                	test   eax,eax
c001bfc5:	0f 85 8a 00 00 00    	jne    c001c055 <sysCallOpen(regs*)+0x200>
c001bfcb:	83 ec 0c             	sub    esp,0xc
c001bfce:	68 14 01 00 00       	push   0x114
c001bfd3:	e8 68 38 ff ff       	call   c000f840 <malloc>
c001bfd8:	83 c4 0c             	add    esp,0xc
c001bfdb:	89 c6                	mov    esi,eax
c001bfdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfe2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfe5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfe8:	56                   	push   esi
c001bfe9:	e8 7a 70 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001bfee:	83 c4 10             	add    esp,0x10
c001bff1:	85 f6                	test   esi,esi
c001bff3:	0f 84 29 ff ff ff    	je     c001bf22 <sysCallOpen(regs*)+0xcd>
c001bff9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bffc:	0f b6 c2             	movzx  eax,dl
c001bfff:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c002:	89 d0                	mov    eax,edx
c001c004:	83 e0 01             	and    eax,0x1
c001c007:	f6 c2 02             	test   dl,0x2
c001c00a:	74 03                	je     c001c00f <sysCallOpen(regs*)+0x1ba>
c001c00c:	83 c8 02             	or     eax,0x2
c001c00f:	f6 c2 04             	test   dl,0x4
c001c012:	74 03                	je     c001c017 <sysCallOpen(regs*)+0x1c2>
c001c014:	83 c8 04             	or     eax,0x4
c001c017:	f6 c2 08             	test   dl,0x8
c001c01a:	74 03                	je     c001c01f <sysCallOpen(regs*)+0x1ca>
c001c01c:	83 c8 0a             	or     eax,0xa
c001c01f:	83 e2 10             	and    edx,0x10
c001c022:	74 03                	je     c001c027 <sysCallOpen(regs*)+0x1d2>
c001c024:	83 c8 12             	or     eax,0x12
c001c027:	83 ec 08             	sub    esp,0x8
c001c02a:	50                   	push   eax
c001c02b:	56                   	push   esi
c001c02c:	e8 9b 70 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001c031:	83 c4 10             	add    esp,0x10
c001c034:	85 c0                	test   eax,eax
c001c036:	0f 85 e6 fe ff ff    	jne    c001bf22 <sysCallOpen(regs*)+0xcd>
c001c03c:	83 ec 0c             	sub    esp,0xc
c001c03f:	56                   	push   esi
c001c040:	e8 8f 56 ff ff       	call   c00116d4 <UnixFile::getFileDescriptor()>
c001c045:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c048:	89 02                	mov    DWORD PTR [edx],eax
c001c04a:	c1 f8 1f             	sar    eax,0x1f
c001c04d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c050:	e9 bd fe ff ff       	jmp    c001bf12 <sysCallOpen(regs*)+0xbd>
c001c055:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c058:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c05e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c065:	e9 ab fe ff ff       	jmp    c001bf15 <sysCallOpen(regs*)+0xc0>

c001c06a <Sys::loadSyscalls()>:
c001c06a:	c7 05 60 09 03 c0 20 b2 01 c0 	mov    DWORD PTR ds:0xc0030960,0xc001b220
c001c074:	c7 05 64 09 03 c0 20 ae 01 c0 	mov    DWORD PTR ds:0xc0030964,0xc001ae20
c001c07e:	c7 05 68 09 03 c0 73 af 01 c0 	mov    DWORD PTR ds:0xc0030968,0xc001af73
c001c088:	c7 05 6c 09 03 c0 56 b1 01 c0 	mov    DWORD PTR ds:0xc003096c,0xc001b156
c001c092:	c7 05 70 09 03 c0 0b af 01 c0 	mov    DWORD PTR ds:0xc0030970,0xc001af0b
c001c09c:	c7 05 74 09 03 c0 57 ae 01 c0 	mov    DWORD PTR ds:0xc0030974,0xc001ae57
c001c0a6:	c7 05 78 09 03 c0 38 ae 01 c0 	mov    DWORD PTR ds:0xc0030978,0xc001ae38
c001c0b0:	c7 05 7c 09 03 c0 c8 af 01 c0 	mov    DWORD PTR ds:0xc003097c,0xc001afc8
c001c0ba:	c7 05 84 09 03 c0 32 b7 01 c0 	mov    DWORD PTR ds:0xc0030984,0xc001b732
c001c0c4:	c7 05 80 09 03 c0 55 be 01 c0 	mov    DWORD PTR ds:0xc0030980,0xc001be55
c001c0ce:	c7 05 88 09 03 c0 ba b7 01 c0 	mov    DWORD PTR ds:0xc0030988,0xc001b7ba
c001c0d8:	c7 05 8c 09 03 c0 21 b4 01 c0 	mov    DWORD PTR ds:0xc003098c,0xc001b421
c001c0e2:	c7 05 90 09 03 c0 5b b2 01 c0 	mov    DWORD PTR ds:0xc0030990,0xc001b25b
c001c0ec:	c7 05 94 09 03 c0 60 b2 01 c0 	mov    DWORD PTR ds:0xc0030994,0xc001b260
c001c0f6:	c7 05 98 09 03 c0 95 b8 01 c0 	mov    DWORD PTR ds:0xc0030998,0xc001b895
c001c100:	c7 05 9c 09 03 c0 2f b8 01 c0 	mov    DWORD PTR ds:0xc003099c,0xc001b82f
c001c10a:	c7 05 a0 09 03 c0 09 b5 01 c0 	mov    DWORD PTR ds:0xc00309a0,0xc001b509
c001c114:	c7 05 a4 09 03 c0 72 b5 01 c0 	mov    DWORD PTR ds:0xc00309a4,0xc001b572
c001c11e:	c7 05 a8 09 03 c0 ef b5 01 c0 	mov    DWORD PTR ds:0xc00309a8,0xc001b5ef
c001c128:	c7 05 ac 09 03 c0 65 b2 01 c0 	mov    DWORD PTR ds:0xc00309ac,0xc001b265
c001c132:	c7 05 b0 09 03 c0 05 b9 01 c0 	mov    DWORD PTR ds:0xc00309b0,0xc001b905
c001c13c:	c7 05 b4 09 03 c0 1f b9 01 c0 	mov    DWORD PTR ds:0xc00309b4,0xc001b91f
c001c146:	c7 05 b8 09 03 c0 1f b9 01 c0 	mov    DWORD PTR ds:0xc00309b8,0xc001b91f
c001c150:	c7 05 bc 09 03 c0 60 b9 01 c0 	mov    DWORD PTR ds:0xc00309bc,0xc001b960
c001c15a:	c7 05 c0 09 03 c0 c4 b9 01 c0 	mov    DWORD PTR ds:0xc00309c0,0xc001b9c4
c001c164:	c7 05 c4 09 03 c0 6f b2 01 c0 	mov    DWORD PTR ds:0xc00309c4,0xc001b26f
c001c16e:	c7 05 c8 09 03 c0 28 ba 01 c0 	mov    DWORD PTR ds:0xc00309c8,0xc001ba28
c001c178:	c7 05 cc 09 03 c0 de b3 01 c0 	mov    DWORD PTR ds:0xc00309cc,0xc001b3de
c001c182:	c7 05 d0 09 03 c0 74 ba 01 c0 	mov    DWORD PTR ds:0xc00309d0,0xc001ba74
c001c18c:	c7 05 d4 09 03 c0 af b4 01 c0 	mov    DWORD PTR ds:0xc00309d4,0xc001b4af
c001c196:	c7 05 d8 09 03 c0 f7 ba 01 c0 	mov    DWORD PTR ds:0xc00309d8,0xc001baf7
c001c1a0:	c7 05 dc 09 03 c0 72 b6 01 c0 	mov    DWORD PTR ds:0xc00309dc,0xc001b672
c001c1aa:	c7 05 e0 09 03 c0 1e bb 01 c0 	mov    DWORD PTR ds:0xc00309e0,0xc001bb1e
c001c1b4:	c7 05 e4 09 03 c0 76 bb 01 c0 	mov    DWORD PTR ds:0xc00309e4,0xc001bb76
c001c1be:	c7 05 e8 09 03 c0 23 bc 01 c0 	mov    DWORD PTR ds:0xc00309e8,0xc001bc23
c001c1c8:	c7 05 ec 09 03 c0 7f b2 01 c0 	mov    DWORD PTR ds:0xc00309ec,0xc001b27f
c001c1d2:	c7 05 f0 09 03 c0 e9 b2 01 c0 	mov    DWORD PTR ds:0xc00309f0,0xc001b2e9
c001c1dc:	c7 05 f4 09 03 c0 2f b3 01 c0 	mov    DWORD PTR ds:0xc00309f4,0xc001b32f
c001c1e6:	c7 05 f8 09 03 c0 42 bd 01 c0 	mov    DWORD PTR ds:0xc00309f8,0xc001bd42
c001c1f0:	c7 05 fc 09 03 c0 3a b9 01 c0 	mov    DWORD PTR ds:0xc00309fc,0xc001b93a
c001c1fa:	c7 05 00 0a 03 c0 80 b3 01 c0 	mov    DWORD PTR ds:0xc0030a00,0xc001b380
c001c204:	c7 05 04 0a 03 c0 b4 bd 01 c0 	mov    DWORD PTR ds:0xc0030a04,0xc001bdb4
c001c20e:	c7 05 08 0a 03 c0 f9 bd 01 c0 	mov    DWORD PTR ds:0xc0030a08,0xc001bdf9
c001c218:	c7 05 0c 0a 03 c0 63 ae 01 c0 	mov    DWORD PTR ds:0xc0030a0c,0xc001ae63
c001c222:	c7 05 10 0a 03 c0 e4 af 01 c0 	mov    DWORD PTR ds:0xc0030a10,0xc001afe4
c001c22c:	c7 05 14 0a 03 c0 0c b1 01 c0 	mov    DWORD PTR ds:0xc0030a14,0xc001b10c
c001c236:	c7 05 18 0a 03 c0 ea ad 01 c0 	mov    DWORD PTR ds:0xc0030a18,0xc001adea
c001c240:	c7 05 1c 0a 03 c0 be b1 01 c0 	mov    DWORD PTR ds:0xc0030a1c,0xc001b1be
c001c24a:	c3                   	ret    

c001c24b <Sys::systemCall(regs*, void*)>:
c001c24b:	53                   	push   ebx
c001c24c:	83 ec 08             	sub    esp,0x8
c001c24f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c253:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c256:	83 f8 7f             	cmp    eax,0x7f
c001c259:	77 16                	ja     c001c271 <Sys::systemCall(regs*, void*)+0x26>
c001c25b:	8b 14 85 60 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf6a0]
c001c262:	85 d2                	test   edx,edx
c001c264:	74 0b                	je     c001c271 <Sys::systemCall(regs*, void*)+0x26>
c001c266:	83 ec 0c             	sub    esp,0xc
c001c269:	53                   	push   ebx
c001c26a:	ff d2                	call   edx
c001c26c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c26f:	eb 0d                	jmp    c001c27e <Sys::systemCall(regs*, void*)+0x33>
c001c271:	52                   	push   edx
c001c272:	52                   	push   edx
c001c273:	50                   	push   eax
c001c274:	68 bd b9 02 c0       	push   0xc002b9bd
c001c279:	e8 91 68 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001c27e:	83 c4 10             	add    esp,0x10
c001c281:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c286:	31 d2                	xor    edx,edx
c001c288:	83 c4 08             	add    esp,0x8
c001c28b:	5b                   	pop    ebx
c001c28c:	c3                   	ret    

c001c28d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c28d:	55                   	push   ebp
c001c28e:	89 e5                	mov    ebp,esp
c001c290:	57                   	push   edi
c001c291:	56                   	push   esi
c001c292:	53                   	push   ebx
c001c293:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c299:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001c29c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001c29f:	85 c0                	test   eax,eax
c001c2a1:	0f 95 c1             	setne  cl
c001c2a4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c2a8:	0f 94 c2             	sete   dl
c001c2ab:	84 d1                	test   cl,dl
c001c2ad:	74 26                	je     c001c2d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c2af:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001c2b6:	74 1d                	je     c001c2d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c2b8:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001c2bb:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001c2c1:	89 d6                	mov    esi,edx
c001c2c3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001c2c9:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001c2cf:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c2d2:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001c2d5:	83 ec 0c             	sub    esp,0xc
c001c2d8:	05 ff 0f 00 00       	add    eax,0xfff
c001c2dd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c2e0:	6a 01                	push   0x1
c001c2e2:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001c2e8:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001c2ee:	e8 2c 58 ff ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c001c2f3:	83 c4 10             	add    esp,0x10
c001c2f6:	89 c6                	mov    esi,eax
c001c2f8:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001c2fe:	0f 86 21 01 00 00    	jbe    c001c425 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001c304:	c1 eb 0c             	shr    ebx,0xc
c001c307:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001c311:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001c317:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c31a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c31d:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001c323:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001c326:	29 d8                	sub    eax,ebx
c001c328:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001c32e:	0f 83 f4 00 00 00    	jae    c001c428 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001c334:	83 ec 0c             	sub    esp,0xc
c001c337:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001c33d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001c340:	3d 00 10 00 00       	cmp    eax,0x1000
c001c345:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001c347:	52                   	push   edx
c001c348:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001c34e:	52                   	push   edx
c001c34f:	76 05                	jbe    c001c356 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001c351:	b8 00 10 00 00       	mov    eax,0x1000
c001c356:	31 d2                	xor    edx,edx
c001c358:	52                   	push   edx
c001c359:	50                   	push   eax
c001c35a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001c35d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c360:	83 c4 20             	add    esp,0x20
c001c363:	85 c0                	test   eax,eax
c001c365:	74 1f                	je     c001c386 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001c367:	51                   	push   ecx
c001c368:	51                   	push   ecx
c001c369:	50                   	push   eax
c001c36a:	68 d1 b9 02 c0       	push   0xc002b9d1
c001c36f:	e8 9b 67 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001c374:	89 34 24             	mov    DWORD PTR [esp],esi
c001c377:	e8 07 5b ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c001c37c:	83 c4 10             	add    esp,0x10
c001c37f:	31 c0                	xor    eax,eax
c001c381:	e9 7c 01 00 00       	jmp    c001c502 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001c386:	e8 fb 14 00 00       	call   c001d886 <lockScheduler()>
c001c38b:	e8 4d 3b ff ff       	call   c000fedd <Phys::allocatePage()>
c001c390:	6a 07                	push   0x7
c001c392:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001c398:	56                   	push   esi
c001c399:	50                   	push   eax
c001c39a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3a0:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c3a3:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c3a9:	e8 3c 5e ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c001c3ae:	83 c4 0c             	add    esp,0xc
c001c3b1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c3b7:	6a 00                	push   0x0
c001c3b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3bf:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c3c2:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c3c8:	e8 87 5c ff ff       	call   c0012054 <VAS::mapOtherVASIn(bool, VAS*)>
c001c3cd:	58                   	pop    eax
c001c3ce:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c3d4:	5a                   	pop    edx
c001c3d5:	68 07 04 00 00       	push   0x407
c001c3da:	53                   	push   ebx
c001c3db:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c3e1:	50                   	push   eax
c001c3e2:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c3e8:	6a 00                	push   0x0
c001c3ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c3f2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c3f8:	e8 a7 61 ff ff       	call   c00125a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c3fd:	83 c4 1c             	add    esp,0x1c
c001c400:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001c406:	68 00 10 00 00       	push   0x1000
c001c40b:	50                   	push   eax
c001c40c:	56                   	push   esi
c001c40d:	e8 32 43 fe ff       	call   c0000744 <memcpy>
c001c412:	e8 71 14 00 00       	call   c001d888 <unlockScheduler()>
c001c417:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001c41d:	83 c4 10             	add    esp,0x10
c001c420:	e9 f5 fe ff ff       	jmp    c001c31a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001c425:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c428:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001c432:	0f 86 bc 00 00 00    	jbe    c001c4f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001c438:	e8 49 14 00 00       	call   c001d886 <lockScheduler()>
c001c43d:	51                   	push   ecx
c001c43e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c444:	6a 00                	push   0x0
c001c446:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c44b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c44e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c454:	e8 fb 5b ff ff       	call   c0012054 <VAS::mapOtherVASIn(bool, VAS*)>
c001c459:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	c1 e8 0c             	shr    eax,0xc
c001c465:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001c46f:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001c475:	e8 63 3a ff ff       	call   c000fedd <Phys::allocatePage()>
c001c47a:	6a 07                	push   0x7
c001c47c:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001c482:	56                   	push   esi
c001c483:	50                   	push   eax
c001c484:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c48a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c48d:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001c493:	e8 52 5d ff ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c001c498:	58                   	pop    eax
c001c499:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001c49f:	5a                   	pop    edx
c001c4a0:	68 07 04 00 00       	push   0x407
c001c4a5:	53                   	push   ebx
c001c4a6:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c4ac:	50                   	push   eax
c001c4ad:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c4b3:	6a 00                	push   0x0
c001c4b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4bd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c4c3:	e8 dc 60 ff ff       	call   c00125a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c4c8:	83 c4 1c             	add    esp,0x1c
c001c4cb:	68 00 10 00 00       	push   0x1000
c001c4d0:	6a 00                	push   0x0
c001c4d2:	56                   	push   esi
c001c4d3:	e8 a0 42 fe ff       	call   c0000778 <memset>
c001c4d8:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001c4de:	83 c4 10             	add    esp,0x10
c001c4e1:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001c4e7:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001c4ed:	77 86                	ja     c001c475 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001c4ef:	e8 94 13 00 00       	call   c001d888 <unlockScheduler()>
c001c4f4:	83 ec 0c             	sub    esp,0xc
c001c4f7:	56                   	push   esi
c001c4f8:	e8 86 59 ff ff       	call   c0011e83 <Virt::freeKernelVirtualPages(unsigned long)>
c001c4fd:	83 c4 10             	add    esp,0x10
c001c500:	b0 01                	mov    al,0x1
c001c502:	8d 65 f4             	lea    esp,[ebp-0xc]
c001c505:	5b                   	pop    ebx
c001c506:	5e                   	pop    esi
c001c507:	5f                   	pop    edi
c001c508:	5d                   	pop    ebp
c001c509:	c3                   	ret    

c001c50a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c50a:	55                   	push   ebp
c001c50b:	57                   	push   edi
c001c50c:	56                   	push   esi
c001c50d:	53                   	push   ebx
c001c50e:	83 ec 48             	sub    esp,0x48
c001c511:	68 14 01 00 00       	push   0x114
c001c516:	e8 25 33 ff ff       	call   c000f840 <malloc>
c001c51b:	83 c4 0c             	add    esp,0xc
c001c51e:	89 c6                	mov    esi,eax
c001c520:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c524:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c528:	50                   	push   eax
c001c529:	e8 3a 6b ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001c52e:	58                   	pop    eax
c001c52f:	5a                   	pop    edx
c001c530:	6a 01                	push   0x1
c001c532:	56                   	push   esi
c001c533:	e8 94 6b ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001c538:	83 c4 10             	add    esp,0x10
c001c53b:	85 c0                	test   eax,eax
c001c53d:	0f 85 47 01 00 00    	jne    c001c68a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c543:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c54b:	83 ec 0c             	sub    esp,0xc
c001c54e:	6a 34                	push   0x34
c001c550:	e8 eb 32 ff ff       	call   c000f840 <malloc>
c001c555:	89 c3                	mov    ebx,eax
c001c557:	58                   	pop    eax
c001c558:	8b 06                	mov    eax,DWORD PTR [esi]
c001c55a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c55e:	57                   	push   edi
c001c55f:	53                   	push   ebx
c001c560:	6a 00                	push   0x0
c001c562:	6a 34                	push   0x34
c001c564:	56                   	push   esi
c001c565:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c568:	83 c4 20             	add    esp,0x20
c001c56b:	85 c0                	test   eax,eax
c001c56d:	0f 85 17 01 00 00    	jne    c001c68a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c573:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c579:	0f 85 0b 01 00 00    	jne    c001c68a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c57f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c582:	85 c0                	test   eax,eax
c001c584:	0f 84 00 01 00 00    	je     c001c68a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c58a:	31 d2                	xor    edx,edx
c001c58c:	55                   	push   ebp
c001c58d:	52                   	push   edx
c001c58e:	50                   	push   eax
c001c58f:	56                   	push   esi
c001c590:	e8 f5 6b ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c595:	83 c4 10             	add    esp,0x10
c001c598:	85 c0                	test   eax,eax
c001c59a:	0f 85 ea 00 00 00    	jne    c001c68a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c5a0:	83 ec 0c             	sub    esp,0xc
c001c5a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c5a6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c5aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c5ae:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c5b2:	0f af c2             	imul   eax,edx
c001c5b5:	50                   	push   eax
c001c5b6:	e8 85 32 ff ff       	call   c000f840 <malloc>
c001c5bb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c5bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c5c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5c8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c5cc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c5d0:	0f af c2             	imul   eax,edx
c001c5d3:	99                   	cdq    
c001c5d4:	52                   	push   edx
c001c5d5:	50                   	push   eax
c001c5d6:	56                   	push   esi
c001c5d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5da:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c5dd:	83 c4 20             	add    esp,0x20
c001c5e0:	85 c0                	test   eax,eax
c001c5e2:	0f 84 a2 00 00 00    	je     c001c68a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c5e8:	31 d2                	xor    edx,edx
c001c5ea:	51                   	push   ecx
c001c5eb:	52                   	push   edx
c001c5ec:	50                   	push   eax
c001c5ed:	56                   	push   esi
c001c5ee:	e8 97 6b ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c5f3:	83 c4 10             	add    esp,0x10
c001c5f6:	85 c0                	test   eax,eax
c001c5f8:	0f 85 8c 00 00 00    	jne    c001c68a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c5fe:	83 ec 0c             	sub    esp,0xc
c001c601:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c605:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c609:	31 ed                	xor    ebp,ebp
c001c60b:	0f af c2             	imul   eax,edx
c001c60e:	50                   	push   eax
c001c60f:	e8 2c 32 ff ff       	call   c000f840 <malloc>
c001c614:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c616:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c61a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c621:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c625:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c629:	0f af c2             	imul   eax,edx
c001c62c:	99                   	cdq    
c001c62d:	52                   	push   edx
c001c62e:	50                   	push   eax
c001c62f:	56                   	push   esi
c001c630:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c633:	83 c4 20             	add    esp,0x20
c001c636:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c63e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c642:	0f 86 80 00 00 00    	jbe    c001c6c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c648:	0f b7 fd             	movzx  edi,bp
c001c64b:	c1 e7 05             	shl    edi,0x5
c001c64e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c652:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c655:	75 6b                	jne    c001c6c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c657:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c65a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c65e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c661:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c665:	52                   	push   edx
c001c666:	31 d2                	xor    edx,edx
c001c668:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c66b:	52                   	push   edx
c001c66c:	50                   	push   eax
c001c66d:	56                   	push   esi
c001c66e:	e8 17 6b ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c673:	83 c4 10             	add    esp,0x10
c001c676:	85 c0                	test   eax,eax
c001c678:	74 17                	je     c001c691 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c67a:	83 ec 0c             	sub    esp,0xc
c001c67d:	68 fc b9 02 c0       	push   0xc002b9fc
c001c682:	e8 88 64 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001c687:	83 c4 10             	add    esp,0x10
c001c68a:	31 c0                	xor    eax,eax
c001c68c:	e9 87 00 00 00       	jmp    c001c718 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c691:	83 ec 0c             	sub    esp,0xc
c001c694:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c697:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c69a:	50                   	push   eax
c001c69b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c69f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c6a3:	56                   	push   esi
c001c6a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c6a8:	e8 e0 fb ff ff       	call   c001c28d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c6ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c6b1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c6b5:	83 c4 20             	add    esp,0x20
c001c6b8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c6bc:	73 04                	jae    c001c6c2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c6be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6c2:	45                   	inc    ebp
c001c6c3:	e9 76 ff ff ff       	jmp    c001c63e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c6c8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c6cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6d4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c6da:	83 ec 0c             	sub    esp,0xc
c001c6dd:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c6e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c6e8:	05 00 10 00 00       	add    eax,0x1000
c001c6ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6f4:	e8 57 31 ff ff       	call   c000f850 <free>
c001c6f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6fc:	e8 4f 31 ff ff       	call   c000f850 <free>
c001c701:	58                   	pop    eax
c001c702:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c706:	e8 45 31 ff ff       	call   c000f850 <free>
c001c70b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c70e:	e8 17 6a ff ff       	call   c001312a <File::close()>
c001c713:	83 c4 10             	add    esp,0x10
c001c716:	b0 01                	mov    al,0x1
c001c718:	83 c4 3c             	add    esp,0x3c
c001c71b:	5b                   	pop    ebx
c001c71c:	5e                   	pop    esi
c001c71d:	5f                   	pop    edi
c001c71e:	5d                   	pop    ebp
c001c71f:	c3                   	ret    

c001c720 <Thr::runtimeReferenceHelper()>:
c001c720:	83 ec 18             	sub    esp,0x18
c001c723:	68 04 ba 02 c0       	push   0xc002ba04
c001c728:	e8 e2 63 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001c72d:	fa                   	cli    
c001c72e:	83 c4 10             	add    esp,0x10
c001c731:	eb fe                	jmp    c001c731 <Thr::runtimeReferenceHelper()+0x11>

c001c733 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c733:	57                   	push   edi
c001c734:	56                   	push   esi
c001c735:	53                   	push   ebx
c001c736:	31 db                	xor    ebx,ebx
c001c738:	39 1d 00 13 03 c0    	cmp    DWORD PTR ds:0xc0031300,ebx
c001c73e:	7e 3c                	jle    c001c77c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c740:	8b 34 9d 80 12 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffced80]
c001c747:	31 ff                	xor    edi,edi
c001c749:	39 3c 9d 80 11 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcee80],edi
c001c750:	7e 27                	jle    c001c779 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c752:	50                   	push   eax
c001c753:	50                   	push   eax
c001c754:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c758:	8b 06                	mov    eax,DWORD PTR [esi]
c001c75a:	03 04 9d 00 12 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcee00]
c001c761:	50                   	push   eax
c001c762:	e8 59 41 fe ff       	call   c00008c0 <strcmp>
c001c767:	83 c4 10             	add    esp,0x10
c001c76a:	85 c0                	test   eax,eax
c001c76c:	75 05                	jne    c001c773 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c76e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c771:	eb 0b                	jmp    c001c77e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c773:	83 c6 10             	add    esi,0x10
c001c776:	47                   	inc    edi
c001c777:	eb d0                	jmp    c001c749 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c779:	43                   	inc    ebx
c001c77a:	eb bc                	jmp    c001c738 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c77c:	31 c0                	xor    eax,eax
c001c77e:	5b                   	pop    ebx
c001c77f:	5e                   	pop    esi
c001c780:	5f                   	pop    edi
c001c781:	c3                   	ret    

c001c782 <Thr::loadKernelSymbolTable(char const*)>:
c001c782:	55                   	push   ebp
c001c783:	57                   	push   edi
c001c784:	56                   	push   esi
c001c785:	53                   	push   ebx
c001c786:	83 ec 68             	sub    esp,0x68
c001c789:	8b 35 54 13 03 c0    	mov    esi,DWORD PTR ds:0xc0031354
c001c78f:	68 14 01 00 00       	push   0x114
c001c794:	e8 a7 30 ff ff       	call   c000f840 <malloc>
c001c799:	83 c4 0c             	add    esp,0xc
c001c79c:	89 c3                	mov    ebx,eax
c001c79e:	56                   	push   esi
c001c79f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c7a3:	50                   	push   eax
c001c7a4:	e8 bf 68 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001c7a9:	5e                   	pop    esi
c001c7aa:	5f                   	pop    edi
c001c7ab:	6a 01                	push   0x1
c001c7ad:	53                   	push   ebx
c001c7ae:	e8 19 69 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001c7b3:	83 c4 10             	add    esp,0x10
c001c7b6:	85 c0                	test   eax,eax
c001c7b8:	74 0a                	je     c001c7c4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c7ba:	83 ec 0c             	sub    esp,0xc
c001c7bd:	68 26 ba 02 c0       	push   0xc002ba26
c001c7c2:	eb 34                	jmp    c001c7f8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c7c4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c7cc:	83 ec 0c             	sub    esp,0xc
c001c7cf:	6a 34                	push   0x34
c001c7d1:	e8 6a 30 ff ff       	call   c000f840 <malloc>
c001c7d6:	59                   	pop    ecx
c001c7d7:	89 c7                	mov    edi,eax
c001c7d9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c7dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7df:	56                   	push   esi
c001c7e0:	57                   	push   edi
c001c7e1:	6a 00                	push   0x0
c001c7e3:	6a 34                	push   0x34
c001c7e5:	53                   	push   ebx
c001c7e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7e9:	83 c4 20             	add    esp,0x20
c001c7ec:	85 c0                	test   eax,eax
c001c7ee:	74 17                	je     c001c807 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c7f0:	83 ec 0c             	sub    esp,0xc
c001c7f3:	68 3d ba 02 c0       	push   0xc002ba3d
c001c7f8:	e8 8e d9 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001c7fd:	83 c4 10             	add    esp,0x10
c001c800:	31 c0                	xor    eax,eax
c001c802:	e9 31 02 00 00       	jmp    c001ca38 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c807:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c80d:	75 e1                	jne    c001c7f0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c80f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c812:	85 c0                	test   eax,eax
c001c814:	74 da                	je     c001c7f0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c816:	52                   	push   edx
c001c817:	31 d2                	xor    edx,edx
c001c819:	52                   	push   edx
c001c81a:	50                   	push   eax
c001c81b:	53                   	push   ebx
c001c81c:	e8 69 69 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	85 c0                	test   eax,eax
c001c826:	75 c8                	jne    c001c7f0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c828:	83 ec 0c             	sub    esp,0xc
c001c82b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c82f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c833:	31 ed                	xor    ebp,ebp
c001c835:	0f af c2             	imul   eax,edx
c001c838:	50                   	push   eax
c001c839:	e8 02 30 ff ff       	call   c000f840 <malloc>
c001c83e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c844:	89 34 24             	mov    DWORD PTR [esp],esi
c001c847:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c84b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c84f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c853:	0f af c2             	imul   eax,edx
c001c856:	99                   	cdq    
c001c857:	52                   	push   edx
c001c858:	50                   	push   eax
c001c859:	53                   	push   ebx
c001c85a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c85d:	83 c4 20             	add    esp,0x20
c001c860:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c868:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c870:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c878:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c880:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c884:	0f 86 aa 00 00 00    	jbe    c001c934 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c88a:	0f b7 f5             	movzx  esi,bp
c001c88d:	6b f6 28             	imul   esi,esi,0x28
c001c890:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c894:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c897:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c89b:	50                   	push   eax
c001c89c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8a0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c8a4:	8b 16                	mov    edx,DWORD PTR [esi]
c001c8a6:	6b c0 28             	imul   eax,eax,0x28
c001c8a9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c8ad:	89 d0                	mov    eax,edx
c001c8af:	31 d2                	xor    edx,edx
c001c8b1:	52                   	push   edx
c001c8b2:	50                   	push   eax
c001c8b3:	53                   	push   ebx
c001c8b4:	e8 d1 68 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c8b9:	83 c4 0c             	add    esp,0xc
c001c8bc:	6a 20                	push   0x20
c001c8be:	6a 00                	push   0x0
c001c8c0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c8c4:	52                   	push   edx
c001c8c5:	e8 ae 3e fe ff       	call   c0000778 <memset>
c001c8ca:	58                   	pop    eax
c001c8cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c8cd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c8d1:	51                   	push   ecx
c001c8d2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c8d6:	52                   	push   edx
c001c8d7:	6a 00                	push   0x0
c001c8d9:	6a 1f                	push   0x1f
c001c8db:	53                   	push   ebx
c001c8dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8df:	83 c4 18             	add    esp,0x18
c001c8e2:	68 54 ba 02 c0       	push   0xc002ba54
c001c8e7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c8eb:	52                   	push   edx
c001c8ec:	e8 cf 3f fe ff       	call   c00008c0 <strcmp>
c001c8f1:	83 c4 10             	add    esp,0x10
c001c8f4:	85 c0                	test   eax,eax
c001c8f6:	75 0f                	jne    c001c907 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c8f8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c8fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c907:	50                   	push   eax
c001c908:	50                   	push   eax
c001c909:	68 5c ba 02 c0       	push   0xc002ba5c
c001c90e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c912:	50                   	push   eax
c001c913:	e8 a8 3f fe ff       	call   c00008c0 <strcmp>
c001c918:	83 c4 10             	add    esp,0x10
c001c91b:	85 c0                	test   eax,eax
c001c91d:	75 0f                	jne    c001c92e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c91f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c922:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c926:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c92a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c92e:	45                   	inc    ebp
c001c92f:	e9 4c ff ff ff       	jmp    c001c880 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c934:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c939:	75 10                	jne    c001c94b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c93b:	83 ec 0c             	sub    esp,0xc
c001c93e:	68 64 ba 02 c0       	push   0xc002ba64
c001c943:	e8 43 d8 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001c948:	83 c4 10             	add    esp,0x10
c001c94b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c950:	75 10                	jne    c001c962 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c952:	83 ec 0c             	sub    esp,0xc
c001c955:	68 64 ba 02 c0       	push   0xc002ba64
c001c95a:	e8 2c d8 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001c95f:	83 c4 10             	add    esp,0x10
c001c962:	31 d2                	xor    edx,edx
c001c964:	50                   	push   eax
c001c965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c969:	52                   	push   edx
c001c96a:	50                   	push   eax
c001c96b:	53                   	push   ebx
c001c96c:	e8 19 68 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c971:	5a                   	pop    edx
c001c972:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c976:	e8 c5 2e ff ff       	call   c000f840 <malloc>
c001c97b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c97f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c983:	31 c9                	xor    ecx,ecx
c001c985:	5e                   	pop    esi
c001c986:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c988:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c98c:	55                   	push   ebp
c001c98d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c991:	51                   	push   ecx
c001c992:	52                   	push   edx
c001c993:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c997:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c99b:	53                   	push   ebx
c001c99c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c99f:	83 c4 14             	add    esp,0x14
c001c9a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9a6:	e8 95 2e ff ff       	call   c000f840 <malloc>
c001c9ab:	89 c6                	mov    esi,eax
c001c9ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c9b2:	56                   	push   esi
c001c9b3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c9b7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c9bb:	51                   	push   ecx
c001c9bc:	52                   	push   edx
c001c9bd:	53                   	push   ebx
c001c9be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c9c5:	8b 15 00 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031300
c001c9cb:	83 c4 1c             	add    esp,0x1c
c001c9ce:	c1 e8 04             	shr    eax,0x4
c001c9d1:	89 04 95 80 11 03 c0 	mov    DWORD PTR [edx*4-0x3ffcee80],eax
c001c9d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9dc:	31 d2                	xor    edx,edx
c001c9de:	52                   	push   edx
c001c9df:	50                   	push   eax
c001c9e0:	53                   	push   ebx
c001c9e1:	e8 a4 67 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001c9e6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c9e8:	31 d2                	xor    edx,edx
c001c9ea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c9ed:	56                   	push   esi
c001c9ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c9f2:	52                   	push   edx
c001c9f3:	50                   	push   eax
c001c9f4:	53                   	push   ebx
c001c9f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9f8:	83 c4 14             	add    esp,0x14
c001c9fb:	53                   	push   ebx
c001c9fc:	e8 29 67 ff ff       	call   c001312a <File::close()>
c001ca01:	5d                   	pop    ebp
c001ca02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca06:	e8 45 2e ff ff       	call   c000f850 <free>
c001ca0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca0e:	e8 3d 2e ff ff       	call   c000f850 <free>
c001ca13:	a1 00 13 03 c0       	mov    eax,ds:0xc0031300
c001ca18:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ca1f:	89 0c 85 80 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced80],ecx
c001ca26:	89 34 85 00 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee00],esi
c001ca2d:	89 15 00 13 03 c0    	mov    DWORD PTR ds:0xc0031300,edx
c001ca33:	83 c4 10             	add    esp,0x10
c001ca36:	b0 01                	mov    al,0x1
c001ca38:	83 c4 5c             	add    esp,0x5c
c001ca3b:	5b                   	pop    ebx
c001ca3c:	5e                   	pop    esi
c001ca3d:	5f                   	pop    edi
c001ca3e:	5d                   	pop    ebp
c001ca3f:	c3                   	ret    

c001ca40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ca40:	55                   	push   ebp
c001ca41:	57                   	push   edi
c001ca42:	56                   	push   esi
c001ca43:	53                   	push   ebx
c001ca44:	81 ec 68 03 00 00    	sub    esp,0x368
c001ca4a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ca51:	8b 1d 54 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031354
c001ca57:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ca5b:	68 14 01 00 00       	push   0x114
c001ca60:	e8 db 2d ff ff       	call   c000f840 <malloc>
c001ca65:	83 c4 0c             	add    esp,0xc
c001ca68:	89 c5                	mov    ebp,eax
c001ca6a:	53                   	push   ebx
c001ca6b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ca72:	50                   	push   eax
c001ca73:	e8 f0 65 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001ca78:	5e                   	pop    esi
c001ca79:	5f                   	pop    edi
c001ca7a:	6a 01                	push   0x1
c001ca7c:	55                   	push   ebp
c001ca7d:	e8 4a 66 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001ca82:	83 c4 10             	add    esp,0x10
c001ca85:	85 c0                	test   eax,eax
c001ca87:	0f 85 8d 06 00 00    	jne    c001d11a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ca8d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ca95:	83 ec 0c             	sub    esp,0xc
c001ca98:	6a 34                	push   0x34
c001ca9a:	e8 a1 2d ff ff       	call   c000f840 <malloc>
c001ca9f:	5b                   	pop    ebx
c001caa0:	89 c7                	mov    edi,eax
c001caa2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001caa6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001caa9:	53                   	push   ebx
c001caaa:	57                   	push   edi
c001caab:	6a 00                	push   0x0
c001caad:	6a 34                	push   0x34
c001caaf:	55                   	push   ebp
c001cab0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cab3:	83 c4 20             	add    esp,0x20
c001cab6:	85 c0                	test   eax,eax
c001cab8:	0f 85 5c 06 00 00    	jne    c001d11a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cabe:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cac4:	0f 85 50 06 00 00    	jne    c001d11a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001caca:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cacd:	85 c0                	test   eax,eax
c001cacf:	0f 84 45 06 00 00    	je     c001d11a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cad5:	31 d2                	xor    edx,edx
c001cad7:	51                   	push   ecx
c001cad8:	52                   	push   edx
c001cad9:	50                   	push   eax
c001cada:	55                   	push   ebp
c001cadb:	e8 aa 66 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cae0:	83 c4 10             	add    esp,0x10
c001cae3:	85 c0                	test   eax,eax
c001cae5:	0f 85 2f 06 00 00    	jne    c001d11a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001caeb:	83 ec 0c             	sub    esp,0xc
c001caee:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001caf1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001caf5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001caf9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cafd:	0f af c2             	imul   eax,edx
c001cb00:	50                   	push   eax
c001cb01:	e8 3a 2d ff ff       	call   c000f840 <malloc>
c001cb06:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb14:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cb18:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cb1c:	0f af c2             	imul   eax,edx
c001cb1f:	99                   	cdq    
c001cb20:	52                   	push   edx
c001cb21:	50                   	push   eax
c001cb22:	55                   	push   ebp
c001cb23:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb26:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cb29:	83 c4 20             	add    esp,0x20
c001cb2c:	85 c0                	test   eax,eax
c001cb2e:	0f 84 e6 05 00 00    	je     c001d11a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cb34:	52                   	push   edx
c001cb35:	31 d2                	xor    edx,edx
c001cb37:	52                   	push   edx
c001cb38:	50                   	push   eax
c001cb39:	55                   	push   ebp
c001cb3a:	e8 4b 66 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cb3f:	83 c4 10             	add    esp,0x10
c001cb42:	85 c0                	test   eax,eax
c001cb44:	0f 85 d0 05 00 00    	jne    c001d11a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cb4a:	83 ec 0c             	sub    esp,0xc
c001cb4d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cb51:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cb55:	31 f6                	xor    esi,esi
c001cb57:	0f af c2             	imul   eax,edx
c001cb5a:	50                   	push   eax
c001cb5b:	e8 e0 2c ff ff       	call   c000f840 <malloc>
c001cb60:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb6e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cb72:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cb76:	0f af c2             	imul   eax,edx
c001cb79:	99                   	cdq    
c001cb7a:	52                   	push   edx
c001cb7b:	50                   	push   eax
c001cb7c:	55                   	push   ebp
c001cb7d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb80:	83 c4 20             	add    esp,0x20
c001cb83:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cb87:	0f 86 8a 00 00 00    	jbe    c001cc17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cb8d:	0f b7 de             	movzx  ebx,si
c001cb90:	c1 e3 05             	shl    ebx,0x5
c001cb93:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cb97:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cb9a:	75 75                	jne    c001cc11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cb9c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb9f:	31 d2                	xor    edx,edx
c001cba1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cba5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cba8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbac:	50                   	push   eax
c001cbad:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cbb0:	52                   	push   edx
c001cbb1:	50                   	push   eax
c001cbb2:	55                   	push   ebp
c001cbb3:	e8 d2 65 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cbb8:	83 c4 10             	add    esp,0x10
c001cbbb:	85 c0                	test   eax,eax
c001cbbd:	0f 85 57 05 00 00    	jne    c001d11a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cbc3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cbca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbcd:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cbd1:	31 d2                	xor    edx,edx
c001cbd3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cbd7:	83 ec 0c             	sub    esp,0xc
c001cbda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cbde:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbe5:	50                   	push   eax
c001cbe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbee:	52                   	push   edx
c001cbef:	50                   	push   eax
c001cbf0:	55                   	push   ebp
c001cbf1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbf4:	83 c4 1c             	add    esp,0x1c
c001cbf7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbfa:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cbfd:	50                   	push   eax
c001cbfe:	6a 00                	push   0x0
c001cc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc04:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cc08:	50                   	push   eax
c001cc09:	e8 6a 3b fe ff       	call   c0000778 <memset>
c001cc0e:	83 c4 10             	add    esp,0x10
c001cc11:	46                   	inc    esi
c001cc12:	e9 6c ff ff ff       	jmp    c001cb83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cc17:	53                   	push   ebx
c001cc18:	31 db                	xor    ebx,ebx
c001cc1a:	68 00 01 00 00       	push   0x100
c001cc1f:	6a 00                	push   0x0
c001cc21:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cc25:	50                   	push   eax
c001cc26:	e8 4d 3b fe ff       	call   c0000778 <memset>
c001cc2b:	83 c4 0c             	add    esp,0xc
c001cc2e:	68 00 01 00 00       	push   0x100
c001cc33:	6a 00                	push   0x0
c001cc35:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cc3c:	50                   	push   eax
c001cc3d:	e8 36 3b fe ff       	call   c0000778 <memset>
c001cc42:	83 c4 10             	add    esp,0x10
c001cc45:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc4d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc55:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cc5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc65:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cc6d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cc71:	0f 86 30 01 00 00    	jbe    c001cda7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cc77:	0f b7 f3             	movzx  esi,bx
c001cc7a:	6b f6 28             	imul   esi,esi,0x28
c001cc7d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc81:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc88:	52                   	push   edx
c001cc89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc8d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cc91:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc93:	6b d2 28             	imul   edx,edx,0x28
c001cc96:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cc9a:	31 d2                	xor    edx,edx
c001cc9c:	52                   	push   edx
c001cc9d:	50                   	push   eax
c001cc9e:	55                   	push   ebp
c001cc9f:	e8 e6 64 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cca4:	83 c4 0c             	add    esp,0xc
c001cca7:	6a 20                	push   0x20
c001cca9:	6a 00                	push   0x0
c001ccab:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ccb2:	51                   	push   ecx
c001ccb3:	e8 c0 3a fe ff       	call   c0000778 <memset>
c001ccb8:	59                   	pop    ecx
c001ccb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ccbc:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ccc0:	52                   	push   edx
c001ccc1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ccc8:	51                   	push   ecx
c001ccc9:	6a 00                	push   0x0
c001cccb:	6a 1f                	push   0x1f
c001cccd:	55                   	push   ebp
c001ccce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccd1:	83 c4 1c             	add    esp,0x1c
c001ccd4:	6a 09                	push   0x9
c001ccd6:	68 7e ba 02 c0       	push   0xc002ba7e
c001ccdb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cce2:	51                   	push   ecx
c001cce3:	e8 58 39 fe ff       	call   c0000640 <memcmp>
c001cce8:	83 c4 10             	add    esp,0x10
c001cceb:	85 c0                	test   eax,eax
c001cced:	75 21                	jne    c001cd10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ccef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ccf3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ccf7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ccfb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd02:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cd09:	89 d0                	mov    eax,edx
c001cd0b:	40                   	inc    eax
c001cd0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd10:	50                   	push   eax
c001cd11:	6a 09                	push   0x9
c001cd13:	68 88 ba 02 c0       	push   0xc002ba88
c001cd18:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd1f:	50                   	push   eax
c001cd20:	e8 1b 39 fe ff       	call   c0000640 <memcmp>
c001cd25:	83 c4 10             	add    esp,0x10
c001cd28:	85 c0                	test   eax,eax
c001cd2a:	75 21                	jne    c001cd4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cd2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cd34:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cd38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd3c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd3f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cd46:	89 d0                	mov    eax,edx
c001cd48:	40                   	inc    eax
c001cd49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd4d:	50                   	push   eax
c001cd4e:	50                   	push   eax
c001cd4f:	68 54 ba 02 c0       	push   0xc002ba54
c001cd54:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd5b:	50                   	push   eax
c001cd5c:	e8 5f 3b fe ff       	call   c00008c0 <strcmp>
c001cd61:	83 c4 10             	add    esp,0x10
c001cd64:	85 c0                	test   eax,eax
c001cd66:	75 0f                	jne    c001cd77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cd68:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd77:	50                   	push   eax
c001cd78:	50                   	push   eax
c001cd79:	68 5c ba 02 c0       	push   0xc002ba5c
c001cd7e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd85:	50                   	push   eax
c001cd86:	e8 35 3b fe ff       	call   c00008c0 <strcmp>
c001cd8b:	83 c4 10             	add    esp,0x10
c001cd8e:	85 c0                	test   eax,eax
c001cd90:	75 0f                	jne    c001cda1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cd92:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cd99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd9d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cda1:	43                   	inc    ebx
c001cda2:	e9 c6 fe ff ff       	jmp    c001cc6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cda7:	31 d2                	xor    edx,edx
c001cda9:	50                   	push   eax
c001cdaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cdae:	52                   	push   edx
c001cdaf:	50                   	push   eax
c001cdb0:	55                   	push   ebp
c001cdb1:	e8 d4 63 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cdb6:	58                   	pop    eax
c001cdb7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cdbb:	e8 80 2a ff ff       	call   c000f840 <malloc>
c001cdc0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cdc3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cdc7:	31 d2                	xor    edx,edx
c001cdc9:	58                   	pop    eax
c001cdca:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cdce:	53                   	push   ebx
c001cdcf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cdd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdd7:	52                   	push   edx
c001cdd8:	50                   	push   eax
c001cdd9:	55                   	push   ebp
c001cdda:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cddd:	83 c4 14             	add    esp,0x14
c001cde0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cde4:	e8 57 2a ff ff       	call   c000f840 <malloc>
c001cde9:	31 d2                	xor    edx,edx
c001cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cdef:	83 c4 0c             	add    esp,0xc
c001cdf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdf6:	52                   	push   edx
c001cdf7:	50                   	push   eax
c001cdf8:	55                   	push   ebp
c001cdf9:	e8 8c 63 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001cdfe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce01:	31 d2                	xor    edx,edx
c001ce03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ce0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ce0e:	52                   	push   edx
c001ce0f:	50                   	push   eax
c001ce10:	55                   	push   ebp
c001ce11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce14:	83 c4 20             	add    esp,0x20
c001ce17:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce1f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ce23:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ce27:	0f 84 f1 02 00 00    	je     c001d11e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001ce2d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001ce34:	31 d2                	xor    edx,edx
c001ce36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce3a:	c1 e8 03             	shr    eax,0x3
c001ce3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ce41:	51                   	push   ecx
c001ce42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce46:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001ce4a:	52                   	push   edx
c001ce4b:	50                   	push   eax
c001ce4c:	55                   	push   ebp
c001ce4d:	e8 38 63 ff ff       	call   c001318a <File::seek(unsigned long long)>
c001ce52:	5b                   	pop    ebx
c001ce53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce57:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001ce5e:	e8 dd 29 ff ff       	call   c000f840 <malloc>
c001ce63:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce6a:	31 d2                	xor    edx,edx
c001ce6c:	5e                   	pop    esi
c001ce6d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ce71:	50                   	push   eax
c001ce72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce7a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001ce81:	52                   	push   edx
c001ce82:	50                   	push   eax
c001ce83:	55                   	push   ebp
c001ce84:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce87:	83 c4 20             	add    esp,0x20
c001ce8a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ce92:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ce96:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001ce9a:	0f 8d 62 02 00 00    	jge    c001d102 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001cea0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cea8:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cead:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ceb0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ceb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ceb8:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cebc:	89 d8                	mov    eax,ebx
c001cebe:	c1 e8 08             	shr    eax,0x8
c001cec1:	89 c6                	mov    esi,eax
c001cec3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cec7:	c1 e6 04             	shl    esi,0x4
c001ceca:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cece:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ced1:	85 d2                	test   edx,edx
c001ced3:	0f 85 bf 00 00 00    	jne    c001cf98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ced9:	83 ec 0c             	sub    esp,0xc
c001cedc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cee0:	03 06                	add    eax,DWORD PTR [esi]
c001cee2:	50                   	push   eax
c001cee3:	e8 4b f8 ff ff       	call   c001c733 <Thr::getAddressOfKernelSymbol(char const*)>
c001cee8:	83 c4 10             	add    esp,0x10
c001ceeb:	89 c2                	mov    edx,eax
c001ceed:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cef2:	85 c0                	test   eax,eax
c001cef4:	0f 85 9e 00 00 00    	jne    c001cf98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cefa:	83 ec 0c             	sub    esp,0xc
c001cefd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf01:	03 06                	add    eax,DWORD PTR [esi]
c001cf03:	50                   	push   eax
c001cf04:	e8 ec 15 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001cf09:	83 c4 10             	add    esp,0x10
c001cf0c:	89 c2                	mov    edx,eax
c001cf0e:	85 c0                	test   eax,eax
c001cf10:	0f 85 82 00 00 00    	jne    c001cf98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cf16:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cf1a:	50                   	push   eax
c001cf1b:	50                   	push   eax
c001cf1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf20:	03 06                	add    eax,DWORD PTR [esi]
c001cf22:	50                   	push   eax
c001cf23:	68 92 ba 02 c0       	push   0xc002ba92
c001cf28:	e8 e2 5b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001cf2d:	58                   	pop    eax
c001cf2e:	5a                   	pop    edx
c001cf2f:	68 ac ba 02 c0       	push   0xc002baac
c001cf34:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf3b:	50                   	push   eax
c001cf3c:	e8 f3 38 fe ff       	call   c0000834 <strcpy>
c001cf41:	59                   	pop    ecx
c001cf42:	58                   	pop    eax
c001cf43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf47:	03 06                	add    eax,DWORD PTR [esi]
c001cf49:	50                   	push   eax
c001cf4a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf51:	50                   	push   eax
c001cf52:	e8 1d 3a fe ff       	call   c0000974 <strcat>
c001cf57:	58                   	pop    eax
c001cf58:	5a                   	pop    edx
c001cf59:	68 42 bb 02 c0       	push   0xc002bb42
c001cf5e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf65:	50                   	push   eax
c001cf66:	e8 09 3a fe ff       	call   c0000974 <strcat>
c001cf6b:	83 c4 10             	add    esp,0x10
c001cf6e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf73:	0f 84 43 01 00 00    	je     c001d0bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cf79:	83 ec 0c             	sub    esp,0xc
c001cf7c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf83:	50                   	push   eax
c001cf84:	e8 02 d2 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001cf89:	83 c4 10             	add    esp,0x10
c001cf8c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cf90:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf94:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cf98:	80 fb 01             	cmp    bl,0x1
c001cf9b:	75 7d                	jne    c001d01a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001cf9d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cfa4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cfa8:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cfac:	01 ce                	add    esi,ecx
c001cfae:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cfb4:	0f 94 c0             	sete   al
c001cfb7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cfbd:	0f 94 c3             	sete   bl
c001cfc0:	09 c3                	or     ebx,eax
c001cfc2:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfc4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cfc9:	74 36                	je     c001d001 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001cfcb:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cfce:	84 db                	test   bl,bl
c001cfd0:	75 0a                	jne    c001cfdc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001cfd2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfd6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cfda:	76 37                	jbe    c001d013 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001cfdc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cfe0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cfe5:	0f 84 d1 00 00 00    	je     c001d0bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cfeb:	83 ec 0c             	sub    esp,0xc
c001cfee:	68 c3 ba 02 c0       	push   0xc002bac3
c001cff3:	e8 93 d1 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001cff8:	83 c4 10             	add    esp,0x10
c001cffb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cfff:	eb 12                	jmp    c001d013 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d001:	01 c1                	add    ecx,eax
c001d003:	84 db                	test   bl,bl
c001d005:	75 0c                	jne    c001d013 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d007:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d00b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d00f:	77 02                	ja     c001d013 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d011:	01 d1                	add    ecx,edx
c001d013:	89 0e                	mov    DWORD PTR [esi],ecx
c001d015:	e9 df 00 00 00       	jmp    c001d0f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d01a:	80 fb 02             	cmp    bl,0x2
c001d01d:	75 71                	jne    c001d090 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d01f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d026:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d02a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d02e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d034:	74 15                	je     c001d04b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d036:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d03c:	74 0d                	je     c001d04b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d03e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d042:	83 e8 04             	sub    eax,0x4
c001d045:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d049:	76 1f                	jbe    c001d06a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d04b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d04f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d054:	74 66                	je     c001d0bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d056:	83 ec 0c             	sub    esp,0xc
c001d059:	68 df ba 02 c0       	push   0xc002badf
c001d05e:	e8 28 d1 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001d063:	83 c4 10             	add    esp,0x10
c001d066:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d06a:	8b 06                	mov    eax,DWORD PTR [esi]
c001d06c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d071:	74 13                	je     c001d086 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d073:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d077:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d07e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d082:	01 c8                	add    eax,ecx
c001d084:	eb 04                	jmp    c001d08a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d086:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d08a:	01 c2                	add    edx,eax
c001d08c:	89 16                	mov    DWORD PTR [esi],edx
c001d08e:	eb 69                	jmp    c001d0f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d090:	0f b6 db             	movzx  ebx,bl
c001d093:	50                   	push   eax
c001d094:	50                   	push   eax
c001d095:	53                   	push   ebx
c001d096:	68 fb ba 02 c0       	push   0xc002bafb
c001d09b:	e8 6f 5a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d0a0:	83 c4 10             	add    esp,0x10
c001d0a3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d0a8:	74 12                	je     c001d0bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d0aa:	83 ec 0c             	sub    esp,0xc
c001d0ad:	68 06 bb 02 c0       	push   0xc002bb06
c001d0b2:	e8 d4 d0 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001d0b7:	83 c4 10             	add    esp,0x10
c001d0ba:	eb 3d                	jmp    c001d0f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d0bc:	83 ec 0c             	sub    esp,0xc
c001d0bf:	55                   	push   ebp
c001d0c0:	e8 65 60 ff ff       	call   c001312a <File::close()>
c001d0c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d0cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0ce:	59                   	pop    ecx
c001d0cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0d3:	e8 78 27 ff ff       	call   c000f850 <free>
c001d0d8:	5b                   	pop    ebx
c001d0d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0dd:	e8 6e 27 ff ff       	call   c000f850 <free>
c001d0e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0e5:	e8 66 27 ff ff       	call   c000f850 <free>
c001d0ea:	5e                   	pop    esi
c001d0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ef:	e8 5c 27 ff ff       	call   c000f850 <free>
c001d0f4:	83 c4 10             	add    esp,0x10
c001d0f7:	eb 21                	jmp    c001d11a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0f9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d0fd:	e9 90 fd ff ff       	jmp    c001ce92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d102:	83 ec 0c             	sub    esp,0xc
c001d105:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d109:	e8 42 27 ff ff       	call   c000f850 <free>
c001d10e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d112:	83 c4 10             	add    esp,0x10
c001d115:	e9 05 fd ff ff       	jmp    c001ce1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d11a:	31 c0                	xor    eax,eax
c001d11c:	eb 33                	jmp    c001d151 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d11e:	83 ec 0c             	sub    esp,0xc
c001d121:	55                   	push   ebp
c001d122:	e8 03 60 ff ff       	call   c001312a <File::close()>
c001d127:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d12a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d12d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d130:	58                   	pop    eax
c001d131:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d135:	e8 16 27 ff ff       	call   c000f850 <free>
c001d13a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d13d:	e8 0e 27 ff ff       	call   c000f850 <free>
c001d142:	5a                   	pop    edx
c001d143:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d147:	e8 04 27 ff ff       	call   c000f850 <free>
c001d14c:	83 c4 10             	add    esp,0x10
c001d14f:	b0 01                	mov    al,0x1
c001d151:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d157:	5b                   	pop    ebx
c001d158:	5e                   	pop    esi
c001d159:	5f                   	pop    edi
c001d15a:	5d                   	pop    ebp
c001d15b:	c3                   	ret    

c001d15c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d15c:	56                   	push   esi
c001d15d:	31 d2                	xor    edx,edx
c001d15f:	53                   	push   ebx
c001d160:	8b 1d 60 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b60
c001d166:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d16a:	39 d3                	cmp    ebx,edx
c001d16c:	7e 1b                	jle    c001d189 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d16e:	8b 04 95 80 0d 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf280]
c001d175:	39 c8                	cmp    eax,ecx
c001d177:	77 0d                	ja     c001d186 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d179:	8b 34 95 80 0b 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf480]
c001d180:	01 c6                	add    esi,eax
c001d182:	39 ce                	cmp    esi,ecx
c001d184:	77 05                	ja     c001d18b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d186:	42                   	inc    edx
c001d187:	eb e1                	jmp    c001d16a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d189:	31 c0                	xor    eax,eax
c001d18b:	5b                   	pop    ebx
c001d18c:	5e                   	pop    esi
c001d18d:	c3                   	ret    

c001d18e <Thr::getDriverNameFromAddress(unsigned long)>:
c001d18e:	53                   	push   ebx
c001d18f:	31 c0                	xor    eax,eax
c001d191:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d195:	8b 1d 60 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b60
c001d19b:	39 c3                	cmp    ebx,eax
c001d19d:	7e 22                	jle    c001d1c1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d19f:	8b 14 85 80 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf280]
c001d1a6:	39 ca                	cmp    edx,ecx
c001d1a8:	77 14                	ja     c001d1be <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d1aa:	03 14 85 80 0b 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf480]
c001d1b1:	39 ca                	cmp    edx,ecx
c001d1b3:	76 09                	jbe    c001d1be <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d1b5:	8b 04 85 80 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf080]
c001d1bc:	eb 05                	jmp    c001d1c3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d1be:	40                   	inc    eax
c001d1bf:	eb da                	jmp    c001d19b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d1c1:	31 c0                	xor    eax,eax
c001d1c3:	5b                   	pop    ebx
c001d1c4:	c3                   	ret    

c001d1c5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d1c5:	53                   	push   ebx
c001d1c6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d1ca:	53                   	push   ebx
c001d1cb:	e8 8c ff ff ff       	call   c001d15c <Thr::getDriverBaseFromAddress(unsigned long)>
c001d1d0:	5a                   	pop    edx
c001d1d1:	31 d2                	xor    edx,edx
c001d1d3:	85 c0                	test   eax,eax
c001d1d5:	74 04                	je     c001d1db <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d1d7:	89 da                	mov    edx,ebx
c001d1d9:	29 c2                	sub    edx,eax
c001d1db:	89 d0                	mov    eax,edx
c001d1dd:	5b                   	pop    ebx
c001d1de:	c3                   	ret    

c001d1df <Thr::loadDLL(char const*, bool)>:
c001d1df:	55                   	push   ebp
c001d1e0:	57                   	push   edi
c001d1e1:	56                   	push   esi
c001d1e2:	53                   	push   ebx
c001d1e3:	81 ec 34 01 00 00    	sub    esp,0x134
c001d1e9:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d1f0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d1f7:	56                   	push   esi
c001d1f8:	68 1e bb 02 c0       	push   0xc002bb1e
c001d1fd:	e8 0d 59 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d202:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d209:	e8 32 26 ff ff       	call   c000f840 <malloc>
c001d20e:	83 c4 0c             	add    esp,0xc
c001d211:	89 c3                	mov    ebx,eax
c001d213:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c001d219:	56                   	push   esi
c001d21a:	50                   	push   eax
c001d21b:	e8 48 5e ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001d220:	83 c4 10             	add    esp,0x10
c001d223:	85 db                	test   ebx,ebx
c001d225:	75 3c                	jne    c001d263 <Thr::loadDLL(char const*, bool)+0x84>
c001d227:	89 e8                	mov    eax,ebp
c001d229:	84 c0                	test   al,al
c001d22b:	0f 84 d5 01 00 00    	je     c001d406 <Thr::loadDLL(char const*, bool)+0x227>
c001d231:	57                   	push   edi
c001d232:	57                   	push   edi
c001d233:	68 2f bb 02 c0       	push   0xc002bb2f
c001d238:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d23c:	57                   	push   edi
c001d23d:	e8 f2 35 fe ff       	call   c0000834 <strcpy>
c001d242:	58                   	pop    eax
c001d243:	5a                   	pop    edx
c001d244:	56                   	push   esi
c001d245:	57                   	push   edi
c001d246:	e8 29 37 fe ff       	call   c0000974 <strcat>
c001d24b:	59                   	pop    ecx
c001d24c:	58                   	pop    eax
c001d24d:	68 42 bb 02 c0       	push   0xc002bb42
c001d252:	57                   	push   edi
c001d253:	e8 1c 37 fe ff       	call   c0000974 <strcat>
c001d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d25b:	e8 2b cf ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001d260:	83 c4 10             	add    esp,0x10
c001d263:	51                   	push   ecx
c001d264:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d268:	50                   	push   eax
c001d269:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d26d:	50                   	push   eax
c001d26e:	53                   	push   ebx
c001d26f:	e8 04 61 ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001d274:	83 c4 10             	add    esp,0x10
c001d277:	85 db                	test   ebx,ebx
c001d279:	74 0c                	je     c001d287 <Thr::loadDLL(char const*, bool)+0xa8>
c001d27b:	83 ec 0c             	sub    esp,0xc
c001d27e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d280:	53                   	push   ebx
c001d281:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d284:	83 c4 10             	add    esp,0x10
c001d287:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d28c:	75 0a                	jne    c001d298 <Thr::loadDLL(char const*, bool)+0xb9>
c001d28e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d292:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d296:	75 3c                	jne    c001d2d4 <Thr::loadDLL(char const*, bool)+0xf5>
c001d298:	89 e8                	mov    eax,ebp
c001d29a:	84 c0                	test   al,al
c001d29c:	0f 84 4c 01 00 00    	je     c001d3ee <Thr::loadDLL(char const*, bool)+0x20f>
c001d2a2:	51                   	push   ecx
c001d2a3:	51                   	push   ecx
c001d2a4:	68 2f bb 02 c0       	push   0xc002bb2f
c001d2a9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d2ad:	53                   	push   ebx
c001d2ae:	e8 81 35 fe ff       	call   c0000834 <strcpy>
c001d2b3:	5f                   	pop    edi
c001d2b4:	58                   	pop    eax
c001d2b5:	56                   	push   esi
c001d2b6:	53                   	push   ebx
c001d2b7:	e8 b8 36 fe ff       	call   c0000974 <strcat>
c001d2bc:	58                   	pop    eax
c001d2bd:	5a                   	pop    edx
c001d2be:	68 42 bb 02 c0       	push   0xc002bb42
c001d2c3:	53                   	push   ebx
c001d2c4:	e8 ab 36 fe ff       	call   c0000974 <strcat>
c001d2c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2cc:	e8 ba ce ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001d2d1:	83 c4 10             	add    esp,0x10
c001d2d4:	e8 d6 49 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c001d2d9:	51                   	push   ecx
c001d2da:	6a 03                	push   0x3
c001d2dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d2e0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d2e4:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d2ea:	83 d3 00             	adc    ebx,0x0
c001d2ed:	89 ca                	mov    edx,ecx
c001d2ef:	89 d1                	mov    ecx,edx
c001d2f1:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d2f5:	51                   	push   ecx
c001d2f6:	50                   	push   eax
c001d2f7:	e8 ee 4f ff ff       	call   c00122ea <VAS::allocatePages(int, int)>
c001d2fc:	5f                   	pop    edi
c001d2fd:	89 c3                	mov    ebx,eax
c001d2ff:	58                   	pop    eax
c001d300:	53                   	push   ebx
c001d301:	68 44 bb 02 c0       	push   0xc002bb44
c001d306:	e8 04 58 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d30b:	89 34 24             	mov    DWORD PTR [esp],esi
c001d30e:	e8 81 34 fe ff       	call   c0000794 <strlen>
c001d313:	8b 3d 60 0b 03 c0    	mov    edi,DWORD PTR ds:0xc0030b60
c001d319:	40                   	inc    eax
c001d31a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d31d:	e8 1e 25 ff ff       	call   c000f840 <malloc>
c001d322:	89 04 bd 80 0f 03 c0 	mov    DWORD PTR [edi*4-0x3ffcf080],eax
c001d329:	58                   	pop    eax
c001d32a:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c001d32f:	5a                   	pop    edx
c001d330:	56                   	push   esi
c001d331:	ff 34 85 80 0f 03 c0 	push   DWORD PTR [eax*4-0x3ffcf080]
c001d338:	e8 f7 34 fe ff       	call   c0000834 <strcpy>
c001d33d:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c001d342:	8d 50 01             	lea    edx,[eax+0x1]
c001d345:	89 1c 85 80 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf280],ebx
c001d34c:	89 15 60 0b 03 c0    	mov    DWORD PTR ds:0xc0030b60,edx
c001d352:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d356:	83 c4 0c             	add    esp,0xc
c001d359:	89 14 85 80 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf480],edx
c001d360:	6a 01                	push   0x1
c001d362:	53                   	push   ebx
c001d363:	56                   	push   esi
c001d364:	e8 d7 f6 ff ff       	call   c001ca40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d369:	83 c4 10             	add    esp,0x10
c001d36c:	89 c7                	mov    edi,eax
c001d36e:	84 c0                	test   al,al
c001d370:	0f 85 8c 00 00 00    	jne    c001d402 <Thr::loadDLL(char const*, bool)+0x223>
c001d376:	89 e8                	mov    eax,ebp
c001d378:	84 c0                	test   al,al
c001d37a:	74 76                	je     c001d3f2 <Thr::loadDLL(char const*, bool)+0x213>
c001d37c:	83 ec 0c             	sub    esp,0xc
c001d37f:	68 51 bb 02 c0       	push   0xc002bb51
c001d384:	e8 02 ce ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001d389:	83 c4 10             	add    esp,0x10
c001d38c:	eb 64                	jmp    c001d3f2 <Thr::loadDLL(char const*, bool)+0x213>
c001d38e:	e8 1c 49 ff ff       	call   c0011caf <Virt::getAKernelVAS()>
c001d393:	89 f5                	mov    ebp,esi
c001d395:	c1 e5 0c             	shl    ebp,0xc
c001d398:	52                   	push   edx
c001d399:	01 dd                	add    ebp,ebx
c001d39b:	52                   	push   edx
c001d39c:	55                   	push   ebp
c001d39d:	50                   	push   eax
c001d39e:	e8 c1 4a ff ff       	call   c0011e64 <VAS::getPageTableEntry(unsigned long)>
c001d3a3:	83 c4 10             	add    esp,0x10
c001d3a6:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d3a9:	75 0c                	jne    c001d3b7 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d3ab:	83 ec 0c             	sub    esp,0xc
c001d3ae:	55                   	push   ebp
c001d3af:	e8 9f 2a ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001d3b4:	83 c4 10             	add    esp,0x10
c001d3b7:	46                   	inc    esi
c001d3b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3c0:	05 ff 0f 00 00       	add    eax,0xfff
c001d3c5:	83 d2 00             	adc    edx,0x0
c001d3c8:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d3cc:	c1 ea 0c             	shr    edx,0xc
c001d3cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d3d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d3d7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d3db:	ba 00 00 00 00       	mov    edx,0x0
c001d3e0:	89 d0                	mov    eax,edx
c001d3e2:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d3e6:	72 a6                	jb     c001d38e <Thr::loadDLL(char const*, bool)+0x1af>
c001d3e8:	89 f8                	mov    eax,edi
c001d3ea:	84 c0                	test   al,al
c001d3ec:	75 18                	jne    c001d406 <Thr::loadDLL(char const*, bool)+0x227>
c001d3ee:	31 db                	xor    ebx,ebx
c001d3f0:	eb 14                	jmp    c001d406 <Thr::loadDLL(char const*, bool)+0x227>
c001d3f2:	83 ec 0c             	sub    esp,0xc
c001d3f5:	68 70 bb 02 c0       	push   0xc002bb70
c001d3fa:	e8 8c cd ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001d3ff:	83 c4 10             	add    esp,0x10
c001d402:	31 f6                	xor    esi,esi
c001d404:	eb b2                	jmp    c001d3b8 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d406:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d40c:	89 d8                	mov    eax,ebx
c001d40e:	5b                   	pop    ebx
c001d40f:	5e                   	pop    esi
c001d410:	5f                   	pop    edi
c001d411:	5d                   	pop    ebp
c001d412:	c3                   	ret    

c001d413 <Thr::executeDLL(unsigned long, void*)>:
c001d413:	56                   	push   esi
c001d414:	53                   	push   ebx
c001d415:	52                   	push   edx
c001d416:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d41a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d41e:	85 db                	test   ebx,ebx
c001d420:	75 10                	jne    c001d432 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d422:	83 ec 0c             	sub    esp,0xc
c001d425:	68 8c bb 02 c0       	push   0xc002bb8c
c001d42a:	e8 5c cd ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001d42f:	83 c4 10             	add    esp,0x10
c001d432:	50                   	push   eax
c001d433:	50                   	push   eax
c001d434:	53                   	push   ebx
c001d435:	68 b6 bb 02 c0       	push   0xc002bbb6
c001d43a:	e8 d0 56 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d43f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d443:	89 d8                	mov    eax,ebx
c001d445:	83 c4 14             	add    esp,0x14
c001d448:	5b                   	pop    ebx
c001d449:	5e                   	pop    esi
c001d44a:	ff e0                	jmp    eax

c001d44c <changeTSS>:
c001d44c:	83 ec 14             	sub    esp,0x14
c001d44f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d454:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d457:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d45c:	c1 e2 15             	shl    edx,0x15
c001d45f:	29 d0                	sub    eax,edx
c001d461:	50                   	push   eax
c001d462:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001d467:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d46d:	05 7c 11 00 00       	add    eax,0x117c
c001d472:	50                   	push   eax
c001d473:	e8 e6 3f ff ff       	call   c001145e <TSS::setESP(unsigned long)>
c001d478:	83 c4 1c             	add    esp,0x1c
c001d47b:	c3                   	ret    

c001d47c <Process::addArgs(char**)>:
c001d47c:	57                   	push   edi
c001d47d:	56                   	push   esi
c001d47e:	53                   	push   ebx
c001d47f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d483:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d487:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d491:	85 ff                	test   edi,edi
c001d493:	74 3d                	je     c001d4d2 <Process::addArgs(char**)+0x56>
c001d495:	8b 07                	mov    eax,DWORD PTR [edi]
c001d497:	85 c0                	test   eax,eax
c001d499:	74 37                	je     c001d4d2 <Process::addArgs(char**)+0x56>
c001d49b:	31 db                	xor    ebx,ebx
c001d49d:	83 ec 0c             	sub    esp,0xc
c001d4a0:	50                   	push   eax
c001d4a1:	e8 ee 32 fe ff       	call   c0000794 <strlen>
c001d4a6:	40                   	inc    eax
c001d4a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4aa:	e8 91 23 ff ff       	call   c000f840 <malloc>
c001d4af:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d4b6:	5a                   	pop    edx
c001d4b7:	59                   	pop    ecx
c001d4b8:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d4bb:	43                   	inc    ebx
c001d4bc:	50                   	push   eax
c001d4bd:	e8 72 33 fe ff       	call   c0000834 <strcpy>
c001d4c2:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d4c8:	83 c4 10             	add    esp,0x10
c001d4cb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d4ce:	85 c0                	test   eax,eax
c001d4d0:	75 cb                	jne    c001d49d <Process::addArgs(char**)+0x21>
c001d4d2:	5b                   	pop    ebx
c001d4d3:	5e                   	pop    esi
c001d4d4:	5f                   	pop    edi
c001d4d5:	c3                   	ret    

c001d4d6 <Process::Process(char const*, Process*, char**)>:
c001d4d6:	56                   	push   esi
c001d4d7:	53                   	push   ebx
c001d4d8:	83 ec 14             	sub    esp,0x14
c001d4db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4df:	05 0c 02 00 00       	add    eax,0x20c
c001d4e4:	bb 07 00 00 00       	mov    ebx,0x7
c001d4e9:	89 c6                	mov    esi,eax
c001d4eb:	85 db                	test   ebx,ebx
c001d4ed:	78 12                	js     c001d501 <Process::Process(char const*, Process*, char**)+0x2b>
c001d4ef:	83 ec 0c             	sub    esp,0xc
c001d4f2:	56                   	push   esi
c001d4f3:	e8 aa b2 00 00       	call   c00287a2 <ThreadControlBlock::ThreadControlBlock()>
c001d4f8:	83 c4 10             	add    esp,0x10
c001d4fb:	83 c6 63             	add    esi,0x63
c001d4fe:	4b                   	dec    ebx
c001d4ff:	eb ea                	jmp    c001d4eb <Process::Process(char const*, Process*, char**)+0x15>
c001d501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d505:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d50c:	83 ec 0c             	sub    esp,0xc
c001d50f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d513:	e8 c4 ca ff ff       	call   c0019fdc <Krnl::newProcessEnv(Process*)>
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	89 c2                	mov    edx,eax
c001d51d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d521:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d52b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d534:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c001d539:	8d 50 01             	lea    edx,[eax+0x1]
c001d53c:	89 15 70 d3 02 c0    	mov    DWORD PTR ds:0xc002d370,edx
c001d542:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d546:	89 02                	mov    DWORD PTR [edx],eax
c001d548:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d557:	e8 e4 22 ff ff       	call   c000f840 <malloc>
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	89 c3                	mov    ebx,eax
c001d561:	83 ec 08             	sub    esp,0x8
c001d564:	6a 00                	push   0x0
c001d566:	53                   	push   ebx
c001d567:	e8 26 51 ff ff       	call   c0012692 <VAS::VAS(bool)>
c001d56c:	83 c4 10             	add    esp,0x10
c001d56f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d573:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d57d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d58b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d58f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d599:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d59f:	85 c0                	test   eax,eax
c001d5a1:	74 42                	je     c001d5e5 <Process::Process(char const*, Process*, char**)+0x10f>
c001d5a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5a7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5ad:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d5bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5c1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5c7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d5cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5d1:	05 0c 01 00 00       	add    eax,0x10c
c001d5d6:	83 ec 08             	sub    esp,0x8
c001d5d9:	52                   	push   edx
c001d5da:	50                   	push   eax
c001d5db:	e8 54 32 fe ff       	call   c0000834 <strcpy>
c001d5e0:	83 c4 10             	add    esp,0x10
c001d5e3:	eb 63                	jmp    c001d648 <Process::Process(char const*, Process*, char**)+0x172>
c001d5e5:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d5ed:	83 ec 0c             	sub    esp,0xc
c001d5f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5f4:	e8 47 22 ff ff       	call   c000f840 <malloc>
c001d5f9:	83 c4 10             	add    esp,0x10
c001d5fc:	89 c3                	mov    ebx,eax
c001d5fe:	83 ec 08             	sub    esp,0x8
c001d601:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d605:	53                   	push   ebx
c001d606:	e8 51 3b ff ff       	call   c001115c <VgaText::VgaText(char const*)>
c001d60b:	83 c4 10             	add    esp,0x10
c001d60e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d612:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d61c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d622:	83 ec 0c             	sub    esp,0xc
c001d625:	50                   	push   eax
c001d626:	e8 24 2f ff ff       	call   c001054f <addToTerminalCycle(VgaText*)>
c001d62b:	83 c4 10             	add    esp,0x10
c001d62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d632:	05 0c 01 00 00       	add    eax,0x10c
c001d637:	83 ec 08             	sub    esp,0x8
c001d63a:	68 d5 bb 02 c0       	push   0xc002bbd5
c001d63f:	50                   	push   eax
c001d640:	e8 ef 31 fe ff       	call   c0000834 <strcpy>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d64c:	83 c0 0c             	add    eax,0xc
c001d64f:	83 ec 08             	sub    esp,0x8
c001d652:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d656:	50                   	push   eax
c001d657:	e8 d8 31 fe ff       	call   c0000834 <strcpy>
c001d65c:	83 c4 10             	add    esp,0x10
c001d65f:	83 ec 08             	sub    esp,0x8
c001d662:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d666:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d66a:	e8 0d fe ff ff       	call   c001d47c <Process::addArgs(char**)>
c001d66f:	83 c4 10             	add    esp,0x10
c001d672:	83 ec 08             	sub    esp,0x8
c001d675:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d679:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d67d:	e8 88 ee ff ff       	call   c001c50a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d682:	83 c4 10             	add    esp,0x10
c001d685:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d689:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d68d:	83 f0 01             	xor    eax,0x1
c001d690:	88 c2                	mov    dl,al
c001d692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d696:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d69c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d6a1:	83 ec 08             	sub    esp,0x8
c001d6a4:	50                   	push   eax
c001d6a5:	68 d0 bc 02 c0       	push   0xc002bcd0
c001d6aa:	e8 60 54 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001d6af:	83 c4 10             	add    esp,0x10
c001d6b2:	90                   	nop
c001d6b3:	83 c4 14             	add    esp,0x14
c001d6b6:	5b                   	pop    ebx
c001d6b7:	5e                   	pop    esi
c001d6b8:	c3                   	ret    
c001d6b9:	90                   	nop

c001d6ba <Process::Process(bool, char const*, Process*, char**)>:
c001d6ba:	56                   	push   esi
c001d6bb:	53                   	push   ebx
c001d6bc:	83 ec 24             	sub    esp,0x24
c001d6bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d6c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6cb:	05 0c 02 00 00       	add    eax,0x20c
c001d6d0:	bb 07 00 00 00       	mov    ebx,0x7
c001d6d5:	89 c6                	mov    esi,eax
c001d6d7:	85 db                	test   ebx,ebx
c001d6d9:	78 12                	js     c001d6ed <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d6db:	83 ec 0c             	sub    esp,0xc
c001d6de:	56                   	push   esi
c001d6df:	e8 be b0 00 00       	call   c00287a2 <ThreadControlBlock::ThreadControlBlock()>
c001d6e4:	83 c4 10             	add    esp,0x10
c001d6e7:	83 c6 63             	add    esi,0x63
c001d6ea:	4b                   	dec    ebx
c001d6eb:	eb ea                	jmp    c001d6d7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d6ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6f1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d6f8:	83 ec 0c             	sub    esp,0xc
c001d6fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6ff:	e8 d8 c8 ff ff       	call   c0019fdc <Krnl::newProcessEnv(Process*)>
c001d704:	83 c4 10             	add    esp,0x10
c001d707:	89 c2                	mov    edx,eax
c001d709:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d70d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d713:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d717:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d720:	a1 70 d3 02 c0       	mov    eax,ds:0xc002d370
c001d725:	8d 50 01             	lea    edx,[eax+0x1]
c001d728:	89 15 70 d3 02 c0    	mov    DWORD PTR ds:0xc002d370,edx
c001d72e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d732:	89 02                	mov    DWORD PTR [edx],eax
c001d734:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d73c:	83 ec 0c             	sub    esp,0xc
c001d73f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d743:	e8 f8 20 ff ff       	call   c000f840 <malloc>
c001d748:	83 c4 10             	add    esp,0x10
c001d74b:	89 c3                	mov    ebx,eax
c001d74d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d752:	83 ec 08             	sub    esp,0x8
c001d755:	50                   	push   eax
c001d756:	53                   	push   ebx
c001d757:	e8 36 4f ff ff       	call   c0012692 <VAS::VAS(bool)>
c001d75c:	83 c4 10             	add    esp,0x10
c001d75f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d763:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d76d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d777:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d77b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d77f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d789:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d78f:	85 c0                	test   eax,eax
c001d791:	74 42                	je     c001d7d5 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d797:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d79d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d7a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7a7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d7ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7b1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d7b7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d7bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7c1:	05 0c 01 00 00       	add    eax,0x10c
c001d7c6:	83 ec 08             	sub    esp,0x8
c001d7c9:	52                   	push   edx
c001d7ca:	50                   	push   eax
c001d7cb:	e8 64 30 fe ff       	call   c0000834 <strcpy>
c001d7d0:	83 c4 10             	add    esp,0x10
c001d7d3:	eb 63                	jmp    c001d838 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d7d5:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d7dd:	83 ec 0c             	sub    esp,0xc
c001d7e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d7e4:	e8 57 20 ff ff       	call   c000f840 <malloc>
c001d7e9:	83 c4 10             	add    esp,0x10
c001d7ec:	89 c3                	mov    ebx,eax
c001d7ee:	83 ec 08             	sub    esp,0x8
c001d7f1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d7f5:	53                   	push   ebx
c001d7f6:	e8 61 39 ff ff       	call   c001115c <VgaText::VgaText(char const*)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d802:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d808:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d80c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d812:	83 ec 0c             	sub    esp,0xc
c001d815:	50                   	push   eax
c001d816:	e8 34 2d ff ff       	call   c001054f <addToTerminalCycle(VgaText*)>
c001d81b:	83 c4 10             	add    esp,0x10
c001d81e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d822:	05 0c 01 00 00       	add    eax,0x10c
c001d827:	83 ec 08             	sub    esp,0x8
c001d82a:	68 d5 bb 02 c0       	push   0xc002bbd5
c001d82f:	50                   	push   eax
c001d830:	e8 ff 2f fe ff       	call   c0000834 <strcpy>
c001d835:	83 c4 10             	add    esp,0x10
c001d838:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d83c:	83 c0 0c             	add    eax,0xc
c001d83f:	83 ec 08             	sub    esp,0x8
c001d842:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d846:	50                   	push   eax
c001d847:	e8 e8 2f fe ff       	call   c0000834 <strcpy>
c001d84c:	83 c4 10             	add    esp,0x10
c001d84f:	83 ec 08             	sub    esp,0x8
c001d852:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d856:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d85a:	e8 1d fc ff ff       	call   c001d47c <Process::addArgs(char**)>
c001d85f:	83 c4 10             	add    esp,0x10
c001d862:	90                   	nop
c001d863:	83 c4 24             	add    esp,0x24
c001d866:	5b                   	pop    ebx
c001d867:	5e                   	pop    esi
c001d868:	c3                   	ret    

c001d869 <disableIRQs()>:
c001d869:	fa                   	cli    
c001d86a:	ff 05 2c 13 03 c0    	inc    DWORD PTR ds:0xc003132c
c001d870:	c3                   	ret    

c001d871 <getIRQNestingLevel()>:
c001d871:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c001d876:	c3                   	ret    

c001d877 <enableIRQs()>:
c001d877:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c001d87c:	48                   	dec    eax
c001d87d:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c001d882:	75 01                	jne    c001d885 <enableIRQs()+0xe>
c001d884:	fb                   	sti    
c001d885:	c3                   	ret    

c001d886 <lockScheduler()>:
c001d886:	eb e1                	jmp    c001d869 <disableIRQs()>

c001d888 <unlockScheduler()>:
c001d888:	eb ed                	jmp    c001d877 <enableIRQs()>

c001d88a <userModeEntryPoint(void*)>:
c001d88a:	83 ec 0c             	sub    esp,0xc
c001d88d:	e8 f6 ff ff ff       	call   c001d888 <unlockScheduler()>
c001d892:	fb                   	sti    
c001d893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d898:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d89b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d8a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d8a5:	83 c4 0c             	add    esp,0xc
c001d8a8:	e9 7d 2a fe ff       	jmp    c000032a <goToUsermode>

c001d8ad <lockStuff()>:
c001d8ad:	e8 b7 ff ff ff       	call   c001d869 <disableIRQs()>
c001d8b2:	ff 05 28 13 03 c0    	inc    DWORD PTR ds:0xc0031328
c001d8b8:	c3                   	ret    

c001d8b9 <taskStartupFunction>:
c001d8b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8be:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d8c1:	c3                   	ret    

c001d8c2 <updateTimeUsed()>:
c001d8c2:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c001d8c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d8cd:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d8d4:	74 50                	je     c001d926 <updateTimeUsed()+0x64>
c001d8d6:	57                   	push   edi
c001d8d7:	56                   	push   esi
c001d8d8:	53                   	push   ebx
c001d8d9:	0f 31                	rdtsc  
c001d8db:	89 c1                	mov    ecx,eax
c001d8dd:	a3 68 13 03 c0       	mov    ds:0xc0031368,eax
c001d8e2:	2b 0d 58 13 03 c0    	sub    ecx,DWORD PTR ds:0xc0031358
c001d8e8:	89 d3                	mov    ebx,edx
c001d8ea:	89 0d 60 13 03 c0    	mov    DWORD PTR ds:0xc0031360,ecx
c001d8f0:	1b 1d 5c 13 03 c0    	sbb    ebx,DWORD PTR ds:0xc003135c
c001d8f6:	a3 58 13 03 c0       	mov    ds:0xc0031358,eax
c001d8fb:	89 1d 64 13 03 c0    	mov    DWORD PTR ds:0xc0031364,ebx
c001d901:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d906:	89 15 6c 13 03 c0    	mov    DWORD PTR ds:0xc003136c,edx
c001d90c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d90f:	89 15 5c 13 03 c0    	mov    DWORD PTR ds:0xc003135c,edx
c001d915:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d918:	01 f1                	add    ecx,esi
c001d91a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d91d:	11 fb                	adc    ebx,edi
c001d91f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d922:	5b                   	pop    ebx
c001d923:	5e                   	pop    esi
c001d924:	5f                   	pop    edi
c001d925:	c3                   	ret    
c001d926:	c3                   	ret    

c001d927 <switchToThread(ThreadControlBlock*)>:
c001d927:	53                   	push   ebx
c001d928:	83 ec 08             	sub    esp,0x8
c001d92b:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c001d930:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d934:	85 c0                	test   eax,eax
c001d936:	75 30                	jne    c001d968 <switchToThread(ThreadControlBlock*)+0x41>
c001d938:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d93b:	3c ff                	cmp    al,0xff
c001d93d:	74 25                	je     c001d964 <switchToThread(ThreadControlBlock*)+0x3d>
c001d93f:	0f b6 d0             	movzx  edx,al
c001d942:	b8 84 03 00 00       	mov    eax,0x384
c001d947:	29 d0                	sub    eax,edx
c001d949:	c1 e0 10             	shl    eax,0x10
c001d94c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d94f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d952:	e8 6b ff ff ff       	call   c001d8c2 <updateTimeUsed()>
c001d957:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d95b:	83 c4 08             	add    esp,0x8
c001d95e:	5b                   	pop    ebx
c001d95f:	e9 fe 29 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d964:	31 c0                	xor    eax,eax
c001d966:	eb e7                	jmp    c001d94f <switchToThread(ThreadControlBlock*)+0x28>
c001d968:	c7 05 24 13 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031324,0x1
c001d972:	83 c4 08             	add    esp,0x8
c001d975:	5b                   	pop    ebx
c001d976:	c3                   	ret    
c001d977:	90                   	nop

c001d978 <Semaphore::Semaphore(int)>:
c001d978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d97c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d980:	89 10                	mov    DWORD PTR [eax],edx
c001d982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d986:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d98d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d991:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d99c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d9a3:	90                   	nop
c001d9a4:	c3                   	ret    
c001d9a5:	90                   	nop

c001d9a6 <Mutex::Mutex()>:
c001d9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9aa:	6a 01                	push   0x1
c001d9ac:	50                   	push   eax
c001d9ad:	e8 c6 ff ff ff       	call   c001d978 <Semaphore::Semaphore(int)>
c001d9b2:	83 c4 08             	add    esp,0x8
c001d9b5:	90                   	nop
c001d9b6:	c3                   	ret    
c001d9b7:	90                   	nop

c001d9b8 <Process::createThread(void (*)(void*), void*, int)>:
c001d9b8:	55                   	push   ebp
c001d9b9:	31 c9                	xor    ecx,ecx
c001d9bb:	57                   	push   edi
c001d9bc:	56                   	push   esi
c001d9bd:	53                   	push   ebx
c001d9be:	83 ec 1c             	sub    esp,0x1c
c001d9c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d9c5:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d9cc:	89 f2                	mov    edx,esi
c001d9ce:	0f b7 c2             	movzx  eax,dx
c001d9d1:	83 e2 01             	and    edx,0x1
c001d9d4:	74 14                	je     c001d9ea <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d9d6:	d1 f8                	sar    eax,1
c001d9d8:	41                   	inc    ecx
c001d9d9:	89 c2                	mov    edx,eax
c001d9db:	83 f9 10             	cmp    ecx,0x10
c001d9de:	75 ee                	jne    c001d9ce <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d9e0:	83 c4 1c             	add    esp,0x1c
c001d9e3:	31 c0                	xor    eax,eax
c001d9e5:	5b                   	pop    ebx
c001d9e6:	5e                   	pop    esi
c001d9e7:	5f                   	pop    edi
c001d9e8:	5d                   	pop    ebp
c001d9e9:	c3                   	ret    
c001d9ea:	83 ec 08             	sub    esp,0x8
c001d9ed:	b8 01 00 00 00       	mov    eax,0x1
c001d9f2:	d3 e0                	shl    eax,cl
c001d9f4:	09 c6                	or     esi,eax
c001d9f6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d9fc:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001da03:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001da06:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001da09:	01 ce                	add    esi,ecx
c001da0b:	89 f0                	mov    eax,esi
c001da0d:	c1 e0 05             	shl    eax,0x5
c001da10:	01 c6                	add    esi,eax
c001da12:	8d 04 33             	lea    eax,[ebx+esi*1]
c001da15:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001da1b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001da21:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001da25:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001da2b:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001da31:	89 ca                	mov    edx,ecx
c001da33:	f7 da                	neg    edx
c001da35:	c1 e2 15             	shl    edx,0x15
c001da38:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001da3e:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001da44:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001da48:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001da52:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001da58:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da5c:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001da62:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001da6c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001da76:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001da7d:	50                   	push   eax
c001da7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001da82:	68 48 13 03 c0       	push   0xc0031348
c001da87:	e8 a4 ab 00 00       	call   c0028630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da8c:	83 c4 10             	add    esp,0x10
c001da8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da93:	83 c4 1c             	add    esp,0x1c
c001da96:	5b                   	pop    ebx
c001da97:	5e                   	pop    esi
c001da98:	5f                   	pop    edi
c001da99:	5d                   	pop    ebp
c001da9a:	c3                   	ret    
c001da9b:	90                   	nop

c001da9c <Process::createUserThread()>:
c001da9c:	83 ec 0c             	sub    esp,0xc
c001da9f:	68 80 00 00 00       	push   0x80
c001daa4:	6a 00                	push   0x0
c001daa6:	68 8a d8 01 c0       	push   0xc001d88a
c001daab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001daaf:	e8 04 ff ff ff       	call   c001d9b8 <Process::createThread(void (*)(void*), void*, int)>
c001dab4:	83 c4 1c             	add    esp,0x1c
c001dab7:	c3                   	ret    

c001dab8 <setupMultitasking(void (*)())>:
c001dab8:	56                   	push   esi
c001dab9:	53                   	push   ebx
c001daba:	53                   	push   ebx
c001dabb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dabf:	eb 10                	jmp    c001dad1 <setupMultitasking(void (*)())+0x19>
c001dac1:	83 ec 0c             	sub    esp,0xc
c001dac4:	68 48 13 03 c0       	push   0xc0031348
c001dac9:	e8 b4 aa 00 00       	call   c0028582 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dace:	83 c4 10             	add    esp,0x10
c001dad1:	83 ec 0c             	sub    esp,0xc
c001dad4:	68 48 13 03 c0       	push   0xc0031348
c001dad9:	e8 88 aa 00 00       	call   c0028566 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dade:	83 c4 10             	add    esp,0x10
c001dae1:	84 c0                	test   al,al
c001dae3:	74 dc                	je     c001dac1 <setupMultitasking(void (*)())+0x9>
c001dae5:	83 ec 0c             	sub    esp,0xc
c001dae8:	68 3f 07 00 00       	push   0x73f
c001daed:	e8 4e 1d ff ff       	call   c000f840 <malloc>
c001daf2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001daf9:	89 c3                	mov    ebx,eax
c001dafb:	6a 00                	push   0x0
c001dafd:	68 d9 bb 02 c0       	push   0xc002bbd9
c001db02:	6a 01                	push   0x1
c001db04:	50                   	push   eax
c001db05:	e8 b0 fb ff ff       	call   c001d6ba <Process::Process(bool, char const*, Process*, char**)>
c001db0a:	83 c4 18             	add    esp,0x18
c001db0d:	89 1d 54 13 03 c0    	mov    DWORD PTR ds:0xc0031354,ebx
c001db13:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001db19:	68 f8 bc 02 c0       	push   0xc002bcf8
c001db1e:	e8 ec 4f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001db23:	58                   	pop    eax
c001db24:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001db2a:	e8 a2 31 ff ff       	call   c0010cd1 <setActiveTerminal(VgaText*)>
c001db2f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001db37:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001db3d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001db40:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001db4a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001db50:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001db56:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001db60:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001db6a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001db74:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001db7a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001db80:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001db8a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001db90:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001db9a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dba0:	5a                   	pop    edx
c001dba1:	59                   	pop    ecx
c001dba2:	68 d5 bb 02 c0       	push   0xc002bbd5
c001dba7:	50                   	push   eax
c001dba8:	e8 87 2c fe ff       	call   c0000834 <strcpy>
c001dbad:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dbb4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dbb8:	83 c4 14             	add    esp,0x14
c001dbbb:	5b                   	pop    ebx
c001dbbc:	5e                   	pop    esi
c001dbbd:	e9 92 27 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dbc2 <schedule()>:
c001dbc2:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c001dbc7:	85 c0                	test   eax,eax
c001dbc9:	74 0b                	je     c001dbd6 <schedule()+0x14>
c001dbcb:	c7 05 24 13 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031324,0x1
c001dbd5:	c3                   	ret    
c001dbd6:	53                   	push   ebx
c001dbd7:	83 ec 14             	sub    esp,0x14
c001dbda:	68 48 13 03 c0       	push   0xc0031348
c001dbdf:	e8 82 a9 00 00       	call   c0028566 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dbe4:	83 c4 10             	add    esp,0x10
c001dbe7:	84 c0                	test   al,al
c001dbe9:	75 38                	jne    c001dc23 <schedule()+0x61>
c001dbeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbf0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dbf3:	4a                   	dec    edx
c001dbf4:	74 32                	je     c001dc28 <schedule()+0x66>
c001dbf6:	83 ec 0c             	sub    esp,0xc
c001dbf9:	68 48 13 03 c0       	push   0xc0031348
c001dbfe:	e8 5b a9 00 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc03:	c7 04 24 48 13 03 c0 	mov    DWORD PTR [esp],0xc0031348
c001dc0a:	89 c3                	mov    ebx,eax
c001dc0c:	e8 71 a9 00 00       	call   c0028582 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc11:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dc18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc1b:	e8 07 fd ff ff       	call   c001d927 <switchToThread(ThreadControlBlock*)>
c001dc20:	83 c4 10             	add    esp,0x10
c001dc23:	83 c4 08             	add    esp,0x8
c001dc26:	5b                   	pop    ebx
c001dc27:	c3                   	ret    
c001dc28:	83 ec 08             	sub    esp,0x8
c001dc2b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dc32:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc38:	68 48 13 03 c0       	push   0xc0031348
c001dc3d:	e8 ee a9 00 00       	call   c0028630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc42:	83 c4 10             	add    esp,0x10
c001dc45:	eb af                	jmp    c001dbf6 <schedule()+0x34>

c001dc47 <unlockStuff()>:
c001dc47:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c001dc4c:	48                   	dec    eax
c001dc4d:	a3 28 13 03 c0       	mov    ds:0xc0031328,eax
c001dc52:	75 09                	jne    c001dc5d <unlockStuff()+0x16>
c001dc54:	a1 24 13 03 c0       	mov    eax,ds:0xc0031324
c001dc59:	85 c0                	test   eax,eax
c001dc5b:	75 05                	jne    c001dc62 <unlockStuff()+0x1b>
c001dc5d:	e9 15 fc ff ff       	jmp    c001d877 <enableIRQs()>
c001dc62:	83 ec 0c             	sub    esp,0xc
c001dc65:	c7 05 24 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031324,0x0
c001dc6f:	e8 4e ff ff ff       	call   c001dbc2 <schedule()>
c001dc74:	83 c4 0c             	add    esp,0xc
c001dc77:	e9 fb fb ff ff       	jmp    c001d877 <enableIRQs()>

c001dc7c <Semaphore::tryAcquire()>:
c001dc7c:	83 ec 0c             	sub    esp,0xc
c001dc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc83:	e8 25 fc ff ff       	call   c001d8ad <lockStuff()>
c001dc88:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dc8b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dc8d:	7c 0b                	jl     c001dc9a <Semaphore::tryAcquire()+0x1e>
c001dc8f:	e8 b3 ff ff ff       	call   c001dc47 <unlockStuff()>
c001dc94:	31 c0                	xor    eax,eax
c001dc96:	83 c4 0c             	add    esp,0xc
c001dc99:	c3                   	ret    
c001dc9a:	42                   	inc    edx
c001dc9b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dc9e:	e8 a4 ff ff ff       	call   c001dc47 <unlockStuff()>
c001dca3:	b0 01                	mov    al,0x1
c001dca5:	83 c4 0c             	add    esp,0xc
c001dca8:	c3                   	ret    
c001dca9:	90                   	nop

c001dcaa <Semaphore::assertLocked(char const*)>:
c001dcaa:	83 ec 0c             	sub    esp,0xc
c001dcad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dcb5:	e8 f3 fb ff ff       	call   c001d8ad <lockStuff()>
c001dcba:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcbc:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001dcbf:	7c 05                	jl     c001dcc6 <Semaphore::assertLocked(char const*)+0x1c>
c001dcc1:	83 c4 0c             	add    esp,0xc
c001dcc4:	eb 81                	jmp    c001dc47 <unlockStuff()>
c001dcc6:	83 ec 0c             	sub    esp,0xc
c001dcc9:	52                   	push   edx
c001dcca:	e8 bc c4 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001dccf:	83 c4 10             	add    esp,0x10
c001dcd2:	83 c4 0c             	add    esp,0xc
c001dcd5:	e9 6d ff ff ff       	jmp    c001dc47 <unlockStuff()>

c001dcda <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dcda:	83 ec 0c             	sub    esp,0xc
c001dcdd:	e8 8f fb ff ff       	call   c001d871 <getIRQNestingLevel()>
c001dce2:	83 ec 08             	sub    esp,0x8
c001dce5:	50                   	push   eax
c001dce6:	68 2c bd 02 c0       	push   0xc002bd2c
c001dceb:	e8 1f 4e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001dcf0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dcf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcf9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dcfc:	e8 c1 fe ff ff       	call   c001dbc2 <schedule()>
c001dd01:	e8 82 fb ff ff       	call   c001d888 <unlockScheduler()>
c001dd06:	e8 66 fb ff ff       	call   c001d871 <getIRQNestingLevel()>
c001dd0b:	5a                   	pop    edx
c001dd0c:	59                   	pop    ecx
c001dd0d:	50                   	push   eax
c001dd0e:	68 60 bd 02 c0       	push   0xc002bd60
c001dd13:	e8 f7 4d ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001dd18:	83 c4 1c             	add    esp,0x1c
c001dd1b:	c3                   	ret    

c001dd1c <blockTask(TaskState)>:
c001dd1c:	83 ec 0c             	sub    esp,0xc
c001dd1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd23:	e8 5e fb ff ff       	call   c001d886 <lockScheduler()>
c001dd28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd2d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dd30:	e8 8d fe ff ff       	call   c001dbc2 <schedule()>
c001dd35:	83 c4 0c             	add    esp,0xc
c001dd38:	e9 4b fb ff ff       	jmp    c001d888 <unlockScheduler()>

c001dd3d <waitTask(int, int*, int)>:
c001dd3d:	83 ec 18             	sub    esp,0x18
c001dd40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd49:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dd4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dd50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd55:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dd58:	6a 07                	push   0x7
c001dd5a:	e8 bd ff ff ff       	call   c001dd1c <blockTask(TaskState)>
c001dd5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd64:	83 c4 10             	add    esp,0x10
c001dd67:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dd6a:	85 d2                	test   edx,edx
c001dd6c:	74 0a                	je     c001dd78 <waitTask(int, int*, int)+0x3b>
c001dd6e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dd71:	89 02                	mov    DWORD PTR [edx],eax
c001dd73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd78:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dd7b:	83 c4 0c             	add    esp,0xc
c001dd7e:	c3                   	ret    

c001dd7f <nanoSleepUntil(unsigned long long)>:
c001dd7f:	83 ec 0c             	sub    esp,0xc
c001dd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd8a:	3b 05 70 e4 02 c0    	cmp    eax,DWORD PTR ds:0xc002e470
c001dd90:	89 d1                	mov    ecx,edx
c001dd92:	1b 0d 74 e4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e474
c001dd98:	73 04                	jae    c001dd9e <nanoSleepUntil(unsigned long long)+0x1f>
c001dd9a:	83 c4 0c             	add    esp,0xc
c001dd9d:	c3                   	ret    
c001dd9e:	e8 0a fb ff ff       	call   c001d8ad <lockStuff()>
c001dda3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dda9:	83 ec 08             	sub    esp,0x8
c001ddac:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001ddaf:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001ddb2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001ddb8:	68 3c 13 03 c0       	push   0xc003133c
c001ddbd:	e8 6e a8 00 00       	call   c0028630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddc2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001ddc9:	e8 4e ff ff ff       	call   c001dd1c <blockTask(TaskState)>
c001ddce:	83 c4 1c             	add    esp,0x1c
c001ddd1:	e9 71 fe ff ff       	jmp    c001dc47 <unlockStuff()>

c001ddd6 <nanoSleep(unsigned long long)>:
c001ddd6:	a1 70 e4 02 c0       	mov    eax,ds:0xc002e470
c001dddb:	8b 15 74 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e474
c001dde1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dde5:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dde9:	eb 94                	jmp    c001dd7f <nanoSleepUntil(unsigned long long)>

c001ddeb <sleep(unsigned long long)>:
c001ddeb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001ddf3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001ddf8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001ddfc:	01 ca                	add    edx,ecx
c001ddfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001de02:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001de06:	eb ce                	jmp    c001ddd6 <nanoSleep(unsigned long long)>

c001de08 <Semaphore::acquire()>:
c001de08:	83 ec 0c             	sub    esp,0xc
c001de0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0f:	e8 99 fa ff ff       	call   c001d8ad <lockStuff()>
c001de14:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001de17:	3b 10                	cmp    edx,DWORD PTR [eax]
c001de19:	7d 0c                	jge    c001de27 <Semaphore::acquire()+0x1f>
c001de1b:	42                   	inc    edx
c001de1c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001de1f:	83 c4 0c             	add    esp,0xc
c001de22:	e9 20 fe ff ff       	jmp    c001dc47 <unlockStuff()>
c001de27:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001de2d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001de34:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001de37:	85 d2                	test   edx,edx
c001de39:	74 2a                	je     c001de65 <Semaphore::acquire()+0x5d>
c001de3b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001de3e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001de44:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001de47:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001de4d:	83 ec 0c             	sub    esp,0xc
c001de50:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001de53:	6a 05                	push   0x5
c001de55:	e8 c2 fe ff ff       	call   c001dd1c <blockTask(TaskState)>
c001de5a:	83 c4 10             	add    esp,0x10
c001de5d:	83 c4 0c             	add    esp,0xc
c001de60:	e9 e2 fd ff ff       	jmp    c001dc47 <unlockStuff()>
c001de65:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001de6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001de6e:	eb d7                	jmp    c001de47 <Semaphore::acquire()+0x3f>

c001de70 <taskReturned>:
c001de70:	83 ec 18             	sub    esp,0x18
c001de73:	68 94 bd 02 c0       	push   0xc002bd94
c001de78:	e8 0e c3 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001de7d:	83 c4 10             	add    esp,0x10
c001de80:	83 ec 0c             	sub    esp,0xc
c001de83:	6a 02                	push   0x2
c001de85:	e8 92 fe ff ff       	call   c001dd1c <blockTask(TaskState)>
c001de8a:	e8 f7 f9 ff ff       	call   c001d886 <lockScheduler()>
c001de8f:	e8 2e fd ff ff       	call   c001dbc2 <schedule()>
c001de94:	e8 ef f9 ff ff       	call   c001d888 <unlockScheduler()>
c001de99:	83 c4 10             	add    esp,0x10
c001de9c:	eb e2                	jmp    c001de80 <taskReturned+0x10>

c001de9e <unblockTask(ThreadControlBlock*)>:
c001de9e:	53                   	push   ebx
c001de9f:	83 ec 08             	sub    esp,0x8
c001dea2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dea6:	e8 db f9 ff ff       	call   c001d886 <lockScheduler()>
c001deab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001deae:	85 c0                	test   eax,eax
c001deb0:	74 5c                	je     c001df0e <unblockTask(ThreadControlBlock*)+0x70>
c001deb2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001deb5:	48                   	dec    eax
c001deb6:	74 31                	je     c001dee9 <unblockTask(ThreadControlBlock*)+0x4b>
c001deb8:	83 ec 0c             	sub    esp,0xc
c001debb:	68 48 13 03 c0       	push   0xc0031348
c001dec0:	e8 99 a6 00 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dec5:	83 c4 10             	add    esp,0x10
c001dec8:	85 c0                	test   eax,eax
c001deca:	75 17                	jne    c001dee3 <unblockTask(ThreadControlBlock*)+0x45>
c001decc:	eb 65                	jmp    c001df33 <unblockTask(ThreadControlBlock*)+0x95>
c001dece:	83 ec 08             	sub    esp,0x8
c001ded1:	50                   	push   eax
c001ded2:	68 48 13 03 c0       	push   0xc0031348
c001ded7:	e8 5c a9 00 00       	call   c0028838 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dedc:	83 c4 10             	add    esp,0x10
c001dedf:	85 c0                	test   eax,eax
c001dee1:	74 50                	je     c001df33 <unblockTask(ThreadControlBlock*)+0x95>
c001dee3:	39 c3                	cmp    ebx,eax
c001dee5:	75 e7                	jne    c001dece <unblockTask(ThreadControlBlock*)+0x30>
c001dee7:	eb 1c                	jmp    c001df05 <unblockTask(ThreadControlBlock*)+0x67>
c001dee9:	83 ec 0c             	sub    esp,0xc
c001deec:	68 84 be 02 c0       	push   0xc002be84
c001def1:	e8 19 4c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001def6:	c7 04 24 10 be 02 c0 	mov    DWORD PTR [esp],0xc002be10
c001defd:	e8 0d 4c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001df02:	83 c4 10             	add    esp,0x10
c001df05:	83 c4 08             	add    esp,0x8
c001df08:	5b                   	pop    ebx
c001df09:	e9 7a f9 ff ff       	jmp    c001d888 <unlockScheduler()>
c001df0e:	83 ec 0c             	sub    esp,0xc
c001df11:	68 c8 bd 02 c0       	push   0xc002bdc8
c001df16:	e8 f4 4b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001df1b:	c7 04 24 10 be 02 c0 	mov    DWORD PTR [esp],0xc002be10
c001df22:	e8 e8 4b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001df27:	83 c4 10             	add    esp,0x10
c001df2a:	83 c4 08             	add    esp,0x8
c001df2d:	5b                   	pop    ebx
c001df2e:	e9 55 f9 ff ff       	jmp    c001d888 <unlockScheduler()>
c001df33:	83 ec 08             	sub    esp,0x8
c001df36:	53                   	push   ebx
c001df37:	68 48 13 03 c0       	push   0xc0031348
c001df3c:	e8 ef a6 00 00       	call   c0028630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df41:	83 c4 10             	add    esp,0x10
c001df44:	83 c4 08             	add    esp,0x8
c001df47:	5b                   	pop    ebx
c001df48:	e9 3b f9 ff ff       	jmp    c001d888 <unlockScheduler()>

c001df4d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001df4d:	55                   	push   ebp
c001df4e:	57                   	push   edi
c001df4f:	56                   	push   esi
c001df50:	53                   	push   ebx
c001df51:	83 ec 1c             	sub    esp,0x1c
c001df54:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df58:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df5b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001df61:	85 ff                	test   edi,edi
c001df63:	7e 20                	jle    c001df85 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001df65:	31 f6                	xor    esi,esi
c001df67:	83 ec 0c             	sub    esp,0xc
c001df6a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001df71:	46                   	inc    esi
c001df72:	e8 d9 18 ff ff       	call   c000f850 <free>
c001df77:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df7a:	83 c4 10             	add    esp,0x10
c001df7d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001df83:	7f e2                	jg     c001df67 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001df85:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df8f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df94:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df97:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df9a:	d3 c0                	rol    eax,cl
c001df9c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dfa3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfa6:	89 f7                	mov    edi,esi
c001dfa8:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dfb0:	0f 85 74 01 00 00    	jne    c001e12a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001dfb6:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dfbc:	85 ed                	test   ebp,ebp
c001dfbe:	74 1b                	je     c001dfdb <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dfc0:	83 ec 0c             	sub    esp,0xc
c001dfc3:	55                   	push   ebp
c001dfc4:	e8 2f bf ff ff       	call   c0019ef8 <EnvVarContainer::~EnvVarContainer()>
c001dfc9:	59                   	pop    ecx
c001dfca:	5e                   	pop    esi
c001dfcb:	6a 0c                	push   0xc
c001dfcd:	55                   	push   ebp
c001dfce:	e8 5c 4a ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c001dfd3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfd6:	83 c4 10             	add    esp,0x10
c001dfd9:	89 f7                	mov    edi,esi
c001dfdb:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfe1:	85 c0                	test   eax,eax
c001dfe3:	0f 84 aa 00 00 00    	je     c001e093 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dfe9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001dfec:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dff0:	31 c9                	xor    ecx,ecx
c001dff2:	eb 10                	jmp    c001e004 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001dff4:	41                   	inc    ecx
c001dff5:	83 f9 10             	cmp    ecx,0x10
c001dff8:	0f 84 95 00 00 00    	je     c001e093 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dffe:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e004:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e00b:	d3 fa                	sar    edx,cl
c001e00d:	83 e2 01             	and    edx,0x1
c001e010:	74 e2                	je     c001dff4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e012:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e015:	01 ca                	add    edx,ecx
c001e017:	89 d5                	mov    ebp,edx
c001e019:	c1 e5 05             	shl    ebp,0x5
c001e01c:	01 ea                	add    edx,ebp
c001e01e:	01 d0                	add    eax,edx
c001e020:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e026:	83 fd 07             	cmp    ebp,0x7
c001e029:	75 c9                	jne    c001dff4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e02b:	05 40 02 00 00       	add    eax,0x240
c001e030:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e033:	83 fd ff             	cmp    ebp,0xffffffff
c001e036:	0f 8c 08 01 00 00    	jl     c001e144 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e03c:	0f 84 b9 01 00 00    	je     c001e1fb <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e042:	85 ed                	test   ebp,ebp
c001e044:	0f 84 a0 01 00 00    	je     c001e1ea <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e04a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e04c:	75 a6                	jne    c001dff4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e04e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e054:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e058:	01 d0                	add    eax,edx
c001e05a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e05e:	83 ec 0c             	sub    esp,0xc
c001e061:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e067:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e06a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e070:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e077:	50                   	push   eax
c001e078:	e8 21 fe ff ff       	call   c001de9e <unblockTask(ThreadControlBlock*)>
c001e07d:	83 c4 10             	add    esp,0x10
c001e080:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e083:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e087:	89 f7                	mov    edi,esi
c001e089:	41                   	inc    ecx
c001e08a:	83 f9 10             	cmp    ecx,0x10
c001e08d:	0f 85 6b ff ff ff    	jne    c001dffe <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e093:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e099:	85 c0                	test   eax,eax
c001e09b:	74 5d                	je     c001e0fa <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e09d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e0a3:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e0a9:	74 4f                	je     c001e0fa <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e0ab:	83 ec 0c             	sub    esp,0xc
c001e0ae:	68 48 13 03 c0       	push   0xc0031348
c001e0b3:	e8 a6 a4 00 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0b8:	c7 04 24 48 13 03 c0 	mov    DWORD PTR [esp],0xc0031348
c001e0bf:	89 c7                	mov    edi,eax
c001e0c1:	e8 a0 a4 00 00       	call   c0028566 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0c6:	83 c4 10             	add    esp,0x10
c001e0c9:	84 c0                	test   al,al
c001e0cb:	0f 84 e4 00 00 00    	je     c001e1b5 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e0d1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0d4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e0da:	85 d2                	test   edx,edx
c001e0dc:	74 0f                	je     c001e0ed <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e0de:	83 ec 0c             	sub    esp,0xc
c001e0e1:	8b 02                	mov    eax,DWORD PTR [edx]
c001e0e3:	52                   	push   edx
c001e0e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e0e7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0ea:	83 c4 10             	add    esp,0x10
c001e0ed:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e0f7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e0fa:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e100:	85 db                	test   ebx,ebx
c001e102:	74 16                	je     c001e11a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e104:	83 ec 0c             	sub    esp,0xc
c001e107:	53                   	push   ebx
c001e108:	e8 71 3f ff ff       	call   c001207e <VAS::~VAS()>
c001e10d:	58                   	pop    eax
c001e10e:	5a                   	pop    edx
c001e10f:	6a 10                	push   0x10
c001e111:	53                   	push   ebx
c001e112:	e8 18 49 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c001e117:	83 c4 10             	add    esp,0x10
c001e11a:	83 ec 0c             	sub    esp,0xc
c001e11d:	68 e0 bb 02 c0       	push   0xc002bbe0
c001e122:	e8 e8 49 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e127:	83 c4 10             	add    esp,0x10
c001e12a:	83 ec 08             	sub    esp,0x8
c001e12d:	68 3f 07 00 00       	push   0x73f
c001e132:	68 ee bb 02 c0       	push   0xc002bbee
c001e137:	e8 d3 49 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e13c:	83 c4 2c             	add    esp,0x2c
c001e13f:	5b                   	pop    ebx
c001e140:	5e                   	pop    esi
c001e141:	5f                   	pop    edi
c001e142:	5d                   	pop    ebp
c001e143:	c3                   	ret    
c001e144:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e148:	83 ec 0c             	sub    esp,0xc
c001e14b:	68 c8 be 02 c0       	push   0xc002bec8
c001e150:	e8 36 c0 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001e155:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e158:	83 c4 10             	add    esp,0x10
c001e15b:	89 f7                	mov    edi,esi
c001e15d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e161:	e9 8e fe ff ff       	jmp    c001dff4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e166:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e16c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e172:	75 1c                	jne    c001e190 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e174:	83 ec 0c             	sub    esp,0xc
c001e177:	68 30 bf 02 c0       	push   0xc002bf30
c001e17c:	e8 8e 49 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e181:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e188:	e8 8f fb ff ff       	call   c001dd1c <blockTask(TaskState)>
c001e18d:	83 c4 10             	add    esp,0x10
c001e190:	83 ec 08             	sub    esp,0x8
c001e193:	56                   	push   esi
c001e194:	68 48 13 03 c0       	push   0xc0031348
c001e199:	e8 92 a4 00 00       	call   c0028630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e19e:	c7 04 24 48 13 03 c0 	mov    DWORD PTR [esp],0xc0031348
c001e1a5:	e8 b4 a3 00 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1aa:	83 c4 10             	add    esp,0x10
c001e1ad:	39 f8                	cmp    eax,edi
c001e1af:	0f 84 1c ff ff ff    	je     c001e0d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e1b5:	83 ec 0c             	sub    esp,0xc
c001e1b8:	68 48 13 03 c0       	push   0xc0031348
c001e1bd:	e8 9c a3 00 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1c2:	c7 04 24 48 13 03 c0 	mov    DWORD PTR [esp],0xc0031348
c001e1c9:	89 c6                	mov    esi,eax
c001e1cb:	e8 b2 a3 00 00       	call   c0028582 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1d0:	83 c4 10             	add    esp,0x10
c001e1d3:	39 f3                	cmp    ebx,esi
c001e1d5:	74 b9                	je     c001e190 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e1d7:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e1da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1dd:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e1e3:	75 ab                	jne    c001e190 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e1e5:	e9 7c ff ff ff       	jmp    c001e166 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e1ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e1ee:	83 ec 0c             	sub    esp,0xc
c001e1f1:	68 fc be 02 c0       	push   0xc002befc
c001e1f6:	e9 55 ff ff ff       	jmp    c001e150 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e1fb:	8b 36                	mov    esi,DWORD PTR [esi]
c001e1fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e201:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e204:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e207:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e20d:	01 d7                	add    edi,edx
c001e20f:	89 f8                	mov    eax,edi
c001e211:	e9 44 fe ff ff       	jmp    c001e05a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e216 <cleanerTaskFunction(void*)>:
c001e216:	53                   	push   ebx
c001e217:	83 ec 08             	sub    esp,0x8
c001e21a:	e8 69 f6 ff ff       	call   c001d888 <unlockScheduler()>
c001e21f:	e8 62 f6 ff ff       	call   c001d886 <lockScheduler()>
c001e224:	80 3d 0c 13 03 c0 00 	cmp    BYTE PTR ds:0xc003130c,0x0
c001e22b:	0f 85 8e 00 00 00    	jne    c001e2bf <cleanerTaskFunction(void*)+0xa9>
c001e231:	83 ec 0c             	sub    esp,0xc
c001e234:	6a 02                	push   0x2
c001e236:	e8 9f fa ff ff       	call   c001dcda <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e23b:	83 c4 10             	add    esp,0x10
c001e23e:	c6 05 0c 13 03 c0 00 	mov    BYTE PTR ds:0xc003130c,0x0
c001e245:	e8 63 f6 ff ff       	call   c001d8ad <lockStuff()>
c001e24a:	e8 37 f6 ff ff       	call   c001d886 <lockScheduler()>
c001e24f:	83 ec 0c             	sub    esp,0xc
c001e252:	68 30 13 03 c0       	push   0xc0031330
c001e257:	e8 0a a3 00 00       	call   c0028566 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e25c:	83 c4 10             	add    esp,0x10
c001e25f:	84 c0                	test   al,al
c001e261:	75 40                	jne    c001e2a3 <cleanerTaskFunction(void*)+0x8d>
c001e263:	83 ec 0c             	sub    esp,0xc
c001e266:	68 30 13 03 c0       	push   0xc0031330
c001e26b:	e8 ee a2 00 00       	call   c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e270:	c7 04 24 30 13 03 c0 	mov    DWORD PTR [esp],0xc0031330
c001e277:	89 c3                	mov    ebx,eax
c001e279:	e8 04 a3 00 00       	call   c0028582 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e27e:	c7 04 24 04 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc04
c001e285:	e8 85 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e28a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e28d:	e8 bb fc ff ff       	call   c001df4d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e292:	c7 04 24 1d bc 02 c0 	mov    DWORD PTR [esp],0xc002bc1d
c001e299:	e8 71 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e29e:	83 c4 10             	add    esp,0x10
c001e2a1:	eb ac                	jmp    c001e24f <cleanerTaskFunction(void*)+0x39>
c001e2a3:	e8 e0 f5 ff ff       	call   c001d888 <unlockScheduler()>
c001e2a8:	e8 9a f9 ff ff       	call   c001dc47 <unlockStuff()>
c001e2ad:	e8 d4 f5 ff ff       	call   c001d886 <lockScheduler()>
c001e2b2:	80 3d 0c 13 03 c0 00 	cmp    BYTE PTR ds:0xc003130c,0x0
c001e2b9:	0f 84 72 ff ff ff    	je     c001e231 <cleanerTaskFunction(void*)+0x1b>
c001e2bf:	e8 c4 f5 ff ff       	call   c001d888 <unlockScheduler()>
c001e2c4:	e9 75 ff ff ff       	jmp    c001e23e <cleanerTaskFunction(void*)+0x28>

c001e2c9 <terminateTask(int)>:
c001e2c9:	83 ec 14             	sub    esp,0x14
c001e2cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e2d4:	83 c0 0c             	add    eax,0xc
c001e2d7:	50                   	push   eax
c001e2d8:	68 58 bf 02 c0       	push   0xc002bf58
c001e2dd:	e8 2d 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e2e2:	e8 c6 f5 ff ff       	call   c001d8ad <lockStuff()>
c001e2e7:	e8 9a f5 ff ff       	call   c001d886 <lockScheduler()>
c001e2ec:	c7 04 24 30 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc30
c001e2f3:	e8 17 48 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e2f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e301:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e304:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e309:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e30c:	5a                   	pop    edx
c001e30d:	59                   	pop    ecx
c001e30e:	50                   	push   eax
c001e30f:	68 30 13 03 c0       	push   0xc0031330
c001e314:	e8 17 a3 00 00       	call   c0028630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e319:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e31e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e325:	c7 04 24 4a bc 02 c0 	mov    DWORD PTR [esp],0xc002bc4a
c001e32c:	e8 de 47 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e331:	83 c4 10             	add    esp,0x10
c001e334:	a1 08 13 03 c0       	mov    eax,ds:0xc0031308
c001e339:	85 c0                	test   eax,eax
c001e33b:	74 5a                	je     c001e397 <terminateTask(int)+0xce>
c001e33d:	83 ec 0c             	sub    esp,0xc
c001e340:	68 64 bc 02 c0       	push   0xc002bc64
c001e345:	e8 c5 47 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e34a:	58                   	pop    eax
c001e34b:	c6 05 0c 13 03 c0 01 	mov    BYTE PTR ds:0xc003130c,0x1
c001e352:	ff 35 08 13 03 c0    	push   DWORD PTR ds:0xc0031308
c001e358:	e8 41 fb ff ff       	call   c001de9e <unblockTask(ThreadControlBlock*)>
c001e35d:	c7 04 24 7e bc 02 c0 	mov    DWORD PTR [esp],0xc002bc7e
c001e364:	e8 a6 47 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e369:	83 c4 10             	add    esp,0x10
c001e36c:	e8 17 f5 ff ff       	call   c001d888 <unlockScheduler()>
c001e371:	e8 d1 f8 ff ff       	call   c001dc47 <unlockStuff()>
c001e376:	83 ec 0c             	sub    esp,0xc
c001e379:	68 b6 bc 02 c0       	push   0xc002bcb6
c001e37e:	e8 8c 47 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e383:	83 c4 10             	add    esp,0x10
c001e386:	e8 fb f4 ff ff       	call   c001d886 <lockScheduler()>
c001e38b:	e8 32 f8 ff ff       	call   c001dbc2 <schedule()>
c001e390:	e8 f3 f4 ff ff       	call   c001d888 <unlockScheduler()>
c001e395:	eb ef                	jmp    c001e386 <terminateTask(int)+0xbd>
c001e397:	83 ec 0c             	sub    esp,0xc
c001e39a:	68 98 bc 02 c0       	push   0xc002bc98
c001e39f:	e8 6b 47 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e3a4:	83 c4 10             	add    esp,0x10
c001e3a7:	eb c3                	jmp    c001e36c <terminateTask(int)+0xa3>

c001e3a9 <Thr::terminateFromIRQ(int)>:
c001e3a9:	83 ec 18             	sub    esp,0x18
c001e3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3b0:	e8 14 ff ff ff       	call   c001e2c9 <terminateTask(int)>
c001e3b5:	90                   	nop

c001e3b6 <Semaphore::release()>:
c001e3b6:	83 ec 0c             	sub    esp,0xc
c001e3b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3bd:	e8 eb f4 ff ff       	call   c001d8ad <lockStuff()>
c001e3c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3c5:	85 d2                	test   edx,edx
c001e3c7:	74 1a                	je     c001e3e3 <Semaphore::release()+0x2d>
c001e3c9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e3cc:	83 ec 0c             	sub    esp,0xc
c001e3cf:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e3d2:	52                   	push   edx
c001e3d3:	e8 c6 fa ff ff       	call   c001de9e <unblockTask(ThreadControlBlock*)>
c001e3d8:	83 c4 10             	add    esp,0x10
c001e3db:	83 c4 0c             	add    esp,0xc
c001e3de:	e9 64 f8 ff ff       	jmp    c001dc47 <unlockStuff()>
c001e3e3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e3e6:	83 c4 0c             	add    esp,0xc
c001e3e9:	e9 59 f8 ff ff       	jmp    c001dc47 <unlockStuff()>

c001e3ee <__static_initialization_and_destruction_0(int, int)>:
c001e3ee:	83 ec 0c             	sub    esp,0xc
c001e3f1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e3f6:	0f 85 88 00 00 00    	jne    c001e484 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3fc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e404:	75 7e                	jne    c001e484 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e406:	83 ec 0c             	sub    esp,0xc
c001e409:	68 48 13 03 c0       	push   0xc0031348
c001e40e:	e8 cd a3 00 00       	call   c00287e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e413:	83 c4 10             	add    esp,0x10
c001e416:	83 ec 04             	sub    esp,0x4
c001e419:	68 10 cd 02 c0       	push   0xc002cd10
c001e41e:	68 48 13 03 c0       	push   0xc0031348
c001e423:	68 a0 87 02 c0       	push   0xc00287a0
c001e428:	e8 7c 45 ff ff       	call   c00129a9 <__cxa_atexit>
c001e42d:	83 c4 10             	add    esp,0x10
c001e430:	83 ec 0c             	sub    esp,0xc
c001e433:	68 3c 13 03 c0       	push   0xc003133c
c001e438:	e8 a3 a3 00 00       	call   c00287e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e43d:	83 c4 10             	add    esp,0x10
c001e440:	83 ec 04             	sub    esp,0x4
c001e443:	68 10 cd 02 c0       	push   0xc002cd10
c001e448:	68 3c 13 03 c0       	push   0xc003133c
c001e44d:	68 a0 87 02 c0       	push   0xc00287a0
c001e452:	e8 52 45 ff ff       	call   c00129a9 <__cxa_atexit>
c001e457:	83 c4 10             	add    esp,0x10
c001e45a:	83 ec 0c             	sub    esp,0xc
c001e45d:	68 30 13 03 c0       	push   0xc0031330
c001e462:	e8 79 a3 00 00       	call   c00287e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e467:	83 c4 10             	add    esp,0x10
c001e46a:	83 ec 04             	sub    esp,0x4
c001e46d:	68 10 cd 02 c0       	push   0xc002cd10
c001e472:	68 30 13 03 c0       	push   0xc0031330
c001e477:	68 a0 87 02 c0       	push   0xc00287a0
c001e47c:	e8 28 45 ff ff       	call   c00129a9 <__cxa_atexit>
c001e481:	83 c4 10             	add    esp,0x10
c001e484:	90                   	nop
c001e485:	83 c4 0c             	add    esp,0xc
c001e488:	c3                   	ret    

c001e489 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e489:	83 ec 0c             	sub    esp,0xc
c001e48c:	83 ec 08             	sub    esp,0x8
c001e48f:	68 ff ff 00 00       	push   0xffff
c001e494:	6a 01                	push   0x1
c001e496:	e8 53 ff ff ff       	call   c001e3ee <__static_initialization_and_destruction_0(int, int)>
c001e49b:	83 c4 10             	add    esp,0x10
c001e49e:	83 c4 0c             	add    esp,0xc
c001e4a1:	c3                   	ret    

c001e4a2 <Vm::inbv(unsigned short)>:
c001e4a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4a6:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e4ab:	75 06                	jne    c001e4b3 <Vm::inbv(unsigned short)+0x11>
c001e4ad:	a0 ac 14 03 c0       	mov    al,ds:0xc00314ac
c001e4b2:	c3                   	ret    
c001e4b3:	ec                   	in     al,dx
c001e4b4:	c3                   	ret    

c001e4b5 <Vm::outbv(unsigned short, unsigned char)>:
c001e4b5:	53                   	push   ebx
c001e4b6:	83 ec 08             	sub    esp,0x8
c001e4b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e4bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e4c1:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e4c6:	75 38                	jne    c001e500 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e4c8:	0f b6 c3             	movzx  eax,bl
c001e4cb:	51                   	push   ecx
c001e4cc:	51                   	push   ecx
c001e4cd:	50                   	push   eax
c001e4ce:	68 77 bf 02 c0       	push   0xc002bf77
c001e4d3:	e8 37 46 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e4d8:	8b 15 ac 14 03 c0    	mov    edx,DWORD PTR ds:0xc00314ac
c001e4de:	83 c4 10             	add    esp,0x10
c001e4e1:	8d 42 01             	lea    eax,[edx+0x1]
c001e4e4:	88 9a c0 14 03 c0    	mov    BYTE PTR [edx-0x3ffceb40],bl
c001e4ea:	a3 ac 14 03 c0       	mov    ds:0xc00314ac,eax
c001e4ef:	83 f8 20             	cmp    eax,0x20
c001e4f2:	75 0f                	jne    c001e503 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e4f4:	c7 05 ac 14 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00314ac,0x1f
c001e4fe:	eb 03                	jmp    c001e503 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e500:	88 d8                	mov    al,bl
c001e502:	ee                   	out    dx,al
c001e503:	83 c4 08             	add    esp,0x8
c001e506:	5b                   	pop    ebx
c001e507:	c3                   	ret    

c001e508 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e508:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e50d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e512:	c1 e0 04             	shl    eax,0x4
c001e515:	01 d0                	add    eax,edx
c001e517:	c3                   	ret    

c001e518 <Vm::getSegment(unsigned int)>:
c001e518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e51c:	c1 e8 10             	shr    eax,0x10
c001e51f:	c3                   	ret    

c001e520 <Vm::getOffset(unsigned int)>:
c001e520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e524:	c3                   	ret    

c001e525 <Vm::mainloop2()>:
c001e525:	83 ec 0c             	sub    esp,0xc
c001e528:	e8 59 f3 ff ff       	call   c001d886 <lockScheduler()>
c001e52d:	83 ec 0c             	sub    esp,0xc
c001e530:	c6 05 a5 14 03 c0 01 	mov    BYTE PTR ds:0xc00314a5,0x1
c001e537:	6a 02                	push   0x2
c001e539:	e8 9c f7 ff ff       	call   c001dcda <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e53e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e543:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e547:	52                   	push   edx
c001e548:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e54c:	52                   	push   edx
c001e54d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e551:	52                   	push   edx
c001e552:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e556:	50                   	push   eax
c001e557:	e8 9e 1d fe ff       	call   c00002fa <goToVM86>
c001e55c:	83 c4 2c             	add    esp,0x2c
c001e55f:	c3                   	ret    

c001e560 <Vm::mainVm8086Loop(void*)>:
c001e560:	83 ec 0c             	sub    esp,0xc
c001e563:	e8 20 f3 ff ff       	call   c001d888 <unlockScheduler()>
c001e568:	83 c4 0c             	add    esp,0xc
c001e56b:	eb b8                	jmp    c001e525 <Vm::mainloop2()>

c001e56d <Vm::mainloop3(unsigned long)>:
c001e56d:	53                   	push   ebx
c001e56e:	83 ec 08             	sub    esp,0x8
c001e571:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e575:	e8 0c f3 ff ff       	call   c001d886 <lockScheduler()>
c001e57a:	83 ec 0c             	sub    esp,0xc
c001e57d:	89 1d a0 14 03 c0    	mov    DWORD PTR ds:0xc00314a0,ebx
c001e583:	6a 02                	push   0x2
c001e585:	c6 05 a4 14 03 c0 01 	mov    BYTE PTR ds:0xc00314a4,0x1
c001e58c:	e8 49 f7 ff ff       	call   c001dcda <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e591:	83 c4 18             	add    esp,0x18
c001e594:	5b                   	pop    ebx
c001e595:	eb 8e                	jmp    c001e525 <Vm::mainloop2()>

c001e597 <Vm::initialise8086()>:
c001e597:	83 ec 0c             	sub    esp,0xc
c001e59a:	68 80 00 00 00       	push   0x80
c001e59f:	6a 00                	push   0x0
c001e5a1:	68 60 e5 01 c0       	push   0xc001e560
c001e5a6:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c001e5ac:	e8 07 f4 ff ff       	call   c001d9b8 <Process::createThread(void (*)(void*), void*, int)>
c001e5b1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e5b8:	a3 a8 14 03 c0       	mov    ds:0xc00314a8,eax
c001e5bd:	68 00 01 00 00       	push   0x100
c001e5c2:	a1 54 13 03 c0       	mov    eax,ds:0xc0031354
c001e5c7:	6a 00                	push   0x0
c001e5c9:	6a 00                	push   0x0
c001e5cb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e5d1:	e8 08 3f ff ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e5d6:	83 c4 2c             	add    esp,0x2c
c001e5d9:	c3                   	ret    

c001e5da <Vm::finish8086()>:
c001e5da:	53                   	push   ebx
c001e5db:	83 ec 08             	sub    esp,0x8
c001e5de:	e8 a3 f2 ff ff       	call   c001d886 <lockScheduler()>
c001e5e3:	80 3d a4 14 03 c0 00 	cmp    BYTE PTR ds:0xc00314a4,0x0
c001e5ea:	75 0c                	jne    c001e5f8 <Vm::finish8086()+0x1e>
c001e5ec:	e8 d1 f5 ff ff       	call   c001dbc2 <schedule()>
c001e5f1:	e8 92 f2 ff ff       	call   c001d888 <unlockScheduler()>
c001e5f6:	eb e6                	jmp    c001e5de <Vm::finish8086()+0x4>
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	8b 1d a0 14 03 c0    	mov    ebx,DWORD PTR ds:0xc00314a0
c001e601:	ff 35 a8 14 03 c0    	push   DWORD PTR ds:0xc00314a8
c001e607:	c6 05 a4 14 03 c0 00 	mov    BYTE PTR ds:0xc00314a4,0x0
c001e60e:	e8 8b f8 ff ff       	call   c001de9e <unblockTask(ThreadControlBlock*)>
c001e613:	e8 70 f2 ff ff       	call   c001d888 <unlockScheduler()>
c001e618:	89 d8                	mov    eax,ebx
c001e61a:	83 c4 18             	add    esp,0x18
c001e61d:	5b                   	pop    ebx
c001e61e:	c3                   	ret    

c001e61f <Vm::getOutput8086(unsigned char*)>:
c001e61f:	83 ec 10             	sub    esp,0x10
c001e622:	ff 35 ac 14 03 c0    	push   DWORD PTR ds:0xc00314ac
c001e628:	68 c0 14 03 c0       	push   0xc00314c0
c001e62d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e631:	e8 0e 21 fe ff       	call   c0000744 <memcpy>
c001e636:	a1 ac 14 03 c0       	mov    eax,ds:0xc00314ac
c001e63b:	c7 05 ac 14 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00314ac,0x0
c001e645:	83 c4 1c             	add    esp,0x1c
c001e648:	c3                   	ret    

c001e649 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e649:	55                   	push   ebp
c001e64a:	57                   	push   edi
c001e64b:	56                   	push   esi
c001e64c:	53                   	push   ebx
c001e64d:	83 ec 2c             	sub    esp,0x2c
c001e650:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e654:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e658:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e65c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e660:	e8 21 f2 ff ff       	call   c001d886 <lockScheduler()>
c001e665:	a0 a5 14 03 c0       	mov    al,ds:0xc00314a5
c001e66a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e66e:	84 c0                	test   al,al
c001e670:	75 0c                	jne    c001e67e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e672:	e8 4b f5 ff ff       	call   c001dbc2 <schedule()>
c001e677:	e8 0c f2 ff ff       	call   c001d888 <unlockScheduler()>
c001e67c:	eb e2                	jmp    c001e660 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e67e:	a1 a8 14 03 c0       	mov    eax,ds:0xc00314a8
c001e683:	c7 05 ac 14 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00314ac,0x0
c001e68d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e691:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e695:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e699:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e69d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e6a1:	50                   	push   eax
c001e6a2:	6a 20                	push   0x20
c001e6a4:	6a 00                	push   0x0
c001e6a6:	68 c0 14 03 c0       	push   0xc00314c0
c001e6ab:	e8 c8 20 fe ff       	call   c0000778 <memset>
c001e6b0:	58                   	pop    eax
c001e6b1:	5a                   	pop    edx
c001e6b2:	68 a0 13 03 c0       	push   0xc00313a0
c001e6b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e6bb:	e8 00 22 fe ff       	call   c00008c0 <strcmp>
c001e6c0:	83 c4 10             	add    esp,0x10
c001e6c3:	8b 0d 80 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031380
c001e6c9:	85 c0                	test   eax,eax
c001e6cb:	75 1e                	jne    c001e6eb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa2>
c001e6cd:	0f b7 f6             	movzx  esi,si
c001e6d0:	50                   	push   eax
c001e6d1:	0f b7 db             	movzx  ebx,bx
c001e6d4:	50                   	push   eax
c001e6d5:	56                   	push   esi
c001e6d6:	53                   	push   ebx
c001e6d7:	e8 2c fe ff ff       	call   c001e508 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6dc:	83 c4 0c             	add    esp,0xc
c001e6df:	ff 35 88 13 03 c0    	push   DWORD PTR ds:0xc0031388
c001e6e5:	51                   	push   ecx
c001e6e6:	e9 0a 01 00 00       	jmp    c001e7f5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ac>
c001e6eb:	85 c9                	test   ecx,ecx
c001e6ed:	74 16                	je     c001e705 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbc>
c001e6ef:	83 ec 0c             	sub    esp,0xc
c001e6f2:	51                   	push   ecx
c001e6f3:	e8 58 11 ff ff       	call   c000f850 <free>
c001e6f8:	c7 05 80 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031380,0x0
c001e702:	83 c4 10             	add    esp,0x10
c001e705:	83 ec 0c             	sub    esp,0xc
c001e708:	68 14 01 00 00       	push   0x114
c001e70d:	e8 2e 11 ff ff       	call   c000f840 <malloc>
c001e712:	83 c4 0c             	add    esp,0xc
c001e715:	89 c5                	mov    ebp,eax
c001e717:	ff 35 54 13 03 c0    	push   DWORD PTR ds:0xc0031354
c001e71d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e721:	50                   	push   eax
c001e722:	e8 41 49 ff ff       	call   c0013068 <File::File(char const*, Process*)>
c001e727:	83 c4 10             	add    esp,0x10
c001e72a:	85 ed                	test   ebp,ebp
c001e72c:	75 0a                	jne    c001e738 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c001e72e:	83 ec 0c             	sub    esp,0xc
c001e731:	68 93 bf 02 c0       	push   0xc002bf93
c001e736:	eb 3e                	jmp    c001e776 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c001e738:	50                   	push   eax
c001e739:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e73d:	50                   	push   eax
c001e73e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e742:	50                   	push   eax
c001e743:	55                   	push   ebp
c001e744:	e8 2f 4c ff ff       	call   c0013378 <File::stat(unsigned long long*, bool*)>
c001e749:	83 c4 10             	add    esp,0x10
c001e74c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e751:	74 0a                	je     c001e75d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x114>
c001e753:	83 ec 0c             	sub    esp,0xc
c001e756:	68 a7 bf 02 c0       	push   0xc002bfa7
c001e75b:	eb 19                	jmp    c001e776 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c001e75d:	57                   	push   edi
c001e75e:	57                   	push   edi
c001e75f:	6a 01                	push   0x1
c001e761:	55                   	push   ebp
c001e762:	e8 65 49 ff ff       	call   c00130cc <File::open(FileOpenMode)>
c001e767:	83 c4 10             	add    esp,0x10
c001e76a:	85 c0                	test   eax,eax
c001e76c:	74 1f                	je     c001e78d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x144>
c001e76e:	83 ec 0c             	sub    esp,0xc
c001e771:	68 c0 bf 02 c0       	push   0xc002bfc0
c001e776:	e8 10 ba ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001e77b:	e8 08 f1 ff ff       	call   c001d888 <unlockScheduler()>
c001e780:	83 c4 10             	add    esp,0x10
c001e783:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e788:	e9 8e 00 00 00       	jmp    c001e81b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1d2>
c001e78d:	0f b7 f6             	movzx  esi,si
c001e790:	50                   	push   eax
c001e791:	0f b7 db             	movzx  ebx,bx
c001e794:	50                   	push   eax
c001e795:	56                   	push   esi
c001e796:	53                   	push   ebx
c001e797:	e8 6c fd ff ff       	call   c001e508 <Vm::realToLinear(unsigned short, unsigned short)>
c001e79c:	5a                   	pop    edx
c001e79d:	89 c3                	mov    ebx,eax
c001e79f:	8d 54 24 20          	lea    edx,[esp+0x20]
c001e7a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e7a6:	52                   	push   edx
c001e7a7:	53                   	push   ebx
c001e7a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e7ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e7b0:	55                   	push   ebp
c001e7b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001e7b4:	83 c4 14             	add    esp,0x14
c001e7b7:	55                   	push   ebp
c001e7b8:	e8 6d 49 ff ff       	call   c001312a <File::close()>
c001e7bd:	59                   	pop    ecx
c001e7be:	5e                   	pop    esi
c001e7bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e7c3:	68 a0 13 03 c0       	push   0xc00313a0
c001e7c8:	e8 67 20 fe ff       	call   c0000834 <strcpy>
c001e7cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e7d1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e7d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001e7d8:	a3 88 13 03 c0       	mov    ds:0xc0031388,eax
c001e7dd:	89 15 8c 13 03 c0    	mov    DWORD PTR ds:0xc003138c,edx
c001e7e3:	e8 58 10 ff ff       	call   c000f840 <malloc>
c001e7e8:	83 c4 0c             	add    esp,0xc
c001e7eb:	a3 80 13 03 c0       	mov    ds:0xc0031380,eax
c001e7f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7f4:	53                   	push   ebx
c001e7f5:	50                   	push   eax
c001e7f6:	e8 49 1f fe ff       	call   c0000744 <memcpy>
c001e7fb:	83 c4 10             	add    esp,0x10
c001e7fe:	c6 05 a5 14 03 c0 00 	mov    BYTE PTR ds:0xc00314a5,0x0
c001e805:	e8 7e f0 ff ff       	call   c001d888 <unlockScheduler()>
c001e80a:	83 ec 0c             	sub    esp,0xc
c001e80d:	ff 35 a8 14 03 c0    	push   DWORD PTR ds:0xc00314a8
c001e813:	e8 86 f6 ff ff       	call   c001de9e <unblockTask(ThreadControlBlock*)>
c001e818:	83 c4 10             	add    esp,0x10
c001e81b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e81f:	83 c4 2c             	add    esp,0x2c
c001e822:	5b                   	pop    ebx
c001e823:	5e                   	pop    esi
c001e824:	5f                   	pop    edi
c001e825:	5d                   	pop    ebp
c001e826:	c3                   	ret    

c001e827 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e827:	57                   	push   edi
c001e828:	56                   	push   esi
c001e829:	53                   	push   ebx
c001e82a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e832:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e836:	83 e8 06             	sub    eax,0x6
c001e839:	0f b7 c0             	movzx  eax,ax
c001e83c:	50                   	push   eax
c001e83d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e842:	50                   	push   eax
c001e843:	e8 c0 fc ff ff       	call   c001e508 <Vm::realToLinear(unsigned short, unsigned short)>
c001e848:	5a                   	pop    edx
c001e849:	5e                   	pop    esi
c001e84a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e84d:	8d 56 fa             	lea    edx,[esi-0x6]
c001e850:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e856:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e859:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e85c:	83 c2 02             	add    edx,0x2
c001e85f:	66 89 10             	mov    WORD PTR [eax],dx
c001e862:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e865:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e869:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e86c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e870:	89 d6                	mov    esi,edx
c001e872:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e878:	66 81 e6 ff fd       	and    si,0xfdff
c001e87d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e881:	74 07                	je     c001e88a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e883:	89 d6                	mov    esi,edx
c001e885:	66 81 ce 00 02       	or     si,0x200
c001e88a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e88e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e893:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e897:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e89f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e8a2:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e8aa:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e8ad:	5b                   	pop    ebx
c001e8ae:	5e                   	pop    esi
c001e8af:	5f                   	pop    edi
c001e8b0:	c3                   	ret    

c001e8b1 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e8b1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8b6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8bb:	c1 e0 04             	shl    eax,0x4
c001e8be:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e8c1:	c3                   	ret    

c001e8c2 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e8c2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8c7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8cc:	c1 e0 04             	shl    eax,0x4
c001e8cf:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e8d3:	c3                   	ret    

c001e8d4 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e8d4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8d9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8de:	c1 e0 04             	shl    eax,0x4
c001e8e1:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e8e4:	c3                   	ret    

c001e8e5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e8e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8ea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8ef:	c1 e0 04             	shl    eax,0x4
c001e8f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8f6:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e8f9:	c3                   	ret    

c001e8fa <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e8fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e904:	c1 e0 04             	shl    eax,0x4
c001e907:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e90b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e90f:	c3                   	ret    

c001e910 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e910:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e915:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e91a:	c1 e0 04             	shl    eax,0x4
c001e91d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e921:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e924:	c3                   	ret    

c001e925 <Vm::faultHandler(regs*)>:
c001e925:	55                   	push   ebp
c001e926:	57                   	push   edi
c001e927:	56                   	push   esi
c001e928:	53                   	push   ebx
c001e929:	83 ec 1c             	sub    esp,0x1c
c001e92c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e930:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e933:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e936:	0f b7 c1             	movzx  eax,cx
c001e939:	50                   	push   eax
c001e93a:	0f b7 c3             	movzx  eax,bx
c001e93d:	c1 e3 04             	shl    ebx,0x4
c001e940:	50                   	push   eax
c001e941:	e8 c2 fb ff ff       	call   c001e508 <Vm::realToLinear(unsigned short, unsigned short)>
c001e946:	5a                   	pop    edx
c001e947:	89 c5                	mov    ebp,eax
c001e949:	5e                   	pop    esi
c001e94a:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e94e:	50                   	push   eax
c001e94f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e953:	50                   	push   eax
c001e954:	e8 af fb ff ff       	call   c001e508 <Vm::realToLinear(unsigned short, unsigned short)>
c001e959:	01 cb                	add    ebx,ecx
c001e95b:	89 c6                	mov    esi,eax
c001e95d:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e961:	50                   	push   eax
c001e962:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e966:	50                   	push   eax
c001e967:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e96b:	50                   	push   eax
c001e96c:	55                   	push   ebp
c001e96d:	53                   	push   ebx
c001e96e:	b3 06                	mov    bl,0x6
c001e970:	68 d9 bf 02 c0       	push   0xc002bfd9
c001e975:	e8 95 41 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e97a:	83 c4 20             	add    esp,0x20
c001e97d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e982:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e987:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e98b:	3c 9d                	cmp    al,0x9d
c001e98d:	0f 84 d7 02 00 00    	je     c001ec6a <Vm::faultHandler(regs*)+0x345>
c001e993:	0f 87 a3 00 00 00    	ja     c001ea3c <Vm::faultHandler(regs*)+0x117>
c001e999:	3c 66                	cmp    al,0x66
c001e99b:	0f 84 15 02 00 00    	je     c001ebb6 <Vm::faultHandler(regs*)+0x291>
c001e9a1:	77 5f                	ja     c001ea02 <Vm::faultHandler(regs*)+0xdd>
c001e9a3:	3c 36                	cmp    al,0x36
c001e9a5:	0f 84 f1 01 00 00    	je     c001eb9c <Vm::faultHandler(regs*)+0x277>
c001e9ab:	77 28                	ja     c001e9d5 <Vm::faultHandler(regs*)+0xb0>
c001e9ad:	3c 26                	cmp    al,0x26
c001e9af:	0f 84 99 01 00 00    	je     c001eb4e <Vm::faultHandler(regs*)+0x229>
c001e9b5:	3c 2e                	cmp    al,0x2e
c001e9b7:	0f 85 3b 07 00 00    	jne    c001f0f8 <Vm::faultHandler(regs*)+0x7d3>
c001e9bd:	83 ec 0c             	sub    esp,0xc
c001e9c0:	31 db                	xor    ebx,ebx
c001e9c2:	68 ee bf 02 c0       	push   0xc002bfee
c001e9c7:	e8 43 41 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e9cc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e9cf:	83 c4 10             	add    esp,0x10
c001e9d2:	45                   	inc    ebp
c001e9d3:	eb b2                	jmp    c001e987 <Vm::faultHandler(regs*)+0x62>
c001e9d5:	3c 64                	cmp    al,0x64
c001e9d7:	0f 84 8b 01 00 00    	je     c001eb68 <Vm::faultHandler(regs*)+0x243>
c001e9dd:	0f 87 9f 01 00 00    	ja     c001eb82 <Vm::faultHandler(regs*)+0x25d>
c001e9e3:	3c 3e                	cmp    al,0x3e
c001e9e5:	0f 85 0d 07 00 00    	jne    c001f0f8 <Vm::faultHandler(regs*)+0x7d3>
c001e9eb:	83 ec 0c             	sub    esp,0xc
c001e9ee:	b3 01                	mov    bl,0x1
c001e9f0:	68 f2 bf 02 c0       	push   0xc002bff2
c001e9f5:	e8 15 41 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001e9fa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e9fd:	83 c4 10             	add    esp,0x10
c001ea00:	eb d0                	jmp    c001e9d2 <Vm::faultHandler(regs*)+0xad>
c001ea02:	3c 6d                	cmp    al,0x6d
c001ea04:	0f 84 af 03 00 00    	je     c001edb9 <Vm::faultHandler(regs*)+0x494>
c001ea0a:	77 15                	ja     c001ea21 <Vm::faultHandler(regs*)+0xfc>
c001ea0c:	3c 67                	cmp    al,0x67
c001ea0e:	0f 84 bf 01 00 00    	je     c001ebd3 <Vm::faultHandler(regs*)+0x2ae>
c001ea14:	3c 6c                	cmp    al,0x6c
c001ea16:	0f 84 3f 03 00 00    	je     c001ed5b <Vm::faultHandler(regs*)+0x436>
c001ea1c:	e9 d7 06 00 00       	jmp    c001f0f8 <Vm::faultHandler(regs*)+0x7d3>
c001ea21:	3c 6f                	cmp    al,0x6f
c001ea23:	0f 84 a4 04 00 00    	je     c001eecd <Vm::faultHandler(regs*)+0x5a8>
c001ea29:	0f 82 11 04 00 00    	jb     c001ee40 <Vm::faultHandler(regs*)+0x51b>
c001ea2f:	3c 9c                	cmp    al,0x9c
c001ea31:	0f 84 ba 01 00 00    	je     c001ebf1 <Vm::faultHandler(regs*)+0x2cc>
c001ea37:	e9 bc 06 00 00       	jmp    c001f0f8 <Vm::faultHandler(regs*)+0x7d3>
c001ea3c:	3c ec                	cmp    al,0xec
c001ea3e:	0f 84 24 06 00 00    	je     c001f068 <Vm::faultHandler(regs*)+0x743>
c001ea44:	0f 87 93 00 00 00    	ja     c001eadd <Vm::faultHandler(regs*)+0x1b8>
c001ea4a:	3c e4                	cmp    al,0xe4
c001ea4c:	0f 84 5c 05 00 00    	je     c001efae <Vm::faultHandler(regs*)+0x689>
c001ea52:	77 6a                	ja     c001eabe <Vm::faultHandler(regs*)+0x199>
c001ea54:	3c cd                	cmp    al,0xcd
c001ea56:	0f 84 7e 02 00 00    	je     c001ecda <Vm::faultHandler(regs*)+0x3b5>
c001ea5c:	3c cf                	cmp    al,0xcf
c001ea5e:	0f 85 94 06 00 00    	jne    c001f0f8 <Vm::faultHandler(regs*)+0x7d3>
c001ea64:	83 ec 0c             	sub    esp,0xc
c001ea67:	68 36 c0 02 c0       	push   0xc002c036
c001ea6c:	e8 9e 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ea71:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ea74:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ea77:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ea7b:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ea7e:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ea82:	0d 00 02 02 00       	or     eax,0x20200
c001ea87:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ea8a:	56                   	push   esi
c001ea8b:	53                   	push   ebx
c001ea8c:	52                   	push   edx
c001ea8d:	68 3c c0 02 c0       	push   0xc002c03c
c001ea92:	e8 78 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ea97:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ea9b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eaa1:	66 c1 e8 09          	shr    ax,0x9
c001eaa5:	83 e0 01             	and    eax,0x1
c001eaa8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eaab:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eaae:	83 c0 06             	add    eax,0x6
c001eab1:	25 ff ff 00 00       	and    eax,0xffff
c001eab6:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001eab9:	e9 95 02 00 00       	jmp    c001ed53 <Vm::faultHandler(regs*)+0x42e>
c001eabe:	3c e6                	cmp    al,0xe6
c001eac0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001eac4:	0f 84 4e 05 00 00    	je     c001f018 <Vm::faultHandler(regs*)+0x6f3>
c001eaca:	0f 82 0a 05 00 00    	jb     c001efda <Vm::faultHandler(regs*)+0x6b5>
c001ead0:	3c e7                	cmp    al,0xe7
c001ead2:	0f 84 69 05 00 00    	je     c001f041 <Vm::faultHandler(regs*)+0x71c>
c001ead8:	e9 1b 06 00 00       	jmp    c001f0f8 <Vm::faultHandler(regs*)+0x7d3>
c001eadd:	3c ef                	cmp    al,0xef
c001eadf:	0f 84 e6 05 00 00    	je     c001f0cb <Vm::faultHandler(regs*)+0x7a6>
c001eae5:	77 37                	ja     c001eb1e <Vm::faultHandler(regs*)+0x1f9>
c001eae7:	3c ed                	cmp    al,0xed
c001eae9:	0f 84 a3 05 00 00    	je     c001f092 <Vm::faultHandler(regs*)+0x76d>
c001eaef:	3c ee                	cmp    al,0xee
c001eaf1:	0f 85 01 06 00 00    	jne    c001f0f8 <Vm::faultHandler(regs*)+0x7d3>
c001eaf7:	52                   	push   edx
c001eaf8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001eafb:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001eafe:	68 d7 c0 02 c0       	push   0xc002c0d7
c001eb03:	e8 07 40 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eb08:	59                   	pop    ecx
c001eb09:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001eb0d:	5b                   	pop    ebx
c001eb0e:	50                   	push   eax
c001eb0f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eb13:	50                   	push   eax
c001eb14:	e8 9c f9 ff ff       	call   c001e4b5 <Vm::outbv(unsigned short, unsigned char)>
c001eb19:	e9 a5 05 00 00       	jmp    c001f0c3 <Vm::faultHandler(regs*)+0x79e>
c001eb1e:	3c fa                	cmp    al,0xfa
c001eb20:	0f 84 f7 01 00 00    	je     c001ed1d <Vm::faultHandler(regs*)+0x3f8>
c001eb26:	3c fb                	cmp    al,0xfb
c001eb28:	0f 84 0a 02 00 00    	je     c001ed38 <Vm::faultHandler(regs*)+0x413>
c001eb2e:	3c f3                	cmp    al,0xf3
c001eb30:	0f 85 c2 05 00 00    	jne    c001f0f8 <Vm::faultHandler(regs*)+0x7d3>
c001eb36:	83 ec 0c             	sub    esp,0xc
c001eb39:	68 0f c0 02 c0       	push   0xc002c00f
c001eb3e:	e8 cc 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eb43:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eb46:	83 c4 10             	add    esp,0x10
c001eb49:	e9 84 fe ff ff       	jmp    c001e9d2 <Vm::faultHandler(regs*)+0xad>
c001eb4e:	83 ec 0c             	sub    esp,0xc
c001eb51:	b3 02                	mov    bl,0x2
c001eb53:	68 ea bf 02 c0       	push   0xc002bfea
c001eb58:	e8 b2 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eb5d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eb60:	83 c4 10             	add    esp,0x10
c001eb63:	e9 6a fe ff ff       	jmp    c001e9d2 <Vm::faultHandler(regs*)+0xad>
c001eb68:	83 ec 0c             	sub    esp,0xc
c001eb6b:	b3 03                	mov    bl,0x3
c001eb6d:	68 f6 bf 02 c0       	push   0xc002bff6
c001eb72:	e8 98 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eb77:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eb7a:	83 c4 10             	add    esp,0x10
c001eb7d:	e9 50 fe ff ff       	jmp    c001e9d2 <Vm::faultHandler(regs*)+0xad>
c001eb82:	83 ec 0c             	sub    esp,0xc
c001eb85:	b3 04                	mov    bl,0x4
c001eb87:	68 fa bf 02 c0       	push   0xc002bffa
c001eb8c:	e8 7e 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eb91:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eb94:	83 c4 10             	add    esp,0x10
c001eb97:	e9 36 fe ff ff       	jmp    c001e9d2 <Vm::faultHandler(regs*)+0xad>
c001eb9c:	83 ec 0c             	sub    esp,0xc
c001eb9f:	b3 05                	mov    bl,0x5
c001eba1:	68 fe bf 02 c0       	push   0xc002bffe
c001eba6:	e8 64 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ebab:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ebae:	83 c4 10             	add    esp,0x10
c001ebb1:	e9 1c fe ff ff       	jmp    c001e9d2 <Vm::faultHandler(regs*)+0xad>
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	68 02 c0 02 c0       	push   0xc002c002
c001ebbe:	e8 4c 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ebc3:	83 c4 10             	add    esp,0x10
c001ebc6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ebc9:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ebce:	e9 ff fd ff ff       	jmp    c001e9d2 <Vm::faultHandler(regs*)+0xad>
c001ebd3:	50                   	push   eax
c001ebd4:	50                   	push   eax
c001ebd5:	6a 01                	push   0x1
c001ebd7:	68 07 c0 02 c0       	push   0xc002c007
c001ebdc:	e8 2e 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ebe1:	83 c4 10             	add    esp,0x10
c001ebe4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ebe7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ebec:	e9 e1 fd ff ff       	jmp    c001e9d2 <Vm::faultHandler(regs*)+0xad>
c001ebf1:	83 ec 0c             	sub    esp,0xc
c001ebf4:	68 15 c0 02 c0       	push   0xc002c015
c001ebf9:	e8 11 3f ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ebfe:	83 c4 10             	add    esp,0x10
c001ec01:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ec04:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec09:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001ec0c:	74 2f                	je     c001ec3d <Vm::faultHandler(regs*)+0x318>
c001ec0e:	83 ea 04             	sub    edx,0x4
c001ec11:	25 ff 0d 00 00       	and    eax,0xdff
c001ec16:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ec1c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ec1f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ec22:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ec28:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ec2c:	0f 84 bf 04 00 00    	je     c001f0f1 <Vm::faultHandler(regs*)+0x7cc>
c001ec32:	80 cc 02             	or     ah,0x2
c001ec35:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ec38:	e9 b4 04 00 00       	jmp    c001f0f1 <Vm::faultHandler(regs*)+0x7cc>
c001ec3d:	83 ea 02             	sub    edx,0x2
c001ec40:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ec46:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ec49:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ec4d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ec53:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ec57:	74 05                	je     c001ec5e <Vm::faultHandler(regs*)+0x339>
c001ec59:	80 cc 02             	or     ah,0x2
c001ec5c:	eb 03                	jmp    c001ec61 <Vm::faultHandler(regs*)+0x33c>
c001ec5e:	80 e4 fd             	and    ah,0xfd
c001ec61:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ec65:	e9 87 04 00 00       	jmp    c001f0f1 <Vm::faultHandler(regs*)+0x7cc>
c001ec6a:	83 ec 0c             	sub    esp,0xc
c001ec6d:	68 1c c0 02 c0       	push   0xc002c01c
c001ec72:	e8 98 3e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ec7f:	74 28                	je     c001eca9 <Vm::faultHandler(regs*)+0x384>
c001ec81:	8b 06                	mov    eax,DWORD PTR [esi]
c001ec83:	25 ff 0d 00 00       	and    eax,0xdff
c001ec88:	0d 00 02 02 00       	or     eax,0x20200
c001ec8d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ec90:	8b 06                	mov    eax,DWORD PTR [esi]
c001ec92:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ec98:	c1 e8 09             	shr    eax,0x9
c001ec9b:	83 e0 01             	and    eax,0x1
c001ec9e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eca1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eca4:	83 c0 04             	add    eax,0x4
c001eca7:	eb 24                	jmp    c001eccd <Vm::faultHandler(regs*)+0x3a8>
c001eca9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ecac:	0d 00 02 02 00       	or     eax,0x20200
c001ecb1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ecb4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ecb7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ecbd:	66 c1 e8 09          	shr    ax,0x9
c001ecc1:	83 e0 01             	and    eax,0x1
c001ecc4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ecc7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ecca:	83 c0 02             	add    eax,0x2
c001eccd:	25 ff ff 00 00       	and    eax,0xffff
c001ecd2:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ecd5:	e9 17 04 00 00       	jmp    c001f0f1 <Vm::faultHandler(regs*)+0x7cc>
c001ecda:	53                   	push   ebx
c001ecdb:	53                   	push   ebx
c001ecdc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ece0:	50                   	push   eax
c001ece1:	68 22 c0 02 c0       	push   0xc002c022
c001ece6:	e8 24 3e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eceb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecef:	83 c4 10             	add    esp,0x10
c001ecf2:	3c ee                	cmp    al,0xee
c001ecf4:	75 10                	jne    c001ed06 <Vm::faultHandler(regs*)+0x3e1>
c001ecf6:	83 ec 0c             	sub    esp,0xc
c001ecf9:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ecfc:	e8 6c f8 ff ff       	call   c001e56d <Vm::mainloop3(unsigned long)>
c001ed01:	e9 c0 03 00 00       	jmp    c001f0c6 <Vm::faultHandler(regs*)+0x7a1>
c001ed06:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001ed0a:	83 ec 0c             	sub    esp,0xc
c001ed0d:	53                   	push   ebx
c001ed0e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001ed12:	53                   	push   ebx
c001ed13:	55                   	push   ebp
c001ed14:	50                   	push   eax
c001ed15:	57                   	push   edi
c001ed16:	e8 0c fb ff ff       	call   c001e827 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ed1b:	eb 36                	jmp    c001ed53 <Vm::faultHandler(regs*)+0x42e>
c001ed1d:	83 ec 0c             	sub    esp,0xc
c001ed20:	68 2c c0 02 c0       	push   0xc002c02c
c001ed25:	e8 e5 3d ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ed2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed2f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed33:	e9 8b 03 00 00       	jmp    c001f0c3 <Vm::faultHandler(regs*)+0x79e>
c001ed38:	83 ec 0c             	sub    esp,0xc
c001ed3b:	68 31 c0 02 c0       	push   0xc002c031
c001ed40:	e8 ca 3d ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ed45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed4a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ed4e:	e9 70 03 00 00       	jmp    c001f0c3 <Vm::faultHandler(regs*)+0x79e>
c001ed53:	83 c4 20             	add    esp,0x20
c001ed56:	e9 99 03 00 00       	jmp    c001f0f4 <Vm::faultHandler(regs*)+0x7cf>
c001ed5b:	83 ec 0c             	sub    esp,0xc
c001ed5e:	68 6f c0 02 c0       	push   0xc002c06f
c001ed63:	e8 a7 3d ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ed68:	83 c4 10             	add    esp,0x10
c001ed6b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001ed6e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ed73:	74 0d                	je     c001ed82 <Vm::faultHandler(regs*)+0x45d>
c001ed75:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001ed7c:	0f 87 9e 01 00 00    	ja     c001ef20 <Vm::faultHandler(regs*)+0x5fb>
c001ed82:	83 ec 0c             	sub    esp,0xc
c001ed85:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ed89:	0f b7 db             	movzx  ebx,bx
c001ed8c:	50                   	push   eax
c001ed8d:	e8 10 f7 ff ff       	call   c001e4a2 <Vm::inbv(unsigned short)>
c001ed92:	83 c4 0c             	add    esp,0xc
c001ed95:	0f b6 c0             	movzx  eax,al
c001ed98:	50                   	push   eax
c001ed99:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001ed9d:	50                   	push   eax
c001ed9e:	53                   	push   ebx
c001ed9f:	e8 41 fb ff ff       	call   c001e8e5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eda4:	83 c4 10             	add    esp,0x10
c001eda7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001edaa:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001edae:	74 03                	je     c001edb3 <Vm::faultHandler(regs*)+0x48e>
c001edb0:	48                   	dec    eax
c001edb1:	eb 01                	jmp    c001edb4 <Vm::faultHandler(regs*)+0x48f>
c001edb3:	40                   	inc    eax
c001edb4:	0f b7 c0             	movzx  eax,ax
c001edb7:	eb 7f                	jmp    c001ee38 <Vm::faultHandler(regs*)+0x513>
c001edb9:	83 ec 0c             	sub    esp,0xc
c001edbc:	68 a1 c0 02 c0       	push   0xc002c0a1
c001edc1:	e8 49 3d ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001edc6:	83 c4 10             	add    esp,0x10
c001edc9:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001edcc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001edd1:	74 0d                	je     c001ede0 <Vm::faultHandler(regs*)+0x4bb>
c001edd3:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001edda:	0f 87 40 01 00 00    	ja     c001ef20 <Vm::faultHandler(regs*)+0x5fb>
c001ede0:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ede3:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001ede7:	0f b7 db             	movzx  ebx,bx
c001edea:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001edef:	74 20                	je     c001ee11 <Vm::faultHandler(regs*)+0x4ec>
c001edf1:	ed                   	in     eax,dx
c001edf2:	51                   	push   ecx
c001edf3:	50                   	push   eax
c001edf4:	56                   	push   esi
c001edf5:	53                   	push   ebx
c001edf6:	e8 15 fb ff ff       	call   c001e910 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001edfb:	83 c4 10             	add    esp,0x10
c001edfe:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ee01:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ee05:	74 05                	je     c001ee0c <Vm::faultHandler(regs*)+0x4e7>
c001ee07:	83 e8 04             	sub    eax,0x4
c001ee0a:	eb 27                	jmp    c001ee33 <Vm::faultHandler(regs*)+0x50e>
c001ee0c:	83 c0 04             	add    eax,0x4
c001ee0f:	eb 22                	jmp    c001ee33 <Vm::faultHandler(regs*)+0x50e>
c001ee11:	66 ed                	in     ax,dx
c001ee13:	0f b7 c0             	movzx  eax,ax
c001ee16:	52                   	push   edx
c001ee17:	50                   	push   eax
c001ee18:	56                   	push   esi
c001ee19:	53                   	push   ebx
c001ee1a:	e8 db fa ff ff       	call   c001e8fa <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ee1f:	83 c4 10             	add    esp,0x10
c001ee22:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ee25:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ee29:	74 05                	je     c001ee30 <Vm::faultHandler(regs*)+0x50b>
c001ee2b:	83 e8 02             	sub    eax,0x2
c001ee2e:	eb 03                	jmp    c001ee33 <Vm::faultHandler(regs*)+0x50e>
c001ee30:	83 c0 02             	add    eax,0x2
c001ee33:	25 ff ff 00 00       	and    eax,0xffff
c001ee38:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ee3b:	e9 b1 02 00 00       	jmp    c001f0f1 <Vm::faultHandler(regs*)+0x7cc>
c001ee40:	83 ec 0c             	sub    esp,0xc
c001ee43:	4b                   	dec    ebx
c001ee44:	68 a7 c0 02 c0       	push   0xc002c0a7
c001ee49:	e8 c1 3c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ee4e:	83 c4 10             	add    esp,0x10
c001ee51:	80 fb 05             	cmp    bl,0x5
c001ee54:	77 0a                	ja     c001ee60 <Vm::faultHandler(regs*)+0x53b>
c001ee56:	0f b6 db             	movzx  ebx,bl
c001ee59:	ff 24 9d 18 c1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3ee8]
c001ee60:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ee64:	eb 1b                	jmp    c001ee81 <Vm::faultHandler(regs*)+0x55c>
c001ee66:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ee6a:	eb 15                	jmp    c001ee81 <Vm::faultHandler(regs*)+0x55c>
c001ee6c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ee70:	eb 0f                	jmp    c001ee81 <Vm::faultHandler(regs*)+0x55c>
c001ee72:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ee76:	eb 09                	jmp    c001ee81 <Vm::faultHandler(regs*)+0x55c>
c001ee78:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ee7b:	eb 04                	jmp    c001ee81 <Vm::faultHandler(regs*)+0x55c>
c001ee7d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee81:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ee86:	74 0d                	je     c001ee95 <Vm::faultHandler(regs*)+0x570>
c001ee88:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001ee8f:	0f 87 8b 00 00 00    	ja     c001ef20 <Vm::faultHandler(regs*)+0x5fb>
c001ee95:	53                   	push   ebx
c001ee96:	53                   	push   ebx
c001ee97:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001ee9b:	52                   	push   edx
c001ee9c:	50                   	push   eax
c001ee9d:	e8 0f fa ff ff       	call   c001e8b1 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eea2:	5e                   	pop    esi
c001eea3:	0f b6 c0             	movzx  eax,al
c001eea6:	5d                   	pop    ebp
c001eea7:	50                   	push   eax
c001eea8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eeac:	50                   	push   eax
c001eead:	e8 03 f6 ff ff       	call   c001e4b5 <Vm::outbv(unsigned short, unsigned char)>
c001eeb2:	83 c4 10             	add    esp,0x10
c001eeb5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001eeb8:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eebc:	74 03                	je     c001eec1 <Vm::faultHandler(regs*)+0x59c>
c001eebe:	48                   	dec    eax
c001eebf:	eb 01                	jmp    c001eec2 <Vm::faultHandler(regs*)+0x59d>
c001eec1:	40                   	inc    eax
c001eec2:	0f b7 c0             	movzx  eax,ax
c001eec5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001eec8:	e9 24 02 00 00       	jmp    c001f0f1 <Vm::faultHandler(regs*)+0x7cc>
c001eecd:	83 ec 0c             	sub    esp,0xc
c001eed0:	4b                   	dec    ebx
c001eed1:	68 a7 c0 02 c0       	push   0xc002c0a7
c001eed6:	e8 34 3c ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001eedb:	83 c4 10             	add    esp,0x10
c001eede:	80 fb 05             	cmp    bl,0x5
c001eee1:	77 0a                	ja     c001eeed <Vm::faultHandler(regs*)+0x5c8>
c001eee3:	0f b6 db             	movzx  ebx,bl
c001eee6:	ff 24 9d 30 c1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3ed0]
c001eeed:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001eef1:	eb 1b                	jmp    c001ef0e <Vm::faultHandler(regs*)+0x5e9>
c001eef3:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001eef7:	eb 15                	jmp    c001ef0e <Vm::faultHandler(regs*)+0x5e9>
c001eef9:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001eefd:	eb 0f                	jmp    c001ef0e <Vm::faultHandler(regs*)+0x5e9>
c001eeff:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ef03:	eb 09                	jmp    c001ef0e <Vm::faultHandler(regs*)+0x5e9>
c001ef05:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ef08:	eb 04                	jmp    c001ef0e <Vm::faultHandler(regs*)+0x5e9>
c001ef0a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ef0e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001ef11:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ef16:	74 39                	je     c001ef51 <Vm::faultHandler(regs*)+0x62c>
c001ef18:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001ef1e:	76 31                	jbe    c001ef51 <Vm::faultHandler(regs*)+0x62c>
c001ef20:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ef24:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef28:	51                   	push   ecx
c001ef29:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ef2d:	51                   	push   ecx
c001ef2e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ef32:	51                   	push   ecx
c001ef33:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ef37:	51                   	push   ecx
c001ef38:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ef3c:	52                   	push   edx
c001ef3d:	50                   	push   eax
c001ef3e:	50                   	push   eax
c001ef3f:	68 74 c0 02 c0       	push   0xc002c074
c001ef44:	e8 c6 3b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001ef49:	83 c4 20             	add    esp,0x20
c001ef4c:	e9 fb 01 00 00       	jmp    c001f14c <Vm::faultHandler(regs*)+0x827>
c001ef51:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001ef54:	0f b7 d3             	movzx  edx,bx
c001ef57:	81 e6 00 04 00 00    	and    esi,0x400
c001ef5d:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001ef60:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef65:	74 1d                	je     c001ef84 <Vm::faultHandler(regs*)+0x65f>
c001ef67:	51                   	push   ecx
c001ef68:	51                   	push   ecx
c001ef69:	52                   	push   edx
c001ef6a:	50                   	push   eax
c001ef6b:	e8 64 f9 ff ff       	call   c001e8d4 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ef70:	83 c4 10             	add    esp,0x10
c001ef73:	89 ea                	mov    edx,ebp
c001ef75:	ef                   	out    dx,eax
c001ef76:	85 f6                	test   esi,esi
c001ef78:	74 05                	je     c001ef7f <Vm::faultHandler(regs*)+0x65a>
c001ef7a:	83 eb 04             	sub    ebx,0x4
c001ef7d:	eb 21                	jmp    c001efa0 <Vm::faultHandler(regs*)+0x67b>
c001ef7f:	83 c3 04             	add    ebx,0x4
c001ef82:	eb 1c                	jmp    c001efa0 <Vm::faultHandler(regs*)+0x67b>
c001ef84:	51                   	push   ecx
c001ef85:	51                   	push   ecx
c001ef86:	52                   	push   edx
c001ef87:	50                   	push   eax
c001ef88:	e8 35 f9 ff ff       	call   c001e8c2 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ef8d:	83 c4 10             	add    esp,0x10
c001ef90:	89 ea                	mov    edx,ebp
c001ef92:	66 ef                	out    dx,ax
c001ef94:	85 f6                	test   esi,esi
c001ef96:	74 05                	je     c001ef9d <Vm::faultHandler(regs*)+0x678>
c001ef98:	83 eb 02             	sub    ebx,0x2
c001ef9b:	eb 03                	jmp    c001efa0 <Vm::faultHandler(regs*)+0x67b>
c001ef9d:	83 c3 02             	add    ebx,0x2
c001efa0:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001efa6:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001efa9:	e9 43 01 00 00       	jmp    c001f0f1 <Vm::faultHandler(regs*)+0x7cc>
c001efae:	53                   	push   ebx
c001efaf:	53                   	push   ebx
c001efb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efb4:	50                   	push   eax
c001efb5:	68 ad c0 02 c0       	push   0xc002c0ad
c001efba:	e8 50 3b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001efbf:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001efc6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efca:	89 04 24             	mov    DWORD PTR [esp],eax
c001efcd:	e8 d0 f4 ff ff       	call   c001e4a2 <Vm::inbv(unsigned short)>
c001efd2:	0f b6 c0             	movzx  eax,al
c001efd5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001efd8:	eb 5e                	jmp    c001f038 <Vm::faultHandler(regs*)+0x713>
c001efda:	51                   	push   ecx
c001efdb:	51                   	push   ecx
c001efdc:	53                   	push   ebx
c001efdd:	68 b3 c0 02 c0       	push   0xc002c0b3
c001efe2:	e8 28 3b ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001efe7:	83 c4 10             	add    esp,0x10
c001efea:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001efef:	74 07                	je     c001eff8 <Vm::faultHandler(regs*)+0x6d3>
c001eff1:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eff5:	ed                   	in     eax,dx
c001eff6:	eb 14                	jmp    c001f00c <Vm::faultHandler(regs*)+0x6e7>
c001eff8:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001effb:	66 31 db             	xor    bx,bx
c001effe:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f001:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f005:	66 ed                	in     ax,dx
c001f007:	0f b7 c0             	movzx  eax,ax
c001f00a:	09 d8                	or     eax,ebx
c001f00c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f00f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f013:	e9 dc 00 00 00       	jmp    c001f0f4 <Vm::faultHandler(regs*)+0x7cf>
c001f018:	50                   	push   eax
c001f019:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f01c:	53                   	push   ebx
c001f01d:	68 b9 c0 02 c0       	push   0xc002c0b9
c001f022:	e8 e8 3a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001f027:	58                   	pop    eax
c001f028:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f02c:	5a                   	pop    edx
c001f02d:	50                   	push   eax
c001f02e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f032:	50                   	push   eax
c001f033:	e8 7d f4 ff ff       	call   c001e4b5 <Vm::outbv(unsigned short, unsigned char)>
c001f038:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f03c:	e9 85 00 00 00       	jmp    c001f0c6 <Vm::faultHandler(regs*)+0x7a1>
c001f041:	50                   	push   eax
c001f042:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f045:	53                   	push   ebx
c001f046:	68 c2 c0 02 c0       	push   0xc002c0c2
c001f04b:	e8 bf 3a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001f050:	83 c4 10             	add    esp,0x10
c001f053:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f057:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f05c:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f05f:	74 03                	je     c001f064 <Vm::faultHandler(regs*)+0x73f>
c001f061:	ef                   	out    dx,eax
c001f062:	eb ab                	jmp    c001f00f <Vm::faultHandler(regs*)+0x6ea>
c001f064:	66 ef                	out    dx,ax
c001f066:	eb a7                	jmp    c001f00f <Vm::faultHandler(regs*)+0x6ea>
c001f068:	55                   	push   ebp
c001f069:	55                   	push   ebp
c001f06a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f06d:	68 cb c0 02 c0       	push   0xc002c0cb
c001f072:	e8 98 3a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001f077:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f07e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f082:	89 04 24             	mov    DWORD PTR [esp],eax
c001f085:	e8 18 f4 ff ff       	call   c001e4a2 <Vm::inbv(unsigned short)>
c001f08a:	0f b6 c0             	movzx  eax,al
c001f08d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f090:	eb 31                	jmp    c001f0c3 <Vm::faultHandler(regs*)+0x79e>
c001f092:	56                   	push   esi
c001f093:	56                   	push   esi
c001f094:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f097:	68 d1 c0 02 c0       	push   0xc002c0d1
c001f09c:	e8 6e 3a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001f0a1:	83 c4 10             	add    esp,0x10
c001f0a4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f0a7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0ac:	74 03                	je     c001f0b1 <Vm::faultHandler(regs*)+0x78c>
c001f0ae:	ed                   	in     eax,dx
c001f0af:	eb 0d                	jmp    c001f0be <Vm::faultHandler(regs*)+0x799>
c001f0b1:	66 ed                	in     ax,dx
c001f0b3:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f0b6:	0f b7 c0             	movzx  eax,ax
c001f0b9:	66 31 d2             	xor    dx,dx
c001f0bc:	09 d0                	or     eax,edx
c001f0be:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f0c1:	eb 2e                	jmp    c001f0f1 <Vm::faultHandler(regs*)+0x7cc>
c001f0c3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c6:	83 c4 10             	add    esp,0x10
c001f0c9:	eb 29                	jmp    c001f0f4 <Vm::faultHandler(regs*)+0x7cf>
c001f0cb:	50                   	push   eax
c001f0cc:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0cf:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f0d2:	68 e0 c0 02 c0       	push   0xc002c0e0
c001f0d7:	e8 33 3a ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001f0dc:	83 c4 10             	add    esp,0x10
c001f0df:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f0e2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0e7:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f0ea:	74 03                	je     c001f0ef <Vm::faultHandler(regs*)+0x7ca>
c001f0ec:	ef                   	out    dx,eax
c001f0ed:	eb 02                	jmp    c001f0f1 <Vm::faultHandler(regs*)+0x7cc>
c001f0ef:	66 ef                	out    dx,ax
c001f0f1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f4:	b0 01                	mov    al,0x1
c001f0f6:	eb 56                	jmp    c001f14e <Vm::faultHandler(regs*)+0x829>
c001f0f8:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f0fc:	51                   	push   ecx
c001f0fd:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f101:	51                   	push   ecx
c001f102:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f106:	51                   	push   ecx
c001f107:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f10b:	51                   	push   ecx
c001f10c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f110:	52                   	push   edx
c001f111:	50                   	push   eax
c001f112:	50                   	push   eax
c001f113:	68 e9 c0 02 c0       	push   0xc002c0e9
c001f118:	e8 f2 39 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c001f11d:	83 c4 20             	add    esp,0x20
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	6a 60                	push   0x60
c001f125:	e8 78 f3 ff ff       	call   c001e4a2 <Vm::inbv(unsigned short)>
c001f12a:	83 c4 10             	add    esp,0x10
c001f12d:	3c 1c                	cmp    al,0x1c
c001f12f:	74 04                	je     c001f135 <Vm::faultHandler(regs*)+0x810>
c001f131:	3c 5a                	cmp    al,0x5a
c001f133:	75 eb                	jne    c001f120 <Vm::faultHandler(regs*)+0x7fb>
c001f135:	3c 1c                	cmp    al,0x1c
c001f137:	74 04                	je     c001f13d <Vm::faultHandler(regs*)+0x818>
c001f139:	3c 5a                	cmp    al,0x5a
c001f13b:	75 0f                	jne    c001f14c <Vm::faultHandler(regs*)+0x827>
c001f13d:	83 ec 0c             	sub    esp,0xc
c001f140:	6a 60                	push   0x60
c001f142:	e8 5b f3 ff ff       	call   c001e4a2 <Vm::inbv(unsigned short)>
c001f147:	83 c4 10             	add    esp,0x10
c001f14a:	eb e9                	jmp    c001f135 <Vm::faultHandler(regs*)+0x810>
c001f14c:	31 c0                	xor    eax,eax
c001f14e:	83 c4 1c             	add    esp,0x1c
c001f151:	5b                   	pop    ebx
c001f152:	5e                   	pop    esi
c001f153:	5f                   	pop    edi
c001f154:	5d                   	pop    ebp
c001f155:	c3                   	ret    

c001f156 <Vm::fpuInternalTo32(unsigned long long)>:
c001f156:	57                   	push   edi
c001f157:	56                   	push   esi
c001f158:	53                   	push   ebx
c001f159:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f161:	89 d6                	mov    esi,edx
c001f163:	89 d7                	mov    edi,edx
c001f165:	89 c1                	mov    ecx,eax
c001f167:	c1 ef 14             	shr    edi,0x14
c001f16a:	89 d3                	mov    ebx,edx
c001f16c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f172:	31 d2                	xor    edx,edx
c001f174:	89 f8                	mov    eax,edi
c001f176:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f17c:	bf ff 00 00 00       	mov    edi,0xff
c001f181:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f186:	83 d2 ff             	adc    edx,0xffffffff
c001f189:	39 c7                	cmp    edi,eax
c001f18b:	bf 00 00 00 00       	mov    edi,0x0
c001f190:	19 d7                	sbb    edi,edx
c001f192:	72 15                	jb     c001f1a9 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f194:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f198:	c1 e0 17             	shl    eax,0x17
c001f19b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f1a1:	09 f1                	or     ecx,esi
c001f1a3:	09 c1                	or     ecx,eax
c001f1a5:	89 cf                	mov    edi,ecx
c001f1a7:	eb 02                	jmp    c001f1ab <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f1a9:	31 ff                	xor    edi,edi
c001f1ab:	89 f8                	mov    eax,edi
c001f1ad:	5b                   	pop    ebx
c001f1ae:	5e                   	pop    esi
c001f1af:	5f                   	pop    edi
c001f1b0:	c3                   	ret    

c001f1b1 <Vm::fpuInternalTo64(unsigned long long)>:
c001f1b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1b9:	c3                   	ret    

c001f1ba <Vm::fpu32ToInternal(unsigned int)>:
c001f1ba:	57                   	push   edi
c001f1bb:	31 ff                	xor    edi,edi
c001f1bd:	56                   	push   esi
c001f1be:	53                   	push   ebx
c001f1bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1c3:	89 cb                	mov    ebx,ecx
c001f1c5:	89 ce                	mov    esi,ecx
c001f1c7:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f1cd:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f1d3:	c1 e9 17             	shr    ecx,0x17
c001f1d6:	89 f0                	mov    eax,esi
c001f1d8:	0f b6 d1             	movzx  edx,cl
c001f1db:	81 c2 80 03 00 00    	add    edx,0x380
c001f1e1:	89 d1                	mov    ecx,edx
c001f1e3:	89 fa                	mov    edx,edi
c001f1e5:	c1 e1 14             	shl    ecx,0x14
c001f1e8:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f1ec:	c1 e0 1d             	shl    eax,0x1d
c001f1ef:	89 d7                	mov    edi,edx
c001f1f1:	89 c6                	mov    esi,eax
c001f1f3:	89 ca                	mov    edx,ecx
c001f1f5:	89 f0                	mov    eax,esi
c001f1f7:	09 fa                	or     edx,edi
c001f1f9:	09 da                	or     edx,ebx
c001f1fb:	5b                   	pop    ebx
c001f1fc:	5e                   	pop    esi
c001f1fd:	5f                   	pop    edi
c001f1fe:	c3                   	ret    

c001f1ff <Vm::fpu64ToInternal(unsigned long long)>:
c001f1ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f203:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f207:	c3                   	ret    

c001f208 <Vm::fpuFloatToLong(unsigned long long)>:
c001f208:	57                   	push   edi
c001f209:	31 c0                	xor    eax,eax
c001f20b:	56                   	push   esi
c001f20c:	31 d2                	xor    edx,edx
c001f20e:	53                   	push   ebx
c001f20f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f213:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f217:	89 d9                	mov    ecx,ebx
c001f219:	c1 e9 14             	shr    ecx,0x14
c001f21c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f222:	89 cf                	mov    edi,ecx
c001f224:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f22a:	78 33                	js     c001f25f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f22c:	89 d9                	mov    ecx,ebx
c001f22e:	89 f0                	mov    eax,esi
c001f230:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f236:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f23c:	89 ca                	mov    edx,ecx
c001f23e:	b9 34 00 00 00       	mov    ecx,0x34
c001f243:	29 f9                	sub    ecx,edi
c001f245:	0f ad d0             	shrd   eax,edx,cl
c001f248:	d3 fa                	sar    edx,cl
c001f24a:	f6 c1 20             	test   cl,0x20
c001f24d:	74 05                	je     c001f254 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f24f:	89 d0                	mov    eax,edx
c001f251:	c1 fa 1f             	sar    edx,0x1f
c001f254:	85 db                	test   ebx,ebx
c001f256:	79 07                	jns    c001f25f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f258:	f7 d8                	neg    eax
c001f25a:	83 d2 00             	adc    edx,0x0
c001f25d:	f7 da                	neg    edx
c001f25f:	5b                   	pop    ebx
c001f260:	5e                   	pop    esi
c001f261:	5f                   	pop    edi
c001f262:	c3                   	ret    

c001f263 <Vm::fpuULongToFloat(unsigned long long)>:
c001f263:	57                   	push   edi
c001f264:	31 c9                	xor    ecx,ecx
c001f266:	56                   	push   esi
c001f267:	53                   	push   ebx
c001f268:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f26c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f270:	0f ba e7 14          	bt     edi,0x14
c001f274:	72 07                	jb     c001f27d <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f276:	01 f6                	add    esi,esi
c001f278:	11 ff                	adc    edi,edi
c001f27a:	41                   	inc    ecx
c001f27b:	eb f3                	jmp    c001f270 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f27d:	89 fa                	mov    edx,edi
c001f27f:	89 f0                	mov    eax,esi
c001f281:	bb 33 04 00 00       	mov    ebx,0x433
c001f286:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f28c:	29 cb                	sub    ebx,ecx
c001f28e:	89 d9                	mov    ecx,ebx
c001f290:	5b                   	pop    ebx
c001f291:	c1 e1 14             	shl    ecx,0x14
c001f294:	5e                   	pop    esi
c001f295:	09 ca                	or     edx,ecx
c001f297:	5f                   	pop    edi
c001f298:	c3                   	ret    

c001f299 <Vm::fpuLongToFloat(long long)>:
c001f299:	56                   	push   esi
c001f29a:	31 c0                	xor    eax,eax
c001f29c:	53                   	push   ebx
c001f29d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f2a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f2a5:	39 c8                	cmp    eax,ecx
c001f2a7:	19 d8                	sbb    eax,ebx
c001f2a9:	7d 04                	jge    c001f2af <Vm::fpuLongToFloat(long long)+0x16>
c001f2ab:	31 f6                	xor    esi,esi
c001f2ad:	eb 0c                	jmp    c001f2bb <Vm::fpuLongToFloat(long long)+0x22>
c001f2af:	f7 d9                	neg    ecx
c001f2b1:	be 01 00 00 00       	mov    esi,0x1
c001f2b6:	83 d3 00             	adc    ebx,0x0
c001f2b9:	f7 db                	neg    ebx
c001f2bb:	31 c0                	xor    eax,eax
c001f2bd:	0f ba e3 14          	bt     ebx,0x14
c001f2c1:	72 07                	jb     c001f2ca <Vm::fpuLongToFloat(long long)+0x31>
c001f2c3:	01 c9                	add    ecx,ecx
c001f2c5:	11 db                	adc    ebx,ebx
c001f2c7:	40                   	inc    eax
c001f2c8:	eb f3                	jmp    c001f2bd <Vm::fpuLongToFloat(long long)+0x24>
c001f2ca:	ba 33 04 00 00       	mov    edx,0x433
c001f2cf:	29 c2                	sub    edx,eax
c001f2d1:	89 c8                	mov    eax,ecx
c001f2d3:	c1 e2 14             	shl    edx,0x14
c001f2d6:	89 d9                	mov    ecx,ebx
c001f2d8:	89 f3                	mov    ebx,esi
c001f2da:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f2e0:	09 ca                	or     edx,ecx
c001f2e2:	84 db                	test   bl,bl
c001f2e4:	74 06                	je     c001f2ec <Vm::fpuLongToFloat(long long)+0x53>
c001f2e6:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f2ec:	5b                   	pop    ebx
c001f2ed:	5e                   	pop    esi
c001f2ee:	c3                   	ret    

c001f2ef <Vm::fpuGet0()>:
c001f2ef:	31 c0                	xor    eax,eax
c001f2f1:	31 d2                	xor    edx,edx
c001f2f3:	c3                   	ret    

c001f2f4 <Vm::fpuGet1()>:
c001f2f4:	b8 01 00 00 00       	mov    eax,0x1
c001f2f9:	31 d2                	xor    edx,edx
c001f2fb:	c3                   	ret    

c001f2fc <Vm::fpuGetPi()>:
c001f2fc:	b8 03 00 00 00       	mov    eax,0x3
c001f301:	31 d2                	xor    edx,edx
c001f303:	c3                   	ret    

c001f304 <Vm::fpuGetLog2E()>:
c001f304:	83 ec 18             	sub    esp,0x18
c001f307:	68 48 c1 02 c0       	push   0xc002c148
c001f30c:	e8 7a ae ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001f311:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f316:	31 d2                	xor    edx,edx
c001f318:	83 c4 1c             	add    esp,0x1c
c001f31b:	c3                   	ret    

c001f31c <Vm::fpuGetLogE2()>:
c001f31c:	83 ec 18             	sub    esp,0x18
c001f31f:	68 54 c1 02 c0       	push   0xc002c154
c001f324:	e8 62 ae ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001f329:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f32e:	31 d2                	xor    edx,edx
c001f330:	83 c4 1c             	add    esp,0x1c
c001f333:	c3                   	ret    

c001f334 <Vm::fpuGetLog210()>:
c001f334:	83 ec 18             	sub    esp,0x18
c001f337:	68 60 c1 02 c0       	push   0xc002c160
c001f33c:	e8 4a ae ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001f341:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f346:	31 d2                	xor    edx,edx
c001f348:	83 c4 1c             	add    esp,0x1c
c001f34b:	c3                   	ret    

c001f34c <Vm::fpuGetLog102()>:
c001f34c:	83 ec 18             	sub    esp,0x18
c001f34f:	68 6d c1 02 c0       	push   0xc002c16d
c001f354:	e8 32 ae ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001f359:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f35e:	31 d2                	xor    edx,edx
c001f360:	83 c4 1c             	add    esp,0x1c
c001f363:	c3                   	ret    

c001f364 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f368:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f36c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f370:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f374:	0f 92 c0             	setb   al
c001f377:	c3                   	ret    

c001f378 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f380:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f384:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f388:	09 c2                	or     edx,eax
c001f38a:	0f 94 c0             	sete   al
c001f38d:	c3                   	ret    

c001f38e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f38e:	57                   	push   edi
c001f38f:	56                   	push   esi
c001f390:	53                   	push   ebx
c001f391:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f395:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f399:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f39d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f3a1:	57                   	push   edi
c001f3a2:	56                   	push   esi
c001f3a3:	53                   	push   ebx
c001f3a4:	51                   	push   ecx
c001f3a5:	e8 ce ff ff ff       	call   c001f378 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f3aa:	83 c4 10             	add    esp,0x10
c001f3ad:	88 c2                	mov    dl,al
c001f3af:	31 c0                	xor    eax,eax
c001f3b1:	84 d2                	test   dl,dl
c001f3b3:	75 0c                	jne    c001f3c1 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f3b5:	57                   	push   edi
c001f3b6:	56                   	push   esi
c001f3b7:	53                   	push   ebx
c001f3b8:	51                   	push   ecx
c001f3b9:	e8 a6 ff ff ff       	call   c001f364 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f3be:	83 c4 10             	add    esp,0x10
c001f3c1:	83 e0 01             	and    eax,0x1
c001f3c4:	5b                   	pop    ebx
c001f3c5:	88 c1                	mov    cl,al
c001f3c7:	83 e2 01             	and    edx,0x1
c001f3ca:	a0 e1 14 03 c0       	mov    al,ds:0xc00314e1
c001f3cf:	c1 e2 06             	shl    edx,0x6
c001f3d2:	83 e0 ba             	and    eax,0xffffffba
c001f3d5:	5e                   	pop    esi
c001f3d6:	09 c8                	or     eax,ecx
c001f3d8:	5f                   	pop    edi
c001f3d9:	09 d0                	or     eax,edx
c001f3db:	a2 e1 14 03 c0       	mov    ds:0xc00314e1,al
c001f3e0:	c3                   	ret    

c001f3e1 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f3e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f3e9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f3ed:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f3f1:	c3                   	ret    

c001f3f2 <Vm::fpuAbs(unsigned long long)>:
c001f3f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f3fa:	c3                   	ret    

c001f3fb <Vm::fpuChs(unsigned long long)>:
c001f3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f403:	f7 d8                	neg    eax
c001f405:	83 d2 00             	adc    edx,0x0
c001f408:	f7 da                	neg    edx
c001f40a:	c3                   	ret    

c001f40b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f40b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f40f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f414:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f418:	eb c7                	jmp    c001f3e1 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f41a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f41a:	53                   	push   ebx
c001f41b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f41f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f423:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f427:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f42b:	0f af ca             	imul   ecx,edx
c001f42e:	0f af d8             	imul   ebx,eax
c001f431:	f7 e2                	mul    edx
c001f433:	01 d9                	add    ecx,ebx
c001f435:	5b                   	pop    ebx
c001f436:	01 ca                	add    edx,ecx
c001f438:	c3                   	ret    

c001f439 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f439:	83 ec 0c             	sub    esp,0xc
c001f43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f44c:	e8 9b 70 00 00       	call   c00264ec <__udivdi3>
c001f451:	83 c4 1c             	add    esp,0x1c
c001f454:	c3                   	ret    

c001f455 <Vm::fpuSquare(unsigned long long)>:
c001f455:	50                   	push   eax
c001f456:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f45a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f45e:	52                   	push   edx
c001f45f:	50                   	push   eax
c001f460:	52                   	push   edx
c001f461:	50                   	push   eax
c001f462:	e8 b3 ff ff ff       	call   c001f41a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f467:	83 c4 14             	add    esp,0x14
c001f46a:	c3                   	ret    

c001f46b <Vm::fpuGetReg(int)>:
c001f46b:	83 ec 0c             	sub    esp,0xc
c001f46e:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f473:	76 10                	jbe    c001f485 <Vm::fpuGetReg(int)+0x1a>
c001f475:	83 ec 0c             	sub    esp,0xc
c001f478:	68 7a c1 02 c0       	push   0xc002c17a
c001f47d:	e8 09 ad ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001f482:	83 c4 10             	add    esp,0x10
c001f485:	a0 e1 14 03 c0       	mov    al,ds:0xc00314e1
c001f48a:	b9 08 00 00 00       	mov    ecx,0x8
c001f48f:	c0 e8 03             	shr    al,0x3
c001f492:	83 e0 07             	and    eax,0x7
c001f495:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f499:	99                   	cdq    
c001f49a:	f7 f9                	idiv   ecx
c001f49c:	8b 04 d5 e4 14 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffceb1c]
c001f4a3:	8b 14 d5 e8 14 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffceb18]
c001f4aa:	83 c4 0c             	add    esp,0xc
c001f4ad:	c3                   	ret    

c001f4ae <Vm::fpuSetReg(int, unsigned long long)>:
c001f4ae:	57                   	push   edi
c001f4af:	56                   	push   esi
c001f4b0:	52                   	push   edx
c001f4b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f4b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4b9:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f4be:	76 10                	jbe    c001f4d0 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f4c0:	83 ec 0c             	sub    esp,0xc
c001f4c3:	68 8d c1 02 c0       	push   0xc002c18d
c001f4c8:	e8 be ac ff ff       	call   c001a18b <Krnl::panic(char const*)>
c001f4cd:	83 c4 10             	add    esp,0x10
c001f4d0:	a0 e1 14 03 c0       	mov    al,ds:0xc00314e1
c001f4d5:	b9 08 00 00 00       	mov    ecx,0x8
c001f4da:	c0 e8 03             	shr    al,0x3
c001f4dd:	83 e0 07             	and    eax,0x7
c001f4e0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f4e4:	99                   	cdq    
c001f4e5:	f7 f9                	idiv   ecx
c001f4e7:	89 34 d5 e4 14 03 c0 	mov    DWORD PTR [edx*8-0x3ffceb1c],esi
c001f4ee:	89 3c d5 e8 14 03 c0 	mov    DWORD PTR [edx*8-0x3ffceb18],edi
c001f4f5:	58                   	pop    eax
c001f4f6:	5e                   	pop    esi
c001f4f7:	5f                   	pop    edi
c001f4f8:	c3                   	ret    

c001f4f9 <Vm::fpuPush(unsigned long long)>:
c001f4f9:	a0 e1 14 03 c0       	mov    al,ds:0xc00314e1
c001f4fe:	c0 e8 03             	shr    al,0x3
c001f501:	83 e0 07             	and    eax,0x7
c001f504:	83 c0 07             	add    eax,0x7
c001f507:	88 c2                	mov    dl,al
c001f509:	83 e0 07             	and    eax,0x7
c001f50c:	83 e2 07             	and    edx,0x7
c001f50f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f516:	8a 15 e1 14 03 c0    	mov    dl,BYTE PTR ds:0xc00314e1
c001f51c:	83 e2 c7             	and    edx,0xffffffc7
c001f51f:	09 ca                	or     edx,ecx
c001f521:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f525:	88 15 e1 14 03 c0    	mov    BYTE PTR ds:0xc00314e1,dl
c001f52b:	89 0c c5 e8 14 03 c0 	mov    DWORD PTR [eax*8-0x3ffceb18],ecx
c001f532:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f536:	89 14 c5 e4 14 03 c0 	mov    DWORD PTR [eax*8-0x3ffceb1c],edx
c001f53d:	a1 24 15 03 c0       	mov    eax,ds:0xc0031524
c001f542:	83 f8 08             	cmp    eax,0x8
c001f545:	75 08                	jne    c001f54f <Vm::fpuPush(unsigned long long)+0x56>
c001f547:	80 0d e0 14 03 c0 40 	or     BYTE PTR ds:0xc00314e0,0x40
c001f54e:	c3                   	ret    
c001f54f:	40                   	inc    eax
c001f550:	a3 24 15 03 c0       	mov    ds:0xc0031524,eax
c001f555:	c3                   	ret    

c001f556 <Vm::fpuPop()>:
c001f556:	8a 0d e1 14 03 c0    	mov    cl,BYTE PTR ds:0xc00314e1
c001f55c:	53                   	push   ebx
c001f55d:	c0 e9 03             	shr    cl,0x3
c001f560:	8a 1d e1 14 03 c0    	mov    bl,BYTE PTR ds:0xc00314e1
c001f566:	83 e1 07             	and    ecx,0x7
c001f569:	83 e3 c7             	and    ebx,0xffffffc7
c001f56c:	8b 04 cd e4 14 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffceb1c]
c001f573:	8b 14 cd e8 14 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffceb18]
c001f57a:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f581:	83 e1 38             	and    ecx,0x38
c001f584:	09 d9                	or     ecx,ebx
c001f586:	88 0d e1 14 03 c0    	mov    BYTE PTR ds:0xc00314e1,cl
c001f58c:	8b 0d 24 15 03 c0    	mov    ecx,DWORD PTR ds:0xc0031524
c001f592:	85 c9                	test   ecx,ecx
c001f594:	74 09                	je     c001f59f <Vm::fpuPop()+0x49>
c001f596:	49                   	dec    ecx
c001f597:	89 0d 24 15 03 c0    	mov    DWORD PTR ds:0xc0031524,ecx
c001f59d:	eb 07                	jmp    c001f5a6 <Vm::fpuPop()+0x50>
c001f59f:	80 0d e0 14 03 c0 40 	or     BYTE PTR ds:0xc00314e0,0x40
c001f5a6:	5b                   	pop    ebx
c001f5a7:	c3                   	ret    

c001f5a8 <Vm::x87Handler(regs*)>:
c001f5a8:	55                   	push   ebp
c001f5a9:	57                   	push   edi
c001f5aa:	56                   	push   esi
c001f5ab:	53                   	push   ebx
c001f5ac:	83 ec 1c             	sub    esp,0x1c
c001f5af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f5b3:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f5b8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f5bb:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f5c3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f5c7:	50                   	push   eax
c001f5c8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f5cc:	50                   	push   eax
c001f5cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f5d1:	50                   	push   eax
c001f5d2:	53                   	push   ebx
c001f5d3:	e8 7a a2 ff ff       	call   c0019852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f5d8:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f5db:	83 c4 10             	add    esp,0x10
c001f5de:	89 c6                	mov    esi,eax
c001f5e0:	80 fa d9             	cmp    dl,0xd9
c001f5e3:	0f 85 52 01 00 00    	jne    c001f73b <Vm::x87Handler(regs*)+0x193>
c001f5e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5ed:	8d 50 20             	lea    edx,[eax+0x20]
c001f5f0:	80 fa 0e             	cmp    dl,0xe
c001f5f3:	0f 87 86 00 00 00    	ja     c001f67f <Vm::x87Handler(regs*)+0xd7>
c001f5f9:	0f b6 d2             	movzx  edx,dl
c001f5fc:	ff 24 95 a0 c1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3e60]
c001f603:	e8 e7 fc ff ff       	call   c001f2ef <Vm::fpuGet0()>
c001f608:	eb 05                	jmp    c001f60f <Vm::x87Handler(regs*)+0x67>
c001f60a:	e8 e5 fc ff ff       	call   c001f2f4 <Vm::fpuGet1()>
c001f60f:	57                   	push   edi
c001f610:	57                   	push   edi
c001f611:	52                   	push   edx
c001f612:	50                   	push   eax
c001f613:	e8 e1 fe ff ff       	call   c001f4f9 <Vm::fpuPush(unsigned long long)>
c001f618:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f61c:	83 c4 10             	add    esp,0x10
c001f61f:	b0 01                	mov    al,0x1
c001f621:	e9 e3 09 00 00       	jmp    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001f626:	83 ec 0c             	sub    esp,0xc
c001f629:	6a 00                	push   0x0
c001f62b:	e8 3b fe ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f630:	59                   	pop    ecx
c001f631:	5e                   	pop    esi
c001f632:	52                   	push   edx
c001f633:	50                   	push   eax
c001f634:	e8 c2 fd ff ff       	call   c001f3fb <Vm::fpuChs(unsigned long long)>
c001f639:	eb 13                	jmp    c001f64e <Vm::x87Handler(regs*)+0xa6>
c001f63b:	83 ec 0c             	sub    esp,0xc
c001f63e:	6a 00                	push   0x0
c001f640:	e8 26 fe ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f645:	5f                   	pop    edi
c001f646:	5d                   	pop    ebp
c001f647:	52                   	push   edx
c001f648:	50                   	push   eax
c001f649:	e8 a4 fd ff ff       	call   c001f3f2 <Vm::fpuAbs(unsigned long long)>
c001f64e:	83 c4 0c             	add    esp,0xc
c001f651:	52                   	push   edx
c001f652:	50                   	push   eax
c001f653:	6a 00                	push   0x0
c001f655:	e8 54 fe ff ff       	call   c001f4ae <Vm::fpuSetReg(int, unsigned long long)>
c001f65a:	eb bc                	jmp    c001f618 <Vm::x87Handler(regs*)+0x70>
c001f65c:	e8 d3 fc ff ff       	call   c001f334 <Vm::fpuGetLog210()>
c001f661:	eb ac                	jmp    c001f60f <Vm::x87Handler(regs*)+0x67>
c001f663:	e8 9c fc ff ff       	call   c001f304 <Vm::fpuGetLog2E()>
c001f668:	eb a5                	jmp    c001f60f <Vm::x87Handler(regs*)+0x67>
c001f66a:	e8 8d fc ff ff       	call   c001f2fc <Vm::fpuGetPi()>
c001f66f:	eb 9e                	jmp    c001f60f <Vm::x87Handler(regs*)+0x67>
c001f671:	e8 d6 fc ff ff       	call   c001f34c <Vm::fpuGetLog102()>
c001f676:	eb 97                	jmp    c001f60f <Vm::x87Handler(regs*)+0x67>
c001f678:	e8 9f fc ff ff       	call   c001f31c <Vm::fpuGetLogE2()>
c001f67d:	eb 90                	jmp    c001f60f <Vm::x87Handler(regs*)+0x67>
c001f67f:	8d 50 40             	lea    edx,[eax+0x40]
c001f682:	80 fa 07             	cmp    dl,0x7
c001f685:	77 15                	ja     c001f69c <Vm::x87Handler(regs*)+0xf4>
c001f687:	83 ec 0c             	sub    esp,0xc
c001f68a:	2d c0 00 00 00       	sub    eax,0xc0
c001f68f:	50                   	push   eax
c001f690:	e8 d6 fd ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f695:	59                   	pop    ecx
c001f696:	5e                   	pop    esi
c001f697:	e9 75 ff ff ff       	jmp    c001f611 <Vm::x87Handler(regs*)+0x69>
c001f69c:	8d 50 38             	lea    edx,[eax+0x38]
c001f69f:	80 fa 07             	cmp    dl,0x7
c001f6a2:	77 3c                	ja     c001f6e0 <Vm::x87Handler(regs*)+0x138>
c001f6a4:	83 ec 0c             	sub    esp,0xc
c001f6a7:	2d c8 00 00 00       	sub    eax,0xc8
c001f6ac:	50                   	push   eax
c001f6ad:	e8 b9 fd ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f6b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6b9:	89 c6                	mov    esi,eax
c001f6bb:	89 d7                	mov    edi,edx
c001f6bd:	e8 a9 fd ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f6c2:	83 c4 0c             	add    esp,0xc
c001f6c5:	52                   	push   edx
c001f6c6:	50                   	push   eax
c001f6c7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6cb:	2d c8 00 00 00       	sub    eax,0xc8
c001f6d0:	50                   	push   eax
c001f6d1:	e8 d8 fd ff ff       	call   c001f4ae <Vm::fpuSetReg(int, unsigned long long)>
c001f6d6:	83 c4 0c             	add    esp,0xc
c001f6d9:	57                   	push   edi
c001f6da:	56                   	push   esi
c001f6db:	e9 73 ff ff ff       	jmp    c001f653 <Vm::x87Handler(regs*)+0xab>
c001f6e0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f6e4:	84 d2                	test   dl,dl
c001f6e6:	75 0f                	jne    c001f6f7 <Vm::x87Handler(regs*)+0x14f>
c001f6e8:	83 ec 0c             	sub    esp,0xc
c001f6eb:	ff 36                	push   DWORD PTR [esi]
c001f6ed:	e8 c8 fa ff ff       	call   c001f1ba <Vm::fpu32ToInternal(unsigned int)>
c001f6f2:	e9 bf 00 00 00       	jmp    c001f7b6 <Vm::x87Handler(regs*)+0x20e>
c001f6f7:	80 fa 03             	cmp    dl,0x3
c001f6fa:	75 13                	jne    c001f70f <Vm::x87Handler(regs*)+0x167>
c001f6fc:	e8 55 fe ff ff       	call   c001f556 <Vm::fpuPop()>
c001f701:	55                   	push   ebp
c001f702:	55                   	push   ebp
c001f703:	52                   	push   edx
c001f704:	50                   	push   eax
c001f705:	e8 4c fa ff ff       	call   c001f156 <Vm::fpuInternalTo32(unsigned long long)>
c001f70a:	e9 88 00 00 00       	jmp    c001f797 <Vm::x87Handler(regs*)+0x1ef>
c001f70f:	80 fa 05             	cmp    dl,0x5
c001f712:	75 0e                	jne    c001f722 <Vm::x87Handler(regs*)+0x17a>
c001f714:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f717:	66 a3 e2 14 03 c0    	mov    ds:0xc00314e2,ax
c001f71d:	e9 df 00 00 00       	jmp    c001f801 <Vm::x87Handler(regs*)+0x259>
c001f722:	31 c0                	xor    eax,eax
c001f724:	80 fa 07             	cmp    dl,0x7
c001f727:	0f 85 dc 08 00 00    	jne    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001f72d:	66 a1 e2 14 03 c0    	mov    ax,ds:0xc00314e2
c001f733:	66 89 06             	mov    WORD PTR [esi],ax
c001f736:	e9 c6 00 00 00       	jmp    c001f801 <Vm::x87Handler(regs*)+0x259>
c001f73b:	80 fa d8             	cmp    dl,0xd8
c001f73e:	0f 84 c9 00 00 00    	je     c001f80d <Vm::x87Handler(regs*)+0x265>
c001f744:	80 fa dc             	cmp    dl,0xdc
c001f747:	0f 84 0d 02 00 00    	je     c001f95a <Vm::x87Handler(regs*)+0x3b2>
c001f74d:	80 fa de             	cmp    dl,0xde
c001f750:	0f 84 cd 02 00 00    	je     c001fa23 <Vm::x87Handler(regs*)+0x47b>
c001f756:	80 fa dd             	cmp    dl,0xdd
c001f759:	0f 84 5f 04 00 00    	je     c001fbbe <Vm::x87Handler(regs*)+0x616>
c001f75f:	80 fa da             	cmp    dl,0xda
c001f762:	0f 84 24 05 00 00    	je     c001fc8c <Vm::x87Handler(regs*)+0x6e4>
c001f768:	80 fa df             	cmp    dl,0xdf
c001f76b:	0f 84 68 05 00 00    	je     c001fcd9 <Vm::x87Handler(regs*)+0x731>
c001f771:	31 c0                	xor    eax,eax
c001f773:	80 fa db             	cmp    dl,0xdb
c001f776:	0f 85 8d 08 00 00    	jne    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001f77c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f780:	80 fa 03             	cmp    dl,0x3
c001f783:	0f 85 70 06 00 00    	jne    c001fdf9 <Vm::x87Handler(regs*)+0x851>
c001f789:	e8 c8 fd ff ff       	call   c001f556 <Vm::fpuPop()>
c001f78e:	55                   	push   ebp
c001f78f:	55                   	push   ebp
c001f790:	52                   	push   edx
c001f791:	50                   	push   eax
c001f792:	e8 71 fa ff ff       	call   c001f208 <Vm::fpuFloatToLong(unsigned long long)>
c001f797:	83 c4 10             	add    esp,0x10
c001f79a:	89 06                	mov    DWORD PTR [esi],eax
c001f79c:	eb 63                	jmp    c001f801 <Vm::x87Handler(regs*)+0x259>
c001f79e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f7a2:	84 d2                	test   dl,dl
c001f7a4:	0f 85 e6 05 00 00    	jne    c001fd90 <Vm::x87Handler(regs*)+0x7e8>
c001f7aa:	57                   	push   edi
c001f7ab:	57                   	push   edi
c001f7ac:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f7af:	ff 36                	push   DWORD PTR [esi]
c001f7b1:	e8 49 fa ff ff       	call   c001f1ff <Vm::fpu64ToInternal(unsigned long long)>
c001f7b6:	5e                   	pop    esi
c001f7b7:	5f                   	pop    edi
c001f7b8:	52                   	push   edx
c001f7b9:	50                   	push   eax
c001f7ba:	e8 3a fd ff ff       	call   c001f4f9 <Vm::fpuPush(unsigned long long)>
c001f7bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f7c3:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f7c6:	e9 51 fe ff ff       	jmp    c001f61c <Vm::x87Handler(regs*)+0x74>
c001f7cb:	80 fa 03             	cmp    dl,0x3
c001f7ce:	0f 85 d7 06 00 00    	jne    c001feab <Vm::x87Handler(regs*)+0x903>
c001f7d4:	57                   	push   edi
c001f7d5:	57                   	push   edi
c001f7d6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f7d9:	ff 36                	push   DWORD PTR [esi]
c001f7db:	e8 1f fa ff ff       	call   c001f1ff <Vm::fpu64ToInternal(unsigned long long)>
c001f7e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7e7:	89 c6                	mov    esi,eax
c001f7e9:	89 d7                	mov    edi,edx
c001f7eb:	e8 7b fc ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f7f0:	57                   	push   edi
c001f7f1:	56                   	push   esi
c001f7f2:	52                   	push   edx
c001f7f3:	50                   	push   eax
c001f7f4:	e8 95 fb ff ff       	call   c001f38e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f7f9:	83 c4 20             	add    esp,0x20
c001f7fc:	e8 55 fd ff ff       	call   c001f556 <Vm::fpuPop()>
c001f801:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f805:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f808:	e9 12 fe ff ff       	jmp    c001f61f <Vm::x87Handler(regs*)+0x77>
c001f80d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f811:	8d 50 40             	lea    edx,[eax+0x40]
c001f814:	80 fa 07             	cmp    dl,0x7
c001f817:	77 29                	ja     c001f842 <Vm::x87Handler(regs*)+0x29a>
c001f819:	83 ec 0c             	sub    esp,0xc
c001f81c:	2d c0 00 00 00       	sub    eax,0xc0
c001f821:	50                   	push   eax
c001f822:	e8 44 fc ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f827:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f82e:	89 c6                	mov    esi,eax
c001f830:	89 d7                	mov    edi,edx
c001f832:	e8 34 fc ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f837:	57                   	push   edi
c001f838:	56                   	push   esi
c001f839:	52                   	push   edx
c001f83a:	50                   	push   eax
c001f83b:	e8 a1 fb ff ff       	call   c001f3e1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f840:	eb 2f                	jmp    c001f871 <Vm::x87Handler(regs*)+0x2c9>
c001f842:	8d 50 38             	lea    edx,[eax+0x38]
c001f845:	80 fa 07             	cmp    dl,0x7
c001f848:	77 2f                	ja     c001f879 <Vm::x87Handler(regs*)+0x2d1>
c001f84a:	83 ec 0c             	sub    esp,0xc
c001f84d:	2d c8 00 00 00       	sub    eax,0xc8
c001f852:	50                   	push   eax
c001f853:	e8 13 fc ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f858:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f85f:	89 c6                	mov    esi,eax
c001f861:	89 d7                	mov    edi,edx
c001f863:	e8 03 fc ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f868:	57                   	push   edi
c001f869:	56                   	push   esi
c001f86a:	52                   	push   edx
c001f86b:	50                   	push   eax
c001f86c:	e8 a9 fb ff ff       	call   c001f41a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f871:	83 c4 1c             	add    esp,0x1c
c001f874:	e9 d8 fd ff ff       	jmp    c001f651 <Vm::x87Handler(regs*)+0xa9>
c001f879:	8d 50 30             	lea    edx,[eax+0x30]
c001f87c:	80 fa 07             	cmp    dl,0x7
c001f87f:	77 0d                	ja     c001f88e <Vm::x87Handler(regs*)+0x2e6>
c001f881:	83 ec 0c             	sub    esp,0xc
c001f884:	2d d0 00 00 00       	sub    eax,0xd0
c001f889:	e9 99 03 00 00       	jmp    c001fc27 <Vm::x87Handler(regs*)+0x67f>
c001f88e:	8d 50 28             	lea    edx,[eax+0x28]
c001f891:	80 fa 07             	cmp    dl,0x7
c001f894:	77 0d                	ja     c001f8a3 <Vm::x87Handler(regs*)+0x2fb>
c001f896:	83 ec 0c             	sub    esp,0xc
c001f899:	2d d8 00 00 00       	sub    eax,0xd8
c001f89e:	e9 c0 03 00 00       	jmp    c001fc63 <Vm::x87Handler(regs*)+0x6bb>
c001f8a3:	8d 50 20             	lea    edx,[eax+0x20]
c001f8a6:	80 fa 07             	cmp    dl,0x7
c001f8a9:	77 1b                	ja     c001f8c6 <Vm::x87Handler(regs*)+0x31e>
c001f8ab:	83 ec 0c             	sub    esp,0xc
c001f8ae:	2d e0 00 00 00       	sub    eax,0xe0
c001f8b3:	50                   	push   eax
c001f8b4:	e8 b2 fb ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f8b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8c0:	89 c6                	mov    esi,eax
c001f8c2:	89 d7                	mov    edi,edx
c001f8c4:	eb 22                	jmp    c001f8e8 <Vm::x87Handler(regs*)+0x340>
c001f8c6:	8d 50 18             	lea    edx,[eax+0x18]
c001f8c9:	80 fa 07             	cmp    dl,0x7
c001f8cc:	77 2d                	ja     c001f8fb <Vm::x87Handler(regs*)+0x353>
c001f8ce:	83 ec 0c             	sub    esp,0xc
c001f8d1:	6a 00                	push   0x0
c001f8d3:	e8 93 fb ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f8d8:	89 c6                	mov    esi,eax
c001f8da:	89 d7                	mov    edi,edx
c001f8dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8e0:	2d e8 00 00 00       	sub    eax,0xe8
c001f8e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8e8:	e8 7e fb ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f8ed:	57                   	push   edi
c001f8ee:	56                   	push   esi
c001f8ef:	52                   	push   edx
c001f8f0:	50                   	push   eax
c001f8f1:	e8 15 fb ff ff       	call   c001f40b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8f6:	e9 76 ff ff ff       	jmp    c001f871 <Vm::x87Handler(regs*)+0x2c9>
c001f8fb:	8d 50 10             	lea    edx,[eax+0x10]
c001f8fe:	80 fa 07             	cmp    dl,0x7
c001f901:	77 1b                	ja     c001f91e <Vm::x87Handler(regs*)+0x376>
c001f903:	83 ec 0c             	sub    esp,0xc
c001f906:	2d f0 00 00 00       	sub    eax,0xf0
c001f90b:	50                   	push   eax
c001f90c:	e8 5a fb ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f911:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f918:	89 c6                	mov    esi,eax
c001f91a:	89 d7                	mov    edi,edx
c001f91c:	eb 22                	jmp    c001f940 <Vm::x87Handler(regs*)+0x398>
c001f91e:	3c f7                	cmp    al,0xf7
c001f920:	0f 86 d1 03 00 00    	jbe    c001fcf7 <Vm::x87Handler(regs*)+0x74f>
c001f926:	83 ec 0c             	sub    esp,0xc
c001f929:	6a 00                	push   0x0
c001f92b:	e8 3b fb ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f930:	89 c6                	mov    esi,eax
c001f932:	89 d7                	mov    edi,edx
c001f934:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f938:	2d f8 00 00 00       	sub    eax,0xf8
c001f93d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f940:	e8 26 fb ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f945:	57                   	push   edi
c001f946:	56                   	push   esi
c001f947:	52                   	push   edx
c001f948:	50                   	push   eax
c001f949:	e8 eb fa ff ff       	call   c001f439 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f94e:	83 c4 1c             	add    esp,0x1c
c001f951:	52                   	push   edx
c001f952:	50                   	push   eax
c001f953:	6a 00                	push   0x0
c001f955:	e9 51 02 00 00       	jmp    c001fbab <Vm::x87Handler(regs*)+0x603>
c001f95a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f95e:	8d 50 40             	lea    edx,[eax+0x40]
c001f961:	80 fa 07             	cmp    dl,0x7
c001f964:	77 37                	ja     c001f99d <Vm::x87Handler(regs*)+0x3f5>
c001f966:	83 ec 0c             	sub    esp,0xc
c001f969:	2d c0 00 00 00       	sub    eax,0xc0
c001f96e:	50                   	push   eax
c001f96f:	e8 f7 fa ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f974:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f97b:	89 c6                	mov    esi,eax
c001f97d:	89 d7                	mov    edi,edx
c001f97f:	e8 e7 fa ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f984:	57                   	push   edi
c001f985:	56                   	push   esi
c001f986:	52                   	push   edx
c001f987:	50                   	push   eax
c001f988:	e8 54 fa ff ff       	call   c001f3e1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f98d:	83 c4 1c             	add    esp,0x1c
c001f990:	52                   	push   edx
c001f991:	50                   	push   eax
c001f992:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f996:	2d c0 00 00 00       	sub    eax,0xc0
c001f99b:	eb 3d                	jmp    c001f9da <Vm::x87Handler(regs*)+0x432>
c001f99d:	8d 50 38             	lea    edx,[eax+0x38]
c001f9a0:	80 fa 07             	cmp    dl,0x7
c001f9a3:	77 3b                	ja     c001f9e0 <Vm::x87Handler(regs*)+0x438>
c001f9a5:	83 ec 0c             	sub    esp,0xc
c001f9a8:	2d c8 00 00 00       	sub    eax,0xc8
c001f9ad:	50                   	push   eax
c001f9ae:	e8 b8 fa ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f9b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9ba:	89 c6                	mov    esi,eax
c001f9bc:	89 d7                	mov    edi,edx
c001f9be:	e8 a8 fa ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f9c3:	57                   	push   edi
c001f9c4:	56                   	push   esi
c001f9c5:	52                   	push   edx
c001f9c6:	50                   	push   eax
c001f9c7:	e8 4e fa ff ff       	call   c001f41a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9cc:	83 c4 1c             	add    esp,0x1c
c001f9cf:	52                   	push   edx
c001f9d0:	50                   	push   eax
c001f9d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9d5:	2d c8 00 00 00       	sub    eax,0xc8
c001f9da:	50                   	push   eax
c001f9db:	e9 75 fc ff ff       	jmp    c001f655 <Vm::x87Handler(regs*)+0xad>
c001f9e0:	83 c0 18             	add    eax,0x18
c001f9e3:	3c 07                	cmp    al,0x7
c001f9e5:	0f 87 3b 04 00 00    	ja     c001fe26 <Vm::x87Handler(regs*)+0x87e>
c001f9eb:	83 ec 0c             	sub    esp,0xc
c001f9ee:	6a 00                	push   0x0
c001f9f0:	e8 76 fa ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001f9f5:	89 c6                	mov    esi,eax
c001f9f7:	89 d7                	mov    edi,edx
c001f9f9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9fd:	2d e8 00 00 00       	sub    eax,0xe8
c001fa02:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa05:	e8 61 fa ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fa0a:	57                   	push   edi
c001fa0b:	56                   	push   esi
c001fa0c:	52                   	push   edx
c001fa0d:	50                   	push   eax
c001fa0e:	e8 f8 f9 ff ff       	call   c001f40b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa13:	83 c4 1c             	add    esp,0x1c
c001fa16:	52                   	push   edx
c001fa17:	50                   	push   eax
c001fa18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa1c:	2d e8 00 00 00       	sub    eax,0xe8
c001fa21:	eb b7                	jmp    c001f9da <Vm::x87Handler(regs*)+0x432>
c001fa23:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa27:	8d 50 40             	lea    edx,[eax+0x40]
c001fa2a:	80 fa 07             	cmp    dl,0x7
c001fa2d:	77 3a                	ja     c001fa69 <Vm::x87Handler(regs*)+0x4c1>
c001fa2f:	83 ec 0c             	sub    esp,0xc
c001fa32:	2d c0 00 00 00       	sub    eax,0xc0
c001fa37:	50                   	push   eax
c001fa38:	e8 2e fa ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fa3d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa44:	89 c6                	mov    esi,eax
c001fa46:	89 d7                	mov    edi,edx
c001fa48:	e8 1e fa ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fa4d:	57                   	push   edi
c001fa4e:	56                   	push   esi
c001fa4f:	52                   	push   edx
c001fa50:	50                   	push   eax
c001fa51:	e8 8b f9 ff ff       	call   c001f3e1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa56:	83 c4 1c             	add    esp,0x1c
c001fa59:	52                   	push   edx
c001fa5a:	50                   	push   eax
c001fa5b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa5f:	2d c0 00 00 00       	sub    eax,0xc0
c001fa64:	e9 9e 01 00 00       	jmp    c001fc07 <Vm::x87Handler(regs*)+0x65f>
c001fa69:	8d 50 20             	lea    edx,[eax+0x20]
c001fa6c:	80 fa 07             	cmp    dl,0x7
c001fa6f:	77 3a                	ja     c001faab <Vm::x87Handler(regs*)+0x503>
c001fa71:	83 ec 0c             	sub    esp,0xc
c001fa74:	2d e0 00 00 00       	sub    eax,0xe0
c001fa79:	50                   	push   eax
c001fa7a:	e8 ec f9 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fa7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa86:	89 c6                	mov    esi,eax
c001fa88:	89 d7                	mov    edi,edx
c001fa8a:	e8 dc f9 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fa8f:	57                   	push   edi
c001fa90:	56                   	push   esi
c001fa91:	52                   	push   edx
c001fa92:	50                   	push   eax
c001fa93:	e8 73 f9 ff ff       	call   c001f40b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fa98:	83 c4 1c             	add    esp,0x1c
c001fa9b:	52                   	push   edx
c001fa9c:	50                   	push   eax
c001fa9d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faa1:	2d e0 00 00 00       	sub    eax,0xe0
c001faa6:	e9 5c 01 00 00       	jmp    c001fc07 <Vm::x87Handler(regs*)+0x65f>
c001faab:	8d 50 18             	lea    edx,[eax+0x18]
c001faae:	80 fa 07             	cmp    dl,0x7
c001fab1:	77 3b                	ja     c001faee <Vm::x87Handler(regs*)+0x546>
c001fab3:	83 ec 0c             	sub    esp,0xc
c001fab6:	6a 00                	push   0x0
c001fab8:	e8 ae f9 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fabd:	89 c6                	mov    esi,eax
c001fabf:	89 d7                	mov    edi,edx
c001fac1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fac5:	2d e8 00 00 00       	sub    eax,0xe8
c001faca:	89 04 24             	mov    DWORD PTR [esp],eax
c001facd:	e8 99 f9 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fad2:	57                   	push   edi
c001fad3:	56                   	push   esi
c001fad4:	52                   	push   edx
c001fad5:	50                   	push   eax
c001fad6:	e8 30 f9 ff ff       	call   c001f40b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fadb:	83 c4 1c             	add    esp,0x1c
c001fade:	52                   	push   edx
c001fadf:	50                   	push   eax
c001fae0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fae4:	2d e8 00 00 00       	sub    eax,0xe8
c001fae9:	e9 19 01 00 00       	jmp    c001fc07 <Vm::x87Handler(regs*)+0x65f>
c001faee:	8d 50 38             	lea    edx,[eax+0x38]
c001faf1:	80 fa 07             	cmp    dl,0x7
c001faf4:	77 37                	ja     c001fb2d <Vm::x87Handler(regs*)+0x585>
c001faf6:	83 ec 0c             	sub    esp,0xc
c001faf9:	2d c8 00 00 00       	sub    eax,0xc8
c001fafe:	50                   	push   eax
c001faff:	e8 67 f9 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fb04:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb0b:	89 c6                	mov    esi,eax
c001fb0d:	89 d7                	mov    edi,edx
c001fb0f:	e8 57 f9 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fb14:	57                   	push   edi
c001fb15:	56                   	push   esi
c001fb16:	52                   	push   edx
c001fb17:	50                   	push   eax
c001fb18:	e8 fd f8 ff ff       	call   c001f41a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb1d:	83 c4 1c             	add    esp,0x1c
c001fb20:	52                   	push   edx
c001fb21:	50                   	push   eax
c001fb22:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb26:	2d c8 00 00 00       	sub    eax,0xc8
c001fb2b:	eb 7d                	jmp    c001fbaa <Vm::x87Handler(regs*)+0x602>
c001fb2d:	3c f7                	cmp    al,0xf7
c001fb2f:	76 38                	jbe    c001fb69 <Vm::x87Handler(regs*)+0x5c1>
c001fb31:	83 ec 0c             	sub    esp,0xc
c001fb34:	6a 00                	push   0x0
c001fb36:	e8 30 f9 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fb3b:	89 c6                	mov    esi,eax
c001fb3d:	89 d7                	mov    edi,edx
c001fb3f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb43:	2d f8 00 00 00       	sub    eax,0xf8
c001fb48:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb4b:	e8 1b f9 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fb50:	57                   	push   edi
c001fb51:	56                   	push   esi
c001fb52:	52                   	push   edx
c001fb53:	50                   	push   eax
c001fb54:	e8 e0 f8 ff ff       	call   c001f439 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb59:	83 c4 1c             	add    esp,0x1c
c001fb5c:	52                   	push   edx
c001fb5d:	50                   	push   eax
c001fb5e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb62:	2d f8 00 00 00       	sub    eax,0xf8
c001fb67:	eb 41                	jmp    c001fbaa <Vm::x87Handler(regs*)+0x602>
c001fb69:	8d 50 10             	lea    edx,[eax+0x10]
c001fb6c:	80 fa 07             	cmp    dl,0x7
c001fb6f:	0f 87 5a 01 00 00    	ja     c001fccf <Vm::x87Handler(regs*)+0x727>
c001fb75:	83 ec 0c             	sub    esp,0xc
c001fb78:	2d f0 00 00 00       	sub    eax,0xf0
c001fb7d:	50                   	push   eax
c001fb7e:	e8 e8 f8 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fb83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb8a:	89 c6                	mov    esi,eax
c001fb8c:	89 d7                	mov    edi,edx
c001fb8e:	e8 d8 f8 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fb93:	57                   	push   edi
c001fb94:	56                   	push   esi
c001fb95:	52                   	push   edx
c001fb96:	50                   	push   eax
c001fb97:	e8 9d f8 ff ff       	call   c001f439 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb9c:	83 c4 1c             	add    esp,0x1c
c001fb9f:	52                   	push   edx
c001fba0:	50                   	push   eax
c001fba1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fba5:	2d f0 00 00 00       	sub    eax,0xf0
c001fbaa:	50                   	push   eax
c001fbab:	e8 fe f8 ff ff       	call   c001f4ae <Vm::fpuSetReg(int, unsigned long long)>
c001fbb0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbb4:	e8 9d f9 ff ff       	call   c001f556 <Vm::fpuPop()>
c001fbb9:	e9 5e fa ff ff       	jmp    c001f61c <Vm::x87Handler(regs*)+0x74>
c001fbbe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbc2:	8d 50 30             	lea    edx,[eax+0x30]
c001fbc5:	80 fa 07             	cmp    dl,0x7
c001fbc8:	77 1d                	ja     c001fbe7 <Vm::x87Handler(regs*)+0x63f>
c001fbca:	83 ec 0c             	sub    esp,0xc
c001fbcd:	6a 00                	push   0x0
c001fbcf:	e8 97 f8 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fbd4:	83 c4 0c             	add    esp,0xc
c001fbd7:	52                   	push   edx
c001fbd8:	50                   	push   eax
c001fbd9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbdd:	2d d0 00 00 00       	sub    eax,0xd0
c001fbe2:	e9 f3 fd ff ff       	jmp    c001f9da <Vm::x87Handler(regs*)+0x432>
c001fbe7:	8d 50 28             	lea    edx,[eax+0x28]
c001fbea:	80 fa 07             	cmp    dl,0x7
c001fbed:	77 28                	ja     c001fc17 <Vm::x87Handler(regs*)+0x66f>
c001fbef:	83 ec 0c             	sub    esp,0xc
c001fbf2:	6a 00                	push   0x0
c001fbf4:	e8 72 f8 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fbf9:	83 c4 0c             	add    esp,0xc
c001fbfc:	52                   	push   edx
c001fbfd:	50                   	push   eax
c001fbfe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc02:	2d d8 00 00 00       	sub    eax,0xd8
c001fc07:	50                   	push   eax
c001fc08:	e8 a1 f8 ff ff       	call   c001f4ae <Vm::fpuSetReg(int, unsigned long long)>
c001fc0d:	e8 44 f9 ff ff       	call   c001f556 <Vm::fpuPop()>
c001fc12:	e9 01 fa ff ff       	jmp    c001f618 <Vm::x87Handler(regs*)+0x70>
c001fc17:	8d 50 20             	lea    edx,[eax+0x20]
c001fc1a:	80 fa 07             	cmp    dl,0x7
c001fc1d:	77 30                	ja     c001fc4f <Vm::x87Handler(regs*)+0x6a7>
c001fc1f:	83 ec 0c             	sub    esp,0xc
c001fc22:	2d e0 00 00 00       	sub    eax,0xe0
c001fc27:	50                   	push   eax
c001fc28:	e8 3e f8 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fc2d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc34:	89 c6                	mov    esi,eax
c001fc36:	89 d7                	mov    edi,edx
c001fc38:	e8 2e f8 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fc3d:	57                   	push   edi
c001fc3e:	56                   	push   esi
c001fc3f:	52                   	push   edx
c001fc40:	50                   	push   eax
c001fc41:	e8 48 f7 ff ff       	call   c001f38e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc46:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc4a:	e9 54 02 00 00       	jmp    c001fea3 <Vm::x87Handler(regs*)+0x8fb>
c001fc4f:	8d 50 18             	lea    edx,[eax+0x18]
c001fc52:	80 fa 07             	cmp    dl,0x7
c001fc55:	0f 87 43 fb ff ff    	ja     c001f79e <Vm::x87Handler(regs*)+0x1f6>
c001fc5b:	83 ec 0c             	sub    esp,0xc
c001fc5e:	2d e8 00 00 00       	sub    eax,0xe8
c001fc63:	50                   	push   eax
c001fc64:	e8 02 f8 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fc69:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc70:	89 c6                	mov    esi,eax
c001fc72:	89 d7                	mov    edi,edx
c001fc74:	e8 f2 f7 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fc79:	57                   	push   edi
c001fc7a:	56                   	push   esi
c001fc7b:	52                   	push   edx
c001fc7c:	50                   	push   eax
c001fc7d:	e8 0c f7 ff ff       	call   c001f38e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc82:	83 c4 20             	add    esp,0x20
c001fc85:	e8 cc f8 ff ff       	call   c001f556 <Vm::fpuPop()>
c001fc8a:	eb 62                	jmp    c001fcee <Vm::x87Handler(regs*)+0x746>
c001fc8c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fc90:	0f 85 0f 01 00 00    	jne    c001fda5 <Vm::x87Handler(regs*)+0x7fd>
c001fc96:	83 ec 0c             	sub    esp,0xc
c001fc99:	6a 01                	push   0x1
c001fc9b:	e8 cb f7 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fca0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fca7:	89 c6                	mov    esi,eax
c001fca9:	89 d7                	mov    edi,edx
c001fcab:	e8 bb f7 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fcb0:	57                   	push   edi
c001fcb1:	56                   	push   esi
c001fcb2:	52                   	push   edx
c001fcb3:	50                   	push   eax
c001fcb4:	e8 d5 f6 ff ff       	call   c001f38e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcb9:	83 c4 20             	add    esp,0x20
c001fcbc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fcc0:	e8 91 f8 ff ff       	call   c001f556 <Vm::fpuPop()>
c001fcc5:	e8 8c f8 ff ff       	call   c001f556 <Vm::fpuPop()>
c001fcca:	e9 50 f9 ff ff       	jmp    c001f61f <Vm::x87Handler(regs*)+0x77>
c001fccf:	3c d9                	cmp    al,0xd9
c001fcd1:	0f 85 b5 02 00 00    	jne    c001ff8c <Vm::x87Handler(regs*)+0x9e4>
c001fcd7:	eb bd                	jmp    c001fc96 <Vm::x87Handler(regs*)+0x6ee>
c001fcd9:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fcdd:	0f 85 ea 02 00 00    	jne    c001ffcd <Vm::x87Handler(regs*)+0xa25>
c001fce3:	0f b7 05 e0 14 03 c0 	movzx  eax,WORD PTR ds:0xc00314e0
c001fcea:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fcee:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fcf2:	e9 28 f9 ff ff       	jmp    c001f61f <Vm::x87Handler(regs*)+0x77>
c001fcf7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcfb:	84 d2                	test   dl,dl
c001fcfd:	75 0f                	jne    c001fd0e <Vm::x87Handler(regs*)+0x766>
c001fcff:	83 ec 0c             	sub    esp,0xc
c001fd02:	ff 36                	push   DWORD PTR [esi]
c001fd04:	e8 b1 f4 ff ff       	call   c001f1ba <Vm::fpu32ToInternal(unsigned int)>
c001fd09:	e9 2c 01 00 00       	jmp    c001fe3a <Vm::x87Handler(regs*)+0x892>
c001fd0e:	80 fa 01             	cmp    dl,0x1
c001fd11:	75 0f                	jne    c001fd22 <Vm::x87Handler(regs*)+0x77a>
c001fd13:	83 ec 0c             	sub    esp,0xc
c001fd16:	ff 36                	push   DWORD PTR [esi]
c001fd18:	e8 9d f4 ff ff       	call   c001f1ba <Vm::fpu32ToInternal(unsigned int)>
c001fd1d:	e9 81 02 00 00       	jmp    c001ffa3 <Vm::x87Handler(regs*)+0x9fb>
c001fd22:	80 fa 04             	cmp    dl,0x4
c001fd25:	75 0f                	jne    c001fd36 <Vm::x87Handler(regs*)+0x78e>
c001fd27:	83 ec 0c             	sub    esp,0xc
c001fd2a:	ff 36                	push   DWORD PTR [esi]
c001fd2c:	e8 89 f4 ff ff       	call   c001f1ba <Vm::fpu32ToInternal(unsigned int)>
c001fd31:	e9 86 01 00 00       	jmp    c001febc <Vm::x87Handler(regs*)+0x914>
c001fd36:	80 fa 05             	cmp    dl,0x5
c001fd39:	75 1b                	jne    c001fd56 <Vm::x87Handler(regs*)+0x7ae>
c001fd3b:	83 ec 0c             	sub    esp,0xc
c001fd3e:	6a 00                	push   0x0
c001fd40:	e8 26 f7 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fd45:	89 c7                	mov    edi,eax
c001fd47:	89 d5                	mov    ebp,edx
c001fd49:	58                   	pop    eax
c001fd4a:	ff 36                	push   DWORD PTR [esi]
c001fd4c:	e8 69 f4 ff ff       	call   c001f1ba <Vm::fpu32ToInternal(unsigned int)>
c001fd51:	e9 a3 01 00 00       	jmp    c001fef9 <Vm::x87Handler(regs*)+0x951>
c001fd56:	80 fa 06             	cmp    dl,0x6
c001fd59:	75 0f                	jne    c001fd6a <Vm::x87Handler(regs*)+0x7c2>
c001fd5b:	83 ec 0c             	sub    esp,0xc
c001fd5e:	ff 36                	push   DWORD PTR [esi]
c001fd60:	e8 55 f4 ff ff       	call   c001f1ba <Vm::fpu32ToInternal(unsigned int)>
c001fd65:	e9 ae 01 00 00       	jmp    c001ff18 <Vm::x87Handler(regs*)+0x970>
c001fd6a:	31 c0                	xor    eax,eax
c001fd6c:	80 fa 07             	cmp    dl,0x7
c001fd6f:	0f 85 94 02 00 00    	jne    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001fd75:	83 ec 0c             	sub    esp,0xc
c001fd78:	6a 00                	push   0x0
c001fd7a:	e8 ec f6 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fd7f:	89 c7                	mov    edi,eax
c001fd81:	89 d5                	mov    ebp,edx
c001fd83:	58                   	pop    eax
c001fd84:	ff 36                	push   DWORD PTR [esi]
c001fd86:	e8 2f f4 ff ff       	call   c001f1ba <Vm::fpu32ToInternal(unsigned int)>
c001fd8b:	e9 cb 01 00 00       	jmp    c001ff5b <Vm::x87Handler(regs*)+0x9b3>
c001fd90:	80 fa 03             	cmp    dl,0x3
c001fd93:	0f 85 d3 01 00 00    	jne    c001ff6c <Vm::x87Handler(regs*)+0x9c4>
c001fd99:	e8 b8 f7 ff ff       	call   c001f556 <Vm::fpuPop()>
c001fd9e:	51                   	push   ecx
c001fd9f:	51                   	push   ecx
c001fda0:	e9 de 01 00 00       	jmp    c001ff83 <Vm::x87Handler(regs*)+0x9db>
c001fda5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fda9:	80 fa 01             	cmp    dl,0x1
c001fdac:	75 09                	jne    c001fdb7 <Vm::x87Handler(regs*)+0x80f>
c001fdae:	57                   	push   edi
c001fdaf:	57                   	push   edi
c001fdb0:	8b 06                	mov    eax,DWORD PTR [esi]
c001fdb2:	e9 e3 01 00 00       	jmp    c001ff9a <Vm::x87Handler(regs*)+0x9f2>
c001fdb7:	80 fa 04             	cmp    dl,0x4
c001fdba:	75 12                	jne    c001fdce <Vm::x87Handler(regs*)+0x826>
c001fdbc:	31 d2                	xor    edx,edx
c001fdbe:	51                   	push   ecx
c001fdbf:	51                   	push   ecx
c001fdc0:	8b 06                	mov    eax,DWORD PTR [esi]
c001fdc2:	52                   	push   edx
c001fdc3:	50                   	push   eax
c001fdc4:	e8 d0 f4 ff ff       	call   c001f299 <Vm::fpuLongToFloat(long long)>
c001fdc9:	e9 ee 00 00 00       	jmp    c001febc <Vm::x87Handler(regs*)+0x914>
c001fdce:	31 c0                	xor    eax,eax
c001fdd0:	80 fa 07             	cmp    dl,0x7
c001fdd3:	0f 85 30 02 00 00    	jne    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001fdd9:	83 ec 0c             	sub    esp,0xc
c001fddc:	6a 00                	push   0x0
c001fdde:	e8 88 f6 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fde3:	89 c7                	mov    edi,eax
c001fde5:	89 d5                	mov    ebp,edx
c001fde7:	58                   	pop    eax
c001fde8:	8b 06                	mov    eax,DWORD PTR [esi]
c001fdea:	5a                   	pop    edx
c001fdeb:	31 d2                	xor    edx,edx
c001fded:	52                   	push   edx
c001fdee:	50                   	push   eax
c001fdef:	e8 a5 f4 ff ff       	call   c001f299 <Vm::fpuLongToFloat(long long)>
c001fdf4:	e9 62 01 00 00       	jmp    c001ff5b <Vm::x87Handler(regs*)+0x9b3>
c001fdf9:	84 d2                	test   dl,dl
c001fdfb:	75 0d                	jne    c001fe0a <Vm::x87Handler(regs*)+0x862>
c001fdfd:	31 d2                	xor    edx,edx
c001fdff:	55                   	push   ebp
c001fe00:	55                   	push   ebp
c001fe01:	8b 06                	mov    eax,DWORD PTR [esi]
c001fe03:	52                   	push   edx
c001fe04:	50                   	push   eax
c001fe05:	e9 d3 01 00 00       	jmp    c001ffdd <Vm::x87Handler(regs*)+0xa35>
c001fe0a:	31 c0                	xor    eax,eax
c001fe0c:	80 fa 02             	cmp    dl,0x2
c001fe0f:	0f 85 f4 01 00 00    	jne    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001fe15:	83 ec 0c             	sub    esp,0xc
c001fe18:	6a 00                	push   0x0
c001fe1a:	e8 4c f6 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fe1f:	59                   	pop    ecx
c001fe20:	5f                   	pop    edi
c001fe21:	e9 6a f9 ff ff       	jmp    c001f790 <Vm::x87Handler(regs*)+0x1e8>
c001fe26:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe2a:	84 d2                	test   dl,dl
c001fe2c:	75 2a                	jne    c001fe58 <Vm::x87Handler(regs*)+0x8b0>
c001fe2e:	50                   	push   eax
c001fe2f:	50                   	push   eax
c001fe30:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe33:	ff 36                	push   DWORD PTR [esi]
c001fe35:	e8 c5 f3 ff ff       	call   c001f1ff <Vm::fpu64ToInternal(unsigned long long)>
c001fe3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe41:	89 c6                	mov    esi,eax
c001fe43:	89 d7                	mov    edi,edx
c001fe45:	e8 21 f6 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fe4a:	57                   	push   edi
c001fe4b:	56                   	push   esi
c001fe4c:	52                   	push   edx
c001fe4d:	50                   	push   eax
c001fe4e:	e8 8e f5 ff ff       	call   c001f3e1 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe53:	e9 64 01 00 00       	jmp    c001ffbc <Vm::x87Handler(regs*)+0xa14>
c001fe58:	80 fa 01             	cmp    dl,0x1
c001fe5b:	75 11                	jne    c001fe6e <Vm::x87Handler(regs*)+0x8c6>
c001fe5d:	50                   	push   eax
c001fe5e:	50                   	push   eax
c001fe5f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe62:	ff 36                	push   DWORD PTR [esi]
c001fe64:	e8 96 f3 ff ff       	call   c001f1ff <Vm::fpu64ToInternal(unsigned long long)>
c001fe69:	e9 35 01 00 00       	jmp    c001ffa3 <Vm::x87Handler(regs*)+0x9fb>
c001fe6e:	80 fa 02             	cmp    dl,0x2
c001fe71:	0f 85 54 f9 ff ff    	jne    c001f7cb <Vm::x87Handler(regs*)+0x223>
c001fe77:	55                   	push   ebp
c001fe78:	55                   	push   ebp
c001fe79:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe7c:	ff 36                	push   DWORD PTR [esi]
c001fe7e:	e8 7c f3 ff ff       	call   c001f1ff <Vm::fpu64ToInternal(unsigned long long)>
c001fe83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe8a:	89 c6                	mov    esi,eax
c001fe8c:	89 d7                	mov    edi,edx
c001fe8e:	e8 d8 f5 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fe93:	57                   	push   edi
c001fe94:	56                   	push   esi
c001fe95:	52                   	push   edx
c001fe96:	50                   	push   eax
c001fe97:	e8 f2 f4 ff ff       	call   c001f38e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fe9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fea0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fea3:	83 c4 20             	add    esp,0x20
c001fea6:	e9 74 f7 ff ff       	jmp    c001f61f <Vm::x87Handler(regs*)+0x77>
c001feab:	80 fa 04             	cmp    dl,0x4
c001feae:	75 2a                	jne    c001feda <Vm::x87Handler(regs*)+0x932>
c001feb0:	51                   	push   ecx
c001feb1:	51                   	push   ecx
c001feb2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001feb5:	ff 36                	push   DWORD PTR [esi]
c001feb7:	e8 43 f3 ff ff       	call   c001f1ff <Vm::fpu64ToInternal(unsigned long long)>
c001febc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec3:	89 c6                	mov    esi,eax
c001fec5:	89 d7                	mov    edi,edx
c001fec7:	e8 9f f5 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fecc:	57                   	push   edi
c001fecd:	56                   	push   esi
c001fece:	52                   	push   edx
c001fecf:	50                   	push   eax
c001fed0:	e8 36 f5 ff ff       	call   c001f40b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fed5:	e9 e2 00 00 00       	jmp    c001ffbc <Vm::x87Handler(regs*)+0xa14>
c001feda:	80 fa 05             	cmp    dl,0x5
c001fedd:	75 28                	jne    c001ff07 <Vm::x87Handler(regs*)+0x95f>
c001fedf:	83 ec 0c             	sub    esp,0xc
c001fee2:	6a 00                	push   0x0
c001fee4:	e8 82 f5 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001fee9:	89 c7                	mov    edi,eax
c001feeb:	89 d5                	mov    ebp,edx
c001feed:	58                   	pop    eax
c001feee:	5a                   	pop    edx
c001feef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fef2:	ff 36                	push   DWORD PTR [esi]
c001fef4:	e8 06 f3 ff ff       	call   c001f1ff <Vm::fpu64ToInternal(unsigned long long)>
c001fef9:	83 c4 10             	add    esp,0x10
c001fefc:	55                   	push   ebp
c001fefd:	57                   	push   edi
c001fefe:	52                   	push   edx
c001feff:	50                   	push   eax
c001ff00:	e8 06 f5 ff ff       	call   c001f40b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff05:	eb 60                	jmp    c001ff67 <Vm::x87Handler(regs*)+0x9bf>
c001ff07:	80 fa 06             	cmp    dl,0x6
c001ff0a:	75 2a                	jne    c001ff36 <Vm::x87Handler(regs*)+0x98e>
c001ff0c:	51                   	push   ecx
c001ff0d:	51                   	push   ecx
c001ff0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff11:	ff 36                	push   DWORD PTR [esi]
c001ff13:	e8 e7 f2 ff ff       	call   c001f1ff <Vm::fpu64ToInternal(unsigned long long)>
c001ff18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff1f:	89 c6                	mov    esi,eax
c001ff21:	89 d7                	mov    edi,edx
c001ff23:	e8 43 f5 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001ff28:	57                   	push   edi
c001ff29:	56                   	push   esi
c001ff2a:	52                   	push   edx
c001ff2b:	50                   	push   eax
c001ff2c:	e8 08 f5 ff ff       	call   c001f439 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff31:	e9 86 00 00 00       	jmp    c001ffbc <Vm::x87Handler(regs*)+0xa14>
c001ff36:	31 c0                	xor    eax,eax
c001ff38:	80 fa 07             	cmp    dl,0x7
c001ff3b:	0f 85 c8 00 00 00    	jne    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001ff41:	83 ec 0c             	sub    esp,0xc
c001ff44:	6a 00                	push   0x0
c001ff46:	e8 20 f5 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001ff4b:	89 c7                	mov    edi,eax
c001ff4d:	89 d5                	mov    ebp,edx
c001ff4f:	58                   	pop    eax
c001ff50:	5a                   	pop    edx
c001ff51:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff54:	ff 36                	push   DWORD PTR [esi]
c001ff56:	e8 a4 f2 ff ff       	call   c001f1ff <Vm::fpu64ToInternal(unsigned long long)>
c001ff5b:	83 c4 10             	add    esp,0x10
c001ff5e:	55                   	push   ebp
c001ff5f:	57                   	push   edi
c001ff60:	52                   	push   edx
c001ff61:	50                   	push   eax
c001ff62:	e8 d2 f4 ff ff       	call   c001f439 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff67:	83 c4 0c             	add    esp,0xc
c001ff6a:	eb 53                	jmp    c001ffbf <Vm::x87Handler(regs*)+0xa17>
c001ff6c:	31 c0                	xor    eax,eax
c001ff6e:	80 fa 02             	cmp    dl,0x2
c001ff71:	0f 85 92 00 00 00    	jne    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001ff77:	83 ec 0c             	sub    esp,0xc
c001ff7a:	6a 00                	push   0x0
c001ff7c:	e8 ea f4 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001ff81:	59                   	pop    ecx
c001ff82:	5f                   	pop    edi
c001ff83:	52                   	push   edx
c001ff84:	50                   	push   eax
c001ff85:	e8 27 f2 ff ff       	call   c001f1b1 <Vm::fpuInternalTo64(unsigned long long)>
c001ff8a:	eb 70                	jmp    c001fffc <Vm::x87Handler(regs*)+0xa54>
c001ff8c:	31 c0                	xor    eax,eax
c001ff8e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ff93:	75 74                	jne    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001ff95:	50                   	push   eax
c001ff96:	50                   	push   eax
c001ff97:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ff9a:	31 d2                	xor    edx,edx
c001ff9c:	52                   	push   edx
c001ff9d:	50                   	push   eax
c001ff9e:	e8 f6 f2 ff ff       	call   c001f299 <Vm::fpuLongToFloat(long long)>
c001ffa3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffaa:	89 c6                	mov    esi,eax
c001ffac:	89 d7                	mov    edi,edx
c001ffae:	e8 b8 f4 ff ff       	call   c001f46b <Vm::fpuGetReg(int)>
c001ffb3:	57                   	push   edi
c001ffb4:	56                   	push   esi
c001ffb5:	52                   	push   edx
c001ffb6:	50                   	push   eax
c001ffb7:	e8 5e f4 ff ff       	call   c001f41a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffbc:	83 c4 1c             	add    esp,0x1c
c001ffbf:	52                   	push   edx
c001ffc0:	50                   	push   eax
c001ffc1:	6a 00                	push   0x0
c001ffc3:	e8 e6 f4 ff ff       	call   c001f4ae <Vm::fpuSetReg(int, unsigned long long)>
c001ffc8:	e9 f2 f7 ff ff       	jmp    c001f7bf <Vm::x87Handler(regs*)+0x217>
c001ffcd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ffd1:	80 fa 05             	cmp    dl,0x5
c001ffd4:	75 11                	jne    c001ffe7 <Vm::x87Handler(regs*)+0xa3f>
c001ffd6:	55                   	push   ebp
c001ffd7:	55                   	push   ebp
c001ffd8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffdb:	ff 36                	push   DWORD PTR [esi]
c001ffdd:	e8 81 f2 ff ff       	call   c001f263 <Vm::fpuULongToFloat(unsigned long long)>
c001ffe2:	e9 cf f7 ff ff       	jmp    c001f7b6 <Vm::x87Handler(regs*)+0x20e>
c001ffe7:	31 c0                	xor    eax,eax
c001ffe9:	80 fa 07             	cmp    dl,0x7
c001ffec:	75 1b                	jne    c0020009 <Vm::x87Handler(regs*)+0xa61>
c001ffee:	e8 63 f5 ff ff       	call   c001f556 <Vm::fpuPop()>
c001fff3:	51                   	push   ecx
c001fff4:	51                   	push   ecx
c001fff5:	52                   	push   edx
c001fff6:	50                   	push   eax
c001fff7:	e8 0c f2 ff ff       	call   c001f208 <Vm::fpuFloatToLong(unsigned long long)>
c001fffc:	83 c4 10             	add    esp,0x10
c001ffff:	89 06                	mov    DWORD PTR [esi],eax
c0020001:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020004:	e9 f8 f7 ff ff       	jmp    c001f801 <Vm::x87Handler(regs*)+0x259>
c0020009:	83 c4 1c             	add    esp,0x1c
c002000c:	5b                   	pop    ebx
c002000d:	5e                   	pop    esi
c002000e:	5f                   	pop    edi
c002000f:	5d                   	pop    ebp
c0020010:	c3                   	ret    

c0020011 <__static_initialization_and_destruction_0(int, int)>:
c0020011:	83 ec 0c             	sub    esp,0xc
c0020014:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020019:	75 1a                	jne    c0020035 <__static_initialization_and_destruction_0(int, int)+0x24>
c002001b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020023:	75 10                	jne    c0020035 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020025:	83 ec 0c             	sub    esp,0xc
c0020028:	68 e0 14 03 c0       	push   0xc00314e0
c002002d:	e8 0e 88 00 00       	call   c0028840 <Vm::_FPUState::_FPUState()>
c0020032:	83 c4 10             	add    esp,0x10
c0020035:	90                   	nop
c0020036:	83 c4 0c             	add    esp,0xc
c0020039:	c3                   	ret    

c002003a <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002003a:	83 ec 0c             	sub    esp,0xc
c002003d:	83 ec 08             	sub    esp,0x8
c0020040:	68 ff ff 00 00       	push   0xffff
c0020045:	6a 01                	push   0x1
c0020047:	e8 c5 ff ff ff       	call   c0020011 <__static_initialization_and_destruction_0(int, int)>
c002004c:	83 c4 10             	add    esp,0x10
c002004f:	83 c4 0c             	add    esp,0xc
c0020052:	c3                   	ret    
c0020053:	90                   	nop

c0020054 <FAT::getName()>:
c0020054:	b8 dc c1 02 c0       	mov    eax,0xc002c1dc
c0020059:	c3                   	ret    

c002005a <FAT::tell(void*, unsigned long long*)>:
c002005a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002005f:	75 06                	jne    c0020067 <FAT::tell(void*, unsigned long long*)+0xd>
c0020061:	b8 04 00 00 00       	mov    eax,0x4
c0020066:	c3                   	ret    
c0020067:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002006c:	75 06                	jne    c0020074 <FAT::tell(void*, unsigned long long*)+0x1a>
c002006e:	b8 04 00 00 00       	mov    eax,0x4
c0020073:	c3                   	ret    
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002007b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002007e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020082:	89 01                	mov    DWORD PTR [ecx],eax
c0020084:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020087:	b8 00 00 00 00       	mov    eax,0x0
c002008c:	c3                   	ret    
c002008d:	90                   	nop

c002008e <FAT::stat(void*, unsigned long long*)>:
c002008e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020093:	75 06                	jne    c002009b <FAT::stat(void*, unsigned long long*)+0xd>
c0020095:	b8 04 00 00 00       	mov    eax,0x4
c002009a:	c3                   	ret    
c002009b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00200a0:	75 06                	jne    c00200a8 <FAT::stat(void*, unsigned long long*)+0x1a>
c00200a2:	b8 04 00 00 00       	mov    eax,0x4
c00200a7:	c3                   	ret    
c00200a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200ac:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00200af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00200b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00200b6:	89 01                	mov    DWORD PTR [ecx],eax
c00200b8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00200bb:	b8 00 00 00 00       	mov    eax,0x0
c00200c0:	c3                   	ret    
c00200c1:	90                   	nop

c00200c2 <FAT::~FAT()>:
c00200c2:	83 ec 0c             	sub    esp,0xc
c00200c5:	ba 60 c2 02 c0       	mov    edx,0xc002c260
c00200ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ce:	89 10                	mov    DWORD PTR [eax],edx
c00200d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d4:	83 ec 0c             	sub    esp,0xc
c00200d7:	50                   	push   eax
c00200d8:	e8 5b 2d ff ff       	call   c0012e38 <Filesystem::~Filesystem()>
c00200dd:	83 c4 10             	add    esp,0x10
c00200e0:	90                   	nop
c00200e1:	83 c4 0c             	add    esp,0xc
c00200e4:	c3                   	ret    
c00200e5:	90                   	nop

c00200e6 <FAT::~FAT()>:
c00200e6:	83 ec 0c             	sub    esp,0xc
c00200e9:	83 ec 0c             	sub    esp,0xc
c00200ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200f0:	e8 cd ff ff ff       	call   c00200c2 <FAT::~FAT()>
c00200f5:	83 c4 10             	add    esp,0x10
c00200f8:	83 ec 08             	sub    esp,0x8
c00200fb:	6a 08                	push   0x8
c00200fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020101:	e8 29 29 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0020106:	83 c4 10             	add    esp,0x10
c0020109:	83 c4 0c             	add    esp,0xc
c002010c:	c3                   	ret    
c002010d:	90                   	nop

c002010e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002010e:	83 ec 1c             	sub    esp,0x1c
c0020111:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020118:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002011d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020121:	8b 04 85 60 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceaa0]
c0020128:	83 f8 ff             	cmp    eax,0xffffffff
c002012b:	75 34                	jne    c0020161 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002012d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020131:	88 c2                	mov    dl,al
c0020133:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c0020138:	01 d0                	add    eax,edx
c002013a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002013e:	8b 15 40 15 03 c0    	mov    edx,DWORD PTR ds:0xc0031540
c0020144:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020148:	89 14 85 60 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceaa0],edx
c002014f:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c0020154:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020158:	89 14 85 e0 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea20],edx
c002015f:	eb 17                	jmp    c0020178 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020161:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020165:	88 c2                	mov    dl,al
c0020167:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002016b:	8b 04 85 60 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceaa0]
c0020172:	01 d0                	add    eax,edx
c0020174:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020178:	83 ec 04             	sub    esp,0x4
c002017b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002017f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020183:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020187:	50                   	push   eax
c0020188:	e8 ab 6b fe ff       	call   c0006d38 <f_getlabel>
c002018d:	83 c4 10             	add    esp,0x10
c0020190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020194:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020199:	75 07                	jne    c00201a2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002019b:	b8 00 00 00 00       	mov    eax,0x0
c00201a0:	eb 05                	jmp    c00201a7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00201a2:	b8 01 00 00 00       	mov    eax,0x1
c00201a7:	83 c4 1c             	add    esp,0x1c
c00201aa:	c3                   	ret    
c00201ab:	90                   	nop

c00201ac <FAT::setlabel(LogicalDisk*, int, char*)>:
c00201ac:	57                   	push   edi
c00201ad:	83 ec 58             	sub    esp,0x58
c00201b0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00201b8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00201bc:	b9 0f 00 00 00       	mov    ecx,0xf
c00201c1:	b8 00 00 00 00       	mov    eax,0x0
c00201c6:	fc                   	cld    
c00201c7:	89 d7                	mov    edi,edx
c00201c9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00201cb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00201cf:	8b 04 85 60 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceaa0]
c00201d6:	83 f8 ff             	cmp    eax,0xffffffff
c00201d9:	75 34                	jne    c002020f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00201db:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00201df:	88 c2                	mov    dl,al
c00201e1:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c00201e6:	01 d0                	add    eax,edx
c00201e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00201ec:	8b 15 40 15 03 c0    	mov    edx,DWORD PTR ds:0xc0031540
c00201f2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00201f6:	89 14 85 60 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceaa0],edx
c00201fd:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c0020202:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020206:	89 14 85 e0 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea20],edx
c002020d:	eb 17                	jmp    c0020226 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002020f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020213:	88 c2                	mov    dl,al
c0020215:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020219:	8b 04 85 60 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceaa0]
c0020220:	01 d0                	add    eax,edx
c0020222:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020226:	83 ec 08             	sub    esp,0x8
c0020229:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002022d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020231:	50                   	push   eax
c0020232:	e8 3d 07 fe ff       	call   c0000974 <strcat>
c0020237:	83 c4 10             	add    esp,0x10
c002023a:	83 ec 0c             	sub    esp,0xc
c002023d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020241:	50                   	push   eax
c0020242:	e8 df 6c fe ff       	call   c0006f26 <f_setlabel>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002024e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020253:	75 07                	jne    c002025c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020255:	b8 00 00 00 00       	mov    eax,0x0
c002025a:	eb 05                	jmp    c0020261 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002025c:	b8 01 00 00 00       	mov    eax,0x1
c0020261:	83 c4 58             	add    esp,0x58
c0020264:	5f                   	pop    edi
c0020265:	c3                   	ret    

c0020266 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020266:	83 ec 2c             	sub    esp,0x2c
c0020269:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020271:	83 ec 08             	sub    esp,0x8
c0020274:	68 00 c2 02 c0       	push   0xc002c200
c0020279:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002027d:	e8 3e 06 fe ff       	call   c00008c0 <strcmp>
c0020282:	83 c4 10             	add    esp,0x10
c0020285:	85 c0                	test   eax,eax
c0020287:	0f 94 c0             	sete   al
c002028a:	84 c0                	test   al,al
c002028c:	74 0d                	je     c002029b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002028e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020296:	e9 a6 00 00 00       	jmp    c0020341 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002029b:	83 ec 08             	sub    esp,0x8
c002029e:	68 f2 c1 02 c0       	push   0xc002c1f2
c00202a3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00202a7:	e8 14 06 fe ff       	call   c00008c0 <strcmp>
c00202ac:	83 c4 10             	add    esp,0x10
c00202af:	85 c0                	test   eax,eax
c00202b1:	0f 94 c0             	sete   al
c00202b4:	84 c0                	test   al,al
c00202b6:	74 0a                	je     c00202c2 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00202b8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00202c0:	eb 7f                	jmp    c0020341 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00202c2:	83 ec 08             	sub    esp,0x8
c00202c5:	68 f8 c1 02 c0       	push   0xc002c1f8
c00202ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00202ce:	e8 ed 05 fe ff       	call   c00008c0 <strcmp>
c00202d3:	83 c4 10             	add    esp,0x10
c00202d6:	85 c0                	test   eax,eax
c00202d8:	0f 94 c0             	sete   al
c00202db:	84 c0                	test   al,al
c00202dd:	74 0a                	je     c00202e9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00202df:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00202e7:	eb 58                	jmp    c0020341 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00202e9:	83 ec 08             	sub    esp,0x8
c00202ec:	68 ac 8f 02 c0       	push   0xc0028fac
c00202f1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00202f5:	e8 c6 05 fe ff       	call   c00008c0 <strcmp>
c00202fa:	83 c4 10             	add    esp,0x10
c00202fd:	85 c0                	test   eax,eax
c00202ff:	0f 94 c0             	sete   al
c0020302:	84 c0                	test   al,al
c0020304:	74 0a                	je     c0020310 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020306:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002030e:	eb 31                	jmp    c0020341 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020310:	83 ec 08             	sub    esp,0x8
c0020313:	68 fe c1 02 c0       	push   0xc002c1fe
c0020318:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002031c:	e8 9f 05 fe ff       	call   c00008c0 <strcmp>
c0020321:	83 c4 10             	add    esp,0x10
c0020324:	85 c0                	test   eax,eax
c0020326:	0f 94 c0             	sete   al
c0020329:	84 c0                	test   al,al
c002032b:	74 0a                	je     c0020337 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002032d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020335:	eb 0a                	jmp    c0020341 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020337:	b8 08 00 00 00       	mov    eax,0x8
c002033c:	e9 04 01 00 00       	jmp    c0020445 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020341:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020348:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002034d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020351:	8b 04 85 60 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceaa0]
c0020358:	83 f8 ff             	cmp    eax,0xffffffff
c002035b:	75 34                	jne    c0020391 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002035d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020361:	88 c2                	mov    dl,al
c0020363:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c0020368:	01 d0                	add    eax,edx
c002036a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002036e:	8b 15 40 15 03 c0    	mov    edx,DWORD PTR ds:0xc0031540
c0020374:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020378:	89 14 85 60 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceaa0],edx
c002037f:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c0020384:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020388:	89 14 85 e0 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea20],edx
c002038f:	eb 17                	jmp    c00203a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020391:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020395:	88 c2                	mov    dl,al
c0020397:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002039b:	8b 04 85 60 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceaa0]
c00203a2:	01 d0                	add    eax,edx
c00203a4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00203a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00203ac:	88 04 24             	mov    BYTE PTR [esp],al
c00203af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00203b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00203b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00203bf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00203c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00203cc:	83 ec 0c             	sub    esp,0xc
c00203cf:	68 00 20 00 00       	push   0x2000
c00203d4:	e8 67 f4 fe ff       	call   c000f840 <malloc>
c00203d9:	83 c4 10             	add    esp,0x10
c00203dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00203e0:	68 00 20 00 00       	push   0x2000
c00203e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00203ed:	50                   	push   eax
c00203ee:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00203f2:	50                   	push   eax
c00203f3:	e8 79 6f fe ff       	call   c0007371 <f_mkfs>
c00203f8:	83 c4 10             	add    esp,0x10
c00203fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00203ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020404:	75 07                	jne    c002040d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020406:	b8 00 00 00 00       	mov    eax,0x0
c002040b:	eb 38                	jmp    c0020445 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002040d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020412:	75 17                	jne    c002042b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020414:	83 ec 0c             	sub    esp,0xc
c0020417:	68 30 c2 02 c0       	push   0xc002c230
c002041c:	e8 ee 26 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0020421:	83 c4 10             	add    esp,0x10
c0020424:	b8 09 00 00 00       	mov    eax,0x9
c0020429:	eb 1a                	jmp    c0020445 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002042b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002042f:	83 ec 08             	sub    esp,0x8
c0020432:	50                   	push   eax
c0020433:	68 04 c2 02 c0       	push   0xc002c204
c0020438:	e8 d2 26 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002043d:	83 c4 10             	add    esp,0x10
c0020440:	b8 01 00 00 00       	mov    eax,0x1
c0020445:	83 c4 2c             	add    esp,0x2c
c0020448:	c3                   	ret    
c0020449:	90                   	nop

c002044a <FAT::tryMount(LogicalDisk*, int)>:
c002044a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020450:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c0020455:	83 f8 14             	cmp    eax,0x14
c0020458:	75 17                	jne    c0020471 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002045a:	83 ec 0c             	sub    esp,0xc
c002045d:	68 16 c2 02 c0       	push   0xc002c216
c0020462:	e8 24 9d ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0020467:	83 c4 10             	add    esp,0x10
c002046a:	b0 00                	mov    al,0x0
c002046c:	e9 d7 01 00 00       	jmp    c0020648 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020471:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020478:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002047e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020484:	3d 00 02 00 00       	cmp    eax,0x200
c0020489:	74 07                	je     c0020492 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002048b:	b0 00                	mov    al,0x0
c002048d:	e9 b6 01 00 00       	jmp    c0020648 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020492:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002049a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00204a1:	8b 04 85 60 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceaa0]
c00204a8:	83 f8 ff             	cmp    eax,0xffffffff
c00204ab:	74 07                	je     c00204b4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00204ad:	b0 01                	mov    al,0x1
c00204af:	e9 94 01 00 00       	jmp    c0020648 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00204b4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00204be:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00204c6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00204cd:	88 c2                	mov    dl,al
c00204cf:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c00204d4:	01 d0                	add    eax,edx
c00204d6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00204dd:	8b 15 40 15 03 c0    	mov    edx,DWORD PTR ds:0xc0031540
c00204e3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00204ea:	89 14 85 60 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceaa0],edx
c00204f1:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c00204f6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00204fd:	89 14 85 e0 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea20],edx
c0020504:	83 ec 0c             	sub    esp,0xc
c0020507:	68 54 02 00 00       	push   0x254
c002050c:	e8 2f f3 fe ff       	call   c000f840 <malloc>
c0020511:	83 c4 10             	add    esp,0x10
c0020514:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002051b:	83 ec 04             	sub    esp,0x4
c002051e:	6a 00                	push   0x0
c0020520:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020527:	50                   	push   eax
c0020528:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002052f:	e8 fb 49 fe ff       	call   c0004f2f <f_mount>
c0020534:	83 c4 10             	add    esp,0x10
c0020537:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002053e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020546:	74 19                	je     c0020561 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020548:	83 ec 0c             	sub    esp,0xc
c002054b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020552:	e8 09 f3 fe ff       	call   c000f860 <rfree>
c0020557:	83 c4 10             	add    esp,0x10
c002055a:	b0 00                	mov    al,0x0
c002055c:	e9 e7 00 00 00       	jmp    c0020648 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020561:	83 ec 04             	sub    esp,0x4
c0020564:	68 00 01 00 00       	push   0x100
c0020569:	6a 00                	push   0x0
c002056b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020572:	50                   	push   eax
c0020573:	e8 00 02 fe ff       	call   c0000778 <memset>
c0020578:	83 c4 10             	add    esp,0x10
c002057b:	83 ec 08             	sub    esp,0x8
c002057e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020585:	50                   	push   eax
c0020586:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002058d:	50                   	push   eax
c002058e:	e8 e1 03 fe ff       	call   c0000974 <strcat>
c0020593:	83 c4 10             	add    esp,0x10
c0020596:	83 ec 08             	sub    esp,0x8
c0020599:	68 24 c2 02 c0       	push   0xc002c224
c002059e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00205a5:	50                   	push   eax
c00205a6:	e8 c9 03 fe ff       	call   c0000974 <strcat>
c00205ab:	83 c4 10             	add    esp,0x10
c00205ae:	83 ec 04             	sub    esp,0x4
c00205b1:	6a 01                	push   0x1
c00205b3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00205ba:	50                   	push   eax
c00205bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00205bf:	50                   	push   eax
c00205c0:	e8 cc 49 fe ff       	call   c0004f91 <f_open>
c00205c5:	83 c4 10             	add    esp,0x10
c00205c8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00205cf:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00205d6:	85 c0                	test   eax,eax
c00205d8:	74 0a                	je     c00205e4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00205da:	78 2d                	js     c0020609 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00205dc:	83 e8 04             	sub    eax,0x4
c00205df:	83 f8 01             	cmp    eax,0x1
c00205e2:	77 25                	ja     c0020609 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00205e4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00205ec:	83 ec 0c             	sub    esp,0xc
c00205ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00205f3:	50                   	push   eax
c00205f4:	e8 ea 54 fe ff       	call   c0005ae3 <f_close>
c00205f9:	83 c4 10             	add    esp,0x10
c00205fc:	90                   	nop
c00205fd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020605:	74 3a                	je     c0020641 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020607:	eb 2d                	jmp    c0020636 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020609:	83 ec 0c             	sub    esp,0xc
c002060c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020613:	e8 48 f2 fe ff       	call   c000f860 <rfree>
c0020618:	83 c4 10             	add    esp,0x10
c002061b:	83 ec 04             	sub    esp,0x4
c002061e:	6a 00                	push   0x0
c0020620:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020627:	50                   	push   eax
c0020628:	6a 00                	push   0x0
c002062a:	e8 00 49 fe ff       	call   c0004f2f <f_mount>
c002062f:	83 c4 10             	add    esp,0x10
c0020632:	b0 00                	mov    al,0x0
c0020634:	eb 12                	jmp    c0020648 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020636:	a1 40 15 03 c0       	mov    eax,ds:0xc0031540
c002063b:	40                   	inc    eax
c002063c:	a3 40 15 03 c0       	mov    ds:0xc0031540,eax
c0020641:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020648:	81 c4 6c 03 00 00    	add    esp,0x36c
c002064e:	c3                   	ret    
c002064f:	90                   	nop

c0020650 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020650:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020656:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c002065e:	74 0a                	je     c002066a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020660:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020668:	75 0a                	jne    c0020674 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c002066a:	b8 04 00 00 00       	mov    eax,0x4
c002066f:	e9 db 00 00 00       	jmp    c002074f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020674:	83 ec 08             	sub    esp,0x8
c0020677:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002067e:	50                   	push   eax
c002067f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020686:	e8 62 5a fe ff       	call   c00060ed <f_readdir>
c002068b:	83 c4 10             	add    esp,0x10
c002068e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020695:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002069b:	83 ec 0c             	sub    esp,0xc
c002069e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00206a5:	83 c0 1a             	add    eax,0x1a
c00206a8:	50                   	push   eax
c00206a9:	e8 e6 00 fe ff       	call   c0000794 <strlen>
c00206ae:	83 c4 10             	add    esp,0x10
c00206b1:	ba 00 00 00 00       	mov    edx,0x0
c00206b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00206ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00206be:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00206c5:	0f b6 c0             	movzx  eax,al
c00206c8:	83 e0 10             	and    eax,0x10
c00206cb:	74 07                	je     c00206d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00206cd:	b8 02 00 00 00       	mov    eax,0x2
c00206d2:	eb 05                	jmp    c00206d9 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00206d4:	b8 01 00 00 00       	mov    eax,0x1
c00206d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206dd:	83 ec 08             	sub    esp,0x8
c00206e0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00206e7:	83 c0 1a             	add    eax,0x1a
c00206ea:	50                   	push   eax
c00206eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00206ef:	83 c0 10             	add    eax,0x10
c00206f2:	50                   	push   eax
c00206f3:	e8 3c 01 fe ff       	call   c0000834 <strcpy>
c00206f8:	83 c4 10             	add    esp,0x10
c00206fb:	83 ec 04             	sub    esp,0x4
c00206fe:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020705:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020709:	50                   	push   eax
c002070a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020711:	e8 2e 00 fe ff       	call   c0000744 <memcpy>
c0020716:	83 c4 10             	add    esp,0x10
c0020719:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020720:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020726:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c002072d:	84 c0                	test   al,al
c002072f:	75 07                	jne    c0020738 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020731:	b8 07 00 00 00       	mov    eax,0x7
c0020736:	eb 17                	jmp    c002074f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020738:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c002073f:	85 c0                	test   eax,eax
c0020741:	75 07                	jne    c002074a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020743:	b8 00 00 00 00       	mov    eax,0x0
c0020748:	eb 05                	jmp    c002074f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002074a:	b8 01 00 00 00       	mov    eax,0x1
c002074f:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020755:	c3                   	ret    

c0020756 <FAT::read(void*, unsigned long, void*, int*)>:
c0020756:	83 ec 1c             	sub    esp,0x1c
c0020759:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002075e:	74 07                	je     c0020767 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020760:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020765:	75 07                	jne    c002076e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020767:	b8 04 00 00 00       	mov    eax,0x4
c002076c:	eb 3d                	jmp    c00207ab <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002076e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020772:	50                   	push   eax
c0020773:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020777:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002077b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002077f:	e8 49 4c fe ff       	call   c00053cd <f_read>
c0020784:	83 c4 10             	add    esp,0x10
c0020787:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002078b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002078f:	89 c2                	mov    edx,eax
c0020791:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020795:	89 10                	mov    DWORD PTR [eax],edx
c0020797:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002079b:	85 c0                	test   eax,eax
c002079d:	75 07                	jne    c00207a6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002079f:	b8 00 00 00 00       	mov    eax,0x0
c00207a4:	eb 05                	jmp    c00207ab <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00207a6:	b8 01 00 00 00       	mov    eax,0x1
c00207ab:	83 c4 1c             	add    esp,0x1c
c00207ae:	c3                   	ret    
c00207af:	90                   	nop

c00207b0 <FAT::write(void*, unsigned long, void*, int*)>:
c00207b0:	83 ec 1c             	sub    esp,0x1c
c00207b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207b8:	74 07                	je     c00207c1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00207ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00207bf:	75 07                	jne    c00207c8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00207c1:	b8 04 00 00 00       	mov    eax,0x4
c00207c6:	eb 3d                	jmp    c0020805 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00207c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00207cc:	50                   	push   eax
c00207cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00207d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207d9:	e8 6f 4e fe ff       	call   c000564d <f_write>
c00207de:	83 c4 10             	add    esp,0x10
c00207e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207e9:	89 c2                	mov    edx,eax
c00207eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00207ef:	89 10                	mov    DWORD PTR [eax],edx
c00207f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207f5:	85 c0                	test   eax,eax
c00207f7:	75 07                	jne    c0020800 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00207f9:	b8 00 00 00 00       	mov    eax,0x0
c00207fe:	eb 05                	jmp    c0020805 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020800:	b8 01 00 00 00       	mov    eax,0x1
c0020805:	83 c4 1c             	add    esp,0x1c
c0020808:	c3                   	ret    
c0020809:	90                   	nop

c002080a <FAT::close(void*)>:
c002080a:	83 ec 1c             	sub    esp,0x1c
c002080d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020812:	75 07                	jne    c002081b <FAT::close(void*)+0x11>
c0020814:	b8 04 00 00 00       	mov    eax,0x4
c0020819:	eb 36                	jmp    c0020851 <FAT::close(void*)+0x47>
c002081b:	83 ec 0c             	sub    esp,0xc
c002081e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020822:	e8 bc 52 fe ff       	call   c0005ae3 <f_close>
c0020827:	83 c4 10             	add    esp,0x10
c002082a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002082e:	83 ec 0c             	sub    esp,0xc
c0020831:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020835:	e8 16 f0 fe ff       	call   c000f850 <free>
c002083a:	83 c4 10             	add    esp,0x10
c002083d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020841:	85 c0                	test   eax,eax
c0020843:	75 07                	jne    c002084c <FAT::close(void*)+0x42>
c0020845:	b8 00 00 00 00       	mov    eax,0x0
c002084a:	eb 05                	jmp    c0020851 <FAT::close(void*)+0x47>
c002084c:	b8 01 00 00 00       	mov    eax,0x1
c0020851:	83 c4 1c             	add    esp,0x1c
c0020854:	c3                   	ret    
c0020855:	90                   	nop

c0020856 <FAT::closeDir(void*)>:
c0020856:	83 ec 1c             	sub    esp,0x1c
c0020859:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002085e:	75 07                	jne    c0020867 <FAT::closeDir(void*)+0x11>
c0020860:	b8 04 00 00 00       	mov    eax,0x4
c0020865:	eb 36                	jmp    c002089d <FAT::closeDir(void*)+0x47>
c0020867:	83 ec 0c             	sub    esp,0xc
c002086a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002086e:	e8 58 58 fe ff       	call   c00060cb <f_closedir>
c0020873:	83 c4 10             	add    esp,0x10
c0020876:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002087a:	83 ec 0c             	sub    esp,0xc
c002087d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020881:	e8 ca ef fe ff       	call   c000f850 <free>
c0020886:	83 c4 10             	add    esp,0x10
c0020889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002088d:	85 c0                	test   eax,eax
c002088f:	75 07                	jne    c0020898 <FAT::closeDir(void*)+0x42>
c0020891:	b8 00 00 00 00       	mov    eax,0x0
c0020896:	eb 05                	jmp    c002089d <FAT::closeDir(void*)+0x47>
c0020898:	b8 01 00 00 00       	mov    eax,0x1
c002089d:	83 c4 1c             	add    esp,0x1c
c00208a0:	c3                   	ret    
c00208a1:	90                   	nop

c00208a2 <FAT::seek(void*, unsigned long long)>:
c00208a2:	83 ec 2c             	sub    esp,0x2c
c00208a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00208ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00208b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208b5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00208ba:	75 07                	jne    c00208c3 <FAT::seek(void*, unsigned long long)+0x21>
c00208bc:	b8 04 00 00 00       	mov    eax,0x4
c00208c1:	eb 2f                	jmp    c00208f2 <FAT::seek(void*, unsigned long long)+0x50>
c00208c3:	83 ec 04             	sub    esp,0x4
c00208c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00208ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00208ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00208d2:	e8 3b 52 fe ff       	call   c0005b12 <f_lseek>
c00208d7:	83 c4 10             	add    esp,0x10
c00208da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00208de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208e2:	85 c0                	test   eax,eax
c00208e4:	75 07                	jne    c00208ed <FAT::seek(void*, unsigned long long)+0x4b>
c00208e6:	b8 00 00 00 00       	mov    eax,0x0
c00208eb:	eb 05                	jmp    c00208f2 <FAT::seek(void*, unsigned long long)+0x50>
c00208ed:	b8 01 00 00 00       	mov    eax,0x1
c00208f2:	83 c4 2c             	add    esp,0x2c
c00208f5:	c3                   	ret    

c00208f6 <fatWrapperReadDisk>:
c00208f6:	83 ec 1c             	sub    esp,0x1c
c00208f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208fd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020901:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020905:	89 04 24             	mov    DWORD PTR [esp],eax
c0020908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002090c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020910:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020915:	8b 04 85 00 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c00]
c002091c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020920:	83 ec 0c             	sub    esp,0xc
c0020923:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020927:	52                   	push   edx
c0020928:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002092c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020930:	50                   	push   eax
c0020931:	e8 c4 59 ff ff       	call   c00162fa <LogicalDisk::read(unsigned long long, int, void*)>
c0020936:	83 c4 20             	add    esp,0x20
c0020939:	83 c4 1c             	add    esp,0x1c
c002093c:	c3                   	ret    

c002093d <fatWrapperWriteDisk>:
c002093d:	83 ec 1c             	sub    esp,0x1c
c0020940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020944:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020948:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002094c:	89 04 24             	mov    DWORD PTR [esp],eax
c002094f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020953:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020957:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002095c:	8b 04 85 00 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c00]
c0020963:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020967:	83 ec 0c             	sub    esp,0xc
c002096a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002096e:	52                   	push   edx
c002096f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020973:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020977:	50                   	push   eax
c0020978:	e8 e9 59 ff ff       	call   c0016366 <LogicalDisk::write(unsigned long long, int, void*)>
c002097d:	83 c4 20             	add    esp,0x20
c0020980:	83 c4 1c             	add    esp,0x1c
c0020983:	c3                   	ret    

c0020984 <fatWrapperIoctl>:
c0020984:	53                   	push   ebx
c0020985:	83 ec 28             	sub    esp,0x28
c0020988:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002098c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020990:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020994:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020998:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002099d:	75 31                	jne    c00209d0 <fatWrapperIoctl+0x4c>
c002099f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00209a7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00209ac:	8b 04 85 00 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c00]
c00209b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00209c3:	66 89 02             	mov    WORD PTR [edx],ax
c00209c6:	b8 00 00 00 00       	mov    eax,0x0
c00209cb:	e9 b2 00 00 00       	jmp    c0020a82 <fatWrapperIoctl+0xfe>
c00209d0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00209d5:	75 6a                	jne    c0020a41 <fatWrapperIoctl+0xbd>
c00209d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00209e4:	8b 04 85 00 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c00]
c00209eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209f1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00209f7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00209fd:	89 c8                	mov    eax,ecx
c00209ff:	89 da                	mov    edx,ebx
c0020a01:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020a05:	c1 e0 0a             	shl    eax,0xa
c0020a08:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020a0d:	8b 0c 8d 00 e4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1c00]
c0020a14:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020a1a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020a20:	89 cb                	mov    ebx,ecx
c0020a22:	c1 fb 1f             	sar    ebx,0x1f
c0020a25:	53                   	push   ebx
c0020a26:	51                   	push   ecx
c0020a27:	52                   	push   edx
c0020a28:	50                   	push   eax
c0020a29:	e8 be 5a 00 00       	call   c00264ec <__udivdi3>
c0020a2e:	83 c4 10             	add    esp,0x10
c0020a31:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020a35:	89 01                	mov    DWORD PTR [ecx],eax
c0020a37:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020a3a:	b8 00 00 00 00       	mov    eax,0x0
c0020a3f:	eb 41                	jmp    c0020a82 <fatWrapperIoctl+0xfe>
c0020a41:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020a46:	75 07                	jne    c0020a4f <fatWrapperIoctl+0xcb>
c0020a48:	b8 00 00 00 00       	mov    eax,0x0
c0020a4d:	eb 33                	jmp    c0020a82 <fatWrapperIoctl+0xfe>
c0020a4f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020a54:	75 19                	jne    c0020a6f <fatWrapperIoctl+0xeb>
c0020a56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a62:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020a68:	b8 00 00 00 00       	mov    eax,0x0
c0020a6d:	eb 13                	jmp    c0020a82 <fatWrapperIoctl+0xfe>
c0020a6f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020a74:	75 07                	jne    c0020a7d <fatWrapperIoctl+0xf9>
c0020a76:	b8 00 00 00 00       	mov    eax,0x0
c0020a7b:	eb 05                	jmp    c0020a82 <fatWrapperIoctl+0xfe>
c0020a7d:	b8 04 00 00 00       	mov    eax,0x4
c0020a82:	83 c4 28             	add    esp,0x28
c0020a85:	5b                   	pop    ebx
c0020a86:	c3                   	ret    
c0020a87:	90                   	nop

c0020a88 <FAT::FAT()>:
c0020a88:	83 ec 1c             	sub    esp,0x1c
c0020a8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a8f:	83 ec 0c             	sub    esp,0xc
c0020a92:	50                   	push   eax
c0020a93:	e8 7c 23 ff ff       	call   c0012e14 <Filesystem::Filesystem()>
c0020a98:	83 c4 10             	add    esp,0x10
c0020a9b:	ba 60 c2 02 c0       	mov    edx,0xc002c260
c0020aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aa4:	89 10                	mov    DWORD PTR [eax],edx
c0020aa6:	c7 05 40 15 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031540,0x0
c0020ab0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020ab8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020abd:	7f 15                	jg     c0020ad4 <FAT::FAT()+0x4c>
c0020abf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ac3:	c7 04 85 60 15 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffceaa0],0xffffffff
c0020ace:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020ad2:	eb e4                	jmp    c0020ab8 <FAT::FAT()+0x30>
c0020ad4:	90                   	nop
c0020ad5:	83 c4 1c             	add    esp,0x1c
c0020ad8:	c3                   	ret    
c0020ad9:	90                   	nop

c0020ada <FAT::fixFilepath(char*)>:
c0020ada:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ade:	8a 00                	mov    al,BYTE PTR [eax]
c0020ae0:	3c 40                	cmp    al,0x40
c0020ae2:	7e 2c                	jle    c0020b10 <FAT::fixFilepath(char*)+0x36>
c0020ae4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ae8:	8a 00                	mov    al,BYTE PTR [eax]
c0020aea:	83 e8 41             	sub    eax,0x41
c0020aed:	88 c2                	mov    dl,al
c0020aef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020af3:	88 10                	mov    BYTE PTR [eax],dl
c0020af5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020af9:	8a 00                	mov    al,BYTE PTR [eax]
c0020afb:	0f be c0             	movsx  eax,al
c0020afe:	8b 04 85 60 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceaa0]
c0020b05:	83 c0 30             	add    eax,0x30
c0020b08:	88 c2                	mov    dl,al
c0020b0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b0e:	88 10                	mov    BYTE PTR [eax],dl
c0020b10:	90                   	nop
c0020b11:	c3                   	ret    

c0020b12 <FAT::open(char const*, void**, FileOpenMode)>:
c0020b12:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b18:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b20:	74 0a                	je     c0020b2c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020b22:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b2a:	75 0a                	jne    c0020b36 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020b2c:	b8 04 00 00 00       	mov    eax,0x4
c0020b31:	e9 fd 00 00 00       	jmp    c0020c33 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020b36:	83 ec 08             	sub    esp,0x8
c0020b39:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b44:	50                   	push   eax
c0020b45:	e8 ea fc fd ff       	call   c0000834 <strcpy>
c0020b4a:	83 c4 10             	add    esp,0x10
c0020b4d:	83 ec 08             	sub    esp,0x8
c0020b50:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020b54:	50                   	push   eax
c0020b55:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b5c:	e8 79 ff ff ff       	call   c0020ada <FAT::fixFilepath(char*)>
c0020b61:	83 c4 10             	add    esp,0x10
c0020b64:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020b6c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b73:	83 e0 01             	and    eax,0x1
c0020b76:	74 08                	je     c0020b80 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020b78:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020b80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b87:	83 e0 04             	and    eax,0x4
c0020b8a:	74 10                	je     c0020b9c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020b8c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020b94:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020b9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ba3:	83 e0 02             	and    eax,0x2
c0020ba6:	74 08                	je     c0020bb0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020ba8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020bb0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020bb7:	83 e0 08             	and    eax,0x8
c0020bba:	74 08                	je     c0020bc4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020bbc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020bc4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020bcb:	83 e0 10             	and    eax,0x10
c0020bce:	74 08                	je     c0020bd8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020bd0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020bd8:	83 ec 0c             	sub    esp,0xc
c0020bdb:	68 50 02 00 00       	push   0x250
c0020be0:	e8 5b ec fe ff       	call   c000f840 <malloc>
c0020be5:	83 c4 10             	add    esp,0x10
c0020be8:	89 c2                	mov    edx,eax
c0020bea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020bf1:	89 10                	mov    DWORD PTR [eax],edx
c0020bf3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020bfb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c04:	83 ec 04             	sub    esp,0x4
c0020c07:	52                   	push   edx
c0020c08:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020c0c:	52                   	push   edx
c0020c0d:	50                   	push   eax
c0020c0e:	e8 7e 43 fe ff       	call   c0004f91 <f_open>
c0020c13:	83 c4 10             	add    esp,0x10
c0020c16:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020c1d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020c25:	74 07                	je     c0020c2e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020c27:	b8 01 00 00 00       	mov    eax,0x1
c0020c2c:	eb 05                	jmp    c0020c33 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020c2e:	b8 00 00 00 00       	mov    eax,0x0
c0020c33:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c39:	c3                   	ret    

c0020c3a <FAT::openDir(char const*, void**)>:
c0020c3a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c40:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c48:	74 0a                	je     c0020c54 <FAT::openDir(char const*, void**)+0x1a>
c0020c4a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020c52:	75 07                	jne    c0020c5b <FAT::openDir(char const*, void**)+0x21>
c0020c54:	b8 04 00 00 00       	mov    eax,0x4
c0020c59:	eb 7d                	jmp    c0020cd8 <FAT::openDir(char const*, void**)+0x9e>
c0020c5b:	83 ec 08             	sub    esp,0x8
c0020c5e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c69:	50                   	push   eax
c0020c6a:	e8 c5 fb fd ff       	call   c0000834 <strcpy>
c0020c6f:	83 c4 10             	add    esp,0x10
c0020c72:	83 ec 08             	sub    esp,0x8
c0020c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c79:	50                   	push   eax
c0020c7a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c81:	e8 54 fe ff ff       	call   c0020ada <FAT::fixFilepath(char*)>
c0020c86:	83 c4 10             	add    esp,0x10
c0020c89:	83 ec 0c             	sub    esp,0xc
c0020c8c:	6a 4c                	push   0x4c
c0020c8e:	e8 ad eb fe ff       	call   c000f840 <malloc>
c0020c93:	83 c4 10             	add    esp,0x10
c0020c96:	89 c2                	mov    edx,eax
c0020c98:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c9f:	89 10                	mov    DWORD PTR [eax],edx
c0020ca1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0020caa:	83 ec 08             	sub    esp,0x8
c0020cad:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020cb1:	52                   	push   edx
c0020cb2:	50                   	push   eax
c0020cb3:	e8 11 53 fe ff       	call   c0005fc9 <f_opendir>
c0020cb8:	83 c4 10             	add    esp,0x10
c0020cbb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cc2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020cca:	74 07                	je     c0020cd3 <FAT::openDir(char const*, void**)+0x99>
c0020ccc:	b8 01 00 00 00       	mov    eax,0x1
c0020cd1:	eb 05                	jmp    c0020cd8 <FAT::openDir(char const*, void**)+0x9e>
c0020cd3:	b8 00 00 00 00       	mov    eax,0x0
c0020cd8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020cde:	c3                   	ret    
c0020cdf:	90                   	nop

c0020ce0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020ce0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020ce6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020cee:	75 0a                	jne    c0020cfa <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020cf0:	b8 04 00 00 00       	mov    eax,0x4
c0020cf5:	e9 c9 00 00 00       	jmp    c0020dc3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020cfa:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020d02:	75 0a                	jne    c0020d0e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020d04:	b8 04 00 00 00       	mov    eax,0x4
c0020d09:	e9 b5 00 00 00       	jmp    c0020dc3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d0e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020d16:	75 0a                	jne    c0020d22 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020d18:	b8 04 00 00 00       	mov    eax,0x4
c0020d1d:	e9 a1 00 00 00       	jmp    c0020dc3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d22:	83 ec 08             	sub    esp,0x8
c0020d25:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020d2c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020d33:	50                   	push   eax
c0020d34:	e8 fb fa fd ff       	call   c0000834 <strcpy>
c0020d39:	83 c4 10             	add    esp,0x10
c0020d3c:	83 ec 08             	sub    esp,0x8
c0020d3f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020d46:	50                   	push   eax
c0020d47:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020d4e:	e8 87 fd ff ff       	call   c0020ada <FAT::fixFilepath(char*)>
c0020d53:	83 c4 10             	add    esp,0x10
c0020d56:	83 ec 08             	sub    esp,0x8
c0020d59:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d5d:	50                   	push   eax
c0020d5e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020d65:	50                   	push   eax
c0020d66:	e8 1d 54 fe ff       	call   c0006188 <f_stat>
c0020d6b:	83 c4 10             	add    esp,0x10
c0020d6e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020d75:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020d7c:	85 c0                	test   eax,eax
c0020d7e:	74 07                	je     c0020d87 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020d80:	83 f8 04             	cmp    eax,0x4
c0020d83:	74 32                	je     c0020db7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020d85:	eb 37                	jmp    c0020dbe <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020d87:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d8b:	0f b6 c0             	movzx  eax,al
c0020d8e:	83 e0 10             	and    eax,0x10
c0020d91:	0f 95 c2             	setne  dl
c0020d94:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020d9b:	88 10                	mov    BYTE PTR [eax],dl
c0020d9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020da0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020da4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020dab:	89 01                	mov    DWORD PTR [ecx],eax
c0020dad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020db0:	b8 00 00 00 00       	mov    eax,0x0
c0020db5:	eb 0c                	jmp    c0020dc3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020db7:	b8 02 00 00 00       	mov    eax,0x2
c0020dbc:	eb 05                	jmp    c0020dc3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020dbe:	b8 01 00 00 00       	mov    eax,0x1
c0020dc3:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020dc9:	c3                   	ret    

c0020dca <FAT::unlink(char const*)>:
c0020dca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020dd0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020dd8:	75 07                	jne    c0020de1 <FAT::unlink(char const*)+0x17>
c0020dda:	b8 04 00 00 00       	mov    eax,0x4
c0020ddf:	eb 5c                	jmp    c0020e3d <FAT::unlink(char const*)+0x73>
c0020de1:	83 ec 08             	sub    esp,0x8
c0020de4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020deb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020def:	50                   	push   eax
c0020df0:	e8 3f fa fd ff       	call   c0000834 <strcpy>
c0020df5:	83 c4 10             	add    esp,0x10
c0020df8:	83 ec 08             	sub    esp,0x8
c0020dfb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dff:	50                   	push   eax
c0020e00:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e07:	e8 ce fc ff ff       	call   c0020ada <FAT::fixFilepath(char*)>
c0020e0c:	83 c4 10             	add    esp,0x10
c0020e0f:	83 ec 0c             	sub    esp,0xc
c0020e12:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e16:	50                   	push   eax
c0020e17:	e8 be 56 fe ff       	call   c00064da <f_unlink>
c0020e1c:	83 c4 10             	add    esp,0x10
c0020e1f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e26:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e2d:	85 c0                	test   eax,eax
c0020e2f:	75 07                	jne    c0020e38 <FAT::unlink(char const*)+0x6e>
c0020e31:	b8 00 00 00 00       	mov    eax,0x0
c0020e36:	eb 05                	jmp    c0020e3d <FAT::unlink(char const*)+0x73>
c0020e38:	b8 01 00 00 00       	mov    eax,0x1
c0020e3d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e43:	c3                   	ret    

c0020e44 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020e44:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020e4a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020e51:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020e58:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e5c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e60:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020e68:	75 0a                	jne    c0020e74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020e6a:	b8 04 00 00 00       	mov    eax,0x4
c0020e6f:	e9 1c 01 00 00       	jmp    c0020f90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e74:	83 ec 08             	sub    esp,0x8
c0020e77:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020e7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020e82:	50                   	push   eax
c0020e83:	e8 ac f9 fd ff       	call   c0000834 <strcpy>
c0020e88:	83 c4 10             	add    esp,0x10
c0020e8b:	83 ec 08             	sub    esp,0x8
c0020e8e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020e92:	50                   	push   eax
c0020e93:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020e9a:	e8 3b fc ff ff       	call   c0020ada <FAT::fixFilepath(char*)>
c0020e9f:	83 c4 10             	add    esp,0x10
c0020ea2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020eaa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020eb2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020eb7:	83 e0 01             	and    eax,0x1
c0020eba:	74 08                	je     c0020ec4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020ebc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020ec4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ec9:	83 e0 02             	and    eax,0x2
c0020ecc:	74 08                	je     c0020ed6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020ece:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020ed6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020edb:	83 e0 04             	and    eax,0x4
c0020ede:	74 08                	je     c0020ee8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020ee0:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020ee8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020eed:	83 e0 08             	and    eax,0x8
c0020ef0:	74 08                	je     c0020efa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020ef2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020efa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eff:	83 e0 01             	and    eax,0x1
c0020f02:	74 08                	je     c0020f0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020f04:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020f0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f11:	83 e0 02             	and    eax,0x2
c0020f14:	74 08                	je     c0020f1e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020f16:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020f1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f23:	83 e0 04             	and    eax,0x4
c0020f26:	74 08                	je     c0020f30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020f28:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020f30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f35:	83 e0 08             	and    eax,0x8
c0020f38:	74 08                	je     c0020f42 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020f3a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020f42:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020f49:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020f50:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020f58:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020f60:	83 ec 04             	sub    esp,0x4
c0020f63:	52                   	push   edx
c0020f64:	50                   	push   eax
c0020f65:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020f69:	50                   	push   eax
c0020f6a:	e8 0d 5c fe ff       	call   c0006b7c <f_chmod>
c0020f6f:	83 c4 10             	add    esp,0x10
c0020f72:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020f79:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020f80:	85 c0                	test   eax,eax
c0020f82:	75 07                	jne    c0020f8b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020f84:	b8 00 00 00 00       	mov    eax,0x0
c0020f89:	eb 05                	jmp    c0020f90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020f8b:	b8 01 00 00 00       	mov    eax,0x1
c0020f90:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020f96:	c3                   	ret    
c0020f97:	90                   	nop

c0020f98 <FAT::rename(char const*, char const*)>:
c0020f98:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020f9e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020fa6:	74 0a                	je     c0020fb2 <FAT::rename(char const*, char const*)+0x1a>
c0020fa8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020fb0:	75 0a                	jne    c0020fbc <FAT::rename(char const*, char const*)+0x24>
c0020fb2:	b8 04 00 00 00       	mov    eax,0x4
c0020fb7:	e9 98 00 00 00       	jmp    c0021054 <FAT::rename(char const*, char const*)+0xbc>
c0020fbc:	83 ec 08             	sub    esp,0x8
c0020fbf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020fc6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020fcd:	50                   	push   eax
c0020fce:	e8 61 f8 fd ff       	call   c0000834 <strcpy>
c0020fd3:	83 c4 10             	add    esp,0x10
c0020fd6:	83 ec 08             	sub    esp,0x8
c0020fd9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020fe0:	50                   	push   eax
c0020fe1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020fe8:	e8 ed fa ff ff       	call   c0020ada <FAT::fixFilepath(char*)>
c0020fed:	83 c4 10             	add    esp,0x10
c0020ff0:	83 ec 08             	sub    esp,0x8
c0020ff3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020ffa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ffe:	50                   	push   eax
c0020fff:	e8 30 f8 fd ff       	call   c0000834 <strcpy>
c0021004:	83 c4 10             	add    esp,0x10
c0021007:	83 ec 08             	sub    esp,0x8
c002100a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002100e:	50                   	push   eax
c002100f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021016:	e8 bf fa ff ff       	call   c0020ada <FAT::fixFilepath(char*)>
c002101b:	83 c4 10             	add    esp,0x10
c002101e:	83 ec 08             	sub    esp,0x8
c0021021:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021025:	50                   	push   eax
c0021026:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002102d:	50                   	push   eax
c002102e:	e8 56 58 fe ff       	call   c0006889 <f_rename>
c0021033:	83 c4 10             	add    esp,0x10
c0021036:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002103d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021044:	85 c0                	test   eax,eax
c0021046:	75 07                	jne    c002104f <FAT::rename(char const*, char const*)+0xb7>
c0021048:	b8 00 00 00 00       	mov    eax,0x0
c002104d:	eb 05                	jmp    c0021054 <FAT::rename(char const*, char const*)+0xbc>
c002104f:	b8 01 00 00 00       	mov    eax,0x1
c0021054:	81 c4 1c 02 00 00    	add    esp,0x21c
c002105a:	c3                   	ret    
c002105b:	90                   	nop

c002105c <FAT::mkdir(char const*)>:
c002105c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021062:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002106a:	75 07                	jne    c0021073 <FAT::mkdir(char const*)+0x17>
c002106c:	b8 04 00 00 00       	mov    eax,0x4
c0021071:	eb 5c                	jmp    c00210cf <FAT::mkdir(char const*)+0x73>
c0021073:	83 ec 08             	sub    esp,0x8
c0021076:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002107d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021081:	50                   	push   eax
c0021082:	e8 ad f7 fd ff       	call   c0000834 <strcpy>
c0021087:	83 c4 10             	add    esp,0x10
c002108a:	83 ec 08             	sub    esp,0x8
c002108d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021091:	50                   	push   eax
c0021092:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021099:	e8 3c fa ff ff       	call   c0020ada <FAT::fixFilepath(char*)>
c002109e:	83 c4 10             	add    esp,0x10
c00210a1:	83 ec 0c             	sub    esp,0xc
c00210a4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210a8:	50                   	push   eax
c00210a9:	e8 af 55 fe ff       	call   c000665d <f_mkdir>
c00210ae:	83 c4 10             	add    esp,0x10
c00210b1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00210b8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00210bf:	85 c0                	test   eax,eax
c00210c1:	75 07                	jne    c00210ca <FAT::mkdir(char const*)+0x6e>
c00210c3:	b8 00 00 00 00       	mov    eax,0x0
c00210c8:	eb 05                	jmp    c00210cf <FAT::mkdir(char const*)+0x73>
c00210ca:	b8 01 00 00 00       	mov    eax,0x1
c00210cf:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210d5:	c3                   	ret    

c00210d6 <FAT::exists(char const*)>:
c00210d6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00210dc:	83 ec 08             	sub    esp,0x8
c00210df:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00210ea:	50                   	push   eax
c00210eb:	e8 44 f7 fd ff       	call   c0000834 <strcpy>
c00210f0:	83 c4 10             	add    esp,0x10
c00210f3:	83 ec 08             	sub    esp,0x8
c00210f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210fa:	50                   	push   eax
c00210fb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021102:	e8 d3 f9 ff ff       	call   c0020ada <FAT::fixFilepath(char*)>
c0021107:	83 c4 10             	add    esp,0x10
c002110a:	83 ec 08             	sub    esp,0x8
c002110d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021114:	50                   	push   eax
c0021115:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021119:	50                   	push   eax
c002111a:	e8 69 50 fe ff       	call   c0006188 <f_stat>
c002111f:	83 c4 10             	add    esp,0x10
c0021122:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021129:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021130:	85 c0                	test   eax,eax
c0021132:	75 04                	jne    c0021138 <FAT::exists(char const*)+0x62>
c0021134:	b0 01                	mov    al,0x1
c0021136:	eb 02                	jmp    c002113a <FAT::exists(char const*)+0x64>
c0021138:	b0 00                	mov    al,0x0
c002113a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021140:	c3                   	ret    
c0021141:	90                   	nop

c0021142 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021142:	b8 08 00 00 00       	mov    eax,0x8
c0021147:	c3                   	ret    

c0021148 <ISO9660::seek(void*, unsigned long long)>:
c0021148:	53                   	push   ebx
c0021149:	b8 04 00 00 00       	mov    eax,0x4
c002114e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021152:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021156:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002115a:	85 d2                	test   edx,edx
c002115c:	74 17                	je     c0021175 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002115e:	89 c8                	mov    eax,ecx
c0021160:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021163:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021166:	b8 01 00 00 00       	mov    eax,0x1
c002116b:	73 08                	jae    c0021175 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002116d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021170:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021173:	31 c0                	xor    eax,eax
c0021175:	5b                   	pop    ebx
c0021176:	c3                   	ret    
c0021177:	90                   	nop

c0021178 <ISO9660::tell(void*, unsigned long long*)>:
c0021178:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002117c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021180:	85 d2                	test   edx,edx
c0021182:	74 12                	je     c0021196 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021184:	85 c0                	test   eax,eax
c0021186:	74 0e                	je     c0021196 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021188:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002118b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002118e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021191:	89 10                	mov    DWORD PTR [eax],edx
c0021193:	31 c0                	xor    eax,eax
c0021195:	c3                   	ret    
c0021196:	b8 04 00 00 00       	mov    eax,0x4
c002119b:	c3                   	ret    

c002119c <ISO9660::getName()>:
c002119c:	b8 bc c2 02 c0       	mov    eax,0xc002c2bc
c00211a1:	c3                   	ret    

c00211a2 <ISO9660::stat(void*, unsigned long long*)>:
c00211a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00211a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211aa:	85 d2                	test   edx,edx
c00211ac:	74 12                	je     c00211c0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00211ae:	85 c0                	test   eax,eax
c00211b0:	74 0e                	je     c00211c0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00211b2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00211b5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00211b8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00211bb:	89 10                	mov    DWORD PTR [eax],edx
c00211bd:	31 c0                	xor    eax,eax
c00211bf:	c3                   	ret    
c00211c0:	b8 04 00 00 00       	mov    eax,0x4
c00211c5:	c3                   	ret    

c00211c6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00211c6:	b8 01 00 00 00       	mov    eax,0x1
c00211cb:	c3                   	ret    

c00211cc <ISO9660::unlink(char const*)>:
c00211cc:	b8 01 00 00 00       	mov    eax,0x1
c00211d1:	c3                   	ret    

c00211d2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00211d2:	b8 01 00 00 00       	mov    eax,0x1
c00211d7:	c3                   	ret    

c00211d8 <ISO9660::rename(char const*, char const*)>:
c00211d8:	b8 01 00 00 00       	mov    eax,0x1
c00211dd:	c3                   	ret    

c00211de <ISO9660::mkdir(char const*)>:
c00211de:	b8 01 00 00 00       	mov    eax,0x1
c00211e3:	c3                   	ret    

c00211e4 <ISO9660::close(void*)>:
c00211e4:	83 ec 0c             	sub    esp,0xc
c00211e7:	b8 04 00 00 00       	mov    eax,0x4
c00211ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00211f0:	85 d2                	test   edx,edx
c00211f2:	74 0e                	je     c0021202 <ISO9660::close(void*)+0x1e>
c00211f4:	83 ec 0c             	sub    esp,0xc
c00211f7:	52                   	push   edx
c00211f8:	e8 53 e6 fe ff       	call   c000f850 <free>
c00211fd:	83 c4 10             	add    esp,0x10
c0021200:	31 c0                	xor    eax,eax
c0021202:	83 c4 0c             	add    esp,0xc
c0021205:	c3                   	ret    

c0021206 <ISO9660::closeDir(void*)>:
c0021206:	83 ec 0c             	sub    esp,0xc
c0021209:	b8 04 00 00 00       	mov    eax,0x4
c002120e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021212:	85 d2                	test   edx,edx
c0021214:	74 0e                	je     c0021224 <ISO9660::closeDir(void*)+0x1e>
c0021216:	83 ec 0c             	sub    esp,0xc
c0021219:	52                   	push   edx
c002121a:	e8 31 e6 fe ff       	call   c000f850 <free>
c002121f:	83 c4 10             	add    esp,0x10
c0021222:	31 c0                	xor    eax,eax
c0021224:	83 c4 0c             	add    esp,0xc
c0021227:	c3                   	ret    

c0021228 <ISO9660::~ISO9660()>:
c0021228:	83 ec 0c             	sub    esp,0xc
c002122b:	ba 20 c3 02 c0       	mov    edx,0xc002c320
c0021230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021234:	89 10                	mov    DWORD PTR [eax],edx
c0021236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002123a:	83 ec 0c             	sub    esp,0xc
c002123d:	50                   	push   eax
c002123e:	e8 f5 1b ff ff       	call   c0012e38 <Filesystem::~Filesystem()>
c0021243:	83 c4 10             	add    esp,0x10
c0021246:	90                   	nop
c0021247:	83 c4 0c             	add    esp,0xc
c002124a:	c3                   	ret    
c002124b:	90                   	nop

c002124c <ISO9660::~ISO9660()>:
c002124c:	83 ec 0c             	sub    esp,0xc
c002124f:	83 ec 0c             	sub    esp,0xc
c0021252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021256:	e8 cd ff ff ff       	call   c0021228 <ISO9660::~ISO9660()>
c002125b:	83 c4 10             	add    esp,0x10
c002125e:	83 ec 08             	sub    esp,0x8
c0021261:	6a 08                	push   0x8
c0021263:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021267:	e8 c3 17 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c002126c:	83 c4 10             	add    esp,0x10
c002126f:	83 c4 0c             	add    esp,0xc
c0021272:	c3                   	ret    

c0021273 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021273:	55                   	push   ebp
c0021274:	31 c9                	xor    ecx,ecx
c0021276:	57                   	push   edi
c0021277:	56                   	push   esi
c0021278:	53                   	push   ebx
c0021279:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002127d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021281:	89 eb                	mov    ebx,ebp
c0021283:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021287:	39 ce                	cmp    esi,ecx
c0021289:	7e 17                	jle    c00212a2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002128b:	31 d2                	xor    edx,edx
c002128d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021291:	7d 13                	jge    c00212a6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021293:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021297:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002129a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002129d:	75 0d                	jne    c00212ac <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002129f:	42                   	inc    edx
c00212a0:	eb eb                	jmp    c002128d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00212a2:	31 c0                	xor    eax,eax
c00212a4:	eb 0a                	jmp    c00212b0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00212a6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00212aa:	eb 04                	jmp    c00212b0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00212ac:	41                   	inc    ecx
c00212ad:	43                   	inc    ebx
c00212ae:	eb d7                	jmp    c0021287 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00212b0:	5b                   	pop    ebx
c00212b1:	5e                   	pop    esi
c00212b2:	5f                   	pop    edi
c00212b3:	5d                   	pop    ebp
c00212b4:	c3                   	ret    

c00212b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00212b5:	56                   	push   esi
c00212b6:	53                   	push   ebx
c00212b7:	52                   	push   edx
c00212b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00212bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00212c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00212c4:	39 0d 40 16 03 c0    	cmp    DWORD PTR ds:0xc0031640,ecx
c00212ca:	75 08                	jne    c00212d4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00212cc:	38 05 74 d3 02 c0    	cmp    BYTE PTR ds:0xc002d374,al
c00212d2:	74 2b                	je     c00212ff <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00212d4:	83 ec 0c             	sub    esp,0xc
c00212d7:	a2 74 d3 02 c0       	mov    ds:0xc002d374,al
c00212dc:	68 60 16 03 c0       	push   0xc0031660
c00212e1:	0f be c0             	movsx  eax,al
c00212e4:	6a 01                	push   0x1
c00212e6:	89 0d 40 16 03 c0    	mov    DWORD PTR ds:0xc0031640,ecx
c00212ec:	31 db                	xor    ebx,ebx
c00212ee:	53                   	push   ebx
c00212ef:	51                   	push   ecx
c00212f0:	ff 34 85 fc e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1d04]
c00212f7:	e8 fe 4f ff ff       	call   c00162fa <LogicalDisk::read(unsigned long long, int, void*)>
c00212fc:	83 c4 20             	add    esp,0x20
c00212ff:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021307:	c7 44 24 14 60 16 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031660
c002130f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021313:	58                   	pop    eax
c0021314:	5b                   	pop    ebx
c0021315:	5e                   	pop    esi
c0021316:	e9 29 f4 fd ff       	jmp    c0000744 <memcpy>
c002131b:	90                   	nop

c002131c <ISO9660::tryMount(LogicalDisk*, int)>:
c002131c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021322:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021329:	83 c0 41             	add    eax,0x41
c002132c:	0f be c0             	movsx  eax,al
c002132f:	50                   	push   eax
c0021330:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021334:	50                   	push   eax
c0021335:	6a 10                	push   0x10
c0021337:	e8 79 ff ff ff       	call   c00212b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002133c:	83 c4 10             	add    esp,0x10
c002133f:	31 c0                	xor    eax,eax
c0021341:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021346:	75 1d                	jne    c0021365 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021348:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002134d:	75 16                	jne    c0021365 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002134f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021354:	75 0f                	jne    c0021365 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021356:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002135b:	75 08                	jne    c0021365 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002135d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021362:	0f 94 c0             	sete   al
c0021365:	81 c4 0c 08 00 00    	add    esp,0x80c
c002136b:	c3                   	ret    

c002136c <ISO9660::read(void*, unsigned long, void*, int*)>:
c002136c:	55                   	push   ebp
c002136d:	57                   	push   edi
c002136e:	56                   	push   esi
c002136f:	53                   	push   ebx
c0021370:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021376:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002137d:	85 ed                	test   ebp,ebp
c002137f:	0f 84 d6 01 00 00    	je     c002155b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021385:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002138d:	0f 84 c8 01 00 00    	je     c002155b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021393:	b8 01 00 00 00       	mov    eax,0x1
c0021398:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002139c:	0f 85 be 01 00 00    	jne    c0021560 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00213a2:	31 d2                	xor    edx,edx
c00213a4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00213ab:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00213ae:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00213b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00213b5:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00213b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00213bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213bf:	01 f0                	add    eax,esi
c00213c1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00213c4:	11 fa                	adc    edx,edi
c00213c6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00213ca:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00213ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00213d2:	19 d1                	sbb    ecx,edx
c00213d4:	72 0a                	jb     c00213e0 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00213d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213de:	eb 13                	jmp    c00213f3 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00213e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213e8:	29 f0                	sub    eax,esi
c00213ea:	19 fa                	sbb    edx,edi
c00213ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00213ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00213f6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00213f9:	0f a4 c2 0b          	shld   edx,eax,0xb
c00213fd:	51                   	push   ecx
c00213fe:	c1 e0 0b             	shl    eax,0xb
c0021401:	01 c6                	add    esi,eax
c0021403:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021407:	11 d7                	adc    edi,edx
c0021409:	50                   	push   eax
c002140a:	89 fa                	mov    edx,edi
c002140c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021410:	89 f0                	mov    eax,esi
c0021412:	53                   	push   ebx
c0021413:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021417:	50                   	push   eax
c0021418:	e8 98 fe ff ff       	call   c00212b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002141d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021421:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021424:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021428:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002142e:	83 c4 10             	add    esp,0x10
c0021431:	b8 00 08 00 00       	mov    eax,0x800
c0021436:	29 d0                	sub    eax,edx
c0021438:	39 c1                	cmp    ecx,eax
c002143a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002143e:	83 d9 00             	sbb    ecx,0x0
c0021441:	7d 1c                	jge    c002145f <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021443:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021448:	75 12                	jne    c002145c <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002144a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021451:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021457:	e9 fb 00 00 00       	jmp    c0021557 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002145c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002145f:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021462:	31 d2                	xor    edx,edx
c0021464:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021468:	39 c2                	cmp    edx,eax
c002146a:	7d 14                	jge    c0021480 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002146c:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021473:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021477:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002147a:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002147d:	42                   	inc    edx
c002147e:	eb e8                	jmp    c0021468 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021480:	89 c3                	mov    ebx,eax
c0021482:	85 c0                	test   eax,eax
c0021484:	79 02                	jns    c0021488 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021486:	31 db                	xor    ebx,ebx
c0021488:	99                   	cdq    
c0021489:	01 c3                	add    ebx,eax
c002148b:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021492:	01 c6                	add    esi,eax
c0021494:	11 d7                	adc    edi,edx
c0021496:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002149a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002149e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00214a1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00214a5:	29 c6                	sub    esi,eax
c00214a7:	19 d7                	sbb    edi,edx
c00214a9:	89 34 24             	mov    DWORD PTR [esp],esi
c00214ac:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00214b0:	b8 ff 07 00 00       	mov    eax,0x7ff
c00214b5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00214b8:	b8 00 00 00 00       	mov    eax,0x0
c00214bd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00214c1:	7d 3e                	jge    c0021501 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00214c3:	52                   	push   edx
c00214c4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214c8:	50                   	push   eax
c00214c9:	53                   	push   ebx
c00214ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00214d2:	0f ac d0 0b          	shrd   eax,edx,0xb
c00214d6:	50                   	push   eax
c00214d7:	e8 d9 fd ff ff       	call   c00212b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214dc:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00214e4:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00214e9:	81 c3 00 08 00 00    	add    ebx,0x800
c00214ef:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00214f7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00214fc:	83 c4 10             	add    esp,0x10
c00214ff:	eb af                	jmp    c00214b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021505:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021508:	74 32                	je     c002153c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002150a:	50                   	push   eax
c002150b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002150f:	50                   	push   eax
c0021510:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021514:	50                   	push   eax
c0021515:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021519:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002151d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021521:	56                   	push   esi
c0021522:	e8 8e fd ff ff       	call   c00212b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021527:	83 c4 0c             	add    esp,0xc
c002152a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c002152e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021532:	50                   	push   eax
c0021533:	53                   	push   ebx
c0021534:	e8 0b f2 fd ff       	call   c0000744 <memcpy>
c0021539:	83 c4 10             	add    esp,0x10
c002153c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021543:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021547:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002154b:	89 38                	mov    DWORD PTR [eax],edi
c002154d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021551:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021554:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021557:	31 c0                	xor    eax,eax
c0021559:	eb 05                	jmp    c0021560 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002155b:	b8 04 00 00 00       	mov    eax,0x4
c0021560:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021566:	5b                   	pop    ebx
c0021567:	5e                   	pop    esi
c0021568:	5f                   	pop    edi
c0021569:	5d                   	pop    ebp
c002156a:	c3                   	ret    
c002156b:	90                   	nop

c002156c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002156c:	55                   	push   ebp
c002156d:	57                   	push   edi
c002156e:	56                   	push   esi
c002156f:	53                   	push   ebx
c0021570:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021576:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c002157d:	85 f6                	test   esi,esi
c002157f:	0f 84 64 02 00 00    	je     c00217e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021585:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002158d:	0f 84 56 02 00 00    	je     c00217e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021593:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021596:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021599:	75 0a                	jne    c00215a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002159b:	b8 07 00 00 00       	mov    eax,0x7
c00215a0:	e9 49 02 00 00       	jmp    c00217ee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00215a5:	50                   	push   eax
c00215a6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00215aa:	50                   	push   eax
c00215ab:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00215b2:	53                   	push   ebx
c00215b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00215b5:	c1 e0 0b             	shl    eax,0xb
c00215b8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00215bb:	c1 e8 0b             	shr    eax,0xb
c00215be:	50                   	push   eax
c00215bf:	e8 f1 fc ff ff       	call   c00212b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00215c7:	83 c4 10             	add    esp,0x10
c00215ca:	89 c1                	mov    ecx,eax
c00215cc:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00215cf:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00215d5:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00215d8:	84 db                	test   bl,bl
c00215da:	0f 85 90 00 00 00    	jne    c0021670 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00215e0:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00215e6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00215ec:	29 c7                	sub    edi,eax
c00215ee:	89 fb                	mov    ebx,edi
c00215f0:	c1 fb 1f             	sar    ebx,0x1f
c00215f3:	01 f8                	add    eax,edi
c00215f5:	11 da                	adc    edx,ebx
c00215f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00215ff:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021602:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021605:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021608:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002160b:	89 04 24             	mov    DWORD PTR [esp],eax
c002160e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021612:	89 d8                	mov    eax,ebx
c0021614:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021617:	ba 00 00 00 00       	mov    edx,0x0
c002161c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021620:	b8 00 00 00 00       	mov    eax,0x0
c0021625:	73 0b                	jae    c0021632 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021627:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002162a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002162e:	29 f8                	sub    eax,edi
c0021630:	19 da                	sbb    edx,ebx
c0021632:	89 d3                	mov    ebx,edx
c0021634:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021637:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002163a:	09 c3                	or     ebx,eax
c002163c:	0f 84 59 ff ff ff    	je     c002159b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021642:	55                   	push   ebp
c0021643:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021647:	50                   	push   eax
c0021648:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002164f:	53                   	push   ebx
c0021650:	8b 06                	mov    eax,DWORD PTR [esi]
c0021652:	c1 e0 0b             	shl    eax,0xb
c0021655:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021659:	c1 e8 0b             	shr    eax,0xb
c002165c:	50                   	push   eax
c002165d:	e8 53 fc ff ff       	call   c00212b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021662:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021665:	83 c4 10             	add    esp,0x10
c0021668:	25 ff 07 00 00       	and    eax,0x7ff
c002166d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021670:	57                   	push   edi
c0021671:	6a 28                	push   0x28
c0021673:	6a 00                	push   0x0
c0021675:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021679:	50                   	push   eax
c002167a:	e8 f9 f0 fd ff       	call   c0000778 <memset>
c002167f:	31 d2                	xor    edx,edx
c0021681:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021684:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002168a:	89 f8                	mov    eax,edi
c002168c:	83 c0 21             	add    eax,0x21
c002168f:	83 d2 00             	adc    edx,0x0
c0021692:	89 c7                	mov    edi,eax
c0021694:	89 d5                	mov    ebp,edx
c0021696:	83 c4 10             	add    esp,0x10
c0021699:	31 c9                	xor    ecx,ecx
c002169b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c00216a2:	83 f9 28             	cmp    ecx,0x28
c00216a5:	88 04 24             	mov    BYTE PTR [esp],al
c00216a8:	0f 94 c2             	sete   dl
c00216ab:	88 d0                	mov    al,dl
c00216ad:	ba ff 07 00 00       	mov    edx,0x7ff
c00216b2:	39 fa                	cmp    edx,edi
c00216b4:	ba 00 00 00 00       	mov    edx,0x0
c00216b9:	19 ea                	sbb    edx,ebp
c00216bb:	0f 92 c2             	setb   dl
c00216be:	09 c2                	or     edx,eax
c00216c0:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00216c4:	0f 94 c0             	sete   al
c00216c7:	08 d0                	or     al,dl
c00216c9:	75 16                	jne    c00216e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00216cb:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00216cf:	74 10                	je     c00216e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00216d1:	8a 04 24             	mov    al,BYTE PTR [esp]
c00216d4:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00216d8:	41                   	inc    ecx
c00216d9:	83 c7 01             	add    edi,0x1
c00216dc:	83 d5 00             	adc    ebp,0x0
c00216df:	eb ba                	jmp    c002169b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c00216e1:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00216e8:	83 ec 0c             	sub    esp,0xc
c00216eb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00216ef:	57                   	push   edi
c00216f0:	e8 9f f0 fd ff       	call   c0000794 <strlen>
c00216f5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00216fd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021701:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021708:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002170b:	5a                   	pop    edx
c002170c:	25 ff 07 00 00       	and    eax,0x7ff
c0021711:	01 c8                	add    eax,ecx
c0021713:	59                   	pop    ecx
c0021714:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002171a:	83 e0 02             	and    eax,0x2
c002171d:	3c 01                	cmp    al,0x1
c002171f:	19 c0                	sbb    eax,eax
c0021721:	83 c0 02             	add    eax,0x2
c0021724:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021728:	57                   	push   edi
c0021729:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002172d:	50                   	push   eax
c002172e:	e8 01 f1 fd ff       	call   c0000834 <strcpy>
c0021733:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021737:	83 c4 10             	add    esp,0x10
c002173a:	84 c0                	test   al,al
c002173c:	75 21                	jne    c002175f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c002173e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021746:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002174e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021756:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002175d:	eb 28                	jmp    c0021787 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002175f:	fe c8                	dec    al
c0021761:	75 24                	jne    c0021787 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021763:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002176b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021773:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002177b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021782:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021787:	0f b6 fb             	movzx  edi,bl
c002178a:	31 db                	xor    ebx,ebx
c002178c:	50                   	push   eax
c002178d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021794:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021798:	50                   	push   eax
c0021799:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c00217a0:	e8 9f ef fd ff       	call   c0000744 <memcpy>
c00217a5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00217ac:	89 f9                	mov    ecx,edi
c00217ae:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00217b4:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00217b7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00217ba:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00217bd:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00217c0:	83 c4 10             	add    esp,0x10
c00217c3:	39 c7                	cmp    edi,eax
c00217c5:	89 df                	mov    edi,ebx
c00217c7:	19 d7                	sbb    edi,edx
c00217c9:	72 10                	jb     c00217db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00217cb:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00217d2:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00217d9:	eb 0a                	jmp    c00217e5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00217db:	29 c8                	sub    eax,ecx
c00217dd:	19 da                	sbb    edx,ebx
c00217df:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00217e2:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00217e5:	31 c0                	xor    eax,eax
c00217e7:	eb 05                	jmp    c00217ee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00217e9:	b8 04 00 00 00       	mov    eax,0x4
c00217ee:	81 c4 5c 09 00 00    	add    esp,0x95c
c00217f4:	5b                   	pop    ebx
c00217f5:	5e                   	pop    esi
c00217f6:	5f                   	pop    edi
c00217f7:	5d                   	pop    ebp
c00217f8:	c3                   	ret    

c00217f9 <readRoot(unsigned int*, unsigned int*, char)>:
c00217f9:	81 ec 40 08 00 00    	sub    esp,0x840
c00217ff:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021807:	50                   	push   eax
c0021808:	8d 44 24 38          	lea    eax,[esp+0x38]
c002180c:	50                   	push   eax
c002180d:	6a 10                	push   0x10
c002180f:	e8 a1 fa ff ff       	call   c00212b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021814:	83 c4 0c             	add    esp,0xc
c0021817:	6a 22                	push   0x22
c0021819:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021820:	50                   	push   eax
c0021821:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021825:	50                   	push   eax
c0021826:	e8 19 ef fd ff       	call   c0000744 <memcpy>
c002182b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021832:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021836:	89 10                	mov    DWORD PTR [eax],edx
c0021838:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002183f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021843:	89 10                	mov    DWORD PTR [eax],edx
c0021845:	b0 01                	mov    al,0x1
c0021847:	81 c4 4c 08 00 00    	add    esp,0x84c
c002184d:	c3                   	ret    

c002184e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002184e:	55                   	push   ebp
c002184f:	57                   	push   edi
c0021850:	56                   	push   esi
c0021851:	53                   	push   ebx
c0021852:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021858:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002185f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021866:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002186a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002186e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021872:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021876:	75 03                	jne    c002187b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021878:	83 c3 02             	add    ebx,0x2
c002187b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002187e:	75 03                	jne    c0021883 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021880:	43                   	inc    ebx
c0021881:	eb f8                	jmp    c002187b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021883:	51                   	push   ecx
c0021884:	68 00 01 00 00       	push   0x100
c0021889:	6a 00                	push   0x0
c002188b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002188f:	50                   	push   eax
c0021890:	e8 e3 ee fd ff       	call   c0000778 <memset>
c0021895:	83 c4 10             	add    esp,0x10
c0021898:	31 d2                	xor    edx,edx
c002189a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002189d:	84 c0                	test   al,al
c002189f:	74 21                	je     c00218c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00218a1:	3c 2f                	cmp    al,0x2f
c00218a3:	75 0b                	jne    c00218b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00218a5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00218a9:	bd 01 00 00 00       	mov    ebp,0x1
c00218ae:	eb 14                	jmp    c00218c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00218b0:	8d 48 9f             	lea    ecx,[eax-0x61]
c00218b3:	80 f9 19             	cmp    cl,0x19
c00218b6:	77 03                	ja     c00218bb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00218b8:	83 e8 20             	sub    eax,0x20
c00218bb:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00218bf:	42                   	inc    edx
c00218c0:	eb d8                	jmp    c002189a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00218c2:	31 ed                	xor    ebp,ebp
c00218c4:	83 ec 0c             	sub    esp,0xc
c00218c7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00218ce:	e8 6d df fe ff       	call   c000f840 <malloc>
c00218d3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00218da:	89 c6                	mov    esi,eax
c00218dc:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00218e2:	c1 ef 0b             	shr    edi,0xb
c00218e5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00218ec:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00218f0:	83 c4 10             	add    esp,0x10
c00218f3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00218f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00218fc:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021903:	74 28                	je     c002192d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021905:	52                   	push   edx
c0021906:	57                   	push   edi
c0021907:	50                   	push   eax
c0021908:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002190c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021913:	e8 9d f9 ff ff       	call   c00212b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021918:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002191c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021923:	05 00 08 00 00       	add    eax,0x800
c0021928:	83 c4 10             	add    esp,0x10
c002192b:	eb cb                	jmp    c00218f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002192d:	83 ec 0c             	sub    esp,0xc
c0021930:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021934:	57                   	push   edi
c0021935:	e8 5a ee fd ff       	call   c0000794 <strlen>
c002193a:	50                   	push   eax
c002193b:	57                   	push   edi
c002193c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021943:	56                   	push   esi
c0021944:	e8 2a f9 ff ff       	call   c0021273 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021949:	83 c4 20             	add    esp,0x20
c002194c:	85 c0                	test   eax,eax
c002194e:	75 13                	jne    c0021963 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021950:	83 ec 0c             	sub    esp,0xc
c0021953:	56                   	push   esi
c0021954:	e8 f7 de fe ff       	call   c000f850 <free>
c0021959:	83 c4 10             	add    esp,0x10
c002195c:	31 c0                	xor    eax,eax
c002195e:	e9 b3 00 00 00       	jmp    c0021a16 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021963:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021967:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002196b:	c1 e7 08             	shl    edi,0x8
c002196e:	c1 e2 10             	shl    edx,0x10
c0021971:	09 d7                	or     edi,edx
c0021973:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021977:	09 d7                	or     edi,edx
c0021979:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002197d:	c1 e2 18             	shl    edx,0x18
c0021980:	09 d7                	or     edi,edx
c0021982:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021986:	89 d1                	mov    ecx,edx
c0021988:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002198c:	c1 e1 08             	shl    ecx,0x8
c002198f:	c1 e2 10             	shl    edx,0x10
c0021992:	09 ca                	or     edx,ecx
c0021994:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021998:	09 ca                	or     edx,ecx
c002199a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002199e:	c1 e1 18             	shl    ecx,0x18
c00219a1:	09 ca                	or     edx,ecx
c00219a3:	89 e9                	mov    ecx,ebp
c00219a5:	84 c9                	test   cl,cl
c00219a7:	74 3c                	je     c00219e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00219a9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00219ad:	83 ec 0c             	sub    esp,0xc
c00219b0:	56                   	push   esi
c00219b1:	e8 9a de fe ff       	call   c000f850 <free>
c00219b6:	83 c4 0c             	add    esp,0xc
c00219b9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00219c0:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00219c5:	50                   	push   eax
c00219c6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00219cd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00219d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00219d8:	52                   	push   edx
c00219d9:	57                   	push   edi
c00219da:	53                   	push   ebx
c00219db:	e8 6e fe ff ff       	call   c002184e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00219e0:	83 c4 20             	add    esp,0x20
c00219e3:	eb 31                	jmp    c0021a16 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00219e5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00219e8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00219ef:	d0 e8                	shr    al,1
c00219f1:	89 3b                	mov    DWORD PTR [ebx],edi
c00219f3:	83 e0 01             	and    eax,0x1
c00219f6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00219fd:	83 ec 0c             	sub    esp,0xc
c0021a00:	89 13                	mov    DWORD PTR [ebx],edx
c0021a02:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021a09:	89 03                	mov    DWORD PTR [ebx],eax
c0021a0b:	56                   	push   esi
c0021a0c:	e8 3f de fe ff       	call   c000f850 <free>
c0021a11:	83 c4 10             	add    esp,0x10
c0021a14:	b0 01                	mov    al,0x1
c0021a16:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a1c:	5b                   	pop    ebx
c0021a1d:	5e                   	pop    esi
c0021a1e:	5f                   	pop    edi
c0021a1f:	5d                   	pop    ebp
c0021a20:	c3                   	ret    

c0021a21 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021a21:	55                   	push   ebp
c0021a22:	57                   	push   edi
c0021a23:	56                   	push   esi
c0021a24:	53                   	push   ebx
c0021a25:	83 ec 20             	sub    esp,0x20
c0021a28:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021a2c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021a30:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021a34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a3c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021a44:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021a49:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021a4f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021a55:	57                   	push   edi
c0021a56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a5a:	50                   	push   eax
c0021a5b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a5f:	50                   	push   eax
c0021a60:	e8 94 fd ff ff       	call   c00217f9 <readRoot(unsigned int*, unsigned int*, char)>
c0021a65:	5a                   	pop    edx
c0021a66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021a6a:	e8 25 ed fd ff       	call   c0000794 <strlen>
c0021a6f:	83 c4 10             	add    esp,0x10
c0021a72:	83 f8 03             	cmp    eax,0x3
c0021a75:	77 17                	ja     c0021a8e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a7b:	89 03                	mov    DWORD PTR [ebx],eax
c0021a7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a81:	89 06                	mov    DWORD PTR [esi],eax
c0021a83:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021a8a:	b0 01                	mov    al,0x1
c0021a8c:	eb 19                	jmp    c0021aa7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021a8e:	50                   	push   eax
c0021a8f:	55                   	push   ebp
c0021a90:	57                   	push   edi
c0021a91:	56                   	push   esi
c0021a92:	53                   	push   ebx
c0021a93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021a97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021a9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021a9f:	e8 aa fd ff ff       	call   c002184e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021aa4:	83 c4 20             	add    esp,0x20
c0021aa7:	83 c4 1c             	add    esp,0x1c
c0021aaa:	5b                   	pop    ebx
c0021aab:	5e                   	pop    esi
c0021aac:	5f                   	pop    edi
c0021aad:	5d                   	pop    ebp
c0021aae:	c3                   	ret    
c0021aaf:	90                   	nop

c0021ab0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021ab0:	57                   	push   edi
c0021ab1:	56                   	push   esi
c0021ab2:	53                   	push   ebx
c0021ab3:	83 ec 10             	sub    esp,0x10
c0021ab6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021aba:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021abe:	85 ff                	test   edi,edi
c0021ac0:	0f 84 9d 00 00 00    	je     c0021b63 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021ac6:	85 f6                	test   esi,esi
c0021ac8:	0f 84 95 00 00 00    	je     c0021b63 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021ace:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021ad3:	74 17                	je     c0021aec <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021ad5:	83 ec 0c             	sub    esp,0xc
c0021ad8:	68 d7 c2 02 c0       	push   0xc002c2d7
c0021add:	e8 2d 10 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0021ae2:	83 c4 10             	add    esp,0x10
c0021ae5:	b8 03 00 00 00       	mov    eax,0x3
c0021aea:	eb 7c                	jmp    c0021b68 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021aec:	83 ec 0c             	sub    esp,0xc
c0021aef:	6a 1c                	push   0x1c
c0021af1:	e8 4a dd fe ff       	call   c000f840 <malloc>
c0021af6:	89 07                	mov    DWORD PTR [edi],eax
c0021af8:	89 c3                	mov    ebx,eax
c0021afa:	58                   	pop    eax
c0021afb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021aff:	50                   	push   eax
c0021b00:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021b03:	50                   	push   eax
c0021b04:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b08:	50                   	push   eax
c0021b09:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b0d:	50                   	push   eax
c0021b0e:	56                   	push   esi
c0021b0f:	e8 0d ff ff ff       	call   c0021a21 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b14:	83 c4 20             	add    esp,0x20
c0021b17:	84 c0                	test   al,al
c0021b19:	74 07                	je     c0021b22 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021b1b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b20:	74 0b                	je     c0021b2d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021b22:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b26:	b8 01 00 00 00       	mov    eax,0x1
c0021b2b:	eb 3b                	jmp    c0021b68 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021b2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b31:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b35:	89 03                	mov    DWORD PTR [ebx],eax
c0021b37:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b42:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b49:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b50:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b53:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b5a:	8a 06                	mov    al,BYTE PTR [esi]
c0021b5c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b5f:	31 c0                	xor    eax,eax
c0021b61:	eb 05                	jmp    c0021b68 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021b63:	b8 04 00 00 00       	mov    eax,0x4
c0021b68:	83 c4 10             	add    esp,0x10
c0021b6b:	5b                   	pop    ebx
c0021b6c:	5e                   	pop    esi
c0021b6d:	5f                   	pop    edi
c0021b6e:	c3                   	ret    
c0021b6f:	90                   	nop

c0021b70 <ISO9660::exists(char const*)>:
c0021b70:	83 ec 28             	sub    esp,0x28
c0021b73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b77:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021b7b:	52                   	push   edx
c0021b7c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021b7f:	52                   	push   edx
c0021b80:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021b84:	52                   	push   edx
c0021b85:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021b89:	52                   	push   edx
c0021b8a:	50                   	push   eax
c0021b8b:	e8 91 fe ff ff       	call   c0021a21 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b90:	83 c4 3c             	add    esp,0x3c
c0021b93:	c3                   	ret    

c0021b94 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021b94:	56                   	push   esi
c0021b95:	53                   	push   ebx
c0021b96:	83 ec 14             	sub    esp,0x14
c0021b99:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021b9d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021ba1:	85 db                	test   ebx,ebx
c0021ba3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021ba7:	0f 94 c2             	sete   dl
c0021baa:	85 f6                	test   esi,esi
c0021bac:	0f 94 c0             	sete   al
c0021baf:	08 c2                	or     dl,al
c0021bb1:	75 68                	jne    c0021c1b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021bb3:	85 c9                	test   ecx,ecx
c0021bb5:	74 64                	je     c0021c1b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021bb7:	83 ec 0c             	sub    esp,0xc
c0021bba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021bbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021bc1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021bc7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021bce:	50                   	push   eax
c0021bcf:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021bd2:	50                   	push   eax
c0021bd3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021bd7:	50                   	push   eax
c0021bd8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021bdc:	50                   	push   eax
c0021bdd:	51                   	push   ecx
c0021bde:	e8 3e fe ff ff       	call   c0021a21 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021be3:	83 c4 20             	add    esp,0x20
c0021be6:	ba 01 00 00 00       	mov    edx,0x1
c0021beb:	84 c0                	test   al,al
c0021bed:	74 31                	je     c0021c20 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021bef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bf3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021bfa:	89 03                	mov    DWORD PTR [ebx],eax
c0021bfc:	ba 00 00 00 00       	mov    edx,0x0
c0021c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c05:	85 c0                	test   eax,eax
c0021c07:	0f 95 06             	setne  BYTE PTR [esi]
c0021c0a:	74 14                	je     c0021c20 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021c0c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021c12:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c19:	eb 05                	jmp    c0021c20 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021c1b:	ba 04 00 00 00       	mov    edx,0x4
c0021c20:	83 c4 14             	add    esp,0x14
c0021c23:	89 d0                	mov    eax,edx
c0021c25:	5b                   	pop    ebx
c0021c26:	5e                   	pop    esi
c0021c27:	c3                   	ret    

c0021c28 <ISO9660::openDir(char const*, void**)>:
c0021c28:	57                   	push   edi
c0021c29:	56                   	push   esi
c0021c2a:	53                   	push   ebx
c0021c2b:	83 ec 10             	sub    esp,0x10
c0021c2e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c32:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021c36:	85 ff                	test   edi,edi
c0021c38:	0f 84 95 00 00 00    	je     c0021cd3 <ISO9660::openDir(char const*, void**)+0xab>
c0021c3e:	85 f6                	test   esi,esi
c0021c40:	0f 84 8d 00 00 00    	je     c0021cd3 <ISO9660::openDir(char const*, void**)+0xab>
c0021c46:	83 ec 0c             	sub    esp,0xc
c0021c49:	6a 1c                	push   0x1c
c0021c4b:	e8 f0 db fe ff       	call   c000f840 <malloc>
c0021c50:	89 07                	mov    DWORD PTR [edi],eax
c0021c52:	89 c3                	mov    ebx,eax
c0021c54:	59                   	pop    ecx
c0021c55:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c59:	50                   	push   eax
c0021c5a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021c5d:	50                   	push   eax
c0021c5e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c62:	50                   	push   eax
c0021c63:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c67:	50                   	push   eax
c0021c68:	56                   	push   esi
c0021c69:	e8 b3 fd ff ff       	call   c0021a21 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021c6e:	83 c4 20             	add    esp,0x20
c0021c71:	84 c0                	test   al,al
c0021c73:	74 07                	je     c0021c7c <ISO9660::openDir(char const*, void**)+0x54>
c0021c75:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021c7a:	75 21                	jne    c0021c9d <ISO9660::openDir(char const*, void**)+0x75>
c0021c7c:	0f b6 c0             	movzx  eax,al
c0021c7f:	52                   	push   edx
c0021c80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021c84:	50                   	push   eax
c0021c85:	68 fd c2 02 c0       	push   0xc002c2fd
c0021c8a:	e8 80 0e ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0021c8f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021c93:	83 c4 10             	add    esp,0x10
c0021c96:	b8 01 00 00 00       	mov    eax,0x1
c0021c9b:	eb 3b                	jmp    c0021cd8 <ISO9660::openDir(char const*, void**)+0xb0>
c0021c9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ca1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ca5:	89 03                	mov    DWORD PTR [ebx],eax
c0021ca7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021cae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021cb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021cb9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021cc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021cc3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021cca:	8a 06                	mov    al,BYTE PTR [esi]
c0021ccc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021ccf:	31 c0                	xor    eax,eax
c0021cd1:	eb 05                	jmp    c0021cd8 <ISO9660::openDir(char const*, void**)+0xb0>
c0021cd3:	b8 04 00 00 00       	mov    eax,0x4
c0021cd8:	83 c4 10             	add    esp,0x10
c0021cdb:	5b                   	pop    ebx
c0021cdc:	5e                   	pop    esi
c0021cdd:	5f                   	pop    edi
c0021cde:	c3                   	ret    
c0021cdf:	90                   	nop

c0021ce0 <ISO9660::ISO9660()>:
c0021ce0:	83 ec 0c             	sub    esp,0xc
c0021ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce7:	83 ec 0c             	sub    esp,0xc
c0021cea:	50                   	push   eax
c0021ceb:	e8 24 11 ff ff       	call   c0012e14 <Filesystem::Filesystem()>
c0021cf0:	83 c4 10             	add    esp,0x10
c0021cf3:	ba 20 c3 02 c0       	mov    edx,0xc002c320
c0021cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfc:	89 10                	mov    DWORD PTR [eax],edx
c0021cfe:	90                   	nop
c0021cff:	83 c4 0c             	add    esp,0xc
c0021d02:	c3                   	ret    
c0021d03:	90                   	nop

c0021d04 <SoundChannel::~SoundChannel()>:
c0021d04:	83 ec 0c             	sub    esp,0xc
c0021d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d0b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021d0e:	83 ec 0c             	sub    esp,0xc
c0021d11:	50                   	push   eax
c0021d12:	e8 39 db fe ff       	call   c000f850 <free>
c0021d17:	83 c4 10             	add    esp,0x10
c0021d1a:	90                   	nop
c0021d1b:	83 c4 0c             	add    esp,0xc
c0021d1e:	c3                   	ret    
c0021d1f:	90                   	nop

c0021d20 <SoundChannel::setSpeed(float)>:
c0021d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d28:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021d2b:	c3                   	ret    

c0021d2c <SoundChannel::getSpeed()>:
c0021d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d30:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021d33:	c3                   	ret    

c0021d34 <SoundChannel::setVolume(int)>:
c0021d34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d38:	83 f8 64             	cmp    eax,0x64
c0021d3b:	7e 05                	jle    c0021d42 <SoundChannel::setVolume(int)+0xe>
c0021d3d:	b8 64 00 00 00       	mov    eax,0x64
c0021d42:	85 c0                	test   eax,eax
c0021d44:	79 02                	jns    c0021d48 <SoundChannel::setVolume(int)+0x14>
c0021d46:	31 c0                	xor    eax,eax
c0021d48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021d4c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021d4f:	c3                   	ret    

c0021d50 <SoundChannel::getVolume()>:
c0021d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d54:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021d57:	c3                   	ret    

c0021d58 <SoundChannel::pause()>:
c0021d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d5c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021d60:	c3                   	ret    
c0021d61:	90                   	nop

c0021d62 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021d62:	83 ec 1c             	sub    esp,0x1c
c0021d65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d69:	e8 ea ff ff ff       	call   c0021d58 <SoundChannel::pause()>
c0021d6e:	83 c4 04             	add    esp,0x4
c0021d71:	6a 50                	push   0x50
c0021d73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021d77:	e8 b8 ff ff ff       	call   c0021d34 <SoundChannel::setVolume(int)>
c0021d7c:	83 c4 08             	add    esp,0x8
c0021d7f:	a1 98 c3 02 c0       	mov    eax,ds:0xc002c398
c0021d84:	50                   	push   eax
c0021d85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021d89:	e8 92 ff ff ff       	call   c0021d20 <SoundChannel::setSpeed(float)>
c0021d8e:	83 c4 08             	add    esp,0x8
c0021d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021d99:	89 10                	mov    DWORD PTR [eax],edx
c0021d9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021da3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021da6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021daa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021dae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021db1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021db6:	75 23                	jne    c0021ddb <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0021dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021dc5:	0f af c2             	imul   eax,edx
c0021dc8:	85 c0                	test   eax,eax
c0021dca:	79 03                	jns    c0021dcf <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021dcc:	83 c0 03             	add    eax,0x3
c0021dcf:	c1 f8 02             	sar    eax,0x2
c0021dd2:	05 a0 0f 00 00       	add    eax,0xfa0
c0021dd7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021ddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ddf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021de3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dea:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021df1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021df5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e00:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021e03:	c1 e0 02             	shl    eax,0x2
c0021e06:	83 ec 0c             	sub    esp,0xc
c0021e09:	50                   	push   eax
c0021e0a:	e8 31 da fe ff       	call   c000f840 <malloc>
c0021e0f:	83 c4 10             	add    esp,0x10
c0021e12:	89 c2                	mov    edx,eax
c0021e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e18:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021e1b:	83 ec 04             	sub    esp,0x4
c0021e1e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021e22:	50                   	push   eax
c0021e23:	6a 01                	push   0x1
c0021e25:	6a 04                	push   0x4
c0021e27:	e8 73 6d fe ff       	call   c0008b9f <src_new>
c0021e2c:	83 c4 10             	add    esp,0x10
c0021e2f:	89 c2                	mov    edx,eax
c0021e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e35:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e3c:	85 c0                	test   eax,eax
c0021e3e:	74 10                	je     c0021e50 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021e40:	83 ec 0c             	sub    esp,0xc
c0021e43:	68 7c c3 02 c0       	push   0xc002c37c
c0021e48:	e8 3e 83 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0021e4d:	83 c4 10             	add    esp,0x10
c0021e50:	a0 60 22 03 c0       	mov    al,ds:0xc0032260
c0021e55:	83 f0 01             	xor    eax,0x1
c0021e58:	84 c0                	test   al,al
c0021e5a:	74 57                	je     c0021eb3 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021e5c:	a1 9c c3 02 c0       	mov    eax,ds:0xc002c39c
c0021e61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e65:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e6d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021e75:	7f 35                	jg     c0021eac <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021e77:	83 ec 0c             	sub    esp,0xc
c0021e7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021e7e:	e8 94 4f 00 00       	call   c0026e17 <__floatsisf>
c0021e83:	83 c4 10             	add    esp,0x10
c0021e86:	8b 15 9c c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c39c
c0021e8c:	83 ec 08             	sub    esp,0x8
c0021e8f:	52                   	push   edx
c0021e90:	50                   	push   eax
c0021e91:	e8 93 4b 00 00       	call   c0026a29 <__mulsf3>
c0021e96:	83 c4 10             	add    esp,0x10
c0021e99:	89 c2                	mov    edx,eax
c0021e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e9f:	89 14 85 60 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1a0],edx
c0021ea6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021eaa:	eb c1                	jmp    c0021e6d <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021eac:	c6 05 60 22 03 c0 01 	mov    BYTE PTR ds:0xc0032260,0x1
c0021eb3:	90                   	nop
c0021eb4:	83 c4 1c             	add    esp,0x1c
c0021eb7:	c3                   	ret    

c0021eb8 <SoundChannel::play()>:
c0021eb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ebc:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021ec0:	c3                   	ret    
c0021ec1:	90                   	nop

c0021ec2 <SoundChannel::paused()>:
c0021ec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ec6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021ec9:	c3                   	ret    

c0021eca <SoundChannel::getSampleRate()>:
c0021eca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ece:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ed0:	c3                   	ret    
c0021ed1:	90                   	nop

c0021ed2 <SoundChannel::getBits()>:
c0021ed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ed9:	c3                   	ret    

c0021eda <SoundChannel::getBufferUsed()>:
c0021eda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ede:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021ee1:	c3                   	ret    

c0021ee2 <SoundChannel::getBufferSize()>:
c0021ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ee6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ee9:	c3                   	ret    

c0021eea <SoundChannel::unbuffer(float*, int, int)>:
c0021eea:	56                   	push   esi
c0021eeb:	53                   	push   ebx
c0021eec:	83 ec 40             	sub    esp,0x40
c0021eef:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021ef3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021ef6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021efa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021efd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021f01:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021f05:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021f09:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021f0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021f11:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021f15:	e8 fd 4e 00 00       	call   c0026e17 <__floatsisf>
c0021f1a:	5a                   	pop    edx
c0021f1b:	89 c6                	mov    esi,eax
c0021f1d:	ff 33                	push   DWORD PTR [ebx]
c0021f1f:	e8 f3 4e 00 00       	call   c0026e17 <__floatsisf>
c0021f24:	59                   	pop    ecx
c0021f25:	5a                   	pop    edx
c0021f26:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021f29:	50                   	push   eax
c0021f2a:	e8 fa 4a 00 00       	call   c0026a29 <__mulsf3>
c0021f2f:	59                   	pop    ecx
c0021f30:	5a                   	pop    edx
c0021f31:	50                   	push   eax
c0021f32:	56                   	push   esi
c0021f33:	e8 b4 4c 00 00       	call   c0026bec <__divsf3>
c0021f38:	89 04 24             	mov    DWORD PTR [esp],eax
c0021f3b:	e8 a7 61 00 00       	call   c00280e7 <__extendsfdf2>
c0021f40:	59                   	pop    ecx
c0021f41:	5e                   	pop    esi
c0021f42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021f46:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021f4a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021f52:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f56:	50                   	push   eax
c0021f57:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021f5a:	e8 35 68 fe ff       	call   c0008794 <src_process>
c0021f5f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021f63:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021f66:	83 c4 0c             	add    esp,0xc
c0021f69:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021f6c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021f6f:	29 d0                	sub    eax,edx
c0021f71:	c1 e0 02             	shl    eax,0x2
c0021f74:	50                   	push   eax
c0021f75:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021f78:	50                   	push   eax
c0021f79:	51                   	push   ecx
c0021f7a:	e8 fd e6 fd ff       	call   c000067c <memmove>
c0021f7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f83:	83 c4 44             	add    esp,0x44
c0021f86:	5b                   	pop    ebx
c0021f87:	5e                   	pop    esi
c0021f88:	c3                   	ret    
c0021f89:	90                   	nop

c0021f8a <SoundChannel::buffer8(unsigned char*, int)>:
c0021f8a:	55                   	push   ebp
c0021f8b:	57                   	push   edi
c0021f8c:	56                   	push   esi
c0021f8d:	53                   	push   ebx
c0021f8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f92:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021f96:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021f99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021f9d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021fa0:	74 7a                	je     c002201c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021fa2:	85 ff                	test   edi,edi
c0021fa4:	7e 76                	jle    c002201c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021fa6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021faa:	8d 70 01             	lea    esi,[eax+0x1]
c0021fad:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021fb0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021fb3:	8b 1c 9d 60 1e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce1a0]
c0021fba:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021fbd:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021fc0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021fc3:	74 5e                	je     c0022023 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021fc5:	83 ff 01             	cmp    edi,0x1
c0021fc8:	74 4b                	je     c0022015 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021fca:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021fce:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021fd1:	8d 70 01             	lea    esi,[eax+0x1]
c0021fd4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021fd7:	8b 1c 9d 60 1e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce1a0]
c0021fde:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021fe1:	b8 02 00 00 00       	mov    eax,0x2
c0021fe6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021fe9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021fec:	75 23                	jne    c0022011 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021fee:	eb 27                	jmp    c0022017 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ff0:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ff5:	8d 71 01             	lea    esi,[ecx+0x1]
c0021ff8:	40                   	inc    eax
c0021ff9:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ffc:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021fff:	8b 1c 9d 60 1e 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce1a0]
c0022006:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022009:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002200c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002200f:	74 06                	je     c0022017 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022011:	39 c7                	cmp    edi,eax
c0022013:	75 db                	jne    c0021ff0 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022015:	89 f8                	mov    eax,edi
c0022017:	5b                   	pop    ebx
c0022018:	5e                   	pop    esi
c0022019:	5f                   	pop    edi
c002201a:	5d                   	pop    ebp
c002201b:	c3                   	ret    
c002201c:	5b                   	pop    ebx
c002201d:	31 c0                	xor    eax,eax
c002201f:	5e                   	pop    esi
c0022020:	5f                   	pop    edi
c0022021:	5d                   	pop    ebp
c0022022:	c3                   	ret    
c0022023:	b8 01 00 00 00       	mov    eax,0x1
c0022028:	eb ed                	jmp    c0022017 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002202a <SoundDevice::SoundDevice(char const*)>:
c002202a:	83 ec 1c             	sub    esp,0x1c
c002202d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022031:	83 ec 08             	sub    esp,0x8
c0022034:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022038:	50                   	push   eax
c0022039:	e8 e8 20 ff ff       	call   c0014126 <Device::Device(char const*)>
c002203e:	83 c4 10             	add    esp,0x10
c0022041:	ba a8 c3 02 c0       	mov    edx,0xc002c3a8
c0022046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002204a:	89 10                	mov    DWORD PTR [eax],edx
c002204c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022050:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002205a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002205e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022068:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022070:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022075:	7f 19                	jg     c0022090 <SoundDevice::SoundDevice(char const*)+0x66>
c0022077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002207b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002207f:	83 c2 54             	add    edx,0x54
c0022082:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002208a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002208e:	eb e0                	jmp    c0022070 <SoundDevice::SoundDevice(char const*)+0x46>
c0022090:	90                   	nop
c0022091:	83 c4 1c             	add    esp,0x1c
c0022094:	c3                   	ret    
c0022095:	90                   	nop

c0022096 <SoundDevice::~SoundDevice()>:
c0022096:	53                   	push   ebx
c0022097:	83 ec 18             	sub    esp,0x18
c002209a:	ba a8 c3 02 c0       	mov    edx,0xc002c3a8
c002209f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220a3:	89 10                	mov    DWORD PTR [eax],edx
c00220a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220ad:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00220b2:	7f 46                	jg     c00220fa <SoundDevice::~SoundDevice()+0x64>
c00220b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220bc:	83 c2 54             	add    edx,0x54
c00220bf:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00220c3:	85 c0                	test   eax,eax
c00220c5:	74 2d                	je     c00220f4 <SoundDevice::~SoundDevice()+0x5e>
c00220c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220cf:	83 c2 54             	add    edx,0x54
c00220d2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00220d6:	85 db                	test   ebx,ebx
c00220d8:	74 1a                	je     c00220f4 <SoundDevice::~SoundDevice()+0x5e>
c00220da:	83 ec 0c             	sub    esp,0xc
c00220dd:	53                   	push   ebx
c00220de:	e8 21 fc ff ff       	call   c0021d04 <SoundChannel::~SoundChannel()>
c00220e3:	83 c4 10             	add    esp,0x10
c00220e6:	83 ec 08             	sub    esp,0x8
c00220e9:	6a 2c                	push   0x2c
c00220eb:	53                   	push   ebx
c00220ec:	e8 3e 09 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00220f1:	83 c4 10             	add    esp,0x10
c00220f4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00220f8:	eb b3                	jmp    c00220ad <SoundDevice::~SoundDevice()+0x17>
c00220fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220fe:	83 ec 0c             	sub    esp,0xc
c0022101:	50                   	push   eax
c0022102:	e8 01 1d ff ff       	call   c0013e08 <Device::~Device()>
c0022107:	83 c4 10             	add    esp,0x10
c002210a:	90                   	nop
c002210b:	83 c4 18             	add    esp,0x18
c002210e:	5b                   	pop    ebx
c002210f:	c3                   	ret    

c0022110 <SoundDevice::~SoundDevice()>:
c0022110:	83 ec 0c             	sub    esp,0xc
c0022113:	83 ec 0c             	sub    esp,0xc
c0022116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002211a:	e8 77 ff ff ff       	call   c0022096 <SoundDevice::~SoundDevice()>
c002211f:	83 c4 10             	add    esp,0x10
c0022122:	83 ec 08             	sub    esp,0x8
c0022125:	68 e4 01 00 00       	push   0x1e4
c002212a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002212e:	e8 fc 08 ff ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0022133:	83 c4 10             	add    esp,0x10
c0022136:	83 c4 0c             	add    esp,0xc
c0022139:	c3                   	ret    

c002213a <SoundDevice::getFreeChannelNum()>:
c002213a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002213e:	31 c0                	xor    eax,eax
c0022140:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022148:	74 09                	je     c0022153 <SoundDevice::getFreeChannelNum()+0x19>
c002214a:	40                   	inc    eax
c002214b:	83 f8 20             	cmp    eax,0x20
c002214e:	75 f0                	jne    c0022140 <SoundDevice::getFreeChannelNum()+0x6>
c0022150:	83 c8 ff             	or     eax,0xffffffff
c0022153:	c3                   	ret    

c0022154 <SoundDevice::addChannel(SoundChannel*)>:
c0022154:	56                   	push   esi
c0022155:	53                   	push   ebx
c0022156:	51                   	push   ecx
c0022157:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002215b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002215f:	53                   	push   ebx
c0022160:	e8 d5 ff ff ff       	call   c002213a <SoundDevice::getFreeChannelNum()>
c0022165:	5a                   	pop    edx
c0022166:	83 f8 ff             	cmp    eax,0xffffffff
c0022169:	74 51                	je     c00221bc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002216b:	85 f6                	test   esi,esi
c002216d:	74 4d                	je     c00221bc <SoundDevice::addChannel(SoundChannel*)+0x68>
c002216f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022176:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002217d:	75 30                	jne    c00221af <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002217f:	83 ec 0c             	sub    esp,0xc
c0022182:	56                   	push   esi
c0022183:	e8 42 fd ff ff       	call   c0021eca <SoundChannel::getSampleRate()>
c0022188:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002218e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022191:	e8 3c fd ff ff       	call   c0021ed2 <SoundChannel::getBits()>
c0022196:	83 c4 0c             	add    esp,0xc
c0022199:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002219f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00221a1:	50                   	push   eax
c00221a2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00221a8:	53                   	push   ebx
c00221a9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00221ac:	83 c4 10             	add    esp,0x10
c00221af:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00221b5:	b8 01 00 00 00       	mov    eax,0x1
c00221ba:	eb 03                	jmp    c00221bf <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00221bc:	83 c8 ff             	or     eax,0xffffffff
c00221bf:	5a                   	pop    edx
c00221c0:	5b                   	pop    ebx
c00221c1:	5e                   	pop    esi
c00221c2:	c3                   	ret    
c00221c3:	90                   	nop

c00221c4 <SoundDevice::removeChannel(int)>:
c00221c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221cc:	83 fa 1f             	cmp    edx,0x1f
c00221cf:	77 23                	ja     c00221f4 <SoundDevice::removeChannel(int)+0x30>
c00221d1:	8d 14 90             	lea    edx,[eax+edx*4]
c00221d4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00221db:	74 17                	je     c00221f4 <SoundDevice::removeChannel(int)+0x30>
c00221dd:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00221e7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00221ed:	75 05                	jne    c00221f4 <SoundDevice::removeChannel(int)+0x30>
c00221ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00221f1:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00221f4:	c3                   	ret    
c00221f5:	90                   	nop

c00221f6 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00221f6:	57                   	push   edi
c00221f7:	56                   	push   esi
c00221f8:	53                   	push   ebx
c00221f9:	31 db                	xor    ebx,ebx
c00221fb:	83 ec 10             	sub    esp,0x10
c00221fe:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022202:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022206:	0f 8d cb 00 00 00    	jge    c00222d7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002220c:	83 ec 0c             	sub    esp,0xc
c002220f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022213:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022216:	e8 cc 5e 00 00       	call   c00280e7 <__extendsfdf2>
c002221b:	83 c4 10             	add    esp,0x10
c002221e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022222:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022226:	68 00 00 f0 3f       	push   0x3ff00000
c002222b:	6a 00                	push   0x0
c002222d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022231:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022235:	e8 39 4e 00 00       	call   c0027073 <__adddf3>
c002223a:	83 c4 10             	add    esp,0x10
c002223d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022241:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022245:	68 00 00 e0 3f       	push   0x3fe00000
c002224a:	6a 00                	push   0x0
c002224c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022254:	e8 97 54 00 00       	call   c00276f0 <__muldf3>
c0022259:	83 c4 10             	add    esp,0x10
c002225c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022260:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022264:	68 00 00 60 40       	push   0x40600000
c0022269:	6a 00                	push   0x0
c002226b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002226f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022273:	e8 78 54 00 00       	call   c00276f0 <__muldf3>
c0022278:	59                   	pop    ecx
c0022279:	5f                   	pop    edi
c002227a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002227e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022282:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022286:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002228a:	e8 34 5d 00 00       	call   c0027fc3 <__truncdfsf2>
c002228f:	5a                   	pop    edx
c0022290:	89 c7                	mov    edi,eax
c0022292:	59                   	pop    ecx
c0022293:	68 00 00 fe 42       	push   0x42fe0000
c0022298:	50                   	push   eax
c0022299:	e8 cf 4d 00 00       	call   c002706d <__gesf2>
c002229e:	83 c4 10             	add    esp,0x10
c00222a1:	85 c0                	test   eax,eax
c00222a3:	78 06                	js     c00222ab <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00222a5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00222a9:	eb 26                	jmp    c00222d1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00222ab:	50                   	push   eax
c00222ac:	50                   	push   eax
c00222ad:	6a 00                	push   0x0
c00222af:	57                   	push   edi
c00222b0:	e8 bc 4d 00 00       	call   c0027071 <__lesf2>
c00222b5:	83 c4 10             	add    esp,0x10
c00222b8:	85 c0                	test   eax,eax
c00222ba:	7f 06                	jg     c00222c2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00222bc:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00222c0:	eb 0f                	jmp    c00222d1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00222c2:	83 ec 0c             	sub    esp,0xc
c00222c5:	57                   	push   edi
c00222c6:	e8 b1 5e 00 00       	call   c002817c <lrintf>
c00222cb:	83 c4 10             	add    esp,0x10
c00222ce:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00222d1:	43                   	inc    ebx
c00222d2:	e9 2b ff ff ff       	jmp    c0022202 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00222d7:	83 c4 10             	add    esp,0x10
c00222da:	5b                   	pop    ebx
c00222db:	5e                   	pop    esi
c00222dc:	5f                   	pop    edi
c00222dd:	c3                   	ret    

c00222de <SoundDevice::getAudio(int, float*, float*)>:
c00222de:	55                   	push   ebp
c00222df:	57                   	push   edi
c00222e0:	56                   	push   esi
c00222e1:	53                   	push   ebx
c00222e2:	31 db                	xor    ebx,ebx
c00222e4:	83 ec 20             	sub    esp,0x20
c00222e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00222eb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00222ef:	c1 e0 02             	shl    eax,0x2
c00222f2:	50                   	push   eax
c00222f3:	6a 00                	push   0x0
c00222f5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00222f9:	e8 7a e4 fd ff       	call   c0000778 <memset>
c00222fe:	83 c4 10             	add    esp,0x10
c0022301:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022305:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002230c:	85 c0                	test   eax,eax
c002230e:	0f 84 d7 00 00 00    	je     c00223eb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022314:	83 ec 0c             	sub    esp,0xc
c0022317:	50                   	push   eax
c0022318:	e8 a5 fb ff ff       	call   c0021ec2 <SoundChannel::paused()>
c002231d:	83 c4 10             	add    esp,0x10
c0022320:	84 c0                	test   al,al
c0022322:	0f 85 c3 00 00 00    	jne    c00223eb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022328:	83 ec 0c             	sub    esp,0xc
c002232b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022332:	e8 19 fa ff ff       	call   c0021d50 <SoundChannel::getVolume()>
c0022337:	83 c4 10             	add    esp,0x10
c002233a:	85 c0                	test   eax,eax
c002233c:	0f 84 a9 00 00 00    	je     c00223eb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022342:	83 ec 0c             	sub    esp,0xc
c0022345:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002234c:	e8 ff f9 ff ff       	call   c0021d50 <SoundChannel::getVolume()>
c0022351:	83 ec 0c             	sub    esp,0xc
c0022354:	50                   	push   eax
c0022355:	e8 bd 4a 00 00       	call   c0026e17 <__floatsisf>
c002235a:	59                   	pop    ecx
c002235b:	5d                   	pop    ebp
c002235c:	31 ed                	xor    ebp,ebp
c002235e:	68 00 00 c8 42       	push   0x42c80000
c0022363:	50                   	push   eax
c0022364:	e8 83 48 00 00       	call   c0026bec <__divsf3>
c0022369:	83 c4 10             	add    esp,0x10
c002236c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022370:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022374:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002237a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002237e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022385:	e8 60 fb ff ff       	call   c0021eea <SoundChannel::unbuffer(float*, int, int)>
c002238a:	83 c4 20             	add    esp,0x20
c002238d:	89 c1                	mov    ecx,eax
c002238f:	39 cd                	cmp    ebp,ecx
c0022391:	7d 52                	jge    c00223e5 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022393:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022397:	50                   	push   eax
c0022398:	50                   	push   eax
c0022399:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002239d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00223a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00223a4:	e8 80 46 00 00       	call   c0026a29 <__mulsf3>
c00223a9:	5a                   	pop    edx
c00223aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00223ae:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00223b4:	e8 5e 4a 00 00       	call   c0026e17 <__floatsisf>
c00223b9:	59                   	pop    ecx
c00223ba:	5a                   	pop    edx
c00223bb:	50                   	push   eax
c00223bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223c0:	e8 27 48 00 00       	call   c0026bec <__divsf3>
c00223c5:	59                   	pop    ecx
c00223c6:	5a                   	pop    edx
c00223c7:	50                   	push   eax
c00223c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00223cc:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00223cf:	e8 32 43 00 00       	call   c0026706 <__addsf3>
c00223d4:	83 c4 10             	add    esp,0x10
c00223d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00223db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00223df:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00223e2:	45                   	inc    ebp
c00223e3:	eb aa                	jmp    c002238f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00223e5:	39 cf                	cmp    edi,ecx
c00223e7:	7e 02                	jle    c00223eb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00223e9:	89 cf                	mov    edi,ecx
c00223eb:	43                   	inc    ebx
c00223ec:	83 fb 20             	cmp    ebx,0x20
c00223ef:	0f 85 10 ff ff ff    	jne    c0022305 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00223f5:	83 c4 1c             	add    esp,0x1c
c00223f8:	89 f8                	mov    eax,edi
c00223fa:	5b                   	pop    ebx
c00223fb:	5e                   	pop    esi
c00223fc:	5f                   	pop    edi
c00223fd:	5d                   	pop    ebp
c00223fe:	c3                   	ret    
c00223ff:	90                   	nop

c0022400 <PCI::open(int, int, void*)>:
c0022400:	83 ec 18             	sub    esp,0x18
c0022403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022407:	8b 10                	mov    edx,DWORD PTR [eax]
c0022409:	50                   	push   eax
c002240a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002240d:	31 c0                	xor    eax,eax
c002240f:	83 c4 1c             	add    esp,0x1c
c0022412:	c3                   	ret    
c0022413:	90                   	nop

c0022414 <PCI::close(int, int, void*)>:
c0022414:	31 c0                	xor    eax,eax
c0022416:	c3                   	ret    
c0022417:	90                   	nop

c0022418 <PCI::PCI()>:
c0022418:	83 ec 0c             	sub    esp,0xc
c002241b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241f:	83 ec 08             	sub    esp,0x8
c0022422:	68 d8 c3 02 c0       	push   0xc002c3d8
c0022427:	50                   	push   eax
c0022428:	e8 7d 13 ff ff       	call   c00137aa <Bus::Bus(char const*)>
c002242d:	83 c4 10             	add    esp,0x10
c0022430:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0022435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022439:	89 10                	mov    DWORD PTR [eax],edx
c002243b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002243f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022445:	0f b6 d0             	movzx  edx,al
c0022448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022457:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002245d:	0f b6 d0             	movzx  edx,al
c0022460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022464:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002246d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022473:	8d 50 01             	lea    edx,[eax+0x1]
c0022476:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002247a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022480:	0f b6 d0             	movzx  edx,al
c0022483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022487:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002248b:	83 c9 c0             	or     ecx,0xffffffc0
c002248e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022492:	90                   	nop
c0022493:	83 c4 0c             	add    esp,0xc
c0022496:	c3                   	ret    
c0022497:	90                   	nop

c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022498:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002249c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00224a1:	89 ca                	mov    edx,ecx
c00224a3:	c1 e0 10             	shl    eax,0x10
c00224a6:	81 e2 fc 00 00 00    	and    edx,0xfc
c00224ac:	09 d0                	or     eax,edx
c00224ae:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00224b3:	c1 e2 08             	shl    edx,0x8
c00224b6:	09 d0                	or     eax,edx
c00224b8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00224bd:	c1 e2 0b             	shl    edx,0xb
c00224c0:	09 d0                	or     eax,edx
c00224c2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00224c7:	0d 00 00 00 80       	or     eax,0x80000000
c00224cc:	ef                   	out    dx,eax
c00224cd:	ba fc 0c 00 00       	mov    edx,0xcfc
c00224d2:	ed                   	in     eax,dx
c00224d3:	83 e1 02             	and    ecx,0x2
c00224d6:	0f b6 c9             	movzx  ecx,cl
c00224d9:	c1 e1 03             	shl    ecx,0x3
c00224dc:	d3 e8                	shr    eax,cl
c00224de:	c3                   	ret    
c00224df:	90                   	nop

c00224e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00224e0:	6a 00                	push   0x0
c00224e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224e7:	50                   	push   eax
c00224e8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224ed:	50                   	push   eax
c00224ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00224f3:	50                   	push   eax
c00224f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224f8:	e8 9b ff ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224fd:	83 c4 14             	add    esp,0x14
c0022500:	c3                   	ret    
c0022501:	90                   	nop

c0022502 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022502:	6a 0e                	push   0xe
c0022504:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022509:	50                   	push   eax
c002250a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002250f:	50                   	push   eax
c0022510:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022515:	50                   	push   eax
c0022516:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002251a:	e8 79 ff ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002251f:	83 c4 14             	add    esp,0x14
c0022522:	0f b6 c0             	movzx  eax,al
c0022525:	c3                   	ret    

c0022526 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022526:	55                   	push   ebp
c0022527:	57                   	push   edi
c0022528:	56                   	push   esi
c0022529:	53                   	push   ebx
c002252a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002252f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022534:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022539:	6a 0a                	push   0xa
c002253b:	56                   	push   esi
c002253c:	55                   	push   ebp
c002253d:	57                   	push   edi
c002253e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022542:	e8 51 ff ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022547:	6a 0a                	push   0xa
c0022549:	89 c3                	mov    ebx,eax
c002254b:	56                   	push   esi
c002254c:	0f b6 db             	movzx  ebx,bl
c002254f:	55                   	push   ebp
c0022550:	57                   	push   edi
c0022551:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022555:	e8 3e ff ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002255a:	83 c4 28             	add    esp,0x28
c002255d:	25 00 ff 00 00       	and    eax,0xff00
c0022562:	09 d8                	or     eax,ebx
c0022564:	5b                   	pop    ebx
c0022565:	5e                   	pop    esi
c0022566:	5f                   	pop    edi
c0022567:	5d                   	pop    ebp
c0022568:	c3                   	ret    
c0022569:	90                   	nop

c002256a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002256a:	6a 08                	push   0x8
c002256c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022571:	50                   	push   eax
c0022572:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022577:	50                   	push   eax
c0022578:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002257d:	50                   	push   eax
c002257e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022582:	e8 11 ff ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022587:	83 c4 14             	add    esp,0x14
c002258a:	0f b6 c4             	movzx  eax,ah
c002258d:	c3                   	ret    

c002258e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002258e:	6a 08                	push   0x8
c0022590:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022595:	50                   	push   eax
c0022596:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002259b:	50                   	push   eax
c002259c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225a1:	50                   	push   eax
c00225a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225a6:	e8 ed fe ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225ab:	83 c4 14             	add    esp,0x14
c00225ae:	c3                   	ret    
c00225af:	90                   	nop

c00225b0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00225b0:	6a 3c                	push   0x3c
c00225b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225b7:	50                   	push   eax
c00225b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225bd:	50                   	push   eax
c00225be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225c3:	50                   	push   eax
c00225c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225c8:	e8 cb fe ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225cd:	83 c4 14             	add    esp,0x14
c00225d0:	c3                   	ret    
c00225d1:	90                   	nop

c00225d2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00225d2:	6a 18                	push   0x18
c00225d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225d9:	50                   	push   eax
c00225da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225df:	50                   	push   eax
c00225e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225e5:	50                   	push   eax
c00225e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225ea:	e8 a9 fe ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225ef:	83 c4 14             	add    esp,0x14
c00225f2:	0f b6 c4             	movzx  eax,ah
c00225f5:	c3                   	ret    

c00225f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00225f6:	55                   	push   ebp
c00225f7:	57                   	push   edi
c00225f8:	56                   	push   esi
c00225f9:	53                   	push   ebx
c00225fa:	50                   	push   eax
c00225fb:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00225ff:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022604:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022609:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c002260e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022615:	8d 43 12             	lea    eax,[ebx+0x12]
c0022618:	83 c3 10             	add    ebx,0x10
c002261b:	0f b6 c0             	movzx  eax,al
c002261e:	0f b6 db             	movzx  ebx,bl
c0022621:	50                   	push   eax
c0022622:	51                   	push   ecx
c0022623:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022627:	57                   	push   edi
c0022628:	55                   	push   ebp
c0022629:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002262d:	e8 66 fe ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022632:	53                   	push   ebx
c0022633:	89 c6                	mov    esi,eax
c0022635:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022639:	c1 e6 10             	shl    esi,0x10
c002263c:	51                   	push   ecx
c002263d:	57                   	push   edi
c002263e:	55                   	push   ebp
c002263f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022643:	e8 50 fe ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022648:	83 c4 2c             	add    esp,0x2c
c002264b:	0f b7 c0             	movzx  eax,ax
c002264e:	5b                   	pop    ebx
c002264f:	09 f0                	or     eax,esi
c0022651:	5e                   	pop    esi
c0022652:	5f                   	pop    edi
c0022653:	5d                   	pop    ebp
c0022654:	c3                   	ret    
c0022655:	90                   	nop

c0022656 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022656:	53                   	push   ebx
c0022657:	ba f8 0c 00 00       	mov    edx,0xcf8
c002265c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022661:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022665:	c1 e1 10             	shl    ecx,0x10
c0022668:	25 fc 00 00 00       	and    eax,0xfc
c002266d:	09 c1                	or     ecx,eax
c002266f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022674:	c1 e0 08             	shl    eax,0x8
c0022677:	09 c1                	or     ecx,eax
c0022679:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002267e:	c1 e0 0b             	shl    eax,0xb
c0022681:	09 c1                	or     ecx,eax
c0022683:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022689:	89 c8                	mov    eax,ecx
c002268b:	ef                   	out    dx,eax
c002268c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022691:	ed                   	in     eax,dx
c0022692:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022697:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002269c:	74 0a                	je     c00226a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002269e:	0f b7 d8             	movzx  ebx,ax
c00226a1:	89 d0                	mov    eax,edx
c00226a3:	c1 e0 10             	shl    eax,0x10
c00226a6:	eb 05                	jmp    c00226ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00226a8:	66 31 c0             	xor    ax,ax
c00226ab:	89 d3                	mov    ebx,edx
c00226ad:	09 c3                	or     ebx,eax
c00226af:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226b4:	89 c8                	mov    eax,ecx
c00226b6:	ef                   	out    dx,eax
c00226b7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226bc:	89 d8                	mov    eax,ebx
c00226be:	ef                   	out    dx,eax
c00226bf:	5b                   	pop    ebx
c00226c0:	c3                   	ret    
c00226c1:	90                   	nop

c00226c2 <PCI::checkBus(unsigned char)>:
c00226c2:	56                   	push   esi
c00226c3:	53                   	push   ebx
c00226c4:	31 db                	xor    ebx,ebx
c00226c6:	51                   	push   ecx
c00226c7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00226cc:	52                   	push   edx
c00226cd:	53                   	push   ebx
c00226ce:	43                   	inc    ebx
c00226cf:	56                   	push   esi
c00226d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226d4:	e8 2b 03 00 00       	call   c0022a04 <PCI::checkDevice(unsigned char, unsigned char)>
c00226d9:	83 c4 10             	add    esp,0x10
c00226dc:	83 fb 20             	cmp    ebx,0x20
c00226df:	75 eb                	jne    c00226cc <PCI::checkBus(unsigned char)+0xa>
c00226e1:	58                   	pop    eax
c00226e2:	5b                   	pop    ebx
c00226e3:	5e                   	pop    esi
c00226e4:	c3                   	ret    
c00226e5:	90                   	nop

c00226e6 <PCI::foundDevice(PCIDeviceInfo)>:
c00226e6:	55                   	push   ebp
c00226e7:	57                   	push   edi
c00226e8:	56                   	push   esi
c00226e9:	53                   	push   ebx
c00226ea:	83 ec 1c             	sub    esp,0x1c
c00226ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00226f1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00226f7:	0f 84 52 01 00 00    	je     c002284f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00226fd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022701:	66 81 f9 06 04       	cmp    cx,0x406
c0022706:	75 2c                	jne    c0022734 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022708:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002270d:	50                   	push   eax
c002270e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022713:	50                   	push   eax
c0022714:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022719:	50                   	push   eax
c002271a:	56                   	push   esi
c002271b:	e8 b2 fe ff ff       	call   c00225d2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022720:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022724:	0f b6 c0             	movzx  eax,al
c0022727:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002272b:	83 c4 2c             	add    esp,0x2c
c002272e:	5b                   	pop    ebx
c002272f:	5e                   	pop    esi
c0022730:	5f                   	pop    edi
c0022731:	5d                   	pop    ebp
c0022732:	eb 8e                	jmp    c00226c2 <PCI::checkBus(unsigned char)>
c0022734:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022738:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002273e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022742:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022746:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002274a:	88 d3                	mov    bl,dl
c002274c:	85 c0                	test   eax,eax
c002274e:	74 33                	je     c0022783 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022750:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022753:	85 d2                	test   edx,edx
c0022755:	74 28                	je     c002277f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022757:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002275d:	31 ef                	xor    edi,ebp
c002275f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022765:	75 18                	jne    c002277f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022767:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002276b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022771:	75 0c                	jne    c002277f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022773:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022779:	0f 84 d0 00 00 00    	je     c002284f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002277f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022781:	eb c9                	jmp    c002274c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022783:	66 81 f9 01 06       	cmp    cx,0x601
c0022788:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002278c:	75 19                	jne    c00227a7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002278e:	83 ec 0c             	sub    esp,0xc
c0022791:	68 64 01 00 00       	push   0x164
c0022796:	e8 a5 d0 fe ff       	call   c000f840 <malloc>
c002279b:	89 c5                	mov    ebp,eax
c002279d:	89 04 24             	mov    DWORD PTR [esp],eax
c00227a0:	e8 95 0f 00 00       	call   c002373a <SATABus::SATABus()>
c00227a5:	eb 1e                	jmp    c00227c5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00227a7:	66 81 f9 01 01       	cmp    cx,0x101
c00227ac:	75 60                	jne    c002280e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00227ae:	83 ec 0c             	sub    esp,0xc
c00227b1:	68 70 02 00 00       	push   0x270
c00227b6:	e8 85 d0 fe ff       	call   c000f840 <malloc>
c00227bb:	89 c5                	mov    ebp,eax
c00227bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00227c0:	e8 03 03 00 00       	call   c0022ac8 <IDE::IDE()>
c00227c5:	58                   	pop    eax
c00227c6:	5a                   	pop    edx
c00227c7:	55                   	push   ebp
c00227c8:	56                   	push   esi
c00227c9:	e8 68 17 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c00227ce:	83 ec 1c             	sub    esp,0x1c
c00227d1:	b9 09 00 00 00       	mov    ecx,0x9
c00227d6:	fc                   	cld    
c00227d7:	89 e7                	mov    edi,esp
c00227d9:	89 de                	mov    esi,ebx
c00227db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00227dd:	55                   	push   ebp
c00227de:	e8 5d 16 ff ff       	call   c0013e40 <Device::preOpenPCI(PCIDeviceInfo)>
c00227e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00227e6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00227ea:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00227f2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00227fa:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022802:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022805:	83 c4 4c             	add    esp,0x4c
c0022808:	5b                   	pop    ebx
c0022809:	5e                   	pop    esi
c002280a:	5f                   	pop    edi
c002280b:	5d                   	pop    ebp
c002280c:	ff e0                	jmp    eax
c002280e:	83 ec 0c             	sub    esp,0xc
c0022811:	68 58 01 00 00       	push   0x158
c0022816:	e8 25 d0 fe ff       	call   c000f840 <malloc>
c002281b:	89 c5                	mov    ebp,eax
c002281d:	58                   	pop    eax
c002281e:	5a                   	pop    edx
c002281f:	68 e0 c3 02 c0       	push   0xc002c3e0
c0022824:	55                   	push   ebp
c0022825:	e8 02 1a ff ff       	call   c001422c <DriverlessDevice::DriverlessDevice(char const*)>
c002282a:	59                   	pop    ecx
c002282b:	5f                   	pop    edi
c002282c:	55                   	push   ebp
c002282d:	56                   	push   esi
c002282e:	e8 03 17 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0022833:	b9 09 00 00 00       	mov    ecx,0x9
c0022838:	fc                   	cld    
c0022839:	89 df                	mov    edi,ebx
c002283b:	89 de                	mov    esi,ebx
c002283d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002283f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022843:	83 c4 2c             	add    esp,0x2c
c0022846:	5b                   	pop    ebx
c0022847:	5e                   	pop    esi
c0022848:	5f                   	pop    edi
c0022849:	5d                   	pop    ebp
c002284a:	e9 f1 15 ff ff       	jmp    c0013e40 <Device::preOpenPCI(PCIDeviceInfo)>
c002284f:	83 c4 1c             	add    esp,0x1c
c0022852:	5b                   	pop    ebx
c0022853:	5e                   	pop    esi
c0022854:	5f                   	pop    edi
c0022855:	5d                   	pop    ebp
c0022856:	c3                   	ret    
c0022857:	90                   	nop

c0022858 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022858:	55                   	push   ebp
c0022859:	57                   	push   edi
c002285a:	56                   	push   esi
c002285b:	53                   	push   ebx
c002285c:	83 ec 5c             	sub    esp,0x5c
c002285f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022863:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022867:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002286b:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022870:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022874:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022878:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002287d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022881:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022886:	6a 0c                	push   0xc
c0022888:	55                   	push   ebp
c0022889:	53                   	push   ebx
c002288a:	57                   	push   edi
c002288b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022892:	e8 01 fc ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022897:	55                   	push   ebp
c0022898:	53                   	push   ebx
c0022899:	57                   	push   edi
c002289a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00228a1:	e8 80 fc ff ff       	call   c0022526 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00228a6:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00228ab:	83 c4 24             	add    esp,0x24
c00228ae:	55                   	push   ebp
c00228af:	53                   	push   ebx
c00228b0:	57                   	push   edi
c00228b1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00228b5:	e8 f6 fc ff ff       	call   c00225b0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00228ba:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00228be:	6a 3c                	push   0x3c
c00228c0:	55                   	push   ebp
c00228c1:	53                   	push   ebx
c00228c2:	57                   	push   edi
c00228c3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00228ca:	e8 c9 fb ff ff       	call   c0022498 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228cf:	0f b6 c4             	movzx  eax,ah
c00228d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00228d6:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00228da:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00228de:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00228e3:	83 c4 24             	add    esp,0x24
c00228e6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00228ec:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00228f3:	74 6c                	je     c0022961 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00228f5:	31 f6                	xor    esi,esi
c00228f7:	8b 15 e8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dde8
c00228fd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022903:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022909:	7e 56                	jle    c0022961 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002290b:	8d 14 f2             	lea    edx,[edx+esi*8]
c002290e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022915:	39 cb                	cmp    ebx,ecx
c0022917:	75 45                	jne    c002295e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022919:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022920:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022924:	75 38                	jne    c002295e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022926:	83 ec 0c             	sub    esp,0xc
c0022929:	68 fa c3 02 c0       	push   0xc002c3fa
c002292e:	e8 dc 01 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0022933:	8b 15 e8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dde8
c0022939:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002293f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022947:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002294b:	52                   	push   edx
c002294c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022950:	53                   	push   ebx
c0022951:	68 1f c4 02 c0       	push   0xc002c41f
c0022956:	e8 b4 01 ff ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002295b:	83 c4 20             	add    esp,0x20
c002295e:	46                   	inc    esi
c002295f:	eb 96                	jmp    c00228f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022961:	31 d2                	xor    edx,edx
c0022963:	83 ec 0c             	sub    esp,0xc
c0022966:	55                   	push   ebp
c0022967:	53                   	push   ebx
c0022968:	57                   	push   edi
c0022969:	52                   	push   edx
c002296a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002296e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022975:	e8 7c fc ff ff       	call   c00225f6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002297a:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002297e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022982:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022986:	42                   	inc    edx
c0022987:	83 c4 20             	add    esp,0x20
c002298a:	83 fa 06             	cmp    edx,0x6
c002298d:	75 d4                	jne    c0022963 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002298f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022993:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022997:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002299b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002299f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00229a3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00229a7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00229ac:	86 e0                	xchg   al,ah
c00229ae:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00229b3:	55                   	push   ebp
c00229b4:	53                   	push   ebx
c00229b5:	57                   	push   edi
c00229b6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00229ba:	e8 ab fb ff ff       	call   c002256a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00229bf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00229c3:	55                   	push   ebp
c00229c4:	53                   	push   ebx
c00229c5:	57                   	push   edi
c00229c6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00229cd:	e8 0e fb ff ff       	call   c00224e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00229d2:	83 ec 0c             	sub    esp,0xc
c00229d5:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00229da:	b9 09 00 00 00       	mov    ecx,0x9
c00229df:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00229e3:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00229e7:	fc                   	cld    
c00229e8:	89 e7                	mov    edi,esp
c00229ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00229ec:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00229f3:	e8 ee fc ff ff       	call   c00226e6 <PCI::foundDevice(PCIDeviceInfo)>
c00229f8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00229fe:	5b                   	pop    ebx
c00229ff:	5e                   	pop    esi
c0022a00:	5f                   	pop    edi
c0022a01:	5d                   	pop    ebp
c0022a02:	c3                   	ret    
c0022a03:	90                   	nop

c0022a04 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022a04:	55                   	push   ebp
c0022a05:	57                   	push   edi
c0022a06:	56                   	push   esi
c0022a07:	53                   	push   ebx
c0022a08:	83 ec 0c             	sub    esp,0xc
c0022a0b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022a0f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022a14:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022a19:	6a 00                	push   0x0
c0022a1b:	56                   	push   esi
c0022a1c:	57                   	push   edi
c0022a1d:	55                   	push   ebp
c0022a1e:	e8 bd fa ff ff       	call   c00224e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022a23:	6a 00                	push   0x0
c0022a25:	56                   	push   esi
c0022a26:	57                   	push   edi
c0022a27:	55                   	push   ebp
c0022a28:	e8 2b fe ff ff       	call   c0022858 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022a2d:	83 c4 20             	add    esp,0x20
c0022a30:	6a 00                	push   0x0
c0022a32:	56                   	push   esi
c0022a33:	57                   	push   edi
c0022a34:	55                   	push   ebp
c0022a35:	e8 c8 fa ff ff       	call   c0022502 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022a3a:	83 c4 10             	add    esp,0x10
c0022a3d:	84 c0                	test   al,al
c0022a3f:	79 27                	jns    c0022a68 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022a41:	bb 01 00 00 00       	mov    ebx,0x1
c0022a46:	53                   	push   ebx
c0022a47:	56                   	push   esi
c0022a48:	57                   	push   edi
c0022a49:	55                   	push   ebp
c0022a4a:	e8 91 fa ff ff       	call   c00224e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022a4f:	83 c4 10             	add    esp,0x10
c0022a52:	66 40                	inc    ax
c0022a54:	74 0c                	je     c0022a62 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022a56:	53                   	push   ebx
c0022a57:	56                   	push   esi
c0022a58:	57                   	push   edi
c0022a59:	55                   	push   ebp
c0022a5a:	e8 f9 fd ff ff       	call   c0022858 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022a5f:	83 c4 10             	add    esp,0x10
c0022a62:	43                   	inc    ebx
c0022a63:	83 fb 08             	cmp    ebx,0x8
c0022a66:	75 de                	jne    c0022a46 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022a68:	83 c4 0c             	add    esp,0xc
c0022a6b:	5b                   	pop    ebx
c0022a6c:	5e                   	pop    esi
c0022a6d:	5f                   	pop    edi
c0022a6e:	5d                   	pop    ebp
c0022a6f:	c3                   	ret    

c0022a70 <PCI::detect()>:
c0022a70:	56                   	push   esi
c0022a71:	53                   	push   ebx
c0022a72:	53                   	push   ebx
c0022a73:	31 db                	xor    ebx,ebx
c0022a75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022a79:	6a 00                	push   0x0
c0022a7b:	6a 00                	push   0x0
c0022a7d:	6a 00                	push   0x0
c0022a7f:	56                   	push   esi
c0022a80:	e8 7d fa ff ff       	call   c0022502 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022a85:	83 c4 10             	add    esp,0x10
c0022a88:	a8 80                	test   al,0x80
c0022a8a:	75 21                	jne    c0022aad <PCI::detect()+0x3d>
c0022a8c:	51                   	push   ecx
c0022a8d:	51                   	push   ecx
c0022a8e:	6a 00                	push   0x0
c0022a90:	56                   	push   esi
c0022a91:	e8 2c fc ff ff       	call   c00226c2 <PCI::checkBus(unsigned char)>
c0022a96:	83 c4 10             	add    esp,0x10
c0022a99:	eb 24                	jmp    c0022abf <PCI::detect()+0x4f>
c0022a9b:	52                   	push   edx
c0022a9c:	52                   	push   edx
c0022a9d:	53                   	push   ebx
c0022a9e:	43                   	inc    ebx
c0022a9f:	56                   	push   esi
c0022aa0:	e8 1d fc ff ff       	call   c00226c2 <PCI::checkBus(unsigned char)>
c0022aa5:	83 c4 10             	add    esp,0x10
c0022aa8:	83 fb 08             	cmp    ebx,0x8
c0022aab:	74 12                	je     c0022abf <PCI::detect()+0x4f>
c0022aad:	53                   	push   ebx
c0022aae:	6a 00                	push   0x0
c0022ab0:	6a 00                	push   0x0
c0022ab2:	56                   	push   esi
c0022ab3:	e8 28 fa ff ff       	call   c00224e0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ab8:	83 c4 10             	add    esp,0x10
c0022abb:	66 40                	inc    ax
c0022abd:	74 dc                	je     c0022a9b <PCI::detect()+0x2b>
c0022abf:	58                   	pop    eax
c0022ac0:	5b                   	pop    ebx
c0022ac1:	5e                   	pop    esi
c0022ac2:	c3                   	ret    
c0022ac3:	90                   	nop

c0022ac4 <IDE::close(int, int, void*)>:
c0022ac4:	83 c8 ff             	or     eax,0xffffffff
c0022ac7:	c3                   	ret    

c0022ac8 <IDE::IDE()>:
c0022ac8:	83 ec 0c             	sub    esp,0xc
c0022acb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022acf:	83 ec 08             	sub    esp,0x8
c0022ad2:	68 68 c4 02 c0       	push   0xc002c468
c0022ad7:	50                   	push   eax
c0022ad8:	e8 e5 17 ff ff       	call   c00142c2 <HardDiskController::HardDiskController(char const*)>
c0022add:	83 c4 10             	add    esp,0x10
c0022ae0:	ba a8 c6 02 c0       	mov    edx,0xc002c6a8
c0022ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae9:	89 10                	mov    DWORD PTR [eax],edx
c0022aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022af6:	90                   	nop
c0022af7:	83 c4 0c             	add    esp,0xc
c0022afa:	c3                   	ret    
c0022afb:	90                   	nop

c0022afc <IDE::prepareInterrupt(unsigned char)>:
c0022afc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022b01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022b05:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022b0d:	c3                   	ret    

c0022b0e <selectDrive(unsigned char, unsigned char)>:
c0022b0e:	c3                   	ret    
c0022b0f:	90                   	nop

c0022b10 <IDE::getBase(unsigned char)>:
c0022b10:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b19:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022b21:	c3                   	ret    

c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022b22:	55                   	push   ebp
c0022b23:	57                   	push   edi
c0022b24:	56                   	push   esi
c0022b25:	53                   	push   ebx
c0022b26:	83 ec 1c             	sub    esp,0x1c
c0022b29:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022b2d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022b31:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022b34:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022b38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022b3c:	80 f9 03             	cmp    cl,0x3
c0022b3f:	77 51                	ja     c0022b92 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022b41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022b45:	0f b6 f2             	movzx  esi,dl
c0022b48:	0f b6 db             	movzx  ebx,bl
c0022b4b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022b4e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022b52:	83 ca 80             	or     edx,0xffffff80
c0022b55:	0f b6 d2             	movzx  edx,dl
c0022b58:	52                   	push   edx
c0022b59:	6a 0c                	push   0xc
c0022b5b:	56                   	push   esi
c0022b5c:	57                   	push   edi
c0022b5d:	e8 c0 ff ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b62:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022b67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022b6b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022b6f:	ee                   	out    dx,al
c0022b70:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022b75:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022b79:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022b7d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022b81:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022b89:	83 c4 2c             	add    esp,0x2c
c0022b8c:	5b                   	pop    ebx
c0022b8d:	5e                   	pop    esi
c0022b8e:	5f                   	pop    edi
c0022b8f:	5d                   	pop    ebp
c0022b90:	eb 90                	jmp    c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b92:	80 fb 07             	cmp    bl,0x7
c0022b95:	77 12                	ja     c0022ba9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022b97:	0f b6 d2             	movzx  edx,dl
c0022b9a:	0f b6 db             	movzx  ebx,bl
c0022b9d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022ba5:	89 da                	mov    edx,ebx
c0022ba7:	eb 2f                	jmp    c0022bd8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ba9:	80 fb 0d             	cmp    bl,0xd
c0022bac:	77 13                	ja     c0022bc1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022bae:	0f b6 d2             	movzx  edx,dl
c0022bb1:	0f b6 db             	movzx  ebx,bl
c0022bb4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022bbb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022bbf:	eb 17                	jmp    c0022bd8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022bc1:	80 fb 15             	cmp    bl,0x15
c0022bc4:	77 13                	ja     c0022bd9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022bc6:	0f b6 d2             	movzx  edx,dl
c0022bc9:	0f b6 db             	movzx  ebx,bl
c0022bcc:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022bd4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022bd8:	ee                   	out    dx,al
c0022bd9:	83 c4 1c             	add    esp,0x1c
c0022bdc:	5b                   	pop    ebx
c0022bdd:	5e                   	pop    esi
c0022bde:	5f                   	pop    edi
c0022bdf:	5d                   	pop    ebp
c0022be0:	c3                   	ret    
c0022be1:	90                   	nop

c0022be2 <IDE::read(unsigned char, unsigned char)>:
c0022be2:	55                   	push   ebp
c0022be3:	57                   	push   edi
c0022be4:	56                   	push   esi
c0022be5:	53                   	push   ebx
c0022be6:	83 ec 1c             	sub    esp,0x1c
c0022be9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022bed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022bf1:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022bf4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022bf8:	3c 03                	cmp    al,0x3
c0022bfa:	77 43                	ja     c0022c3f <IDE::read(unsigned char, unsigned char)+0x5d>
c0022bfc:	0f b6 f2             	movzx  esi,dl
c0022bff:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022c02:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022c06:	83 c8 80             	or     eax,0xffffff80
c0022c09:	0f b6 c0             	movzx  eax,al
c0022c0c:	50                   	push   eax
c0022c0d:	6a 0c                	push   0xc
c0022c0f:	56                   	push   esi
c0022c10:	57                   	push   edi
c0022c11:	e8 0c ff ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c16:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022c1b:	0f b6 c3             	movzx  eax,bl
c0022c1e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022c22:	ec                   	in     al,dx
c0022c23:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022c27:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022c2c:	52                   	push   edx
c0022c2d:	6a 0c                	push   0xc
c0022c2f:	56                   	push   esi
c0022c30:	57                   	push   edi
c0022c31:	e8 ec fe ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c36:	83 c4 20             	add    esp,0x20
c0022c39:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022c3d:	eb 49                	jmp    c0022c88 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022c3f:	80 fb 07             	cmp    bl,0x7
c0022c42:	77 12                	ja     c0022c56 <IDE::read(unsigned char, unsigned char)+0x74>
c0022c44:	0f b6 d2             	movzx  edx,dl
c0022c47:	0f b6 c3             	movzx  eax,bl
c0022c4a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022c52:	89 c2                	mov    edx,eax
c0022c54:	eb 31                	jmp    c0022c87 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022c56:	80 fb 0d             	cmp    bl,0xd
c0022c59:	77 13                	ja     c0022c6e <IDE::read(unsigned char, unsigned char)+0x8c>
c0022c5b:	0f b6 d2             	movzx  edx,dl
c0022c5e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022c65:	0f b6 d3             	movzx  edx,bl
c0022c68:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022c6c:	eb 19                	jmp    c0022c87 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022c6e:	31 c0                	xor    eax,eax
c0022c70:	80 fb 15             	cmp    bl,0x15
c0022c73:	77 13                	ja     c0022c88 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022c75:	0f b6 d2             	movzx  edx,dl
c0022c78:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022c80:	0f b6 d3             	movzx  edx,bl
c0022c83:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022c87:	ec                   	in     al,dx
c0022c88:	83 c4 1c             	add    esp,0x1c
c0022c8b:	5b                   	pop    ebx
c0022c8c:	5e                   	pop    esi
c0022c8d:	5f                   	pop    edi
c0022c8e:	5d                   	pop    ebp
c0022c8f:	c3                   	ret    

c0022c90 <IDE::waitInterrupt(unsigned char)>:
c0022c90:	55                   	push   ebp
c0022c91:	57                   	push   edi
c0022c92:	56                   	push   esi
c0022c93:	53                   	push   ebx
c0022c94:	31 db                	xor    ebx,ebx
c0022c96:	83 ec 0c             	sub    esp,0xc
c0022c99:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022c9d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022ca2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022caa:	89 e8                	mov    eax,ebp
c0022cac:	84 c0                	test   al,al
c0022cae:	75 34                	jne    c0022ce4 <IDE::waitInterrupt(unsigned char)+0x54>
c0022cb0:	52                   	push   edx
c0022cb1:	6a 0c                	push   0xc
c0022cb3:	56                   	push   esi
c0022cb4:	57                   	push   edi
c0022cb5:	e8 28 ff ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0022cba:	83 c4 10             	add    esp,0x10
c0022cbd:	a8 01                	test   al,0x1
c0022cbf:	75 2b                	jne    c0022cec <IDE::waitInterrupt(unsigned char)+0x5c>
c0022cc1:	f6 c3 04             	test   bl,0x4
c0022cc4:	75 16                	jne    c0022cdc <IDE::waitInterrupt(unsigned char)+0x4c>
c0022cc6:	83 fb 32             	cmp    ebx,0x32
c0022cc9:	7e 11                	jle    c0022cdc <IDE::waitInterrupt(unsigned char)+0x4c>
c0022ccb:	50                   	push   eax
c0022ccc:	50                   	push   eax
c0022ccd:	6a 00                	push   0x0
c0022ccf:	68 80 96 98 00       	push   0x989680
c0022cd4:	e8 fd b0 ff ff       	call   c001ddd6 <nanoSleep(unsigned long long)>
c0022cd9:	83 c4 10             	add    esp,0x10
c0022cdc:	83 fb 3c             	cmp    ebx,0x3c
c0022cdf:	74 0b                	je     c0022cec <IDE::waitInterrupt(unsigned char)+0x5c>
c0022ce1:	43                   	inc    ebx
c0022ce2:	eb be                	jmp    c0022ca2 <IDE::waitInterrupt(unsigned char)+0x12>
c0022ce4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022cec:	83 c4 0c             	add    esp,0xc
c0022cef:	89 e8                	mov    eax,ebp
c0022cf1:	5b                   	pop    ebx
c0022cf2:	5e                   	pop    esi
c0022cf3:	5f                   	pop    edi
c0022cf4:	5d                   	pop    ebp
c0022cf5:	c3                   	ret    

c0022cf6 <ideChannel0IRQHandler(regs*, void*)>:
c0022cf6:	83 ec 10             	sub    esp,0x10
c0022cf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022cfd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022d04:	6a 07                	push   0x7
c0022d06:	6a 00                	push   0x0
c0022d08:	50                   	push   eax
c0022d09:	e8 d4 fe ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0022d0e:	83 c4 1c             	add    esp,0x1c
c0022d11:	c3                   	ret    

c0022d12 <ideChannel1IRQHandler(regs*, void*)>:
c0022d12:	83 ec 10             	sub    esp,0x10
c0022d15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022d19:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022d20:	6a 07                	push   0x7
c0022d22:	6a 01                	push   0x1
c0022d24:	50                   	push   eax
c0022d25:	e8 b8 fe ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0022d2a:	83 c4 1c             	add    esp,0x1c
c0022d2d:	c3                   	ret    

c0022d2e <IDE::enableIRQs(unsigned char, bool)>:
c0022d2e:	57                   	push   edi
c0022d2f:	56                   	push   esi
c0022d30:	be 04 00 00 00       	mov    esi,0x4
c0022d35:	53                   	push   ebx
c0022d36:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022d3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022d3f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022d44:	0f 94 c0             	sete   al
c0022d47:	d1 e0                	shl    eax,1
c0022d49:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022d50:	0f b6 c0             	movzx  eax,al
c0022d53:	50                   	push   eax
c0022d54:	6a 0c                	push   0xc
c0022d56:	57                   	push   edi
c0022d57:	53                   	push   ebx
c0022d58:	e8 c5 fd ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d5d:	83 c4 10             	add    esp,0x10
c0022d60:	50                   	push   eax
c0022d61:	6a 0c                	push   0xc
c0022d63:	57                   	push   edi
c0022d64:	53                   	push   ebx
c0022d65:	e8 78 fe ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0022d6a:	83 c4 10             	add    esp,0x10
c0022d6d:	4e                   	dec    esi
c0022d6e:	75 f0                	jne    c0022d60 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022d70:	5b                   	pop    ebx
c0022d71:	5e                   	pop    esi
c0022d72:	5f                   	pop    edi
c0022d73:	c3                   	ret    

c0022d74 <IDE::open(int, int, void*)>:
c0022d74:	55                   	push   ebp
c0022d75:	57                   	push   edi
c0022d76:	56                   	push   esi
c0022d77:	53                   	push   ebx
c0022d78:	83 ec 1c             	sub    esp,0x1c
c0022d7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022d7f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022d88:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022d91:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022d98:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022d9f:	0f 85 b0 02 00 00    	jne    c0023055 <IDE::open(int, int, void*)+0x2e1>
c0022da5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022dab:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022daf:	83 e0 7f             	and    eax,0x7f
c0022db2:	3c 05                	cmp    al,0x5
c0022db4:	74 04                	je     c0022dba <IDE::open(int, int, void*)+0x46>
c0022db6:	3c 0f                	cmp    al,0xf
c0022db8:	75 32                	jne    c0022dec <IDE::open(int, int, void*)+0x78>
c0022dba:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022dc0:	83 e0 fc             	and    eax,0xfffffffc
c0022dc3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022dca:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022dd0:	83 e0 fc             	and    eax,0xfffffffc
c0022dd3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022dda:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022de0:	83 e0 fc             	and    eax,0xfffffffc
c0022de3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022dea:	eb 14                	jmp    c0022e00 <IDE::open(int, int, void*)+0x8c>
c0022dec:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022df6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022e00:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022e07:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022e0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022e12:	89 c6                	mov    esi,eax
c0022e14:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022e19:	c1 e6 10             	shl    esi,0x10
c0022e1c:	89 e8                	mov    eax,ebp
c0022e1e:	89 fa                	mov    edx,edi
c0022e20:	c1 e0 0b             	shl    eax,0xb
c0022e23:	09 f0                	or     eax,esi
c0022e25:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022e2c:	c1 e6 08             	shl    esi,0x8
c0022e2f:	09 c6                	or     esi,eax
c0022e31:	89 f0                	mov    eax,esi
c0022e33:	0d 08 00 00 80       	or     eax,0x80000008
c0022e38:	ef                   	out    dx,eax
c0022e39:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022e3e:	89 ca                	mov    edx,ecx
c0022e40:	ed                   	in     eax,dx
c0022e41:	c1 e8 10             	shr    eax,0x10
c0022e44:	3d ff ff 00 00       	cmp    eax,0xffff
c0022e49:	0f 84 f5 00 00 00    	je     c0022f44 <IDE::open(int, int, void*)+0x1d0>
c0022e4f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022e55:	89 fa                	mov    edx,edi
c0022e57:	89 f0                	mov    eax,esi
c0022e59:	ef                   	out    dx,eax
c0022e5a:	b0 fe                	mov    al,0xfe
c0022e5c:	89 ca                	mov    edx,ecx
c0022e5e:	ee                   	out    dx,al
c0022e5f:	89 f0                	mov    eax,esi
c0022e61:	89 fa                	mov    edx,edi
c0022e63:	ef                   	out    dx,eax
c0022e64:	89 ca                	mov    edx,ecx
c0022e66:	ed                   	in     eax,dx
c0022e67:	3c fe                	cmp    al,0xfe
c0022e69:	0f 85 a9 00 00 00    	jne    c0022f18 <IDE::open(int, int, void*)+0x1a4>
c0022e6f:	8b 15 e8 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dde8
c0022e75:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022e7c:	74 33                	je     c0022eb1 <IDE::open(int, int, void*)+0x13d>
c0022e7e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022e84:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022e88:	40                   	inc    eax
c0022e89:	83 ec 0c             	sub    esp,0xc
c0022e8c:	0f b6 c0             	movzx  eax,al
c0022e8f:	50                   	push   eax
c0022e90:	55                   	push   ebp
c0022e91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022e95:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022e9b:	51                   	push   ecx
c0022e9c:	e8 43 4f ff ff       	call   c0017de4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022ea1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022ea6:	83 c4 1c             	add    esp,0x1c
c0022ea9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022eaf:	eb 0a                	jmp    c0022ebb <IDE::open(int, int, void*)+0x147>
c0022eb1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022ebb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022ec2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022ec9:	c1 e1 10             	shl    ecx,0x10
c0022ecc:	c1 e0 08             	shl    eax,0x8
c0022ecf:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022ed4:	09 c1                	or     ecx,eax
c0022ed6:	89 fa                	mov    edx,edi
c0022ed8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022edf:	c1 e0 0b             	shl    eax,0xb
c0022ee2:	09 c1                	or     ecx,eax
c0022ee4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022eea:	89 c8                	mov    eax,ecx
c0022eec:	ef                   	out    dx,eax
c0022eed:	be fc 0c 00 00       	mov    esi,0xcfc
c0022ef2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022ef8:	89 f2                	mov    edx,esi
c0022efa:	ee                   	out    dx,al
c0022efb:	89 c8                	mov    eax,ecx
c0022efd:	89 fa                	mov    edx,edi
c0022eff:	ef                   	out    dx,eax
c0022f00:	89 f2                	mov    edx,esi
c0022f02:	ed                   	in     eax,dx
c0022f03:	0f b6 c0             	movzx  eax,al
c0022f06:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022f0c:	74 46                	je     c0022f54 <IDE::open(int, int, void*)+0x1e0>
c0022f0e:	83 ec 0c             	sub    esp,0xc
c0022f11:	68 80 c4 02 c0       	push   0xc002c480
c0022f16:	eb 34                	jmp    c0022f4c <IDE::open(int, int, void*)+0x1d8>
c0022f18:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022f21:	75 17                	jne    c0022f3a <IDE::open(int, int, void*)+0x1c6>
c0022f23:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022f28:	74 07                	je     c0022f31 <IDE::open(int, int, void*)+0x1bd>
c0022f2a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022f2f:	75 09                	jne    c0022f3a <IDE::open(int, int, void*)+0x1c6>
c0022f31:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022f38:	eb 1a                	jmp    c0022f54 <IDE::open(int, int, void*)+0x1e0>
c0022f3a:	83 ec 0c             	sub    esp,0xc
c0022f3d:	68 88 c4 02 c0       	push   0xc002c488
c0022f42:	eb 08                	jmp    c0022f4c <IDE::open(int, int, void*)+0x1d8>
c0022f44:	83 ec 0c             	sub    esp,0xc
c0022f47:	68 b9 c4 02 c0       	push   0xc002c4b9
c0022f4c:	e8 3a 72 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0022f51:	83 c4 10             	add    esp,0x10
c0022f54:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022f5b:	79 1a                	jns    c0022f77 <IDE::open(int, int, void*)+0x203>
c0022f5d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022f63:	83 e0 fc             	and    eax,0xfffffffc
c0022f66:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022f6d:	83 c0 08             	add    eax,0x8
c0022f70:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022f77:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022f7d:	89 c2                	mov    edx,eax
c0022f7f:	83 e2 0f             	and    edx,0xf
c0022f82:	66 83 fa 08          	cmp    dx,0x8
c0022f86:	75 0a                	jne    c0022f92 <IDE::open(int, int, void*)+0x21e>
c0022f88:	83 e8 02             	sub    eax,0x2
c0022f8b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022f92:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022f98:	89 c2                	mov    edx,eax
c0022f9a:	83 e2 0f             	and    edx,0xf
c0022f9d:	66 83 fa 08          	cmp    dx,0x8
c0022fa1:	75 0a                	jne    c0022fad <IDE::open(int, int, void*)+0x239>
c0022fa3:	83 e8 02             	sub    eax,0x2
c0022fa6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022fad:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022fb4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022fbb:	89 d0                	mov    eax,edx
c0022fbd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022fc0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022fc4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022fc8:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022fcb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022fd0:	0f b6 c9             	movzx  ecx,cl
c0022fd3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022fda:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022fdd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022fe1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022fe5:	8d 50 02             	lea    edx,[eax+0x2]
c0022fe8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022fed:	0f b6 d2             	movzx  edx,dl
c0022ff0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022ff6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022ff9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022ffd:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023001:	8d 48 03             	lea    ecx,[eax+0x3]
c0023004:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023009:	0f b6 c9             	movzx  ecx,cl
c002300c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023012:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023015:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023019:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002301d:	8d 50 04             	lea    edx,[eax+0x4]
c0023020:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023026:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002302b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023032:	66 85 f6             	test   si,si
c0023035:	74 3e                	je     c0023075 <IDE::open(int, int, void*)+0x301>
c0023037:	0f b6 d2             	movzx  edx,dl
c002303a:	83 c0 05             	add    eax,0x5
c002303d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023040:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023044:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023048:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002304e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023053:	eb 20                	jmp    c0023075 <IDE::open(int, int, void*)+0x301>
c0023055:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002305f:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023069:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023070:	e9 02 ff ff ff       	jmp    c0022f77 <IDE::open(int, int, void*)+0x203>
c0023075:	52                   	push   edx
c0023076:	52                   	push   edx
c0023077:	6a 00                	push   0x0
c0023079:	53                   	push   ebx
c002307a:	e8 7d fa ff ff       	call   c0022afc <IDE::prepareInterrupt(unsigned char)>
c002307f:	59                   	pop    ecx
c0023080:	5e                   	pop    esi
c0023081:	6a 01                	push   0x1
c0023083:	53                   	push   ebx
c0023084:	e8 73 fa ff ff       	call   c0022afc <IDE::prepareInterrupt(unsigned char)>
c0023089:	83 c4 0c             	add    esp,0xc
c002308c:	6a 00                	push   0x0
c002308e:	6a 00                	push   0x0
c0023090:	53                   	push   ebx
c0023091:	e8 98 fc ff ff       	call   c0022d2e <IDE::enableIRQs(unsigned char, bool)>
c0023096:	83 c4 0c             	add    esp,0xc
c0023099:	6a 00                	push   0x0
c002309b:	6a 01                	push   0x1
c002309d:	53                   	push   ebx
c002309e:	e8 8b fc ff ff       	call   c0022d2e <IDE::enableIRQs(unsigned char, bool)>
c00230a3:	83 c4 10             	add    esp,0x10
c00230a6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00230ad:	74 40                	je     c00230ef <IDE::open(int, int, void*)+0x37b>
c00230af:	83 ec 0c             	sub    esp,0xc
c00230b2:	68 e3 c4 02 c0       	push   0xc002c4e3
c00230b7:	e8 53 fa fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00230bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00230bf:	6a 01                	push   0x1
c00230c1:	68 f6 2c 02 c0       	push   0xc0022cf6
c00230c6:	6a 0e                	push   0xe
c00230c8:	53                   	push   ebx
c00230c9:	e8 ec 0d ff ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00230ce:	83 c4 14             	add    esp,0x14
c00230d1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00230d7:	53                   	push   ebx
c00230d8:	6a 01                	push   0x1
c00230da:	68 12 2d 02 c0       	push   0xc0022d12
c00230df:	6a 0f                	push   0xf
c00230e1:	53                   	push   ebx
c00230e2:	e8 d3 0d ff ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00230e7:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00230ed:	eb 4a                	jmp    c0023139 <IDE::open(int, int, void*)+0x3c5>
c00230ef:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00230f9:	50                   	push   eax
c00230fa:	6a 0f                	push   0xf
c00230fc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023102:	68 ff c4 02 c0       	push   0xc002c4ff
c0023107:	e8 03 fa fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002310c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002310f:	6a 00                	push   0x0
c0023111:	68 f6 2c 02 c0       	push   0xc0022cf6
c0023116:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002311c:	53                   	push   ebx
c002311d:	e8 98 0d ff ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023122:	83 c4 14             	add    esp,0x14
c0023125:	53                   	push   ebx
c0023126:	6a 00                	push   0x0
c0023128:	68 12 2d 02 c0       	push   0xc0022d12
c002312d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023133:	53                   	push   ebx
c0023134:	e8 81 0d ff ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023139:	8b 03                	mov    eax,DWORD PTR [ebx]
c002313b:	83 c4 20             	add    esp,0x20
c002313e:	83 ec 0c             	sub    esp,0xc
c0023141:	53                   	push   ebx
c0023142:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023145:	83 c4 0c             	add    esp,0xc
c0023148:	6a 07                	push   0x7
c002314a:	6a 00                	push   0x0
c002314c:	53                   	push   ebx
c002314d:	e8 90 fa ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0023152:	83 c4 0c             	add    esp,0xc
c0023155:	6a 07                	push   0x7
c0023157:	6a 01                	push   0x1
c0023159:	53                   	push   ebx
c002315a:	e8 83 fa ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c002315f:	83 c4 0c             	add    esp,0xc
c0023162:	6a 01                	push   0x1
c0023164:	6a 00                	push   0x0
c0023166:	53                   	push   ebx
c0023167:	e8 c2 fb ff ff       	call   c0022d2e <IDE::enableIRQs(unsigned char, bool)>
c002316c:	83 c4 0c             	add    esp,0xc
c002316f:	6a 01                	push   0x1
c0023171:	6a 01                	push   0x1
c0023173:	53                   	push   ebx
c0023174:	e8 b5 fb ff ff       	call   c0022d2e <IDE::enableIRQs(unsigned char, bool)>
c0023179:	83 c4 2c             	add    esp,0x2c
c002317c:	31 c0                	xor    eax,eax
c002317e:	5b                   	pop    ebx
c002317f:	5e                   	pop    esi
c0023180:	5f                   	pop    edi
c0023181:	5d                   	pop    ebp
c0023182:	c3                   	ret    
c0023183:	90                   	nop

c0023184 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023184:	55                   	push   ebp
c0023185:	57                   	push   edi
c0023186:	56                   	push   esi
c0023187:	53                   	push   ebx
c0023188:	83 ec 1c             	sub    esp,0x1c
c002318b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002318f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023193:	8d 50 f8             	lea    edx,[eax-0x8]
c0023196:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002319a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002319e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00231a2:	80 fa 03             	cmp    dl,0x3
c00231a5:	77 5d                	ja     c0023204 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00231a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00231ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00231af:	0f b6 db             	movzx  ebx,bl
c00231b2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00231b5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00231b9:	83 ca 80             	or     edx,0xffffff80
c00231bc:	0f b6 d2             	movzx  edx,dl
c00231bf:	52                   	push   edx
c00231c0:	6a 0c                	push   0xc
c00231c2:	53                   	push   ebx
c00231c3:	56                   	push   esi
c00231c4:	e8 59 f9 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231c9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00231ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231d2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00231d6:	0f b6 c0             	movzx  eax,al
c00231d9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00231dd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00231df:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00231e4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00231e8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00231ec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00231f0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00231f8:	83 c4 2c             	add    esp,0x2c
c00231fb:	5b                   	pop    ebx
c00231fc:	5e                   	pop    esi
c00231fd:	5f                   	pop    edi
c00231fe:	5d                   	pop    ebp
c00231ff:	e9 1e f9 ff ff       	jmp    c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023204:	3c 07                	cmp    al,0x7
c0023206:	77 10                	ja     c0023218 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023208:	0f b6 db             	movzx  ebx,bl
c002320b:	0f b6 d0             	movzx  edx,al
c002320e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023216:	eb 2d                	jmp    c0023245 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023218:	3c 0d                	cmp    al,0xd
c002321a:	77 13                	ja     c002322f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002321c:	0f b6 db             	movzx  ebx,bl
c002321f:	0f b6 c0             	movzx  eax,al
c0023222:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023229:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002322d:	eb 16                	jmp    c0023245 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002322f:	3c 15                	cmp    al,0x15
c0023231:	77 14                	ja     c0023247 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023233:	0f b6 db             	movzx  ebx,bl
c0023236:	0f b6 c0             	movzx  eax,al
c0023239:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023241:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023245:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023247:	83 c4 1c             	add    esp,0x1c
c002324a:	5b                   	pop    ebx
c002324b:	5e                   	pop    esi
c002324c:	5f                   	pop    edi
c002324d:	5d                   	pop    ebp
c002324e:	c3                   	ret    
c002324f:	90                   	nop

c0023250 <IDE::detect()>:
c0023250:	55                   	push   ebp
c0023251:	57                   	push   edi
c0023252:	56                   	push   esi
c0023253:	53                   	push   ebx
c0023254:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002325a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023261:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023268:	0f 85 be 02 00 00    	jne    c002352c <IDE::detect()+0x2dc>
c002326e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023275:	31 f6                	xor    esi,esi
c0023277:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002327f:	31 ed                	xor    ebp,ebp
c0023281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023285:	c1 e0 06             	shl    eax,0x6
c0023288:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023290:	89 e8                	mov    eax,ebp
c0023292:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023296:	c1 e0 04             	shl    eax,0x4
c0023299:	83 c8 a0             	or     eax,0xffffffa0
c002329c:	0f b6 c0             	movzx  eax,al
c002329f:	50                   	push   eax
c00232a0:	6a 06                	push   0x6
c00232a2:	56                   	push   esi
c00232a3:	53                   	push   ebx
c00232a4:	e8 79 f8 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232a9:	83 c4 0c             	add    esp,0xc
c00232ac:	6a 0c                	push   0xc
c00232ae:	56                   	push   esi
c00232af:	53                   	push   ebx
c00232b0:	e8 2d f9 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00232b5:	83 c4 0c             	add    esp,0xc
c00232b8:	6a 0c                	push   0xc
c00232ba:	56                   	push   esi
c00232bb:	53                   	push   ebx
c00232bc:	e8 21 f9 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00232c1:	83 c4 0c             	add    esp,0xc
c00232c4:	6a 0c                	push   0xc
c00232c6:	56                   	push   esi
c00232c7:	53                   	push   ebx
c00232c8:	e8 15 f9 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00232cd:	83 c4 0c             	add    esp,0xc
c00232d0:	6a 0c                	push   0xc
c00232d2:	56                   	push   esi
c00232d3:	53                   	push   ebx
c00232d4:	e8 09 f9 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00232d9:	68 ec 00 00 00       	push   0xec
c00232de:	6a 07                	push   0x7
c00232e0:	56                   	push   esi
c00232e1:	53                   	push   ebx
c00232e2:	e8 3b f8 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232e7:	83 c4 1c             	add    esp,0x1c
c00232ea:	6a 0c                	push   0xc
c00232ec:	56                   	push   esi
c00232ed:	53                   	push   ebx
c00232ee:	e8 ef f8 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00232f3:	83 c4 0c             	add    esp,0xc
c00232f6:	6a 0c                	push   0xc
c00232f8:	56                   	push   esi
c00232f9:	53                   	push   ebx
c00232fa:	e8 e3 f8 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00232ff:	83 c4 0c             	add    esp,0xc
c0023302:	6a 0c                	push   0xc
c0023304:	56                   	push   esi
c0023305:	53                   	push   ebx
c0023306:	e8 d7 f8 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c002330b:	83 c4 0c             	add    esp,0xc
c002330e:	6a 0c                	push   0xc
c0023310:	56                   	push   esi
c0023311:	53                   	push   ebx
c0023312:	e8 cb f8 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0023317:	83 c4 0c             	add    esp,0xc
c002331a:	6a 0c                	push   0xc
c002331c:	56                   	push   esi
c002331d:	53                   	push   ebx
c002331e:	e8 bf f8 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0023323:	83 c4 10             	add    esp,0x10
c0023326:	84 c0                	test   al,al
c0023328:	0f 84 8b 01 00 00    	je     c00234b9 <IDE::detect()+0x269>
c002332e:	31 ff                	xor    edi,edi
c0023330:	50                   	push   eax
c0023331:	6a 0c                	push   0xc
c0023333:	56                   	push   esi
c0023334:	53                   	push   ebx
c0023335:	e8 a8 f8 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c002333a:	83 c4 10             	add    esp,0x10
c002333d:	a8 01                	test   al,0x1
c002333f:	0f 85 8e 01 00 00    	jne    c00234d3 <IDE::detect()+0x283>
c0023345:	84 c0                	test   al,al
c0023347:	78 04                	js     c002334d <IDE::detect()+0xfd>
c0023349:	a8 08                	test   al,0x8
c002334b:	75 27                	jne    c0023374 <IDE::detect()+0x124>
c002334d:	47                   	inc    edi
c002334e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023354:	7e da                	jle    c0023330 <IDE::detect()+0xe0>
c0023356:	50                   	push   eax
c0023357:	50                   	push   eax
c0023358:	6a 00                	push   0x0
c002335a:	68 40 4b 4c 00       	push   0x4c4b40
c002335f:	e8 72 aa ff ff       	call   c001ddd6 <nanoSleep(unsigned long long)>
c0023364:	83 c4 10             	add    esp,0x10
c0023367:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002336d:	75 c1                	jne    c0023330 <IDE::detect()+0xe0>
c002336f:	e9 5f 01 00 00       	jmp    c00234d3 <IDE::detect()+0x283>
c0023374:	31 c9                	xor    ecx,ecx
c0023376:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002337a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002337e:	83 ec 0c             	sub    esp,0xc
c0023381:	68 80 00 00 00       	push   0x80
c0023386:	57                   	push   edi
c0023387:	6a 00                	push   0x0
c0023389:	56                   	push   esi
c002338a:	53                   	push   ebx
c002338b:	e8 f4 fd ff ff       	call   c0023184 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023390:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023395:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023399:	89 d1                	mov    ecx,edx
c002339b:	c1 e0 06             	shl    eax,0x6
c002339e:	01 d8                	add    eax,ebx
c00233a0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00233a7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00233ae:	89 f2                	mov    edx,esi
c00233b0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00233b6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00233ba:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00233c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00233c4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00233cb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00233d3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00233da:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00233e2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00233e8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00233ef:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00233f5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00233f9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00233fd:	83 c4 20             	add    esp,0x20
c0023400:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023403:	83 c0 02             	add    eax,0x2
c0023406:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002340c:	83 c7 02             	add    edi,0x2
c002340f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023412:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023418:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002341c:	75 e2                	jne    c0023400 <IDE::detect()+0x1b0>
c002341e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023422:	c1 e0 06             	shl    eax,0x6
c0023425:	01 d8                	add    eax,ebx
c0023427:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002342d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023434:	66 c1 ea 09          	shr    dx,0x9
c0023438:	83 e2 01             	and    edx,0x1
c002343b:	84 c9                	test   cl,cl
c002343d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023443:	75 2f                	jne    c0023474 <IDE::detect()+0x224>
c0023445:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002344b:	85 c0                	test   eax,eax
c002344d:	74 66                	je     c00234b5 <IDE::detect()+0x265>
c002344f:	50                   	push   eax
c0023450:	55                   	push   ebp
c0023451:	56                   	push   esi
c0023452:	68 1b c5 02 c0       	push   0xc002c51b
c0023457:	e8 b3 f6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002345c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023463:	e8 d8 c3 fe ff       	call   c000f840 <malloc>
c0023468:	89 c7                	mov    edi,eax
c002346a:	89 04 24             	mov    DWORD PTR [esp],eax
c002346d:	e8 78 06 00 00       	call   c0023aea <ATA::ATA()>
c0023472:	eb 28                	jmp    c002349c <IDE::detect()+0x24c>
c0023474:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002347a:	55                   	push   ebp
c002347b:	56                   	push   esi
c002347c:	68 4a c5 02 c0       	push   0xc002c54a
c0023481:	e8 89 f6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023486:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002348d:	e8 ae c3 fe ff       	call   c000f840 <malloc>
c0023492:	89 c7                	mov    edi,eax
c0023494:	89 04 24             	mov    DWORD PTR [esp],eax
c0023497:	e8 8e 0c 00 00       	call   c002412a <ATAPI::ATAPI()>
c002349c:	5a                   	pop    edx
c002349d:	59                   	pop    ecx
c002349e:	57                   	push   edi
c002349f:	53                   	push   ebx
c00234a0:	e8 91 0a ff ff       	call   c0013f36 <Device::addChild(Device*)>
c00234a5:	8b 07                	mov    eax,DWORD PTR [edi]
c00234a7:	53                   	push   ebx
c00234a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00234ac:	6a 00                	push   0x0
c00234ae:	57                   	push   edi
c00234af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00234b2:	83 c4 20             	add    esp,0x20
c00234b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00234b9:	4d                   	dec    ebp
c00234ba:	74 0a                	je     c00234c6 <IDE::detect()+0x276>
c00234bc:	bd 01 00 00 00       	mov    ebp,0x1
c00234c1:	e9 bb fd ff ff       	jmp    c0023281 <IDE::detect()+0x31>
c00234c6:	4e                   	dec    esi
c00234c7:	74 63                	je     c002352c <IDE::detect()+0x2dc>
c00234c9:	be 01 00 00 00       	mov    esi,0x1
c00234ce:	e9 ac fd ff ff       	jmp    c002327f <IDE::detect()+0x2f>
c00234d3:	50                   	push   eax
c00234d4:	6a 04                	push   0x4
c00234d6:	56                   	push   esi
c00234d7:	53                   	push   ebx
c00234d8:	e8 05 f7 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00234dd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00234e1:	83 c4 0c             	add    esp,0xc
c00234e4:	6a 05                	push   0x5
c00234e6:	56                   	push   esi
c00234e7:	53                   	push   ebx
c00234e8:	e8 f5 f6 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00234ed:	83 c4 10             	add    esp,0x10
c00234f0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00234f4:	80 fa 14             	cmp    dl,0x14
c00234f7:	75 04                	jne    c00234fd <IDE::detect()+0x2ad>
c00234f9:	3c eb                	cmp    al,0xeb
c00234fb:	eb 07                	jmp    c0023504 <IDE::detect()+0x2b4>
c00234fd:	3c 96                	cmp    al,0x96
c00234ff:	75 b8                	jne    c00234b9 <IDE::detect()+0x269>
c0023501:	80 fa 69             	cmp    dl,0x69
c0023504:	75 b3                	jne    c00234b9 <IDE::detect()+0x269>
c0023506:	68 a1 00 00 00       	push   0xa1
c002350b:	6a 07                	push   0x7
c002350d:	56                   	push   esi
c002350e:	53                   	push   ebx
c002350f:	e8 0e f6 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023514:	5f                   	pop    edi
c0023515:	58                   	pop    eax
c0023516:	6a 00                	push   0x0
c0023518:	68 40 42 0f 00       	push   0xf4240
c002351d:	e8 b4 a8 ff ff       	call   c001ddd6 <nanoSleep(unsigned long long)>
c0023522:	83 c4 10             	add    esp,0x10
c0023525:	b1 01                	mov    cl,0x1
c0023527:	e9 4a fe ff ff       	jmp    c0023376 <IDE::detect()+0x126>
c002352c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023532:	5b                   	pop    ebx
c0023533:	5e                   	pop    esi
c0023534:	5f                   	pop    edi
c0023535:	5d                   	pop    ebp
c0023536:	c3                   	ret    
c0023537:	90                   	nop

c0023538 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023538:	55                   	push   ebp
c0023539:	57                   	push   edi
c002353a:	56                   	push   esi
c002353b:	53                   	push   ebx
c002353c:	83 ec 1c             	sub    esp,0x1c
c002353f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023543:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023547:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002354b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002354f:	88 c3                	mov    bl,al
c0023551:	84 c0                	test   al,al
c0023553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023557:	0f 84 67 01 00 00    	je     c00236c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002355d:	83 ec 0c             	sub    esp,0xc
c0023560:	68 7b c5 02 c0       	push   0xc002c57b
c0023565:	e8 a5 f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002356a:	83 c4 10             	add    esp,0x10
c002356d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023571:	3c 01                	cmp    al,0x1
c0023573:	75 17                	jne    c002358c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023575:	83 ec 0c             	sub    esp,0xc
c0023578:	b3 13                	mov    bl,0x13
c002357a:	68 87 c5 02 c0       	push   0xc002c587
c002357f:	e8 8b f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023584:	83 c4 10             	add    esp,0x10
c0023587:	e9 25 01 00 00       	jmp    c00236b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002358c:	3c 02                	cmp    al,0x2
c002358e:	0f 85 ef 00 00 00    	jne    c0023683 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023594:	d1 e6                	shl    esi,1
c0023596:	09 ee                	or     esi,ebp
c0023598:	52                   	push   edx
c0023599:	89 f0                	mov    eax,esi
c002359b:	6a 01                	push   0x1
c002359d:	0f b6 f0             	movzx  esi,al
c00235a0:	c1 e6 06             	shl    esi,0x6
c00235a3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00235ab:	50                   	push   eax
c00235ac:	57                   	push   edi
c00235ad:	e8 30 f6 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00235b2:	83 c4 10             	add    esp,0x10
c00235b5:	89 c6                	mov    esi,eax
c00235b7:	a8 01                	test   al,0x1
c00235b9:	74 12                	je     c00235cd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00235bb:	83 ec 0c             	sub    esp,0xc
c00235be:	b3 07                	mov    bl,0x7
c00235c0:	68 9c c5 02 c0       	push   0xc002c59c
c00235c5:	e8 45 f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00235ca:	83 c4 10             	add    esp,0x10
c00235cd:	f7 c6 02 00 00 00    	test   esi,0x2
c00235d3:	74 12                	je     c00235e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00235d5:	83 ec 0c             	sub    esp,0xc
c00235d8:	b3 03                	mov    bl,0x3
c00235da:	68 ba c5 02 c0       	push   0xc002c5ba
c00235df:	e8 2b f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00235e4:	83 c4 10             	add    esp,0x10
c00235e7:	f7 c6 04 00 00 00    	test   esi,0x4
c00235ed:	74 12                	je     c0023601 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00235ef:	83 ec 0c             	sub    esp,0xc
c00235f2:	b3 14                	mov    bl,0x14
c00235f4:	68 da c5 02 c0       	push   0xc002c5da
c00235f9:	e8 11 f5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00235fe:	83 c4 10             	add    esp,0x10
c0023601:	f7 c6 08 00 00 00    	test   esi,0x8
c0023607:	74 12                	je     c002361b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023609:	83 ec 0c             	sub    esp,0xc
c002360c:	b3 03                	mov    bl,0x3
c002360e:	68 ba c5 02 c0       	push   0xc002c5ba
c0023613:	e8 f7 f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023618:	83 c4 10             	add    esp,0x10
c002361b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023621:	74 12                	je     c0023635 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023623:	83 ec 0c             	sub    esp,0xc
c0023626:	b3 15                	mov    bl,0x15
c0023628:	68 f2 c5 02 c0       	push   0xc002c5f2
c002362d:	e8 dd f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023632:	83 c4 10             	add    esp,0x10
c0023635:	f7 c6 20 00 00 00    	test   esi,0x20
c002363b:	74 12                	je     c002364f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002363d:	83 ec 0c             	sub    esp,0xc
c0023640:	b3 03                	mov    bl,0x3
c0023642:	68 ba c5 02 c0       	push   0xc002c5ba
c0023647:	e8 c3 f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002364c:	83 c4 10             	add    esp,0x10
c002364f:	f7 c6 40 00 00 00    	test   esi,0x40
c0023655:	74 12                	je     c0023669 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023657:	83 ec 0c             	sub    esp,0xc
c002365a:	b3 16                	mov    bl,0x16
c002365c:	68 0c c6 02 c0       	push   0xc002c60c
c0023661:	e8 a9 f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023666:	83 c4 10             	add    esp,0x10
c0023669:	89 f0                	mov    eax,esi
c002366b:	84 c0                	test   al,al
c002366d:	79 42                	jns    c00236b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002366f:	83 ec 0c             	sub    esp,0xc
c0023672:	b3 0d                	mov    bl,0xd
c0023674:	68 2d c6 02 c0       	push   0xc002c62d
c0023679:	e8 91 f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002367e:	83 c4 10             	add    esp,0x10
c0023681:	eb 2e                	jmp    c00236b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023683:	3c 03                	cmp    al,0x3
c0023685:	75 14                	jne    c002369b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023687:	83 ec 0c             	sub    esp,0xc
c002368a:	b3 17                	mov    bl,0x17
c002368c:	68 41 c6 02 c0       	push   0xc002c641
c0023691:	e8 79 f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023696:	83 c4 10             	add    esp,0x10
c0023699:	eb 16                	jmp    c00236b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002369b:	3c 04                	cmp    al,0x4
c002369d:	75 12                	jne    c00236b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002369f:	83 ec 0c             	sub    esp,0xc
c00236a2:	b3 08                	mov    bl,0x8
c00236a4:	68 57 c6 02 c0       	push   0xc002c657
c00236a9:	e8 61 f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00236ae:	83 c4 10             	add    esp,0x10
c00236b1:	50                   	push   eax
c00236b2:	50                   	push   eax
c00236b3:	0f b6 c3             	movzx  eax,bl
c00236b6:	50                   	push   eax
c00236b7:	68 6f c6 02 c0       	push   0xc002c66f
c00236bc:	e8 4e f4 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00236c1:	83 c4 10             	add    esp,0x10
c00236c4:	83 c4 1c             	add    esp,0x1c
c00236c7:	88 d8                	mov    al,bl
c00236c9:	5b                   	pop    ebx
c00236ca:	5e                   	pop    esi
c00236cb:	5f                   	pop    edi
c00236cc:	5d                   	pop    ebp
c00236cd:	c3                   	ret    

c00236ce <IDE::polling(unsigned char, unsigned int)>:
c00236ce:	57                   	push   edi
c00236cf:	56                   	push   esi
c00236d0:	53                   	push   ebx
c00236d1:	bb 04 00 00 00       	mov    ebx,0x4
c00236d6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00236da:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00236df:	52                   	push   edx
c00236e0:	6a 0c                	push   0xc
c00236e2:	56                   	push   esi
c00236e3:	57                   	push   edi
c00236e4:	e8 f9 f4 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00236e9:	83 c4 10             	add    esp,0x10
c00236ec:	4b                   	dec    ebx
c00236ed:	75 f0                	jne    c00236df <IDE::polling(unsigned char, unsigned int)+0x11>
c00236ef:	bb a0 86 01 00       	mov    ebx,0x186a0
c00236f4:	50                   	push   eax
c00236f5:	6a 0c                	push   0xc
c00236f7:	56                   	push   esi
c00236f8:	57                   	push   edi
c00236f9:	e8 e4 f4 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c00236fe:	83 c4 10             	add    esp,0x10
c0023701:	a8 01                	test   al,0x1
c0023703:	74 12                	je     c0023717 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023705:	83 ec 0c             	sub    esp,0xc
c0023708:	68 89 c6 02 c0       	push   0xc002c689
c002370d:	e8 fd f3 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023712:	83 c4 10             	add    esp,0x10
c0023715:	eb 17                	jmp    c002372e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023717:	a8 20                	test   al,0x20
c0023719:	75 0f                	jne    c002372a <IDE::polling(unsigned char, unsigned int)+0x5c>
c002371b:	4b                   	dec    ebx
c002371c:	74 10                	je     c002372e <IDE::polling(unsigned char, unsigned int)+0x60>
c002371e:	84 c0                	test   al,al
c0023720:	78 d2                	js     c00236f4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023722:	a8 08                	test   al,0x8
c0023724:	74 ce                	je     c00236f4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023726:	31 c0                	xor    eax,eax
c0023728:	eb 06                	jmp    c0023730 <IDE::polling(unsigned char, unsigned int)+0x62>
c002372a:	b0 01                	mov    al,0x1
c002372c:	eb 02                	jmp    c0023730 <IDE::polling(unsigned char, unsigned int)+0x62>
c002372e:	b0 02                	mov    al,0x2
c0023730:	5b                   	pop    ebx
c0023731:	5e                   	pop    esi
c0023732:	5f                   	pop    edi
c0023733:	c3                   	ret    

c0023734 <SATABus::close(int, int, void*)>:
c0023734:	31 c0                	xor    eax,eax
c0023736:	c3                   	ret    
c0023737:	90                   	nop

c0023738 <SATABus::detect()>:
c0023738:	c3                   	ret    
c0023739:	90                   	nop

c002373a <SATABus::SATABus()>:
c002373a:	83 ec 0c             	sub    esp,0xc
c002373d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023741:	83 ec 08             	sub    esp,0x8
c0023744:	68 cc c6 02 c0       	push   0xc002c6cc
c0023749:	50                   	push   eax
c002374a:	e8 73 0b ff ff       	call   c00142c2 <HardDiskController::HardDiskController(char const*)>
c002374f:	83 c4 10             	add    esp,0x10
c0023752:	ba 88 c7 02 c0       	mov    edx,0xc002c788
c0023757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002375b:	89 10                	mov    DWORD PTR [eax],edx
c002375d:	83 ec 0c             	sub    esp,0xc
c0023760:	6a 50                	push   0x50
c0023762:	e8 3e c8 fe ff       	call   c000ffa5 <Phys::allocateContiguousPages(int)>
c0023767:	83 c4 10             	add    esp,0x10
c002376a:	89 c2                	mov    edx,eax
c002376c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023770:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023776:	83 ec 0c             	sub    esp,0xc
c0023779:	6a 50                	push   0x50
c002377b:	e8 9f e3 fe ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0023780:	83 c4 10             	add    esp,0x10
c0023783:	89 c2                	mov    edx,eax
c0023785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023789:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002378f:	e8 1b e5 fe ff       	call   c0011caf <Virt::getAKernelVAS()>
c0023794:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023798:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002379e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00237a2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00237a8:	83 ec 0c             	sub    esp,0xc
c00237ab:	6a 03                	push   0x3
c00237ad:	6a 50                	push   0x50
c00237af:	51                   	push   ecx
c00237b0:	52                   	push   edx
c00237b1:	50                   	push   eax
c00237b2:	e8 27 ed fe ff       	call   c00124de <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00237b7:	83 c4 20             	add    esp,0x20
c00237ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237be:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00237c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237c8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00237ce:	83 ec 04             	sub    esp,0x4
c00237d1:	52                   	push   edx
c00237d2:	50                   	push   eax
c00237d3:	68 f0 c6 02 c0       	push   0xc002c6f0
c00237d8:	e8 32 f3 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00237dd:	83 c4 10             	add    esp,0x10
c00237e0:	90                   	nop
c00237e1:	83 c4 0c             	add    esp,0xc
c00237e4:	c3                   	ret    
c00237e5:	90                   	nop

c00237e6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00237e6:	83 ec 0c             	sub    esp,0xc
c00237e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00237ed:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00237f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00237f3:	09 c2                	or     edx,eax
c00237f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00237ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023801:	31 c0                	xor    eax,eax
c0023803:	c1 e9 08             	shr    ecx,0x8
c0023806:	83 e1 0f             	and    ecx,0xf
c0023809:	39 c8                	cmp    eax,ecx
c002380b:	74 0a                	je     c0023817 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002380d:	f6 c2 01             	test   dl,0x1
c0023810:	74 18                	je     c002382a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023812:	d1 ea                	shr    edx,1
c0023814:	40                   	inc    eax
c0023815:	eb f2                	jmp    c0023809 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023817:	83 ec 0c             	sub    esp,0xc
c002381a:	68 14 c7 02 c0       	push   0xc002c714
c002381f:	e8 67 69 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0023824:	83 c4 10             	add    esp,0x10
c0023827:	83 c8 ff             	or     eax,0xffffffff
c002382a:	83 c4 0c             	add    esp,0xc
c002382d:	c3                   	ret    

c002382e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002382e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023832:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023835:	89 c2                	mov    edx,eax
c0023837:	c1 ea 08             	shr    edx,0x8
c002383a:	83 e2 0f             	and    edx,0xf
c002383d:	fe ca                	dec    dl
c002383f:	75 31                	jne    c0023872 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023841:	83 e0 0f             	and    eax,0xf
c0023844:	3c 03                	cmp    al,0x3
c0023846:	75 2a                	jne    c0023872 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023848:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002384b:	b8 02 00 00 00       	mov    eax,0x2
c0023850:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023856:	74 1c                	je     c0023874 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023858:	b8 04 00 00 00       	mov    eax,0x4
c002385d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023863:	74 0f                	je     c0023874 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023865:	31 c0                	xor    eax,eax
c0023867:	83 fa 03             	cmp    edx,0x3
c002386a:	0f 94 c0             	sete   al
c002386d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023871:	c3                   	ret    
c0023872:	31 c0                	xor    eax,eax
c0023874:	c3                   	ret    
c0023875:	90                   	nop

c0023876 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002387a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002387d:	0f ba e2 0f          	bt     edx,0xf
c0023881:	72 f7                	jb     c002387a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023883:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023886:	83 ca 10             	or     edx,0x10
c0023889:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002388c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002388f:	83 ca 01             	or     edx,0x1
c0023892:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023895:	c3                   	ret    

c0023896 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002389a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002389d:	83 e2 fe             	and    edx,0xfffffffe
c00238a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00238a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00238a6:	83 e2 ef             	and    edx,0xffffffef
c00238a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00238ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00238af:	0f ba e2 0e          	bt     edx,0xe
c00238b3:	72 f7                	jb     c00238ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00238b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00238b8:	0f ba e2 0f          	bt     edx,0xf
c00238bc:	72 ee                	jb     c00238ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00238be:	c3                   	ret    
c00238bf:	90                   	nop

c00238c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00238c0:	55                   	push   ebp
c00238c1:	57                   	push   edi
c00238c2:	56                   	push   esi
c00238c3:	53                   	push   ebx
c00238c4:	83 ec 1c             	sub    esp,0x1c
c00238c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00238cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00238cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00238d3:	53                   	push   ebx
c00238d4:	89 fd                	mov    ebp,edi
c00238d6:	56                   	push   esi
c00238d7:	c1 e5 0a             	shl    ebp,0xa
c00238da:	e8 b7 ff ff ff       	call   c0023896 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00238df:	83 ec 0c             	sub    esp,0xc
c00238e2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00238e8:	01 e8                	add    eax,ebp
c00238ea:	89 03                	mov    DWORD PTR [ebx],eax
c00238ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00238ee:	68 00 04 00 00       	push   0x400
c00238f3:	6a 00                	push   0x0
c00238f5:	50                   	push   eax
c00238f6:	e8 7d ce fd ff       	call   c0000778 <memset>
c00238fb:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023901:	89 fa                	mov    edx,edi
c0023903:	01 e8                	add    eax,ebp
c0023905:	c1 e7 0d             	shl    edi,0xd
c0023908:	89 03                	mov    DWORD PTR [ebx],eax
c002390a:	c1 e2 08             	shl    edx,0x8
c002390d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023914:	81 c2 00 80 00 00    	add    edx,0x8000
c002391a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002391e:	89 d0                	mov    eax,edx
c0023920:	83 c4 1c             	add    esp,0x1c
c0023923:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023929:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002392c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002392f:	68 00 01 00 00       	push   0x100
c0023934:	6a 00                	push   0x0
c0023936:	50                   	push   eax
c0023937:	e8 3c ce fd ff       	call   c0000778 <memset>
c002393c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023940:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023946:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002394c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023950:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023953:	83 c4 10             	add    esp,0x10
c0023956:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002395d:	31 ff                	xor    edi,edi
c002395f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023965:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002396b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002396f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023975:	83 c5 20             	add    ebp,0x20
c0023978:	01 f8                	add    eax,edi
c002397a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002397d:	52                   	push   edx
c002397e:	68 00 01 00 00       	push   0x100
c0023983:	6a 00                	push   0x0
c0023985:	50                   	push   eax
c0023986:	e8 ed cd fd ff       	call   c0000778 <memset>
c002398b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002398f:	83 c4 10             	add    esp,0x10
c0023992:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023998:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002399f:	01 f8                	add    eax,edi
c00239a1:	81 c7 00 01 00 00    	add    edi,0x100
c00239a7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00239aa:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00239b0:	75 b3                	jne    c0023965 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00239b2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00239b6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00239ba:	83 c4 1c             	add    esp,0x1c
c00239bd:	5b                   	pop    ebx
c00239be:	5e                   	pop    esi
c00239bf:	5f                   	pop    edi
c00239c0:	5d                   	pop    ebp
c00239c1:	e9 b0 fe ff ff       	jmp    c0023876 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00239c6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00239c6:	55                   	push   ebp
c00239c7:	57                   	push   edi
c00239c8:	56                   	push   esi
c00239c9:	53                   	push   ebx
c00239ca:	31 db                	xor    ebx,ebx
c00239cc:	83 ec 0c             	sub    esp,0xc
c00239cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00239d3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00239d7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00239da:	f7 c7 01 00 00 00    	test   edi,0x1
c00239e0:	0f 84 aa 00 00 00    	je     c0023a90 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00239e6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00239ea:	89 d8                	mov    eax,ebx
c00239ec:	c1 e0 07             	shl    eax,0x7
c00239ef:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00239f6:	55                   	push   ebp
c00239f7:	56                   	push   esi
c00239f8:	e8 31 fe ff ff       	call   c002382e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00239fd:	5a                   	pop    edx
c00239fe:	83 f8 01             	cmp    eax,0x1
c0023a01:	59                   	pop    ecx
c0023a02:	75 30                	jne    c0023a34 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023a04:	50                   	push   eax
c0023a05:	50                   	push   eax
c0023a06:	53                   	push   ebx
c0023a07:	68 39 c7 02 c0       	push   0xc002c739
c0023a0c:	e8 fe f0 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023a11:	83 c4 0c             	add    esp,0xc
c0023a14:	53                   	push   ebx
c0023a15:	55                   	push   ebp
c0023a16:	56                   	push   esi
c0023a17:	e8 a4 fe ff ff       	call   c00238c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023a1c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023a23:	e8 18 be fe ff       	call   c000f840 <malloc>
c0023a28:	89 c5                	mov    ebp,eax
c0023a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a2d:	e8 60 0d 00 00       	call   c0024792 <SATA::SATA()>
c0023a32:	eb 33                	jmp    c0023a67 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023a34:	83 f8 04             	cmp    eax,0x4
c0023a37:	75 47                	jne    c0023a80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023a39:	50                   	push   eax
c0023a3a:	50                   	push   eax
c0023a3b:	53                   	push   ebx
c0023a3c:	68 50 c7 02 c0       	push   0xc002c750
c0023a41:	e8 c9 f0 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023a46:	83 c4 0c             	add    esp,0xc
c0023a49:	53                   	push   ebx
c0023a4a:	55                   	push   ebp
c0023a4b:	56                   	push   esi
c0023a4c:	e8 6f fe ff ff       	call   c00238c0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023a51:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a58:	e8 e3 bd fe ff       	call   c000f840 <malloc>
c0023a5d:	89 c5                	mov    ebp,eax
c0023a5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a62:	e8 d7 10 00 00       	call   c0024b3e <SATAPI::SATAPI()>
c0023a67:	5a                   	pop    edx
c0023a68:	59                   	pop    ecx
c0023a69:	55                   	push   ebp
c0023a6a:	56                   	push   esi
c0023a6b:	e8 c6 04 ff ff       	call   c0013f36 <Device::addChild(Device*)>
c0023a70:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023a73:	56                   	push   esi
c0023a74:	6a 00                	push   0x0
c0023a76:	53                   	push   ebx
c0023a77:	55                   	push   ebp
c0023a78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a7b:	83 c4 20             	add    esp,0x20
c0023a7e:	eb 10                	jmp    c0023a90 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023a80:	50                   	push   eax
c0023a81:	50                   	push   eax
c0023a82:	53                   	push   ebx
c0023a83:	68 69 c7 02 c0       	push   0xc002c769
c0023a88:	e8 82 f0 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023a8d:	83 c4 10             	add    esp,0x10
c0023a90:	d1 ef                	shr    edi,1
c0023a92:	43                   	inc    ebx
c0023a93:	83 fb 20             	cmp    ebx,0x20
c0023a96:	0f 85 3e ff ff ff    	jne    c00239da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023a9c:	83 c4 0c             	add    esp,0xc
c0023a9f:	5b                   	pop    ebx
c0023aa0:	5e                   	pop    esi
c0023aa1:	5f                   	pop    edi
c0023aa2:	5d                   	pop    ebp
c0023aa3:	c3                   	ret    

c0023aa4 <SATABus::open(int, int, void*)>:
c0023aa4:	83 ec 14             	sub    esp,0x14
c0023aa7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023aab:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023ab1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023ab7:	52                   	push   edx
c0023ab8:	50                   	push   eax
c0023ab9:	e8 08 ff ff ff       	call   c00239c6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023abe:	31 c0                	xor    eax,eax
c0023ac0:	83 c4 1c             	add    esp,0x1c
c0023ac3:	c3                   	ret    

c0023ac4 <ATA::close(int, int, void*)>:
c0023ac4:	83 ec 0c             	sub    esp,0xc
c0023ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023acb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023ad1:	85 c0                	test   eax,eax
c0023ad3:	74 0c                	je     c0023ae1 <ATA::close(int, int, void*)+0x1d>
c0023ad5:	83 ec 0c             	sub    esp,0xc
c0023ad8:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ada:	50                   	push   eax
c0023adb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023ade:	83 c4 10             	add    esp,0x10
c0023ae1:	31 c0                	xor    eax,eax
c0023ae3:	83 c4 0c             	add    esp,0xc
c0023ae6:	c3                   	ret    
c0023ae7:	90                   	nop

c0023ae8 <ATA::powerSaving(PowerSavingLevel)>:
c0023ae8:	c3                   	ret    
c0023ae9:	90                   	nop

c0023aea <ATA::ATA()>:
c0023aea:	83 ec 0c             	sub    esp,0xc
c0023aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023af1:	83 ec 04             	sub    esp,0x4
c0023af4:	68 00 02 00 00       	push   0x200
c0023af9:	68 51 c8 02 c0       	push   0xc002c851
c0023afe:	50                   	push   eax
c0023aff:	e8 56 08 ff ff       	call   c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023b04:	83 c4 10             	add    esp,0x10
c0023b07:	ba d4 c7 02 c0       	mov    edx,0xc002c7d4
c0023b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b10:	89 10                	mov    DWORD PTR [eax],edx
c0023b12:	90                   	nop
c0023b13:	83 c4 0c             	add    esp,0xc
c0023b16:	c3                   	ret    
c0023b17:	90                   	nop

c0023b18 <ATA::flush(bool)>:
c0023b18:	53                   	push   ebx
c0023b19:	83 ec 08             	sub    esp,0x8
c0023b1c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023b21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023b25:	19 c0                	sbb    eax,eax
c0023b27:	83 e0 fd             	and    eax,0xfffffffd
c0023b2a:	05 ea 00 00 00       	add    eax,0xea
c0023b2f:	50                   	push   eax
c0023b30:	6a 07                	push   0x7
c0023b32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b39:	50                   	push   eax
c0023b3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b40:	e8 dd ef ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b45:	83 c4 0c             	add    esp,0xc
c0023b48:	6a 00                	push   0x0
c0023b4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b51:	50                   	push   eax
c0023b52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b58:	e8 71 fb ff ff       	call   c00236ce <IDE::polling(unsigned char, unsigned int)>
c0023b5d:	83 c4 18             	add    esp,0x18
c0023b60:	5b                   	pop    ebx
c0023b61:	c3                   	ret    

c0023b62 <ATA::readyForCommand()>:
c0023b62:	56                   	push   esi
c0023b63:	53                   	push   ebx
c0023b64:	31 db                	xor    ebx,ebx
c0023b66:	50                   	push   eax
c0023b67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023b6b:	50                   	push   eax
c0023b6c:	6a 0c                	push   0xc
c0023b6e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023b75:	50                   	push   eax
c0023b76:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023b7c:	e8 61 f0 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0023b81:	83 c4 10             	add    esp,0x10
c0023b84:	a8 88                	test   al,0x88
c0023b86:	74 23                	je     c0023bab <ATA::readyForCommand()+0x49>
c0023b88:	43                   	inc    ebx
c0023b89:	83 fb 63             	cmp    ebx,0x63
c0023b8c:	7e dd                	jle    c0023b6b <ATA::readyForCommand()+0x9>
c0023b8e:	51                   	push   ecx
c0023b8f:	51                   	push   ecx
c0023b90:	6a 00                	push   0x0
c0023b92:	68 40 42 0f 00       	push   0xf4240
c0023b97:	e8 3a a2 ff ff       	call   c001ddd6 <nanoSleep(unsigned long long)>
c0023b9c:	83 c4 10             	add    esp,0x10
c0023b9f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023ba5:	75 c4                	jne    c0023b6b <ATA::readyForCommand()+0x9>
c0023ba7:	31 c0                	xor    eax,eax
c0023ba9:	eb 02                	jmp    c0023bad <ATA::readyForCommand()+0x4b>
c0023bab:	b0 01                	mov    al,0x1
c0023bad:	5a                   	pop    edx
c0023bae:	5b                   	pop    ebx
c0023baf:	5e                   	pop    esi
c0023bb0:	c3                   	ret    
c0023bb1:	90                   	nop

c0023bb2 <ATA::access(unsigned long long, int, void*, bool)>:
c0023bb2:	55                   	push   ebp
c0023bb3:	57                   	push   edi
c0023bb4:	56                   	push   esi
c0023bb5:	53                   	push   ebx
c0023bb6:	83 ec 2c             	sub    esp,0x2c
c0023bb9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023bbd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023bc1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023bc5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023bc9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023bcd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023bd1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023bd5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023bdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023bdf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023be5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023be9:	c1 e0 06             	shl    eax,0x6
c0023bec:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023bf4:	74 5d                	je     c0023c53 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023bf6:	89 fa                	mov    edx,edi
c0023bf8:	89 f0                	mov    eax,esi
c0023bfa:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023bfe:	c1 ea 1c             	shr    edx,0x1c
c0023c01:	89 d1                	mov    ecx,edx
c0023c03:	09 c1                	or     ecx,eax
c0023c05:	74 25                	je     c0023c2c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023c07:	31 ed                	xor    ebp,ebp
c0023c09:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023c10:	89 fa                	mov    edx,edi
c0023c12:	89 f0                	mov    eax,esi
c0023c14:	0f ad d0             	shrd   eax,edx,cl
c0023c17:	d3 ea                	shr    edx,cl
c0023c19:	f6 c1 20             	test   cl,0x20
c0023c1c:	74 02                	je     c0023c20 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023c1e:	89 d0                	mov    eax,edx
c0023c20:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023c24:	45                   	inc    ebp
c0023c25:	83 fd 06             	cmp    ebp,0x6
c0023c28:	75 df                	jne    c0023c09 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023c2a:	eb 76                	jmp    c0023ca2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023c2c:	89 f0                	mov    eax,esi
c0023c2e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023c33:	89 fa                	mov    edx,edi
c0023c35:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023c3c:	0f ac d0 10          	shrd   eax,edx,0x10
c0023c40:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023c45:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023c49:	c1 ee 18             	shr    esi,0x18
c0023c4c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023c51:	eb 56                	jmp    c0023ca9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023c53:	6a 00                	push   0x0
c0023c55:	6a 3f                	push   0x3f
c0023c57:	57                   	push   edi
c0023c58:	56                   	push   esi
c0023c59:	e8 8e 29 00 00       	call   c00265ec <__umoddi3>
c0023c5e:	83 c4 10             	add    esp,0x10
c0023c61:	40                   	inc    eax
c0023c62:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023c66:	6a 00                	push   0x0
c0023c68:	68 f0 03 00 00       	push   0x3f0
c0023c6d:	57                   	push   edi
c0023c6e:	56                   	push   esi
c0023c6f:	e8 78 28 00 00       	call   c00264ec <__udivdi3>
c0023c74:	83 c4 10             	add    esp,0x10
c0023c77:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023c7c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023c83:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023c88:	6a 00                	push   0x0
c0023c8a:	6a 3f                	push   0x3f
c0023c8c:	57                   	push   edi
c0023c8d:	56                   	push   esi
c0023c8e:	e8 59 28 00 00       	call   c00264ec <__udivdi3>
c0023c93:	83 c4 10             	add    esp,0x10
c0023c96:	89 c6                	mov    esi,eax
c0023c98:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023c9d:	83 e6 0f             	and    esi,0xf
c0023ca0:	eb 07                	jmp    c0023ca9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ca2:	31 f6                	xor    esi,esi
c0023ca4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023ca9:	bf 01 00 00 00       	mov    edi,0x1
c0023cae:	50                   	push   eax
c0023caf:	6a 00                	push   0x0
c0023cb1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cb8:	50                   	push   eax
c0023cb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023cbd:	e8 6c f0 ff ff       	call   c0022d2e <IDE::enableIRQs(unsigned char, bool)>
c0023cc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023cc5:	e8 98 fe ff ff       	call   c0023b62 <ATA::readyForCommand()>
c0023cca:	83 c4 10             	add    esp,0x10
c0023ccd:	84 c0                	test   al,al
c0023ccf:	0f 84 5a 02 00 00    	je     c0023f2f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023cd5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023cdb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023ce1:	c1 e0 04             	shl    eax,0x4
c0023ce4:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023ceb:	09 c6                	or     esi,eax
c0023ced:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023cf2:	75 05                	jne    c0023cf9 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023cf4:	83 ce a0             	or     esi,0xffffffa0
c0023cf7:	eb 03                	jmp    c0023cfc <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023cf9:	83 ce e0             	or     esi,0xffffffe0
c0023cfc:	89 f0                	mov    eax,esi
c0023cfe:	0f b6 f0             	movzx  esi,al
c0023d01:	56                   	push   esi
c0023d02:	6a 06                	push   0x6
c0023d04:	51                   	push   ecx
c0023d05:	52                   	push   edx
c0023d06:	e8 17 ee ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d0b:	83 c4 10             	add    esp,0x10
c0023d0e:	6a 00                	push   0x0
c0023d10:	6a 01                	push   0x1
c0023d12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d19:	50                   	push   eax
c0023d1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d20:	e8 fd ed ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d25:	83 c4 10             	add    esp,0x10
c0023d28:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023d2d:	75 6e                	jne    c0023d9d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023d2f:	6a 00                	push   0x0
c0023d31:	6a 08                	push   0x8
c0023d33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d3a:	50                   	push   eax
c0023d3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d41:	e8 dc ed ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d46:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023d4b:	50                   	push   eax
c0023d4c:	6a 09                	push   0x9
c0023d4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d55:	50                   	push   eax
c0023d56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d5c:	e8 c1 ed ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d61:	83 c4 20             	add    esp,0x20
c0023d64:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023d69:	50                   	push   eax
c0023d6a:	6a 0a                	push   0xa
c0023d6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d73:	50                   	push   eax
c0023d74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d7a:	e8 a3 ed ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d7f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023d84:	50                   	push   eax
c0023d85:	6a 0b                	push   0xb
c0023d87:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d8e:	50                   	push   eax
c0023d8f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d95:	e8 88 ed ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d9a:	83 c4 20             	add    esp,0x20
c0023d9d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023da2:	50                   	push   eax
c0023da3:	6a 02                	push   0x2
c0023da5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dac:	50                   	push   eax
c0023dad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023db3:	e8 6a ed ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023db8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023dbd:	50                   	push   eax
c0023dbe:	6a 03                	push   0x3
c0023dc0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dc7:	50                   	push   eax
c0023dc8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dce:	e8 4f ed ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dd3:	83 c4 20             	add    esp,0x20
c0023dd6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023ddb:	50                   	push   eax
c0023ddc:	6a 04                	push   0x4
c0023dde:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023de5:	50                   	push   eax
c0023de6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dec:	e8 31 ed ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023df1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023df6:	50                   	push   eax
c0023df7:	6a 05                	push   0x5
c0023df9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e00:	50                   	push   eax
c0023e01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e07:	e8 16 ed ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e0c:	83 c4 20             	add    esp,0x20
c0023e0f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023e14:	0f 94 c0             	sete   al
c0023e17:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023e1c:	74 09                	je     c0023e27 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023e1e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023e25:	eb 07                	jmp    c0023e2e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023e27:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023e2e:	0f b6 c0             	movzx  eax,al
c0023e31:	50                   	push   eax
c0023e32:	6a 07                	push   0x7
c0023e34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e3b:	50                   	push   eax
c0023e3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e42:	e8 db ec ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e47:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023e4b:	83 c4 10             	add    esp,0x10
c0023e4e:	85 f6                	test   esi,esi
c0023e50:	0f 84 ba 00 00 00    	je     c0023f10 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023e56:	50                   	push   eax
c0023e57:	6a 01                	push   0x1
c0023e59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e60:	50                   	push   eax
c0023e61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e67:	e8 62 f8 ff ff       	call   c00236ce <IDE::polling(unsigned char, unsigned int)>
c0023e6c:	83 c4 10             	add    esp,0x10
c0023e6f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023e75:	84 c0                	test   al,al
c0023e77:	74 2c                	je     c0023ea5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023e79:	0f b6 f8             	movzx  edi,al
c0023e7c:	0f b6 d2             	movzx  edx,dl
c0023e7f:	57                   	push   edi
c0023e80:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023e87:	50                   	push   eax
c0023e88:	52                   	push   edx
c0023e89:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e8f:	e8 a4 f6 ff ff       	call   c0023538 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023e94:	c7 04 24 ac c7 02 c0 	mov    DWORD PTR [esp],0xc002c7ac
c0023e9b:	e8 6f ec fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0023ea0:	e9 87 00 00 00       	jmp    c0023f2c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023ea5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023eaa:	74 33                	je     c0023edf <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023eac:	31 ed                	xor    ebp,ebp
c0023eae:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023eb2:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023eb6:	50                   	push   eax
c0023eb7:	50                   	push   eax
c0023eb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ebf:	50                   	push   eax
c0023ec0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ec6:	e8 45 ec ff ff       	call   c0022b10 <IDE::getBase(unsigned char)>
c0023ecb:	89 c2                	mov    edx,eax
c0023ecd:	89 f8                	mov    eax,edi
c0023ecf:	66 ef                	out    dx,ax
c0023ed1:	45                   	inc    ebp
c0023ed2:	83 c4 10             	add    esp,0x10
c0023ed5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023edb:	75 d1                	jne    c0023eae <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023edd:	eb 23                	jmp    c0023f02 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023edf:	0f b6 d2             	movzx  edx,dl
c0023ee2:	51                   	push   ecx
c0023ee3:	51                   	push   ecx
c0023ee4:	52                   	push   edx
c0023ee5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eeb:	e8 20 ec ff ff       	call   c0022b10 <IDE::getBase(unsigned char)>
c0023ef0:	b9 00 01 00 00       	mov    ecx,0x100
c0023ef5:	89 c2                	mov    edx,eax
c0023ef7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023efb:	fc                   	cld    
c0023efc:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023eff:	83 c4 10             	add    esp,0x10
c0023f02:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023f0a:	4e                   	dec    esi
c0023f0b:	e9 3e ff ff ff       	jmp    c0023e4e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0023f10:	31 ff                	xor    edi,edi
c0023f12:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023f17:	74 16                	je     c0023f2f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f19:	50                   	push   eax
c0023f1a:	50                   	push   eax
c0023f1b:	31 c0                	xor    eax,eax
c0023f1d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023f22:	0f 94 c0             	sete   al
c0023f25:	50                   	push   eax
c0023f26:	53                   	push   ebx
c0023f27:	e8 ec fb ff ff       	call   c0023b18 <ATA::flush(bool)>
c0023f2c:	83 c4 10             	add    esp,0x10
c0023f2f:	83 c4 2c             	add    esp,0x2c
c0023f32:	89 f8                	mov    eax,edi
c0023f34:	5b                   	pop    ebx
c0023f35:	5e                   	pop    esi
c0023f36:	5f                   	pop    edi
c0023f37:	5d                   	pop    ebp
c0023f38:	c3                   	ret    
c0023f39:	90                   	nop

c0023f3a <ATA::read(unsigned long long, int, void*)>:
c0023f3a:	57                   	push   edi
c0023f3b:	b8 04 00 00 00       	mov    eax,0x4
c0023f40:	56                   	push   esi
c0023f41:	53                   	push   ebx
c0023f42:	83 ec 10             	sub    esp,0x10
c0023f45:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023f49:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023f4d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023f50:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023f54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023f58:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023f5e:	77 3b                	ja     c0023f9b <ATA::read(unsigned long long, int, void*)+0x61>
c0023f60:	b8 06 00 00 00       	mov    eax,0x6
c0023f65:	85 d2                	test   edx,edx
c0023f67:	74 32                	je     c0023f9b <ATA::read(unsigned long long, int, void*)+0x61>
c0023f69:	50                   	push   eax
c0023f6a:	50                   	push   eax
c0023f6b:	6a 00                	push   0x0
c0023f6d:	52                   	push   edx
c0023f6e:	53                   	push   ebx
c0023f6f:	57                   	push   edi
c0023f70:	56                   	push   esi
c0023f71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023f75:	e8 38 fc ff ff       	call   c0023bb2 <ATA::access(unsigned long long, int, void*, bool)>
c0023f7a:	83 c4 20             	add    esp,0x20
c0023f7d:	85 c0                	test   eax,eax
c0023f7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f83:	75 11                	jne    c0023f96 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023f85:	01 1d 68 22 03 c0    	add    DWORD PTR ds:0xc0032268,ebx
c0023f8b:	e8 e4 c9 fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0023f90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f94:	eb 05                	jmp    c0023f9b <ATA::read(unsigned long long, int, void*)+0x61>
c0023f96:	b8 01 00 00 00       	mov    eax,0x1
c0023f9b:	83 c4 10             	add    esp,0x10
c0023f9e:	5b                   	pop    ebx
c0023f9f:	5e                   	pop    esi
c0023fa0:	5f                   	pop    edi
c0023fa1:	c3                   	ret    

c0023fa2 <ATA::write(unsigned long long, int, void*)>:
c0023fa2:	57                   	push   edi
c0023fa3:	b8 04 00 00 00       	mov    eax,0x4
c0023fa8:	56                   	push   esi
c0023fa9:	53                   	push   ebx
c0023faa:	83 ec 10             	sub    esp,0x10
c0023fad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023fb1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023fb5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023fb8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023fbc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023fc0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023fc6:	77 3b                	ja     c0024003 <ATA::write(unsigned long long, int, void*)+0x61>
c0023fc8:	b8 06 00 00 00       	mov    eax,0x6
c0023fcd:	85 d2                	test   edx,edx
c0023fcf:	74 32                	je     c0024003 <ATA::write(unsigned long long, int, void*)+0x61>
c0023fd1:	50                   	push   eax
c0023fd2:	50                   	push   eax
c0023fd3:	6a 01                	push   0x1
c0023fd5:	52                   	push   edx
c0023fd6:	53                   	push   ebx
c0023fd7:	57                   	push   edi
c0023fd8:	56                   	push   esi
c0023fd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023fdd:	e8 d0 fb ff ff       	call   c0023bb2 <ATA::access(unsigned long long, int, void*, bool)>
c0023fe2:	83 c4 20             	add    esp,0x20
c0023fe5:	85 c0                	test   eax,eax
c0023fe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023feb:	75 11                	jne    c0023ffe <ATA::write(unsigned long long, int, void*)+0x5c>
c0023fed:	01 1d 64 22 03 c0    	add    DWORD PTR ds:0xc0032264,ebx
c0023ff3:	e8 7c c9 fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0023ff8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ffc:	eb 05                	jmp    c0024003 <ATA::write(unsigned long long, int, void*)+0x61>
c0023ffe:	b8 01 00 00 00       	mov    eax,0x1
c0024003:	83 c4 10             	add    esp,0x10
c0024006:	5b                   	pop    ebx
c0024007:	5e                   	pop    esi
c0024008:	5f                   	pop    edi
c0024009:	c3                   	ret    

c002400a <ATA::detectCHS()>:
c002400a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002400e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024014:	c1 e0 06             	shl    eax,0x6
c0024017:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002401d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024027:	c7 44 24 04 b7 c7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c7b7
c002402f:	e9 57 61 ff ff       	jmp    c001a18b <Krnl::panic(char const*)>

c0024034 <ATA::open(int, int, void*)>:
c0024034:	53                   	push   ebx
c0024035:	83 ec 08             	sub    esp,0x8
c0024038:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002403c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024040:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024044:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002404a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024050:	c1 e0 06             	shl    eax,0x6
c0024053:	01 d0                	add    eax,edx
c0024055:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002405c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024062:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024069:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024073:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024079:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024080:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024087:	75 0c                	jne    c0024095 <ATA::open(int, int, void*)+0x61>
c0024089:	83 ec 0c             	sub    esp,0xc
c002408c:	53                   	push   ebx
c002408d:	e8 78 ff ff ff       	call   c002400a <ATA::detectCHS()>
c0024092:	83 c4 10             	add    esp,0x10
c0024095:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002409b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240a1:	c1 e0 06             	shl    eax,0x6
c00240a4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00240ab:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00240b5:	d1 e8                	shr    eax,1
c00240b7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00240bd:	6a 04                	push   0x4
c00240bf:	6a 0c                	push   0xc
c00240c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c8:	50                   	push   eax
c00240c9:	52                   	push   edx
c00240ca:	e8 53 ea ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240cf:	90                   	nop
c00240d0:	90                   	nop
c00240d1:	6a 00                	push   0x0
c00240d3:	6a 0c                	push   0xc
c00240d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240dc:	50                   	push   eax
c00240dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e3:	e8 3a ea ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240e8:	83 c4 14             	add    esp,0x14
c00240eb:	53                   	push   ebx
c00240ec:	e8 d1 02 ff ff       	call   c00143c2 <PhysicalDisk::startCache()>
c00240f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00240f4:	e8 19 24 ff ff       	call   c0016512 <createPartitionsForDisk(PhysicalDisk*)>
c00240f9:	31 c0                	xor    eax,eax
c00240fb:	83 c4 18             	add    esp,0x18
c00240fe:	5b                   	pop    ebx
c00240ff:	c3                   	ret    

c0024100 <ATAPI::write(unsigned long long, int, void*)>:
c0024100:	b8 03 00 00 00       	mov    eax,0x3
c0024105:	c3                   	ret    

c0024106 <ATAPI::close(int, int, void*)>:
c0024106:	83 ec 0c             	sub    esp,0xc
c0024109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002410d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024113:	85 c0                	test   eax,eax
c0024115:	74 0c                	je     c0024123 <ATAPI::close(int, int, void*)+0x1d>
c0024117:	83 ec 0c             	sub    esp,0xc
c002411a:	8b 10                	mov    edx,DWORD PTR [eax]
c002411c:	50                   	push   eax
c002411d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024120:	83 c4 10             	add    esp,0x10
c0024123:	31 c0                	xor    eax,eax
c0024125:	83 c4 0c             	add    esp,0xc
c0024128:	c3                   	ret    
c0024129:	90                   	nop

c002412a <ATAPI::ATAPI()>:
c002412a:	83 ec 0c             	sub    esp,0xc
c002412d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024131:	83 ec 04             	sub    esp,0x4
c0024134:	68 00 08 00 00       	push   0x800
c0024139:	68 f1 c8 02 c0       	push   0xc002c8f1
c002413e:	50                   	push   eax
c002413f:	e8 16 02 ff ff       	call   c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024144:	83 c4 10             	add    esp,0x10
c0024147:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c002414c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024150:	89 10                	mov    DWORD PTR [eax],edx
c0024152:	90                   	nop
c0024153:	83 c4 0c             	add    esp,0xc
c0024156:	c3                   	ret    
c0024157:	90                   	nop

c0024158 <ATAPI::readyForCommand()>:
c0024158:	56                   	push   esi
c0024159:	53                   	push   ebx
c002415a:	31 db                	xor    ebx,ebx
c002415c:	50                   	push   eax
c002415d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024161:	50                   	push   eax
c0024162:	6a 0c                	push   0xc
c0024164:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002416b:	50                   	push   eax
c002416c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024172:	e8 6b ea ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0024177:	83 c4 10             	add    esp,0x10
c002417a:	a8 88                	test   al,0x88
c002417c:	74 23                	je     c00241a1 <ATAPI::readyForCommand()+0x49>
c002417e:	43                   	inc    ebx
c002417f:	83 fb 63             	cmp    ebx,0x63
c0024182:	7e dd                	jle    c0024161 <ATAPI::readyForCommand()+0x9>
c0024184:	51                   	push   ecx
c0024185:	51                   	push   ecx
c0024186:	6a 00                	push   0x0
c0024188:	68 40 42 0f 00       	push   0xf4240
c002418d:	e8 44 9c ff ff       	call   c001ddd6 <nanoSleep(unsigned long long)>
c0024192:	83 c4 10             	add    esp,0x10
c0024195:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002419b:	75 c4                	jne    c0024161 <ATAPI::readyForCommand()+0x9>
c002419d:	31 c0                	xor    eax,eax
c002419f:	eb 02                	jmp    c00241a3 <ATAPI::readyForCommand()+0x4b>
c00241a1:	b0 01                	mov    al,0x1
c00241a3:	5a                   	pop    edx
c00241a4:	5b                   	pop    ebx
c00241a5:	5e                   	pop    esi
c00241a6:	c3                   	ret    
c00241a7:	90                   	nop

c00241a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00241a8:	55                   	push   ebp
c00241a9:	57                   	push   edi
c00241aa:	56                   	push   esi
c00241ab:	53                   	push   ebx
c00241ac:	83 ec 20             	sub    esp,0x20
c00241af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00241b3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00241b7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00241bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00241bf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00241c3:	6a 01                	push   0x1
c00241c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00241cc:	50                   	push   eax
c00241cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241d3:	e8 56 eb ff ff       	call   c0022d2e <IDE::enableIRQs(unsigned char, bool)>
c00241d8:	5e                   	pop    esi
c00241d9:	58                   	pop    eax
c00241da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00241e1:	50                   	push   eax
c00241e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241e8:	e8 0f e9 ff ff       	call   c0022afc <IDE::prepareInterrupt(unsigned char)>
c00241ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00241f0:	e8 63 ff ff ff       	call   c0024158 <ATAPI::readyForCommand()>
c00241f5:	83 c4 10             	add    esp,0x10
c00241f8:	84 c0                	test   al,al
c00241fa:	75 0a                	jne    c0024206 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00241fc:	bb 01 00 00 00       	mov    ebx,0x1
c0024201:	e9 57 02 00 00       	jmp    c002445d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024206:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002420c:	c1 e0 04             	shl    eax,0x4
c002420f:	0f b6 c0             	movzx  eax,al
c0024212:	50                   	push   eax
c0024213:	6a 06                	push   0x6
c0024215:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002421c:	50                   	push   eax
c002421d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024223:	e8 fa e8 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024228:	6a 00                	push   0x0
c002422a:	6a 01                	push   0x1
c002422c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024233:	50                   	push   eax
c0024234:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002423a:	e8 e3 e8 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002423f:	83 c4 20             	add    esp,0x20
c0024242:	0f b6 c3             	movzx  eax,bl
c0024245:	0f b6 df             	movzx  ebx,bh
c0024248:	50                   	push   eax
c0024249:	6a 04                	push   0x4
c002424b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024252:	50                   	push   eax
c0024253:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024259:	e8 c4 e8 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002425e:	53                   	push   ebx
c002425f:	6a 05                	push   0x5
c0024261:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024268:	50                   	push   eax
c0024269:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002426f:	e8 ae e8 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024274:	83 c4 20             	add    esp,0x20
c0024277:	68 a0 00 00 00       	push   0xa0
c002427c:	6a 07                	push   0x7
c002427e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024285:	50                   	push   eax
c0024286:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002428c:	e8 91 e8 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024291:	83 c4 0c             	add    esp,0xc
c0024294:	6a 01                	push   0x1
c0024296:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002429d:	50                   	push   eax
c002429e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242a4:	e8 25 f4 ff ff       	call   c00236ce <IDE::polling(unsigned char, unsigned int)>
c00242a9:	83 c4 10             	add    esp,0x10
c00242ac:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00242b2:	84 c0                	test   al,al
c00242b4:	74 23                	je     c00242d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00242b6:	0f b6 d8             	movzx  ebx,al
c00242b9:	0f b6 d2             	movzx  edx,dl
c00242bc:	53                   	push   ebx
c00242bd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00242c4:	50                   	push   eax
c00242c5:	52                   	push   edx
c00242c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242cc:	e8 67 f2 ff ff       	call   c0023538 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00242d1:	83 c4 10             	add    esp,0x10
c00242d4:	e9 84 01 00 00       	jmp    c002445d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00242d9:	0f b6 d2             	movzx  edx,dl
c00242dc:	53                   	push   ebx
c00242dd:	53                   	push   ebx
c00242de:	52                   	push   edx
c00242df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242e5:	e8 26 e8 ff ff       	call   c0022b10 <IDE::getBase(unsigned char)>
c00242ea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00242ee:	b9 06 00 00 00       	mov    ecx,0x6
c00242f3:	89 c2                	mov    edx,eax
c00242f5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00242f8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00242fc:	83 c4 10             	add    esp,0x10
c00242ff:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024305:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002430c:	85 db                	test   ebx,ebx
c002430e:	0f 84 ec 00 00 00    	je     c0024400 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024314:	51                   	push   ecx
c0024315:	51                   	push   ecx
c0024316:	52                   	push   edx
c0024317:	50                   	push   eax
c0024318:	e8 73 e9 ff ff       	call   c0022c90 <IDE::waitInterrupt(unsigned char)>
c002431d:	83 c4 10             	add    esp,0x10
c0024320:	84 c0                	test   al,al
c0024322:	0f 84 d4 fe ff ff    	je     c00241fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024328:	56                   	push   esi
c0024329:	56                   	push   esi
c002432a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024331:	50                   	push   eax
c0024332:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024338:	e8 bf e7 ff ff       	call   c0022afc <IDE::prepareInterrupt(unsigned char)>
c002433d:	83 c4 0c             	add    esp,0xc
c0024340:	6a 04                	push   0x4
c0024342:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024349:	50                   	push   eax
c002434a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024350:	e8 8d e8 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c0024355:	83 c4 0c             	add    esp,0xc
c0024358:	89 c6                	mov    esi,eax
c002435a:	6a 05                	push   0x5
c002435c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024363:	50                   	push   eax
c0024364:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002436a:	e8 73 e8 ff ff       	call   c0022be2 <IDE::read(unsigned char, unsigned char)>
c002436f:	89 f1                	mov    ecx,esi
c0024371:	0f b6 c0             	movzx  eax,al
c0024374:	0f b6 f1             	movzx  esi,cl
c0024377:	c1 e0 08             	shl    eax,0x8
c002437a:	09 c6                	or     esi,eax
c002437c:	d1 fe                	sar    esi,1
c002437e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024382:	83 c4 10             	add    esp,0x10
c0024385:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002438a:	74 41                	je     c00243cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002438c:	31 c9                	xor    ecx,ecx
c002438e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024394:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002439b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002439f:	75 0a                	jne    c00243ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00243a1:	01 c9                	add    ecx,ecx
c00243a3:	01 cd                	add    ebp,ecx
c00243a5:	4b                   	dec    ebx
c00243a6:	e9 54 ff ff ff       	jmp    c00242ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00243ab:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00243b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00243b4:	51                   	push   ecx
c00243b5:	51                   	push   ecx
c00243b6:	52                   	push   edx
c00243b7:	50                   	push   eax
c00243b8:	e8 53 e7 ff ff       	call   c0022b10 <IDE::getBase(unsigned char)>
c00243bd:	89 c2                	mov    edx,eax
c00243bf:	89 f0                	mov    eax,esi
c00243c1:	66 ef                	out    dx,ax
c00243c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00243c7:	83 c4 10             	add    esp,0x10
c00243ca:	41                   	inc    ecx
c00243cb:	eb c1                	jmp    c002438e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00243cd:	31 f6                	xor    esi,esi
c00243cf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00243d5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00243dc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00243e0:	75 06                	jne    c00243e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00243e2:	01 f6                	add    esi,esi
c00243e4:	01 f5                	add    ebp,esi
c00243e6:	eb bd                	jmp    c00243a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00243e8:	51                   	push   ecx
c00243e9:	51                   	push   ecx
c00243ea:	52                   	push   edx
c00243eb:	50                   	push   eax
c00243ec:	e8 1f e7 ff ff       	call   c0022b10 <IDE::getBase(unsigned char)>
c00243f1:	89 c2                	mov    edx,eax
c00243f3:	66 ed                	in     ax,dx
c00243f5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00243fa:	83 c4 10             	add    esp,0x10
c00243fd:	46                   	inc    esi
c00243fe:	eb cf                	jmp    c00243cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024400:	51                   	push   ecx
c0024401:	51                   	push   ecx
c0024402:	52                   	push   edx
c0024403:	50                   	push   eax
c0024404:	e8 87 e8 ff ff       	call   c0022c90 <IDE::waitInterrupt(unsigned char)>
c0024409:	83 c4 10             	add    esp,0x10
c002440c:	84 c0                	test   al,al
c002440e:	0f 84 e8 fd ff ff    	je     c00241fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024414:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024419:	52                   	push   edx
c002441a:	52                   	push   edx
c002441b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024422:	50                   	push   eax
c0024423:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024429:	e8 ce e6 ff ff       	call   c0022afc <IDE::prepareInterrupt(unsigned char)>
c002442e:	83 c4 10             	add    esp,0x10
c0024431:	50                   	push   eax
c0024432:	50                   	push   eax
c0024433:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002443a:	50                   	push   eax
c002443b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024441:	e8 ca e6 ff ff       	call   c0022b10 <IDE::getBase(unsigned char)>
c0024446:	8d 50 07             	lea    edx,[eax+0x7]
c0024449:	ec                   	in     al,dx
c002444a:	83 c4 10             	add    esp,0x10
c002444d:	a8 88                	test   al,0x88
c002444f:	74 0a                	je     c002445b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024451:	4b                   	dec    ebx
c0024452:	75 dd                	jne    c0024431 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024454:	bb 02 00 00 00       	mov    ebx,0x2
c0024459:	eb 02                	jmp    c002445d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002445b:	31 db                	xor    ebx,ebx
c002445d:	83 c4 1c             	add    esp,0x1c
c0024460:	89 d8                	mov    eax,ebx
c0024462:	5b                   	pop    ebx
c0024463:	5e                   	pop    esi
c0024464:	5f                   	pop    edi
c0024465:	5d                   	pop    ebp
c0024466:	c3                   	ret    
c0024467:	90                   	nop

c0024468 <ATAPI::diskRemoved()>:
c0024468:	83 ec 18             	sub    esp,0x18
c002446b:	68 fd c8 02 c0       	push   0xc002c8fd
c0024470:	e8 9a e6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0024475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024479:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024480:	83 c4 1c             	add    esp,0x1c
c0024483:	c3                   	ret    

c0024484 <ATAPI::eject()>:
c0024484:	57                   	push   edi
c0024485:	b9 03 00 00 00       	mov    ecx,0x3
c002448a:	53                   	push   ebx
c002448b:	83 ec 14             	sub    esp,0x14
c002448e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024492:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024496:	fc                   	cld    
c0024497:	31 c0                	xor    eax,eax
c0024499:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002449b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00244a0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00244a5:	50                   	push   eax
c00244a6:	50                   	push   eax
c00244a7:	6a 00                	push   0x0
c00244a9:	6a 00                	push   0x0
c00244ab:	6a 00                	push   0x0
c00244ad:	6a 02                	push   0x2
c00244af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00244b3:	50                   	push   eax
c00244b4:	53                   	push   ebx
c00244b5:	e8 ee fc ff ff       	call   c00241a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00244ba:	83 c4 14             	add    esp,0x14
c00244bd:	53                   	push   ebx
c00244be:	e8 a5 ff ff ff       	call   c0024468 <ATAPI::diskRemoved()>
c00244c3:	83 c4 24             	add    esp,0x24
c00244c6:	31 c0                	xor    eax,eax
c00244c8:	5b                   	pop    ebx
c00244c9:	5f                   	pop    edi
c00244ca:	c3                   	ret    
c00244cb:	90                   	nop

c00244cc <ATAPI::diskInserted()>:
c00244cc:	53                   	push   ebx
c00244cd:	83 ec 14             	sub    esp,0x14
c00244d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00244d4:	68 14 c9 02 c0       	push   0xc002c914
c00244d9:	e8 31 e6 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00244de:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00244e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00244e8:	e8 d5 fe fe ff       	call   c00143c2 <PhysicalDisk::startCache()>
c00244ed:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00244f1:	83 c4 18             	add    esp,0x18
c00244f4:	5b                   	pop    ebx
c00244f5:	e9 18 20 ff ff       	jmp    c0016512 <createPartitionsForDisk(PhysicalDisk*)>

c00244fa <ATAPI::detectMedia()>:
c00244fa:	56                   	push   esi
c00244fb:	53                   	push   ebx
c00244fc:	83 ec 28             	sub    esp,0x28
c00244ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024503:	6a 0c                	push   0xc
c0024505:	6a 00                	push   0x0
c0024507:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002450b:	56                   	push   esi
c002450c:	e8 67 c2 fd ff       	call   c0000778 <memset>
c0024511:	58                   	pop    eax
c0024512:	5a                   	pop    edx
c0024513:	6a 00                	push   0x0
c0024515:	6a 00                	push   0x0
c0024517:	6a 00                	push   0x0
c0024519:	6a 00                	push   0x0
c002451b:	56                   	push   esi
c002451c:	53                   	push   ebx
c002451d:	e8 86 fc ff ff       	call   c00241a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024522:	83 c4 1c             	add    esp,0x1c
c0024525:	6a 0c                	push   0xc
c0024527:	6a 00                	push   0x0
c0024529:	56                   	push   esi
c002452a:	e8 49 c2 fd ff       	call   c0000778 <memset>
c002452f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024534:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024539:	59                   	pop    ecx
c002453a:	58                   	pop    eax
c002453b:	6a 01                	push   0x1
c002453d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024541:	50                   	push   eax
c0024542:	6a 00                	push   0x0
c0024544:	6a 12                	push   0x12
c0024546:	56                   	push   esi
c0024547:	53                   	push   ebx
c0024548:	e8 5b fc ff ff       	call   c00241a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002454d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024551:	83 c4 20             	add    esp,0x20
c0024554:	83 e0 7f             	and    eax,0x7f
c0024557:	3c 70                	cmp    al,0x70
c0024559:	74 15                	je     c0024570 <ATAPI::detectMedia()+0x76>
c002455b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024562:	75 0c                	jne    c0024570 <ATAPI::detectMedia()+0x76>
c0024564:	83 ec 0c             	sub    esp,0xc
c0024567:	53                   	push   ebx
c0024568:	e8 5f ff ff ff       	call   c00244cc <ATAPI::diskInserted()>
c002456d:	83 c4 10             	add    esp,0x10
c0024570:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024574:	83 e0 0f             	and    eax,0xf
c0024577:	3c 02                	cmp    al,0x2
c0024579:	75 1b                	jne    c0024596 <ATAPI::detectMedia()+0x9c>
c002457b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024580:	75 2d                	jne    c00245af <ATAPI::detectMedia()+0xb5>
c0024582:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024589:	74 24                	je     c00245af <ATAPI::detectMedia()+0xb5>
c002458b:	83 ec 0c             	sub    esp,0xc
c002458e:	53                   	push   ebx
c002458f:	e8 d4 fe ff ff       	call   c0024468 <ATAPI::diskRemoved()>
c0024594:	eb 16                	jmp    c00245ac <ATAPI::detectMedia()+0xb2>
c0024596:	84 c0                	test   al,al
c0024598:	75 15                	jne    c00245af <ATAPI::detectMedia()+0xb5>
c002459a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00245a1:	75 0c                	jne    c00245af <ATAPI::detectMedia()+0xb5>
c00245a3:	83 ec 0c             	sub    esp,0xc
c00245a6:	53                   	push   ebx
c00245a7:	e8 20 ff ff ff       	call   c00244cc <ATAPI::diskInserted()>
c00245ac:	83 c4 10             	add    esp,0x10
c00245af:	83 c4 24             	add    esp,0x24
c00245b2:	5b                   	pop    ebx
c00245b3:	5e                   	pop    esi
c00245b4:	c3                   	ret    
c00245b5:	90                   	nop

c00245b6 <ATAPI::open(int, int, void*)>:
c00245b6:	53                   	push   ebx
c00245b7:	83 ec 08             	sub    esp,0x8
c00245ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00245be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245c6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245cc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245d2:	c1 e0 06             	shl    eax,0x6
c00245d5:	01 d0                	add    eax,edx
c00245d7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00245de:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00245e4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00245eb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00245f5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00245fb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024602:	6a 04                	push   0x4
c0024604:	6a 0c                	push   0xc
c0024606:	51                   	push   ecx
c0024607:	52                   	push   edx
c0024608:	e8 15 e5 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002460d:	90                   	nop
c002460e:	90                   	nop
c002460f:	6a 00                	push   0x0
c0024611:	6a 0c                	push   0xc
c0024613:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002461a:	50                   	push   eax
c002461b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024621:	e8 fc e4 ff ff       	call   c0022b22 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024626:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002462d:	83 c4 14             	add    esp,0x14
c0024630:	53                   	push   ebx
c0024631:	e8 c4 fe ff ff       	call   c00244fa <ATAPI::detectMedia()>
c0024636:	31 c0                	xor    eax,eax
c0024638:	83 c4 18             	add    esp,0x18
c002463b:	5b                   	pop    ebx
c002463c:	c3                   	ret    
c002463d:	90                   	nop

c002463e <ATAPI::read(unsigned long long, int, void*)>:
c002463e:	55                   	push   ebp
c002463f:	57                   	push   edi
c0024640:	56                   	push   esi
c0024641:	53                   	push   ebx
c0024642:	83 ec 1c             	sub    esp,0x1c
c0024645:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024649:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002464d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024651:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024658:	74 41                	je     c002469b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002465a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002465e:	b9 03 00 00 00       	mov    ecx,0x3
c0024663:	fc                   	cld    
c0024664:	31 c0                	xor    eax,eax
c0024666:	86 fb                	xchg   bl,bh
c0024668:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002466a:	c1 c3 10             	rol    ebx,0x10
c002466d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024672:	89 e8                	mov    eax,ebp
c0024674:	86 fb                	xchg   bl,bh
c0024676:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002467a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002467e:	50                   	push   eax
c002467f:	50                   	push   eax
c0024680:	55                   	push   ebp
c0024681:	c1 e5 0b             	shl    ebp,0xb
c0024684:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024688:	6a 00                	push   0x0
c002468a:	55                   	push   ebp
c002468b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002468f:	50                   	push   eax
c0024690:	56                   	push   esi
c0024691:	e8 12 fb ff ff       	call   c00241a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024696:	83 c4 20             	add    esp,0x20
c0024699:	eb 1a                	jmp    c00246b5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002469b:	83 ec 0c             	sub    esp,0xc
c002469e:	56                   	push   esi
c002469f:	e8 56 fe ff ff       	call   c00244fa <ATAPI::detectMedia()>
c00246a4:	83 c4 10             	add    esp,0x10
c00246a7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00246ae:	75 aa                	jne    c002465a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00246b0:	b8 02 00 00 00       	mov    eax,0x2
c00246b5:	83 c4 1c             	add    esp,0x1c
c00246b8:	5b                   	pop    ebx
c00246b9:	5e                   	pop    esi
c00246ba:	5f                   	pop    edi
c00246bb:	5d                   	pop    ebp
c00246bc:	c3                   	ret    
c00246bd:	90                   	nop

c00246be <SATA::close(int, int, void*)>:
c00246be:	83 ec 0c             	sub    esp,0xc
c00246c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246c5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00246cb:	85 c0                	test   eax,eax
c00246cd:	74 0c                	je     c00246db <SATA::close(int, int, void*)+0x1d>
c00246cf:	83 ec 0c             	sub    esp,0xc
c00246d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00246d4:	50                   	push   eax
c00246d5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00246d8:	83 c4 10             	add    esp,0x10
c00246db:	31 c0                	xor    eax,eax
c00246dd:	83 c4 0c             	add    esp,0xc
c00246e0:	c3                   	ret    
c00246e1:	90                   	nop

c00246e2 <SATA::powerSaving(PowerSavingLevel)>:
c00246e2:	c3                   	ret    
c00246e3:	90                   	nop

c00246e4 <SATA::open(int, int, void*)>:
c00246e4:	56                   	push   esi
c00246e5:	53                   	push   ebx
c00246e6:	50                   	push   eax
c00246e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00246eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00246ef:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00246f9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00246ff:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002470d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024717:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002471d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024724:	e8 b4 b7 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024729:	89 c6                	mov    esi,eax
c002472b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024731:	81 c6 00 10 00 00    	add    esi,0x1000
c0024737:	e8 a1 b7 fe ff       	call   c000fedd <Phys::allocatePage()>
c002473c:	39 c6                	cmp    esi,eax
c002473e:	74 10                	je     c0024750 <SATA::open(int, int, void*)+0x6c>
c0024740:	83 ec 0c             	sub    esp,0xc
c0024743:	68 3c c8 02 c0       	push   0xc002c83c
c0024748:	e8 3e 5a ff ff       	call   c001a18b <Krnl::panic(char const*)>
c002474d:	83 c4 10             	add    esp,0x10
c0024750:	83 ec 0c             	sub    esp,0xc
c0024753:	6a 02                	push   0x2
c0024755:	e8 c5 d3 fe ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c002475a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024760:	e8 4a d5 fe ff       	call   c0011caf <Virt::getAKernelVAS()>
c0024765:	6a 03                	push   0x3
c0024767:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002476d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024773:	50                   	push   eax
c0024774:	e8 71 da fe ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0024779:	83 c4 14             	add    esp,0x14
c002477c:	53                   	push   ebx
c002477d:	e8 40 fc fe ff       	call   c00143c2 <PhysicalDisk::startCache()>
c0024782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024785:	e8 88 1d ff ff       	call   c0016512 <createPartitionsForDisk(PhysicalDisk*)>
c002478a:	83 c4 14             	add    esp,0x14
c002478d:	31 c0                	xor    eax,eax
c002478f:	5b                   	pop    ebx
c0024790:	5e                   	pop    esi
c0024791:	c3                   	ret    

c0024792 <SATA::SATA()>:
c0024792:	83 ec 0c             	sub    esp,0xc
c0024795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024799:	83 ec 04             	sub    esp,0x4
c002479c:	68 00 02 00 00       	push   0x200
c00247a1:	68 50 c8 02 c0       	push   0xc002c850
c00247a6:	50                   	push   eax
c00247a7:	e8 ae fb fe ff       	call   c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247ac:	83 c4 10             	add    esp,0x10
c00247af:	ba c0 c8 02 c0       	mov    edx,0xc002c8c0
c00247b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247b8:	89 10                	mov    DWORD PTR [eax],edx
c00247ba:	90                   	nop
c00247bb:	83 c4 0c             	add    esp,0xc
c00247be:	c3                   	ret    
c00247bf:	90                   	nop

c00247c0 <SATA::access(unsigned long long, int, void*, bool)>:
c00247c0:	55                   	push   ebp
c00247c1:	57                   	push   edi
c00247c2:	56                   	push   esi
c00247c3:	53                   	push   ebx
c00247c4:	83 ec 2c             	sub    esp,0x2c
c00247c7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00247cb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00247cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00247d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00247d7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00247db:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00247e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00247e4:	7e 10                	jle    c00247f6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00247e6:	83 ec 0c             	sub    esp,0xc
c00247e9:	68 60 c8 02 c0       	push   0xc002c860
c00247ee:	e8 98 59 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00247f3:	83 c4 10             	add    esp,0x10
c00247f6:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c00247fc:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024802:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024808:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002480c:	89 f0                	mov    eax,esi
c002480e:	c1 e0 07             	shl    eax,0x7
c0024811:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024815:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002481f:	53                   	push   ebx
c0024820:	8d 46 02             	lea    eax,[esi+0x2]
c0024823:	53                   	push   ebx
c0024824:	c1 e0 07             	shl    eax,0x7
c0024827:	bb 01 00 00 00       	mov    ebx,0x1
c002482c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024830:	50                   	push   eax
c0024831:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024837:	e8 aa ef ff ff       	call   c00237e6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024840:	83 c4 10             	add    esp,0x10
c0024843:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024848:	0f 84 ce 01 00 00    	je     c0024a1c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002484e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024852:	c1 e0 09             	shl    eax,0x9
c0024855:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c002485a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002485e:	74 17                	je     c0024877 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024860:	51                   	push   ecx
c0024861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024865:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024869:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c002486f:	e8 d0 be fd ff       	call   c0000744 <memcpy>
c0024874:	83 c4 10             	add    esp,0x10
c0024877:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002487d:	8d 46 02             	lea    eax,[esi+0x2]
c0024880:	c1 e0 07             	shl    eax,0x7
c0024883:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024887:	8b 00                	mov    eax,DWORD PTR [eax]
c0024889:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002488f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024895:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024899:	c1 e1 05             	shl    ecx,0x5
c002489c:	01 c8                	add    eax,ecx
c002489e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00248a2:	8a 18                	mov    bl,BYTE PTR [eax]
c00248a4:	83 e1 01             	and    ecx,0x1
c00248a7:	83 e3 bf             	and    ebx,0xffffffbf
c00248aa:	c1 e1 06             	shl    ecx,0x6
c00248ad:	09 d9                	or     ecx,ebx
c00248af:	88 08                	mov    BYTE PTR [eax],cl
c00248b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00248b3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00248b9:	81 c9 05 00 01 00    	or     ecx,0x10005
c00248bf:	89 08                	mov    DWORD PTR [eax],ecx
c00248c1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00248c7:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00248cd:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00248d3:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00248d6:	52                   	push   edx
c00248d7:	68 90 00 00 00       	push   0x90
c00248dc:	6a 00                	push   0x0
c00248de:	53                   	push   ebx
c00248df:	e8 94 be fd ff       	call   c0000778 <memset>
c00248e4:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c00248ea:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c00248ee:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00248f4:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00248f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00248fc:	83 c4 10             	add    esp,0x10
c00248ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024902:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024908:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002490e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024913:	09 c8                	or     eax,ecx
c0024915:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002491b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002491e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024925:	66 25 00 7f          	and    ax,0x7f00
c0024929:	66 0d 27 80          	or     ax,0x8027
c002492d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024932:	66 89 03             	mov    WORD PTR [ebx],ax
c0024935:	19 c0                	sbb    eax,eax
c0024937:	83 e0 f0             	and    eax,0xfffffff0
c002493a:	83 c0 35             	add    eax,0x35
c002493d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024940:	89 f8                	mov    eax,edi
c0024942:	c1 e8 10             	shr    eax,0x10
c0024945:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024948:	89 f8                	mov    eax,edi
c002494a:	c1 e8 18             	shr    eax,0x18
c002494d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024950:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024954:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002495b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002495e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024962:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024966:	89 f3                	mov    ebx,esi
c0024968:	31 c0                	xor    eax,eax
c002496a:	c1 e3 07             	shl    ebx,0x7
c002496d:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024971:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024977:	80 e1 88             	and    cl,0x88
c002497a:	74 0a                	je     c0024986 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c002497c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024981:	74 0a                	je     c002498d <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024983:	40                   	inc    eax
c0024984:	eb eb                	jmp    c0024971 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024986:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002498b:	75 0a                	jne    c0024997 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c002498d:	83 ec 0c             	sub    esp,0xc
c0024990:	68 99 c8 02 c0       	push   0xc002c899
c0024995:	eb 56                	jmp    c00249ed <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024997:	b8 01 00 00 00       	mov    eax,0x1
c002499c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c00249a0:	c1 e6 07             	shl    esi,0x7
c00249a3:	d3 e0                	shl    eax,cl
c00249a5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00249a9:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00249af:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c00249b5:	85 c8                	test   eax,ecx
c00249b7:	74 20                	je     c00249d9 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c00249b9:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c00249bf:	0f ba e1 1e          	bt     ecx,0x1e
c00249c3:	73 ea                	jae    c00249af <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c00249c5:	83 ec 0c             	sub    esp,0xc
c00249c8:	31 db                	xor    ebx,ebx
c00249ca:	68 a7 c8 02 c0       	push   0xc002c8a7
c00249cf:	e8 b7 57 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00249d4:	83 c4 10             	add    esp,0x10
c00249d7:	eb 43                	jmp    c0024a1c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00249d9:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c00249df:	0f ba e0 1e          	bt     eax,0x1e
c00249e3:	73 17                	jae    c00249fc <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c00249e5:	83 ec 0c             	sub    esp,0xc
c00249e8:	68 a7 c8 02 c0       	push   0xc002c8a7
c00249ed:	e8 99 57 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00249f2:	bb 01 00 00 00       	mov    ebx,0x1
c00249f7:	83 c4 10             	add    esp,0x10
c00249fa:	eb 20                	jmp    c0024a1c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00249fc:	31 db                	xor    ebx,ebx
c00249fe:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024a03:	75 17                	jne    c0024a1c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024a05:	50                   	push   eax
c0024a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024a0a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024a10:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024a14:	e8 2b bd fd ff       	call   c0000744 <memcpy>
c0024a19:	83 c4 10             	add    esp,0x10
c0024a1c:	83 c4 2c             	add    esp,0x2c
c0024a1f:	89 d8                	mov    eax,ebx
c0024a21:	5b                   	pop    ebx
c0024a22:	5e                   	pop    esi
c0024a23:	5f                   	pop    edi
c0024a24:	5d                   	pop    ebp
c0024a25:	c3                   	ret    

c0024a26 <SATA::read(unsigned long long, int, void*)>:
c0024a26:	57                   	push   edi
c0024a27:	b8 04 00 00 00       	mov    eax,0x4
c0024a2c:	56                   	push   esi
c0024a2d:	53                   	push   ebx
c0024a2e:	83 ec 10             	sub    esp,0x10
c0024a31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024a35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024a39:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024a3c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024a40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024a44:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024a4a:	77 3b                	ja     c0024a87 <SATA::read(unsigned long long, int, void*)+0x61>
c0024a4c:	b8 06 00 00 00       	mov    eax,0x6
c0024a51:	85 d2                	test   edx,edx
c0024a53:	74 32                	je     c0024a87 <SATA::read(unsigned long long, int, void*)+0x61>
c0024a55:	50                   	push   eax
c0024a56:	50                   	push   eax
c0024a57:	6a 00                	push   0x0
c0024a59:	52                   	push   edx
c0024a5a:	53                   	push   ebx
c0024a5b:	57                   	push   edi
c0024a5c:	56                   	push   esi
c0024a5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024a61:	e8 5a fd ff ff       	call   c00247c0 <SATA::access(unsigned long long, int, void*, bool)>
c0024a66:	83 c4 20             	add    esp,0x20
c0024a69:	85 c0                	test   eax,eax
c0024a6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a6f:	75 11                	jne    c0024a82 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024a71:	01 1d 68 22 03 c0    	add    DWORD PTR ds:0xc0032268,ebx
c0024a77:	e8 f8 be fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0024a7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024a80:	eb 05                	jmp    c0024a87 <SATA::read(unsigned long long, int, void*)+0x61>
c0024a82:	b8 01 00 00 00       	mov    eax,0x1
c0024a87:	83 c4 10             	add    esp,0x10
c0024a8a:	5b                   	pop    ebx
c0024a8b:	5e                   	pop    esi
c0024a8c:	5f                   	pop    edi
c0024a8d:	c3                   	ret    

c0024a8e <SATA::write(unsigned long long, int, void*)>:
c0024a8e:	55                   	push   ebp
c0024a8f:	b8 04 00 00 00       	mov    eax,0x4
c0024a94:	57                   	push   edi
c0024a95:	56                   	push   esi
c0024a96:	53                   	push   ebx
c0024a97:	83 ec 1c             	sub    esp,0x1c
c0024a9a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024a9e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024aa2:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024aa5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024aa9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024aad:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024ab3:	77 56                	ja     c0024b0b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024ab5:	b8 06 00 00 00       	mov    eax,0x6
c0024aba:	85 ff                	test   edi,edi
c0024abc:	74 4d                	je     c0024b0b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024abe:	89 ee                	mov    esi,ebp
c0024ac0:	c1 e6 09             	shl    esi,0x9
c0024ac3:	01 fe                	add    esi,edi
c0024ac5:	89 c8                	mov    eax,ecx
c0024ac7:	89 da                	mov    edx,ebx
c0024ac9:	83 c0 01             	add    eax,0x1
c0024acc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ad0:	83 d2 00             	adc    edx,0x0
c0024ad3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024ad7:	50                   	push   eax
c0024ad8:	50                   	push   eax
c0024ad9:	6a 01                	push   0x1
c0024adb:	57                   	push   edi
c0024adc:	81 c7 00 02 00 00    	add    edi,0x200
c0024ae2:	6a 01                	push   0x1
c0024ae4:	53                   	push   ebx
c0024ae5:	51                   	push   ecx
c0024ae6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024aea:	e8 d1 fc ff ff       	call   c00247c0 <SATA::access(unsigned long long, int, void*, bool)>
c0024aef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024af3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024af7:	83 c4 20             	add    esp,0x20
c0024afa:	39 f7                	cmp    edi,esi
c0024afc:	75 c7                	jne    c0024ac5 <SATA::write(unsigned long long, int, void*)+0x37>
c0024afe:	01 2d 64 22 03 c0    	add    DWORD PTR ds:0xc0032264,ebp
c0024b04:	e8 6b be fe ff       	call   c0010974 <VgaText::updateDiskUsage()>
c0024b09:	31 c0                	xor    eax,eax
c0024b0b:	83 c4 1c             	add    esp,0x1c
c0024b0e:	5b                   	pop    ebx
c0024b0f:	5e                   	pop    esi
c0024b10:	5f                   	pop    edi
c0024b11:	5d                   	pop    ebp
c0024b12:	c3                   	ret    
c0024b13:	90                   	nop

c0024b14 <SATAPI::write(unsigned long long, int, void*)>:
c0024b14:	b8 03 00 00 00       	mov    eax,0x3
c0024b19:	c3                   	ret    

c0024b1a <SATAPI::close(int, int, void*)>:
c0024b1a:	83 ec 0c             	sub    esp,0xc
c0024b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b21:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b27:	85 c0                	test   eax,eax
c0024b29:	74 0c                	je     c0024b37 <SATAPI::close(int, int, void*)+0x1d>
c0024b2b:	83 ec 0c             	sub    esp,0xc
c0024b2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b30:	50                   	push   eax
c0024b31:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b34:	83 c4 10             	add    esp,0x10
c0024b37:	31 c0                	xor    eax,eax
c0024b39:	83 c4 0c             	add    esp,0xc
c0024b3c:	c3                   	ret    
c0024b3d:	90                   	nop

c0024b3e <SATAPI::SATAPI()>:
c0024b3e:	83 ec 0c             	sub    esp,0xc
c0024b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b45:	83 ec 04             	sub    esp,0x4
c0024b48:	68 00 08 00 00       	push   0x800
c0024b4d:	68 f0 c8 02 c0       	push   0xc002c8f0
c0024b52:	50                   	push   eax
c0024b53:	e8 02 f8 fe ff       	call   c001435a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024b58:	83 c4 10             	add    esp,0x10
c0024b5b:	ba 9c c9 02 c0       	mov    edx,0xc002c99c
c0024b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b64:	89 10                	mov    DWORD PTR [eax],edx
c0024b66:	90                   	nop
c0024b67:	83 c4 0c             	add    esp,0xc
c0024b6a:	c3                   	ret    
c0024b6b:	90                   	nop

c0024b6c <SATAPI::diskRemoved()>:
c0024b6c:	83 ec 18             	sub    esp,0x18
c0024b6f:	68 fc c8 02 c0       	push   0xc002c8fc
c0024b74:	e8 96 df fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0024b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b7d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024b84:	83 c4 1c             	add    esp,0x1c
c0024b87:	c3                   	ret    

c0024b88 <SATAPI::diskInserted()>:
c0024b88:	53                   	push   ebx
c0024b89:	83 ec 14             	sub    esp,0x14
c0024b8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024b90:	68 13 c9 02 c0       	push   0xc002c913
c0024b95:	e8 75 df fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0024b9a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024ba1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ba4:	e8 19 f8 fe ff       	call   c00143c2 <PhysicalDisk::startCache()>
c0024ba9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024bad:	83 c4 18             	add    esp,0x18
c0024bb0:	5b                   	pop    ebx
c0024bb1:	e9 5c 19 ff ff       	jmp    c0016512 <createPartitionsForDisk(PhysicalDisk*)>

c0024bb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024bb6:	55                   	push   ebp
c0024bb7:	57                   	push   edi
c0024bb8:	56                   	push   esi
c0024bb9:	53                   	push   ebx
c0024bba:	83 ec 24             	sub    esp,0x24
c0024bbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024bc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024bc5:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024bcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024bcf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024bd3:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024bd9:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024bdc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024be2:	c1 e3 07             	shl    ebx,0x7
c0024be5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024be9:	89 f8                	mov    eax,edi
c0024beb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024bef:	c1 e0 07             	shl    eax,0x7
c0024bf2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024bf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024bfa:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c04:	53                   	push   ebx
c0024c05:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024c0b:	e8 d6 eb ff ff       	call   c00237e6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024c10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024c14:	83 c4 10             	add    esp,0x10
c0024c17:	b8 01 00 00 00       	mov    eax,0x1
c0024c1c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024c21:	0f 84 8a 01 00 00    	je     c0024db1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024c27:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024c2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024c2f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c35:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024c3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024c3f:	c1 e1 05             	shl    ecx,0x5
c0024c42:	01 c8                	add    eax,ecx
c0024c44:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c46:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024c4c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024c52:	89 08                	mov    DWORD PTR [eax],ecx
c0024c54:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024c5a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024c60:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024c66:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024c69:	52                   	push   edx
c0024c6a:	68 90 00 00 00       	push   0x90
c0024c6f:	6a 00                	push   0x0
c0024c71:	53                   	push   ebx
c0024c72:	e8 01 bb fd ff       	call   c0000778 <memset>
c0024c77:	83 c4 0c             	add    esp,0xc
c0024c7a:	8d 43 40             	lea    eax,[ebx+0x40]
c0024c7d:	6a 0c                	push   0xc
c0024c7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c83:	50                   	push   eax
c0024c84:	e8 bb ba fd ff       	call   c0000744 <memcpy>
c0024c89:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0024c8f:	89 ea                	mov    edx,ebp
c0024c91:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024c97:	c1 ea 18             	shr    edx,0x18
c0024c9a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c9e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024ca1:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024ca4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024ca8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024cae:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024cb4:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024cb9:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0024cbd:	09 c8                	or     eax,ecx
c0024cbf:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024cc3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024cc9:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ccc:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024cd3:	66 25 00 7f          	and    ax,0x7f00
c0024cd7:	66 0d 27 80          	or     ax,0x8027
c0024cdb:	66 89 03             	mov    WORD PTR [ebx],ax
c0024cde:	89 e8                	mov    eax,ebp
c0024ce0:	c1 e8 10             	shr    eax,0x10
c0024ce3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ce6:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024cea:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ced:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cf1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024cf4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024cf8:	83 c4 10             	add    esp,0x10
c0024cfb:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024cff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024d03:	31 c0                	xor    eax,eax
c0024d05:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024d0b:	80 e1 88             	and    cl,0x88
c0024d0e:	74 0a                	je     c0024d1a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024d10:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d15:	74 0a                	je     c0024d21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024d17:	40                   	inc    eax
c0024d18:	eb eb                	jmp    c0024d05 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024d1a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d1f:	75 0f                	jne    c0024d30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024d21:	83 ec 0c             	sub    esp,0xc
c0024d24:	68 99 c8 02 c0       	push   0xc002c899
c0024d29:	e8 5d 54 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0024d2e:	eb 3a                	jmp    c0024d6a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024d30:	b8 01 00 00 00       	mov    eax,0x1
c0024d35:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024d39:	c1 e7 07             	shl    edi,0x7
c0024d3c:	d3 e0                	shl    eax,cl
c0024d3e:	03 3c 24             	add    edi,DWORD PTR [esp]
c0024d41:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024d47:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024d4d:	85 d0                	test   eax,edx
c0024d4f:	74 23                	je     c0024d74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0024d51:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024d57:	0f ba e2 1e          	bt     edx,0x1e
c0024d5b:	73 ea                	jae    c0024d47 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0024d5d:	83 ec 0c             	sub    esp,0xc
c0024d60:	68 2b c9 02 c0       	push   0xc002c92b
c0024d65:	e8 a5 dd fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0024d6a:	83 c4 10             	add    esp,0x10
c0024d6d:	b8 01 00 00 00       	mov    eax,0x1
c0024d72:	eb 3d                	jmp    c0024db1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024d74:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024d7a:	0f ba e0 1e          	bt     eax,0x1e
c0024d7e:	73 0a                	jae    c0024d8a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0024d80:	83 ec 0c             	sub    esp,0xc
c0024d83:	68 3e c9 02 c0       	push   0xc002c93e
c0024d88:	eb db                	jmp    c0024d65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024d8a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0024d8f:	74 1e                	je     c0024daf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024d91:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0024d96:	74 17                	je     c0024daf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024d98:	50                   	push   eax
c0024d99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d9d:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0024da3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024da7:	e8 98 b9 fd ff       	call   c0000744 <memcpy>
c0024dac:	83 c4 10             	add    esp,0x10
c0024daf:	31 c0                	xor    eax,eax
c0024db1:	83 c4 1c             	add    esp,0x1c
c0024db4:	5b                   	pop    ebx
c0024db5:	5e                   	pop    esi
c0024db6:	5f                   	pop    edi
c0024db7:	5d                   	pop    ebp
c0024db8:	c3                   	ret    
c0024db9:	90                   	nop

c0024dba <SATAPI::eject()>:
c0024dba:	57                   	push   edi
c0024dbb:	b9 03 00 00 00       	mov    ecx,0x3
c0024dc0:	53                   	push   ebx
c0024dc1:	83 ec 14             	sub    esp,0x14
c0024dc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024dc8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024dcc:	fc                   	cld    
c0024dcd:	31 c0                	xor    eax,eax
c0024dcf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024dd1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024dd6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024ddb:	50                   	push   eax
c0024ddc:	6a 00                	push   0x0
c0024dde:	6a 00                	push   0x0
c0024de0:	6a 00                	push   0x0
c0024de2:	6a 00                	push   0x0
c0024de4:	6a 02                	push   0x2
c0024de6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024dea:	50                   	push   eax
c0024deb:	53                   	push   ebx
c0024dec:	e8 c5 fd ff ff       	call   c0024bb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024df1:	83 c4 14             	add    esp,0x14
c0024df4:	53                   	push   ebx
c0024df5:	e8 72 fd ff ff       	call   c0024b6c <SATAPI::diskRemoved()>
c0024dfa:	83 c4 24             	add    esp,0x24
c0024dfd:	31 c0                	xor    eax,eax
c0024dff:	5b                   	pop    ebx
c0024e00:	5f                   	pop    edi
c0024e01:	c3                   	ret    

c0024e02 <SATAPI::detectMedia()>:
c0024e02:	56                   	push   esi
c0024e03:	53                   	push   ebx
c0024e04:	83 ec 28             	sub    esp,0x28
c0024e07:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e0b:	6a 0c                	push   0xc
c0024e0d:	6a 00                	push   0x0
c0024e0f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024e13:	56                   	push   esi
c0024e14:	e8 5f b9 fd ff       	call   c0000778 <memset>
c0024e19:	83 c4 0c             	add    esp,0xc
c0024e1c:	6a 00                	push   0x0
c0024e1e:	6a 00                	push   0x0
c0024e20:	6a 00                	push   0x0
c0024e22:	6a 00                	push   0x0
c0024e24:	6a 00                	push   0x0
c0024e26:	56                   	push   esi
c0024e27:	53                   	push   ebx
c0024e28:	e8 89 fd ff ff       	call   c0024bb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e2d:	83 c4 1c             	add    esp,0x1c
c0024e30:	6a 0c                	push   0xc
c0024e32:	6a 00                	push   0x0
c0024e34:	56                   	push   esi
c0024e35:	e8 3e b9 fd ff       	call   c0000778 <memset>
c0024e3a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024e3f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024e44:	83 c4 0c             	add    esp,0xc
c0024e47:	6a 01                	push   0x1
c0024e49:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024e4d:	50                   	push   eax
c0024e4e:	6a 00                	push   0x0
c0024e50:	6a 00                	push   0x0
c0024e52:	6a 12                	push   0x12
c0024e54:	56                   	push   esi
c0024e55:	53                   	push   ebx
c0024e56:	e8 5b fd ff ff       	call   c0024bb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e5b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024e5f:	83 c4 20             	add    esp,0x20
c0024e62:	83 e0 7f             	and    eax,0x7f
c0024e65:	3c 70                	cmp    al,0x70
c0024e67:	74 15                	je     c0024e7e <SATAPI::detectMedia()+0x7c>
c0024e69:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024e70:	75 0c                	jne    c0024e7e <SATAPI::detectMedia()+0x7c>
c0024e72:	83 ec 0c             	sub    esp,0xc
c0024e75:	53                   	push   ebx
c0024e76:	e8 0d fd ff ff       	call   c0024b88 <SATAPI::diskInserted()>
c0024e7b:	83 c4 10             	add    esp,0x10
c0024e7e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024e82:	83 e0 0f             	and    eax,0xf
c0024e85:	3c 02                	cmp    al,0x2
c0024e87:	75 1b                	jne    c0024ea4 <SATAPI::detectMedia()+0xa2>
c0024e89:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024e8e:	75 2d                	jne    c0024ebd <SATAPI::detectMedia()+0xbb>
c0024e90:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024e97:	74 24                	je     c0024ebd <SATAPI::detectMedia()+0xbb>
c0024e99:	83 ec 0c             	sub    esp,0xc
c0024e9c:	53                   	push   ebx
c0024e9d:	e8 ca fc ff ff       	call   c0024b6c <SATAPI::diskRemoved()>
c0024ea2:	eb 16                	jmp    c0024eba <SATAPI::detectMedia()+0xb8>
c0024ea4:	84 c0                	test   al,al
c0024ea6:	75 15                	jne    c0024ebd <SATAPI::detectMedia()+0xbb>
c0024ea8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024eaf:	75 0c                	jne    c0024ebd <SATAPI::detectMedia()+0xbb>
c0024eb1:	83 ec 0c             	sub    esp,0xc
c0024eb4:	53                   	push   ebx
c0024eb5:	e8 ce fc ff ff       	call   c0024b88 <SATAPI::diskInserted()>
c0024eba:	83 c4 10             	add    esp,0x10
c0024ebd:	83 c4 24             	add    esp,0x24
c0024ec0:	5b                   	pop    ebx
c0024ec1:	5e                   	pop    esi
c0024ec2:	c3                   	ret    
c0024ec3:	90                   	nop

c0024ec4 <SATAPI::open(int, int, void*)>:
c0024ec4:	56                   	push   esi
c0024ec5:	53                   	push   ebx
c0024ec6:	50                   	push   eax
c0024ec7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ecb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ecf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024ed9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024edf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024eed:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ef7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024efd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024f04:	e8 d4 af fe ff       	call   c000fedd <Phys::allocatePage()>
c0024f09:	89 c6                	mov    esi,eax
c0024f0b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024f11:	81 c6 00 10 00 00    	add    esi,0x1000
c0024f17:	e8 c1 af fe ff       	call   c000fedd <Phys::allocatePage()>
c0024f1c:	39 c6                	cmp    esi,eax
c0024f1e:	74 10                	je     c0024f30 <SATAPI::open(int, int, void*)+0x6c>
c0024f20:	83 ec 0c             	sub    esp,0xc
c0024f23:	68 53 c9 02 c0       	push   0xc002c953
c0024f28:	e8 5e 52 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0024f2d:	83 c4 10             	add    esp,0x10
c0024f30:	83 ec 0c             	sub    esp,0xc
c0024f33:	6a 02                	push   0x2
c0024f35:	e8 e5 cb fe ff       	call   c0011b1f <Virt::allocateKernelVirtualPages(int)>
c0024f3a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024f40:	e8 6a cd fe ff       	call   c0011caf <Virt::getAKernelVAS()>
c0024f45:	6a 03                	push   0x3
c0024f47:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024f4d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024f53:	50                   	push   eax
c0024f54:	e8 91 d2 fe ff       	call   c00121ea <VAS::mapPage(unsigned long, unsigned long, int)>
c0024f59:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024f60:	83 c4 14             	add    esp,0x14
c0024f63:	53                   	push   ebx
c0024f64:	e8 99 fe ff ff       	call   c0024e02 <SATAPI::detectMedia()>
c0024f69:	83 c4 14             	add    esp,0x14
c0024f6c:	31 c0                	xor    eax,eax
c0024f6e:	5b                   	pop    ebx
c0024f6f:	5e                   	pop    esi
c0024f70:	c3                   	ret    
c0024f71:	90                   	nop

c0024f72 <SATAPI::read(unsigned long long, int, void*)>:
c0024f72:	55                   	push   ebp
c0024f73:	57                   	push   edi
c0024f74:	56                   	push   esi
c0024f75:	53                   	push   ebx
c0024f76:	83 ec 1c             	sub    esp,0x1c
c0024f79:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024f7d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f81:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024f85:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024f8c:	74 19                	je     c0024fa7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024f8e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024f93:	7e 2e                	jle    c0024fc3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024f95:	83 ec 0c             	sub    esp,0xc
c0024f98:	68 69 c9 02 c0       	push   0xc002c969
c0024f9d:	e8 e9 51 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0024fa2:	83 c4 10             	add    esp,0x10
c0024fa5:	eb 1c                	jmp    c0024fc3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024fa7:	83 ec 0c             	sub    esp,0xc
c0024faa:	55                   	push   ebp
c0024fab:	e8 52 fe ff ff       	call   c0024e02 <SATAPI::detectMedia()>
c0024fb0:	83 c4 10             	add    esp,0x10
c0024fb3:	b8 02 00 00 00       	mov    eax,0x2
c0024fb8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024fbf:	75 cd                	jne    c0024f8e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024fc1:	eb 49                	jmp    c002500c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024fc3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fc7:	b9 03 00 00 00       	mov    ecx,0x3
c0024fcc:	fc                   	cld    
c0024fcd:	31 c0                	xor    eax,eax
c0024fcf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024fd1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024fd6:	89 d8                	mov    eax,ebx
c0024fd8:	86 e0                	xchg   al,ah
c0024fda:	c1 c0 10             	rol    eax,0x10
c0024fdd:	86 e0                	xchg   al,ah
c0024fdf:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024fe3:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024fe7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024feb:	50                   	push   eax
c0024fec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024ff0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024ff4:	56                   	push   esi
c0024ff5:	53                   	push   ebx
c0024ff6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024ffa:	c1 e0 0b             	shl    eax,0xb
c0024ffd:	50                   	push   eax
c0024ffe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025002:	50                   	push   eax
c0025003:	55                   	push   ebp
c0025004:	e8 ad fb ff ff       	call   c0024bb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025009:	83 c4 20             	add    esp,0x20
c002500c:	83 c4 1c             	add    esp,0x1c
c002500f:	5b                   	pop    ebx
c0025010:	5e                   	pop    esi
c0025011:	5f                   	pop    edi
c0025012:	5d                   	pop    ebp
c0025013:	c3                   	ret    

c0025014 <AVX::open(int, int, void*)>:
c0025014:	83 ec 0c             	sub    esp,0xc
c0025017:	e8 3c 11 00 00       	call   c0026158 <avxInit>
c002501c:	b8 00 00 00 00       	mov    eax,0x0
c0025021:	83 c4 0c             	add    esp,0xc
c0025024:	c3                   	ret    
c0025025:	90                   	nop

c0025026 <AVX::close(int, int, void*)>:
c0025026:	83 ec 0c             	sub    esp,0xc
c0025029:	e8 2b 11 00 00       	call   c0026159 <avxClose>
c002502e:	b8 00 00 00 00       	mov    eax,0x0
c0025033:	83 c4 0c             	add    esp,0xc
c0025036:	c3                   	ret    
c0025037:	90                   	nop

c0025038 <AVX::available()>:
c0025038:	83 ec 0c             	sub    esp,0xc
c002503b:	e8 10 11 00 00       	call   c0026150 <avxDetect>
c0025040:	85 c0                	test   eax,eax
c0025042:	0f 95 c0             	setne  al
c0025045:	83 c4 0c             	add    esp,0xc
c0025048:	c3                   	ret    
c0025049:	90                   	nop

c002504a <AVX::save(void*)>:
c002504a:	83 ec 0c             	sub    esp,0xc
c002504d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025051:	83 ec 0c             	sub    esp,0xc
c0025054:	50                   	push   eax
c0025055:	e8 fc 10 00 00       	call   c0026156 <avxSave>
c002505a:	83 c4 10             	add    esp,0x10
c002505d:	90                   	nop
c002505e:	83 c4 0c             	add    esp,0xc
c0025061:	c3                   	ret    

c0025062 <AVX::load(void*)>:
c0025062:	83 ec 0c             	sub    esp,0xc
c0025065:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025069:	83 ec 0c             	sub    esp,0xc
c002506c:	50                   	push   eax
c002506d:	e8 e5 10 00 00       	call   c0026157 <avxLoad>
c0025072:	83 c4 10             	add    esp,0x10
c0025075:	90                   	nop
c0025076:	83 c4 0c             	add    esp,0xc
c0025079:	c3                   	ret    

c002507a <AVX::AVX()>:
c002507a:	83 ec 0c             	sub    esp,0xc
c002507d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025081:	83 ec 08             	sub    esp,0x8
c0025084:	68 cc c9 02 c0       	push   0xc002c9cc
c0025089:	50                   	push   eax
c002508a:	e8 a9 f3 fe ff       	call   c0014438 <FPU::FPU(char const*)>
c002508f:	83 c4 10             	add    esp,0x10
c0025092:	ba dc c9 02 c0       	mov    edx,0xc002c9dc
c0025097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002509b:	89 10                	mov    DWORD PTR [eax],edx
c002509d:	90                   	nop
c002509e:	83 c4 0c             	add    esp,0xc
c00250a1:	c3                   	ret    

c00250a2 <MMX::available()>:
c00250a2:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00250a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00250ad:	83 e0 20             	and    eax,0x20
c00250b0:	84 c0                	test   al,al
c00250b2:	0f 95 c0             	setne  al
c00250b5:	c3                   	ret    

c00250b6 <MMX::open(int, int, void*)>:
c00250b6:	83 ec 0c             	sub    esp,0xc
c00250b9:	e8 1e 11 00 00       	call   c00261dc <x87Init>
c00250be:	b8 00 00 00 00       	mov    eax,0x0
c00250c3:	83 c4 0c             	add    esp,0xc
c00250c6:	c3                   	ret    
c00250c7:	90                   	nop

c00250c8 <MMX::close(int, int, void*)>:
c00250c8:	83 ec 0c             	sub    esp,0xc
c00250cb:	e8 26 11 00 00       	call   c00261f6 <x87Close>
c00250d0:	b8 00 00 00 00       	mov    eax,0x0
c00250d5:	83 c4 0c             	add    esp,0xc
c00250d8:	c3                   	ret    
c00250d9:	90                   	nop

c00250da <MMX::save(void*)>:
c00250da:	83 ec 0c             	sub    esp,0xc
c00250dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250e1:	83 ec 0c             	sub    esp,0xc
c00250e4:	50                   	push   eax
c00250e5:	e8 e7 10 00 00       	call   c00261d1 <x87Save>
c00250ea:	83 c4 10             	add    esp,0x10
c00250ed:	90                   	nop
c00250ee:	83 c4 0c             	add    esp,0xc
c00250f1:	c3                   	ret    

c00250f2 <MMX::load(void*)>:
c00250f2:	83 ec 0c             	sub    esp,0xc
c00250f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250f9:	83 ec 0c             	sub    esp,0xc
c00250fc:	50                   	push   eax
c00250fd:	e8 d5 10 00 00       	call   c00261d7 <x87Load>
c0025102:	83 c4 10             	add    esp,0x10
c0025105:	90                   	nop
c0025106:	83 c4 0c             	add    esp,0xc
c0025109:	c3                   	ret    

c002510a <MMX::MMX()>:
c002510a:	83 ec 0c             	sub    esp,0xc
c002510d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025111:	83 ec 08             	sub    esp,0x8
c0025114:	68 0c ca 02 c0       	push   0xc002ca0c
c0025119:	50                   	push   eax
c002511a:	e8 19 f3 fe ff       	call   c0014438 <FPU::FPU(char const*)>
c002511f:	83 c4 10             	add    esp,0x10
c0025122:	ba 1c ca 02 c0       	mov    edx,0xc002ca1c
c0025127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512b:	89 10                	mov    DWORD PTR [eax],edx
c002512d:	90                   	nop
c002512e:	83 c4 0c             	add    esp,0xc
c0025131:	c3                   	ret    

c0025132 <SSE::open(int, int, void*)>:
c0025132:	83 ec 0c             	sub    esp,0xc
c0025135:	e8 5a 10 00 00       	call   c0026194 <sseInit>
c002513a:	b8 00 00 00 00       	mov    eax,0x0
c002513f:	83 c4 0c             	add    esp,0xc
c0025142:	c3                   	ret    
c0025143:	90                   	nop

c0025144 <SSE::close(int, int, void*)>:
c0025144:	83 ec 0c             	sub    esp,0xc
c0025147:	e8 58 10 00 00       	call   c00261a4 <sseClose>
c002514c:	b8 00 00 00 00       	mov    eax,0x0
c0025151:	83 c4 0c             	add    esp,0xc
c0025154:	c3                   	ret    
c0025155:	90                   	nop

c0025156 <SSE::available()>:
c0025156:	83 ec 1c             	sub    esp,0x1c
c0025159:	e8 12 10 00 00       	call   c0026170 <absolutelyNoChanceInHell>
c002515e:	85 c0                	test   eax,eax
c0025160:	0f 95 c0             	setne  al
c0025163:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025167:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002516b:	83 c4 1c             	add    esp,0x1c
c002516e:	c3                   	ret    
c002516f:	90                   	nop

c0025170 <SSE::save(void*)>:
c0025170:	83 ec 0c             	sub    esp,0xc
c0025173:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025177:	83 ec 0c             	sub    esp,0xc
c002517a:	50                   	push   eax
c002517b:	e8 08 10 00 00       	call   c0026188 <sseSave>
c0025180:	83 c4 10             	add    esp,0x10
c0025183:	90                   	nop
c0025184:	83 c4 0c             	add    esp,0xc
c0025187:	c3                   	ret    

c0025188 <SSE::load(void*)>:
c0025188:	83 ec 0c             	sub    esp,0xc
c002518b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002518f:	83 ec 0c             	sub    esp,0xc
c0025192:	50                   	push   eax
c0025193:	e8 f6 0f 00 00       	call   c002618e <sseLoad>
c0025198:	83 c4 10             	add    esp,0x10
c002519b:	90                   	nop
c002519c:	83 c4 0c             	add    esp,0xc
c002519f:	c3                   	ret    

c00251a0 <SSE::SSE()>:
c00251a0:	83 ec 0c             	sub    esp,0xc
c00251a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251a7:	83 ec 08             	sub    esp,0x8
c00251aa:	68 4c ca 02 c0       	push   0xc002ca4c
c00251af:	50                   	push   eax
c00251b0:	e8 83 f2 fe ff       	call   c0014438 <FPU::FPU(char const*)>
c00251b5:	83 c4 10             	add    esp,0x10
c00251b8:	ba 5c ca 02 c0       	mov    edx,0xc002ca5c
c00251bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251c1:	89 10                	mov    DWORD PTR [eax],edx
c00251c3:	90                   	nop
c00251c4:	83 c4 0c             	add    esp,0xc
c00251c7:	c3                   	ret    

c00251c8 <x87::open(int, int, void*)>:
c00251c8:	83 ec 0c             	sub    esp,0xc
c00251cb:	e8 0c 10 00 00       	call   c00261dc <x87Init>
c00251d0:	b8 00 00 00 00       	mov    eax,0x0
c00251d5:	83 c4 0c             	add    esp,0xc
c00251d8:	c3                   	ret    
c00251d9:	90                   	nop

c00251da <x87::close(int, int, void*)>:
c00251da:	83 ec 0c             	sub    esp,0xc
c00251dd:	e8 14 10 00 00       	call   c00261f6 <x87Close>
c00251e2:	b8 00 00 00 00       	mov    eax,0x0
c00251e7:	83 c4 0c             	add    esp,0xc
c00251ea:	c3                   	ret    
c00251eb:	90                   	nop

c00251ec <x87::available()>:
c00251ec:	83 ec 0c             	sub    esp,0xc
c00251ef:	e8 c2 0f 00 00       	call   c00261b6 <x87Detect>
c00251f4:	85 c0                	test   eax,eax
c00251f6:	0f 95 c0             	setne  al
c00251f9:	83 c4 0c             	add    esp,0xc
c00251fc:	c3                   	ret    
c00251fd:	90                   	nop

c00251fe <x87::save(void*)>:
c00251fe:	83 ec 0c             	sub    esp,0xc
c0025201:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025205:	83 ec 0c             	sub    esp,0xc
c0025208:	50                   	push   eax
c0025209:	e8 c3 0f 00 00       	call   c00261d1 <x87Save>
c002520e:	83 c4 10             	add    esp,0x10
c0025211:	90                   	nop
c0025212:	83 c4 0c             	add    esp,0xc
c0025215:	c3                   	ret    

c0025216 <x87::load(void*)>:
c0025216:	83 ec 0c             	sub    esp,0xc
c0025219:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002521d:	83 ec 0c             	sub    esp,0xc
c0025220:	50                   	push   eax
c0025221:	e8 b1 0f 00 00       	call   c00261d7 <x87Load>
c0025226:	83 c4 10             	add    esp,0x10
c0025229:	90                   	nop
c002522a:	83 c4 0c             	add    esp,0xc
c002522d:	c3                   	ret    

c002522e <x87::x87()>:
c002522e:	83 ec 0c             	sub    esp,0xc
c0025231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025235:	83 ec 08             	sub    esp,0x8
c0025238:	68 8c ca 02 c0       	push   0xc002ca8c
c002523d:	50                   	push   eax
c002523e:	e8 f5 f1 fe ff       	call   c0014438 <FPU::FPU(char const*)>
c0025243:	83 c4 10             	add    esp,0x10
c0025246:	ba 9c ca 02 c0       	mov    edx,0xc002ca9c
c002524b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002524f:	89 10                	mov    DWORD PTR [eax],edx
c0025251:	90                   	nop
c0025252:	83 c4 0c             	add    esp,0xc
c0025255:	c3                   	ret    

c0025256 <APIC::disable()>:
c0025256:	90                   	nop
c0025257:	c3                   	ret    

c0025258 <APIC::close(int, int, void*)>:
c0025258:	55                   	push   ebp
c0025259:	89 e5                	mov    ebp,esp
c002525b:	83 ec 08             	sub    esp,0x8
c002525e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025261:	8b 00                	mov    eax,DWORD PTR [eax]
c0025263:	83 c0 3c             	add    eax,0x3c
c0025266:	8b 00                	mov    eax,DWORD PTR [eax]
c0025268:	83 ec 0c             	sub    esp,0xc
c002526b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002526e:	ff d0                	call   eax
c0025270:	83 c4 10             	add    esp,0x10
c0025273:	b8 00 00 00 00       	mov    eax,0x0
c0025278:	c9                   	leave  
c0025279:	c3                   	ret    

c002527a <IOAPIC::close(int, int, void*)>:
c002527a:	b8 00 00 00 00       	mov    eax,0x0
c002527f:	c3                   	ret    

c0025280 <APIC::io_wait()>:
c0025280:	eb 00                	jmp    c0025282 <APIC::io_wait()+0x2>
c0025282:	eb 00                	jmp    c0025284 <APIC::io_wait()+0x4>
c0025284:	90                   	nop
c0025285:	c3                   	ret    

c0025286 <APIC::getBase()>:
c0025286:	55                   	push   ebp
c0025287:	89 e5                	mov    ebp,esp
c0025289:	83 ec 18             	sub    esp,0x18
c002528c:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0025291:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025297:	83 e0 08             	and    eax,0x8
c002529a:	84 c0                	test   al,al
c002529c:	75 07                	jne    c00252a5 <APIC::getBase()+0x1f>
c002529e:	b8 00 00 00 00       	mov    eax,0x0
c00252a3:	eb 21                	jmp    c00252c6 <APIC::getBase()+0x40>
c00252a5:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00252aa:	83 ec 08             	sub    esp,0x8
c00252ad:	6a 1b                	push   0x1b
c00252af:	50                   	push   eax
c00252b0:	e8 33 9b fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00252b5:	83 c4 10             	add    esp,0x10
c00252b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00252bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00252be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00252c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00252c6:	c9                   	leave  
c00252c7:	c3                   	ret    

c00252c8 <APIC::eoi(unsigned char)>:
c00252c8:	55                   	push   ebp
c00252c9:	89 e5                	mov    ebp,esp
c00252cb:	83 ec 28             	sub    esp,0x28
c00252ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00252d1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00252d4:	83 ec 0c             	sub    esp,0xc
c00252d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00252da:	e8 a7 ff ff ff       	call   c0025286 <APIC::getBase()>
c00252df:	83 c4 10             	add    esp,0x10
c00252e2:	05 b0 00 00 00       	add    eax,0xb0
c00252e7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00252ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00252ed:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00252f3:	90                   	nop
c00252f4:	c9                   	leave  
c00252f5:	c3                   	ret    

c00252f6 <APIC::open(int, int, void*)>:
c00252f6:	55                   	push   ebp
c00252f7:	89 e5                	mov    ebp,esp
c00252f9:	57                   	push   edi
c00252fa:	56                   	push   esi
c00252fb:	53                   	push   ebx
c00252fc:	83 ec 2c             	sub    esp,0x2c
c00252ff:	83 ec 0c             	sub    esp,0xc
c0025302:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025305:	e8 7c ff ff ff       	call   c0025286 <APIC::getBase()>
c002530a:	83 c4 10             	add    esp,0x10
c002530d:	89 c2                	mov    edx,eax
c002530f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025312:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025318:	0f b6 f8             	movzx  edi,al
c002531b:	89 d0                	mov    eax,edx
c002531d:	ba 00 00 00 00       	mov    edx,0x0
c0025322:	89 c1                	mov    ecx,eax
c0025324:	80 e5 ff             	and    ch,0xff
c0025327:	89 cb                	mov    ebx,ecx
c0025329:	0f b6 f2             	movzx  esi,dl
c002532c:	89 d8                	mov    eax,ebx
c002532e:	89 f2                	mov    edx,esi
c0025330:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025333:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025336:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002533a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002533e:	83 e0 00             	and    eax,0x0
c0025341:	09 d0                	or     eax,edx
c0025343:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002534a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025350:	8d 50 01             	lea    edx,[eax+0x1]
c0025353:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025356:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002535c:	0f b6 d0             	movzx  edx,al
c002535f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025362:	83 c2 08             	add    edx,0x8
c0025365:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025369:	0f b6 c9             	movzx  ecx,cl
c002536c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025372:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025376:	83 ec 0c             	sub    esp,0xc
c0025379:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002537c:	e8 05 ff ff ff       	call   c0025286 <APIC::getBase()>
c0025381:	83 c4 10             	add    esp,0x10
c0025384:	05 f0 00 00 00       	add    eax,0xf0
c0025389:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002538c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002538f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025391:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025394:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002539b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00253a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00253a5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00253a8:	89 10                	mov    DWORD PTR [eax],edx
c00253aa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00253b1:	a1 d0 06 03 c0       	mov    eax,ds:0xc00306d0
c00253b6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00253b9:	7d 7c                	jge    c0025437 <APIC::open(int, int, void*)+0x141>
c00253bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00253be:	8b 04 85 e0 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf920]
c00253c5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00253c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00253cb:	8b 04 85 e0 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf920]
c00253d2:	c1 e8 08             	shr    eax,0x8
c00253d5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00253d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00253dc:	8b 04 85 e0 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf920]
c00253e3:	c1 e8 18             	shr    eax,0x18
c00253e6:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00253e9:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00253ed:	75 40                	jne    c002542f <APIC::open(int, int, void*)+0x139>
c00253ef:	83 ec 0c             	sub    esp,0xc
c00253f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253f5:	e8 8c fe ff ff       	call   c0025286 <APIC::getBase()>
c00253fa:	83 c4 10             	add    esp,0x10
c00253fd:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025401:	75 07                	jne    c002540a <APIC::open(int, int, void*)+0x114>
c0025403:	ba 60 03 00 00       	mov    edx,0x360
c0025408:	eb 05                	jmp    c002540f <APIC::open(int, int, void*)+0x119>
c002540a:	ba 50 03 00 00       	mov    edx,0x350
c002540f:	01 d0                	add    eax,edx
c0025411:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025414:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025417:	8b 00                	mov    eax,DWORD PTR [eax]
c0025419:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002541c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025423:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025427:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002542a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002542d:	89 10                	mov    DWORD PTR [eax],edx
c002542f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025432:	e9 7a ff ff ff       	jmp    c00253b1 <APIC::open(int, int, void*)+0xbb>
c0025437:	b8 00 00 00 00       	mov    eax,0x0
c002543c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002543f:	5b                   	pop    ebx
c0025440:	5e                   	pop    esi
c0025441:	5f                   	pop    edi
c0025442:	5d                   	pop    ebp
c0025443:	c3                   	ret    

c0025444 <IOAPIC::IOAPIC()>:
c0025444:	83 ec 0c             	sub    esp,0xc
c0025447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002544b:	83 ec 08             	sub    esp,0x8
c002544e:	68 cc ca 02 c0       	push   0xc002cacc
c0025453:	50                   	push   eax
c0025454:	e8 cd ec fe ff       	call   c0014126 <Device::Device(char const*)>
c0025459:	83 c4 10             	add    esp,0x10
c002545c:	ba f4 cb 02 c0       	mov    edx,0xc002cbf4
c0025461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025465:	89 10                	mov    DWORD PTR [eax],edx
c0025467:	90                   	nop
c0025468:	83 c4 0c             	add    esp,0xc
c002546b:	c3                   	ret    

c002546c <APIC::APIC()>:
c002546c:	53                   	push   ebx
c002546d:	83 ec 18             	sub    esp,0x18
c0025470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025474:	83 ec 08             	sub    esp,0x8
c0025477:	68 d4 ca 02 c0       	push   0xc002cad4
c002547c:	50                   	push   eax
c002547d:	e8 10 f4 fe ff       	call   c0014892 <InterruptController::InterruptController(char const*)>
c0025482:	83 c4 10             	add    esp,0x10
c0025485:	ba ac cb 02 c0       	mov    edx,0xc002cbac
c002548a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002548e:	89 10                	mov    DWORD PTR [eax],edx
c0025490:	a0 c0 22 03 c0       	mov    al,ds:0xc00322c0
c0025495:	83 f0 01             	xor    eax,0x1
c0025498:	84 c0                	test   al,al
c002549a:	0f 84 a1 00 00 00    	je     c0025541 <APIC::APIC()+0xd5>
c00254a0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00254a5:	a0 80 07 03 c0       	mov    al,ds:0xc0030780
c00254aa:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00254ae:	0f 83 86 00 00 00    	jae    c002553a <APIC::APIC()+0xce>
c00254b4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00254bc:	83 ec 0c             	sub    esp,0xc
c00254bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00254c3:	e8 78 a3 fe ff       	call   c000f840 <malloc>
c00254c8:	83 c4 10             	add    esp,0x10
c00254cb:	89 c3                	mov    ebx,eax
c00254cd:	83 ec 0c             	sub    esp,0xc
c00254d0:	53                   	push   ebx
c00254d1:	e8 6e ff ff ff       	call   c0025444 <IOAPIC::IOAPIC()>
c00254d6:	83 c4 10             	add    esp,0x10
c00254d9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00254dd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00254e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00254e6:	89 14 85 a0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd60],edx
c00254ed:	a1 80 22 03 c0       	mov    eax,ds:0xc0032280
c00254f2:	40                   	inc    eax
c00254f3:	a3 80 22 03 c0       	mov    ds:0xc0032280,eax
c00254f8:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c00254fd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025503:	83 ec 08             	sub    esp,0x8
c0025506:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002550a:	50                   	push   eax
c002550b:	e8 26 ea fe ff       	call   c0013f36 <Device::addChild(Device*)>
c0025510:	83 c4 10             	add    esp,0x10
c0025513:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025517:	8b 00                	mov    eax,DWORD PTR [eax]
c0025519:	83 c0 08             	add    eax,0x8
c002551c:	8b 00                	mov    eax,DWORD PTR [eax]
c002551e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025523:	6a 00                	push   0x0
c0025525:	6a 00                	push   0x0
c0025527:	52                   	push   edx
c0025528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002552c:	ff d0                	call   eax
c002552e:	83 c4 10             	add    esp,0x10
c0025531:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025535:	e9 6b ff ff ff       	jmp    c00254a5 <APIC::APIC()+0x39>
c002553a:	c6 05 c0 22 03 c0 01 	mov    BYTE PTR ds:0xc00322c0,0x1
c0025541:	90                   	nop
c0025542:	83 c4 18             	add    esp,0x18
c0025545:	5b                   	pop    ebx
c0025546:	c3                   	ret    
c0025547:	90                   	nop

c0025548 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025548:	55                   	push   ebp
c0025549:	89 e5                	mov    ebp,esp
c002554b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002554e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025554:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025557:	72 1d                	jb     c0025576 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002555c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025565:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002556b:	01 d0                	add    eax,edx
c002556d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025570:	73 04                	jae    c0025576 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025572:	b0 01                	mov    al,0x1
c0025574:	eb 02                	jmp    c0025578 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025576:	b0 00                	mov    al,0x0
c0025578:	5d                   	pop    ebp
c0025579:	c3                   	ret    

c002557a <IOAPIC::read(int)>:
c002557a:	55                   	push   ebp
c002557b:	89 e5                	mov    ebp,esp
c002557d:	83 ec 10             	sub    esp,0x10
c0025580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025583:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025589:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002558c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002558f:	0f b6 d0             	movzx  edx,al
c0025592:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025595:	89 10                	mov    DWORD PTR [eax],edx
c0025597:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002559a:	83 c0 10             	add    eax,0x10
c002559d:	8b 00                	mov    eax,DWORD PTR [eax]
c002559f:	c9                   	leave  
c00255a0:	c3                   	ret    
c00255a1:	90                   	nop

c00255a2 <IOAPIC::open(int, int, void*)>:
c00255a2:	55                   	push   ebp
c00255a3:	89 e5                	mov    ebp,esp
c00255a5:	57                   	push   edi
c00255a6:	56                   	push   esi
c00255a7:	53                   	push   ebx
c00255a8:	83 ec 0c             	sub    esp,0xc
c00255ab:	83 ec 0c             	sub    esp,0xc
c00255ae:	68 ff ca 02 c0       	push   0xc002caff
c00255b3:	e8 57 d5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c00255b8:	83 c4 10             	add    esp,0x10
c00255bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00255c1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00255c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00255d0:	8b 14 85 c0 07 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf840]
c00255d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255da:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00255e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00255e9:	8b 14 85 40 08 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf7c0]
c00255f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255f3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00255f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025605:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002560b:	0f b6 f8             	movzx  edi,al
c002560e:	89 d0                	mov    eax,edx
c0025610:	ba 00 00 00 00       	mov    edx,0x0
c0025615:	89 c1                	mov    ecx,eax
c0025617:	80 e5 ff             	and    ch,0xff
c002561a:	89 cb                	mov    ebx,ecx
c002561c:	0f b6 f2             	movzx  esi,dl
c002561f:	89 d8                	mov    eax,ebx
c0025621:	89 f2                	mov    edx,esi
c0025623:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025626:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025629:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002562d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025631:	83 e0 00             	and    eax,0x0
c0025634:	09 d0                	or     eax,edx
c0025636:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002563a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002563d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025643:	8d 50 01             	lea    edx,[eax+0x1]
c0025646:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025649:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002564f:	0f b6 d0             	movzx  edx,al
c0025652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025655:	83 c2 08             	add    edx,0x8
c0025658:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002565c:	0f b6 c9             	movzx  ecx,cl
c002565f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025665:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025669:	83 ec 08             	sub    esp,0x8
c002566c:	6a 01                	push   0x1
c002566e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025671:	e8 04 ff ff ff       	call   c002557a <IOAPIC::read(int)>
c0025676:	83 c4 10             	add    esp,0x10
c0025679:	c1 f8 10             	sar    eax,0x10
c002567c:	0f b6 c0             	movzx  eax,al
c002567f:	8d 50 01             	lea    edx,[eax+0x1]
c0025682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025685:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002568b:	b8 00 00 00 00       	mov    eax,0x0
c0025690:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025693:	5b                   	pop    ebx
c0025694:	5e                   	pop    esi
c0025695:	5f                   	pop    edi
c0025696:	5d                   	pop    ebp
c0025697:	c3                   	ret    

c0025698 <IOAPIC::write(int, int)>:
c0025698:	55                   	push   ebp
c0025699:	89 e5                	mov    ebp,esp
c002569b:	83 ec 10             	sub    esp,0x10
c002569e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00256a7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00256aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256ad:	0f b6 d0             	movzx  edx,al
c00256b0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256b3:	89 10                	mov    DWORD PTR [eax],edx
c00256b5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256b8:	8d 50 10             	lea    edx,[eax+0x10]
c00256bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00256be:	89 02                	mov    DWORD PTR [edx],eax
c00256c0:	90                   	nop
c00256c1:	c9                   	leave  
c00256c2:	c3                   	ret    
c00256c3:	90                   	nop

c00256c4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00256c4:	55                   	push   ebp
c00256c5:	89 e5                	mov    ebp,esp
c00256c7:	53                   	push   ebx
c00256c8:	83 ec 2c             	sub    esp,0x2c
c00256cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256ce:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00256d1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00256d4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00256d7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00256da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00256dd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00256e0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00256e3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00256e6:	88 d8                	mov    al,bl
c00256e8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00256eb:	88 c8                	mov    al,cl
c00256ed:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00256f0:	88 d0                	mov    al,dl
c00256f2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00256f5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00256f9:	83 c0 08             	add    eax,0x8
c00256fc:	01 c0                	add    eax,eax
c00256fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025701:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025705:	83 c0 08             	add    eax,0x8
c0025708:	01 c0                	add    eax,eax
c002570a:	40                   	inc    eax
c002570b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002570e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025711:	50                   	push   eax
c0025712:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025715:	e8 60 fe ff ff       	call   c002557a <IOAPIC::read(int)>
c002571a:	83 c4 08             	add    esp,0x8
c002571d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025720:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025727:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002572a:	c1 e0 18             	shl    eax,0x18
c002572d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025730:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025733:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025736:	52                   	push   edx
c0025737:	50                   	push   eax
c0025738:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002573b:	e8 58 ff ff ff       	call   c0025698 <IOAPIC::write(int, int)>
c0025740:	83 c4 0c             	add    esp,0xc
c0025743:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025746:	50                   	push   eax
c0025747:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002574a:	e8 2b fe ff ff       	call   c002557a <IOAPIC::read(int)>
c002574f:	83 c4 08             	add    esp,0x8
c0025752:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025755:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002575c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025763:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002576a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002576e:	74 09                	je     c0025779 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025770:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025777:	eb 07                	jmp    c0025780 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025779:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025780:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025784:	74 09                	je     c002578f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025786:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002578d:	eb 07                	jmp    c0025796 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002578f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025796:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002579d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00257a1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00257a4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00257a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257aa:	52                   	push   edx
c00257ab:	50                   	push   eax
c00257ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257af:	e8 e4 fe ff ff       	call   c0025698 <IOAPIC::write(int, int)>
c00257b4:	83 c4 0c             	add    esp,0xc
c00257b7:	90                   	nop
c00257b8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00257bb:	c9                   	leave  
c00257bc:	c3                   	ret    
c00257bd:	90                   	nop

c00257be <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00257be:	55                   	push   ebp
c00257bf:	89 e5                	mov    ebp,esp
c00257c1:	57                   	push   edi
c00257c2:	56                   	push   esi
c00257c3:	53                   	push   ebx
c00257c4:	83 ec 2c             	sub    esp,0x2c
c00257c7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00257ca:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00257cd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00257d1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00257d5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00257d9:	74 5a                	je     c0025835 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00257db:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00257df:	7f 44                	jg     c0025825 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00257e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257e4:	05 40 d0 02 c0       	add    eax,0xc002d040
c00257e9:	8a 00                	mov    al,BYTE PTR [eax]
c00257eb:	0f b6 c0             	movzx  eax,al
c00257ee:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00257f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257f4:	66 8b 84 00 60 07 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf8a0]
c00257fc:	0f b7 c0             	movzx  eax,ax
c00257ff:	83 e0 02             	and    eax,0x2
c0025802:	85 c0                	test   eax,eax
c0025804:	74 04                	je     c002580a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025806:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002580a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002580d:	66 8b 84 00 60 07 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf8a0]
c0025815:	0f b7 c0             	movzx  eax,ax
c0025818:	83 e0 08             	and    eax,0x8
c002581b:	85 c0                	test   eax,eax
c002581d:	74 16                	je     c0025835 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002581f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025823:	eb 10                	jmp    c0025835 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025825:	83 ec 0c             	sub    esp,0xc
c0025828:	68 10 cb 02 c0       	push   0xc002cb10
c002582d:	e8 59 49 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0025832:	83 c4 10             	add    esp,0x10
c0025835:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025839:	a1 80 22 03 c0       	mov    eax,ds:0xc0032280
c002583e:	83 ec 08             	sub    esp,0x8
c0025841:	50                   	push   eax
c0025842:	68 48 cb 02 c0       	push   0xc002cb48
c0025847:	e8 c3 d2 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c002584c:	83 c4 10             	add    esp,0x10
c002584f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025856:	a1 80 22 03 c0       	mov    eax,ds:0xc0032280
c002585b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002585e:	7d 67                	jge    c00258c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025860:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025863:	8b 04 85 a0 22 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdd60]
c002586a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002586d:	83 ec 08             	sub    esp,0x8
c0025870:	52                   	push   edx
c0025871:	50                   	push   eax
c0025872:	e8 d1 fc ff ff       	call   c0025548 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025877:	83 c4 10             	add    esp,0x10
c002587a:	84 c0                	test   al,al
c002587c:	74 44                	je     c00258c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002587e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025881:	8b 1c 85 a0 22 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcdd60]
c0025888:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002588c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002588f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025893:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025896:	83 c0 20             	add    eax,0x20
c0025899:	0f b6 f0             	movzx  esi,al
c002589c:	b8 00 00 00 00       	mov    eax,0x0
c00258a1:	99                   	cdq    
c00258a2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00258a5:	0f b6 c9             	movzx  ecx,cl
c00258a8:	83 ec 04             	sub    esp,0x4
c00258ab:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00258ae:	57                   	push   edi
c00258af:	56                   	push   esi
c00258b0:	52                   	push   edx
c00258b1:	50                   	push   eax
c00258b2:	51                   	push   ecx
c00258b3:	53                   	push   ebx
c00258b4:	e8 0b fe ff ff       	call   c00256c4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00258b9:	83 c4 20             	add    esp,0x20
c00258bc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00258c0:	eb 05                	jmp    c00258c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00258c2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00258c5:	eb 8f                	jmp    c0025856 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00258c7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00258ca:	83 f0 01             	xor    eax,0x1
c00258cd:	84 c0                	test   al,al
c00258cf:	74 10                	je     c00258e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00258d1:	83 ec 0c             	sub    esp,0xc
c00258d4:	68 5f cb 02 c0       	push   0xc002cb5f
c00258d9:	e8 ad 48 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00258de:	83 c4 10             	add    esp,0x10
c00258e1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00258e5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00258ec:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00258f0:	7f 65                	jg     c0025957 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00258f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00258f8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00258ff:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025902:	01 ca                	add    edx,ecx
c0025904:	83 c2 54             	add    edx,0x54
c0025907:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002590b:	85 c0                	test   eax,eax
c002590d:	75 43                	jne    c0025952 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002590f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025912:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025915:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002591c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002591f:	01 ca                	add    edx,ecx
c0025921:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025924:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025927:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002592b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002592e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025931:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025938:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002593b:	01 ca                	add    edx,ecx
c002593d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025943:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025946:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002594a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002594d:	83 e8 20             	sub    eax,0x20
c0025950:	eb 1a                	jmp    c002596c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025952:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025955:	eb 95                	jmp    c00258ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025957:	83 ec 0c             	sub    esp,0xc
c002595a:	68 6c cb 02 c0       	push   0xc002cb6c
c002595f:	e8 27 48 ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0025964:	83 c4 10             	add    esp,0x10
c0025967:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002596c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002596f:	5b                   	pop    ebx
c0025970:	5e                   	pop    esi
c0025971:	5f                   	pop    edi
c0025972:	5d                   	pop    ebp
c0025973:	c3                   	ret    

c0025974 <PIC::disable()>:
c0025974:	55                   	push   ebp
c0025975:	89 e5                	mov    ebp,esp
c0025977:	83 ec 10             	sub    esp,0x10
c002597a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025980:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025984:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025987:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002598b:	ee                   	out    dx,al
c002598c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025992:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025996:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025999:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002599d:	ee                   	out    dx,al
c002599e:	90                   	nop
c002599f:	c9                   	leave  
c00259a0:	c3                   	ret    
c00259a1:	90                   	nop

c00259a2 <PIC::close(int, int, void*)>:
c00259a2:	55                   	push   ebp
c00259a3:	89 e5                	mov    ebp,esp
c00259a5:	83 ec 08             	sub    esp,0x8
c00259a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ad:	83 c0 3c             	add    eax,0x3c
c00259b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00259b2:	83 ec 0c             	sub    esp,0xc
c00259b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259b8:	ff d0                	call   eax
c00259ba:	83 c4 10             	add    esp,0x10
c00259bd:	b8 00 00 00 00       	mov    eax,0x0
c00259c2:	c9                   	leave  
c00259c3:	c3                   	ret    

c00259c4 <PIC::PIC()>:
c00259c4:	83 ec 0c             	sub    esp,0xc
c00259c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259cb:	83 ec 08             	sub    esp,0x8
c00259ce:	68 18 cc 02 c0       	push   0xc002cc18
c00259d3:	50                   	push   eax
c00259d4:	e8 b9 ee fe ff       	call   c0014892 <InterruptController::InterruptController(char const*)>
c00259d9:	83 c4 10             	add    esp,0x10
c00259dc:	ba 44 cc 02 c0       	mov    edx,0xc002cc44
c00259e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e5:	89 10                	mov    DWORD PTR [eax],edx
c00259e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00259f1:	0f b6 d0             	movzx  edx,al
c00259f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00259ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a03:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a09:	0f b6 d0             	movzx  edx,al
c0025a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a10:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a1f:	8d 50 01             	lea    edx,[eax+0x1]
c0025a22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a26:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025a2c:	0f b6 d0             	movzx  edx,al
c0025a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a33:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025a37:	83 e1 3f             	and    ecx,0x3f
c0025a3a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a48:	0f b6 d0             	movzx  edx,al
c0025a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a4f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a5a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a60:	0f b6 d0             	movzx  edx,al
c0025a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a67:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a70:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a76:	8d 50 01             	lea    edx,[eax+0x1]
c0025a79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a7d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025a83:	0f b6 d0             	movzx  edx,al
c0025a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a8a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025a8e:	83 e1 3f             	and    ecx,0x3f
c0025a91:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025a95:	90                   	nop
c0025a96:	83 c4 0c             	add    esp,0xc
c0025a99:	c3                   	ret    

c0025a9a <PIC::ioWait()>:
c0025a9a:	eb 00                	jmp    c0025a9c <PIC::ioWait()+0x2>
c0025a9c:	eb 00                	jmp    c0025a9e <PIC::ioWait()+0x4>
c0025a9e:	90                   	nop
c0025a9f:	c3                   	ret    

c0025aa0 <PIC::getIRQReg(int)>:
c0025aa0:	55                   	push   ebp
c0025aa1:	89 e5                	mov    ebp,esp
c0025aa3:	83 ec 10             	sub    esp,0x10
c0025aa6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aa9:	0f b6 c0             	movzx  eax,al
c0025aac:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ab2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025ab5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ab8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025abc:	ee                   	out    dx,al
c0025abd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ac0:	0f b6 c0             	movzx  eax,al
c0025ac3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025ac9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025acc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025acf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ad3:	ee                   	out    dx,al
c0025ad4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025ada:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025ade:	89 c2                	mov    edx,eax
c0025ae0:	ec                   	in     al,dx
c0025ae1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025ae4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ae7:	0f b6 c0             	movzx  eax,al
c0025aea:	c1 e0 08             	shl    eax,0x8
c0025aed:	89 c1                	mov    ecx,eax
c0025aef:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025af5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025af9:	89 c2                	mov    edx,eax
c0025afb:	ec                   	in     al,dx
c0025afc:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025aff:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025b02:	0f b6 c0             	movzx  eax,al
c0025b05:	09 c8                	or     eax,ecx
c0025b07:	c9                   	leave  
c0025b08:	c3                   	ret    
c0025b09:	90                   	nop

c0025b0a <PIC::eoi(unsigned char)>:
c0025b0a:	55                   	push   ebp
c0025b0b:	89 e5                	mov    ebp,esp
c0025b0d:	83 ec 14             	sub    esp,0x14
c0025b10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b13:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025b16:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025b1a:	75 1e                	jne    c0025b3a <PIC::eoi(unsigned char)+0x30>
c0025b1c:	6a 0b                	push   0xb
c0025b1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b21:	e8 7a ff ff ff       	call   c0025aa0 <PIC::getIRQReg(int)>
c0025b26:	83 c4 08             	add    esp,0x8
c0025b29:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025b2d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025b31:	25 80 00 00 00       	and    eax,0x80
c0025b36:	85 c0                	test   eax,eax
c0025b38:	74 5f                	je     c0025b99 <PIC::eoi(unsigned char)+0x8f>
c0025b3a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025b3e:	75 2d                	jne    c0025b6d <PIC::eoi(unsigned char)+0x63>
c0025b40:	6a 0b                	push   0xb
c0025b42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b45:	e8 56 ff ff ff       	call   c0025aa0 <PIC::getIRQReg(int)>
c0025b4a:	83 c4 08             	add    esp,0x8
c0025b4d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025b51:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b54:	66 85 c0             	test   ax,ax
c0025b57:	78 14                	js     c0025b6d <PIC::eoi(unsigned char)+0x63>
c0025b59:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025b5f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025b63:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b66:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025b6a:	ee                   	out    dx,al
c0025b6b:	eb 2d                	jmp    c0025b9a <PIC::eoi(unsigned char)+0x90>
c0025b6d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025b71:	76 12                	jbe    c0025b85 <PIC::eoi(unsigned char)+0x7b>
c0025b73:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025b79:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025b7d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025b80:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025b84:	ee                   	out    dx,al
c0025b85:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025b8b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025b8f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025b92:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025b96:	ee                   	out    dx,al
c0025b97:	eb 01                	jmp    c0025b9a <PIC::eoi(unsigned char)+0x90>
c0025b99:	90                   	nop
c0025b9a:	c9                   	leave  
c0025b9b:	c3                   	ret    

c0025b9c <PIC::remap()>:
c0025b9c:	55                   	push   ebp
c0025b9d:	89 e5                	mov    ebp,esp
c0025b9f:	83 ec 48             	sub    esp,0x48
c0025ba2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025ba9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025bb0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025bb6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025bb9:	89 c2                	mov    edx,eax
c0025bbb:	ec                   	in     al,dx
c0025bbc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025bbf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025bc2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025bc5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025bcb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025bce:	89 c2                	mov    edx,eax
c0025bd0:	ec                   	in     al,dx
c0025bd1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025bd4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025bd7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025bda:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025be0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025be4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025be7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025bea:	ee                   	out    dx,al
c0025beb:	83 ec 0c             	sub    esp,0xc
c0025bee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bf1:	e8 a4 fe ff ff       	call   c0025a9a <PIC::ioWait()>
c0025bf6:	83 c4 10             	add    esp,0x10
c0025bf9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025bff:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025c03:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025c06:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025c09:	ee                   	out    dx,al
c0025c0a:	83 ec 0c             	sub    esp,0xc
c0025c0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c10:	e8 85 fe ff ff       	call   c0025a9a <PIC::ioWait()>
c0025c15:	83 c4 10             	add    esp,0x10
c0025c18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025c1b:	0f b6 c0             	movzx  eax,al
c0025c1e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025c24:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025c27:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025c2a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025c2d:	ee                   	out    dx,al
c0025c2e:	83 ec 0c             	sub    esp,0xc
c0025c31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c34:	e8 61 fe ff ff       	call   c0025a9a <PIC::ioWait()>
c0025c39:	83 c4 10             	add    esp,0x10
c0025c3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c3f:	0f b6 c0             	movzx  eax,al
c0025c42:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025c48:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025c4b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025c4e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025c51:	ee                   	out    dx,al
c0025c52:	83 ec 0c             	sub    esp,0xc
c0025c55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c58:	e8 3d fe ff ff       	call   c0025a9a <PIC::ioWait()>
c0025c5d:	83 c4 10             	add    esp,0x10
c0025c60:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025c66:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025c6a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025c6d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025c70:	ee                   	out    dx,al
c0025c71:	83 ec 0c             	sub    esp,0xc
c0025c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c77:	e8 1e fe ff ff       	call   c0025a9a <PIC::ioWait()>
c0025c7c:	83 c4 10             	add    esp,0x10
c0025c7f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025c85:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025c89:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025c8c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c8f:	ee                   	out    dx,al
c0025c90:	83 ec 0c             	sub    esp,0xc
c0025c93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c96:	e8 ff fd ff ff       	call   c0025a9a <PIC::ioWait()>
c0025c9b:	83 c4 10             	add    esp,0x10
c0025c9e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025ca4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025ca8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025cab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025cae:	ee                   	out    dx,al
c0025caf:	83 ec 0c             	sub    esp,0xc
c0025cb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cb5:	e8 e0 fd ff ff       	call   c0025a9a <PIC::ioWait()>
c0025cba:	83 c4 10             	add    esp,0x10
c0025cbd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025cc3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025cc7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025cca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ccd:	ee                   	out    dx,al
c0025cce:	83 ec 0c             	sub    esp,0xc
c0025cd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cd4:	e8 c1 fd ff ff       	call   c0025a9a <PIC::ioWait()>
c0025cd9:	83 c4 10             	add    esp,0x10
c0025cdc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025ce0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025ce6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025ce9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025cec:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cef:	ee                   	out    dx,al
c0025cf0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025cf4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025cfa:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025cfd:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025d00:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025d03:	ee                   	out    dx,al
c0025d04:	90                   	nop
c0025d05:	c9                   	leave  
c0025d06:	c3                   	ret    
c0025d07:	90                   	nop

c0025d08 <PIC::open(int, int, void*)>:
c0025d08:	55                   	push   ebp
c0025d09:	89 e5                	mov    ebp,esp
c0025d0b:	83 ec 18             	sub    esp,0x18
c0025d0e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025d14:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025d18:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d1b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d1f:	ee                   	out    dx,al
c0025d20:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025d26:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025d2a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d2d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d31:	ee                   	out    dx,al
c0025d32:	83 ec 0c             	sub    esp,0xc
c0025d35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d38:	e8 5f fe ff ff       	call   c0025b9c <PIC::remap()>
c0025d3d:	83 c4 10             	add    esp,0x10
c0025d40:	b8 00 00 00 00       	mov    eax,0x0
c0025d45:	c9                   	leave  
c0025d46:	c3                   	ret    
c0025d47:	90                   	nop

c0025d48 <APICTimer::close(int, int, void*)>:
c0025d48:	b8 00 00 00 00       	mov    eax,0x0
c0025d4d:	c3                   	ret    

c0025d4e <apicTimerHandler(regs*, void*)>:
c0025d4e:	83 ec 0c             	sub    esp,0xc
c0025d51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d55:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d57:	99                   	cdq    
c0025d58:	52                   	push   edx
c0025d59:	50                   	push   eax
c0025d5a:	6a 00                	push   0x0
c0025d5c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025d61:	e8 86 07 00 00       	call   c00264ec <__udivdi3>
c0025d66:	83 c4 10             	add    esp,0x10
c0025d69:	83 ec 08             	sub    esp,0x8
c0025d6c:	52                   	push   edx
c0025d6d:	50                   	push   eax
c0025d6e:	e8 44 0b ff ff       	call   c00168b7 <timerHandler(unsigned long long)>
c0025d73:	83 c4 10             	add    esp,0x10
c0025d76:	90                   	nop
c0025d77:	83 c4 0c             	add    esp,0xc
c0025d7a:	c3                   	ret    
c0025d7b:	90                   	nop

c0025d7c <APICTimer::write(int)>:
c0025d7c:	53                   	push   ebx
c0025d7d:	83 ec 28             	sub    esp,0x28
c0025d80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025d84:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025d88:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025d8e:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0025d93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025d99:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025d9f:	83 ec 0c             	sub    esp,0xc
c0025da2:	50                   	push   eax
c0025da3:	e8 de f4 ff ff       	call   c0025286 <APIC::getBase()>
c0025da8:	83 c4 10             	add    esp,0x10
c0025dab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025daf:	a1 70 e4 02 c0       	mov    eax,ds:0xc002e470
c0025db4:	8b 15 74 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e474
c0025dba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025dbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025dc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025dc6:	05 e0 03 00 00       	add    eax,0x3e0
c0025dcb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025dd5:	05 80 03 00 00       	add    eax,0x380
c0025dda:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025de0:	fb                   	sti    
c0025de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025de5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025de9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025dee:	83 d2 00             	adc    edx,0x0
c0025df1:	89 c1                	mov    ecx,eax
c0025df3:	89 d3                	mov    ebx,edx
c0025df5:	a1 70 e4 02 c0       	mov    eax,ds:0xc002e470
c0025dfa:	8b 15 74 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e474
c0025e00:	39 c8                	cmp    eax,ecx
c0025e02:	89 d0                	mov    eax,edx
c0025e04:	19 d8                	sbb    eax,ebx
c0025e06:	73 02                	jae    c0025e0a <APICTimer::write(int)+0x8e>
c0025e08:	eb d7                	jmp    c0025de1 <APICTimer::write(int)+0x65>
c0025e0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e0e:	05 20 03 00 00       	add    eax,0x320
c0025e13:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e1d:	05 90 03 00 00       	add    eax,0x390
c0025e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e24:	f7 d0                	not    eax
c0025e26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025e2a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025e32:	ba 00 00 00 00       	mov    edx,0x0
c0025e37:	f7 f3                	div    ebx
c0025e39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025e3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025e41:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e47:	0d 00 00 02 00       	or     eax,0x20000
c0025e4c:	89 c2                	mov    edx,eax
c0025e4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e52:	05 20 03 00 00       	add    eax,0x320
c0025e57:	89 10                	mov    DWORD PTR [eax],edx
c0025e59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e5d:	05 e0 03 00 00       	add    eax,0x3e0
c0025e62:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025e68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e6c:	05 80 03 00 00       	add    eax,0x380
c0025e71:	89 c2                	mov    edx,eax
c0025e73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025e77:	89 02                	mov    DWORD PTR [edx],eax
c0025e79:	90                   	nop
c0025e7a:	83 c4 28             	add    esp,0x28
c0025e7d:	5b                   	pop    ebx
c0025e7e:	c3                   	ret    
c0025e7f:	90                   	nop

c0025e80 <APICTimer::open(int, int, void*)>:
c0025e80:	57                   	push   edi
c0025e81:	56                   	push   esi
c0025e82:	53                   	push   ebx
c0025e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e87:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e89:	83 c0 24             	add    eax,0x24
c0025e8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e8e:	83 ec 08             	sub    esp,0x8
c0025e91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e99:	ff d0                	call   eax
c0025e9b:	83 c4 10             	add    esp,0x10
c0025e9e:	a1 e8 dd 02 c0       	mov    eax,ds:0xc002dde8
c0025ea3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ea9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025eaf:	83 ec 0c             	sub    esp,0xc
c0025eb2:	50                   	push   eax
c0025eb3:	e8 ce f3 ff ff       	call   c0025286 <APIC::getBase()>
c0025eb8:	83 c4 10             	add    esp,0x10
c0025ebb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ecb:	0f b6 f8             	movzx  edi,al
c0025ece:	89 d0                	mov    eax,edx
c0025ed0:	ba 00 00 00 00       	mov    edx,0x0
c0025ed5:	89 c1                	mov    ecx,eax
c0025ed7:	80 e5 ff             	and    ch,0xff
c0025eda:	89 cb                	mov    ebx,ecx
c0025edc:	0f b6 f2             	movzx  esi,dl
c0025edf:	89 d8                	mov    eax,ebx
c0025ee1:	89 f2                	mov    edx,esi
c0025ee3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ee7:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025eea:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025eee:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ef2:	83 e0 00             	and    eax,0x0
c0025ef5:	09 d0                	or     eax,edx
c0025ef7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f05:	8d 50 01             	lea    edx,[eax+0x1]
c0025f08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f0c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025f12:	0f b6 d0             	movzx  edx,al
c0025f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f19:	83 c2 08             	add    edx,0x8
c0025f1c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025f20:	0f b6 c9             	movzx  ecx,cl
c0025f23:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025f29:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025f35:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025f43:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025f49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025f4d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025f53:	83 ec 0c             	sub    esp,0xc
c0025f56:	51                   	push   ecx
c0025f57:	6a 01                	push   0x1
c0025f59:	68 4e 5d 02 c0       	push   0xc0025d4e
c0025f5e:	52                   	push   edx
c0025f5f:	50                   	push   eax
c0025f60:	e8 55 df fe ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025f65:	83 c4 20             	add    esp,0x20
c0025f68:	89 c2                	mov    edx,eax
c0025f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025f74:	b8 00 00 00 00       	mov    eax,0x0
c0025f79:	5b                   	pop    ebx
c0025f7a:	5e                   	pop    esi
c0025f7b:	5f                   	pop    edi
c0025f7c:	c3                   	ret    
c0025f7d:	90                   	nop

c0025f7e <APICTimer::APICTimer()>:
c0025f7e:	83 ec 0c             	sub    esp,0xc
c0025f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f85:	83 ec 08             	sub    esp,0x8
c0025f88:	68 84 cc 02 c0       	push   0xc002cc84
c0025f8d:	50                   	push   eax
c0025f8e:	e8 95 08 ff ff       	call   c0016828 <Timer::Timer(char const*)>
c0025f93:	83 c4 10             	add    esp,0x10
c0025f96:	ba 98 cc 02 c0       	mov    edx,0xc002cc98
c0025f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9f:	89 10                	mov    DWORD PTR [eax],edx
c0025fa1:	90                   	nop
c0025fa2:	83 c4 0c             	add    esp,0xc
c0025fa5:	c3                   	ret    

c0025fa6 <PIT::write(int)>:
c0025fa6:	83 ec 10             	sub    esp,0x10
c0025fa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025fb1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025fb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025fbb:	a3 c4 22 03 c0       	mov    ds:0xc00322c4,eax
c0025fc0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025fc5:	99                   	cdq    
c0025fc6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025fce:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025fd5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025fda:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025fde:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025fe3:	ee                   	out    dx,al
c0025fe4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025fe8:	0f b6 c0             	movzx  eax,al
c0025feb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025ff2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025ff6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025ffa:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025fff:	ee                   	out    dx,al
c0026000:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026004:	c1 f8 08             	sar    eax,0x8
c0026007:	0f b6 c0             	movzx  eax,al
c002600a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026011:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026015:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026019:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002601e:	ee                   	out    dx,al
c002601f:	90                   	nop
c0026020:	83 c4 10             	add    esp,0x10
c0026023:	c3                   	ret    

c0026024 <pitHandler(regs*, void*)>:
c0026024:	83 ec 0c             	sub    esp,0xc
c0026027:	a1 c4 22 03 c0       	mov    eax,ds:0xc00322c4
c002602c:	99                   	cdq    
c002602d:	52                   	push   edx
c002602e:	50                   	push   eax
c002602f:	6a 00                	push   0x0
c0026031:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026036:	e8 b1 04 00 00       	call   c00264ec <__udivdi3>
c002603b:	83 c4 10             	add    esp,0x10
c002603e:	83 ec 08             	sub    esp,0x8
c0026041:	52                   	push   edx
c0026042:	50                   	push   eax
c0026043:	e8 6f 08 ff ff       	call   c00168b7 <timerHandler(unsigned long long)>
c0026048:	83 c4 10             	add    esp,0x10
c002604b:	90                   	nop
c002604c:	83 c4 0c             	add    esp,0xc
c002604f:	c3                   	ret    

c0026050 <PIT::open(int, int, void*)>:
c0026050:	83 ec 0c             	sub    esp,0xc
c0026053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026057:	8b 00                	mov    eax,DWORD PTR [eax]
c0026059:	83 c0 24             	add    eax,0x24
c002605c:	8b 00                	mov    eax,DWORD PTR [eax]
c002605e:	83 ec 08             	sub    esp,0x8
c0026061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026069:	ff d0                	call   eax
c002606b:	83 c4 10             	add    esp,0x10
c002606e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026072:	83 ec 0c             	sub    esp,0xc
c0026075:	6a 00                	push   0x0
c0026077:	6a 01                	push   0x1
c0026079:	68 24 60 02 c0       	push   0xc0026024
c002607e:	6a 00                	push   0x0
c0026080:	50                   	push   eax
c0026081:	e8 34 de fe ff       	call   c0013eba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026086:	83 c4 20             	add    esp,0x20
c0026089:	89 c2                	mov    edx,eax
c002608b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002608f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026095:	b8 00 00 00 00       	mov    eax,0x0
c002609a:	83 c4 0c             	add    esp,0xc
c002609d:	c3                   	ret    

c002609e <PIT::close(int, int, void*)>:
c002609e:	83 ec 0c             	sub    esp,0xc
c00260a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260a5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00260af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b3:	6a 01                	push   0x1
c00260b5:	68 24 60 02 c0       	push   0xc0026024
c00260ba:	6a 00                	push   0x0
c00260bc:	50                   	push   eax
c00260bd:	e8 36 de fe ff       	call   c0013ef8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00260c2:	83 c4 10             	add    esp,0x10
c00260c5:	b8 00 00 00 00       	mov    eax,0x0
c00260ca:	83 c4 0c             	add    esp,0xc
c00260cd:	c3                   	ret    

c00260ce <PIT::PIT()>:
c00260ce:	83 ec 0c             	sub    esp,0xc
c00260d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d5:	83 ec 08             	sub    esp,0x8
c00260d8:	68 c0 cc 02 c0       	push   0xc002ccc0
c00260dd:	50                   	push   eax
c00260de:	e8 45 07 ff ff       	call   c0016828 <Timer::Timer(char const*)>
c00260e3:	83 c4 10             	add    esp,0x10
c00260e6:	ba e8 cc 02 c0       	mov    edx,0xc002cce8
c00260eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ef:	89 10                	mov    DWORD PTR [eax],edx
c00260f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00260fb:	0f b6 d0             	movzx  edx,al
c00260fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026102:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002610d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026113:	0f b6 d0             	movzx  edx,al
c0026116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002611a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002611f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026123:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026129:	8d 50 01             	lea    edx,[eax+0x1]
c002612c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026130:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026136:	0f b6 d0             	movzx  edx,al
c0026139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002613d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026141:	83 e1 3f             	and    ecx,0x3f
c0026144:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026148:	90                   	nop
c0026149:	83 c4 0c             	add    esp,0xc
c002614c:	c3                   	ret    
c002614d:	66 90                	xchg   ax,ax
c002614f:	90                   	nop

c0026150 <avxDetect>:
c0026150:	b8 00 00 00 00       	mov    eax,0x0
c0026155:	c3                   	ret    

c0026156 <avxSave>:
c0026156:	c3                   	ret    

c0026157 <avxLoad>:
c0026157:	c3                   	ret    

c0026158 <avxInit>:
c0026158:	c3                   	ret    

c0026159 <avxClose>:
c0026159:	c3                   	ret    

c002615a <wouldSheSayYes>:
c002615a:	c3                   	ret    
c002615b:	49                   	dec    ecx
c002615c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026160:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026164:	75 20                	jne    c0026186 <sseDetect.noSSE+0x1>
c0026166:	4e                   	dec    esi
c0026167:	79 61                	jns    c00261ca <x87Detect+0x14>
c0026169:	68 2e 2e 2e 00       	push   0x2e2e2e
c002616e:	66 90                	xchg   ax,ax

c0026170 <absolutelyNoChanceInHell>:
c0026170:	b8 01 00 00 00       	mov    eax,0x1
c0026175:	0f a2                	cpuid  
c0026177:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002617d:	74 06                	je     c0026185 <sseDetect.noSSE>
c002617f:	b8 01 00 00 00       	mov    eax,0x1
c0026184:	c3                   	ret    

c0026185 <sseDetect.noSSE>:
c0026185:	31 c0                	xor    eax,eax
c0026187:	c3                   	ret    

c0026188 <sseSave>:
c0026188:	0f ae 44 24 08       	fxsave [esp+0x8]
c002618d:	c3                   	ret    

c002618e <sseLoad>:
c002618e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026193:	c3                   	ret    

c0026194 <sseInit>:
c0026194:	e8 43 00 00 00       	call   c00261dc <x87Init>
c0026199:	0f 20 e0             	mov    eax,cr4
c002619c:	66 0d 00 06          	or     ax,0x600
c00261a0:	0f 22 e0             	mov    cr4,eax
c00261a3:	c3                   	ret    

c00261a4 <sseClose>:
c00261a4:	c3                   	ret    
c00261a5:	66 90                	xchg   ax,ax
c00261a7:	66 90                	xchg   ax,ax
c00261a9:	66 90                	xchg   ax,ax
c00261ab:	66 90                	xchg   ax,ax
c00261ad:	66 90                	xchg   ax,ax
c00261af:	90                   	nop

c00261b0 <value_37F>:
c00261b0:	7f 03                	jg     c00261b5 <value_37A+0x1>

c00261b2 <value_37E>:
c00261b2:	7e 03                	jle    c00261b7 <x87Detect+0x1>

c00261b4 <value_37A>:
c00261b4:	7a 03                	jp     c00261b9 <x87Detect+0x3>

c00261b6 <x87Detect>:
c00261b6:	b8 01 00 00 00       	mov    eax,0x1
c00261bb:	0f a2                	cpuid  
c00261bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00261c3:	74 06                	je     c00261cb <x87Detect.nox87>
c00261c5:	b8 01 00 00 00       	mov    eax,0x1
c00261ca:	c3                   	ret    

c00261cb <x87Detect.nox87>:
c00261cb:	b8 00 00 00 00       	mov    eax,0x0
c00261d0:	c3                   	ret    

c00261d1 <x87Save>:
c00261d1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00261d6:	c3                   	ret    

c00261d7 <x87Load>:
c00261d7:	dd 64 24 08          	frstor [esp+0x8]
c00261db:	c3                   	ret    

c00261dc <x87Init>:
c00261dc:	9b db e3             	finit  
c00261df:	0f 20 c0             	mov    eax,cr0
c00261e2:	66 25 fb ff          	and    ax,0xfffb
c00261e6:	66 0d 22 00          	or     ax,0x22
c00261ea:	0f 22 c0             	mov    cr0,eax
c00261ed:	0f 06                	clts   
c00261ef:	d9 2d b4 61 02 c0    	fldcw  WORD PTR ds:0xc00261b4
c00261f5:	c3                   	ret    

c00261f6 <x87Close>:
c00261f6:	c3                   	ret    
c00261f7:	90                   	nop

c00261f8 <__do_global_ctors_aux>:
c00261f8:	a1 3c 8d 02 c0       	mov    eax,ds:0xc0028d3c
c00261fd:	83 f8 ff             	cmp    eax,0xffffffff
c0026200:	74 1a                	je     c002621c <__do_global_ctors_aux+0x24>
c0026202:	55                   	push   ebp
c0026203:	89 e5                	mov    ebp,esp
c0026205:	53                   	push   ebx
c0026206:	52                   	push   edx
c0026207:	bb 3c 8d 02 c0       	mov    ebx,0xc0028d3c
c002620c:	ff d0                	call   eax
c002620e:	83 eb 04             	sub    ebx,0x4
c0026211:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026213:	83 f8 ff             	cmp    eax,0xffffffff
c0026216:	75 f4                	jne    c002620c <__do_global_ctors_aux+0x14>
c0026218:	58                   	pop    eax
c0026219:	5b                   	pop    ebx
c002621a:	5d                   	pop    ebp
c002621b:	c3                   	ret    
c002621c:	c3                   	ret    
c002621d:	66 90                	xchg   ax,ax
c002621f:	90                   	nop

c0026220 <__divdi3>:
c0026220:	55                   	push   ebp
c0026221:	57                   	push   edi
c0026222:	56                   	push   esi
c0026223:	53                   	push   ebx
c0026224:	83 ec 1c             	sub    esp,0x1c
c0026227:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002622b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002622f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026232:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002623a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002623e:	85 db                	test   ebx,ebx
c0026240:	0f 88 8e 00 00 00    	js     c00262d4 <__divdi3+0xb4>
c0026246:	89 dd                	mov    ebp,ebx
c0026248:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026250:	89 d3                	mov    ebx,edx
c0026252:	85 d2                	test   edx,edx
c0026254:	79 0d                	jns    c0026263 <__divdi3+0x43>
c0026256:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002625a:	f7 d8                	neg    eax
c002625c:	83 d2 00             	adc    edx,0x0
c002625f:	f7 da                	neg    edx
c0026261:	89 d3                	mov    ebx,edx
c0026263:	89 c7                	mov    edi,eax
c0026265:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026268:	85 db                	test   ebx,ebx
c002626a:	75 48                	jne    c00262b4 <__divdi3+0x94>
c002626c:	39 ef                	cmp    edi,ebp
c002626e:	76 24                	jbe    c0026294 <__divdi3+0x74>
c0026270:	89 ea                	mov    edx,ebp
c0026272:	f7 f7                	div    edi
c0026274:	89 c1                	mov    ecx,eax
c0026276:	31 f6                	xor    esi,esi
c0026278:	89 c8                	mov    eax,ecx
c002627a:	89 f2                	mov    edx,esi
c002627c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026280:	85 c9                	test   ecx,ecx
c0026282:	74 07                	je     c002628b <__divdi3+0x6b>
c0026284:	f7 d8                	neg    eax
c0026286:	83 d2 00             	adc    edx,0x0
c0026289:	f7 da                	neg    edx
c002628b:	83 c4 1c             	add    esp,0x1c
c002628e:	5b                   	pop    ebx
c002628f:	5e                   	pop    esi
c0026290:	5f                   	pop    edi
c0026291:	5d                   	pop    ebp
c0026292:	c3                   	ret    
c0026293:	90                   	nop
c0026294:	85 ff                	test   edi,edi
c0026296:	75 0b                	jne    c00262a3 <__divdi3+0x83>
c0026298:	b8 01 00 00 00       	mov    eax,0x1
c002629d:	31 d2                	xor    edx,edx
c002629f:	f7 f3                	div    ebx
c00262a1:	89 c7                	mov    edi,eax
c00262a3:	31 d2                	xor    edx,edx
c00262a5:	89 e8                	mov    eax,ebp
c00262a7:	f7 f7                	div    edi
c00262a9:	89 c6                	mov    esi,eax
c00262ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00262ae:	f7 f7                	div    edi
c00262b0:	89 c1                	mov    ecx,eax
c00262b2:	eb c4                	jmp    c0026278 <__divdi3+0x58>
c00262b4:	39 eb                	cmp    ebx,ebp
c00262b6:	77 3c                	ja     c00262f4 <__divdi3+0xd4>
c00262b8:	0f bd f3             	bsr    esi,ebx
c00262bb:	83 f6 1f             	xor    esi,0x1f
c00262be:	75 40                	jne    c0026300 <__divdi3+0xe0>
c00262c0:	39 eb                	cmp    ebx,ebp
c00262c2:	72 09                	jb     c00262cd <__divdi3+0xad>
c00262c4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00262c7:	0f 87 97 00 00 00    	ja     c0026364 <__divdi3+0x144>
c00262cd:	b9 01 00 00 00       	mov    ecx,0x1
c00262d2:	eb a4                	jmp    c0026278 <__divdi3+0x58>
c00262d4:	f7 d9                	neg    ecx
c00262d6:	83 d3 00             	adc    ebx,0x0
c00262d9:	f7 db                	neg    ebx
c00262db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00262de:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00262e2:	89 dd                	mov    ebp,ebx
c00262e4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00262ec:	e9 5f ff ff ff       	jmp    c0026250 <__divdi3+0x30>
c00262f1:	8d 76 00             	lea    esi,[esi+0x0]
c00262f4:	31 f6                	xor    esi,esi
c00262f6:	31 c9                	xor    ecx,ecx
c00262f8:	e9 7b ff ff ff       	jmp    c0026278 <__divdi3+0x58>
c00262fd:	8d 76 00             	lea    esi,[esi+0x0]
c0026300:	b8 20 00 00 00       	mov    eax,0x20
c0026305:	29 f0                	sub    eax,esi
c0026307:	89 f1                	mov    ecx,esi
c0026309:	d3 e3                	shl    ebx,cl
c002630b:	89 fa                	mov    edx,edi
c002630d:	88 c1                	mov    cl,al
c002630f:	d3 ea                	shr    edx,cl
c0026311:	09 da                	or     edx,ebx
c0026313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026317:	89 f1                	mov    ecx,esi
c0026319:	d3 e7                	shl    edi,cl
c002631b:	89 eb                	mov    ebx,ebp
c002631d:	88 c1                	mov    cl,al
c002631f:	d3 eb                	shr    ebx,cl
c0026321:	89 f1                	mov    ecx,esi
c0026323:	d3 e5                	shl    ebp,cl
c0026325:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026328:	88 c1                	mov    cl,al
c002632a:	d3 ea                	shr    edx,cl
c002632c:	09 d5                	or     ebp,edx
c002632e:	89 e8                	mov    eax,ebp
c0026330:	89 da                	mov    edx,ebx
c0026332:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026336:	89 d3                	mov    ebx,edx
c0026338:	89 c5                	mov    ebp,eax
c002633a:	f7 e7                	mul    edi
c002633c:	39 d3                	cmp    ebx,edx
c002633e:	72 18                	jb     c0026358 <__divdi3+0x138>
c0026340:	74 0a                	je     c002634c <__divdi3+0x12c>
c0026342:	89 e9                	mov    ecx,ebp
c0026344:	31 f6                	xor    esi,esi
c0026346:	e9 2d ff ff ff       	jmp    c0026278 <__divdi3+0x58>
c002634b:	90                   	nop
c002634c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002634f:	89 f1                	mov    ecx,esi
c0026351:	d3 e7                	shl    edi,cl
c0026353:	39 c7                	cmp    edi,eax
c0026355:	73 eb                	jae    c0026342 <__divdi3+0x122>
c0026357:	90                   	nop
c0026358:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002635b:	31 f6                	xor    esi,esi
c002635d:	e9 16 ff ff ff       	jmp    c0026278 <__divdi3+0x58>
c0026362:	66 90                	xchg   ax,ax
c0026364:	31 c9                	xor    ecx,ecx
c0026366:	e9 0d ff ff ff       	jmp    c0026278 <__divdi3+0x58>
c002636b:	90                   	nop

c002636c <__moddi3>:
c002636c:	55                   	push   ebp
c002636d:	57                   	push   edi
c002636e:	56                   	push   esi
c002636f:	53                   	push   ebx
c0026370:	83 ec 2c             	sub    esp,0x2c
c0026373:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026377:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002637b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002637f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026383:	85 db                	test   ebx,ebx
c0026385:	0f 88 85 00 00 00    	js     c0026410 <__moddi3+0xa4>
c002638b:	89 de                	mov    esi,ebx
c002638d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026395:	89 d7                	mov    edi,edx
c0026397:	85 d2                	test   edx,edx
c0026399:	79 09                	jns    c00263a4 <__moddi3+0x38>
c002639b:	f7 d8                	neg    eax
c002639d:	83 d2 00             	adc    edx,0x0
c00263a0:	f7 da                	neg    edx
c00263a2:	89 d7                	mov    edi,edx
c00263a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263a8:	89 cd                	mov    ebp,ecx
c00263aa:	85 ff                	test   edi,edi
c00263ac:	75 52                	jne    c0026400 <__moddi3+0x94>
c00263ae:	89 c3                	mov    ebx,eax
c00263b0:	39 f0                	cmp    eax,esi
c00263b2:	76 24                	jbe    c00263d8 <__moddi3+0x6c>
c00263b4:	89 c8                	mov    eax,ecx
c00263b6:	89 f2                	mov    edx,esi
c00263b8:	f7 f3                	div    ebx
c00263ba:	89 d6                	mov    esi,edx
c00263bc:	89 f0                	mov    eax,esi
c00263be:	31 d2                	xor    edx,edx
c00263c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263c4:	85 c9                	test   ecx,ecx
c00263c6:	74 07                	je     c00263cf <__moddi3+0x63>
c00263c8:	f7 d8                	neg    eax
c00263ca:	83 d2 00             	adc    edx,0x0
c00263cd:	f7 da                	neg    edx
c00263cf:	83 c4 2c             	add    esp,0x2c
c00263d2:	5b                   	pop    ebx
c00263d3:	5e                   	pop    esi
c00263d4:	5f                   	pop    edi
c00263d5:	5d                   	pop    ebp
c00263d6:	c3                   	ret    
c00263d7:	90                   	nop
c00263d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00263dc:	85 db                	test   ebx,ebx
c00263de:	75 0d                	jne    c00263ed <__moddi3+0x81>
c00263e0:	b8 01 00 00 00       	mov    eax,0x1
c00263e5:	31 d2                	xor    edx,edx
c00263e7:	f7 f7                	div    edi
c00263e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263ed:	89 f0                	mov    eax,esi
c00263ef:	31 d2                	xor    edx,edx
c00263f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00263f5:	f7 f7                	div    edi
c00263f7:	89 e8                	mov    eax,ebp
c00263f9:	f7 f7                	div    edi
c00263fb:	89 d6                	mov    esi,edx
c00263fd:	eb bd                	jmp    c00263bc <__moddi3+0x50>
c00263ff:	90                   	nop
c0026400:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026404:	39 f7                	cmp    edi,esi
c0026406:	76 20                	jbe    c0026428 <__moddi3+0xbc>
c0026408:	89 c8                	mov    eax,ecx
c002640a:	89 f2                	mov    edx,esi
c002640c:	eb b2                	jmp    c00263c0 <__moddi3+0x54>
c002640e:	66 90                	xchg   ax,ax
c0026410:	f7 d9                	neg    ecx
c0026412:	83 d3 00             	adc    ebx,0x0
c0026415:	f7 db                	neg    ebx
c0026417:	89 de                	mov    esi,ebx
c0026419:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026421:	e9 6f ff ff ff       	jmp    c0026395 <__moddi3+0x29>
c0026426:	66 90                	xchg   ax,ax
c0026428:	0f bd c7             	bsr    eax,edi
c002642b:	83 f0 1f             	xor    eax,0x1f
c002642e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026432:	75 24                	jne    c0026458 <__moddi3+0xec>
c0026434:	39 f7                	cmp    edi,esi
c0026436:	72 06                	jb     c002643e <__moddi3+0xd2>
c0026438:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002643c:	77 0c                	ja     c002644a <__moddi3+0xde>
c002643e:	89 e9                	mov    ecx,ebp
c0026440:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026444:	19 fe                	sbb    esi,edi
c0026446:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002644a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002644e:	89 f2                	mov    edx,esi
c0026450:	e9 6b ff ff ff       	jmp    c00263c0 <__moddi3+0x54>
c0026455:	8d 76 00             	lea    esi,[esi+0x0]
c0026458:	b8 20 00 00 00       	mov    eax,0x20
c002645d:	89 c2                	mov    edx,eax
c002645f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026463:	29 da                	sub    edx,ebx
c0026465:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026469:	88 d9                	mov    cl,bl
c002646b:	d3 e7                	shl    edi,cl
c002646d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026471:	88 d1                	mov    cl,dl
c0026473:	d3 e8                	shr    eax,cl
c0026475:	09 c7                	or     edi,eax
c0026477:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002647b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002647f:	89 d8                	mov    eax,ebx
c0026481:	88 d9                	mov    cl,bl
c0026483:	d3 e7                	shl    edi,cl
c0026485:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026489:	89 f3                	mov    ebx,esi
c002648b:	88 d1                	mov    cl,dl
c002648d:	d3 eb                	shr    ebx,cl
c002648f:	89 c7                	mov    edi,eax
c0026491:	88 c1                	mov    cl,al
c0026493:	d3 e6                	shl    esi,cl
c0026495:	89 e8                	mov    eax,ebp
c0026497:	88 d1                	mov    cl,dl
c0026499:	d3 e8                	shr    eax,cl
c002649b:	09 f0                	or     eax,esi
c002649d:	89 f9                	mov    ecx,edi
c002649f:	d3 e5                	shl    ebp,cl
c00264a1:	89 da                	mov    edx,ebx
c00264a3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00264a7:	89 d3                	mov    ebx,edx
c00264a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00264ad:	89 c6                	mov    esi,eax
c00264af:	89 d1                	mov    ecx,edx
c00264b1:	39 d3                	cmp    ebx,edx
c00264b3:	72 27                	jb     c00264dc <__moddi3+0x170>
c00264b5:	74 21                	je     c00264d8 <__moddi3+0x16c>
c00264b7:	29 f5                	sub    ebp,esi
c00264b9:	19 cb                	sbb    ebx,ecx
c00264bb:	89 de                	mov    esi,ebx
c00264bd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00264c1:	d3 e6                	shl    esi,cl
c00264c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00264c7:	89 f9                	mov    ecx,edi
c00264c9:	d3 ed                	shr    ebp,cl
c00264cb:	09 ee                	or     esi,ebp
c00264cd:	89 f0                	mov    eax,esi
c00264cf:	d3 eb                	shr    ebx,cl
c00264d1:	89 da                	mov    edx,ebx
c00264d3:	e9 e8 fe ff ff       	jmp    c00263c0 <__moddi3+0x54>
c00264d8:	39 c5                	cmp    ebp,eax
c00264da:	73 db                	jae    c00264b7 <__moddi3+0x14b>
c00264dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00264e0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00264e4:	89 d1                	mov    ecx,edx
c00264e6:	89 c6                	mov    esi,eax
c00264e8:	eb cd                	jmp    c00264b7 <__moddi3+0x14b>
c00264ea:	66 90                	xchg   ax,ax

c00264ec <__udivdi3>:
c00264ec:	55                   	push   ebp
c00264ed:	57                   	push   edi
c00264ee:	56                   	push   esi
c00264ef:	53                   	push   ebx
c00264f0:	83 ec 1c             	sub    esp,0x1c
c00264f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00264f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00264fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00264ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026503:	85 d2                	test   edx,edx
c0026505:	75 41                	jne    c0026548 <__udivdi3+0x5c>
c0026507:	39 f7                	cmp    edi,esi
c0026509:	76 15                	jbe    c0026520 <__udivdi3+0x34>
c002650b:	89 e8                	mov    eax,ebp
c002650d:	89 f2                	mov    edx,esi
c002650f:	f7 f7                	div    edi
c0026511:	31 db                	xor    ebx,ebx
c0026513:	89 da                	mov    edx,ebx
c0026515:	83 c4 1c             	add    esp,0x1c
c0026518:	5b                   	pop    ebx
c0026519:	5e                   	pop    esi
c002651a:	5f                   	pop    edi
c002651b:	5d                   	pop    ebp
c002651c:	c3                   	ret    
c002651d:	8d 76 00             	lea    esi,[esi+0x0]
c0026520:	89 f9                	mov    ecx,edi
c0026522:	85 ff                	test   edi,edi
c0026524:	75 0b                	jne    c0026531 <__udivdi3+0x45>
c0026526:	b8 01 00 00 00       	mov    eax,0x1
c002652b:	31 d2                	xor    edx,edx
c002652d:	f7 f7                	div    edi
c002652f:	89 c1                	mov    ecx,eax
c0026531:	31 d2                	xor    edx,edx
c0026533:	89 f0                	mov    eax,esi
c0026535:	f7 f1                	div    ecx
c0026537:	89 c3                	mov    ebx,eax
c0026539:	89 e8                	mov    eax,ebp
c002653b:	f7 f1                	div    ecx
c002653d:	89 da                	mov    edx,ebx
c002653f:	83 c4 1c             	add    esp,0x1c
c0026542:	5b                   	pop    ebx
c0026543:	5e                   	pop    esi
c0026544:	5f                   	pop    edi
c0026545:	5d                   	pop    ebp
c0026546:	c3                   	ret    
c0026547:	90                   	nop
c0026548:	39 f2                	cmp    edx,esi
c002654a:	77 1c                	ja     c0026568 <__udivdi3+0x7c>
c002654c:	0f bd da             	bsr    ebx,edx
c002654f:	83 f3 1f             	xor    ebx,0x1f
c0026552:	75 24                	jne    c0026578 <__udivdi3+0x8c>
c0026554:	39 f2                	cmp    edx,esi
c0026556:	72 08                	jb     c0026560 <__udivdi3+0x74>
c0026558:	39 ef                	cmp    edi,ebp
c002655a:	0f 87 84 00 00 00    	ja     c00265e4 <__udivdi3+0xf8>
c0026560:	b8 01 00 00 00       	mov    eax,0x1
c0026565:	eb ac                	jmp    c0026513 <__udivdi3+0x27>
c0026567:	90                   	nop
c0026568:	31 db                	xor    ebx,ebx
c002656a:	31 c0                	xor    eax,eax
c002656c:	89 da                	mov    edx,ebx
c002656e:	83 c4 1c             	add    esp,0x1c
c0026571:	5b                   	pop    ebx
c0026572:	5e                   	pop    esi
c0026573:	5f                   	pop    edi
c0026574:	5d                   	pop    ebp
c0026575:	c3                   	ret    
c0026576:	66 90                	xchg   ax,ax
c0026578:	b8 20 00 00 00       	mov    eax,0x20
c002657d:	29 d8                	sub    eax,ebx
c002657f:	88 d9                	mov    cl,bl
c0026581:	d3 e2                	shl    edx,cl
c0026583:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026587:	89 fa                	mov    edx,edi
c0026589:	88 c1                	mov    cl,al
c002658b:	d3 ea                	shr    edx,cl
c002658d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026591:	09 d1                	or     ecx,edx
c0026593:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026597:	88 d9                	mov    cl,bl
c0026599:	d3 e7                	shl    edi,cl
c002659b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002659f:	89 f7                	mov    edi,esi
c00265a1:	88 c1                	mov    cl,al
c00265a3:	d3 ef                	shr    edi,cl
c00265a5:	88 d9                	mov    cl,bl
c00265a7:	d3 e6                	shl    esi,cl
c00265a9:	89 ea                	mov    edx,ebp
c00265ab:	88 c1                	mov    cl,al
c00265ad:	d3 ea                	shr    edx,cl
c00265af:	09 d6                	or     esi,edx
c00265b1:	89 f0                	mov    eax,esi
c00265b3:	89 fa                	mov    edx,edi
c00265b5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00265b9:	89 d7                	mov    edi,edx
c00265bb:	89 c6                	mov    esi,eax
c00265bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00265c1:	39 d7                	cmp    edi,edx
c00265c3:	72 13                	jb     c00265d8 <__udivdi3+0xec>
c00265c5:	74 09                	je     c00265d0 <__udivdi3+0xe4>
c00265c7:	89 f0                	mov    eax,esi
c00265c9:	31 db                	xor    ebx,ebx
c00265cb:	e9 43 ff ff ff       	jmp    c0026513 <__udivdi3+0x27>
c00265d0:	88 d9                	mov    cl,bl
c00265d2:	d3 e5                	shl    ebp,cl
c00265d4:	39 c5                	cmp    ebp,eax
c00265d6:	73 ef                	jae    c00265c7 <__udivdi3+0xdb>
c00265d8:	8d 46 ff             	lea    eax,[esi-0x1]
c00265db:	31 db                	xor    ebx,ebx
c00265dd:	e9 31 ff ff ff       	jmp    c0026513 <__udivdi3+0x27>
c00265e2:	66 90                	xchg   ax,ax
c00265e4:	31 c0                	xor    eax,eax
c00265e6:	e9 28 ff ff ff       	jmp    c0026513 <__udivdi3+0x27>
c00265eb:	90                   	nop

c00265ec <__umoddi3>:
c00265ec:	55                   	push   ebp
c00265ed:	57                   	push   edi
c00265ee:	56                   	push   esi
c00265ef:	53                   	push   ebx
c00265f0:	83 ec 1c             	sub    esp,0x1c
c00265f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00265f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00265fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00265ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026603:	89 da                	mov    edx,ebx
c0026605:	85 c0                	test   eax,eax
c0026607:	75 37                	jne    c0026640 <__umoddi3+0x54>
c0026609:	39 df                	cmp    edi,ebx
c002660b:	76 13                	jbe    c0026620 <__umoddi3+0x34>
c002660d:	89 f0                	mov    eax,esi
c002660f:	f7 f7                	div    edi
c0026611:	89 d0                	mov    eax,edx
c0026613:	31 d2                	xor    edx,edx
c0026615:	83 c4 1c             	add    esp,0x1c
c0026618:	5b                   	pop    ebx
c0026619:	5e                   	pop    esi
c002661a:	5f                   	pop    edi
c002661b:	5d                   	pop    ebp
c002661c:	c3                   	ret    
c002661d:	8d 76 00             	lea    esi,[esi+0x0]
c0026620:	89 fd                	mov    ebp,edi
c0026622:	85 ff                	test   edi,edi
c0026624:	75 0b                	jne    c0026631 <__umoddi3+0x45>
c0026626:	b8 01 00 00 00       	mov    eax,0x1
c002662b:	31 d2                	xor    edx,edx
c002662d:	f7 f7                	div    edi
c002662f:	89 c5                	mov    ebp,eax
c0026631:	89 d8                	mov    eax,ebx
c0026633:	31 d2                	xor    edx,edx
c0026635:	f7 f5                	div    ebp
c0026637:	89 f0                	mov    eax,esi
c0026639:	f7 f5                	div    ebp
c002663b:	89 d0                	mov    eax,edx
c002663d:	eb d4                	jmp    c0026613 <__umoddi3+0x27>
c002663f:	90                   	nop
c0026640:	89 f1                	mov    ecx,esi
c0026642:	39 d8                	cmp    eax,ebx
c0026644:	76 0a                	jbe    c0026650 <__umoddi3+0x64>
c0026646:	89 f0                	mov    eax,esi
c0026648:	83 c4 1c             	add    esp,0x1c
c002664b:	5b                   	pop    ebx
c002664c:	5e                   	pop    esi
c002664d:	5f                   	pop    edi
c002664e:	5d                   	pop    ebp
c002664f:	c3                   	ret    
c0026650:	0f bd e8             	bsr    ebp,eax
c0026653:	83 f5 1f             	xor    ebp,0x1f
c0026656:	75 1c                	jne    c0026674 <__umoddi3+0x88>
c0026658:	39 d8                	cmp    eax,ebx
c002665a:	72 04                	jb     c0026660 <__umoddi3+0x74>
c002665c:	39 f7                	cmp    edi,esi
c002665e:	77 08                	ja     c0026668 <__umoddi3+0x7c>
c0026660:	89 da                	mov    edx,ebx
c0026662:	29 fe                	sub    esi,edi
c0026664:	19 c2                	sbb    edx,eax
c0026666:	89 f1                	mov    ecx,esi
c0026668:	89 c8                	mov    eax,ecx
c002666a:	83 c4 1c             	add    esp,0x1c
c002666d:	5b                   	pop    ebx
c002666e:	5e                   	pop    esi
c002666f:	5f                   	pop    edi
c0026670:	5d                   	pop    ebp
c0026671:	c3                   	ret    
c0026672:	66 90                	xchg   ax,ax
c0026674:	ba 20 00 00 00       	mov    edx,0x20
c0026679:	29 ea                	sub    edx,ebp
c002667b:	89 e9                	mov    ecx,ebp
c002667d:	d3 e0                	shl    eax,cl
c002667f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026683:	89 f8                	mov    eax,edi
c0026685:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026689:	88 d1                	mov    cl,dl
c002668b:	d3 e8                	shr    eax,cl
c002668d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026691:	09 c1                	or     ecx,eax
c0026693:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026697:	89 e9                	mov    ecx,ebp
c0026699:	d3 e7                	shl    edi,cl
c002669b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002669f:	89 d8                	mov    eax,ebx
c00266a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00266a5:	88 d1                	mov    cl,dl
c00266a7:	d3 e8                	shr    eax,cl
c00266a9:	89 c7                	mov    edi,eax
c00266ab:	89 e9                	mov    ecx,ebp
c00266ad:	d3 e3                	shl    ebx,cl
c00266af:	89 f0                	mov    eax,esi
c00266b1:	88 d1                	mov    cl,dl
c00266b3:	d3 e8                	shr    eax,cl
c00266b5:	09 d8                	or     eax,ebx
c00266b7:	89 e9                	mov    ecx,ebp
c00266b9:	d3 e6                	shl    esi,cl
c00266bb:	89 f3                	mov    ebx,esi
c00266bd:	89 fa                	mov    edx,edi
c00266bf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00266c3:	89 d1                	mov    ecx,edx
c00266c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266c9:	89 c6                	mov    esi,eax
c00266cb:	89 d7                	mov    edi,edx
c00266cd:	39 d1                	cmp    ecx,edx
c00266cf:	72 27                	jb     c00266f8 <__umoddi3+0x10c>
c00266d1:	74 21                	je     c00266f4 <__umoddi3+0x108>
c00266d3:	89 ca                	mov    edx,ecx
c00266d5:	29 f3                	sub    ebx,esi
c00266d7:	19 fa                	sbb    edx,edi
c00266d9:	89 d0                	mov    eax,edx
c00266db:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00266df:	d3 e0                	shl    eax,cl
c00266e1:	89 e9                	mov    ecx,ebp
c00266e3:	d3 eb                	shr    ebx,cl
c00266e5:	09 d8                	or     eax,ebx
c00266e7:	d3 ea                	shr    edx,cl
c00266e9:	83 c4 1c             	add    esp,0x1c
c00266ec:	5b                   	pop    ebx
c00266ed:	5e                   	pop    esi
c00266ee:	5f                   	pop    edi
c00266ef:	5d                   	pop    ebp
c00266f0:	c3                   	ret    
c00266f1:	8d 76 00             	lea    esi,[esi+0x0]
c00266f4:	39 c3                	cmp    ebx,eax
c00266f6:	73 db                	jae    c00266d3 <__umoddi3+0xe7>
c00266f8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00266fc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026700:	89 d7                	mov    edi,edx
c0026702:	89 c6                	mov    esi,eax
c0026704:	eb cd                	jmp    c00266d3 <__umoddi3+0xe7>

c0026706 <__addsf3>:
c0026706:	55                   	push   ebp
c0026707:	89 e5                	mov    ebp,esp
c0026709:	57                   	push   edi
c002670a:	56                   	push   esi
c002670b:	53                   	push   ebx
c002670c:	83 ec 08             	sub    esp,0x8
c002670f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026712:	89 fa                	mov    edx,edi
c0026714:	89 f8                	mov    eax,edi
c0026716:	c1 f8 17             	sar    eax,0x17
c0026719:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002671c:	c1 e2 08             	shl    edx,0x8
c002671f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026725:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026728:	89 de                	mov    esi,ebx
c002672a:	c1 fe 17             	sar    esi,0x17
c002672d:	c1 e3 08             	shl    ebx,0x8
c0026730:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026736:	31 f0                	xor    eax,esi
c0026738:	0f 88 3b 01 00 00    	js     c0026879 <__addsf3+0x173>
c002673e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026741:	29 f1                	sub    ecx,esi
c0026743:	85 c9                	test   ecx,ecx
c0026745:	7e 54                	jle    c002679b <__addsf3+0x95>
c0026747:	89 f0                	mov    eax,esi
c0026749:	84 c0                	test   al,al
c002674b:	75 10                	jne    c002675d <__addsf3+0x57>
c002674d:	85 db                	test   ebx,ebx
c002674f:	0f 84 aa 02 00 00    	je     c00269ff <__addsf3+0x2f9>
c0026755:	49                   	dec    ecx
c0026756:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026759:	74 38                	je     c0026793 <__addsf3+0x8d>
c002675b:	eb 13                	jmp    c0026770 <__addsf3+0x6a>
c002675d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026760:	f7 d0                	not    eax
c0026762:	84 c0                	test   al,al
c0026764:	0f 84 95 02 00 00    	je     c00269ff <__addsf3+0x2f9>
c002676a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026770:	83 f9 1f             	cmp    ecx,0x1f
c0026773:	0f 8f 86 02 00 00    	jg     c00269ff <__addsf3+0x2f9>
c0026779:	89 de                	mov    esi,ebx
c002677b:	d3 ee                	shr    esi,cl
c002677d:	b8 20 00 00 00       	mov    eax,0x20
c0026782:	29 c8                	sub    eax,ecx
c0026784:	89 c1                	mov    ecx,eax
c0026786:	d3 e3                	shl    ebx,cl
c0026788:	31 c0                	xor    eax,eax
c002678a:	85 db                	test   ebx,ebx
c002678c:	0f 95 c0             	setne  al
c002678f:	09 f0                	or     eax,esi
c0026791:	01 d0                	add    eax,edx
c0026793:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026796:	e9 b6 00 00 00       	jmp    c0026851 <__addsf3+0x14b>
c002679b:	74 5c                	je     c00267f9 <__addsf3+0xf3>
c002679d:	89 f1                	mov    ecx,esi
c002679f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00267a2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00267a5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00267a9:	75 14                	jne    c00267bf <__addsf3+0xb9>
c00267ab:	85 d2                	test   edx,edx
c00267ad:	0f 84 4c 02 00 00    	je     c00269ff <__addsf3+0x2f9>
c00267b3:	49                   	dec    ecx
c00267b4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00267b7:	0f 84 94 00 00 00    	je     c0026851 <__addsf3+0x14b>
c00267bd:	eb 12                	jmp    c00267d1 <__addsf3+0xcb>
c00267bf:	89 f0                	mov    eax,esi
c00267c1:	f7 d0                	not    eax
c00267c3:	84 c0                	test   al,al
c00267c5:	0f 84 34 02 00 00    	je     c00269ff <__addsf3+0x2f9>
c00267cb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00267d1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00267d4:	83 f9 1f             	cmp    ecx,0x1f
c00267d7:	0f 8f 22 02 00 00    	jg     c00269ff <__addsf3+0x2f9>
c00267dd:	89 d7                	mov    edi,edx
c00267df:	d3 ef                	shr    edi,cl
c00267e1:	b8 20 00 00 00       	mov    eax,0x20
c00267e6:	29 c8                	sub    eax,ecx
c00267e8:	89 c1                	mov    ecx,eax
c00267ea:	d3 e2                	shl    edx,cl
c00267ec:	31 c0                	xor    eax,eax
c00267ee:	85 d2                	test   edx,edx
c00267f0:	0f 95 c0             	setne  al
c00267f3:	09 f8                	or     eax,edi
c00267f5:	01 d8                	add    eax,ebx
c00267f7:	eb 58                	jmp    c0026851 <__addsf3+0x14b>
c00267f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00267fc:	8d 70 01             	lea    esi,[eax+0x1]
c00267ff:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026805:	75 32                	jne    c0026839 <__addsf3+0x133>
c0026807:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002680b:	75 1f                	jne    c002682c <__addsf3+0x126>
c002680d:	85 d2                	test   edx,edx
c002680f:	0f 84 e0 01 00 00    	je     c00269f5 <__addsf3+0x2ef>
c0026815:	85 db                	test   ebx,ebx
c0026817:	0f 84 e2 01 00 00    	je     c00269ff <__addsf3+0x2f9>
c002681d:	89 d0                	mov    eax,edx
c002681f:	01 d8                	add    eax,ebx
c0026821:	0f 89 a9 01 00 00    	jns    c00269d0 <__addsf3+0x2ca>
c0026827:	e9 9d 01 00 00       	jmp    c00269c9 <__addsf3+0x2c3>
c002682c:	85 d2                	test   edx,edx
c002682e:	0f 85 cb 01 00 00    	jne    c00269ff <__addsf3+0x2f9>
c0026834:	e9 bc 01 00 00       	jmp    c00269f5 <__addsf3+0x2ef>
c0026839:	31 c0                	xor    eax,eax
c002683b:	89 f1                	mov    ecx,esi
c002683d:	f7 d1                	not    ecx
c002683f:	84 c9                	test   cl,cl
c0026841:	0f 84 90 01 00 00    	je     c00269d7 <__addsf3+0x2d1>
c0026847:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002684a:	d1 e8                	shr    eax,1
c002684c:	e9 86 01 00 00       	jmp    c00269d7 <__addsf3+0x2d1>
c0026851:	85 c0                	test   eax,eax
c0026853:	0f 89 7e 01 00 00    	jns    c00269d7 <__addsf3+0x2d1>
c0026859:	46                   	inc    esi
c002685a:	89 f2                	mov    edx,esi
c002685c:	f7 d2                	not    edx
c002685e:	84 d2                	test   dl,dl
c0026860:	0f 84 6f 01 00 00    	je     c00269d5 <__addsf3+0x2cf>
c0026866:	89 c2                	mov    edx,eax
c0026868:	83 e2 01             	and    edx,0x1
c002686b:	d1 e8                	shr    eax,1
c002686d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026872:	09 d0                	or     eax,edx
c0026874:	e9 5e 01 00 00       	jmp    c00269d7 <__addsf3+0x2d1>
c0026879:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002687d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026880:	89 f0                	mov    eax,esi
c0026882:	0f b6 c0             	movzx  eax,al
c0026885:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026888:	29 c1                	sub    ecx,eax
c002688a:	85 c9                	test   ecx,ecx
c002688c:	7e 55                	jle    c00268e3 <__addsf3+0x1dd>
c002688e:	85 c0                	test   eax,eax
c0026890:	75 11                	jne    c00268a3 <__addsf3+0x19d>
c0026892:	85 db                	test   ebx,ebx
c0026894:	0f 84 65 01 00 00    	je     c00269ff <__addsf3+0x2f9>
c002689a:	49                   	dec    ecx
c002689b:	75 19                	jne    c00268b6 <__addsf3+0x1b0>
c002689d:	89 d0                	mov    eax,edx
c002689f:	29 d8                	sub    eax,ebx
c00268a1:	eb 38                	jmp    c00268db <__addsf3+0x1d5>
c00268a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268a6:	f7 d0                	not    eax
c00268a8:	84 c0                	test   al,al
c00268aa:	0f 84 4f 01 00 00    	je     c00269ff <__addsf3+0x2f9>
c00268b0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00268b6:	83 f9 1f             	cmp    ecx,0x1f
c00268b9:	0f 8f 40 01 00 00    	jg     c00269ff <__addsf3+0x2f9>
c00268bf:	89 de                	mov    esi,ebx
c00268c1:	d3 ee                	shr    esi,cl
c00268c3:	b8 20 00 00 00       	mov    eax,0x20
c00268c8:	29 c8                	sub    eax,ecx
c00268ca:	89 c1                	mov    ecx,eax
c00268cc:	d3 e3                	shl    ebx,cl
c00268ce:	31 c0                	xor    eax,eax
c00268d0:	85 db                	test   ebx,ebx
c00268d2:	0f 95 c0             	setne  al
c00268d5:	09 f0                	or     eax,esi
c00268d7:	29 c2                	sub    edx,eax
c00268d9:	89 d0                	mov    eax,edx
c00268db:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268de:	e9 af 00 00 00       	jmp    c0026992 <__addsf3+0x28c>
c00268e3:	74 5c                	je     c0026941 <__addsf3+0x23b>
c00268e5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00268e8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268eb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00268ef:	75 14                	jne    c0026905 <__addsf3+0x1ff>
c00268f1:	85 d2                	test   edx,edx
c00268f3:	0f 84 06 01 00 00    	je     c00269ff <__addsf3+0x2f9>
c00268f9:	48                   	dec    eax
c00268fa:	75 1b                	jne    c0026917 <__addsf3+0x211>
c00268fc:	89 d8                	mov    eax,ebx
c00268fe:	29 d0                	sub    eax,edx
c0026900:	e9 8d 00 00 00       	jmp    c0026992 <__addsf3+0x28c>
c0026905:	89 f1                	mov    ecx,esi
c0026907:	f7 d1                	not    ecx
c0026909:	84 c9                	test   cl,cl
c002690b:	0f 84 ee 00 00 00    	je     c00269ff <__addsf3+0x2f9>
c0026911:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026917:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002691a:	83 f8 1f             	cmp    eax,0x1f
c002691d:	0f 8f dc 00 00 00    	jg     c00269ff <__addsf3+0x2f9>
c0026923:	89 d7                	mov    edi,edx
c0026925:	88 c1                	mov    cl,al
c0026927:	d3 ef                	shr    edi,cl
c0026929:	b9 20 00 00 00       	mov    ecx,0x20
c002692e:	29 c1                	sub    ecx,eax
c0026930:	d3 e2                	shl    edx,cl
c0026932:	31 c0                	xor    eax,eax
c0026934:	85 d2                	test   edx,edx
c0026936:	0f 95 c0             	setne  al
c0026939:	09 f8                	or     eax,edi
c002693b:	29 c3                	sub    ebx,eax
c002693d:	89 d8                	mov    eax,ebx
c002693f:	eb 51                	jmp    c0026992 <__addsf3+0x28c>
c0026941:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026944:	40                   	inc    eax
c0026945:	a8 fe                	test   al,0xfe
c0026947:	75 3d                	jne    c0026986 <__addsf3+0x280>
c0026949:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002694d:	0f 85 a7 00 00 00    	jne    c00269fa <__addsf3+0x2f4>
c0026953:	85 d2                	test   edx,edx
c0026955:	75 12                	jne    c0026969 <__addsf3+0x263>
c0026957:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002695a:	85 db                	test   ebx,ebx
c002695c:	0f 85 9d 00 00 00    	jne    c00269ff <__addsf3+0x2f9>
c0026962:	31 ff                	xor    edi,edi
c0026964:	e9 96 00 00 00       	jmp    c00269ff <__addsf3+0x2f9>
c0026969:	85 db                	test   ebx,ebx
c002696b:	0f 84 8e 00 00 00    	je     c00269ff <__addsf3+0x2f9>
c0026971:	89 d0                	mov    eax,edx
c0026973:	29 d8                	sub    eax,ebx
c0026975:	79 06                	jns    c002697d <__addsf3+0x277>
c0026977:	89 d8                	mov    eax,ebx
c0026979:	29 d0                	sub    eax,edx
c002697b:	eb 5a                	jmp    c00269d7 <__addsf3+0x2d1>
c002697d:	bf 00 00 00 00       	mov    edi,0x0
c0026982:	74 7b                	je     c00269ff <__addsf3+0x2f9>
c0026984:	eb 4a                	jmp    c00269d0 <__addsf3+0x2ca>
c0026986:	89 d0                	mov    eax,edx
c0026988:	29 d8                	sub    eax,ebx
c002698a:	79 12                	jns    c002699e <__addsf3+0x298>
c002698c:	89 d8                	mov    eax,ebx
c002698e:	29 d0                	sub    eax,edx
c0026990:	eb 09                	jmp    c002699b <__addsf3+0x295>
c0026992:	85 c0                	test   eax,eax
c0026994:	79 41                	jns    c00269d7 <__addsf3+0x2d1>
c0026996:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002699b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002699e:	31 f6                	xor    esi,esi
c00269a0:	85 c0                	test   eax,eax
c00269a2:	74 33                	je     c00269d7 <__addsf3+0x2d1>
c00269a4:	0f bd c8             	bsr    ecx,eax
c00269a7:	83 f1 1f             	xor    ecx,0x1f
c00269aa:	d3 e0                	shl    eax,cl
c00269ac:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00269b0:	39 ca                	cmp    edx,ecx
c00269b2:	7f 10                	jg     c00269c4 <__addsf3+0x2be>
c00269b4:	29 d1                	sub    ecx,edx
c00269b6:	41                   	inc    ecx
c00269b7:	d3 e8                	shr    eax,cl
c00269b9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269bc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00269c2:	eb 13                	jmp    c00269d7 <__addsf3+0x2d1>
c00269c4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269c7:	29 ce                	sub    esi,ecx
c00269c9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00269ce:	eb 07                	jmp    c00269d7 <__addsf3+0x2d1>
c00269d0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269d3:	eb 02                	jmp    c00269d7 <__addsf3+0x2d1>
c00269d5:	31 c0                	xor    eax,eax
c00269d7:	89 c2                	mov    edx,eax
c00269d9:	c1 ea 08             	shr    edx,0x8
c00269dc:	a8 7f                	test   al,0x7f
c00269de:	0f 95 c1             	setne  cl
c00269e1:	09 d1                	or     ecx,edx
c00269e3:	83 e1 01             	and    ecx,0x1
c00269e6:	c1 e8 07             	shr    eax,0x7
c00269e9:	21 c8                	and    eax,ecx
c00269eb:	c1 e6 17             	shl    esi,0x17
c00269ee:	09 d6                	or     esi,edx
c00269f0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00269f3:	eb 0a                	jmp    c00269ff <__addsf3+0x2f9>
c00269f5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269f8:	eb 05                	jmp    c00269ff <__addsf3+0x2f9>
c00269fa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00269ff:	89 f8                	mov    eax,edi
c0026a01:	5a                   	pop    edx
c0026a02:	59                   	pop    ecx
c0026a03:	5b                   	pop    ebx
c0026a04:	5e                   	pop    esi
c0026a05:	5f                   	pop    edi
c0026a06:	5d                   	pop    ebp
c0026a07:	c3                   	ret    

c0026a08 <__subsf3>:
c0026a08:	55                   	push   ebp
c0026a09:	89 e5                	mov    ebp,esp
c0026a0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a0e:	05 00 00 00 80       	add    eax,0x80000000
c0026a13:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026a16:	5d                   	pop    ebp
c0026a17:	e9 ea fc ff ff       	jmp    c0026706 <__addsf3>

c0026a1c <__negsf2>:
c0026a1c:	55                   	push   ebp
c0026a1d:	89 e5                	mov    ebp,esp
c0026a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a22:	05 00 00 00 80       	add    eax,0x80000000
c0026a27:	5d                   	pop    ebp
c0026a28:	c3                   	ret    

c0026a29 <__mulsf3>:
c0026a29:	55                   	push   ebp
c0026a2a:	89 e5                	mov    ebp,esp
c0026a2c:	57                   	push   edi
c0026a2d:	56                   	push   esi
c0026a2e:	53                   	push   ebx
c0026a2f:	83 ec 1c             	sub    esp,0x1c
c0026a32:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026a35:	89 f0                	mov    eax,esi
c0026a37:	89 f1                	mov    ecx,esi
c0026a39:	c1 f9 17             	sar    ecx,0x17
c0026a3c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026a3f:	c1 e0 08             	shl    eax,0x8
c0026a42:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026a47:	89 c1                	mov    ecx,eax
c0026a49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a4c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026a4f:	89 c7                	mov    edi,eax
c0026a51:	c1 ff 17             	sar    edi,0x17
c0026a54:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026a58:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026a5b:	89 f8                	mov    eax,edi
c0026a5d:	0f b6 c0             	movzx  eax,al
c0026a60:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026a63:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026a67:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026a6a:	42                   	inc    edx
c0026a6b:	80 e2 fe             	and    dl,0xfe
c0026a6e:	75 7b                	jne    c0026aeb <__mulsf3+0xc2>
c0026a70:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026a74:	74 54                	je     c0026aca <__mulsf3+0xa1>
c0026a76:	85 c9                	test   ecx,ecx
c0026a78:	0f 85 64 01 00 00    	jne    c0026be2 <__mulsf3+0x1b9>
c0026a7e:	8d 57 01             	lea    edx,[edi+0x1]
c0026a81:	80 e2 fe             	and    dl,0xfe
c0026a84:	75 1f                	jne    c0026aa5 <__mulsf3+0x7c>
c0026a86:	85 c0                	test   eax,eax
c0026a88:	b8 00 00 00 00       	mov    eax,0x0
c0026a8d:	74 29                	je     c0026ab8 <__mulsf3+0x8f>
c0026a8f:	53                   	push   ebx
c0026a90:	53                   	push   ebx
c0026a91:	50                   	push   eax
c0026a92:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a95:	e8 96 05 00 00       	call   c0027030 <__nesf2>
c0026a9a:	83 c4 10             	add    esp,0x10
c0026a9d:	85 c0                	test   eax,eax
c0026a9f:	0f 85 3a 01 00 00    	jne    c0026bdf <__mulsf3+0x1b6>
c0026aa5:	85 ff                	test   edi,edi
c0026aa7:	0f 89 35 01 00 00    	jns    c0026be2 <__mulsf3+0x1b9>
c0026aad:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026ab3:	e9 2a 01 00 00       	jmp    c0026be2 <__mulsf3+0x1b9>
c0026ab8:	51                   	push   ecx
c0026ab9:	51                   	push   ecx
c0026aba:	50                   	push   eax
c0026abb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026abe:	e8 6d 05 00 00       	call   c0027030 <__nesf2>
c0026ac3:	83 c4 10             	add    esp,0x10
c0026ac6:	85 c0                	test   eax,eax
c0026ac8:	eb 15                	jmp    c0026adf <__mulsf3+0xb6>
c0026aca:	85 c9                	test   ecx,ecx
c0026acc:	74 0b                	je     c0026ad9 <__mulsf3+0xb0>
c0026ace:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026ad1:	01 c9                	add    ecx,ecx
c0026ad3:	78 16                	js     c0026aeb <__mulsf3+0xc2>
c0026ad5:	89 d3                	mov    ebx,edx
c0026ad7:	eb f5                	jmp    c0026ace <__mulsf3+0xa5>
c0026ad9:	89 f8                	mov    eax,edi
c0026adb:	f7 d0                	not    eax
c0026add:	84 c0                	test   al,al
c0026adf:	75 c4                	jne    c0026aa5 <__mulsf3+0x7c>
c0026ae1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026ae6:	e9 f7 00 00 00       	jmp    c0026be2 <__mulsf3+0x1b9>
c0026aeb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026aee:	c1 e6 08             	shl    esi,0x8
c0026af1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026af7:	8d 57 01             	lea    edx,[edi+0x1]
c0026afa:	80 e2 fe             	and    dl,0xfe
c0026afd:	75 63                	jne    c0026b62 <__mulsf3+0x139>
c0026aff:	85 c0                	test   eax,eax
c0026b01:	74 2f                	je     c0026b32 <__mulsf3+0x109>
c0026b03:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026b07:	0f 89 d2 00 00 00    	jns    c0026bdf <__mulsf3+0x1b6>
c0026b0d:	52                   	push   edx
c0026b0e:	52                   	push   edx
c0026b0f:	6a 00                	push   0x0
c0026b11:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b14:	e8 dc 04 00 00       	call   c0026ff5 <__eqsf2>
c0026b19:	83 c4 10             	add    esp,0x10
c0026b1c:	85 c0                	test   eax,eax
c0026b1e:	0f 85 bb 00 00 00    	jne    c0026bdf <__mulsf3+0x1b6>
c0026b24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b27:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026b2d:	e9 b0 00 00 00       	jmp    c0026be2 <__mulsf3+0x1b9>
c0026b32:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026b35:	50                   	push   eax
c0026b36:	50                   	push   eax
c0026b37:	6a 00                	push   0x0
c0026b39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b3c:	e8 b4 04 00 00       	call   c0026ff5 <__eqsf2>
c0026b41:	83 c4 10             	add    esp,0x10
c0026b44:	85 c0                	test   eax,eax
c0026b46:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026b49:	75 0c                	jne    c0026b57 <__mulsf3+0x12e>
c0026b4b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026b4f:	0f 89 8a 00 00 00    	jns    c0026bdf <__mulsf3+0x1b6>
c0026b55:	eb cd                	jmp    c0026b24 <__mulsf3+0xfb>
c0026b57:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026b5a:	01 f6                	add    esi,esi
c0026b5c:	78 04                	js     c0026b62 <__mulsf3+0x139>
c0026b5e:	89 c3                	mov    ebx,eax
c0026b60:	eb f5                	jmp    c0026b57 <__mulsf3+0x12e>
c0026b62:	89 c8                	mov    eax,ecx
c0026b64:	0d 00 00 00 80       	or     eax,0x80000000
c0026b69:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026b6f:	f7 e6                	mul    esi
c0026b71:	85 c0                	test   eax,eax
c0026b73:	0f 95 c0             	setne  al
c0026b76:	0f b6 c0             	movzx  eax,al
c0026b79:	09 c2                	or     edx,eax
c0026b7b:	78 03                	js     c0026b80 <__mulsf3+0x157>
c0026b7d:	01 d2                	add    edx,edx
c0026b7f:	4b                   	dec    ebx
c0026b80:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026b86:	7f 22                	jg     c0026baa <__mulsf3+0x181>
c0026b88:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b8e:	85 db                	test   ebx,ebx
c0026b90:	7f 23                	jg     c0026bb5 <__mulsf3+0x18c>
c0026b92:	83 fb e9             	cmp    ebx,0xffffffe9
c0026b95:	7c 1a                	jl     c0026bb1 <__mulsf3+0x188>
c0026b97:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b9d:	b9 01 00 00 00       	mov    ecx,0x1
c0026ba2:	29 d9                	sub    ecx,ebx
c0026ba4:	d3 ea                	shr    edx,cl
c0026ba6:	31 db                	xor    ebx,ebx
c0026ba8:	eb 0b                	jmp    c0026bb5 <__mulsf3+0x18c>
c0026baa:	bb ff 00 00 00       	mov    ebx,0xff
c0026baf:	eb 02                	jmp    c0026bb3 <__mulsf3+0x18a>
c0026bb1:	31 db                	xor    ebx,ebx
c0026bb3:	31 d2                	xor    edx,edx
c0026bb5:	89 d0                	mov    eax,edx
c0026bb7:	c1 e8 08             	shr    eax,0x8
c0026bba:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026bbd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026bc3:	09 fb                	or     ebx,edi
c0026bc5:	c1 e3 17             	shl    ebx,0x17
c0026bc8:	09 c3                	or     ebx,eax
c0026bca:	f6 c2 7f             	test   dl,0x7f
c0026bcd:	0f 95 c1             	setne  cl
c0026bd0:	09 c8                	or     eax,ecx
c0026bd2:	83 e0 01             	and    eax,0x1
c0026bd5:	c1 ea 07             	shr    edx,0x7
c0026bd8:	21 c2                	and    edx,eax
c0026bda:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026bdd:	eb 03                	jmp    c0026be2 <__mulsf3+0x1b9>
c0026bdf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026be2:	89 f0                	mov    eax,esi
c0026be4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026be7:	5b                   	pop    ebx
c0026be8:	5e                   	pop    esi
c0026be9:	5f                   	pop    edi
c0026bea:	5d                   	pop    ebp
c0026beb:	c3                   	ret    

c0026bec <__divsf3>:
c0026bec:	55                   	push   ebp
c0026bed:	89 e5                	mov    ebp,esp
c0026bef:	57                   	push   edi
c0026bf0:	56                   	push   esi
c0026bf1:	53                   	push   ebx
c0026bf2:	83 ec 1c             	sub    esp,0x1c
c0026bf5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026bf8:	89 d8                	mov    eax,ebx
c0026bfa:	89 d9                	mov    ecx,ebx
c0026bfc:	c1 f9 17             	sar    ecx,0x17
c0026bff:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c02:	c1 e0 08             	shl    eax,0x8
c0026c05:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c0a:	89 c1                	mov    ecx,eax
c0026c0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c0f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c12:	89 c7                	mov    edi,eax
c0026c14:	c1 ff 17             	sar    edi,0x17
c0026c17:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c1b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c1e:	89 f8                	mov    eax,edi
c0026c20:	0f b6 c0             	movzx  eax,al
c0026c23:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026c26:	29 c6                	sub    esi,eax
c0026c28:	83 c6 7f             	add    esi,0x7f
c0026c2b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c2e:	42                   	inc    edx
c0026c2f:	80 e2 fe             	and    dl,0xfe
c0026c32:	0f 85 9c 00 00 00    	jne    c0026cd4 <__divsf3+0xe8>
c0026c38:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c3c:	74 33                	je     c0026c71 <__divsf3+0x85>
c0026c3e:	85 c9                	test   ecx,ecx
c0026c40:	0f 85 c7 01 00 00    	jne    c0026e0d <__divsf3+0x221>
c0026c46:	8d 57 01             	lea    edx,[edi+0x1]
c0026c49:	80 e2 fe             	and    dl,0xfe
c0026c4c:	75 2f                	jne    c0026c7d <__divsf3+0x91>
c0026c4e:	85 c0                	test   eax,eax
c0026c50:	74 2b                	je     c0026c7d <__divsf3+0x91>
c0026c52:	51                   	push   ecx
c0026c53:	51                   	push   ecx
c0026c54:	6a 00                	push   0x0
c0026c56:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c59:	e8 d2 03 00 00       	call   c0027030 <__nesf2>
c0026c5e:	83 c4 10             	add    esp,0x10
c0026c61:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c64:	85 c0                	test   eax,eax
c0026c66:	0f 85 a1 01 00 00    	jne    c0026e0d <__divsf3+0x221>
c0026c6c:	e9 92 01 00 00       	jmp    c0026e03 <__divsf3+0x217>
c0026c71:	85 c9                	test   ecx,ecx
c0026c73:	75 1b                	jne    c0026c90 <__divsf3+0xa4>
c0026c75:	8d 57 01             	lea    edx,[edi+0x1]
c0026c78:	80 e2 fe             	and    dl,0xfe
c0026c7b:	74 1e                	je     c0026c9b <__divsf3+0xaf>
c0026c7d:	85 ff                	test   edi,edi
c0026c7f:	0f 89 88 01 00 00    	jns    c0026e0d <__divsf3+0x221>
c0026c85:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026c8b:	e9 7d 01 00 00       	jmp    c0026e0d <__divsf3+0x221>
c0026c90:	8d 56 ff             	lea    edx,[esi-0x1]
c0026c93:	01 c9                	add    ecx,ecx
c0026c95:	78 3d                	js     c0026cd4 <__divsf3+0xe8>
c0026c97:	89 d6                	mov    esi,edx
c0026c99:	eb f5                	jmp    c0026c90 <__divsf3+0xa4>
c0026c9b:	85 c0                	test   eax,eax
c0026c9d:	b8 00 00 00 00       	mov    eax,0x0
c0026ca2:	74 18                	je     c0026cbc <__divsf3+0xd0>
c0026ca4:	52                   	push   edx
c0026ca5:	52                   	push   edx
c0026ca6:	50                   	push   eax
c0026ca7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026caa:	e8 81 03 00 00       	call   c0027030 <__nesf2>
c0026caf:	83 c4 10             	add    esp,0x10
c0026cb2:	85 c0                	test   eax,eax
c0026cb4:	0f 85 50 01 00 00    	jne    c0026e0a <__divsf3+0x21e>
c0026cba:	eb c1                	jmp    c0026c7d <__divsf3+0x91>
c0026cbc:	56                   	push   esi
c0026cbd:	56                   	push   esi
c0026cbe:	50                   	push   eax
c0026cbf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cc2:	e8 69 03 00 00       	call   c0027030 <__nesf2>
c0026cc7:	83 c4 10             	add    esp,0x10
c0026cca:	85 c0                	test   eax,eax
c0026ccc:	0f 84 31 01 00 00    	je     c0026e03 <__divsf3+0x217>
c0026cd2:	eb a9                	jmp    c0026c7d <__divsf3+0x91>
c0026cd4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026cd7:	c1 e3 08             	shl    ebx,0x8
c0026cda:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0026ce3:	80 e2 fe             	and    dl,0xfe
c0026ce6:	75 71                	jne    c0026d59 <__divsf3+0x16d>
c0026ce8:	85 c0                	test   eax,eax
c0026cea:	ba 00 00 00 00       	mov    edx,0x0
c0026cef:	74 2f                	je     c0026d20 <__divsf3+0x134>
c0026cf1:	51                   	push   ecx
c0026cf2:	51                   	push   ecx
c0026cf3:	52                   	push   edx
c0026cf4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cf7:	e8 f9 02 00 00       	call   c0026ff5 <__eqsf2>
c0026cfc:	83 c4 10             	add    esp,0x10
c0026cff:	85 c0                	test   eax,eax
c0026d01:	0f 85 03 01 00 00    	jne    c0026e0a <__divsf3+0x21e>
c0026d07:	31 d2                	xor    edx,edx
c0026d09:	89 d3                	mov    ebx,edx
c0026d0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026d0e:	31 f8                	xor    eax,edi
c0026d10:	0f 89 f7 00 00 00    	jns    c0026e0d <__divsf3+0x221>
c0026d16:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026d1b:	e9 ed 00 00 00       	jmp    c0026e0d <__divsf3+0x221>
c0026d20:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d23:	50                   	push   eax
c0026d24:	50                   	push   eax
c0026d25:	52                   	push   edx
c0026d26:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d29:	e8 c7 02 00 00       	call   c0026ff5 <__eqsf2>
c0026d2e:	83 c4 10             	add    esp,0x10
c0026d31:	85 c0                	test   eax,eax
c0026d33:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d36:	75 16                	jne    c0026d4e <__divsf3+0x162>
c0026d38:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d3b:	31 fb                	xor    ebx,edi
c0026d3d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026d43:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026d49:	e9 bf 00 00 00       	jmp    c0026e0d <__divsf3+0x221>
c0026d4e:	8d 46 01             	lea    eax,[esi+0x1]
c0026d51:	01 db                	add    ebx,ebx
c0026d53:	78 04                	js     c0026d59 <__divsf3+0x16d>
c0026d55:	89 c6                	mov    esi,eax
c0026d57:	eb f5                	jmp    c0026d4e <__divsf3+0x162>
c0026d59:	89 c8                	mov    eax,ecx
c0026d5b:	0d 00 00 00 80       	or     eax,0x80000000
c0026d60:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d66:	31 d2                	xor    edx,edx
c0026d68:	39 d8                	cmp    eax,ebx
c0026d6a:	72 07                	jb     c0026d73 <__divsf3+0x187>
c0026d6c:	29 d8                	sub    eax,ebx
c0026d6e:	ba 01 00 00 00       	mov    edx,0x1
c0026d73:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026d7a:	01 d2                	add    edx,edx
c0026d7c:	89 c1                	mov    ecx,eax
c0026d7e:	01 c0                	add    eax,eax
c0026d80:	85 c9                	test   ecx,ecx
c0026d82:	78 04                	js     c0026d88 <__divsf3+0x19c>
c0026d84:	39 c3                	cmp    ebx,eax
c0026d86:	77 05                	ja     c0026d8d <__divsf3+0x1a1>
c0026d88:	29 d8                	sub    eax,ebx
c0026d8a:	83 ca 01             	or     edx,0x1
c0026d8d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026d90:	75 e8                	jne    c0026d7a <__divsf3+0x18e>
c0026d92:	85 c0                	test   eax,eax
c0026d94:	0f 95 c0             	setne  al
c0026d97:	0f b6 c0             	movzx  eax,al
c0026d9a:	c1 e2 06             	shl    edx,0x6
c0026d9d:	09 c2                	or     edx,eax
c0026d9f:	78 03                	js     c0026da4 <__divsf3+0x1b8>
c0026da1:	01 d2                	add    edx,edx
c0026da3:	4e                   	dec    esi
c0026da4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026daa:	7f 22                	jg     c0026dce <__divsf3+0x1e2>
c0026dac:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026db2:	85 f6                	test   esi,esi
c0026db4:	7f 23                	jg     c0026dd9 <__divsf3+0x1ed>
c0026db6:	83 fe e9             	cmp    esi,0xffffffe9
c0026db9:	7c 1a                	jl     c0026dd5 <__divsf3+0x1e9>
c0026dbb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026dc1:	b9 01 00 00 00       	mov    ecx,0x1
c0026dc6:	29 f1                	sub    ecx,esi
c0026dc8:	d3 ea                	shr    edx,cl
c0026dca:	31 f6                	xor    esi,esi
c0026dcc:	eb 0b                	jmp    c0026dd9 <__divsf3+0x1ed>
c0026dce:	be ff 00 00 00       	mov    esi,0xff
c0026dd3:	eb 02                	jmp    c0026dd7 <__divsf3+0x1eb>
c0026dd5:	31 f6                	xor    esi,esi
c0026dd7:	31 d2                	xor    edx,edx
c0026dd9:	89 d0                	mov    eax,edx
c0026ddb:	c1 e8 08             	shr    eax,0x8
c0026dde:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026de1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026de7:	09 fe                	or     esi,edi
c0026de9:	c1 e6 17             	shl    esi,0x17
c0026dec:	09 c6                	or     esi,eax
c0026dee:	f6 c2 7f             	test   dl,0x7f
c0026df1:	0f 95 c1             	setne  cl
c0026df4:	09 c8                	or     eax,ecx
c0026df6:	83 e0 01             	and    eax,0x1
c0026df9:	c1 ea 07             	shr    edx,0x7
c0026dfc:	21 c2                	and    edx,eax
c0026dfe:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026e01:	eb 0a                	jmp    c0026e0d <__divsf3+0x221>
c0026e03:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026e08:	eb 03                	jmp    c0026e0d <__divsf3+0x221>
c0026e0a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e0d:	89 d8                	mov    eax,ebx
c0026e0f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e12:	5b                   	pop    ebx
c0026e13:	5e                   	pop    esi
c0026e14:	5f                   	pop    edi
c0026e15:	5d                   	pop    ebp
c0026e16:	c3                   	ret    

c0026e17 <__floatsisf>:
c0026e17:	55                   	push   ebp
c0026e18:	89 e5                	mov    ebp,esp
c0026e1a:	53                   	push   ebx
c0026e1b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026e1e:	85 d2                	test   edx,edx
c0026e20:	7e 2b                	jle    c0026e4d <__floatsisf+0x36>
c0026e22:	0f bd ca             	bsr    ecx,edx
c0026e25:	83 f1 1f             	xor    ecx,0x1f
c0026e28:	d3 e2                	shl    edx,cl
c0026e2a:	89 d0                	mov    eax,edx
c0026e2c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e31:	89 c3                	mov    ebx,eax
c0026e33:	c1 eb 08             	shr    ebx,0x8
c0026e36:	80 e2 7f             	and    dl,0x7f
c0026e39:	0f 95 c2             	setne  dl
c0026e3c:	09 da                	or     edx,ebx
c0026e3e:	83 e2 01             	and    edx,0x1
c0026e41:	c1 e8 07             	shr    eax,0x7
c0026e44:	21 c2                	and    edx,eax
c0026e46:	b8 9e 00 00 00       	mov    eax,0x9e
c0026e4b:	eb 32                	jmp    c0026e7f <__floatsisf+0x68>
c0026e4d:	b8 00 00 00 00       	mov    eax,0x0
c0026e52:	74 34                	je     c0026e88 <__floatsisf+0x71>
c0026e54:	f7 da                	neg    edx
c0026e56:	0f bd ca             	bsr    ecx,edx
c0026e59:	83 f1 1f             	xor    ecx,0x1f
c0026e5c:	d3 e2                	shl    edx,cl
c0026e5e:	89 d0                	mov    eax,edx
c0026e60:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e65:	89 c3                	mov    ebx,eax
c0026e67:	c1 eb 08             	shr    ebx,0x8
c0026e6a:	80 e2 7f             	and    dl,0x7f
c0026e6d:	0f 95 c2             	setne  dl
c0026e70:	09 da                	or     edx,ebx
c0026e72:	83 e2 01             	and    edx,0x1
c0026e75:	c1 e8 07             	shr    eax,0x7
c0026e78:	21 c2                	and    edx,eax
c0026e7a:	b8 9e 01 00 00       	mov    eax,0x19e
c0026e7f:	29 c8                	sub    eax,ecx
c0026e81:	c1 e0 17             	shl    eax,0x17
c0026e84:	09 d8                	or     eax,ebx
c0026e86:	01 d0                	add    eax,edx
c0026e88:	5b                   	pop    ebx
c0026e89:	5d                   	pop    ebp
c0026e8a:	c3                   	ret    

c0026e8b <__floatunsisf>:
c0026e8b:	55                   	push   ebp
c0026e8c:	89 e5                	mov    ebp,esp
c0026e8e:	53                   	push   ebx
c0026e8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026e92:	31 c0                	xor    eax,eax
c0026e94:	85 d2                	test   edx,edx
c0026e96:	74 32                	je     c0026eca <__floatunsisf+0x3f>
c0026e98:	0f bd ca             	bsr    ecx,edx
c0026e9b:	83 f1 1f             	xor    ecx,0x1f
c0026e9e:	d3 e2                	shl    edx,cl
c0026ea0:	89 d0                	mov    eax,edx
c0026ea2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ea7:	89 c3                	mov    ebx,eax
c0026ea9:	c1 eb 08             	shr    ebx,0x8
c0026eac:	80 e2 7f             	and    dl,0x7f
c0026eaf:	0f 95 c2             	setne  dl
c0026eb2:	09 da                	or     edx,ebx
c0026eb4:	83 e2 01             	and    edx,0x1
c0026eb7:	c1 e8 07             	shr    eax,0x7
c0026eba:	21 c2                	and    edx,eax
c0026ebc:	b8 9e 00 00 00       	mov    eax,0x9e
c0026ec1:	29 c8                	sub    eax,ecx
c0026ec3:	c1 e0 17             	shl    eax,0x17
c0026ec6:	09 d8                	or     eax,ebx
c0026ec8:	01 d0                	add    eax,edx
c0026eca:	5b                   	pop    ebx
c0026ecb:	5d                   	pop    ebp
c0026ecc:	c3                   	ret    

c0026ecd <__fixsfsi>:
c0026ecd:	55                   	push   ebp
c0026ece:	89 e5                	mov    ebp,esp
c0026ed0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026ed3:	89 d1                	mov    ecx,edx
c0026ed5:	c1 e1 08             	shl    ecx,0x8
c0026ed8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026ede:	c1 fa 17             	sar    edx,0x17
c0026ee1:	78 1c                	js     c0026eff <__fixsfsi+0x32>
c0026ee3:	83 ea 7f             	sub    edx,0x7f
c0026ee6:	31 c0                	xor    eax,eax
c0026ee8:	83 fa 1e             	cmp    edx,0x1e
c0026eeb:	77 40                	ja     c0026f2d <__fixsfsi+0x60>
c0026eed:	89 c8                	mov    eax,ecx
c0026eef:	0d 00 00 00 80       	or     eax,0x80000000
c0026ef4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026ef9:	29 d1                	sub    ecx,edx
c0026efb:	d3 e8                	shr    eax,cl
c0026efd:	eb 2e                	jmp    c0026f2d <__fixsfsi+0x60>
c0026eff:	31 c0                	xor    eax,eax
c0026f01:	81 c2 81 00 00 00    	add    edx,0x81
c0026f07:	78 24                	js     c0026f2d <__fixsfsi+0x60>
c0026f09:	83 fa 1e             	cmp    edx,0x1e
c0026f0c:	7e 09                	jle    c0026f17 <__fixsfsi+0x4a>
c0026f0e:	83 fa 1f             	cmp    edx,0x1f
c0026f11:	75 18                	jne    c0026f2b <__fixsfsi+0x5e>
c0026f13:	85 c9                	test   ecx,ecx
c0026f15:	75 14                	jne    c0026f2b <__fixsfsi+0x5e>
c0026f17:	89 c8                	mov    eax,ecx
c0026f19:	0d 00 00 00 80       	or     eax,0x80000000
c0026f1e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f23:	29 d1                	sub    ecx,edx
c0026f25:	d3 e8                	shr    eax,cl
c0026f27:	f7 d8                	neg    eax
c0026f29:	eb 02                	jmp    c0026f2d <__fixsfsi+0x60>
c0026f2b:	31 c0                	xor    eax,eax
c0026f2d:	5d                   	pop    ebp
c0026f2e:	c3                   	ret    

c0026f2f <__fixunssfsi>:
c0026f2f:	55                   	push   ebp
c0026f30:	89 e5                	mov    ebp,esp
c0026f32:	53                   	push   ebx
c0026f33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f36:	89 d3                	mov    ebx,edx
c0026f38:	c1 fb 17             	sar    ebx,0x17
c0026f3b:	83 eb 7f             	sub    ebx,0x7f
c0026f3e:	31 c0                	xor    eax,eax
c0026f40:	83 fb 1f             	cmp    ebx,0x1f
c0026f43:	77 18                	ja     c0026f5d <__fixunssfsi+0x2e>
c0026f45:	89 d0                	mov    eax,edx
c0026f47:	c1 e0 08             	shl    eax,0x8
c0026f4a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f4f:	0d 00 00 00 80       	or     eax,0x80000000
c0026f54:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f59:	29 d9                	sub    ecx,ebx
c0026f5b:	d3 e8                	shr    eax,cl
c0026f5d:	5b                   	pop    ebx
c0026f5e:	5d                   	pop    ebp
c0026f5f:	c3                   	ret    

c0026f60 <__cmpsf2>:
c0026f60:	55                   	push   ebp
c0026f61:	89 e5                	mov    ebp,esp
c0026f63:	57                   	push   edi
c0026f64:	56                   	push   esi
c0026f65:	53                   	push   ebx
c0026f66:	83 ec 24             	sub    esp,0x24
c0026f69:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026f6f:	e8 4f 10 00 00       	call   c0027fc3 <__truncdfsf2>
c0026f74:	5a                   	pop    edx
c0026f75:	59                   	pop    ecx
c0026f76:	89 c3                	mov    ebx,eax
c0026f78:	c1 e8 17             	shr    eax,0x17
c0026f7b:	0f b6 f0             	movzx  esi,al
c0026f7e:	89 d8                	mov    eax,ebx
c0026f80:	c1 e8 1f             	shr    eax,0x1f
c0026f83:	31 c6                	xor    esi,eax
c0026f85:	c1 e3 08             	shl    ebx,0x8
c0026f88:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026f8b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026f8e:	e8 30 10 00 00       	call   c0027fc3 <__truncdfsf2>
c0026f93:	83 c4 10             	add    esp,0x10
c0026f96:	89 c1                	mov    ecx,eax
c0026f98:	c1 e9 17             	shr    ecx,0x17
c0026f9b:	0f b6 c9             	movzx  ecx,cl
c0026f9e:	89 c7                	mov    edi,eax
c0026fa0:	c1 ef 1f             	shr    edi,0x1f
c0026fa3:	89 ca                	mov    edx,ecx
c0026fa5:	31 fa                	xor    edx,edi
c0026fa7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026faa:	c1 e0 08             	shl    eax,0x8
c0026fad:	89 c2                	mov    edx,eax
c0026faf:	89 d8                	mov    eax,ebx
c0026fb1:	09 d0                	or     eax,edx
c0026fb3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fb8:	09 f0                	or     eax,esi
c0026fba:	75 08                	jne    c0026fc4 <__cmpsf2+0x64>
c0026fbc:	31 c0                	xor    eax,eax
c0026fbe:	39 f9                	cmp    ecx,edi
c0026fc0:	75 0c                	jne    c0026fce <__cmpsf2+0x6e>
c0026fc2:	eb 29                	jmp    c0026fed <__cmpsf2+0x8d>
c0026fc4:	b8 01 00 00 00       	mov    eax,0x1
c0026fc9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026fcc:	7f 1f                	jg     c0026fed <__cmpsf2+0x8d>
c0026fce:	83 c8 ff             	or     eax,0xffffffff
c0026fd1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026fd4:	7c 17                	jl     c0026fed <__cmpsf2+0x8d>
c0026fd6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026fdc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026fe2:	b8 01 00 00 00       	mov    eax,0x1
c0026fe7:	39 d3                	cmp    ebx,edx
c0026fe9:	77 02                	ja     c0026fed <__cmpsf2+0x8d>
c0026feb:	19 c0                	sbb    eax,eax
c0026fed:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026ff0:	5b                   	pop    ebx
c0026ff1:	5e                   	pop    esi
c0026ff2:	5f                   	pop    edi
c0026ff3:	5d                   	pop    ebp
c0026ff4:	c3                   	ret    

c0026ff5 <__eqsf2>:
c0026ff5:	55                   	push   ebp
c0026ff6:	89 e5                	mov    ebp,esp
c0026ff8:	83 ec 24             	sub    esp,0x24
c0026ffb:	6a 01                	push   0x1
c0026ffd:	83 ec 0c             	sub    esp,0xc
c0027000:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027003:	e8 df 10 00 00       	call   c00280e7 <__extendsfdf2>
c0027008:	83 c4 10             	add    esp,0x10
c002700b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002700e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027011:	52                   	push   edx
c0027012:	50                   	push   eax
c0027013:	50                   	push   eax
c0027014:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027017:	e8 cb 10 00 00       	call   c00280e7 <__extendsfdf2>
c002701c:	59                   	pop    ecx
c002701d:	59                   	pop    ecx
c002701e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027021:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027024:	52                   	push   edx
c0027025:	50                   	push   eax
c0027026:	e8 35 ff ff ff       	call   c0026f60 <__cmpsf2>
c002702b:	83 c4 20             	add    esp,0x20
c002702e:	c9                   	leave  
c002702f:	c3                   	ret    

c0027030 <__nesf2>:
c0027030:	eb c3                	jmp    c0026ff5 <__eqsf2>

c0027032 <__gtsf2>:
c0027032:	55                   	push   ebp
c0027033:	89 e5                	mov    ebp,esp
c0027035:	83 ec 24             	sub    esp,0x24
c0027038:	6a ff                	push   0xffffffff
c002703a:	83 ec 0c             	sub    esp,0xc
c002703d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027040:	e8 a2 10 00 00       	call   c00280e7 <__extendsfdf2>
c0027045:	83 c4 10             	add    esp,0x10
c0027048:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002704b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002704e:	52                   	push   edx
c002704f:	50                   	push   eax
c0027050:	50                   	push   eax
c0027051:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027054:	e8 8e 10 00 00       	call   c00280e7 <__extendsfdf2>
c0027059:	59                   	pop    ecx
c002705a:	59                   	pop    ecx
c002705b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002705e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027061:	52                   	push   edx
c0027062:	50                   	push   eax
c0027063:	e8 f8 fe ff ff       	call   c0026f60 <__cmpsf2>
c0027068:	83 c4 20             	add    esp,0x20
c002706b:	c9                   	leave  
c002706c:	c3                   	ret    

c002706d <__gesf2>:
c002706d:	eb c3                	jmp    c0027032 <__gtsf2>

c002706f <__ltsf2>:
c002706f:	eb 84                	jmp    c0026ff5 <__eqsf2>

c0027071 <__lesf2>:
c0027071:	eb 82                	jmp    c0026ff5 <__eqsf2>

c0027073 <__adddf3>:
c0027073:	55                   	push   ebp
c0027074:	89 e5                	mov    ebp,esp
c0027076:	57                   	push   edi
c0027077:	56                   	push   esi
c0027078:	53                   	push   ebx
c0027079:	83 ec 24             	sub    esp,0x24
c002707c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002707f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027082:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027085:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027088:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002708b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002708e:	89 c8                	mov    eax,ecx
c0027090:	89 ce                	mov    esi,ecx
c0027092:	c1 fe 14             	sar    esi,0x14
c0027095:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027098:	89 fb                	mov    ebx,edi
c002709a:	89 fa                	mov    edx,edi
c002709c:	c1 e2 0b             	shl    edx,0xb
c002709f:	c1 e0 0b             	shl    eax,0xb
c00270a2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00270a7:	c1 eb 15             	shr    ebx,0x15
c00270aa:	09 d8                	or     eax,ebx
c00270ac:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00270af:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00270b2:	c1 fe 14             	sar    esi,0x14
c00270b5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00270b8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00270bb:	89 f3                	mov    ebx,esi
c00270bd:	c1 e3 0b             	shl    ebx,0xb
c00270c0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00270c3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00270c6:	c1 e3 0b             	shl    ebx,0xb
c00270c9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00270cf:	c1 ee 15             	shr    esi,0x15
c00270d2:	09 f3                	or     ebx,esi
c00270d4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00270d7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00270da:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00270dd:	0f 88 5f 02 00 00    	js     c0027342 <__adddf3+0x2cf>
c00270e3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00270e6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00270e9:	85 db                	test   ebx,ebx
c00270eb:	0f 8e c7 00 00 00    	jle    c00271b8 <__adddf3+0x145>
c00270f1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00270f8:	75 1a                	jne    c0027114 <__adddf3+0xa1>
c00270fa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270fd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027100:	0f 84 b2 05 00 00    	je     c00276b8 <__adddf3+0x645>
c0027106:	4b                   	dec    ebx
c0027107:	75 23                	jne    c002712c <__adddf3+0xb9>
c0027109:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002710c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002710f:	e9 99 00 00 00       	jmp    c00271ad <__adddf3+0x13a>
c0027114:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027117:	f7 d6                	not    esi
c0027119:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002711f:	0f 84 93 05 00 00    	je     c00276b8 <__adddf3+0x645>
c0027125:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002712c:	83 fb 1f             	cmp    ebx,0x1f
c002712f:	7e 42                	jle    c0027173 <__adddf3+0x100>
c0027131:	83 fb 3f             	cmp    ebx,0x3f
c0027134:	0f 8f 7e 05 00 00    	jg     c00276b8 <__adddf3+0x645>
c002713a:	83 e3 1f             	and    ebx,0x1f
c002713d:	89 d9                	mov    ecx,ebx
c002713f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027142:	d3 ef                	shr    edi,cl
c0027144:	31 db                	xor    ebx,ebx
c0027146:	85 c9                	test   ecx,ecx
c0027148:	74 15                	je     c002715f <__adddf3+0xec>
c002714a:	be 20 00 00 00       	mov    esi,0x20
c002714f:	29 ce                	sub    esi,ecx
c0027151:	89 f1                	mov    ecx,esi
c0027153:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027156:	d3 e6                	shl    esi,cl
c0027158:	31 db                	xor    ebx,ebx
c002715a:	85 f6                	test   esi,esi
c002715c:	0f 95 c3             	setne  bl
c002715f:	31 c9                	xor    ecx,ecx
c0027161:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027165:	0f 95 c1             	setne  cl
c0027168:	09 cf                	or     edi,ecx
c002716a:	09 fb                	or     ebx,edi
c002716c:	01 da                	add    edx,ebx
c002716e:	83 d0 00             	adc    eax,0x0
c0027171:	eb 3a                	jmp    c00271ad <__adddf3+0x13a>
c0027173:	bf 20 00 00 00       	mov    edi,0x20
c0027178:	29 df                	sub    edi,ebx
c002717a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002717d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027180:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027183:	d3 e6                	shl    esi,cl
c0027185:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027188:	88 d9                	mov    cl,bl
c002718a:	d3 ef                	shr    edi,cl
c002718c:	09 fe                	or     esi,edi
c002718e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027191:	88 d9                	mov    cl,bl
c0027193:	d3 ef                	shr    edi,cl
c0027195:	89 fb                	mov    ebx,edi
c0027197:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002719a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002719d:	d3 e7                	shl    edi,cl
c002719f:	85 ff                	test   edi,edi
c00271a1:	0f 95 c1             	setne  cl
c00271a4:	0f b6 c9             	movzx  ecx,cl
c00271a7:	09 ce                	or     esi,ecx
c00271a9:	01 f2                	add    edx,esi
c00271ab:	11 d8                	adc    eax,ebx
c00271ad:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00271b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271b3:	e9 52 01 00 00       	jmp    c002730a <__adddf3+0x297>
c00271b8:	0f 84 d5 00 00 00    	je     c0027293 <__adddf3+0x220>
c00271be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00271c1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00271c4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00271c7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00271ca:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00271d1:	75 20                	jne    c00271f3 <__adddf3+0x180>
c00271d3:	89 d6                	mov    esi,edx
c00271d5:	09 c6                	or     esi,eax
c00271d7:	0f 84 db 04 00 00    	je     c00276b8 <__adddf3+0x645>
c00271dd:	4b                   	dec    ebx
c00271de:	75 29                	jne    c0027209 <__adddf3+0x196>
c00271e0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271e6:	01 d1                	add    ecx,edx
c00271e8:	11 c6                	adc    esi,eax
c00271ea:	89 f0                	mov    eax,esi
c00271ec:	89 ca                	mov    edx,ecx
c00271ee:	e9 17 01 00 00       	jmp    c002730a <__adddf3+0x297>
c00271f3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00271f6:	f7 d6                	not    esi
c00271f8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00271fe:	0f 84 b4 04 00 00    	je     c00276b8 <__adddf3+0x645>
c0027204:	0d 00 00 00 80       	or     eax,0x80000000
c0027209:	83 fb 1f             	cmp    ebx,0x1f
c002720c:	7e 48                	jle    c0027256 <__adddf3+0x1e3>
c002720e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027211:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027214:	83 fb 3f             	cmp    ebx,0x3f
c0027217:	0f 8f 9b 04 00 00    	jg     c00276b8 <__adddf3+0x645>
c002721d:	83 e3 1f             	and    ebx,0x1f
c0027220:	89 d9                	mov    ecx,ebx
c0027222:	89 c7                	mov    edi,eax
c0027224:	d3 ef                	shr    edi,cl
c0027226:	31 db                	xor    ebx,ebx
c0027228:	85 c9                	test   ecx,ecx
c002722a:	74 12                	je     c002723e <__adddf3+0x1cb>
c002722c:	be 20 00 00 00       	mov    esi,0x20
c0027231:	29 ce                	sub    esi,ecx
c0027233:	89 f1                	mov    ecx,esi
c0027235:	d3 e0                	shl    eax,cl
c0027237:	31 db                	xor    ebx,ebx
c0027239:	85 c0                	test   eax,eax
c002723b:	0f 95 c3             	setne  bl
c002723e:	31 c0                	xor    eax,eax
c0027240:	85 d2                	test   edx,edx
c0027242:	0f 95 c0             	setne  al
c0027245:	09 c7                	or     edi,eax
c0027247:	09 fb                	or     ebx,edi
c0027249:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002724c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002724f:	01 da                	add    edx,ebx
c0027251:	83 d6 00             	adc    esi,0x0
c0027254:	eb 39                	jmp    c002728f <__adddf3+0x21c>
c0027256:	be 20 00 00 00       	mov    esi,0x20
c002725b:	29 de                	sub    esi,ebx
c002725d:	89 c7                	mov    edi,eax
c002725f:	89 f1                	mov    ecx,esi
c0027261:	d3 e7                	shl    edi,cl
c0027263:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027266:	89 d7                	mov    edi,edx
c0027268:	88 d9                	mov    cl,bl
c002726a:	d3 ef                	shr    edi,cl
c002726c:	89 f9                	mov    ecx,edi
c002726e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027271:	09 cf                	or     edi,ecx
c0027273:	88 d9                	mov    cl,bl
c0027275:	d3 e8                	shr    eax,cl
c0027277:	89 f1                	mov    ecx,esi
c0027279:	d3 e2                	shl    edx,cl
c002727b:	85 d2                	test   edx,edx
c002727d:	0f 95 c2             	setne  dl
c0027280:	0f b6 d2             	movzx  edx,dl
c0027283:	09 d7                	or     edi,edx
c0027285:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027288:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002728b:	01 fa                	add    edx,edi
c002728d:	11 c6                	adc    esi,eax
c002728f:	89 f0                	mov    eax,esi
c0027291:	eb 77                	jmp    c002730a <__adddf3+0x297>
c0027293:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027296:	46                   	inc    esi
c0027297:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002729a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00272a0:	75 41                	jne    c00272e3 <__adddf3+0x270>
c00272a2:	89 d3                	mov    ebx,edx
c00272a4:	09 c3                	or     ebx,eax
c00272a6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00272ad:	75 27                	jne    c00272d6 <__adddf3+0x263>
c00272af:	85 db                	test   ebx,ebx
c00272b1:	0f 84 fb 03 00 00    	je     c00276b2 <__adddf3+0x63f>
c00272b7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00272ba:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00272bd:	0f 84 f5 03 00 00    	je     c00276b8 <__adddf3+0x645>
c00272c3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00272c6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00272c9:	85 c0                	test   eax,eax
c00272cb:	0f 89 91 03 00 00    	jns    c0027662 <__adddf3+0x5ef>
c00272d1:	e9 85 03 00 00       	jmp    c002765b <__adddf3+0x5e8>
c00272d6:	85 db                	test   ebx,ebx
c00272d8:	0f 85 da 03 00 00    	jne    c00276b8 <__adddf3+0x645>
c00272de:	e9 cf 03 00 00       	jmp    c00276b2 <__adddf3+0x63f>
c00272e3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00272e6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00272e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00272ec:	f7 d1                	not    ecx
c00272ee:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00272f4:	0f 84 70 03 00 00    	je     c002766a <__adddf3+0x5f7>
c00272fa:	d1 ea                	shr    edx,1
c00272fc:	89 c1                	mov    ecx,eax
c00272fe:	c1 e1 1f             	shl    ecx,0x1f
c0027301:	09 ca                	or     edx,ecx
c0027303:	d1 e8                	shr    eax,1
c0027305:	e9 6f 03 00 00       	jmp    c0027679 <__adddf3+0x606>
c002730a:	85 c0                	test   eax,eax
c002730c:	0f 89 67 03 00 00    	jns    c0027679 <__adddf3+0x606>
c0027312:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027315:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027318:	f7 d1                	not    ecx
c002731a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027320:	0f 84 44 03 00 00    	je     c002766a <__adddf3+0x5f7>
c0027326:	89 d1                	mov    ecx,edx
c0027328:	d1 e9                	shr    ecx,1
c002732a:	83 e2 01             	and    edx,0x1
c002732d:	09 ca                	or     edx,ecx
c002732f:	89 c1                	mov    ecx,eax
c0027331:	c1 e1 1f             	shl    ecx,0x1f
c0027334:	09 ca                	or     edx,ecx
c0027336:	d1 e8                	shr    eax,1
c0027338:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002733d:	e9 37 03 00 00       	jmp    c0027679 <__adddf3+0x606>
c0027342:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027345:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002734b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002734e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027351:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027357:	29 de                	sub    esi,ebx
c0027359:	85 f6                	test   esi,esi
c002735b:	0f 8e bd 00 00 00    	jle    c002741e <__adddf3+0x3ab>
c0027361:	85 db                	test   ebx,ebx
c0027363:	75 17                	jne    c002737c <__adddf3+0x309>
c0027365:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027368:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002736b:	0f 84 47 03 00 00    	je     c00276b8 <__adddf3+0x645>
c0027371:	4e                   	dec    esi
c0027372:	75 20                	jne    c0027394 <__adddf3+0x321>
c0027374:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027377:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002737a:	eb 5b                	jmp    c00273d7 <__adddf3+0x364>
c002737c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002737f:	f7 d3                	not    ebx
c0027381:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027387:	0f 84 2b 03 00 00    	je     c00276b8 <__adddf3+0x645>
c002738d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027394:	83 fe 1f             	cmp    esi,0x1f
c0027397:	7e 49                	jle    c00273e2 <__adddf3+0x36f>
c0027399:	83 fe 3f             	cmp    esi,0x3f
c002739c:	0f 8f 16 03 00 00    	jg     c00276b8 <__adddf3+0x645>
c00273a2:	83 e6 1f             	and    esi,0x1f
c00273a5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273a8:	89 f1                	mov    ecx,esi
c00273aa:	d3 ef                	shr    edi,cl
c00273ac:	31 db                	xor    ebx,ebx
c00273ae:	85 f6                	test   esi,esi
c00273b0:	74 13                	je     c00273c5 <__adddf3+0x352>
c00273b2:	b9 20 00 00 00       	mov    ecx,0x20
c00273b7:	29 f1                	sub    ecx,esi
c00273b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273bc:	d3 e6                	shl    esi,cl
c00273be:	31 db                	xor    ebx,ebx
c00273c0:	85 f6                	test   esi,esi
c00273c2:	0f 95 c3             	setne  bl
c00273c5:	31 c9                	xor    ecx,ecx
c00273c7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00273cb:	0f 95 c1             	setne  cl
c00273ce:	09 cf                	or     edi,ecx
c00273d0:	09 fb                	or     ebx,edi
c00273d2:	29 da                	sub    edx,ebx
c00273d4:	83 d8 00             	sbb    eax,0x0
c00273d7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273da:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273dd:	e9 aa 01 00 00       	jmp    c002758c <__adddf3+0x519>
c00273e2:	bf 20 00 00 00       	mov    edi,0x20
c00273e7:	29 f7                	sub    edi,esi
c00273e9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273ec:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00273ef:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273f2:	d3 e3                	shl    ebx,cl
c00273f4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273f7:	89 f1                	mov    ecx,esi
c00273f9:	d3 ef                	shr    edi,cl
c00273fb:	09 fb                	or     ebx,edi
c00273fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027400:	89 f1                	mov    ecx,esi
c0027402:	d3 ef                	shr    edi,cl
c0027404:	89 fe                	mov    esi,edi
c0027406:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027409:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002740c:	d3 e7                	shl    edi,cl
c002740e:	85 ff                	test   edi,edi
c0027410:	0f 95 c1             	setne  cl
c0027413:	0f b6 c9             	movzx  ecx,cl
c0027416:	09 cb                	or     ebx,ecx
c0027418:	29 da                	sub    edx,ebx
c002741a:	19 f0                	sbb    eax,esi
c002741c:	eb b9                	jmp    c00273d7 <__adddf3+0x364>
c002741e:	0f 84 cd 00 00 00    	je     c00274f1 <__adddf3+0x47e>
c0027424:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027427:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002742a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002742d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027431:	75 1b                	jne    c002744e <__adddf3+0x3db>
c0027433:	89 d6                	mov    esi,edx
c0027435:	09 c6                	or     esi,eax
c0027437:	0f 84 7b 02 00 00    	je     c00276b8 <__adddf3+0x645>
c002743d:	4b                   	dec    ebx
c002743e:	75 24                	jne    c0027464 <__adddf3+0x3f1>
c0027440:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027443:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027446:	29 d1                	sub    ecx,edx
c0027448:	19 c6                	sbb    esi,eax
c002744a:	89 ca                	mov    edx,ecx
c002744c:	eb 61                	jmp    c00274af <__adddf3+0x43c>
c002744e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027451:	f7 d6                	not    esi
c0027453:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027459:	0f 84 59 02 00 00    	je     c00276b8 <__adddf3+0x645>
c002745f:	0d 00 00 00 80       	or     eax,0x80000000
c0027464:	83 fb 1f             	cmp    ebx,0x1f
c0027467:	7e 4d                	jle    c00274b6 <__adddf3+0x443>
c0027469:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002746c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002746f:	83 fb 3f             	cmp    ebx,0x3f
c0027472:	0f 8f 40 02 00 00    	jg     c00276b8 <__adddf3+0x645>
c0027478:	83 e3 1f             	and    ebx,0x1f
c002747b:	89 d9                	mov    ecx,ebx
c002747d:	89 c7                	mov    edi,eax
c002747f:	d3 ef                	shr    edi,cl
c0027481:	31 db                	xor    ebx,ebx
c0027483:	85 c9                	test   ecx,ecx
c0027485:	74 12                	je     c0027499 <__adddf3+0x426>
c0027487:	be 20 00 00 00       	mov    esi,0x20
c002748c:	29 ce                	sub    esi,ecx
c002748e:	89 f1                	mov    ecx,esi
c0027490:	d3 e0                	shl    eax,cl
c0027492:	31 db                	xor    ebx,ebx
c0027494:	85 c0                	test   eax,eax
c0027496:	0f 95 c3             	setne  bl
c0027499:	31 c0                	xor    eax,eax
c002749b:	85 d2                	test   edx,edx
c002749d:	0f 95 c0             	setne  al
c00274a0:	09 c7                	or     edi,eax
c00274a2:	09 fb                	or     ebx,edi
c00274a4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274a7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274aa:	29 da                	sub    edx,ebx
c00274ac:	83 de 00             	sbb    esi,0x0
c00274af:	89 f0                	mov    eax,esi
c00274b1:	e9 d6 00 00 00       	jmp    c002758c <__adddf3+0x519>
c00274b6:	be 20 00 00 00       	mov    esi,0x20
c00274bb:	29 de                	sub    esi,ebx
c00274bd:	89 c7                	mov    edi,eax
c00274bf:	89 f1                	mov    ecx,esi
c00274c1:	d3 e7                	shl    edi,cl
c00274c3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00274c6:	89 d7                	mov    edi,edx
c00274c8:	88 d9                	mov    cl,bl
c00274ca:	d3 ef                	shr    edi,cl
c00274cc:	89 f9                	mov    ecx,edi
c00274ce:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00274d1:	09 cf                	or     edi,ecx
c00274d3:	88 d9                	mov    cl,bl
c00274d5:	d3 e8                	shr    eax,cl
c00274d7:	89 f1                	mov    ecx,esi
c00274d9:	d3 e2                	shl    edx,cl
c00274db:	85 d2                	test   edx,edx
c00274dd:	0f 95 c2             	setne  dl
c00274e0:	0f b6 d2             	movzx  edx,dl
c00274e3:	09 d7                	or     edi,edx
c00274e5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274e8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00274eb:	29 fa                	sub    edx,edi
c00274ed:	19 c6                	sbb    esi,eax
c00274ef:	eb be                	jmp    c00274af <__adddf3+0x43c>
c00274f1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274f4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00274f7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00274fd:	75 6a                	jne    c0027569 <__adddf3+0x4f6>
c00274ff:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027503:	75 58                	jne    c002755d <__adddf3+0x4ea>
c0027505:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027508:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002750b:	89 d6                	mov    esi,edx
c002750d:	09 c6                	or     esi,eax
c002750f:	75 17                	jne    c0027528 <__adddf3+0x4b5>
c0027511:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027514:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027517:	85 db                	test   ebx,ebx
c0027519:	0f 85 99 01 00 00    	jne    c00276b8 <__adddf3+0x645>
c002751f:	31 ff                	xor    edi,edi
c0027521:	31 c9                	xor    ecx,ecx
c0027523:	e9 90 01 00 00       	jmp    c00276b8 <__adddf3+0x645>
c0027528:	85 db                	test   ebx,ebx
c002752a:	0f 84 88 01 00 00    	je     c00276b8 <__adddf3+0x645>
c0027530:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027533:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027536:	85 c0                	test   eax,eax
c0027538:	79 10                	jns    c002754a <__adddf3+0x4d7>
c002753a:	31 c9                	xor    ecx,ecx
c002753c:	f7 da                	neg    edx
c002753e:	0f 95 c1             	setne  cl
c0027541:	01 c8                	add    eax,ecx
c0027543:	f7 d8                	neg    eax
c0027545:	e9 2f 01 00 00       	jmp    c0027679 <__adddf3+0x606>
c002754a:	31 ff                	xor    edi,edi
c002754c:	31 c9                	xor    ecx,ecx
c002754e:	89 c3                	mov    ebx,eax
c0027550:	09 d3                	or     ebx,edx
c0027552:	0f 84 60 01 00 00    	je     c00276b8 <__adddf3+0x645>
c0027558:	e9 05 01 00 00       	jmp    c0027662 <__adddf3+0x5ef>
c002755d:	31 ff                	xor    edi,edi
c002755f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027564:	e9 4f 01 00 00       	jmp    c00276b8 <__adddf3+0x645>
c0027569:	89 c1                	mov    ecx,eax
c002756b:	89 d0                	mov    eax,edx
c002756d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027570:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027573:	89 ca                	mov    edx,ecx
c0027575:	85 c9                	test   ecx,ecx
c0027577:	79 2c                	jns    c00275a5 <__adddf3+0x532>
c0027579:	31 c9                	xor    ecx,ecx
c002757b:	f7 d8                	neg    eax
c002757d:	0f 95 c1             	setne  cl
c0027580:	01 ca                	add    edx,ecx
c0027582:	f7 da                	neg    edx
c0027584:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027587:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002758a:	eb 19                	jmp    c00275a5 <__adddf3+0x532>
c002758c:	85 c0                	test   eax,eax
c002758e:	0f 89 e5 00 00 00    	jns    c0027679 <__adddf3+0x606>
c0027594:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027599:	89 c1                	mov    ecx,eax
c002759b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002759e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00275a1:	89 d0                	mov    eax,edx
c00275a3:	89 ca                	mov    edx,ecx
c00275a5:	85 d2                	test   edx,edx
c00275a7:	74 59                	je     c0027602 <__adddf3+0x58f>
c00275a9:	0f bd da             	bsr    ebx,edx
c00275ac:	83 f3 1f             	xor    ebx,0x1f
c00275af:	88 d9                	mov    cl,bl
c00275b1:	d3 e2                	shl    edx,cl
c00275b3:	bf 20 00 00 00       	mov    edi,0x20
c00275b8:	89 f9                	mov    ecx,edi
c00275ba:	29 d9                	sub    ecx,ebx
c00275bc:	89 c6                	mov    esi,eax
c00275be:	d3 ee                	shr    esi,cl
c00275c0:	09 d6                	or     esi,edx
c00275c2:	88 d9                	mov    cl,bl
c00275c4:	d3 e0                	shl    eax,cl
c00275c6:	89 c2                	mov    edx,eax
c00275c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00275cb:	25 ff 07 00 00       	and    eax,0x7ff
c00275d0:	39 d8                	cmp    eax,ebx
c00275d2:	7f 22                	jg     c00275f6 <__adddf3+0x583>
c00275d4:	29 c3                	sub    ebx,eax
c00275d6:	43                   	inc    ebx
c00275d7:	88 d9                	mov    cl,bl
c00275d9:	d3 ea                	shr    edx,cl
c00275db:	29 df                	sub    edi,ebx
c00275dd:	89 f9                	mov    ecx,edi
c00275df:	89 f0                	mov    eax,esi
c00275e1:	d3 e0                	shl    eax,cl
c00275e3:	09 c2                	or     edx,eax
c00275e5:	89 f0                	mov    eax,esi
c00275e7:	88 d9                	mov    cl,bl
c00275e9:	d3 e8                	shr    eax,cl
c00275eb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275ee:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00275f4:	eb 6f                	jmp    c0027665 <__adddf3+0x5f2>
c00275f6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00275f9:	29 d8                	sub    eax,ebx
c00275fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275fe:	89 f0                	mov    eax,esi
c0027600:	eb 59                	jmp    c002765b <__adddf3+0x5e8>
c0027602:	85 c0                	test   eax,eax
c0027604:	74 6a                	je     c0027670 <__adddf3+0x5fd>
c0027606:	0f bd c8             	bsr    ecx,eax
c0027609:	83 f1 1f             	xor    ecx,0x1f
c002760c:	d3 e0                	shl    eax,cl
c002760e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027611:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027617:	83 c1 20             	add    ecx,0x20
c002761a:	39 cb                	cmp    ebx,ecx
c002761c:	7f 35                	jg     c0027653 <__adddf3+0x5e0>
c002761e:	29 d9                	sub    ecx,ebx
c0027620:	8d 71 01             	lea    esi,[ecx+0x1]
c0027623:	83 fe 1f             	cmp    esi,0x1f
c0027626:	7e 09                	jle    c0027631 <__adddf3+0x5be>
c0027628:	83 e9 1f             	sub    ecx,0x1f
c002762b:	d3 e8                	shr    eax,cl
c002762d:	89 c3                	mov    ebx,eax
c002762f:	eb 11                	jmp    c0027642 <__adddf3+0x5cf>
c0027631:	b9 20 00 00 00       	mov    ecx,0x20
c0027636:	29 f1                	sub    ecx,esi
c0027638:	89 c3                	mov    ebx,eax
c002763a:	d3 e3                	shl    ebx,cl
c002763c:	89 f1                	mov    ecx,esi
c002763e:	d3 e8                	shr    eax,cl
c0027640:	89 c2                	mov    edx,eax
c0027642:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027645:	25 00 f8 ff ff       	and    eax,0xfffff800
c002764a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002764d:	89 d0                	mov    eax,edx
c002764f:	89 da                	mov    edx,ebx
c0027651:	eb 26                	jmp    c0027679 <__adddf3+0x606>
c0027653:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027656:	29 cf                	sub    edi,ecx
c0027658:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002765b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027660:	eb 17                	jmp    c0027679 <__adddf3+0x606>
c0027662:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027665:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027668:	eb 0f                	jmp    c0027679 <__adddf3+0x606>
c002766a:	31 d2                	xor    edx,edx
c002766c:	31 c0                	xor    eax,eax
c002766e:	eb 09                	jmp    c0027679 <__adddf3+0x606>
c0027670:	89 c2                	mov    edx,eax
c0027672:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027679:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002767c:	c1 e1 14             	shl    ecx,0x14
c002767f:	89 c3                	mov    ebx,eax
c0027681:	c1 eb 0b             	shr    ebx,0xb
c0027684:	09 d9                	or     ecx,ebx
c0027686:	89 d3                	mov    ebx,edx
c0027688:	c1 eb 0b             	shr    ebx,0xb
c002768b:	c1 e0 15             	shl    eax,0x15
c002768e:	09 d8                	or     eax,ebx
c0027690:	89 c7                	mov    edi,eax
c0027692:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027698:	0f 95 c0             	setne  al
c002769b:	89 c6                	mov    esi,eax
c002769d:	09 f3                	or     ebx,esi
c002769f:	83 e3 01             	and    ebx,0x1
c00276a2:	c1 ea 0a             	shr    edx,0xa
c00276a5:	21 da                	and    edx,ebx
c00276a7:	89 f8                	mov    eax,edi
c00276a9:	01 d0                	add    eax,edx
c00276ab:	83 d1 00             	adc    ecx,0x0
c00276ae:	89 c7                	mov    edi,eax
c00276b0:	eb 06                	jmp    c00276b8 <__adddf3+0x645>
c00276b2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276b5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276b8:	89 f8                	mov    eax,edi
c00276ba:	89 ca                	mov    edx,ecx
c00276bc:	83 c4 24             	add    esp,0x24
c00276bf:	5b                   	pop    ebx
c00276c0:	5e                   	pop    esi
c00276c1:	5f                   	pop    edi
c00276c2:	5d                   	pop    ebp
c00276c3:	c3                   	ret    

c00276c4 <__subdf3>:
c00276c4:	55                   	push   ebp
c00276c5:	89 e5                	mov    ebp,esp
c00276c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00276ca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00276cd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00276d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00276d6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00276d9:	5d                   	pop    ebp
c00276da:	e9 94 f9 ff ff       	jmp    c0027073 <__adddf3>

c00276df <__negdf2>:
c00276df:	55                   	push   ebp
c00276e0:	89 e5                	mov    ebp,esp
c00276e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00276e5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00276e8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00276ee:	5d                   	pop    ebp
c00276ef:	c3                   	ret    

c00276f0 <__muldf3>:
c00276f0:	55                   	push   ebp
c00276f1:	89 e5                	mov    ebp,esp
c00276f3:	57                   	push   edi
c00276f4:	56                   	push   esi
c00276f5:	53                   	push   ebx
c00276f6:	83 ec 24             	sub    esp,0x24
c00276f9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00276fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00276ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027702:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027705:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027708:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002770b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002770e:	89 c8                	mov    eax,ecx
c0027710:	c1 f8 14             	sar    eax,0x14
c0027713:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027716:	89 f8                	mov    eax,edi
c0027718:	89 fb                	mov    ebx,edi
c002771a:	c1 e3 0b             	shl    ebx,0xb
c002771d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027720:	c1 e1 0b             	shl    ecx,0xb
c0027723:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027729:	c1 e8 15             	shr    eax,0x15
c002772c:	09 c1                	or     ecx,eax
c002772e:	89 d6                	mov    esi,edx
c0027730:	89 d0                	mov    eax,edx
c0027732:	c1 f8 14             	sar    eax,0x14
c0027735:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027738:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002773b:	89 c3                	mov    ebx,eax
c002773d:	c1 e3 0b             	shl    ebx,0xb
c0027740:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027743:	c1 e6 0b             	shl    esi,0xb
c0027746:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002774c:	c1 e8 15             	shr    eax,0x15
c002774f:	09 c6                	or     esi,eax
c0027751:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027754:	25 ff 07 00 00       	and    eax,0x7ff
c0027759:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002775c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002775f:	25 ff 07 00 00       	and    eax,0x7ff
c0027764:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027767:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002776a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002776d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027774:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027777:	40                   	inc    eax
c0027778:	a9 fe 07 00 00       	test   eax,0x7fe
c002777d:	0f 85 8d 00 00 00    	jne    c0027810 <__muldf3+0x120>
c0027783:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027786:	09 c8                	or     eax,ecx
c0027788:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002778c:	74 44                	je     c00277d2 <__muldf3+0xe2>
c002778e:	85 c0                	test   eax,eax
c0027790:	0f 85 31 02 00 00    	jne    c00279c7 <__muldf3+0x2d7>
c0027796:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027799:	40                   	inc    eax
c002779a:	a9 fe 07 00 00       	test   eax,0x7fe
c002779f:	75 13                	jne    c00277b4 <__muldf3+0xc4>
c00277a1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277a4:	09 f1                	or     ecx,esi
c00277a6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277aa:	74 22                	je     c00277ce <__muldf3+0xde>
c00277ac:	85 c9                	test   ecx,ecx
c00277ae:	0f 85 0d 02 00 00    	jne    c00279c1 <__muldf3+0x2d1>
c00277b4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00277b8:	0f 89 09 02 00 00    	jns    c00279c7 <__muldf3+0x2d7>
c00277be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277c1:	05 00 00 00 80       	add    eax,0x80000000
c00277c6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00277c9:	e9 f9 01 00 00       	jmp    c00279c7 <__muldf3+0x2d7>
c00277ce:	85 c9                	test   ecx,ecx
c00277d0:	eb 2e                	jmp    c0027800 <__muldf3+0x110>
c00277d2:	85 c0                	test   eax,eax
c00277d4:	74 20                	je     c00277f6 <__muldf3+0x106>
c00277d6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00277d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00277dc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277df:	c1 ef 1f             	shr    edi,0x1f
c00277e2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00277e5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00277e8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00277eb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277ee:	09 f9                	or     ecx,edi
c00277f0:	78 1e                	js     c0027810 <__muldf3+0x120>
c00277f2:	89 c3                	mov    ebx,eax
c00277f4:	eb e0                	jmp    c00277d6 <__muldf3+0xe6>
c00277f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00277f9:	f7 d0                	not    eax
c00277fb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027800:	75 b2                	jne    c00277b4 <__muldf3+0xc4>
c0027802:	31 ff                	xor    edi,edi
c0027804:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002780b:	e9 b7 01 00 00       	jmp    c00279c7 <__muldf3+0x2d7>
c0027810:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027813:	40                   	inc    eax
c0027814:	a9 fe 07 00 00       	test   eax,0x7fe
c0027819:	75 57                	jne    c0027872 <__muldf3+0x182>
c002781b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002781e:	09 f0                	or     eax,esi
c0027820:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027824:	74 23                	je     c0027849 <__muldf3+0x159>
c0027826:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002782a:	0f 89 91 01 00 00    	jns    c00279c1 <__muldf3+0x2d1>
c0027830:	85 c0                	test   eax,eax
c0027832:	0f 85 89 01 00 00    	jne    c00279c1 <__muldf3+0x2d1>
c0027838:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002783b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027841:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027844:	e9 7e 01 00 00       	jmp    c00279c7 <__muldf3+0x2d7>
c0027849:	85 c0                	test   eax,eax
c002784b:	75 0c                	jne    c0027859 <__muldf3+0x169>
c002784d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027851:	0f 89 6a 01 00 00    	jns    c00279c1 <__muldf3+0x2d1>
c0027857:	eb df                	jmp    c0027838 <__muldf3+0x148>
c0027859:	01 f6                	add    esi,esi
c002785b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002785e:	c1 ea 1f             	shr    edx,0x1f
c0027861:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027864:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027867:	8d 43 ff             	lea    eax,[ebx-0x1]
c002786a:	09 d6                	or     esi,edx
c002786c:	78 04                	js     c0027872 <__muldf3+0x182>
c002786e:	89 c3                	mov    ebx,eax
c0027870:	eb e7                	jmp    c0027859 <__muldf3+0x169>
c0027872:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027878:	81 ce 00 00 00 80    	or     esi,0x80000000
c002787e:	89 c8                	mov    eax,ecx
c0027880:	f7 e6                	mul    esi
c0027882:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027885:	89 c7                	mov    edi,eax
c0027887:	89 c8                	mov    eax,ecx
c0027889:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002788c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002788f:	89 c1                	mov    ecx,eax
c0027891:	89 f0                	mov    eax,esi
c0027893:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027896:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027899:	89 c6                	mov    esi,eax
c002789b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002789e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00278a1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00278a4:	31 c0                	xor    eax,eax
c00278a6:	01 f1                	add    ecx,esi
c00278a8:	0f 92 c0             	setb   al
c00278ab:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00278ae:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00278b1:	83 d6 00             	adc    esi,0x0
c00278b4:	01 c7                	add    edi,eax
c00278b6:	83 d6 00             	adc    esi,0x0
c00278b9:	01 ca                	add    edx,ecx
c00278bb:	0f 92 c1             	setb   cl
c00278be:	0f b6 c9             	movzx  ecx,cl
c00278c1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00278c4:	83 d6 00             	adc    esi,0x0
c00278c7:	01 cf                	add    edi,ecx
c00278c9:	83 d6 00             	adc    esi,0x0
c00278cc:	31 c9                	xor    ecx,ecx
c00278ce:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00278d1:	0f 95 c1             	setne  cl
c00278d4:	09 cf                	or     edi,ecx
c00278d6:	85 f6                	test   esi,esi
c00278d8:	78 0c                	js     c00278e6 <__muldf3+0x1f6>
c00278da:	01 f6                	add    esi,esi
c00278dc:	89 f8                	mov    eax,edi
c00278de:	c1 e8 1f             	shr    eax,0x1f
c00278e1:	09 c6                	or     esi,eax
c00278e3:	01 ff                	add    edi,edi
c00278e5:	4b                   	dec    ebx
c00278e6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00278ec:	0f 8f 85 00 00 00    	jg     c0027977 <__muldf3+0x287>
c00278f2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00278f8:	85 db                	test   ebx,ebx
c00278fa:	0f 8f 84 00 00 00    	jg     c0027984 <__muldf3+0x294>
c0027900:	83 fb cc             	cmp    ebx,0xffffffcc
c0027903:	7c 79                	jl     c002797e <__muldf3+0x28e>
c0027905:	ba 01 00 00 00       	mov    edx,0x1
c002790a:	29 da                	sub    edx,ebx
c002790c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027912:	83 fa 1f             	cmp    edx,0x1f
c0027915:	7e 30                	jle    c0027947 <__muldf3+0x257>
c0027917:	83 fa 20             	cmp    edx,0x20
c002791a:	75 0b                	jne    c0027927 <__muldf3+0x237>
c002791c:	31 c0                	xor    eax,eax
c002791e:	85 ff                	test   edi,edi
c0027920:	0f 95 c0             	setne  al
c0027923:	89 c7                	mov    edi,eax
c0027925:	eb 1a                	jmp    c0027941 <__muldf3+0x251>
c0027927:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002792a:	89 f0                	mov    eax,esi
c002792c:	d3 e0                	shl    eax,cl
c002792e:	09 f8                	or     eax,edi
c0027930:	0f 95 c0             	setne  al
c0027933:	0f b6 c0             	movzx  eax,al
c0027936:	89 c7                	mov    edi,eax
c0027938:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002793d:	29 d9                	sub    ecx,ebx
c002793f:	d3 ee                	shr    esi,cl
c0027941:	09 f7                	or     edi,esi
c0027943:	31 db                	xor    ebx,ebx
c0027945:	eb 3b                	jmp    c0027982 <__muldf3+0x292>
c0027947:	83 c3 1f             	add    ebx,0x1f
c002794a:	89 f0                	mov    eax,esi
c002794c:	88 d9                	mov    cl,bl
c002794e:	d3 e0                	shl    eax,cl
c0027950:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027953:	89 f8                	mov    eax,edi
c0027955:	88 d1                	mov    cl,dl
c0027957:	d3 e8                	shr    eax,cl
c0027959:	89 c1                	mov    ecx,eax
c002795b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002795e:	09 c8                	or     eax,ecx
c0027960:	88 d9                	mov    cl,bl
c0027962:	d3 e7                	shl    edi,cl
c0027964:	31 db                	xor    ebx,ebx
c0027966:	85 ff                	test   edi,edi
c0027968:	0f 95 c3             	setne  bl
c002796b:	89 df                	mov    edi,ebx
c002796d:	09 c7                	or     edi,eax
c002796f:	88 d1                	mov    cl,dl
c0027971:	d3 ee                	shr    esi,cl
c0027973:	31 db                	xor    ebx,ebx
c0027975:	eb 0d                	jmp    c0027984 <__muldf3+0x294>
c0027977:	bb ff 07 00 00       	mov    ebx,0x7ff
c002797c:	eb 02                	jmp    c0027980 <__muldf3+0x290>
c002797e:	31 db                	xor    ebx,ebx
c0027980:	31 ff                	xor    edi,edi
c0027982:	31 f6                	xor    esi,esi
c0027984:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027987:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002798a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002798f:	09 c3                	or     ebx,eax
c0027991:	c1 e3 14             	shl    ebx,0x14
c0027994:	89 f0                	mov    eax,esi
c0027996:	c1 e8 0b             	shr    eax,0xb
c0027999:	09 c3                	or     ebx,eax
c002799b:	89 f8                	mov    eax,edi
c002799d:	c1 e8 0b             	shr    eax,0xb
c00279a0:	c1 e6 15             	shl    esi,0x15
c00279a3:	09 c6                	or     esi,eax
c00279a5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00279ab:	0f 95 c1             	setne  cl
c00279ae:	09 c8                	or     eax,ecx
c00279b0:	83 e0 01             	and    eax,0x1
c00279b3:	c1 ef 0a             	shr    edi,0xa
c00279b6:	21 c7                	and    edi,eax
c00279b8:	01 f7                	add    edi,esi
c00279ba:	83 d3 00             	adc    ebx,0x0
c00279bd:	89 da                	mov    edx,ebx
c00279bf:	eb 03                	jmp    c00279c4 <__muldf3+0x2d4>
c00279c1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00279c4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00279c7:	89 f8                	mov    eax,edi
c00279c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00279cc:	83 c4 24             	add    esp,0x24
c00279cf:	5b                   	pop    ebx
c00279d0:	5e                   	pop    esi
c00279d1:	5f                   	pop    edi
c00279d2:	5d                   	pop    ebp
c00279d3:	c3                   	ret    

c00279d4 <__divdf3>:
c00279d4:	55                   	push   ebp
c00279d5:	89 e5                	mov    ebp,esp
c00279d7:	57                   	push   edi
c00279d8:	56                   	push   esi
c00279d9:	53                   	push   ebx
c00279da:	83 ec 2c             	sub    esp,0x2c
c00279dd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00279e0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00279e3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00279e6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00279e9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00279ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00279ef:	89 ce                	mov    esi,ecx
c00279f1:	89 c8                	mov    eax,ecx
c00279f3:	c1 f8 14             	sar    eax,0x14
c00279f6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279f9:	89 f8                	mov    eax,edi
c00279fb:	89 fb                	mov    ebx,edi
c00279fd:	c1 e3 0b             	shl    ebx,0xb
c0027a00:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027a03:	c1 e6 0b             	shl    esi,0xb
c0027a06:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027a0c:	c1 e8 15             	shr    eax,0x15
c0027a0f:	09 c6                	or     esi,eax
c0027a11:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027a14:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027a17:	89 c2                	mov    edx,eax
c0027a19:	c1 fa 14             	sar    edx,0x14
c0027a1c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027a1f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027a22:	89 de                	mov    esi,ebx
c0027a24:	c1 e6 0b             	shl    esi,0xb
c0027a27:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027a2a:	c1 e0 0b             	shl    eax,0xb
c0027a2d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027a32:	c1 eb 15             	shr    ebx,0x15
c0027a35:	09 d8                	or     eax,ebx
c0027a37:	89 c2                	mov    edx,eax
c0027a39:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a3c:	25 ff 07 00 00       	and    eax,0x7ff
c0027a41:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027a44:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a47:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a4d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027a50:	29 d8                	sub    eax,ebx
c0027a52:	05 ff 03 00 00       	add    eax,0x3ff
c0027a57:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027a5a:	46                   	inc    esi
c0027a5b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027a61:	0f 85 a5 00 00 00    	jne    c0027b0c <__divdf3+0x138>
c0027a67:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a6a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027a6d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027a71:	74 2a                	je     c0027a9d <__divdf3+0xc9>
c0027a73:	85 f6                	test   esi,esi
c0027a75:	0f 85 cc 02 00 00    	jne    c0027d47 <__divdf3+0x373>
c0027a7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a7e:	40                   	inc    eax
c0027a7f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a84:	75 26                	jne    c0027aac <__divdf3+0xd8>
c0027a86:	85 db                	test   ebx,ebx
c0027a88:	74 22                	je     c0027aac <__divdf3+0xd8>
c0027a8a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027a8d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027a90:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a93:	09 d0                	or     eax,edx
c0027a95:	0f 85 ac 02 00 00    	jne    c0027d47 <__divdf3+0x373>
c0027a9b:	eb 63                	jmp    c0027b00 <__divdf3+0x12c>
c0027a9d:	85 f6                	test   esi,esi
c0027a9f:	75 22                	jne    c0027ac3 <__divdf3+0xef>
c0027aa1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027aa4:	40                   	inc    eax
c0027aa5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027aaa:	74 36                	je     c0027ae2 <__divdf3+0x10e>
c0027aac:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ab0:	0f 89 91 02 00 00    	jns    c0027d47 <__divdf3+0x373>
c0027ab6:	89 f8                	mov    eax,edi
c0027ab8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027abe:	e9 80 02 00 00       	jmp    c0027d43 <__divdf3+0x36f>
c0027ac3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ac6:	01 f6                	add    esi,esi
c0027ac8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027acb:	c1 ef 1f             	shr    edi,0x1f
c0027ace:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ad1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027ad4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027ad7:	09 f7                	or     edi,esi
c0027ad9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027adc:	78 2e                	js     c0027b0c <__divdf3+0x138>
c0027ade:	89 c8                	mov    eax,ecx
c0027ae0:	eb e1                	jmp    c0027ac3 <__divdf3+0xef>
c0027ae2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ae5:	09 d0                	or     eax,edx
c0027ae7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027aeb:	74 0f                	je     c0027afc <__divdf3+0x128>
c0027aed:	85 c0                	test   eax,eax
c0027aef:	74 bb                	je     c0027aac <__divdf3+0xd8>
c0027af1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027af4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027af7:	e9 4b 02 00 00       	jmp    c0027d47 <__divdf3+0x373>
c0027afc:	85 c0                	test   eax,eax
c0027afe:	75 ac                	jne    c0027aac <__divdf3+0xd8>
c0027b00:	31 ff                	xor    edi,edi
c0027b02:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b07:	e9 3b 02 00 00       	jmp    c0027d47 <__divdf3+0x373>
c0027b0c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b0f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027b12:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027b18:	75 6b                	jne    c0027b85 <__divdf3+0x1b1>
c0027b1a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b1d:	09 d6                	or     esi,edx
c0027b1f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027b23:	74 28                	je     c0027b4d <__divdf3+0x179>
c0027b25:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b28:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b2b:	85 f6                	test   esi,esi
c0027b2d:	0f 85 14 02 00 00    	jne    c0027d47 <__divdf3+0x373>
c0027b33:	31 ff                	xor    edi,edi
c0027b35:	31 c9                	xor    ecx,ecx
c0027b37:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b3a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027b3d:	0f 89 04 02 00 00    	jns    c0027d47 <__divdf3+0x373>
c0027b43:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027b48:	e9 fa 01 00 00       	jmp    c0027d47 <__divdf3+0x373>
c0027b4d:	85 f6                	test   esi,esi
c0027b4f:	75 1b                	jne    c0027b6c <__divdf3+0x198>
c0027b51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b54:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027b57:	25 00 00 00 80       	and    eax,0x80000000
c0027b5c:	31 c9                	xor    ecx,ecx
c0027b5e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027b63:	89 cf                	mov    edi,ecx
c0027b65:	89 c1                	mov    ecx,eax
c0027b67:	e9 db 01 00 00       	jmp    c0027d47 <__divdf3+0x373>
c0027b6c:	01 d2                	add    edx,edx
c0027b6e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027b71:	c1 eb 1f             	shr    ebx,0x1f
c0027b74:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b77:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027b7a:	8d 48 01             	lea    ecx,[eax+0x1]
c0027b7d:	09 da                	or     edx,ebx
c0027b7f:	78 04                	js     c0027b85 <__divdf3+0x1b1>
c0027b81:	89 c8                	mov    eax,ecx
c0027b83:	eb e7                	jmp    c0027b6c <__divdf3+0x198>
c0027b85:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027b88:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b8e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b94:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027b97:	39 d6                	cmp    esi,edx
c0027b99:	77 0d                	ja     c0027ba8 <__divdf3+0x1d4>
c0027b9b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027b9e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027ba1:	72 1b                	jb     c0027bbe <__divdf3+0x1ea>
c0027ba3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027ba6:	75 16                	jne    c0027bbe <__divdf3+0x1ea>
c0027ba8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027bab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027bae:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027bb1:	83 de 00             	sbb    esi,0x0
c0027bb4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027bb7:	ba 01 00 00 00       	mov    edx,0x1
c0027bbc:	eb 02                	jmp    c0027bc0 <__divdf3+0x1ec>
c0027bbe:	31 d2                	xor    edx,edx
c0027bc0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027bc7:	31 ff                	xor    edi,edi
c0027bc9:	01 ff                	add    edi,edi
c0027bcb:	89 d1                	mov    ecx,edx
c0027bcd:	c1 e9 1f             	shr    ecx,0x1f
c0027bd0:	09 cf                	or     edi,ecx
c0027bd2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027bd5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027bd8:	89 da                	mov    edx,ebx
c0027bda:	89 f3                	mov    ebx,esi
c0027bdc:	8d 34 36             	lea    esi,[esi+esi*1]
c0027bdf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027be2:	c1 e9 1f             	shr    ecx,0x1f
c0027be5:	09 ce                	or     esi,ecx
c0027be7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bea:	01 c9                	add    ecx,ecx
c0027bec:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027bef:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027bf2:	85 db                	test   ebx,ebx
c0027bf4:	78 29                	js     c0027c1f <__divdf3+0x24b>
c0027bf6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027bf9:	72 07                	jb     c0027c02 <__divdf3+0x22e>
c0027bfb:	75 3c                	jne    c0027c39 <__divdf3+0x265>
c0027bfd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027c00:	77 37                	ja     c0027c39 <__divdf3+0x265>
c0027c02:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c05:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027c08:	31 d2                	xor    edx,edx
c0027c0a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027c0d:	0f 97 c2             	seta   dl
c0027c10:	29 d6                	sub    esi,edx
c0027c12:	89 d9                	mov    ecx,ebx
c0027c14:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027c17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027c1a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027c1d:	eb 17                	jmp    c0027c36 <__divdf3+0x262>
c0027c1f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c22:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027c28:	0f 97 c1             	seta   cl
c0027c2b:	0f b6 c9             	movzx  ecx,cl
c0027c2e:	29 ce                	sub    esi,ecx
c0027c30:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027c33:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027c36:	83 ca 01             	or     edx,0x1
c0027c39:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027c3c:	75 8b                	jne    c0027bc9 <__divdf3+0x1f5>
c0027c3e:	c1 e7 09             	shl    edi,0x9
c0027c41:	89 d1                	mov    ecx,edx
c0027c43:	c1 e9 17             	shr    ecx,0x17
c0027c46:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c49:	09 f3                	or     ebx,esi
c0027c4b:	0f 95 c3             	setne  bl
c0027c4e:	0f b6 db             	movzx  ebx,bl
c0027c51:	c1 e2 09             	shl    edx,0x9
c0027c54:	09 d3                	or     ebx,edx
c0027c56:	89 ca                	mov    edx,ecx
c0027c58:	09 fa                	or     edx,edi
c0027c5a:	78 0c                	js     c0027c68 <__divdf3+0x294>
c0027c5c:	01 d2                	add    edx,edx
c0027c5e:	89 d9                	mov    ecx,ebx
c0027c60:	c1 e9 1f             	shr    ecx,0x1f
c0027c63:	09 ca                	or     edx,ecx
c0027c65:	01 db                	add    ebx,ebx
c0027c67:	48                   	dec    eax
c0027c68:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027c6d:	0f 8f 83 00 00 00    	jg     c0027cf6 <__divdf3+0x322>
c0027c73:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027c79:	85 c0                	test   eax,eax
c0027c7b:	0f 8f 82 00 00 00    	jg     c0027d03 <__divdf3+0x32f>
c0027c81:	83 f8 cc             	cmp    eax,0xffffffcc
c0027c84:	7c 77                	jl     c0027cfd <__divdf3+0x329>
c0027c86:	be 01 00 00 00       	mov    esi,0x1
c0027c8b:	29 c6                	sub    esi,eax
c0027c8d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027c93:	83 fe 1f             	cmp    esi,0x1f
c0027c96:	7e 2f                	jle    c0027cc7 <__divdf3+0x2f3>
c0027c98:	83 fe 20             	cmp    esi,0x20
c0027c9b:	75 0a                	jne    c0027ca7 <__divdf3+0x2d3>
c0027c9d:	85 db                	test   ebx,ebx
c0027c9f:	0f 95 c3             	setne  bl
c0027ca2:	0f b6 db             	movzx  ebx,bl
c0027ca5:	eb 1a                	jmp    c0027cc1 <__divdf3+0x2ed>
c0027ca7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027caa:	89 d7                	mov    edi,edx
c0027cac:	d3 e7                	shl    edi,cl
c0027cae:	89 f9                	mov    ecx,edi
c0027cb0:	09 d9                	or     ecx,ebx
c0027cb2:	0f 95 c3             	setne  bl
c0027cb5:	0f b6 db             	movzx  ebx,bl
c0027cb8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027cbd:	29 c1                	sub    ecx,eax
c0027cbf:	d3 ea                	shr    edx,cl
c0027cc1:	09 d3                	or     ebx,edx
c0027cc3:	31 c0                	xor    eax,eax
c0027cc5:	eb 3a                	jmp    c0027d01 <__divdf3+0x32d>
c0027cc7:	83 c0 1f             	add    eax,0x1f
c0027cca:	89 d7                	mov    edi,edx
c0027ccc:	88 c1                	mov    cl,al
c0027cce:	d3 e7                	shl    edi,cl
c0027cd0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027cd3:	89 df                	mov    edi,ebx
c0027cd5:	89 f1                	mov    ecx,esi
c0027cd7:	d3 ef                	shr    edi,cl
c0027cd9:	89 f9                	mov    ecx,edi
c0027cdb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027cde:	09 cf                	or     edi,ecx
c0027ce0:	88 c1                	mov    cl,al
c0027ce2:	d3 e3                	shl    ebx,cl
c0027ce4:	85 db                	test   ebx,ebx
c0027ce6:	0f 95 c3             	setne  bl
c0027ce9:	0f b6 db             	movzx  ebx,bl
c0027cec:	09 fb                	or     ebx,edi
c0027cee:	89 f1                	mov    ecx,esi
c0027cf0:	d3 ea                	shr    edx,cl
c0027cf2:	31 c0                	xor    eax,eax
c0027cf4:	eb 0d                	jmp    c0027d03 <__divdf3+0x32f>
c0027cf6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027cfb:	eb 02                	jmp    c0027cff <__divdf3+0x32b>
c0027cfd:	31 c0                	xor    eax,eax
c0027cff:	31 db                	xor    ebx,ebx
c0027d01:	31 d2                	xor    edx,edx
c0027d03:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027d06:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027d09:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027d0f:	09 c8                	or     eax,ecx
c0027d11:	c1 e0 14             	shl    eax,0x14
c0027d14:	89 d1                	mov    ecx,edx
c0027d16:	c1 e9 0b             	shr    ecx,0xb
c0027d19:	09 c8                	or     eax,ecx
c0027d1b:	89 c6                	mov    esi,eax
c0027d1d:	89 d9                	mov    ecx,ebx
c0027d1f:	c1 e9 0b             	shr    ecx,0xb
c0027d22:	c1 e2 15             	shl    edx,0x15
c0027d25:	09 ca                	or     edx,ecx
c0027d27:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027d2d:	0f 95 c0             	setne  al
c0027d30:	09 c1                	or     ecx,eax
c0027d32:	83 e1 01             	and    ecx,0x1
c0027d35:	c1 eb 0a             	shr    ebx,0xa
c0027d38:	21 cb                	and    ebx,ecx
c0027d3a:	01 d3                	add    ebx,edx
c0027d3c:	89 d8                	mov    eax,ebx
c0027d3e:	83 d6 00             	adc    esi,0x0
c0027d41:	89 f2                	mov    edx,esi
c0027d43:	89 c7                	mov    edi,eax
c0027d45:	89 d1                	mov    ecx,edx
c0027d47:	89 f8                	mov    eax,edi
c0027d49:	89 ca                	mov    edx,ecx
c0027d4b:	83 c4 2c             	add    esp,0x2c
c0027d4e:	5b                   	pop    ebx
c0027d4f:	5e                   	pop    esi
c0027d50:	5f                   	pop    edi
c0027d51:	5d                   	pop    ebp
c0027d52:	c3                   	ret    

c0027d53 <__floatsidf>:
c0027d53:	55                   	push   ebp
c0027d54:	89 e5                	mov    ebp,esp
c0027d56:	56                   	push   esi
c0027d57:	53                   	push   ebx
c0027d58:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027d5b:	85 db                	test   ebx,ebx
c0027d5d:	7e 15                	jle    c0027d74 <__floatsidf+0x21>
c0027d5f:	0f bd cb             	bsr    ecx,ebx
c0027d62:	83 f1 1f             	xor    ecx,0x1f
c0027d65:	d3 e3                	shl    ebx,cl
c0027d67:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027d6d:	b8 1e 04 00 00       	mov    eax,0x41e
c0027d72:	eb 21                	jmp    c0027d95 <__floatsidf+0x42>
c0027d74:	b8 00 00 00 00       	mov    eax,0x0
c0027d79:	ba 00 00 00 00       	mov    edx,0x0
c0027d7e:	74 2a                	je     c0027daa <__floatsidf+0x57>
c0027d80:	f7 db                	neg    ebx
c0027d82:	0f bd cb             	bsr    ecx,ebx
c0027d85:	83 f1 1f             	xor    ecx,0x1f
c0027d88:	d3 e3                	shl    ebx,cl
c0027d8a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027d90:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027d95:	29 c8                	sub    eax,ecx
c0027d97:	c1 e0 14             	shl    eax,0x14
c0027d9a:	89 c1                	mov    ecx,eax
c0027d9c:	89 de                	mov    esi,ebx
c0027d9e:	c1 ee 0b             	shr    esi,0xb
c0027da1:	09 f1                	or     ecx,esi
c0027da3:	89 ca                	mov    edx,ecx
c0027da5:	c1 e3 15             	shl    ebx,0x15
c0027da8:	89 d8                	mov    eax,ebx
c0027daa:	5b                   	pop    ebx
c0027dab:	5e                   	pop    esi
c0027dac:	5d                   	pop    ebp
c0027dad:	c3                   	ret    

c0027dae <__floatunsidf>:
c0027dae:	55                   	push   ebp
c0027daf:	89 e5                	mov    ebp,esp
c0027db1:	56                   	push   esi
c0027db2:	53                   	push   ebx
c0027db3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027db6:	85 db                	test   ebx,ebx
c0027db8:	74 2a                	je     c0027de4 <__floatunsidf+0x36>
c0027dba:	0f bd cb             	bsr    ecx,ebx
c0027dbd:	83 f1 1f             	xor    ecx,0x1f
c0027dc0:	d3 e3                	shl    ebx,cl
c0027dc2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027dc8:	b8 1e 04 00 00       	mov    eax,0x41e
c0027dcd:	29 c8                	sub    eax,ecx
c0027dcf:	c1 e0 14             	shl    eax,0x14
c0027dd2:	89 c1                	mov    ecx,eax
c0027dd4:	89 de                	mov    esi,ebx
c0027dd6:	c1 ee 0b             	shr    esi,0xb
c0027dd9:	09 f1                	or     ecx,esi
c0027ddb:	89 ca                	mov    edx,ecx
c0027ddd:	c1 e3 15             	shl    ebx,0x15
c0027de0:	89 d8                	mov    eax,ebx
c0027de2:	eb 04                	jmp    c0027de8 <__floatunsidf+0x3a>
c0027de4:	31 c0                	xor    eax,eax
c0027de6:	31 d2                	xor    edx,edx
c0027de8:	5b                   	pop    ebx
c0027de9:	5e                   	pop    esi
c0027dea:	5d                   	pop    ebp
c0027deb:	c3                   	ret    

c0027dec <__fixdfsi>:
c0027dec:	55                   	push   ebp
c0027ded:	89 e5                	mov    ebp,esp
c0027def:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027df2:	89 d1                	mov    ecx,edx
c0027df4:	c1 e1 0b             	shl    ecx,0xb
c0027df7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027e00:	c1 e8 15             	shr    eax,0x15
c0027e03:	09 c1                	or     ecx,eax
c0027e05:	c1 fa 14             	sar    edx,0x14
c0027e08:	78 1f                	js     c0027e29 <__fixdfsi+0x3d>
c0027e0a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027e10:	31 c0                	xor    eax,eax
c0027e12:	83 fa 1e             	cmp    edx,0x1e
c0027e15:	77 40                	ja     c0027e57 <__fixdfsi+0x6b>
c0027e17:	89 c8                	mov    eax,ecx
c0027e19:	0d 00 00 00 80       	or     eax,0x80000000
c0027e1e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e23:	29 d1                	sub    ecx,edx
c0027e25:	d3 e8                	shr    eax,cl
c0027e27:	eb 2e                	jmp    c0027e57 <__fixdfsi+0x6b>
c0027e29:	31 c0                	xor    eax,eax
c0027e2b:	81 c2 01 04 00 00    	add    edx,0x401
c0027e31:	78 24                	js     c0027e57 <__fixdfsi+0x6b>
c0027e33:	83 fa 1e             	cmp    edx,0x1e
c0027e36:	7e 09                	jle    c0027e41 <__fixdfsi+0x55>
c0027e38:	83 fa 1f             	cmp    edx,0x1f
c0027e3b:	75 18                	jne    c0027e55 <__fixdfsi+0x69>
c0027e3d:	85 c9                	test   ecx,ecx
c0027e3f:	75 14                	jne    c0027e55 <__fixdfsi+0x69>
c0027e41:	89 c8                	mov    eax,ecx
c0027e43:	0d 00 00 00 80       	or     eax,0x80000000
c0027e48:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e4d:	29 d1                	sub    ecx,edx
c0027e4f:	d3 e8                	shr    eax,cl
c0027e51:	f7 d8                	neg    eax
c0027e53:	eb 02                	jmp    c0027e57 <__fixdfsi+0x6b>
c0027e55:	31 c0                	xor    eax,eax
c0027e57:	5d                   	pop    ebp
c0027e58:	c3                   	ret    

c0027e59 <__fixunsdfsi>:
c0027e59:	55                   	push   ebp
c0027e5a:	89 e5                	mov    ebp,esp
c0027e5c:	53                   	push   ebx
c0027e5d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027e60:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027e63:	89 d3                	mov    ebx,edx
c0027e65:	c1 fb 14             	sar    ebx,0x14
c0027e68:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027e6e:	31 c0                	xor    eax,eax
c0027e70:	83 fb 1f             	cmp    ebx,0x1f
c0027e73:	77 1d                	ja     c0027e92 <__fixunsdfsi+0x39>
c0027e75:	89 d0                	mov    eax,edx
c0027e77:	c1 e0 0b             	shl    eax,0xb
c0027e7a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e7f:	c1 e9 15             	shr    ecx,0x15
c0027e82:	09 c8                	or     eax,ecx
c0027e84:	0d 00 00 00 80       	or     eax,0x80000000
c0027e89:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e8e:	29 d9                	sub    ecx,ebx
c0027e90:	d3 e8                	shr    eax,cl
c0027e92:	5b                   	pop    ebx
c0027e93:	5d                   	pop    ebp
c0027e94:	c3                   	ret    

c0027e95 <__cmpdf2>:
c0027e95:	55                   	push   ebp
c0027e96:	89 e5                	mov    ebp,esp
c0027e98:	57                   	push   edi
c0027e99:	56                   	push   esi
c0027e9a:	53                   	push   ebx
c0027e9b:	83 ec 0c             	sub    esp,0xc
c0027e9e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027ea1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ea4:	89 ca                	mov    edx,ecx
c0027ea6:	c1 ea 14             	shr    edx,0x14
c0027ea9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027eaf:	89 cb                	mov    ebx,ecx
c0027eb1:	c1 fb 1f             	sar    ebx,0x1f
c0027eb4:	31 da                	xor    edx,ebx
c0027eb6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027eb9:	89 df                	mov    edi,ebx
c0027ebb:	c1 e7 0b             	shl    edi,0xb
c0027ebe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ec1:	c1 e1 0b             	shl    ecx,0xb
c0027ec4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027eca:	c1 eb 15             	shr    ebx,0x15
c0027ecd:	09 d9                	or     ecx,ebx
c0027ecf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027ed2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027ed5:	89 ce                	mov    esi,ecx
c0027ed7:	c1 ee 14             	shr    esi,0x14
c0027eda:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ee0:	89 cb                	mov    ebx,ecx
c0027ee2:	c1 fb 1f             	sar    ebx,0x1f
c0027ee5:	31 de                	xor    esi,ebx
c0027ee7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027eea:	89 df                	mov    edi,ebx
c0027eec:	c1 e7 0b             	shl    edi,0xb
c0027eef:	c1 e1 0b             	shl    ecx,0xb
c0027ef2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ef8:	c1 eb 15             	shr    ebx,0x15
c0027efb:	09 d9                	or     ecx,ebx
c0027efd:	89 d3                	mov    ebx,edx
c0027eff:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f05:	43                   	inc    ebx
c0027f06:	83 fb 01             	cmp    ebx,0x1
c0027f09:	77 08                	ja     c0027f13 <__cmpdf2+0x7e>
c0027f0b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f0e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027f11:	75 68                	jne    c0027f7b <__cmpdf2+0xe6>
c0027f13:	89 f3                	mov    ebx,esi
c0027f15:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f1b:	43                   	inc    ebx
c0027f1c:	83 fb 01             	cmp    ebx,0x1
c0027f1f:	77 06                	ja     c0027f27 <__cmpdf2+0x92>
c0027f21:	89 fb                	mov    ebx,edi
c0027f23:	09 cb                	or     ebx,ecx
c0027f25:	75 54                	jne    c0027f7b <__cmpdf2+0xe6>
c0027f27:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f2a:	09 f8                	or     eax,edi
c0027f2c:	09 c8                	or     eax,ecx
c0027f2e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027f31:	75 12                	jne    c0027f45 <__cmpdf2+0xb0>
c0027f33:	8d 42 01             	lea    eax,[edx+0x1]
c0027f36:	83 f8 01             	cmp    eax,0x1
c0027f39:	77 0a                	ja     c0027f45 <__cmpdf2+0xb0>
c0027f3b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027f3e:	31 c0                	xor    eax,eax
c0027f40:	83 fb 01             	cmp    ebx,0x1
c0027f43:	76 36                	jbe    c0027f7b <__cmpdf2+0xe6>
c0027f45:	b8 01 00 00 00       	mov    eax,0x1
c0027f4a:	39 f2                	cmp    edx,esi
c0027f4c:	7f 2d                	jg     c0027f7b <__cmpdf2+0xe6>
c0027f4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027f53:	7c 26                	jl     c0027f7b <__cmpdf2+0xe6>
c0027f55:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f58:	77 07                	ja     c0027f61 <__cmpdf2+0xcc>
c0027f5a:	72 16                	jb     c0027f72 <__cmpdf2+0xdd>
c0027f5c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027f5f:	76 0a                	jbe    c0027f6b <__cmpdf2+0xd6>
c0027f61:	89 d0                	mov    eax,edx
c0027f63:	c1 f8 1f             	sar    eax,0x1f
c0027f66:	83 c8 01             	or     eax,0x1
c0027f69:	eb 10                	jmp    c0027f7b <__cmpdf2+0xe6>
c0027f6b:	b8 00 00 00 00       	mov    eax,0x0
c0027f70:	73 09                	jae    c0027f7b <__cmpdf2+0xe6>
c0027f72:	89 d0                	mov    eax,edx
c0027f74:	c1 f8 1f             	sar    eax,0x1f
c0027f77:	83 e0 02             	and    eax,0x2
c0027f7a:	48                   	dec    eax
c0027f7b:	83 c4 0c             	add    esp,0xc
c0027f7e:	5b                   	pop    ebx
c0027f7f:	5e                   	pop    esi
c0027f80:	5f                   	pop    edi
c0027f81:	5d                   	pop    ebp
c0027f82:	c3                   	ret    

c0027f83 <__eqdf2>:
c0027f83:	55                   	push   ebp
c0027f84:	89 e5                	mov    ebp,esp
c0027f86:	50                   	push   eax
c0027f87:	6a 01                	push   0x1
c0027f89:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027f8c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027f8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027f95:	e8 fb fe ff ff       	call   c0027e95 <__cmpdf2>
c0027f9a:	83 c4 18             	add    esp,0x18
c0027f9d:	c9                   	leave  
c0027f9e:	c3                   	ret    

c0027f9f <__nedf2>:
c0027f9f:	eb e2                	jmp    c0027f83 <__eqdf2>

c0027fa1 <__gtdf2>:
c0027fa1:	55                   	push   ebp
c0027fa2:	89 e5                	mov    ebp,esp
c0027fa4:	50                   	push   eax
c0027fa5:	6a ff                	push   0xffffffff
c0027fa7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027faa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027fad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027fb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027fb3:	e8 dd fe ff ff       	call   c0027e95 <__cmpdf2>
c0027fb8:	83 c4 18             	add    esp,0x18
c0027fbb:	c9                   	leave  
c0027fbc:	c3                   	ret    

c0027fbd <__gedf2>:
c0027fbd:	eb e2                	jmp    c0027fa1 <__gtdf2>

c0027fbf <__ltdf2>:
c0027fbf:	eb c2                	jmp    c0027f83 <__eqdf2>

c0027fc1 <__ledf2>:
c0027fc1:	eb c0                	jmp    c0027f83 <__eqdf2>

c0027fc3 <__truncdfsf2>:
c0027fc3:	55                   	push   ebp
c0027fc4:	89 e5                	mov    ebp,esp
c0027fc6:	57                   	push   edi
c0027fc7:	56                   	push   esi
c0027fc8:	53                   	push   ebx
c0027fc9:	83 ec 0c             	sub    esp,0xc
c0027fcc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027fcf:	89 d1                	mov    ecx,edx
c0027fd1:	c1 f9 14             	sar    ecx,0x14
c0027fd4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fd7:	89 df                	mov    edi,ebx
c0027fd9:	c1 e7 0b             	shl    edi,0xb
c0027fdc:	89 d0                	mov    eax,edx
c0027fde:	c1 e0 0b             	shl    eax,0xb
c0027fe1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fe6:	c1 eb 15             	shr    ebx,0x15
c0027fe9:	09 d8                	or     eax,ebx
c0027feb:	89 cb                	mov    ebx,ecx
c0027fed:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ff3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027ff9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027fff:	0f 86 9e 00 00 00    	jbe    c00280a3 <__truncdfsf2+0xe0>
c0028005:	85 db                	test   ebx,ebx
c0028007:	75 0a                	jne    c0028013 <__truncdfsf2+0x50>
c0028009:	c1 fa 17             	sar    edx,0x17
c002800c:	30 d2                	xor    dl,dl
c002800e:	e9 84 00 00 00       	jmp    c0028097 <__truncdfsf2+0xd4>
c0028013:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028019:	83 fe 83             	cmp    esi,0xffffff83
c002801c:	7d 4b                	jge    c0028069 <__truncdfsf2+0xa6>
c002801e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028023:	29 f1                	sub    ecx,esi
c0028025:	83 f9 1f             	cmp    ecx,0x1f
c0028028:	7f 6b                	jg     c0028095 <__truncdfsf2+0xd2>
c002802a:	0d 00 00 00 80       	or     eax,0x80000000
c002802f:	89 c3                	mov    ebx,eax
c0028031:	d3 eb                	shr    ebx,cl
c0028033:	be 01 00 00 00       	mov    esi,0x1
c0028038:	d3 e6                	shl    esi,cl
c002803a:	4e                   	dec    esi
c002803b:	21 f0                	and    eax,esi
c002803d:	09 f8                	or     eax,edi
c002803f:	0f 95 c0             	setne  al
c0028042:	0f b6 c0             	movzx  eax,al
c0028045:	09 c3                	or     ebx,eax
c0028047:	89 d9                	mov    ecx,ebx
c0028049:	c1 e9 08             	shr    ecx,0x8
c002804c:	f6 c3 7f             	test   bl,0x7f
c002804f:	0f 95 c0             	setne  al
c0028052:	09 c8                	or     eax,ecx
c0028054:	83 e0 01             	and    eax,0x1
c0028057:	c1 eb 07             	shr    ebx,0x7
c002805a:	21 c3                	and    ebx,eax
c002805c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028062:	09 d1                	or     ecx,edx
c0028064:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028067:	eb 76                	jmp    c00280df <__truncdfsf2+0x11c>
c0028069:	83 c6 80             	add    esi,0xffffff80
c002806c:	7e 1d                	jle    c002808b <__truncdfsf2+0xc8>
c002806e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028074:	75 0b                	jne    c0028081 <__truncdfsf2+0xbe>
c0028076:	09 f8                	or     eax,edi
c0028078:	74 09                	je     c0028083 <__truncdfsf2+0xc0>
c002807a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002807f:	eb 02                	jmp    c0028083 <__truncdfsf2+0xc0>
c0028081:	31 c0                	xor    eax,eax
c0028083:	c1 fa 17             	sar    edx,0x17
c0028086:	80 ca ff             	or     dl,0xff
c0028089:	eb 0e                	jmp    c0028099 <__truncdfsf2+0xd6>
c002808b:	c1 fa 1f             	sar    edx,0x1f
c002808e:	c1 e2 08             	shl    edx,0x8
c0028091:	09 ca                	or     edx,ecx
c0028093:	eb 04                	jmp    c0028099 <__truncdfsf2+0xd6>
c0028095:	31 d2                	xor    edx,edx
c0028097:	31 c0                	xor    eax,eax
c0028099:	c1 e2 17             	shl    edx,0x17
c002809c:	c1 e8 08             	shr    eax,0x8
c002809f:	09 d0                	or     eax,edx
c00280a1:	eb 3c                	jmp    c00280df <__truncdfsf2+0x11c>
c00280a3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00280a9:	89 ca                	mov    edx,ecx
c00280ab:	c1 fa 0b             	sar    edx,0xb
c00280ae:	c1 e2 08             	shl    edx,0x8
c00280b1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00280b4:	31 db                	xor    ebx,ebx
c00280b6:	85 ff                	test   edi,edi
c00280b8:	0f 95 c3             	setne  bl
c00280bb:	09 d8                	or     eax,ebx
c00280bd:	89 c3                	mov    ebx,eax
c00280bf:	c1 eb 08             	shr    ebx,0x8
c00280c2:	a8 7f                	test   al,0x7f
c00280c4:	0f 95 c2             	setne  dl
c00280c7:	89 d6                	mov    esi,edx
c00280c9:	09 de                	or     esi,ebx
c00280cb:	83 e6 01             	and    esi,0x1
c00280ce:	c1 e8 07             	shr    eax,0x7
c00280d1:	21 f0                	and    eax,esi
c00280d3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00280d6:	09 ca                	or     edx,ecx
c00280d8:	c1 e2 17             	shl    edx,0x17
c00280db:	09 da                	or     edx,ebx
c00280dd:	01 d0                	add    eax,edx
c00280df:	83 c4 0c             	add    esp,0xc
c00280e2:	5b                   	pop    ebx
c00280e3:	5e                   	pop    esi
c00280e4:	5f                   	pop    edi
c00280e5:	5d                   	pop    ebp
c00280e6:	c3                   	ret    

c00280e7 <__extendsfdf2>:
c00280e7:	55                   	push   ebp
c00280e8:	89 e5                	mov    ebp,esp
c00280ea:	57                   	push   edi
c00280eb:	56                   	push   esi
c00280ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00280ef:	89 d1                	mov    ecx,edx
c00280f1:	c1 f9 17             	sar    ecx,0x17
c00280f4:	c1 e2 08             	shl    edx,0x8
c00280f7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00280fd:	89 c8                	mov    eax,ecx
c00280ff:	80 e4 f8             	and    ah,0xf8
c0028102:	8d 71 01             	lea    esi,[ecx+0x1]
c0028105:	81 e6 fe 00 00 00    	and    esi,0xfe
c002810b:	75 27                	jne    c0028134 <__extendsfdf2+0x4d>
c002810d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028113:	75 18                	jne    c002812d <__extendsfdf2+0x46>
c0028115:	85 d2                	test   edx,edx
c0028117:	74 20                	je     c0028139 <__extendsfdf2+0x52>
c0028119:	41                   	inc    ecx
c002811a:	01 d2                	add    edx,edx
c002811c:	79 fb                	jns    c0028119 <__extendsfdf2+0x32>
c002811e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028124:	29 c8                	sub    eax,ecx
c0028126:	05 81 03 00 00       	add    eax,0x381
c002812b:	eb 0c                	jmp    c0028139 <__extendsfdf2+0x52>
c002812d:	05 00 07 00 00       	add    eax,0x700
c0028132:	eb 05                	jmp    c0028139 <__extendsfdf2+0x52>
c0028134:	05 80 03 00 00       	add    eax,0x380
c0028139:	c1 e0 14             	shl    eax,0x14
c002813c:	89 c1                	mov    ecx,eax
c002813e:	89 d0                	mov    eax,edx
c0028140:	c1 e8 0b             	shr    eax,0xb
c0028143:	09 c1                	or     ecx,eax
c0028145:	c1 e2 15             	shl    edx,0x15
c0028148:	89 d0                	mov    eax,edx
c002814a:	89 ca                	mov    edx,ecx
c002814c:	5e                   	pop    esi
c002814d:	5f                   	pop    edi
c002814e:	5d                   	pop    ebp
c002814f:	c3                   	ret    

c0028150 <fabs>:
c0028150:	83 ec 0c             	sub    esp,0xc
c0028153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028157:	89 04 24             	mov    DWORD PTR [esp],eax
c002815a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002815e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028163:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028167:	dd 04 24             	fld    QWORD PTR [esp]
c002816a:	83 c4 0c             	add    esp,0xc
c002816d:	c3                   	ret    
c002816e:	66 90                	xchg   ax,ax

c0028170 <lrint>:
c0028170:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028174:	83 ec 04             	sub    esp,0x4
c0028177:	db 1c 24             	fistp  DWORD PTR [esp]
c002817a:	58                   	pop    eax
c002817b:	c3                   	ret    

c002817c <lrintf>:
c002817c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028180:	83 ec 04             	sub    esp,0x4
c0028183:	db 1c 24             	fistp  DWORD PTR [esp]
c0028186:	58                   	pop    eax
c0028187:	c3                   	ret    

Disassembly of section .init:

c0028188 <_init>:
c0028188:	55                   	push   ebp
c0028189:	89 e5                	mov    ebp,esp
c002818b:	e8 88 7f fd ff       	call   c0000118 <frame_dummy>
c0028190:	e8 63 e0 ff ff       	call   c00261f8 <__do_global_ctors_aux>
c0028195:	5d                   	pop    ebp
c0028196:	c3                   	ret    

Disassembly of section .fini:

c0028197 <_fini>:
c0028197:	55                   	push   ebp
c0028198:	89 e5                	mov    ebp,esp
c002819a:	e8 09 7f fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002819f:	5d                   	pop    ebp
c00281a0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00281a2 <Computer::~Computer()>:
c00281a2:	83 ec 0c             	sub    esp,0xc
c00281a5:	ba e8 9c 02 c0       	mov    edx,0xc0029ce8
c00281aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281ae:	89 10                	mov    DWORD PTR [eax],edx
c00281b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281b4:	83 ec 0c             	sub    esp,0xc
c00281b7:	50                   	push   eax
c00281b8:	e8 4b bc fe ff       	call   c0013e08 <Device::~Device()>
c00281bd:	83 c4 10             	add    esp,0x10
c00281c0:	90                   	nop
c00281c1:	83 c4 0c             	add    esp,0xc
c00281c4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00281c6 <Computer::~Computer()>:
c00281c6:	83 ec 0c             	sub    esp,0xc
c00281c9:	83 ec 0c             	sub    esp,0xc
c00281cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281d0:	e8 cd ff ff ff       	call   c00281a2 <Computer::~Computer()>
c00281d5:	83 c4 10             	add    esp,0x10
c00281d8:	83 ec 08             	sub    esp,0x8
c00281db:	68 ec 01 00 00       	push   0x1ec
c00281e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281e4:	e8 46 a8 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00281e9:	83 c4 10             	add    esp,0x10
c00281ec:	83 c4 0c             	add    esp,0xc
c00281ef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00281f0 <idleCommon()>:
c00281f0:	83 ec 0c             	sub    esp,0xc
c00281f3:	e8 8e 56 ff ff       	call   c001d886 <lockScheduler()>
c00281f8:	e8 c5 59 ff ff       	call   c001dbc2 <schedule()>
c00281fd:	83 c4 0c             	add    esp,0xc
c0028200:	e9 83 56 ff ff       	jmp    c001d888 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028206 <LinkedList<UnixFile>::~LinkedList()>:
c0028206:	90                   	nop
c0028207:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028208 <LinkedList<UnixFile>::LinkedList()>:
c0028208:	83 ec 0c             	sub    esp,0xc
c002820b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002820f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028219:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028224:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002822b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002822f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028239:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028244:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002824b:	83 ec 0c             	sub    esp,0xc
c002824e:	68 a6 9f 02 c0       	push   0xc0029fa6
c0028253:	e8 b7 a8 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0028258:	83 c4 10             	add    esp,0x10
c002825b:	90                   	nop
c002825c:	83 c4 0c             	add    esp,0xc
c002825f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028260 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028260:	83 ec 0c             	sub    esp,0xc
c0028263:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028268:	75 10                	jne    c002827a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002826a:	83 ec 0c             	sub    esp,0xc
c002826d:	68 c0 9f 02 c0       	push   0xc0029fc0
c0028272:	e8 14 1f ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0028277:	83 c4 10             	add    esp,0x10
c002827a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002827e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028280:	85 c0                	test   eax,eax
c0028282:	74 34                	je     c00282b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028288:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002828b:	85 c0                	test   eax,eax
c002828d:	74 29                	je     c00282b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002828f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028293:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028296:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002829a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002829d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282b6:	eb 65                	jmp    c002831d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00282b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00282be:	85 c0                	test   eax,eax
c00282c0:	75 4b                	jne    c002830d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00282c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282c9:	85 c0                	test   eax,eax
c00282cb:	75 40                	jne    c002830d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00282cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282d5:	89 10                	mov    DWORD PTR [eax],edx
c00282d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00282f7:	85 c0                	test   eax,eax
c00282f9:	74 22                	je     c002831d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00282fb:	83 ec 0c             	sub    esp,0xc
c00282fe:	68 e2 9f 02 c0       	push   0xc0029fe2
c0028303:	e8 83 1e ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0028308:	83 c4 10             	add    esp,0x10
c002830b:	eb 10                	jmp    c002831d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002830d:	83 ec 0c             	sub    esp,0xc
c0028310:	68 ec 9f 02 c0       	push   0xc0029fec
c0028315:	e8 71 1e ff ff       	call   c001a18b <Krnl::panic(char const*)>
c002831a:	83 c4 10             	add    esp,0x10
c002831d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028321:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028324:	8d 50 01             	lea    edx,[eax+0x1]
c0028327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002832b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002832e:	90                   	nop
c002832f:	83 c4 0c             	add    esp,0xc
c0028332:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028334 <LinkedList<UnixFile>::getFirstElement()>:
c0028334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028338:	8b 00                	mov    eax,DWORD PTR [eax]
c002833a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002833c <LinkedList<UnixFile>::removeFirst()>:
c002833c:	83 ec 0c             	sub    esp,0xc
c002833f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028343:	8b 00                	mov    eax,DWORD PTR [eax]
c0028345:	85 c0                	test   eax,eax
c0028347:	75 12                	jne    c002835b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028349:	83 ec 0c             	sub    esp,0xc
c002834c:	68 f8 9f 02 c0       	push   0xc0029ff8
c0028351:	e8 35 1e ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0028356:	83 c4 10             	add    esp,0x10
c0028359:	eb 7e                	jmp    c00283d9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002835b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002835f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028362:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028365:	85 c0                	test   eax,eax
c0028367:	74 10                	je     c0028379 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028369:	83 ec 0c             	sub    esp,0xc
c002836c:	68 43 a0 02 c0       	push   0xc002a043
c0028371:	e8 15 1e ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0028376:	83 c4 10             	add    esp,0x10
c0028379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002837d:	8b 00                	mov    eax,DWORD PTR [eax]
c002837f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028382:	85 c0                	test   eax,eax
c0028384:	75 33                	jne    c00283b9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002838a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028394:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002839b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002839f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283a2:	83 f8 01             	cmp    eax,0x1
c00283a5:	74 21                	je     c00283c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00283a7:	83 ec 0c             	sub    esp,0xc
c00283aa:	68 1c a0 02 c0       	push   0xc002a01c
c00283af:	e8 d7 1d ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00283b4:	83 c4 10             	add    esp,0x10
c00283b7:	eb 0f                	jmp    c00283c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00283b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00283bf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00283c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c6:	89 10                	mov    DWORD PTR [eax],edx
c00283c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283cf:	8d 50 ff             	lea    edx,[eax-0x1]
c00283d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283d9:	83 c4 0c             	add    esp,0xc
c00283dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00283de <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00283de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00283e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283e5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00283e6 <DriverlessDevice::~DriverlessDevice()>:
c00283e6:	ba 24 a7 02 c0       	mov    edx,0xc002a724
c00283eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283ef:	89 10                	mov    DWORD PTR [eax],edx
c00283f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283f5:	50                   	push   eax
c00283f6:	e8 0d ba fe ff       	call   c0013e08 <Device::~Device()>
c00283fb:	83 c4 04             	add    esp,0x4
c00283fe:	90                   	nop
c00283ff:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028400 <DriverlessDevice::~DriverlessDevice()>:
c0028400:	83 ec 0c             	sub    esp,0xc
c0028403:	83 ec 0c             	sub    esp,0xc
c0028406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002840a:	e8 d7 ff ff ff       	call   c00283e6 <DriverlessDevice::~DriverlessDevice()>
c002840f:	83 c4 10             	add    esp,0x10
c0028412:	83 ec 08             	sub    esp,0x8
c0028415:	68 58 01 00 00       	push   0x158
c002841a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002841e:	e8 0c a6 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028423:	83 c4 10             	add    esp,0x10
c0028426:	83 c4 0c             	add    esp,0xc
c0028429:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002842a <LinkedList<Device>::addElement(Device*)>:
c002842a:	83 ec 0c             	sub    esp,0xc
c002842d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028432:	75 10                	jne    c0028444 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028434:	83 ec 0c             	sub    esp,0xc
c0028437:	68 c0 9f 02 c0       	push   0xc0029fc0
c002843c:	e8 4a 1d ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0028441:	83 c4 10             	add    esp,0x10
c0028444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028448:	8b 00                	mov    eax,DWORD PTR [eax]
c002844a:	85 c0                	test   eax,eax
c002844c:	74 3a                	je     c0028488 <LinkedList<Device>::addElement(Device*)+0x5e>
c002844e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028455:	85 c0                	test   eax,eax
c0028457:	74 2f                	je     c0028488 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002845d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028460:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028464:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002846a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002846e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028472:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028479:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002847c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028486:	eb 68                	jmp    c00284f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002848c:	8b 00                	mov    eax,DWORD PTR [eax]
c002848e:	85 c0                	test   eax,eax
c0028490:	75 4e                	jne    c00284e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028496:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028499:	85 c0                	test   eax,eax
c002849b:	75 43                	jne    c00284e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002849d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284a5:	89 10                	mov    DWORD PTR [eax],edx
c00284a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284b9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00284c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284ca:	85 c0                	test   eax,eax
c00284cc:	74 22                	je     c00284f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00284ce:	83 ec 0c             	sub    esp,0xc
c00284d1:	68 e2 9f 02 c0       	push   0xc0029fe2
c00284d6:	e8 b0 1c ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00284db:	83 c4 10             	add    esp,0x10
c00284de:	eb 10                	jmp    c00284f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	68 ec 9f 02 c0       	push   0xc0029fec
c00284e8:	e8 9e 1c ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00284ed:	83 c4 10             	add    esp,0x10
c00284f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284f7:	8d 50 01             	lea    edx,[eax+0x1]
c00284fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028501:	90                   	nop
c0028502:	83 c4 0c             	add    esp,0xc
c0028505:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028506 <LinkedList<Device>::LinkedList()>:
c0028506:	83 ec 0c             	sub    esp,0xc
c0028509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028517:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002851e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028522:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002852d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028537:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002853e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028542:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028549:	83 ec 0c             	sub    esp,0xc
c002854c:	68 a6 9f 02 c0       	push   0xc0029fa6
c0028551:	e8 b9 a5 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0028556:	83 c4 10             	add    esp,0x10
c0028559:	90                   	nop
c002855a:	83 c4 0c             	add    esp,0xc
c002855d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002855e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002855e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028562:	8b 00                	mov    eax,DWORD PTR [eax]
c0028564:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028566 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002856a:	8b 00                	mov    eax,DWORD PTR [eax]
c002856c:	85 c0                	test   eax,eax
c002856e:	75 0e                	jne    c002857e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028577:	85 c0                	test   eax,eax
c0028579:	75 03                	jne    c002857e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002857b:	b0 01                	mov    al,0x1
c002857d:	c3                   	ret    
c002857e:	b0 00                	mov    al,0x0
c0028580:	90                   	nop
c0028581:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028582 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028582:	83 ec 0c             	sub    esp,0xc
c0028585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028589:	8b 00                	mov    eax,DWORD PTR [eax]
c002858b:	85 c0                	test   eax,eax
c002858d:	75 15                	jne    c00285a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002858f:	83 ec 0c             	sub    esp,0xc
c0028592:	68 f8 9f 02 c0       	push   0xc0029ff8
c0028597:	e8 ef 1b ff ff       	call   c001a18b <Krnl::panic(char const*)>
c002859c:	83 c4 10             	add    esp,0x10
c002859f:	e9 88 00 00 00       	jmp    c002862c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00285a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00285ae:	85 c0                	test   eax,eax
c00285b0:	0f 95 c0             	setne  al
c00285b3:	84 c0                	test   al,al
c00285b5:	74 10                	je     c00285c7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00285b7:	83 ec 0c             	sub    esp,0xc
c00285ba:	68 43 a0 02 c0       	push   0xc002a043
c00285bf:	e8 c7 1b ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00285c4:	83 c4 10             	add    esp,0x10
c00285c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00285cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00285d0:	85 c0                	test   eax,eax
c00285d2:	0f 94 c0             	sete   al
c00285d5:	84 c0                	test   al,al
c00285d7:	74 33                	je     c002860c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00285d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285f5:	83 f8 01             	cmp    eax,0x1
c00285f8:	74 21                	je     c002861b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00285fa:	83 ec 0c             	sub    esp,0xc
c00285fd:	68 1c a0 02 c0       	push   0xc002a01c
c0028602:	e8 84 1b ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0028607:	83 c4 10             	add    esp,0x10
c002860a:	eb 0f                	jmp    c002861b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002860c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028610:	8b 00                	mov    eax,DWORD PTR [eax]
c0028612:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028619:	89 10                	mov    DWORD PTR [eax],edx
c002861b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028622:	8d 50 ff             	lea    edx,[eax-0x1]
c0028625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028629:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002862c:	83 c4 0c             	add    esp,0xc
c002862f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028630:	83 ec 0c             	sub    esp,0xc
c0028633:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028638:	75 10                	jne    c002864a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002863a:	83 ec 0c             	sub    esp,0xc
c002863d:	68 c0 9f 02 c0       	push   0xc0029fc0
c0028642:	e8 44 1b ff ff       	call   c001a18b <Krnl::panic(char const*)>
c0028647:	83 c4 10             	add    esp,0x10
c002864a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028650:	85 c0                	test   eax,eax
c0028652:	74 34                	je     c0028688 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028658:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002865b:	85 c0                	test   eax,eax
c002865d:	74 29                	je     c0028688 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028663:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028666:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002866a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028671:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028675:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002867f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028686:	eb 65                	jmp    c00286ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868c:	8b 00                	mov    eax,DWORD PTR [eax]
c002868e:	85 c0                	test   eax,eax
c0028690:	75 4b                	jne    c00286dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028699:	85 c0                	test   eax,eax
c002869b:	75 40                	jne    c00286dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002869d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286a5:	89 10                	mov    DWORD PTR [eax],edx
c00286a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00286c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286c7:	85 c0                	test   eax,eax
c00286c9:	74 22                	je     c00286ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00286cb:	83 ec 0c             	sub    esp,0xc
c00286ce:	68 e2 9f 02 c0       	push   0xc0029fe2
c00286d3:	e8 b3 1a ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00286d8:	83 c4 10             	add    esp,0x10
c00286db:	eb 10                	jmp    c00286ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00286dd:	83 ec 0c             	sub    esp,0xc
c00286e0:	68 ec 9f 02 c0       	push   0xc0029fec
c00286e5:	e8 a1 1a ff ff       	call   c001a18b <Krnl::panic(char const*)>
c00286ea:	83 c4 10             	add    esp,0x10
c00286ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f4:	8d 50 01             	lea    edx,[eax+0x1]
c00286f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286fe:	90                   	nop
c00286ff:	83 c4 0c             	add    esp,0xc
c0028702:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028704 <ACPI::~ACPI()>:
c0028704:	83 ec 0c             	sub    esp,0xc
c0028707:	ba 6c b0 02 c0       	mov    edx,0xc002b06c
c002870c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028710:	89 10                	mov    DWORD PTR [eax],edx
c0028712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028716:	83 ec 0c             	sub    esp,0xc
c0028719:	50                   	push   eax
c002871a:	e8 e9 b6 fe ff       	call   c0013e08 <Device::~Device()>
c002871f:	83 c4 10             	add    esp,0x10
c0028722:	90                   	nop
c0028723:	83 c4 0c             	add    esp,0xc
c0028726:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028728 <ACPI::~ACPI()>:
c0028728:	83 ec 0c             	sub    esp,0xc
c002872b:	83 ec 0c             	sub    esp,0xc
c002872e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028732:	e8 cd ff ff ff       	call   c0028704 <ACPI::~ACPI()>
c0028737:	83 c4 10             	add    esp,0x10
c002873a:	83 ec 08             	sub    esp,0x8
c002873d:	68 68 12 00 00       	push   0x1268
c0028742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028746:	e8 e4 a2 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c002874b:	83 c4 10             	add    esp,0x10
c002874e:	83 c4 0c             	add    esp,0xc
c0028751:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028752 <CPU::~CPU()>:
c0028752:	83 ec 0c             	sub    esp,0xc
c0028755:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c002875a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875e:	89 10                	mov    DWORD PTR [eax],edx
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	83 ec 0c             	sub    esp,0xc
c0028767:	50                   	push   eax
c0028768:	e8 9b b6 fe ff       	call   c0013e08 <Device::~Device()>
c002876d:	83 c4 10             	add    esp,0x10
c0028770:	90                   	nop
c0028771:	83 c4 0c             	add    esp,0xc
c0028774:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028776 <CPU::~CPU()>:
c0028776:	83 ec 0c             	sub    esp,0xc
c0028779:	83 ec 0c             	sub    esp,0xc
c002877c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028780:	e8 cd ff ff ff       	call   c0028752 <CPU::~CPU()>
c0028785:	83 c4 10             	add    esp,0x10
c0028788:	83 ec 08             	sub    esp,0x8
c002878b:	68 98 11 00 00       	push   0x1198
c0028790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028794:	e8 96 a2 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028799:	83 c4 10             	add    esp,0x10
c002879c:	83 c4 0c             	add    esp,0xc
c002879f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00287a0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00287a0:	90                   	nop
c00287a1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00287a2 <ThreadControlBlock::ThreadControlBlock()>:
c00287a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287a6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00287ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287b1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00287b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287bc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00287c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287c7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00287ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287d2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00287d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287da:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00287de:	90                   	nop
c00287df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00287e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00287e0:	83 ec 0c             	sub    esp,0xc
c00287e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028807:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002880d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028811:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028823:	83 ec 0c             	sub    esp,0xc
c0028826:	68 a6 9f 02 c0       	push   0xc0029fa6
c002882b:	e8 df a2 fe ff       	call   c0012b0f <Dbg::kprintf(char const*, ...)>
c0028830:	83 c4 10             	add    esp,0x10
c0028833:	90                   	nop
c0028834:	83 c4 0c             	add    esp,0xc
c0028837:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028838 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002883c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002883f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028840 <Vm::_FPUState::_FPUState()>:
c0028840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028844:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002884b:	90                   	nop
c002884c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002884e <PCI::~PCI()>:
c002884e:	83 ec 0c             	sub    esp,0xc
c0028851:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0028856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885a:	89 10                	mov    DWORD PTR [eax],edx
c002885c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028860:	83 ec 0c             	sub    esp,0xc
c0028863:	50                   	push   eax
c0028864:	e8 77 af fe ff       	call   c00137e0 <Bus::~Bus()>
c0028869:	83 c4 10             	add    esp,0x10
c002886c:	90                   	nop
c002886d:	83 c4 0c             	add    esp,0xc
c0028870:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028872 <PCI::~PCI()>:
c0028872:	83 ec 0c             	sub    esp,0xc
c0028875:	83 ec 0c             	sub    esp,0xc
c0028878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002887c:	e8 cd ff ff ff       	call   c002884e <PCI::~PCI()>
c0028881:	83 c4 10             	add    esp,0x10
c0028884:	83 ec 08             	sub    esp,0x8
c0028887:	68 58 01 00 00       	push   0x158
c002888c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028890:	e8 9a a1 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028895:	83 c4 10             	add    esp,0x10
c0028898:	83 c4 0c             	add    esp,0xc
c002889b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002889c <IDE::~IDE()>:
c002889c:	83 ec 0c             	sub    esp,0xc
c002889f:	ba a8 c6 02 c0       	mov    edx,0xc002c6a8
c00288a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a8:	89 10                	mov    DWORD PTR [eax],edx
c00288aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ae:	83 ec 0c             	sub    esp,0xc
c00288b1:	50                   	push   eax
c00288b2:	e8 41 ba fe ff       	call   c00142f8 <HardDiskController::~HardDiskController()>
c00288b7:	83 c4 10             	add    esp,0x10
c00288ba:	90                   	nop
c00288bb:	83 c4 0c             	add    esp,0xc
c00288be:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00288c0 <IDE::~IDE()>:
c00288c0:	83 ec 0c             	sub    esp,0xc
c00288c3:	83 ec 0c             	sub    esp,0xc
c00288c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ca:	e8 cd ff ff ff       	call   c002889c <IDE::~IDE()>
c00288cf:	83 c4 10             	add    esp,0x10
c00288d2:	83 ec 08             	sub    esp,0x8
c00288d5:	68 70 02 00 00       	push   0x270
c00288da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288de:	e8 4c a1 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00288e3:	83 c4 10             	add    esp,0x10
c00288e6:	83 c4 0c             	add    esp,0xc
c00288e9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00288ea <SATABus::~SATABus()>:
c00288ea:	83 ec 0c             	sub    esp,0xc
c00288ed:	ba 88 c7 02 c0       	mov    edx,0xc002c788
c00288f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f6:	89 10                	mov    DWORD PTR [eax],edx
c00288f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fc:	83 ec 0c             	sub    esp,0xc
c00288ff:	50                   	push   eax
c0028900:	e8 f3 b9 fe ff       	call   c00142f8 <HardDiskController::~HardDiskController()>
c0028905:	83 c4 10             	add    esp,0x10
c0028908:	90                   	nop
c0028909:	83 c4 0c             	add    esp,0xc
c002890c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002890e <SATABus::~SATABus()>:
c002890e:	83 ec 0c             	sub    esp,0xc
c0028911:	83 ec 0c             	sub    esp,0xc
c0028914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028918:	e8 cd ff ff ff       	call   c00288ea <SATABus::~SATABus()>
c002891d:	83 c4 10             	add    esp,0x10
c0028920:	83 ec 08             	sub    esp,0x8
c0028923:	68 64 01 00 00       	push   0x164
c0028928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002892c:	e8 fe a0 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028931:	83 c4 10             	add    esp,0x10
c0028934:	83 c4 0c             	add    esp,0xc
c0028937:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028938 <ATA::~ATA()>:
c0028938:	83 ec 0c             	sub    esp,0xc
c002893b:	ba d4 c7 02 c0       	mov    edx,0xc002c7d4
c0028940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028944:	89 10                	mov    DWORD PTR [eax],edx
c0028946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894a:	83 ec 0c             	sub    esp,0xc
c002894d:	50                   	push   eax
c002894e:	e8 97 ba fe ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c0028953:	83 c4 10             	add    esp,0x10
c0028956:	90                   	nop
c0028957:	83 c4 0c             	add    esp,0xc
c002895a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002895c <ATA::~ATA()>:
c002895c:	83 ec 0c             	sub    esp,0xc
c002895f:	83 ec 0c             	sub    esp,0xc
c0028962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028966:	e8 cd ff ff ff       	call   c0028938 <ATA::~ATA()>
c002896b:	83 c4 10             	add    esp,0x10
c002896e:	83 ec 08             	sub    esp,0x8
c0028971:	68 7c 01 00 00       	push   0x17c
c0028976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002897a:	e8 b0 a0 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c002897f:	83 c4 10             	add    esp,0x10
c0028982:	83 c4 0c             	add    esp,0xc
c0028985:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028986 <ATAPI::~ATAPI()>:
c0028986:	83 ec 0c             	sub    esp,0xc
c0028989:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c002898e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028992:	89 10                	mov    DWORD PTR [eax],edx
c0028994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028998:	83 ec 0c             	sub    esp,0xc
c002899b:	50                   	push   eax
c002899c:	e8 49 ba fe ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c00289a1:	83 c4 10             	add    esp,0x10
c00289a4:	90                   	nop
c00289a5:	83 c4 0c             	add    esp,0xc
c00289a8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00289aa <ATAPI::~ATAPI()>:
c00289aa:	83 ec 0c             	sub    esp,0xc
c00289ad:	83 ec 0c             	sub    esp,0xc
c00289b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289b4:	e8 cd ff ff ff       	call   c0028986 <ATAPI::~ATAPI()>
c00289b9:	83 c4 10             	add    esp,0x10
c00289bc:	83 ec 08             	sub    esp,0x8
c00289bf:	68 80 01 00 00       	push   0x180
c00289c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289c8:	e8 62 a0 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c00289cd:	83 c4 10             	add    esp,0x10
c00289d0:	83 c4 0c             	add    esp,0xc
c00289d3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00289d4 <SATA::~SATA()>:
c00289d4:	83 ec 0c             	sub    esp,0xc
c00289d7:	ba c0 c8 02 c0       	mov    edx,0xc002c8c0
c00289dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e0:	89 10                	mov    DWORD PTR [eax],edx
c00289e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e6:	83 ec 0c             	sub    esp,0xc
c00289e9:	50                   	push   eax
c00289ea:	e8 fb b9 fe ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c00289ef:	83 c4 10             	add    esp,0x10
c00289f2:	90                   	nop
c00289f3:	83 c4 0c             	add    esp,0xc
c00289f6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00289f8 <SATA::~SATA()>:
c00289f8:	83 ec 0c             	sub    esp,0xc
c00289fb:	83 ec 0c             	sub    esp,0xc
c00289fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a02:	e8 cd ff ff ff       	call   c00289d4 <SATA::~SATA()>
c0028a07:	83 c4 10             	add    esp,0x10
c0028a0a:	83 ec 08             	sub    esp,0x8
c0028a0d:	68 7c 01 00 00       	push   0x17c
c0028a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a16:	e8 14 a0 fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028a1b:	83 c4 10             	add    esp,0x10
c0028a1e:	83 c4 0c             	add    esp,0xc
c0028a21:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028a22 <SATAPI::~SATAPI()>:
c0028a22:	83 ec 0c             	sub    esp,0xc
c0028a25:	ba 9c c9 02 c0       	mov    edx,0xc002c99c
c0028a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2e:	89 10                	mov    DWORD PTR [eax],edx
c0028a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a34:	83 ec 0c             	sub    esp,0xc
c0028a37:	50                   	push   eax
c0028a38:	e8 ad b9 fe ff       	call   c00143ea <PhysicalDisk::~PhysicalDisk()>
c0028a3d:	83 c4 10             	add    esp,0x10
c0028a40:	90                   	nop
c0028a41:	83 c4 0c             	add    esp,0xc
c0028a44:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028a46 <SATAPI::~SATAPI()>:
c0028a46:	83 ec 0c             	sub    esp,0xc
c0028a49:	83 ec 0c             	sub    esp,0xc
c0028a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a50:	e8 cd ff ff ff       	call   c0028a22 <SATAPI::~SATAPI()>
c0028a55:	83 c4 10             	add    esp,0x10
c0028a58:	83 ec 08             	sub    esp,0x8
c0028a5b:	68 80 01 00 00       	push   0x180
c0028a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a64:	e8 c6 9f fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028a69:	83 c4 10             	add    esp,0x10
c0028a6c:	83 c4 0c             	add    esp,0xc
c0028a6f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028a70 <AVX::~AVX()>:
c0028a70:	83 ec 0c             	sub    esp,0xc
c0028a73:	ba dc c9 02 c0       	mov    edx,0xc002c9dc
c0028a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7c:	89 10                	mov    DWORD PTR [eax],edx
c0028a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a82:	83 ec 0c             	sub    esp,0xc
c0028a85:	50                   	push   eax
c0028a86:	e8 e3 b9 fe ff       	call   c001446e <FPU::~FPU()>
c0028a8b:	83 c4 10             	add    esp,0x10
c0028a8e:	90                   	nop
c0028a8f:	83 c4 0c             	add    esp,0xc
c0028a92:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028a94 <AVX::~AVX()>:
c0028a94:	83 ec 0c             	sub    esp,0xc
c0028a97:	83 ec 0c             	sub    esp,0xc
c0028a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a9e:	e8 cd ff ff ff       	call   c0028a70 <AVX::~AVX()>
c0028aa3:	83 c4 10             	add    esp,0x10
c0028aa6:	83 ec 08             	sub    esp,0x8
c0028aa9:	68 58 01 00 00       	push   0x158
c0028aae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ab2:	e8 78 9f fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028ab7:	83 c4 10             	add    esp,0x10
c0028aba:	83 c4 0c             	add    esp,0xc
c0028abd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028abe <MMX::~MMX()>:
c0028abe:	83 ec 0c             	sub    esp,0xc
c0028ac1:	ba 1c ca 02 c0       	mov    edx,0xc002ca1c
c0028ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aca:	89 10                	mov    DWORD PTR [eax],edx
c0028acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad0:	83 ec 0c             	sub    esp,0xc
c0028ad3:	50                   	push   eax
c0028ad4:	e8 95 b9 fe ff       	call   c001446e <FPU::~FPU()>
c0028ad9:	83 c4 10             	add    esp,0x10
c0028adc:	90                   	nop
c0028add:	83 c4 0c             	add    esp,0xc
c0028ae0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028ae2 <MMX::~MMX()>:
c0028ae2:	83 ec 0c             	sub    esp,0xc
c0028ae5:	83 ec 0c             	sub    esp,0xc
c0028ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aec:	e8 cd ff ff ff       	call   c0028abe <MMX::~MMX()>
c0028af1:	83 c4 10             	add    esp,0x10
c0028af4:	83 ec 08             	sub    esp,0x8
c0028af7:	68 58 01 00 00       	push   0x158
c0028afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b00:	e8 2a 9f fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028b05:	83 c4 10             	add    esp,0x10
c0028b08:	83 c4 0c             	add    esp,0xc
c0028b0b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028b0c <SSE::~SSE()>:
c0028b0c:	83 ec 0c             	sub    esp,0xc
c0028b0f:	ba 5c ca 02 c0       	mov    edx,0xc002ca5c
c0028b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b18:	89 10                	mov    DWORD PTR [eax],edx
c0028b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1e:	83 ec 0c             	sub    esp,0xc
c0028b21:	50                   	push   eax
c0028b22:	e8 47 b9 fe ff       	call   c001446e <FPU::~FPU()>
c0028b27:	83 c4 10             	add    esp,0x10
c0028b2a:	90                   	nop
c0028b2b:	83 c4 0c             	add    esp,0xc
c0028b2e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028b30 <SSE::~SSE()>:
c0028b30:	83 ec 0c             	sub    esp,0xc
c0028b33:	83 ec 0c             	sub    esp,0xc
c0028b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b3a:	e8 cd ff ff ff       	call   c0028b0c <SSE::~SSE()>
c0028b3f:	83 c4 10             	add    esp,0x10
c0028b42:	83 ec 08             	sub    esp,0x8
c0028b45:	68 58 01 00 00       	push   0x158
c0028b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b4e:	e8 dc 9e fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028b53:	83 c4 10             	add    esp,0x10
c0028b56:	83 c4 0c             	add    esp,0xc
c0028b59:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028b5a <x87::~x87()>:
c0028b5a:	83 ec 0c             	sub    esp,0xc
c0028b5d:	ba 9c ca 02 c0       	mov    edx,0xc002ca9c
c0028b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b66:	89 10                	mov    DWORD PTR [eax],edx
c0028b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6c:	83 ec 0c             	sub    esp,0xc
c0028b6f:	50                   	push   eax
c0028b70:	e8 f9 b8 fe ff       	call   c001446e <FPU::~FPU()>
c0028b75:	83 c4 10             	add    esp,0x10
c0028b78:	90                   	nop
c0028b79:	83 c4 0c             	add    esp,0xc
c0028b7c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028b7e <x87::~x87()>:
c0028b7e:	83 ec 0c             	sub    esp,0xc
c0028b81:	83 ec 0c             	sub    esp,0xc
c0028b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b88:	e8 cd ff ff ff       	call   c0028b5a <x87::~x87()>
c0028b8d:	83 c4 10             	add    esp,0x10
c0028b90:	83 ec 08             	sub    esp,0x8
c0028b93:	68 58 01 00 00       	push   0x158
c0028b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b9c:	e8 8e 9e fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028ba1:	83 c4 10             	add    esp,0x10
c0028ba4:	83 c4 0c             	add    esp,0xc
c0028ba7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028ba8 <IOAPIC::~IOAPIC()>:
c0028ba8:	83 ec 0c             	sub    esp,0xc
c0028bab:	ba f4 cb 02 c0       	mov    edx,0xc002cbf4
c0028bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb4:	89 10                	mov    DWORD PTR [eax],edx
c0028bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bba:	83 ec 0c             	sub    esp,0xc
c0028bbd:	50                   	push   eax
c0028bbe:	e8 45 b2 fe ff       	call   c0013e08 <Device::~Device()>
c0028bc3:	83 c4 10             	add    esp,0x10
c0028bc6:	90                   	nop
c0028bc7:	83 c4 0c             	add    esp,0xc
c0028bca:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028bcc <IOAPIC::~IOAPIC()>:
c0028bcc:	83 ec 0c             	sub    esp,0xc
c0028bcf:	83 ec 0c             	sub    esp,0xc
c0028bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd6:	e8 cd ff ff ff       	call   c0028ba8 <IOAPIC::~IOAPIC()>
c0028bdb:	83 c4 10             	add    esp,0x10
c0028bde:	83 ec 08             	sub    esp,0x8
c0028be1:	68 68 01 00 00       	push   0x168
c0028be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bea:	e8 40 9e fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028bef:	83 c4 10             	add    esp,0x10
c0028bf2:	83 c4 0c             	add    esp,0xc
c0028bf5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028bf6 <APIC::~APIC()>:
c0028bf6:	83 ec 0c             	sub    esp,0xc
c0028bf9:	ba ac cb 02 c0       	mov    edx,0xc002cbac
c0028bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c02:	89 10                	mov    DWORD PTR [eax],edx
c0028c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c08:	83 ec 0c             	sub    esp,0xc
c0028c0b:	50                   	push   eax
c0028c0c:	e8 27 bd fe ff       	call   c0014938 <InterruptController::~InterruptController()>
c0028c11:	83 c4 10             	add    esp,0x10
c0028c14:	90                   	nop
c0028c15:	83 c4 0c             	add    esp,0xc
c0028c18:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028c1a <APIC::~APIC()>:
c0028c1a:	83 ec 0c             	sub    esp,0xc
c0028c1d:	83 ec 0c             	sub    esp,0xc
c0028c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c24:	e8 cd ff ff ff       	call   c0028bf6 <APIC::~APIC()>
c0028c29:	83 c4 10             	add    esp,0x10
c0028c2c:	83 ec 08             	sub    esp,0x8
c0028c2f:	68 58 21 00 00       	push   0x2158
c0028c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c38:	e8 f2 9d fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028c3d:	83 c4 10             	add    esp,0x10
c0028c40:	83 c4 0c             	add    esp,0xc
c0028c43:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028c44 <PIC::~PIC()>:
c0028c44:	83 ec 0c             	sub    esp,0xc
c0028c47:	ba 44 cc 02 c0       	mov    edx,0xc002cc44
c0028c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c50:	89 10                	mov    DWORD PTR [eax],edx
c0028c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c56:	83 ec 0c             	sub    esp,0xc
c0028c59:	50                   	push   eax
c0028c5a:	e8 d9 bc fe ff       	call   c0014938 <InterruptController::~InterruptController()>
c0028c5f:	83 c4 10             	add    esp,0x10
c0028c62:	90                   	nop
c0028c63:	83 c4 0c             	add    esp,0xc
c0028c66:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028c68 <PIC::~PIC()>:
c0028c68:	83 ec 0c             	sub    esp,0xc
c0028c6b:	83 ec 0c             	sub    esp,0xc
c0028c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c72:	e8 cd ff ff ff       	call   c0028c44 <PIC::~PIC()>
c0028c77:	83 c4 10             	add    esp,0x10
c0028c7a:	83 ec 08             	sub    esp,0x8
c0028c7d:	68 58 21 00 00       	push   0x2158
c0028c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c86:	e8 a4 9d fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028c8b:	83 c4 10             	add    esp,0x10
c0028c8e:	83 c4 0c             	add    esp,0xc
c0028c91:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028c92 <APICTimer::~APICTimer()>:
c0028c92:	83 ec 0c             	sub    esp,0xc
c0028c95:	ba 98 cc 02 c0       	mov    edx,0xc002cc98
c0028c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9e:	89 10                	mov    DWORD PTR [eax],edx
c0028ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca4:	83 ec 0c             	sub    esp,0xc
c0028ca7:	50                   	push   eax
c0028ca8:	e8 b1 db fe ff       	call   c001685e <Timer::~Timer()>
c0028cad:	83 c4 10             	add    esp,0x10
c0028cb0:	90                   	nop
c0028cb1:	83 c4 0c             	add    esp,0xc
c0028cb4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028cb6 <APICTimer::~APICTimer()>:
c0028cb6:	83 ec 0c             	sub    esp,0xc
c0028cb9:	83 ec 0c             	sub    esp,0xc
c0028cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc0:	e8 cd ff ff ff       	call   c0028c92 <APICTimer::~APICTimer()>
c0028cc5:	83 c4 10             	add    esp,0x10
c0028cc8:	83 ec 08             	sub    esp,0x8
c0028ccb:	68 60 01 00 00       	push   0x160
c0028cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd4:	e8 56 9d fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028cd9:	83 c4 10             	add    esp,0x10
c0028cdc:	83 c4 0c             	add    esp,0xc
c0028cdf:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028ce0 <PIT::~PIT()>:
c0028ce0:	83 ec 0c             	sub    esp,0xc
c0028ce3:	ba e8 cc 02 c0       	mov    edx,0xc002cce8
c0028ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cec:	89 10                	mov    DWORD PTR [eax],edx
c0028cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf2:	83 ec 0c             	sub    esp,0xc
c0028cf5:	50                   	push   eax
c0028cf6:	e8 63 db fe ff       	call   c001685e <Timer::~Timer()>
c0028cfb:	83 c4 10             	add    esp,0x10
c0028cfe:	90                   	nop
c0028cff:	83 c4 0c             	add    esp,0xc
c0028d02:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028d04 <PIT::~PIT()>:
c0028d04:	83 ec 0c             	sub    esp,0xc
c0028d07:	83 ec 0c             	sub    esp,0xc
c0028d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0e:	e8 cd ff ff ff       	call   c0028ce0 <PIT::~PIT()>
c0028d13:	83 c4 10             	add    esp,0x10
c0028d16:	83 ec 08             	sub    esp,0x8
c0028d19:	68 5c 01 00 00       	push   0x15c
c0028d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d22:	e8 08 9d fe ff       	call   c0012a2f <operator delete(void*, unsigned long)>
c0028d27:	83 c4 10             	add    esp,0x10
c0028d2a:	83 c4 0c             	add    esp,0xc
c0028d2d:	c3                   	ret    
